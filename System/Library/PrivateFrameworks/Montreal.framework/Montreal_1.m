void sub_19C113218()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C113228(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19C113230(uint64_t a1)
{
  return a1 + 112;
}

void sub_19C113238()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C113248(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19C113250()
{
  return 0;
}

_BYTE *sub_19C113258(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 312);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1985);
  v24 = sub_19C2210AC();
  sub_19C101DB0(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(_BYTE **)(a1 + 304);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1985);
  v28 = sub_19C2210AC();
  sub_19C101DB0(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v29 = *(_BYTE **)(a1 + 320);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1985);
  v32 = sub_19C2210AC();
  sub_19C101DB0(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v33 = *(_BYTE **)(a1 + 336);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1985);
  v36 = sub_19C2210AC();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v37 = *(_BYTE **)(a1 + 328);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1985);
  v40 = sub_19C2210AC();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v41 = *(_BYTE **)(a1 + 344);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1985);
  v44 = sub_19C2210AC();
  return sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C1134D8(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  int16x4_t **v11;
  int v12;
  int16x4_t **v13;
  int v14;
  int16x4_t **v15;
  int v16;
  int16x4_t **v17;
  int v18;
  int16x4_t **v19;
  int v20;
  int16x4_t **v21;
  int v22;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(int16x4_t ***)(a1 + 312);
  v12 = sub_19C2210AC();
  sub_19C102074(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v13 = *(int16x4_t ***)(a1 + 304);
  v14 = sub_19C2210AC();
  sub_19C102074(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v15 = *(int16x4_t ***)(a1 + 320);
  v16 = sub_19C2210AC();
  sub_19C102074(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v17 = *(int16x4_t ***)(a1 + 336);
  v18 = sub_19C2210AC();
  sub_19C102074(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v19 = *(int16x4_t ***)(a1 + 328);
  v20 = sub_19C2210AC();
  sub_19C102074(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v21 = *(int16x4_t ***)(a1 + 344);
  v22 = sub_19C2210AC();
  sub_19C102074(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

_QWORD **sub_19C1136C4(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  _QWORD **result;
  int v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  uint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  uint64_t v16;
  int16x8_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  int16x8_t *v26;
  int16x8_t *v27;
  int16x8_t *v28;
  uint64_t v29;
  int16x8_t *v30;
  int16x8_t *v31;
  int16x8_t *v32;
  uint64_t v33;
  int16x8_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  __int16 *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  int16x8_t *v43;
  int16x8_t *v44;
  int16x8_t *v45;
  uint64_t v46;
  int16x8_t *v47;
  int16x8_t *v48;
  int16x8_t *v49;
  uint64_t v50;
  int16x8_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  int16x8_t *v61;
  int16x8_t *v62;
  int16x8_t *v63;
  uint64_t v64;
  int16x8_t *v65;
  int16x8_t *v66;
  int16x8_t *v67;
  uint64_t v68;
  int16x8_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 *v72;
  __int16 *v73;
  __int16 *v74;
  __int16 v75;
  __int16 v76;
  __int16 v77;
  int16x8_t *v78;
  int16x8_t *v79;
  int16x8_t *v80;
  uint64_t v81;
  int16x8_t *v82;
  int16x8_t *v83;
  int16x8_t *v84;
  uint64_t v85;
  int16x8_t v86;
  uint64_t v87;
  uint64_t v88;
  __int16 *v89;
  __int16 *v90;
  __int16 *v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  int16x8_t *v95;
  int16x8_t *v96;
  int16x8_t *v97;
  uint64_t v98;
  int16x8_t *v99;
  int16x8_t *v100;
  int16x8_t *v101;
  uint64_t v102;
  int16x8_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 *v106;
  __int16 *v107;
  __int16 *v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;

  if (lpsrc)
  {
    v5 = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = *(_DWORD *)(a1 + 52);
    v8 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v8 < 1)
      goto LABEL_34;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = (_QWORD **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
  v7 = *(_DWORD *)(a1 + 52);
  v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 < 1)
    goto LABEL_34;
LABEL_7:
  v9 = (int16x8_t *)*result[39];
  v10 = (int16x8_t *)*v5[39];
  v11 = **(int16x8_t ***)(a1 + 312);
  if (v8 < 0x10)
  {
    v12 = 0;
LABEL_14:
    v18 = v8 - v12;
    v19 = v12;
    v20 = &v11->i16[v19];
    v21 = &v10->i16[v19];
    v22 = &v9->i16[v19];
    do
    {
      v24 = *v22++;
      v23 = v24;
      v25 = *v21++;
      *v20++ = v23 - v25;
      --v18;
    }
    while (v18);
    goto LABEL_16;
  }
  v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20)
    goto LABEL_14;
  v12 = v8 & 0x7FFFFFF0;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v11 + 1;
  v16 = v8 & 0xFFFFFFF0;
  do
  {
    v17 = vsubq_s16(*v13, *v14);
    v15[-1] = vsubq_s16(v13[-1], v14[-1]);
    *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 16;
  }
  while (v16);
  if (v12 != v8)
    goto LABEL_14;
LABEL_16:
  v26 = (int16x8_t *)*result[40];
  v27 = (int16x8_t *)*v5[40];
  v28 = **(int16x8_t ***)(a1 + 320);
  if (v8 < 0x10)
  {
    v29 = 0;
LABEL_23:
    v35 = v8 - v29;
    v36 = v29;
    v37 = &v28->i16[v36];
    v38 = &v27->i16[v36];
    v39 = &v26->i16[v36];
    do
    {
      v41 = *v39++;
      v40 = v41;
      v42 = *v38++;
      *v37++ = v40 - v42;
      --v35;
    }
    while (v35);
    goto LABEL_25;
  }
  v29 = 0;
  if ((unint64_t)((char *)v28 - (char *)v26) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)v28 - (char *)v27) < 0x20)
    goto LABEL_23;
  v29 = v8 & 0x7FFFFFF0;
  v30 = v26 + 1;
  v31 = v27 + 1;
  v32 = v28 + 1;
  v33 = v8 & 0xFFFFFFF0;
  do
  {
    v34 = vsubq_s16(*v30, *v31);
    v32[-1] = vsubq_s16(v30[-1], v31[-1]);
    *v32 = v34;
    v30 += 2;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v29 != v8)
    goto LABEL_23;
LABEL_25:
  v43 = (int16x8_t *)*result[38];
  v44 = (int16x8_t *)*v5[38];
  v45 = **(int16x8_t ***)(a1 + 304);
  if (v8 < 0x10)
  {
    v46 = 0;
LABEL_32:
    v52 = v8 - v46;
    v53 = v46;
    v54 = &v45->i16[v53];
    v55 = &v44->i16[v53];
    v56 = &v43->i16[v53];
    do
    {
      v58 = *v56++;
      v57 = v58;
      v59 = *v55++;
      *v54++ = v57 - v59;
      --v52;
    }
    while (v52);
    goto LABEL_34;
  }
  v46 = 0;
  if ((unint64_t)((char *)v45 - (char *)v43) < 0x20)
    goto LABEL_32;
  if ((unint64_t)((char *)v45 - (char *)v44) < 0x20)
    goto LABEL_32;
  v46 = v8 & 0x7FFFFFF0;
  v47 = v43 + 1;
  v48 = v44 + 1;
  v49 = v45 + 1;
  v50 = v8 & 0xFFFFFFF0;
  do
  {
    v51 = vsubq_s16(*v47, *v48);
    v49[-1] = vsubq_s16(v47[-1], v48[-1]);
    *v49 = v51;
    v47 += 2;
    v48 += 2;
    v49 += 2;
    v50 -= 16;
  }
  while (v50);
  if (v46 != v8)
    goto LABEL_32;
LABEL_34:
  if (!v7)
    return result;
  v60 = (v7 * v7);
  v61 = (int16x8_t *)*result[42];
  v62 = (int16x8_t *)*v5[42];
  v63 = **(int16x8_t ***)(a1 + 336);
  if (v60 < 0x10)
  {
    v64 = 0;
LABEL_42:
    v70 = v60 - v64;
    v71 = v64;
    v72 = &v63->i16[v71];
    v73 = &v62->i16[v71];
    v74 = &v61->i16[v71];
    do
    {
      v76 = *v74++;
      v75 = v76;
      v77 = *v73++;
      *v72++ = v75 - v77;
      --v70;
    }
    while (v70);
    goto LABEL_44;
  }
  v64 = 0;
  if ((unint64_t)((char *)v63 - (char *)v61) < 0x20)
    goto LABEL_42;
  if ((unint64_t)((char *)v63 - (char *)v62) < 0x20)
    goto LABEL_42;
  v64 = v60 & 0x7FFFFFF0;
  v65 = v61 + 1;
  v66 = v62 + 1;
  v67 = v63 + 1;
  v68 = v64;
  do
  {
    v69 = vsubq_s16(*v65, *v66);
    v67[-1] = vsubq_s16(v65[-1], v66[-1]);
    *v67 = v69;
    v65 += 2;
    v66 += 2;
    v67 += 2;
    v68 -= 16;
  }
  while (v68);
  if (v64 != v60)
    goto LABEL_42;
LABEL_44:
  v78 = (int16x8_t *)*result[43];
  v79 = (int16x8_t *)*v5[43];
  v80 = **(int16x8_t ***)(a1 + 344);
  if (v60 < 0x10)
  {
    v81 = 0;
LABEL_51:
    v87 = v60 - v81;
    v88 = v81;
    v89 = &v80->i16[v88];
    v90 = &v79->i16[v88];
    v91 = &v78->i16[v88];
    do
    {
      v93 = *v91++;
      v92 = v93;
      v94 = *v90++;
      *v89++ = v92 - v94;
      --v87;
    }
    while (v87);
    goto LABEL_53;
  }
  v81 = 0;
  if ((unint64_t)((char *)v80 - (char *)v78) < 0x20)
    goto LABEL_51;
  if ((unint64_t)((char *)v80 - (char *)v79) < 0x20)
    goto LABEL_51;
  v81 = v60 & 0x7FFFFFF0;
  v82 = v78 + 1;
  v83 = v79 + 1;
  v84 = v80 + 1;
  v85 = v81;
  do
  {
    v86 = vsubq_s16(*v82, *v83);
    v84[-1] = vsubq_s16(v82[-1], v83[-1]);
    *v84 = v86;
    v82 += 2;
    v83 += 2;
    v84 += 2;
    v85 -= 16;
  }
  while (v85);
  if (v81 != v60)
    goto LABEL_51;
LABEL_53:
  v95 = (int16x8_t *)*result[41];
  v96 = (int16x8_t *)*v5[41];
  v97 = **(int16x8_t ***)(a1 + 328);
  if (v60 < 0x10)
  {
    v98 = 0;
LABEL_60:
    v104 = v60 - v98;
    v105 = v98;
    v106 = &v97->i16[v105];
    v107 = &v96->i16[v105];
    v108 = &v95->i16[v105];
    do
    {
      v110 = *v108++;
      v109 = v110;
      v111 = *v107++;
      *v106++ = v109 - v111;
      --v104;
    }
    while (v104);
    return result;
  }
  v98 = 0;
  if ((unint64_t)((char *)v97 - (char *)v95) < 0x20)
    goto LABEL_60;
  if ((unint64_t)((char *)v97 - (char *)v96) < 0x20)
    goto LABEL_60;
  v98 = v60 & 0x7FFFFFF0;
  v99 = v95 + 1;
  v100 = v96 + 1;
  v101 = v97 + 1;
  v102 = v98;
  do
  {
    v103 = vsubq_s16(*v99, *v100);
    v101[-1] = vsubq_s16(v99[-1], v100[-1]);
    *v101 = v103;
    v99 += 2;
    v100 += 2;
    v101 += 2;
    v102 -= 16;
  }
  while (v102);
  if (v98 != v60)
    goto LABEL_60;
  return result;
}

void *sub_19C113BA4(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
  return result;
}

_QWORD **sub_19C113C0C(uint64_t a1, void *lpsrc)
{
  _QWORD **result;
  int v4;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int16x8_t *v11;
  int16x8_t *v12;
  uint64_t v13;
  int16x8_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *v18;
  __int16 v19;
  int16x8_t *v20;
  int16x8_t *v21;
  BOOL v22;
  uint64_t v23;
  int16x8_t *v24;
  int16x8_t *v25;
  uint64_t v26;
  int16x8_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  __int16 *v31;
  __int16 v32;
  int16x8_t *v33;
  int16x8_t *v34;
  BOOL v35;
  uint64_t v36;
  int16x8_t *v37;
  int16x8_t *v38;
  uint64_t v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v44;
  __int16 v45;
  uint64_t v46;
  int16x8_t *v47;
  int16x8_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  int16x8_t *v52;
  int16x8_t *v53;
  uint64_t v54;
  int16x8_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  __int16 v60;
  int16x8_t *v61;
  int16x8_t *v62;
  BOOL v63;
  uint64_t v64;
  int16x8_t *v65;
  int16x8_t *v66;
  uint64_t v67;
  int16x8_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  __int16 *v72;
  __int16 v73;
  int16x8_t *v74;
  int16x8_t *v75;
  BOOL v76;
  uint64_t v77;
  int16x8_t *v78;
  int16x8_t *v79;
  uint64_t v80;
  int16x8_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 *v84;
  __int16 *v85;
  __int16 v86;

  if (lpsrc)
  {
    result = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
    v4 = *(_DWORD *)(a1 + 52);
    v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1)
      goto LABEL_44;
  }
  else
  {
    result = 0;
    v4 = *(_DWORD *)(a1 + 52);
    v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1)
      goto LABEL_44;
  }
  v6 = **(int16x8_t ***)(a1 + 312);
  v7 = (int16x8_t *)*result[39];
  v8 = 2 * v5;
  if (v5 >= 0x10
    && (v6 < (int16x8_t *)&v7->i8[v8] ? (v9 = v7 >= (int16x8_t *)&v6->i8[v8]) : (v9 = 1), v9))
  {
    v10 = v5 & 0x7FFFFFF0;
    v11 = v6 + 1;
    v12 = v7 + 1;
    v13 = v5 & 0xFFFFFFF0;
    do
    {
      v14 = vaddq_s16(*v12, *v11);
      v11[-1] = vaddq_s16(v12[-1], v11[-1]);
      *v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
    if (v10 == v5)
      goto LABEL_18;
  }
  else
  {
    v10 = 0;
  }
  v15 = v5 - v10;
  v16 = v10;
  v17 = &v7->i16[v16];
  v18 = &v6->i16[v16];
  do
  {
    v19 = *v17++;
    *v18++ += v19;
    --v15;
  }
  while (v15);
LABEL_18:
  v20 = **(int16x8_t ***)(a1 + 304);
  v21 = (int16x8_t *)*result[38];
  if (v5 >= 0x10
    && (v20 < (int16x8_t *)&v21->i8[v8] ? (v22 = v21 >= (int16x8_t *)&v20->i8[v8]) : (v22 = 1), v22))
  {
    v23 = v5 & 0x7FFFFFF0;
    v24 = v20 + 1;
    v25 = v21 + 1;
    v26 = v5 & 0xFFFFFFF0;
    do
    {
      v27 = vaddq_s16(*v25, *v24);
      v24[-1] = vaddq_s16(v25[-1], v24[-1]);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v23 == v5)
      goto LABEL_31;
  }
  else
  {
    v23 = 0;
  }
  v28 = v5 - v23;
  v29 = v23;
  v30 = &v21->i16[v29];
  v31 = &v20->i16[v29];
  do
  {
    v32 = *v30++;
    *v31++ += v32;
    --v28;
  }
  while (v28);
LABEL_31:
  v33 = **(int16x8_t ***)(a1 + 320);
  v34 = (int16x8_t *)*result[40];
  if (v5 < 0x10
    || (v33 < (int16x8_t *)&v34->i8[v8] ? (v35 = v34 >= (int16x8_t *)&v33->i8[v8]) : (v35 = 1), !v35))
  {
    v36 = 0;
LABEL_42:
    v41 = v5 - v36;
    v42 = v36;
    v43 = &v34->i16[v36];
    v44 = &v33->i16[v42];
    do
    {
      v45 = *v43++;
      *v44++ += v45;
      --v41;
    }
    while (v41);
    goto LABEL_44;
  }
  v36 = v5 & 0x7FFFFFF0;
  v37 = v33 + 1;
  v38 = v34 + 1;
  v39 = v5 & 0xFFFFFFF0;
  do
  {
    v40 = vaddq_s16(*v38, *v37);
    v37[-1] = vaddq_s16(v38[-1], v37[-1]);
    *v37 = v40;
    v37 += 2;
    v38 += 2;
    v39 -= 16;
  }
  while (v39);
  if (v36 != v5)
    goto LABEL_42;
LABEL_44:
  if (!v4)
    return result;
  v46 = (v4 * v4);
  v47 = **(int16x8_t ***)(a1 + 336);
  v48 = (int16x8_t *)*result[42];
  v49 = 2 * v46;
  if (v46 >= 0x10
    && (v47 < (int16x8_t *)&v48->i8[v49] ? (v50 = v48 >= (int16x8_t *)&v47->i8[v49]) : (v50 = 1), v50))
  {
    v51 = v46 & 0x7FFFFFF0;
    v52 = v47 + 1;
    v53 = v48 + 1;
    v54 = v51;
    do
    {
      v55 = vaddq_s16(*v53, *v52);
      v52[-1] = vaddq_s16(v53[-1], v52[-1]);
      *v52 = v55;
      v52 += 2;
      v53 += 2;
      v54 -= 16;
    }
    while (v54);
    if (v51 == v46)
      goto LABEL_58;
  }
  else
  {
    v51 = 0;
  }
  v56 = v46 - v51;
  v57 = v51;
  v58 = &v48->i16[v57];
  v59 = &v47->i16[v57];
  do
  {
    v60 = *v58++;
    *v59++ += v60;
    --v56;
  }
  while (v56);
LABEL_58:
  v61 = **(int16x8_t ***)(a1 + 328);
  v62 = (int16x8_t *)*result[41];
  if (v46 >= 0x10
    && (v61 < (int16x8_t *)&v62->i8[v49] ? (v63 = v62 >= (int16x8_t *)&v61->i8[v49]) : (v63 = 1), v63))
  {
    v64 = v46 & 0x7FFFFFF0;
    v65 = v61 + 1;
    v66 = v62 + 1;
    v67 = v64;
    do
    {
      v68 = vaddq_s16(*v66, *v65);
      v65[-1] = vaddq_s16(v66[-1], v65[-1]);
      *v65 = v68;
      v65 += 2;
      v66 += 2;
      v67 -= 16;
    }
    while (v67);
    if (v64 == v46)
      goto LABEL_71;
  }
  else
  {
    v64 = 0;
  }
  v69 = v46 - v64;
  v70 = v64;
  v71 = &v62->i16[v70];
  v72 = &v61->i16[v70];
  do
  {
    v73 = *v71++;
    *v72++ += v73;
    --v69;
  }
  while (v69);
LABEL_71:
  v74 = **(int16x8_t ***)(a1 + 344);
  v75 = (int16x8_t *)*result[43];
  if (v46 < 0x10
    || (v74 < (int16x8_t *)&v75->i8[v49] ? (v76 = v75 >= (int16x8_t *)&v74->i8[v49]) : (v76 = 1), !v76))
  {
    v77 = 0;
LABEL_82:
    v82 = v46 - v77;
    v83 = v77;
    v84 = &v75->i16[v77];
    v85 = &v74->i16[v83];
    do
    {
      v86 = *v84++;
      *v85++ += v86;
      --v82;
    }
    while (v82);
    return result;
  }
  v77 = v46 & 0x7FFFFFF0;
  v78 = v74 + 1;
  v79 = v75 + 1;
  v80 = v77;
  do
  {
    v81 = vaddq_s16(*v79, *v78);
    v78[-1] = vaddq_s16(v79[-1], v78[-1]);
    *v78 = v81;
    v78 += 2;
    v79 += 2;
    v80 -= 16;
  }
  while (v80);
  if (v77 != v46)
    goto LABEL_82;
  return result;
}

void sub_19C114014(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1128) + 64))(*(_QWORD *)(a1 + 1128));
  sub_19C2210D4(23);
}

uint64_t sub_19C114060(uint64_t result, float a2, double a3, double a4)
{
  float v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  float v9;
  BOOL v10;
  _WORD *v11;
  uint64_t v12;
  float v13;
  _WORD *v14;
  float v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  float v19;
  _WORD *v20;
  uint64_t v21;
  float v22;
  _WORD *v23;
  float v24;

  v4 = -a2;
  v5 = *(_DWORD *)(result + 52);
  v6 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v6 >= 1)
  {
    v7 = **(_WORD ***)(result + 312);
    v8 = (*(_DWORD *)(result + 48) * v5);
    do
    {
      LOWORD(a4) = *v7;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v9 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v9 > a2))
        *v7 = (int)*(float *)&a4;
      ++v7;
      --v8;
    }
    while (v8);
    v11 = **(_WORD ***)(result + 304);
    v12 = v6;
    do
    {
      LOWORD(a4) = *v11;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v13 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v13 > a2))
        *v11 = (int)*(float *)&a4;
      ++v11;
      --v12;
    }
    while (v12);
    v14 = **(_WORD ***)(result + 320);
    do
    {
      LOWORD(a4) = *v14;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v15 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v15 > a2))
        *v14 = (int)*(float *)&a4;
      ++v14;
      --v6;
    }
    while (v6);
  }
  if (v5)
  {
    v16 = (v5 * v5);
    v17 = **(_WORD ***)(result + 336);
    v18 = v16;
    do
    {
      LOWORD(a4) = *v17;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v19 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v19 > a2))
        *v17 = (int)*(float *)&a4;
      ++v17;
      --v18;
    }
    while (v18);
    v20 = **(_WORD ***)(result + 328);
    v21 = v16;
    do
    {
      LOWORD(a4) = *v20;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v22 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v22 > a2))
        *v20 = (int)*(float *)&a4;
      ++v20;
      --v21;
    }
    while (v21);
    v23 = **(_WORD ***)(result + 344);
    do
    {
      LOWORD(a4) = *v23;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v24 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v24 > a2))
        *v23 = (int)*(float *)&a4;
      ++v23;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_19C114240(uint64_t result, float a2, __n128 a3)
{
  int v3;
  uint64_t v4;
  int16x4_t *v5;
  uint64_t v6;
  int16x4_t *v7;
  uint64_t v8;
  int16x8_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int16x4_t *v13;
  uint64_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int16x4_t *v18;
  uint64_t v19;
  int16x4_t *v20;
  uint64_t v21;
  int16x8_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int16x4_t *v26;
  uint64_t v27;
  int16x4_t *v28;
  uint64_t v29;
  int16x8_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  int16x4_t *v33;
  uint64_t v34;
  int16x4_t *v35;
  uint64_t v36;
  int16x8_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int16x4_t *v40;
  uint64_t v41;
  int16x4_t *v42;
  uint64_t v43;
  int16x8_t v44;
  uint64_t v45;
  unsigned __int16 *v46;

  v3 = *(_DWORD *)(result + 52);
  v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 < 1)
    goto LABEL_23;
  v5 = **(int16x4_t ***)(result + 312);
  if (v4 < 0x10)
  {
    v6 = 0;
LABEL_7:
    v10 = v4 - v6;
    v11 = (unsigned __int16 *)v5 + v6;
    do
    {
      a3.n128_u16[0] = *v11;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v11++ = (int)a3.n128_f32[0];
      --v10;
    }
    while (v10);
    goto LABEL_9;
  }
  v6 = v4 & 0x7FFFFFF0;
  v7 = v5 + 2;
  v8 = v4 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v7[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v7[-2].i8)), a2)));
    v9 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v7)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v7->i8)), a2)));
    *(__n128 *)v7[-2].i8 = a3;
    *(int16x8_t *)v7->i8 = v9;
    v7 += 4;
    v8 -= 16;
  }
  while (v8);
  if (v6 != v4)
    goto LABEL_7;
LABEL_9:
  if (v4 >= 0x10)
  {
    v12 = v4 & 0x7FFFFFF0;
    v13 = v5 + 2;
    v14 = v4 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v13[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13[-2].i8)), a2)));
      v15 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), a2)));
      *(__n128 *)v13[-2].i8 = a3;
      *(int16x8_t *)v13->i8 = v15;
      v13 += 4;
      v14 -= 16;
    }
    while (v14);
    if (v12 == v4)
      goto LABEL_16;
  }
  else
  {
    v12 = 0;
  }
  v16 = v4 - v12;
  v17 = (unsigned __int16 *)v5 + v12;
  do
  {
    a3.n128_u16[0] = *v17;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
    *v17++ = (int)a3.n128_f32[0];
    --v16;
  }
  while (v16);
LABEL_16:
  v18 = **(int16x4_t ***)(result + 320);
  if (v4 < 0x10)
  {
    v19 = 0;
LABEL_21:
    v23 = v4 - v19;
    v24 = (unsigned __int16 *)v18 + v19;
    do
    {
      a3.n128_u16[0] = *v24;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v24++ = (int)a3.n128_f32[0];
      --v23;
    }
    while (v23);
    goto LABEL_23;
  }
  v19 = v4 & 0x7FFFFFF0;
  v20 = v18 + 2;
  v21 = v4 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v20[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20[-2].i8)), a2)));
    v22 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v20)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20->i8)), a2)));
    *(__n128 *)v20[-2].i8 = a3;
    *(int16x8_t *)v20->i8 = v22;
    v20 += 4;
    v21 -= 16;
  }
  while (v21);
  if (v19 != v4)
    goto LABEL_21;
LABEL_23:
  if (!v3)
    return result;
  v25 = (v3 * v3);
  v26 = **(int16x4_t ***)(result + 336);
  if (v25 < 0x10)
  {
    v27 = 0;
LABEL_29:
    v31 = v25 - v27;
    v32 = (unsigned __int16 *)v26 + v27;
    do
    {
      a3.n128_u16[0] = *v32;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v32++ = (int)a3.n128_f32[0];
      --v31;
    }
    while (v31);
    goto LABEL_31;
  }
  v27 = v25 & 0x7FFFFFF0;
  v28 = v26 + 2;
  v29 = v27;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v28[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28[-2].i8)), a2)));
    v30 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v28)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28->i8)), a2)));
    *(__n128 *)v28[-2].i8 = a3;
    *(int16x8_t *)v28->i8 = v30;
    v28 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v27 != v25)
    goto LABEL_29;
LABEL_31:
  v33 = **(int16x4_t ***)(result + 328);
  if (v25 < 0x10)
  {
    v34 = 0;
LABEL_36:
    v38 = v25 - v34;
    v39 = (unsigned __int16 *)v33 + v34;
    do
    {
      a3.n128_u16[0] = *v39;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v39++ = (int)a3.n128_f32[0];
      --v38;
    }
    while (v38);
    goto LABEL_38;
  }
  v34 = v25 & 0x7FFFFFF0;
  v35 = v33 + 2;
  v36 = v34;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v35[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35[-2].i8)), a2)));
    v37 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v35)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35->i8)), a2)));
    *(__n128 *)v35[-2].i8 = a3;
    *(int16x8_t *)v35->i8 = v37;
    v35 += 4;
    v36 -= 16;
  }
  while (v36);
  if (v34 != v25)
    goto LABEL_36;
LABEL_38:
  v40 = **(int16x4_t ***)(result + 344);
  if (v25 < 0x10)
  {
    v41 = 0;
LABEL_43:
    v45 = v25 - v41;
    v46 = (unsigned __int16 *)v40 + v41;
    do
    {
      a3.n128_u16[0] = *v46;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v46++ = (int)a3.n128_f32[0];
      --v45;
    }
    while (v45);
    return result;
  }
  v41 = v25 & 0x7FFFFFF0;
  v42 = v40 + 2;
  v43 = v41;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v42[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42[-2].i8)), a2)));
    v44 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v42)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42->i8)), a2)));
    *(__n128 *)v42[-2].i8 = a3;
    *(int16x8_t *)v42->i8 = v44;
    v42 += 4;
    v43 -= 16;
  }
  while (v43);
  if (v41 != v25)
    goto LABEL_43;
  return result;
}

void sub_19C114674(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 52);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = (char *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)*a2;
    v12 = (uint64_t)&v9[-*a2] >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      goto LABEL_40;
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        goto LABEL_41;
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = (char *)*a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
  v18 = (_QWORD *)operator new();
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  *v18 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  v21 = *(_DWORD *)(a1 + 52);
  v23 = (char *)a2[1];
  v22 = a2[2];
  if ((unint64_t)v23 < v22)
  {
    *(_DWORD *)v23 = v21;
    *((_QWORD *)v23 + 1) = v18;
    v24 = v23 + 16;
    goto LABEL_39;
  }
  v25 = (char *)*a2;
  v26 = (uint64_t)&v23[-*a2] >> 4;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60)
LABEL_40:
    sub_19C07DA0C();
  v28 = v22 - (_QWORD)v25;
  if (v28 >> 3 > v27)
    v27 = v28 >> 3;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
    v29 = 0xFFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (!v29)
  {
    v30 = 0;
    goto LABEL_34;
  }
  if (v29 >> 60)
LABEL_41:
    sub_19C07C7FC();
  v30 = (char *)operator new(16 * v29);
LABEL_34:
  v31 = &v30[16 * v26];
  *(_DWORD *)v31 = v21;
  *((_QWORD *)v31 + 1) = v18;
  v24 = v31 + 16;
  if (v23 != v25)
  {
    do
    {
      *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
      v31 -= 16;
      v23 -= 16;
    }
    while (v23 != v25);
    v23 = (char *)*a2;
  }
  *a2 = v31;
  a2[1] = v24;
  a2[2] = &v30[16 * v29];
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v24;
}

void sub_19C114918(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C11492C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C114940(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v7 = *(int *)(a1 + 52);
  v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + v9), 4 * v7);
  v10 = *a4;
  *a4 = v10 + 1;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19C1149EC(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a1 + 112);
  v8 = 8 * a3;
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + v8), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void sub_19C114A78(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19C114AEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];

  v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[140] + 16))(a1[140]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[141] + 16))(a1[141]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[142] + 16))(a1[142]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[143] + 16))(a1[143]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[144] + 16))(a1[144]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[145] + 16))(a1[145]);
  v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
}

void sub_19C114E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C114E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;

  v4 = **(_QWORD **)(a1 + 304);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_74;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_75;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 312);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_74;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_75;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 320);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_74;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_75;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 328);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_74;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_75;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v58 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v59 = **(_QWORD **)(a1 + 336);
  v60 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *v49 = v59;
    v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  v62 = *(_QWORD **)a2;
  v63 = (uint64_t)v49 - *(_QWORD *)a2;
  v64 = (v63 >> 4) + 1;
  if (v64 >> 60)
    goto LABEL_74;
  v65 = v60 - (_QWORD)v62;
  if (v65 >> 3 > v64)
    v64 = v65 >> 3;
  v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v66 = v64;
  if (v66 >> 60)
LABEL_75:
    sub_19C07C7FC();
  v67 = 16 * v66;
  v68 = (char *)operator new(16 * v66);
  v69 = &v68[16 * (v63 >> 4)];
  *(_QWORD *)v69 = v59;
  v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((_QWORD *)v69 + 1) = v49[1])
  {
    v70 = *(v49 - 2);
    v49 -= 2;
    *((_QWORD *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(_QWORD *)a2 = v69;
  *(_QWORD *)(a2 + 8) = v61;
  *(_QWORD *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(_QWORD *)(a2 + 8) = v61;
  v71 = **(_QWORD **)(a1 + 344);
  v72 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *v61 = v71;
    v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  v74 = *(_QWORD **)a2;
  v75 = (uint64_t)v61 - *(_QWORD *)a2;
  v76 = (v75 >> 4) + 1;
  if (v76 >> 60)
LABEL_74:
    sub_19C07DA0C();
  v77 = v72 - (_QWORD)v74;
  if (v77 >> 3 > v76)
    v76 = v77 >> 3;
  v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v78 = v76;
  if (v78 >> 60)
    goto LABEL_75;
  v79 = 16 * v78;
  v80 = (char *)operator new(16 * v78);
  v81 = &v80[16 * (v75 >> 4)];
  *(_QWORD *)v81 = v71;
  v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((_QWORD *)v81 + 1) = v61[1])
  {
    v82 = *(v61 - 2);
    v61 -= 2;
    *((_QWORD *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(_QWORD *)a2 = v81;
  *(_QWORD *)(a2 + 8) = v73;
  *(_QWORD *)(a2 + 16) = &v80[v79];
  if (v74)
    operator delete(v74);
LABEL_73:
  *(_QWORD *)(a2 + 8) = v73;
}

uint64_t sub_19C115380(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C11538C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C115394(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from allocAll");
  sub_19C110F0C(a1);
  operator delete(__p);
}

void sub_19C115418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C115434(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;

  v2 = a1[250];
  v3 = a1[249];
  if (v2 == v3)
  {
    v3 = a1[250];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[250];
        v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[253];
  v7 = a1[252];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[253];
        v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    v10 = a1[102];
    v11 = a1[101];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  v10 = a1[102];
  v11 = a1[101];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[102];
      v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  v16 = a1[132];
  v17 = a1[131];
  if (v16 == v17)
  {
    v17 = a1[132];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[132];
        v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  v22 = a1[117];
  v23 = a1[116];
  if (v22 == v23)
  {
    v23 = a1[117];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[117];
        v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19C115634(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C11563C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C115648(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  int16x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float *v17;
  unsigned __int16 *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  int16x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  unsigned __int16 *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  int16x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  float *v41;
  unsigned __int16 *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int16x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float *v55;
  unsigned __int16 *v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  int16x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  unsigned __int16 *v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  int16x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float *v79;
  unsigned __int16 *v80;
  float v81;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = (int)a2;
  if (*(int *)(result + 56) >= 1)
  {
    sub_19C1029D4(result + 712, (float)v5, result + 240, v4);
    sub_19C1029D4(v3 + 952, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    result = sub_19C1029D4(v3 + 832, (float)v5, v3 + 232, *(_DWORD *)(v3 + 52));
    goto LABEL_25;
  }
  v6 = v4 * *(_DWORD *)(result + 48);
  if ((int)v6 < 1)
    goto LABEL_25;
  v7 = *(_QWORD *)(result + 240);
  v8 = *(_QWORD *)(result + 1072);
  v9 = (float)v5;
  if (v6 < 8)
  {
    v10 = 0;
LABEL_9:
    v16 = v6 - v10;
    v17 = (float *)(v8 + 4 * v10);
    v18 = (unsigned __int16 *)(v7 + 2 * v10);
    do
    {
      a3.n128_u16[0] = *v18;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v19 = *v17++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v19 * v9);
      *v18++ = (int)a3.n128_f32[0];
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  v10 = v6 & 0x7FFFFFF8;
  v11 = v6 & 0xFFFFFFF8;
  v12 = *(float32x4_t **)(result + 1072);
  v13 = *(int16x4_t **)(result + 240);
  do
  {
    v14 = *v12;
    v15 = v12[1];
    v12 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), v14, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), v15, v9)));
    *(__n128 *)v13->i8 = a3;
    v13 += 2;
    v11 -= 8;
  }
  while (v11);
  if (v10 != v6)
    goto LABEL_9;
LABEL_11:
  v20 = *(_QWORD *)(result + 248);
  v21 = *(_QWORD *)(result + 1088);
  if (v6 >= 8)
  {
    v22 = v6 & 0x7FFFFFF8;
    v23 = v6 & 0xFFFFFFF8;
    v24 = *(float32x4_t **)(result + 1088);
    v25 = *(int16x4_t **)(result + 248);
    do
    {
      v26 = *v24;
      v27 = v24[1];
      v24 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v25)), v26, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v25->i8)), v27, v9)));
      *(__n128 *)v25->i8 = a3;
      v25 += 2;
      v23 -= 8;
    }
    while (v23);
    if (v22 == v6)
      goto LABEL_18;
  }
  else
  {
    v22 = 0;
  }
  v28 = v6 - v22;
  v29 = (float *)(v21 + 4 * v22);
  v30 = (unsigned __int16 *)(v20 + 2 * v22);
  do
  {
    a3.n128_u16[0] = *v30;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    v31 = *v29++;
    a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v31 * v9);
    *v30++ = (int)a3.n128_f32[0];
    --v28;
  }
  while (v28);
LABEL_18:
  v32 = *(_QWORD *)(result + 232);
  v33 = *(_QWORD *)(result + 1080);
  if (v6 < 8)
  {
    v34 = 0;
LABEL_23:
    v40 = v6 - v34;
    v41 = (float *)(v33 + 4 * v34);
    v42 = (unsigned __int16 *)(v32 + 2 * v34);
    do
    {
      a3.n128_u16[0] = *v42;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v43 = *v41++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v43 * v9);
      *v42++ = (int)a3.n128_f32[0];
      --v40;
    }
    while (v40);
    goto LABEL_25;
  }
  v34 = v6 & 0x7FFFFFF8;
  v35 = v6 & 0xFFFFFFF8;
  v36 = *(float32x4_t **)(result + 1080);
  v37 = *(int16x4_t **)(result + 232);
  do
  {
    v38 = *v36;
    v39 = v36[1];
    v36 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v37)), v38, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v37->i8)), v39, v9)));
    *(__n128 *)v37->i8 = a3;
    v37 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v34 != v6)
    goto LABEL_23;
LABEL_25:
  if (!v4)
    return result;
  v44 = v4 * v4;
  v45 = *(_QWORD *)(v3 + 264);
  v46 = *(_QWORD *)(v3 + 1096);
  v47 = (float)v5;
  if (v44 < 8)
  {
    v48 = 0;
LABEL_31:
    v54 = v44 - v48;
    v55 = (float *)(v46 + 4 * v48);
    v56 = (unsigned __int16 *)(v45 + 2 * v48);
    do
    {
      a3.n128_u16[0] = *v56;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v57 = *v55++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v57 * v47);
      *v56++ = (int)a3.n128_f32[0];
      --v54;
    }
    while (v54);
    goto LABEL_33;
  }
  v48 = v44 & 0x7FFFFFF8;
  v49 = v48;
  v50 = *(float32x4_t **)(v3 + 1096);
  v51 = *(int16x4_t **)(v3 + 264);
  do
  {
    v52 = *v50;
    v53 = v50[1];
    v50 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v51)), v52, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v51->i8)), v53, v47)));
    *(__n128 *)v51->i8 = a3;
    v51 += 2;
    v49 -= 8;
  }
  while (v49);
  if (v48 != v44)
    goto LABEL_31;
LABEL_33:
  v58 = *(_QWORD *)(v3 + 272);
  v59 = *(_QWORD *)(v3 + 1112);
  if (v44 < 8)
  {
    v60 = 0;
LABEL_38:
    v66 = v44 - v60;
    v67 = (float *)(v59 + 4 * v60);
    v68 = (unsigned __int16 *)(v58 + 2 * v60);
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v69 = *v67++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v69 * v47);
      *v68++ = (int)a3.n128_f32[0];
      --v66;
    }
    while (v66);
    goto LABEL_40;
  }
  v60 = v44 & 0x7FFFFFF8;
  v61 = v60;
  v62 = *(float32x4_t **)(v3 + 1112);
  v63 = *(int16x4_t **)(v3 + 272);
  do
  {
    v64 = *v62;
    v65 = v62[1];
    v62 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v63)), v64, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v63->i8)), v65, v47)));
    *(__n128 *)v63->i8 = a3;
    v63 += 2;
    v61 -= 8;
  }
  while (v61);
  if (v60 != v44)
    goto LABEL_38;
LABEL_40:
  v70 = *(_QWORD *)(v3 + 256);
  v71 = *(_QWORD *)(v3 + 1104);
  if (v44 < 8)
  {
    v72 = 0;
LABEL_45:
    v78 = v44 - v72;
    v79 = (float *)(v71 + 4 * v72);
    v80 = (unsigned __int16 *)(v70 + 2 * v72);
    do
    {
      a3.n128_u16[0] = *v80;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v81 = *v79++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v81 * v47);
      *v80++ = (int)a3.n128_f32[0];
      --v78;
    }
    while (v78);
    return result;
  }
  v72 = v44 & 0x7FFFFFF8;
  v73 = v72;
  v74 = *(float32x4_t **)(v3 + 1104);
  v75 = *(int16x4_t **)(v3 + 256);
  do
  {
    v76 = *v74;
    v77 = v74[1];
    v74 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v75)), v76, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v75->i8)), v77, v47)));
    *(__n128 *)v75->i8 = a3;
    v75 += 2;
    v73 -= 8;
  }
  while (v73);
  if (v72 != v44)
    goto LABEL_45;
  return result;
}

void sub_19C115A78(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  float32x4_t **v6;
  int v7;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t v45;
  uint64_t v46;
  float *v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  int v68;
  uint64_t v69;
  char *v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x4_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v120;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  float32x4_t v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  float32x4_t *v146;
  float32x4_t *v147;
  int v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int v152;
  uint64_t v153;
  float32x4_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v160;
  uint64_t v161;
  float32x4_t *v162;
  float32x4_t *v163;
  float32x4_t v164;
  uint64_t v165;
  float *v166;
  float *v167;
  float v168;
  uint64_t *v169;
  int v170;
  float32x4_t *v171;
  float32x4_t *v172;
  float32x4_t *v173;
  uint64_t v174;
  float32x4_t v175;
  float32x4_t *v176;
  uint64_t v177;
  float32x4_t v178;
  uint64_t v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t *v183;
  float32x4_t *v184;
  float32x4_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t v197;
  uint64_t v198;
  float *v199;
  float *v200;
  float v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  float32x4_t *v205;
  float32x4_t *v206;
  int v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int v211;
  uint64_t v212;
  float32x4_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v219;
  uint64_t v220;
  float32x4_t *v221;
  float32x4_t *v222;
  float32x4_t v223;
  uint64_t v224;
  float *v225;
  float *v226;
  float v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x4_t *v232;
  float32x4_t *v233;
  int v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v246;
  uint64_t v247;
  float32x4_t *v248;
  float32x4_t *v249;
  float32x4_t v250;
  uint64_t v251;
  float *v252;
  float *v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  float32x4_t *v258;
  float32x4_t *v259;
  int v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v272;
  uint64_t v273;
  float32x4_t *v274;
  float32x4_t *v275;
  float32x4_t v276;
  uint64_t v277;
  float *v278;
  float *v279;
  float v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  NSObject *global_queue;
  uint64_t v287;
  uint64_t v288;
  size_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  size_t v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  NSObject *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  size_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  size_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _BYTE *v322;
  _BYTE *v323;
  size_t v324;
  int v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  size_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __int128 *v338;
  _OWORD *v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  int *v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  _BYTE *v351;
  size_t v352;
  int v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 *v360;
  _OWORD *v361;
  uint64_t v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  int *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _BYTE *v372;
  _BYTE *v373;
  size_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  __int128 *v380;
  _OWORD *v381;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  int *v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  void **v391;
  void **v395;
  int v396;
  uint64_t v397;
  void **v398;
  uint64_t v399;
  int v400;
  uint64_t block;
  uint64_t v402;
  void (*v403)(uint64_t, uint64_t);
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;

  v400 = a5 - 1;
  if (a5 >= 1)
  {
    v391 = (void **)(a1 + 704);
    v398 = (void **)(a1 + 1168);
    v395 = (void **)(a1 + 1184);
    v6 = (float32x4_t **)(a1 + 1176);
    v7 = a5 - 1;
    while (1)
    {
      v9 = *(unsigned __int8 *)(a1 + 2040);
      if (*(_BYTE *)(a1 + 2040))
        v10 = v400 - v7;
      else
        v10 = v7;
      if (*(_BYTE *)(a1 + 2040))
        v11 = v10 < v400;
      else
        v11 = v10 > 0;
      if (*(_BYTE *)(a1 + 2040))
        v12 = v10 > 0;
      else
        v12 = v10 < v400;
      v13 = v10 - 1;
      if (*(_BYTE *)(a1 + 2040))
        v14 = v10 + 1;
      else
        v14 = v10 - 1;
      v396 = v14;
      memmove(*(void **)(*(_QWORD *)(a1 + 584) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      v15 = 8 * v10;
      if (v12)
      {
        if (!v9)
          v13 = v10 + 1;
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        sub_19C1032B4(v391, (uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v13), *(__int16 ***)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        v16 = *(_QWORD *)(a1 + 584);
        v17 = *(_QWORD *)(a1 + 472);
        v18 = *(int *)(a1 + 52);
        v19 = (int)v18 / 8;
        if ((int)v18 >= 8)
        {
          v20 = *(float32x4_t **)(v16 + 8 * v10);
          v21 = *(float32x4_t **)(v17 + 8 * v13);
          v22 = (int)v18 / 8;
          v23 = (float32x4_t *)*v391;
          do
          {
            v25 = *v23;
            v24 = v23[1];
            v23 += 2;
            v27 = *v21;
            v26 = v21[1];
            v21 += 2;
            v28 = vmlaq_f32(v20[1], v26, v24);
            *v20 = vmlaq_f32(*v20, v27, v25);
            v20[1] = v28;
            v20 += 2;
            --v22;
          }
          while (v22);
        }
        v29 = 8 * v19;
        if (8 * v19 < (int)v18)
        {
          v30 = *(_QWORD *)(v17 + 8 * v13);
          v31 = (char *)*v391;
          v32 = *(_QWORD *)(v16 + 8 * v10);
          v33 = v29;
          v34 = v18 - v29;
          if (v34 < 8)
            goto LABEL_39;
          v35 = 4 * v29;
          v36 = v32 + 4 * v18;
          v37 = v32 + v35 >= (unint64_t)(v30 + 4 * v18) || v30 + 4 * v29 >= v36;
          v38 = !v37;
          if ((unint64_t)&v31[v35] < v36 && v32 + v35 < (unint64_t)&v31[4 * v18])
            goto LABEL_39;
          if (v38)
            goto LABEL_39;
          v40 = v34 - (v18 & 7) + v33;
          v41 = v33 + (v18 & 7) - v18;
          v42 = (float32x4_t *)(v32 + v35 + 16);
          v43 = (float32x4_t *)&v31[v35 + 16];
          v44 = (float32x4_t *)(v30 + v35 + 16);
          do
          {
            v45 = vmlaq_f32(*v42, *v44, *v43);
            v42[-1] = vmlaq_f32(v42[-1], v44[-1], v43[-1]);
            *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 += 2;
            v41 += 8;
          }
          while (v41);
          v33 = v40;
          if ((v18 & 7) != 0)
          {
LABEL_39:
            v46 = v18 - v33;
            v47 = (float *)(v32 + 4 * v33);
            v48 = (float *)(v30 + 4 * v33);
            v49 = (float *)&v31[4 * v33];
            do
            {
              v50 = *v49++;
              v51 = v50;
              v52 = *v48++;
              *v47 = *v47 + (float)(v52 * v51);
              ++v47;
              --v46;
            }
            while (v46);
          }
        }
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 584) + v15), (uint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v13), *(__int16 ***)(a1 + 328), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 584) + v15), (uint64_t *)(*(_QWORD *)(a1 + 656) + 8 * v13), *(__int16 ***)(a1 + 336), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      sub_19C102BD8(v398, (const void **)(*(_QWORD *)(a1 + 424) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19C102BD8(v395, (const void **)(*(_QWORD *)(a1 + 400) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19C102BD8((void **)(a1 + 1176), (const void **)(*(_QWORD *)(a1 + 376) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v10), 4 * *(int *)(a1 + 52));
      v53 = *(_QWORD *)(a1 + 608);
      v54 = *(unsigned int *)(a1 + 52);
      v55 = (int)v54;
      if ((int)v54 <= 0)
      {
        v74 = -8 * (-(int)v54 >> 3);
        if (v74 >= (int)v55)
          goto LABEL_61;
LABEL_53:
        v75 = *(_QWORD *)(v53 + 8 * v10);
        v76 = (char *)*v398;
        v77 = v74;
        v78 = v55 - v74;
        if (v78 < 8)
          goto LABEL_59;
        v79 = v75 + 4 * v74;
        v80 = (unint64_t)&v76[4 * v74];
        if (v79 < (unint64_t)&v76[4 * v55] && v80 < v75 + 4 * v55)
          goto LABEL_59;
        v81 = v78 - (v55 & 7) + v74;
        v82 = v74 + (unint64_t)(v55 & 7) - v55;
        v83 = (float32x4_t *)(v79 + 16);
        v84 = (float32x4_t *)(v80 + 16);
        do
        {
          v85 = vmulq_f32(*v84, *v83);
          v83[-1] = vmulq_f32(v84[-1], v83[-1]);
          *v83 = v85;
          v83 += 2;
          v84 += 2;
          v82 += 8;
        }
        while (v82);
        v77 = v81;
        if ((v55 & 7) != 0)
        {
LABEL_59:
          v86 = v55 - v77;
          v87 = (float *)&v76[4 * v77];
          v88 = (float *)(v75 + 4 * v77);
          do
          {
            v89 = *v87++;
            *v88 = v89 * *v88;
            ++v88;
            --v86;
          }
          while (v86);
        }
        goto LABEL_61;
      }
      v56 = *(float32x4_t **)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v57 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v10);
      v58 = *(_QWORD *)(v53 + 8 * v10);
      if (v54 < 8)
        break;
      v59 = 0;
      v118 = v58 + 4 * v54;
      v120 = v58 < (unint64_t)v57->u64 + 4 * v54 && (unint64_t)v57 < v118;
      if ((unint64_t)v56 < v118 && v58 < (unint64_t)v56->u64 + 4 * v54)
        goto LABEL_45;
      if (v120)
        goto LABEL_45;
      v59 = v54 & 0x7FFFFFF8;
      v122 = v56 + 1;
      v123 = v57 + 1;
      v124 = (float32x4_t *)(v58 + 16);
      v125 = v54 & 0xFFFFFFF8;
      do
      {
        v126 = vaddq_f32(vmlsq_f32(*v122, *v122, *v123), *v124);
        v124[-1] = vaddq_f32(vmlsq_f32(v122[-1], v122[-1], v123[-1]), v124[-1]);
        *v124 = v126;
        v122 += 2;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v59 != v54)
        goto LABEL_45;
LABEL_47:
      v68 = (int)v54 / 8;
      if ((int)v54 > 7)
      {
        v69 = 0;
        v70 = (char *)*v398;
        do
        {
          v71 = (float32x4_t *)(v58 + 32 * v69);
          v72 = (float32x4_t *)&v70[32 * v69];
          v73 = vmulq_f32(v72[1], v71[1]);
          *v71 = vmulq_f32(*v72, *v71);
          v71[1] = v73;
          ++v69;
        }
        while (v68 != (_DWORD)v69);
      }
      v74 = 8 * v68;
      if (8 * v68 < (int)v55)
        goto LABEL_53;
LABEL_61:
      v90 = *(_QWORD *)(a1 + 632);
      if (!v11)
      {
        memmove(*(void **)(v90 + 8 * v10), *(const void **)(*(_QWORD *)(a1 + 496) + 8 * v10), 4 * *(int *)(a1 + 52));
        v113 = *(_QWORD *)(a1 + 632);
        v114 = *(unsigned int *)(a1 + 52);
        v115 = (int)v114;
        if ((int)v114 <= 0)
        {
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = -(-(int)v114 >> 3);
        }
        else
        {
          v116 = *(float32x4_t **)(v113 + 8 * v10);
          if (v114 < 8)
          {
            v117 = 0;
            goto LABEL_129;
          }
          v117 = v114 & 0x7FFFFFF8;
          v176 = v116 + 1;
          v177 = v114 & 0xFFFFFFF8;
          do
          {
            v178 = vnegq_f32(*v176);
            v176[-1] = vnegq_f32(v176[-1]);
            *v176 = v178;
            v176 += 2;
            v177 -= 8;
          }
          while (v177);
          if (v117 != v114)
          {
LABEL_129:
            v179 = v114 - v117;
            v180 = &v116->f32[v117];
            do
            {
              *v180 = -*v180;
              ++v180;
              --v179;
            }
            while (v179);
          }
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = (int)v114 / 8;
          if ((int)v114 > 7)
          {
            v181 = 0;
            v182 = *v169;
            do
            {
              v183 = &v116[2 * v181];
              v184 = (float32x4_t *)(v182 + 32 * v181);
              v185 = vmulq_f32(v183[1], v184[1]);
              *v183 = vmulq_f32(*v183, *v184);
              v183[1] = v185;
              ++v181;
            }
            while (v170 != (_DWORD)v181);
          }
        }
        v186 = 8 * v170;
        if (8 * v170 < (int)v115)
        {
          v187 = *v169;
          v188 = *(_QWORD *)(v113 + 8 * v10);
          v189 = v186;
          v190 = v115 - v186;
          if (v190 < 8)
            goto LABEL_141;
          v191 = v188 + 4 * v186;
          v192 = v187 + 4 * v186;
          if (v191 < v187 + 4 * v115 && v192 < v188 + 4 * v115)
            goto LABEL_141;
          v193 = v190 - (v115 & 7) + v186;
          v194 = v186 + (unint64_t)(v115 & 7) - v115;
          v195 = (float32x4_t *)(v192 + 16);
          v196 = (float32x4_t *)(v191 + 16);
          do
          {
            v197 = vmulq_f32(*v196, *v195);
            v196[-1] = vmulq_f32(v196[-1], v195[-1]);
            *v196 = v197;
            v195 += 2;
            v196 += 2;
            v194 += 8;
          }
          while (v194);
          v189 = v193;
          if ((v115 & 7) != 0)
          {
LABEL_141:
            v198 = v115 - v189;
            v199 = (float *)(v188 + 4 * v189);
            v200 = (float *)(v187 + 4 * v189);
            do
            {
              v201 = *v200++;
              *v199 = *v199 * v201;
              ++v199;
              --v198;
            }
            while (v198);
          }
        }
        v202 = *(_QWORD *)(a1 + 632);
        v203 = *(int *)(a1 + 52);
        v204 = (int)v203 / 8;
        if ((int)v203 >= 8)
        {
          v205 = *(float32x4_t **)(v202 + 8 * v10);
          v206 = *v6;
          v207 = (int)v203 / 8;
          do
          {
            v208 = *v206;
            v209 = v206[1];
            v206 += 2;
            v210 = vmulq_f32(v209, v205[1]);
            *v205 = vmulq_f32(v208, *v205);
            v205[1] = v210;
            v205 += 2;
            --v207;
          }
          while (v207);
        }
        v211 = 8 * v204;
        if (8 * v204 < (int)v203)
        {
          v212 = *(_QWORD *)(v202 + 8 * v10);
          v213 = *v6;
          v214 = v211;
          v215 = v203 - v211;
          if (v215 < 8)
            goto LABEL_156;
          v216 = v212 + 4 * v211;
          v217 = (unint64_t)&v213[v211 / 4u];
          if (v216 < (unint64_t)v213->u64 + 4 * v203 && v217 < v212 + 4 * v203)
            goto LABEL_156;
          v219 = v215 - (v203 & 7) + v211;
          v220 = v211 + (unint64_t)(v203 & 7) - v203;
          v221 = (float32x4_t *)(v216 + 16);
          v222 = (float32x4_t *)(v217 + 16);
          do
          {
            v223 = vmulq_f32(*v222, *v221);
            v221[-1] = vmulq_f32(v222[-1], v221[-1]);
            *v221 = v223;
            v221 += 2;
            v222 += 2;
            v220 += 8;
          }
          while (v220);
          v214 = v219;
          if ((v203 & 7) != 0)
          {
LABEL_156:
            v224 = v203 - v214;
            v225 = &v213->f32[v214];
            v226 = (float *)(v212 + 4 * v214);
            do
            {
              v227 = *v225++;
              *v226 = v227 * *v226;
              ++v226;
              --v224;
            }
            while (v224);
          }
        }
        goto LABEL_158;
      }
      v91 = *(unsigned int *)(a1 + 52);
      v92 = (int)v91;
      if ((int)v91 > 0)
      {
        v93 = *(float32x4_t **)(*(_QWORD *)(a1 + 112) + 8 * v396);
        v94 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v10);
        v95 = *(float32x4_t **)(v90 + 8 * v10);
        if (v91 < 8)
        {
          v96 = 0;
          goto LABEL_65;
        }
        v96 = 0;
        if ((unint64_t)((char *)v95 - (char *)v93) < 0x20)
          goto LABEL_65;
        if ((unint64_t)((char *)v95 - (char *)v94) < 0x20)
          goto LABEL_65;
        v96 = v91 & 0x7FFFFFF8;
        v171 = v93 + 1;
        v172 = v94 + 1;
        v173 = v95 + 1;
        v174 = v91 & 0xFFFFFFF8;
        do
        {
          v175 = vsubq_f32(*v171, *v172);
          v173[-1] = vsubq_f32(v171[-1], v172[-1]);
          *v173 = v175;
          v171 += 2;
          v172 += 2;
          v173 += 2;
          v174 -= 8;
        }
        while (v174);
        if (v96 != v91)
        {
LABEL_65:
          v97 = v91 - v96;
          v98 = v96;
          v99 = &v95->f32[v96];
          v100 = &v94->f32[v98];
          v101 = &v93->f32[v98];
          do
          {
            v102 = *v101++;
            v103 = v102;
            v104 = *v100++;
            *v99++ = v103 - v104;
            --v97;
          }
          while (v97);
        }
        v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
        v106 = (int)v91 / 8;
        if ((int)v91 > 7)
        {
          v107 = 0;
          v108 = *v105;
          do
          {
            v109 = &v95[2 * v107];
            v110 = (float32x4_t *)(v108 + 32 * v107);
            v111 = vmulq_f32(v109[1], v110[1]);
            *v109 = vmulq_f32(*v109, *v110);
            v109[1] = v111;
            ++v107;
          }
          while (v106 != (_DWORD)v107);
        }
        v112 = 8 * v106;
        if (8 * v106 >= (int)v92)
          goto LABEL_103;
LABEL_92:
        v127 = *v105;
        v128 = *(_QWORD *)(v90 + 8 * v10);
        v129 = v112;
        v130 = v92 - v112;
        if (v130 < 8)
          goto LABEL_101;
        v131 = v128 + 4 * v112;
        v132 = v127 + 4 * v112;
        if (v131 < v127 + 4 * v92 && v132 < v128 + 4 * v92)
          goto LABEL_101;
        v134 = v130 - (v92 & 7) + v112;
        v135 = v112 + (unint64_t)(v92 & 7) - v92;
        v136 = (float32x4_t *)(v132 + 16);
        v137 = (float32x4_t *)(v131 + 16);
        do
        {
          v138 = vmulq_f32(*v137, *v136);
          v137[-1] = vmulq_f32(v137[-1], v136[-1]);
          *v137 = v138;
          v136 += 2;
          v137 += 2;
          v135 += 8;
        }
        while (v135);
        v129 = v134;
        if ((v92 & 7) != 0)
        {
LABEL_101:
          v139 = v92 - v129;
          v140 = (float *)(v128 + 4 * v129);
          v141 = (float *)(v127 + 4 * v129);
          do
          {
            v142 = *v141++;
            *v140 = *v140 * v142;
            ++v140;
            --v139;
          }
          while (v139);
        }
        goto LABEL_103;
      }
      v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v112 = -8 * (-(int)v91 >> 3);
      if (v112 < (int)v92)
        goto LABEL_92;
LABEL_103:
      v143 = *(_QWORD *)(a1 + 632);
      v144 = *(int *)(a1 + 52);
      v145 = (int)v144 / 8;
      if ((int)v144 >= 8)
      {
        v146 = *(float32x4_t **)(v143 + 8 * v10);
        v147 = *v6;
        v148 = (int)v144 / 8;
        do
        {
          v149 = *v147;
          v150 = v147[1];
          v147 += 2;
          v151 = vmulq_f32(v150, v146[1]);
          *v146 = vmulq_f32(v149, *v146);
          v146[1] = v151;
          v146 += 2;
          --v148;
        }
        while (v148);
      }
      v152 = 8 * v145;
      if (8 * v145 < (int)v144)
      {
        v153 = *(_QWORD *)(v143 + 8 * v10);
        v154 = *v6;
        v155 = v152;
        v156 = v144 - v152;
        if (v156 < 8)
          goto LABEL_116;
        v157 = v153 + 4 * v152;
        v158 = (unint64_t)&v154[v152 / 4u];
        if (v157 < (unint64_t)v154->u64 + 4 * v144 && v158 < v153 + 4 * v144)
          goto LABEL_116;
        v160 = v156 - (v144 & 7) + v152;
        v161 = v152 + (unint64_t)(v144 & 7) - v144;
        v162 = (float32x4_t *)(v157 + 16);
        v163 = (float32x4_t *)(v158 + 16);
        do
        {
          v164 = vmulq_f32(*v163, *v162);
          v162[-1] = vmulq_f32(v163[-1], v162[-1]);
          *v162 = v164;
          v162 += 2;
          v163 += 2;
          v161 += 8;
        }
        while (v161);
        v155 = v160;
        if ((v144 & 7) != 0)
        {
LABEL_116:
          v165 = v144 - v155;
          v166 = &v154->f32[v155];
          v167 = (float *)(v153 + 4 * v155);
          do
          {
            v168 = *v166++;
            *v167 = v168 * *v167;
            ++v167;
            --v165;
          }
          while (v165);
        }
      }
LABEL_158:
      v228 = (void **)(*(_QWORD *)(a1 + 656) + 8 * v10);
      if (v11)
      {
        sub_19C1032B4(v228, (uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v10), *(__int16 ***)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        v229 = *(_QWORD *)(a1 + 656);
        v230 = *(_QWORD *)(a1 + 112);
        v231 = *(int *)(a1 + 52);
        if ((int)v231 >= 8)
        {
          v232 = *(float32x4_t **)(v229 + 8 * v10);
          v233 = *(float32x4_t **)(v230 + 8 * v396);
          v234 = (int)v231 / 8;
          do
          {
            v235 = *v233;
            v236 = v233[1];
            v233 += 2;
            v237 = vmulq_f32(v236, v232[1]);
            *v232 = vmulq_f32(v235, *v232);
            v232[1] = v237;
            v232 += 2;
            --v234;
          }
          while (v234);
        }
        v238 = 8 * ((int)v231 / 8);
        if (v238 < (int)v231)
        {
          v239 = *(_QWORD *)(v229 + 8 * v10);
          v240 = *(_QWORD *)(v230 + 8 * v396);
          v241 = v238;
          v242 = v231 - v238;
          if (v242 < 8)
            goto LABEL_172;
          v243 = v239 + 4 * v241;
          v244 = v240 + 4 * v241;
          if (v243 < v240 + 4 * v231 && v244 < v239 + 4 * v231)
            goto LABEL_172;
          v246 = v242 - (v231 & 7) + v241;
          v247 = v241 + (v231 & 7) - v231;
          v248 = (float32x4_t *)(v243 + 16);
          v249 = (float32x4_t *)(v244 + 16);
          do
          {
            v250 = vmulq_f32(*v249, *v248);
            v248[-1] = vmulq_f32(v249[-1], v248[-1]);
            *v248 = v250;
            v248 += 2;
            v249 += 2;
            v247 += 8;
          }
          while (v247);
          v241 = v246;
          if ((v231 & 7) != 0)
          {
LABEL_172:
            v251 = v231 - v241;
            v252 = (float *)(v240 + 4 * v241);
            v253 = (float *)(v239 + 4 * v241);
            do
            {
              v254 = *v252++;
              *v253 = v254 * *v253;
              ++v253;
              --v251;
            }
            while (v251);
          }
        }
        v255 = *(_QWORD *)(a1 + 656);
        v256 = *(int *)(a1 + 52);
        v257 = (int)v256 / 8;
        if ((int)v256 >= 8)
        {
          v258 = *(float32x4_t **)(v255 + 8 * v10);
          v259 = (float32x4_t *)*v395;
          v260 = (int)v256 / 8;
          do
          {
            v261 = *v259;
            v262 = v259[1];
            v259 += 2;
            v263 = vmulq_f32(v262, v258[1]);
            *v258 = vmulq_f32(v261, *v258);
            v258[1] = v263;
            v258 += 2;
            --v260;
          }
          while (v260);
        }
        v264 = 8 * v257;
        if (8 * v257 < (int)v256)
        {
          v265 = *(_QWORD *)(v255 + 8 * v10);
          v266 = (char *)*v395;
          v267 = v264;
          v268 = v256 - v264;
          if (v268 < 8)
            goto LABEL_187;
          v269 = v265 + 4 * v264;
          v270 = (unint64_t)&v266[4 * v264];
          if (v269 < (unint64_t)&v266[4 * v256] && v270 < v265 + 4 * v256)
            goto LABEL_187;
          v272 = v268 - (v256 & 7) + v264;
          v273 = v264 + (unint64_t)(v256 & 7) - v256;
          v274 = (float32x4_t *)(v269 + 16);
          v275 = (float32x4_t *)(v270 + 16);
          do
          {
            v276 = vmulq_f32(*v275, *v274);
            v274[-1] = vmulq_f32(v275[-1], v274[-1]);
            *v274 = v276;
            v274 += 2;
            v275 += 2;
            v273 += 8;
          }
          while (v273);
          v267 = v272;
          if ((v256 & 7) != 0)
          {
LABEL_187:
            v277 = v256 - v267;
            v278 = (float *)&v266[4 * v267];
            v279 = (float *)(v265 + 4 * v267);
            do
            {
              v280 = *v278++;
              *v279 = v280 * *v279;
              ++v279;
              --v277;
            }
            while (v277);
          }
        }
      }
      else
      {
        bzero(*v228, 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 560) + 8 * v10), 4 * *(int *)(a1 + 48));
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 560) + v15), (uint64_t *)(*(_QWORD *)(a1 + 632) + v15), *(__int16 ***)(a1 + 304), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 560) + v15), (uint64_t *)(*(_QWORD *)(a1 + 608) + v15), *(__int16 ***)(a1 + 320), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 560) + v15), (uint64_t *)(*(_QWORD *)(a1 + 656) + v15), *(__int16 ***)(a1 + 312), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      if (v7-- <= 0)
        goto LABEL_193;
    }
    v59 = 0;
LABEL_45:
    v60 = v54 - v59;
    v61 = v59;
    v62 = (float *)(v58 + 4 * v59);
    v63 = &v57->f32[v61];
    v64 = &v56->f32[v61];
    do
    {
      v65 = *v64++;
      v66 = v65;
      v67 = *v63++;
      *v62 = (float)(v66 - (float)(v67 * v66)) + *v62;
      ++v62;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
LABEL_193:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    v281 = (a5 - 2);
    v282 = 1;
    v283 = a5 - 2;
    do
    {
      while (1)
      {
        v295 = *(_BYTE *)(a1 + 2040) ? v283 : v282;
        v296 = *(_BYTE *)(a1 + 2040) ? 1 : -1;
        v297 = v295 + v296;
        v298 = *(_BYTE *)(a1 + 2040) ? v281 : 1;
        v299 = *(_QWORD *)(a1 + 632) + 8 * v295;
        v300 = *(_QWORD *)(a1 + 112) + 8 * v297;
        v301 = *(_DWORD *)(a1 + 52);
        v399 = 8 * v295;
        if (v295 == v298)
          break;
        v397 = 8 * v297;
        v284 = v281;
        v285 = *(_QWORD *)(a1 + 1104);
        global_queue = dispatch_get_global_queue(0, 0);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v408 = v301;
        v405 = v285;
        v406 = v299;
        v281 = v284;
        v407 = v300;
        dispatch_apply(v301, global_queue, &block);
        v287 = *(_QWORD *)(a1 + 656) + v399;
        v288 = *(_QWORD *)(a1 + 112) + v397;
        v289 = *(int *)(a1 + 52);
        v290 = *(_QWORD *)(a1 + 1096);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v405 = v290;
        v408 = v289;
        v406 = v287;
        v407 = v288;
        dispatch_apply(v289, global_queue, &block);
        v291 = *(_QWORD *)(a1 + 608) + v399;
        v292 = *(_QWORD *)(a1 + 112) + v397;
        v293 = *(int *)(a1 + 52);
        v294 = *(_QWORD *)(a1 + 1112);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v405 = v294;
        v408 = v293;
        v406 = v291;
        v407 = v292;
        dispatch_apply(v293, global_queue, &block);
        ++v282;
        if (--v283 == -1)
          goto LABEL_209;
      }
      bzero(*(void **)(a1 + 1104), 4 * (v301 * v301));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1096), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1112), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      ++v282;
      --v283;
    }
    while (v283 != -1);
  }
LABEL_209:
  if (a5 >= 1)
  {
    v302 = 0;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2040))
        v316 = v400 - v302;
      else
        v316 = v302;
      if (*(_BYTE *)(a1 + 2040))
        v317 = v400;
      else
        v317 = 0;
      if (a3[1] == *a3)
      {
        v318 = *(_QWORD *)(a1 + 656);
LABEL_226:
        v329 = 8 * v316;
        v330 = v318 + v329;
        v331 = *(_QWORD *)(a1 + 64) + v329;
        v332 = *(_DWORD *)(a1 + 48);
        v333 = *(int *)(a1 + 52);
        v334 = v329;
        if (v316 == v317)
        {
          bzero(*(void **)(a1 + 1072), 4 * v332 * (int)v333);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1080), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1088), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v303 = *(_QWORD *)(a1 + 1072);
          v304 = dispatch_get_global_queue(0, 0);
          block = MEMORY[0x1E0C809B0];
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v332;
          v405 = v303;
          v406 = v330;
          v407 = v331;
          dispatch_apply(v333, v304, &block);
          v305 = *(_QWORD *)(a1 + 632) + v334;
          v306 = *(_QWORD *)(a1 + 64) + v334;
          v307 = *(_DWORD *)(a1 + 48);
          v308 = *(int *)(a1 + 52);
          v309 = *(_QWORD *)(a1 + 1080);
          v310 = MEMORY[0x1E0C809B0];
          block = MEMORY[0x1E0C809B0];
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v307;
          v405 = v309;
          v406 = v305;
          v407 = v306;
          dispatch_apply(v308, v304, &block);
          v311 = *(_QWORD *)(a1 + 608) + v334;
          v312 = *(_QWORD *)(a1 + 64) + v334;
          v313 = *(_DWORD *)(a1 + 48);
          v314 = *(int *)(a1 + 52);
          v315 = *(_QWORD *)(a1 + 1088);
          block = v310;
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v313;
          v405 = v315;
          v406 = v311;
          v407 = v312;
          dispatch_apply(v314, v304, &block);
        }
        goto LABEL_212;
      }
      v318 = *(_QWORD *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_226;
      v319 = v316;
      v320 = *(_QWORD *)(a1 + 208);
      v321 = 24 * v316;
      v323 = *(_BYTE **)(v320 + v321);
      v322 = *(_BYTE **)(v320 + v321 + 8);
      v324 = v322 - v323;
      if (v322 == v323)
        break;
      if ((v324 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v325 = v302;
      v326 = *(_QWORD *)(a1 + 208);
      v327 = operator new(v322 - v323);
      memcpy(v327, v323, v324);
      v320 = v326;
      v302 = v325;
      v328 = *(unsigned int *)(a1 + 52);
      if ((int)v328 >= 1)
        goto LABEL_229;
LABEL_236:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v327)
          goto LABEL_242;
      }
      else
      {
        v347 = 0;
        v348 = *(_QWORD *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v348 + 24 * *(int *)(a1 + 728)) + 4 * v347) = *((_DWORD *)v327 + v347);
          ++v347;
        }
        while (v347 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v327);
      v320 = *(_QWORD *)(a1 + 208);
LABEL_242:
      v349 = *(_QWORD *)(a1 + 632);
      v350 = *(_BYTE **)(v320 + 24 * (int)v319);
      v351 = *(_BYTE **)(v320 + v321 + 8);
      v352 = v351 - v350;
      if (v351 == v350)
      {
        v355 = 0;
        v356 = *(unsigned int *)(a1 + 52);
        if ((int)v356 < 1)
          goto LABEL_254;
LABEL_247:
        v357 = 0;
        v358 = *(_QWORD *)(v349 + 8 * v319);
        v359 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v356 < 8)
          goto LABEL_252;
        if ((unint64_t)(v359 - v358) < 0x20)
          goto LABEL_252;
        v357 = v356 & 0x7FFFFFF8;
        v360 = (__int128 *)(v358 + 16);
        v361 = (_OWORD *)(v359 + 16);
        v362 = v356 & 0xFFFFFFF8;
        do
        {
          v363 = *v360;
          *(v361 - 1) = *(v360 - 1);
          *v361 = v363;
          v360 += 2;
          v361 += 2;
          v362 -= 8;
        }
        while (v362);
        if (v357 != v356)
        {
LABEL_252:
          v364 = v356 - v357;
          v365 = 4 * v357;
          v366 = (_DWORD *)(v359 + 4 * v357);
          v367 = (int *)(v358 + v365);
          do
          {
            v368 = *v367++;
            *v366++ = v368;
            --v364;
          }
          while (v364);
        }
        goto LABEL_254;
      }
      if ((v352 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v353 = v302;
      v354 = v320;
      v355 = operator new(v351 - v350);
      memcpy(v355, v350, v352);
      v320 = v354;
      v302 = v353;
      v356 = *(unsigned int *)(a1 + 52);
      if ((int)v356 >= 1)
        goto LABEL_247;
LABEL_254:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v355)
          goto LABEL_260;
      }
      else
      {
        v369 = 0;
        v370 = *(_QWORD *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v370 + 24 * *(int *)(a1 + 848)) + 4 * v369) = *((_DWORD *)v355 + v369);
          ++v369;
        }
        while (v369 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v355);
      v320 = *(_QWORD *)(a1 + 208);
LABEL_260:
      v371 = *(_QWORD *)(a1 + 608);
      v372 = *(_BYTE **)(v320 + 24 * (int)v319);
      v373 = *(_BYTE **)(v320 + v321 + 8);
      v374 = v373 - v372;
      if (v373 == v372)
      {
        v375 = 0;
        v376 = *(unsigned int *)(a1 + 52);
        if ((int)v376 < 1)
          goto LABEL_272;
LABEL_265:
        v377 = 0;
        v378 = *(_QWORD *)(v371 + 8 * v319);
        v379 = *(_QWORD *)(*(_QWORD *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v376 < 8)
          goto LABEL_270;
        if ((unint64_t)(v379 - v378) < 0x20)
          goto LABEL_270;
        v377 = v376 & 0x7FFFFFF8;
        v380 = (__int128 *)(v378 + 16);
        v381 = (_OWORD *)(v379 + 16);
        v382 = v376 & 0xFFFFFFF8;
        do
        {
          v383 = *v380;
          *(v381 - 1) = *(v380 - 1);
          *v381 = v383;
          v380 += 2;
          v381 += 2;
          v382 -= 8;
        }
        while (v382);
        if (v377 != v376)
        {
LABEL_270:
          v384 = v376 - v377;
          v385 = 4 * v377;
          v386 = (_DWORD *)(v379 + 4 * v377);
          v387 = (int *)(v378 + v385);
          do
          {
            v388 = *v387++;
            *v386++ = v388;
            --v384;
          }
          while (v384);
        }
        goto LABEL_272;
      }
      if ((v374 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v375 = operator new(v373 - v372);
      memcpy(v375, v372, v374);
      v376 = *(unsigned int *)(a1 + 52);
      if ((int)v376 >= 1)
        goto LABEL_265;
LABEL_272:
      if (*(int *)(a1 + 964) >= 1)
      {
        v389 = 0;
        v390 = *(_QWORD *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v390 + 24 * *(int *)(a1 + 968)) + 4 * v389) = *((_DWORD *)v375 + v389);
          ++v389;
        }
        while (v389 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_277:
        operator delete(v375);
        goto LABEL_212;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v375)
        goto LABEL_277;
LABEL_212:
      if (++v302 == a5)
        return;
    }
    v327 = 0;
    v328 = *(unsigned int *)(a1 + 52);
    if ((int)v328 < 1)
      goto LABEL_236;
LABEL_229:
    v335 = 0;
    v336 = *(_QWORD *)(v318 + 8 * v319);
    v337 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v328 < 8)
      goto LABEL_234;
    if ((unint64_t)(v337 - v336) < 0x20)
      goto LABEL_234;
    v335 = v328 & 0x7FFFFFF8;
    v338 = (__int128 *)(v336 + 16);
    v339 = (_OWORD *)(v337 + 16);
    v340 = v328 & 0xFFFFFFF8;
    do
    {
      v341 = *v338;
      *(v339 - 1) = *(v338 - 1);
      *v339 = v341;
      v338 += 2;
      v339 += 2;
      v340 -= 8;
    }
    while (v340);
    if (v335 != v328)
    {
LABEL_234:
      v342 = v328 - v335;
      v343 = 4 * v335;
      v344 = (_DWORD *)(v337 + 4 * v335);
      v345 = (int *)(v336 + v343);
      do
      {
        v346 = *v345++;
        *v344++ = v346;
        --v342;
      }
      while (v342);
    }
    goto LABEL_236;
  }
}

void sub_19C1171B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C117200(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2040] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE4190A8);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE4190A8);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419090 = 0;
      *(_QWORD *)algn_1EE419098 = 0;
      qword_1EE4190A0 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419090, &dword_19C079000);
      __cxa_guard_release(&qword_1EE4190A8);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419090);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19C1172CC(_BYTE *a1)
{
  uint64_t result;

  a1[2040] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19C117300(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 1988) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 304) = result + 232;
  *(_QWORD *)(a1 + 312) = result + 240;
  *(_QWORD *)(a1 + 320) = result + 248;
  *(_QWORD *)(a1 + 328) = result + 256;
  *(_QWORD *)(a1 + 336) = result + 264;
  *(_QWORD *)(a1 + 344) = result + 272;
  *(_QWORD *)(a1 + 352) = result + 280;
  *(_QWORD *)(a1 + 360) = result + 288;
  *(_QWORD *)(a1 + 368) = result + 296;
  return result;
}

void sub_19C117390(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 1988))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFC0, 0))__cxa_bad_cast();
    sub_19C2210D4(34);
  }
  sub_19C2210D4(1);
}

void sub_19C1173D8()
{
  sub_19C2210D4(1);
}

void sub_19C1173E8()
{
  sub_19C2210D4(0);
}

void sub_19C1173FC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C1193D0(a1);
  operator delete(v1);
}

void sub_19C117410(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  float v13;
  signed int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  const void **v38;
  float *v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  float *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  int v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t v88;
  uint64_t v89;
  float *v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  int v96;
  float *v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  int64_t v106;
  char *v107;
  uint64_t v108;
  const void **v109;
  int v110;
  float *v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  float *v125;
  float v126;
  float v127;
  float v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  int v132;
  float32x4_t *v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  BOOL v148;
  BOOL v149;
  uint64_t v151;
  uint64_t v152;
  float32x4_t *v153;
  float32x4_t *v154;
  float32x4_t *v155;
  float32x4_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  unint64_t v164;
  BOOL v166;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t *v170;
  uint64_t v171;
  float32x4_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int16 **v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  int64_t v182;
  char *v183;
  uint64_t v184;
  int v186;
  char v187;
  uint64_t v188;
  unsigned int v189;
  signed int v190;
  unsigned int v192;
  uint64_t v193;
  int v194;
  _BOOL4 v195;
  void *v196;
  void *v197;
  char *v198;
  void *v199;
  void *v200;
  char *v201;
  void *__p;
  void *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;

  if (a3[1] != *a3 && *(int *)(a1 + 56) >= 1)
  {
    v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = a4 & 0xFFFFFF;
    v10 = *(_QWORD *)(a1 + 2048);
    if (!v10)
      goto LABEL_7;
LABEL_6:
    v11 = *(float *)(v10 + 468);
    if (v11 > 0.0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = a4 & 0xFFFFFF;
  v10 = *(_QWORD *)(a1 + 2048);
  if (v10)
    goto LABEL_6;
LABEL_7:
  v11 = 50.0;
LABEL_8:
  v12 = a5 != 0;
  if (v9 > v12)
  {
    v189 = v9;
    v190 = v9 - 1;
    v13 = -v11;
    v186 = v8;
    while (1)
    {
      v192 = v12;
      if (*(_BYTE *)(a1 + 2040))
        v14 = v9 + ~v12;
      else
        v14 = v12;
      if (*(_BYTE *)(a1 + 2040))
        v15 = 1;
      else
        v15 = -1;
      if (*(_BYTE *)(a1 + 2040))
        v16 = v14 < v190;
      else
        v16 = v14 > 0;
      v195 = v16;
      memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v14), *(const void **)(*a2 + 8 * v14), 4 * *(int *)(a1 + 44));
      v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v8)
      {
        v18 = *(_DWORD *)(a1 + 48);
        v19 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v14);
        *v19 = **(_DWORD **)(*a3 + 24 * v14);
        if (v17)
          v19[1] = v18 - 1;
      }
      v20 = 8 * v14;
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + v20), 4 * *(int *)(a1 + 52));
      v21 = *(_QWORD *)(a1 + 2048);
      v193 = v14;
      if (v21)
      {
        if (!*(_BYTE *)(v21 + 20))
        {
          v173 = *(_DWORD *)(v21 + 40);
          if ((v173 == 4 || v173 == 2) && *(_DWORD *)(v21 + 44) == 3)
            break;
        }
      }
      v22 = *(_QWORD *)(a1 + 376);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = *(uint64_t **)(a1 + 304);
      v25 = *(_QWORD *)(a1 + 208) + 24 * v14;
      v203 = 0;
      v204 = 0;
      __p = 0;
      v27 = *(_BYTE **)v25;
      v26 = *(_BYTE **)(v25 + 8);
      v28 = v26 - v27;
      if (v26 != v27)
      {
        if (v28 < 0)
          sub_19C07DA0C();
        __p = operator new(v26 - v27);
        v203 = __p;
        v29 = (char *)__p + 4 * (v28 >> 2);
        v204 = v29;
        memcpy(__p, v27, v28);
        v203 = v29;
        v8 = v186;
      }
      sub_19C118850(a1, v8, (void **)(v22 + v20), (uint64_t *)(v23 + v20), v24, (uint64_t)&__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v30 = __p;
      v31 = v14;
      v32 = 0;
      if (__p)
      {
        v203 = __p;
LABEL_32:
        operator delete(v30);
      }
      v33 = *(_QWORD *)(a1 + 2048);
      if (!v33)
        goto LABEL_35;
LABEL_34:
      if (*(_BYTE *)(v33 + 244))
        goto LABEL_162;
LABEL_35:
      v34 = v14 + v15;
      v35 = *(_QWORD *)(a1 + 376);
      v36 = *(_DWORD *)(a1 + 52);
      v37 = v195;
      if (v195)
      {
        sub_19C1032B4((void **)(v35 + 8 * v31), (uint64_t *)(*(_QWORD *)(a1 + 112) + 8 * v34), *(__int16 ***)(a1 + 328), *(_DWORD *)(a1 + 52), v36, 1.0);
        v35 = *(_QWORD *)(a1 + 376);
        v36 = *(_DWORD *)(a1 + 52);
      }
      v38 = (const void **)(v35 + 8 * v31);
      if (v36 >= 1)
      {
        v39 = (float *)*v38;
        v40 = v36;
        do
        {
          v41 = -v11;
          if (*v39 < v13 || (v41 = v11, *v39 > v11))
            *v39 = v41;
          ++v39;
          --v40;
        }
        while (v40);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 448) + 8 * v31), v38, v36, *(_DWORD *)(a1 + 520));
      if ((v32 & 1) == 0)
      {
        v187 = v32;
        v42 = v34;
        v43 = *(_QWORD *)(a1 + 400);
        v44 = *(_QWORD *)(a1 + 64);
        v45 = *(uint64_t **)(a1 + 312);
        v46 = *(_QWORD *)(a1 + 208) + 24 * (int)v31;
        v200 = 0;
        v201 = 0;
        v199 = 0;
        v48 = *(_BYTE **)v46;
        v47 = *(_BYTE **)(v46 + 8);
        v49 = v47 - v48;
        if (v47 != v48)
        {
          if (v49 < 0)
            sub_19C07DA0C();
          v199 = operator new(v47 - v48);
          v200 = v199;
          v50 = (char *)v199 + 4 * (v49 >> 2);
          v201 = v50;
          memcpy(v199, v48, v49);
          v200 = v50;
          v8 = v186;
        }
        sub_19C118850(a1, v8, (void **)(v43 + v20), (uint64_t *)(v44 + v20), v45, (uint64_t)&v199, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v37 = v195;
        v34 = v42;
        v32 = v187;
        v31 = v193;
        if (v199)
        {
          v200 = v199;
          operator delete(v199);
        }
      }
      v51 = *(_QWORD *)(a1 + 2048);
      if (v51 && *(_BYTE *)(v51 + 244))
        goto LABEL_162;
      v52 = *(_QWORD *)(a1 + 400);
      v53 = *(_DWORD *)(a1 + 52);
      if (v37)
      {
        sub_19C1032B4((void **)(v52 + 8 * v31), (uint64_t *)(*(_QWORD *)(a1 + 112) + 8 * v34), *(__int16 ***)(a1 + 336), *(_DWORD *)(a1 + 52), v53, 1.0);
        v52 = *(_QWORD *)(a1 + 400);
        v53 = *(_DWORD *)(a1 + 52);
      }
      v54 = (const void **)(v52 + 8 * v31);
      if (v53 >= 1)
      {
        v55 = (float *)*v54;
        v56 = v53;
        do
        {
          v57 = -v11;
          if (*v55 < v13 || (v57 = v11, *v55 > v11))
            *v55 = v57;
          ++v55;
          --v56;
        }
        while (v56);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 472) + v20), v54, v53, *(_DWORD *)(a1 + 524));
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + v20), 4 * *(int *)(a1 + 52));
      if (v37)
      {
        v58 = *(_QWORD *)(a1 + 88);
        v59 = *(_QWORD *)(a1 + 112);
        v60 = *(_QWORD *)(a1 + 472);
        v61 = *(int *)(a1 + 52);
        if ((int)v61 >= 8)
        {
          v62 = *(float32x4_t **)(v58 + v20);
          v63 = *(float32x4_t **)(v60 + v20);
          v64 = (int)v61 / 8;
          v65 = *(float32x4_t **)(v59 + 8 * v34);
          do
          {
            v67 = *v65;
            v66 = v65[1];
            v65 += 2;
            v69 = *v63;
            v68 = v63[1];
            v63 += 2;
            v70 = vmlaq_f32(v62[1], v68, v66);
            *v62 = vmlaq_f32(*v62, v69, v67);
            v62[1] = v70;
            v62 += 2;
            --v64;
          }
          while (v64);
        }
        v71 = 8 * ((int)v61 / 8);
        if (v71 < (int)v61)
        {
          v72 = *(_QWORD *)(v59 + 8 * v34);
          v73 = *(_QWORD *)(v60 + v20);
          v74 = *(_QWORD *)(v58 + v20);
          v75 = v71;
          v76 = v61 - v71;
          if (v76 < 8)
            goto LABEL_82;
          v77 = 4 * v75;
          v78 = v74 + 4 * v75;
          v79 = v74 + 4 * v61;
          v80 = v78 >= v73 + 4 * v61 || v73 + 4 * v75 >= v79;
          v81 = !v80;
          if (v72 + 4 * v75 < v79 && v78 < v72 + 4 * v61)
            goto LABEL_82;
          if (v81)
            goto LABEL_82;
          v83 = v76 - (v61 & 7) + v75;
          v84 = v75 + (v61 & 7) - v61;
          v85 = (float32x4_t *)(v74 + v77 + 16);
          v86 = (float32x4_t *)(v72 + v77 + 16);
          v87 = (float32x4_t *)(v73 + v77 + 16);
          do
          {
            v88 = vmlaq_f32(*v85, *v87, *v86);
            v85[-1] = vmlaq_f32(v85[-1], v87[-1], v86[-1]);
            *v85 = v88;
            v85 += 2;
            v86 += 2;
            v87 += 2;
            v84 += 8;
          }
          while (v84);
          v75 = v83;
          if ((v61 & 7) != 0)
          {
LABEL_82:
            v89 = v61 - v75;
            v90 = (float *)(v74 + 4 * v75);
            v91 = (float *)(v73 + 4 * v75);
            v92 = (float *)(v72 + 4 * v75);
            do
            {
              v93 = *v92++;
              v94 = v93;
              v95 = *v91++;
              *v90 = *v90 + (float)(v95 * v94);
              ++v90;
              --v89;
            }
            while (v89);
          }
        }
      }
      v96 = *(_DWORD *)(a1 + 52);
      if (v96 >= 1)
      {
        v97 = *(float **)(*(_QWORD *)(a1 + 88) + 8 * v31);
        v98 = *(unsigned int *)(a1 + 52);
        do
        {
          v99 = -v11;
          if (*v97 < v13 || (v99 = v11, *v97 > v11))
            *v97 = v99;
          ++v97;
          --v98;
        }
        while (v98);
      }
      if ((v32 & 1) == 0)
      {
        v194 = v34;
        v100 = *(_QWORD *)(a1 + 424);
        v101 = *(_QWORD *)(a1 + 64);
        v102 = *(uint64_t **)(a1 + 320);
        v103 = *(_QWORD *)(a1 + 208) + 24 * (int)v31;
        v197 = 0;
        v198 = 0;
        v196 = 0;
        v105 = *(_BYTE **)v103;
        v104 = *(_BYTE **)(v103 + 8);
        v106 = v104 - v105;
        if (v104 != v105)
        {
          if (v106 < 0)
            sub_19C07DA0C();
          v196 = operator new(v104 - v105);
          v197 = v196;
          v107 = (char *)v196 + 4 * (v106 >> 2);
          v198 = v107;
          memcpy(v196, v105, v106);
          v197 = v107;
          v37 = v195;
        }
        sub_19C118850(a1, v8, (void **)(v100 + v20), (uint64_t *)(v101 + v20), v102, (uint64_t)&v196, v96, *(_DWORD *)(a1 + 48), 1);
        v34 = v194;
        if (v196)
        {
          v197 = v196;
          operator delete(v196);
        }
      }
      v108 = *(_QWORD *)(a1 + 2048);
      if (v108)
      {
        if (*(_BYTE *)(v108 + 244))
LABEL_162:
          sub_19C2210D4(76);
      }
      sub_19C1032B4((void **)(*(_QWORD *)(a1 + 424) + v20), (uint64_t *)(*(_QWORD *)(a1 + 88) + v20), *(__int16 ***)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v109 = (const void **)(*(_QWORD *)(a1 + 424) + v20);
      v110 = *(_DWORD *)(a1 + 52);
      if (v110 >= 1)
      {
        v111 = (float *)*v109;
        v112 = *(unsigned int *)(a1 + 52);
        do
        {
          v113 = -v11;
          if (*v111 < v13 || (v113 = v11, *v111 > v11))
            *v111 = v113;
          ++v111;
          --v112;
        }
        while (v112);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 496) + v20), v109, v110, *(_DWORD *)(a1 + 528));
      bzero(*(void **)(*(_QWORD *)(a1 + 112) + v20), 4 * *(int *)(a1 + 52));
      v114 = *(_QWORD *)(a1 + 112);
      v115 = *(_QWORD *)(a1 + 448);
      v116 = *(unsigned int *)(a1 + 52);
      if ((int)v116 < 1)
        goto LABEL_111;
      v117 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + v20);
      v118 = *(float32x4_t **)(v115 + v20);
      v119 = *(_QWORD *)(v114 + v20);
      if (v116 >= 8)
      {
        v120 = 0;
        v164 = v119 + 4 * v116;
        v166 = v119 < (unint64_t)v118->u64 + 4 * v116 && (unint64_t)v118 < v164;
        if (((unint64_t)v117 >= v164 || v119 >= (unint64_t)v117->u64 + 4 * v116) && !v166)
        {
          v120 = v116 & 0x7FFFFFF8;
          v168 = v117 + 1;
          v169 = v118 + 1;
          v170 = (float32x4_t *)(v119 + 16);
          v171 = v116 & 0xFFFFFFF8;
          do
          {
            v172 = vaddq_f32(vmlsq_f32(*v168, *v168, *v169), *v170);
            v170[-1] = vaddq_f32(vmlsq_f32(v168[-1], v168[-1], v169[-1]), v170[-1]);
            *v170 = v172;
            v168 += 2;
            v169 += 2;
            v170 += 2;
            v171 -= 8;
          }
          while (v171);
          if (v120 == v116)
            goto LABEL_111;
        }
      }
      else
      {
        v120 = 0;
      }
      v121 = v116 - v120;
      v122 = v120;
      v123 = (float *)(v119 + v122 * 4);
      v124 = &v118->f32[v122];
      v125 = &v117->f32[v122];
      do
      {
        v126 = *v125++;
        v127 = v126;
        v128 = *v124++;
        *v123 = (float)(v127 - (float)(v128 * v127)) + *v123;
        ++v123;
        --v121;
      }
      while (v121);
LABEL_111:
      if (v37)
      {
        v129 = (int)v116;
        if ((int)v116 >= 8)
        {
          v130 = *(float32x4_t **)(v114 + v20);
          v131 = *(float32x4_t **)(v114 + 8 * v34);
          v132 = (int)v116 / 8;
          v133 = *(float32x4_t **)(v115 + v20);
          do
          {
            v135 = *v133;
            v134 = v133[1];
            v133 += 2;
            v137 = *v131;
            v136 = v131[1];
            v131 += 2;
            v138 = vmlaq_f32(v130[1], v136, v134);
            *v130 = vmlaq_f32(*v130, v137, v135);
            v130[1] = v138;
            v130 += 2;
            --v132;
          }
          while (v132);
        }
        v139 = 8 * ((int)v116 / 8);
        if (v139 < (int)v116)
        {
          v140 = *(_QWORD *)(v115 + v20);
          v141 = *(_QWORD *)(v114 + 8 * v34);
          v142 = *(_QWORD *)(v114 + v20);
          v143 = v139;
          v144 = v129 - v139;
          if (v144 < 8)
            goto LABEL_132;
          v145 = 4 * v143;
          v146 = v142 + 4 * v143;
          v147 = v142 + 4 * v129;
          v148 = v146 >= v141 + 4 * v129 || v141 + 4 * v143 >= v147;
          v149 = !v148;
          if (v140 + 4 * v143 < v147 && v146 < v140 + 4 * v129)
            goto LABEL_132;
          if (v149)
            goto LABEL_132;
          v151 = v144 - (v129 & 7) + v143;
          v152 = v143 + (v129 & 7) - v129;
          v153 = (float32x4_t *)(v142 + v145 + 16);
          v154 = (float32x4_t *)(v140 + v145 + 16);
          v155 = (float32x4_t *)(v141 + v145 + 16);
          do
          {
            v156 = vmlaq_f32(*v153, *v155, *v154);
            v153[-1] = vmlaq_f32(v153[-1], v155[-1], v154[-1]);
            *v153 = v156;
            v153 += 2;
            v154 += 2;
            v155 += 2;
            v152 += 8;
          }
          while (v152);
          v143 = v151;
          if ((v129 & 7) != 0)
          {
LABEL_132:
            v157 = v129 - v143;
            v158 = (float *)(v142 + 4 * v143);
            v159 = (float *)(v141 + 4 * v143);
            v160 = (float *)(v140 + 4 * v143);
            do
            {
              v161 = *v160++;
              v162 = v161;
              v163 = *v159++;
              *v158 = *v158 + (float)(v163 * v162);
              ++v158;
              --v157;
            }
            while (v157);
          }
        }
      }
      v12 = v192 + 1;
      v9 = v189;
      if (v192 + 1 == v189)
        return;
    }
    v174 = *(_QWORD *)(a1 + 376);
    v175 = *(_QWORD *)(a1 + 400);
    v176 = *(_QWORD *)(a1 + 424);
    v177 = *(_QWORD *)(a1 + 64);
    v178 = *(__int16 ***)(a1 + 304);
    v179 = *(_QWORD *)(a1 + 208) + 24 * v14;
    v206 = 0;
    v207 = 0;
    v205 = 0;
    v181 = *(_BYTE **)v179;
    v180 = *(_BYTE **)(v179 + 8);
    v182 = v180 - v181;
    if (v180 != v181)
    {
      v184 = v174;
      v188 = v175;
      if (v182 < 0)
        sub_19C07DA0C();
      v205 = (char *)operator new(v180 - v181);
      v206 = v205;
      v183 = &v205[4 * (v182 >> 2)];
      v207 = v183;
      memcpy(v205, v181, v182);
      v206 = v183;
      v175 = v188;
      v174 = v184;
    }
    sub_19C117F98(a1, 0, (float32x4_t **)(v174 + v20), (float32x4_t **)(v175 + v20), (float32x4_t **)(v176 + v20), (uint64_t *)(v177 + v20), v178, (uint64_t)&v205, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
    v30 = v205;
    v31 = v14;
    v8 = v186;
    if (!v205)
    {
      v32 = 1;
      v33 = *(_QWORD *)(a1 + 2048);
      if (!v33)
        goto LABEL_35;
      goto LABEL_34;
    }
    v206 = v205;
    v32 = 1;
    goto LABEL_32;
  }
}

void sub_19C117F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_19C117F98(uint64_t a1, int a2, float32x4_t **a3, float32x4_t **a4, float32x4_t **a5, uint64_t *a6, __int16 **a7, uint64_t a8, int a9, unsigned int a10, char a11)
{
  float32x4_t **v15;
  void *v17;
  void *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  float32x4_t **v42;
  float32x4_t result;
  float **v44;
  uint64_t v45;
  float32x4_t *v46;
  float *v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v63;
  int v64;
  int v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float32x4_t *v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  __int32 *v75;
  __int32 *v76;
  int v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  uint64_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  __int32 v92;
  float *v93;
  float32x4_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float32x4_t *v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  int *v114;
  int v115;
  float32x4_t *v116;
  float *v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float *v122;
  float32x4_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  uint64_t v137;
  float32x4_t *v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  int *v144;
  int v145;
  float32x4_t *v146;
  float *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float *v151;
  float32x4_t *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  float32x4_t v161;
  uint64_t v162;
  float *v163;
  float *v164;
  float v165;
  float32x4_t *v166;
  float32x4_t *v167;
  uint64_t v168;
  float32x4_t v169;
  float32x4_t *v170;
  float32x4_t *v171;
  uint64_t v172;
  float32x4_t v173;
  __int128 *v174;
  _OWORD *v175;
  uint64_t v176;
  __int128 v177;
  __int128 *v178;
  _OWORD *v179;
  uint64_t v180;
  __int128 v181;
  float32x4_t **v182;
  float32x4_t **v183;

  if (a2)
    sub_19C2210D4(545);
  v15 = a3;
  if (!*(_QWORD *)(a1 + 552))
  {
    v17 = (void *)operator new[]();
    v18 = v17;
    if (a9 >= 1)
      bzero(v17, 4 * (3 * a9));
    *(_QWORD *)(a1 + 552) = v18;
    v19 = *(char **)(a1 + 2000);
    v20 = *(_QWORD *)(a1 + 2008);
    if ((unint64_t)v19 < v20)
    {
      *(_QWORD *)v19 = v18;
      v21 = (uint64_t)(v19 + 8);
LABEL_27:
      *(_QWORD *)(a1 + 2000) = v21;
      v15 = a3;
      goto LABEL_28;
    }
    v182 = a4;
    v183 = a5;
    v22 = (char **)(a1 + 1992);
    v23 = *(char **)(a1 + 1992);
    v24 = (char *)(v19 - v23);
    v25 = (v19 - v23) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      sub_19C07DA0C();
    v27 = v20 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        sub_19C07C7FC();
      v29 = operator new(8 * v28);
      v24 = (char *)(v19 - v23);
      v22 = (char **)(a1 + 1992);
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *v30 = v18;
      v21 = (uint64_t)(v30 + 1);
      v32 = (char *)(v19 - v23);
      if (v19 == v23)
        goto LABEL_25;
    }
    else
    {
      v29 = 0;
      v30 = (_QWORD *)(8 * v25);
      v31 = 0;
      *(_QWORD *)(8 * v25) = v18;
      v21 = 8 * v25 + 8;
      v32 = (char *)(v19 - v23);
      if (v19 == v23)
      {
LABEL_25:
        *(_QWORD *)(a1 + 1992) = v30;
        *(_QWORD *)(a1 + 2000) = v21;
        *(_QWORD *)(a1 + 2008) = v31;
        a4 = v182;
        a5 = v183;
        if (v19)
          operator delete(v19);
        goto LABEL_27;
      }
    }
    v33 = (unint64_t)(v32 - 8);
    if (v33 < 0x58)
      goto LABEL_130;
    if ((unint64_t)(v19 - v29 - (_QWORD)v24) < 0x20)
      goto LABEL_130;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v19[-v35];
    v30 = (_QWORD *)((char *)v30 - v35);
    v37 = &v29[8 * v25 - 16];
    v38 = v19 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v19 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_130:
      do
      {
        v41 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v30 = v41;
      }
      while (v19 != v23);
    }
    v19 = *v22;
    goto LABEL_25;
  }
LABEL_28:
  v42 = (float32x4_t **)(a1 + 552);
  sub_19C1032B4((void **)(a1 + 552), a6, a7, 3 * a9, a10, 0.0);
  if (!a11)
  {
    if (a9 < 1)
      return result;
    v66 = 0;
    v67 = *v42;
    v68 = *v15;
    if (a9 < 8)
      goto LABEL_48;
    if ((unint64_t)((char *)v68 - (char *)v67) < 0x20)
      goto LABEL_48;
    v66 = a9 & 0xFFFFFFF8;
    v69 = v67 + 1;
    v70 = v68 + 1;
    v71 = v66;
    do
    {
      result = v69[-1];
      v72 = *v69;
      v70[-1] = result;
      *v70 = v72;
      v69 += 2;
      v70 += 2;
      v71 -= 8;
    }
    while (v71);
    if (v66 != a9)
    {
LABEL_48:
      v73 = a9 - v66;
      v74 = 4 * v66;
      v75 = (__int32 *)((char *)v68 + v74);
      v76 = (__int32 *)((char *)v67 + v74);
      do
      {
        v77 = *v76++;
        *v75++ = v77;
        --v73;
      }
      while (v73);
    }
    v78 = *a4;
    if (a9 >= 8
      && (v79 = (float32x4_t *)((char *)v67 + 4 * a9),
          (unint64_t)((char *)v78 - (char *)v79) >= 0x20))
    {
      v80 = a9 & 0xFFFFFFF8;
      v166 = v79 + 1;
      v167 = v78 + 1;
      v168 = v80;
      do
      {
        result = v166[-1];
        v169 = *v166;
        v167[-1] = result;
        *v167 = v169;
        v166 += 2;
        v167 += 2;
        v168 -= 8;
      }
      while (v168);
      if (v80 == a9)
      {
LABEL_55:
        v85 = *a5;
        v86 = 2 * a9;
        if (a9 >= 8
          && (v87 = (float32x4_t *)((char *)v67 + 4 * v86), (unint64_t)((char *)v85 - (char *)v87) >= 0x20))
        {
          v88 = a9 & 0xFFFFFFF8;
          v170 = v87 + 1;
          v171 = v85 + 1;
          v172 = v88;
          do
          {
            result = v170[-1];
            v173 = *v170;
            v171[-1] = result;
            *v171 = v173;
            v170 += 2;
            v171 += 2;
            v172 -= 8;
          }
          while (v172);
          if (v88 == a9)
            return result;
        }
        else
        {
          v88 = 0;
        }
        v89 = a9 - v88;
        v90 = &v85->i32[v88];
        v91 = &v67->i32[v88 + v86];
        do
        {
          v92 = *v91++;
          result.i32[0] = v92;
          *v90++ = v92;
          --v89;
        }
        while (v89);
        return result;
      }
    }
    else
    {
      v80 = 0;
    }
    v81 = a9 - v80;
    v82 = &v78->i32[v80];
    v83 = &v67->i32[v80 + a9];
    do
    {
      v84 = *v83++;
      *v82++ = v84;
      --v81;
    }
    while (v81);
    goto LABEL_55;
  }
  v44 = (float **)(a1 + 536);
  if (a9 <= 0)
  {
    sub_19C118B54(v44, "outvec0/gzx", a9);
    v64 = 0;
    v57 = -(-a9 >> 3);
    v65 = -8 * (-a9 >> 3);
    if (v65 >= a9)
      goto LABEL_72;
  }
  else
  {
    v45 = 0;
    v46 = *v42;
    v47 = *v44;
    if (a9 < 8)
      goto LABEL_35;
    if ((unint64_t)((char *)v47 - (char *)v46) < 0x20)
      goto LABEL_35;
    v45 = a9 & 0x7FFFFFF8;
    v48 = (__int128 *)&v46[1];
    v49 = v47 + 4;
    v50 = a9 & 0xFFFFFFF8;
    do
    {
      v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 8;
    }
    while (v50);
    if (v45 != a9)
    {
LABEL_35:
      v52 = a9 - v45;
      v53 = v45;
      v54 = &v47[v53];
      v55 = (int *)((char *)v46 + v53 * 4);
      do
      {
        v56 = *v55++;
        *(_DWORD *)v54++ = v56;
        --v52;
      }
      while (v52);
    }
    sub_19C118B54(v44, "outvec0/gzx", a9);
    v57 = a9 >> 3;
    if (a9 <= 7)
    {
      v64 = 0;
      v65 = 8 * v57;
      if (8 * v57 >= a9)
        goto LABEL_72;
    }
    else
    {
      v58 = 0;
      v59 = *v15;
      v60 = *v44;
      do
      {
        v61 = &v59[2 * v58];
        v62 = (float32x4_t *)&v60[8 * v58];
        v63 = vaddq_f32(v61[1], v62[1]);
        *v61 = vaddq_f32(*v61, *v62);
        v61[1] = v63;
        ++v58;
      }
      while (v57 != (_DWORD)v58);
      v64 = 1;
      v65 = 8 * v57;
      if (8 * v57 >= a9)
        goto LABEL_72;
    }
  }
  v93 = *v44;
  v94 = *v15;
  v95 = v65;
  v96 = a9 - (uint64_t)v65;
  if (v96 < 8)
    goto LABEL_70;
  v97 = v65;
  if ((char *)v94 + v97 * 4 < (char *)&v93[a9] && &v93[v97] < &v94->f32[a9])
    goto LABEL_70;
  v98 = v96 - (a9 & 7) + v65;
  v99 = v65 + (a9 & 7) - a9;
  v100 = v97 * 4 + 16;
  v101 = (float32x4_t *)&v93[v97 + 4];
  v102 = (float32x4_t *)((char *)v94 + v100);
  do
  {
    v103 = vaddq_f32(*v102, *v101);
    v102[-1] = vaddq_f32(v102[-1], v101[-1]);
    *v102 = v103;
    v101 += 2;
    v102 += 2;
    v99 += 8;
  }
  while (v99);
  v95 = v98;
  if ((a9 & 7) != 0)
  {
LABEL_70:
    v104 = a9 - v95;
    v105 = &v94->f32[v95];
    v106 = &v93[v95];
    do
    {
      v107 = *v106++;
      *v105 = *v105 + v107;
      ++v105;
      --v104;
    }
    while (v104);
  }
LABEL_72:
  if (a9 < 1)
    goto LABEL_78;
  v108 = *v42;
  v109 = *v44;
  if (a9 < 8 || (v110 = (uint64_t)v108->i64 + 4 * a9, (unint64_t)v109 - v110 < 0x20))
  {
    v111 = 0;
LABEL_76:
    v112 = a9 - v111;
    v113 = &v109[v111];
    v114 = &v108->i32[v111 + a9];
    do
    {
      v115 = *v114++;
      *(_DWORD *)v113++ = v115;
      --v112;
    }
    while (v112);
    goto LABEL_78;
  }
  v111 = a9 & 0xFFFFFFF8;
  v174 = (__int128 *)(v110 + 16);
  v175 = v109 + 4;
  v176 = v111;
  do
  {
    v177 = *v174;
    *(v175 - 1) = *(v174 - 1);
    *v175 = v177;
    v174 += 2;
    v175 += 2;
    v176 -= 8;
  }
  while (v176);
  if (v111 != a9)
    goto LABEL_76;
LABEL_78:
  sub_19C118B54(v44, "outvec1/grx", a9);
  if (v64)
  {
    v116 = *a4;
    v117 = *v44;
    v118 = v57;
    do
    {
      v119 = *(float32x4_t *)v117;
      v120 = *(float32x4_t *)(v117 + 4);
      v117 += 8;
      v121 = vaddq_f32(v116[1], v120);
      *v116 = vaddq_f32(*v116, v119);
      v116[1] = v121;
      v116 += 2;
      --v118;
    }
    while (v118);
  }
  if (v65 < a9)
  {
    v122 = *v44;
    v123 = *a4;
    v124 = v65;
    v125 = a9 - (uint64_t)v65;
    if (v125 < 8)
      goto LABEL_88;
    v126 = v65;
    if ((char *)v123 + v126 * 4 < (char *)&v122[a9] && &v122[v126] < &v123->f32[a9])
      goto LABEL_88;
    v127 = v125 - (a9 & 7) + v65;
    v128 = v65 + (a9 & 7) - a9;
    v129 = v126 * 4 + 16;
    v130 = (float32x4_t *)&v122[v126 + 4];
    v131 = (float32x4_t *)((char *)v123 + v129);
    do
    {
      v132 = vaddq_f32(*v131, *v130);
      v131[-1] = vaddq_f32(v131[-1], v130[-1]);
      *v131 = v132;
      v130 += 2;
      v131 += 2;
      v128 += 8;
    }
    while (v128);
    v124 = v127;
    if ((a9 & 7) != 0)
    {
LABEL_88:
      v133 = a9 - v124;
      v134 = &v123->f32[v124];
      v135 = &v122[v124];
      do
      {
        v136 = *v135++;
        *v134 = *v134 + v136;
        ++v134;
        --v133;
      }
      while (v133);
    }
  }
  if (a9 < 1)
    goto LABEL_96;
  v137 = (2 * a9);
  v138 = *v42;
  v139 = *v44;
  if (a9 >= 8 && (v140 = (uint64_t)v138->i64 + 4 * v137, (unint64_t)v139 - v140 >= 0x20))
  {
    v141 = a9 & 0xFFFFFFF8;
    v178 = (__int128 *)(v140 + 16);
    v179 = v139 + 4;
    v180 = v141;
    do
    {
      v181 = *v178;
      *(v179 - 1) = *(v178 - 1);
      *v179 = v181;
      v178 += 2;
      v179 += 2;
      v180 -= 8;
    }
    while (v180);
    if (v141 == a9)
      goto LABEL_96;
  }
  else
  {
    v141 = 0;
  }
  v142 = a9 - v141;
  v143 = &v139[v141];
  v144 = &v138->i32[v141 + v137];
  do
  {
    v145 = *v144++;
    *(_DWORD *)v143++ = v145;
    --v142;
  }
  while (v142);
LABEL_96:
  sub_19C118B54(v44, "outvec2/gox", a9);
  if (v64)
  {
    v146 = *a5;
    v147 = *v44;
    do
    {
      v148 = *(float32x4_t *)v147;
      v149 = *(float32x4_t *)(v147 + 4);
      v147 += 8;
      v150 = vaddq_f32(v146[1], v149);
      result = vaddq_f32(*v146, v148);
      *v146 = result;
      v146[1] = v150;
      v146 += 2;
      --v57;
    }
    while (v57);
  }
  if (v65 < a9)
  {
    v151 = *v44;
    v152 = *a5;
    v153 = v65;
    v154 = a9 - (uint64_t)v65;
    if (v154 < 8)
      goto LABEL_106;
    v155 = v65;
    if ((char *)v152 + v155 * 4 < (char *)&v151[a9] && &v151[v155] < &v152->f32[a9])
      goto LABEL_106;
    v156 = v154 - (a9 & 7) + v65;
    v157 = v65 + (a9 & 7) - a9;
    v158 = v155 * 4 + 16;
    v159 = (float32x4_t *)&v151[v155 + 4];
    v160 = (float32x4_t *)((char *)v152 + v158);
    do
    {
      result = vaddq_f32(v160[-1], v159[-1]);
      v161 = vaddq_f32(*v160, *v159);
      v160[-1] = result;
      *v160 = v161;
      v159 += 2;
      v160 += 2;
      v157 += 8;
    }
    while (v157);
    v153 = v156;
    if ((a9 & 7) != 0)
    {
LABEL_106:
      v162 = a9 - v153;
      v163 = &v152->f32[v153];
      v164 = &v151[v153];
      do
      {
        v165 = *v164++;
        result.f32[0] = *v163 + v165;
        *v163++ = result.f32[0];
        --v162;
      }
      while (v162);
    }
  }
  return result;
}

void sub_19C118850(uint64_t a1, int a2, void **a3, uint64_t *a4, uint64_t *a5, uint64_t a6, int a7, unsigned int a8, char a9)
{
  void **v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float v44;
  void *__p;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;

  if ((a9 & 1) != 0)
  {
    v13 = (void **)(a1 + 536);
    if (a2)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v15 = *(const void **)a6;
      v14 = *(_QWORD *)(a6 + 8);
      v16 = v14 - *(_QWORD *)a6;
      if (v14 != *(_QWORD *)a6)
      {
        if (v16 < 0)
          sub_19C07DA0C();
        v17 = (char *)operator new(v14 - *(_QWORD *)a6);
        v18 = &v17[4 * (v16 >> 2)];
        __p = v17;
        v47 = v18;
        memcpy(v17, v15, v16);
        v46 = v18;
      }
      sub_19C104ADC(v13, (int **)&__p, a5, a7, a8);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      v19 = a7 / 8;
      if (a7 < 8)
        goto LABEL_19;
    }
    else
    {
      sub_19C1032B4((void **)(a1 + 536), a4, (__int16 **)a5, a7, a8, 0.0);
      v19 = a7 / 8;
      if (a7 < 8)
      {
LABEL_19:
        v31 = 8 * v19;
        if (8 * v19 < a7)
        {
          v32 = (char *)*v13;
          v33 = (char *)*a3;
          v34 = v31;
          if ((unint64_t)(a7 - (uint64_t)v31) < 8)
            goto LABEL_26;
          v35 = 4 * v31;
          if (&v33[v35] < &v32[4 * a7] && &v32[v35] < &v33[4 * a7])
            goto LABEL_26;
          v36 = v31 + (a7 & 7) - a7;
          v37 = v35 + 16;
          v38 = (float32x4_t *)&v32[v35 + 16];
          v39 = (float32x4_t *)&v33[v37];
          do
          {
            v40 = vaddq_f32(*v39, *v38);
            v39[-1] = vaddq_f32(v39[-1], v38[-1]);
            *v39 = v40;
            v38 += 2;
            v39 += 2;
            v36 += 8;
          }
          while (v36);
          v34 = a7 - (a7 & 7);
          if ((a7 & 7) != 0)
          {
LABEL_26:
            v41 = a7 - v34;
            v42 = (float *)&v33[4 * v34];
            v43 = (float *)&v32[4 * v34];
            do
            {
              v44 = *v43++;
              *v42 = *v42 + v44;
              ++v42;
              --v41;
            }
            while (v41);
          }
        }
        return;
      }
    }
    v25 = (float32x4_t *)*a3;
    v26 = (float32x4_t *)*v13;
    v27 = v19;
    do
    {
      v28 = *v26;
      v29 = v26[1];
      v26 += 2;
      v30 = vaddq_f32(v25[1], v29);
      *v25 = vaddq_f32(*v25, v28);
      v25[1] = v30;
      v25 += 2;
      --v27;
    }
    while (v27);
    goto LABEL_19;
  }
  if (a2)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v21 = *(const void **)a6;
    v20 = *(_QWORD *)(a6 + 8);
    v22 = v20 - *(_QWORD *)a6;
    if (v20 != *(_QWORD *)a6)
    {
      if (v22 < 0)
        sub_19C07DA0C();
      v23 = (char *)operator new(v20 - *(_QWORD *)a6);
      v24 = &v23[4 * (v22 >> 2)];
      v48 = v23;
      v50 = v24;
      memcpy(v23, v21, v22);
      v49 = v24;
    }
    sub_19C104ADC(a3, (int **)&v48, a5, a7, a8);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
  else
  {
    sub_19C1032B4(a3, a4, (__int16 **)a5, a7, a8, 0.0);
  }
}

void sub_19C118B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C118B54(float **a1, const char *a2, int a3)
{
  float *v6;
  uint64_t v7;
  char v8;
  float v9;
  BOOL v10;
  const char *v11;
  size_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  size_t v19;
  std::string::size_type v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  std::string::size_type size;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string __dst;
  uint64_t v60;
  void *__p;
  char v62;
  uint64_t v63;
  __int128 v64;
  int64_t v65;
  void *v66[2];
  uint64_t v67;
  std::string v68;
  uint64_t v69;
  void *v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  int64_t v74;
  void *v75[2];
  char v76;
  char v77[100];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  sprintf(v77, "0x%lx", *a1);
  v76 = 5;
  strcpy((char *)v75, "() ");
  if (a3 <= 0)
  {
    v8 = 1;
  }
  else
  {
    v6 = *a1;
    v7 = a3;
    v8 = 1;
    do
    {
      v9 = *v6++;
      v10 = v9 >= -1.0;
      if (v9 > 1.0)
        v10 = 0;
      v8 &= v10;
      --v7;
    }
    while (v7);
    if ((v8 & 1) == 0)
    {
      v11 = "inRange:no";
      goto LABEL_10;
    }
  }
  v11 = "inRange:yes";
LABEL_10:
  if ((v8 & 1) != 0)
    v12 = 11;
  else
    v12 = 10;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
  memcpy(&__dst, v11, v12);
  __dst.__r_.__value_.__s.__data_[v12] = 0;
  v13 = std::string::insert(&__dst, 0, " (");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v68, ") ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v74 = v15->__r_.__value_.__r.__words[2];
  v73 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  sub_19C0FF394((uint64_t)&v68);
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  std::ostream::operator<<();
  sub_19C0FF4CC((uint64_t *)&v68, (uint64_t)v66);
  std::operator+<char>();
  v17 = std::string::append(&__dst, "] ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v65 = v17->__r_.__value_.__r.__words[2];
  v64 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_19C0FF394((uint64_t)&__dst);
  v19 = strlen(a2);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    v54.__r_.__value_.__l.__size_ = v20;
    v54.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    goto LABEL_24;
  }
  *((_BYTE *)&v54.__r_.__value_.__s + 23) = v19;
  v21 = &v54;
  if (v19)
LABEL_24:
    memcpy(v21, a2, v20);
  *((_BYTE *)v21 + v20) = 0;
  if (v74 >= 0)
    v24 = (const std::string::value_type *)&v73;
  else
    v24 = (const std::string::value_type *)v73;
  if (v74 >= 0)
    v25 = HIBYTE(v74);
  else
    v25 = *((_QWORD *)&v73 + 1);
  v26 = std::string::append(&v54, v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v76 >= 0)
    v28 = (const std::string::value_type *)v75;
  else
    v28 = (const std::string::value_type *)v75[0];
  if (v76 >= 0)
    v29 = v76;
  else
    v29 = (std::string::size_type)v75[1];
  v30 = std::string::append(&v55, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (v65 >= 0)
    v32 = (const std::string::value_type *)&v64;
  else
    v32 = (const std::string::value_type *)v64;
  if (v65 >= 0)
    v33 = HIBYTE(v65);
  else
    v33 = *((_QWORD *)&v64 + 1);
  v34 = std::string::append(&v56, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v57, "[ ");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_54:
    operator delete(v54.__r_.__value_.__l.__data_);
    if (a3 < 1)
      goto LABEL_85;
    goto LABEL_55;
  }
LABEL_53:
  operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_47:
  if (a3 >= 1)
  {
LABEL_55:
    v38 = 0;
    if (a3 >= 1000)
      v39 = 1000;
    else
      v39 = a3;
    v40 = 4 * v39;
    do
    {
      memset(&v57, 0, sizeof(v57));
      std::ios_base::clear((std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      sub_19C0FF4CC((uint64_t *)&__dst, (uint64_t)&v57);
      v41 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v43 = size + 3;
      if (size + 3 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v43 >= 0x17)
      {
        v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17)
          v45 = v43 | 7;
        v46 = v45 + 1;
        v44 = (char *)operator new(v45 + 1);
        v56.__r_.__value_.__l.__size_ = size + 3;
        v56.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      }
      else
      {
        memset(&v56, 0, sizeof(v56));
        v44 = (char *)&v56;
        *((_BYTE *)&v56.__r_.__value_.__s + 23) = size + 3;
        if (!size)
          goto LABEL_74;
      }
      if (v41 >= 0)
        v47 = &v57;
      else
        v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
      memmove(v44, v47, size);
LABEL_74:
      *(_DWORD *)&v44[size] = 2108448;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v56;
      else
        v48 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v49 = v56.__r_.__value_.__l.__size_;
      std::string::append(&v58, (const std::string::value_type *)v48, v49);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_84;
      }
      v38 += 4;
    }
    while (v40 != v38);
  }
LABEL_85:
  std::string::append(&v58, "]");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v50 = *MEMORY[0x1E0DE4F50];
  __dst.__r_.__value_.__r.__words[0] = v50;
  v52 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v51 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v50 - 24)) = v52;
  v53 = MEMORY[0x1E0DE4FB8];
  __dst.__r_.__value_.__r.__words[2] = v51;
  v60 = MEMORY[0x1E0DE4FB8] + 16;
  if (v62 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](&v63);
  if (SHIBYTE(v65) < 0)
  {
    operator delete((void *)v64);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      goto LABEL_91;
  }
  else if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v66[0]);
LABEL_91:
  v68.__r_.__value_.__r.__words[0] = v50;
  *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + *(_QWORD *)(v50 - 24)) = v52;
  v68.__r_.__value_.__r.__words[2] = v51;
  v69 = v53 + 16;
  if (v71 < 0)
    operator delete(v70);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](&v72);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    if ((v76 & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(v75[0]);
    return;
  }
  operator delete((void *)v73);
  if (v76 < 0)
    goto LABEL_99;
}

void sub_19C1191F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  uint64_t v75;

  if (a32 < 0)
    operator delete(__p);
  sub_19C0FF6FC((uint64_t)&a33);
  if (a72 < 0)
    operator delete(a68);
  if (a74 < 0)
    operator delete(a73);
  sub_19C0FF6FC((uint64_t)&a75);
  if (*(char *)(v75 - 233) < 0)
    operator delete(*(void **)(v75 - 256));
  if (*(char *)(v75 - 209) < 0)
    operator delete(*(void **)(v75 - 232));
  _Unwind_Resume(a1);
}

_QWORD *sub_19C1193D0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  *a1 = &unk_1E3D1F730;
  sub_19C115434(a1);
  v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19C22CB78((uint64_t)(a1 + 239));
  sub_19C22CB78((uint64_t)(a1 + 230));
  sub_19C22CB78((uint64_t)(a1 + 221));
  sub_19C22CB78((uint64_t)(a1 + 212));
  sub_19C22CB78((uint64_t)(a1 + 203));
  sub_19C22CB78((uint64_t)(a1 + 194));
  sub_19C22CB78((uint64_t)(a1 + 185));
  sub_19C22CB78((uint64_t)(a1 + 176));
  sub_19C22CB78((uint64_t)(a1 + 167));
  sub_19C22CB78((uint64_t)(a1 + 158));
  sub_19C22CB78((uint64_t)(a1 + 149));
  sub_19C101AC4(a1 + 119);
  sub_19C101AC4(a1 + 104);
  sub_19C101AC4(a1 + 89);
  v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  v16 = a1[26];
  if (v16)
  {
    v17 = a1[27];
    v18 = (void *)a1[26];
    if (v17 != v16)
    {
      v19 = a1[27];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1E3D1E2D8;
  v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19C119628(uint64_t a1, int a2, __int128 *a3, float a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v66;
  void **v67;
  char **v68;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1F1F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  v5 = a3[2];
  v6 = a3[3];
  v7 = *((_QWORD *)a3 + 8);
  v9 = *a3;
  v8 = a3[1];
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  v66 = (void **)(a1 + 192);
  v67 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19C22CB44(a1 + 216);
  v68 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  v10 = dword_1EE418968;
  v11 = dword_1EE418968;
  v12 = *(_QWORD *)(a1 + 168);
  v13 = (*(_QWORD *)(a1 + 176) - v12) >> 3;
  if (dword_1EE418968 <= v13)
  {
    if (dword_1EE418968 < v13)
      *(_QWORD *)(a1 + 176) = v12 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v67, dword_1EE418968 - v13);
    v10 = dword_1EE418968;
    v11 = dword_1EE418968;
  }
  v14 = *(_QWORD *)(a1 + 192);
  v15 = (*(_QWORD *)(a1 + 200) - v14) >> 3;
  if (v11 <= v15)
  {
    if (v11 < v15)
      *(_QWORD *)(a1 + 200) = v14 + 8 * v11;
  }
  else
  {
    sub_19C098930(v66, v11 - v15);
    v10 = dword_1EE418968;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v10 >= 1)
  {
    for (i = 0; i < dword_1EE418968; ++i)
    {
      v18 = *(unsigned int *)(a1 + 44);
      v19 = (void *)operator new[]();
      v20 = v19;
      if ((int)v18 >= 1)
        bzero(v19, 4 * v18);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i) = v20;
      v21 = *(unsigned int *)(a1 + 44);
      v22 = (void *)operator new[]();
      v23 = v22;
      if ((int)v21 >= 1)
        bzero(v22, 4 * v21);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i) = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i);
      v26 = *(char **)(a1 + 296);
      v25 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v26 < v25)
      {
        *(_QWORD *)v26 = v24;
        v27 = v26 + 8;
        goto LABEL_30;
      }
      v28 = *v68;
      v29 = v26 - *v68;
      v30 = v29 >> 3;
      v31 = (v29 >> 3) + 1;
      if (v31 >> 61)
        sub_19C07DA0C();
      v32 = v25 - (_QWORD)v28;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          sub_19C07C7FC();
        v34 = operator new(8 * v33);
        v35 = &v34[8 * v30];
        *v35 = v24;
        v27 = (char *)(v35 + 1);
        if (v26 == v28)
        {
LABEL_28:
          *(_QWORD *)(a1 + 288) = v35;
          *(_QWORD *)(a1 + 296) = v27;
          *(_QWORD *)(a1 + 304) = &v34[8 * v33];
          if (!v26)
            goto LABEL_30;
LABEL_29:
          operator delete(v26);
          goto LABEL_30;
        }
      }
      else
      {
        v34 = 0;
        v35 = (_QWORD *)(8 * v30);
        *(_QWORD *)(8 * v30) = v24;
        v27 = (char *)(8 * v30 + 8);
        if (v26 == v28)
          goto LABEL_28;
      }
      v49 = v26 - 8 - v28;
      if (v49 < 0x58)
        goto LABEL_68;
      if ((unint64_t)(v26 - &v34[v29]) < 0x20)
        goto LABEL_68;
      v50 = (v49 >> 3) + 1;
      v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      v52 = &v26[-v51];
      v35 = (_QWORD *)((char *)v35 - v51);
      v53 = &v34[8 * v30 - 16];
      v54 = (__int128 *)(v26 - 16);
      v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v26 = v52;
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          v57 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v57;
        }
        while (v26 != v28);
      }
      v26 = *v68;
      *(_QWORD *)(a1 + 288) = v35;
      *(_QWORD *)(a1 + 296) = v27;
      *(_QWORD *)(a1 + 304) = &v34[8 * v33];
      if (v26)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(a1 + 296) = v27;
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i);
      v37 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v27 < v37)
      {
        *(_QWORD *)v27 = v36;
        v17 = (uint64_t)(v27 + 8);
        goto LABEL_12;
      }
      v38 = *v68;
      v39 = v27 - *v68;
      v40 = v39 >> 3;
      v41 = (v39 >> 3) + 1;
      if (v41 >> 61)
        sub_19C07DA0C();
      v42 = v37 - (_QWORD)v38;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          sub_19C07C7FC();
        v44 = operator new(8 * v43);
        v45 = &v44[8 * v40];
        v46 = &v44[8 * v43];
        *v45 = v36;
        v17 = (uint64_t)(v45 + 1);
        if (v27 == v38)
        {
LABEL_52:
          *(_QWORD *)(a1 + 288) = v45;
          *(_QWORD *)(a1 + 296) = v17;
          *(_QWORD *)(a1 + 304) = v46;
LABEL_60:
          operator delete(v27);
          goto LABEL_12;
        }
      }
      else
      {
        v44 = 0;
        v45 = (_QWORD *)(8 * v40);
        v46 = 0;
        *(_QWORD *)(8 * v40) = v36;
        v17 = 8 * v40 + 8;
        if (v27 == v38)
          goto LABEL_52;
      }
      v47 = v27 - 8 - v38;
      if (v47 < 0x58)
      {
        v48 = v27;
        goto LABEL_58;
      }
      if ((unint64_t)(v27 - &v44[v39]) < 0x20)
      {
        v48 = v27;
        do
        {
LABEL_58:
          v64 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v45 = v64;
        }
        while (v48 != v38);
        goto LABEL_59;
      }
      v58 = (v47 >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v27[-v59];
      v45 = (_QWORD *)((char *)v45 - v59);
      v60 = &v44[8 * v40 - 16];
      v61 = (__int128 *)(v27 - 16);
      v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *v61;
        *(v60 - 1) = *(v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      v27 = *(char **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v45;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v46;
      if (v27)
        goto LABEL_60;
LABEL_12:
      *(_QWORD *)(a1 + 296) = v17;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_19C119B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12)
{
  _QWORD *v12;
  void *v14;
  void *v15;
  void *v16;

  v14 = *a10;
  if (*a10)
  {
    v12[25] = v14;
    operator delete(v14);
    v15 = *a11;
    if (!*a11)
    {
LABEL_3:
      *v12 = &unk_1E3D1E2D8;
      v16 = (void *)v12[1];
      if (!v16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  v12[22] = v15;
  operator delete(v15);
  *v12 = &unk_1E3D1E2D8;
  v16 = (void *)v12[1];
  if (!v16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v12[2] = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_19C119BD0()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C119BE0(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19C119BE8(uint64_t a1)
{
  return a1 + 192;
}

void sub_19C119BF0()
{
  sub_19C2210D4(1);
}

void sub_19C119C00()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C119C10()
{
  return 0;
}

_BYTE *sub_19C119C18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    sub_19C2210D4(3);
  v9 = *a3;
  v10 = *(unsigned __int8 *)(a1 + 161);
  v11 = sub_19C2210AC();
  sub_19C101BB8((_BYTE *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  v12 = *a3;
  v13 = *(unsigned __int8 *)(a1 + 161);
  v14 = sub_19C2210AC();
  sub_19C101BB8((_BYTE *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  v15 = *a3;
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = sub_19C2210AC();
  sub_19C101BB8((_BYTE *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  v18 = *a3;
  v19 = *(unsigned __int8 *)(a1 + 161);
  v20 = sub_19C2210AC();
  return sub_19C101BB8((_BYTE *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, *(_DWORD *)(a1 + 44));
}

void sub_19C119D4C(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int v9;
  int v10;
  int v11;
  int v12;

  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 44));
  v9 = sub_19C2210AC();
  sub_19C11A244((void **)(a1 + 128), __stream, a3, 3, v9, a5, *(_DWORD *)(a1 + 44));
  v10 = sub_19C2210AC();
  sub_19C11A244((void **)(a1 + 136), __stream, a3, 3, v10, a5, *(_DWORD *)(a1 + 44));
  v11 = sub_19C2210AC();
  sub_19C11A244((void **)(a1 + 144), __stream, a3, 3, v11, a5, *(_DWORD *)(a1 + 44));
  v12 = sub_19C2210AC();
  sub_19C11A244((void **)(a1 + 152), __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 44));
}

void sub_19C119E78(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19C11A63C(a1);
  operator delete(__p);
}

void sub_19C119F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C119F24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;

  v3 = a1[36];
  v2 = a1[37];
  if (v2 == v3)
  {
    v3 = a1[37];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v3 = a1[36];
        v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19C119F90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C119F98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19C119FA8()
{
  sub_19C2210D4(5);
}

int *sub_19C119FB8(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t i;
  int32x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  BOOL v18;
  BOOL v20;
  BOOL v22;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    for (i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      v9 = v6[11];
      v10 = *(float32x4_t **)(*((_QWORD *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        v11 = (float32x4_t *)*((_QWORD *)v6 + 16);
        v12 = (float32x4_t *)*((_QWORD *)v6 + 17);
        v13 = (float32x4_t *)*((_QWORD *)v6 + 18);
        v14 = (float32x4_t *)*((_QWORD *)v6 + 19);
        if (v9 >= 8)
        {
          v15 = 0;
          v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            v15 = v9 & 0x7FFFFFF8;
            v24 = v11 + 1;
            v25 = v10 + 1;
            v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            v27 = v12 + 1;
            v28 = v14 + 1;
            v29 = v13 + 1;
            v30 = v9 & 0xFFFFFFF8;
            do
            {
              v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9)
              goto LABEL_3;
          }
        }
        else
        {
          v15 = 0;
        }
        v32 = v9 - v15;
        v33 = v15;
        v34 = &v10->f32[v15];
        v35 = &v14->f32[v33];
        v36 = &v13->f32[v33];
        v37 = &v12->f32[v33];
        v38 = &v11->f32[v33];
        do
        {
          v39 = *v38++;
          v40 = v39;
          v41 = *v37++;
          v42 = sqrtf(v41 + *(float *)v8.i32);
          v43 = *v36++;
          v44 = v43;
          v45 = *v35++;
          *v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

_QWORD *sub_19C11A1A4(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF28, 0);
  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19C11A20C()
{
  sub_19C2210D4(5);
}

void sub_19C11A21C()
{
  sub_19C2210D4(5);
}

void sub_19C11A230(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C11B0E4(a1);
  operator delete(v1);
}

void sub_19C11A244(void **a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, int a7)
{
  int v7;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v7 = a7;
LABEL_8:
          sub_19C11A308(a1, a2, a3, a4, v7);
          return;
        case 8u:
          sub_19C11A530((float **)a1, a2, a3, a4, a7);
          break;
        case 0x10u:
          sub_19C11A41C((float **)a1, a2, a3, a4, a7);
          break;
      }
      break;
  }
}

void sub_19C11A308(void **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  void *v11;
  void *v12;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v9 = *a3 & 0xF;
    if (*a3 <= 0)
      v9 = -(-*a3 & 0xF);
    if (v9 >= 15)
      v10 = 16;
    else
      v10 = 15 - v9;
    sub_19C221368(__stream, a3, v10);
    sub_19C2213F8((size_t)__stream, a3, 85, v10);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  v11 = (void *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, 4 * a5);
  sub_19C2214B0(__stream, a3, *a1, (uint64_t)v12, a5);
  operator delete[](v12);
}

void sub_19C11A41C(float **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  _WORD *v11;
  _WORD *v12;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v9 = *a3 & 0xF;
    if (*a3 <= 0)
      v9 = -(-*a3 & 0xF);
    if (v9 >= 15)
      v10 = 16;
    else
      v10 = 15 - v9;
    sub_19C221368(__stream, a3, v10);
    sub_19C2213F8((size_t)__stream, a3, 85, v10);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  v11 = (_WORD *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, 2 * a5);
  sub_19C22150C(__stream, a3, *a1, v12, a5);
  operator delete[](v12);
}

void sub_19C11A530(float **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v9 = *a3 & 0xF;
    if (*a3 <= 0)
      v9 = -(-*a3 & 0xF);
    if (v9 >= 15)
      v10 = 16;
    else
      v10 = 15 - v9;
    sub_19C221368(__stream, a3, v10);
    sub_19C2213F8((size_t)__stream, a3, 85, v10);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  v11 = (_BYTE *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, a5);
  sub_19C2215E4(__stream, a3, *a1, v12, a5);
  operator delete[](v12);
}

void sub_19C11A63C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char **v112;
  int v113;
  uint64_t v114;
  void *v115;
  void *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  _OWORD *v156;
  char *v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;

  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v2 = (void **)(a1 + 168);
  v5 = dword_1EE418968;
  v6 = (v4 - v3) >> 3;
  if (dword_1EE418968 <= v6)
  {
    if (dword_1EE418968 < v6)
      *(_QWORD *)(a1 + 176) = v3 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v2, dword_1EE418968 - v6);
    v5 = dword_1EE418968;
  }
  v7 = *(_QWORD *)(a1 + 192);
  v8 = (*(_QWORD *)(a1 + 200) - v7) >> 3;
  if (v5 <= v8)
  {
    if (v5 < v8)
      *(_QWORD *)(a1 + 200) = v7 + 8 * v5;
  }
  else
  {
    sub_19C098930((void **)(a1 + 192), v5 - v8);
  }
  if (!*(_BYTE *)(a1 + 161))
  {
    v9 = *(unsigned int *)(a1 + 44);
    v10 = (void *)operator new[]();
    v11 = v10;
    if ((int)v9 >= 1)
      bzero(v10, 4 * v9);
    *(_QWORD *)(a1 + 128) = v11;
    v12 = *(unsigned int *)(a1 + 44);
    v13 = (void *)operator new[]();
    v14 = v13;
    if ((int)v12 >= 1)
      bzero(v13, 4 * v12);
    *(_QWORD *)(a1 + 136) = v14;
    v15 = *(unsigned int *)(a1 + 44);
    v16 = (void *)operator new[]();
    v17 = v16;
    if ((int)v15 >= 1)
      bzero(v16, 4 * v15);
    *(_QWORD *)(a1 + 144) = v17;
    v18 = *(unsigned int *)(a1 + 44);
    v19 = (void *)operator new[]();
    v20 = v19;
    if ((int)v18 >= 1)
      bzero(v19, 4 * v18);
    *(_QWORD *)(a1 + 152) = v20;
    v21 = (_QWORD *)(a1 + 288);
    v22 = *(_QWORD *)(a1 + 128);
    v24 = *(char **)(a1 + 296);
    v23 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v24 < v23)
    {
      *(_QWORD *)v24 = v22;
      v25 = v24 + 8;
      goto LABEL_42;
    }
    v26 = (char *)*v21;
    v27 = (uint64_t)&v24[-*v21];
    v28 = v27 >> 3;
    v29 = (v27 >> 3) + 1;
    if (v29 >> 61)
      goto LABEL_166;
    v30 = v23 - (_QWORD)v26;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        goto LABEL_167;
      v32 = operator new(8 * v31);
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v22;
      v25 = (char *)(v33 + 1);
      v35 = (char *)(v24 - v26);
      if (v24 == v26)
        goto LABEL_40;
    }
    else
    {
      v32 = 0;
      v33 = (_QWORD *)(8 * v28);
      v34 = 0;
      *(_QWORD *)(8 * v28) = v22;
      v25 = (char *)(8 * v28 + 8);
      v35 = (char *)(v24 - v26);
      if (v24 == v26)
      {
LABEL_40:
        *(_QWORD *)(a1 + 288) = v33;
        *(_QWORD *)(a1 + 296) = v25;
        *(_QWORD *)(a1 + 304) = v34;
        if (v24)
          operator delete(v24);
LABEL_42:
        *(_QWORD *)(a1 + 296) = v25;
        v45 = *(_QWORD *)(a1 + 136);
        v46 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v25 < v46)
        {
          *(_QWORD *)v25 = v45;
          v47 = v25 + 8;
          goto LABEL_65;
        }
        v48 = (char *)*v21;
        v49 = (uint64_t)&v25[-*v21];
        v50 = v49 >> 3;
        v51 = (v49 >> 3) + 1;
        if (v51 >> 61)
          goto LABEL_166;
        v52 = v46 - (_QWORD)v48;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          if (v53 >> 61)
            goto LABEL_167;
          v54 = operator new(8 * v53);
          v55 = &v54[8 * v50];
          v56 = &v54[8 * v53];
          *v55 = v45;
          v47 = (char *)(v55 + 1);
          v57 = (char *)(v25 - v48);
          if (v25 != v48)
          {
LABEL_53:
            v58 = (unint64_t)(v57 - 8);
            if (v58 >= 0x58)
            {
              if ((unint64_t)(v25 - v54 - v49) >= 0x20)
              {
                v60 = (v58 >> 3) + 1;
                v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
                v59 = &v25[-v61];
                v55 = (_QWORD *)((char *)v55 - v61);
                v62 = &v54[8 * v50 - 16];
                v63 = v25 - 16;
                v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = *(_OWORD *)v63;
                  *(v62 - 1) = *((_OWORD *)v63 - 1);
                  *v62 = v65;
                  v62 -= 2;
                  v63 -= 32;
                  v64 -= 4;
                }
                while (v64);
                if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_63:
                  v25 = *(char **)(a1 + 288);
                  *(_QWORD *)(a1 + 288) = v55;
                  *(_QWORD *)(a1 + 296) = v47;
                  *(_QWORD *)(a1 + 304) = v56;
                  if (!v25)
                    goto LABEL_65;
                  goto LABEL_64;
                }
              }
              else
              {
                v59 = v25;
              }
            }
            else
            {
              v59 = v25;
            }
            do
            {
              v66 = *((_QWORD *)v59 - 1);
              v59 -= 8;
              *--v55 = v66;
            }
            while (v59 != v48);
            goto LABEL_63;
          }
        }
        else
        {
          v54 = 0;
          v55 = (_QWORD *)(8 * v50);
          v56 = 0;
          *(_QWORD *)(8 * v50) = v45;
          v47 = (char *)(8 * v50 + 8);
          v57 = (char *)(v25 - v48);
          if (v25 != v48)
            goto LABEL_53;
        }
        *(_QWORD *)(a1 + 288) = v55;
        *(_QWORD *)(a1 + 296) = v47;
        *(_QWORD *)(a1 + 304) = v56;
LABEL_64:
        operator delete(v25);
LABEL_65:
        *(_QWORD *)(a1 + 296) = v47;
        v67 = *(_QWORD *)(a1 + 144);
        v68 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v47 < v68)
        {
          *(_QWORD *)v47 = v67;
          v69 = v47 + 8;
          goto LABEL_88;
        }
        v70 = (char *)*v21;
        v71 = (uint64_t)&v47[-*v21];
        v72 = v71 >> 3;
        v73 = (v71 >> 3) + 1;
        if (v73 >> 61)
          goto LABEL_166;
        v74 = v68 - (_QWORD)v70;
        if (v74 >> 2 > v73)
          v73 = v74 >> 2;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          if (v75 >> 61)
            goto LABEL_167;
          v76 = operator new(8 * v75);
          v77 = &v76[8 * v72];
          v78 = &v76[8 * v75];
          *v77 = v67;
          v69 = (char *)(v77 + 1);
          v79 = (char *)(v47 - v70);
          if (v47 != v70)
          {
LABEL_76:
            v80 = (unint64_t)(v79 - 8);
            if (v80 >= 0x58)
            {
              if ((unint64_t)(v47 - v76 - v71) >= 0x20)
              {
                v82 = (v80 >> 3) + 1;
                v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
                v81 = &v47[-v83];
                v77 = (_QWORD *)((char *)v77 - v83);
                v84 = &v76[8 * v72 - 16];
                v85 = v47 - 16;
                v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v87 = *(_OWORD *)v85;
                  *(v84 - 1) = *((_OWORD *)v85 - 1);
                  *v84 = v87;
                  v84 -= 2;
                  v85 -= 32;
                  v86 -= 4;
                }
                while (v86);
                if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_86:
                  v47 = *(char **)(a1 + 288);
                  *(_QWORD *)(a1 + 288) = v77;
                  *(_QWORD *)(a1 + 296) = v69;
                  *(_QWORD *)(a1 + 304) = v78;
                  if (!v47)
                    goto LABEL_88;
                  goto LABEL_87;
                }
              }
              else
              {
                v81 = v47;
              }
            }
            else
            {
              v81 = v47;
            }
            do
            {
              v88 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *--v77 = v88;
            }
            while (v81 != v70);
            goto LABEL_86;
          }
        }
        else
        {
          v76 = 0;
          v77 = (_QWORD *)(8 * v72);
          v78 = 0;
          *(_QWORD *)(8 * v72) = v67;
          v69 = (char *)(8 * v72 + 8);
          v79 = (char *)(v47 - v70);
          if (v47 != v70)
            goto LABEL_76;
        }
        *(_QWORD *)(a1 + 288) = v77;
        *(_QWORD *)(a1 + 296) = v69;
        *(_QWORD *)(a1 + 304) = v78;
LABEL_87:
        operator delete(v47);
LABEL_88:
        *(_QWORD *)(a1 + 296) = v69;
        v89 = *(_QWORD *)(a1 + 152);
        v90 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v69 < v90)
        {
          *(_QWORD *)v69 = v89;
          v91 = (uint64_t)(v69 + 8);
          goto LABEL_111;
        }
        v92 = (char *)*v21;
        v93 = (uint64_t)&v69[-*v21];
        v94 = v93 >> 3;
        v95 = (v93 >> 3) + 1;
        if (!(v95 >> 61))
        {
          v96 = v90 - (_QWORD)v92;
          if (v96 >> 2 > v95)
            v95 = v96 >> 2;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (!v97)
          {
            v98 = 0;
            v99 = (_QWORD *)(8 * v94);
            v100 = 0;
            *(_QWORD *)(8 * v94) = v89;
            v91 = 8 * v94 + 8;
            v101 = (char *)(v69 - v92);
            if (v69 != v92)
            {
LABEL_99:
              v102 = (unint64_t)(v101 - 8);
              if (v102 >= 0x58)
              {
                if ((unint64_t)(v69 - v98 - v93) >= 0x20)
                {
                  v104 = (v102 >> 3) + 1;
                  v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                  v103 = &v69[-v105];
                  v99 = (_QWORD *)((char *)v99 - v105);
                  v106 = &v98[8 * v94 - 16];
                  v107 = v69 - 16;
                  v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v109 = *(_OWORD *)v107;
                    *(v106 - 1) = *((_OWORD *)v107 - 1);
                    *v106 = v109;
                    v106 -= 2;
                    v107 -= 32;
                    v108 -= 4;
                  }
                  while (v108);
                  if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_109:
                    v69 = *(char **)(a1 + 288);
                    *(_QWORD *)(a1 + 288) = v99;
                    *(_QWORD *)(a1 + 296) = v91;
                    *(_QWORD *)(a1 + 304) = v100;
                    if (!v69)
                      goto LABEL_111;
                    goto LABEL_110;
                  }
                }
                else
                {
                  v103 = v69;
                }
              }
              else
              {
                v103 = v69;
              }
              do
              {
                v110 = *((_QWORD *)v103 - 1);
                v103 -= 8;
                *--v99 = v110;
              }
              while (v103 != v92);
              goto LABEL_109;
            }
LABEL_102:
            *(_QWORD *)(a1 + 288) = v99;
            *(_QWORD *)(a1 + 296) = v91;
            *(_QWORD *)(a1 + 304) = v100;
LABEL_110:
            operator delete(v69);
LABEL_111:
            *(_QWORD *)(a1 + 296) = v91;
            if (dword_1EE418968 < 1)
              return;
            goto LABEL_112;
          }
          if (!(v97 >> 61))
          {
            v98 = operator new(8 * v97);
            v99 = &v98[8 * v94];
            v100 = &v98[8 * v97];
            *v99 = v89;
            v91 = (uint64_t)(v99 + 1);
            v101 = (char *)(v69 - v92);
            if (v69 != v92)
              goto LABEL_99;
            goto LABEL_102;
          }
LABEL_167:
          sub_19C07C7FC();
        }
LABEL_166:
        sub_19C07DA0C();
      }
    }
    v36 = (unint64_t)(v35 - 8);
    if (v36 < 0x58)
      goto LABEL_170;
    if ((unint64_t)(v24 - &v32[v27]) < 0x20)
      goto LABEL_170;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v24[-v38];
    v33 = (_QWORD *)((char *)v33 - v38);
    v40 = &v32[8 * v28 - 16];
    v41 = v24 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_170:
      do
      {
        v44 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v33 = v44;
      }
      while (v24 != v26);
    }
    v24 = (char *)*v21;
    goto LABEL_40;
  }
  if (dword_1EE418968 < 1)
    return;
LABEL_112:
  v111 = 0;
  v112 = (char **)(a1 + 288);
  do
  {
    while (1)
    {
      v114 = *(unsigned int *)(a1 + 44);
      v115 = (void *)operator new[]();
      v116 = v115;
      if ((int)v114 >= 1)
        bzero(v115, 4 * v114);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v111) = v116;
      v118 = *(char **)(a1 + 296);
      v117 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v118 >= v117)
        break;
      *(_QWORD *)v118 = v116;
      *(_QWORD *)(a1 + 296) = v118 + 8;
      ++v111;
      v113 = dword_1EE418968;
      if (v111 >= dword_1EE418968)
        goto LABEL_138;
    }
    v119 = *v112;
    v120 = v118 - *v112;
    v121 = v120 >> 3;
    v122 = (v120 >> 3) + 1;
    if (v122 >> 61)
      goto LABEL_166;
    v123 = v117 - (_QWORD)v119;
    if (v123 >> 2 > v122)
      v122 = v123 >> 2;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
      v124 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (!v124)
    {
      v125 = 0;
      v126 = (_QWORD *)(8 * v121);
      *(_QWORD *)(8 * v121) = v116;
      v127 = 8 * v121 + 8;
      if (v118 == v119)
        goto LABEL_135;
LABEL_128:
      v128 = v118 - 8 - v119;
      if (v128 < 0x58)
        goto LABEL_171;
      if ((unint64_t)(v118 - &v125[v120]) < 0x20)
        goto LABEL_171;
      v129 = (v128 >> 3) + 1;
      v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
      v131 = &v118[-v130];
      v126 = (_QWORD *)((char *)v126 - v130);
      v132 = &v125[8 * v121 - 16];
      v133 = v118 - 16;
      v134 = v129 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *(_OWORD *)v133;
        *(v132 - 1) = *((_OWORD *)v133 - 1);
        *v132 = v135;
        v132 -= 2;
        v133 -= 32;
        v134 -= 4;
      }
      while (v134);
      v118 = v131;
      if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_171:
        do
        {
          v136 = *((_QWORD *)v118 - 1);
          v118 -= 8;
          *--v126 = v136;
        }
        while (v118 != v119);
      }
      v118 = *v112;
      goto LABEL_135;
    }
    if (v124 >> 61)
      goto LABEL_167;
    v125 = operator new(8 * v124);
    v126 = &v125[8 * v121];
    *v126 = v116;
    v127 = (uint64_t)(v126 + 1);
    if (v118 != v119)
      goto LABEL_128;
LABEL_135:
    *(_QWORD *)(a1 + 288) = v126;
    *(_QWORD *)(a1 + 296) = v127;
    *(_QWORD *)(a1 + 304) = &v125[8 * v124];
    if (v118)
      operator delete(v118);
    *(_QWORD *)(a1 + 296) = v127;
    ++v111;
    v113 = dword_1EE418968;
  }
  while (v111 < dword_1EE418968);
LABEL_138:
  if (v113 >= 1)
  {
    v137 = 0;
    while (1)
    {
      while (1)
      {
        v138 = *(unsigned int *)(a1 + 44);
        v139 = (void *)operator new[]();
        v140 = v139;
        if ((int)v138 >= 1)
          bzero(v139, 4 * v138);
        *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v137) = v140;
        v142 = *(char **)(a1 + 296);
        v141 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v142 >= v141)
          break;
        *(_QWORD *)v142 = v140;
        *(_QWORD *)(a1 + 296) = v142 + 8;
        if (++v137 >= dword_1EE418968)
          return;
      }
      v143 = *v112;
      v144 = v142 - *v112;
      v145 = v144 >> 3;
      v146 = (v144 >> 3) + 1;
      if (v146 >> 61)
        goto LABEL_166;
      v147 = v141 - (_QWORD)v143;
      if (v147 >> 2 > v146)
        v146 = v147 >> 2;
      v148 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v146;
      if (v148)
        break;
      v149 = 0;
      v150 = (_QWORD *)(8 * v145);
      *(_QWORD *)(8 * v145) = v140;
      v151 = 8 * v145 + 8;
      if (v142 != v143)
        goto LABEL_155;
LABEL_162:
      *(_QWORD *)(a1 + 288) = v150;
      *(_QWORD *)(a1 + 296) = v151;
      *(_QWORD *)(a1 + 304) = &v149[8 * v148];
      if (v142)
        operator delete(v142);
      *(_QWORD *)(a1 + 296) = v151;
      if (++v137 >= dword_1EE418968)
        return;
    }
    if (v148 >> 61)
      goto LABEL_167;
    v149 = operator new(8 * v148);
    v150 = &v149[8 * v145];
    *v150 = v140;
    v151 = (uint64_t)(v150 + 1);
    if (v142 == v143)
      goto LABEL_162;
LABEL_155:
    v152 = v142 - 8 - v143;
    if (v152 < 0x58)
      goto LABEL_172;
    if ((unint64_t)(v142 - &v149[v144]) < 0x20)
      goto LABEL_172;
    v153 = (v152 >> 3) + 1;
    v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
    v155 = &v142[-v154];
    v150 = (_QWORD *)((char *)v150 - v154);
    v156 = &v149[8 * v145 - 16];
    v157 = v142 - 16;
    v158 = v153 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v159 = *(_OWORD *)v157;
      *(v156 - 1) = *((_OWORD *)v157 - 1);
      *v156 = v159;
      v156 -= 2;
      v157 -= 32;
      v158 -= 4;
    }
    while (v158);
    v142 = v155;
    if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_172:
      do
      {
        v160 = *((_QWORD *)v142 - 1);
        v142 -= 8;
        *--v150 = v160;
      }
      while (v142 != v143);
    }
    v142 = *v112;
    goto LABEL_162;
  }
}

_QWORD *sub_19C11B0E4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &unk_1E3D1F1F8;
  v4 = a1 + 36;
  v2 = (void **)a1[36];
  v3 = (void **)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        v2 = (void **)a1[36];
        v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19C22CB78((uint64_t)(a1 + 27));
  v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1E3D1E2D8;
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19C11B1A8(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  char **v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void **v70;
  char __p[17];
  char v72;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1ED58;
  v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = a4;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_BYTE *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19C2775D0;
  *(_DWORD *)(a1 + 328) = a5;
  *(_BYTE *)(a1 + 528) = 0;
  if (v8 != a2)
    sub_19C11EAD0(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  *(_QWORD *)(a1 + 224) = a3;
  v72 = 16;
  strcpy(__p, "From constructor");
  sub_19C11B874(a1);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v9)
  {
    v10 = 0;
    v11 = (void **)(a1 + 256);
    while (1)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8 * v10) + 272))(*(_QWORD *)(v9 + 8 * v10));
      v14 = v13;
      v16 = *(char **)(a1 + 264);
      v15 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)v16 = v13;
        v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      v18 = (char *)*v11;
      v19 = v16 - (_BYTE *)*v11;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        goto LABEL_73;
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23)
        break;
      v24 = 0;
      v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      v17 = 4 * v20 + 4;
      if (v16 != v18)
        goto LABEL_21;
LABEL_27:
      *(_QWORD *)(a1 + 256) = v25;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = &v24[4 * v23];
      if (v18)
        operator delete(v18);
LABEL_29:
      *(_QWORD *)(a1 + 264) = v17;
      if (!v10)
        goto LABEL_7;
      v36 = *(char **)(a1 + 360);
      v35 = *(_QWORD *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        v37 = (char *)*v70;
        v38 = v36 - (_BYTE *)*v70;
        v39 = v38 >> 2;
        v40 = (v38 >> 2) + 1;
        if (v40 >> 62)
LABEL_73:
          sub_19C07DA0C();
        v41 = v35 - (_QWORD)v37;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 62)
LABEL_72:
            sub_19C07C7FC();
          v43 = operator new(4 * v42);
          v44 = &v43[4 * v39];
          *v44 = v10;
          v12 = (uint64_t)(v44 + 1);
          if (v36 == v37)
            goto LABEL_48;
LABEL_42:
          v45 = v36 - 4 - v37;
          if (v45 < 0x2C)
            goto LABEL_76;
          if ((unint64_t)(v36 - &v43[v38]) < 0x20)
            goto LABEL_76;
          v46 = (v45 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v36[-v47];
          v44 = (_DWORD *)((char *)v44 - v47);
          v49 = &v43[4 * v39 - 16];
          v50 = v36 - 16;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v43 = 0;
          v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          v12 = 4 * v39 + 4;
          if (v36 != v37)
            goto LABEL_42;
        }
LABEL_48:
        *(_QWORD *)(a1 + 352) = v44;
        *(_QWORD *)(a1 + 360) = v12;
        *(_QWORD *)(a1 + 368) = &v43[4 * v42];
        if (v37)
          operator delete(v37);
        goto LABEL_6;
      }
      *(_DWORD *)v36 = v10;
      v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(_QWORD *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      v9 = *(_QWORD *)(a1 + 80);
      if (v10 >= (*(_QWORD *)(a1 + 88) - v9) >> 3)
        goto LABEL_50;
    }
    if (v23 >> 62)
      goto LABEL_72;
    v24 = operator new(4 * v23);
    v25 = &v24[4 * v20];
    *v25 = v14;
    v17 = (uint64_t)(v25 + 1);
    if (v16 == v18)
      goto LABEL_27;
LABEL_21:
    v26 = v16 - 4 - v18;
    if (v26 < 0x2C)
      goto LABEL_77;
    if ((unint64_t)(v16 - &v24[v19]) < 0x20)
      goto LABEL_77;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v16[-v28];
    v25 = (_DWORD *)((char *)v25 - v28);
    v30 = &v24[4 * v20 - 16];
    v31 = v16 - 16;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  v54 = dword_1EE418968;
  v55 = *(_QWORD *)(a1 + 376);
  v56 = (*(_QWORD *)(a1 + 384) - v55) >> 2;
  if (dword_1EE418968 <= v56)
  {
    if (dword_1EE418968 < v56)
      *(_QWORD *)(a1 + 384) = v55 + 4 * dword_1EE418968;
  }
  else
  {
    sub_19C101928(a1 + 376, dword_1EE418968 - v56);
    v54 = dword_1EE418968;
  }
  v57 = *(_QWORD *)(a1 + 400);
  v58 = (*(_QWORD *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58)
      *(_QWORD *)(a1 + 408) = v57 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 400, v54 - v58);
    v54 = dword_1EE418968;
  }
  v59 = *(_QWORD *)(a1 + 424);
  v60 = (*(_QWORD *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60)
      *(_QWORD *)(a1 + 432) = v59 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 424, v54 - v60);
  }
  v61 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v62 = *(_QWORD *)(a1 + 544);
  v63 = *(_QWORD *)(a1 + 536);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        v66 = *(_QWORD *)(a1 + 544);
        do
        {
          v68 = *(void **)(v66 - 24);
          v66 -= 24;
          v67 = v68;
          if (v68)
          {
            *(_QWORD *)(v62 - 16) = v67;
            operator delete(v67);
          }
          v62 = v66;
        }
        while (v66 != v65);
      }
      *(_QWORD *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19C167E70(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19C11B700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _QWORD *v22;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a22 < 0)
  {
    operator delete(__p);
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19C0830E8(v24);
      v26 = (void *)v22[56];
      if (!v26)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19C0830E8(v24);
  v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    v27 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    v28 = *a14;
    if (!*a14)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    v29 = *a15;
    if (!*a15)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    v30 = *a16;
    if (!*a16)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    v31 = (void *)v22[38];
    if (!v31)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    v32 = *a11;
    if (!*a11)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19C10850C(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19C10850C(v22);
  _Unwind_Resume(a1);
}

void sub_19C11B874(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int *v6;
  int *v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  void *v52;
  void *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **p_vtable;
  void *v102;
  void *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  void *v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _OWORD *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  _OWORD *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  _QWORD *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  _OWORD *v200;
  char *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  int v210;
  char **v211;
  char **v212;

  v2 = *(unsigned __int8 *)(a1 + 529);
  v3 = *(_QWORD *)(a1 + 496);
  v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(a1 + 340) = v4;
  v5 = *(int **)(v3 + 16);
  v6 = *(int **)(v3 + 24);
  v7 = v5 + 1;
  if (v5 != v6 && v7 != v6)
  {
    v9 = *v5;
    v10 = v5 + 1;
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v9 < v12;
      if (v9 <= v12)
        v9 = v11;
      if (v13)
        v5 = v7;
      v7 = v10;
    }
    while (v10 != v6);
  }
  v14 = *v5;
  if (v14 > v4)
    v4 = v14;
  *(_DWORD *)(a1 + 344) = v4;
  v15 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
  v208 = *(unsigned int *)(a1 + 344);
  v209 = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v17 = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v16;
  *(_DWORD *)(a1 + 348) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  if (!dword_1EE418968)
  {
    v18 = 0;
    if (!v2)
      goto LABEL_45;
    goto LABEL_232;
  }
  sub_19C098930((void **)(a1 + 104), dword_1EE418968);
  v18 = dword_1EE418968;
  if (dword_1EE418968 < 1)
    goto LABEL_42;
  v210 = v2;
  v19 = 0;
  v20 = (char **)(a1 + 280);
  do
  {
    v22 = *(unsigned int *)(a1 + 348);
    v23 = (void *)operator new[]();
    v24 = v23;
    if ((int)v22 >= 1)
      bzero(v23, 4 * v22);
    v25 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v19);
    *v25 = v24;
    v27 = *(char **)(a1 + 288);
    v26 = *(_QWORD *)(a1 + 296);
    if ((unint64_t)v27 < v26)
    {
      *(_QWORD *)v27 = v25;
      v21 = (uint64_t)(v27 + 8);
      goto LABEL_17;
    }
    v28 = *v20;
    v29 = v27 - *v20;
    v30 = v29 >> 3;
    v31 = (v29 >> 3) + 1;
    if (v31 >> 61)
      sub_19C07DA0C();
    v32 = v26 - (_QWORD)v28;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
LABEL_236:
        sub_19C07C7FC();
      v34 = operator new(8 * v33);
      v35 = &v34[8 * v30];
      *v35 = v25;
      v21 = (uint64_t)(v35 + 1);
      if (v27 == v28)
        goto LABEL_39;
LABEL_32:
      v36 = v27 - 8 - v28;
      if (v36 < 0x58)
        goto LABEL_241;
      if ((unint64_t)(v27 - &v34[v29]) < 0x20)
        goto LABEL_241;
      v37 = (v36 >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = &v27[-v38];
      v35 = (_QWORD *)((char *)v35 - v38);
      v40 = &v34[8 * v30 - 16];
      v41 = v27 - 16;
      v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 4;
      }
      while (v42);
      v27 = v39;
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_241:
        do
        {
          v44 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v35 = v44;
        }
        while (v27 != v28);
      }
      v27 = *v20;
      goto LABEL_39;
    }
    v34 = 0;
    v35 = (_QWORD *)(8 * v30);
    *(_QWORD *)(8 * v30) = v25;
    v21 = 8 * v30 + 8;
    if (v27 != v28)
      goto LABEL_32;
LABEL_39:
    *(_QWORD *)(a1 + 280) = v35;
    *(_QWORD *)(a1 + 288) = v21;
    *(_QWORD *)(a1 + 296) = &v34[8 * v33];
    if (v27)
      operator delete(v27);
LABEL_17:
    *(_QWORD *)(a1 + 288) = v21;
    ++v19;
    v18 = dword_1EE418968;
  }
  while (v19 < dword_1EE418968);
  v2 = v210;
LABEL_42:
  if (!v2)
  {
LABEL_45:
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
    v45 = *(_QWORD *)(a1 + 504);
    *(_QWORD *)(a1 + 512) = v45;
    if (v18)
    {
      sub_19C098930((void **)(a1 + 448), v18);
      v18 = dword_1EE418968;
      v45 = *(_QWORD *)(a1 + 504);
      v46 = dword_1EE418968;
      v47 = (*(_QWORD *)(a1 + 512) - v45) >> 3;
      v48 = dword_1EE418968 >= v47;
      if (dword_1EE418968 > v47)
      {
        sub_19C098930((void **)(a1 + 504), dword_1EE418968 - v47);
        v18 = dword_1EE418968;
        goto LABEL_51;
      }
    }
    else
    {
      v46 = 0;
      v48 = 1;
    }
    if (!v48)
      *(_QWORD *)(a1 + 512) = v45 + 8 * v46;
LABEL_51:
    if (v18 >= 1)
    {
      v49 = 0;
      v50 = (char **)(a1 + 280);
      while (1)
      {
        v52 = (void *)operator new[]();
        v53 = v52;
        if ((int)v208 + v209 >= 1)
          bzero(v52, 4 * (v208 + v209));
        v54 = (_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v49);
        *v54 = v53;
        v56 = *(char **)(a1 + 288);
        v55 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v56 < v55)
        {
          *(_QWORD *)v56 = v54;
          v57 = (uint64_t)(v56 + 8);
          goto LABEL_79;
        }
        v58 = *v50;
        v59 = v56 - *v50;
        v60 = v59 >> 3;
        v61 = (v59 >> 3) + 1;
        if (v61 >> 61)
          goto LABEL_237;
        v62 = v55 - (_QWORD)v58;
        if (v62 >> 2 > v61)
          v61 = v62 >> 2;
        v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v61;
        if (v63)
          break;
        v64 = 0;
        v65 = (_QWORD *)(8 * v60);
        *(_QWORD *)(8 * v60) = v54;
        v57 = 8 * v60 + 8;
        if (v56 != v58)
          goto LABEL_70;
LABEL_77:
        *(_QWORD *)(a1 + 280) = v65;
        *(_QWORD *)(a1 + 288) = v57;
        *(_QWORD *)(a1 + 296) = &v64[8 * v63];
        if (v56)
          operator delete(v56);
LABEL_79:
        *(_QWORD *)(a1 + 288) = v57;
        v75 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
        v76 = (void *)operator new[]();
        v77 = v76;
        if (v75 >= 1)
          bzero(v76, 4 * v75);
        v78 = (_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v49);
        *v78 = v77;
        v80 = *(char **)(a1 + 288);
        v79 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v80 >= v79)
        {
          v81 = *v50;
          v82 = v80 - *v50;
          v83 = v82 >> 3;
          v84 = (v82 >> 3) + 1;
          if (v84 >> 61)
LABEL_237:
            sub_19C07DA0C();
          v85 = v79 - (_QWORD)v81;
          if (v85 >> 2 > v84)
            v84 = v85 >> 2;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            if (v86 >> 61)
              goto LABEL_236;
            v87 = operator new(8 * v86);
            v88 = &v87[8 * v83];
            *v88 = v78;
            v51 = (uint64_t)(v88 + 1);
            if (v80 == v81)
              goto LABEL_100;
LABEL_93:
            v89 = v80 - 8 - v81;
            if (v89 < 0x58)
              goto LABEL_242;
            if ((unint64_t)(v80 - &v87[v82]) < 0x20)
              goto LABEL_242;
            v90 = (v89 >> 3) + 1;
            v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
            v92 = &v80[-v91];
            v88 = (_QWORD *)((char *)v88 - v91);
            v93 = &v87[8 * v83 - 16];
            v94 = v80 - 16;
            v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v96 = *(_OWORD *)v94;
              *(v93 - 1) = *((_OWORD *)v94 - 1);
              *v93 = v96;
              v93 -= 2;
              v94 -= 32;
              v95 -= 4;
            }
            while (v95);
            v80 = v92;
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_242:
              do
              {
                v97 = *((_QWORD *)v80 - 1);
                v80 -= 8;
                *--v88 = v97;
              }
              while (v80 != v81);
            }
            v80 = *v50;
          }
          else
          {
            v87 = 0;
            v88 = (_QWORD *)(8 * v83);
            *(_QWORD *)(8 * v83) = v78;
            v51 = 8 * v83 + 8;
            if (v80 != v81)
              goto LABEL_93;
          }
LABEL_100:
          *(_QWORD *)(a1 + 280) = v88;
          *(_QWORD *)(a1 + 288) = v51;
          *(_QWORD *)(a1 + 296) = &v87[8 * v86];
          if (v80)
            operator delete(v80);
          goto LABEL_54;
        }
        *(_QWORD *)v80 = v78;
        v51 = (uint64_t)(v80 + 8);
LABEL_54:
        *(_QWORD *)(a1 + 288) = v51;
        if (++v49 >= dword_1EE418968)
          goto LABEL_102;
      }
      if (v63 >> 61)
        goto LABEL_236;
      v64 = operator new(8 * v63);
      v65 = &v64[8 * v60];
      *v65 = v54;
      v57 = (uint64_t)(v65 + 1);
      if (v56 == v58)
        goto LABEL_77;
LABEL_70:
      v66 = v56 - 8 - v58;
      if (v66 < 0x58)
        goto LABEL_243;
      if ((unint64_t)(v56 - &v64[v59]) < 0x20)
        goto LABEL_243;
      v67 = (v66 >> 3) + 1;
      v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      v69 = &v56[-v68];
      v65 = (_QWORD *)((char *)v65 - v68);
      v70 = &v64[8 * v60 - 16];
      v71 = v56 - 16;
      v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v73 = *(_OWORD *)v71;
        *(v70 - 1) = *((_OWORD *)v71 - 1);
        *v70 = v73;
        v70 -= 2;
        v71 -= 32;
        v72 -= 4;
      }
      while (v72);
      v56 = v69;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_243:
        do
        {
          v74 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v65 = v74;
        }
        while (v56 != v58);
      }
      v56 = *v50;
      goto LABEL_77;
    }
LABEL_102:
    v98 = *(_QWORD *)(a1 + 200);
    v207 = (uint64_t *)(a1 + 200);
    v99 = *(_QWORD *)(a1 + 208);
    if (v99 == v98)
    {
      p_vtable = MLPNDArrayLossLabels.vtable;
    }
    else
    {
      v100 = *(_QWORD *)(a1 + 208);
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      do
      {
        v103 = *(void **)(v100 - 24);
        v100 -= 24;
        v102 = v103;
        if (v103)
        {
          *(_QWORD *)(v99 - 16) = v102;
          operator delete(v102);
        }
        v99 = v100;
      }
      while (v100 != v98);
      v99 = *v207;
    }
    *(_QWORD *)(a1 + 208) = v98;
    v104 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
    v105 = 0xAAAAAAAAAAAAAAABLL * ((v98 - v99) >> 3);
    if (v104 <= v105)
    {
      if (v104 < v105)
      {
        v106 = v99 + 24 * v104;
        if (v98 != v106)
        {
          v107 = v98;
          do
          {
            v109 = *(void **)(v107 - 24);
            v107 -= 24;
            v108 = v109;
            if (v109)
            {
              *(_QWORD *)(v98 - 16) = v108;
              operator delete(v108);
            }
            v98 = v107;
          }
          while (v107 != v106);
        }
        *(_QWORD *)(a1 + 208) = v106;
      }
    }
    else
    {
      sub_19C167E70((uint64_t)v207, v104 - v105);
    }
    if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80))
    {
      v110 = 0;
      v211 = (char **)(a1 + 280);
      LODWORD(v111) = *((_DWORD *)p_vtable + 602);
      while (1)
      {
        v112 = *v207 + 24 * v110;
        v113 = (uint64_t)(*(_QWORD *)(v112 + 8) - *(_QWORD *)v112) >> 3;
        if ((int)v111 <= v113)
        {
          if ((int)v111 < v113)
            *(_QWORD *)(v112 + 8) = *(_QWORD *)v112 + 8 * (int)v111;
        }
        else
        {
          sub_19C098930((void **)v112, (int)v111 - v113);
          LODWORD(v111) = *((_DWORD *)p_vtable + 602);
        }
        if ((int)v111 >= 1)
          break;
LABEL_120:
        if (++v110 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3))
          goto LABEL_153;
      }
      v114 = 0;
      while (2)
      {
        v116 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v110);
        v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 272))(v116);
        v118 = (void *)operator new[]();
        v119 = v118;
        if (v117 >= 1)
          bzero(v118, 4 * v117);
        v120 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * v110) + 8 * v114);
        *v120 = v119;
        v122 = *(char **)(a1 + 288);
        v121 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v122 < v121)
        {
          *(_QWORD *)v122 = v120;
          v115 = (uint64_t)(v122 + 8);
          goto LABEL_128;
        }
        v123 = *v211;
        v124 = v122 - *v211;
        v125 = v124 >> 3;
        v126 = (v124 >> 3) + 1;
        if (v126 >> 61)
LABEL_235:
          sub_19C07DA0C();
        v127 = v121 - (_QWORD)v123;
        if (v127 >> 2 > v126)
          v126 = v127 >> 2;
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
          v128 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v128 = v126;
        if (v128)
        {
          if (v128 >> 61)
            goto LABEL_236;
          v129 = operator new(8 * v128);
          v130 = &v129[8 * v125];
          *v130 = v120;
          v115 = (uint64_t)(v130 + 1);
          if (v122 != v123)
          {
LABEL_141:
            v131 = v122 - 8 - v123;
            if (v131 < 0x58)
              goto LABEL_244;
            if ((unint64_t)(v122 - &v129[v124]) < 0x20)
              goto LABEL_244;
            v132 = (v131 >> 3) + 1;
            v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
            v134 = &v122[-v133];
            v130 = (_QWORD *)((char *)v130 - v133);
            v135 = &v129[8 * v125 - 16];
            v136 = v122 - 16;
            v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v138 = *(_OWORD *)v136;
              *(v135 - 1) = *((_OWORD *)v136 - 1);
              *v135 = v138;
              v135 -= 2;
              v136 -= 32;
              v137 -= 4;
            }
            while (v137);
            v122 = v134;
            if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_244:
              do
              {
                v139 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *--v130 = v139;
              }
              while (v122 != v123);
            }
            v122 = *v211;
            *(_QWORD *)(a1 + 280) = v130;
            *(_QWORD *)(a1 + 288) = v115;
            *(_QWORD *)(a1 + 296) = &v129[8 * v128];
            p_vtable = (void **)(MLPNDArrayLossLabels + 24);
            if (v122)
LABEL_152:
              operator delete(v122);
LABEL_128:
            *(_QWORD *)(a1 + 288) = v115;
            ++v114;
            v111 = *((int *)p_vtable + 602);
            if (v114 >= v111)
              goto LABEL_120;
            continue;
          }
        }
        else
        {
          v129 = 0;
          v130 = (_QWORD *)(8 * v125);
          *(_QWORD *)(8 * v125) = v120;
          v115 = 8 * v125 + 8;
          if (v122 != v123)
            goto LABEL_141;
        }
        break;
      }
      *(_QWORD *)(a1 + 280) = v130;
      *(_QWORD *)(a1 + 288) = v115;
      *(_QWORD *)(a1 + 296) = &v129[8 * v128];
      p_vtable = MLPNDArrayLossLabels.vtable;
      if (v122)
        goto LABEL_152;
      goto LABEL_128;
    }
LABEL_153:
    v140 = (uint64_t *)(a1 + 472);
    v142 = *(_QWORD *)(a1 + 472);
    v141 = *(_QWORD *)(a1 + 480);
    if (v141 != v142)
    {
      v143 = *(_QWORD *)(a1 + 480);
      do
      {
        v145 = *(void **)(v143 - 24);
        v143 -= 24;
        v144 = v145;
        if (v145)
        {
          *(_QWORD *)(v141 - 16) = v144;
          operator delete(v144);
        }
        v141 = v143;
      }
      while (v143 != v142);
      v141 = *v140;
    }
    *(_QWORD *)(a1 + 480) = v142;
    v146 = 0xAAAAAAAAAAAAAAABLL * ((v142 - v141) >> 3);
    if (v146 > 1)
    {
      if (v142 - v141 != 48)
      {
        v147 = v141 + 48;
        if (v142 != v141 + 48)
        {
          v148 = v142;
          do
          {
            v150 = *(void **)(v148 - 24);
            v148 -= 24;
            v149 = v150;
            if (v150)
            {
              *(_QWORD *)(v142 - 16) = v149;
              operator delete(v149);
            }
            v142 = v148;
          }
          while (v148 != v147);
        }
        *(_QWORD *)(a1 + 480) = v147;
      }
    }
    else
    {
      sub_19C167E70(a1 + 472, 2 - v146);
    }
    v151 = *(_QWORD *)(a1 + 472);
    v152 = *((_DWORD *)p_vtable + 602);
    v153 = (uint64_t)(*(_QWORD *)(v151 + 8) - *(_QWORD *)v151) >> 3;
    if (v152 <= v153)
    {
      if (v152 < v153)
        *(_QWORD *)(v151 + 8) = *(_QWORD *)v151 + 8 * v152;
    }
    else
    {
      sub_19C098930((void **)v151, v152 - v153);
      v152 = *((_DWORD *)p_vtable + 602);
    }
    v212 = (char **)(a1 + 280);
    if (v152 > 0)
    {
      v154 = 0;
      while (1)
      {
        v157 = (void *)operator new[]();
        v158 = v157;
        if (v209 >= 1)
          bzero(v157, 4 * v209);
        v159 = (_QWORD *)(**(_QWORD **)(a1 + 472) + 8 * v154);
        *v159 = v158;
        v161 = *(char **)(a1 + 288);
        v160 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v161 >= v160)
          break;
        *(_QWORD *)v161 = v159;
        v155 = (uint64_t)(v161 + 8);
LABEL_175:
        *(_QWORD *)(a1 + 288) = v155;
        ++v154;
        v152 = *((_DWORD *)p_vtable + 602);
        v156 = v152;
        if (v154 >= v152)
        {
          v140 = (uint64_t *)(a1 + 472);
          goto LABEL_201;
        }
      }
      v162 = *v212;
      v163 = v161 - *v212;
      v164 = v163 >> 3;
      v165 = (v163 >> 3) + 1;
      if (v165 >> 61)
        goto LABEL_235;
      v166 = v160 - (_QWORD)v162;
      if (v166 >> 2 > v165)
        v165 = v166 >> 2;
      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
        v167 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v167 = v165;
      if (v167)
      {
        if (v167 >> 61)
          goto LABEL_236;
        v168 = operator new(8 * v167);
        v169 = &v168[8 * v164];
        *v169 = v159;
        v155 = (uint64_t)(v169 + 1);
        if (v161 == v162)
          goto LABEL_197;
LABEL_190:
        v170 = v161 - 8 - v162;
        if (v170 < 0x58)
          goto LABEL_245;
        if ((unint64_t)(v161 - &v168[v163]) < 0x20)
          goto LABEL_245;
        v171 = (v170 >> 3) + 1;
        v172 = 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
        v173 = &v161[-v172];
        v169 = (_QWORD *)((char *)v169 - v172);
        v174 = &v168[8 * v164 - 16];
        v175 = v161 - 16;
        v176 = v171 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v177 = *(_OWORD *)v175;
          *(v174 - 1) = *((_OWORD *)v175 - 1);
          *v174 = v177;
          v174 -= 2;
          v175 -= 32;
          v176 -= 4;
        }
        while (v176);
        v161 = v173;
        if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_245:
          do
          {
            v178 = *((_QWORD *)v161 - 1);
            v161 -= 8;
            *--v169 = v178;
          }
          while (v161 != v162);
        }
        v161 = *v212;
      }
      else
      {
        v168 = 0;
        v169 = (_QWORD *)(8 * v164);
        *(_QWORD *)(8 * v164) = v159;
        v155 = 8 * v164 + 8;
        if (v161 != v162)
          goto LABEL_190;
      }
LABEL_197:
      *(_QWORD *)(a1 + 280) = v169;
      *(_QWORD *)(a1 + 288) = v155;
      *(_QWORD *)(a1 + 296) = &v168[8 * v167];
      p_vtable = MLPNDArrayLossLabels.vtable;
      if (v161)
        operator delete(v161);
      goto LABEL_175;
    }
    v156 = v152;
LABEL_201:
    v179 = *(_QWORD *)(*v140 + 24);
    v180 = (*(_QWORD *)(*v140 + 32) - v179) >> 3;
    if (v156 <= v180)
    {
      if (v156 < v180)
        *(_QWORD *)(*v140 + 32) = v179 + 8 * v156;
    }
    else
    {
      sub_19C098930((void **)(*v140 + 24), v156 - v180);
      v152 = *((_DWORD *)p_vtable + 602);
    }
    if (v152 >= 1)
    {
      v181 = 0;
      while (1)
      {
        v183 = (void *)operator new[]();
        v184 = v183;
        if ((int)v208 >= 1)
          bzero(v183, 4 * v208);
        v185 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 472) + 24) + 8 * v181);
        *v185 = v184;
        v187 = *(char **)(a1 + 288);
        v186 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v187 >= v186)
          break;
        *(_QWORD *)v187 = v185;
        v182 = (uint64_t)(v187 + 8);
LABEL_208:
        *(_QWORD *)(a1 + 288) = v182;
        if (++v181 >= *((int *)p_vtable + 602))
          goto LABEL_232;
      }
      v188 = *v212;
      v189 = v187 - *v212;
      v190 = v189 >> 3;
      v191 = (v189 >> 3) + 1;
      if (v191 >> 61)
        goto LABEL_235;
      v192 = v186 - (_QWORD)v188;
      if (v192 >> 2 > v191)
        v191 = v192 >> 2;
      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
        v193 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v193 = v191;
      if (v193)
      {
        if (v193 >> 61)
          goto LABEL_236;
        v194 = operator new(8 * v193);
        v195 = &v194[8 * v190];
        *v195 = v185;
        v182 = (uint64_t)(v195 + 1);
        if (v187 == v188)
          goto LABEL_221;
LABEL_224:
        v196 = v187 - 8 - v188;
        if (v196 < 0x58)
          goto LABEL_246;
        if ((unint64_t)(v187 - &v194[v189]) < 0x20)
          goto LABEL_246;
        v197 = (v196 >> 3) + 1;
        v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
        v199 = &v187[-v198];
        v195 = (_QWORD *)((char *)v195 - v198);
        v200 = &v194[8 * v190 - 16];
        v201 = v187 - 16;
        v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v203 = *(_OWORD *)v201;
          *(v200 - 1) = *((_OWORD *)v201 - 1);
          *v200 = v203;
          v200 -= 2;
          v201 -= 32;
          v202 -= 4;
        }
        while (v202);
        v187 = v199;
        if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_246:
          do
          {
            v204 = *((_QWORD *)v187 - 1);
            v187 -= 8;
            *--v195 = v204;
          }
          while (v187 != v188);
        }
        v187 = *v212;
        *(_QWORD *)(a1 + 280) = v195;
        *(_QWORD *)(a1 + 288) = v182;
        *(_QWORD *)(a1 + 296) = &v194[8 * v193];
        if (!v187)
        {
LABEL_231:
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
          goto LABEL_208;
        }
      }
      else
      {
        v194 = 0;
        v195 = (_QWORD *)(8 * v190);
        *(_QWORD *)(8 * v190) = v185;
        v182 = 8 * v190 + 8;
        if (v187 != v188)
          goto LABEL_224;
LABEL_221:
        *(_QWORD *)(a1 + 280) = v195;
        *(_QWORD *)(a1 + 288) = v182;
        *(_QWORD *)(a1 + 296) = &v194[8 * v193];
        if (!v187)
          goto LABEL_231;
      }
      operator delete(v187);
      p_vtable = MLPNDArrayLossLabels.vtable;
      goto LABEL_208;
    }
  }
LABEL_232:
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 304);
  v205 = *(_DWORD *)(a1 + 340);
  v48 = __CFADD__(v205, 1);
  v206 = v205 + 1;
  if (!v48)
    sub_19C101928(a1 + 304, v206);
}

uint64_t sub_19C11C7A4(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19C11C7AC(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19C11C7B4(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19C11C7BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19C11C820(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C11C898(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *sub_19C11C918(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C11C9E0(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C11CAA8(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

_QWORD *sub_19C11CB48(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19C11CBE8(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C11CC48(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C11CCB8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19C11CD08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char __p[21];

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19C11B874(a1);
}

void sub_19C11CDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C11CDD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  v9 = a1[25];
  v8 = a1[26];
  if (v8 != v9)
  {
    v10 = a1[26];
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v8 - 16) = v11;
        operator delete(v11);
      }
      v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  v14 = a1[59];
  v13 = a1[60];
  if (v13 != v14)
  {
    v15 = a1[60];
    do
    {
      v17 = *(void **)(v15 - 24);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *(_QWORD *)(v13 - 16) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19C11CF00(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  int *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  int v45;

  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v45 >= 1)
        {
          v17 = 0;
          v24 = 0;
          v25 = 1.1755e-38;
          do
          {
            v26 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v24);
            if (v26 > v25)
              v17 = v24;
            v25 = fmaxf(v26, v25);
            ++v24;
          }
          while (v45 != v24);
          goto LABEL_21;
        }
LABEL_24:
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 0;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        v17 = 2;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 2;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
        {
LABEL_22:
          v27 = (int *)(v20 + 8 * v17 + 4);
LABEL_23:
          v28 = *v27;
          goto LABEL_36;
        }
      }
      else
      {
        v17 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = v17;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
      }
LABEL_25:
      v29 = v19[6];
      if (v29)
      {
        v30 = v19 + 6;
        do
        {
          v31 = *(_DWORD *)(v29 + 28);
          v32 = v31 < v17;
          if (v31 >= v17)
            v33 = (uint64_t *)v29;
          else
            v33 = (uint64_t *)(v29 + 8);
          if (!v32)
            v30 = (_QWORD *)v29;
          v29 = *v33;
        }
        while (*v33);
        if (v30 != v19 + 6 && *((_DWORD *)v30 + 7) <= v17)
        {
          v27 = (int *)(v30 + 4);
          goto LABEL_23;
        }
      }
      v28 = -1;
LABEL_36:
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v8) = v28 + 1;
      v34 = *(int *)(v18 + 4 * v8);
      v35 = v19[13];
      if (v35)
      {
        v36 = (int *)(v35 + 8 * v34 + 4);
LABEL_38:
        v9 = *v36;
        goto LABEL_4;
      }
      v39 = v19[11];
      v37 = v19 + 11;
      v38 = v39;
      if (v39)
      {
        v40 = v37;
        do
        {
          v41 = *(_DWORD *)(v38 + 28);
          v42 = v41 < (int)v34;
          if (v41 >= (int)v34)
            v43 = (uint64_t *)v38;
          else
            v43 = (uint64_t *)(v38 + 8);
          if (!v42)
            v40 = (_QWORD *)v38;
          v38 = *v43;
        }
        while (*v43);
        if (v40 != v37 && *((_DWORD *)v40 + 7) <= (int)v34)
        {
          v36 = (int *)(v40 + 4);
          goto LABEL_38;
        }
      }
      v9 = -1;
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v8) = v9;
      v10 = **(_QWORD **)(a1 + 200);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      v12 = *(_QWORD **)(a1 + 200);
      v13 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8);
      v14 = v12[3 * (int)v13];
      *(_DWORD *)(*(_QWORD *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(v15);
      bzero(*(void **)(v14 + 8 * v8), 4 * v16);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4)
        return;
    }
    if (v45 >= 1)
    {
      v17 = 0;
      v21 = 0;
      v22 = 1.1755e-38;
      do
      {
        v23 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v21);
        if (v23 > v22)
          v17 = v21;
        v22 = fmaxf(v23, v22);
        ++v21;
      }
      while (v45 != v21);
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v8) = v17;
      v19 = *(_QWORD **)(a1 + 496);
      v20 = v19[8];
      if (v20)
        goto LABEL_22;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19C11D228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19C11D2A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19C11D30C()
{
  sub_19C2210D4(5);
}

void sub_19C11D31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  float32x4_t *v58;
  float32x4_t *v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t v74;
  uint64_t v75;
  float *v76;
  float *v77;
  float v78;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (i = 0; i != v9; ++i)
    {
      v13 = *(int *)(a1 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 248))(v14, *(_QWORD *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13));
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      v18 = *(const void **)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v19 = v17 - *(_QWORD *)v16;
      if (v17 == *(_QWORD *)v16)
      {
        v20 = 0;
      }
      else
      {
        if (v19 < 0)
          sub_19C07DA0C();
        v20 = operator new(v17 - *(_QWORD *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      v21 = *(_QWORD *)(a1 + 504);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 264))(v22);
      v24 = v23 / 8;
      if (v23 >= 8)
      {
        v25 = *(float32x4_t **)(v21 + 8 * i);
        v26 = (float32x4_t *)*((_QWORD *)v20 + i);
        v27 = v23 / 8;
        do
        {
          v28 = *v26;
          v29 = v26[1];
          v26 += 2;
          v30 = vaddq_f32(v25[1], v29);
          *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        v32 = *((_QWORD *)v20 + i);
        v33 = *(_QWORD *)(v21 + 8 * i);
        v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8)
          goto LABEL_23;
        v35 = v33 + 4 * v31;
        v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23)
          goto LABEL_23;
        v38 = v31 + (v23 & 7) - v23;
        v39 = (float32x4_t *)(v36 + 16);
        v40 = (float32x4_t *)(v35 + 16);
        do
        {
          v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          *v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          v42 = v23 - v34;
          v43 = (float *)(v33 + 4 * v34);
          v44 = (float *)(v32 + 4 * v34);
          do
          {
            v45 = *v44++;
            *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      v46 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 248))(v47, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v46));
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48);
      v51 = *(const void **)v49;
      v50 = *(_QWORD *)(v49 + 8);
      v52 = v50 - *(_QWORD *)v49;
      if (v50 == *(_QWORD *)v49)
      {
        v53 = 0;
      }
      else
      {
        if (v52 < 0)
          sub_19C07DA0C();
        v53 = operator new(v50 - *(_QWORD *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      v54 = *(_QWORD *)(a1 + 504);
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 264))(v55);
      v57 = v56 / 8;
      if (v56 >= 8)
      {
        v58 = *(float32x4_t **)(v54 + 8 * i);
        v59 = (float32x4_t *)*((_QWORD *)v53 + i);
        v60 = v56 / 8;
        do
        {
          v61 = *v59;
          v62 = v59[1];
          v59 += 2;
          v63 = vaddq_f32(v58[1], v62);
          *v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        v65 = *((_QWORD *)v53 + i);
        v66 = *(_QWORD *)(v54 + 8 * i);
        v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8)
          goto LABEL_42;
        v68 = v66 + 4 * v64;
        v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56)
          goto LABEL_42;
        v71 = v64 + (v56 & 7) - v56;
        v72 = (float32x4_t *)(v69 + 16);
        v73 = (float32x4_t *)(v68 + 16);
        do
        {
          v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          v75 = v56 - v67;
          v76 = (float *)(v66 + 4 * v67);
          v77 = (float *)(v65 + 4 * v67);
          do
          {
            v78 = *v77++;
            *v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53)
        operator delete(v53);
      if (v20)
        operator delete(v20);
    }
  }
}

void sub_19C11D758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_19C11D7B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  float v36;
  float v37;
  int v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  void **p_p;
  int *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  int *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  int *v70;
  uint64_t v71;
  int v72;
  int *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t *v85;
  int *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  int *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  _OWORD *v98;
  int *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  _DWORD *v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int *v138;
  char *v139;
  int *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  char *v155;
  __int128 *v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  _OWORD *v164;
  int *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  int64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  int *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  float v207;
  float32x4_t *v208;
  unint64_t v209;
  float32x4_t *v210;
  uint64_t v211;
  float32x4_t v212;
  unint64_t v213;
  float *v214;
  int *v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  vDSP_Length v221;
  char *v222;
  uint64_t v223;
  char *v224;
  int64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int *v229;
  int *v230;
  int *v231;
  uint64_t *v232;
  void *__p;
  int *v234;
  char *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  int *v239;
  int *v240;
  char *v241;
  float __C[3];

  v239 = 0;
  v240 = 0;
  v241 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  v15 = *(_QWORD *)(a1 + 224);
  if (v15)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    v17 = a5 != 0;
    v223 = a7;
    v226 = a2;
    v227 = a3;
    v228 = v16;
    do
    {
      v18 = *(int *)(a1 + 332);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 272))(v19);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v21 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 256))(v22, v228);
      }
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v23 + 224))(v23, a2, a3, v17, &v236);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      v232 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      __p = 0;
      v234 = 0;
      v235 = 0;
      v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        v42 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v17);
        v43 = (int *)operator new(4uLL);
        *v43 = v42;
        v234 = v43 + 1;
        v235 = (char *)(v43 + 1);
        __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        v31 = *v232;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 272))(v32);
        if (v33 < 1)
        {
          v38 = 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
            goto LABEL_25;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 1.1755e-38;
          do
          {
            v37 = *(float *)(*(_QWORD *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36)
              v34 = v35;
            v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          v38 = v34 + 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
          {
LABEL_25:
            *v40 = v38;
            v41 = (uint64_t)(v40 + 1);
LABEL_182:
            v234 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        v45 = (int *)__p;
        v46 = (char *)v40 - (_BYTE *)__p;
        v47 = ((char *)v40 - (_BYTE *)__p) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          sub_19C07DA0C();
        v49 = v39 - (_BYTE *)__p;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            sub_19C07C7FC();
          v51 = operator new(4 * v50);
          v52 = (int *)&v51[4 * v47];
          *v52 = v38;
          v41 = (uint64_t)(v52 + 1);
          if (v40 == v45)
            goto LABEL_180;
LABEL_174:
          v160 = (char *)(v40 - 1) - (char *)v45;
          if (v160 < 0x2C)
            goto LABEL_259;
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20)
            goto LABEL_259;
          v161 = (v160 >> 2) + 1;
          v162 = 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
          v163 = &v40[v162 / 0xFFFFFFFFFFFFFFFCLL];
          v52 = (int *)((char *)v52 - v162);
          v164 = &v51[4 * v47 - 16];
          v165 = v40 - 4;
          v166 = v161 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v167 = *(_OWORD *)v165;
            *(v164 - 1) = *((_OWORD *)v165 - 1);
            *v164 = v167;
            v164 -= 2;
            v165 -= 8;
            v166 -= 8;
          }
          while (v166);
          v40 = v163;
          if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              v168 = *--v40;
              *--v52 = v168;
            }
            while (v40 != v45);
          }
        }
        else
        {
          v51 = 0;
          v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          v41 = 4 * v47 + 4;
          if (v40 != v45)
            goto LABEL_174;
        }
LABEL_180:
        __p = v52;
        v234 = (int *)v41;
        v235 = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19C11EC14(*v232 + 8 * v17, (float32x4_t **)(*v232 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      v26 = v239;
      v240 = v239;
      v27 = *(_QWORD *)(a1 + 536);
      v28 = *(_QWORD *)(a1 + 544) - v27;
      if (!v28)
        goto LABEL_44;
      v29 = v28 / 24;
      if (v29 <= 1)
        v29 = 1;
      if (v29 >= 2)
      {
        v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        v53 = (_QWORD *)(v27 + 32);
        v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30)
          goto LABEL_44;
      }
      else
      {
        v30 = 0;
      }
      v56 = (_QWORD *)(v27 + 24 * v30 + 8);
      v57 = v29 - v30;
      do
      {
        *v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      v59 = *(_DWORD **)a7;
      v58 = *(_QWORD *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      v60 = v58 - *(_QWORD *)a7;
      if (v58 == *(_QWORD *)a7)
        goto LABEL_213;
      if (v60 < 5)
      {
        v240 = v26;
        if (v60 != 4)
          goto LABEL_212;
        v133 = operator new(4uLL);
        *v133 = *v59;
        v62 = (char *)(v133 + 1);
        v134 = v133;
        if (*v133 != -1)
          goto LABEL_145;
LABEL_184:
        v169 = *(_QWORD *)(a1 + 544);
        v170 = *(_QWORD *)(a1 + 536);
        if (v169 == v170)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        v171 = 0;
        v231 = v134;
        while (2)
        {
          v173 = *(_QWORD *)(v170 + 24 * v171);
          v174 = *(_QWORD *)(v170 + 24 * v171++ + 8);
          if (v174 == v173)
            goto LABEL_188;
          v175 = (char *)v234;
          if (v234 < (int *)v235)
          {
            *v234 = v171;
            v172 = (uint64_t)(v175 + 4);
            goto LABEL_187;
          }
          v176 = (char *)__p;
          v177 = (char *)v234 - (_BYTE *)__p;
          v178 = ((char *)v234 - (_BYTE *)__p) >> 2;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 62)
            sub_19C07DA0C();
          v180 = v235 - (_BYTE *)__p;
          if ((v235 - (_BYTE *)__p) >> 1 > v179)
            v179 = v180 >> 1;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
            v181 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            v225 = (char *)v234 - (_BYTE *)__p;
            if (v181 >> 62)
              sub_19C07C7FC();
            v182 = ((char *)v234 - (_BYTE *)__p) >> 2;
            v183 = v170;
            v184 = v181;
            v185 = (char *)operator new(4 * v181);
            v170 = v183;
            v181 = v184;
            v178 = v182;
            v177 = v225;
            v186 = &v185[4 * v182];
            *(_DWORD *)v186 = v171;
            v172 = (uint64_t)(v186 + 4);
            if (v175 != v176)
            {
LABEL_200:
              v187 = v175 - 4 - v176;
              if (v187 < 0x2C)
              {
                v134 = v231;
                goto LABEL_208;
              }
              v134 = v231;
              if ((unint64_t)(v175 - &v185[v177]) < 0x20)
                goto LABEL_260;
              v188 = (v187 >> 2) + 1;
              v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
              v190 = &v175[-v189];
              v186 -= v189;
              v191 = &v185[4 * v178 - 16];
              v192 = v175 - 16;
              v193 = v188 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v194 = *(_OWORD *)v192;
                *((_OWORD *)v191 - 1) = *((_OWORD *)v192 - 1);
                *(_OWORD *)v191 = v194;
                v191 -= 32;
                v192 -= 32;
                v193 -= 8;
              }
              while (v193);
              v175 = v190;
              if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  v195 = *((_DWORD *)v175 - 1);
                  v175 -= 4;
                  *((_DWORD *)v186 - 1) = v195;
                  v186 -= 4;
                }
                while (v175 != v176);
              }
LABEL_209:
              __p = v186;
              v234 = (int *)v172;
              v235 = &v185[4 * v181];
              if (v176)
              {
                operator delete(v176);
                v169 = *(_QWORD *)(a1 + 544);
                v170 = *(_QWORD *)(a1 + 536);
              }
LABEL_187:
              v234 = (int *)v172;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v169 - v170) >> 3) <= v171)
                goto LABEL_171;
              continue;
            }
          }
          else
          {
            v185 = 0;
            v186 = (char *)(4 * v178);
            *(_DWORD *)(4 * v178) = v171;
            v172 = 4 * v178 + 4;
            if (v175 != v176)
              goto LABEL_200;
          }
          break;
        }
        v134 = v231;
        goto LABEL_209;
      }
      v61 = operator new(4uLL);
      v229 = v61;
      *v61 = *v59;
      v62 = (char *)(v61 + 1);
      if (v59[1] != -1)
        sub_19C2210D4(900);
      if (v60 < 9)
      {
        v134 = v61;
        if (*v61 == -1)
          goto LABEL_184;
        goto LABEL_145;
      }
      v63 = 2;
      v224 = (char *)(v61 + 1);
      do
      {
        v65 = (int)v59[v63];
        v66 = *(_QWORD *)(a1 + 496);
        v67 = *(_QWORD *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            v68 = *(_DWORD *)(v67 + 8 * (_DWORD)v65 + 4);
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
LABEL_49:
            *v70 = v68;
            v64 = (uint64_t)(v70 + 1);
LABEL_50:
            v240 = (int *)v64;
            goto LABEL_51;
          }
          v81 = *(_QWORD *)(v66 + 88);
          v79 = v66 + 88;
          v80 = v81;
          if (!v81)
            goto LABEL_73;
          v82 = v79;
          do
          {
            v83 = *(_DWORD *)(v80 + 28);
            v84 = v83 < (int)v65;
            if (v83 >= (int)v65)
              v85 = (uint64_t *)v80;
            else
              v85 = (uint64_t *)(v80 + 8);
            if (!v84)
              v82 = v80;
            v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            v68 = -1;
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
            goto LABEL_49;
          }
          v68 = *(_DWORD *)(v82 + 32);
          v70 = v240;
          v69 = v241;
          if (v240 < (int *)v241)
            goto LABEL_49;
LABEL_74:
          v86 = v239;
          v87 = v70 - v239;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
            sub_19C07DA0C();
          v89 = v69 - (char *)v239;
          if (v89 >> 1 > v88)
            v88 = v89 >> 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
            v90 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 >> 62)
              sub_19C07C7FC();
            v91 = v90;
            v92 = operator new(4 * v90);
            v90 = v91;
            v93 = (int *)&v92[4 * v87];
            *v93 = v68;
            v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                v62 = v224;
                goto LABEL_93;
              }
              v62 = v224;
              if ((unint64_t)((char *)v86 - v92) < 0x20)
                goto LABEL_261;
              v95 = (v94 >> 2) + 1;
              v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              v93 = (int *)((char *)v93 - v96);
              v98 = &v92[4 * v87 - 16];
              v99 = v70 - 4;
              v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  v102 = *--v70;
                  *--v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              v239 = v93;
              v240 = (int *)v64;
              v241 = &v92[4 * v90];
              if (v86)
                operator delete(v86);
              goto LABEL_50;
            }
          }
          else
          {
            v92 = 0;
            v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            v64 = 4 * v87 + 4;
            if (v70 != v86)
              goto LABEL_83;
          }
          v62 = v224;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112))
            goto LABEL_86;
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        v71 = *(_QWORD *)(v66 + 64);
        if (v71)
        {
          v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67)
            goto LABEL_60;
        }
        else
        {
          v103 = *(_QWORD *)(v66 + 48);
          if (!v103)
            goto LABEL_106;
          v104 = v66 + 48;
          do
          {
            v105 = *(_DWORD *)(v103 + 28);
            v106 = v105 < (int)v65;
            if (v105 >= (int)v65)
              v107 = (uint64_t *)v103;
            else
              v107 = (uint64_t *)(v103 + 8);
            if (!v106)
              v104 = v103;
            v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            v72 = -1;
            if (v67)
              goto LABEL_60;
          }
        }
        v110 = *(_QWORD *)(v66 + 88);
        v108 = v66 + 88;
        v109 = v110;
        if (v110)
        {
          v111 = v108;
          do
          {
            v112 = *(_DWORD *)(v109 + 28);
            v113 = v112 < (int)v65;
            if (v112 >= (int)v65)
              v114 = (uint64_t *)v109;
            else
              v114 = (uint64_t *)(v109 + 8);
            if (!v113)
              v111 = v109;
            v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            v73 = (int *)(v111 + 32);
LABEL_61:
            v74 = *v73;
            v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
            v77 = *(char **)(v75 + 8);
            v76 = *(_QWORD *)(v75 + 16);
            if ((unint64_t)v77 >= v76)
              goto LABEL_118;
            goto LABEL_62;
          }
        }
        v74 = -1;
        v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
        v77 = *(char **)(v75 + 8);
        v76 = *(_QWORD *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          v115 = *(char **)v75;
          v116 = (uint64_t)&v77[-*(_QWORD *)v75];
          v117 = v116 >> 2;
          v118 = (v116 >> 2) + 1;
          if (v118 >> 62)
            sub_19C07DA0C();
          v119 = v76 - (_QWORD)v115;
          if (v119 >> 1 > v118)
            v118 = v119 >> 1;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
            v120 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v120 = v118;
          if (v120)
          {
            v222 = &v77[-*(_QWORD *)v75];
            if (v120 >> 62)
              sub_19C07C7FC();
            v121 = v120;
            v122 = operator new(4 * v120);
            v120 = v121;
            v116 = (uint64_t)v222;
            v123 = (int *)&v122[4 * v117];
            *v123 = v74;
            v78 = (uint64_t)(v123 + 1);
            if (v77 == v115)
              goto LABEL_137;
LABEL_131:
            v124 = v77 - 4 - v115;
            if (v124 < 0x2C)
              goto LABEL_262;
            if ((unint64_t)(v77 - &v122[v116]) < 0x20)
              goto LABEL_262;
            v125 = (v124 >> 2) + 1;
            v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            v127 = &v77[-v126];
            v123 = (int *)((char *)v123 - v126);
            v128 = &v122[4 * v117 - 16];
            v129 = v77 - 16;
            v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            v122 = 0;
            v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            v78 = 4 * v117 + 4;
            if (v77 != v115)
              goto LABEL_131;
          }
LABEL_137:
          *(_QWORD *)v75 = v123;
          *(_QWORD *)(v75 + 8) = v78;
          *(_QWORD *)(v75 + 16) = &v122[4 * v120];
          if (v115)
            operator delete(v115);
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)v77 = v74;
        v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(_QWORD *)(v75 + 8) = v78;
        v62 = v224;
LABEL_51:
        ++v63;
        v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
      v134 = v229;
      if (*v229 == -1)
        goto LABEL_184;
LABEL_145:
      v135 = 0;
      while (1)
      {
LABEL_147:
        v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (v137 = v136 + 1,
              (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19C2210D4(45);
        }
        v138 = v234;
        if (v234 >= (int *)v235)
          break;
        *v234 = v137;
        v234 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2))
          goto LABEL_171;
      }
      v139 = v62;
      v230 = v134;
      v140 = (int *)__p;
      v141 = (char *)v234 - (_BYTE *)__p;
      v142 = ((char *)v234 - (_BYTE *)__p) >> 2;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
        sub_19C07DA0C();
      v144 = v235 - (_BYTE *)__p;
      if ((v235 - (_BYTE *)__p) >> 1 > v143)
        v143 = v144 >> 1;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
        v145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (!v145)
      {
        v147 = 0;
        v148 = (char *)(4 * v142);
        *(_DWORD *)(4 * v142) = v137;
        v149 = 4 * v142 + 4;
        if (v138 != v140)
          goto LABEL_159;
LABEL_162:
        v62 = v139;
        a7 = v223;
        goto LABEL_168;
      }
      if (v145 >> 62)
        sub_19C07C7FC();
      v146 = v145;
      v147 = (char *)operator new(4 * v145);
      v145 = v146;
      v148 = &v147[4 * v142];
      *(_DWORD *)v148 = v137;
      v149 = (uint64_t)(v148 + 4);
      if (v138 == v140)
        goto LABEL_162;
LABEL_159:
      v150 = (char *)(v138 - 1) - (char *)v140;
      if (v150 < 0x2C)
      {
        v62 = v139;
        a7 = v223;
        goto LABEL_167;
      }
      v151 = (char *)v138 - &v147[v141];
      v62 = v139;
      a7 = v223;
      if (v151 < 0x20)
        goto LABEL_263;
      v152 = (v150 >> 2) + 1;
      v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
      v154 = &v138[v153 / 0xFFFFFFFFFFFFFFFCLL];
      v148 -= v153;
      v155 = &v147[4 * v142 - 16];
      v156 = (__int128 *)(v138 - 4);
      v157 = v152 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v158 = *v156;
        *((_OWORD *)v155 - 1) = *(v156 - 1);
        *(_OWORD *)v155 = v158;
        v155 -= 32;
        v156 -= 2;
        v157 -= 8;
      }
      while (v157);
      v138 = v154;
      if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          v159 = *--v138;
          *((_DWORD *)v148 - 1) = v159;
          v148 -= 4;
        }
        while (v138 != v140);
      }
LABEL_168:
      __p = v148;
      v234 = (int *)v149;
      v235 = &v147[4 * v145];
      if (v140)
        operator delete(v140);
      v134 = v230;
      v234 = (int *)v149;
      if (++v135 < (unint64_t)((v62 - (char *)v230) >> 2))
        goto LABEL_147;
LABEL_171:
      if (v134)
        goto LABEL_211;
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      v196 = (int *)*p_p;
      a2 = v226;
      a3 = v227;
      if (p_p[1] != *p_p)
      {
        v197 = 0;
        while (1)
        {
          v198 = v196[v197];
          v199 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v199 + 4 * v198))
          {
            *(_DWORD *)(v199 + 4 * v198) = 1;
            v200 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 256))(v200, v228);
          }
          v201 = *(_QWORD *)(a7 + 8) != *(_QWORD *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v198 - 24)
               : (void **)&v239;
          v202 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v202 + 224))(v202, v226, v227, v17, v201);
          v203 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          v204 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 32))(v203);
          v205 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v206 = *(unsigned int *)(v205 + 4 * v198);
          if ((int)v206 >= 1)
          {
            v207 = *(float *)(*(_QWORD *)(*v232 + 8 * v17) + 4 * v198 - 4);
            v208 = *(float32x4_t **)(*v204 + 8 * v17);
            if (v206 < 8)
            {
              v209 = 0;
              goto LABEL_230;
            }
            v209 = v206 & 0x7FFFFFF8;
            v210 = v208 + 1;
            v211 = v206 & 0xFFFFFFF8;
            do
            {
              v212 = vmulq_n_f32(*v210, v207);
              v210[-1] = vmulq_n_f32(v210[-1], v207);
              *v210 = v212;
              v210 += 2;
              v211 -= 8;
            }
            while (v211);
            if (v209 != v206)
            {
LABEL_230:
              v213 = v206 - v209;
              v214 = &v208->f32[v209];
              do
              {
                *v214 = *v214 * v207;
                ++v214;
                --v213;
              }
              while (v213);
            }
LABEL_232:
            if ((int)v206 >= 1)
            {
              v215 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * (int)v198 - 24);
              v216 = *(_DWORD **)(*v204 + 8 * v17);
              v217 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v17);
              do
              {
                v219 = *v215++;
                v218 = v219;
                LODWORD(v219) = *v216++;
                *(_DWORD *)(v217 + 4 * v218) = v219;
                --v206;
              }
              while (v206);
            }
          }
          ++v197;
          v196 = (int *)*p_p;
          if (v197 >= ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2)
            goto LABEL_236;
        }
        v206 = *(unsigned int *)(v205 + 4 * v198);
        goto LABEL_232;
      }
LABEL_236:
      v220 = *(_QWORD *)(a1 + 104);
      v221 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v220 + 8 * v17), 1, __C, v221);
      if (__p)
      {
        v234 = (int *)__p;
        operator delete(__p);
      }
      if (v236)
      {
        v237 = v236;
        operator delete(v236);
      }
      ++v17;
    }
    while (v17 != v228);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
}

void sub_19C11E718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 120);
  if (!v26)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19C11E810(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEE0, 0);
  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v14 + 336))(v14, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19C11E8D4(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19C11E9DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19C11EABC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C11EEC4(a1);
  operator delete(v1);
}

_QWORD *sub_19C11EAD0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_19C07DA0C();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_19C11EC14(uint64_t a1, float32x4_t **a2, unsigned int a3, unint64_t *a4, int a5, unsigned int a6)
{
  size_t v11;
  float *v12;
  float *v13;
  float32x4_t *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float *v23;
  char *v24;
  float *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  const float *v33;
  int32x4_t *v34;
  uint64_t v35;
  const float *v36;
  unsigned __int128 v37;
  unsigned __int128 v38;
  float *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  float *__p;
  char v44;
  float32x4x2_t v45;

  __p = 0;
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    v25 = (float *)(8 * a5);
    if (!v25)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((a3 & 0x80000000) != 0)
    sub_19C07DA0C();
  v11 = 2 * (int)a3;
  v12 = (float *)operator new(v11 * 4);
  __p = v12;
  bzero(v12, 8 * (int)a3);
  v13 = &v12[v11];
  v14 = *a2;
  if (a3 < 8 || (v12 + 1 < &v14->f32[a3] ? (v15 = v14 >= (float32x4_t *)&v12[2 * a3]) : (v15 = 1), !v15))
  {
    v17 = 0;
LABEL_14:
    v24 = (char *)&v12[2 * v17 + 1];
    do
    {
      *((_DWORD *)v24 - 1) = v17;
      *(_DWORD *)v24 = v14->i32[v17];
      v24 += 8;
      ++v17;
    }
    while (a3 != v17);
    goto LABEL_16;
  }
  v16 = 0;
  v17 = a3 & 0xFFFFFFF8;
  v18 = v14 + 1;
  v19 = (int32x4_t)xmmword_19C276E70;
  v20.i64[0] = 0x400000004;
  v20.i64[1] = 0x400000004;
  v21.i64[0] = 0x800000008;
  v21.i64[1] = 0x800000008;
  do
  {
    v45.val[0] = (float32x4_t)vaddq_s32(v19, v20);
    v22 = v18[-1];
    v45.val[1] = *v18;
    v23 = &v12[v16 / 4];
    vst2q_f32(v23, *(float32x4x2_t *)v19.i8);
    v23 += 8;
    vst2q_f32(v23, v45);
    v19 = vaddq_s32(v19, v21);
    v16 += 64;
    v18 += 2;
  }
  while (((8 * a3) & 0x7FFFFFFC0) != v16);
  if (v17 != a3)
    goto LABEL_14;
LABEL_16:
  v25 = &v12[2 * a5];
  if (v25 != v13)
LABEL_19:
    sub_19C16B3A4(v12, v25, v13);
LABEL_20:
  v26 = 126 - 2 * __clz(a5);
  if (a5)
    v27 = v26;
  else
    v27 = 0;
  sub_19C16B874(v12, (char *)v25, (uint64_t)&v44, v27, 1);
  v28 = (uint64_t)(a4[1] - *a4) >> 2;
  if (a5 <= v28)
  {
    if (a5 < v28)
      a4[1] = *a4 + 4 * a5;
  }
  else
  {
    sub_19C101928((uint64_t)a4, a5 - v28);
  }
  if (a5 >= 1)
  {
    v29 = *a4;
    if (a5 > 0xC
      && (v29 >= (unint64_t)&__p[2 * a5 - 1] || (unint64_t)__p >= v29 + 4 * a5))
    {
      v31 = a5 & 7;
      if ((a5 & 7) == 0)
        v31 = 8;
      v30 = a5 - v31;
      v32 = vdupq_n_s32(a6);
      v33 = __p + 8;
      v34 = (int32x4_t *)(v29 + 16);
      v35 = v30;
      do
      {
        v36 = v33 - 8;
        v37 = (unsigned __int128)vld2q_f32(v36);
        v38 = (unsigned __int128)vld2q_f32(v33);
        v34[-1] = vaddq_s32((int32x4_t)v37, v32);
        *v34 = vaddq_s32((int32x4_t)v38, v32);
        v33 += 16;
        v34 += 2;
        v35 -= 8;
      }
      while (v35);
    }
    else
    {
      v30 = 0;
    }
    v39 = &__p[2 * v30];
    v40 = a5 - v30;
    v41 = (_DWORD *)(v29 + 4 * v30);
    do
    {
      v42 = *(_DWORD *)v39;
      v39 += 2;
      *v41++ = v42 + a6;
      --v40;
    }
    while (v40);
    goto LABEL_40;
  }
  if (__p)
LABEL_40:
    operator delete(__p);
}

void sub_19C11EE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C11EEC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  *a1 = &unk_1E3D1ED58;
  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[67];
  if (v6)
  {
    v7 = a1[68];
    v8 = (void *)a1[67];
    if (v7 != v6)
    {
      v9 = a1[68];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  v13 = a1[59];
  if (v13)
  {
    v14 = a1[60];
    v15 = (void *)a1[59];
    if (v14 != v13)
    {
      v16 = a1[60];
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }
  return sub_19C10850C(a1);
}

uint64_t sub_19C11F05C(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  float v18;
  int v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;
  __int128 v67;
  char v68;
  __int128 __p;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char v76;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1F8B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  sub_19C22CB44(a1 + 1704);
  sub_19C22CB44(a1 + 1776);
  sub_19C22CB44(a1 + 1848);
  sub_19C22CB44(a1 + 1920);
  sub_19C22CB44(a1 + 1992);
  sub_19C22CB44(a1 + 2064);
  sub_19C22CB44(a1 + 2136);
  sub_19C22CB44(a1 + 2208);
  sub_19C22CB44(a1 + 2280);
  sub_19C22CB44(a1 + 2352);
  sub_19C22CB44(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v14 = *(unsigned __int8 *)(a7 + 45);
  *(_BYTE *)(a1 + 2692) = v14 ^ 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a9;
  if (a9)
  {
    v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2680) + 376);
    *(_BYTE *)(a1 + 40) = a8;
    v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(_BYTE *)(a1 + 40) = a8;
  }
  *(_BYTE *)(a1 + 1696) = v14;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a7 + 46);
  v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  v18 = *(float *)(a7 + 16);
  v19 = *(_DWORD *)(a7 + 20);
  v20 = *(double *)(a7 + 24);
  *(float *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v14)
  {
    v21 = *(_DWORD *)(a7 + 32);
    if (v21 == 2)
    {
      v30 = operator new();
      *(_QWORD *)v30 = &unk_1E3D1E968;
      *(float *)(v30 + 24) = v18;
      *(_DWORD *)(v30 + 28) = v19;
      *(_DWORD *)(v30 + 32) = 841731191;
      v31 = v20;
      *(_WORD *)(v30 + 143) = 259;
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 12) = 0;
      *(float *)(v30 + 36) = v31;
      *(_DWORD *)(v30 + 40) = v19;
      *(float *)(v30 + 44) = v31;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_QWORD *)(v30 + 112) = 0;
      *(_QWORD *)(v30 + 120) = 4802391;
      *(_QWORD *)(a1 + 1552) = v30;
      v32 = operator new();
      *(_QWORD *)v32 = &unk_1E3D1E968;
      *(float *)(v32 + 24) = v18;
      *(_DWORD *)(v32 + 28) = v19;
      *(_DWORD *)(v32 + 32) = 841731191;
      *(_WORD *)(v32 + 143) = 259;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v32 + 8) = 0;
      *(_BYTE *)(v32 + 12) = 0;
      *(float *)(v32 + 36) = v31;
      *(_DWORD *)(v32 + 40) = v19;
      *(float *)(v32 + 44) = v31;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      *(_OWORD *)(v32 + 80) = 0u;
      *(_OWORD *)(v32 + 96) = 0u;
      *(_QWORD *)(v32 + 112) = 0;
      *(_QWORD *)(v32 + 120) = 5195607;
      *(_QWORD *)(a1 + 1568) = v32;
      v33 = operator new();
      *(_QWORD *)v33 = &unk_1E3D1E968;
      *(float *)(v33 + 24) = v18;
      *(_DWORD *)(v33 + 28) = v19;
      *(_DWORD *)(v33 + 32) = 841731191;
      *(_WORD *)(v33 + 143) = 259;
      *(_QWORD *)(v33 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v33 + 8) = 0;
      *(_BYTE *)(v33 + 12) = 0;
      *(float *)(v33 + 36) = v31;
      *(_DWORD *)(v33 + 40) = v19;
      *(float *)(v33 + 44) = v31;
      *(_OWORD *)(v33 + 48) = 0u;
      *(_OWORD *)(v33 + 64) = 0u;
      *(_OWORD *)(v33 + 80) = 0u;
      *(_OWORD *)(v33 + 96) = 0u;
      *(_QWORD *)(v33 + 112) = 0;
      *(_QWORD *)(v33 + 120) = 4605783;
      *(_QWORD *)(a1 + 1560) = v33;
      v34 = operator new();
      *(_QWORD *)v34 = &unk_1E3D1E968;
      *(float *)(v34 + 24) = v18;
      *(_DWORD *)(v34 + 28) = v19;
      *(_DWORD *)(v34 + 32) = 841731191;
      *(_WORD *)(v34 + 143) = 259;
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v34 + 8) = 0;
      *(_BYTE *)(v34 + 12) = 0;
      *(float *)(v34 + 36) = v31;
      *(_DWORD *)(v34 + 40) = v19;
      *(float *)(v34 + 44) = v31;
      *(_OWORD *)(v34 + 48) = 0u;
      *(_OWORD *)(v34 + 64) = 0u;
      *(_OWORD *)(v34 + 80) = 0u;
      *(_OWORD *)(v34 + 96) = 0u;
      *(_QWORD *)(v34 + 112) = 0;
      *(_QWORD *)(v34 + 120) = 4801367;
      *(_QWORD *)(a1 + 1576) = v34;
      v35 = operator new();
      v36 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v35 = &unk_1E3D1E968;
      *(float *)(v35 + 24) = v18;
      *(_DWORD *)(v35 + 28) = v19;
      *(_DWORD *)(v35 + 32) = 841731191;
      *(_DWORD *)(v35 + 16) = v36;
      *(_DWORD *)(v35 + 20) = v36;
      *(_WORD *)(v35 + 143) = 260;
      *(_DWORD *)(v35 + 8) = 0;
      *(_BYTE *)(v35 + 12) = 0;
      *(float *)(v35 + 36) = v31;
      *(_DWORD *)(v35 + 40) = v19;
      *(float *)(v35 + 44) = v31;
      *(_OWORD *)(v35 + 48) = 0u;
      *(_OWORD *)(v35 + 64) = 0u;
      *(_OWORD *)(v35 + 80) = 0u;
      *(_OWORD *)(v35 + 96) = 0u;
      *(_QWORD *)(v35 + 112) = 0;
      *(_QWORD *)(v35 + 120) = 843663191;
      *(_QWORD *)(a1 + 1584) = v35;
      v37 = operator new();
      v38 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v37 = &unk_1E3D1E968;
      *(float *)(v37 + 24) = v18;
      *(_DWORD *)(v37 + 28) = v19;
      *(_DWORD *)(v37 + 32) = 841731191;
      *(_WORD *)(v37 + 143) = 260;
      *(_DWORD *)(v37 + 16) = v38;
      *(_DWORD *)(v37 + 20) = v38;
      *(_DWORD *)(v37 + 8) = 0;
      *(_BYTE *)(v37 + 12) = 0;
      *(float *)(v37 + 36) = v31;
      *(_DWORD *)(v37 + 40) = v19;
      *(float *)(v37 + 44) = v31;
      *(_OWORD *)(v37 + 48) = 0u;
      *(_OWORD *)(v37 + 64) = 0u;
      *(_OWORD *)(v37 + 80) = 0u;
      *(_OWORD *)(v37 + 96) = 0u;
      *(_QWORD *)(v37 + 112) = 0;
      *(_QWORD *)(v37 + 120) = 844056407;
      *(_QWORD *)(a1 + 1600) = v37;
      v39 = operator new();
      v40 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v39 = &unk_1E3D1E968;
      *(float *)(v39 + 24) = v18;
      *(_DWORD *)(v39 + 28) = v19;
      *(_DWORD *)(v39 + 32) = 841731191;
      *(_DWORD *)(v39 + 16) = v40;
      *(_DWORD *)(v39 + 20) = v40;
      *(_WORD *)(v39 + 143) = 260;
      *(_DWORD *)(v39 + 8) = 0;
      *(_BYTE *)(v39 + 12) = 0;
      *(float *)(v39 + 36) = v31;
      *(_DWORD *)(v39 + 40) = v19;
      *(float *)(v39 + 44) = v31;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_OWORD *)(v39 + 96) = 0u;
      *(_QWORD *)(v39 + 112) = 0;
      *(_QWORD *)(v39 + 120) = 843466583;
      *(_QWORD *)(a1 + 1592) = v39;
      v41 = operator new();
      v42 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v41 = &unk_1E3D1E968;
      *(float *)(v41 + 24) = v18;
      *(_DWORD *)(v41 + 28) = v19;
      *(_DWORD *)(v41 + 32) = 841731191;
      *(_WORD *)(v41 + 143) = 260;
      *(_DWORD *)(v41 + 16) = v42;
      *(_DWORD *)(v41 + 20) = v42;
      *(_DWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 12) = 0;
      *(float *)(v41 + 36) = v31;
      *(_DWORD *)(v41 + 40) = v19;
      *(float *)(v41 + 44) = v31;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_QWORD *)(v41 + 112) = 0;
      *(_QWORD *)(v41 + 120) = 843662167;
    }
    else
    {
      if (v21 != 1)
      {
        if (!v21)
        {
          v22 = operator new();
          v76 = 3;
          LODWORD(v75) = 4802391;
          sub_19C0FCB2C(v22, &v75, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1552) = v22;
          if (v76 < 0)
            operator delete((void *)v75);
          v23 = operator new();
          v74 = 3;
          LODWORD(v73) = 5195607;
          sub_19C0FCB2C(v23, &v73, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1560) = v23;
          if (v74 < 0)
            operator delete((void *)v73);
          v24 = operator new();
          v72 = 3;
          LODWORD(v71) = 4605783;
          sub_19C0FCB2C(v24, &v71, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1568) = v24;
          if (v72 < 0)
            operator delete((void *)v71);
          v25 = operator new();
          v70 = 3;
          LODWORD(__p) = 4801367;
          sub_19C0FCB2C(v25, &__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1576) = v25;
          if (v70 < 0)
            operator delete((void *)__p);
          v26 = operator new();
          v68 = 3;
          LODWORD(v67) = 4802391;
          sub_19C0FCB2C(v26, &v67, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1584) = v26;
          if (v68 < 0)
            operator delete((void *)v67);
          v27 = operator new();
          v66 = 3;
          LODWORD(v65) = 4605783;
          sub_19C0FCB2C(v27, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1592) = v27;
          if (v66 < 0)
            operator delete((void *)v65);
          v28 = operator new();
          v64 = 3;
          LODWORD(v63) = 5195607;
          sub_19C0FCB2C(v28, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1600) = v28;
          if (v64 < 0)
            operator delete((void *)v63);
          v29 = operator new();
          v62 = 4;
          strcpy((char *)v61, "WCI2");
          sub_19C0FCB2C(v29, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1608) = v29;
          if (v62 < 0)
            operator delete(v61[0]);
        }
        goto LABEL_31;
      }
      v43 = operator new();
      *(float *)(v43 + 20) = v18;
      *(_DWORD *)(v43 + 24) = v19;
      *(_DWORD *)(v43 + 28) = 841731191;
      *(double *)(v43 + 32) = v20;
      *(_WORD *)(v43 + 159) = 259;
      v44 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v43 = &unk_1E3D1E270;
      *(_QWORD *)(v43 + 8) = 0;
      *(_BYTE *)(v43 + 16) = 0;
      *(_DWORD *)(v43 + 40) = v19;
      *(double *)(v43 + 48) = v20;
      *(_QWORD *)(v43 + 56) = v44;
      *(_DWORD *)(v43 + 164) = 0;
      *(_OWORD *)(v43 + 64) = 0u;
      *(_OWORD *)(v43 + 80) = 0u;
      *(_OWORD *)(v43 + 96) = 0u;
      *(_OWORD *)(v43 + 112) = 0u;
      *(_QWORD *)(v43 + 128) = 0;
      *(_QWORD *)(v43 + 136) = 4802391;
      *(_QWORD *)(a1 + 1552) = v43;
      v45 = operator new();
      *(float *)(v45 + 20) = v18;
      *(_DWORD *)(v45 + 24) = v19;
      *(_DWORD *)(v45 + 28) = 841731191;
      *(double *)(v45 + 32) = v20;
      *(_WORD *)(v45 + 159) = 259;
      v46 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v45 = &unk_1E3D1E270;
      *(_QWORD *)(v45 + 8) = 0;
      *(_BYTE *)(v45 + 16) = 0;
      *(_DWORD *)(v45 + 40) = v19;
      *(double *)(v45 + 48) = v20;
      *(_QWORD *)(v45 + 56) = v46;
      *(_DWORD *)(v45 + 164) = 0;
      *(_OWORD *)(v45 + 64) = 0u;
      *(_OWORD *)(v45 + 80) = 0u;
      *(_OWORD *)(v45 + 96) = 0u;
      *(_OWORD *)(v45 + 112) = 0u;
      *(_QWORD *)(v45 + 128) = 0;
      *(_QWORD *)(v45 + 136) = 5195607;
      *(_QWORD *)(a1 + 1568) = v45;
      v47 = operator new();
      *(float *)(v47 + 20) = v18;
      *(_DWORD *)(v47 + 24) = v19;
      *(_DWORD *)(v47 + 28) = 841731191;
      *(double *)(v47 + 32) = v20;
      *(_WORD *)(v47 + 159) = 259;
      v48 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v47 = &unk_1E3D1E270;
      *(_QWORD *)(v47 + 8) = 0;
      *(_BYTE *)(v47 + 16) = 0;
      *(_DWORD *)(v47 + 40) = v19;
      *(double *)(v47 + 48) = v20;
      *(_QWORD *)(v47 + 56) = v48;
      *(_DWORD *)(v47 + 164) = 0;
      *(_OWORD *)(v47 + 64) = 0u;
      *(_OWORD *)(v47 + 80) = 0u;
      *(_OWORD *)(v47 + 96) = 0u;
      *(_OWORD *)(v47 + 112) = 0u;
      *(_QWORD *)(v47 + 128) = 0;
      *(_QWORD *)(v47 + 136) = 4605783;
      *(_QWORD *)(a1 + 1560) = v47;
      v49 = operator new();
      *(float *)(v49 + 20) = v18;
      *(_DWORD *)(v49 + 24) = v19;
      *(_DWORD *)(v49 + 28) = 841731191;
      *(double *)(v49 + 32) = v20;
      *(_WORD *)(v49 + 159) = 259;
      v50 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v49 = &unk_1E3D1E270;
      *(_QWORD *)(v49 + 8) = 0;
      *(_BYTE *)(v49 + 16) = 0;
      *(_DWORD *)(v49 + 40) = v19;
      *(double *)(v49 + 48) = v20;
      *(_QWORD *)(v49 + 56) = v50;
      *(_DWORD *)(v49 + 164) = 0;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 80) = 0u;
      *(_OWORD *)(v49 + 96) = 0u;
      *(_OWORD *)(v49 + 112) = 0u;
      *(_QWORD *)(v49 + 128) = 0;
      *(_QWORD *)(v49 + 136) = 4801367;
      *(_QWORD *)(a1 + 1576) = v49;
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 52);
      *(float *)(v51 + 20) = v18;
      *(_DWORD *)(v51 + 24) = v19;
      *(_DWORD *)(v51 + 28) = 841731191;
      *(double *)(v51 + 32) = v20;
      *(_DWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 60) = v52;
      *(_WORD *)(v51 + 159) = 260;
      *(_QWORD *)v51 = &unk_1E3D1E270;
      *(_QWORD *)(v51 + 8) = 0;
      *(_BYTE *)(v51 + 16) = 0;
      *(_DWORD *)(v51 + 40) = v19;
      *(double *)(v51 + 48) = v20;
      *(_DWORD *)(v51 + 164) = 0;
      *(_OWORD *)(v51 + 64) = 0u;
      *(_OWORD *)(v51 + 80) = 0u;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      *(_QWORD *)(v51 + 128) = 0;
      *(_QWORD *)(v51 + 136) = 843663191;
      *(_QWORD *)(a1 + 1584) = v51;
      v53 = operator new();
      v54 = *(_DWORD *)(a1 + 52);
      *(float *)(v53 + 20) = v18;
      *(_DWORD *)(v53 + 24) = v19;
      *(_DWORD *)(v53 + 28) = 841731191;
      *(double *)(v53 + 32) = v20;
      *(_WORD *)(v53 + 159) = 260;
      *(_DWORD *)(v53 + 56) = v54;
      *(_DWORD *)(v53 + 60) = v54;
      *(_QWORD *)v53 = &unk_1E3D1E270;
      *(_QWORD *)(v53 + 8) = 0;
      *(_BYTE *)(v53 + 16) = 0;
      *(_DWORD *)(v53 + 40) = v19;
      *(double *)(v53 + 48) = v20;
      *(_DWORD *)(v53 + 164) = 0;
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 96) = 0u;
      *(_OWORD *)(v53 + 112) = 0u;
      *(_QWORD *)(v53 + 128) = 0;
      *(_QWORD *)(v53 + 136) = 844056407;
      *(_QWORD *)(a1 + 1600) = v53;
      v55 = operator new();
      v56 = *(_DWORD *)(a1 + 52);
      *(float *)(v55 + 20) = v18;
      *(_DWORD *)(v55 + 24) = v19;
      *(_DWORD *)(v55 + 28) = 841731191;
      *(double *)(v55 + 32) = v20;
      *(_DWORD *)(v55 + 56) = v56;
      *(_DWORD *)(v55 + 60) = v56;
      *(_WORD *)(v55 + 159) = 260;
      *(_QWORD *)v55 = &unk_1E3D1E270;
      *(_QWORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 16) = 0;
      *(_DWORD *)(v55 + 40) = v19;
      *(double *)(v55 + 48) = v20;
      *(_DWORD *)(v55 + 164) = 0;
      *(_OWORD *)(v55 + 64) = 0u;
      *(_OWORD *)(v55 + 80) = 0u;
      *(_OWORD *)(v55 + 96) = 0u;
      *(_OWORD *)(v55 + 112) = 0u;
      *(_QWORD *)(v55 + 128) = 0;
      *(_QWORD *)(v55 + 136) = 843466583;
      *(_QWORD *)(a1 + 1592) = v55;
      v41 = operator new();
      v57 = *(_DWORD *)(a1 + 52);
      *(float *)(v41 + 20) = v18;
      *(_DWORD *)(v41 + 24) = v19;
      *(_DWORD *)(v41 + 28) = 841731191;
      *(double *)(v41 + 32) = v20;
      *(_WORD *)(v41 + 159) = 260;
      *(_DWORD *)(v41 + 56) = v57;
      *(_DWORD *)(v41 + 60) = v57;
      *(_QWORD *)v41 = &unk_1E3D1E270;
      *(_QWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 40) = v19;
      *(double *)(v41 + 48) = v20;
      *(_DWORD *)(v41 + 164) = 0;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_QWORD *)(v41 + 128) = 0;
      *(_QWORD *)(v41 + 136) = 843662167;
    }
    *(_QWORD *)(a1 + 1608) = v41;
  }
LABEL_31:
  v60 = (char *)operator new(0x20uLL);
  strcpy(v60, "LSTM alloc, from constructor");
  sub_19C12024C(a1);
  operator delete(v60);
  return a1;
}

void sub_19C11FD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void **v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void **v97;
  void *v98;

  if (a32 < 0)
    operator delete(__p);
  operator delete(v57);
  v97 = (void **)(v56 + 328);
  v98 = (void *)v56[331];
  if (v98)
  {
    v56[332] = v98;
    operator delete(v98);
    v64 = *v97;
    if (!*v97)
    {
LABEL_6:
      sub_19C22CB78(v62);
      sub_19C22CB78(v58);
      sub_19C22CB78(a10);
      sub_19C22CB78(a11);
      sub_19C22CB78(a12);
      sub_19C22CB78(a13);
      sub_19C22CB78(a20);
      sub_19C22CB78(v61);
      sub_19C22CB78(v60);
      sub_19C22CB78(v59);
      sub_19C22CB78(a14);
      sub_19C101AC4(a16);
      sub_19C101AC4(a17);
      sub_19C101AC4(a15);
      sub_19C101AC4(a18);
      v65 = (void *)v56[120];
      if (v65)
      {
        v56[121] = v65;
        operator delete(v65);
        v66 = (void *)v56[117];
        if (!v66)
        {
LABEL_8:
          v67 = (void *)v56[114];
          if (!v67)
            goto LABEL_9;
          goto LABEL_40;
        }
      }
      else
      {
        v66 = (void *)v56[117];
        if (!v66)
          goto LABEL_8;
      }
      v56[118] = v66;
      operator delete(v66);
      v67 = (void *)v56[114];
      if (!v67)
      {
LABEL_9:
        v68 = (void *)v56[111];
        if (!v68)
          goto LABEL_10;
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v67;
      operator delete(v67);
      v68 = (void *)v56[111];
      if (!v68)
      {
LABEL_10:
        v69 = (void *)v56[108];
        if (!v69)
          goto LABEL_11;
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v68;
      operator delete(v68);
      v69 = (void *)v56[108];
      if (!v69)
      {
LABEL_11:
        v70 = (void *)v56[105];
        if (!v70)
          goto LABEL_12;
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v69;
      operator delete(v69);
      v70 = (void *)v56[105];
      if (!v70)
      {
LABEL_12:
        v71 = (void *)v56[102];
        if (!v71)
          goto LABEL_13;
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v70;
      operator delete(v70);
      v71 = (void *)v56[102];
      if (!v71)
      {
LABEL_13:
        v72 = (void *)v56[99];
        if (!v72)
          goto LABEL_14;
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v71;
      operator delete(v71);
      v72 = (void *)v56[99];
      if (!v72)
      {
LABEL_14:
        v73 = (void *)v56[89];
        if (!v73)
          goto LABEL_15;
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v72;
      operator delete(v72);
      v73 = (void *)v56[89];
      if (!v73)
      {
LABEL_15:
        v74 = (void *)v56[86];
        if (!v74)
          goto LABEL_16;
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v73;
      operator delete(v73);
      v74 = (void *)v56[86];
      if (!v74)
      {
LABEL_16:
        v75 = (void *)v56[83];
        if (!v75)
          goto LABEL_17;
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v74;
      operator delete(v74);
      v75 = (void *)v56[83];
      if (!v75)
      {
LABEL_17:
        v76 = (void *)v56[80];
        if (!v76)
          goto LABEL_18;
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v75;
      operator delete(v75);
      v76 = (void *)v56[80];
      if (!v76)
      {
LABEL_18:
        v77 = (void *)v56[77];
        if (!v77)
          goto LABEL_19;
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v76;
      operator delete(v76);
      v77 = (void *)v56[77];
      if (!v77)
      {
LABEL_19:
        v78 = (void *)v56[74];
        if (!v78)
          goto LABEL_20;
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v77;
      operator delete(v77);
      v78 = (void *)v56[74];
      if (!v78)
      {
LABEL_20:
        v79 = (void *)v56[71];
        if (!v79)
          goto LABEL_21;
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v78;
      operator delete(v78);
      v79 = (void *)v56[71];
      if (!v79)
      {
LABEL_21:
        v80 = (void *)v56[68];
        if (!v80)
          goto LABEL_22;
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v79;
      operator delete(v79);
      v80 = (void *)v56[68];
      if (!v80)
      {
LABEL_22:
        v81 = (void *)v56[65];
        if (!v81)
          goto LABEL_23;
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v80;
      operator delete(v80);
      v81 = (void *)v56[65];
      if (!v81)
      {
LABEL_23:
        v82 = (void *)v56[62];
        if (!v82)
          goto LABEL_24;
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v81;
      operator delete(v81);
      v82 = (void *)v56[62];
      if (!v82)
      {
LABEL_24:
        v83 = (void *)v56[59];
        if (!v83)
          goto LABEL_25;
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v82;
      operator delete(v82);
      v83 = (void *)v56[59];
      if (!v83)
      {
LABEL_25:
        v84 = (void *)v56[56];
        if (!v84)
          goto LABEL_26;
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v83;
      operator delete(v83);
      v84 = (void *)v56[56];
      if (!v84)
      {
LABEL_26:
        v85 = (void *)v56[53];
        if (!v85)
          goto LABEL_27;
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v84;
      operator delete(v84);
      v85 = (void *)v56[53];
      if (!v85)
      {
LABEL_27:
        v86 = (void *)v56[50];
        if (!v86)
          goto LABEL_28;
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v85;
      operator delete(v85);
      v86 = (void *)v56[50];
      if (!v86)
      {
LABEL_28:
        v87 = (void **)(v56 + 26);
        v88 = (void *)v56[47];
        if (!v88)
          goto LABEL_29;
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v86;
      operator delete(v86);
      v87 = (void **)(v56 + 26);
      v88 = (void *)v56[47];
      if (!v88)
      {
LABEL_29:
        v89 = (void *)v56[44];
        if (!v89)
          goto LABEL_30;
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v88;
      operator delete(v88);
      v89 = (void *)v56[44];
      if (!v89)
      {
LABEL_30:
        sub_19C0830E8(v87);
        v90 = (void *)v56[23];
        if (!v90)
          goto LABEL_31;
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v89;
      operator delete(v89);
      sub_19C0830E8(v87);
      v90 = (void *)v56[23];
      if (!v90)
      {
LABEL_31:
        v91 = (void *)v56[20];
        if (!v91)
          goto LABEL_32;
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v90;
      operator delete(v90);
      v91 = (void *)v56[20];
      if (!v91)
      {
LABEL_32:
        v92 = (void *)v56[17];
        if (!v92)
          goto LABEL_33;
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v91;
      operator delete(v91);
      v92 = (void *)v56[17];
      if (!v92)
      {
LABEL_33:
        v93 = (void *)v56[14];
        if (!v93)
          goto LABEL_34;
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v92;
      operator delete(v92);
      v93 = (void *)v56[14];
      if (!v93)
      {
LABEL_34:
        v94 = (void *)v56[11];
        if (!v94)
          goto LABEL_35;
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v93;
      operator delete(v93);
      v94 = (void *)v56[11];
      if (!v94)
      {
LABEL_35:
        v95 = *a19;
        if (!*a19)
          goto LABEL_36;
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v94;
      operator delete(v94);
      v95 = *a19;
      if (!*a19)
      {
LABEL_36:
        *v56 = &unk_1E3D1E2D8;
        v96 = (void *)v56[1];
        if (!v96)
          goto LABEL_37;
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v95;
      operator delete(v95);
      *v56 = &unk_1E3D1E2D8;
      v96 = (void *)v56[1];
      if (!v96)
LABEL_37:
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v96;
      operator delete(v96);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v64 = *v97;
    if (!*v97)
      goto LABEL_6;
  }
  v56[329] = v64;
  operator delete(v64);
  goto LABEL_6;
}

void sub_19C12024C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  _QWORD *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _OWORD *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  BOOL v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  char **v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  char **v203;
  char *v204;
  unint64_t v205;
  _QWORD *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  _QWORD *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  char *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  _OWORD *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  char *v261;
  unint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  _OWORD *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  _QWORD *v282;
  int v283;
  uint64_t v284;
  char **v285;
  char *v286;
  unint64_t v287;
  _QWORD *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _BYTE *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _BYTE *v316;
  _QWORD *v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  _OWORD *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  _BYTE *v341;
  _QWORD *v342;
  char *v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  _OWORD *v350;
  char *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _BYTE *v366;
  _QWORD *v367;
  char *v368;
  char *v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  _OWORD *v375;
  char *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  size_t v380;
  uint64_t v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  _BYTE *v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  _OWORD *v400;
  char *v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  size_t v405;
  uint64_t v406;
  char *v407;
  unint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  _BYTE *v416;
  _QWORD *v417;
  char *v418;
  char *v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  size_t v430;
  uint64_t v431;
  char *v432;
  unint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  _BYTE *v441;
  _QWORD *v442;
  char *v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  size_t v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  _QWORD *v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  _BYTE *v466;
  _QWORD *v467;
  char *v468;
  unint64_t v469;
  char **v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  _OWORD *v474;
  char *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  _QWORD *v479;
  char *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  _OWORD *v485;
  char *v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  char *v492;
  unint64_t v493;
  _QWORD *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _BYTE *v501;
  _QWORD *v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  _OWORD *v508;
  char *v509;
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  char *v515;
  unint64_t v516;
  _QWORD *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  _BYTE *v524;
  _QWORD *v525;
  char *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char *v530;
  _OWORD *v531;
  char *v532;
  uint64_t v533;
  __int128 v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  char *v538;
  unint64_t v539;
  _QWORD *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  _BYTE *v547;
  _QWORD *v548;
  char *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  _OWORD *v554;
  char *v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  void *v561;
  char *v562;
  unint64_t v563;
  uint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _QWORD *v572;
  char *v573;
  char *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char *v578;
  _OWORD *v579;
  char *v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  void *v586;
  char *v587;
  unint64_t v588;
  uint64_t v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  _BYTE *v596;
  _QWORD *v597;
  char *v598;
  char *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  _OWORD *v604;
  char *v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  int v609;
  void *v610;
  char *v611;
  unint64_t v612;
  uint64_t v613;
  void **p_vtable;
  char *v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  _BYTE *v621;
  _QWORD *v622;
  char *v623;
  char *v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  char *v628;
  _OWORD *v629;
  char *v630;
  uint64_t v631;
  __int128 v632;
  uint64_t v633;
  int v634;
  int v635;
  void *v636;
  char *v637;
  unint64_t v638;
  uint64_t v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  _BYTE *v646;
  _QWORD *v647;
  char *v648;
  char *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  _OWORD *v654;
  char *v655;
  uint64_t v656;
  __int128 v657;
  uint64_t v658;
  int v659;
  void *v660;
  char *v661;
  unint64_t v662;
  uint64_t v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  _BYTE *v670;
  _QWORD *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char *v677;
  _OWORD *v678;
  char *v679;
  uint64_t v680;
  __int128 v681;
  uint64_t v682;
  int v683;
  void *v684;
  char *v685;
  unint64_t v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  _BYTE *v694;
  _QWORD *v695;
  char *v696;
  char *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  _OWORD *v702;
  char *v703;
  uint64_t v704;
  __int128 v705;
  uint64_t v706;
  int v707;
  void *v708;
  char *v709;
  unint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  _BYTE *v717;
  _QWORD *v718;
  char *v719;
  uint64_t v720;
  char *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  char *v725;
  _OWORD *v726;
  char *v727;
  uint64_t v728;
  __int128 v729;
  uint64_t v730;
  unsigned int v731;
  void *v732;
  char *v733;
  unint64_t v734;
  uint64_t v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  _BYTE *v742;
  _QWORD *v743;
  char *v744;
  char *v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  char *v749;
  _OWORD *v750;
  char *v751;
  uint64_t v752;
  __int128 v753;
  uint64_t v754;
  unsigned int v755;
  void *v756;
  char *v757;
  unint64_t v758;
  uint64_t v759;
  char *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  _BYTE *v766;
  _QWORD *v767;
  char *v768;
  char *v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  _OWORD *v774;
  char *v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  unsigned int v779;
  void *v780;
  char *v781;
  unint64_t v782;
  uint64_t v783;
  char *v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  unint64_t v789;
  _BYTE *v790;
  _QWORD *v791;
  char *v792;
  char *v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  char *v797;
  _OWORD *v798;
  char *v799;
  uint64_t v800;
  __int128 v801;
  uint64_t v802;
  unsigned int v803;
  void *v804;
  char *v805;
  unint64_t v806;
  uint64_t v807;
  char *v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  unint64_t v813;
  _BYTE *v814;
  _QWORD *v815;
  char *v816;
  char *v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  _OWORD *v822;
  char *v823;
  uint64_t v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  void *v828;
  void *v829;
  char *v830;
  unint64_t v831;
  uint64_t v832;
  char *v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  _BYTE *v839;
  _QWORD *v840;
  char *v841;
  char *v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  char *v846;
  _OWORD *v847;
  char *v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  void *v854;
  char *v855;
  unint64_t v856;
  uint64_t v857;
  char *v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _BYTE *v864;
  _QWORD *v865;
  char *v866;
  char *v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  _OWORD *v872;
  char *v873;
  uint64_t v874;
  __int128 v875;
  uint64_t v876;
  uint64_t v877;
  void *v878;
  void *v879;
  char *v880;
  unint64_t v881;
  uint64_t v882;
  char *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  unint64_t v888;
  _BYTE *v889;
  _QWORD *v890;
  char *v891;
  char *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  char *v896;
  _OWORD *v897;
  char *v898;
  uint64_t v899;
  __int128 v900;
  uint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  void *v922;
  void *v923;
  unint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  unint64_t v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  void *v975;
  void *v976;
  char *v977;
  unint64_t v978;
  uint64_t v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  unint64_t v985;
  _BYTE *v986;
  _QWORD *v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  char *v991;
  _OWORD *v992;
  char *v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  int v997;
  void *v998;
  char *v999;
  unint64_t v1000;
  char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  _BYTE *v1007;
  _QWORD *v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  char *v1012;
  _OWORD *v1013;
  char *v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  void *v1021;
  void *v1022;
  char *v1023;
  unint64_t v1024;
  uint64_t v1025;
  char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  _BYTE *v1032;
  _QWORD *v1033;
  unint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  char *v1037;
  _OWORD *v1038;
  char *v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  void *v1044;
  void *v1045;
  char *v1046;
  unint64_t v1047;
  uint64_t v1048;
  char *v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  _BYTE *v1055;
  _QWORD *v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  char *v1060;
  _OWORD *v1061;
  char *v1062;
  uint64_t v1063;
  __int128 v1064;
  uint64_t v1065;
  uint64_t v1066;
  void *v1067;
  void *v1068;
  char *v1069;
  unint64_t v1070;
  uint64_t v1071;
  char *v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  _BYTE *v1078;
  _QWORD *v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  char *v1083;
  _OWORD *v1084;
  char *v1085;
  uint64_t v1086;
  __int128 v1087;
  uint64_t v1088;
  uint64_t v1089;
  void *v1090;
  void *v1091;
  char *v1092;
  unint64_t v1093;
  uint64_t v1094;
  char *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  _BYTE *v1101;
  _QWORD *v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  char *v1106;
  _OWORD *v1107;
  char *v1108;
  uint64_t v1109;
  __int128 v1110;
  uint64_t v1111;
  uint64_t v1112;
  void *v1113;
  void *v1114;
  char *v1115;
  unint64_t v1116;
  uint64_t v1117;
  char *v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  _BYTE *v1124;
  _QWORD *v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  char *v1129;
  _OWORD *v1130;
  char *v1131;
  uint64_t v1132;
  __int128 v1133;
  uint64_t v1134;
  uint64_t v1135;
  void *v1136;
  void *v1137;
  char *v1138;
  unint64_t v1139;
  uint64_t v1140;
  char *v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  _BYTE *v1147;
  _QWORD *v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  char *v1152;
  _OWORD *v1153;
  char *v1154;
  uint64_t v1155;
  __int128 v1156;
  uint64_t v1157;
  uint64_t v1158;
  void *v1159;
  void *v1160;
  char *v1161;
  unint64_t v1162;
  uint64_t v1163;
  char *v1164;
  uint64_t v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  _BYTE *v1170;
  _QWORD *v1171;
  unint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  char *v1175;
  _OWORD *v1176;
  char *v1177;
  uint64_t v1178;
  __int128 v1179;
  uint64_t v1180;
  uint64_t v1181;
  void *v1182;
  void *v1183;
  char *v1184;
  unint64_t v1185;
  uint64_t v1186;
  char *v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  _BYTE *v1193;
  _QWORD *v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  char *v1198;
  _OWORD *v1199;
  char *v1200;
  uint64_t v1201;
  __int128 v1202;
  uint64_t v1203;
  int v1204;
  void *v1205;
  char *v1206;
  unint64_t v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  _BYTE *v1215;
  _QWORD *v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  char *v1220;
  _OWORD *v1221;
  char *v1222;
  uint64_t v1223;
  __int128 v1224;
  uint64_t v1225;
  int v1226;
  void *v1227;
  char *v1228;
  unint64_t v1229;
  uint64_t v1230;
  char *v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  _BYTE *v1237;
  _QWORD *v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  char *v1242;
  _OWORD *v1243;
  char *v1244;
  uint64_t v1245;
  __int128 v1246;
  uint64_t v1247;
  int v1248;
  void *v1249;
  char *v1250;
  unint64_t v1251;
  uint64_t v1252;
  char *v1253;
  uint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  _BYTE *v1259;
  _QWORD *v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  char *v1264;
  _OWORD *v1265;
  char *v1266;
  uint64_t v1267;
  __int128 v1268;
  uint64_t v1269;
  int v1270;
  void *v1271;
  char *v1272;
  unint64_t v1273;
  uint64_t v1274;
  char *v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  _BYTE *v1281;
  _QWORD *v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  char *v1286;
  _OWORD *v1287;
  char *v1288;
  uint64_t v1289;
  __int128 v1290;
  uint64_t v1291;
  int v1292;
  void *v1293;
  char *v1294;
  unint64_t v1295;
  uint64_t v1296;
  char *v1297;
  uint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  _BYTE *v1303;
  _QWORD *v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  char *v1308;
  _OWORD *v1309;
  char *v1310;
  uint64_t v1311;
  __int128 v1312;
  uint64_t v1313;
  int v1314;
  void *v1315;
  char *v1316;
  unint64_t v1317;
  uint64_t v1318;
  char *v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  _BYTE *v1325;
  _QWORD *v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  char *v1330;
  _OWORD *v1331;
  char *v1332;
  uint64_t v1333;
  __int128 v1334;
  uint64_t v1335;
  int v1336;
  void *v1337;
  char *v1338;
  unint64_t v1339;
  uint64_t v1340;
  char *v1341;
  uint64_t v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  _BYTE *v1347;
  _QWORD *v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  char *v1352;
  _OWORD *v1353;
  char *v1354;
  uint64_t v1355;
  __int128 v1356;
  uint64_t v1357;
  int v1358;
  void *v1359;
  char *v1360;
  unint64_t v1361;
  char *v1362;
  uint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  _BYTE *v1368;
  _QWORD *v1369;
  unint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  char *v1373;
  _OWORD *v1374;
  char *v1375;
  uint64_t v1376;
  __int128 v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  void **v1381;
  _QWORD *v1382;
  unint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  void *v1386;
  void *v1387;
  char *v1388;
  unint64_t v1389;
  uint64_t v1390;
  char *v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  _BYTE *v1397;
  _QWORD *v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  char *v1402;
  _OWORD *v1403;
  char *v1404;
  uint64_t v1405;
  __int128 v1406;
  uint64_t v1407;
  uint64_t v1408;
  void *v1409;
  void *v1410;
  char *v1411;
  unint64_t v1412;
  uint64_t v1413;
  char *v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  _BYTE *v1420;
  _QWORD *v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  char *v1425;
  _OWORD *v1426;
  char *v1427;
  uint64_t v1428;
  __int128 v1429;
  uint64_t v1430;
  int v1431;
  void *v1432;
  char *v1433;
  unint64_t v1434;
  uint64_t v1435;
  char *v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  unint64_t v1441;
  _BYTE *v1442;
  _QWORD *v1443;
  unint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  char *v1447;
  _OWORD *v1448;
  char *v1449;
  uint64_t v1450;
  __int128 v1451;
  uint64_t v1452;
  int v1453;
  void *v1454;
  char *v1455;
  unint64_t v1456;
  uint64_t v1457;
  char *v1458;
  uint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  _BYTE *v1464;
  _QWORD *v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  char *v1469;
  _OWORD *v1470;
  char *v1471;
  uint64_t v1472;
  __int128 v1473;
  uint64_t v1474;
  uint64_t v1475;
  void *v1476;
  void *v1477;
  char *v1478;
  unint64_t v1479;
  uint64_t v1480;
  char *v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  _BYTE *v1487;
  _QWORD *v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  char *v1492;
  _OWORD *v1493;
  char *v1494;
  uint64_t v1495;
  __int128 v1496;
  uint64_t v1497;
  uint64_t v1498;
  void *v1499;
  void *v1500;
  char *v1501;
  unint64_t v1502;
  uint64_t v1503;
  char *v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  _BYTE *v1510;
  _QWORD *v1511;
  unint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  char *v1515;
  _OWORD *v1516;
  char *v1517;
  uint64_t v1518;
  __int128 v1519;
  uint64_t v1520;
  uint64_t v1521;
  void *v1522;
  void *v1523;
  char *v1524;
  unint64_t v1525;
  uint64_t v1526;
  char *v1527;
  uint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  _BYTE *v1533;
  _QWORD *v1534;
  unint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  char *v1538;
  _OWORD *v1539;
  char *v1540;
  uint64_t v1541;
  __int128 v1542;
  uint64_t v1543;
  uint64_t v1544;
  void *v1545;
  void *v1546;
  char *v1547;
  unint64_t v1548;
  uint64_t v1549;
  char *v1550;
  uint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  _BYTE *v1556;
  _QWORD *v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  char *v1561;
  _OWORD *v1562;
  char *v1563;
  uint64_t v1564;
  __int128 v1565;
  uint64_t v1566;
  uint64_t v1567;
  void *v1568;
  void *v1569;
  char *v1570;
  unint64_t v1571;
  uint64_t v1572;
  char *v1573;
  uint64_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  unint64_t v1578;
  _BYTE *v1579;
  _QWORD *v1580;
  unint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  char *v1584;
  _OWORD *v1585;
  char *v1586;
  uint64_t v1587;
  __int128 v1588;
  uint64_t v1589;
  uint64_t v1590;
  void *v1591;
  void *v1592;
  char *v1593;
  unint64_t v1594;
  uint64_t v1595;
  char *v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  _BYTE *v1602;
  _QWORD *v1603;
  unint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  char *v1607;
  _OWORD *v1608;
  char *v1609;
  uint64_t v1610;
  __int128 v1611;
  uint64_t v1612;
  uint64_t v1613;
  void *v1614;
  void *v1615;
  char *v1616;
  unint64_t v1617;
  char *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  unint64_t v1623;
  _BYTE *v1624;
  _QWORD *v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  char *v1629;
  _OWORD *v1630;
  char *v1631;
  uint64_t v1632;
  __int128 v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  __int128 v1637[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = (char **)(a1 + 2624);
  v6 = *(char **)(a1 + 2632);
  v7 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = v4;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_25;
  }
  v9 = *v5;
  v10 = v6 - *v5;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    goto LABEL_1698;
  v13 = v7 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      goto LABEL_1699;
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v4;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_23;
    goto LABEL_16;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v4;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_16:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_1704;
    if ((unint64_t)(v6 - &v15[v10]) < 0x20)
      goto LABEL_1704;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v6 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v6 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1704:
      do
      {
        v27 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v16 = v27;
      }
      while (v6 != v9);
    }
    v6 = *v5;
  }
LABEL_23:
  *(_QWORD *)(a1 + 2624) = v16;
  *(_QWORD *)(a1 + 2632) = v8;
  *(_QWORD *)(a1 + 2640) = v17;
  if (v6)
    operator delete(v6);
LABEL_25:
  *(_QWORD *)(a1 + 2632) = v8;
  v28 = *(unsigned int *)(a1 + 52);
  v29 = (void *)operator new[]();
  v30 = v29;
  if ((int)v28 >= 1)
    bzero(v29, 4 * v28);
  *(_QWORD *)(a1 + 1648) = v30;
  v31 = *(char **)(a1 + 2632);
  v32 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v31 < v32)
  {
    *(_QWORD *)v31 = v30;
    v33 = (uint64_t)(v31 + 8);
    goto LABEL_49;
  }
  v34 = *v5;
  v35 = v31 - *v5;
  v36 = v35 >> 3;
  v37 = (v35 >> 3) + 1;
  if (v37 >> 61)
    goto LABEL_1698;
  v38 = v32 - (_QWORD)v34;
  if (v38 >> 2 > v37)
    v37 = v38 >> 2;
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
    v39 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v39 = v37;
  if (v39)
  {
    if (v39 >> 61)
      goto LABEL_1699;
    v40 = operator new(8 * v39);
    v41 = &v40[8 * v36];
    v42 = &v40[8 * v39];
    *v41 = v30;
    v33 = (uint64_t)(v41 + 1);
    v43 = (char *)(v31 - v34);
    if (v31 == v34)
      goto LABEL_47;
    goto LABEL_40;
  }
  v40 = 0;
  v41 = (_QWORD *)(8 * v36);
  v42 = 0;
  *(_QWORD *)(8 * v36) = v30;
  v33 = 8 * v36 + 8;
  v43 = (char *)(v31 - v34);
  if (v31 != v34)
  {
LABEL_40:
    v44 = (unint64_t)(v43 - 8);
    if (v44 < 0x58)
      goto LABEL_1705;
    if ((unint64_t)(v31 - v40 - v35) < 0x20)
      goto LABEL_1705;
    v45 = (v44 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v31[-v46];
    v41 = (_QWORD *)((char *)v41 - v46);
    v48 = &v40[8 * v36 - 16];
    v49 = v31 - 16;
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *(_OWORD *)v49;
      *(v48 - 1) = *((_OWORD *)v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 32;
      v50 -= 4;
    }
    while (v50);
    v31 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1705:
      do
      {
        v52 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v41 = v52;
      }
      while (v31 != v34);
    }
    v31 = *v5;
  }
LABEL_47:
  *(_QWORD *)(a1 + 2624) = v41;
  *(_QWORD *)(a1 + 2632) = v33;
  *(_QWORD *)(a1 + 2640) = v42;
  if (v31)
    operator delete(v31);
LABEL_49:
  *(_QWORD *)(a1 + 2632) = v33;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1656) = v55;
  v56 = *(char **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 < v57)
  {
    *(_QWORD *)v56 = v55;
    v58 = (uint64_t)(v56 + 8);
    goto LABEL_73;
  }
  v59 = *v5;
  v60 = v56 - *v5;
  v61 = v60 >> 3;
  v62 = (v60 >> 3) + 1;
  if (v62 >> 61)
    goto LABEL_1698;
  v63 = v57 - (_QWORD)v59;
  if (v63 >> 2 > v62)
    v62 = v63 >> 2;
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v62;
  if (v64)
  {
    if (v64 >> 61)
      goto LABEL_1699;
    v65 = operator new(8 * v64);
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *v66 = v55;
    v58 = (uint64_t)(v66 + 1);
    v68 = (char *)(v56 - v59);
    if (v56 == v59)
      goto LABEL_71;
    goto LABEL_64;
  }
  v65 = 0;
  v66 = (_QWORD *)(8 * v61);
  v67 = 0;
  *(_QWORD *)(8 * v61) = v55;
  v58 = 8 * v61 + 8;
  v68 = (char *)(v56 - v59);
  if (v56 != v59)
  {
LABEL_64:
    v69 = (unint64_t)(v68 - 8);
    if (v69 < 0x58)
      goto LABEL_1706;
    if ((unint64_t)(v56 - v65 - v60) < 0x20)
      goto LABEL_1706;
    v70 = (v69 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v56[-v71];
    v66 = (_QWORD *)((char *)v66 - v71);
    v73 = &v65[8 * v61 - 16];
    v74 = v56 - 16;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 32;
      v75 -= 4;
    }
    while (v75);
    v56 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1706:
      do
      {
        v77 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v66 = v77;
      }
      while (v56 != v59);
    }
    v56 = *v5;
  }
LABEL_71:
  *(_QWORD *)(a1 + 2624) = v66;
  *(_QWORD *)(a1 + 2632) = v58;
  *(_QWORD *)(a1 + 2640) = v67;
  if (v56)
    operator delete(v56);
LABEL_73:
  *(_QWORD *)(a1 + 2632) = v58;
  v78 = *(unsigned int *)(a1 + 52);
  v79 = (void *)operator new[]();
  v80 = v79;
  if ((int)v78 >= 1)
    bzero(v79, 4 * v78);
  *(_QWORD *)(a1 + 1664) = v80;
  v81 = *(char **)(a1 + 2632);
  v82 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v81 < v82)
  {
    *(_QWORD *)v81 = v80;
    v83 = (uint64_t)(v81 + 8);
    goto LABEL_97;
  }
  v84 = *v5;
  v85 = v81 - *v5;
  v86 = v85 >> 3;
  v87 = (v85 >> 3) + 1;
  if (v87 >> 61)
    goto LABEL_1698;
  v88 = v82 - (_QWORD)v84;
  if (v88 >> 2 > v87)
    v87 = v88 >> 2;
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
  {
    if (v89 >> 61)
      goto LABEL_1699;
    v90 = operator new(8 * v89);
    v91 = &v90[8 * v86];
    v92 = &v90[8 * v89];
    *v91 = v80;
    v83 = (uint64_t)(v91 + 1);
    v93 = (char *)(v81 - v84);
    if (v81 == v84)
      goto LABEL_95;
    goto LABEL_88;
  }
  v90 = 0;
  v91 = (_QWORD *)(8 * v86);
  v92 = 0;
  *(_QWORD *)(8 * v86) = v80;
  v83 = 8 * v86 + 8;
  v93 = (char *)(v81 - v84);
  if (v81 != v84)
  {
LABEL_88:
    v94 = (unint64_t)(v93 - 8);
    if (v94 < 0x58)
      goto LABEL_1707;
    if ((unint64_t)(v81 - v90 - v85) < 0x20)
      goto LABEL_1707;
    v95 = (v94 >> 3) + 1;
    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
    v97 = &v81[-v96];
    v91 = (_QWORD *)((char *)v91 - v96);
    v98 = &v90[8 * v86 - 16];
    v99 = v81 - 16;
    v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *(_OWORD *)v99;
      *(v98 - 1) = *((_OWORD *)v99 - 1);
      *v98 = v101;
      v98 -= 2;
      v99 -= 32;
      v100 -= 4;
    }
    while (v100);
    v81 = v97;
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1707:
      do
      {
        v102 = *((_QWORD *)v81 - 1);
        v81 -= 8;
        *--v91 = v102;
      }
      while (v81 != v84);
    }
    v81 = *v5;
  }
LABEL_95:
  *(_QWORD *)(a1 + 2624) = v91;
  *(_QWORD *)(a1 + 2632) = v83;
  *(_QWORD *)(a1 + 2640) = v92;
  if (v81)
    operator delete(v81);
LABEL_97:
  *(_QWORD *)(a1 + 2632) = v83;
  v103 = *(unsigned int *)(a1 + 52);
  v104 = (void *)operator new[]();
  v105 = v104;
  if ((int)v103 >= 1)
    bzero(v104, 4 * v103);
  *(_QWORD *)(a1 + 1672) = v105;
  v106 = *(char **)(a1 + 2632);
  v107 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v106 < v107)
  {
    *(_QWORD *)v106 = v105;
    v108 = (uint64_t)(v106 + 8);
    goto LABEL_121;
  }
  v109 = *v5;
  v110 = v106 - *v5;
  v111 = v110 >> 3;
  v112 = (v110 >> 3) + 1;
  if (v112 >> 61)
    goto LABEL_1698;
  v113 = v107 - (_QWORD)v109;
  if (v113 >> 2 > v112)
    v112 = v113 >> 2;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
    v114 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v114 = v112;
  if (v114)
  {
    if (v114 >> 61)
      goto LABEL_1699;
    v115 = operator new(8 * v114);
    v116 = &v115[8 * v111];
    v117 = &v115[8 * v114];
    *v116 = v105;
    v108 = (uint64_t)(v116 + 1);
    v118 = (char *)(v106 - v109);
    if (v106 == v109)
      goto LABEL_119;
    goto LABEL_112;
  }
  v115 = 0;
  v116 = (_QWORD *)(8 * v111);
  v117 = 0;
  *(_QWORD *)(8 * v111) = v105;
  v108 = 8 * v111 + 8;
  v118 = (char *)(v106 - v109);
  if (v106 != v109)
  {
LABEL_112:
    v119 = (unint64_t)(v118 - 8);
    if (v119 < 0x58)
      goto LABEL_1708;
    if ((unint64_t)(v106 - v115 - v110) < 0x20)
      goto LABEL_1708;
    v120 = (v119 >> 3) + 1;
    v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
    v122 = &v106[-v121];
    v116 = (_QWORD *)((char *)v116 - v121);
    v123 = &v115[8 * v111 - 16];
    v124 = v106 - 16;
    v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v126 = *(_OWORD *)v124;
      *(v123 - 1) = *((_OWORD *)v124 - 1);
      *v123 = v126;
      v123 -= 2;
      v124 -= 32;
      v125 -= 4;
    }
    while (v125);
    v106 = v122;
    if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1708:
      do
      {
        v127 = *((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v116 = v127;
      }
      while (v106 != v109);
    }
    v106 = *v5;
  }
LABEL_119:
  *(_QWORD *)(a1 + 2624) = v116;
  *(_QWORD *)(a1 + 2632) = v108;
  *(_QWORD *)(a1 + 2640) = v117;
  if (v106)
    operator delete(v106);
LABEL_121:
  *(_QWORD *)(a1 + 2632) = v108;
  v128 = *(unsigned int *)(a1 + 52);
  v129 = (void *)operator new[]();
  v130 = v129;
  if ((int)v128 >= 1)
    bzero(v129, 4 * v128);
  *(_QWORD *)(a1 + 1680) = v130;
  v131 = *(char **)(a1 + 2632);
  v132 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v131 < v132)
  {
    *(_QWORD *)v131 = v130;
    v133 = (uint64_t)(v131 + 8);
    goto LABEL_145;
  }
  v134 = *v5;
  v135 = v131 - *v5;
  v136 = v135 >> 3;
  v137 = (v135 >> 3) + 1;
  if (v137 >> 61)
    goto LABEL_1698;
  v138 = v132 - (_QWORD)v134;
  if (v138 >> 2 > v137)
    v137 = v138 >> 2;
  if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
    v139 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v139 = v137;
  if (v139)
  {
    if (v139 >> 61)
      goto LABEL_1699;
    v140 = operator new(8 * v139);
    v141 = &v140[8 * v136];
    v142 = &v140[8 * v139];
    *v141 = v130;
    v133 = (uint64_t)(v141 + 1);
    v143 = (char *)(v131 - v134);
    if (v131 == v134)
      goto LABEL_143;
    goto LABEL_136;
  }
  v140 = 0;
  v141 = (_QWORD *)(8 * v136);
  v142 = 0;
  *(_QWORD *)(8 * v136) = v130;
  v133 = 8 * v136 + 8;
  v143 = (char *)(v131 - v134);
  if (v131 != v134)
  {
LABEL_136:
    v144 = (unint64_t)(v143 - 8);
    if (v144 < 0x58)
      goto LABEL_1709;
    if ((unint64_t)(v131 - v140 - v135) < 0x20)
      goto LABEL_1709;
    v145 = (v144 >> 3) + 1;
    v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
    v147 = &v131[-v146];
    v141 = (_QWORD *)((char *)v141 - v146);
    v148 = &v140[8 * v136 - 16];
    v149 = v131 - 16;
    v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v151 = *(_OWORD *)v149;
      *(v148 - 1) = *((_OWORD *)v149 - 1);
      *v148 = v151;
      v148 -= 2;
      v149 -= 32;
      v150 -= 4;
    }
    while (v150);
    v131 = v147;
    if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1709:
      do
      {
        v152 = *((_QWORD *)v131 - 1);
        v131 -= 8;
        *--v141 = v152;
      }
      while (v131 != v134);
    }
    v131 = *v5;
  }
LABEL_143:
  *(_QWORD *)(a1 + 2624) = v141;
  *(_QWORD *)(a1 + 2632) = v133;
  *(_QWORD *)(a1 + 2640) = v142;
  if (v131)
    operator delete(v131);
LABEL_145:
  *(_QWORD *)(a1 + 2632) = v133;
  v153 = *(unsigned int *)(a1 + 52);
  v154 = (void *)operator new[]();
  v155 = v154;
  if ((int)v153 >= 1)
    bzero(v154, 4 * v153);
  *(_QWORD *)(a1 + 1688) = v155;
  v156 = *(char **)(a1 + 2632);
  v157 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v156 < v157)
  {
    *(_QWORD *)v156 = v155;
    v158 = (uint64_t)(v156 + 8);
    goto LABEL_169;
  }
  v159 = *v5;
  v160 = v156 - *v5;
  v161 = v160 >> 3;
  v162 = (v160 >> 3) + 1;
  if (v162 >> 61)
    goto LABEL_1698;
  v163 = v157 - (_QWORD)v159;
  if (v163 >> 2 > v162)
    v162 = v163 >> 2;
  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
    v164 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v164 = v162;
  if (v164)
  {
    if (v164 >> 61)
      goto LABEL_1699;
    v165 = operator new(8 * v164);
    v166 = &v165[8 * v161];
    v167 = &v165[8 * v164];
    *v166 = v155;
    v158 = (uint64_t)(v166 + 1);
    v168 = (char *)(v156 - v159);
    if (v156 == v159)
      goto LABEL_167;
    goto LABEL_160;
  }
  v165 = 0;
  v166 = (_QWORD *)(8 * v161);
  v167 = 0;
  *(_QWORD *)(8 * v161) = v155;
  v158 = 8 * v161 + 8;
  v168 = (char *)(v156 - v159);
  if (v156 != v159)
  {
LABEL_160:
    v169 = (unint64_t)(v168 - 8);
    if (v169 < 0x58)
      goto LABEL_1710;
    if ((unint64_t)(v156 - v165 - v160) < 0x20)
      goto LABEL_1710;
    v170 = (v169 >> 3) + 1;
    v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
    v172 = &v156[-v171];
    v166 = (_QWORD *)((char *)v166 - v171);
    v173 = &v165[8 * v161 - 16];
    v174 = v156 - 16;
    v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v176 = *(_OWORD *)v174;
      *(v173 - 1) = *((_OWORD *)v174 - 1);
      *v173 = v176;
      v173 -= 2;
      v174 -= 32;
      v175 -= 4;
    }
    while (v175);
    v156 = v172;
    if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1710:
      do
      {
        v177 = *((_QWORD *)v156 - 1);
        v156 -= 8;
        *--v166 = v177;
      }
      while (v156 != v159);
    }
    v156 = *v5;
  }
LABEL_167:
  *(_QWORD *)(a1 + 2624) = v166;
  *(_QWORD *)(a1 + 2632) = v158;
  *(_QWORD *)(a1 + 2640) = v167;
  if (v156)
    operator delete(v156);
LABEL_169:
  *(_QWORD *)(a1 + 2632) = v158;
  v178 = *(_QWORD *)(a1 + 2680);
  if (v178)
  {
    v179 = *(_DWORD *)(v178 + 40) / 2;
    v180 = 4 * *(unsigned __int8 *)(v178 + 244);
    if (*(_BYTE *)(v178 + 384))
      v181 = 3;
    else
      v181 = 0;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
    {
LABEL_174:
      if (*(_BYTE *)(a1 + 2672))
        v183 = v179;
      else
        v183 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v184 = v180;
      else
        v184 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v185 = v181;
      else
        v185 = 0;
      if (*(int *)(a1 + 56) >= 1)
        goto LABEL_184;
      goto LABEL_187;
    }
  }
  else
  {
    v180 = 0;
    v181 = 0;
    v179 = 8;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
      goto LABEL_174;
  }
  v184 = 0;
  v183 = 0;
  v185 = 0;
  if (*(int *)(a1 + 56) >= 1)
  {
LABEL_184:
    v186 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v182 = *(unsigned __int8 *)(a1 + 42);
    goto LABEL_188;
  }
LABEL_187:
  v186 = 0;
LABEL_188:
  v187 = v182 == 0;
  v188 = v182 != 0;
  if (v187)
    v189 = dword_1EE418968;
  else
    v189 = 2;
  if ((v188 & v186) != 0)
    v190 = 2;
  else
    v190 = dword_1EE418968;
  v1635 = v189;
  v1636 = v190;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v191 = *(_QWORD *)(a1 + 2680);
    if (v191 && *(int *)(v191 + 40) >= 1)
    {
      v192 = (_QWORD *)(v191 + 8 * v183);
      *(_QWORD *)(a1 + 232) = v192[14];
      *(_QWORD *)(a1 + 240) = v192[15];
      *(_QWORD *)(a1 + 256) = v192[16];
      *(_QWORD *)(a1 + 248) = v192[17];
      *(_QWORD *)(a1 + 264) = v192[18];
      *(_QWORD *)(a1 + 272) = v192[19];
      *(_QWORD *)(a1 + 288) = v192[20];
      *(_QWORD *)(a1 + 280) = v192[21];
      if (*(_BYTE *)(a1 + 1697))
        goto LABEL_548;
      goto LABEL_201;
    }
    if (*(_BYTE *)(a1 + 1697))
      goto LABEL_548;
    v195 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
    *(_QWORD *)&v1637[0] = operator new[]();
    bzero(*(void **)&v1637[0], v195);
    sub_19C1023F0(v1637, v195, 0.1);
    v196 = *(_QWORD *)&v1637[0];
    *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1637[0];
    v197 = (char **)(a1 + 2648);
    v198 = *(char **)(a1 + 2656);
    v199 = *(_QWORD *)(a1 + 2664);
    if ((unint64_t)v198 < v199)
    {
      *(_QWORD *)v198 = v196;
      v200 = (uint64_t)(v198 + 8);
      goto LABEL_307;
    }
    v207 = *v197;
    v208 = v198 - *v197;
    v209 = v208 >> 3;
    v210 = (v208 >> 3) + 1;
    if (v210 >> 61)
      goto LABEL_1700;
    v211 = v199 - (_QWORD)v207;
    if (v211 >> 2 > v210)
      v210 = v211 >> 2;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
      v212 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v212 = v210;
    if (v212)
    {
      if (v212 >> 61)
        goto LABEL_1699;
      v213 = operator new(8 * v212);
      v214 = &v213[8 * v209];
      v215 = &v213[8 * v212];
      *v214 = v196;
      v200 = (uint64_t)(v214 + 1);
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
      {
LABEL_217:
        v217 = (unint64_t)(v216 - 8);
        if (v217 >= 0x58)
        {
          v296 = v198 - &v213[v208];
          v197 = (char **)(a1 + 2648);
          if (v296 >= 0x20)
          {
            v297 = (v217 >> 3) + 1;
            v298 = 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
            v299 = &v198[-v298];
            v214 = (_QWORD *)((char *)v214 - v298);
            v300 = &v213[8 * v209 - 16];
            v301 = v198 - 16;
            v302 = v297 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v303 = *(_OWORD *)v301;
              *(v300 - 1) = *((_OWORD *)v301 - 1);
              *v300 = v303;
              v300 -= 2;
              v301 -= 32;
              v302 -= 4;
            }
            while (v302);
            v198 = v299;
            if (v297 == (v297 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_304;
          }
        }
        else
        {
          v197 = (char **)(a1 + 2648);
        }
        do
        {
          v304 = *((_QWORD *)v198 - 1);
          v198 -= 8;
          *--v214 = v304;
        }
        while (v198 != v207);
LABEL_304:
        v198 = *v197;
LABEL_305:
        *(_QWORD *)(a1 + 2648) = v214;
        *(_QWORD *)(a1 + 2656) = v200;
        *(_QWORD *)(a1 + 2664) = v215;
        if (v198)
          operator delete(v198);
LABEL_307:
        *(_QWORD *)(a1 + 2656) = v200;
        v305 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
        *(_QWORD *)&v1637[0] = operator new[]();
        bzero(*(void **)&v1637[0], v305);
        sub_19C1023F0(v1637, v305, 0.1);
        v306 = *(_QWORD *)&v1637[0];
        *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1637[0];
        v307 = *(char **)(a1 + 2656);
        v308 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v307 < v308)
        {
          *(_QWORD *)v307 = v306;
          v309 = (uint64_t)(v307 + 8);
          goto LABEL_330;
        }
        v310 = *v197;
        v311 = v307 - *v197;
        v312 = v311 >> 3;
        v313 = (v311 >> 3) + 1;
        if (v313 >> 61)
          goto LABEL_1700;
        v314 = v308 - (_QWORD)v310;
        if (v314 >> 2 > v313)
          v313 = v314 >> 2;
        if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFF8)
          v315 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v315 = v313;
        if (v315)
        {
          if (v315 >> 61)
            goto LABEL_1699;
          v316 = operator new(8 * v315);
          v317 = &v316[8 * v312];
          v318 = &v316[8 * v315];
          *v317 = v306;
          v309 = (uint64_t)(v317 + 1);
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
          {
LABEL_318:
            v320 = (unint64_t)(v319 - 8);
            if (v320 >= 0x58)
            {
              v321 = v307 - v316 - v311;
              v197 = (char **)(a1 + 2648);
              if (v321 >= 0x20)
              {
                v322 = (v320 >> 3) + 1;
                v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
                v324 = &v307[-v323];
                v317 = (_QWORD *)((char *)v317 - v323);
                v325 = &v316[8 * v312 - 16];
                v326 = v307 - 16;
                v327 = v322 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v328 = *(_OWORD *)v326;
                  *(v325 - 1) = *((_OWORD *)v326 - 1);
                  *v325 = v328;
                  v325 -= 2;
                  v326 -= 32;
                  v327 -= 4;
                }
                while (v327);
                v307 = v324;
                if (v322 == (v322 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_327;
              }
            }
            else
            {
              v197 = (char **)(a1 + 2648);
            }
            do
            {
              v329 = *((_QWORD *)v307 - 1);
              v307 -= 8;
              *--v317 = v329;
            }
            while (v307 != v310);
LABEL_327:
            v307 = *v197;
LABEL_328:
            *(_QWORD *)(a1 + 2648) = v317;
            *(_QWORD *)(a1 + 2656) = v309;
            *(_QWORD *)(a1 + 2664) = v318;
            if (v307)
              operator delete(v307);
LABEL_330:
            *(_QWORD *)(a1 + 2656) = v309;
            v330 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
            *(_QWORD *)&v1637[0] = operator new[]();
            bzero(*(void **)&v1637[0], v330);
            sub_19C1023F0(v1637, v330, 0.1);
            v331 = *(_QWORD *)&v1637[0];
            *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1637[0];
            v332 = *(char **)(a1 + 2656);
            v333 = *(_QWORD *)(a1 + 2664);
            if ((unint64_t)v332 < v333)
            {
              *(_QWORD *)v332 = v331;
              v334 = (uint64_t)(v332 + 8);
              goto LABEL_353;
            }
            v335 = *v197;
            v336 = v332 - *v197;
            v337 = v336 >> 3;
            v338 = (v336 >> 3) + 1;
            if (v338 >> 61)
              goto LABEL_1700;
            v339 = v333 - (_QWORD)v335;
            if (v339 >> 2 > v338)
              v338 = v339 >> 2;
            if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
              v340 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v340 = v338;
            if (v340)
            {
              if (v340 >> 61)
                goto LABEL_1699;
              v341 = operator new(8 * v340);
              v342 = &v341[8 * v337];
              v343 = &v341[8 * v340];
              *v342 = v331;
              v334 = (uint64_t)(v342 + 1);
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
              {
LABEL_341:
                v345 = (unint64_t)(v344 - 8);
                if (v345 >= 0x58)
                {
                  v346 = v332 - v341 - v336;
                  v197 = (char **)(a1 + 2648);
                  if (v346 >= 0x20)
                  {
                    v347 = (v345 >> 3) + 1;
                    v348 = 8 * (v347 & 0x3FFFFFFFFFFFFFFCLL);
                    v349 = &v332[-v348];
                    v342 = (_QWORD *)((char *)v342 - v348);
                    v350 = &v341[8 * v337 - 16];
                    v351 = v332 - 16;
                    v352 = v347 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v353 = *(_OWORD *)v351;
                      *(v350 - 1) = *((_OWORD *)v351 - 1);
                      *v350 = v353;
                      v350 -= 2;
                      v351 -= 32;
                      v352 -= 4;
                    }
                    while (v352);
                    v332 = v349;
                    if (v347 == (v347 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_350;
                  }
                }
                else
                {
                  v197 = (char **)(a1 + 2648);
                }
                do
                {
                  v354 = *((_QWORD *)v332 - 1);
                  v332 -= 8;
                  *--v342 = v354;
                }
                while (v332 != v335);
LABEL_350:
                v332 = *v197;
LABEL_351:
                *(_QWORD *)(a1 + 2648) = v342;
                *(_QWORD *)(a1 + 2656) = v334;
                *(_QWORD *)(a1 + 2664) = v343;
                if (v332)
                  operator delete(v332);
LABEL_353:
                *(_QWORD *)(a1 + 2656) = v334;
                v355 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
                *(_QWORD *)&v1637[0] = operator new[]();
                bzero(*(void **)&v1637[0], v355);
                sub_19C1023F0(v1637, v355, 0.1);
                v356 = *(_QWORD *)&v1637[0];
                *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1637[0];
                v357 = *(char **)(a1 + 2656);
                v358 = *(_QWORD *)(a1 + 2664);
                if ((unint64_t)v357 < v358)
                {
                  *(_QWORD *)v357 = v356;
                  v359 = (uint64_t)(v357 + 8);
                  goto LABEL_376;
                }
                v360 = *v197;
                v361 = v357 - *v197;
                v362 = v361 >> 3;
                v363 = (v361 >> 3) + 1;
                if (v363 >> 61)
                  goto LABEL_1700;
                v364 = v358 - (_QWORD)v360;
                if (v364 >> 2 > v363)
                  v363 = v364 >> 2;
                if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
                  v365 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v365 = v363;
                if (v365)
                {
                  if (v365 >> 61)
                    goto LABEL_1699;
                  v366 = operator new(8 * v365);
                  v367 = &v366[8 * v362];
                  v368 = &v366[8 * v365];
                  *v367 = v356;
                  v359 = (uint64_t)(v367 + 1);
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                  {
LABEL_364:
                    v370 = (unint64_t)(v369 - 8);
                    if (v370 >= 0x58)
                    {
                      v371 = v357 - v366 - v361;
                      v197 = (char **)(a1 + 2648);
                      if (v371 >= 0x20)
                      {
                        v372 = (v370 >> 3) + 1;
                        v373 = 8 * (v372 & 0x3FFFFFFFFFFFFFFCLL);
                        v374 = &v357[-v373];
                        v367 = (_QWORD *)((char *)v367 - v373);
                        v375 = &v366[8 * v362 - 16];
                        v376 = v357 - 16;
                        v377 = v372 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v378 = *(_OWORD *)v376;
                          *(v375 - 1) = *((_OWORD *)v376 - 1);
                          *v375 = v378;
                          v375 -= 2;
                          v376 -= 32;
                          v377 -= 4;
                        }
                        while (v377);
                        v357 = v374;
                        if (v372 == (v372 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_373;
                      }
                    }
                    else
                    {
                      v197 = (char **)(a1 + 2648);
                    }
                    do
                    {
                      v379 = *((_QWORD *)v357 - 1);
                      v357 -= 8;
                      *--v367 = v379;
                    }
                    while (v357 != v360);
LABEL_373:
                    v357 = *v197;
LABEL_374:
                    *(_QWORD *)(a1 + 2648) = v367;
                    *(_QWORD *)(a1 + 2656) = v359;
                    *(_QWORD *)(a1 + 2664) = v368;
                    if (v357)
                      operator delete(v357);
LABEL_376:
                    *(_QWORD *)(a1 + 2656) = v359;
                    v380 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
                    *(_QWORD *)&v1637[0] = operator new[]();
                    bzero(*(void **)&v1637[0], v380);
                    sub_19C1023F0(v1637, v380, 0.1);
                    v381 = *(_QWORD *)&v1637[0];
                    *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1637[0];
                    v382 = *(char **)(a1 + 2656);
                    v383 = *(_QWORD *)(a1 + 2664);
                    if ((unint64_t)v382 < v383)
                    {
                      *(_QWORD *)v382 = v381;
                      v384 = (uint64_t)(v382 + 8);
                      goto LABEL_399;
                    }
                    v385 = *v197;
                    v386 = v382 - *v197;
                    v387 = v386 >> 3;
                    v388 = (v386 >> 3) + 1;
                    if (v388 >> 61)
                      goto LABEL_1700;
                    v389 = v383 - (_QWORD)v385;
                    if (v389 >> 2 > v388)
                      v388 = v389 >> 2;
                    if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                      v390 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v390 = v388;
                    if (v390)
                    {
                      if (v390 >> 61)
                        goto LABEL_1699;
                      v391 = operator new(8 * v390);
                      v392 = &v391[8 * v387];
                      v393 = &v391[8 * v390];
                      *v392 = v381;
                      v384 = (uint64_t)(v392 + 1);
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                      {
LABEL_387:
                        v395 = (unint64_t)(v394 - 8);
                        if (v395 >= 0x58)
                        {
                          v396 = v382 - &v391[v386];
                          v197 = (char **)(a1 + 2648);
                          if (v396 >= 0x20)
                          {
                            v397 = (v395 >> 3) + 1;
                            v398 = 8 * (v397 & 0x3FFFFFFFFFFFFFFCLL);
                            v399 = &v382[-v398];
                            v392 = (_QWORD *)((char *)v392 - v398);
                            v400 = &v391[8 * v387 - 16];
                            v401 = v382 - 16;
                            v402 = v397 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v403 = *(_OWORD *)v401;
                              *(v400 - 1) = *((_OWORD *)v401 - 1);
                              *v400 = v403;
                              v400 -= 2;
                              v401 -= 32;
                              v402 -= 4;
                            }
                            while (v402);
                            v382 = v399;
                            if (v397 == (v397 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_396;
                          }
                        }
                        else
                        {
                          v197 = (char **)(a1 + 2648);
                        }
                        do
                        {
                          v404 = *((_QWORD *)v382 - 1);
                          v382 -= 8;
                          *--v392 = v404;
                        }
                        while (v382 != v385);
LABEL_396:
                        v382 = *v197;
LABEL_397:
                        *(_QWORD *)(a1 + 2648) = v392;
                        *(_QWORD *)(a1 + 2656) = v384;
                        *(_QWORD *)(a1 + 2664) = v393;
                        if (v382)
                          operator delete(v382);
LABEL_399:
                        *(_QWORD *)(a1 + 2656) = v384;
                        v405 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
                        *(_QWORD *)&v1637[0] = operator new[]();
                        bzero(*(void **)&v1637[0], v405);
                        sub_19C1023F0(v1637, v405, 0.1);
                        v406 = *(_QWORD *)&v1637[0];
                        *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1637[0];
                        v407 = *(char **)(a1 + 2656);
                        v408 = *(_QWORD *)(a1 + 2664);
                        if ((unint64_t)v407 < v408)
                        {
                          *(_QWORD *)v407 = v406;
                          v409 = (uint64_t)(v407 + 8);
                          goto LABEL_422;
                        }
                        v410 = *v197;
                        v411 = v407 - *v197;
                        v412 = v411 >> 3;
                        v413 = (v411 >> 3) + 1;
                        if (v413 >> 61)
                          goto LABEL_1700;
                        v414 = v408 - (_QWORD)v410;
                        if (v414 >> 2 > v413)
                          v413 = v414 >> 2;
                        if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8)
                          v415 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v415 = v413;
                        if (v415)
                        {
                          if (v415 >> 61)
                            goto LABEL_1699;
                          v416 = operator new(8 * v415);
                          v417 = &v416[8 * v412];
                          v418 = &v416[8 * v415];
                          *v417 = v406;
                          v409 = (uint64_t)(v417 + 1);
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                          {
LABEL_410:
                            v420 = (unint64_t)(v419 - 8);
                            if (v420 >= 0x58)
                            {
                              v421 = v407 - &v416[v411];
                              v197 = (char **)(a1 + 2648);
                              if (v421 >= 0x20)
                              {
                                v422 = (v420 >> 3) + 1;
                                v423 = 8 * (v422 & 0x3FFFFFFFFFFFFFFCLL);
                                v424 = &v407[-v423];
                                v417 = (_QWORD *)((char *)v417 - v423);
                                v425 = &v416[8 * v412 - 16];
                                v426 = v407 - 16;
                                v427 = v422 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v428 = *(_OWORD *)v426;
                                  *(v425 - 1) = *((_OWORD *)v426 - 1);
                                  *v425 = v428;
                                  v425 -= 2;
                                  v426 -= 32;
                                  v427 -= 4;
                                }
                                while (v427);
                                v407 = v424;
                                if (v422 == (v422 & 0x3FFFFFFFFFFFFFFCLL))
                                  goto LABEL_419;
                              }
                            }
                            else
                            {
                              v197 = (char **)(a1 + 2648);
                            }
                            do
                            {
                              v429 = *((_QWORD *)v407 - 1);
                              v407 -= 8;
                              *--v417 = v429;
                            }
                            while (v407 != v410);
LABEL_419:
                            v407 = *v197;
LABEL_420:
                            *(_QWORD *)(a1 + 2648) = v417;
                            *(_QWORD *)(a1 + 2656) = v409;
                            *(_QWORD *)(a1 + 2664) = v418;
                            if (v407)
                              operator delete(v407);
LABEL_422:
                            *(_QWORD *)(a1 + 2656) = v409;
                            v430 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
                            *(_QWORD *)&v1637[0] = operator new[]();
                            bzero(*(void **)&v1637[0], v430);
                            sub_19C1023F0(v1637, v430, 0.1);
                            v431 = *(_QWORD *)&v1637[0];
                            *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1637[0];
                            v432 = *(char **)(a1 + 2656);
                            v433 = *(_QWORD *)(a1 + 2664);
                            if ((unint64_t)v432 < v433)
                            {
                              *(_QWORD *)v432 = v431;
                              v434 = (uint64_t)(v432 + 8);
                              goto LABEL_445;
                            }
                            v435 = *v197;
                            v436 = v432 - *v197;
                            v437 = v436 >> 3;
                            v438 = (v436 >> 3) + 1;
                            if (v438 >> 61)
                              goto LABEL_1700;
                            v439 = v433 - (_QWORD)v435;
                            if (v439 >> 2 > v438)
                              v438 = v439 >> 2;
                            if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF8)
                              v440 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v440 = v438;
                            if (v440)
                            {
                              if (v440 >> 61)
                                goto LABEL_1699;
                              v441 = operator new(8 * v440);
                              v442 = &v441[8 * v437];
                              v443 = &v441[8 * v440];
                              *v442 = v431;
                              v434 = (uint64_t)(v442 + 1);
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                              {
LABEL_433:
                                v445 = (unint64_t)(v444 - 8);
                                if (v445 >= 0x58)
                                {
                                  v446 = v432 - &v441[v436];
                                  v197 = (char **)(a1 + 2648);
                                  if (v446 >= 0x20)
                                  {
                                    v447 = (v445 >> 3) + 1;
                                    v448 = 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
                                    v449 = &v432[-v448];
                                    v442 = (_QWORD *)((char *)v442 - v448);
                                    v450 = &v441[8 * v437 - 16];
                                    v451 = v432 - 16;
                                    v452 = v447 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v453 = *(_OWORD *)v451;
                                      *(v450 - 1) = *((_OWORD *)v451 - 1);
                                      *v450 = v453;
                                      v450 -= 2;
                                      v451 -= 32;
                                      v452 -= 4;
                                    }
                                    while (v452);
                                    v432 = v449;
                                    if (v447 == (v447 & 0x3FFFFFFFFFFFFFFCLL))
                                      goto LABEL_442;
                                  }
                                }
                                else
                                {
                                  v197 = (char **)(a1 + 2648);
                                }
                                do
                                {
                                  v454 = *((_QWORD *)v432 - 1);
                                  v432 -= 8;
                                  *--v442 = v454;
                                }
                                while (v432 != v435);
LABEL_442:
                                v432 = *v197;
LABEL_443:
                                *(_QWORD *)(a1 + 2648) = v442;
                                *(_QWORD *)(a1 + 2656) = v434;
                                *(_QWORD *)(a1 + 2664) = v443;
                                if (v432)
                                  operator delete(v432);
LABEL_445:
                                *(_QWORD *)(a1 + 2656) = v434;
                                v455 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
                                *(_QWORD *)&v1637[0] = operator new[]();
                                bzero(*(void **)&v1637[0], v455);
                                sub_19C1023F0(v1637, v455, 0.1);
                                v456 = *(_QWORD *)&v1637[0];
                                *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1637[0];
                                v457 = *(char **)(a1 + 2656);
                                v458 = *(_QWORD *)(a1 + 2664);
                                if ((unint64_t)v457 < v458)
                                {
                                  *(_QWORD *)v457 = v456;
                                  v459 = v457 + 8;
                                  goto LABEL_468;
                                }
                                v460 = *v197;
                                v461 = v457 - *v197;
                                v462 = v461 >> 3;
                                v463 = (v461 >> 3) + 1;
                                if (!(v463 >> 61))
                                {
                                  v464 = v458 - (_QWORD)v460;
                                  if (v464 >> 2 > v463)
                                    v463 = v464 >> 2;
                                  if ((unint64_t)v464 >= 0x7FFFFFFFFFFFFFF8)
                                    v465 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v465 = v463;
                                  if (v465)
                                  {
                                    if (v465 >> 61)
                                      goto LABEL_1699;
                                    v466 = operator new(8 * v465);
                                  }
                                  else
                                  {
                                    v466 = 0;
                                  }
                                  v467 = &v466[8 * v462];
                                  v468 = &v466[8 * v465];
                                  *v467 = v456;
                                  v459 = v467 + 1;
                                  if (v457 == v460)
                                    goto LABEL_466;
                                  v469 = v457 - v460 - 8;
                                  if (v469 >= 0x58)
                                  {
                                    v470 = (char **)(a1 + 2648);
                                    if ((unint64_t)(v457 - &v466[v461]) >= 0x20)
                                    {
                                      v471 = (v469 >> 3) + 1;
                                      v472 = 8 * (v471 & 0x3FFFFFFFFFFFFFFCLL);
                                      v473 = &v457[-v472];
                                      v467 = (_QWORD *)((char *)v467 - v472);
                                      v474 = &v466[8 * v462 - 16];
                                      v475 = v457 - 16;
                                      v476 = v471 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v477 = *(_OWORD *)v475;
                                        *(v474 - 1) = *((_OWORD *)v475 - 1);
                                        *v474 = v477;
                                        v474 -= 2;
                                        v475 -= 32;
                                        v476 -= 4;
                                      }
                                      while (v476);
                                      v457 = v473;
                                      if (v471 == (v471 & 0x3FFFFFFFFFFFFFFCLL))
                                        goto LABEL_465;
                                    }
                                  }
                                  else
                                  {
                                    v470 = (char **)(a1 + 2648);
                                  }
                                  do
                                  {
                                    v478 = *((_QWORD *)v457 - 1);
                                    v457 -= 8;
                                    *--v467 = v478;
                                  }
                                  while (v457 != v460);
LABEL_465:
                                  v457 = *v470;
LABEL_466:
                                  *(_QWORD *)(a1 + 2648) = v467;
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  *(_QWORD *)(a1 + 2664) = v468;
                                  if (v457)
                                    operator delete(v457);
LABEL_468:
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  if (*(_BYTE *)(a1 + 1697))
                                    goto LABEL_548;
LABEL_201:
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193 && *(_BYTE *)(v193 + 384))
                                  {
                                    v194 = (_QWORD *)(v193 + 8 * v185);
                                    *(_QWORD *)(a1 + 296) = v194[49];
                                    *(_QWORD *)(a1 + 304) = v194[50];
                                    *(_QWORD *)(a1 + 312) = v194[51];
                                    goto LABEL_286;
                                  }
                                  v201 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C1023F0(v1637, v201, 0.1);
                                  v202 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 296) = *(_QWORD *)&v1637[0];
                                  v203 = (char **)(a1 + 2648);
                                  v204 = *(char **)(a1 + 2656);
                                  v205 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v204 >= v205)
                                  {
                                    v218 = *v203;
                                    v219 = v204 - *v203;
                                    v220 = v219 >> 3;
                                    v221 = (v219 >> 3) + 1;
                                    if (v221 >> 61)
                                      goto LABEL_1701;
                                    v222 = v205 - (_QWORD)v218;
                                    if (v222 >> 2 > v221)
                                      v221 = v222 >> 2;
                                    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
                                      v223 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v223 = v221;
                                    if (v223)
                                    {
                                      if (v223 >> 61)
                                        goto LABEL_1699;
                                      v224 = operator new(8 * v223);
                                    }
                                    else
                                    {
                                      v224 = 0;
                                    }
                                    v225 = &v224[8 * v220];
                                    v226 = &v224[8 * v223];
                                    *v225 = v202;
                                    v206 = v225 + 1;
                                    if (v204 != v218)
                                    {
                                      v227 = v204 - v218 - 8;
                                      if (v227 < 0x58)
                                        goto LABEL_1711;
                                      if ((unint64_t)(v204 - v224 - v219) < 0x20)
                                        goto LABEL_1711;
                                      v228 = (v227 >> 3) + 1;
                                      v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                                      v230 = &v204[-v229];
                                      v225 = (_QWORD *)((char *)v225 - v229);
                                      v231 = &v224[8 * v220 - 16];
                                      v232 = v204 - 16;
                                      v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v234 = *(_OWORD *)v232;
                                        *(v231 - 1) = *((_OWORD *)v232 - 1);
                                        *v231 = v234;
                                        v231 -= 2;
                                        v232 -= 32;
                                        v233 -= 4;
                                      }
                                      while (v233);
                                      v204 = v230;
                                      if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1711:
                                        do
                                        {
                                          v235 = *((_QWORD *)v204 - 1);
                                          v204 -= 8;
                                          *--v225 = v235;
                                        }
                                        while (v204 != v218);
                                      }
                                      v204 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v225;
                                    *(_QWORD *)(a1 + 2656) = v206;
                                    *(_QWORD *)(a1 + 2664) = v226;
                                    if (v204)
                                      operator delete(v204);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v204 = v202;
                                    v206 = v204 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v206;
                                  v236 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C1023F0(v1637, v236, 0.1);
                                  v237 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 304) = *(_QWORD *)&v1637[0];
                                  v238 = *(char **)(a1 + 2656);
                                  v239 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v238 >= v239)
                                  {
                                    v241 = *v203;
                                    v242 = v238 - *v203;
                                    v243 = v242 >> 3;
                                    v244 = (v242 >> 3) + 1;
                                    if (v244 >> 61)
                                      goto LABEL_1701;
                                    v245 = v239 - (_QWORD)v241;
                                    if (v245 >> 2 > v244)
                                      v244 = v245 >> 2;
                                    if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                                      v246 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v246 = v244;
                                    if (v246)
                                    {
                                      if (v246 >> 61)
                                        goto LABEL_1699;
                                      v247 = operator new(8 * v246);
                                    }
                                    else
                                    {
                                      v247 = 0;
                                    }
                                    v248 = &v247[8 * v243];
                                    v249 = &v247[8 * v246];
                                    *v248 = v237;
                                    v240 = v248 + 1;
                                    if (v238 != v241)
                                    {
                                      v250 = v238 - v241 - 8;
                                      if (v250 < 0x58)
                                        goto LABEL_1712;
                                      if ((unint64_t)(v238 - v247 - v242) < 0x20)
                                        goto LABEL_1712;
                                      v251 = (v250 >> 3) + 1;
                                      v252 = 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
                                      v253 = &v238[-v252];
                                      v248 = (_QWORD *)((char *)v248 - v252);
                                      v254 = &v247[8 * v243 - 16];
                                      v255 = v238 - 16;
                                      v256 = v251 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v257 = *(_OWORD *)v255;
                                        *(v254 - 1) = *((_OWORD *)v255 - 1);
                                        *v254 = v257;
                                        v254 -= 2;
                                        v255 -= 32;
                                        v256 -= 4;
                                      }
                                      while (v256);
                                      v238 = v253;
                                      if (v251 != (v251 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1712:
                                        do
                                        {
                                          v258 = *((_QWORD *)v238 - 1);
                                          v238 -= 8;
                                          *--v248 = v258;
                                        }
                                        while (v238 != v241);
                                      }
                                      v238 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v248;
                                    *(_QWORD *)(a1 + 2656) = v240;
                                    *(_QWORD *)(a1 + 2664) = v249;
                                    if (v238)
                                      operator delete(v238);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v238 = v237;
                                    v240 = v238 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v240;
                                  v259 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C1023F0(v1637, v259, 0.1);
                                  v260 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 312) = *(_QWORD *)&v1637[0];
                                  v261 = *(char **)(a1 + 2656);
                                  v262 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v261 >= v262)
                                  {
                                    v264 = *v203;
                                    v265 = v261 - *v203;
                                    v266 = v265 >> 3;
                                    v267 = (v265 >> 3) + 1;
                                    if (v267 >> 61)
                                      goto LABEL_1701;
                                    v268 = v262 - (_QWORD)v264;
                                    if (v268 >> 2 > v267)
                                      v267 = v268 >> 2;
                                    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
                                      v269 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v269 = v267;
                                    if (v269)
                                    {
                                      if (v269 >> 61)
                                        goto LABEL_1699;
                                      v270 = operator new(8 * v269);
                                    }
                                    else
                                    {
                                      v270 = 0;
                                    }
                                    v271 = &v270[8 * v266];
                                    v272 = &v270[8 * v269];
                                    *v271 = v260;
                                    v263 = v271 + 1;
                                    if (v261 != v264)
                                    {
                                      v273 = v261 - v264 - 8;
                                      if (v273 < 0x58)
                                        goto LABEL_1713;
                                      if ((unint64_t)(v261 - v270 - v265) < 0x20)
                                        goto LABEL_1713;
                                      v274 = (v273 >> 3) + 1;
                                      v275 = 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
                                      v276 = &v261[-v275];
                                      v271 = (_QWORD *)((char *)v271 - v275);
                                      v277 = &v270[8 * v266 - 16];
                                      v278 = v261 - 16;
                                      v279 = v274 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v280 = *(_OWORD *)v278;
                                        *(v277 - 1) = *((_OWORD *)v278 - 1);
                                        *v277 = v280;
                                        v277 -= 2;
                                        v278 -= 32;
                                        v279 -= 4;
                                      }
                                      while (v279);
                                      v261 = v276;
                                      if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1713:
                                        do
                                        {
                                          v281 = *((_QWORD *)v261 - 1);
                                          v261 -= 8;
                                          *--v271 = v281;
                                        }
                                        while (v261 != v264);
                                      }
                                      v261 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v271;
                                    *(_QWORD *)(a1 + 2656) = v263;
                                    *(_QWORD *)(a1 + 2664) = v272;
                                    if (v261)
                                      operator delete(v261);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v261 = v260;
                                    v263 = v261 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v263;
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193)
                                  {
LABEL_286:
                                    if (*(_BYTE *)(v193 + 244))
                                    {
                                      v282 = (_QWORD *)(v193 + 8 * v184);
                                      *(_QWORD *)(a1 + 320) = v282[31];
                                      *(_QWORD *)(a1 + 328) = v282[32];
                                      *(_QWORD *)(a1 + 336) = v282[33];
                                      *(_QWORD *)(a1 + 344) = v282[34];
                                      goto LABEL_548;
                                    }
                                    v283 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C1023F0(v1637, v283, 0.1);
                                    v284 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 320) = *(_QWORD *)&v1637[0];
                                    v285 = (char **)(a1 + 2648);
                                    v286 = *(char **)(a1 + 2656);
                                    v287 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v286 >= v287)
                                    {
                                      v289 = *v285;
                                      v290 = v286 - *v285;
                                      v291 = v290 >> 3;
                                      v292 = (v290 >> 3) + 1;
                                      if (v292 >> 61)
                                        goto LABEL_1701;
                                      v293 = v287 - (_QWORD)v289;
                                      if (v293 >> 2 > v292)
                                        v292 = v293 >> 2;
                                      if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
                                        v294 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v294 = v292;
                                      if (v294)
                                      {
                                        if (v294 >> 61)
                                          goto LABEL_1699;
                                        v295 = operator new(8 * v294);
                                      }
                                      else
                                      {
                                        v295 = 0;
                                      }
                                      v479 = &v295[8 * v291];
                                      v480 = &v295[8 * v294];
                                      *v479 = v284;
                                      v288 = v479 + 1;
                                      if (v286 != v289)
                                      {
                                        v481 = v286 - v289 - 8;
                                        if (v481 < 0x58)
                                          goto LABEL_1714;
                                        if ((unint64_t)(v286 - v295 - v290) < 0x20)
                                          goto LABEL_1714;
                                        v482 = (v481 >> 3) + 1;
                                        v483 = 8 * (v482 & 0x3FFFFFFFFFFFFFFCLL);
                                        v484 = &v286[-v483];
                                        v479 = (_QWORD *)((char *)v479 - v483);
                                        v485 = &v295[8 * v291 - 16];
                                        v486 = v286 - 16;
                                        v487 = v482 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v488 = *(_OWORD *)v486;
                                          *(v485 - 1) = *((_OWORD *)v486 - 1);
                                          *v485 = v488;
                                          v485 -= 2;
                                          v486 -= 32;
                                          v487 -= 4;
                                        }
                                        while (v487);
                                        v286 = v484;
                                        if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1714:
                                          do
                                          {
                                            v489 = *((_QWORD *)v286 - 1);
                                            v286 -= 8;
                                            *--v479 = v489;
                                          }
                                          while (v286 != v289);
                                        }
                                        v286 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v479;
                                      *(_QWORD *)(a1 + 2656) = v288;
                                      *(_QWORD *)(a1 + 2664) = v480;
                                      if (v286)
                                        operator delete(v286);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v286 = v284;
                                      v288 = v286 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v288;
                                    v490 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C1023F0(v1637, v490, 0.1);
                                    v491 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 328) = *(_QWORD *)&v1637[0];
                                    v492 = *(char **)(a1 + 2656);
                                    v493 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v492 >= v493)
                                    {
                                      v495 = *v285;
                                      v496 = v492 - *v285;
                                      v497 = v496 >> 3;
                                      v498 = (v496 >> 3) + 1;
                                      if (v498 >> 61)
                                        goto LABEL_1701;
                                      v499 = v493 - (_QWORD)v495;
                                      if (v499 >> 2 > v498)
                                        v498 = v499 >> 2;
                                      if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFF8)
                                        v500 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v500 = v498;
                                      if (v500)
                                      {
                                        if (v500 >> 61)
                                          goto LABEL_1699;
                                        v501 = operator new(8 * v500);
                                      }
                                      else
                                      {
                                        v501 = 0;
                                      }
                                      v502 = &v501[8 * v497];
                                      v503 = &v501[8 * v500];
                                      *v502 = v491;
                                      v494 = v502 + 1;
                                      if (v492 != v495)
                                      {
                                        v504 = v492 - v495 - 8;
                                        if (v504 < 0x58)
                                          goto LABEL_1715;
                                        if ((unint64_t)(v492 - v501 - v496) < 0x20)
                                          goto LABEL_1715;
                                        v505 = (v504 >> 3) + 1;
                                        v506 = 8 * (v505 & 0x3FFFFFFFFFFFFFFCLL);
                                        v507 = &v492[-v506];
                                        v502 = (_QWORD *)((char *)v502 - v506);
                                        v508 = &v501[8 * v497 - 16];
                                        v509 = v492 - 16;
                                        v510 = v505 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v511 = *(_OWORD *)v509;
                                          *(v508 - 1) = *((_OWORD *)v509 - 1);
                                          *v508 = v511;
                                          v508 -= 2;
                                          v509 -= 32;
                                          v510 -= 4;
                                        }
                                        while (v510);
                                        v492 = v507;
                                        if (v505 != (v505 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1715:
                                          do
                                          {
                                            v512 = *((_QWORD *)v492 - 1);
                                            v492 -= 8;
                                            *--v502 = v512;
                                          }
                                          while (v492 != v495);
                                        }
                                        v492 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v502;
                                      *(_QWORD *)(a1 + 2656) = v494;
                                      *(_QWORD *)(a1 + 2664) = v503;
                                      if (v492)
                                        operator delete(v492);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v492 = v491;
                                      v494 = v492 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v494;
                                    v513 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C1023F0(v1637, v513, 0.1);
                                    v514 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 336) = *(_QWORD *)&v1637[0];
                                    v515 = *(char **)(a1 + 2656);
                                    v516 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v515 >= v516)
                                    {
                                      v518 = *v285;
                                      v519 = v515 - *v285;
                                      v520 = v519 >> 3;
                                      v521 = (v519 >> 3) + 1;
                                      if (v521 >> 61)
                                        goto LABEL_1701;
                                      v522 = v516 - (_QWORD)v518;
                                      if (v522 >> 2 > v521)
                                        v521 = v522 >> 2;
                                      if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFF8)
                                        v523 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v523 = v521;
                                      if (v523)
                                      {
                                        if (v523 >> 61)
                                          goto LABEL_1699;
                                        v524 = operator new(8 * v523);
                                      }
                                      else
                                      {
                                        v524 = 0;
                                      }
                                      v525 = &v524[8 * v520];
                                      v526 = &v524[8 * v523];
                                      *v525 = v514;
                                      v517 = v525 + 1;
                                      if (v515 != v518)
                                      {
                                        v527 = v515 - v518 - 8;
                                        if (v527 < 0x58)
                                          goto LABEL_1716;
                                        if ((unint64_t)(v515 - v524 - v519) < 0x20)
                                          goto LABEL_1716;
                                        v528 = (v527 >> 3) + 1;
                                        v529 = 8 * (v528 & 0x3FFFFFFFFFFFFFFCLL);
                                        v530 = &v515[-v529];
                                        v525 = (_QWORD *)((char *)v525 - v529);
                                        v531 = &v524[8 * v520 - 16];
                                        v532 = v515 - 16;
                                        v533 = v528 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v534 = *(_OWORD *)v532;
                                          *(v531 - 1) = *((_OWORD *)v532 - 1);
                                          *v531 = v534;
                                          v531 -= 2;
                                          v532 -= 32;
                                          v533 -= 4;
                                        }
                                        while (v533);
                                        v515 = v530;
                                        if (v528 != (v528 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1716:
                                          do
                                          {
                                            v535 = *((_QWORD *)v515 - 1);
                                            v515 -= 8;
                                            *--v525 = v535;
                                          }
                                          while (v515 != v518);
                                        }
                                        v515 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v525;
                                      *(_QWORD *)(a1 + 2656) = v517;
                                      *(_QWORD *)(a1 + 2664) = v526;
                                      if (v515)
                                        operator delete(v515);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v515 = v514;
                                      v517 = v515 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v517;
                                    v536 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C1023F0(v1637, v536, 0.1);
                                    v537 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 344) = *(_QWORD *)&v1637[0];
                                    v538 = *(char **)(a1 + 2656);
                                    v539 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v538 < v539)
                                    {
                                      *(_QWORD *)v538 = v537;
                                      v540 = v538 + 8;
LABEL_547:
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      goto LABEL_548;
                                    }
                                    v541 = *v285;
                                    v542 = v538 - *v285;
                                    v543 = v542 >> 3;
                                    v544 = (v542 >> 3) + 1;
                                    if (!(v544 >> 61))
                                    {
                                      v545 = v539 - (_QWORD)v541;
                                      if (v545 >> 2 > v544)
                                        v544 = v545 >> 2;
                                      if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF8)
                                        v546 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v546 = v544;
                                      if (v546)
                                      {
                                        if (v546 >> 61)
                                          goto LABEL_1699;
                                        v547 = operator new(8 * v546);
                                      }
                                      else
                                      {
                                        v547 = 0;
                                      }
                                      v548 = &v547[8 * v543];
                                      v549 = &v547[8 * v546];
                                      *v548 = v537;
                                      v540 = v548 + 1;
                                      if (v538 != v541)
                                      {
                                        v550 = v538 - v541 - 8;
                                        if (v550 < 0x58)
                                          goto LABEL_1717;
                                        if ((unint64_t)(v538 - v547 - v542) < 0x20)
                                          goto LABEL_1717;
                                        v551 = (v550 >> 3) + 1;
                                        v552 = 8 * (v551 & 0x3FFFFFFFFFFFFFFCLL);
                                        v553 = &v538[-v552];
                                        v548 = (_QWORD *)((char *)v548 - v552);
                                        v554 = &v547[8 * v543 - 16];
                                        v555 = v538 - 16;
                                        v556 = v551 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v557 = *(_OWORD *)v555;
                                          *(v554 - 1) = *((_OWORD *)v555 - 1);
                                          *v554 = v557;
                                          v554 -= 2;
                                          v555 -= 32;
                                          v556 -= 4;
                                        }
                                        while (v556);
                                        v538 = v553;
                                        if (v551 != (v551 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1717:
                                          do
                                          {
                                            v558 = *((_QWORD *)v538 - 1);
                                            v538 -= 8;
                                            *--v548 = v558;
                                          }
                                          while (v538 != v541);
                                        }
                                        v538 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v548;
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      *(_QWORD *)(a1 + 2664) = v549;
                                      if (v538)
                                        operator delete(v538);
                                      goto LABEL_547;
                                    }
LABEL_1701:
                                    sub_19C07DA0C();
                                  }
LABEL_548:
                                  *(_QWORD *)(a1 + 2504) = a1 + 232;
                                  *(_QWORD *)(a1 + 2512) = a1 + 240;
                                  *(_QWORD *)(a1 + 2520) = a1 + 248;
                                  *(_QWORD *)(a1 + 2528) = a1 + 256;
                                  *(_QWORD *)(a1 + 2536) = a1 + 264;
                                  *(_QWORD *)(a1 + 2544) = a1 + 272;
                                  *(_QWORD *)(a1 + 2552) = a1 + 280;
                                  *(_QWORD *)(a1 + 2560) = a1 + 288;
                                  *(_QWORD *)(a1 + 2568) = a1 + 296;
                                  *(_QWORD *)(a1 + 2576) = a1 + 304;
                                  *(_QWORD *)(a1 + 2584) = a1 + 312;
                                  *(_QWORD *)(a1 + 2592) = a1 + 320;
                                  *(_QWORD *)(a1 + 2600) = a1 + 328;
                                  *(_QWORD *)(a1 + 2608) = a1 + 336;
                                  *(_QWORD *)(a1 + 2616) = a1 + 344;
                                  goto LABEL_549;
                                }
LABEL_1700:
                                sub_19C07DA0C();
                              }
                            }
                            else
                            {
                              v441 = 0;
                              v442 = (_QWORD *)(8 * v437);
                              v443 = 0;
                              *(_QWORD *)(8 * v437) = v431;
                              v434 = 8 * v437 + 8;
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                                goto LABEL_433;
                            }
                            v197 = (char **)(a1 + 2648);
                            goto LABEL_443;
                          }
                        }
                        else
                        {
                          v416 = 0;
                          v417 = (_QWORD *)(8 * v412);
                          v418 = 0;
                          *(_QWORD *)(8 * v412) = v406;
                          v409 = 8 * v412 + 8;
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                            goto LABEL_410;
                        }
                        v197 = (char **)(a1 + 2648);
                        goto LABEL_420;
                      }
                    }
                    else
                    {
                      v391 = 0;
                      v392 = (_QWORD *)(8 * v387);
                      v393 = 0;
                      *(_QWORD *)(8 * v387) = v381;
                      v384 = 8 * v387 + 8;
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                        goto LABEL_387;
                    }
                    v197 = (char **)(a1 + 2648);
                    goto LABEL_397;
                  }
                }
                else
                {
                  v366 = 0;
                  v367 = (_QWORD *)(8 * v362);
                  v368 = 0;
                  *(_QWORD *)(8 * v362) = v356;
                  v359 = 8 * v362 + 8;
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                    goto LABEL_364;
                }
                v197 = (char **)(a1 + 2648);
                goto LABEL_374;
              }
            }
            else
            {
              v341 = 0;
              v342 = (_QWORD *)(8 * v337);
              v343 = 0;
              *(_QWORD *)(8 * v337) = v331;
              v334 = 8 * v337 + 8;
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
                goto LABEL_341;
            }
            v197 = (char **)(a1 + 2648);
            goto LABEL_351;
          }
        }
        else
        {
          v316 = 0;
          v317 = (_QWORD *)(8 * v312);
          v318 = 0;
          *(_QWORD *)(8 * v312) = v306;
          v309 = 8 * v312 + 8;
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
            goto LABEL_318;
        }
        v197 = (char **)(a1 + 2648);
        goto LABEL_328;
      }
    }
    else
    {
      v213 = 0;
      v214 = (_QWORD *)(8 * v209);
      v215 = 0;
      *(_QWORD *)(8 * v209) = v196;
      v200 = 8 * v209 + 8;
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
        goto LABEL_217;
    }
    v197 = (char **)(a1 + 2648);
    goto LABEL_305;
  }
LABEL_549:
  v559 = *(unsigned int *)(a1 + 52);
  v560 = (void *)operator new[]();
  v561 = v560;
  if ((int)v559 >= 1)
    bzero(v560, 4 * v559);
  *(_QWORD *)(a1 + 760) = v561;
  v562 = *(char **)(a1 + 2632);
  v563 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v562 < v563)
  {
    *(_QWORD *)v562 = v561;
    v564 = (uint64_t)(v562 + 8);
    goto LABEL_573;
  }
  v565 = *v5;
  v566 = v562 - *v5;
  v567 = v566 >> 3;
  v568 = (v566 >> 3) + 1;
  if (v568 >> 61)
    goto LABEL_1698;
  v569 = v563 - (_QWORD)v565;
  if (v569 >> 2 > v568)
    v568 = v569 >> 2;
  if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
    v570 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v570 = v568;
  if (v570)
  {
    if (v570 >> 61)
      goto LABEL_1699;
    v571 = operator new(8 * v570);
    v572 = &v571[8 * v567];
    v573 = &v571[8 * v570];
    *v572 = v561;
    v564 = (uint64_t)(v572 + 1);
    v574 = (char *)(v562 - v565);
    if (v562 == v565)
      goto LABEL_571;
    goto LABEL_564;
  }
  v571 = 0;
  v572 = (_QWORD *)(8 * v567);
  v573 = 0;
  *(_QWORD *)(8 * v567) = v561;
  v564 = 8 * v567 + 8;
  v574 = (char *)(v562 - v565);
  if (v562 != v565)
  {
LABEL_564:
    v575 = (unint64_t)(v574 - 8);
    if (v575 < 0x58)
      goto LABEL_1718;
    if ((unint64_t)(v562 - v571 - v566) < 0x20)
      goto LABEL_1718;
    v576 = (v575 >> 3) + 1;
    v577 = 8 * (v576 & 0x3FFFFFFFFFFFFFFCLL);
    v578 = &v562[-v577];
    v572 = (_QWORD *)((char *)v572 - v577);
    v579 = &v571[8 * v567 - 16];
    v580 = v562 - 16;
    v581 = v576 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v582 = *(_OWORD *)v580;
      *(v579 - 1) = *((_OWORD *)v580 - 1);
      *v579 = v582;
      v579 -= 2;
      v580 -= 32;
      v581 -= 4;
    }
    while (v581);
    v562 = v578;
    if (v576 != (v576 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1718:
      do
      {
        v583 = *((_QWORD *)v562 - 1);
        v562 -= 8;
        *--v572 = v583;
      }
      while (v562 != v565);
    }
    v562 = *v5;
  }
LABEL_571:
  *(_QWORD *)(a1 + 2624) = v572;
  *(_QWORD *)(a1 + 2632) = v564;
  *(_QWORD *)(a1 + 2640) = v573;
  if (v562)
    operator delete(v562);
LABEL_573:
  *(_QWORD *)(a1 + 2632) = v564;
  v584 = *(unsigned int *)(a1 + 52);
  v585 = (void *)operator new[]();
  v586 = v585;
  if ((int)v584 >= 1)
    bzero(v585, 4 * v584);
  *(_QWORD *)(a1 + 768) = v586;
  v587 = *(char **)(a1 + 2632);
  v588 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v587 < v588)
  {
    *(_QWORD *)v587 = v586;
    v589 = (uint64_t)(v587 + 8);
    goto LABEL_597;
  }
  v590 = *v5;
  v591 = v587 - *v5;
  v592 = v591 >> 3;
  v593 = (v591 >> 3) + 1;
  if (v593 >> 61)
    goto LABEL_1698;
  v594 = v588 - (_QWORD)v590;
  if (v594 >> 2 > v593)
    v593 = v594 >> 2;
  if ((unint64_t)v594 >= 0x7FFFFFFFFFFFFFF8)
    v595 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v595 = v593;
  if (v595)
  {
    if (v595 >> 61)
      goto LABEL_1699;
    v596 = operator new(8 * v595);
    v597 = &v596[8 * v592];
    v598 = &v596[8 * v595];
    *v597 = v586;
    v589 = (uint64_t)(v597 + 1);
    v599 = (char *)(v587 - v590);
    if (v587 == v590)
      goto LABEL_595;
    goto LABEL_588;
  }
  v596 = 0;
  v597 = (_QWORD *)(8 * v592);
  v598 = 0;
  *(_QWORD *)(8 * v592) = v586;
  v589 = 8 * v592 + 8;
  v599 = (char *)(v587 - v590);
  if (v587 != v590)
  {
LABEL_588:
    v600 = (unint64_t)(v599 - 8);
    if (v600 < 0x58)
      goto LABEL_1719;
    if ((unint64_t)(v587 - v596 - v591) < 0x20)
      goto LABEL_1719;
    v601 = (v600 >> 3) + 1;
    v602 = 8 * (v601 & 0x3FFFFFFFFFFFFFFCLL);
    v603 = &v587[-v602];
    v597 = (_QWORD *)((char *)v597 - v602);
    v604 = &v596[8 * v592 - 16];
    v605 = v587 - 16;
    v606 = v601 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v607 = *(_OWORD *)v605;
      *(v604 - 1) = *((_OWORD *)v605 - 1);
      *v604 = v607;
      v604 -= 2;
      v605 -= 32;
      v606 -= 4;
    }
    while (v606);
    v587 = v603;
    if (v601 != (v601 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1719:
      do
      {
        v608 = *((_QWORD *)v587 - 1);
        v587 -= 8;
        *--v597 = v608;
      }
      while (v587 != v590);
    }
    v587 = *v5;
  }
LABEL_595:
  *(_QWORD *)(a1 + 2624) = v597;
  *(_QWORD *)(a1 + 2632) = v589;
  *(_QWORD *)(a1 + 2640) = v598;
  if (v587)
    operator delete(v587);
LABEL_597:
  *(_QWORD *)(a1 + 2632) = v589;
  v609 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v610 = (void *)operator new[]();
  bzero(v610, 4 * v609);
  *(_QWORD *)(a1 + 752) = v610;
  v611 = *(char **)(a1 + 2632);
  v612 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v611 < v612)
  {
    *(_QWORD *)v611 = v610;
    v613 = (uint64_t)(v611 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_616;
  }
  v615 = *v5;
  v616 = v611 - *v5;
  v617 = v616 >> 3;
  v618 = (v616 >> 3) + 1;
  if (v618 >> 61)
    goto LABEL_1698;
  v619 = v612 - (_QWORD)v615;
  if (v619 >> 2 > v618)
    v618 = v619 >> 2;
  if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFF8)
    v620 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v620 = v618;
  if (v620)
  {
    if (v620 >> 61)
      goto LABEL_1699;
    v621 = operator new(8 * v620);
    v622 = &v621[8 * v617];
    v623 = &v621[8 * v620];
    *v622 = v610;
    v613 = (uint64_t)(v622 + 1);
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
    {
LABEL_608:
      v625 = (unint64_t)(v624 - 8);
      p_vtable = MLPNDArrayLossLabels.vtable;
      if (v625 < 0x58)
        goto LABEL_1720;
      if ((unint64_t)(v611 - v621 - v616) < 0x20)
        goto LABEL_1720;
      v626 = (v625 >> 3) + 1;
      v627 = 8 * (v626 & 0x3FFFFFFFFFFFFFFCLL);
      v628 = &v611[-v627];
      v622 = (_QWORD *)((char *)v622 - v627);
      v629 = &v621[8 * v617 - 16];
      v630 = v611 - 16;
      v631 = v626 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v632 = *(_OWORD *)v630;
        *(v629 - 1) = *((_OWORD *)v630 - 1);
        *v629 = v632;
        v629 -= 2;
        v630 -= 32;
        v631 -= 4;
      }
      while (v631);
      v611 = v628;
      if (v626 != (v626 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1720:
        do
        {
          v633 = *((_QWORD *)v611 - 1);
          v611 -= 8;
          *--v622 = v633;
        }
        while (v611 != v615);
      }
      v611 = *v5;
      *(_QWORD *)(a1 + 2624) = v622;
      *(_QWORD *)(a1 + 2632) = v613;
      *(_QWORD *)(a1 + 2640) = v623;
      if (v611)
        goto LABEL_615;
      goto LABEL_616;
    }
  }
  else
  {
    v621 = 0;
    v622 = (_QWORD *)(8 * v617);
    v623 = 0;
    *(_QWORD *)(8 * v617) = v610;
    v613 = 8 * v617 + 8;
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
      goto LABEL_608;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v622;
  *(_QWORD *)(a1 + 2632) = v613;
  *(_QWORD *)(a1 + 2640) = v623;
  if (v611)
LABEL_615:
    operator delete(v611);
LABEL_616:
  *(_QWORD *)(a1 + 2632) = v613;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  if (*(_DWORD *)(a1 + 56))
  {
    v634 = *(unsigned __int8 *)(a1 + 40) + 1;
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 984), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1104), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1224), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1344), v1637);
    sub_19C101AC4(v1637);
    goto LABEL_711;
  }
  v635 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v636 = (void *)operator new[]();
  bzero(v636, 4 * v635);
  *(_QWORD *)(a1 + 1464) = v636;
  v637 = *(char **)(a1 + 2632);
  v638 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v637 < v638)
  {
    *(_QWORD *)v637 = v636;
    v639 = (uint64_t)(v637 + 8);
    goto LABEL_644;
  }
  v640 = *v5;
  v641 = v637 - *v5;
  v642 = v641 >> 3;
  v643 = (v641 >> 3) + 1;
  if (v643 >> 61)
    goto LABEL_1698;
  v644 = v638 - (_QWORD)v640;
  if (v644 >> 2 > v643)
    v643 = v644 >> 2;
  if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
    v645 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v645 = v643;
  if (v645)
  {
    if (v645 >> 61)
      goto LABEL_1699;
    v646 = operator new(8 * v645);
    v647 = &v646[8 * v642];
    v648 = &v646[8 * v645];
    *v647 = v636;
    v639 = (uint64_t)(v647 + 1);
    v649 = (char *)(v637 - v640);
    if (v637 == v640)
      goto LABEL_642;
    goto LABEL_635;
  }
  v646 = 0;
  v647 = (_QWORD *)(8 * v642);
  v648 = 0;
  *(_QWORD *)(8 * v642) = v636;
  v639 = 8 * v642 + 8;
  v649 = (char *)(v637 - v640);
  if (v637 != v640)
  {
LABEL_635:
    v650 = (unint64_t)(v649 - 8);
    if (v650 < 0x58)
      goto LABEL_1721;
    if ((unint64_t)(v637 - v646 - v641) < 0x20)
      goto LABEL_1721;
    v651 = (v650 >> 3) + 1;
    v652 = 8 * (v651 & 0x3FFFFFFFFFFFFFFCLL);
    v653 = &v637[-v652];
    v647 = (_QWORD *)((char *)v647 - v652);
    v654 = &v646[8 * v642 - 16];
    v655 = v637 - 16;
    v656 = v651 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v657 = *(_OWORD *)v655;
      *(v654 - 1) = *((_OWORD *)v655 - 1);
      *v654 = v657;
      v654 -= 2;
      v655 -= 32;
      v656 -= 4;
    }
    while (v656);
    v637 = v653;
    if (v651 != (v651 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1721:
      do
      {
        v658 = *((_QWORD *)v637 - 1);
        v637 -= 8;
        *--v647 = v658;
      }
      while (v637 != v640);
    }
    v637 = *v5;
  }
LABEL_642:
  *(_QWORD *)(a1 + 2624) = v647;
  *(_QWORD *)(a1 + 2632) = v639;
  *(_QWORD *)(a1 + 2640) = v648;
  if (v637)
    operator delete(v637);
LABEL_644:
  *(_QWORD *)(a1 + 2632) = v639;
  v659 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v660 = (void *)operator new[]();
  bzero(v660, 4 * v659);
  *(_QWORD *)(a1 + 1472) = v660;
  v661 = *(char **)(a1 + 2632);
  v662 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v661 < v662)
  {
    *(_QWORD *)v661 = v660;
    v663 = (uint64_t)(v661 + 8);
    goto LABEL_666;
  }
  v664 = *v5;
  v665 = v661 - *v5;
  v666 = v665 >> 3;
  v667 = (v665 >> 3) + 1;
  if (v667 >> 61)
    goto LABEL_1698;
  v668 = v662 - (_QWORD)v664;
  if (v668 >> 2 > v667)
    v667 = v668 >> 2;
  if ((unint64_t)v668 >= 0x7FFFFFFFFFFFFFF8)
    v669 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v669 = v667;
  if (v669)
  {
    if (v669 >> 61)
      goto LABEL_1699;
    v670 = operator new(8 * v669);
    v671 = &v670[8 * v666];
    v672 = &v670[8 * v669];
    *v671 = v660;
    v663 = (uint64_t)(v671 + 1);
    v673 = (char *)(v661 - v664);
    if (v661 == v664)
      goto LABEL_664;
    goto LABEL_657;
  }
  v670 = 0;
  v671 = (_QWORD *)(8 * v666);
  v672 = 0;
  *(_QWORD *)(8 * v666) = v660;
  v663 = 8 * v666 + 8;
  v673 = (char *)(v661 - v664);
  if (v661 != v664)
  {
LABEL_657:
    v674 = (unint64_t)(v673 - 8);
    if (v674 < 0x58)
      goto LABEL_1722;
    if ((unint64_t)(v661 - v670 - v665) < 0x20)
      goto LABEL_1722;
    v675 = (v674 >> 3) + 1;
    v676 = 8 * (v675 & 0x3FFFFFFFFFFFFFFCLL);
    v677 = &v661[-v676];
    v671 = (_QWORD *)((char *)v671 - v676);
    v678 = &v670[8 * v666 - 16];
    v679 = v661 - 16;
    v680 = v675 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v681 = *(_OWORD *)v679;
      *(v678 - 1) = *((_OWORD *)v679 - 1);
      *v678 = v681;
      v678 -= 2;
      v679 -= 32;
      v680 -= 4;
    }
    while (v680);
    v661 = v677;
    if (v675 != (v675 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1722:
      do
      {
        v682 = *((_QWORD *)v661 - 1);
        v661 -= 8;
        *--v671 = v682;
      }
      while (v661 != v664);
    }
    v661 = *v5;
  }
LABEL_664:
  *(_QWORD *)(a1 + 2624) = v671;
  *(_QWORD *)(a1 + 2632) = v663;
  *(_QWORD *)(a1 + 2640) = v672;
  if (v661)
    operator delete(v661);
LABEL_666:
  *(_QWORD *)(a1 + 2632) = v663;
  v683 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v684 = (void *)operator new[]();
  bzero(v684, 4 * v683);
  *(_QWORD *)(a1 + 1480) = v684;
  v685 = *(char **)(a1 + 2632);
  v686 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v685 < v686)
  {
    *(_QWORD *)v685 = v684;
    v687 = (uint64_t)(v685 + 8);
    goto LABEL_688;
  }
  v688 = *v5;
  v689 = v685 - *v5;
  v690 = v689 >> 3;
  v691 = (v689 >> 3) + 1;
  if (v691 >> 61)
    goto LABEL_1698;
  v692 = v686 - (_QWORD)v688;
  if (v692 >> 2 > v691)
    v691 = v692 >> 2;
  if ((unint64_t)v692 >= 0x7FFFFFFFFFFFFFF8)
    v693 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v693 = v691;
  if (v693)
  {
    if (v693 >> 61)
      goto LABEL_1699;
    v694 = operator new(8 * v693);
    v695 = &v694[8 * v690];
    v696 = &v694[8 * v693];
    *v695 = v684;
    v687 = (uint64_t)(v695 + 1);
    v697 = (char *)(v685 - v688);
    if (v685 == v688)
      goto LABEL_686;
    goto LABEL_679;
  }
  v694 = 0;
  v695 = (_QWORD *)(8 * v690);
  v696 = 0;
  *(_QWORD *)(8 * v690) = v684;
  v687 = 8 * v690 + 8;
  v697 = (char *)(v685 - v688);
  if (v685 != v688)
  {
LABEL_679:
    v698 = (unint64_t)(v697 - 8);
    if (v698 < 0x58)
      goto LABEL_1723;
    if ((unint64_t)(v685 - v694 - v689) < 0x20)
      goto LABEL_1723;
    v699 = (v698 >> 3) + 1;
    v700 = 8 * (v699 & 0x3FFFFFFFFFFFFFFCLL);
    v701 = &v685[-v700];
    v695 = (_QWORD *)((char *)v695 - v700);
    v702 = &v694[8 * v690 - 16];
    v703 = v685 - 16;
    v704 = v699 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v705 = *(_OWORD *)v703;
      *(v702 - 1) = *((_OWORD *)v703 - 1);
      *v702 = v705;
      v702 -= 2;
      v703 -= 32;
      v704 -= 4;
    }
    while (v704);
    v685 = v701;
    if (v699 != (v699 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1723:
      do
      {
        v706 = *((_QWORD *)v685 - 1);
        v685 -= 8;
        *--v695 = v706;
      }
      while (v685 != v688);
    }
    v685 = *v5;
  }
LABEL_686:
  *(_QWORD *)(a1 + 2624) = v695;
  *(_QWORD *)(a1 + 2632) = v687;
  *(_QWORD *)(a1 + 2640) = v696;
  if (v685)
    operator delete(v685);
LABEL_688:
  *(_QWORD *)(a1 + 2632) = v687;
  v707 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v708 = (void *)operator new[]();
  bzero(v708, 4 * v707);
  *(_QWORD *)(a1 + 1488) = v708;
  v709 = *(char **)(a1 + 2632);
  v710 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v709 < v710)
  {
    *(_QWORD *)v709 = v708;
    *(_QWORD *)(a1 + 2632) = v709 + 8;
    goto LABEL_711;
  }
  v711 = *v5;
  v712 = v709 - *v5;
  v713 = v712 >> 3;
  v714 = (v712 >> 3) + 1;
  if (v714 >> 61)
    goto LABEL_1698;
  v715 = v710 - (_QWORD)v711;
  if (v715 >> 2 > v714)
    v714 = v715 >> 2;
  if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFF8)
    v716 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v716 = v714;
  if (v716)
  {
    if (v716 >> 61)
      goto LABEL_1699;
    v717 = operator new(8 * v716);
    v718 = &v717[8 * v713];
    v719 = &v717[8 * v716];
    *v718 = v708;
    v720 = (uint64_t)(v718 + 1);
    v721 = (char *)(v709 - v711);
    if (v709 == v711)
      goto LABEL_708;
    goto LABEL_701;
  }
  v717 = 0;
  v718 = (_QWORD *)(8 * v713);
  v719 = 0;
  *(_QWORD *)(8 * v713) = v708;
  v720 = 8 * v713 + 8;
  v721 = (char *)(v709 - v711);
  if (v709 != v711)
  {
LABEL_701:
    v722 = (unint64_t)(v721 - 8);
    if (v722 < 0x58)
      goto LABEL_1724;
    if ((unint64_t)(v709 - v717 - v712) < 0x20)
      goto LABEL_1724;
    v723 = (v722 >> 3) + 1;
    v724 = 8 * (v723 & 0x3FFFFFFFFFFFFFFCLL);
    v725 = &v709[-v724];
    v718 = (_QWORD *)((char *)v718 - v724);
    v726 = &v717[8 * v713 - 16];
    v727 = v709 - 16;
    v728 = v723 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v729 = *(_OWORD *)v727;
      *(v726 - 1) = *((_OWORD *)v727 - 1);
      *v726 = v729;
      v726 -= 2;
      v727 -= 32;
      v728 -= 4;
    }
    while (v728);
    v709 = v725;
    if (v723 != (v723 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1724:
      do
      {
        v730 = *((_QWORD *)v709 - 1);
        v709 -= 8;
        *--v718 = v730;
      }
      while (v709 != v711);
    }
    v709 = *v5;
  }
LABEL_708:
  *(_QWORD *)(a1 + 2624) = v718;
  *(_QWORD *)(a1 + 2632) = v720;
  *(_QWORD *)(a1 + 2640) = v719;
  if (v709)
    operator delete(v709);
  *(_QWORD *)(a1 + 2632) = v720;
LABEL_711:
  v731 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v732 = (void *)operator new[]();
  bzero(v732, 4 * v731);
  *(_QWORD *)(a1 + 1496) = v732;
  v733 = *(char **)(a1 + 2632);
  v734 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v733 < v734)
  {
    *(_QWORD *)v733 = v732;
    v735 = (uint64_t)(v733 + 8);
    goto LABEL_733;
  }
  v736 = *v5;
  v737 = v733 - *v5;
  v738 = v737 >> 3;
  v739 = (v737 >> 3) + 1;
  if (v739 >> 61)
    goto LABEL_1698;
  v740 = v734 - (_QWORD)v736;
  if (v740 >> 2 > v739)
    v739 = v740 >> 2;
  if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8)
    v741 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v741 = v739;
  if (v741)
  {
    if (v741 >> 61)
      goto LABEL_1699;
    v742 = operator new(8 * v741);
    v743 = &v742[8 * v738];
    v744 = &v742[8 * v741];
    *v743 = v732;
    v735 = (uint64_t)(v743 + 1);
    v745 = (char *)(v733 - v736);
    if (v733 == v736)
      goto LABEL_731;
    goto LABEL_724;
  }
  v742 = 0;
  v743 = (_QWORD *)(8 * v738);
  v744 = 0;
  *(_QWORD *)(8 * v738) = v732;
  v735 = 8 * v738 + 8;
  v745 = (char *)(v733 - v736);
  if (v733 != v736)
  {
LABEL_724:
    v746 = (unint64_t)(v745 - 8);
    if (v746 < 0x58)
      goto LABEL_1725;
    if ((unint64_t)(v733 - v742 - v737) < 0x20)
      goto LABEL_1725;
    v747 = (v746 >> 3) + 1;
    v748 = 8 * (v747 & 0x3FFFFFFFFFFFFFFCLL);
    v749 = &v733[-v748];
    v743 = (_QWORD *)((char *)v743 - v748);
    v750 = &v742[8 * v738 - 16];
    v751 = v733 - 16;
    v752 = v747 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v753 = *(_OWORD *)v751;
      *(v750 - 1) = *((_OWORD *)v751 - 1);
      *v750 = v753;
      v750 -= 2;
      v751 -= 32;
      v752 -= 4;
    }
    while (v752);
    v733 = v749;
    if (v747 != (v747 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1725:
      do
      {
        v754 = *((_QWORD *)v733 - 1);
        v733 -= 8;
        *--v743 = v754;
      }
      while (v733 != v736);
    }
    v733 = *v5;
  }
LABEL_731:
  *(_QWORD *)(a1 + 2624) = v743;
  *(_QWORD *)(a1 + 2632) = v735;
  *(_QWORD *)(a1 + 2640) = v744;
  if (v733)
    operator delete(v733);
LABEL_733:
  *(_QWORD *)(a1 + 2632) = v735;
  v755 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v756 = (void *)operator new[]();
  bzero(v756, 4 * v755);
  *(_QWORD *)(a1 + 1504) = v756;
  v757 = *(char **)(a1 + 2632);
  v758 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v757 < v758)
  {
    *(_QWORD *)v757 = v756;
    v759 = (uint64_t)(v757 + 8);
    goto LABEL_755;
  }
  v760 = *v5;
  v761 = v757 - *v5;
  v762 = v761 >> 3;
  v763 = (v761 >> 3) + 1;
  if (v763 >> 61)
    goto LABEL_1698;
  v764 = v758 - (_QWORD)v760;
  if (v764 >> 2 > v763)
    v763 = v764 >> 2;
  if ((unint64_t)v764 >= 0x7FFFFFFFFFFFFFF8)
    v765 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v765 = v763;
  if (v765)
  {
    if (v765 >> 61)
      goto LABEL_1699;
    v766 = operator new(8 * v765);
    v767 = &v766[8 * v762];
    v768 = &v766[8 * v765];
    *v767 = v756;
    v759 = (uint64_t)(v767 + 1);
    v769 = (char *)(v757 - v760);
    if (v757 == v760)
      goto LABEL_753;
    goto LABEL_746;
  }
  v766 = 0;
  v767 = (_QWORD *)(8 * v762);
  v768 = 0;
  *(_QWORD *)(8 * v762) = v756;
  v759 = 8 * v762 + 8;
  v769 = (char *)(v757 - v760);
  if (v757 != v760)
  {
LABEL_746:
    v770 = (unint64_t)(v769 - 8);
    if (v770 < 0x58)
      goto LABEL_1726;
    if ((unint64_t)(v757 - v766 - v761) < 0x20)
      goto LABEL_1726;
    v771 = (v770 >> 3) + 1;
    v772 = 8 * (v771 & 0x3FFFFFFFFFFFFFFCLL);
    v773 = &v757[-v772];
    v767 = (_QWORD *)((char *)v767 - v772);
    v774 = &v766[8 * v762 - 16];
    v775 = v757 - 16;
    v776 = v771 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v777 = *(_OWORD *)v775;
      *(v774 - 1) = *((_OWORD *)v775 - 1);
      *v774 = v777;
      v774 -= 2;
      v775 -= 32;
      v776 -= 4;
    }
    while (v776);
    v757 = v773;
    if (v771 != (v771 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1726:
      do
      {
        v778 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v767 = v778;
      }
      while (v757 != v760);
    }
    v757 = *v5;
  }
LABEL_753:
  *(_QWORD *)(a1 + 2624) = v767;
  *(_QWORD *)(a1 + 2632) = v759;
  *(_QWORD *)(a1 + 2640) = v768;
  if (v757)
    operator delete(v757);
LABEL_755:
  *(_QWORD *)(a1 + 2632) = v759;
  v779 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v780 = (void *)operator new[]();
  bzero(v780, 4 * v779);
  *(_QWORD *)(a1 + 1512) = v780;
  v781 = *(char **)(a1 + 2632);
  v782 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v781 < v782)
  {
    *(_QWORD *)v781 = v780;
    v783 = (uint64_t)(v781 + 8);
    goto LABEL_777;
  }
  v784 = *v5;
  v785 = v781 - *v5;
  v786 = v785 >> 3;
  v787 = (v785 >> 3) + 1;
  if (v787 >> 61)
    goto LABEL_1698;
  v788 = v782 - (_QWORD)v784;
  if (v788 >> 2 > v787)
    v787 = v788 >> 2;
  if ((unint64_t)v788 >= 0x7FFFFFFFFFFFFFF8)
    v789 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v789 = v787;
  if (v789)
  {
    if (v789 >> 61)
      goto LABEL_1699;
    v790 = operator new(8 * v789);
    v791 = &v790[8 * v786];
    v792 = &v790[8 * v789];
    *v791 = v780;
    v783 = (uint64_t)(v791 + 1);
    v793 = (char *)(v781 - v784);
    if (v781 == v784)
      goto LABEL_775;
    goto LABEL_768;
  }
  v790 = 0;
  v791 = (_QWORD *)(8 * v786);
  v792 = 0;
  *(_QWORD *)(8 * v786) = v780;
  v783 = 8 * v786 + 8;
  v793 = (char *)(v781 - v784);
  if (v781 != v784)
  {
LABEL_768:
    v794 = (unint64_t)(v793 - 8);
    if (v794 < 0x58)
      goto LABEL_1727;
    if ((unint64_t)(v781 - v790 - v785) < 0x20)
      goto LABEL_1727;
    v795 = (v794 >> 3) + 1;
    v796 = 8 * (v795 & 0x3FFFFFFFFFFFFFFCLL);
    v797 = &v781[-v796];
    v791 = (_QWORD *)((char *)v791 - v796);
    v798 = &v790[8 * v786 - 16];
    v799 = v781 - 16;
    v800 = v795 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v801 = *(_OWORD *)v799;
      *(v798 - 1) = *((_OWORD *)v799 - 1);
      *v798 = v801;
      v798 -= 2;
      v799 -= 32;
      v800 -= 4;
    }
    while (v800);
    v781 = v797;
    if (v795 != (v795 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1727:
      do
      {
        v802 = *((_QWORD *)v781 - 1);
        v781 -= 8;
        *--v791 = v802;
      }
      while (v781 != v784);
    }
    v781 = *v5;
  }
LABEL_775:
  *(_QWORD *)(a1 + 2624) = v791;
  *(_QWORD *)(a1 + 2632) = v783;
  *(_QWORD *)(a1 + 2640) = v792;
  if (v781)
    operator delete(v781);
LABEL_777:
  *(_QWORD *)(a1 + 2632) = v783;
  v803 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v804 = (void *)operator new[]();
  bzero(v804, 4 * v803);
  *(_QWORD *)(a1 + 1520) = v804;
  v805 = *(char **)(a1 + 2632);
  v806 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v805 < v806)
  {
    *(_QWORD *)v805 = v804;
    v807 = (uint64_t)(v805 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_796;
  }
  v808 = *v5;
  v809 = v805 - *v5;
  v810 = v809 >> 3;
  v811 = (v809 >> 3) + 1;
  if (v811 >> 61)
    goto LABEL_1698;
  v812 = v806 - (_QWORD)v808;
  if (v812 >> 2 > v811)
    v811 = v812 >> 2;
  if ((unint64_t)v812 >= 0x7FFFFFFFFFFFFFF8)
    v813 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v813 = v811;
  if (v813)
  {
    if (v813 >> 61)
      goto LABEL_1699;
    v814 = operator new(8 * v813);
    v815 = &v814[8 * v810];
    v816 = &v814[8 * v813];
    *v815 = v804;
    v807 = (uint64_t)(v815 + 1);
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
    {
LABEL_788:
      v818 = (unint64_t)(v817 - 8);
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      if (v818 < 0x58)
        goto LABEL_1728;
      if ((unint64_t)(v805 - v814 - v809) < 0x20)
        goto LABEL_1728;
      v819 = (v818 >> 3) + 1;
      v820 = 8 * (v819 & 0x3FFFFFFFFFFFFFFCLL);
      v821 = &v805[-v820];
      v815 = (_QWORD *)((char *)v815 - v820);
      v822 = &v814[8 * v810 - 16];
      v823 = v805 - 16;
      v824 = v819 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v825 = *(_OWORD *)v823;
        *(v822 - 1) = *((_OWORD *)v823 - 1);
        *v822 = v825;
        v822 -= 2;
        v823 -= 32;
        v824 -= 4;
      }
      while (v824);
      v805 = v821;
      if (v819 != (v819 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1728:
        do
        {
          v826 = *((_QWORD *)v805 - 1);
          v805 -= 8;
          *--v815 = v826;
        }
        while (v805 != v808);
      }
      v805 = *v5;
      *(_QWORD *)(a1 + 2624) = v815;
      *(_QWORD *)(a1 + 2632) = v807;
      *(_QWORD *)(a1 + 2640) = v816;
      if (v805)
        goto LABEL_795;
      goto LABEL_796;
    }
  }
  else
  {
    v814 = 0;
    v815 = (_QWORD *)(8 * v810);
    v816 = 0;
    *(_QWORD *)(8 * v810) = v804;
    v807 = 8 * v810 + 8;
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
      goto LABEL_788;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v815;
  *(_QWORD *)(a1 + 2632) = v807;
  *(_QWORD *)(a1 + 2640) = v816;
  if (v805)
LABEL_795:
    operator delete(v805);
LABEL_796:
  *(_QWORD *)(a1 + 2632) = v807;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  v827 = *(unsigned int *)(a1 + 52);
  v828 = (void *)operator new[]();
  v829 = v828;
  if ((int)v827 >= 1)
    bzero(v828, 4 * v827);
  *(_QWORD *)(a1 + 1528) = v829;
  v830 = *(char **)(a1 + 2632);
  v831 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v830 < v831)
  {
    *(_QWORD *)v830 = v829;
    v832 = (uint64_t)(v830 + 8);
    goto LABEL_824;
  }
  v833 = *v5;
  v834 = v830 - *v5;
  v835 = v834 >> 3;
  v836 = (v834 >> 3) + 1;
  if (v836 >> 61)
    goto LABEL_1698;
  v837 = v831 - (_QWORD)v833;
  if (v837 >> 2 > v836)
    v836 = v837 >> 2;
  if ((unint64_t)v837 >= 0x7FFFFFFFFFFFFFF8)
    v838 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v838 = v836;
  if (v838)
  {
    if (v838 >> 61)
      goto LABEL_1699;
    v839 = operator new(8 * v838);
    v840 = &v839[8 * v835];
    v841 = &v839[8 * v838];
    *v840 = v829;
    v832 = (uint64_t)(v840 + 1);
    v842 = (char *)(v830 - v833);
    if (v830 == v833)
      goto LABEL_822;
    goto LABEL_815;
  }
  v839 = 0;
  v840 = (_QWORD *)(8 * v835);
  v841 = 0;
  *(_QWORD *)(8 * v835) = v829;
  v832 = 8 * v835 + 8;
  v842 = (char *)(v830 - v833);
  if (v830 != v833)
  {
LABEL_815:
    v843 = (unint64_t)(v842 - 8);
    if (v843 < 0x58)
      goto LABEL_1729;
    if ((unint64_t)(v830 - v839 - v834) < 0x20)
      goto LABEL_1729;
    v844 = (v843 >> 3) + 1;
    v845 = 8 * (v844 & 0x3FFFFFFFFFFFFFFCLL);
    v846 = &v830[-v845];
    v840 = (_QWORD *)((char *)v840 - v845);
    v847 = &v839[8 * v835 - 16];
    v848 = v830 - 16;
    v849 = v844 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v850 = *(_OWORD *)v848;
      *(v847 - 1) = *((_OWORD *)v848 - 1);
      *v847 = v850;
      v847 -= 2;
      v848 -= 32;
      v849 -= 4;
    }
    while (v849);
    v830 = v846;
    if (v844 != (v844 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1729:
      do
      {
        v851 = *((_QWORD *)v830 - 1);
        v830 -= 8;
        *--v840 = v851;
      }
      while (v830 != v833);
    }
    v830 = *v5;
  }
LABEL_822:
  *(_QWORD *)(a1 + 2624) = v840;
  *(_QWORD *)(a1 + 2632) = v832;
  *(_QWORD *)(a1 + 2640) = v841;
  if (v830)
    operator delete(v830);
LABEL_824:
  *(_QWORD *)(a1 + 2632) = v832;
  v852 = *(unsigned int *)(a1 + 52);
  v853 = (void *)operator new[]();
  v854 = v853;
  if ((int)v852 >= 1)
    bzero(v853, 4 * v852);
  *(_QWORD *)(a1 + 1536) = v854;
  v855 = *(char **)(a1 + 2632);
  v856 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v855 < v856)
  {
    *(_QWORD *)v855 = v854;
    v857 = (uint64_t)(v855 + 8);
    goto LABEL_848;
  }
  v858 = *v5;
  v859 = v855 - *v5;
  v860 = v859 >> 3;
  v861 = (v859 >> 3) + 1;
  if (v861 >> 61)
    goto LABEL_1698;
  v862 = v856 - (_QWORD)v858;
  if (v862 >> 2 > v861)
    v861 = v862 >> 2;
  if ((unint64_t)v862 >= 0x7FFFFFFFFFFFFFF8)
    v863 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v863 = v861;
  if (v863)
  {
    if (v863 >> 61)
      goto LABEL_1699;
    v864 = operator new(8 * v863);
    v865 = &v864[8 * v860];
    v866 = &v864[8 * v863];
    *v865 = v854;
    v857 = (uint64_t)(v865 + 1);
    v867 = (char *)(v855 - v858);
    if (v855 == v858)
      goto LABEL_846;
    goto LABEL_839;
  }
  v864 = 0;
  v865 = (_QWORD *)(8 * v860);
  v866 = 0;
  *(_QWORD *)(8 * v860) = v854;
  v857 = 8 * v860 + 8;
  v867 = (char *)(v855 - v858);
  if (v855 != v858)
  {
LABEL_839:
    v868 = (unint64_t)(v867 - 8);
    if (v868 < 0x58)
      goto LABEL_1730;
    if ((unint64_t)(v855 - v864 - v859) < 0x20)
      goto LABEL_1730;
    v869 = (v868 >> 3) + 1;
    v870 = 8 * (v869 & 0x3FFFFFFFFFFFFFFCLL);
    v871 = &v855[-v870];
    v865 = (_QWORD *)((char *)v865 - v870);
    v872 = &v864[8 * v860 - 16];
    v873 = v855 - 16;
    v874 = v869 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v875 = *(_OWORD *)v873;
      *(v872 - 1) = *((_OWORD *)v873 - 1);
      *v872 = v875;
      v872 -= 2;
      v873 -= 32;
      v874 -= 4;
    }
    while (v874);
    v855 = v871;
    if (v869 != (v869 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1730:
      do
      {
        v876 = *((_QWORD *)v855 - 1);
        v855 -= 8;
        *--v865 = v876;
      }
      while (v855 != v858);
    }
    v855 = *v5;
  }
LABEL_846:
  *(_QWORD *)(a1 + 2624) = v865;
  *(_QWORD *)(a1 + 2632) = v857;
  *(_QWORD *)(a1 + 2640) = v866;
  if (v855)
    operator delete(v855);
LABEL_848:
  *(_QWORD *)(a1 + 2632) = v857;
  v877 = *(unsigned int *)(a1 + 52);
  v878 = (void *)operator new[]();
  v879 = v878;
  if ((int)v877 >= 1)
    bzero(v878, 4 * v877);
  *(_QWORD *)(a1 + 1544) = v879;
  v880 = *(char **)(a1 + 2632);
  v881 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v880 >= v881)
  {
    v883 = *v5;
    v884 = v880 - *v5;
    v885 = v884 >> 3;
    v886 = (v884 >> 3) + 1;
    if (!(v886 >> 61))
    {
      v887 = v881 - (_QWORD)v883;
      if (v887 >> 2 > v886)
        v886 = v887 >> 2;
      if ((unint64_t)v887 >= 0x7FFFFFFFFFFFFFF8)
        v888 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v888 = v886;
      if (!v888)
      {
        v889 = 0;
        v890 = (_QWORD *)(8 * v885);
        v891 = 0;
        *(_QWORD *)(8 * v885) = v879;
        v882 = 8 * v885 + 8;
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
          goto LABEL_861;
        goto LABEL_1696;
      }
      if (!(v888 >> 61))
      {
        v889 = operator new(8 * v888);
        v890 = &v889[8 * v885];
        v891 = &v889[8 * v888];
        *v890 = v879;
        v882 = (uint64_t)(v890 + 1);
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
        {
LABEL_861:
          v893 = (unint64_t)(v892 - 8);
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v893 < 0x58)
            goto LABEL_1731;
          if ((unint64_t)(v880 - v889 - v884) < 0x20)
            goto LABEL_1731;
          v894 = (v893 >> 3) + 1;
          v895 = 8 * (v894 & 0x3FFFFFFFFFFFFFFCLL);
          v896 = &v880[-v895];
          v890 = (_QWORD *)((char *)v890 - v895);
          v897 = &v889[8 * v885 - 16];
          v898 = v880 - 16;
          v899 = v894 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v900 = *(_OWORD *)v898;
            *(v897 - 1) = *((_OWORD *)v898 - 1);
            *v897 = v900;
            v897 -= 2;
            v898 -= 32;
            v899 -= 4;
          }
          while (v899);
          v880 = v896;
          if (v894 != (v894 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1731:
            do
            {
              v901 = *((_QWORD *)v880 - 1);
              v880 -= 8;
              *--v890 = v901;
            }
            while (v880 != v883);
          }
          v880 = *v5;
          *(_QWORD *)(a1 + 2624) = v890;
          *(_QWORD *)(a1 + 2632) = v882;
          *(_QWORD *)(a1 + 2640) = v891;
          if (!v880)
            goto LABEL_869;
LABEL_868:
          operator delete(v880);
          goto LABEL_869;
        }
LABEL_1696:
        p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v890;
        *(_QWORD *)(a1 + 2632) = v882;
        *(_QWORD *)(a1 + 2640) = v891;
        if (!v880)
          goto LABEL_869;
        goto LABEL_868;
      }
LABEL_1699:
      sub_19C07C7FC();
    }
LABEL_1698:
    sub_19C07DA0C();
  }
  *(_QWORD *)v880 = v879;
  v882 = (uint64_t)(v880 + 8);
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
LABEL_869:
  *(_QWORD *)(a1 + 2632) = v882;
LABEL_870:
  LODWORD(v902) = *((_DWORD *)p_vtable + 602);
  if (*(_BYTE *)(a1 + 2692))
  {
    v903 = (int)v902;
    v904 = *(_QWORD *)(a1 + 88);
    v905 = (*(_QWORD *)(a1 + 96) - v904) >> 3;
    if ((int)v902 <= v905)
    {
      if ((int)v902 < v905)
        *(_QWORD *)(a1 + 96) = v904 + 8 * (int)v902;
    }
    else
    {
      sub_19C098930((void **)(a1 + 88), (int)v902 - v905);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
      v903 = (int)v902;
    }
    v906 = *(_QWORD *)(a1 + 112);
    v907 = (*(_QWORD *)(a1 + 120) - v906) >> 3;
    if (v903 <= v907)
    {
      if (v903 < v907)
        *(_QWORD *)(a1 + 120) = v906 + 8 * v903;
    }
    else
    {
      sub_19C098930((void **)(a1 + 112), v903 - v907);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
    }
  }
  v908 = *(_QWORD *)(a1 + 184);
  v902 = (int)v902;
  v909 = (*(_QWORD *)(a1 + 192) - v908) >> 3;
  if ((int)v902 <= v909)
  {
    if ((int)v902 < v909)
      *(_QWORD *)(a1 + 192) = v908 + 8 * (int)v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), (int)v902 - v909);
    v902 = *((int *)p_vtable + 602);
  }
  v910 = *(_QWORD *)(a1 + 160);
  v911 = (*(_QWORD *)(a1 + 168) - v910) >> 3;
  if (v902 <= v911)
  {
    if (v902 < v911)
      *(_QWORD *)(a1 + 168) = v910 + 8 * v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v902 - v911);
  }
  v912 = *(_QWORD *)(a1 + 64);
  v913 = (*(_QWORD *)(a1 + 72) - v912) >> 3;
  if ((int)v1636 <= v913)
  {
    if ((int)v1636 < v913)
      *(_QWORD *)(a1 + 72) = v912 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), (int)v1636 - v913);
  }
  v914 = *(_QWORD *)(a1 + 136);
  v915 = (*(_QWORD *)(a1 + 144) - v914) >> 3;
  if ((int)v1636 <= v915)
  {
    if ((int)v1636 < v915)
      *(_QWORD *)(a1 + 144) = v914 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), (int)v1636 - v915);
  }
  v917 = *(_QWORD *)(a1 + 208);
  v916 = *(_QWORD *)(a1 + 216);
  v918 = *((int *)p_vtable + 602);
  v919 = 0xAAAAAAAAAAAAAAABLL * ((v916 - v917) >> 3);
  if (v918 <= v919)
  {
    if (v918 < v919)
    {
      v920 = v917 + 24 * (int)v918;
      if (v916 != v920)
      {
        v921 = *(_QWORD *)(a1 + 216);
        do
        {
          v923 = *(void **)(v921 - 24);
          v921 -= 24;
          v922 = v923;
          if (v923)
          {
            *(_QWORD *)(v916 - 16) = v922;
            operator delete(v922);
          }
          v916 = v921;
        }
        while (v921 != v920);
      }
      *(_QWORD *)(a1 + 216) = v920;
      p_vtable = MLPNDArrayLossLabels.vtable;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v918 - v919);
  }
  if (*(_BYTE *)(a1 + 2692))
  {
    v924 = (int)v1635;
    v925 = *(_QWORD *)(a1 + 640);
    v926 = (*(_QWORD *)(a1 + 648) - v925) >> 3;
    if ((int)v1635 <= v926)
    {
      if ((int)v1635 < v926)
        *(_QWORD *)(a1 + 648) = v925 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 640), (int)v1635 - v926);
    }
    v927 = *(_QWORD *)(a1 + 664);
    v928 = (*(_QWORD *)(a1 + 672) - v927) >> 3;
    if ((int)v1635 <= v928)
    {
      if ((int)v1635 < v928)
        *(_QWORD *)(a1 + 672) = v927 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 664), (int)v1635 - v928);
    }
    v929 = *(_QWORD *)(a1 + 688);
    v930 = (*(_QWORD *)(a1 + 696) - v929) >> 3;
    if ((int)v1635 <= v930)
    {
      if ((int)v1635 < v930)
        *(_QWORD *)(a1 + 696) = v929 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 688), (int)v1635 - v930);
    }
    v931 = *(_QWORD *)(a1 + 712);
    v932 = (*(_QWORD *)(a1 + 720) - v931) >> 3;
    if ((int)v1635 <= v932)
    {
      if ((int)v1635 < v932)
        *(_QWORD *)(a1 + 720) = v931 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 712), (int)v1635 - v932);
    }
    v933 = *(_QWORD *)(a1 + 544);
    v934 = (*(_QWORD *)(a1 + 552) - v933) >> 3;
    if ((int)v1635 <= v934)
    {
      if ((int)v1635 < v934)
        *(_QWORD *)(a1 + 552) = v933 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 544), (int)v1635 - v934);
    }
    v935 = *(_QWORD *)(a1 + 568);
    v936 = (*(_QWORD *)(a1 + 576) - v935) >> 3;
    if ((int)v1635 <= v936)
    {
      if ((int)v1635 < v936)
        *(_QWORD *)(a1 + 576) = v935 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 568), (int)v1635 - v936);
    }
    v937 = *(_QWORD *)(a1 + 592);
    v938 = (*(_QWORD *)(a1 + 600) - v937) >> 3;
    if ((int)v1635 <= v938)
    {
      if ((int)v1635 < v938)
        *(_QWORD *)(a1 + 600) = v937 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 592), (int)v1635 - v938);
    }
    v939 = *(_QWORD *)(a1 + 616);
    v940 = (*(_QWORD *)(a1 + 624) - v939) >> 3;
    if ((int)v1635 <= v940)
    {
      if ((int)v1635 < v940)
        *(_QWORD *)(a1 + 624) = v939 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 616), (int)v1635 - v940);
    }
  }
  else
  {
    v924 = (int)v1635;
  }
  v941 = *(_QWORD *)(a1 + 448);
  v942 = (*(_QWORD *)(a1 + 456) - v941) >> 3;
  if (v924 <= v942)
  {
    if (v924 < v942)
      *(_QWORD *)(a1 + 456) = v941 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), v924 - v942);
  }
  v943 = *(_QWORD *)(a1 + 472);
  v944 = (*(_QWORD *)(a1 + 480) - v943) >> 3;
  if (v924 <= v944)
  {
    if (v924 < v944)
      *(_QWORD *)(a1 + 480) = v943 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v924 - v944);
  }
  v945 = *(_QWORD *)(a1 + 496);
  v946 = (*(_QWORD *)(a1 + 504) - v945) >> 3;
  if (v924 <= v946)
  {
    if (v924 < v946)
      *(_QWORD *)(a1 + 504) = v945 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v924 - v946);
  }
  v947 = *(_QWORD *)(a1 + 520);
  v948 = (*(_QWORD *)(a1 + 528) - v947) >> 3;
  if (v924 <= v948)
  {
    if (v924 < v948)
      *(_QWORD *)(a1 + 528) = v947 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 520), v924 - v948);
  }
  v949 = *(_QWORD *)(a1 + 352);
  v950 = (*(_QWORD *)(a1 + 360) - v949) >> 3;
  if (v924 <= v950)
  {
    if (v924 < v950)
      *(_QWORD *)(a1 + 360) = v949 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 352), v924 - v950);
  }
  v951 = *(_QWORD *)(a1 + 376);
  v952 = (*(_QWORD *)(a1 + 384) - v951) >> 3;
  if (v924 <= v952)
  {
    if (v924 < v952)
      *(_QWORD *)(a1 + 384) = v951 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v924 - v952);
  }
  v953 = *(_QWORD *)(a1 + 400);
  v954 = (*(_QWORD *)(a1 + 408) - v953) >> 3;
  if (v924 <= v954)
  {
    if (v924 < v954)
      *(_QWORD *)(a1 + 408) = v953 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v924 - v954);
  }
  v955 = *(_QWORD *)(a1 + 424);
  v956 = (*(_QWORD *)(a1 + 432) - v955) >> 3;
  if (v924 <= v956)
  {
    if (v924 < v956)
      *(_QWORD *)(a1 + 432) = v955 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v924 - v956);
  }
  if (!*(_BYTE *)(a1 + 1696))
  {
    v957 = *((int *)p_vtable + 602);
    v958 = *(_QWORD *)(a1 + 960);
    v959 = (*(_QWORD *)(a1 + 968) - v958) >> 3;
    if (v957 <= v959)
    {
      if (v957 < v959)
        *(_QWORD *)(a1 + 968) = v958 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 960), v957 - v959);
      v957 = *((int *)p_vtable + 602);
    }
    v960 = *(_QWORD *)(a1 + 840);
    v961 = (*(_QWORD *)(a1 + 848) - v960) >> 3;
    if (v957 <= v961)
    {
      if (v957 < v961)
        *(_QWORD *)(a1 + 848) = v960 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 840), v957 - v961);
      v957 = *((int *)p_vtable + 602);
    }
    v962 = *(_QWORD *)(a1 + 816);
    v963 = (*(_QWORD *)(a1 + 824) - v962) >> 3;
    if (v957 <= v963)
    {
      if (v957 < v963)
        *(_QWORD *)(a1 + 824) = v962 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 816), v957 - v963);
      v957 = *((int *)p_vtable + 602);
    }
    v964 = *(_QWORD *)(a1 + 912);
    v965 = (*(_QWORD *)(a1 + 920) - v964) >> 3;
    if (v957 <= v965)
    {
      if (v957 < v965)
        *(_QWORD *)(a1 + 920) = v964 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 912), v957 - v965);
      v957 = *((int *)p_vtable + 602);
    }
    v966 = *(_QWORD *)(a1 + 888);
    v967 = (*(_QWORD *)(a1 + 896) - v966) >> 3;
    if (v957 <= v967)
    {
      if (v957 < v967)
        *(_QWORD *)(a1 + 896) = v966 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 888), v957 - v967);
      v957 = *((int *)p_vtable + 602);
    }
    v968 = *(_QWORD *)(a1 + 864);
    v969 = (*(_QWORD *)(a1 + 872) - v968) >> 3;
    if (v957 <= v969)
    {
      if (v957 < v969)
        *(_QWORD *)(a1 + 872) = v968 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 864), v957 - v969);
      v957 = *((int *)p_vtable + 602);
    }
    v970 = *(_QWORD *)(a1 + 936);
    v971 = (*(_QWORD *)(a1 + 944) - v970) >> 3;
    if (v957 <= v971)
    {
      if (v957 < v971)
        *(_QWORD *)(a1 + 944) = v970 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 936), v957 - v971);
    }
  }
  if ((int)v1636 >= 1)
  {
    v972 = 0;
    while (1)
    {
      v974 = *(unsigned int *)(a1 + 48);
      v975 = (void *)operator new[]();
      v976 = v975;
      if ((int)v974 >= 1)
        bzero(v975, 4 * v974);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v972) = v976;
      v977 = *(char **)(a1 + 2632);
      v978 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v977 < v978)
      {
        *(_QWORD *)v977 = v976;
        v979 = (uint64_t)(v977 + 8);
        goto LABEL_1027;
      }
      v980 = *v5;
      v981 = v977 - *v5;
      v982 = v981 >> 3;
      v983 = (v981 >> 3) + 1;
      if (v983 >> 61)
        goto LABEL_1698;
      v984 = v978 - (_QWORD)v980;
      if (v984 >> 2 > v983)
        v983 = v984 >> 2;
      v985 = (unint64_t)v984 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v983;
      if (v985)
        break;
      v986 = 0;
      v987 = (_QWORD *)(8 * v982);
      *(_QWORD *)(8 * v982) = v976;
      v979 = 8 * v982 + 8;
      if (v977 != v980)
        goto LABEL_1018;
LABEL_1025:
      *(_QWORD *)(a1 + 2624) = v987;
      *(_QWORD *)(a1 + 2632) = v979;
      *(_QWORD *)(a1 + 2640) = &v986[8 * v985];
      if (v977)
        operator delete(v977);
LABEL_1027:
      *(_QWORD *)(a1 + 2632) = v979;
      v997 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v998 = (void *)operator new[]();
      bzero(v998, 4 * v997);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v972) = v998;
      v999 = *(char **)(a1 + 2632);
      v1000 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v999 >= v1000)
      {
        v1001 = *v5;
        v1002 = v999 - *v5;
        v1003 = v1002 >> 3;
        v1004 = (v1002 >> 3) + 1;
        if (v1004 >> 61)
          goto LABEL_1698;
        v1005 = v1000 - (_QWORD)v1001;
        if (v1005 >> 2 > v1004)
          v1004 = v1005 >> 2;
        if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFF8)
          v1006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1006 = v1004;
        if (v1006)
        {
          if (v1006 >> 61)
            goto LABEL_1699;
          v1007 = operator new(8 * v1006);
          v1008 = &v1007[8 * v1003];
          *v1008 = v998;
          v973 = (uint64_t)(v1008 + 1);
          if (v999 == v1001)
            goto LABEL_1046;
LABEL_1039:
          v1009 = v999 - 8 - v1001;
          if (v1009 < 0x58)
            goto LABEL_1732;
          if ((unint64_t)(v999 - &v1007[v1002]) < 0x20)
            goto LABEL_1732;
          v1010 = (v1009 >> 3) + 1;
          v1011 = 8 * (v1010 & 0x3FFFFFFFFFFFFFFCLL);
          v1012 = &v999[-v1011];
          v1008 = (_QWORD *)((char *)v1008 - v1011);
          v1013 = &v1007[8 * v1003 - 16];
          v1014 = v999 - 16;
          v1015 = v1010 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1016 = *(_OWORD *)v1014;
            *(v1013 - 1) = *((_OWORD *)v1014 - 1);
            *v1013 = v1016;
            v1013 -= 2;
            v1014 -= 32;
            v1015 -= 4;
          }
          while (v1015);
          v999 = v1012;
          if (v1010 != (v1010 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1732:
            do
            {
              v1017 = *((_QWORD *)v999 - 1);
              v999 -= 8;
              *--v1008 = v1017;
            }
            while (v999 != v1001);
          }
          v999 = *v5;
        }
        else
        {
          v1007 = 0;
          v1008 = (_QWORD *)(8 * v1003);
          *(_QWORD *)(8 * v1003) = v998;
          v973 = 8 * v1003 + 8;
          if (v999 != v1001)
            goto LABEL_1039;
        }
LABEL_1046:
        *(_QWORD *)(a1 + 2624) = v1008;
        *(_QWORD *)(a1 + 2632) = v973;
        *(_QWORD *)(a1 + 2640) = &v1007[8 * v1006];
        if (v999)
          operator delete(v999);
        goto LABEL_1002;
      }
      *(_QWORD *)v999 = v998;
      v973 = (uint64_t)(v999 + 8);
LABEL_1002:
      *(_QWORD *)(a1 + 2632) = v973;
      if (++v972 == v1636)
        goto LABEL_1048;
    }
    if (v985 >> 61)
      goto LABEL_1699;
    v986 = operator new(8 * v985);
    v987 = &v986[8 * v982];
    *v987 = v976;
    v979 = (uint64_t)(v987 + 1);
    if (v977 == v980)
      goto LABEL_1025;
LABEL_1018:
    v988 = v977 - 8 - v980;
    if (v988 < 0x58)
      goto LABEL_1733;
    if ((unint64_t)(v977 - &v986[v981]) < 0x20)
      goto LABEL_1733;
    v989 = (v988 >> 3) + 1;
    v990 = 8 * (v989 & 0x3FFFFFFFFFFFFFFCLL);
    v991 = &v977[-v990];
    v987 = (_QWORD *)((char *)v987 - v990);
    v992 = &v986[8 * v982 - 16];
    v993 = v977 - 16;
    v994 = v989 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v995 = *(_OWORD *)v993;
      *(v992 - 1) = *((_OWORD *)v993 - 1);
      *v992 = v995;
      v992 -= 2;
      v993 -= 32;
      v994 -= 4;
    }
    while (v994);
    v977 = v991;
    if (v989 != (v989 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1733:
      do
      {
        v996 = *((_QWORD *)v977 - 1);
        v977 -= 8;
        *--v987 = v996;
      }
      while (v977 != v980);
    }
    v977 = *v5;
    goto LABEL_1025;
  }
LABEL_1048:
  if ((int)v1635 >= 1)
  {
    v1018 = 0;
    while (1)
    {
      if (!*(_BYTE *)(a1 + 2692))
        goto LABEL_1246;
      v1020 = *(unsigned int *)(a1 + 52);
      v1021 = (void *)operator new[]();
      v1022 = v1021;
      if ((int)v1020 >= 1)
        bzero(v1021, 4 * v1020);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v1018) = v1022;
      v1023 = *(char **)(a1 + 2632);
      v1024 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1023 < v1024)
      {
        *(_QWORD *)v1023 = v1022;
        v1025 = (uint64_t)(v1023 + 8);
        goto LABEL_1077;
      }
      v1026 = *v5;
      v1027 = v1023 - *v5;
      v1028 = v1027 >> 3;
      v1029 = (v1027 >> 3) + 1;
      if (v1029 >> 61)
        goto LABEL_1698;
      v1030 = v1024 - (_QWORD)v1026;
      if (v1030 >> 2 > v1029)
        v1029 = v1030 >> 2;
      v1031 = (unint64_t)v1030 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v1029;
      if (v1031)
        break;
      v1032 = 0;
      v1033 = (_QWORD *)(8 * v1028);
      *(_QWORD *)(8 * v1028) = v1022;
      v1025 = 8 * v1028 + 8;
      if (v1023 != v1026)
        goto LABEL_1068;
LABEL_1075:
      *(_QWORD *)(a1 + 2624) = v1033;
      *(_QWORD *)(a1 + 2632) = v1025;
      *(_QWORD *)(a1 + 2640) = &v1032[8 * v1031];
      if (v1023)
        operator delete(v1023);
LABEL_1077:
      *(_QWORD *)(a1 + 2632) = v1025;
      v1043 = *(unsigned int *)(a1 + 52);
      v1044 = (void *)operator new[]();
      v1045 = v1044;
      if ((int)v1043 >= 1)
        bzero(v1044, 4 * v1043);
      *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v1018) = v1045;
      v1046 = *(char **)(a1 + 2632);
      v1047 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1046 < v1047)
      {
        *(_QWORD *)v1046 = v1045;
        v1048 = (uint64_t)(v1046 + 8);
        goto LABEL_1101;
      }
      v1049 = *v5;
      v1050 = v1046 - *v5;
      v1051 = v1050 >> 3;
      v1052 = (v1050 >> 3) + 1;
      if (v1052 >> 61)
        goto LABEL_1698;
      v1053 = v1047 - (_QWORD)v1049;
      if (v1053 >> 2 > v1052)
        v1052 = v1053 >> 2;
      if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFF8)
        v1054 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1054 = v1052;
      if (v1054)
      {
        if (v1054 >> 61)
          goto LABEL_1699;
        v1055 = operator new(8 * v1054);
        v1056 = &v1055[8 * v1051];
        *v1056 = v1045;
        v1048 = (uint64_t)(v1056 + 1);
        if (v1046 == v1049)
          goto LABEL_1099;
LABEL_1092:
        v1057 = v1046 - 8 - v1049;
        if (v1057 < 0x58)
          goto LABEL_1734;
        if ((unint64_t)(v1046 - &v1055[v1050]) < 0x20)
          goto LABEL_1734;
        v1058 = (v1057 >> 3) + 1;
        v1059 = 8 * (v1058 & 0x3FFFFFFFFFFFFFFCLL);
        v1060 = &v1046[-v1059];
        v1056 = (_QWORD *)((char *)v1056 - v1059);
        v1061 = &v1055[8 * v1051 - 16];
        v1062 = v1046 - 16;
        v1063 = v1058 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1064 = *(_OWORD *)v1062;
          *(v1061 - 1) = *((_OWORD *)v1062 - 1);
          *v1061 = v1064;
          v1061 -= 2;
          v1062 -= 32;
          v1063 -= 4;
        }
        while (v1063);
        v1046 = v1060;
        if (v1058 != (v1058 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1734:
          do
          {
            v1065 = *((_QWORD *)v1046 - 1);
            v1046 -= 8;
            *--v1056 = v1065;
          }
          while (v1046 != v1049);
        }
        v1046 = *v5;
        goto LABEL_1099;
      }
      v1055 = 0;
      v1056 = (_QWORD *)(8 * v1051);
      *(_QWORD *)(8 * v1051) = v1045;
      v1048 = 8 * v1051 + 8;
      if (v1046 != v1049)
        goto LABEL_1092;
LABEL_1099:
      *(_QWORD *)(a1 + 2624) = v1056;
      *(_QWORD *)(a1 + 2632) = v1048;
      *(_QWORD *)(a1 + 2640) = &v1055[8 * v1054];
      if (v1046)
        operator delete(v1046);
LABEL_1101:
      *(_QWORD *)(a1 + 2632) = v1048;
      v1066 = *(unsigned int *)(a1 + 52);
      v1067 = (void *)operator new[]();
      v1068 = v1067;
      if ((int)v1066 >= 1)
        bzero(v1067, 4 * v1066);
      *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * v1018) = v1068;
      v1069 = *(char **)(a1 + 2632);
      v1070 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1069 < v1070)
      {
        *(_QWORD *)v1069 = v1068;
        v1071 = (uint64_t)(v1069 + 8);
        goto LABEL_1125;
      }
      v1072 = *v5;
      v1073 = v1069 - *v5;
      v1074 = v1073 >> 3;
      v1075 = (v1073 >> 3) + 1;
      if (v1075 >> 61)
        goto LABEL_1698;
      v1076 = v1070 - (_QWORD)v1072;
      if (v1076 >> 2 > v1075)
        v1075 = v1076 >> 2;
      if ((unint64_t)v1076 >= 0x7FFFFFFFFFFFFFF8)
        v1077 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1077 = v1075;
      if (v1077)
      {
        if (v1077 >> 61)
          goto LABEL_1699;
        v1078 = operator new(8 * v1077);
        v1079 = &v1078[8 * v1074];
        *v1079 = v1068;
        v1071 = (uint64_t)(v1079 + 1);
        if (v1069 == v1072)
          goto LABEL_1123;
LABEL_1116:
        v1080 = v1069 - 8 - v1072;
        if (v1080 < 0x58)
          goto LABEL_1735;
        if ((unint64_t)(v1069 - &v1078[v1073]) < 0x20)
          goto LABEL_1735;
        v1081 = (v1080 >> 3) + 1;
        v1082 = 8 * (v1081 & 0x3FFFFFFFFFFFFFFCLL);
        v1083 = &v1069[-v1082];
        v1079 = (_QWORD *)((char *)v1079 - v1082);
        v1084 = &v1078[8 * v1074 - 16];
        v1085 = v1069 - 16;
        v1086 = v1081 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1087 = *(_OWORD *)v1085;
          *(v1084 - 1) = *((_OWORD *)v1085 - 1);
          *v1084 = v1087;
          v1084 -= 2;
          v1085 -= 32;
          v1086 -= 4;
        }
        while (v1086);
        v1069 = v1083;
        if (v1081 != (v1081 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1735:
          do
          {
            v1088 = *((_QWORD *)v1069 - 1);
            v1069 -= 8;
            *--v1079 = v1088;
          }
          while (v1069 != v1072);
        }
        v1069 = *v5;
        goto LABEL_1123;
      }
      v1078 = 0;
      v1079 = (_QWORD *)(8 * v1074);
      *(_QWORD *)(8 * v1074) = v1068;
      v1071 = 8 * v1074 + 8;
      if (v1069 != v1072)
        goto LABEL_1116;
LABEL_1123:
      *(_QWORD *)(a1 + 2624) = v1079;
      *(_QWORD *)(a1 + 2632) = v1071;
      *(_QWORD *)(a1 + 2640) = &v1078[8 * v1077];
      if (v1069)
        operator delete(v1069);
LABEL_1125:
      *(_QWORD *)(a1 + 2632) = v1071;
      v1089 = *(unsigned int *)(a1 + 52);
      v1090 = (void *)operator new[]();
      v1091 = v1090;
      if ((int)v1089 >= 1)
        bzero(v1090, 4 * v1089);
      *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v1018) = v1091;
      v1092 = *(char **)(a1 + 2632);
      v1093 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1092 < v1093)
      {
        *(_QWORD *)v1092 = v1091;
        v1094 = (uint64_t)(v1092 + 8);
        goto LABEL_1149;
      }
      v1095 = *v5;
      v1096 = v1092 - *v5;
      v1097 = v1096 >> 3;
      v1098 = (v1096 >> 3) + 1;
      if (v1098 >> 61)
        goto LABEL_1698;
      v1099 = v1093 - (_QWORD)v1095;
      if (v1099 >> 2 > v1098)
        v1098 = v1099 >> 2;
      if ((unint64_t)v1099 >= 0x7FFFFFFFFFFFFFF8)
        v1100 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1100 = v1098;
      if (v1100)
      {
        if (v1100 >> 61)
          goto LABEL_1699;
        v1101 = operator new(8 * v1100);
        v1102 = &v1101[8 * v1097];
        *v1102 = v1091;
        v1094 = (uint64_t)(v1102 + 1);
        if (v1092 == v1095)
          goto LABEL_1147;
LABEL_1140:
        v1103 = v1092 - 8 - v1095;
        if (v1103 < 0x58)
          goto LABEL_1736;
        if ((unint64_t)(v1092 - &v1101[v1096]) < 0x20)
          goto LABEL_1736;
        v1104 = (v1103 >> 3) + 1;
        v1105 = 8 * (v1104 & 0x3FFFFFFFFFFFFFFCLL);
        v1106 = &v1092[-v1105];
        v1102 = (_QWORD *)((char *)v1102 - v1105);
        v1107 = &v1101[8 * v1097 - 16];
        v1108 = v1092 - 16;
        v1109 = v1104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1110 = *(_OWORD *)v1108;
          *(v1107 - 1) = *((_OWORD *)v1108 - 1);
          *v1107 = v1110;
          v1107 -= 2;
          v1108 -= 32;
          v1109 -= 4;
        }
        while (v1109);
        v1092 = v1106;
        if (v1104 != (v1104 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1736:
          do
          {
            v1111 = *((_QWORD *)v1092 - 1);
            v1092 -= 8;
            *--v1102 = v1111;
          }
          while (v1092 != v1095);
        }
        v1092 = *v5;
        goto LABEL_1147;
      }
      v1101 = 0;
      v1102 = (_QWORD *)(8 * v1097);
      *(_QWORD *)(8 * v1097) = v1091;
      v1094 = 8 * v1097 + 8;
      if (v1092 != v1095)
        goto LABEL_1140;
LABEL_1147:
      *(_QWORD *)(a1 + 2624) = v1102;
      *(_QWORD *)(a1 + 2632) = v1094;
      *(_QWORD *)(a1 + 2640) = &v1101[8 * v1100];
      if (v1092)
        operator delete(v1092);
LABEL_1149:
      *(_QWORD *)(a1 + 2632) = v1094;
      v1112 = *(unsigned int *)(a1 + 52);
      v1113 = (void *)operator new[]();
      v1114 = v1113;
      if ((int)v1112 >= 1)
        bzero(v1113, 4 * v1112);
      *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * v1018) = v1114;
      v1115 = *(char **)(a1 + 2632);
      v1116 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1115 < v1116)
      {
        *(_QWORD *)v1115 = v1114;
        v1117 = (uint64_t)(v1115 + 8);
        goto LABEL_1173;
      }
      v1118 = *v5;
      v1119 = v1115 - *v5;
      v1120 = v1119 >> 3;
      v1121 = (v1119 >> 3) + 1;
      if (v1121 >> 61)
        goto LABEL_1698;
      v1122 = v1116 - (_QWORD)v1118;
      if (v1122 >> 2 > v1121)
        v1121 = v1122 >> 2;
      if ((unint64_t)v1122 >= 0x7FFFFFFFFFFFFFF8)
        v1123 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1123 = v1121;
      if (v1123)
      {
        if (v1123 >> 61)
          goto LABEL_1699;
        v1124 = operator new(8 * v1123);
        v1125 = &v1124[8 * v1120];
        *v1125 = v1114;
        v1117 = (uint64_t)(v1125 + 1);
        if (v1115 == v1118)
          goto LABEL_1171;
LABEL_1164:
        v1126 = v1115 - 8 - v1118;
        if (v1126 < 0x58)
          goto LABEL_1737;
        if ((unint64_t)(v1115 - &v1124[v1119]) < 0x20)
          goto LABEL_1737;
        v1127 = (v1126 >> 3) + 1;
        v1128 = 8 * (v1127 & 0x3FFFFFFFFFFFFFFCLL);
        v1129 = &v1115[-v1128];
        v1125 = (_QWORD *)((char *)v1125 - v1128);
        v1130 = &v1124[8 * v1120 - 16];
        v1131 = v1115 - 16;
        v1132 = v1127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1133 = *(_OWORD *)v1131;
          *(v1130 - 1) = *((_OWORD *)v1131 - 1);
          *v1130 = v1133;
          v1130 -= 2;
          v1131 -= 32;
          v1132 -= 4;
        }
        while (v1132);
        v1115 = v1129;
        if (v1127 != (v1127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1737:
          do
          {
            v1134 = *((_QWORD *)v1115 - 1);
            v1115 -= 8;
            *--v1125 = v1134;
          }
          while (v1115 != v1118);
        }
        v1115 = *v5;
        goto LABEL_1171;
      }
      v1124 = 0;
      v1125 = (_QWORD *)(8 * v1120);
      *(_QWORD *)(8 * v1120) = v1114;
      v1117 = 8 * v1120 + 8;
      if (v1115 != v1118)
        goto LABEL_1164;
LABEL_1171:
      *(_QWORD *)(a1 + 2624) = v1125;
      *(_QWORD *)(a1 + 2632) = v1117;
      *(_QWORD *)(a1 + 2640) = &v1124[8 * v1123];
      if (v1115)
        operator delete(v1115);
LABEL_1173:
      *(_QWORD *)(a1 + 2632) = v1117;
      v1135 = *(unsigned int *)(a1 + 52);
      v1136 = (void *)operator new[]();
      v1137 = v1136;
      if ((int)v1135 >= 1)
        bzero(v1136, 4 * v1135);
      *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v1018) = v1137;
      v1138 = *(char **)(a1 + 2632);
      v1139 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1138 < v1139)
      {
        *(_QWORD *)v1138 = v1137;
        v1140 = (uint64_t)(v1138 + 8);
        goto LABEL_1197;
      }
      v1141 = *v5;
      v1142 = v1138 - *v5;
      v1143 = v1142 >> 3;
      v1144 = (v1142 >> 3) + 1;
      if (v1144 >> 61)
        goto LABEL_1698;
      v1145 = v1139 - (_QWORD)v1141;
      if (v1145 >> 2 > v1144)
        v1144 = v1145 >> 2;
      if ((unint64_t)v1145 >= 0x7FFFFFFFFFFFFFF8)
        v1146 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1146 = v1144;
      if (v1146)
      {
        if (v1146 >> 61)
          goto LABEL_1699;
        v1147 = operator new(8 * v1146);
        v1148 = &v1147[8 * v1143];
        *v1148 = v1137;
        v1140 = (uint64_t)(v1148 + 1);
        if (v1138 == v1141)
          goto LABEL_1195;
LABEL_1188:
        v1149 = v1138 - 8 - v1141;
        if (v1149 < 0x58)
          goto LABEL_1738;
        if ((unint64_t)(v1138 - &v1147[v1142]) < 0x20)
          goto LABEL_1738;
        v1150 = (v1149 >> 3) + 1;
        v1151 = 8 * (v1150 & 0x3FFFFFFFFFFFFFFCLL);
        v1152 = &v1138[-v1151];
        v1148 = (_QWORD *)((char *)v1148 - v1151);
        v1153 = &v1147[8 * v1143 - 16];
        v1154 = v1138 - 16;
        v1155 = v1150 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1156 = *(_OWORD *)v1154;
          *(v1153 - 1) = *((_OWORD *)v1154 - 1);
          *v1153 = v1156;
          v1153 -= 2;
          v1154 -= 32;
          v1155 -= 4;
        }
        while (v1155);
        v1138 = v1152;
        if (v1150 != (v1150 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1738:
          do
          {
            v1157 = *((_QWORD *)v1138 - 1);
            v1138 -= 8;
            *--v1148 = v1157;
          }
          while (v1138 != v1141);
        }
        v1138 = *v5;
        goto LABEL_1195;
      }
      v1147 = 0;
      v1148 = (_QWORD *)(8 * v1143);
      *(_QWORD *)(8 * v1143) = v1137;
      v1140 = 8 * v1143 + 8;
      if (v1138 != v1141)
        goto LABEL_1188;
LABEL_1195:
      *(_QWORD *)(a1 + 2624) = v1148;
      *(_QWORD *)(a1 + 2632) = v1140;
      *(_QWORD *)(a1 + 2640) = &v1147[8 * v1146];
      if (v1138)
        operator delete(v1138);
LABEL_1197:
      *(_QWORD *)(a1 + 2632) = v1140;
      v1158 = *(unsigned int *)(a1 + 52);
      v1159 = (void *)operator new[]();
      v1160 = v1159;
      if ((int)v1158 >= 1)
        bzero(v1159, 4 * v1158);
      *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * v1018) = v1160;
      v1161 = *(char **)(a1 + 2632);
      v1162 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1161 < v1162)
      {
        *(_QWORD *)v1161 = v1160;
        v1163 = (uint64_t)(v1161 + 8);
        goto LABEL_1221;
      }
      v1164 = *v5;
      v1165 = v1161 - *v5;
      v1166 = v1165 >> 3;
      v1167 = (v1165 >> 3) + 1;
      if (v1167 >> 61)
        goto LABEL_1698;
      v1168 = v1162 - (_QWORD)v1164;
      if (v1168 >> 2 > v1167)
        v1167 = v1168 >> 2;
      if ((unint64_t)v1168 >= 0x7FFFFFFFFFFFFFF8)
        v1169 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1169 = v1167;
      if (v1169)
      {
        if (v1169 >> 61)
          goto LABEL_1699;
        v1170 = operator new(8 * v1169);
        v1171 = &v1170[8 * v1166];
        *v1171 = v1160;
        v1163 = (uint64_t)(v1171 + 1);
        if (v1161 == v1164)
          goto LABEL_1219;
LABEL_1212:
        v1172 = v1161 - 8 - v1164;
        if (v1172 < 0x58)
          goto LABEL_1739;
        if ((unint64_t)(v1161 - &v1170[v1165]) < 0x20)
          goto LABEL_1739;
        v1173 = (v1172 >> 3) + 1;
        v1174 = 8 * (v1173 & 0x3FFFFFFFFFFFFFFCLL);
        v1175 = &v1161[-v1174];
        v1171 = (_QWORD *)((char *)v1171 - v1174);
        v1176 = &v1170[8 * v1166 - 16];
        v1177 = v1161 - 16;
        v1178 = v1173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1179 = *(_OWORD *)v1177;
          *(v1176 - 1) = *((_OWORD *)v1177 - 1);
          *v1176 = v1179;
          v1176 -= 2;
          v1177 -= 32;
          v1178 -= 4;
        }
        while (v1178);
        v1161 = v1175;
        if (v1173 != (v1173 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1739:
          do
          {
            v1180 = *((_QWORD *)v1161 - 1);
            v1161 -= 8;
            *--v1171 = v1180;
          }
          while (v1161 != v1164);
        }
        v1161 = *v5;
        goto LABEL_1219;
      }
      v1170 = 0;
      v1171 = (_QWORD *)(8 * v1166);
      *(_QWORD *)(8 * v1166) = v1160;
      v1163 = 8 * v1166 + 8;
      if (v1161 != v1164)
        goto LABEL_1212;
LABEL_1219:
      *(_QWORD *)(a1 + 2624) = v1171;
      *(_QWORD *)(a1 + 2632) = v1163;
      *(_QWORD *)(a1 + 2640) = &v1170[8 * v1169];
      if (v1161)
        operator delete(v1161);
LABEL_1221:
      *(_QWORD *)(a1 + 2632) = v1163;
      v1181 = *(unsigned int *)(a1 + 52);
      v1182 = (void *)operator new[]();
      v1183 = v1182;
      if ((int)v1181 >= 1)
        bzero(v1182, 4 * v1181);
      *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * v1018) = v1183;
      v1184 = *(char **)(a1 + 2632);
      v1185 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1184 >= v1185)
      {
        v1187 = *v5;
        v1188 = v1184 - *v5;
        v1189 = v1188 >> 3;
        v1190 = (v1188 >> 3) + 1;
        if (v1190 >> 61)
          goto LABEL_1698;
        v1191 = v1185 - (_QWORD)v1187;
        if (v1191 >> 2 > v1190)
          v1190 = v1191 >> 2;
        if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFF8)
          v1192 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1192 = v1190;
        if (v1192)
        {
          if (v1192 >> 61)
            goto LABEL_1699;
          v1193 = operator new(8 * v1192);
          v1194 = &v1193[8 * v1189];
          *v1194 = v1183;
          v1186 = (uint64_t)(v1194 + 1);
          if (v1184 == v1187)
            goto LABEL_1243;
LABEL_1236:
          v1195 = v1184 - 8 - v1187;
          if (v1195 < 0x58)
            goto LABEL_1740;
          if ((unint64_t)(v1184 - &v1193[v1188]) < 0x20)
            goto LABEL_1740;
          v1196 = (v1195 >> 3) + 1;
          v1197 = 8 * (v1196 & 0x3FFFFFFFFFFFFFFCLL);
          v1198 = &v1184[-v1197];
          v1194 = (_QWORD *)((char *)v1194 - v1197);
          v1199 = &v1193[8 * v1189 - 16];
          v1200 = v1184 - 16;
          v1201 = v1196 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1202 = *(_OWORD *)v1200;
            *(v1199 - 1) = *((_OWORD *)v1200 - 1);
            *v1199 = v1202;
            v1199 -= 2;
            v1200 -= 32;
            v1201 -= 4;
          }
          while (v1201);
          v1184 = v1198;
          if (v1196 != (v1196 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1740:
            do
            {
              v1203 = *((_QWORD *)v1184 - 1);
              v1184 -= 8;
              *--v1194 = v1203;
            }
            while (v1184 != v1187);
          }
          v1184 = *v5;
        }
        else
        {
          v1193 = 0;
          v1194 = (_QWORD *)(8 * v1189);
          *(_QWORD *)(8 * v1189) = v1183;
          v1186 = 8 * v1189 + 8;
          if (v1184 != v1187)
            goto LABEL_1236;
        }
LABEL_1243:
        *(_QWORD *)(a1 + 2624) = v1194;
        *(_QWORD *)(a1 + 2632) = v1186;
        *(_QWORD *)(a1 + 2640) = &v1193[8 * v1192];
        if (v1184)
          operator delete(v1184);
        goto LABEL_1245;
      }
      *(_QWORD *)v1184 = v1183;
      v1186 = (uint64_t)(v1184 + 8);
LABEL_1245:
      *(_QWORD *)(a1 + 2632) = v1186;
LABEL_1246:
      v1204 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1205 = (void *)operator new[]();
      bzero(v1205, 4 * v1204);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v1018) = v1205;
      v1206 = *(char **)(a1 + 2632);
      v1207 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1206 < v1207)
      {
        *(_QWORD *)v1206 = v1205;
        v1208 = (uint64_t)(v1206 + 8);
        goto LABEL_1268;
      }
      v1209 = *v5;
      v1210 = v1206 - *v5;
      v1211 = v1210 >> 3;
      v1212 = (v1210 >> 3) + 1;
      if (v1212 >> 61)
        goto LABEL_1698;
      v1213 = v1207 - (_QWORD)v1209;
      if (v1213 >> 2 > v1212)
        v1212 = v1213 >> 2;
      if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFF8)
        v1214 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1214 = v1212;
      if (v1214)
      {
        if (v1214 >> 61)
          goto LABEL_1699;
        v1215 = operator new(8 * v1214);
        v1216 = &v1215[8 * v1211];
        *v1216 = v1205;
        v1208 = (uint64_t)(v1216 + 1);
        if (v1206 == v1209)
          goto LABEL_1266;
LABEL_1259:
        v1217 = v1206 - 8 - v1209;
        if (v1217 < 0x58)
          goto LABEL_1741;
        if ((unint64_t)(v1206 - &v1215[v1210]) < 0x20)
          goto LABEL_1741;
        v1218 = (v1217 >> 3) + 1;
        v1219 = 8 * (v1218 & 0x3FFFFFFFFFFFFFFCLL);
        v1220 = &v1206[-v1219];
        v1216 = (_QWORD *)((char *)v1216 - v1219);
        v1221 = &v1215[8 * v1211 - 16];
        v1222 = v1206 - 16;
        v1223 = v1218 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1224 = *(_OWORD *)v1222;
          *(v1221 - 1) = *((_OWORD *)v1222 - 1);
          *v1221 = v1224;
          v1221 -= 2;
          v1222 -= 32;
          v1223 -= 4;
        }
        while (v1223);
        v1206 = v1220;
        if (v1218 != (v1218 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1741:
          do
          {
            v1225 = *((_QWORD *)v1206 - 1);
            v1206 -= 8;
            *--v1216 = v1225;
          }
          while (v1206 != v1209);
        }
        v1206 = *v5;
        goto LABEL_1266;
      }
      v1215 = 0;
      v1216 = (_QWORD *)(8 * v1211);
      *(_QWORD *)(8 * v1211) = v1205;
      v1208 = 8 * v1211 + 8;
      if (v1206 != v1209)
        goto LABEL_1259;
LABEL_1266:
      *(_QWORD *)(a1 + 2624) = v1216;
      *(_QWORD *)(a1 + 2632) = v1208;
      *(_QWORD *)(a1 + 2640) = &v1215[8 * v1214];
      if (v1206)
        operator delete(v1206);
LABEL_1268:
      *(_QWORD *)(a1 + 2632) = v1208;
      v1226 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1227 = (void *)operator new[]();
      bzero(v1227, 4 * v1226);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v1018) = v1227;
      v1228 = *(char **)(a1 + 2632);
      v1229 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1228 < v1229)
      {
        *(_QWORD *)v1228 = v1227;
        v1230 = (uint64_t)(v1228 + 8);
        goto LABEL_1290;
      }
      v1231 = *v5;
      v1232 = v1228 - *v5;
      v1233 = v1232 >> 3;
      v1234 = (v1232 >> 3) + 1;
      if (v1234 >> 61)
        goto LABEL_1698;
      v1235 = v1229 - (_QWORD)v1231;
      if (v1235 >> 2 > v1234)
        v1234 = v1235 >> 2;
      if ((unint64_t)v1235 >= 0x7FFFFFFFFFFFFFF8)
        v1236 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1236 = v1234;
      if (v1236)
      {
        if (v1236 >> 61)
          goto LABEL_1699;
        v1237 = operator new(8 * v1236);
        v1238 = &v1237[8 * v1233];
        *v1238 = v1227;
        v1230 = (uint64_t)(v1238 + 1);
        if (v1228 == v1231)
          goto LABEL_1288;
LABEL_1281:
        v1239 = v1228 - 8 - v1231;
        if (v1239 < 0x58)
          goto LABEL_1742;
        if ((unint64_t)(v1228 - &v1237[v1232]) < 0x20)
          goto LABEL_1742;
        v1240 = (v1239 >> 3) + 1;
        v1241 = 8 * (v1240 & 0x3FFFFFFFFFFFFFFCLL);
        v1242 = &v1228[-v1241];
        v1238 = (_QWORD *)((char *)v1238 - v1241);
        v1243 = &v1237[8 * v1233 - 16];
        v1244 = v1228 - 16;
        v1245 = v1240 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1246 = *(_OWORD *)v1244;
          *(v1243 - 1) = *((_OWORD *)v1244 - 1);
          *v1243 = v1246;
          v1243 -= 2;
          v1244 -= 32;
          v1245 -= 4;
        }
        while (v1245);
        v1228 = v1242;
        if (v1240 != (v1240 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1742:
          do
          {
            v1247 = *((_QWORD *)v1228 - 1);
            v1228 -= 8;
            *--v1238 = v1247;
          }
          while (v1228 != v1231);
        }
        v1228 = *v5;
        goto LABEL_1288;
      }
      v1237 = 0;
      v1238 = (_QWORD *)(8 * v1233);
      *(_QWORD *)(8 * v1233) = v1227;
      v1230 = 8 * v1233 + 8;
      if (v1228 != v1231)
        goto LABEL_1281;
LABEL_1288:
      *(_QWORD *)(a1 + 2624) = v1238;
      *(_QWORD *)(a1 + 2632) = v1230;
      *(_QWORD *)(a1 + 2640) = &v1237[8 * v1236];
      if (v1228)
        operator delete(v1228);
LABEL_1290:
      *(_QWORD *)(a1 + 2632) = v1230;
      v1248 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1249 = (void *)operator new[]();
      bzero(v1249, 4 * v1248);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v1018) = v1249;
      v1250 = *(char **)(a1 + 2632);
      v1251 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1250 < v1251)
      {
        *(_QWORD *)v1250 = v1249;
        v1252 = (uint64_t)(v1250 + 8);
        goto LABEL_1312;
      }
      v1253 = *v5;
      v1254 = v1250 - *v5;
      v1255 = v1254 >> 3;
      v1256 = (v1254 >> 3) + 1;
      if (v1256 >> 61)
        goto LABEL_1698;
      v1257 = v1251 - (_QWORD)v1253;
      if (v1257 >> 2 > v1256)
        v1256 = v1257 >> 2;
      if ((unint64_t)v1257 >= 0x7FFFFFFFFFFFFFF8)
        v1258 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1258 = v1256;
      if (v1258)
      {
        if (v1258 >> 61)
          goto LABEL_1699;
        v1259 = operator new(8 * v1258);
        v1260 = &v1259[8 * v1255];
        *v1260 = v1249;
        v1252 = (uint64_t)(v1260 + 1);
        if (v1250 == v1253)
          goto LABEL_1310;
LABEL_1303:
        v1261 = v1250 - 8 - v1253;
        if (v1261 < 0x58)
          goto LABEL_1743;
        if ((unint64_t)(v1250 - &v1259[v1254]) < 0x20)
          goto LABEL_1743;
        v1262 = (v1261 >> 3) + 1;
        v1263 = 8 * (v1262 & 0x3FFFFFFFFFFFFFFCLL);
        v1264 = &v1250[-v1263];
        v1260 = (_QWORD *)((char *)v1260 - v1263);
        v1265 = &v1259[8 * v1255 - 16];
        v1266 = v1250 - 16;
        v1267 = v1262 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1268 = *(_OWORD *)v1266;
          *(v1265 - 1) = *((_OWORD *)v1266 - 1);
          *v1265 = v1268;
          v1265 -= 2;
          v1266 -= 32;
          v1267 -= 4;
        }
        while (v1267);
        v1250 = v1264;
        if (v1262 != (v1262 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1743:
          do
          {
            v1269 = *((_QWORD *)v1250 - 1);
            v1250 -= 8;
            *--v1260 = v1269;
          }
          while (v1250 != v1253);
        }
        v1250 = *v5;
        goto LABEL_1310;
      }
      v1259 = 0;
      v1260 = (_QWORD *)(8 * v1255);
      *(_QWORD *)(8 * v1255) = v1249;
      v1252 = 8 * v1255 + 8;
      if (v1250 != v1253)
        goto LABEL_1303;
LABEL_1310:
      *(_QWORD *)(a1 + 2624) = v1260;
      *(_QWORD *)(a1 + 2632) = v1252;
      *(_QWORD *)(a1 + 2640) = &v1259[8 * v1258];
      if (v1250)
        operator delete(v1250);
LABEL_1312:
      *(_QWORD *)(a1 + 2632) = v1252;
      v1270 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1271 = (void *)operator new[]();
      bzero(v1271, 4 * v1270);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v1018) = v1271;
      v1272 = *(char **)(a1 + 2632);
      v1273 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1272 < v1273)
      {
        *(_QWORD *)v1272 = v1271;
        v1274 = (uint64_t)(v1272 + 8);
        goto LABEL_1334;
      }
      v1275 = *v5;
      v1276 = v1272 - *v5;
      v1277 = v1276 >> 3;
      v1278 = (v1276 >> 3) + 1;
      if (v1278 >> 61)
        goto LABEL_1698;
      v1279 = v1273 - (_QWORD)v1275;
      if (v1279 >> 2 > v1278)
        v1278 = v1279 >> 2;
      if ((unint64_t)v1279 >= 0x7FFFFFFFFFFFFFF8)
        v1280 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1280 = v1278;
      if (v1280)
      {
        if (v1280 >> 61)
          goto LABEL_1699;
        v1281 = operator new(8 * v1280);
        v1282 = &v1281[8 * v1277];
        *v1282 = v1271;
        v1274 = (uint64_t)(v1282 + 1);
        if (v1272 == v1275)
          goto LABEL_1332;
LABEL_1325:
        v1283 = v1272 - 8 - v1275;
        if (v1283 < 0x58)
          goto LABEL_1744;
        if ((unint64_t)(v1272 - &v1281[v1276]) < 0x20)
          goto LABEL_1744;
        v1284 = (v1283 >> 3) + 1;
        v1285 = 8 * (v1284 & 0x3FFFFFFFFFFFFFFCLL);
        v1286 = &v1272[-v1285];
        v1282 = (_QWORD *)((char *)v1282 - v1285);
        v1287 = &v1281[8 * v1277 - 16];
        v1288 = v1272 - 16;
        v1289 = v1284 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1290 = *(_OWORD *)v1288;
          *(v1287 - 1) = *((_OWORD *)v1288 - 1);
          *v1287 = v1290;
          v1287 -= 2;
          v1288 -= 32;
          v1289 -= 4;
        }
        while (v1289);
        v1272 = v1286;
        if (v1284 != (v1284 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1744:
          do
          {
            v1291 = *((_QWORD *)v1272 - 1);
            v1272 -= 8;
            *--v1282 = v1291;
          }
          while (v1272 != v1275);
        }
        v1272 = *v5;
        goto LABEL_1332;
      }
      v1281 = 0;
      v1282 = (_QWORD *)(8 * v1277);
      *(_QWORD *)(8 * v1277) = v1271;
      v1274 = 8 * v1277 + 8;
      if (v1272 != v1275)
        goto LABEL_1325;
LABEL_1332:
      *(_QWORD *)(a1 + 2624) = v1282;
      *(_QWORD *)(a1 + 2632) = v1274;
      *(_QWORD *)(a1 + 2640) = &v1281[8 * v1280];
      if (v1272)
        operator delete(v1272);
LABEL_1334:
      *(_QWORD *)(a1 + 2632) = v1274;
      v1292 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1293 = (void *)operator new[]();
      bzero(v1293, 4 * v1292);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v1018) = v1293;
      v1294 = *(char **)(a1 + 2632);
      v1295 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1294 < v1295)
      {
        *(_QWORD *)v1294 = v1293;
        v1296 = (uint64_t)(v1294 + 8);
        goto LABEL_1356;
      }
      v1297 = *v5;
      v1298 = v1294 - *v5;
      v1299 = v1298 >> 3;
      v1300 = (v1298 >> 3) + 1;
      if (v1300 >> 61)
        goto LABEL_1698;
      v1301 = v1295 - (_QWORD)v1297;
      if (v1301 >> 2 > v1300)
        v1300 = v1301 >> 2;
      if ((unint64_t)v1301 >= 0x7FFFFFFFFFFFFFF8)
        v1302 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1302 = v1300;
      if (v1302)
      {
        if (v1302 >> 61)
          goto LABEL_1699;
        v1303 = operator new(8 * v1302);
        v1304 = &v1303[8 * v1299];
        *v1304 = v1293;
        v1296 = (uint64_t)(v1304 + 1);
        if (v1294 == v1297)
          goto LABEL_1354;
LABEL_1347:
        v1305 = v1294 - 8 - v1297;
        if (v1305 < 0x58)
          goto LABEL_1745;
        if ((unint64_t)(v1294 - &v1303[v1298]) < 0x20)
          goto LABEL_1745;
        v1306 = (v1305 >> 3) + 1;
        v1307 = 8 * (v1306 & 0x3FFFFFFFFFFFFFFCLL);
        v1308 = &v1294[-v1307];
        v1304 = (_QWORD *)((char *)v1304 - v1307);
        v1309 = &v1303[8 * v1299 - 16];
        v1310 = v1294 - 16;
        v1311 = v1306 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1312 = *(_OWORD *)v1310;
          *(v1309 - 1) = *((_OWORD *)v1310 - 1);
          *v1309 = v1312;
          v1309 -= 2;
          v1310 -= 32;
          v1311 -= 4;
        }
        while (v1311);
        v1294 = v1308;
        if (v1306 != (v1306 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1745:
          do
          {
            v1313 = *((_QWORD *)v1294 - 1);
            v1294 -= 8;
            *--v1304 = v1313;
          }
          while (v1294 != v1297);
        }
        v1294 = *v5;
        goto LABEL_1354;
      }
      v1303 = 0;
      v1304 = (_QWORD *)(8 * v1299);
      *(_QWORD *)(8 * v1299) = v1293;
      v1296 = 8 * v1299 + 8;
      if (v1294 != v1297)
        goto LABEL_1347;
LABEL_1354:
      *(_QWORD *)(a1 + 2624) = v1304;
      *(_QWORD *)(a1 + 2632) = v1296;
      *(_QWORD *)(a1 + 2640) = &v1303[8 * v1302];
      if (v1294)
        operator delete(v1294);
LABEL_1356:
      *(_QWORD *)(a1 + 2632) = v1296;
      v1314 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1315 = (void *)operator new[]();
      bzero(v1315, 4 * v1314);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v1018) = v1315;
      v1316 = *(char **)(a1 + 2632);
      v1317 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1316 < v1317)
      {
        *(_QWORD *)v1316 = v1315;
        v1318 = (uint64_t)(v1316 + 8);
        goto LABEL_1378;
      }
      v1319 = *v5;
      v1320 = v1316 - *v5;
      v1321 = v1320 >> 3;
      v1322 = (v1320 >> 3) + 1;
      if (v1322 >> 61)
        goto LABEL_1698;
      v1323 = v1317 - (_QWORD)v1319;
      if (v1323 >> 2 > v1322)
        v1322 = v1323 >> 2;
      if ((unint64_t)v1323 >= 0x7FFFFFFFFFFFFFF8)
        v1324 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1324 = v1322;
      if (v1324)
      {
        if (v1324 >> 61)
          goto LABEL_1699;
        v1325 = operator new(8 * v1324);
        v1326 = &v1325[8 * v1321];
        *v1326 = v1315;
        v1318 = (uint64_t)(v1326 + 1);
        if (v1316 == v1319)
          goto LABEL_1376;
LABEL_1369:
        v1327 = v1316 - 8 - v1319;
        if (v1327 < 0x58)
          goto LABEL_1746;
        if ((unint64_t)(v1316 - &v1325[v1320]) < 0x20)
          goto LABEL_1746;
        v1328 = (v1327 >> 3) + 1;
        v1329 = 8 * (v1328 & 0x3FFFFFFFFFFFFFFCLL);
        v1330 = &v1316[-v1329];
        v1326 = (_QWORD *)((char *)v1326 - v1329);
        v1331 = &v1325[8 * v1321 - 16];
        v1332 = v1316 - 16;
        v1333 = v1328 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1334 = *(_OWORD *)v1332;
          *(v1331 - 1) = *((_OWORD *)v1332 - 1);
          *v1331 = v1334;
          v1331 -= 2;
          v1332 -= 32;
          v1333 -= 4;
        }
        while (v1333);
        v1316 = v1330;
        if (v1328 != (v1328 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1746:
          do
          {
            v1335 = *((_QWORD *)v1316 - 1);
            v1316 -= 8;
            *--v1326 = v1335;
          }
          while (v1316 != v1319);
        }
        v1316 = *v5;
        goto LABEL_1376;
      }
      v1325 = 0;
      v1326 = (_QWORD *)(8 * v1321);
      *(_QWORD *)(8 * v1321) = v1315;
      v1318 = 8 * v1321 + 8;
      if (v1316 != v1319)
        goto LABEL_1369;
LABEL_1376:
      *(_QWORD *)(a1 + 2624) = v1326;
      *(_QWORD *)(a1 + 2632) = v1318;
      *(_QWORD *)(a1 + 2640) = &v1325[8 * v1324];
      if (v1316)
        operator delete(v1316);
LABEL_1378:
      *(_QWORD *)(a1 + 2632) = v1318;
      v1336 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1337 = (void *)operator new[]();
      bzero(v1337, 4 * v1336);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v1018) = v1337;
      v1338 = *(char **)(a1 + 2632);
      v1339 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1338 < v1339)
      {
        *(_QWORD *)v1338 = v1337;
        v1340 = (uint64_t)(v1338 + 8);
        goto LABEL_1400;
      }
      v1341 = *v5;
      v1342 = v1338 - *v5;
      v1343 = v1342 >> 3;
      v1344 = (v1342 >> 3) + 1;
      if (v1344 >> 61)
        goto LABEL_1698;
      v1345 = v1339 - (_QWORD)v1341;
      if (v1345 >> 2 > v1344)
        v1344 = v1345 >> 2;
      if ((unint64_t)v1345 >= 0x7FFFFFFFFFFFFFF8)
        v1346 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1346 = v1344;
      if (v1346)
      {
        if (v1346 >> 61)
          goto LABEL_1699;
        v1347 = operator new(8 * v1346);
        v1348 = &v1347[8 * v1343];
        *v1348 = v1337;
        v1340 = (uint64_t)(v1348 + 1);
        if (v1338 == v1341)
          goto LABEL_1398;
LABEL_1391:
        v1349 = v1338 - 8 - v1341;
        if (v1349 < 0x58)
          goto LABEL_1747;
        if ((unint64_t)(v1338 - &v1347[v1342]) < 0x20)
          goto LABEL_1747;
        v1350 = (v1349 >> 3) + 1;
        v1351 = 8 * (v1350 & 0x3FFFFFFFFFFFFFFCLL);
        v1352 = &v1338[-v1351];
        v1348 = (_QWORD *)((char *)v1348 - v1351);
        v1353 = &v1347[8 * v1343 - 16];
        v1354 = v1338 - 16;
        v1355 = v1350 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1356 = *(_OWORD *)v1354;
          *(v1353 - 1) = *((_OWORD *)v1354 - 1);
          *v1353 = v1356;
          v1353 -= 2;
          v1354 -= 32;
          v1355 -= 4;
        }
        while (v1355);
        v1338 = v1352;
        if (v1350 != (v1350 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1747:
          do
          {
            v1357 = *((_QWORD *)v1338 - 1);
            v1338 -= 8;
            *--v1348 = v1357;
          }
          while (v1338 != v1341);
        }
        v1338 = *v5;
        goto LABEL_1398;
      }
      v1347 = 0;
      v1348 = (_QWORD *)(8 * v1343);
      *(_QWORD *)(8 * v1343) = v1337;
      v1340 = 8 * v1343 + 8;
      if (v1338 != v1341)
        goto LABEL_1391;
LABEL_1398:
      *(_QWORD *)(a1 + 2624) = v1348;
      *(_QWORD *)(a1 + 2632) = v1340;
      *(_QWORD *)(a1 + 2640) = &v1347[8 * v1346];
      if (v1338)
        operator delete(v1338);
LABEL_1400:
      *(_QWORD *)(a1 + 2632) = v1340;
      v1358 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1359 = (void *)operator new[]();
      bzero(v1359, 4 * v1358);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v1018) = v1359;
      v1360 = *(char **)(a1 + 2632);
      v1361 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1360 >= v1361)
      {
        v1362 = *v5;
        v1363 = v1360 - *v5;
        v1364 = v1363 >> 3;
        v1365 = (v1363 >> 3) + 1;
        if (v1365 >> 61)
          goto LABEL_1698;
        v1366 = v1361 - (_QWORD)v1362;
        if (v1366 >> 2 > v1365)
          v1365 = v1366 >> 2;
        if ((unint64_t)v1366 >= 0x7FFFFFFFFFFFFFF8)
          v1367 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1367 = v1365;
        if (v1367)
        {
          if (v1367 >> 61)
            goto LABEL_1699;
          v1368 = operator new(8 * v1367);
          v1369 = &v1368[8 * v1364];
          *v1369 = v1359;
          v1019 = (uint64_t)(v1369 + 1);
          if (v1360 == v1362)
            goto LABEL_1419;
LABEL_1412:
          v1370 = v1360 - 8 - v1362;
          if (v1370 < 0x58)
            goto LABEL_1748;
          if ((unint64_t)(v1360 - &v1368[v1363]) < 0x20)
            goto LABEL_1748;
          v1371 = (v1370 >> 3) + 1;
          v1372 = 8 * (v1371 & 0x3FFFFFFFFFFFFFFCLL);
          v1373 = &v1360[-v1372];
          v1369 = (_QWORD *)((char *)v1369 - v1372);
          v1374 = &v1368[8 * v1364 - 16];
          v1375 = v1360 - 16;
          v1376 = v1371 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1377 = *(_OWORD *)v1375;
            *(v1374 - 1) = *((_OWORD *)v1375 - 1);
            *v1374 = v1377;
            v1374 -= 2;
            v1375 -= 32;
            v1376 -= 4;
          }
          while (v1376);
          v1360 = v1373;
          if (v1371 != (v1371 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1748:
            do
            {
              v1378 = *((_QWORD *)v1360 - 1);
              v1360 -= 8;
              *--v1369 = v1378;
            }
            while (v1360 != v1362);
          }
          v1360 = *v5;
        }
        else
        {
          v1368 = 0;
          v1369 = (_QWORD *)(8 * v1364);
          *(_QWORD *)(8 * v1364) = v1359;
          v1019 = 8 * v1364 + 8;
          if (v1360 != v1362)
            goto LABEL_1412;
        }
LABEL_1419:
        *(_QWORD *)(a1 + 2624) = v1369;
        *(_QWORD *)(a1 + 2632) = v1019;
        *(_QWORD *)(a1 + 2640) = &v1368[8 * v1367];
        if (v1360)
          operator delete(v1360);
        goto LABEL_1051;
      }
      *(_QWORD *)v1360 = v1359;
      v1019 = (uint64_t)(v1360 + 8);
LABEL_1051:
      *(_QWORD *)(a1 + 2632) = v1019;
      if (++v1018 == v1635)
        goto LABEL_1421;
    }
    if (v1031 >> 61)
      goto LABEL_1699;
    v1032 = operator new(8 * v1031);
    v1033 = &v1032[8 * v1028];
    *v1033 = v1022;
    v1025 = (uint64_t)(v1033 + 1);
    if (v1023 == v1026)
      goto LABEL_1075;
LABEL_1068:
    v1034 = v1023 - 8 - v1026;
    if (v1034 < 0x58)
      goto LABEL_1749;
    if ((unint64_t)(v1023 - &v1032[v1027]) < 0x20)
      goto LABEL_1749;
    v1035 = (v1034 >> 3) + 1;
    v1036 = 8 * (v1035 & 0x3FFFFFFFFFFFFFFCLL);
    v1037 = &v1023[-v1036];
    v1033 = (_QWORD *)((char *)v1033 - v1036);
    v1038 = &v1032[8 * v1028 - 16];
    v1039 = v1023 - 16;
    v1040 = v1035 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1041 = *(_OWORD *)v1039;
      *(v1038 - 1) = *((_OWORD *)v1039 - 1);
      *v1038 = v1041;
      v1038 -= 2;
      v1039 -= 32;
      v1040 -= 4;
    }
    while (v1040);
    v1023 = v1037;
    if (v1035 != (v1035 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1749:
      do
      {
        v1042 = *((_QWORD *)v1023 - 1);
        v1023 -= 8;
        *--v1033 = v1042;
      }
      while (v1023 != v1026);
    }
    v1023 = *v5;
    goto LABEL_1075;
  }
LABEL_1421:
  if (dword_1EE418968 >= 1)
  {
    v1379 = 0;
    while (1)
    {
      v1382 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v1379);
      v1383 = 1;
      if (*(_BYTE *)(a1 + 40))
        v1383 = 2;
      v1384 = (uint64_t)(v1382[1] - *v1382) >> 2;
      if (v1383 <= v1384)
      {
        if (v1383 < v1384)
          v1382[1] = *v1382 + 4 * v1383;
      }
      else
      {
        sub_19C101928((uint64_t)v1382, v1383 - v1384);
      }
      if (*(_BYTE *)(a1 + 2692))
        break;
LABEL_1482:
      v1431 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1432 = (void *)operator new[]();
      bzero(v1432, 4 * v1431);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v1379) = v1432;
      v1433 = *(char **)(a1 + 2632);
      v1434 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1433 < v1434)
      {
        *(_QWORD *)v1433 = v1432;
        v1435 = (uint64_t)(v1433 + 8);
        goto LABEL_1504;
      }
      v1436 = *v5;
      v1437 = v1433 - *v5;
      v1438 = v1437 >> 3;
      v1439 = (v1437 >> 3) + 1;
      if (v1439 >> 61)
        goto LABEL_1698;
      v1440 = v1434 - (_QWORD)v1436;
      if (v1440 >> 2 > v1439)
        v1439 = v1440 >> 2;
      if ((unint64_t)v1440 >= 0x7FFFFFFFFFFFFFF8)
        v1441 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1441 = v1439;
      if (v1441)
      {
        if (v1441 >> 61)
          goto LABEL_1699;
        v1442 = operator new(8 * v1441);
        v1443 = &v1442[8 * v1438];
        *v1443 = v1432;
        v1435 = (uint64_t)(v1443 + 1);
        if (v1433 == v1436)
          goto LABEL_1502;
LABEL_1495:
        v1444 = v1433 - 8 - v1436;
        if (v1444 < 0x58)
          goto LABEL_1750;
        if ((unint64_t)(v1433 - &v1442[v1437]) < 0x20)
          goto LABEL_1750;
        v1445 = (v1444 >> 3) + 1;
        v1446 = 8 * (v1445 & 0x3FFFFFFFFFFFFFFCLL);
        v1447 = &v1433[-v1446];
        v1443 = (_QWORD *)((char *)v1443 - v1446);
        v1448 = &v1442[8 * v1438 - 16];
        v1449 = v1433 - 16;
        v1450 = v1445 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1451 = *(_OWORD *)v1449;
          *(v1448 - 1) = *((_OWORD *)v1449 - 1);
          *v1448 = v1451;
          v1448 -= 2;
          v1449 -= 32;
          v1450 -= 4;
        }
        while (v1450);
        v1433 = v1447;
        if (v1445 != (v1445 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1750:
          do
          {
            v1452 = *((_QWORD *)v1433 - 1);
            v1433 -= 8;
            *--v1443 = v1452;
          }
          while (v1433 != v1436);
        }
        v1433 = *v5;
        goto LABEL_1502;
      }
      v1442 = 0;
      v1443 = (_QWORD *)(8 * v1438);
      *(_QWORD *)(8 * v1438) = v1432;
      v1435 = 8 * v1438 + 8;
      if (v1433 != v1436)
        goto LABEL_1495;
LABEL_1502:
      *(_QWORD *)(a1 + 2624) = v1443;
      *(_QWORD *)(a1 + 2632) = v1435;
      *(_QWORD *)(a1 + 2640) = &v1442[8 * v1441];
      if (v1433)
        operator delete(v1433);
LABEL_1504:
      *(_QWORD *)(a1 + 2632) = v1435;
      v1453 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1454 = (void *)operator new[]();
      bzero(v1454, 4 * v1453);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v1379) = v1454;
      v1455 = *(char **)(a1 + 2632);
      v1456 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1455 < v1456)
      {
        *(_QWORD *)v1455 = v1454;
        v1457 = (uint64_t)(v1455 + 8);
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        goto LABEL_1523;
      }
      v1458 = *v5;
      v1459 = v1455 - *v5;
      v1460 = v1459 >> 3;
      v1461 = (v1459 >> 3) + 1;
      if (v1461 >> 61)
        goto LABEL_1698;
      v1462 = v1456 - (_QWORD)v1458;
      if (v1462 >> 2 > v1461)
        v1461 = v1462 >> 2;
      if ((unint64_t)v1462 >= 0x7FFFFFFFFFFFFFF8)
        v1463 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1463 = v1461;
      if (v1463)
      {
        if (v1463 >> 61)
          goto LABEL_1699;
        v1464 = operator new(8 * v1463);
        v1465 = &v1464[8 * v1460];
        *v1465 = v1454;
        v1457 = (uint64_t)(v1465 + 1);
        if (v1455 == v1458)
        {
LABEL_1539:
          v1381 = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 2624) = v1465;
          *(_QWORD *)(a1 + 2632) = v1457;
          *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
          if (v1455)
            goto LABEL_1522;
          goto LABEL_1523;
        }
      }
      else
      {
        v1464 = 0;
        v1465 = (_QWORD *)(8 * v1460);
        *(_QWORD *)(8 * v1460) = v1454;
        v1457 = 8 * v1460 + 8;
        if (v1455 == v1458)
          goto LABEL_1539;
      }
      v1466 = v1455 - 8 - v1458;
      v1381 = (void **)(MLPNDArrayLossLabels + 24);
      if (v1466 < 0x58)
        goto LABEL_1751;
      if ((unint64_t)(v1455 - &v1464[v1459]) < 0x20)
        goto LABEL_1751;
      v1467 = (v1466 >> 3) + 1;
      v1468 = 8 * (v1467 & 0x3FFFFFFFFFFFFFFCLL);
      v1469 = &v1455[-v1468];
      v1465 = (_QWORD *)((char *)v1465 - v1468);
      v1470 = &v1464[8 * v1460 - 16];
      v1471 = v1455 - 16;
      v1472 = v1467 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1473 = *(_OWORD *)v1471;
        *(v1470 - 1) = *((_OWORD *)v1471 - 1);
        *v1470 = v1473;
        v1470 -= 2;
        v1471 -= 32;
        v1472 -= 4;
      }
      while (v1472);
      v1455 = v1469;
      if (v1467 != (v1467 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1751:
        do
        {
          v1474 = *((_QWORD *)v1455 - 1);
          v1455 -= 8;
          *--v1465 = v1474;
        }
        while (v1455 != v1458);
      }
      v1455 = *v5;
      *(_QWORD *)(a1 + 2624) = v1465;
      *(_QWORD *)(a1 + 2632) = v1457;
      *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
      if (v1455)
LABEL_1522:
        operator delete(v1455);
LABEL_1523:
      *(_QWORD *)(a1 + 2632) = v1457;
      if (*(_BYTE *)(a1 + 1696))
        goto LABEL_1425;
      v1475 = *(unsigned int *)(a1 + 52);
      v1476 = (void *)operator new[]();
      v1477 = v1476;
      if ((int)v1475 >= 1)
        bzero(v1476, 4 * v1475);
      *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v1379) = v1477;
      v1478 = *(char **)(a1 + 2632);
      v1479 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1478 < v1479)
      {
        *(_QWORD *)v1478 = v1477;
        v1480 = (uint64_t)(v1478 + 8);
        goto LABEL_1551;
      }
      v1481 = *v5;
      v1482 = v1478 - *v5;
      v1483 = v1482 >> 3;
      v1484 = (v1482 >> 3) + 1;
      if (v1484 >> 61)
        goto LABEL_1698;
      v1485 = v1479 - (_QWORD)v1481;
      if (v1485 >> 2 > v1484)
        v1484 = v1485 >> 2;
      if ((unint64_t)v1485 >= 0x7FFFFFFFFFFFFFF8)
        v1486 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1486 = v1484;
      if (v1486)
      {
        if (v1486 >> 61)
          goto LABEL_1699;
        v1487 = operator new(8 * v1486);
        v1488 = &v1487[8 * v1483];
        *v1488 = v1477;
        v1480 = (uint64_t)(v1488 + 1);
        if (v1478 == v1481)
          goto LABEL_1549;
LABEL_1542:
        v1489 = v1478 - 8 - v1481;
        if (v1489 < 0x58)
          goto LABEL_1752;
        if ((unint64_t)(v1478 - &v1487[v1482]) < 0x20)
          goto LABEL_1752;
        v1490 = (v1489 >> 3) + 1;
        v1491 = 8 * (v1490 & 0x3FFFFFFFFFFFFFFCLL);
        v1492 = &v1478[-v1491];
        v1488 = (_QWORD *)((char *)v1488 - v1491);
        v1493 = &v1487[8 * v1483 - 16];
        v1494 = v1478 - 16;
        v1495 = v1490 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1496 = *(_OWORD *)v1494;
          *(v1493 - 1) = *((_OWORD *)v1494 - 1);
          *v1493 = v1496;
          v1493 -= 2;
          v1494 -= 32;
          v1495 -= 4;
        }
        while (v1495);
        v1478 = v1492;
        if (v1490 != (v1490 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1752:
          do
          {
            v1497 = *((_QWORD *)v1478 - 1);
            v1478 -= 8;
            *--v1488 = v1497;
          }
          while (v1478 != v1481);
        }
        v1478 = *v5;
        goto LABEL_1549;
      }
      v1487 = 0;
      v1488 = (_QWORD *)(8 * v1483);
      *(_QWORD *)(8 * v1483) = v1477;
      v1480 = 8 * v1483 + 8;
      if (v1478 != v1481)
        goto LABEL_1542;
LABEL_1549:
      *(_QWORD *)(a1 + 2624) = v1488;
      *(_QWORD *)(a1 + 2632) = v1480;
      *(_QWORD *)(a1 + 2640) = &v1487[8 * v1486];
      if (v1478)
        operator delete(v1478);
LABEL_1551:
      *(_QWORD *)(a1 + 2632) = v1480;
      v1498 = *(unsigned int *)(a1 + 52);
      v1499 = (void *)operator new[]();
      v1500 = v1499;
      if ((int)v1498 >= 1)
        bzero(v1499, 4 * v1498);
      *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v1379) = v1500;
      v1501 = *(char **)(a1 + 2632);
      v1502 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1501 < v1502)
      {
        *(_QWORD *)v1501 = v1500;
        v1503 = (uint64_t)(v1501 + 8);
        goto LABEL_1575;
      }
      v1504 = *v5;
      v1505 = v1501 - *v5;
      v1506 = v1505 >> 3;
      v1507 = (v1505 >> 3) + 1;
      if (v1507 >> 61)
        goto LABEL_1698;
      v1508 = v1502 - (_QWORD)v1504;
      if (v1508 >> 2 > v1507)
        v1507 = v1508 >> 2;
      if ((unint64_t)v1508 >= 0x7FFFFFFFFFFFFFF8)
        v1509 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1509 = v1507;
      if (v1509)
      {
        if (v1509 >> 61)
          goto LABEL_1699;
        v1510 = operator new(8 * v1509);
        v1511 = &v1510[8 * v1506];
        *v1511 = v1500;
        v1503 = (uint64_t)(v1511 + 1);
        if (v1501 == v1504)
          goto LABEL_1573;
LABEL_1566:
        v1512 = v1501 - 8 - v1504;
        if (v1512 < 0x58)
          goto LABEL_1753;
        if ((unint64_t)(v1501 - &v1510[v1505]) < 0x20)
          goto LABEL_1753;
        v1513 = (v1512 >> 3) + 1;
        v1514 = 8 * (v1513 & 0x3FFFFFFFFFFFFFFCLL);
        v1515 = &v1501[-v1514];
        v1511 = (_QWORD *)((char *)v1511 - v1514);
        v1516 = &v1510[8 * v1506 - 16];
        v1517 = v1501 - 16;
        v1518 = v1513 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1519 = *(_OWORD *)v1517;
          *(v1516 - 1) = *((_OWORD *)v1517 - 1);
          *v1516 = v1519;
          v1516 -= 2;
          v1517 -= 32;
          v1518 -= 4;
        }
        while (v1518);
        v1501 = v1515;
        if (v1513 != (v1513 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1753:
          do
          {
            v1520 = *((_QWORD *)v1501 - 1);
            v1501 -= 8;
            *--v1511 = v1520;
          }
          while (v1501 != v1504);
        }
        v1501 = *v5;
        goto LABEL_1573;
      }
      v1510 = 0;
      v1511 = (_QWORD *)(8 * v1506);
      *(_QWORD *)(8 * v1506) = v1500;
      v1503 = 8 * v1506 + 8;
      if (v1501 != v1504)
        goto LABEL_1566;
LABEL_1573:
      *(_QWORD *)(a1 + 2624) = v1511;
      *(_QWORD *)(a1 + 2632) = v1503;
      *(_QWORD *)(a1 + 2640) = &v1510[8 * v1509];
      if (v1501)
        operator delete(v1501);
LABEL_1575:
      *(_QWORD *)(a1 + 2632) = v1503;
      v1521 = *(unsigned int *)(a1 + 48);
      v1522 = (void *)operator new[]();
      v1523 = v1522;
      if ((int)v1521 >= 1)
        bzero(v1522, 4 * v1521);
      *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v1379) = v1523;
      v1524 = *(char **)(a1 + 2632);
      v1525 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1524 < v1525)
      {
        *(_QWORD *)v1524 = v1523;
        v1526 = (uint64_t)(v1524 + 8);
        goto LABEL_1599;
      }
      v1527 = *v5;
      v1528 = v1524 - *v5;
      v1529 = v1528 >> 3;
      v1530 = (v1528 >> 3) + 1;
      if (v1530 >> 61)
        goto LABEL_1698;
      v1531 = v1525 - (_QWORD)v1527;
      if (v1531 >> 2 > v1530)
        v1530 = v1531 >> 2;
      if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
        v1532 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1532 = v1530;
      if (v1532)
      {
        if (v1532 >> 61)
          goto LABEL_1699;
        v1533 = operator new(8 * v1532);
        v1534 = &v1533[8 * v1529];
        *v1534 = v1523;
        v1526 = (uint64_t)(v1534 + 1);
        if (v1524 == v1527)
          goto LABEL_1597;
LABEL_1590:
        v1535 = v1524 - 8 - v1527;
        if (v1535 < 0x58)
          goto LABEL_1754;
        if ((unint64_t)(v1524 - &v1533[v1528]) < 0x20)
          goto LABEL_1754;
        v1536 = (v1535 >> 3) + 1;
        v1537 = 8 * (v1536 & 0x3FFFFFFFFFFFFFFCLL);
        v1538 = &v1524[-v1537];
        v1534 = (_QWORD *)((char *)v1534 - v1537);
        v1539 = &v1533[8 * v1529 - 16];
        v1540 = v1524 - 16;
        v1541 = v1536 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1542 = *(_OWORD *)v1540;
          *(v1539 - 1) = *((_OWORD *)v1540 - 1);
          *v1539 = v1542;
          v1539 -= 2;
          v1540 -= 32;
          v1541 -= 4;
        }
        while (v1541);
        v1524 = v1538;
        if (v1536 != (v1536 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1754:
          do
          {
            v1543 = *((_QWORD *)v1524 - 1);
            v1524 -= 8;
            *--v1534 = v1543;
          }
          while (v1524 != v1527);
        }
        v1524 = *v5;
        goto LABEL_1597;
      }
      v1533 = 0;
      v1534 = (_QWORD *)(8 * v1529);
      *(_QWORD *)(8 * v1529) = v1523;
      v1526 = 8 * v1529 + 8;
      if (v1524 != v1527)
        goto LABEL_1590;
LABEL_1597:
      *(_QWORD *)(a1 + 2624) = v1534;
      *(_QWORD *)(a1 + 2632) = v1526;
      *(_QWORD *)(a1 + 2640) = &v1533[8 * v1532];
      if (v1524)
        operator delete(v1524);
LABEL_1599:
      *(_QWORD *)(a1 + 2632) = v1526;
      v1544 = *(unsigned int *)(a1 + 52);
      v1545 = (void *)operator new[]();
      v1546 = v1545;
      if ((int)v1544 >= 1)
        bzero(v1545, 4 * v1544);
      *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v1379) = v1546;
      v1547 = *(char **)(a1 + 2632);
      v1548 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1547 < v1548)
      {
        *(_QWORD *)v1547 = v1546;
        v1549 = (uint64_t)(v1547 + 8);
        goto LABEL_1623;
      }
      v1550 = *v5;
      v1551 = v1547 - *v5;
      v1552 = v1551 >> 3;
      v1553 = (v1551 >> 3) + 1;
      if (v1553 >> 61)
        goto LABEL_1698;
      v1554 = v1548 - (_QWORD)v1550;
      if (v1554 >> 2 > v1553)
        v1553 = v1554 >> 2;
      if ((unint64_t)v1554 >= 0x7FFFFFFFFFFFFFF8)
        v1555 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1555 = v1553;
      if (v1555)
      {
        if (v1555 >> 61)
          goto LABEL_1699;
        v1556 = operator new(8 * v1555);
        v1557 = &v1556[8 * v1552];
        *v1557 = v1546;
        v1549 = (uint64_t)(v1557 + 1);
        if (v1547 == v1550)
          goto LABEL_1621;
LABEL_1614:
        v1558 = v1547 - 8 - v1550;
        if (v1558 < 0x58)
          goto LABEL_1755;
        if ((unint64_t)(v1547 - &v1556[v1551]) < 0x20)
          goto LABEL_1755;
        v1559 = (v1558 >> 3) + 1;
        v1560 = 8 * (v1559 & 0x3FFFFFFFFFFFFFFCLL);
        v1561 = &v1547[-v1560];
        v1557 = (_QWORD *)((char *)v1557 - v1560);
        v1562 = &v1556[8 * v1552 - 16];
        v1563 = v1547 - 16;
        v1564 = v1559 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1565 = *(_OWORD *)v1563;
          *(v1562 - 1) = *((_OWORD *)v1563 - 1);
          *v1562 = v1565;
          v1562 -= 2;
          v1563 -= 32;
          v1564 -= 4;
        }
        while (v1564);
        v1547 = v1561;
        if (v1559 != (v1559 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1755:
          do
          {
            v1566 = *((_QWORD *)v1547 - 1);
            v1547 -= 8;
            *--v1557 = v1566;
          }
          while (v1547 != v1550);
        }
        v1547 = *v5;
        goto LABEL_1621;
      }
      v1556 = 0;
      v1557 = (_QWORD *)(8 * v1552);
      *(_QWORD *)(8 * v1552) = v1546;
      v1549 = 8 * v1552 + 8;
      if (v1547 != v1550)
        goto LABEL_1614;
LABEL_1621:
      *(_QWORD *)(a1 + 2624) = v1557;
      *(_QWORD *)(a1 + 2632) = v1549;
      *(_QWORD *)(a1 + 2640) = &v1556[8 * v1555];
      if (v1547)
        operator delete(v1547);
LABEL_1623:
      *(_QWORD *)(a1 + 2632) = v1549;
      v1567 = *(unsigned int *)(a1 + 52);
      v1568 = (void *)operator new[]();
      v1569 = v1568;
      if ((int)v1567 >= 1)
        bzero(v1568, 4 * v1567);
      *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v1379) = v1569;
      v1570 = *(char **)(a1 + 2632);
      v1571 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1570 < v1571)
      {
        *(_QWORD *)v1570 = v1569;
        v1572 = (uint64_t)(v1570 + 8);
        goto LABEL_1647;
      }
      v1573 = *v5;
      v1574 = v1570 - *v5;
      v1575 = v1574 >> 3;
      v1576 = (v1574 >> 3) + 1;
      if (v1576 >> 61)
        goto LABEL_1698;
      v1577 = v1571 - (_QWORD)v1573;
      if (v1577 >> 2 > v1576)
        v1576 = v1577 >> 2;
      if ((unint64_t)v1577 >= 0x7FFFFFFFFFFFFFF8)
        v1578 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1578 = v1576;
      if (v1578)
      {
        if (v1578 >> 61)
          goto LABEL_1699;
        v1579 = operator new(8 * v1578);
        v1580 = &v1579[8 * v1575];
        *v1580 = v1569;
        v1572 = (uint64_t)(v1580 + 1);
        if (v1570 == v1573)
          goto LABEL_1645;
LABEL_1638:
        v1581 = v1570 - 8 - v1573;
        if (v1581 < 0x58)
          goto LABEL_1756;
        if ((unint64_t)(v1570 - &v1579[v1574]) < 0x20)
          goto LABEL_1756;
        v1582 = (v1581 >> 3) + 1;
        v1583 = 8 * (v1582 & 0x3FFFFFFFFFFFFFFCLL);
        v1584 = &v1570[-v1583];
        v1580 = (_QWORD *)((char *)v1580 - v1583);
        v1585 = &v1579[8 * v1575 - 16];
        v1586 = v1570 - 16;
        v1587 = v1582 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1588 = *(_OWORD *)v1586;
          *(v1585 - 1) = *((_OWORD *)v1586 - 1);
          *v1585 = v1588;
          v1585 -= 2;
          v1586 -= 32;
          v1587 -= 4;
        }
        while (v1587);
        v1570 = v1584;
        if (v1582 != (v1582 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1756:
          do
          {
            v1589 = *((_QWORD *)v1570 - 1);
            v1570 -= 8;
            *--v1580 = v1589;
          }
          while (v1570 != v1573);
        }
        v1570 = *v5;
        goto LABEL_1645;
      }
      v1579 = 0;
      v1580 = (_QWORD *)(8 * v1575);
      *(_QWORD *)(8 * v1575) = v1569;
      v1572 = 8 * v1575 + 8;
      if (v1570 != v1573)
        goto LABEL_1638;
LABEL_1645:
      *(_QWORD *)(a1 + 2624) = v1580;
      *(_QWORD *)(a1 + 2632) = v1572;
      *(_QWORD *)(a1 + 2640) = &v1579[8 * v1578];
      if (v1570)
        operator delete(v1570);
LABEL_1647:
      *(_QWORD *)(a1 + 2632) = v1572;
      v1590 = *(unsigned int *)(a1 + 52);
      v1591 = (void *)operator new[]();
      v1592 = v1591;
      if ((int)v1590 >= 1)
        bzero(v1591, 4 * v1590);
      *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v1379) = v1592;
      v1593 = *(char **)(a1 + 2632);
      v1594 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1593 < v1594)
      {
        *(_QWORD *)v1593 = v1592;
        v1595 = (uint64_t)(v1593 + 8);
        goto LABEL_1671;
      }
      v1596 = *v5;
      v1597 = v1593 - *v5;
      v1598 = v1597 >> 3;
      v1599 = (v1597 >> 3) + 1;
      if (v1599 >> 61)
        goto LABEL_1698;
      v1600 = v1594 - (_QWORD)v1596;
      if (v1600 >> 2 > v1599)
        v1599 = v1600 >> 2;
      if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFF8)
        v1601 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1601 = v1599;
      if (v1601)
      {
        if (v1601 >> 61)
          goto LABEL_1699;
        v1602 = operator new(8 * v1601);
        v1603 = &v1602[8 * v1598];
        *v1603 = v1592;
        v1595 = (uint64_t)(v1603 + 1);
        if (v1593 == v1596)
          goto LABEL_1669;
LABEL_1662:
        v1604 = v1593 - 8 - v1596;
        if (v1604 < 0x58)
          goto LABEL_1757;
        if ((unint64_t)(v1593 - &v1602[v1597]) < 0x20)
          goto LABEL_1757;
        v1605 = (v1604 >> 3) + 1;
        v1606 = 8 * (v1605 & 0x3FFFFFFFFFFFFFFCLL);
        v1607 = &v1593[-v1606];
        v1603 = (_QWORD *)((char *)v1603 - v1606);
        v1608 = &v1602[8 * v1598 - 16];
        v1609 = v1593 - 16;
        v1610 = v1605 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1611 = *(_OWORD *)v1609;
          *(v1608 - 1) = *((_OWORD *)v1609 - 1);
          *v1608 = v1611;
          v1608 -= 2;
          v1609 -= 32;
          v1610 -= 4;
        }
        while (v1610);
        v1593 = v1607;
        if (v1605 != (v1605 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1757:
          do
          {
            v1612 = *((_QWORD *)v1593 - 1);
            v1593 -= 8;
            *--v1603 = v1612;
          }
          while (v1593 != v1596);
        }
        v1593 = *v5;
        goto LABEL_1669;
      }
      v1602 = 0;
      v1603 = (_QWORD *)(8 * v1598);
      *(_QWORD *)(8 * v1598) = v1592;
      v1595 = 8 * v1598 + 8;
      if (v1593 != v1596)
        goto LABEL_1662;
LABEL_1669:
      *(_QWORD *)(a1 + 2624) = v1603;
      *(_QWORD *)(a1 + 2632) = v1595;
      *(_QWORD *)(a1 + 2640) = &v1602[8 * v1601];
      if (v1593)
        operator delete(v1593);
LABEL_1671:
      *(_QWORD *)(a1 + 2632) = v1595;
      v1613 = *(unsigned int *)(a1 + 52);
      v1614 = (void *)operator new[]();
      v1615 = v1614;
      if ((int)v1613 >= 1)
        bzero(v1614, 4 * v1613);
      *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v1379) = v1615;
      v1616 = *(char **)(a1 + 2632);
      v1617 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1616 < v1617)
      {
        *(_QWORD *)v1616 = v1615;
        v1380 = (uint64_t)(v1616 + 8);
        v1381 = MLPNDArrayLossLabels.vtable;
      }
      else
      {
        v1618 = *v5;
        v1619 = v1616 - *v5;
        v1620 = v1619 >> 3;
        v1621 = (v1619 >> 3) + 1;
        if (v1621 >> 61)
          goto LABEL_1698;
        v1622 = v1617 - (_QWORD)v1618;
        if (v1622 >> 2 > v1621)
          v1621 = v1622 >> 2;
        if ((unint64_t)v1622 >= 0x7FFFFFFFFFFFFFF8)
          v1623 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1623 = v1621;
        if (v1623)
        {
          if (v1623 >> 61)
            goto LABEL_1699;
          v1624 = operator new(8 * v1623);
          v1625 = &v1624[8 * v1620];
          *v1625 = v1615;
          v1380 = (uint64_t)(v1625 + 1);
          if (v1616 != v1618)
          {
LABEL_1683:
            v1626 = v1616 - 8 - v1618;
            v1381 = (void **)(MLPNDArrayLossLabels + 24);
            if (v1626 < 0x58)
              goto LABEL_1758;
            if ((unint64_t)(v1616 - &v1624[v1619]) < 0x20)
              goto LABEL_1758;
            v1627 = (v1626 >> 3) + 1;
            v1628 = 8 * (v1627 & 0x3FFFFFFFFFFFFFFCLL);
            v1629 = &v1616[-v1628];
            v1625 = (_QWORD *)((char *)v1625 - v1628);
            v1630 = &v1624[8 * v1620 - 16];
            v1631 = v1616 - 16;
            v1632 = v1627 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1633 = *(_OWORD *)v1631;
              *(v1630 - 1) = *((_OWORD *)v1631 - 1);
              *v1630 = v1633;
              v1630 -= 2;
              v1631 -= 32;
              v1632 -= 4;
            }
            while (v1632);
            v1616 = v1629;
            if (v1627 != (v1627 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1758:
              do
              {
                v1634 = *((_QWORD *)v1616 - 1);
                v1616 -= 8;
                *--v1625 = v1634;
              }
              while (v1616 != v1618);
            }
            v1616 = *v5;
            *(_QWORD *)(a1 + 2624) = v1625;
            *(_QWORD *)(a1 + 2632) = v1380;
            *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
            if (!v1616)
              goto LABEL_1424;
LABEL_1693:
            operator delete(v1616);
            goto LABEL_1424;
          }
        }
        else
        {
          v1624 = 0;
          v1625 = (_QWORD *)(8 * v1620);
          *(_QWORD *)(8 * v1620) = v1615;
          v1380 = 8 * v1620 + 8;
          if (v1616 != v1618)
            goto LABEL_1683;
        }
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v1625;
        *(_QWORD *)(a1 + 2632) = v1380;
        *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
        if (v1616)
          goto LABEL_1693;
      }
LABEL_1424:
      *(_QWORD *)(a1 + 2632) = v1380;
LABEL_1425:
      if (++v1379 >= *((int *)v1381 + 602))
        return;
    }
    v1385 = *(unsigned int *)(a1 + 52);
    v1386 = (void *)operator new[]();
    v1387 = v1386;
    if ((int)v1385 >= 1)
      bzero(v1386, 4 * v1385);
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v1379) = v1387;
    v1388 = *(char **)(a1 + 2632);
    v1389 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v1388 < v1389)
    {
      *(_QWORD *)v1388 = v1387;
      v1390 = (uint64_t)(v1388 + 8);
      goto LABEL_1457;
    }
    v1391 = *v5;
    v1392 = v1388 - *v5;
    v1393 = v1392 >> 3;
    v1394 = (v1392 >> 3) + 1;
    if (v1394 >> 61)
      goto LABEL_1698;
    v1395 = v1389 - (_QWORD)v1391;
    if (v1395 >> 2 > v1394)
      v1394 = v1395 >> 2;
    if ((unint64_t)v1395 >= 0x7FFFFFFFFFFFFFF8)
      v1396 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v1396 = v1394;
    if (v1396)
    {
      if (v1396 >> 61)
        goto LABEL_1699;
      v1397 = operator new(8 * v1396);
      v1398 = &v1397[8 * v1393];
      *v1398 = v1387;
      v1390 = (uint64_t)(v1398 + 1);
      if (v1388 == v1391)
        goto LABEL_1455;
    }
    else
    {
      v1397 = 0;
      v1398 = (_QWORD *)(8 * v1393);
      *(_QWORD *)(8 * v1393) = v1387;
      v1390 = 8 * v1393 + 8;
      if (v1388 == v1391)
      {
LABEL_1455:
        *(_QWORD *)(a1 + 2624) = v1398;
        *(_QWORD *)(a1 + 2632) = v1390;
        *(_QWORD *)(a1 + 2640) = &v1397[8 * v1396];
        if (v1388)
          operator delete(v1388);
LABEL_1457:
        *(_QWORD *)(a1 + 2632) = v1390;
        v1408 = *(unsigned int *)(a1 + 52);
        v1409 = (void *)operator new[]();
        v1410 = v1409;
        if ((int)v1408 >= 1)
          bzero(v1409, 4 * v1408);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v1379) = v1410;
        v1411 = *(char **)(a1 + 2632);
        v1412 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1411 < v1412)
        {
          *(_QWORD *)v1411 = v1410;
          v1413 = (uint64_t)(v1411 + 8);
LABEL_1481:
          *(_QWORD *)(a1 + 2632) = v1413;
          goto LABEL_1482;
        }
        v1414 = *v5;
        v1415 = v1411 - *v5;
        v1416 = v1415 >> 3;
        v1417 = (v1415 >> 3) + 1;
        if (v1417 >> 61)
          goto LABEL_1698;
        v1418 = v1412 - (_QWORD)v1414;
        if (v1418 >> 2 > v1417)
          v1417 = v1418 >> 2;
        if ((unint64_t)v1418 >= 0x7FFFFFFFFFFFFFF8)
          v1419 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1419 = v1417;
        if (v1419)
        {
          if (v1419 >> 61)
            goto LABEL_1699;
          v1420 = operator new(8 * v1419);
          v1421 = &v1420[8 * v1416];
          *v1421 = v1410;
          v1413 = (uint64_t)(v1421 + 1);
          if (v1411 == v1414)
            goto LABEL_1479;
        }
        else
        {
          v1420 = 0;
          v1421 = (_QWORD *)(8 * v1416);
          *(_QWORD *)(8 * v1416) = v1410;
          v1413 = 8 * v1416 + 8;
          if (v1411 == v1414)
          {
LABEL_1479:
            *(_QWORD *)(a1 + 2624) = v1421;
            *(_QWORD *)(a1 + 2632) = v1413;
            *(_QWORD *)(a1 + 2640) = &v1420[8 * v1419];
            if (v1411)
              operator delete(v1411);
            goto LABEL_1481;
          }
        }
        v1422 = v1411 - 8 - v1414;
        if (v1422 < 0x58)
          goto LABEL_1759;
        if ((unint64_t)(v1411 - &v1420[v1415]) < 0x20)
          goto LABEL_1759;
        v1423 = (v1422 >> 3) + 1;
        v1424 = 8 * (v1423 & 0x3FFFFFFFFFFFFFFCLL);
        v1425 = &v1411[-v1424];
        v1421 = (_QWORD *)((char *)v1421 - v1424);
        v1426 = &v1420[8 * v1416 - 16];
        v1427 = v1411 - 16;
        v1428 = v1423 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1429 = *(_OWORD *)v1427;
          *(v1426 - 1) = *((_OWORD *)v1427 - 1);
          *v1426 = v1429;
          v1426 -= 2;
          v1427 -= 32;
          v1428 -= 4;
        }
        while (v1428);
        v1411 = v1425;
        if (v1423 != (v1423 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1759:
          do
          {
            v1430 = *((_QWORD *)v1411 - 1);
            v1411 -= 8;
            *--v1421 = v1430;
          }
          while (v1411 != v1414);
        }
        v1411 = *v5;
        goto LABEL_1479;
      }
    }
    v1399 = v1388 - 8 - v1391;
    if (v1399 < 0x58)
      goto LABEL_1760;
    if ((unint64_t)(v1388 - &v1397[v1392]) < 0x20)
      goto LABEL_1760;
    v1400 = (v1399 >> 3) + 1;
    v1401 = 8 * (v1400 & 0x3FFFFFFFFFFFFFFCLL);
    v1402 = &v1388[-v1401];
    v1398 = (_QWORD *)((char *)v1398 - v1401);
    v1403 = &v1397[8 * v1393 - 16];
    v1404 = v1388 - 16;
    v1405 = v1400 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1406 = *(_OWORD *)v1404;
      *(v1403 - 1) = *((_OWORD *)v1404 - 1);
      *v1403 = v1406;
      v1403 -= 2;
      v1404 -= 32;
      v1405 -= 4;
    }
    while (v1405);
    v1388 = v1402;
    if (v1400 != (v1400 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1760:
      do
      {
        v1407 = *((_QWORD *)v1388 - 1);
        v1388 -= 8;
        *--v1398 = v1407;
      }
      while (v1388 != v1391);
    }
    v1388 = *v5;
    goto LABEL_1455;
  }
}

void sub_19C127210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C127224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C127238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C12724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C127260()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C127270(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19C127278(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 99;
  v3 = a1[20];
  v4 = a1[21];
  v5 = (v4 - v3) >> 3;
  v6 = a1[99];
  v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7)
      a1[100] = v6 + 8 * v5;
  }
  else
  {
    sub_19C098930((void **)a1 + 99, v5 - v7);
    v3 = a1[20];
    v4 = a1[21];
    v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    v8 = *v2;
    if (v5 <= 1)
      v9 = 1;
    else
      v9 = v5;
    if (v9 < 4)
    {
      v10 = 0;
LABEL_14:
      v15 = (_QWORD *)(v8 + 8 * v10);
      v16 = (uint64_t *)(v3 + 8 * v10);
      v17 = v9 - v10;
      do
      {
        v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = (__int128 *)(v3 + 16);
    v12 = (_OWORD *)(v8 + 16);
    v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10)
      goto LABEL_14;
  }
  return v2;
}

void sub_19C127358()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C127368(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19C127370()
{
  return 0;
}

_BYTE *sub_19C127378(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  int v64;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 2568);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1697);
  v24 = sub_19C2210B4();
  sub_19C101BB8(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  v25 = *(_BYTE **)(a1 + 2576);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1697);
  v28 = sub_19C2210B4();
  sub_19C101BB8(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  v29 = *(_BYTE **)(a1 + 2584);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1697);
  v32 = sub_19C2210B4();
  sub_19C101BB8(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  v33 = *(_BYTE **)(a1 + 2504);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1697);
  v36 = sub_19C2210B4();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v37 = *(_BYTE **)(a1 + 2512);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1697);
  v40 = sub_19C2210B4();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v41 = *(_BYTE **)(a1 + 2520);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1697);
  v44 = sub_19C2210B4();
  sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v45 = *(_BYTE **)(a1 + 2528);
  v46 = *a3;
  v47 = *(unsigned __int8 *)(a1 + 1697);
  v48 = sub_19C2210B4();
  sub_19C101DB0(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v49 = *(_BYTE **)(a1 + 2536);
  v50 = *a3;
  v51 = *(unsigned __int8 *)(a1 + 1697);
  v52 = sub_19C2210B4();
  sub_19C101DB0(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v53 = *(_BYTE **)(a1 + 2544);
  v54 = *a3;
  v55 = *(unsigned __int8 *)(a1 + 1697);
  v56 = sub_19C2210B4();
  sub_19C101DB0(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v57 = *(_BYTE **)(a1 + 2552);
  v58 = *a3;
  v59 = *(unsigned __int8 *)(a1 + 1697);
  v60 = sub_19C2210B4();
  sub_19C101DB0(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v61 = *(_BYTE **)(a1 + 2560);
  v62 = *a3;
  v63 = *(unsigned __int8 *)(a1 + 1697);
  v64 = sub_19C2210B4();
  return sub_19C101DB0(v61, (uint64_t *)a2, v62, v63, v64, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C1276EC(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  unint64_t *v11;
  int v12;
  unint64_t *v13;
  int v14;
  unint64_t *v15;
  int v16;
  unint64_t *v17;
  int v18;
  unint64_t *v19;
  int v20;
  unint64_t *v21;
  int v22;
  unint64_t *v23;
  int v24;
  unint64_t *v25;
  int v26;
  unint64_t *v27;
  int v28;
  unint64_t *v29;
  int v30;
  unint64_t *v31;
  int v32;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(unint64_t **)(a1 + 2568);
  v12 = sub_19C2210B4();
  sub_19C12C9E8(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52));
  v13 = *(unint64_t **)(a1 + 2576);
  v14 = sub_19C2210B4();
  sub_19C12C9E8(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52));
  v15 = *(unint64_t **)(a1 + 2584);
  v16 = sub_19C2210B4();
  sub_19C12C9E8(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52));
  v17 = *(unint64_t **)(a1 + 2504);
  v18 = sub_19C2210B4();
  sub_19C12CAAC(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v19 = *(unint64_t **)(a1 + 2512);
  v20 = sub_19C2210B4();
  sub_19C12CAAC(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v21 = *(unint64_t **)(a1 + 2520);
  v22 = sub_19C2210B4();
  sub_19C12CAAC(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v23 = *(unint64_t **)(a1 + 2528);
  v24 = sub_19C2210B4();
  sub_19C12CAAC(v23, __stream, a3, 3, v24, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(unint64_t **)(a1 + 2536);
  v26 = sub_19C2210B4();
  sub_19C12CAAC(v25, __stream, a3, 3, v26, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v27 = *(unint64_t **)(a1 + 2544);
  v28 = sub_19C2210B4();
  sub_19C12CAAC(v27, __stream, a3, 3, v28, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v29 = *(unint64_t **)(a1 + 2552);
  v30 = sub_19C2210B4();
  sub_19C12CAAC(v29, __stream, a3, 3, v30, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v31 = *(unint64_t **)(a1 + 2560);
  v32 = sub_19C2210B4();
  sub_19C12CAAC(v31, __stream, a3, 3, v32, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

_QWORD *sub_19C1279B8(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 < 1)
      goto LABEL_17;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
    goto LABEL_17;
LABEL_7:
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 2568);
  v10 = (_QWORD *)result[321];
  v11 = (_QWORD *)v5[321];
  do
  {
    *(_BYTE *)(*v9 + v8) = *(_BYTE *)(*v10 + v8) - *(_BYTE *)(*v11 + v8);
    ++v8;
  }
  while (v7 != v8);
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
  {
LABEL_17:
    v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1)
      goto LABEL_31;
    goto LABEL_18;
  }
  v12 = 0;
  v13 = *(_QWORD **)(a1 + 2576);
  v14 = (_QWORD *)result[322];
  v15 = (_QWORD *)v5[322];
  do
  {
    *(_BYTE *)(*v13 + v12) = *(_BYTE *)(*v14 + v12) - *(_BYTE *)(*v15 + v12);
    ++v12;
  }
  while (v7 != v12);
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
  {
    v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1)
      goto LABEL_31;
  }
  else
  {
    v16 = 0;
    v17 = *(_QWORD **)(a1 + 2584);
    v18 = (_QWORD *)result[323];
    v19 = (_QWORD *)v5[323];
    do
    {
      *(_BYTE *)(*v17 + v16) = *(_BYTE *)(*v18 + v16) - *(_BYTE *)(*v19 + v16);
      ++v16;
    }
    while (v7 != v16);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1)
      goto LABEL_31;
  }
LABEL_18:
  v21 = 0;
  v22 = *(_QWORD **)(a1 + 2504);
  v23 = (_QWORD *)result[313];
  v24 = (_QWORD *)v5[313];
  do
  {
    *(_BYTE *)(*v22 + v21) = *(_BYTE *)(*v23 + v21) - *(_BYTE *)(*v24 + v21);
    ++v21;
  }
  while (v20 != v21);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  v25 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v25 >= 1)
  {
    v26 = 0;
    v27 = *(_QWORD **)(a1 + 2520);
    v28 = (_QWORD *)result[315];
    v29 = (_QWORD *)v5[315];
    do
    {
      *(_BYTE *)(*v27 + v26) = *(_BYTE *)(*v28 + v26) - *(_BYTE *)(*v29 + v26);
      ++v26;
    }
    while (v25 != v26);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    v30 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v30 >= 1)
    {
      v31 = 0;
      v32 = *(_QWORD **)(a1 + 2512);
      v33 = (_QWORD *)result[314];
      v34 = (_QWORD *)v5[314];
      do
      {
        *(_BYTE *)(*v32 + v31) = *(_BYTE *)(*v33 + v31) - *(_BYTE *)(*v34 + v31);
        ++v31;
      }
      while (v30 != v31);
      LODWORD(v7) = *(_DWORD *)(a1 + 52);
      v35 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v35 >= 1)
      {
        v36 = 0;
        v37 = *(_QWORD **)(a1 + 2528);
        v38 = (_QWORD *)result[316];
        v39 = (_QWORD *)v5[316];
        do
        {
          *(_BYTE *)(*v37 + v36) = *(_BYTE *)(*v38 + v36) - *(_BYTE *)(*v39 + v36);
          ++v36;
        }
        while (v35 != v36);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
      }
    }
  }
LABEL_31:
  if ((_DWORD)v7)
  {
    v40 = 0;
    v41 = *(_QWORD **)(a1 + 2536);
    v42 = (_QWORD *)result[317];
    v43 = (v7 * v7);
    v44 = (_QWORD *)v5[317];
    do
    {
      *(_BYTE *)(*v41 + v40) = *(_BYTE *)(*v42 + v40) - *(_BYTE *)(*v44 + v40);
      ++v40;
    }
    while (v43 != v40);
    v45 = *(_DWORD *)(a1 + 52);
    if (v45)
    {
      v46 = 0;
      v47 = *(_QWORD **)(a1 + 2552);
      v48 = (_QWORD *)result[319];
      v49 = (v45 * v45);
      v50 = (_QWORD *)v5[319];
      do
      {
        *(_BYTE *)(*v47 + v46) = *(_BYTE *)(*v48 + v46) - *(_BYTE *)(*v50 + v46);
        ++v46;
      }
      while (v49 != v46);
      v51 = *(_DWORD *)(a1 + 52);
      if (v51)
      {
        v52 = 0;
        v53 = *(_QWORD **)(a1 + 2544);
        v54 = (_QWORD *)result[318];
        v55 = (v51 * v51);
        v56 = (_QWORD *)v5[318];
        do
        {
          *(_BYTE *)(*v53 + v52) = *(_BYTE *)(*v54 + v52) - *(_BYTE *)(*v56 + v52);
          ++v52;
        }
        while (v55 != v52);
        v57 = *(_DWORD *)(a1 + 52);
        if (v57)
        {
          v58 = 0;
          v59 = *(_QWORD **)(a1 + 2560);
          v60 = (_QWORD *)result[320];
          v61 = (v57 * v57);
          v62 = (_QWORD *)v5[320];
          do
          {
            *(_BYTE *)(*v59 + v58) = *(_BYTE *)(*v60 + v58) - *(_BYTE *)(*v62 + v58);
            ++v58;
          }
          while (v61 != v58);
        }
      }
    }
  }
  return result;
}

void *sub_19C127D68(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
  return result;
}

_QWORD *sub_19C127DD0(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  float32x4_t **v4;
  float32x4_t **v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t *v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t **v14;
  float32x4_t **v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t **v24;
  float32x4_t **v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
  else
    result = 0;
  v4 = *(float32x4_t ***)(a1 + 2568);
  v5 = (float32x4_t **)result[321];
  v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    v7 = *v4;
    v8 = *v5;
    v9 = (int)v6 / 8;
    do
    {
      v10 = *v8;
      v11 = v8[1];
      v8 += 2;
      v12 = vaddq_f32(v7[1], v11);
      *v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  LODWORD(v13) = 8 * ((int)v6 / 8);
  if ((int)v13 < (int)v6)
  {
    v13 = (int)v13;
    do
    {
      (*v4)->i8[v13] += (*v5)->i8[v13];
      ++v13;
    }
    while (v6 != v13);
  }
  v14 = *(float32x4_t ***)(a1 + 2576);
  v15 = (float32x4_t **)result[322];
  v16 = *(int *)(a1 + 52);
  if ((int)v16 >= 8)
  {
    v17 = *v14;
    v18 = *v15;
    v19 = (int)v16 / 8;
    do
    {
      v20 = *v18;
      v21 = v18[1];
      v18 += 2;
      v22 = vaddq_f32(v17[1], v21);
      *v17 = vaddq_f32(*v17, v20);
      v17[1] = v22;
      v17 += 2;
      --v19;
    }
    while (v19);
  }
  LODWORD(v23) = 8 * ((int)v16 / 8);
  if ((int)v23 < (int)v16)
  {
    v23 = (int)v23;
    do
    {
      (*v14)->i8[v23] += (*v15)->i8[v23];
      ++v23;
    }
    while (v16 != v23);
  }
  v24 = *(float32x4_t ***)(a1 + 2584);
  v25 = (float32x4_t **)result[323];
  v26 = *(int *)(a1 + 52);
  if ((int)v26 >= 8)
  {
    v27 = *v24;
    v28 = *v25;
    v29 = (int)v26 / 8;
    do
    {
      v30 = *v28;
      v31 = v28[1];
      v28 += 2;
      v32 = vaddq_f32(v27[1], v31);
      *v27 = vaddq_f32(*v27, v30);
      v27[1] = v32;
      v27 += 2;
      --v29;
    }
    while (v29);
  }
  LODWORD(v33) = 8 * ((int)v26 / 8);
  if ((int)v33 < (int)v26)
  {
    v33 = (int)v33;
    do
    {
      (*v24)->i8[v33] += (*v25)->i8[v33];
      ++v33;
    }
    while (v26 != v33);
  }
  v34 = *(_DWORD *)(a1 + 52);
  v35 = (*(_DWORD *)(a1 + 48) * v34);
  if ((int)v35 >= 1)
  {
    v36 = 0;
    v37 = *(_QWORD **)(a1 + 2504);
    v38 = (_QWORD *)result[313];
    do
    {
      *(_BYTE *)(*v37 + v36) += *(_BYTE *)(*v38 + v36);
      ++v36;
    }
    while (v35 != v36);
    v34 = *(_DWORD *)(a1 + 52);
    v39 = (*(_DWORD *)(a1 + 48) * v34);
    if ((int)v39 >= 1)
    {
      v40 = 0;
      v41 = *(_QWORD **)(a1 + 2512);
      v42 = (_QWORD *)result[314];
      do
      {
        *(_BYTE *)(*v41 + v40) += *(_BYTE *)(*v42 + v40);
        ++v40;
      }
      while (v39 != v40);
      v34 = *(_DWORD *)(a1 + 52);
      v43 = (*(_DWORD *)(a1 + 48) * v34);
      if ((int)v43 >= 1)
      {
        v44 = 0;
        v45 = *(_QWORD **)(a1 + 2520);
        v46 = (_QWORD *)result[315];
        do
        {
          *(_BYTE *)(*v45 + v44) += *(_BYTE *)(*v46 + v44);
          ++v44;
        }
        while (v43 != v44);
        v34 = *(_DWORD *)(a1 + 52);
        v47 = (*(_DWORD *)(a1 + 48) * v34);
        if ((int)v47 >= 1)
        {
          v48 = 0;
          v49 = *(_QWORD **)(a1 + 2528);
          v50 = (_QWORD *)result[316];
          do
          {
            *(_BYTE *)(*v49 + v48) += *(_BYTE *)(*v50 + v48);
            ++v48;
          }
          while (v47 != v48);
          v34 = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if (v34)
  {
    v51 = 0;
    v52 = *(_QWORD **)(a1 + 2536);
    v53 = (_QWORD *)result[317];
    v54 = (v34 * v34);
    do
    {
      *(_BYTE *)(*v52 + v51) += *(_BYTE *)(*v53 + v51);
      ++v51;
    }
    while (v54 != v51);
    v55 = *(_DWORD *)(a1 + 52);
    if (v55)
    {
      v56 = 0;
      v57 = *(_QWORD **)(a1 + 2544);
      v58 = (_QWORD *)result[318];
      v59 = (v55 * v55);
      do
      {
        *(_BYTE *)(*v57 + v56) += *(_BYTE *)(*v58 + v56);
        ++v56;
      }
      while (v59 != v56);
      v60 = *(_DWORD *)(a1 + 52);
      if (v60)
      {
        v61 = 0;
        v62 = *(_QWORD **)(a1 + 2552);
        v63 = (_QWORD *)result[319];
        v64 = (v60 * v60);
        do
        {
          *(_BYTE *)(*v62 + v61) += *(_BYTE *)(*v63 + v61);
          ++v61;
        }
        while (v64 != v61);
        v65 = *(_DWORD *)(a1 + 52);
        if (v65)
        {
          v66 = 0;
          v67 = *(_QWORD **)(a1 + 2560);
          v68 = (_QWORD *)result[320];
          v69 = (v65 * v65);
          do
          {
            *(_BYTE *)(*v67 + v66) += *(_BYTE *)(*v68 + v66);
            ++v66;
          }
          while (v69 != v66);
        }
      }
    }
  }
  return result;
}

void sub_19C128188(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  sub_19C2210D4(23);
}

uint64_t sub_19C1281E4(uint64_t result, float a2, double a3, double a4)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  float v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  float v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  float v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  float v50;

  v4 = -a2;
  v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1)
    goto LABEL_24;
  v6 = 0;
  v7 = *(_QWORD **)(result + 2568);
  do
  {
    LOBYTE(a4) = *(_BYTE *)(*v7 + v6);
    *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    v8 = (float)SLODWORD(a4);
    v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v8 > a2))
      *(_BYTE *)(*v7 + v6) = (int)*(float *)&a4;
    ++v6;
  }
  while (v5 != v6);
  v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1)
  {
LABEL_24:
    v16 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v16 < 1)
      goto LABEL_55;
    goto LABEL_25;
  }
  v10 = 0;
  v11 = *(_QWORD **)(result + 2576);
  do
  {
    LOBYTE(a4) = *(_BYTE *)(*v11 + v10);
    *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    v12 = (float)SLODWORD(a4);
    v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v12 > a2))
      *(_BYTE *)(*v11 + v10) = (int)*(float *)&a4;
    ++v10;
  }
  while (v5 != v10);
  v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1)
  {
    v16 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v16 < 1)
      goto LABEL_55;
    goto LABEL_25;
  }
  v13 = 0;
  v14 = *(_QWORD **)(result + 2584);
  do
  {
    LOBYTE(a4) = *(_BYTE *)(*v14 + v13);
    *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    v15 = (float)SLODWORD(a4);
    v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v15 > a2))
      *(_BYTE *)(*v14 + v13) = (int)*(float *)&a4;
    ++v13;
  }
  while (v5 != v13);
  LODWORD(v5) = *(_DWORD *)(result + 52);
  v16 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v16 >= 1)
  {
LABEL_25:
    v17 = 0;
    v18 = *(_QWORD **)(result + 2504);
    do
    {
      LOBYTE(a4) = *(_BYTE *)(*v18 + v17);
      *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      v19 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v19 > a2))
        *(_BYTE *)(*v18 + v17) = (int)*(float *)&a4;
      ++v17;
    }
    while (v16 != v17);
    LODWORD(v5) = *(_DWORD *)(result + 52);
    v20 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = *(_QWORD **)(result + 2512);
      do
      {
        LOBYTE(a4) = *(_BYTE *)(*v22 + v21);
        *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        v23 = (float)SLODWORD(a4);
        v9 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v9 || (*(float *)&a4 = a2, v23 > a2))
          *(_BYTE *)(*v22 + v21) = (int)*(float *)&a4;
        ++v21;
      }
      while (v20 != v21);
      LODWORD(v5) = *(_DWORD *)(result + 52);
      v24 = (*(_DWORD *)(result + 48) * v5);
      if ((int)v24 >= 1)
      {
        v25 = 0;
        v26 = *(_QWORD **)(result + 2520);
        do
        {
          LOBYTE(a4) = *(_BYTE *)(*v26 + v25);
          *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          v27 = (float)SLODWORD(a4);
          v9 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v9 || (*(float *)&a4 = a2, v27 > a2))
            *(_BYTE *)(*v26 + v25) = (int)*(float *)&a4;
          ++v25;
        }
        while (v24 != v25);
        LODWORD(v5) = *(_DWORD *)(result + 52);
        v28 = (*(_DWORD *)(result + 48) * v5);
        if ((int)v28 >= 1)
        {
          v29 = 0;
          v30 = *(_QWORD **)(result + 2528);
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*v30 + v29);
            *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
            v31 = (float)SLODWORD(a4);
            v9 = (float)SLODWORD(a4) < v4;
            *(float *)&a4 = -a2;
            if (v9 || (*(float *)&a4 = a2, v31 > a2))
              *(_BYTE *)(*v30 + v29) = (int)*(float *)&a4;
            ++v29;
          }
          while (v28 != v29);
          LODWORD(v5) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
LABEL_55:
  if ((_DWORD)v5)
  {
    v32 = 0;
    v33 = *(_QWORD **)(result + 2536);
    v34 = (v5 * v5);
    do
    {
      LOBYTE(a4) = *(_BYTE *)(*v33 + v32);
      *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      v35 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v35 > a2))
        *(_BYTE *)(*v33 + v32) = (int)*(float *)&a4;
      ++v32;
    }
    while (v34 != v32);
    v36 = *(_DWORD *)(result + 52);
    if (v36)
    {
      v37 = 0;
      v38 = *(_QWORD **)(result + 2544);
      v39 = (v36 * v36);
      do
      {
        LOBYTE(a4) = *(_BYTE *)(*v38 + v37);
        *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        v40 = (float)SLODWORD(a4);
        v9 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v9 || (*(float *)&a4 = a2, v40 > a2))
          *(_BYTE *)(*v38 + v37) = (int)*(float *)&a4;
        ++v37;
      }
      while (v39 != v37);
      v41 = *(_DWORD *)(result + 52);
      if (v41)
      {
        v42 = 0;
        v43 = *(_QWORD **)(result + 2552);
        v44 = (v41 * v41);
        do
        {
          LOBYTE(a4) = *(_BYTE *)(*v43 + v42);
          *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          v45 = (float)SLODWORD(a4);
          v9 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v9 || (*(float *)&a4 = a2, v45 > a2))
            *(_BYTE *)(*v43 + v42) = (int)*(float *)&a4;
          ++v42;
        }
        while (v44 != v42);
        v46 = *(_DWORD *)(result + 52);
        if (v46)
        {
          v47 = 0;
          v48 = *(_QWORD **)(result + 2560);
          v49 = (v46 * v46);
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*v48 + v47);
            *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
            v50 = (float)SLODWORD(a4);
            v9 = (float)SLODWORD(a4) < v4;
            *(float *)&a4 = -a2;
            if (v9 || (*(float *)&a4 = a2, v50 > a2))
              *(_BYTE *)(*v48 + v47) = (int)*(float *)&a4;
            ++v47;
          }
          while (v49 != v47);
        }
      }
    }
  }
  return result;
}

uint64_t sub_19C128618(uint64_t result, float a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1)
    goto LABEL_12;
  v4 = 0;
  v5 = *(_QWORD **)(result + 2568);
  do
  {
    LOBYTE(a3) = *(_BYTE *)(*v5 + v4);
    *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
    *(float *)&a3 = (float)SLODWORD(a3) * a2;
    *(_BYTE *)(*v5 + v4++) = (int)*(float *)&a3;
  }
  while (v3 != v4);
  v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1)
  {
LABEL_12:
    v10 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v10 < 1)
      goto LABEL_26;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD **)(result + 2576);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v7 + v6);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v7 + v6++) = (int)*(float *)&a3;
    }
    while (v3 != v6);
    v3 = *(unsigned int *)(result + 52);
    if ((int)v3 < 1)
    {
      v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 < 1)
        goto LABEL_26;
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD **)(result + 2584);
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*v9 + v8);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(_BYTE *)(*v9 + v8++) = (int)*(float *)&a3;
      }
      while (v3 != v8);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 < 1)
        goto LABEL_26;
    }
  }
  v11 = 0;
  v12 = *(_QWORD **)(result + 2504);
  do
  {
    LOBYTE(a3) = *(_BYTE *)(*v12 + v11);
    *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
    *(float *)&a3 = (float)SLODWORD(a3) * a2;
    *(_BYTE *)(*v12 + v11++) = (int)*(float *)&a3;
  }
  while (v10 != v11);
  LODWORD(v3) = *(_DWORD *)(result + 52);
  v13 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD **)(result + 2512);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v15 + v14);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v15 + v14++) = (int)*(float *)&a3;
    }
    while (v13 != v14);
    LODWORD(v3) = *(_DWORD *)(result + 52);
    v16 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v16 >= 1)
    {
      v17 = 0;
      v18 = *(_QWORD **)(result + 2520);
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*v18 + v17);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(_BYTE *)(*v18 + v17++) = (int)*(float *)&a3;
      }
      while (v16 != v17);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      v19 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v19 >= 1)
      {
        v20 = 0;
        v21 = *(_QWORD **)(result + 2528);
        do
        {
          LOBYTE(a3) = *(_BYTE *)(*v21 + v20);
          *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(_BYTE *)(*v21 + v20++) = (int)*(float *)&a3;
        }
        while (v19 != v20);
        LODWORD(v3) = *(_DWORD *)(result + 52);
      }
    }
  }
LABEL_26:
  if ((_DWORD)v3)
  {
    v22 = 0;
    v23 = *(_QWORD **)(result + 2536);
    v24 = (v3 * v3);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v23 + v22);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v23 + v22++) = (int)*(float *)&a3;
    }
    while (v24 != v22);
    v25 = *(_DWORD *)(result + 52);
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD **)(result + 2544);
      v28 = (v25 * v25);
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*v27 + v26);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(_BYTE *)(*v27 + v26++) = (int)*(float *)&a3;
      }
      while (v28 != v26);
      v29 = *(_DWORD *)(result + 52);
      if (v29)
      {
        v30 = 0;
        v31 = *(_QWORD **)(result + 2552);
        v32 = (v29 * v29);
        do
        {
          LOBYTE(a3) = *(_BYTE *)(*v31 + v30);
          *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(_BYTE *)(*v31 + v30++) = (int)*(float *)&a3;
        }
        while (v32 != v30);
        v33 = *(_DWORD *)(result + 52);
        if (v33)
        {
          v34 = 0;
          v35 = *(_QWORD **)(result + 2560);
          v36 = (v33 * v33);
          do
          {
            LOBYTE(a3) = *(_BYTE *)(*v35 + v34);
            *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3) * a2;
            *(_BYTE *)(*v35 + v34++) = (int)*(float *)&a3;
          }
          while (v36 != v34);
        }
      }
    }
  }
  return result;
}

void sub_19C128914(uint64_t a1, uint64_t *a2)
{
  int i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (*(int *)(a1 + 2688) >= 1)
  {
    for (i = 0; i < *(_DWORD *)(a1 + 2688); ++i)
    {
      v6 = (_QWORD *)operator new();
      v7 = *(unsigned int *)(a1 + 52);
      v8 = (void *)operator new[]();
      *v6 = v8;
      if ((int)v7 >= 1)
        bzero(v8, 4 * v7);
      v9 = *(_DWORD *)(a1 + 52);
      v11 = (char *)a2[1];
      v10 = a2[2];
      if ((unint64_t)v11 < v10)
      {
        *(_DWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v6;
        v12 = v11 + 16;
        goto LABEL_24;
      }
      v13 = (char *)*a2;
      v14 = (uint64_t)&v11[-*a2] >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        goto LABEL_43;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 60)
          goto LABEL_44;
        v18 = (char *)operator new(16 * v17);
        v19 = (uint64_t)&v18[16 * v14];
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = v19;
        if (v11 == v13)
          goto LABEL_22;
      }
      else
      {
        v18 = 0;
        v19 = 16 * v14;
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = 16 * v14;
        if (v11 == v13)
          goto LABEL_22;
      }
      do
      {
        *(_OWORD *)(v20 - 16) = *((_OWORD *)v11 - 1);
        v20 -= 16;
        v11 -= 16;
      }
      while (v11 != v13);
      v11 = (char *)*a2;
LABEL_22:
      v12 = (char *)(v19 + 16);
      *a2 = v20;
      a2[1] = v19 + 16;
      a2[2] = (uint64_t)&v18[16 * v17];
      if (v11)
        operator delete(v11);
LABEL_24:
      a2[1] = (uint64_t)v12;
      v21 = (_QWORD *)operator new();
      v22 = *(unsigned int *)(a1 + 52);
      v23 = (void *)operator new[]();
      *v21 = v23;
      if ((int)v22 >= 1)
        bzero(v23, 4 * v22);
      v24 = *(_DWORD *)(a1 + 52);
      v26 = (_QWORD *)a2[1];
      v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        v27 = (_QWORD *)*a2;
        v28 = ((uint64_t)v26 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
LABEL_43:
          sub_19C07DA0C();
        v30 = v25 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 60)
LABEL_44:
            sub_19C07C7FC();
          v32 = (char *)operator new(16 * v31);
          v33 = (uint64_t)&v32[16 * v28];
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = v33;
          if (v26 == v27)
            goto LABEL_40;
          do
          {
LABEL_38:
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v26 - 1);
            v34 -= 16;
            v26 -= 2;
          }
          while (v26 != v27);
          v26 = (_QWORD *)*a2;
        }
        else
        {
          v32 = 0;
          v33 = 16 * v28;
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = 16 * v28;
          if (v26 != v27)
            goto LABEL_38;
        }
LABEL_40:
        v5 = (_QWORD *)(v33 + 16);
        *a2 = v34;
        a2[1] = v33 + 16;
        a2[2] = (uint64_t)&v32[16 * v31];
        if (v26)
          operator delete(v26);
        goto LABEL_4;
      }
      *(_DWORD *)v26 = v24;
      v26[1] = v21;
      v5 = v26 + 2;
LABEL_4:
      a2[1] = (uint64_t)v5;
    }
  }
}

void sub_19C128C18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C128C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19C128C40(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = *a4;
    v9 = 8 * a3;
    do
    {
      v10 = v6[13];
      v11 = *(_QWORD *)(*((_QWORD *)v6 + 20) + v9);
      v12 = 4 * (int)v10 * v7;
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      v14 = *a4;
      *a4 = v14 + 1;
      v15 = (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v9) + v12);
      v16 = v6[13];
      v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19C128D28(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = 8 * a3;
    do
    {
      v9 = 4 * v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + v8) + v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v8) + v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19C128DFC(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19C128E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v3 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v4 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v5 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v6 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v7 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v8 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v9 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v11 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v12 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v13 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v14 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v15 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v16 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v17 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
  }
}

void sub_19C129348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1293A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;

  v4 = **(_QWORD **)(a1 + 2504);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_134;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_135;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 2512);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_134;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_135;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 2528);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_134;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_135;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 2520);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_134;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_135;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v59 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v60 = **(_QWORD **)(a1 + 2536);
  v61 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    v63 = *(_QWORD **)a2;
    v64 = (uint64_t)v49 - *(_QWORD *)a2;
    v65 = (v64 >> 4) + 1;
    if (v65 >> 60)
      goto LABEL_134;
    v66 = v61 - (_QWORD)v63;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v67 = v65;
    if (v67 >> 60)
      goto LABEL_135;
    v68 = 16 * v67;
    v69 = (char *)operator new(16 * v67);
    v70 = &v69[16 * (v64 >> 4)];
    *(_QWORD *)v70 = v60;
    v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((_QWORD *)v70 + 1) = v49[1])
    {
      v71 = *(v49 - 2);
      v49 -= 2;
      *((_QWORD *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(_QWORD *)a2 = v70;
    *(_QWORD *)(a2 + 8) = v62;
    *(_QWORD *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v49 = v60;
    v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v62;
  v72 = **(_QWORD **)(a1 + 2544);
  v73 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    v75 = *(_QWORD **)a2;
    v76 = (uint64_t)v62 - *(_QWORD *)a2;
    v77 = (v76 >> 4) + 1;
    if (v77 >> 60)
      goto LABEL_134;
    v78 = v73 - (_QWORD)v75;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v79 = v77;
    if (v79 >> 60)
      goto LABEL_135;
    v80 = 16 * v79;
    v81 = (char *)operator new(16 * v79);
    v82 = &v81[16 * (v76 >> 4)];
    *(_QWORD *)v82 = v72;
    v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((_QWORD *)v82 + 1) = v62[1])
    {
      v83 = *(v62 - 2);
      v62 -= 2;
      *((_QWORD *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(_QWORD *)a2 = v82;
    *(_QWORD *)(a2 + 8) = v74;
    *(_QWORD *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v62 = v72;
    v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v74;
  v84 = **(_QWORD **)(a1 + 2560);
  v85 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    v87 = *(_QWORD **)a2;
    v88 = (uint64_t)v74 - *(_QWORD *)a2;
    v89 = (v88 >> 4) + 1;
    if (v89 >> 60)
      goto LABEL_134;
    v90 = v85 - (_QWORD)v87;
    if (v90 >> 3 > v89)
      v89 = v90 >> 3;
    v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v91 = v89;
    if (v91 >> 60)
      goto LABEL_135;
    v92 = 16 * v91;
    v93 = (char *)operator new(16 * v91);
    v94 = &v93[16 * (v88 >> 4)];
    *(_QWORD *)v94 = v84;
    v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((_QWORD *)v94 + 1) = v74[1])
    {
      v95 = *(v74 - 2);
      v74 -= 2;
      *((_QWORD *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(_QWORD *)a2 = v94;
    *(_QWORD *)(a2 + 8) = v86;
    *(_QWORD *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v74 = v84;
    v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v86;
  v96 = **(_QWORD **)(a1 + 2552);
  v97 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    v99 = *(_QWORD **)a2;
    v100 = (uint64_t)v86 - *(_QWORD *)a2;
    v101 = (v100 >> 4) + 1;
    if (v101 >> 60)
      goto LABEL_134;
    v102 = v97 - (_QWORD)v99;
    if (v102 >> 3 > v101)
      v101 = v102 >> 3;
    v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v103 = v101;
    if (v103 >> 60)
      goto LABEL_135;
    v104 = 16 * v103;
    v105 = (char *)operator new(16 * v103);
    v106 = &v105[16 * (v100 >> 4)];
    *(_QWORD *)v106 = v96;
    v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((_QWORD *)v106 + 1) = v86[1])
    {
      v107 = *(v86 - 2);
      v86 -= 2;
      *((_QWORD *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(_QWORD *)a2 = v106;
    *(_QWORD *)(a2 + 8) = v98;
    *(_QWORD *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v86 = v96;
    v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v98;
  v108 = **(_QWORD **)(a1 + 2568);
  v109 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    v111 = *(_QWORD **)a2;
    v112 = (uint64_t)v98 - *(_QWORD *)a2;
    v113 = (v112 >> 4) + 1;
    if (v113 >> 60)
      goto LABEL_134;
    v114 = v109 - (_QWORD)v111;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v115 = v113;
    if (v115 >> 60)
      goto LABEL_135;
    v116 = 16 * v115;
    v117 = (char *)operator new(16 * v115);
    v118 = &v117[16 * (v112 >> 4)];
    *(_QWORD *)v118 = v108;
    v110 = v118 + 16;
    v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((_QWORD *)v118 + 1) = v98[1])
    {
      v120 = *(v98 - 2);
      v98 -= 2;
      *((_QWORD *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(_QWORD *)a2 = v118;
    *(_QWORD *)(a2 + 8) = v110;
    *(_QWORD *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v98 = v108;
    v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v110;
  v121 = **(_QWORD **)(a1 + 2576);
  v122 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    *v110 = v121;
    v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  v124 = *(_QWORD **)a2;
  v125 = (uint64_t)v110 - *(_QWORD *)a2;
  v126 = (v125 >> 4) + 1;
  if (v126 >> 60)
    goto LABEL_134;
  v127 = v122 - (_QWORD)v124;
  if (v127 >> 3 > v126)
    v126 = v127 >> 3;
  v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v128 = v126;
  if (v128 >> 60)
LABEL_135:
    sub_19C07C7FC();
  v129 = 16 * v128;
  v130 = (char *)operator new(16 * v128);
  v131 = &v130[16 * (v125 >> 4)];
  v132 = &v130[v129];
  *(_QWORD *)v131 = v121;
  v123 = v131 + 16;
  v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((_QWORD *)v131 + 1) = v110[1])
  {
    v134 = *(v110 - 2);
    v110 -= 2;
    *((_QWORD *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(_QWORD *)a2 = v131;
  *(_QWORD *)(a2 + 8) = v123;
  *(_QWORD *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(_QWORD *)(a2 + 8) = v123;
  v135 = **(_QWORD **)(a1 + 2584);
  v136 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    *v123 = v135;
    v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  v138 = *(_QWORD **)a2;
  v139 = (uint64_t)v123 - *(_QWORD *)a2;
  v140 = (v139 >> 4) + 1;
  if (v140 >> 60)
LABEL_134:
    sub_19C07DA0C();
  v141 = v136 - (_QWORD)v138;
  if (v141 >> 3 > v140)
    v140 = v141 >> 3;
  v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v142 = v140;
  if (v142 >> 60)
    goto LABEL_135;
  v143 = 16 * v142;
  v144 = (char *)operator new(16 * v142);
  v145 = &v144[16 * (v139 >> 4)];
  v146 = &v144[v143];
  *(_QWORD *)v145 = v135;
  v137 = v145 + 16;
  v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((_QWORD *)v145 + 1) = v123[1])
  {
    v148 = *(v123 - 2);
    v123 -= 2;
    *((_QWORD *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(_QWORD *)a2 = v145;
  *(_QWORD *)(a2 + 8) = v137;
  *(_QWORD *)(a2 + 16) = v146;
  if (v138)
    operator delete(v138);
LABEL_133:
  *(_QWORD *)(a2 + 8) = v137;
}

__n128 sub_19C129C68(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19C129DE8(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C129DF4(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C129DFC(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "LSTM alloc, from allocAll");
  sub_19C12024C(a1);
  operator delete(__p);
}

void sub_19C129E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C129E9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    v10 = a1[136];
    v11 = a1[135];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  v10 = a1[136];
  v11 = a1[135];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[136];
      v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  v16 = a1[166];
  v17 = a1[165];
  if (v16 == v17)
  {
    v17 = a1[166];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[166];
        v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  v22 = a1[151];
  v23 = a1[150];
  if (v22 == v23)
  {
    v23 = a1[151];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[151];
        v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  v28 = a1[181];
  v29 = a1[180];
  if (v28 == v29)
  {
    v29 = a1[181];
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        v28 = a1[181];
        v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

uint64_t sub_19C12A104(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C12A10C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C12A118(uint64_t result, float a2, double a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t k;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  uint64_t v28;
  uint64_t n;
  uint64_t v30;
  uint64_t ii;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = (int)a2;
  if (*(int *)(result + 56) < 1)
  {
    v6 = v4 * *(_DWORD *)(result + 48);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = (float)v5;
      do
      {
        v9 = *(_QWORD *)(result + 232);
        LOBYTE(a3) = *(_BYTE *)(v9 + v7);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1464) + 4 * v7) * v8);
        *(_BYTE *)(v9 + v7++) = (int)*(float *)&a3;
      }
      while (v6 != v7);
      for (i = 0; i != v6; ++i)
      {
        v11 = *(_QWORD *)(result + 248);
        LOBYTE(a3) = *(_BYTE *)(v11 + i);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1480) + 4 * i) * v8);
        *(_BYTE *)(v11 + i) = (int)*(float *)&a3;
      }
      for (j = 0; j != v6; ++j)
      {
        v13 = *(_QWORD *)(result + 240);
        LOBYTE(a3) = *(_BYTE *)(v13 + j);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1472) + 4 * j) * v8);
        *(_BYTE *)(v13 + j) = (int)*(float *)&a3;
      }
      for (k = 0; k != v6; ++k)
      {
        v15 = *(_QWORD *)(result + 256);
        LOBYTE(a3) = *(_BYTE *)(v15 + k);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1488) + 4 * k) * v8);
        *(_BYTE *)(v15 + k) = (int)*(float *)&a3;
      }
    }
  }
  else
  {
    sub_19C12CDA8(result + 984, (float)v5, result + 232, v4);
    sub_19C12CDA8(v3 + 1224, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    sub_19C12CDA8(v3 + 1104, (float)v5, v3 + 240, *(_DWORD *)(v3 + 52));
    result = sub_19C12CDA8(v3 + 1344, (float)v5, v3 + 256, *(_DWORD *)(v3 + 52));
  }
  if (v4)
  {
    v16 = 0;
    v17 = v4 * v4;
    v18 = (float)v5;
    do
    {
      v19 = *(_QWORD *)(v3 + 264);
      LOBYTE(a3) = *(_BYTE *)(v19 + v16);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1496) + 4 * v16) * v18);
      *(_BYTE *)(v19 + v16++) = (int)*(float *)&a3;
    }
    while (v17 != v16);
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v3 + 280);
      LOBYTE(a3) = *(_BYTE *)(v21 + v20);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1512) + 4 * v20) * v18);
      *(_BYTE *)(v21 + v20++) = (int)*(float *)&a3;
    }
    while (v17 != v20);
    v22 = 0;
    do
    {
      v23 = *(_QWORD *)(v3 + 272);
      LOBYTE(a3) = *(_BYTE *)(v23 + v22);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1504) + 4 * v22) * v18);
      *(_BYTE *)(v23 + v22++) = (int)*(float *)&a3;
    }
    while (v17 != v22);
    v24 = 0;
    do
    {
      v25 = *(_QWORD *)(v3 + 288);
      LOBYTE(a3) = *(_BYTE *)(v25 + v24);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1520) + 4 * v24) * v18);
      *(_BYTE *)(v25 + v24++) = (int)*(float *)&a3;
    }
    while (v17 != v24);
    v26 = *(unsigned int *)(v3 + 52);
    if ((int)v26 < 1)
      return result;
  }
  else
  {
    v18 = (float)v5;
    v26 = *(unsigned int *)(v3 + 52);
    if ((int)v26 < 1)
      return result;
  }
  for (m = 0; m != v26; ++m)
    *(_BYTE *)(*(_QWORD *)(v3 + 296) + m) += (int)(float)(*(float *)(*(_QWORD *)(v3 + 1528) + 4 * m) * v18);
  v28 = *(unsigned int *)(v3 + 52);
  if ((int)v28 >= 1)
  {
    for (n = 0; n != v28; ++n)
      *(_BYTE *)(*(_QWORD *)(v3 + 312) + n) += (int)(float)(*(float *)(*(_QWORD *)(v3 + 1544) + 4 * n) * v18);
    v30 = *(unsigned int *)(v3 + 52);
    if ((int)v30 >= 1)
    {
      for (ii = 0; ii != v30; ++ii)
        *(_BYTE *)(*(_QWORD *)(v3 + 304) + ii) += (int)(float)(*(float *)(*(_QWORD *)(v3 + 1536) + 4 * ii) * v18);
    }
  }
  return result;
}

void sub_19C12A454(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v6;
  void **v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  int v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  float32x4_t *v76;
  float32x4_t *v77;
  int v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  float *v114;
  float *v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  float32x4_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  float *v131;
  char *v132;
  float *v133;
  float v134;
  float v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  char *v144;
  float *v145;
  float v146;
  float v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float *v153;
  char *v154;
  float *v155;
  float v156;
  float v157;
  int v158;
  uint64_t *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  float32x4_t *v163;
  float32x4_t *v164;
  float32x4_t *v165;
  float32x4_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  BOOL v175;
  BOOL v176;
  uint64_t v178;
  uint64_t v179;
  float32x4_t *v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t v183;
  uint64_t v184;
  float *v185;
  float *v186;
  float *v187;
  float v188;
  float v189;
  float v190;
  uint64_t v191;
  size_t v192;
  int v193;
  float32x4_t *v194;
  float32x4_t *v195;
  int v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  BOOL v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  uint64_t v222;
  uint64_t v223;
  float32x4_t *v224;
  float32x4_t *v225;
  float32x4_t *v226;
  float32x4_t *v227;
  float32x4_t v228;
  uint64_t v229;
  float *v230;
  float *v231;
  float *v232;
  float *v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  float32x4_t *v245;
  float32x4_t *v246;
  int v247;
  float32x4_t *v248;
  float32x4_t *v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  BOOL v269;
  BOOL v270;
  BOOL v271;
  BOOL v272;
  uint64_t v274;
  uint64_t v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float32x4_t v280;
  uint64_t v281;
  float *v282;
  float *v283;
  float *v284;
  float *v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  float32x4_t *v296;
  float32x4_t *v297;
  float32x4_t *v298;
  int v299;
  float32x4_t *v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  int v310;
  char *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  BOOL v320;
  BOOL v321;
  BOOL v322;
  BOOL v323;
  uint64_t v325;
  uint64_t v326;
  float32x4_t *v327;
  float32x4_t *v328;
  float32x4_t *v329;
  float32x4_t *v330;
  float32x4_t v331;
  uint64_t v332;
  float *v333;
  float *v334;
  float *v335;
  float *v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  unint64_t v342;
  BOOL v344;
  BOOL v345;
  uint64_t v346;
  float32x4_t *v347;
  int8x8_t *v348;
  float32x4_t *v349;
  uint64_t v350;
  float32x4_t v351;
  float32x4_t v352;
  int8x8_t v353;
  float32x4_t v354;
  unint64_t v355;
  BOOL v357;
  BOOL v358;
  uint64_t v359;
  float32x4_t *v360;
  int8x8_t *v361;
  float32x4_t *v362;
  uint64_t v363;
  float32x4_t v364;
  float32x4_t v365;
  int8x8_t v366;
  float32x4_t v367;
  unint64_t v368;
  BOOL v370;
  BOOL v371;
  uint64_t v372;
  float32x4_t *v373;
  int8x8_t *v374;
  float32x4_t *v375;
  uint64_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int8x8_t v379;
  float32x4_t v380;
  uint64_t v381;
  float32x4_t *v382;
  int8x16_t *v383;
  float32x4_t *v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  int8x16_t v389;
  int8x8_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  uint64_t v394;
  float32x4_t *v395;
  int8x16_t *v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  int8x16_t v402;
  int8x8_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  uint64_t v407;
  float32x4_t *v408;
  int8x16_t *v409;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  int8x16_t v415;
  int8x8_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  uint64_t v420;
  size_t v421;
  float32x4_t **v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  NSObject *global_queue;
  const void *v428;
  uint64_t v429;
  uint64_t v430;
  size_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  size_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  size_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  float32x4_t *v449;
  float32x4_t *v450;
  int v451;
  float32x4_t *v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  BOOL v466;
  BOOL v467;
  uint64_t v469;
  uint64_t v470;
  float32x4_t *v471;
  float32x4_t *v472;
  float32x4_t *v473;
  float32x4_t v474;
  uint64_t v475;
  float *v476;
  float *v477;
  float *v478;
  float v479;
  float v480;
  float v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  float32x4_t *v486;
  float32x4_t *v487;
  int v488;
  float32x4_t *v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  float32x4_t *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  BOOL v503;
  BOOL v504;
  uint64_t v506;
  uint64_t v507;
  float32x4_t *v508;
  float32x4_t *v509;
  float32x4_t *v510;
  float32x4_t v511;
  uint64_t v512;
  float *v513;
  float *v514;
  float *v515;
  float v516;
  float v517;
  float v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  int v522;
  uint64_t v523;
  NSObject *v524;
  int v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  _BYTE *v529;
  _BYTE *v530;
  size_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  size_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  __int128 *v542;
  _OWORD *v543;
  uint64_t v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  _DWORD *v548;
  int *v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  NSObject *v554;
  const void *v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  size_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  size_t v564;
  uint64_t v565;
  int v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  float32x4_t *v574;
  float32x4_t *v575;
  int v576;
  float32x4_t *v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  float32x4_t *v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  unint64_t v590;
  BOOL v591;
  BOOL v592;
  uint64_t v594;
  uint64_t v595;
  float32x4_t *v596;
  float32x4_t *v597;
  float32x4_t *v598;
  float32x4_t v599;
  uint64_t v600;
  float *v601;
  float *v602;
  float *v603;
  float v604;
  float v605;
  float v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _BYTE *v611;
  _BYTE *v612;
  size_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  size_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  __int128 *v623;
  _OWORD *v624;
  uint64_t v625;
  __int128 v626;
  uint64_t v627;
  uint64_t v628;
  _DWORD *v629;
  int *v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  _BYTE *v635;
  _BYTE *v636;
  size_t v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  __int128 *v643;
  _OWORD *v644;
  uint64_t v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  _DWORD *v649;
  int *v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  _BYTE *v655;
  _BYTE *v656;
  size_t v657;
  void *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 *v663;
  _OWORD *v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667;
  uint64_t v668;
  _DWORD *v669;
  int *v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  void **v674;
  void **v675;
  int v677;
  void **v678;
  _BOOL4 v680;
  int v681;
  void **v682;
  float32x4_t **v683;
  void **v684;
  uint64_t v685;
  void **iterations;
  void **v687;
  float32x4_t **v688;
  _BOOL4 v690;
  int v691;
  int v692;
  int v693;
  const void *v694;
  const void *v695;
  const void *v696;
  const void *block;
  uint64_t v698;
  void (*v699)(uint64_t, uint64_t);
  void *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;

  v693 = a5 - 1;
  if (a5 >= 1)
  {
    v678 = (void **)(a1 + 1648);
    v6 = (void **)(a1 + 1656);
    v7 = (void **)(a1 + 1672);
    iterations = (void **)(a1 + 1664);
    v687 = (void **)(a1 + 1640);
    v682 = (void **)(a1 + 1688);
    v684 = (void **)(a1 + 1680);
    v8 = a5 - 1;
    v674 = (void **)(a1 + 1672);
    v675 = (void **)(a1 + 1656);
    do
    {
      v9 = v693 - v8;
      v681 = v8;
      if (*(_BYTE *)(a1 + 2672))
      {
        v10 = v9 < v693;
      }
      else
      {
        v9 = v8;
        v10 = v8 > 0;
      }
      v690 = v10;
      if (*(_BYTE *)(a1 + 2672))
        v11 = v9 > 0;
      else
        v11 = v9 < v693;
      if (*(_BYTE *)(a1 + 2672))
        v12 = v9 - 1;
      else
        v12 = v9 + 1;
      if (*(_BYTE *)(a1 + 2672))
        v13 = v9 + 1;
      else
        v13 = v9 - 1;
      v677 = v13;
      v14 = v9;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v9), *(const void **)(*a4 + 8 * v9), 4 * *(int *)(a1 + 52));
      v15 = v14;
      v16 = 8 * v14;
      v680 = v11;
      if (v11)
      {
        v17 = 8 * v12;
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 840) + v16), (_QWORD *)(*(_QWORD *)(a1 + 936) + v17), *(_QWORD **)(a1 + 2560), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 840) + v16), (_QWORD *)(*(_QWORD *)(a1 + 912) + v17), *(_QWORD **)(a1 + 2536), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 840) + v16), (_QWORD *)(*(_QWORD *)(a1 + 888) + v17), *(_QWORD **)(a1 + 2544), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 840) + v16), (_QWORD *)(*(_QWORD *)(a1 + 864) + v17), *(_QWORD **)(a1 + 2552), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      block = *(const void **)(*(_QWORD *)(a1 + 352) + 8 * v14);
      v696 = *(const void **)(*(_QWORD *)(a1 + 376) + 8 * v14);
      v695 = *(const void **)(*(_QWORD *)(a1 + 424) + 8 * v14);
      v694 = *(const void **)(*(_QWORD *)(a1 + 400) + 8 * v14);
      v18 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v14);
      v19 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + v16);
      sub_19C102BD8(v687, &v694, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v678, &v696, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v6, &block, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102E84(v7, &v695, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102BD8(iterations, &v695, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102E84(v684, (const void **)(*(_QWORD *)(a1 + 88) + v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19C102BD8(v682, (const void **)(*(_QWORD *)(a1 + 88) + v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v20 = *(_QWORD *)(a1 + 864);
      v21 = *(_QWORD *)(a1 + 840);
      v22 = *(int *)(a1 + 52);
      v23 = 4 * v22;
      bzero(*(void **)(v20 + v16), 4 * v22);
      v24 = (int)v22 / 8;
      if ((int)v22 >= 8)
      {
        v25 = *(float32x4_t **)(v20 + v16);
        v26 = *(float32x4_t **)(v21 + v16);
        v27 = (float32x4_t *)*v684;
        v28 = (int)v22 / 8;
        v29 = (float32x4_t *)*v687;
        do
        {
          v30 = *v29;
          v31 = v29[1];
          v29 += 2;
          v32 = *v27;
          v33 = v27[1];
          v27 += 2;
          v34 = vmulq_f32(v33, v31);
          v35 = vmulq_f32(v32, v30);
          v37 = *v26;
          v36 = v26[1];
          v26 += 2;
          v38 = vmlaq_f32(v25[1], v34, v36);
          *v25 = vmlaq_f32(*v25, v35, v37);
          v25[1] = v38;
          v25 += 2;
          --v28;
        }
        while (v28);
      }
      v39 = 8 * v24;
      if (8 * v24 < (int)v22)
      {
        v40 = (char *)*v687;
        v41 = *(_QWORD *)(v21 + v16);
        v42 = (char *)*v684;
        v43 = *(_QWORD *)(v20 + v16);
        v44 = v39;
        v45 = v22 - v39;
        if (v45 < 8)
          goto LABEL_46;
        v46 = 4 * v39;
        v47 = v43 + v46;
        v48 = v43 + v23;
        v49 = v43 + v46 >= (unint64_t)&v42[v23] || (unint64_t)&v42[v46] >= v48;
        v50 = !v49;
        v51 = v47 >= v41 + v23 || v41 + 4 * v44 >= v48;
        v52 = !v51;
        if ((unint64_t)&v40[v46] < v48 && v47 < (unint64_t)&v40[v23])
          goto LABEL_46;
        if (v50)
          goto LABEL_46;
        if (v52)
          goto LABEL_46;
        v54 = v45 - (v22 & 7) + v44;
        v55 = v44 + (v22 & 7) - v22;
        v56 = (float32x4_t *)(v43 + v46 + 16);
        v57 = (float32x4_t *)&v40[v46 + 16];
        v58 = (float32x4_t *)(v41 + v46 + 16);
        v59 = (float32x4_t *)&v42[v46 + 16];
        do
        {
          v60 = vmlaq_f32(*v56, vmulq_f32(*v59, *v57), *v58);
          v56[-1] = vmlaq_f32(v56[-1], vmulq_f32(v59[-1], v57[-1]), v58[-1]);
          *v56 = v60;
          v56 += 2;
          v57 += 2;
          v58 += 2;
          v59 += 2;
          v55 += 8;
        }
        while (v55);
        v44 = v54;
        if ((v22 & 7) != 0)
        {
LABEL_46:
          v61 = v22 - v44;
          v62 = (float *)(v43 + 4 * v44);
          v63 = (float *)(v41 + 4 * v44);
          v64 = (float *)&v42[4 * v44];
          v65 = (float *)&v40[4 * v44];
          do
          {
            v66 = *v65++;
            v67 = v66;
            v68 = *v64++;
            v69 = v68;
            v70 = *v63++;
            *v62 = *v62 + (float)((float)(v69 * v67) * v70);
            ++v62;
            --v61;
          }
          while (v61);
        }
      }
      v71 = *(_QWORD *)(a1 + 960);
      v72 = *(_QWORD *)(a1 + 840);
      v73 = *(int *)(a1 + 52);
      v74 = 4 * v73;
      bzero(*(void **)(v71 + 8 * v15), 4 * v73);
      v75 = (int)v73 / 8;
      if ((int)v73 >= 8)
      {
        v76 = *(float32x4_t **)(v71 + v16);
        v77 = *(float32x4_t **)(v72 + v16);
        v78 = (int)v73 / 8;
        v79 = v19;
        v80 = (float32x4_t *)*v682;
        do
        {
          v81 = *v80;
          v82 = v80[1];
          v80 += 2;
          v83 = *v79;
          v84 = v79[1];
          v79 += 2;
          v85 = vmulq_f32(v84, v82);
          v86 = vmulq_f32(v83, v81);
          v88 = *v77;
          v87 = v77[1];
          v77 += 2;
          v89 = vmlaq_f32(v76[1], v85, v87);
          *v76 = vmlaq_f32(*v76, v86, v88);
          v76[1] = v89;
          v76 += 2;
          --v78;
        }
        while (v78);
      }
      v90 = 8 * v75;
      if (8 * v75 < (int)v73)
      {
        v91 = *(_QWORD *)(v72 + v16);
        v92 = (char *)*v682;
        v93 = *(_QWORD *)(v71 + v16);
        v94 = v90;
        v95 = v73 - v90;
        if (v95 < 8)
          goto LABEL_75;
        v96 = 4 * v90;
        v97 = v93 + v96;
        v98 = v93 + v74;
        v99 = v93 + v96 >= (unint64_t)v19 + v74 || (unint64_t)v19 + v96 >= v98;
        v100 = !v99;
        v101 = v97 >= v91 + v74 || v91 + 4 * v94 >= v98;
        v102 = !v101;
        if ((unint64_t)&v92[v96] < v98 && v97 < (unint64_t)&v92[v74])
          goto LABEL_75;
        if (v100)
          goto LABEL_75;
        if (v102)
          goto LABEL_75;
        v104 = v95 - (v73 & 7) + v94;
        v105 = v94 + (v73 & 7) - v73;
        v106 = (float32x4_t *)(v93 + v96 + 16);
        v107 = (float32x4_t *)&v92[v96 + 16];
        v108 = (float32x4_t *)(v91 + v96 + 16);
        v109 = (float32x4_t *)((char *)v19 + v96 + 16);
        do
        {
          v110 = vmlaq_f32(*v106, vmulq_f32(*v109, *v107), *v108);
          v106[-1] = vmlaq_f32(v106[-1], vmulq_f32(v109[-1], v107[-1]), v108[-1]);
          *v106 = v110;
          v106 += 2;
          v107 += 2;
          v108 += 2;
          v109 += 2;
          v105 += 8;
        }
        while (v105);
        v94 = v104;
        if ((v73 & 7) != 0)
        {
LABEL_75:
          v111 = v73 - v94;
          v112 = 4 * v94;
          v113 = (float *)(v93 + v112);
          v114 = (float *)(v91 + v112);
          v115 = &v19->f32[(unint64_t)v112 / 4];
          v116 = (float *)&v92[v112];
          do
          {
            v117 = *v116++;
            v118 = v117;
            v119 = *v115++;
            v120 = v119;
            v121 = *v114++;
            *v113 = *v113 + (float)((float)(v120 * v118) * v121);
            ++v113;
            --v111;
          }
          while (v111);
        }
      }
      v122 = *(_QWORD *)(a1 + 960);
      v123 = *(unsigned int *)(a1 + 52);
      if ((int)v123 < 1)
      {
        v127 = v18;
        if (!v680)
        {
          v129 = v681;
          goto LABEL_117;
        }
        v168 = 8 * v12;
        v138 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + v168);
        v159 = (uint64_t *)(v122 + v168);
        v129 = v681;
        v167 = -8 * (-(int)v123 >> 3);
        if (v167 < (int)v123)
          goto LABEL_98;
        goto LABEL_116;
      }
      v124 = *(_QWORD *)(*(_QWORD *)(a1 + 864) + v16);
      v125 = **(_QWORD **)(a1 + 2584);
      v126 = *(_QWORD *)(v122 + v16);
      v127 = v18;
      v128 = 0;
      if (v123 < 8)
      {
        v129 = v681;
LABEL_80:
        v130 = v123 - v128;
        v131 = (float *)(v126 + 4 * v128);
        v132 = (char *)(v125 + v128);
        v133 = (float *)(v124 + 4 * v128);
        do
        {
          v134 = *v133++;
          v135 = v134;
          v136 = *v132++;
          *v131 = *v131 + (float)(v135 * (float)v136);
          ++v131;
          --v130;
        }
        while (v130);
        goto LABEL_82;
      }
      v342 = v126 + 4 * v123;
      v344 = v126 < v125 + v123 && v125 < v342;
      v345 = v124 >= v342 || v126 >= v124 + 4 * v123;
      v129 = v681;
      if (!v345 || v344)
        goto LABEL_80;
      if (v123 >= 0x10)
      {
        v128 = v123 & 0x7FFFFFF0;
        v381 = v123 & 0xFFFFFFF0;
        v382 = *(float32x4_t **)(v122 + v16);
        v383 = **(int8x16_t ***)(a1 + 2584);
        v384 = *(float32x4_t **)(*(_QWORD *)(a1 + 864) + v16);
        do
        {
          v386 = v384[2];
          v385 = v384[3];
          v388 = *v384;
          v387 = v384[1];
          v384 += 4;
          v389 = *v383++;
          v390 = (int8x8_t)vextq_s8(v389, v389, 8uLL).u64[0];
          v391 = v382[2];
          v392 = vmlaq_f32(v382[3], v385, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v390, *(int8x8_t *)v385.f32), 8uLL), 8uLL))));
          v393 = vmlaq_f32(v382[1], v387, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v389.i8, *(int8x8_t *)v385.f32), 8uLL), 8uLL))));
          *v382 = vmlaq_f32(*v382, v388, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v389.i8, *(int8x8_t *)v385.f32), 8uLL), 8uLL))));
          v382[1] = v393;
          v382[2] = vmlaq_f32(v391, v386, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v390, *(int8x8_t *)v385.f32), 8uLL), 8uLL))));
          v382[3] = v392;
          v382 += 4;
          v381 -= 16;
        }
        while (v381);
        if (v128 == v123)
          goto LABEL_82;
        if ((v123 & 8) == 0)
          goto LABEL_80;
      }
      else
      {
        v128 = 0;
      }
      v346 = v128;
      v128 = v123 & 0xFFFFFFF8;
      v347 = (float32x4_t *)(v124 + 4 * v346);
      v348 = (int8x8_t *)(v125 + v346);
      v349 = (float32x4_t *)(v126 + 4 * v346);
      v350 = v346 - v128;
      do
      {
        v352 = *v347;
        v351 = v347[1];
        v347 += 2;
        v353 = *v348++;
        v354 = vmlaq_f32(v349[1], v351, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v353, *(int8x8_t *)v351.f32), 8uLL), 8uLL))));
        *v349 = vmlaq_f32(*v349, v352, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v353, *(int8x8_t *)v351.f32), 8uLL), 8uLL))));
        v349[1] = v354;
        v349 += 2;
        v350 += 8;
      }
      while (v350);
      if (v128 != v123)
        goto LABEL_80;
LABEL_82:
      if (v680)
      {
        v137 = 8 * v12;
        v138 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + v137);
        v139 = *(float32x4_t **)(*(_QWORD *)(a1 + 888) + v137);
        v140 = **(_QWORD **)(a1 + 2576);
        if (v123 < 8)
        {
          v141 = 0;
          goto LABEL_85;
        }
        v141 = 0;
        v355 = v126 + 4 * v123;
        v357 = v126 < v140 + v123 && v140 < v355;
        v358 = (unint64_t)v139 >= v355 || v126 >= (unint64_t)v139->u64 + 4 * v123;
        if (!v358 || v357)
          goto LABEL_85;
        if (v123 < 0x10)
        {
          v141 = 0;
          goto LABEL_241;
        }
        v141 = v123 & 0x7FFFFFF0;
        v394 = v123 & 0xFFFFFFF0;
        v395 = (float32x4_t *)v126;
        v396 = **(int8x16_t ***)(a1 + 2576);
        v397 = v139;
        do
        {
          v399 = v397[2];
          v398 = v397[3];
          v401 = *v397;
          v400 = v397[1];
          v397 += 4;
          v402 = *v396++;
          v403 = (int8x8_t)vextq_s8(v402, v402, 8uLL).u64[0];
          v404 = v395[2];
          v405 = vmlaq_f32(v395[3], v398, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v403, *(int8x8_t *)v398.f32), 8uLL), 8uLL))));
          v406 = vmlaq_f32(v395[1], v400, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v402.i8, *(int8x8_t *)v398.f32), 8uLL), 8uLL))));
          *v395 = vmlaq_f32(*v395, v401, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v402.i8, *(int8x8_t *)v398.f32), 8uLL), 8uLL))));
          v395[1] = v406;
          v395[2] = vmlaq_f32(v404, v399, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v403, *(int8x8_t *)v398.f32), 8uLL), 8uLL))));
          v395[3] = v405;
          v395 += 4;
          v394 -= 16;
        }
        while (v394);
        if (v141 != v123)
        {
          if ((v123 & 8) == 0)
            goto LABEL_85;
LABEL_241:
          v359 = v141;
          v141 = v123 & 0xFFFFFFF8;
          v360 = (float32x4_t *)((char *)v139 + 4 * v359);
          v361 = (int8x8_t *)(v140 + v359);
          v362 = (float32x4_t *)(v126 + 4 * v359);
          v363 = v359 - v141;
          do
          {
            v365 = *v360;
            v364 = v360[1];
            v360 += 2;
            v366 = *v361++;
            v367 = vmlaq_f32(v362[1], v364, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v366, *(int8x8_t *)v364.f32), 8uLL), 8uLL))));
            *v362 = vmlaq_f32(*v362, v365, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v366, *(int8x8_t *)v364.f32), 8uLL), 8uLL))));
            v362[1] = v367;
            v362 += 2;
            v363 += 8;
          }
          while (v363);
          if (v141 != v123)
          {
LABEL_85:
            v142 = v123 - v141;
            v143 = (float *)(v126 + 4 * v141);
            v144 = (char *)(v140 + v141);
            v145 = &v139->f32[v141];
            do
            {
              v146 = *v145++;
              v147 = v146;
              v148 = *v144++;
              *v143 = *v143 + (float)(v147 * (float)v148);
              ++v143;
              --v142;
            }
            while (v142);
          }
        }
        v149 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v12);
        v150 = **(_QWORD **)(a1 + 2568);
        if (v123 < 8)
        {
          v151 = 0;
          goto LABEL_89;
        }
        v151 = 0;
        v368 = v126 + 4 * v123;
        v370 = v126 < v150 + v123 && v150 < v368;
        v371 = v149 >= v368 || v126 >= v149 + 4 * v123;
        if (!v371 || v370)
          goto LABEL_89;
        if (v123 < 0x10)
        {
          v151 = 0;
          goto LABEL_259;
        }
        v151 = v123 & 0x7FFFFFF0;
        v407 = v123 & 0xFFFFFFF0;
        v408 = (float32x4_t *)v126;
        v409 = **(int8x16_t ***)(a1 + 2568);
        v410 = *(float32x4_t **)(*(_QWORD *)(a1 + 912) + 8 * v12);
        do
        {
          v412 = v410[2];
          v411 = v410[3];
          v414 = *v410;
          v413 = v410[1];
          v410 += 4;
          v415 = *v409++;
          v416 = (int8x8_t)vextq_s8(v415, v415, 8uLL).u64[0];
          v417 = v408[2];
          v418 = vmlaq_f32(v408[3], v411, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v416, *(int8x8_t *)v411.f32), 8uLL), 8uLL))));
          v419 = vmlaq_f32(v408[1], v413, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v415.i8, *(int8x8_t *)v411.f32), 8uLL), 8uLL))));
          *v408 = vmlaq_f32(*v408, v414, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v415.i8, *(int8x8_t *)v411.f32), 8uLL), 8uLL))));
          v408[1] = v419;
          v408[2] = vmlaq_f32(v417, v412, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v416, *(int8x8_t *)v411.f32), 8uLL), 8uLL))));
          v408[3] = v418;
          v408 += 4;
          v407 -= 16;
        }
        while (v407);
        if (v151 != v123)
        {
          if ((v123 & 8) == 0)
            goto LABEL_89;
LABEL_259:
          v372 = v151;
          v151 = v123 & 0xFFFFFFF8;
          v373 = (float32x4_t *)(v149 + 4 * v372);
          v374 = (int8x8_t *)(v150 + v372);
          v375 = (float32x4_t *)(v126 + 4 * v372);
          v376 = v372 - v151;
          do
          {
            v378 = *v373;
            v377 = v373[1];
            v373 += 2;
            v379 = *v374++;
            v380 = vmlaq_f32(v375[1], v377, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v379, *(int8x8_t *)v377.f32), 8uLL), 8uLL))));
            *v375 = vmlaq_f32(*v375, v378, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v379, *(int8x8_t *)v377.f32), 8uLL), 8uLL))));
            v375[1] = v380;
            v375 += 2;
            v376 += 8;
          }
          while (v376);
          if (v151 != v123)
          {
LABEL_89:
            v152 = v123 - v151;
            v153 = (float *)(v126 + 4 * v151);
            v154 = (char *)(v150 + v151);
            v155 = (float *)(v149 + 4 * v151);
            do
            {
              v156 = *v155++;
              v157 = v156;
              v158 = *v154++;
              *v153 = *v153 + (float)(v157 * (float)v158);
              ++v153;
              --v152;
            }
            while (v152);
          }
        }
        v159 = (uint64_t *)(v122 + 8 * v12);
        v160 = (int)v123 >> 3;
        if ((int)v123 > 7)
        {
          v161 = 0;
          v162 = *v159;
          do
          {
            v163 = (float32x4_t *)(v126 + 32 * v161);
            v164 = (float32x4_t *)(v138 + 32 * v161);
            v165 = (float32x4_t *)(v162 + 32 * v161);
            v166 = vmlaq_f32(v163[1], v164[1], v165[1]);
            *v163 = vmlaq_f32(*v163, *v164, *v165);
            v163[1] = v166;
            ++v161;
          }
          while (v160 != (_DWORD)v161);
        }
        v167 = 8 * v160;
        if (8 * v160 >= (int)v123)
          goto LABEL_116;
LABEL_98:
        v169 = *v159;
        v170 = *(_QWORD *)(v122 + 8 * v15);
        v171 = v167;
        v172 = (int)v123 - (uint64_t)v167;
        if (v172 < 8)
          goto LABEL_114;
        v173 = 4 * v167;
        v174 = v170 + 4 * (int)v123;
        v175 = v170 + v173 >= (unint64_t)(v138 + 4 * (int)v123) || v138 + 4 * v167 >= v174;
        v176 = !v175;
        if (v169 + v173 < v174 && v170 + v173 < (unint64_t)(v169 + 4 * (int)v123))
          goto LABEL_114;
        if (v176)
          goto LABEL_114;
        v178 = v172 - (v123 & 7) + v171;
        v179 = v171 + (v123 & 7) - (int)v123;
        v180 = (float32x4_t *)(v170 + v173 + 16);
        v181 = (float32x4_t *)(v169 + v173 + 16);
        v182 = (float32x4_t *)(v138 + v173 + 16);
        do
        {
          v183 = vmlaq_f32(*v180, *v182, *v181);
          v180[-1] = vmlaq_f32(v180[-1], v182[-1], v181[-1]);
          *v180 = v183;
          v180 += 2;
          v181 += 2;
          v182 += 2;
          v179 += 8;
        }
        while (v179);
        v171 = v178;
        if ((v123 & 7) != 0)
        {
LABEL_114:
          v184 = (int)v123 - v171;
          v185 = (float *)(v170 + 4 * v171);
          v186 = (float *)(v138 + 4 * v171);
          v187 = (float *)(v169 + 4 * v171);
          do
          {
            v188 = *v187++;
            v189 = v188;
            v190 = *v186++;
            *v185 = *v185 + (float)(v190 * v189);
            ++v185;
            --v184;
          }
          while (v184);
        }
      }
LABEL_116:
      LODWORD(v123) = *(_DWORD *)(a1 + 52);
      v122 = *(_QWORD *)(a1 + 960);
LABEL_117:
      v191 = *(_QWORD *)(a1 + 936);
      v192 = 4 * (int)v123;
      bzero(*(void **)(v191 + 8 * v15), v192);
      v193 = (int)v123 / 8;
      if ((int)v123 >= 8)
      {
        v194 = *(float32x4_t **)(v191 + v16);
        v195 = *(float32x4_t **)(v122 + v16);
        v196 = (int)v123 / 8;
        v197 = v127;
        v198 = (float32x4_t *)*iterations;
        do
        {
          v199 = *v198;
          v200 = v198[1];
          v198 += 2;
          v201 = *v195;
          v202 = v195[1];
          v195 += 2;
          v203 = vmulq_f32(v202, v200);
          v204 = vmulq_f32(v201, v199);
          v206 = *v197;
          v205 = v197[1];
          v197 += 2;
          v207 = vmlaq_f32(v194[1], v203, v205);
          *v194 = vmlaq_f32(*v194, v204, v206);
          v194[1] = v207;
          v194 += 2;
          --v196;
        }
        while (v196);
      }
      v208 = 8 * v193;
      if (8 * v193 < (int)v123)
      {
        v209 = *(_QWORD *)(v122 + v16);
        v210 = (char *)*iterations;
        v211 = *(_QWORD *)(v191 + v16);
        v212 = v208;
        v213 = (int)v123 - (uint64_t)v208;
        if (v213 < 8)
          goto LABEL_144;
        v214 = 4 * v208;
        v215 = v211 + v214;
        v216 = v211 + v192;
        v217 = v211 + v214 >= v209 + v192 || v209 + v214 >= v216;
        v218 = !v217;
        v219 = v215 >= (unint64_t)v127 + v192 || (unint64_t)v127->u64 + 4 * v212 >= v216;
        v220 = !v219;
        if ((unint64_t)&v210[v214] < v216 && v215 < (unint64_t)&v210[v192])
          goto LABEL_144;
        if (v218)
          goto LABEL_144;
        if (v220)
          goto LABEL_144;
        v222 = v213 - (v123 & 7) + v212;
        v223 = v212 + (v123 & 7) - (int)v123;
        v224 = (float32x4_t *)(v211 + v214 + 16);
        v225 = (float32x4_t *)&v210[v214 + 16];
        v226 = (float32x4_t *)((char *)v127 + v214 + 16);
        v227 = (float32x4_t *)(v209 + v214 + 16);
        do
        {
          v228 = vmlaq_f32(*v224, vmulq_f32(*v227, *v225), *v226);
          v224[-1] = vmlaq_f32(v224[-1], vmulq_f32(v227[-1], v225[-1]), v226[-1]);
          *v224 = v228;
          v224 += 2;
          v225 += 2;
          v226 += 2;
          v227 += 2;
          v223 += 8;
        }
        while (v223);
        v212 = v222;
        if ((v123 & 7) != 0)
        {
LABEL_144:
          v229 = (int)v123 - v212;
          v230 = (float *)(v211 + 4 * v212);
          v231 = &v127->f32[v212];
          v232 = (float *)(v209 + 4 * v212);
          v233 = (float *)&v210[4 * v212];
          do
          {
            v234 = *v233++;
            v235 = v234;
            v236 = *v232++;
            v237 = v236;
            v238 = *v231++;
            *v230 = *v230 + (float)((float)(v237 * v235) * v238);
            ++v230;
            --v229;
          }
          while (v229);
        }
      }
      if (v690)
      {
        v239 = *(_QWORD *)(a1 + 888);
        v240 = *(_QWORD *)(a1 + 960);
        v241 = *(_QWORD *)(a1 + 88);
        v242 = *(int *)(a1 + 52);
        v243 = 4 * v242;
        bzero(*(void **)(v239 + 8 * v15), 4 * v242);
        v244 = (int)v242 / 8;
        if ((int)v242 >= 8)
        {
          v245 = *(float32x4_t **)(v239 + v16);
          v246 = *(float32x4_t **)(v241 + 8 * v677);
          v247 = (int)v242 / 8;
          v248 = *(float32x4_t **)(v240 + v16);
          v249 = (float32x4_t *)*v678;
          do
          {
            v250 = *v249;
            v251 = v249[1];
            v249 += 2;
            v252 = *v248;
            v253 = v248[1];
            v248 += 2;
            v254 = vmulq_f32(v253, v251);
            v255 = vmulq_f32(v252, v250);
            v257 = *v246;
            v256 = v246[1];
            v246 += 2;
            v258 = vmlaq_f32(v245[1], v254, v256);
            *v245 = vmlaq_f32(*v245, v255, v257);
            v245[1] = v258;
            v245 += 2;
            --v247;
          }
          while (v247);
        }
        v259 = 8 * v244;
        if (8 * v244 < (int)v242)
        {
          v260 = *(_QWORD *)(v240 + v16);
          v261 = *(_QWORD *)(v241 + 8 * v677);
          v262 = (char *)*v678;
          v263 = *(_QWORD *)(v239 + v16);
          v264 = v259;
          v265 = v242 - v259;
          if (v265 < 8)
            goto LABEL_174;
          v266 = 4 * v259;
          v267 = v263 + v266;
          v268 = v263 + v243;
          v269 = v263 + v266 >= (unint64_t)(v260 + v243) || v260 + v266 >= v268;
          v270 = !v269;
          v271 = v267 >= v261 + v243 || v261 + 4 * v264 >= v268;
          v272 = !v271;
          if ((unint64_t)&v262[v266] < v268 && v267 < (unint64_t)&v262[v243])
            goto LABEL_174;
          if (v270)
            goto LABEL_174;
          if (v272)
            goto LABEL_174;
          v274 = v265 - (v242 & 7) + v264;
          v275 = v264 + (v242 & 7) - v242;
          v276 = (float32x4_t *)(v263 + v266 + 16);
          v277 = (float32x4_t *)&v262[v266 + 16];
          v278 = (float32x4_t *)(v261 + v266 + 16);
          v279 = (float32x4_t *)(v260 + v266 + 16);
          do
          {
            v280 = vmlaq_f32(*v276, vmulq_f32(*v279, *v277), *v278);
            v276[-1] = vmlaq_f32(v276[-1], vmulq_f32(v279[-1], v277[-1]), v278[-1]);
            *v276 = v280;
            v276 += 2;
            v277 += 2;
            v278 += 2;
            v279 += 2;
            v275 += 8;
          }
          while (v275);
          v264 = v274;
          if ((v242 & 7) != 0)
          {
LABEL_174:
            v281 = v242 - v264;
            v282 = (float *)(v263 + 4 * v264);
            v283 = (float *)(v261 + 4 * v264);
            v284 = (float *)(v260 + 4 * v264);
            v285 = (float *)&v262[4 * v264];
            do
            {
              v286 = *v285++;
              v287 = v286;
              v288 = *v284++;
              v289 = v288;
              v290 = *v283++;
              *v282 = *v282 + (float)((float)(v289 * v287) * v290);
              ++v282;
              --v281;
            }
            while (v281);
          }
        }
      }
      v291 = *(_QWORD *)(a1 + 912);
      v292 = *(_QWORD *)(a1 + 960);
      v293 = *(int *)(a1 + 52);
      v294 = 4 * v293;
      bzero(*(void **)(v291 + 8 * v15), 4 * v293);
      v295 = (int)v293 / 8;
      v7 = v674;
      v6 = v675;
      if ((int)v293 >= 8)
      {
        v296 = *(float32x4_t **)(v291 + v16);
        v297 = (float32x4_t *)*v674;
        v298 = *(float32x4_t **)(v292 + v16);
        v299 = (int)v293 / 8;
        v300 = (float32x4_t *)*v675;
        do
        {
          v301 = *v300;
          v302 = v300[1];
          v300 += 2;
          v303 = *v298;
          v304 = v298[1];
          v298 += 2;
          v305 = vmulq_f32(v304, v302);
          v306 = vmulq_f32(v303, v301);
          v308 = *v297;
          v307 = v297[1];
          v297 += 2;
          v309 = vmlaq_f32(v296[1], v305, v307);
          *v296 = vmlaq_f32(*v296, v306, v308);
          v296[1] = v309;
          v296 += 2;
          --v299;
        }
        while (v299);
      }
      v310 = 8 * v295;
      if (8 * v295 < (int)v293)
      {
        v311 = (char *)*v675;
        v312 = *(_QWORD *)(v292 + v16);
        v313 = (char *)*v674;
        v314 = *(_QWORD *)(v291 + v16);
        v315 = v310;
        v316 = v293 - v310;
        if (v316 < 8)
          goto LABEL_203;
        v317 = 4 * v310;
        v318 = v314 + v317;
        v319 = v314 + v294;
        v320 = v314 + v317 >= (unint64_t)(v312 + v294) || v312 + v317 >= v319;
        v321 = !v320;
        v322 = v318 >= (unint64_t)&v313[v294] || (unint64_t)&v313[4 * v315] >= v319;
        v323 = !v322;
        if ((unint64_t)&v311[v317] < v319 && v318 < (unint64_t)&v311[v294])
          goto LABEL_203;
        if (v321)
          goto LABEL_203;
        if (v323)
          goto LABEL_203;
        v325 = v316 - (v293 & 7) + v315;
        v326 = v315 + (v293 & 7) - v293;
        v327 = (float32x4_t *)(v314 + v317 + 16);
        v328 = (float32x4_t *)&v311[v317 + 16];
        v329 = (float32x4_t *)&v313[v317 + 16];
        v330 = (float32x4_t *)(v312 + v317 + 16);
        do
        {
          v331 = vmlaq_f32(*v327, vmulq_f32(*v330, *v328), *v329);
          v327[-1] = vmlaq_f32(v327[-1], vmulq_f32(v330[-1], v328[-1]), v329[-1]);
          *v327 = v331;
          v327 += 2;
          v328 += 2;
          v329 += 2;
          v330 += 2;
          v326 += 8;
        }
        while (v326);
        v315 = v325;
        if ((v293 & 7) != 0)
        {
LABEL_203:
          v332 = v293 - v315;
          v333 = (float *)(v314 + 4 * v315);
          v334 = (float *)&v313[4 * v315];
          v335 = (float *)(v312 + 4 * v315);
          v336 = (float *)&v311[4 * v315];
          do
          {
            v337 = *v336++;
            v338 = v337;
            v339 = *v335++;
            v340 = v339;
            v341 = *v334++;
            *v333 = *v333 + (float)((float)(v340 * v338) * v341);
            ++v333;
            --v332;
          }
          while (v332);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + v16), 4 * *(int *)(a1 + 48));
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 816) + v16), (_QWORD *)(*(_QWORD *)(a1 + 912) + v16), *(_QWORD **)(a1 + 2504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.0);
        if (v690)
          sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 816) + v16), (_QWORD *)(*(_QWORD *)(a1 + 888) + v16), *(_QWORD **)(a1 + 2512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 816) + v16), (_QWORD *)(*(_QWORD *)(a1 + 864) + v16), *(_QWORD **)(a1 + 2520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 816) + v16), (_QWORD *)(*(_QWORD *)(a1 + 936) + v16), *(_QWORD **)(a1 + 2528), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      v8 = v129 - 1;
    }
    while (v129 > 0);
  }
  v420 = *(unsigned int *)(a1 + 52);
  if ((int)v420 > 0)
  {
    v421 = 4 * v420;
    bzero(*(void **)(a1 + 1528), 4 * v420);
    v422 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v421);
    v688 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v421);
    if (*(int *)(a1 + 56) <= 0)
      goto LABEL_281;
    goto LABEL_280;
  }
  v422 = (float32x4_t **)(a1 + 1536);
  v688 = (float32x4_t **)(a1 + 1544);
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_280:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_281:
  if (a5 > 1)
  {
    v423 = (a5 - 2);
    v424 = 1;
    v683 = v422;
    do
    {
      while (1)
      {
        v441 = v693 - v424;
        v691 = v424;
        if (!*(_BYTE *)(a1 + 2672))
          v441 = v424;
        v442 = v441;
        if (*(_BYTE *)(a1 + 2672))
          v443 = v423;
        else
          v443 = 1;
        if (*(_BYTE *)(a1 + 2672))
          v444 = v442 + 1;
        else
          v444 = v442 - 1;
        v445 = *(_QWORD *)(a1 + 912);
        v446 = *(_QWORD *)(a1 + 88);
        v447 = *(int *)(a1 + 52);
        v448 = (int)v447 / 8;
        if ((int)v447 >= 8)
        {
          v449 = *(float32x4_t **)(a1 + 1528);
          v450 = *(float32x4_t **)(v446 + 8 * v444);
          v451 = (int)v447 / 8;
          v452 = *(float32x4_t **)(v445 + 8 * v442);
          do
          {
            v454 = *v452;
            v453 = v452[1];
            v452 += 2;
            v456 = *v450;
            v455 = v450[1];
            v450 += 2;
            v457 = vmlaq_f32(v449[1], v455, v453);
            *v449 = vmlaq_f32(*v449, v456, v454);
            v449[1] = v457;
            v449 += 2;
            --v451;
          }
          while (v451);
        }
        v458 = 8 * v448;
        if (8 * v448 < (int)v447)
        {
          v459 = *(_QWORD *)(v445 + 8 * v442);
          v460 = *(_QWORD *)(v446 + 8 * v444);
          v461 = *(_QWORD *)(a1 + 1528);
          v462 = v458;
          v463 = v447 - v458;
          if (v463 < 8)
            goto LABEL_312;
          v464 = 4 * v458;
          v465 = v461 + 4 * v447;
          v466 = v461 + v464 >= (unint64_t)(v460 + 4 * v447) || v460 + 4 * v458 >= v465;
          v467 = !v466;
          if (v459 + v464 < v465 && v461 + v464 < (unint64_t)(v459 + 4 * v447))
            goto LABEL_312;
          if (v467)
            goto LABEL_312;
          v469 = v463 - (v447 & 7) + v462;
          v470 = v462 + (v447 & 7) - v447;
          v471 = (float32x4_t *)(v461 + v464 + 16);
          v472 = (float32x4_t *)(v459 + v464 + 16);
          v473 = (float32x4_t *)(v460 + v464 + 16);
          do
          {
            v474 = vmlaq_f32(*v471, *v473, *v472);
            v471[-1] = vmlaq_f32(v471[-1], v473[-1], v472[-1]);
            *v471 = v474;
            v471 += 2;
            v472 += 2;
            v473 += 2;
            v470 += 8;
          }
          while (v470);
          v462 = v469;
          if ((v447 & 7) != 0)
          {
LABEL_312:
            v475 = v447 - v462;
            v476 = (float *)(v461 + 4 * v462);
            v477 = (float *)(v460 + 4 * v462);
            v478 = (float *)(v459 + 4 * v462);
            do
            {
              v479 = *v478++;
              v480 = v479;
              v481 = *v477++;
              *v476 = *v476 + (float)(v481 * v480);
              ++v476;
              --v475;
            }
            while (v475);
          }
        }
        v482 = *(_QWORD *)(a1 + 888);
        v483 = *(_QWORD *)(a1 + 88);
        v484 = *(int *)(a1 + 52);
        v485 = (int)v484 / 8;
        if ((int)v484 >= 8)
        {
          v486 = *v422;
          v487 = *(float32x4_t **)(v483 + 8 * v444);
          v488 = (int)v484 / 8;
          v489 = *(float32x4_t **)(v482 + 8 * v442);
          do
          {
            v491 = *v489;
            v490 = v489[1];
            v489 += 2;
            v493 = *v487;
            v492 = v487[1];
            v487 += 2;
            v494 = vmlaq_f32(v486[1], v492, v490);
            *v486 = vmlaq_f32(*v486, v493, v491);
            v486[1] = v494;
            v486 += 2;
            --v488;
          }
          while (v488);
        }
        v495 = 8 * v485;
        if (8 * v485 < (int)v484)
        {
          v496 = *(_QWORD *)(v482 + 8 * v442);
          v497 = *(_QWORD *)(v483 + 8 * v444);
          v498 = *v422;
          v499 = v495;
          v500 = v484 - v495;
          if (v500 < 8)
            goto LABEL_334;
          v501 = 4 * v495;
          v502 = (unint64_t)v498->u64 + 4 * v484;
          v503 = (unint64_t)v498 + v501 >= v497 + 4 * v484 || v497 + 4 * v495 >= v502;
          v504 = !v503;
          if (v496 + v501 < v502 && (unint64_t)v498 + v501 < v496 + 4 * v484)
            goto LABEL_334;
          if (v504)
            goto LABEL_334;
          v506 = v500 - (v484 & 7) + v499;
          v507 = v499 + (v484 & 7) - v484;
          v508 = (float32x4_t *)((char *)v498 + v501 + 16);
          v509 = (float32x4_t *)(v496 + v501 + 16);
          v510 = (float32x4_t *)(v497 + v501 + 16);
          do
          {
            v511 = vmlaq_f32(*v508, *v510, *v509);
            v508[-1] = vmlaq_f32(v508[-1], v510[-1], v509[-1]);
            *v508 = v511;
            v508 += 2;
            v509 += 2;
            v510 += 2;
            v507 += 8;
          }
          while (v507);
          v499 = v506;
          if ((v484 & 7) != 0)
          {
LABEL_334:
            v512 = v484 - v499;
            v513 = &v498->f32[v499];
            v514 = (float *)(v497 + 4 * v499);
            v515 = (float *)(v496 + 4 * v499);
            do
            {
              v516 = *v515++;
              v517 = v516;
              v518 = *v514++;
              *v513 = *v513 + (float)(v518 * v517);
              ++v513;
              --v512;
            }
            while (v512);
          }
        }
        v519 = *(_QWORD *)(a1 + 912) + 8 * v442;
        v520 = *(_QWORD *)(a1 + 112) + 8 * v444;
        v521 = *(_DWORD *)(a1 + 52);
        if ((_DWORD)v442 == v443)
          break;
        v425 = v423;
        v426 = *(_QWORD *)(a1 + 1496);
        v685 = v444;
        global_queue = dispatch_get_global_queue(0, 0);
        v428 = (const void *)MEMORY[0x1E0C809B0];
        block = (const void *)MEMORY[0x1E0C809B0];
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v521;
        v701 = v426;
        v702 = v519;
        v423 = v425;
        v703 = v520;
        dispatch_apply(v521, global_queue, &block);
        v429 = *(_QWORD *)(a1 + 888) + 8 * v442;
        v430 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v431 = *(int *)(a1 + 52);
        v432 = *(_QWORD *)(a1 + 1504);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v431;
        v701 = v432;
        v702 = v429;
        v703 = v430;
        dispatch_apply(v431, global_queue, &block);
        v433 = *(_QWORD *)(a1 + 864) + 8 * v442;
        v434 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v435 = *(int *)(a1 + 52);
        v436 = *(_QWORD *)(a1 + 1512);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v435;
        v701 = v436;
        v702 = v433;
        v703 = v434;
        dispatch_apply(v435, global_queue, &block);
        v437 = *(_QWORD *)(a1 + 936) + 8 * v442;
        v438 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v439 = *(int *)(a1 + 52);
        v440 = *(_QWORD *)(a1 + 1520);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v422 = v683;
        v704 = v439;
        v701 = v440;
        v702 = v437;
        v703 = v438;
        dispatch_apply(v439, global_queue, &block);
        v424 = v691 + 1;
        if (v691 + 1 == a5)
          goto LABEL_338;
      }
      bzero(*(void **)(a1 + 1496), 4 * (v521 * v521));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1504), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1512), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1520), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      v424 = v691 + 1;
    }
    while (v691 + 1 != a5);
LABEL_338:
    v522 = 1;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2672))
        v525 = v693 - v522;
      else
        v525 = v522;
      if (*(_BYTE *)(a1 + 2672))
        v526 = v423;
      else
        v526 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        v534 = 8 * v525;
        v535 = *(_QWORD *)(a1 + 888) + v534;
        v536 = *(_QWORD *)(a1 + 64) + v534;
        v537 = *(_DWORD *)(a1 + 48);
        v538 = *(int *)(a1 + 52);
        if (v525 == v526)
        {
          bzero(*(void **)(a1 + 1472), 4 * v537 * (int)v538);
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v523 = *(_QWORD *)(a1 + 1472);
          v524 = dispatch_get_global_queue(0, 0);
          block = (const void *)MEMORY[0x1E0C809B0];
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v537;
          v701 = v523;
          v702 = v535;
          v703 = v536;
          dispatch_apply(v538, v524, &block);
        }
        goto LABEL_340;
      }
      v527 = *(_QWORD *)(a1 + 888);
      v528 = *(_QWORD *)(a1 + 208) + 24 * v525;
      v530 = *(_BYTE **)v528;
      v529 = *(_BYTE **)(v528 + 8);
      v531 = v529 - v530;
      if (v529 == v530)
        break;
      if ((v531 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v532 = operator new(v529 - v530);
      memcpy(v532, v530, v531);
      v533 = *(unsigned int *)(a1 + 52);
      if ((int)v533 >= 1)
        goto LABEL_357;
LABEL_364:
      if (*(int *)(a1 + 1116) >= 1)
      {
        v551 = 0;
        v552 = *(_QWORD *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v552 + 24 * *(int *)(a1 + 1120)) + 4 * v551) = *((_DWORD *)v532 + v551);
          ++v551;
        }
        while (v551 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_369:
        operator delete(v532);
        goto LABEL_340;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v532)
        goto LABEL_369;
LABEL_340:
      if (++v522 == a5)
        goto LABEL_370;
    }
    v532 = 0;
    v533 = *(unsigned int *)(a1 + 52);
    if ((int)v533 < 1)
      goto LABEL_364;
LABEL_357:
    v539 = 0;
    v540 = *(_QWORD *)(v527 + 8 * v525);
    v541 = *(_QWORD *)(*(_QWORD *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v533 < 8)
      goto LABEL_362;
    if ((unint64_t)(v541 - v540) < 0x20)
      goto LABEL_362;
    v539 = v533 & 0x7FFFFFF8;
    v542 = (__int128 *)(v540 + 16);
    v543 = (_OWORD *)(v541 + 16);
    v544 = v533 & 0xFFFFFFF8;
    do
    {
      v545 = *v542;
      *(v543 - 1) = *(v542 - 1);
      *v543 = v545;
      v542 += 2;
      v543 += 2;
      v544 -= 8;
    }
    while (v544);
    if (v539 != v533)
    {
LABEL_362:
      v546 = v533 - v539;
      v547 = 4 * v539;
      v548 = (_DWORD *)(v541 + 4 * v539);
      v549 = (int *)(v540 + v547);
      do
      {
        v550 = *v549++;
        *v548++ = v550;
        --v546;
      }
      while (v546);
    }
    goto LABEL_364;
  }
LABEL_370:
  if (a5 >= 1)
  {
    v692 = 0;
    while (1)
    {
      v566 = v693 - v692;
      if (*(_BYTE *)(a1 + 2672))
      {
        v567 = v693;
      }
      else
      {
        v566 = v692;
        v567 = 0;
      }
      v568 = v566;
      v569 = *(_QWORD *)(a1 + 864);
      v570 = *(_QWORD *)(a1 + 88);
      v571 = *(int *)(a1 + 52);
      v572 = (int)v571 / 8;
      v573 = 8 * v568;
      if ((int)v571 >= 8)
      {
        v574 = *v688;
        v575 = *(float32x4_t **)(v570 + 8 * v568);
        v576 = (int)v571 / 8;
        v577 = *(float32x4_t **)(v569 + 8 * v568);
        do
        {
          v579 = *v577;
          v578 = v577[1];
          v577 += 2;
          v581 = *v575;
          v580 = v575[1];
          v575 += 2;
          v582 = vmlaq_f32(v574[1], v580, v578);
          *v574 = vmlaq_f32(*v574, v581, v579);
          v574[1] = v582;
          v574 += 2;
          --v576;
        }
        while (v576);
      }
      v583 = 8 * v572;
      if (8 * v572 < (int)v571)
      {
        v584 = *(_QWORD *)(v569 + 8 * v568);
        v585 = *(_QWORD *)(v570 + 8 * v568);
        v586 = *v688;
        v587 = v583;
        v588 = v571 - v583;
        if (v588 < 8)
          goto LABEL_397;
        v589 = 4 * v583;
        v590 = (unint64_t)v586->u64 + 4 * v571;
        v591 = (unint64_t)v586 + v589 >= v585 + 4 * v571 || v585 + 4 * v583 >= v590;
        v592 = !v591;
        if (v584 + v589 < v590 && (unint64_t)v586 + v589 < v584 + 4 * v571)
          goto LABEL_397;
        if (v592)
          goto LABEL_397;
        v594 = v588 - (v571 & 7) + v587;
        v595 = v587 + (v571 & 7) - v571;
        v596 = (float32x4_t *)((char *)v586 + v589 + 16);
        v597 = (float32x4_t *)(v584 + v589 + 16);
        v598 = (float32x4_t *)(v585 + v589 + 16);
        do
        {
          v599 = vmlaq_f32(*v596, *v598, *v597);
          v596[-1] = vmlaq_f32(v596[-1], v598[-1], v597[-1]);
          *v596 = v599;
          v596 += 2;
          v597 += 2;
          v598 += 2;
          v595 += 8;
        }
        while (v595);
        v587 = v594;
        if ((v571 & 7) != 0)
        {
LABEL_397:
          v600 = v571 - v587;
          v601 = &v586->f32[v587];
          v602 = (float *)(v585 + 4 * v587);
          v603 = (float *)(v584 + 4 * v587);
          do
          {
            v604 = *v603++;
            v605 = v604;
            v606 = *v602++;
            *v601 = *v601 + (float)(v606 * v605);
            ++v601;
            --v600;
          }
          while (v600);
        }
      }
      if (a3[1] == *a3)
      {
        v607 = *(_QWORD *)(a1 + 912);
LABEL_406:
        v616 = v607 + v573;
        v617 = *(_QWORD *)(a1 + 64) + v573;
        v618 = *(_DWORD *)(a1 + 48);
        v619 = *(int *)(a1 + 52);
        if ((_DWORD)v568 == v567)
        {
          bzero(*(void **)(a1 + 1464), 4 * v618 * (int)v619);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1480), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1488), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v553 = *(_QWORD *)(a1 + 1464);
          v554 = dispatch_get_global_queue(0, 0);
          v555 = (const void *)MEMORY[0x1E0C809B0];
          block = (const void *)MEMORY[0x1E0C809B0];
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v618;
          v701 = v553;
          v702 = v616;
          v703 = v617;
          dispatch_apply(v619, v554, &block);
          v556 = *(_QWORD *)(a1 + 864) + v573;
          v557 = *(_QWORD *)(a1 + 64) + v573;
          v558 = *(_DWORD *)(a1 + 48);
          v559 = *(int *)(a1 + 52);
          v560 = *(_QWORD *)(a1 + 1480);
          block = v555;
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v558;
          v701 = v560;
          v702 = v556;
          v703 = v557;
          dispatch_apply(v559, v554, &block);
          v561 = *(_QWORD *)(a1 + 936) + v573;
          v562 = *(_QWORD *)(a1 + 64) + v573;
          v563 = *(_DWORD *)(a1 + 48);
          v564 = *(int *)(a1 + 52);
          v565 = *(_QWORD *)(a1 + 1488);
          block = v555;
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v563;
          v701 = v565;
          v702 = v561;
          v703 = v562;
          dispatch_apply(v564, v554, &block);
        }
        goto LABEL_373;
      }
      v607 = *(_QWORD *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_406;
      v608 = *(_QWORD *)(a1 + 208);
      v609 = 24 * v568;
      v610 = v608 + 24 * v568;
      v612 = *(_BYTE **)v610;
      v611 = *(_BYTE **)(v610 + 8);
      v613 = v611 - v612;
      if (v611 == v612)
        break;
      if ((v613 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v614 = operator new(v611 - v612);
      memcpy(v614, v612, v613);
      v609 = 24 * v568;
      v615 = *(unsigned int *)(a1 + 52);
      if ((int)v615 >= 1)
        goto LABEL_409;
LABEL_416:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v614)
          goto LABEL_422;
      }
      else
      {
        v632 = 0;
        v633 = *(_QWORD *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v633 + 24 * *(int *)(a1 + 1000)) + 4 * v632) = *((_DWORD *)v614 + v632);
          ++v632;
        }
        while (v632 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v614);
      v608 = *(_QWORD *)(a1 + 208);
LABEL_422:
      v634 = *(_QWORD *)(a1 + 864);
      v635 = *(_BYTE **)(v608 + 24 * (int)v568);
      v636 = *(_BYTE **)(v608 + v609 + 8);
      v637 = v636 - v635;
      if (v636 == v635)
      {
        v638 = 0;
        v639 = *(unsigned int *)(a1 + 52);
        if ((int)v639 < 1)
          goto LABEL_434;
LABEL_427:
        v640 = 0;
        v641 = *(_QWORD *)(v634 + 8 * v568);
        v642 = *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v639 < 8)
          goto LABEL_432;
        if ((unint64_t)(v642 - v641) < 0x20)
          goto LABEL_432;
        v640 = v639 & 0x7FFFFFF8;
        v643 = (__int128 *)(v641 + 16);
        v644 = (_OWORD *)(v642 + 16);
        v645 = v639 & 0xFFFFFFF8;
        do
        {
          v646 = *v643;
          *(v644 - 1) = *(v643 - 1);
          *v644 = v646;
          v643 += 2;
          v644 += 2;
          v645 -= 8;
        }
        while (v645);
        if (v640 != v639)
        {
LABEL_432:
          v647 = v639 - v640;
          v648 = 4 * v640;
          v649 = (_DWORD *)(v642 + 4 * v640);
          v650 = (int *)(v641 + v648);
          do
          {
            v651 = *v650++;
            *v649++ = v651;
            --v647;
          }
          while (v647);
        }
        goto LABEL_434;
      }
      if ((v637 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v638 = operator new(v636 - v635);
      memcpy(v638, v635, v637);
      v639 = *(unsigned int *)(a1 + 52);
      if ((int)v639 >= 1)
        goto LABEL_427;
LABEL_434:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v638)
          goto LABEL_440;
      }
      else
      {
        v652 = 0;
        v653 = *(_QWORD *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v653 + 24 * *(int *)(a1 + 1240)) + 4 * v652) = *((_DWORD *)v638 + v652);
          ++v652;
        }
        while (v652 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v638);
      v608 = *(_QWORD *)(a1 + 208);
LABEL_440:
      v654 = *(_QWORD *)(a1 + 936);
      v655 = *(_BYTE **)(v608 + 24 * (int)v568);
      v656 = *(_BYTE **)(v608 + v609 + 8);
      v657 = v656 - v655;
      if (v656 == v655)
      {
        v658 = 0;
        v659 = *(unsigned int *)(a1 + 52);
        if ((int)v659 < 1)
          goto LABEL_452;
LABEL_445:
        v660 = 0;
        v661 = *(_QWORD *)(v654 + 8 * v568);
        v662 = *(_QWORD *)(*(_QWORD *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v659 < 8)
          goto LABEL_450;
        if ((unint64_t)(v662 - v661) < 0x20)
          goto LABEL_450;
        v660 = v659 & 0x7FFFFFF8;
        v663 = (__int128 *)(v661 + 16);
        v664 = (_OWORD *)(v662 + 16);
        v665 = v659 & 0xFFFFFFF8;
        do
        {
          v666 = *v663;
          *(v664 - 1) = *(v663 - 1);
          *v664 = v666;
          v663 += 2;
          v664 += 2;
          v665 -= 8;
        }
        while (v665);
        if (v660 != v659)
        {
LABEL_450:
          v667 = v659 - v660;
          v668 = 4 * v660;
          v669 = (_DWORD *)(v662 + 4 * v660);
          v670 = (int *)(v661 + v668);
          do
          {
            v671 = *v670++;
            *v669++ = v671;
            --v667;
          }
          while (v667);
        }
        goto LABEL_452;
      }
      if ((v657 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v658 = operator new(v656 - v655);
      memcpy(v658, v655, v657);
      v659 = *(unsigned int *)(a1 + 52);
      if ((int)v659 >= 1)
        goto LABEL_445;
LABEL_452:
      if (*(int *)(a1 + 1356) >= 1)
      {
        v672 = 0;
        v673 = *(_QWORD *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v673 + 24 * *(int *)(a1 + 1360)) + 4 * v672) = *((_DWORD *)v658 + v672);
          ++v672;
        }
        while (v672 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_457:
        operator delete(v658);
        goto LABEL_373;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v658)
        goto LABEL_457;
LABEL_373:
      if (++v692 == a5)
        return;
    }
    v614 = 0;
    v615 = *(unsigned int *)(a1 + 52);
    if ((int)v615 < 1)
      goto LABEL_416;
LABEL_409:
    v620 = 0;
    v621 = *(_QWORD *)(v607 + 8 * v568);
    v622 = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v615 < 8)
      goto LABEL_414;
    if ((unint64_t)(v622 - v621) < 0x20)
      goto LABEL_414;
    v620 = v615 & 0x7FFFFFF8;
    v623 = (__int128 *)(v621 + 16);
    v624 = (_OWORD *)(v622 + 16);
    v625 = v615 & 0xFFFFFFF8;
    do
    {
      v626 = *v623;
      *(v624 - 1) = *(v623 - 1);
      *v624 = v626;
      v623 += 2;
      v624 += 2;
      v625 -= 8;
    }
    while (v625);
    if (v620 != v615)
    {
LABEL_414:
      v627 = v615 - v620;
      v628 = 4 * v620;
      v629 = (_DWORD *)(v622 + 4 * v620);
      v630 = (int *)(v621 + v628);
      do
      {
        v631 = *v630++;
        *v629++ = v631;
        --v627;
      }
      while (v627);
    }
    goto LABEL_416;
  }
}

void sub_19C12C73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C12C798(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE4188D0);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE4188D0);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE4190B0 = 0;
      *(_QWORD *)algn_1EE4190B8 = 0;
      qword_1EE4190C0 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE4190B0, &dword_19C079000);
      __cxa_guard_release(&qword_1EE4188D0);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE4190B0);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19C12C864(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19C12C898(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

void sub_19C12C968(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFD8, 0))__cxa_bad_cast();
    sub_19C2210D4(34);
  }
  sub_19C2210D4(1);
}

void sub_19C12C9B0()
{
  sub_19C2210D4(1);
}

void sub_19C12C9C0()
{
  sub_19C2210D4(0);
}

void sub_19C12C9D4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C12F880(a1);
  operator delete(v1);
}

void sub_19C12C9E8(unint64_t *a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, signed int a7)
{
  signed int v7;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v7 = a7;
LABEL_8:
          sub_19C12CB84(a1, a2, a3, a4, v7);
          return;
        case 8u:
          sub_19C10232C((int)a1, a2, a3, a4);
        case 0x10u:
          sub_19C102260((int)a1, a2, a3, a4);
      }
      break;
  }
}

void sub_19C12CAAC(unint64_t *a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  int v8;
  int v9;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v8 = a7;
          v9 = a8;
LABEL_8:
          sub_19C12CC98(a1, a2, a3, a4, v8, v9);
          return;
        case 8u:
          sub_19C102904((int)a1, a2, a3, a4);
        case 0x10u:
          sub_19C10282C((int)a1, a2, a3, a4);
      }
      break;
  }
}

void sub_19C12CB84(unint64_t *a1, FILE *__stream, int *a3, int a4, signed int a5)
{
  int v9;
  int v10;
  int8x16_t *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int8x16_t v17;
  double v18;
  int8x16_t v19;
  int8x16_t *v20;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v9 = *a3 & 0xF;
    if (*a3 <= 0)
      v9 = -(-*a3 & 0xF);
    if (v9 >= 15)
      v10 = 16;
    else
      v10 = 15 - v9;
    sub_19C221368(__stream, a3, v10);
    sub_19C2213F8((size_t)__stream, a3, 85, v10);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  v11 = (int8x16_t *)operator new[]();
  v20 = v11;
  if (a5 >= 1)
    bzero(v11, 4 * a5);
  sub_19C2216BC(__stream, a3, *a1, v20, a5, v12, v13, v14, v15, v16, v17, v18, v19);
  operator delete[](v20);
}

void sub_19C12CC98(unint64_t *a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  signed int v13;
  int8x16_t *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  double v21;
  int8x16_t v22;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v11 = *a3 & 0xF;
    if (*a3 <= 0)
      v11 = -(-*a3 & 0xF);
    if (v11 >= 15)
      v12 = 16;
    else
      v12 = 15 - v11;
    sub_19C221368(__stream, a3, v12);
    sub_19C2213F8((size_t)__stream, a3, 85, v12);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  v13 = a6 * a5;
  v14 = (int8x16_t *)operator new[]();
  bzero(v14, 4 * v13);
  sub_19C2216BC(__stream, a3, *a1, v14, v13, v15, v16, v17, v18, v19, v20, v21, v22);
  operator delete[](v14);
}

uint64_t sub_19C12CDA8(uint64_t result, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  float **v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t v10;
  float *v11;
  uint64_t i;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  void *v23;

  v4 = *(unsigned int *)(result + 16);
  if ((int)v4 >= 1)
  {
    if ((int)a4 >= 1)
    {
      v5 = *(float ***)(result + 24);
      if (a4 <= 7)
      {
        do
        {
          v11 = *v5;
          **v5 = **v5 * a2;
          if (a4 != 1)
          {
            v11[1] = v11[1] * a2;
            if (a4 != 2)
            {
              v11[2] = v11[2] * a2;
              if (a4 != 3)
              {
                v11[3] = v11[3] * a2;
                if (a4 != 4)
                {
                  v11[4] = v11[4] * a2;
                  if (a4 != 5)
                  {
                    v11[5] = v11[5] * a2;
                    if (a4 != 6)
                      v11[6] = v11[6] * a2;
                  }
                }
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      else
      {
        v6 = a4 & 0xFFFFFFF8;
        v7 = a4 - v6;
        if (a4 == v6)
        {
          do
          {
            v8 = (float32x4_t *)(v5[v7] + 4);
            v9 = a4 & 0xFFFFFFF8;
            do
            {
              v10 = vmulq_n_f32(*v8, a2);
              v8[-1] = vmulq_n_f32(v8[-1], a2);
              *v8 = v10;
              v8 += 2;
              v9 -= 8;
            }
            while (v9);
            ++v7;
          }
          while (v7 != v4);
        }
        else
        {
          for (i = 0; i != v4; ++i)
          {
            v13 = (float32x4_t *)v5[i];
            v14 = v13 + 1;
            v15 = a4 & 0xFFFFFFF8;
            do
            {
              v16 = vmulq_n_f32(*v14, a2);
              v14[-1] = vmulq_n_f32(v14[-1], a2);
              *v14 = v16;
              v14 += 2;
              v15 -= 8;
            }
            while (v15);
            v17 = (float *)((char *)v13->f32 + ((4 * a4) & 0x3FFFFFFE0));
            v18 = a4 - v6;
            do
            {
              *v17 = *v17 * a2;
              ++v17;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
    v19 = *(_QWORD *)(result + 48);
    v21 = *(_BYTE **)v19;
    v20 = *(_BYTE **)(v19 + 8);
    v22 = v20 - v21;
    if (v20 != v21)
    {
      if ((v22 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v23 = operator new(v20 - v21);
      memcpy(v23, v21, v22);
    }
    sub_19C2210D4(67);
  }
  return result;
}

void sub_19C12CF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C12CFAC(float **a1, _QWORD *a2, _QWORD *a3, int a4, int a5, float a6)
{
  float v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  float **v45;
  _QWORD *v46;
  float __B;
  _DWORD v49[8];
  _QWORD v50[6];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[3];
  _QWORD v57[4];

  v11 = sub_19C2210BC();
  __B = sub_19C2210BC() * v11;
  v13 = qword_1ECD3EF88;
  v12 = (char *)qword_1ECD3EF90;
  v14 = qword_1ECD3EF90 - qword_1ECD3EF88;
  v15 = a5 - (qword_1ECD3EF90 - qword_1ECD3EF88);
  if (a5 <= (unint64_t)(qword_1ECD3EF90 - qword_1ECD3EF88))
  {
    v22 = a4;
    if (a5 < (unint64_t)(qword_1ECD3EF90 - qword_1ECD3EF88))
      qword_1ECD3EF90 = qword_1ECD3EF88 + a5;
  }
  else
  {
    if (qword_1ECD3EF98 - qword_1ECD3EF90 >= v15)
    {
      bzero((void *)qword_1ECD3EF90, a5 - (qword_1ECD3EF90 - qword_1ECD3EF88));
      qword_1ECD3EF90 = (uint64_t)&v12[v15];
      v22 = a4;
      goto LABEL_33;
    }
    v45 = a1;
    v46 = a3;
    if (a5 < 0)
      sub_19C07DA0C();
    v16 = 2 * (qword_1ECD3EF98 - qword_1ECD3EF88);
    if (v16 <= a5)
      v16 = a5;
    if ((unint64_t)(qword_1ECD3EF98 - qword_1ECD3EF88) >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (uint64_t)operator new(v17);
    v44 = v18 + v17;
    v43 = v18 + a5;
    v19 = v18 + v14;
    bzero((void *)(v18 + v14), v15);
    if (v12 != (char *)v13)
    {
      if (v14 < 8)
      {
        v21 = v18 + a5;
        v20 = v44;
        goto LABEL_29;
      }
      v21 = v18 + a5;
      v20 = v44;
      if ((unint64_t)(v13 - v18) >= 0x20)
      {
        if (v14 < 0x20)
        {
          v23 = 0;
          goto LABEL_24;
        }
        v23 = v14 & 0xFFFFFFFFFFFFFFE0;
        v24 = v12 - 16;
        v25 = &v12[v18 - 16 - v13];
        v26 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *(_OWORD *)v24;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v24 - 1);
          *(_OWORD *)v25 = v27;
          v25 -= 32;
          v24 -= 32;
          v26 -= 32;
        }
        while (v26);
        if (v14 == v23)
          goto LABEL_31;
        if ((v14 & 0x18) != 0)
        {
LABEL_24:
          v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
          v28 = &v12[-v23 - 8];
          v29 = &v28[-v13];
          v30 = v23 - (v14 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v31 = *(_QWORD *)v28;
            v28 -= 8;
            *(_QWORD *)&v29[v18] = v31;
            v29 -= 8;
            v30 += 8;
          }
          while (v30);
          v12 -= v14 & 0xFFFFFFFFFFFFFFF8;
          if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_29;
LABEL_31:
          v12 = (char *)v13;
          v22 = a4;
          qword_1ECD3EF88 = v18;
          qword_1ECD3EF90 = v21;
          qword_1ECD3EF98 = v20;
          a1 = v45;
          a3 = v46;
          if (!v13)
            goto LABEL_33;
          goto LABEL_32;
        }
        v19 -= v23;
        v12 -= v23;
      }
LABEL_29:
      v32 = (_BYTE *)(v19 - 1);
      do
      {
        v33 = *--v12;
        *v32-- = v33;
      }
      while (v12 != (char *)v13);
      goto LABEL_31;
    }
    a1 = v45;
    qword_1ECD3EF88 = v19;
    qword_1ECD3EF90 = v43;
    qword_1ECD3EF98 = v44;
    a3 = v46;
    v22 = a4;
    if (v12)
LABEL_32:
      operator delete(v12);
  }
LABEL_33:
  v34 = (qword_1ECD3EE58 - qword_1ECD3EE50) >> 2;
  if (v22 <= v34)
  {
    if (v22 < v34)
      qword_1ECD3EE58 = qword_1ECD3EE50 + 4 * v22;
  }
  else
  {
    sub_19C0A36A4((uint64_t)&qword_1ECD3EE50, v22 - v34);
  }
  if (a5 >= 1)
  {
    v35 = 0;
    do
    {
      v37 = *(float *)(*a2 + 4 * v35);
      if (v37 <= -5.0)
      {
        LOBYTE(v36) = -127;
      }
      else if (v37 < 5.0 && (v36 = llroundf(v37 * 25.6), v36 <= 127))
      {
        if (v36 <= -127)
          LOBYTE(v36) = -127;
      }
      else
      {
        LOBYTE(v36) = 127;
      }
      *(_BYTE *)(qword_1ECD3EF88 + v35++) = v36;
    }
    while (a5 != v35);
  }
  v38 = *a3;
  v57[1] = 0x3F80000000020008;
  v57[2] = 0;
  v56[2] = 0;
  v57[0] = a5;
  v56[0] = v22;
  v56[1] = 0x3F80000000010020;
  v50[0] = a5;
  v50[1] = v22;
  v50[2] = v38;
  v50[3] = 0x3F80000000020008;
  v50[4] = 0;
  v50[5] = 0;
  v51 = xmmword_19C277458;
  v52 = unk_19C277468;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  bzero(v49, 0x20uLL);
  v49[0] = 1;
  v39 = (void *)MEMORY[0x1A1AD1434](v57, v56, v50, v49);
  if (!v39)
    sub_19C2210D4(1012);
  v40 = v39;
  v41 = BNNSFilterApply(v39, (const void *)qword_1ECD3EF88, (void *)qword_1ECD3EE50);
  v42 = *a1;
  if (a6 != 0.0)
  {
    vDSP_vsma((const float *)qword_1ECD3EE50, 1, &__B, v42, 1, *a1, 1, v22);
    if (!v41)
      goto LABEL_50;
LABEL_52:
    sub_19C2210D4(345);
  }
  vDSP_vsmul((const float *)qword_1ECD3EE50, 1, &__B, v42, 1, v22);
  if (v41)
    goto LABEL_52;
LABEL_50:
  BNNSFilterDestroy(v40);
}

void sub_19C12D3A4(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  signed int v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  float *v46;
  int v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  __int32 **v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t *v60;
  uint64_t v61;
  __int32 *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v71;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  __int32 *v76;
  __int32 v77;
  int16x4_t v78;
  int16x4_t v79;
  float32x4_t v80;
  int v81;
  float v82;
  uint64_t *v83;
  uint64_t v84;
  float *v85;
  int v86;
  float32x4_t v87;
  _BYTE *v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  __int32 **v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  __int32 *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  uint64_t i;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v110;
  uint64_t v112;
  float32x4_t *v113;
  float32x4_t *v114;
  __int32 *v115;
  __int32 v116;
  int16x4_t v117;
  int16x4_t v118;
  float32x4_t v119;
  int v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  float32x2_t **v124;
  float32x4_t *v125;
  uint64_t v126;
  float32x4_t *v127;
  uint64_t v128;
  float32x4_t v130;
  uint64_t v131;
  float *v132;
  uint64_t *v133;
  uint64_t v134;
  float *v135;
  int v136;
  float32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  float32x4_t *v143;
  int v144;
  float32x4_t *v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  float32x4_t *v161;
  float32x4_t v162;
  unint64_t v163;
  float *v164;
  float *v165;
  float *v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  float *v178;
  float *v179;
  float *v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  float32x4_t *v187;
  float32x4_t *v188;
  int v189;
  float32x4_t *v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  BOOL v203;
  BOOL v204;
  uint64_t v206;
  uint64_t v207;
  float32x4_t *v208;
  float32x4_t *v209;
  float32x4_t *v210;
  float32x4_t v211;
  uint64_t v212;
  float *v213;
  float *v214;
  float *v215;
  float v216;
  float v217;
  float v218;
  int v219;
  uint64_t v220;
  float *v221;
  float v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t *v229;
  uint64_t v230;
  __int32 *v231;
  float32x4_t *v232;
  float32x4_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v240;
  uint64_t v242;
  float32x4_t *v243;
  float32x4_t *v244;
  __int32 *v245;
  __int32 v246;
  int16x4_t v247;
  int16x4_t v248;
  float32x4_t v249;
  int v250;
  float v251;
  uint64_t v252;
  float *v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  float32x4_t *v259;
  float32x4_t *v260;
  int v261;
  float32x2_t *v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int v267;
  uint64_t v268;
  float32x2_t *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t v279;
  unint64_t v280;
  float *v281;
  float *v282;
  float *v283;
  float v284;
  float v285;
  float v286;
  uint64_t v287;
  unint64_t v288;
  BOOL v290;
  float32x4_t *v292;
  float32x4_t *v293;
  float32x4_t *v294;
  uint64_t v295;
  float32x4_t v296;
  BOOL v297;
  unsigned int v298;
  signed int v299;
  int v302;
  char v303;
  int8x16_t v304;
  int8x16_t v305;
  float32x4_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  _BOOL4 v310;
  void *__p;
  void *v312;
  uint64_t v313;

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
  {
    v297 = *(_BYTE *)(v9 + 464) != 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  else
  {
    v297 = 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v302 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_11:
  v302 = 0;
  if (!v9)
  {
LABEL_13:
    v10 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  v10 = *(float *)(v9 + 468);
  if (v10 <= 0.0)
    goto LABEL_13;
LABEL_14:
  if (a5 && *(_BYTE *)(a1 + 2672))
    sub_19C2210D4(34);
  v11 = a4 & 0xFFFFFF;
  if (a5)
    _ZF = *(_BYTE *)(a1 + 42) == 0;
  else
    _ZF = 0;
  v13 = _ZF;
  v14 = v302;
  if (v11 > v13)
  {
    v299 = v11 - 1;
    __asm { FMOV            V0.4S, #-5.0 }
    v305 = _Q0;
    v306 = (float32x4_t)vdupq_n_s32(0x3D200000u);
    __asm { FMOV            V5.4S, #5.0 }
    v298 = v11;
    v304 = _Q5;
    while (1)
    {
      v19 = v11 + ~v13;
      if (!*(_BYTE *)(a1 + 2672))
        v19 = v13;
      v20 = v19;
      v21 = *(_BYTE *)(a1 + 2672) ? v19 < v299 : v19 > 0;
      v310 = v21;
      v22 = *(_BYTE *)(a1 + 2672) ? v20 + 1 : v20 - 1;
      v23 = *(unsigned __int8 *)(a1 + 42);
      v24 = ((*(_BYTE *)(a1 + 42) != 0) & v14) != 0 ? 1 : v20;
      v25 = *(_QWORD *)(a1 + 64);
      v307 = v22;
      v308 = v24;
      v26 = 8 * v24;
      if (v14)
        break;
      memmove(*(void **)(v25 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(int *)(a1 + 44));
      v27 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_40;
LABEL_41:
      if (v14)
      {
        v28 = *(_DWORD *)(a1 + 48);
        v29 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v20);
        *v29 = **(_DWORD **)(*a3 + 24 * v20);
        if (v27)
          v29[1] = v28 - 1;
      }
      v30 = *(_QWORD *)(a1 + 136);
      if ((_DWORD)v8 == 1)
        memcpy(*(void **)(v30 + v26), *(const void **)(*(_QWORD *)(a1 + 64) + v26), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v30 + v26), *(const void **)(*a2 + v26), 4 * *(_DWORD *)(a1 + 44) * (int)v8);
      if ((int)v8 > *(_DWORD *)(a1 + 2688))
        sub_19C2210D4(83724);
      if (v23)
        v31 = 1;
      else
        v31 = v20;
      v32 = 8 * v31;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v31), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      v33 = *(_QWORD *)(a1 + 2680);
      if (!v33)
      {
LABEL_73:
        v37 = 0;
        v39 = !v310;
LABEL_74:
        sub_19C12F2A8(a1, v302, (const float **)(*(_QWORD *)(a1 + 424) + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2528), *(_QWORD *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v309 = 0;
LABEL_75:
        v41 = 1;
        if (!v39 && (v37 & 1) == 0)
        {
          sub_19C12F474((float **)(*(_QWORD *)(a1 + 424) + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v307), *(_QWORD **)(a1 + 2560), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
          v41 = 0;
        }
        goto LABEL_78;
      }
      v34 = *(_DWORD *)(v33 + 40);
      if (!*(_BYTE *)(v33 + 20) && (v34 == 5 || v34 == 2))
      {
        v35 = *(_DWORD *)(v33 + 44) == 6;
        if (v34 == 5)
          goto LABEL_61;
      }
      else
      {
        v35 = 0;
        if (v34 == 5)
          goto LABEL_61;
      }
      if (v34 != 2)
      {
        if (!v35)
          goto LABEL_73;
        v37 = 0;
LABEL_68:
        v40 = 1;
        sub_19C12E928(a1, 0, (float **)(*(_QWORD *)(a1 + 352) + v32), (float **)(*(_QWORD *)(a1 + 376) + v32), (float **)(*(_QWORD *)(a1 + 424) + v32), (void **)(*(_QWORD *)(a1 + 400) + v32), (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v308), *(_QWORD **)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1u);
        v39 = !v310;
        v309 = 1;
        if ((v310 & v37 & 1) == 0)
          goto LABEL_75;
        goto LABEL_69;
      }
LABEL_61:
      v36 = *(_DWORD *)(v33 + 60) == 22;
      v37 = v36;
      if (v35)
        goto LABEL_68;
      v38 = v310;
      v39 = !v310;
      if (!v36)
        v38 = 0;
      if (!v38)
        goto LABEL_74;
      v40 = 0;
LABEL_69:
      __p = 0;
      v312 = 0;
      v313 = 0;
      sub_19C12E928(a1, 0, (float **)(*(_QWORD *)(a1 + 352) + v32), (float **)(*(_QWORD *)(a1 + 376) + v32), (float **)(*(_QWORD *)(a1 + 424) + v32), (void **)(*(_QWORD *)(a1 + 400) + v32), (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v307), *(_QWORD **)(a1 + 2536), (uint64_t)&__p, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1u);
      if (__p)
      {
        v312 = __p;
        operator delete(__p);
      }
      v37 = 1;
      v41 = 1;
      v309 = 1;
      if ((v40 & 1) == 0)
        goto LABEL_74;
LABEL_78:
      v42 = *(_QWORD *)(a1 + 2680);
      if (v42 && *(_BYTE *)(v42 + 244))
        goto LABEL_310;
      v43 = *(unsigned int *)(a1 + 52);
      v44 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v31);
      v45 = (v43 * v8);
      v14 = v302;
      if ((int)v45 >= 1)
      {
        v46 = (float *)*v44;
        do
        {
          v47 = -1035468800;
          if (*v46 < -50.0 || (v47 = 1112014848, *v46 > 50.0))
            *(_DWORD *)v46 = v47;
          ++v46;
          --v45;
        }
        while (v45);
      }
      v303 = v41;
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 520) + 8 * v31), v44, v8, v43, *(_DWORD *)(a1 + 740));
      if ((v309 & 1) == 0)
        sub_19C12F2A8(a1, v302, (const float **)(*(_QWORD *)(a1 + 352) + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v49 = *(_QWORD *)(a1 + 2680);
      if (v49)
      {
        if (*(_BYTE *)(v49 + 244))
LABEL_310:
          sub_19C2210D4(200);
      }
      v50 = *(_QWORD *)(a1 + 352);
      v51 = *(unsigned int *)(a1 + 52);
      v53 = v305;
      v52 = v306;
      v54 = v304;
      if (v310)
      {
        if (v37)
        {
          v55 = (int)v307;
          v56 = *(__int32 ***)(a1 + 2568);
          v57 = *(_QWORD *)(a1 + 184);
          if (!v49)
            goto LABEL_98;
        }
        else
        {
          sub_19C12F474((float **)(v50 + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v307), *(_QWORD **)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), v51, 1.0);
          v54 = v304;
          v53 = v305;
          v52 = v306;
          v49 = *(_QWORD *)(a1 + 2680);
          v50 = *(_QWORD *)(a1 + 352);
          v55 = v307;
          v51 = *(unsigned int *)(a1 + 52);
          v56 = *(__int32 ***)(a1 + 2568);
          v57 = *(_QWORD *)(a1 + 184);
          if (!v49)
          {
LABEL_98:
            if (!(_DWORD)v8)
              goto LABEL_124;
LABEL_99:
            if ((int)v51 < 1)
              goto LABEL_124;
            v58 = 0;
            v59 = *(float32x4_t **)(v50 + 8 * v31);
            v60 = *(float32x4_t **)(v57 + 8 * v55);
            v61 = 4 * v51;
            v62 = *v56;
            v63 = v59;
            v64 = v60;
            while (2)
            {
              if (v51 >= 8)
              {
                v65 = 0;
                v66 = v61 + v61 * v58;
                v67 = (unint64_t)v60 + v66;
                v68 = (unint64_t)v59 + v66;
                v69 = (unint64_t)v59 + v61 * v58;
                v71 = v69 < v67 && (unint64_t)v60 + v61 * v58 < v68;
                if ((unint64_t)v62 < v68 && v69 < (unint64_t)v62 + v51)
                  goto LABEL_121;
                if (v71)
                  goto LABEL_121;
                v73 = v51 & 0xFFFFFFFC;
                v74 = v63;
                v75 = v64;
                v76 = v62;
                do
                {
                  v77 = *v76++;
                  v48.i32[0] = v77;
                  v78 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v48.f32).u64[0];
                  v79 = vshr_n_s16(vshl_n_s16(v78, 8uLL), 8uLL);
                  v80 = *v75++;
                  v48 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v78, (int16x4_t)0x7F007F007F007FLL)), v54, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v79, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v79)), v52), v53));
                  *v74 = vmlaq_f32(*v74, v80, v48);
                  ++v74;
                  v73 -= 4;
                }
                while (v73);
                v65 = v51 & 0xFFFFFFFC;
                if (v65 != v51)
                  goto LABEL_121;
              }
              else
              {
                v65 = 0;
                do
                {
LABEL_121:
                  v81 = *((char *)v62 + v65);
                  v82 = -5.0;
                  if (v81 >= -126)
                  {
                    v82 = 5.0;
                    if (v81 != 127)
                      v82 = (float)v81 * 0.039062;
                  }
                  v63->f32[v65] = v63->f32[v65] + (float)(v64->f32[v65] * v82);
                  ++v65;
                }
                while (v51 != v65);
              }
              ++v58;
              v64 = (float32x4_t *)((char *)v64 + v61);
              v63 = (float32x4_t *)((char *)v63 + v61);
              if (v58 == v8)
                goto LABEL_124;
              continue;
            }
          }
        }
        if ((_DWORD)v8 && *(_BYTE *)(v49 + 384))
          goto LABEL_99;
      }
LABEL_124:
      v83 = (uint64_t *)(v50 + 8 * v31);
      v84 = (v51 * v8);
      if ((int)v84 >= 1)
      {
        v85 = (float *)*v83;
        do
        {
          v86 = -1035468800;
          if (*v85 < -50.0 || (v86 = 1112014848, *v85 > 50.0))
            *(_DWORD *)v85 = v86;
          ++v85;
          --v84;
        }
        while (v84);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 448) + 8 * v31), v83, v8, v51, *(_DWORD *)(a1 + 736));
      if ((v309 & 1) == 0)
        sub_19C12F2A8(a1, v302, (const float **)(*(_QWORD *)(a1 + 376) + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2512), *(_QWORD *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v88 = *(_BYTE **)(a1 + 2680);
      if (v88 && v88[244])
        goto LABEL_310;
      v90 = v305;
      v89 = v306;
      v91 = v304;
      if (!v310)
        goto LABEL_168;
      v92 = *(_QWORD *)(a1 + 376);
      v93 = *(_DWORD *)(a1 + 52);
      if (v37)
      {
        v94 = (int)v307;
        v95 = *(__int32 ***)(a1 + 2576);
        v96 = *(_QWORD *)(a1 + 184);
        if (!v88)
          goto LABEL_142;
      }
      else
      {
        v94 = (int)v307;
        sub_19C12F474((float **)(v92 + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v307), *(_QWORD **)(a1 + 2544), v8, v93, *(_DWORD *)(a1 + 52), 1.0);
        v91 = v304;
        v90 = v305;
        v89 = v306;
        v88 = *(_BYTE **)(a1 + 2680);
        v92 = *(_QWORD *)(a1 + 376);
        v93 = *(_DWORD *)(a1 + 52);
        v95 = *(__int32 ***)(a1 + 2576);
        v96 = *(_QWORD *)(a1 + 184);
        if (!v88)
        {
LABEL_142:
          if (!(_DWORD)v8)
            goto LABEL_173;
          goto LABEL_143;
        }
      }
      if (!(_DWORD)v8 || !v88[384])
        goto LABEL_169;
LABEL_143:
      if ((int)v93 >= 1)
      {
        v97 = 0;
        v98 = *(float32x4_t **)(v92 + 8 * v31);
        v99 = *(float32x4_t **)(v96 + 8 * v94);
        v100 = 4 * v93;
        v101 = *v95;
        v102 = v98;
        v103 = v99;
        while (v93 >= 8)
        {
          i = 0;
          v105 = v100 + v100 * v97;
          v106 = (unint64_t)v99 + v105;
          v107 = (unint64_t)v98 + v105;
          v108 = (unint64_t)v98 + v100 * v97;
          v110 = v108 < v106 && (unint64_t)v99 + v100 * v97 < v107;
          if ((unint64_t)v101 < v107 && v108 < (unint64_t)v101 + v93)
            goto LABEL_165;
          if (v110)
            goto LABEL_165;
          v112 = v93 & 0xFFFFFFFC;
          v113 = v102;
          v114 = v103;
          v115 = v101;
          do
          {
            v116 = *v115++;
            v87.i32[0] = v116;
            v117 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v87.f32).u64[0];
            v118 = vshr_n_s16(vshl_n_s16(v117, 8uLL), 8uLL);
            v119 = *v114++;
            v87 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v117, (int16x4_t)0x7F007F007F007FLL)), v91, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v118, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v118)), v89), v90));
            *v113 = vmlaq_f32(*v113, v119, v87);
            ++v113;
            v112 -= 4;
          }
          while (v112);
          i = v93 & 0xFFFFFFFC;
          if (i != v93)
            goto LABEL_165;
LABEL_145:
          ++v97;
          v103 = (float32x4_t *)((char *)v103 + v100);
          v102 = (float32x4_t *)((char *)v102 + v100);
          if (v97 == v8)
            goto LABEL_168;
        }
        for (i = 0; i != v93; ++i)
        {
LABEL_165:
          v120 = *((char *)v101 + i);
          v121 = -5.0;
          if (v120 >= -126)
          {
            v121 = 5.0;
            if (v120 != 127)
              v121 = (float)v120 * 0.039062;
          }
          v102->f32[i] = v102->f32[i] + (float)(v103->f32[i] * v121);
        }
        goto LABEL_145;
      }
LABEL_168:
      if (!v88)
      {
LABEL_173:
        v122 = *(unsigned int *)(a1 + 52);
LABEL_174:
        v124 = (float32x2_t **)(a1 + 752);
        goto LABEL_180;
      }
LABEL_169:
      v122 = *(unsigned int *)(a1 + 52);
      if (!v88[465])
        goto LABEL_174;
      v123 = (v122 * v8);
      v124 = (float32x2_t **)(a1 + 752);
      if ((int)v123 < 1)
        goto LABEL_180;
      v125 = *(float32x4_t **)(*(_QWORD *)(a1 + 376) + 8 * v31);
      if (v123 < 8)
      {
        v126 = 0;
LABEL_178:
        v131 = v123 - v126;
        v132 = &v125->f32[v126];
        do
        {
          *v132 = *v132 + 1.0;
          ++v132;
          --v131;
        }
        while (v131);
        goto LABEL_180;
      }
      v126 = v123 & 0x7FFFFFF8;
      v127 = v125 + 1;
      v128 = v123 & 0xFFFFFFF8;
      do
      {
        __asm { FMOV            V2.4S, #1.0 }
        v130 = vaddq_f32(*v127, _Q2);
        v127[-1] = vaddq_f32(v127[-1], _Q2);
        *v127 = v130;
        v127 += 2;
        v128 -= 8;
      }
      while (v128);
      if (v126 != v123)
        goto LABEL_178;
LABEL_180:
      v133 = (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v31);
      v134 = (v122 * v8);
      if ((int)v134 >= 1)
      {
        v135 = (float *)*v133;
        do
        {
          v136 = -1035468800;
          if (*v135 < -50.0 || (v136 = 1112014848, *v135 > 50.0))
            *(_DWORD *)v135 = v136;
          ++v135;
          --v134;
        }
        while (v134);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 472) + 8 * v31), v133, v8, v122, *(_DWORD *)(a1 + 736));
      v138 = *(_QWORD *)(a1 + 184);
      v139 = *(_QWORD *)(a1 + 520);
      v140 = *(_QWORD *)(a1 + 448);
      v141 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      if ((int)v141 >= 8)
      {
        v142 = *(float32x4_t **)(v138 + 8 * v20);
        v143 = *(float32x4_t **)(v140 + 8 * v31);
        v144 = (int)v141 / 8;
        v145 = *(float32x4_t **)(v139 + 8 * v31);
        do
        {
          v147 = *v145;
          v146 = v145[1];
          v145 += 2;
          v149 = *v143;
          v148 = v143[1];
          v143 += 2;
          v137 = vmulq_f32(v148, v146);
          *v142 = vmulq_f32(v149, v147);
          v142[1] = v137;
          v142 += 2;
          --v144;
        }
        while (v144);
      }
      v150 = 8 * ((int)v141 / 8);
      if (v150 < (int)v141)
      {
        v151 = *(_QWORD *)(v139 + 8 * v31);
        v152 = *(_QWORD *)(v140 + 8 * v31);
        v153 = *(_QWORD *)(v138 + 8 * v20);
        v154 = v150;
        v155 = v141 - v150;
        if (v155 < 0xC)
          goto LABEL_197;
        v156 = 4 * v150;
        if ((unint64_t)(v153 - v151) < 0x20)
          goto LABEL_197;
        if ((unint64_t)(v153 - v152) < 0x20)
          goto LABEL_197;
        v157 = v155 - (v141 & 7) + v150;
        v158 = v150 + (unint64_t)(v141 & 7) - v141;
        v159 = (float32x4_t *)(v153 + v156 + 16);
        v160 = (float32x4_t *)(v151 + v156 + 16);
        v161 = (float32x4_t *)(v152 + v156 + 16);
        do
        {
          v137 = vmulq_f32(v161[-1], v160[-1]);
          v162 = vmulq_f32(*v161, *v160);
          v159[-1] = v137;
          *v159 = v162;
          v159 += 2;
          v160 += 2;
          v161 += 2;
          v158 += 8;
        }
        while (v158);
        v154 = v157;
        if ((v141 & 7) != 0)
        {
LABEL_197:
          v163 = v141 - v154;
          v164 = (float *)(v153 + 4 * v154);
          v165 = (float *)(v152 + 4 * v154);
          v166 = (float *)(v151 + 4 * v154);
          do
          {
            v167 = *v166++;
            v168 = v167;
            v169 = *v165++;
            *v164++ = v169 * v168;
            --v163;
          }
          while (v163);
        }
      }
      if (v310)
      {
        if (v297)
        {
          v170 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v170 < 1)
            goto LABEL_229;
          v171 = *(_QWORD *)(a1 + 184);
          v172 = *(float32x4_t **)(v171 + 8 * (int)v307);
          v173 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v31);
          v174 = *(_QWORD *)(v171 + 8 * v20);
          if (v170 < 8)
          {
            v175 = 0;
LABEL_204:
            v176 = v170 - v175;
            v177 = v175;
            v178 = (float *)(v174 + v177 * 4);
            v179 = &v173->f32[v177];
            v180 = &v172->f32[v177];
            do
            {
              v181 = *v180++;
              v182 = v181;
              v183 = *v179++;
              *v178 = (float)(v182 - (float)(v183 * v182)) + *v178;
              ++v178;
              --v176;
            }
            while (v176);
            goto LABEL_229;
          }
          v175 = 0;
          v288 = v174 + 4 * v170;
          v290 = v174 < (unint64_t)v173->u64 + 4 * v170 && (unint64_t)v173 < v288;
          if ((unint64_t)v172 < v288 && v174 < (unint64_t)v172->u64 + 4 * v170)
            goto LABEL_204;
          if (v290)
            goto LABEL_204;
          v175 = v170 & 0x7FFFFFF8;
          v292 = v172 + 1;
          v293 = v173 + 1;
          v294 = (float32x4_t *)(v174 + 16);
          v295 = v170 & 0xFFFFFFF8;
          do
          {
            v137 = vaddq_f32(vmlsq_f32(v292[-1], v292[-1], v293[-1]), v294[-1]);
            v296 = vaddq_f32(vmlsq_f32(*v292, *v292, *v293), *v294);
            v294[-1] = v137;
            *v294 = v296;
            v292 += 2;
            v293 += 2;
            v294 += 2;
            v295 -= 8;
          }
          while (v295);
          if (v175 != v170)
            goto LABEL_204;
        }
        else
        {
          v184 = *(_QWORD *)(a1 + 184);
          v185 = *(_QWORD *)(a1 + 472);
          v186 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
          if ((int)v186 >= 8)
          {
            v187 = *(float32x4_t **)(v184 + 8 * v20);
            v188 = *(float32x4_t **)(v184 + 8 * (int)v307);
            v189 = (int)v186 / 8;
            v190 = *(float32x4_t **)(v185 + 8 * v31);
            do
            {
              v191 = *v190;
              v137 = v190[1];
              v190 += 2;
              v193 = *v188;
              v192 = v188[1];
              v188 += 2;
              v194 = vmlaq_f32(v187[1], v192, v137);
              *v187 = vmlaq_f32(*v187, v193, v191);
              v187[1] = v194;
              v187 += 2;
              --v189;
            }
            while (v189);
          }
          v195 = 8 * ((int)v186 / 8);
          if (v195 < (int)v186)
          {
            v196 = *(_QWORD *)(v185 + 8 * v31);
            v197 = *(_QWORD *)(v184 + 8 * (int)v307);
            v198 = *(_QWORD *)(v184 + 8 * v20);
            v199 = v195;
            v200 = v186 - v195;
            if (v200 < 8)
              goto LABEL_227;
            v201 = 4 * v195;
            v202 = v198 + 4 * v186;
            v203 = v198 + v201 >= (unint64_t)(v197 + 4 * v186) || v197 + 4 * v195 >= v202;
            v204 = !v203;
            if (v196 + v201 < v202 && v198 + v201 < (unint64_t)(v196 + 4 * v186))
              goto LABEL_227;
            if (v204)
              goto LABEL_227;
            v206 = v200 - (v186 & 7) + v199;
            v207 = v199 + (v186 & 7) - v186;
            v208 = (float32x4_t *)(v198 + v201 + 16);
            v209 = (float32x4_t *)(v196 + v201 + 16);
            v210 = (float32x4_t *)(v197 + v201 + 16);
            do
            {
              v137 = v209[-1];
              v211 = vmlaq_f32(*v208, *v210, *v209);
              v208[-1] = vmlaq_f32(v208[-1], v210[-1], v137);
              *v208 = v211;
              v208 += 2;
              v209 += 2;
              v210 += 2;
              v207 += 8;
            }
            while (v207);
            v199 = v206;
            if ((v186 & 7) != 0)
            {
LABEL_227:
              v212 = v186 - v199;
              v213 = (float *)(v198 + 4 * v199);
              v214 = (float *)(v197 + 4 * v199);
              v215 = (float *)(v196 + 4 * v199);
              do
              {
                v216 = *v215++;
                v217 = v216;
                v218 = *v214++;
                *v213 = *v213 + (float)(v218 * v217);
                ++v213;
                --v212;
              }
              while (v212);
            }
          }
        }
      }
LABEL_229:
      v219 = *(_DWORD *)(a1 + 52);
      v220 = (v219 * v8);
      if ((int)v220 >= 1)
      {
        v221 = *(float **)(*(_QWORD *)(a1 + 184) + 8 * v20);
        do
        {
          v222 = -v10;
          if (*v221 < (float)-v10 || (v222 = v10, *v221 > v10))
            *v221 = v222;
          ++v221;
          --v220;
        }
        while (v220);
      }
      if ((v309 & 1) == 0)
        sub_19C12F2A8(a1, v302, (const float **)(*(_QWORD *)(a1 + 400) + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2520), *(_QWORD *)(a1 + 208) + 24 * (int)v20, v8, v219, *(_DWORD *)(a1 + 48), 1);
      v223 = *(_QWORD *)(a1 + 2680);
      if (v223 && *(_BYTE *)(v223 + 244))
        goto LABEL_310;
      v224 = *(_QWORD *)(a1 + 400);
      v225 = *(unsigned int *)(a1 + 52);
      if ((v303 & 1) == 0)
      {
        sub_19C12F474((float **)(v224 + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v307), *(_QWORD **)(a1 + 2552), v8, *(_DWORD *)(a1 + 52), v225, 1.0);
        v223 = *(_QWORD *)(a1 + 2680);
        v224 = *(_QWORD *)(a1 + 400);
        v225 = *(unsigned int *)(a1 + 52);
      }
      v226 = (uint64_t *)(v224 + 8 * v31);
      if (v223)
      {
        if (!(_DWORD)v8 || !*(_BYTE *)(v223 + 384))
          goto LABEL_272;
      }
      else if (!(_DWORD)v8)
      {
        goto LABEL_272;
      }
      if ((int)v225 >= 1)
      {
        v227 = 0;
        v228 = *v226;
        v229 = *(float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v20);
        v230 = 4 * v225;
        v231 = **(__int32 ***)(a1 + 2584);
        v232 = (float32x4_t *)*v226;
        v233 = v229;
        while (v225 >= 8)
        {
          v234 = 0;
          v235 = v230 + v230 * v227;
          v236 = (unint64_t)v229 + v235;
          v237 = v228 + v235;
          v238 = v228 + v230 * v227;
          v240 = v238 < v236 && (unint64_t)v229 + v230 * v227 < v237;
          if ((unint64_t)v231 < v237 && v238 < (unint64_t)v231 + v225)
            goto LABEL_269;
          if (v240)
            goto LABEL_269;
          v242 = v225 & 0xFFFFFFFC;
          v243 = v232;
          v244 = v233;
          v245 = v231;
          do
          {
            v246 = *v245++;
            v137.i32[0] = v246;
            v247 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v137.f32).u64[0];
            v248 = vshr_n_s16(vshl_n_s16(v247, 8uLL), 8uLL);
            v249 = *v244++;
            v137 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v247, (int16x4_t)0x7F007F007F007FLL)), v304, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v248, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v248)), v306), v305));
            *v243 = vmlaq_f32(*v243, v249, v137);
            ++v243;
            v242 -= 4;
          }
          while (v242);
          v234 = v225 & 0xFFFFFFFC;
          if (v234 != v225)
            goto LABEL_269;
LABEL_249:
          ++v227;
          v233 = (float32x4_t *)((char *)v233 + v230);
          v232 = (float32x4_t *)((char *)v232 + v230);
          if (v227 == v8)
            goto LABEL_272;
        }
        v234 = 0;
        do
        {
LABEL_269:
          v250 = *((char *)v231 + v234);
          v251 = -5.0;
          if (v250 >= -126)
          {
            v251 = 5.0;
            if (v250 != 127)
              v251 = (float)v250 * 0.039062;
          }
          v232->f32[v234] = v232->f32[v234] + (float)(v233->f32[v234] * v251);
          ++v234;
        }
        while (v225 != v234);
        goto LABEL_249;
      }
LABEL_272:
      v252 = (v225 * v8);
      if ((int)v252 >= 1)
      {
        v253 = (float *)*v226;
        do
        {
          v254 = -1035468800;
          if (*v253 < -50.0 || (v254 = 1112014848, *v253 > 50.0))
            *(_DWORD *)v253 = v254;
          ++v253;
          --v252;
        }
        while (v252);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 496) + 8 * v31), v226, v8, v225, *(_DWORD *)(a1 + 736));
      sub_19C0A3DD8(v124, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v20), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v255 = *(_QWORD *)(a1 + 160);
      v256 = *(_QWORD *)(a1 + 496);
      v257 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      v258 = (int)v257 / 8;
      if ((int)v257 >= 8)
      {
        v259 = *(float32x4_t **)(v255 + 8 * v20);
        v260 = *(float32x4_t **)(v256 + 8 * v31);
        v261 = (int)v257 / 8;
        v262 = *v124;
        do
        {
          v264 = *(float32x4_t *)v262->f32;
          v263 = *(float32x4_t *)v262[2].f32;
          v262 += 4;
          v266 = *v260;
          v265 = v260[1];
          v260 += 2;
          *v259 = vmulq_f32(v266, v264);
          v259[1] = vmulq_f32(v265, v263);
          v259 += 2;
          --v261;
        }
        while (v261);
      }
      v267 = 8 * v258;
      if (8 * v258 < (int)v257)
      {
        v268 = *(_QWORD *)(v256 + 8 * v31);
        v269 = *v124;
        v270 = *(_QWORD *)(v255 + 8 * v20);
        v271 = v267;
        v272 = v257 - v267;
        if (v272 < 0xC)
          goto LABEL_289;
        v273 = 4 * v267;
        if ((unint64_t)(v270 - (_QWORD)v269) < 0x20)
          goto LABEL_289;
        if ((unint64_t)(v270 - v268) < 0x20)
          goto LABEL_289;
        v274 = v272 - (v257 & 7) + v267;
        v275 = v267 + (unint64_t)(v257 & 7) - v257;
        v276 = (float32x4_t *)(v270 + v273 + 16);
        v277 = (float32x4_t *)((char *)&v269[2] + v273);
        v278 = (float32x4_t *)(v268 + v273 + 16);
        do
        {
          v279 = vmulq_f32(*v278, *v277);
          v276[-1] = vmulq_f32(v278[-1], v277[-1]);
          *v276 = v279;
          v276 += 2;
          v277 += 2;
          v278 += 2;
          v275 += 8;
        }
        while (v275);
        v271 = v274;
        if ((v257 & 7) != 0)
        {
LABEL_289:
          v280 = v257 - v271;
          v281 = (float *)(v270 + 4 * v271);
          v282 = (float *)(v268 + 4 * v271);
          v283 = (float *)v269 + v271;
          do
          {
            v284 = *v283++;
            v285 = v284;
            v286 = *v282++;
            *v281++ = v286 * v285;
            --v280;
          }
          while (v280);
        }
      }
      if (*(_BYTE *)(a1 + 2692))
      {
        v287 = 8 * v20;
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + v287), *(const void **)(*(_QWORD *)(a1 + 160) + v287), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + v287), *(const void **)(*(_QWORD *)(a1 + 184) + v287), 4 * *(int *)(a1 + 52));
      }
      ++v13;
      v11 = v298;
      if (v13 == v298)
        return;
    }
    bzero(*(void **)(v25 + 8 * v24), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + v26) + 4 * **(int **)(*a3 + 24 * (int)v20)) = 1065353216;
    v27 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_41;
LABEL_40:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v308) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_41;
  }
}

void sub_19C12E7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C12E7D4(float **a1, int **a2, uint64_t *a3, int a4, int a5)
{
  float v10;
  float v11;
  int8x8_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;

  v10 = sub_19C2210BC();
  v11 = sub_19C2210BC() * v10;
  v13 = *a2;
  v14 = a2[1];
  v15 = (char *)v14 - (char *)*a2;
  if (v15 == 8)
  {
    if (a4 >= 1)
    {
      v16 = *v13;
      v17 = (*a2)[1];
      v18 = v11 * 26.0;
      v19 = *a3;
      v20 = *a1;
      v21 = a4;
      do
      {
        *v20++ = v18 * (float)(*(char *)(v19 + v17) + *(char *)(v19 + v16));
        v19 += a5;
        --v21;
      }
      while (v21);
    }
  }
  else if (a4 >= 1)
  {
    v22 = *a1;
    if (v14 == v13)
    {
      bzero(v22, 4 * a4);
    }
    else
    {
      v23 = 0;
      v24 = v15 >> 2;
      v25 = v11 * 26.0;
      v26 = *a3;
      if (v24 <= 1)
        v24 = 1;
      do
      {
        v22[v23] = 0.0;
        v27 = 0.0;
        v28 = v24;
        v29 = v13;
        do
        {
          v30 = *v29++;
          v12.i8[0] = *(_BYTE *)(v26 + v23 * a5 + v30);
          v12 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v12)).u64[0];
          *(float *)v12.i32 = (float)v12.i32[0];
          v27 = v27 + (float)(v25 * *(float *)v12.i32);
          v22[v23] = v27;
          --v28;
        }
        while (v28);
        ++v23;
      }
      while (v23 != a4);
    }
  }
}

void sub_19C12E928(uint64_t a1, int a2, float **a3, float **a4, float **a5, void **a6, _QWORD *a7, _QWORD *a8, uint64_t a9, int a10, int a11, int a12, unsigned __int8 a13)
{
  void **v14;
  float **v17;
  int v19;
  int v20;
  void *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  int v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  const float *v58;
  const float *v59;
  float *v60;
  vDSP_Length v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  uint64_t v72;
  _DWORD *v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _DWORD *v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int *v108;
  int v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  int *v125;
  int v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  const void *v131;
  float **v132;
  float *__C;
  float *__Ca;
  _QWORD *__dst;
  vDSP_Length __Na;

  if (a2)
    sub_19C2210D4(545);
  v14 = a6;
  v17 = a3;
  v19 = 4 * a11;
  if (!*(_QWORD *)(a1 + 784))
  {
    __dst = a8;
    v20 = *(_DWORD *)(a1 + 2688) * v19;
    v21 = (void *)operator new[]();
    bzero(v21, 4 * v20);
    *(_QWORD *)(a1 + 784) = v21;
    v22 = *(char **)(a1 + 2632);
    v23 = *(_QWORD *)(a1 + 2640);
    __C = (float *)a4;
    if ((unint64_t)v22 < v23)
    {
      *(_QWORD *)v22 = v21;
      v24 = (uint64_t)(v22 + 8);
      v14 = a6;
LABEL_22:
      *(_QWORD *)(a1 + 2632) = v24;
      a4 = (float **)__C;
      a8 = __dst;
      v17 = a3;
      goto LABEL_23;
    }
    v132 = a5;
    v25 = (char **)(a1 + 2624);
    v26 = *(char **)(a1 + 2624);
    v27 = (char *)(v22 - v26);
    v28 = (v22 - v26) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      sub_19C07DA0C();
    v30 = v23 - (_QWORD)v26;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        sub_19C07C7FC();
      v32 = operator new(8 * v31);
      v28 = (v22 - v26) >> 3;
      v25 = (char **)(a1 + 2624);
      v27 = (char *)(v22 - v26);
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v21;
      v24 = (uint64_t)(v33 + 1);
      v35 = (char *)(v22 - v26);
      if (v22 != v26)
      {
LABEL_14:
        v36 = (unint64_t)(v35 - 8);
        v14 = a6;
        if (v36 < 0x58)
          goto LABEL_117;
        if ((unint64_t)(v22 - v32 - (_QWORD)v27) < 0x20)
          goto LABEL_117;
        v37 = (v36 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v22[-v38];
        v33 = (_QWORD *)((char *)v33 - v38);
        v40 = &v32[8 * v28 - 16];
        v41 = v22 - 16;
        v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 32;
          v42 -= 4;
        }
        while (v42);
        v22 = v39;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_117:
          do
          {
            v44 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v33 = v44;
          }
          while (v22 != v26);
        }
        v22 = *v25;
        *(_QWORD *)(a1 + 2624) = v33;
        *(_QWORD *)(a1 + 2632) = v24;
        *(_QWORD *)(a1 + 2640) = v34;
        a5 = v132;
        if (!v22)
          goto LABEL_22;
LABEL_21:
        operator delete(v22);
        goto LABEL_22;
      }
    }
    else
    {
      v32 = 0;
      v33 = (_QWORD *)(8 * v28);
      v34 = 0;
      *(_QWORD *)(8 * v28) = v21;
      v24 = 8 * v28 + 8;
      v35 = (char *)(v22 - v26);
      if (v22 != v26)
        goto LABEL_14;
    }
    v14 = a6;
    *(_QWORD *)(a1 + 2624) = v33;
    *(_QWORD *)(a1 + 2632) = v24;
    *(_QWORD *)(a1 + 2640) = v34;
    a5 = v132;
    if (!v22)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_23:
  sub_19C12F474((float **)(a1 + 784), a7, a8, a10, a12, 4 * a11, 0.0);
  v45 = *v17;
  v46 = *a4;
  v47 = *a5;
  v48 = (float *)*v14;
  v49 = a11 * a10;
  __Na = a11 * a10;
  v50 = 4 * __Na;
  if (a10 >= 1)
  {
    __Ca = v47;
    bzero(*(void **)(a1 + 752), 4 * v49);
    v51 = 4 * a11;
    v52 = 4 * v19;
    if (a11 <= 0)
    {
LABEL_47:
      if ((a13 & 1) != 0)
      {
        vDSP_vadd(*(const float **)(a1 + 752), 1, v45, 1, v45, 1, __Na);
        bzero(*(void **)(a1 + 752), v50);
        v76 = a13;
        if (a11 < 1)
          goto LABEL_71;
      }
      else
      {
        memmove(v45, *(const void **)(a1 + 752), v50);
        bzero(*(void **)(a1 + 752), v50);
        v76 = a13;
        if (a11 < 1)
        {
LABEL_71:
          if ((v76 & 1) != 0)
          {
            vDSP_vadd(*(const float **)(a1 + 752), 1, v46, 1, v46, 1, __Na);
            bzero(*(void **)(a1 + 752), v50);
            if (a11 < 1)
              goto LABEL_87;
          }
          else
          {
            memmove(v46, *(const void **)(a1 + 752), v50);
            bzero(*(void **)(a1 + 752), v50);
            if (a11 < 1)
            {
LABEL_87:
              if ((v76 & 1) != 0)
              {
                vDSP_vadd(*(const float **)(a1 + 752), 1, __Ca, 1, __Ca, 1, __Na);
                bzero(*(void **)(a1 + 752), v50);
                if (a11 < 1)
                {
LABEL_103:
                  v131 = *(const void **)(a1 + 752);
                  if (v76)
                  {
                    v58 = *(const float **)(a1 + 752);
                    v59 = v48;
                    v61 = a11 * a10;
                    v60 = v48;
                    goto LABEL_105;
                  }
                  goto LABEL_108;
                }
              }
              else
              {
                memmove(__Ca, *(const void **)(a1 + 752), v50);
                bzero(*(void **)(a1 + 752), v50);
                if (a11 < 1)
                  goto LABEL_103;
              }
              v114 = 0;
              v115 = 0;
              v116 = 3 * a11;
              v117 = *(_QWORD *)(a1 + 784);
              v118 = *(_QWORD *)(a1 + 752);
              v119 = v117 + 12 * a11;
              v120 = (__int128 *)(v119 + 16);
              v121 = (_OWORD *)(v118 + 16);
              while (1)
              {
                if (a11 >= 8 && (unint64_t)(v118 + v51 * v115 - (v119 + v52 * v115)) >= 0x20)
                {
                  v127 = v121;
                  v128 = v120;
                  v129 = a11 & 0xFFFFFFF8;
                  do
                  {
                    v130 = *v128;
                    *(v127 - 1) = *(v128 - 1);
                    *v127 = v130;
                    v128 += 2;
                    v127 += 2;
                    v129 -= 8;
                  }
                  while (v129);
                  v122 = a11 & 0x7FFFFFF8;
                  if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
                    goto LABEL_92;
                }
                else
                {
                  v122 = 0;
                }
                v123 = a11 - v122;
                v124 = (_DWORD *)(v118 + 4 * (v122 + v114));
                v125 = (int *)(v117 + 4 * (v122 + v116));
                do
                {
                  v126 = *v125++;
                  *v124++ = v126;
                  --v123;
                }
                while (v123);
LABEL_92:
                ++v115;
                v120 = (__int128 *)((char *)v120 + v52);
                v121 = (_OWORD *)((char *)v121 + v51);
                v114 += a11;
                v116 += v19;
                if (v115 == a10)
                  goto LABEL_103;
              }
            }
          }
          v97 = 0;
          v98 = 0;
          v99 = 2 * a11;
          v100 = *(_QWORD *)(a1 + 784);
          v101 = *(_QWORD *)(a1 + 752);
          v102 = v100 + 8 * a11;
          v103 = (__int128 *)(v102 + 16);
          v104 = (_OWORD *)(v101 + 16);
          while (1)
          {
            if (a11 >= 8 && (unint64_t)(v101 + v51 * v98 - (v102 + v52 * v98)) >= 0x20)
            {
              v110 = v104;
              v111 = v103;
              v112 = a11 & 0xFFFFFFF8;
              do
              {
                v113 = *v111;
                *(v110 - 1) = *(v111 - 1);
                *v110 = v113;
                v111 += 2;
                v110 += 2;
                v112 -= 8;
              }
              while (v112);
              v105 = a11 & 0x7FFFFFF8;
              if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
                goto LABEL_76;
            }
            else
            {
              v105 = 0;
            }
            v106 = a11 - v105;
            v107 = (_DWORD *)(v101 + 4 * (v105 + v97));
            v108 = (int *)(v100 + 4 * (v105 + v99));
            do
            {
              v109 = *v108++;
              *v107++ = v109;
              --v106;
            }
            while (v106);
LABEL_76:
            ++v98;
            v103 = (__int128 *)((char *)v103 + v52);
            v104 = (_OWORD *)((char *)v104 + v51);
            v97 += a11;
            v99 += v19;
            if (v98 == a10)
              goto LABEL_87;
          }
        }
      }
      v77 = *(_QWORD *)(a1 + 784);
      v78 = *(_QWORD *)(a1 + 752);
      v79 = v51 + v77;
      if (a11 < 8)
      {
        v80 = (_DWORD *)(v78 + 12);
        v81 = (_DWORD *)(v79 + 12);
        v82 = a10;
        do
        {
          *(v80 - 3) = *(v81 - 3);
          if (a11 != 1)
          {
            *(v80 - 2) = *(v81 - 2);
            if (a11 != 2)
            {
              *(v80 - 1) = *(v81 - 1);
              if (a11 != 3)
              {
                *v80 = *v81;
                if (a11 != 4)
                {
                  v80[1] = v81[1];
                  if (a11 != 5)
                  {
                    v80[2] = v81[2];
                    if (a11 != 6)
                      v80[3] = v81[3];
                  }
                }
              }
            }
          }
          v80 = (_DWORD *)((char *)v80 + v51);
          v81 = (_DWORD *)((char *)v81 + v52);
          --v82;
        }
        while (v82);
        goto LABEL_71;
      }
      v83 = 0;
      v84 = 0;
      v85 = (__int128 *)(v79 + 16);
      v86 = (_OWORD *)(v78 + 16);
      v87 = a11;
      while (1)
      {
        if ((unint64_t)(v78 + v51 * v84 - (v79 + v52 * v84)) >= 0x20)
        {
          v89 = v86;
          v90 = v85;
          v91 = a11 & 0xFFFFFFF8;
          do
          {
            v92 = *v90;
            *(v89 - 1) = *(v90 - 1);
            *v89 = v92;
            v90 += 2;
            v89 += 2;
            v91 -= 8;
          }
          while (v91);
          v88 = a11 & 0x7FFFFFF8;
          if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
            goto LABEL_62;
        }
        else
        {
          v88 = 0;
        }
        v93 = a11 - v88;
        v94 = (_DWORD *)(v78 + 4 * (v88 + v83));
        v95 = (int *)(v77 + 4 * (v88 + v87));
        do
        {
          v96 = *v95++;
          *v94++ = v96;
          --v93;
        }
        while (v93);
LABEL_62:
        ++v84;
        v85 = (__int128 *)((char *)v85 + v52);
        v86 = (_OWORD *)((char *)v86 + v51);
        v83 += a11;
        v87 += v19;
        if (v84 == a10)
          goto LABEL_71;
      }
    }
    v53 = *(_QWORD *)(a1 + 784);
    v54 = *(_QWORD *)(a1 + 752);
    if (a11 < 8)
    {
      v55 = (_DWORD *)(v54 + 12);
      v56 = (_DWORD *)(v53 + 12);
      v57 = a10;
      do
      {
        *(v55 - 3) = *(v56 - 3);
        if (a11 != 1)
        {
          *(v55 - 2) = *(v56 - 2);
          if (a11 != 2)
          {
            *(v55 - 1) = *(v56 - 1);
            if (a11 != 3)
            {
              *v55 = *v56;
              if (a11 != 4)
              {
                v55[1] = v56[1];
                if (a11 != 5)
                {
                  v55[2] = v56[2];
                  if (a11 != 6)
                    v55[3] = v56[3];
                }
              }
            }
          }
        }
        v55 = (_DWORD *)((char *)v55 + v51);
        v56 = (_DWORD *)((char *)v56 + v52);
        --v57;
      }
      while (v57);
      goto LABEL_47;
    }
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = (__int128 *)(v53 + 16);
    v66 = (_OWORD *)(v54 + 16);
    while (1)
    {
      if ((unint64_t)(v54 + v51 * v64 - (v53 + v52 * v64)) >= 0x20)
      {
        v68 = a11 & 0x7FFFFFF8;
        v69 = v66;
        v70 = v65;
        do
        {
          v71 = *v70;
          *(v69 - 1) = *(v70 - 1);
          *v69 = v71;
          v70 += 2;
          v69 += 2;
          v68 -= 8;
        }
        while (v68);
        v67 = a11 & 0xFFFFFFF8;
        if (v67 == a11)
          goto LABEL_38;
      }
      else
      {
        v67 = 0;
      }
      v72 = a11 - v67;
      v73 = (_DWORD *)(v54 + 4 * (v67 + v62));
      v74 = (int *)(v53 + 4 * (v67 + v63));
      do
      {
        v75 = *v74++;
        *v73++ = v75;
        --v72;
      }
      while (v72);
LABEL_38:
      v63 += v19;
      ++v64;
      v65 = (__int128 *)((char *)v65 + v52);
      v66 = (_OWORD *)((char *)v66 + v51);
      v62 += a11;
      if (v64 == a10)
        goto LABEL_47;
    }
  }
  bzero(*(void **)(a1 + 752), 4 * v49);
  if ((a13 & 1) != 0)
  {
    vDSP_vadd(*(const float **)(a1 + 752), 1, v45, 1, v45, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v46, 1, v46, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v47, 1, v47, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    v58 = *(const float **)(a1 + 752);
    v59 = v48;
    v60 = v48;
    v61 = a11 * a10;
LABEL_105:
    vDSP_vadd(v58, 1, v59, 1, v60, 1, v61);
    return;
  }
  memmove(v45, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  memmove(v46, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  memmove(v47, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  v131 = *(const void **)(a1 + 752);
LABEL_108:
  memmove(v48, v131, v50);
}

void sub_19C12F2A8(uint64_t a1, int a2, const float **a3, _QWORD *a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  uint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  float **v20;
  void *__p;
  void *v22;
  char *v23;

  if ((a10 & 1) != 0)
  {
    if (a2)
    {
      if (a7 != 1)
        sub_19C2210D4(502);
      __p = 0;
      v22 = 0;
      v23 = 0;
      v16 = *(const void **)a6;
      v15 = *(_QWORD *)(a6 + 8);
      v17 = v15 - *(_QWORD *)a6;
      if (v15 != *(_QWORD *)a6)
      {
        if (v17 < 0)
          sub_19C07DA0C();
        v18 = (char *)operator new(v15 - *(_QWORD *)a6);
        v19 = &v18[4 * (v17 >> 2)];
        __p = v18;
        v23 = v19;
        memcpy(v18, v16, v17);
        v22 = v19;
      }
      v20 = (float **)(a1 + 760);
      sub_19C12E7D4(v20, (int **)&__p, a5, a8, a9);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      vDSP_vadd(*v20, 1, *a3, 1, (float *)*a3, 1, a8);
    }
    else
    {
      sub_19C12F474((float **)(a1 + 752), a4, a5, a7, a9, a8, 0.0);
      vDSP_vadd(*(const float **)(a1 + 752), 1, *a3, 1, (float *)*a3, 1, a8 * a7);
    }
  }
  else
  {
    if (a2)
      sub_19C2210D4(456);
    sub_19C12F474((float **)a3, a4, a5, a7, a9, a8, 0.0);
  }
}

void sub_19C12F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C12F474(float **a1, _QWORD *a2, _QWORD *a3, int a4, int a5, int a6, float a7)
{
  float v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  float **v47;
  _QWORD *v48;
  float __B;
  _DWORD v51[8];
  _QWORD v52[6];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[3];
  _QWORD v59[4];

  v13 = sub_19C2210BC();
  __B = sub_19C2210BC() * v13;
  if (a4 != 1)
    sub_19C2210D4(354);
  v15 = qword_1ECD3EE80;
  v14 = (char *)qword_1ECD3EE88;
  v16 = qword_1ECD3EE88 - qword_1ECD3EE80;
  v17 = a5 - (qword_1ECD3EE88 - qword_1ECD3EE80);
  if (a5 <= (unint64_t)(qword_1ECD3EE88 - qword_1ECD3EE80))
  {
    v24 = a6;
    if (a5 < (unint64_t)(qword_1ECD3EE88 - qword_1ECD3EE80))
      qword_1ECD3EE88 = qword_1ECD3EE80 + a5;
  }
  else
  {
    if (qword_1ECD3EE90 - qword_1ECD3EE88 >= v17)
    {
      bzero((void *)qword_1ECD3EE88, a5 - (qword_1ECD3EE88 - qword_1ECD3EE80));
      qword_1ECD3EE88 = (uint64_t)&v14[v17];
      v24 = a6;
      goto LABEL_34;
    }
    v47 = a1;
    v48 = a3;
    if (a5 < 0)
      sub_19C07DA0C();
    v18 = 2 * (qword_1ECD3EE90 - qword_1ECD3EE80);
    if (v18 <= a5)
      v18 = a5;
    if ((unint64_t)(qword_1ECD3EE90 - qword_1ECD3EE80) >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v20 = (uint64_t)operator new(v19);
    v46 = v20 + v19;
    v45 = v20 + a5;
    v21 = v20 + v16;
    bzero((void *)(v20 + v16), v17);
    if (v14 != (char *)v15)
    {
      if (v16 < 8)
      {
        v23 = v20 + a5;
        v22 = v46;
        goto LABEL_30;
      }
      v23 = v20 + a5;
      v22 = v46;
      if ((unint64_t)(v15 - v20) >= 0x20)
      {
        if (v16 < 0x20)
        {
          v25 = 0;
          goto LABEL_25;
        }
        v25 = v16 & 0xFFFFFFFFFFFFFFE0;
        v26 = v14 - 16;
        v27 = &v14[v20 - 16 - v15];
        v28 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v29 = *(_OWORD *)v26;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
          *(_OWORD *)v27 = v29;
          v27 -= 32;
          v26 -= 32;
          v28 -= 32;
        }
        while (v28);
        if (v16 == v25)
          goto LABEL_32;
        if ((v16 & 0x18) != 0)
        {
LABEL_25:
          v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
          v30 = &v14[-v25 - 8];
          v31 = &v30[-v15];
          v32 = v25 - (v16 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v33 = *(_QWORD *)v30;
            v30 -= 8;
            *(_QWORD *)&v31[v20] = v33;
            v31 -= 8;
            v32 += 8;
          }
          while (v32);
          v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
          if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_30;
LABEL_32:
          v14 = (char *)v15;
          v24 = a6;
          qword_1ECD3EE80 = v20;
          qword_1ECD3EE88 = v23;
          qword_1ECD3EE90 = v22;
          a1 = v47;
          a3 = v48;
          if (!v15)
            goto LABEL_34;
          goto LABEL_33;
        }
        v21 -= v25;
        v14 -= v25;
      }
LABEL_30:
      v34 = (_BYTE *)(v21 - 1);
      do
      {
        v35 = *--v14;
        *v34-- = v35;
      }
      while (v14 != (char *)v15);
      goto LABEL_32;
    }
    a1 = v47;
    qword_1ECD3EE80 = v21;
    qword_1ECD3EE88 = v45;
    qword_1ECD3EE90 = v46;
    a3 = v48;
    v24 = a6;
    if (v14)
LABEL_33:
      operator delete(v14);
  }
LABEL_34:
  v36 = (qword_1ECD3EE70 - qword_1ECD3EE68) >> 2;
  if (v24 <= v36)
  {
    if (v24 < v36)
      qword_1ECD3EE70 = qword_1ECD3EE68 + 4 * v24;
  }
  else
  {
    sub_19C0A36A4((uint64_t)&qword_1ECD3EE68, v24 - v36);
  }
  if (a5 >= 1)
  {
    v37 = 0;
    do
    {
      v39 = *(float *)(*a2 + 4 * v37);
      if (v39 <= -5.0)
      {
        LOBYTE(v38) = -127;
      }
      else if (v39 < 5.0 && (v38 = llroundf(v39 * 25.6), v38 <= 127))
      {
        if (v38 <= -127)
          LOBYTE(v38) = -127;
      }
      else
      {
        LOBYTE(v38) = 127;
      }
      *(_BYTE *)(qword_1ECD3EE80 + v37++) = v38;
    }
    while (a5 != v37);
  }
  v40 = *a3;
  v59[1] = 0x3F80000000020008;
  v59[2] = 0;
  v58[2] = 0;
  v59[0] = a5;
  v58[0] = v24;
  v58[1] = 0x3F80000000010020;
  v52[0] = a5;
  v52[1] = v24;
  v52[2] = v40;
  v52[3] = 0x3F80000000020008;
  v52[4] = 0;
  v52[5] = 0;
  v53 = xmmword_19C277458;
  v54 = unk_19C277468;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  bzero(v51, 0x20uLL);
  v51[0] = 1;
  v41 = (void *)MEMORY[0x1A1AD1434](v59, v58, v52, v51);
  if (!v41)
    sub_19C2210D4(1010);
  v42 = v41;
  v43 = BNNSFilterApply(v41, (const void *)qword_1ECD3EE80, (void *)qword_1ECD3EE68);
  v44 = *a1;
  if (a7 != 0.0)
  {
    vDSP_vsma((const float *)qword_1ECD3EE68, 1, &__B, v44, 1, *a1, 1, v24);
    if (!v43)
      goto LABEL_51;
LABEL_53:
    sub_19C2210D4(345);
  }
  vDSP_vsmul((const float *)qword_1ECD3EE68, 1, &__B, v44, 1, v24);
  if (v43)
    goto LABEL_53;
LABEL_51:
  BNNSFilterDestroy(v42);
}

_QWORD *sub_19C12F880(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  *a1 = &unk_1E3D1F8B8;
  sub_19C129E9C(a1);
  v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[194] = 0;
    v3 = a1[195];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    a1[195] = 0;
    v4 = a1[196];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    a1[196] = 0;
    v5 = a1[197];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    a1[197] = 0;
    v6 = a1[198];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    a1[198] = 0;
    v7 = a1[199];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    a1[199] = 0;
    v8 = a1[200];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    a1[200] = 0;
    v9 = a1[201];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    a1[201] = 0;
  }
  v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19C22CB78((uint64_t)(a1 + 303));
  sub_19C22CB78((uint64_t)(a1 + 294));
  sub_19C22CB78((uint64_t)(a1 + 285));
  sub_19C22CB78((uint64_t)(a1 + 276));
  sub_19C22CB78((uint64_t)(a1 + 267));
  sub_19C22CB78((uint64_t)(a1 + 258));
  sub_19C22CB78((uint64_t)(a1 + 249));
  sub_19C22CB78((uint64_t)(a1 + 240));
  sub_19C22CB78((uint64_t)(a1 + 231));
  sub_19C22CB78((uint64_t)(a1 + 222));
  sub_19C22CB78((uint64_t)(a1 + 213));
  sub_19C101AC4(a1 + 168);
  sub_19C101AC4(a1 + 153);
  sub_19C101AC4(a1 + 138);
  sub_19C101AC4(a1 + 123);
  v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  v36 = a1[26];
  if (v36)
  {
    v37 = a1[27];
    v38 = (void *)a1[26];
    if (v37 != v36)
    {
      v39 = a1[27];
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1E3D1E2D8;
  v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}

uint64_t sub_19C12FC60(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  float v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int32x2_t v22;
  __int128 v24;
  char v25;
  void *__p[2];
  char v27;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20898;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(_QWORD *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(_BYTE *)(*(_QWORD *)(a1 + 528) + 376);
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  v27 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v27 < 0)
  {
    operator delete(__p[0]);
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  else
  {
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  v18 = *(_DWORD *)(a7 + 32);
  switch(v18)
  {
    case 2:
      v20 = operator new();
      *(_QWORD *)v20 = &unk_1E3D1E968;
      *(float *)(v20 + 24) = v15;
      *(_DWORD *)(v20 + 28) = v16;
      *(_DWORD *)(v20 + 32) = 841731191;
      v21 = v17;
      *(_QWORD *)(v20 + 128) = 114;
      *(_WORD *)(v20 + 143) = 265;
      *(int32x2_t *)(v20 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 12) = 0;
      *(float *)(v20 + 36) = v21;
      *(_DWORD *)(v20 + 40) = v16;
      *(float *)(v20 + 44) = v21;
      *(_OWORD *)(v20 + 48) = 0u;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_QWORD *)(v20 + 112) = 0;
      *(_QWORD *)(v20 + 120) = 0x6579614C6C6C7546;
LABEL_14:
      *(_QWORD *)(a1 + 424) = v20;
      return a1;
    case 1:
      v20 = operator new();
      *(float *)(v20 + 20) = v15;
      *(_DWORD *)(v20 + 24) = v16;
      *(_DWORD *)(v20 + 28) = 841731191;
      *(double *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 144) = 114;
      *(_WORD *)(v20 + 159) = 265;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v20 = &unk_1E3D1E270;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 40) = v16;
      *(double *)(v20 + 48) = v17;
      *(int32x2_t *)(v20 + 56) = v22;
      *(_DWORD *)(v20 + 164) = 0;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_OWORD *)(v20 + 112) = 0u;
      *(_QWORD *)(v20 + 128) = 0;
      *(_QWORD *)(v20 + 136) = 0x6579614C6C6C7546;
      goto LABEL_14;
    case 0:
      v19 = operator new();
      v25 = 9;
      strcpy((char *)&v24, "FullLayer");
      sub_19C0FCB2C(v19, &v24, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v15);
      *(_QWORD *)(a1 + 424) = v19;
      if (v25 < 0)
        operator delete((void *)v24);
      break;
  }
  return a1;
}

void sub_19C12FFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void **v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v23);
  sub_19C22CB78(v22);
  v26 = *(void **)(v20 + 384);
  if (v26)
  {
    *(_QWORD *)(v20 + 392) = v26;
    operator delete(v26);
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
    {
LABEL_5:
      v28 = *(void **)(v20 + 312);
      if (!v28)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
      goto LABEL_5;
  }
  *(_QWORD *)(v20 + 344) = v27;
  operator delete(v27);
  v28 = *(void **)(v20 + 312);
  if (!v28)
  {
LABEL_6:
    v29 = *(void **)(v20 + 288);
    if (!v29)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v20 + 320) = v28;
  operator delete(v28);
  v29 = *(void **)(v20 + 288);
  if (!v29)
  {
LABEL_7:
    v30 = *(void **)(v20 + 264);
    if (!v30)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v20 + 296) = v29;
  operator delete(v29);
  v30 = *(void **)(v20 + 264);
  if (!v30)
  {
LABEL_8:
    sub_19C101AC4(v21);
    v31 = *(void **)(v20 + 72);
    if (!v31)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v20 + 272) = v30;
  operator delete(v30);
  sub_19C101AC4(v21);
  v31 = *(void **)(v20 + 72);
  if (!v31)
  {
LABEL_9:
    v32 = *v24;
    if (!*v24)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v20 + 80) = v31;
  operator delete(v31);
  v32 = *v24;
  if (!*v24)
  {
LABEL_10:
    *(_QWORD *)v20 = &unk_1E3D1E2D8;
    v33 = *(void **)(v20 + 8);
    if (!v33)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v20 + 56) = v32;
  operator delete(v32);
  *(_QWORD *)v20 = &unk_1E3D1E2D8;
  v33 = *(void **)(v20 + 8);
  if (!v33)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  *(_QWORD *)(v20 + 16) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_19C130104()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C130114(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C13011C(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19C130124(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C130130(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19C130138()
{
  return 0;
}

_BYTE *sub_19C130140(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 512);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 117);
  v18 = sub_19C2210B4();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

void sub_19C130254(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  unint64_t *v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 104);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 408));
  v11 = *(unint64_t **)(a1 + 512);
  v12 = sub_19C2210B4();
  sub_19C12CAAC(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

_QWORD *sub_19C1302FC(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
      v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
      if ((int)v7 < 1)
        return result;
      goto LABEL_7;
    }
  }
  result = 0;
  v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 < 1)
    return result;
LABEL_7:
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 512);
  do
  {
    *(_BYTE *)(*v9 + v8) = *(_BYTE *)(result[16] + v8) - *(_BYTE *)(v5[16] + v8);
    ++v8;
  }
  while (v7 != v8);
  return result;
}

void *sub_19C1303CC(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
  return result;
}

_QWORD *sub_19C130434(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
    v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1)
      return result;
  }
  else
  {
    result = 0;
    v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1)
      return result;
  }
  v5 = 0;
  v6 = *(_QWORD **)(a1 + 512);
  do
  {
    *(_BYTE *)(*v6 + v5) += *(_BYTE *)(result[16] + v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void sub_19C1304C8(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 64))(*(_QWORD *)(a1 + 424));
  sub_19C2210D4(23);
}

uint64_t sub_19C130514(uint64_t result, float a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  float v7;
  BOOL v8;

  v4 = *(unsigned int *)(result + 108);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(result + 512);
    do
    {
      LOBYTE(a4) = *(_BYTE *)(*v6 + v5);
      *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      v7 = (float)SLODWORD(a4);
      v8 = (float)SLODWORD(a4) < (float)-a2;
      *(float *)&a4 = -a2;
      if (v8 || (*(float *)&a4 = a2, v7 > a2))
        *(_BYTE *)(*v6 + v5) = (int)*(float *)&a4;
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_19C130578(uint64_t result, float a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(unsigned int *)(result + 108);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD **)(result + 512);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v5 + v4);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v5 + v4++) = (int)*(float *)&a3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_19C1305CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
}

void sub_19C1305DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 512);
  v5 = *(_DWORD *)(a1 + 100);
  v4 = *(_DWORD *)(a1 + 104);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C1306E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t sub_19C130700(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C13070C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C130714(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277590;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C1307B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1307CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 80) = v6;
    v11 = *(_QWORD *)(a1 + 240);
    v10 = *(_QWORD *)(a1 + 248);
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v7;
  v11 = *(_QWORD *)(a1 + 240);
  v10 = *(_QWORD *)(a1 + 248);
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v11 = *(_QWORD *)(a1 + 240);
      v10 = *(_QWORD *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(_QWORD *)(a1 + 248) = v11;
  v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  v17 = *(_QWORD *)(a1 + 360);
  v16 = *(_QWORD *)(a1 + 368);
  if (v16 != v17)
  {
    v18 = *(_QWORD *)(a1 + 368);
    do
    {
      v20 = *(void **)(v18 - 24);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *(_QWORD *)(v16 - 16) = v19;
        operator delete(v19);
      }
      v16 = v18;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 368) = v17;
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

float sub_19C130960(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float result;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.1755e-38;
    do
    {
      v9 = *(float *)(*(_QWORD *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8)
        v6 = v7;
      v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19C130A10(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t **v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  __int32 *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 1.1755e-38;
    do
    {
      v11 = *(float *)(*(_QWORD *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10)
        v8 = v9;
      v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0])
        v12 = v13;
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      v19 = *v15;
      v20 = *(float32x4_t **)(v6 + 8 * a4);
      v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          v22 = v18 & 0x7FFFFFF8;
          v23 = v19 + 1;
          v24 = v20 + 1;
          v25 = v21 + 1;
          v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18)
            return a6.f32[0];
        }
      }
      else
      {
        v22 = 0;
      }
      v28 = &v21->i32[v22];
      v29 = &v20->f32[v22];
      v30 = &v19->f32[v22];
      v31 = v18 - v22;
      do
      {
        v32 = *v30++;
        v33 = v32;
        v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19C130BA8(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  uint64_t v24;
  NSObject *global_queue;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD block[7];
  int v41;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    v9 = 8 * a4;
    sub_19C10B530((void **)(a1 + 416), (float32x4_t **)(*(_QWORD *)(a1 + 384) + v9), (const void **)(*a2 + v9), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 312) + v9), (_QWORD *)(a1 + 416), *(_QWORD **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
    v10 = *(unsigned int *)(a1 + 104);
    if ((int)v10 >= 1)
    {
      v11 = *(int **)(*(_QWORD *)(a1 + 312) + 8 * a4);
      do
      {
        v12 = -1035468800;
        if (*(float *)v11 < -50.0 || (v12 = 1112014848, *(float *)v11 > 50.0))
          *v11 = v12;
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    v20 = *(_QWORD *)(a1 + 264) + 8 * a4;
    v21 = a1 + 416;
    v22 = *(_DWORD *)(a1 + 104);
    v23 = *(int *)(a1 + 100);
    v24 = *(_QWORD *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C103680;
    block[3] = &unk_1E3D25490;
    v41 = v22;
    block[4] = v24;
    block[5] = v21;
    block[6] = v20;
    dispatch_apply(v23, global_queue, block);
    return;
  }
  v13 = *a2;
  v14 = *(_QWORD *)(a1 + 360) + 24 * a4;
  v16 = *(_BYTE **)v14;
  v15 = *(_BYTE **)(v14 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v18 = operator new(v15 - v16);
    memcpy(v18, v16, v17);
    v19 = *(unsigned int *)(a1 + 100);
    if ((int)v19 < 1)
      goto LABEL_26;
    goto LABEL_19;
  }
  v18 = 0;
  v19 = *(unsigned int *)(a1 + 100);
  if ((int)v19 >= 1)
  {
LABEL_19:
    v26 = 0;
    v27 = *(_QWORD *)(v13 + 8 * a4);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v19 < 8)
      goto LABEL_24;
    if ((unint64_t)(v28 - v27) < 0x20)
      goto LABEL_24;
    v26 = v19 & 0x7FFFFFF8;
    v29 = (__int128 *)(v27 + 16);
    v30 = (_OWORD *)(v28 + 16);
    v31 = v19 & 0xFFFFFFF8;
    do
    {
      v32 = *v29;
      *(v30 - 1) = *(v29 - 1);
      *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v26 != v19)
    {
LABEL_24:
      v33 = v19 - v26;
      v34 = 4 * v26;
      v35 = (_DWORD *)(v28 + 4 * v26);
      v36 = (int *)(v27 + v34);
      do
      {
        v37 = *v36++;
        *v35++ = v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_26:
  if (*(int *)(a1 + 156) >= 1)
  {
    v38 = 0;
    v39 = *(_QWORD *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v39 + 24 * *(int *)(a1 + 160)) + 4 * v38) = *((_DWORD *)v18 + v38);
      ++v38;
    }
    while (v38 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
    goto LABEL_31;
  }
  ++*(_DWORD *)(a1 + 160);
  if (v18)
LABEL_31:
    operator delete(v18);
}

void sub_19C130E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C130EAC(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      v4 = *(_QWORD *)(a1 + 264);
      if (*(_QWORD *)(a1 + 272) == v4)
        goto LABEL_7;
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) == v4)
    goto LABEL_7;
LABEL_5:
  v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    v4 = *(_QWORD *)(a1 + 264);
  }
  while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
LABEL_7:
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(_BYTE *)(a1 + 116))
  {
    v8 = 0;
    v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(_BYTE *)(a1 + 116))
        goto LABEL_14;
    }
  }
}

uint64_t sub_19C130FD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19C130FD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void sub_19C130FE4(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1)
    sub_19C2210D4(33);
  sub_19C2210D4(23);
}

void sub_19C131008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    v10 = __OFSUB__(a5, 1);
    v9 = a5 - 1;
    if (v9 < 0 != v10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    v9 = a5 - 1;
    if (a5 < 1)
      return;
  }
  v11 = 0;
  do
  {
    if (*(_BYTE *)(a1 + 520))
      v12 = v11;
    else
      v12 = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19C1310B4(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  const void **v30;
  int v31;
  float *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  int *v37;
  int *v38;
  int *v39;

  v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    v9 = 0;
    if (!a5)
      goto LABEL_7;
  }
  else
  {
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5)
      goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 520))
    sub_19C2210D4(34);
LABEL_7:
  v10 = a4 & 0xFFFFFF;
  v11 = a5 != 0;
  if (v10 > v11)
  {
    while (1)
    {
      v12 = *(_BYTE *)(a1 + 520) ? v10 + ~v11 : v11;
      v13 = v12;
      v14 = *(_BYTE *)(a1 + 42) ? 1 : v12;
      v15 = ((*(_BYTE *)(a1 + 42) != 0) & v9) != 0 ? 1 : v12;
      v16 = *(_QWORD *)(a1 + 264);
      if ((_DWORD)v9)
        break;
      memmove(*(void **)(v16 + 8 * v15), *(const void **)(*a2 + 8 * v15), 4 * *(int *)(a1 + 96));
      v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_23;
LABEL_24:
      if ((_DWORD)v9)
      {
        v36 = v13;
        v18 = *(_QWORD *)(a1 + 360);
        v19 = (_QWORD *)(v18 + 24 * v13);
        v20 = (_DWORD *)*v19;
        *(_DWORD *)*v19 = **(_DWORD **)(*v7 + 24 * v13);
        if (v17)
          v20[1] = *(_DWORD *)(a1 + 104) - 1;
        v21 = *(_QWORD *)(a1 + 384);
        v38 = 0;
        v39 = 0;
        v37 = 0;
        v22 = (_DWORD *)*v19;
        v23 = *(_QWORD *)(v18 + 24 * (int)v36 + 8);
        v24 = v23 - *v19;
        if (v23 != *v19)
        {
          if (v24 < 0)
            sub_19C07DA0C();
          v25 = v9;
          v26 = v10;
          v27 = v7;
          v37 = (int *)operator new(v23 - *v19);
          v38 = v37;
          v28 = &v37[v24 >> 2];
          v39 = v28;
          memcpy(v37, v22, v24);
          v38 = v28;
          v7 = v27;
          v10 = v26;
          v9 = v25;
        }
        sub_19C12E7D4((float **)(v21 + 8 * v14), &v37, *(uint64_t **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
        v29 = v14;
        v13 = v36;
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
      }
      else
      {
        v29 = v14;
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 384) + 8 * v14), (_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v15), *(_QWORD **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
      }
      v30 = (const void **)(*(_QWORD *)(a1 + 384) + 8 * v29);
      v31 = *(_DWORD *)(a1 + 100);
      if (v31 >= 1)
      {
        v32 = (float *)*v30;
        v33 = *(unsigned int *)(a1 + 100);
        do
        {
          v34 = -1035468800;
          if (*v32 < -50.0 || (v34 = 1112014848, *v32 > 50.0))
            *(_DWORD *)v32 = v34;
          ++v32;
          --v33;
        }
        while (v33);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 288) + 8 * v13), v30, v31, *(_DWORD *)(a1 + 408));
      if (++v11 == (_DWORD)v10)
        return;
    }
    bzero(*(void **)(v16 + 8 * v15), 4 * *(int *)(a1 + 104));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v15) + 4 * **(int **)(*v7 + 24 * (int)v13)) = 1065353216;
    v17 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_24;
LABEL_23:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v15) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_24;
  }
}

void sub_19C1313A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1313C0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE4188D8);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE4188D8);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE4190C8 = 0;
      unk_1EE4190D0 = 0;
      qword_1EE4190D8 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE4190C8, &dword_19C079000);
      __cxa_guard_release(&qword_1EE4188D8);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE4190C8);
  a1[520] = 0;
  return result;
}

uint64_t sub_19C13148C(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19C1314C0(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

void sub_19C131520(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0F8, 0))__cxa_bad_cast();
    sub_19C22CBE0(a1 + 432);
    if (!*(_DWORD *)(a1 + 112))
      sub_19C2210D4(23);
    sub_19C2210D4(33);
  }
  sub_19C2210D4(1);
}

_DWORD *sub_19C131588(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float sub_19C1315A0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 100);
  v4 = *(float ***)(a1 + 288);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C1316E0(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C132908(a1);
  operator delete(v1);
}

uint64_t sub_19C1316F4(uint64_t a1)
{
  return a1 + 336;
}

float sub_19C1316FC(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19C13170C(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 288);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19C13188C(uint64_t a1, float a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void **p_vtable;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char **v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  void *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _OWORD *v152;
  __int128 *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _OWORD *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  int v232;
  char **v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236[8];

  v4 = *(_QWORD *)(a1 + 528);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 376);
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_3:
      v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
      v7 = *(int *)(a1 + 100) * (uint64_t)v6;
      *(_DWORD *)(a1 + 104) = v6;
      *(_DWORD *)(a1 + 108) = v7;
      if (*(_DWORD *)(a1 + 504))
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v10 = *(_DWORD *)(a1 + 96);
  v7 = *(int *)(a1 + 100) * (uint64_t)v10;
  *(_DWORD *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 108) = v7;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    if (*(_BYTE *)(a1 + 116))
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 117))
  {
    if (v4 && *(_DWORD *)(v4 + 40) == 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 112);
    }
    else
    {
      *(_QWORD *)&v236[0] = operator new[]();
      bzero(*(void **)&v236[0], v7);
      sub_19C1023F0(v236, v7, a2);
      v11 = *(_QWORD *)&v236[0];
      *(_QWORD *)(a1 + 128) = *(_QWORD *)&v236[0];
      v13 = *(char **)(a1 + 80);
      v12 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(char **)(a1 + 72);
        v16 = (v13 - v15) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_19C07DA0C();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            goto LABEL_264;
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v11;
        v14 = v21 + 8;
        if (v13 != v15)
        {
          v23 = v13 - v15 - 8;
          if (v23 < 0x58)
            goto LABEL_269;
          if ((unint64_t)(v15 - v20) < 0x20)
            goto LABEL_269;
          v24 = (v23 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v26 = &v13[-v25];
          v21 -= v25;
          v27 = &v20[8 * v16 - 16];
          v28 = (__int128 *)(v13 - 16);
          v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v28;
            *((_OWORD *)v27 - 1) = *(v28 - 1);
            *(_OWORD *)v27 = v30;
            v27 -= 32;
            v28 -= 2;
            v29 -= 4;
          }
          while (v29);
          v13 = v26;
          if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_269:
            do
            {
              v31 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v21 - 1) = v31;
              v21 -= 8;
            }
            while (v13 != v15);
          }
          v13 = *(char **)(a1 + 72);
        }
        *(_QWORD *)(a1 + 72) = v21;
        *(_QWORD *)(a1 + 80) = v14;
        *(_QWORD *)(a1 + 88) = v22;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v13 = v11;
        v14 = v13 + 8;
      }
      *(_QWORD *)(a1 + 80) = v14;
    }
  }
  *(_QWORD *)(a1 + 512) = a1 + 128;
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  if (!*(_BYTE *)(a1 + 116))
  {
LABEL_37:
    v32 = *(unsigned int *)(a1 + 100);
    v33 = (void *)operator new[]();
    v34 = v33;
    if ((int)v32 >= 1)
      bzero(v33, 4 * v32);
    *(_QWORD *)(a1 + 416) = v34;
    v35 = (char **)(a1 + 48);
    v37 = *(char **)(a1 + 56);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v37 < v36)
    {
      *(_QWORD *)v37 = v34;
      v38 = (uint64_t)(v37 + 8);
      goto LABEL_62;
    }
    v39 = *v35;
    v40 = v37 - *v35;
    v41 = v40 >> 3;
    v42 = (v40 >> 3) + 1;
    if (v42 >> 61)
      goto LABEL_263;
    v43 = v36 - (_QWORD)v39;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        goto LABEL_264;
      v45 = operator new(8 * v44);
      v46 = &v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = v34;
      v38 = (uint64_t)(v46 + 1);
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
      {
LABEL_50:
        v49 = (unint64_t)(v48 - 8);
        if (v49 >= 0x58)
        {
          v50 = v37 - &v45[v40];
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v50 >= 0x20)
          {
            v51 = (v49 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v53 = &v37[-v52];
            v46 = (_QWORD *)((char *)v46 - v52);
            v54 = &v45[8 * v41 - 16];
            v55 = v37 - 16;
            v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            v37 = v53;
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_60:
              v37 = *v35;
              *(_QWORD *)(a1 + 48) = v46;
              *(_QWORD *)(a1 + 56) = v38;
              *(_QWORD *)(a1 + 64) = v47;
              if (!v37)
                goto LABEL_62;
              goto LABEL_61;
            }
          }
        }
        else
        {
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        }
        do
        {
          v58 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v46 = v58;
        }
        while (v37 != v39);
        goto LABEL_60;
      }
    }
    else
    {
      v45 = 0;
      v46 = (_QWORD *)(8 * v41);
      v47 = 0;
      *(_QWORD *)(8 * v41) = v34;
      v38 = 8 * v41 + 8;
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
        goto LABEL_50;
    }
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    *(_QWORD *)(a1 + 48) = v46;
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v47;
    if (!v37)
    {
LABEL_62:
      *(_QWORD *)(a1 + 56) = v38;
      if (*(int *)(a1 + 112) >= 1)
      {
        sub_19C100764((uint64_t)v236, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *((_DWORD *)p_vtable + 602), *(unsigned __int8 *)(a1 + 40) + 1);
        sub_19C1007E8((unsigned int *)(a1 + 144), v236);
        sub_19C101AC4(v236);
      }
      v59 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
      v60 = (void *)operator new[]();
      bzero(v60, 4 * v59);
      *(_QWORD *)(a1 + 136) = v60;
      v62 = *(char **)(a1 + 56);
      v61 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v62 < v61)
      {
        *(_QWORD *)v62 = v60;
        v63 = (uint64_t)(v62 + 8);
        goto LABEL_87;
      }
      v64 = *v35;
      v65 = v62 - *v35;
      v66 = v65 >> 3;
      v67 = (v65 >> 3) + 1;
      if (!(v67 >> 61))
      {
        v68 = v61 - (_QWORD)v64;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (!v69)
        {
          v70 = 0;
          v71 = (_QWORD *)(8 * v66);
          v72 = 0;
          *(_QWORD *)(8 * v66) = v60;
          v63 = 8 * v66 + 8;
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
          {
LABEL_75:
            v74 = (unint64_t)(v73 - 8);
            if (v74 >= 0x58)
            {
              v75 = v62 - &v70[v65];
              p_vtable = MLPNDArrayLossLabels.vtable;
              if (v75 >= 0x20)
              {
                v76 = (v74 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v78 = &v62[-v77];
                v71 = (_QWORD *)((char *)v71 - v77);
                v79 = &v70[8 * v66 - 16];
                v80 = v62 - 16;
                v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v82 = *(_OWORD *)v80;
                  *(v79 - 1) = *((_OWORD *)v80 - 1);
                  *v79 = v82;
                  v79 -= 2;
                  v80 -= 32;
                  v81 -= 4;
                }
                while (v81);
                v62 = v78;
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_85:
                  v62 = *v35;
                  *(_QWORD *)(a1 + 48) = v71;
                  *(_QWORD *)(a1 + 56) = v63;
                  *(_QWORD *)(a1 + 64) = v72;
                  if (!v62)
                    goto LABEL_87;
                  goto LABEL_86;
                }
              }
            }
            else
            {
              p_vtable = (void **)(MLPNDArrayLossLabels + 24);
            }
            do
            {
              v83 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v71 = v83;
            }
            while (v62 != v64);
            goto LABEL_85;
          }
LABEL_78:
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 48) = v71;
          *(_QWORD *)(a1 + 56) = v63;
          *(_QWORD *)(a1 + 64) = v72;
          if (!v62)
          {
LABEL_87:
            *(_QWORD *)(a1 + 56) = v63;
            if (*(int *)(a1 + 112) >= 1)
              goto LABEL_6;
            goto LABEL_88;
          }
LABEL_86:
          operator delete(v62);
          goto LABEL_87;
        }
        if (!(v69 >> 61))
        {
          v70 = operator new(8 * v69);
          v71 = &v70[8 * v66];
          v72 = &v70[8 * v69];
          *v71 = v60;
          v63 = (uint64_t)(v71 + 1);
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
            goto LABEL_75;
          goto LABEL_78;
        }
LABEL_264:
        sub_19C07C7FC();
      }
LABEL_263:
      sub_19C07DA0C();
    }
LABEL_61:
    operator delete(v37);
    goto LABEL_62;
  }
LABEL_5:
  if (*(int *)(a1 + 112) >= 1)
  {
LABEL_6:
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    goto LABEL_89;
  }
LABEL_88:
  v9 = 0;
LABEL_89:
  if (*(_BYTE *)(a1 + 42))
    v84 = 2;
  else
    v84 = *((unsigned int *)p_vtable + 602);
  v234 = v84;
  if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
    v85 = 2;
  else
    v85 = *((_DWORD *)p_vtable + 602);
  v86 = v85;
  v87 = *(_QWORD *)(a1 + 264);
  v88 = (*(_QWORD *)(a1 + 272) - v87) >> 3;
  if (v86 <= v88)
  {
    if (v86 < v88)
      *(_QWORD *)(a1 + 272) = v87 + 8 * v86;
  }
  else
  {
    sub_19C098930((void **)(a1 + 264), v86 - v88);
  }
  v89 = *(_QWORD *)(a1 + 384);
  v90 = (*(_QWORD *)(a1 + 392) - v89) >> 3;
  if ((int)v234 <= v90)
  {
    if ((int)v234 < v90)
      *(_QWORD *)(a1 + 392) = v89 + 8 * (int)v234;
  }
  else
  {
    sub_19C098930((void **)(a1 + 384), (int)v234 - v90);
  }
  v91 = *((_DWORD *)p_vtable + 602);
  v92 = *(_QWORD *)(a1 + 288);
  v93 = (*(_QWORD *)(a1 + 296) - v92) >> 3;
  if (v91 <= v93)
  {
    if (v91 < v93)
      *(_QWORD *)(a1 + 296) = v92 + 8 * v91;
  }
  else
  {
    sub_19C098930((void **)(a1 + 288), v91 - v93);
    v91 = *((_DWORD *)p_vtable + 602);
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v94 = v91;
    v95 = *(_QWORD *)(a1 + 312);
    v96 = (*(_QWORD *)(a1 + 320) - v95) >> 3;
    if (v91 <= v96)
    {
      if (v91 < v96)
        *(_QWORD *)(a1 + 320) = v95 + 8 * v91;
    }
    else
    {
      sub_19C098930((void **)(a1 + 312), v91 - v96);
      v91 = *((_DWORD *)p_vtable + 602);
      v94 = v91;
    }
    v97 = *(_QWORD *)(a1 + 336);
    v98 = (*(_QWORD *)(a1 + 344) - v97) >> 3;
    if (v94 <= v98)
    {
      if (v94 < v98)
        *(_QWORD *)(a1 + 344) = v97 + 8 * v94;
    }
    else
    {
      sub_19C098930((void **)(a1 + 336), v94 - v98);
      v91 = *((_DWORD *)p_vtable + 602);
    }
  }
  v99 = v91;
  v101 = *(_QWORD *)(a1 + 360);
  v100 = *(_QWORD *)(a1 + 368);
  v102 = 0xAAAAAAAAAAAAAAABLL * ((v100 - v101) >> 3);
  if (v99 <= v102)
  {
    if (v99 < v102)
    {
      v103 = v101 + 24 * (int)v99;
      if (v100 != v103)
      {
        v104 = *(_QWORD *)(a1 + 368);
        do
        {
          v106 = *(void **)(v104 - 24);
          v104 -= 24;
          v105 = v106;
          if (v106)
          {
            *(_QWORD *)(v100 - 16) = v105;
            operator delete(v105);
          }
          v100 = v104;
        }
        while (v104 != v103);
      }
      *(_QWORD *)(a1 + 368) = v103;
    }
  }
  else
  {
    sub_19C167E70(a1 + 360, v99 - v102);
  }
  v232 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v86 >= 1)
  {
    v107 = 0;
    v233 = (char **)(a1 + 48);
    v108 = v86;
    while (1)
    {
      v110 = *(unsigned int *)(a1 + 104);
      v111 = (void *)operator new[]();
      v112 = v111;
      if ((int)v110 >= 1)
        bzero(v111, 4 * v110);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v107) = v112;
      v114 = *(char **)(a1 + 56);
      v113 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v114 >= v113)
        break;
      *(_QWORD *)v114 = v112;
      v109 = (uint64_t)(v114 + 8);
LABEL_128:
      *(_QWORD *)(a1 + 56) = v109;
      if (++v107 == v108)
        goto LABEL_152;
    }
    v115 = *v233;
    v116 = v114 - *v233;
    v117 = v116 >> 3;
    v118 = (v116 >> 3) + 1;
    if (v118 >> 61)
      sub_19C07DA0C();
    v119 = v113 - (_QWORD)v115;
    if (v119 >> 2 > v118)
      v118 = v119 >> 2;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    if (v120)
    {
      if (v120 >> 61)
        goto LABEL_264;
      v121 = operator new(8 * v120);
      v122 = &v121[8 * v117];
      *v122 = v112;
      v109 = (uint64_t)(v122 + 1);
      if (v114 == v115)
        goto LABEL_150;
    }
    else
    {
      v121 = 0;
      v122 = (_QWORD *)(8 * v117);
      *(_QWORD *)(8 * v117) = v112;
      v109 = 8 * v117 + 8;
      if (v114 == v115)
      {
LABEL_150:
        *(_QWORD *)(a1 + 48) = v122;
        *(_QWORD *)(a1 + 56) = v109;
        *(_QWORD *)(a1 + 64) = &v121[8 * v120];
        if (v114)
          operator delete(v114);
        goto LABEL_128;
      }
    }
    v123 = v114 - 8 - v115;
    if (v123 < 0x58)
      goto LABEL_270;
    if ((unint64_t)(v114 - &v121[v116]) < 0x20)
      goto LABEL_270;
    v124 = (v123 >> 3) + 1;
    v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    v126 = &v114[-v125];
    v122 = (_QWORD *)((char *)v122 - v125);
    v127 = &v121[8 * v117 - 16];
    v128 = (__int128 *)(v114 - 16);
    v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v130 = *v128;
      *(v127 - 1) = *(v128 - 1);
      *v127 = v130;
      v127 -= 2;
      v128 -= 2;
      v129 -= 4;
    }
    while (v129);
    v114 = v126;
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_270:
      do
      {
        v131 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *--v122 = v131;
      }
      while (v114 != v115);
    }
    v114 = *v233;
    goto LABEL_150;
  }
LABEL_152:
  if ((int)v234 >= 1)
  {
    v132 = 0;
    v133 = (char **)(a1 + 48);
    while (1)
    {
      v135 = *(unsigned int *)(a1 + 100);
      v136 = (void *)operator new[]();
      v137 = v136;
      if ((int)v135 >= 1)
        bzero(v136, 4 * v135);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v132) = v137;
      v139 = *(char **)(a1 + 56);
      v138 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v139 >= v138)
        break;
      *(_QWORD *)v139 = v137;
      v134 = (uint64_t)(v139 + 8);
LABEL_155:
      *(_QWORD *)(a1 + 56) = v134;
      if (++v132 == v234)
        goto LABEL_179;
    }
    v140 = *v133;
    v141 = v139 - *v133;
    v142 = v141 >> 3;
    v143 = (v141 >> 3) + 1;
    if (v143 >> 61)
      goto LABEL_263;
    v144 = v138 - (_QWORD)v140;
    if (v144 >> 2 > v143)
      v143 = v144 >> 2;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
      v145 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v145 = v143;
    if (v145)
    {
      if (v145 >> 61)
        goto LABEL_264;
      v146 = operator new(8 * v145);
      v147 = &v146[8 * v142];
      *v147 = v137;
      v134 = (uint64_t)(v147 + 1);
      if (v139 == v140)
        goto LABEL_177;
    }
    else
    {
      v146 = 0;
      v147 = (_QWORD *)(8 * v142);
      *(_QWORD *)(8 * v142) = v137;
      v134 = 8 * v142 + 8;
      if (v139 == v140)
      {
LABEL_177:
        *(_QWORD *)(a1 + 48) = v147;
        *(_QWORD *)(a1 + 56) = v134;
        *(_QWORD *)(a1 + 64) = &v146[8 * v145];
        if (v139)
          operator delete(v139);
        goto LABEL_155;
      }
    }
    v148 = v139 - 8 - v140;
    if (v148 < 0x58)
      goto LABEL_271;
    if ((unint64_t)(v139 - &v146[v141]) < 0x20)
      goto LABEL_271;
    v149 = (v148 >> 3) + 1;
    v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
    v151 = &v139[-v150];
    v147 = (_QWORD *)((char *)v147 - v150);
    v152 = &v146[8 * v142 - 16];
    v153 = (__int128 *)(v139 - 16);
    v154 = v149 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v155 = *v153;
      *(v152 - 1) = *(v153 - 1);
      *v152 = v155;
      v152 -= 2;
      v153 -= 2;
      v154 -= 4;
    }
    while (v154);
    v139 = v151;
    if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_271:
      do
      {
        v156 = *((_QWORD *)v139 - 1);
        v139 -= 8;
        *--v147 = v156;
      }
      while (v139 != v140);
    }
    v139 = *v133;
    goto LABEL_177;
  }
LABEL_179:
  v157 = MLPNDArrayLossLabels.vtable;
  if (dword_1EE418968 >= 1)
  {
    v158 = 0;
    v159 = (char **)(a1 + 48);
    v160 = 1;
    if (v232)
      v160 = 2;
    v235 = v160;
    while (1)
    {
      if (*(_BYTE *)(a1 + 116))
        goto LABEL_235;
      v161 = *(unsigned int *)(a1 + 104);
      v162 = (void *)operator new[]();
      v163 = v162;
      if ((int)v161 >= 1)
        bzero(v162, 4 * v161);
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v158) = v163;
      v165 = *(char **)(a1 + 56);
      v164 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v165 < v164)
      {
        *(_QWORD *)v165 = v163;
        v166 = (uint64_t)(v165 + 8);
        goto LABEL_210;
      }
      v167 = *v159;
      v168 = v165 - *v159;
      v169 = v168 >> 3;
      v170 = (v168 >> 3) + 1;
      if (v170 >> 61)
        goto LABEL_263;
      v171 = v164 - (_QWORD)v167;
      if (v171 >> 2 > v170)
        v170 = v171 >> 2;
      v172 = (unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v170;
      if (v172)
        break;
      v173 = 0;
      v174 = (_QWORD *)(8 * v169);
      *(_QWORD *)(8 * v169) = v163;
      v166 = 8 * v169 + 8;
      if (v165 != v167)
        goto LABEL_201;
LABEL_208:
      *(_QWORD *)(a1 + 48) = v174;
      *(_QWORD *)(a1 + 56) = v166;
      *(_QWORD *)(a1 + 64) = &v173[8 * v172];
      v157 = (void **)(MLPNDArrayLossLabels + 24);
      if (v165)
        operator delete(v165);
LABEL_210:
      *(_QWORD *)(a1 + 56) = v166;
      v184 = *(unsigned int *)(a1 + 100);
      v185 = (void *)operator new[]();
      v186 = v185;
      if ((int)v184 >= 1)
        bzero(v185, 4 * v184);
      *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v158) = v186;
      v188 = *(char **)(a1 + 56);
      v187 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v188 >= v187)
      {
        v190 = *v159;
        v191 = v188 - *v159;
        v192 = v191 >> 3;
        v193 = (v191 >> 3) + 1;
        if (v193 >> 61)
          goto LABEL_263;
        v194 = v187 - (_QWORD)v190;
        if (v194 >> 2 > v193)
          v193 = v194 >> 2;
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
          v195 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v195 = v193;
        if (v195)
        {
          if (v195 >> 61)
            goto LABEL_264;
          v196 = operator new(8 * v195);
          v197 = &v196[8 * v192];
          *v197 = v186;
          v189 = (uint64_t)(v197 + 1);
          if (v188 == v190)
            goto LABEL_232;
LABEL_225:
          v198 = v188 - 8 - v190;
          if (v198 < 0x58)
            goto LABEL_272;
          if ((unint64_t)(v188 - &v196[v191]) < 0x20)
            goto LABEL_272;
          v199 = (v198 >> 3) + 1;
          v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
          v201 = &v188[-v200];
          v197 = (_QWORD *)((char *)v197 - v200);
          v202 = &v196[8 * v192 - 16];
          v203 = v188 - 16;
          v204 = v199 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v205 = *(_OWORD *)v203;
            *(v202 - 1) = *((_OWORD *)v203 - 1);
            *v202 = v205;
            v202 -= 2;
            v203 -= 32;
            v204 -= 4;
          }
          while (v204);
          v188 = v201;
          if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_272:
            do
            {
              v206 = *((_QWORD *)v188 - 1);
              v188 -= 8;
              *--v197 = v206;
            }
            while (v188 != v190);
          }
          v188 = *v159;
        }
        else
        {
          v196 = 0;
          v197 = (_QWORD *)(8 * v192);
          *(_QWORD *)(8 * v192) = v186;
          v189 = 8 * v192 + 8;
          if (v188 != v190)
            goto LABEL_225;
        }
LABEL_232:
        *(_QWORD *)(a1 + 48) = v197;
        *(_QWORD *)(a1 + 56) = v189;
        *(_QWORD *)(a1 + 64) = &v196[8 * v195];
        v157 = (void **)(MLPNDArrayLossLabels + 24);
        if (v188)
          operator delete(v188);
        goto LABEL_234;
      }
      *(_QWORD *)v188 = v186;
      v189 = (uint64_t)(v188 + 8);
LABEL_234:
      *(_QWORD *)(a1 + 56) = v189;
LABEL_235:
      v207 = *(unsigned int *)(a1 + 100);
      v208 = (void *)operator new[]();
      v209 = v208;
      if ((int)v207 >= 1)
        bzero(v208, 4 * v207);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v158) = v209;
      v211 = *(char **)(a1 + 56);
      v210 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v211 >= v210)
      {
        v213 = *v159;
        v214 = v211 - *v159;
        v215 = v214 >> 3;
        v216 = (v214 >> 3) + 1;
        if (v216 >> 61)
          goto LABEL_263;
        v217 = v210 - (_QWORD)v213;
        if (v217 >> 2 > v216)
          v216 = v217 >> 2;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v216;
        if (v218)
        {
          if (v218 >> 61)
            goto LABEL_264;
          v219 = operator new(8 * v218);
          v220 = &v219[8 * v215];
          *v220 = v209;
          v212 = (uint64_t)(v220 + 1);
          if (v211 == v213)
            goto LABEL_257;
LABEL_250:
          v221 = v211 - 8 - v213;
          if (v221 < 0x58)
            goto LABEL_273;
          if ((unint64_t)(v211 - &v219[v214]) < 0x20)
            goto LABEL_273;
          v222 = (v221 >> 3) + 1;
          v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
          v224 = &v211[-v223];
          v220 = (_QWORD *)((char *)v220 - v223);
          v225 = &v219[8 * v215 - 16];
          v226 = v211 - 16;
          v227 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v228 = *(_OWORD *)v226;
            *(v225 - 1) = *((_OWORD *)v226 - 1);
            *v225 = v228;
            v225 -= 2;
            v226 -= 32;
            v227 -= 4;
          }
          while (v227);
          v211 = v224;
          if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_273:
            do
            {
              v229 = *((_QWORD *)v211 - 1);
              v211 -= 8;
              *--v220 = v229;
            }
            while (v211 != v213);
          }
          v211 = *v159;
        }
        else
        {
          v219 = 0;
          v220 = (_QWORD *)(8 * v215);
          *(_QWORD *)(8 * v215) = v209;
          v212 = 8 * v215 + 8;
          if (v211 != v213)
            goto LABEL_250;
        }
LABEL_257:
        *(_QWORD *)(a1 + 48) = v220;
        *(_QWORD *)(a1 + 56) = v212;
        *(_QWORD *)(a1 + 64) = &v219[8 * v218];
        v157 = MLPNDArrayLossLabels.vtable;
        if (v211)
          operator delete(v211);
        goto LABEL_259;
      }
      *(_QWORD *)v211 = v209;
      v212 = (uint64_t)(v211 + 8);
LABEL_259:
      *(_QWORD *)(a1 + 56) = v212;
      v230 = (_QWORD *)(*(_QWORD *)(a1 + 360) + 24 * v158);
      v231 = (uint64_t)(v230[1] - *v230) >> 2;
      if (v235 > v231)
      {
        sub_19C101928((uint64_t)v230, v235 - v231);
      }
      else if (v235 < v231)
      {
        v230[1] = *v230 + 4 * v235;
      }
      if (++v158 >= *((int *)v157 + 602))
        return;
    }
    if (v172 >> 61)
      goto LABEL_264;
    v173 = operator new(8 * v172);
    v174 = &v173[8 * v169];
    *v174 = v163;
    v166 = (uint64_t)(v174 + 1);
    if (v165 == v167)
      goto LABEL_208;
LABEL_201:
    v175 = v165 - 8 - v167;
    if (v175 < 0x58)
      goto LABEL_274;
    if ((unint64_t)(v165 - &v173[v168]) < 0x20)
      goto LABEL_274;
    v176 = (v175 >> 3) + 1;
    v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    v178 = &v165[-v177];
    v174 = (_QWORD *)((char *)v174 - v177);
    v179 = &v173[8 * v169 - 16];
    v180 = v165 - 16;
    v181 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v182 = *(_OWORD *)v180;
      *(v179 - 1) = *((_OWORD *)v180 - 1);
      *v179 = v182;
      v179 -= 2;
      v180 -= 32;
      v181 -= 4;
    }
    while (v181);
    v165 = v178;
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_274:
      do
      {
        v183 = *((_QWORD *)v165 - 1);
        v165 -= 8;
        *--v174 = v183;
      }
      while (v165 != v167);
    }
    v165 = *v159;
    goto LABEL_208;
  }
}

void sub_19C1328F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C132908(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *a1 = &unk_1E3D20898;
  sub_19C1307CC((uint64_t)a1);
  v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19C22CB78((uint64_t)(a1 + 54));
  v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  v4 = a1[45];
  if (v4)
  {
    v5 = a1[46];
    v6 = (void *)a1[45];
    if (v5 != v4)
    {
      v7 = a1[46];
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19C101AC4(a1 + 18);
  v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1E3D1E2D8;
  v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19C132A48(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  void *__p;
  __int128 v17;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1E488;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19C22CB44(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a9;
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 60) = a6;
  *(_BYTE *)(a1 + 61) = a7;
  __p = operator new(0x20uLL);
  v17 = xmmword_19C2775A0;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  return a1;
}

void sub_19C132B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a15 < 0)
    operator delete(__p);
  sub_19C22CB78(v16);
  v19 = (void *)v15[34];
  if (v19)
  {
    v15[35] = v19;
    operator delete(v19);
    v20 = *v17;
    if (!*v17)
    {
LABEL_5:
      v21 = (void *)v15[23];
      if (!v21)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *v17;
    if (!*v17)
      goto LABEL_5;
  }
  v15[32] = v20;
  operator delete(v20);
  v21 = (void *)v15[23];
  if (!v21)
  {
LABEL_6:
    v22 = (void *)v15[20];
    if (!v22)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v21;
  operator delete(v21);
  v22 = (void *)v15[20];
  if (!v22)
  {
LABEL_7:
    v23 = (void *)v15[17];
    if (!v23)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v22;
  operator delete(v22);
  v23 = (void *)v15[17];
  if (!v23)
  {
LABEL_8:
    v24 = (void *)v15[14];
    if (!v24)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v23;
  operator delete(v23);
  v24 = (void *)v15[14];
  if (!v24)
  {
LABEL_9:
    v25 = (void *)v15[11];
    if (!v25)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v24;
  operator delete(v24);
  v25 = (void *)v15[11];
  if (!v25)
  {
LABEL_10:
    *v15 = &unk_1E3D1E2D8;
    v26 = (void *)v15[1];
    if (!v26)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v25;
  operator delete(v25);
  *v15 = &unk_1E3D1E2D8;
  v26 = (void *)v15[1];
  if (!v26)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v26;
  operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_19C132CA4()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C132CB4(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19C132CBC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19C132CC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C132CD0(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19C132CD8()
{
  return 0;
}

_BYTE *sub_19C132CE0(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 376);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 61);
  v18 = sub_19C2210B4();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

void sub_19C132DF4(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  unint64_t *v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 52);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 208));
  v11 = *(unint64_t **)(a1 + 376);
  v12 = sub_19C2210B4();
  sub_19C12CAAC(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

_QWORD *sub_19C132E9C(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
      v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
      if ((int)v7 < 1)
        return result;
      goto LABEL_7;
    }
  }
  result = 0;
  v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 < 1)
    return result;
LABEL_7:
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 376);
  do
  {
    *(_BYTE *)(*v9 + v8) = *(_BYTE *)(result[8] + v8) - *(_BYTE *)(v5[8] + v8);
    ++v8;
  }
  while (v7 != v8);
  return result;
}

void *sub_19C132F6C(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
  return result;
}

_QWORD *sub_19C132FD4(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
    v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1)
      return result;
  }
  else
  {
    result = 0;
    v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1)
      return result;
  }
  v5 = 0;
  v6 = *(_QWORD **)(a1 + 376);
  do
  {
    *(_BYTE *)(*v6 + v5) += *(_BYTE *)(result[8] + v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void sub_19C133074(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 48);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 48);
  v9 = a2[1];
  v8 = (unint64_t)a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = (v9 - *a2) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_19C07DA0C();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_19C07C7FC();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = *a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
}

void sub_19C1331E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C1331FC(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19C13325C(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19C133290(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19C1332DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 376);
  v5 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C1333E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t sub_19C133400(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C13340C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C133414(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277570;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C1334B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1334CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;

  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19C13357C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19C13358C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C133598(uint64_t result, float a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;

  v3 = *(unsigned int *)(result + 56);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = truncf(a2);
    do
    {
      v6 = *(_QWORD *)(result + 64);
      LOBYTE(a3) = *(_BYTE *)(v6 + v4);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 80) + 4 * v4) * v5);
      *(_BYTE *)(v6 + v4++) = (int)*(float *)&a3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19C1335E4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  char v8;
  float32x4_t v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  NSObject *global_queue;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  _QWORD v26[7];
  int v27;

  v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    v10 = a5 - 1;
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v12 = a5 - 1 - v10;
      else
        v12 = v10;
      v13 = 8 * v12;
      sub_19C10B530((void **)(a1 + 216), (float32x4_t **)(*(_QWORD *)(a1 + 184) + v13), (const void **)(*a4 + v13), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
      sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 136) + v13), (_QWORD *)(a1 + 216), *(_QWORD **)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
      v14 = *(unsigned int *)(a1 + 52);
      if ((int)v14 >= 1)
      {
        v15 = *(float **)(*(_QWORD *)(a1 + 136) + 8 * v12);
        do
        {
          v9.i32[0] = -1035468800;
          if (*v15 < -50.0 || (v9.i32[0] = 1112014848, *v15 > 50.0))
            *v15 = v9.f32[0];
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
    while (v10-- > 0);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v17 = 0;
    v18 = MEMORY[0x1E0C809B0];
    do
    {
      --a5;
      if (*(_BYTE *)(a1 + 232))
        v19 = v17;
      else
        v19 = a5;
      v20 = 8 * v19;
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88) + v20;
      v23 = *a4 + v20;
      v24 = *(_DWORD *)(a1 + 52);
      v25 = *(int *)(a1 + 48);
      v26[0] = v18;
      v26[1] = 0x40000000;
      v26[2] = sub_19C103680;
      v26[3] = &unk_1E3D25490;
      v27 = v24;
      v26[4] = v21;
      v26[5] = v23;
      v26[6] = v22;
      dispatch_apply(v25, global_queue, v26);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v19) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      ++v17;
    }
    while (a5 > 0);
  }
}

uint64_t sub_19C1337E8(uint64_t result, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  unsigned int v9;
  signed int v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int *v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  _BOOL4 v46;

  v5 = *(_QWORD *)(result + 240);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 20) || *(_DWORD *)(v5 + 40) != 1)
    {
      v6 = 0;
      v7 = *(unsigned __int8 *)(result + 232);
      if (!a5)
        goto LABEL_10;
    }
    else
    {
      v6 = *(_DWORD *)(v5 + 44) == 1;
      v7 = *(unsigned __int8 *)(result + 232);
      if (!a5)
        goto LABEL_10;
    }
  }
  else
  {
    v6 = 1;
    v7 = *(unsigned __int8 *)(result + 232);
    if (!a5)
      goto LABEL_10;
  }
  if (v7)
    sub_19C2210D4(34);
LABEL_10:
  v8 = a4 & 0xFFFFFF;
  v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    v46 = v6;
    if (v7)
      v11 = v8 + ~v9;
    else
      v11 = a5 != 0;
    v12 = v11 < v8 - 1;
    if (v7)
      v13 = 1;
    else
      v13 = -1;
    if (v7)
      v14 = v12;
    else
      v14 = a5 != 0;
    v15 = 8 * v11;
    v16 = result;
    bzero(*(void **)(*(_QWORD *)(result + 88) + v15), 4 * *(int *)(result + 52));
    v17 = (uint64_t *)(*(_QWORD *)(v16 + 88) + v15);
    v18 = *(unsigned int *)(v16 + 44);
    if ((int)v18 >= 1)
    {
      v19 = 0;
      v20 = *(_QWORD *)(*a2 + 8 * v11);
      v21 = *v17;
      if (v18 < 8)
        goto LABEL_28;
      if ((unint64_t)(v21 - v20) < 0x20)
        goto LABEL_28;
      v19 = v18 & 0x7FFFFFF8;
      v22 = (__int128 *)(v20 + 16);
      v23 = (_OWORD *)(v21 + 16);
      v24 = v18 & 0xFFFFFFF8;
      do
      {
        v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_28:
        v26 = v18 - v19;
        v27 = 4 * v19;
        v28 = (_DWORD *)(v21 + 4 * v19);
        v29 = (int *)(v20 + v27);
        do
        {
          v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    v31 = v11 + v13;
    if (v46 && v14)
    {
      v32 = *(unsigned int *)(v16 + 48);
      if ((int)v32 >= 1)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v16 + 112) + 8 * v31);
        v34 = *v17;
        if (v32 < 8 || (v35 = 4 * (int)v18 + v34, (unint64_t)(v35 - v33) < 0x20))
        {
          v36 = 0;
LABEL_35:
          v37 = v32 - v36;
          v38 = (_DWORD *)(v34 + 4 * (v36 + (int)v18));
          v39 = (int *)(v33 + 4 * v36);
          do
          {
            v40 = *v39++;
            *v38++ = v40;
            --v37;
          }
          while (v37);
          goto LABEL_37;
        }
        v36 = v32 & 0x7FFFFFF8;
        v42 = (__int128 *)(v33 + 16);
        v43 = (_OWORD *)(v35 + 16);
        v44 = v32 & 0xFFFFFFF8;
        do
        {
          v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *v43 = v45;
          v42 += 2;
          v43 += 2;
          v44 -= 8;
        }
        while (v44);
        if (v36 != v32)
          goto LABEL_35;
      }
    }
LABEL_37:
    v41 = *(int *)(v16 + 52);
    if (*(_BYTE *)(v16 + 40))
      *(_DWORD *)(*v17 + 4 * v41 - 4) = 1065353216;
    sub_19C12CFAC((float **)(v16 + 216), v17, *(_QWORD **)(v16 + 376), *(_DWORD *)(v16 + 48), v41, 0.0);
    if (!v46 && v14)
      sub_19C12CFAC((float **)(v16 + 216), (_QWORD *)(*(_QWORD *)(v16 + 112) + 8 * v31), *(_QWORD **)(v16 + 384), *(_DWORD *)(v16 + 48), *(_DWORD *)(v16 + 48), 1.0);
    sub_19C2210D4(76);
  }
  return result;
}

char *sub_19C133AA0(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19C133B00(uint64_t a1, void *lpsrc, float a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 368))
    sub_19C2210D4(1);
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE38, 0);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  sub_19C22CBE0(a1 + 296);
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = truncf(a3);
    do
    {
      v11 = *(_QWORD *)(a1 + 64);
      v7.i8[0] = *(_BYTE *)(v11 + v9);
      v7 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v7)).u64[0];
      *(float *)v7.i32 = (float)v7.i32[0] + (float)(*(float *)(v6[10] + 4 * v9) * v10);
      *(_BYTE *)(v11 + v9++) = (int)*(float *)v7.i32;
    }
    while (v8 != v9);
  }
  return sub_19C22CBE8(a1 + 296);
}

uint64_t sub_19C133BC4(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 112);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19C133D44(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 48);
  v4 = *(float ***)(a1 + 112);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C133E84(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C134DB0(a1);
  operator delete(v1);
}

uint64_t sub_19C133E98(uint64_t a1)
{
  return a1 + 160;
}

float sub_19C133EA0(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19C133EB0(uint64_t a1, float a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  char **v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _OWORD *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  void *v212;

  v4 = *(_QWORD *)(a1 + 240);
  if (!v4)
  {
    v5 = 1;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
LABEL_7:
    v6 = 2;
    v7 = 2;
    v8 = *(unsigned int *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)(a1 + 52) = v9;
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v4 + 20) || *(_DWORD *)(v4 + 40) != 1)
  {
    v5 = 0;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
    goto LABEL_7;
  }
  v5 = *(_DWORD *)(v4 + 44) == 1;
  if (*(_BYTE *)(a1 + 42))
    goto LABEL_7;
LABEL_24:
  v6 = 2 * (*(_BYTE *)(a1 + 232) != 0);
  v7 = 2 * *(unsigned __int8 *)(a1 + 232);
  v8 = *(unsigned int *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v9;
  if (v5)
  {
LABEL_8:
    v9 += v8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  *(_DWORD *)(a1 + 56) = v8 * v9;
  v10 = (void *)operator new[]();
  v11 = v10;
  if ((int)v8 >= 1)
    bzero(v10, 4 * v8);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = (char **)(a1 + 248);
  v14 = *(char **)(a1 + 256);
  v13 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = v11;
    v15 = (uint64_t)(v14 + 8);
    goto LABEL_36;
  }
  v16 = *v12;
  v17 = v14 - *v12;
  v18 = v17 >> 3;
  v19 = (v17 >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_236;
  v20 = v13 - (_QWORD)v16;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      goto LABEL_237;
    v22 = operator new(8 * v21);
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v11;
    v15 = (uint64_t)(v23 + 1);
    v25 = (char *)(v14 - v16);
    if (v14 == v16)
      goto LABEL_34;
    goto LABEL_27;
  }
  v22 = 0;
  v23 = (_QWORD *)(8 * v18);
  v24 = 0;
  *(_QWORD *)(8 * v18) = v11;
  v15 = 8 * v18 + 8;
  v25 = (char *)(v14 - v16);
  if (v14 != v16)
  {
LABEL_27:
    v26 = (unint64_t)(v25 - 8);
    if (v26 < 0x58)
      goto LABEL_241;
    if ((unint64_t)(v14 - v22 - v17) < 0x20)
      goto LABEL_241;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v14[-v28];
    v23 = (_QWORD *)((char *)v23 - v28);
    v30 = &v22[8 * v18 - 16];
    v31 = v14 - 16;
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    v14 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_241:
      do
      {
        v34 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v23 = v34;
      }
      while (v14 != v16);
    }
    v14 = *v12;
  }
LABEL_34:
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 256) = v15;
  *(_QWORD *)(a1 + 264) = v24;
  if (v14)
    operator delete(v14);
LABEL_36:
  *(_QWORD *)(a1 + 256) = v15;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v40 = *(_QWORD *)(a1 + 240);
    if (v40 && (v41 = *(_DWORD *)(v40 + 40), v41 >= 1))
    {
      v42 = v40 + 8 * v6;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v42 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v41 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v42 + 120);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v40 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v40 + 8 * v7 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      v53 = *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 48);
      v212 = (void *)operator new[]();
      bzero(v212, v53);
      sub_19C1023F0(&v212, v53, a2);
      v54 = v212;
      *(_QWORD *)(a1 + 64) = v212;
      v56 = *(char **)(a1 + 280);
      v55 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v56 >= v55)
      {
        v195 = *(char **)(a1 + 272);
        v196 = (v56 - v195) >> 3;
        v197 = v196 + 1;
        if ((unint64_t)(v196 + 1) >> 61)
          sub_19C07DA0C();
        v198 = v55 - (_QWORD)v195;
        if (v198 >> 2 > v197)
          v197 = v198 >> 2;
        if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v197;
        if (v199)
        {
          if (v199 >> 61)
            goto LABEL_237;
          v200 = (char *)operator new(8 * v199);
        }
        else
        {
          v200 = 0;
        }
        v201 = &v200[8 * v196];
        v202 = &v200[8 * v199];
        *(_QWORD *)v201 = v54;
        v57 = v201 + 8;
        if (v56 != v195)
        {
          v203 = v56 - v195 - 8;
          if (v203 < 0x58)
            goto LABEL_242;
          if ((unint64_t)(v195 - v200) < 0x20)
            goto LABEL_242;
          v204 = (v203 >> 3) + 1;
          v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
          v206 = &v56[-v205];
          v201 -= v205;
          v207 = &v200[8 * v196 - 16];
          v208 = (__int128 *)(v56 - 16);
          v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v210 = *v208;
            *((_OWORD *)v207 - 1) = *(v208 - 1);
            *(_OWORD *)v207 = v210;
            v207 -= 32;
            v208 -= 2;
            v209 -= 4;
          }
          while (v209);
          v56 = v206;
          if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_242:
            do
            {
              v211 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v201 - 1) = v211;
              v201 -= 8;
            }
            while (v56 != v195);
          }
          v56 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v201;
        *(_QWORD *)(a1 + 280) = v57;
        *(_QWORD *)(a1 + 288) = v202;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v56 = v54;
        v57 = v56 + 8;
      }
      *(_QWORD *)(a1 + 280) = v57;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (*(_BYTE *)(a1 + 60))
    goto LABEL_71;
  v35 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
  v36 = (void *)operator new[]();
  bzero(v36, 4 * v35);
  *(_QWORD *)(a1 + 80) = v36;
  v38 = *(char **)(a1 + 256);
  v37 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v38 >= v37)
  {
    v43 = *v12;
    v44 = v38 - *v12;
    v45 = v44 >> 3;
    v46 = (v44 >> 3) + 1;
    if (!(v46 >> 61))
    {
      v47 = v37 - (_QWORD)v43;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (!v48)
      {
        v49 = 0;
        v50 = (_QWORD *)(8 * v45);
        v51 = 0;
        *(_QWORD *)(8 * v45) = v36;
        v39 = 8 * v45 + 8;
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
          goto LABEL_68;
        goto LABEL_61;
      }
      if (!(v48 >> 61))
      {
        v49 = operator new(8 * v48);
        v50 = &v49[8 * v45];
        v51 = &v49[8 * v48];
        *v50 = v36;
        v39 = (uint64_t)(v50 + 1);
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
        {
LABEL_68:
          *(_QWORD *)(a1 + 248) = v50;
          *(_QWORD *)(a1 + 256) = v39;
          *(_QWORD *)(a1 + 264) = v51;
          if (v38)
            operator delete(v38);
          goto LABEL_70;
        }
LABEL_61:
        v58 = (unint64_t)(v52 - 8);
        if (v58 < 0x58)
          goto LABEL_243;
        if ((unint64_t)(v38 - v49 - v44) < 0x20)
          goto LABEL_243;
        v59 = (v58 >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v38[-v60];
        v50 = (_QWORD *)((char *)v50 - v60);
        v62 = &v49[8 * v45 - 16];
        v63 = v38 - 16;
        v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(_OWORD *)v63;
          *(v62 - 1) = *((_OWORD *)v63 - 1);
          *v62 = v65;
          v62 -= 2;
          v63 -= 32;
          v64 -= 4;
        }
        while (v64);
        v38 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_243:
          do
          {
            v66 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v50 = v66;
          }
          while (v38 != v43);
        }
        v38 = *v12;
        goto LABEL_68;
      }
LABEL_237:
      sub_19C07C7FC();
    }
LABEL_236:
    sub_19C07DA0C();
  }
  *(_QWORD *)v38 = v36;
  v39 = (uint64_t)(v38 + 8);
LABEL_70:
  *(_QWORD *)(a1 + 256) = v39;
LABEL_71:
  v67 = *(_QWORD *)(a1 + 88);
  v68 = dword_1EE418968;
  v69 = dword_1EE418968;
  v70 = (*(_QWORD *)(a1 + 96) - v67) >> 3;
  if (dword_1EE418968 <= v70)
  {
    if (dword_1EE418968 < v70)
      *(_QWORD *)(a1 + 96) = v67 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v70);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v71 = *(_QWORD *)(a1 + 112);
  v72 = (*(_QWORD *)(a1 + 120) - v71) >> 3;
  if (v69 <= v72)
  {
    if (v69 < v72)
      *(_QWORD *)(a1 + 120) = v71 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v69 - v72);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v73 = *(_QWORD *)(a1 + 136);
  v74 = (*(_QWORD *)(a1 + 144) - v73) >> 3;
  if (v69 <= v74)
  {
    if (v69 < v74)
      *(_QWORD *)(a1 + 144) = v73 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), v69 - v74);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v75 = *(_QWORD *)(a1 + 160);
  v76 = (*(_QWORD *)(a1 + 168) - v75) >> 3;
  if (v69 <= v76)
  {
    if (v69 < v76)
      *(_QWORD *)(a1 + 168) = v75 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v69 - v76);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v77 = *(_QWORD *)(a1 + 184);
  v78 = (*(_QWORD *)(a1 + 192) - v77) >> 3;
  if (v69 <= v78)
  {
    if (v69 < v78)
      *(_QWORD *)(a1 + 192) = v77 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), v69 - v78);
    v68 = dword_1EE418968;
  }
  if (v68 >= 1)
  {
    v79 = 0;
    while (1)
    {
      v81 = *(unsigned int *)(a1 + 52);
      v82 = (void *)operator new[]();
      v83 = v82;
      if ((int)v81 >= 1)
        bzero(v82, 4 * v81);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v79) = v83;
      v85 = *(char **)(a1 + 256);
      v84 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v85 < v84)
      {
        *(_QWORD *)v85 = v83;
        v86 = (uint64_t)(v85 + 8);
        goto LABEL_119;
      }
      v87 = *v12;
      v88 = v85 - *v12;
      v89 = v88 >> 3;
      v90 = (v88 >> 3) + 1;
      if (v90 >> 61)
        goto LABEL_236;
      v91 = v84 - (_QWORD)v87;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      v92 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v90;
      if (v92)
        break;
      v93 = 0;
      v94 = (_QWORD *)(8 * v89);
      *(_QWORD *)(8 * v89) = v83;
      v86 = 8 * v89 + 8;
      if (v85 != v87)
        goto LABEL_110;
LABEL_117:
      *(_QWORD *)(a1 + 248) = v94;
      *(_QWORD *)(a1 + 256) = v86;
      *(_QWORD *)(a1 + 264) = &v93[8 * v92];
      if (v85)
        operator delete(v85);
LABEL_119:
      *(_QWORD *)(a1 + 256) = v86;
      v104 = *(unsigned int *)(a1 + 52);
      v105 = (void *)operator new[]();
      v106 = v105;
      if ((int)v104 >= 1)
        bzero(v105, 4 * v104);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v79) = v106;
      v108 = *(char **)(a1 + 256);
      v107 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v108 < v107)
      {
        *(_QWORD *)v108 = v106;
        v109 = (uint64_t)(v108 + 8);
        goto LABEL_143;
      }
      v110 = *v12;
      v111 = v108 - *v12;
      v112 = v111 >> 3;
      v113 = (v111 >> 3) + 1;
      if (v113 >> 61)
        goto LABEL_236;
      v114 = v107 - (_QWORD)v110;
      if (v114 >> 2 > v113)
        v113 = v114 >> 2;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
        v115 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
      {
        if (v115 >> 61)
          goto LABEL_237;
        v116 = operator new(8 * v115);
        v117 = &v116[8 * v112];
        *v117 = v106;
        v109 = (uint64_t)(v117 + 1);
        if (v108 == v110)
          goto LABEL_141;
LABEL_134:
        v118 = v108 - 8 - v110;
        if (v118 < 0x58)
          goto LABEL_244;
        if ((unint64_t)(v108 - &v116[v111]) < 0x20)
          goto LABEL_244;
        v119 = (v118 >> 3) + 1;
        v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
        v121 = &v108[-v120];
        v117 = (_QWORD *)((char *)v117 - v120);
        v122 = &v116[8 * v112 - 16];
        v123 = v108 - 16;
        v124 = v119 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125 = *(_OWORD *)v123;
          *(v122 - 1) = *((_OWORD *)v123 - 1);
          *v122 = v125;
          v122 -= 2;
          v123 -= 32;
          v124 -= 4;
        }
        while (v124);
        v108 = v121;
        if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_244:
          do
          {
            v126 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *--v117 = v126;
          }
          while (v108 != v110);
        }
        v108 = *v12;
        goto LABEL_141;
      }
      v116 = 0;
      v117 = (_QWORD *)(8 * v112);
      *(_QWORD *)(8 * v112) = v106;
      v109 = 8 * v112 + 8;
      if (v108 != v110)
        goto LABEL_134;
LABEL_141:
      *(_QWORD *)(a1 + 248) = v117;
      *(_QWORD *)(a1 + 256) = v109;
      *(_QWORD *)(a1 + 264) = &v116[8 * v115];
      if (v108)
        operator delete(v108);
LABEL_143:
      *(_QWORD *)(a1 + 256) = v109;
      v127 = *(unsigned int *)(a1 + 48);
      v128 = (void *)operator new[]();
      v129 = v128;
      if ((int)v127 >= 1)
        bzero(v128, 4 * v127);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v79) = v129;
      v131 = *(char **)(a1 + 256);
      v130 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v131 < v130)
      {
        *(_QWORD *)v131 = v129;
        v132 = (uint64_t)(v131 + 8);
        goto LABEL_167;
      }
      v133 = *v12;
      v134 = v131 - *v12;
      v135 = v134 >> 3;
      v136 = (v134 >> 3) + 1;
      if (v136 >> 61)
        goto LABEL_236;
      v137 = v130 - (_QWORD)v133;
      if (v137 >> 2 > v136)
        v136 = v137 >> 2;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 61)
          goto LABEL_237;
        v139 = operator new(8 * v138);
        v140 = &v139[8 * v135];
        *v140 = v129;
        v132 = (uint64_t)(v140 + 1);
        if (v131 == v133)
          goto LABEL_165;
LABEL_158:
        v141 = v131 - 8 - v133;
        if (v141 < 0x58)
          goto LABEL_245;
        if ((unint64_t)(v131 - &v139[v134]) < 0x20)
          goto LABEL_245;
        v142 = (v141 >> 3) + 1;
        v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
        v144 = &v131[-v143];
        v140 = (_QWORD *)((char *)v140 - v143);
        v145 = &v139[8 * v135 - 16];
        v146 = v131 - 16;
        v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 4;
        }
        while (v147);
        v131 = v144;
        if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_245:
          do
          {
            v149 = *((_QWORD *)v131 - 1);
            v131 -= 8;
            *--v140 = v149;
          }
          while (v131 != v133);
        }
        v131 = *v12;
        goto LABEL_165;
      }
      v139 = 0;
      v140 = (_QWORD *)(8 * v135);
      *(_QWORD *)(8 * v135) = v129;
      v132 = 8 * v135 + 8;
      if (v131 != v133)
        goto LABEL_158;
LABEL_165:
      *(_QWORD *)(a1 + 248) = v140;
      *(_QWORD *)(a1 + 256) = v132;
      *(_QWORD *)(a1 + 264) = &v139[8 * v138];
      if (v131)
        operator delete(v131);
LABEL_167:
      *(_QWORD *)(a1 + 256) = v132;
      v150 = *(unsigned int *)(a1 + 48);
      v151 = (void *)operator new[]();
      v152 = v151;
      if ((int)v150 >= 1)
        bzero(v151, 4 * v150);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v79) = v152;
      v154 = *(char **)(a1 + 256);
      v153 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v154 < v153)
      {
        *(_QWORD *)v154 = v152;
        v155 = (uint64_t)(v154 + 8);
        goto LABEL_191;
      }
      v156 = *v12;
      v157 = v154 - *v12;
      v158 = v157 >> 3;
      v159 = (v157 >> 3) + 1;
      if (v159 >> 61)
        goto LABEL_236;
      v160 = v153 - (_QWORD)v156;
      if (v160 >> 2 > v159)
        v159 = v160 >> 2;
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
        v161 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v161 = v159;
      if (v161)
      {
        if (v161 >> 61)
          goto LABEL_237;
        v162 = operator new(8 * v161);
        v163 = &v162[8 * v158];
        *v163 = v152;
        v155 = (uint64_t)(v163 + 1);
        if (v154 == v156)
          goto LABEL_189;
LABEL_182:
        v164 = v154 - 8 - v156;
        if (v164 < 0x58)
          goto LABEL_246;
        if ((unint64_t)(v154 - &v162[v157]) < 0x20)
          goto LABEL_246;
        v165 = (v164 >> 3) + 1;
        v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
        v167 = &v154[-v166];
        v163 = (_QWORD *)((char *)v163 - v166);
        v168 = &v162[8 * v158 - 16];
        v169 = v154 - 16;
        v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 32;
          v170 -= 4;
        }
        while (v170);
        v154 = v167;
        if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_246:
          do
          {
            v172 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v163 = v172;
          }
          while (v154 != v156);
        }
        v154 = *v12;
        goto LABEL_189;
      }
      v162 = 0;
      v163 = (_QWORD *)(8 * v158);
      *(_QWORD *)(8 * v158) = v152;
      v155 = 8 * v158 + 8;
      if (v154 != v156)
        goto LABEL_182;
LABEL_189:
      *(_QWORD *)(a1 + 248) = v163;
      *(_QWORD *)(a1 + 256) = v155;
      *(_QWORD *)(a1 + 264) = &v162[8 * v161];
      if (v154)
        operator delete(v154);
LABEL_191:
      *(_QWORD *)(a1 + 256) = v155;
      v173 = *(unsigned int *)(a1 + 48);
      v174 = (void *)operator new[]();
      v175 = v174;
      if ((int)v173 >= 1)
        bzero(v174, 4 * v173);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v79) = v175;
      v177 = *(char **)(a1 + 256);
      v176 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v177 >= v176)
      {
        v178 = *v12;
        v179 = v177 - *v12;
        v180 = v179 >> 3;
        v181 = (v179 >> 3) + 1;
        if (v181 >> 61)
          goto LABEL_236;
        v182 = v176 - (_QWORD)v178;
        if (v182 >> 2 > v181)
          v181 = v182 >> 2;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
          v183 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v183 = v181;
        if (v183)
        {
          if (v183 >> 61)
            goto LABEL_237;
          v184 = operator new(8 * v183);
          v185 = &v184[8 * v180];
          *v185 = v175;
          v80 = (uint64_t)(v185 + 1);
          if (v177 == v178)
            goto LABEL_212;
LABEL_205:
          v186 = v177 - 8 - v178;
          if (v186 < 0x58)
            goto LABEL_247;
          if ((unint64_t)(v177 - &v184[v179]) < 0x20)
            goto LABEL_247;
          v187 = (v186 >> 3) + 1;
          v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
          v189 = &v177[-v188];
          v185 = (_QWORD *)((char *)v185 - v188);
          v190 = &v184[8 * v180 - 16];
          v191 = v177 - 16;
          v192 = v187 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            *v190 = v193;
            v190 -= 2;
            v191 -= 32;
            v192 -= 4;
          }
          while (v192);
          v177 = v189;
          if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_247:
            do
            {
              v194 = *((_QWORD *)v177 - 1);
              v177 -= 8;
              *--v185 = v194;
            }
            while (v177 != v178);
          }
          v177 = *v12;
        }
        else
        {
          v184 = 0;
          v185 = (_QWORD *)(8 * v180);
          *(_QWORD *)(8 * v180) = v175;
          v80 = 8 * v180 + 8;
          if (v177 != v178)
            goto LABEL_205;
        }
LABEL_212:
        *(_QWORD *)(a1 + 248) = v185;
        *(_QWORD *)(a1 + 256) = v80;
        *(_QWORD *)(a1 + 264) = &v184[8 * v183];
        if (v177)
          operator delete(v177);
        goto LABEL_94;
      }
      *(_QWORD *)v177 = v175;
      v80 = (uint64_t)(v177 + 8);
LABEL_94:
      *(_QWORD *)(a1 + 256) = v80;
      if (++v79 >= dword_1EE418968)
        return;
    }
    if (v92 >> 61)
      goto LABEL_237;
    v93 = operator new(8 * v92);
    v94 = &v93[8 * v89];
    *v94 = v83;
    v86 = (uint64_t)(v94 + 1);
    if (v85 == v87)
      goto LABEL_117;
LABEL_110:
    v95 = v85 - 8 - v87;
    if (v95 < 0x58)
      goto LABEL_248;
    if ((unint64_t)(v85 - &v93[v88]) < 0x20)
      goto LABEL_248;
    v96 = (v95 >> 3) + 1;
    v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v85[-v97];
    v94 = (_QWORD *)((char *)v94 - v97);
    v99 = &v93[8 * v89 - 16];
    v100 = v85 - 16;
    v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *(_OWORD *)v100;
      *(v99 - 1) = *((_OWORD *)v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 32;
      v101 -= 4;
    }
    while (v101);
    v85 = v98;
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_248:
      do
      {
        v103 = *((_QWORD *)v85 - 1);
        v85 -= 8;
        *--v94 = v103;
      }
      while (v85 != v87);
    }
    v85 = *v12;
    goto LABEL_117;
  }
}

_QWORD *sub_19C134DB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  *a1 = &unk_1E3D1E488;
  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
      goto LABEL_13;
  }
  v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1E3D1E2D8;
  v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19C134F14(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15;
  float v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  float v23;
  void *v25[2];
  char v26;
  char __p[23];
  char v28;

  v15 = sub_19C135260(a1, a5);
  *(_QWORD *)v15 = &unk_1E3D20088;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(_QWORD *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8)
    a7 = *(_BYTE *)(a8 + 376);
  *(_BYTE *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0)
    sub_19C2210D4(34);
  v28 = 7;
  strcpy(__p, "SoftMax");
  sub_19C13188C(a1, -0.215);
  v16 = *(float *)(a6 + 16);
  v17 = *(_DWORD *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v19 = *(_DWORD *)(a6 + 32);
    if (v19 == 2)
    {
      v21 = operator new();
      *(_QWORD *)v21 = &unk_1E3D1E968;
      *(float *)(v21 + 24) = v16;
      *(_DWORD *)(v21 + 28) = v17;
      *(_DWORD *)(v21 + 32) = 841731191;
      v23 = v18;
      *(_WORD *)(v21 + 143) = 263;
      *(int32x2_t *)(v21 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 12) = 0;
      *(float *)(v21 + 36) = v23;
      *(_DWORD *)(v21 + 40) = v17;
      *(float *)(v21 + 44) = v23;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_QWORD *)(v21 + 112) = 0;
      *(_QWORD *)(v21 + 120) = 0x78616D74666F53;
    }
    else
    {
      if (v19 != 1)
      {
        if (!v19)
        {
          v20 = operator new();
          v26 = 7;
          strcpy((char *)v25, "Softmax");
          sub_19C0FCB2C(v20, (__int128 *)v25, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v16);
          *(_QWORD *)(a1 + 424) = v20;
          if (v26 < 0)
            operator delete(v25[0]);
        }
        return a1;
      }
      v21 = operator new();
      *(float *)(v21 + 20) = v16;
      *(_DWORD *)(v21 + 24) = v17;
      *(_DWORD *)(v21 + 28) = 841731191;
      *(double *)(v21 + 32) = v18;
      *(_WORD *)(v21 + 159) = 263;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v21 = &unk_1E3D1E270;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 40) = v17;
      *(double *)(v21 + 48) = v18;
      *(int32x2_t *)(v21 + 56) = v22;
      *(_DWORD *)(v21 + 164) = 0;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_OWORD *)(v21 + 112) = 0u;
      *(_QWORD *)(v21 + 128) = 0;
      *(_QWORD *)(v21 + 136) = 0x78616D74666F53;
    }
    *(_QWORD *)(a1 + 424) = v21;
  }
  return a1;
}

void sub_19C1351F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v15);
  sub_19C132908(v14);
  _Unwind_Resume(a1);
}

void sub_19C135224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  sub_19C132908(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C135260(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20898;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return a1;
}

void sub_19C135338(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = v3;
  sub_19C22CB78(v5);
  v7 = *(void **)(v1 + 384);
  if (v7)
  {
    *(_QWORD *)(v1 + 392) = v7;
    operator delete(v7);
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
    {
LABEL_3:
      v9 = *(void **)(v1 + 312);
      if (!v9)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 344) = v8;
  operator delete(v8);
  v9 = *(void **)(v1 + 312);
  if (!v9)
  {
LABEL_4:
    v10 = *(void **)(v1 + 288);
    if (!v10)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 320) = v9;
  operator delete(v9);
  v10 = *(void **)(v1 + 288);
  if (!v10)
  {
LABEL_5:
    v11 = *(void **)(v1 + 264);
    if (!v11)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v1 + 296) = v10;
  operator delete(v10);
  v11 = *(void **)(v1 + 264);
  if (!v11)
  {
LABEL_6:
    sub_19C101AC4(v2);
    v12 = *(void **)(v1 + 72);
    if (!v12)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 272) = v11;
  operator delete(v11);
  sub_19C101AC4(v2);
  v12 = *(void **)(v1 + 72);
  if (!v12)
  {
LABEL_7:
    v13 = *v4;
    if (!*v4)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v1 + 80) = v12;
  operator delete(v12);
  v13 = *v4;
  if (!*v4)
  {
LABEL_8:
    *(_QWORD *)v1 = &unk_1E3D1E2D8;
    v14 = *(void **)(v1 + 8);
    if (!v14)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v1 + 56) = v13;
  operator delete(v13);
  *(_QWORD *)v1 = &unk_1E3D1E2D8;
  v14 = *(void **)(v1 + 8);
  if (!v14)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_17:
  *(_QWORD *)(v1 + 16) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

void sub_19C13545C()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C13546C(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C135474(uint64_t a1)
{
  return a1 + 288;
}

void sub_19C13547C(uint64_t a1)
{
  void *__p[4];

  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19C13188C(a1, -0.44);
}

void sub_19C1354F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C135510(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, char **a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  float **v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  _QWORD *v46;
  float *v47;
  float v48;
  float __B;
  float __C;
  vDSP_Length __N;

  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = a4;
  v11 = *(unsigned int *)(a1 + 100);
  v12 = *(int *)(a1 + 96);
  v13 = *(uint64_t **)(a1 + 512);
  v14 = *(int *)(a1 + 104);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*(_BYTE *)(a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10)
              + 4 * v14
              - 4) = 1065353216;
  v16 = *a5;
  v17 = a5[1];
  if (v9)
    v18 = 1;
  else
    v18 = v10;
  v19 = (float **)(*(_QWORD *)(a1 + 384) + 8 * v18);
  v20 = (uint64_t *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10);
  if (v17 == v16)
  {
    sub_19C12CFAC(v19, v20, v13, v11, v14, 0.0);
    if ((int)v11 >= 1)
    {
      v40 = *(int **)(*(_QWORD *)(a1 + 384) + 8 * v18);
      v41 = v11;
      do
      {
        v42 = -1035468800;
        if (*(float *)v40 < -50.0 || (v42 = 1112014848, *(float *)v40 > 50.0))
          *v40 = v42;
        ++v40;
        --v41;
      }
      while (v41);
    }
    v43 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v44 = *(_QWORD *)(a1 + 384);
    __C = 0.0;
    LODWORD(__N) = v11;
    vvexpf(*(float **)(v43 + 8 * v10), *(const float **)(v44 + 8 * v18), (const int *)&__N);
    vDSP_sve(*(const float **)(v43 + 8 * v10), 1, &__C, (int)__N);
    if (__C <= 0.0)
      v45 = 0.001;
    else
      v45 = __C + 0.001;
    __B = v45;
    vDSP_vsdiv(*(const float **)(v43 + 8 * v10), 1, &__B, *(float **)(v43 + 8 * v10), 1, (int)__N);
    v46 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if ((int)v11 >= 1)
    {
      v47 = *(float **)(*v46 + 8 * v10);
      do
      {
        v48 = -5.0;
        if (*v47 < -5.0 || (v48 = 5.0, *v47 > 5.0))
          *v47 = v48;
        ++v47;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    sub_19C1359CC((uint64_t)v19, (void **)v19, a5, v20, v13, v11, v14);
    if ((int)v11 >= 1)
    {
      v21 = *(int **)(*(_QWORD *)(a1 + 384) + 8 * v18);
      v22 = v11;
      do
      {
        v23 = -1035468800;
        if (*(float *)v21 < -50.0 || (v23 = 1112014848, *(float *)v21 > 50.0))
          *v21 = v23;
        ++v21;
        --v22;
      }
      while (v22);
    }
    v24 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v25 = *(_QWORD *)(a1 + 384);
    v26 = *a5;
    v27 = a5[1] - *a5;
    if (v27)
    {
      if (v27 < 0)
        sub_19C07DA0C();
      v28 = (int *)operator new(v27);
      memcpy(v28, v26, v27);
      bzero(*(void **)(v24 + 8 * v10), 4 * (int)v11);
      if (&v28[v27 >> 2] != v28)
      {
        v29 = *(_QWORD *)(v25 + 8 * v18);
        v30 = *(_QWORD *)(v24 + 8 * v10);
        if ((unint64_t)((4 * (v27 >> 2)) >> 2) <= 1)
          v31 = 1;
        else
          v31 = (4 * (v27 >> 2)) >> 2;
        v32 = 0.0;
        v33 = v28;
        v34 = v31;
        do
        {
          v35 = *v33++;
          v36 = expf(*(float *)(v29 + 4 * v35));
          *(float *)(v30 + 4 * v35) = v36;
          v32 = v36 + v32;
          --v34;
        }
        while (v34);
        v37 = 1.0 / (float)(v32 + 0.001);
        if (v32 <= 0.0)
          v37 = 1000.0;
        v38 = v28;
        do
        {
          v39 = *v38++;
          *(float *)(v30 + 4 * v39) = *(float *)(v30 + 4 * v39) * v37;
          --v31;
        }
        while (v31);
        goto LABEL_46;
      }
    }
    else
    {
      v28 = 0;
      bzero(*(void **)(v24 + 8 * v10), 4 * (int)v11);
    }
    if (v28)
LABEL_46:
      operator delete(v28);
  }
}

void sub_19C13590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C135928(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  int v11;
  uint64_t v12;

  v10 = result;
  if (a5 && *(_BYTE *)(result + 520))
    sub_19C2210D4(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 224))(v10, a2, a3, v12, a7);
      v12 = (v12 + 1);
    }
    while (v11 != (_DWORD)v12);
  }
  return result;
}

void sub_19C1359B8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C132908(a1);
  operator delete(v1);
}

void sub_19C1359CC(uint64_t a1, void **a2, char **a3, uint64_t *a4, uint64_t *a5, int a6, int a7)
{
  unsigned __int8 v12;
  int8x16_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  int32x4_t v31;
  uint64_t v32;
  int8x16_t *v33;
  int32x4_t v34;
  int8x16_t *v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  float v66;

  bzero(*a2, 4 * a6);
  v12 = atomic_load((unsigned __int8 *)&qword_1EE4188E0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EE4188E0))
  {
    v66 = sub_19C2210BC();
    *(float *)&dword_1EE4188E8 = sub_19C2210BC() * v66;
    __cxa_guard_release(&qword_1EE4188E0);
  }
  if (a7)
  {
    if (a7 < 0)
      sub_19C07DA0C();
    v13 = (int8x16_t *)operator new(a7);
    bzero(v13, a7);
    v14 = 0;
    v15 = *a4;
    do
    {
      v17 = *(float *)(v15 + 4 * v14);
      if (v17 <= -5.0)
      {
        LOBYTE(v16) = -127;
      }
      else if (v17 < 5.0 && (v16 = llroundf(v17 * 25.6), v16 <= 127))
      {
        if (v16 <= -127)
          LOBYTE(v16) = -127;
      }
      else
      {
        LOBYTE(v16) = 127;
      }
      v13->i8[v14++] = v16;
    }
    while (a7 != v14);
  }
  else
  {
    v13 = 0;
  }
  v18 = *a3;
  v19 = a3[1] - *a3;
  if (v19)
  {
    v20 = v19 >> 2;
    v21 = *a5;
    if (a7 >= 0)
      v22 = a7;
    else
      v22 = a7 + 15;
    v23 = a7 - (v22 & 0xFFFFFFF0);
    v24 = (int)(v22 & 0xFFFFFFF0);
    v25 = (float *)*a2;
    if (a7 >= 16)
    {
      v26 = 0;
      v27 = (v22 >> 4);
      if (v20 <= 1)
        v20 = 1;
      v28 = &v13->i8[v24];
      v29 = v21 + v24;
      do
      {
        v32 = *(int *)&v18[4 * v26];
        v33 = (int8x16_t *)(v21 + (int)v32 * (uint64_t)a7);
        v34 = 0uLL;
        v35 = v13;
        v36 = v27;
        v37 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        do
        {
          v40 = *v33++;
          v41 = v40;
          v42 = *v35++;
          v43 = vmovl_high_s8(v41);
          v44 = vmovl_high_s8(v42);
          v34 = vmlal_high_s16(v34, v43, v44);
          v37 = vmlal_s16(v37, *(int16x4_t *)v43.i8, *(int16x4_t *)v44.i8);
          v45 = vmovl_s8(*(int8x8_t *)v41.i8);
          v46 = vmovl_s8(*(int8x8_t *)v42.i8);
          v38 = vmlal_high_s16(v38, v45, v46);
          v39 = vmlal_s16(v39, *(int16x4_t *)v45.i8, *(int16x4_t *)v46.i8);
          --v36;
        }
        while (v36);
        if ((int)v23 < 1)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          v47 = (char *)(v29 + (int)v32 * (uint64_t)a7);
          v48 = v28;
          v49 = v23;
          do
          {
            v51 = *v47++;
            v50 = v51;
            v52 = *v48++;
            v30 += v52 * v50;
            --v49;
          }
          while (v49);
        }
        v31 = vaddq_s32(vaddq_s32(vaddq_s32(v38, v39), v37), v34);
        v25[v32] = *(float *)&dword_1EE4188E8
                 * (float)(int)(v30 + vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v31), 1), v31).u32[0]);
        ++v26;
      }
      while (v26 != v20);
      goto LABEL_43;
    }
    v53 = vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32((int32x4_t)0), 1), (int32x4_t)0).u32[0];
    if ((int)v23 >= 1)
    {
      v54 = 0;
      if (v20 <= 1)
        v20 = 1;
      v55 = v21 + v24;
      do
      {
        v56 = 0;
        v57 = *(int *)&v18[4 * v54];
        v58 = (char *)(v55 + (int)v57 * (uint64_t)a7);
        v59 = &v13->i8[v24];
        v60 = v23;
        do
        {
          v62 = *v58++;
          v61 = v62;
          v63 = *v59++;
          v56 += v63 * v61;
          --v60;
        }
        while (v60);
        v25[v57] = *(float *)&dword_1EE4188E8 * (float)(v56 + v53);
        ++v54;
      }
      while (v54 != v20);
      goto LABEL_43;
    }
    if (v20 <= 1)
      v64 = 1;
    else
      v64 = v20;
    do
    {
      v65 = *(int *)v18;
      v18 += 4;
      v25[v65] = *(float *)&dword_1EE4188E8 * (float)v53;
      --v64;
    }
    while (v64);
  }
  if (v13)
LABEL_43:
    operator delete(v13);
}

void sub_19C135D14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE4188E0);
  _Unwind_Resume(a1);
}

void sub_19C135D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C135D48(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  _DWORD *v16;
  char *__p;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1F420;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19C22CB44(a1 + 1192);
  sub_19C22CB44(a1 + 1264);
  sub_19C22CB44(a1 + 1336);
  sub_19C22CB44(a1 + 1408);
  sub_19C22CB44(a1 + 1480);
  sub_19C22CB44(a1 + 1552);
  sub_19C22CB44(a1 + 1624);
  sub_19C22CB44(a1 + 1696);
  sub_19C22CB44(a1 + 1768);
  sub_19C22CB44(a1 + 1840);
  sub_19C22CB44(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2040) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2048) = a9;
  if (a9)
  {
    v14 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    v15 = v14 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2048) + 376);
  }
  else
  {
    v15 = 1;
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  v16 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v16[1];
  *(_DWORD *)(a1 + 528) = v16[2];
  if (!a8)
    v15 = 0;
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from constructor");
  sub_19C136380(a1);
  operator delete(__p);
  return a1;
}

void sub_19C136038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  void **v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  if (a27 < 0)
  {
    operator delete(__p);
    v36 = (void *)v27[252];
    if (!v36)
    {
LABEL_3:
      v37 = *v32;
      if (!*v32)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v36 = (void *)v27[252];
    if (!v36)
      goto LABEL_3;
  }
  v27[253] = v36;
  operator delete(v36);
  v37 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19C22CB78(v33);
    sub_19C22CB78(v34);
    sub_19C22CB78(a10);
    sub_19C22CB78(a11);
    sub_19C22CB78(a12);
    sub_19C22CB78(a13);
    sub_19C22CB78(a14);
    sub_19C22CB78(a15);
    sub_19C22CB78(a16);
    sub_19C22CB78(a17);
    sub_19C22CB78(a18);
    sub_19C101AC4(v31);
    sub_19C101AC4(v29);
    sub_19C101AC4(a19);
    v38 = (void *)v27[85];
    if (v38)
    {
      v27[86] = v38;
      operator delete(v38);
      v39 = (void *)v27[82];
      if (!v39)
      {
LABEL_7:
        v40 = (void *)v27[79];
        if (!v40)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = (void *)v27[82];
      if (!v39)
        goto LABEL_7;
    }
    v27[83] = v39;
    operator delete(v39);
    v40 = (void *)v27[79];
    if (!v40)
    {
LABEL_8:
      v41 = (void *)v27[76];
      if (!v41)
        goto LABEL_9;
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v40;
    operator delete(v40);
    v41 = (void *)v27[76];
    if (!v41)
    {
LABEL_9:
      v42 = (void *)v27[73];
      if (!v42)
        goto LABEL_10;
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v41;
    operator delete(v41);
    v42 = (void *)v27[73];
    if (!v42)
    {
LABEL_10:
      v43 = (void *)v27[70];
      if (!v43)
        goto LABEL_11;
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v42;
    operator delete(v42);
    v43 = (void *)v27[70];
    if (!v43)
    {
LABEL_11:
      v44 = (void *)v27[62];
      if (!v44)
        goto LABEL_12;
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v43;
    operator delete(v43);
    v44 = (void *)v27[62];
    if (!v44)
    {
LABEL_12:
      v45 = (void *)v27[59];
      if (!v45)
        goto LABEL_13;
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v44;
    operator delete(v44);
    v45 = (void *)v27[59];
    if (!v45)
    {
LABEL_13:
      v46 = (void *)v27[56];
      if (!v46)
        goto LABEL_14;
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v45;
    operator delete(v45);
    v46 = (void *)v27[56];
    if (!v46)
    {
LABEL_14:
      v47 = (void *)v27[53];
      if (!v47)
        goto LABEL_15;
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v46;
    operator delete(v46);
    v47 = (void *)v27[53];
    if (!v47)
    {
LABEL_15:
      v48 = (void *)v27[50];
      if (!v48)
        goto LABEL_16;
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v47;
    operator delete(v47);
    v48 = (void *)v27[50];
    if (!v48)
    {
LABEL_16:
      v49 = *v30;
      if (!*v30)
        goto LABEL_17;
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v48;
    operator delete(v48);
    v49 = *v30;
    if (!*v30)
    {
LABEL_17:
      sub_19C0830E8(v28);
      v50 = (void *)v27[23];
      if (!v50)
        goto LABEL_18;
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v49;
    operator delete(v49);
    sub_19C0830E8(v28);
    v50 = (void *)v27[23];
    if (!v50)
    {
LABEL_18:
      v51 = (void *)v27[20];
      if (!v51)
        goto LABEL_19;
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v50;
    operator delete(v50);
    v51 = (void *)v27[20];
    if (!v51)
    {
LABEL_19:
      v52 = (void *)v27[17];
      if (!v52)
        goto LABEL_20;
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v51;
    operator delete(v51);
    v52 = (void *)v27[17];
    if (!v52)
    {
LABEL_20:
      v53 = (void *)v27[14];
      if (!v53)
        goto LABEL_21;
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v52;
    operator delete(v52);
    v53 = (void *)v27[14];
    if (!v53)
    {
LABEL_21:
      v54 = (void *)v27[11];
      if (!v54)
        goto LABEL_22;
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v53;
    operator delete(v53);
    v54 = (void *)v27[11];
    if (!v54)
    {
LABEL_22:
      v55 = *a20;
      if (!*a20)
        goto LABEL_23;
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v54;
    operator delete(v54);
    v55 = *a20;
    if (!*a20)
    {
LABEL_23:
      *v27 = &unk_1E3D1E2D8;
      v56 = (void *)v27[1];
      if (!v56)
        goto LABEL_24;
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v55;
    operator delete(v55);
    *v27 = &unk_1E3D1E2D8;
    v56 = (void *)v27[1];
    if (!v56)
LABEL_24:
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v56;
    operator delete(v56);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v37;
  operator delete(v37);
  goto LABEL_5;
}

void sub_19C136380(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _OWORD *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _OWORD *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _OWORD *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  _OWORD *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  void *v260;
  char *v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  char *v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  _QWORD *v310;
  char *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  _OWORD *v316;
  char *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  char *v323;
  unint64_t v324;
  _QWORD *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _BYTE *v332;
  _QWORD *v333;
  char *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  _OWORD *v339;
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  char *v346;
  unint64_t v347;
  _QWORD *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _QWORD *v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  size_t v367;
  void *v368;
  char *v369;
  unint64_t v370;
  _QWORD *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  _BYTE *v378;
  _QWORD *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  _OWORD *v385;
  char *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  size_t v390;
  void *v391;
  char *v392;
  unint64_t v393;
  _QWORD *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _BYTE *v401;
  _QWORD *v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  size_t v413;
  void *v414;
  char *v415;
  unint64_t v416;
  _QWORD *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  _QWORD *v425;
  char *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  _OWORD *v431;
  char *v432;
  uint64_t v433;
  __int128 v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  int v438;
  void *v439;
  char **v440;
  char *v441;
  unint64_t v442;
  _QWORD *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _BYTE *v450;
  _QWORD *v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  _OWORD *v457;
  char *v458;
  uint64_t v459;
  __int128 v460;
  uint64_t v461;
  int v462;
  void *v463;
  char *v464;
  unint64_t v465;
  _QWORD *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  _QWORD *v474;
  char *v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  _OWORD *v480;
  char *v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  int v485;
  void *v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  _BYTE *v496;
  _QWORD *v497;
  char *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  _OWORD *v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  void *v508;

  v2 = 3;
  v3 = 6;
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988))
      goto LABEL_23;
LABEL_11:
    v4 = *(_QWORD *)(a1 + 2048);
    if (v4 && (v5 = *(_DWORD *)(v4 + 40), v5 >= 1))
    {
      v6 = (_QWORD *)(v4 + 8 * v3);
      if (v5 == 6)
      {
        *(_QWORD *)(a1 + 232) = v6[14];
        *(_QWORD *)(a1 + 240) = v6[15];
        *(_QWORD *)(a1 + 248) = v6[16];
      }
      else
      {
        if (v5 != 4)
          sub_19C2210D4(45);
        *(_QWORD *)(a1 + 232) = v6[14];
      }
      *(_QWORD *)(a1 + 256) = v6[17];
      *(_QWORD *)(a1 + 264) = v6[18];
      *(_QWORD *)(a1 + 272) = v6[19];
    }
    else if (!*(_BYTE *)(a1 + 1985))
    {
      v7 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, v7);
      sub_19C1023F0(&v508, v7, 0.1);
      v8 = v508;
      *(_QWORD *)(a1 + 232) = v508;
      v9 = (char **)(a1 + 2016);
      v10 = *(char **)(a1 + 2024);
      v11 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v10 >= v11)
      {
        v303 = *v9;
        v304 = v10 - *v9;
        v305 = v304 >> 3;
        v306 = (v304 >> 3) + 1;
        if (v306 >> 61)
          goto LABEL_545;
        v307 = v11 - (_QWORD)v303;
        if (v307 >> 2 > v306)
          v306 = v307 >> 2;
        if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v306;
        if (v308)
        {
          if (v308 >> 61)
            goto LABEL_544;
          v309 = operator new(8 * v308);
        }
        else
        {
          v309 = 0;
        }
        v310 = &v309[8 * v305];
        v311 = &v309[8 * v308];
        *v310 = v8;
        v12 = v310 + 1;
        if (v10 != v303)
        {
          v312 = v10 - v303 - 8;
          if (v312 < 0x58)
            goto LABEL_549;
          if ((unint64_t)(v10 - v309 - v304) < 0x20)
            goto LABEL_549;
          v313 = (v312 >> 3) + 1;
          v314 = 8 * (v313 & 0x3FFFFFFFFFFFFFFCLL);
          v315 = &v10[-v314];
          v310 = (_QWORD *)((char *)v310 - v314);
          v316 = &v309[8 * v305 - 16];
          v317 = v10 - 16;
          v318 = v313 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v319 = *(_OWORD *)v317;
            *(v316 - 1) = *((_OWORD *)v317 - 1);
            *v316 = v319;
            v316 -= 2;
            v317 -= 32;
            v318 -= 4;
          }
          while (v318);
          v10 = v315;
          if (v313 != (v313 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_549:
            do
            {
              v320 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *--v310 = v320;
            }
            while (v10 != v303);
          }
          v10 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v310;
        *(_QWORD *)(a1 + 2024) = v12;
        *(_QWORD *)(a1 + 2032) = v311;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v10 = v8;
        v12 = v10 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v12;
      v321 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, v321);
      sub_19C1023F0(&v508, v321, 0.1);
      v322 = v508;
      *(_QWORD *)(a1 + 240) = v508;
      v323 = *(char **)(a1 + 2024);
      v324 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v323 >= v324)
      {
        v326 = *v9;
        v327 = v323 - *v9;
        v328 = v327 >> 3;
        v329 = (v327 >> 3) + 1;
        if (v329 >> 61)
          goto LABEL_545;
        v330 = v324 - (_QWORD)v326;
        if (v330 >> 2 > v329)
          v329 = v330 >> 2;
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF8)
          v331 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v331 = v329;
        if (v331)
        {
          if (v331 >> 61)
            goto LABEL_544;
          v332 = operator new(8 * v331);
        }
        else
        {
          v332 = 0;
        }
        v333 = &v332[8 * v328];
        v334 = &v332[8 * v331];
        *v333 = v322;
        v325 = v333 + 1;
        if (v323 != v326)
        {
          v335 = v323 - v326 - 8;
          if (v335 < 0x58)
            goto LABEL_550;
          if ((unint64_t)(v323 - v332 - v327) < 0x20)
            goto LABEL_550;
          v336 = (v335 >> 3) + 1;
          v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
          v338 = &v323[-v337];
          v333 = (_QWORD *)((char *)v333 - v337);
          v339 = &v332[8 * v328 - 16];
          v340 = v323 - 16;
          v341 = v336 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v342 = *(_OWORD *)v340;
            *(v339 - 1) = *((_OWORD *)v340 - 1);
            *v339 = v342;
            v339 -= 2;
            v340 -= 32;
            v341 -= 4;
          }
          while (v341);
          v323 = v338;
          if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_550:
            do
            {
              v343 = *((_QWORD *)v323 - 1);
              v323 -= 8;
              *--v333 = v343;
            }
            while (v323 != v326);
          }
          v323 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v333;
        *(_QWORD *)(a1 + 2024) = v325;
        *(_QWORD *)(a1 + 2032) = v334;
        if (v323)
          operator delete(v323);
      }
      else
      {
        *(_QWORD *)v323 = v322;
        v325 = v323 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v325;
      v344 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, v344);
      sub_19C1023F0(&v508, v344, 0.1);
      v345 = v508;
      *(_QWORD *)(a1 + 248) = v508;
      v346 = *(char **)(a1 + 2024);
      v347 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v346 >= v347)
      {
        v349 = *v9;
        v350 = v346 - *v9;
        v351 = v350 >> 3;
        v352 = (v350 >> 3) + 1;
        if (v352 >> 61)
          goto LABEL_545;
        v353 = v347 - (_QWORD)v349;
        if (v353 >> 2 > v352)
          v352 = v353 >> 2;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v352;
        if (v354)
        {
          if (v354 >> 61)
            goto LABEL_544;
          v355 = operator new(8 * v354);
        }
        else
        {
          v355 = 0;
        }
        v356 = &v355[8 * v351];
        v357 = &v355[8 * v354];
        *v356 = v345;
        v348 = v356 + 1;
        if (v346 != v349)
        {
          v358 = v346 - v349 - 8;
          if (v358 < 0x58)
            goto LABEL_551;
          if ((unint64_t)(v346 - v355 - v350) < 0x20)
            goto LABEL_551;
          v359 = (v358 >> 3) + 1;
          v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
          v361 = &v346[-v360];
          v356 = (_QWORD *)((char *)v356 - v360);
          v362 = &v355[8 * v351 - 16];
          v363 = v346 - 16;
          v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v365 = *(_OWORD *)v363;
            *(v362 - 1) = *((_OWORD *)v363 - 1);
            *v362 = v365;
            v362 -= 2;
            v363 -= 32;
            v364 -= 4;
          }
          while (v364);
          v346 = v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_551:
            do
            {
              v366 = *((_QWORD *)v346 - 1);
              v346 -= 8;
              *--v356 = v366;
            }
            while (v346 != v349);
          }
          v346 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v356;
        *(_QWORD *)(a1 + 2024) = v348;
        *(_QWORD *)(a1 + 2032) = v357;
        if (v346)
          operator delete(v346);
      }
      else
      {
        *(_QWORD *)v346 = v345;
        v348 = v346 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v348;
      v367 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
      v508 = (void *)operator new[]();
      bzero(v508, v367);
      sub_19C1023F0(&v508, v367, 0.1);
      v368 = v508;
      *(_QWORD *)(a1 + 256) = v508;
      v369 = *(char **)(a1 + 2024);
      v370 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v369 >= v370)
      {
        v372 = *v9;
        v373 = v369 - *v9;
        v374 = v373 >> 3;
        v375 = (v373 >> 3) + 1;
        if (v375 >> 61)
          goto LABEL_545;
        v376 = v370 - (_QWORD)v372;
        if (v376 >> 2 > v375)
          v375 = v376 >> 2;
        if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
          v377 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        if (v377)
        {
          if (v377 >> 61)
            goto LABEL_544;
          v378 = operator new(8 * v377);
        }
        else
        {
          v378 = 0;
        }
        v379 = &v378[8 * v374];
        v380 = &v378[8 * v377];
        *v379 = v368;
        v371 = v379 + 1;
        if (v369 != v372)
        {
          v381 = v369 - v372 - 8;
          if (v381 < 0x58)
            goto LABEL_552;
          if ((unint64_t)(v369 - &v378[v373]) < 0x20)
            goto LABEL_552;
          v382 = (v381 >> 3) + 1;
          v383 = 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
          v384 = &v369[-v383];
          v379 = (_QWORD *)((char *)v379 - v383);
          v385 = &v378[8 * v374 - 16];
          v386 = v369 - 16;
          v387 = v382 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v388 = *(_OWORD *)v386;
            *(v385 - 1) = *((_OWORD *)v386 - 1);
            *v385 = v388;
            v385 -= 2;
            v386 -= 32;
            v387 -= 4;
          }
          while (v387);
          v369 = v384;
          if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_552:
            do
            {
              v389 = *((_QWORD *)v369 - 1);
              v369 -= 8;
              *--v379 = v389;
            }
            while (v369 != v372);
          }
          v369 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v379;
        *(_QWORD *)(a1 + 2024) = v371;
        *(_QWORD *)(a1 + 2032) = v380;
        if (v369)
          operator delete(v369);
      }
      else
      {
        *(_QWORD *)v369 = v368;
        v371 = v369 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v371;
      v390 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
      v508 = (void *)operator new[]();
      bzero(v508, v390);
      sub_19C1023F0(&v508, v390, 0.1);
      v391 = v508;
      *(_QWORD *)(a1 + 264) = v508;
      v392 = *(char **)(a1 + 2024);
      v393 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v392 >= v393)
      {
        v395 = *v9;
        v396 = v392 - *v9;
        v397 = v396 >> 3;
        v398 = (v396 >> 3) + 1;
        if (v398 >> 61)
          goto LABEL_545;
        v399 = v393 - (_QWORD)v395;
        if (v399 >> 2 > v398)
          v398 = v399 >> 2;
        if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8)
          v400 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v400 = v398;
        if (v400)
        {
          if (v400 >> 61)
            goto LABEL_544;
          v401 = operator new(8 * v400);
        }
        else
        {
          v401 = 0;
        }
        v402 = &v401[8 * v397];
        v403 = &v401[8 * v400];
        *v402 = v391;
        v394 = v402 + 1;
        if (v392 != v395)
        {
          v404 = v392 - v395 - 8;
          if (v404 < 0x58)
            goto LABEL_553;
          if ((unint64_t)(v392 - &v401[v396]) < 0x20)
            goto LABEL_553;
          v405 = (v404 >> 3) + 1;
          v406 = 8 * (v405 & 0x3FFFFFFFFFFFFFFCLL);
          v407 = &v392[-v406];
          v402 = (_QWORD *)((char *)v402 - v406);
          v408 = &v401[8 * v397 - 16];
          v409 = v392 - 16;
          v410 = v405 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v411 = *(_OWORD *)v409;
            *(v408 - 1) = *((_OWORD *)v409 - 1);
            *v408 = v411;
            v408 -= 2;
            v409 -= 32;
            v410 -= 4;
          }
          while (v410);
          v392 = v407;
          if (v405 != (v405 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_553:
            do
            {
              v412 = *((_QWORD *)v392 - 1);
              v392 -= 8;
              *--v402 = v412;
            }
            while (v392 != v395);
          }
          v392 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v402;
        *(_QWORD *)(a1 + 2024) = v394;
        *(_QWORD *)(a1 + 2032) = v403;
        if (v392)
          operator delete(v392);
      }
      else
      {
        *(_QWORD *)v392 = v391;
        v394 = v392 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v394;
      v413 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
      v508 = (void *)operator new[]();
      bzero(v508, v413);
      sub_19C1023F0(&v508, v413, 0.1);
      v414 = v508;
      *(_QWORD *)(a1 + 272) = v508;
      v415 = *(char **)(a1 + 2024);
      v416 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v415 >= v416)
      {
        v418 = *v9;
        v419 = v415 - *v9;
        v420 = v419 >> 3;
        v421 = (v419 >> 3) + 1;
        if (v421 >> 61)
          goto LABEL_545;
        v422 = v416 - (_QWORD)v418;
        if (v422 >> 2 > v421)
          v421 = v422 >> 2;
        if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v421;
        if (v423)
        {
          if (v423 >> 61)
            goto LABEL_544;
          v424 = operator new(8 * v423);
        }
        else
        {
          v424 = 0;
        }
        v425 = &v424[8 * v420];
        v426 = &v424[8 * v423];
        *v425 = v414;
        v417 = v425 + 1;
        if (v415 != v418)
        {
          v427 = v415 - v418 - 8;
          if (v427 < 0x58)
            goto LABEL_554;
          if ((unint64_t)(v415 - &v424[v419]) < 0x20)
            goto LABEL_554;
          v428 = (v427 >> 3) + 1;
          v429 = 8 * (v428 & 0x3FFFFFFFFFFFFFFCLL);
          v430 = &v415[-v429];
          v425 = (_QWORD *)((char *)v425 - v429);
          v431 = &v424[8 * v420 - 16];
          v432 = v415 - 16;
          v433 = v428 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v434 = *(_OWORD *)v432;
            *(v431 - 1) = *((_OWORD *)v432 - 1);
            *v431 = v434;
            v431 -= 2;
            v432 -= 32;
            v433 -= 4;
          }
          while (v433);
          v415 = v430;
          if (v428 != (v428 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_554:
            do
            {
              v435 = *((_QWORD *)v415 - 1);
              v415 -= 8;
              *--v425 = v435;
            }
            while (v415 != v418);
          }
          v415 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v425;
        *(_QWORD *)(a1 + 2024) = v417;
        *(_QWORD *)(a1 + 2032) = v426;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *(_QWORD *)v415 = v414;
        v417 = v415 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v417;
      if (*(_BYTE *)(a1 + 1985))
        goto LABEL_22;
LABEL_473:
      v436 = *(_QWORD *)(a1 + 2048);
      if (!v436)
        goto LABEL_22;
      if (*(_BYTE *)(v436 + 244))
      {
        v437 = (_QWORD *)(v436 + 8 * v2);
        *(_QWORD *)(a1 + 280) = v437[31];
        *(_QWORD *)(a1 + 288) = v437[32];
        *(_QWORD *)(a1 + 296) = v437[33];
        goto LABEL_22;
      }
      v438 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C1023F0(&v508, v438, 0.1);
      v439 = v508;
      *(_QWORD *)(a1 + 280) = v508;
      v440 = (char **)(a1 + 2016);
      v441 = *(char **)(a1 + 2024);
      v442 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v441 >= v442)
      {
        v444 = *v440;
        v445 = v441 - *v440;
        v446 = v445 >> 3;
        v447 = (v445 >> 3) + 1;
        if (v447 >> 61)
          goto LABEL_545;
        v448 = v442 - (_QWORD)v444;
        if (v448 >> 2 > v447)
          v447 = v448 >> 2;
        if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
          v449 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v449 = v447;
        if (v449)
        {
          if (v449 >> 61)
            goto LABEL_544;
          v450 = operator new(8 * v449);
        }
        else
        {
          v450 = 0;
        }
        v451 = &v450[8 * v446];
        v452 = &v450[8 * v449];
        *v451 = v439;
        v443 = v451 + 1;
        if (v441 != v444)
        {
          v453 = v441 - v444 - 8;
          if (v453 < 0x58)
            goto LABEL_555;
          if ((unint64_t)(v441 - v450 - v445) < 0x20)
            goto LABEL_555;
          v454 = (v453 >> 3) + 1;
          v455 = 8 * (v454 & 0x3FFFFFFFFFFFFFFCLL);
          v456 = &v441[-v455];
          v451 = (_QWORD *)((char *)v451 - v455);
          v457 = &v450[8 * v446 - 16];
          v458 = v441 - 16;
          v459 = v454 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v460 = *(_OWORD *)v458;
            *(v457 - 1) = *((_OWORD *)v458 - 1);
            *v457 = v460;
            v457 -= 2;
            v458 -= 32;
            v459 -= 4;
          }
          while (v459);
          v441 = v456;
          if (v454 != (v454 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_555:
            do
            {
              v461 = *((_QWORD *)v441 - 1);
              v441 -= 8;
              *--v451 = v461;
            }
            while (v441 != v444);
          }
          v441 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v451;
        *(_QWORD *)(a1 + 2024) = v443;
        *(_QWORD *)(a1 + 2032) = v452;
        if (v441)
          operator delete(v441);
      }
      else
      {
        *(_QWORD *)v441 = v439;
        v443 = v441 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v443;
      v462 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C1023F0(&v508, v462, 0.1);
      v463 = v508;
      *(_QWORD *)(a1 + 288) = v508;
      v464 = *(char **)(a1 + 2024);
      v465 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v464 >= v465)
      {
        v467 = *v440;
        v468 = v464 - *v440;
        v469 = v468 >> 3;
        v470 = (v468 >> 3) + 1;
        if (v470 >> 61)
          goto LABEL_545;
        v471 = v465 - (_QWORD)v467;
        if (v471 >> 2 > v470)
          v470 = v471 >> 2;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
          v472 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v472 = v470;
        if (v472)
        {
          if (v472 >> 61)
            goto LABEL_544;
          v473 = operator new(8 * v472);
        }
        else
        {
          v473 = 0;
        }
        v474 = &v473[8 * v469];
        v475 = &v473[8 * v472];
        *v474 = v463;
        v466 = v474 + 1;
        if (v464 != v467)
        {
          v476 = v464 - v467 - 8;
          if (v476 < 0x58)
            goto LABEL_556;
          if ((unint64_t)(v464 - v473 - v468) < 0x20)
            goto LABEL_556;
          v477 = (v476 >> 3) + 1;
          v478 = 8 * (v477 & 0x3FFFFFFFFFFFFFFCLL);
          v479 = &v464[-v478];
          v474 = (_QWORD *)((char *)v474 - v478);
          v480 = &v473[8 * v469 - 16];
          v481 = v464 - 16;
          v482 = v477 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v483 = *(_OWORD *)v481;
            *(v480 - 1) = *((_OWORD *)v481 - 1);
            *v480 = v483;
            v480 -= 2;
            v481 -= 32;
            v482 -= 4;
          }
          while (v482);
          v464 = v479;
          if (v477 != (v477 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_556:
            do
            {
              v484 = *((_QWORD *)v464 - 1);
              v464 -= 8;
              *--v474 = v484;
            }
            while (v464 != v467);
          }
          v464 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v474;
        *(_QWORD *)(a1 + 2024) = v466;
        *(_QWORD *)(a1 + 2032) = v475;
        if (v464)
          operator delete(v464);
      }
      else
      {
        *(_QWORD *)v464 = v463;
        v466 = v464 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v466;
      v485 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C1023F0(&v508, v485, 0.1);
      v486 = v508;
      *(_QWORD *)(a1 + 296) = v508;
      v487 = *(char **)(a1 + 2024);
      v488 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v487 < v488)
      {
        *(_QWORD *)v487 = v486;
        v489 = v487 + 8;
LABEL_542:
        *(_QWORD *)(a1 + 2024) = v489;
        goto LABEL_22;
      }
      v490 = *v440;
      v491 = v487 - *v440;
      v492 = v491 >> 3;
      v493 = (v491 >> 3) + 1;
      if (!(v493 >> 61))
      {
        v494 = v488 - (_QWORD)v490;
        if (v494 >> 2 > v493)
          v493 = v494 >> 2;
        if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8)
          v495 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v495 = v493;
        if (v495)
        {
          if (v495 >> 61)
            goto LABEL_544;
          v496 = operator new(8 * v495);
        }
        else
        {
          v496 = 0;
        }
        v497 = &v496[8 * v492];
        v498 = &v496[8 * v495];
        *v497 = v486;
        v489 = v497 + 1;
        if (v487 != v490)
        {
          v499 = v487 - v490 - 8;
          if (v499 < 0x58)
            goto LABEL_557;
          if ((unint64_t)(v487 - v496 - v491) < 0x20)
            goto LABEL_557;
          v500 = (v499 >> 3) + 1;
          v501 = 8 * (v500 & 0x3FFFFFFFFFFFFFFCLL);
          v502 = &v487[-v501];
          v497 = (_QWORD *)((char *)v497 - v501);
          v503 = &v496[8 * v492 - 16];
          v504 = v487 - 16;
          v505 = v500 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v506 = *(_OWORD *)v504;
            *(v503 - 1) = *((_OWORD *)v504 - 1);
            *v503 = v506;
            v503 -= 2;
            v504 -= 32;
            v505 -= 4;
          }
          while (v505);
          v487 = v502;
          if (v500 != (v500 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_557:
            do
            {
              v507 = *((_QWORD *)v487 - 1);
              v487 -= 8;
              *--v497 = v507;
            }
            while (v487 != v490);
          }
          v487 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v497;
        *(_QWORD *)(a1 + 2024) = v489;
        *(_QWORD *)(a1 + 2032) = v498;
        if (v487)
          operator delete(v487);
        goto LABEL_542;
      }
LABEL_545:
      sub_19C07DA0C();
    }
    if (*(_BYTE *)(a1 + 1985))
    {
LABEL_22:
      *(_QWORD *)(a1 + 304) = a1 + 232;
      *(_QWORD *)(a1 + 312) = a1 + 240;
      *(_QWORD *)(a1 + 320) = a1 + 248;
      *(_QWORD *)(a1 + 328) = a1 + 256;
      *(_QWORD *)(a1 + 336) = a1 + 264;
      *(_QWORD *)(a1 + 344) = a1 + 272;
      *(_QWORD *)(a1 + 352) = a1 + 280;
      *(_QWORD *)(a1 + 360) = a1 + 288;
      *(_QWORD *)(a1 + 368) = a1 + 296;
      goto LABEL_23;
    }
    goto LABEL_473;
  }
  if (*(_BYTE *)(a1 + 2040))
    v3 = 6;
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 2040))
    v2 = 3;
  else
    v2 = 0;
  if (!*(_DWORD *)(a1 + 1988))
    goto LABEL_11;
LABEL_23:
  v13 = *(unsigned int *)(a1 + 52);
  v14 = (void *)operator new[]();
  v15 = v14;
  if ((int)v13 >= 1)
    bzero(v14, 4 * v13);
  *(_QWORD *)(a1 + 536) = v15;
  v16 = (char **)(a1 + 1992);
  v17 = *(char **)(a1 + 2000);
  v18 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v17 < v18)
  {
    *(_QWORD *)v17 = v15;
    v19 = (uint64_t)(v17 + 8);
    goto LABEL_47;
  }
  v20 = *v16;
  v21 = v17 - *v16;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    goto LABEL_543;
  v24 = v18 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      goto LABEL_544;
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v15;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v17 - v20);
    if (v17 == v20)
      goto LABEL_45;
    goto LABEL_38;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v17 - v20);
  if (v17 != v20)
  {
LABEL_38:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_558;
    if ((unint64_t)(v17 - v26 - v21) < 0x20)
      goto LABEL_558;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v17[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v17 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v17 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_558:
      do
      {
        v38 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v27 = v38;
      }
      while (v17 != v20);
    }
    v17 = *v16;
  }
LABEL_45:
  *(_QWORD *)(a1 + 1992) = v27;
  *(_QWORD *)(a1 + 2000) = v19;
  *(_QWORD *)(a1 + 2008) = v28;
  if (v17)
    operator delete(v17);
LABEL_47:
  *(_QWORD *)(a1 + 2000) = v19;
  v39 = *(unsigned int *)(a1 + 52);
  v40 = (void *)operator new[]();
  v41 = v40;
  if ((int)v39 >= 1)
    bzero(v40, 4 * v39);
  *(_QWORD *)(a1 + 544) = v41;
  v42 = *(char **)(a1 + 2000);
  v43 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v42 < v43)
  {
    *(_QWORD *)v42 = v41;
    v44 = (uint64_t)(v42 + 8);
    goto LABEL_71;
  }
  v45 = *v16;
  v46 = v42 - *v16;
  v47 = v46 >> 3;
  v48 = (v46 >> 3) + 1;
  if (v48 >> 61)
LABEL_543:
    sub_19C07DA0C();
  v49 = v43 - (_QWORD)v45;
  if (v49 >> 2 > v48)
    v48 = v49 >> 2;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v48;
  if (!v50)
  {
    v51 = 0;
    v52 = (_QWORD *)(8 * v47);
    v53 = 0;
    *(_QWORD *)(8 * v47) = v41;
    v44 = 8 * v47 + 8;
    v54 = (char *)(v42 - v45);
    if (v42 == v45)
      goto LABEL_69;
LABEL_62:
    v55 = (unint64_t)(v54 - 8);
    if (v55 < 0x58)
      goto LABEL_559;
    if ((unint64_t)(v42 - v51 - v46) < 0x20)
      goto LABEL_559;
    v56 = (v55 >> 3) + 1;
    v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    v58 = &v42[-v57];
    v52 = (_QWORD *)((char *)v52 - v57);
    v59 = &v51[8 * v47 - 16];
    v60 = v42 - 16;
    v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 4;
    }
    while (v61);
    v42 = v58;
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_559:
      do
      {
        v63 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *--v52 = v63;
      }
      while (v42 != v45);
    }
    v42 = *v16;
    goto LABEL_69;
  }
  if (v50 >> 61)
LABEL_544:
    sub_19C07C7FC();
  v51 = operator new(8 * v50);
  v52 = &v51[8 * v47];
  v53 = &v51[8 * v50];
  *v52 = v41;
  v44 = (uint64_t)(v52 + 1);
  v54 = (char *)(v42 - v45);
  if (v42 != v45)
    goto LABEL_62;
LABEL_69:
  *(_QWORD *)(a1 + 1992) = v52;
  *(_QWORD *)(a1 + 2000) = v44;
  *(_QWORD *)(a1 + 2008) = v53;
  if (v42)
    operator delete(v42);
LABEL_71:
  v64 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 2000) = v44;
  v65 = dword_1EE418968;
  v66 = (*(_QWORD *)(a1 + 96) - v64) >> 3;
  if (dword_1EE418968 <= v66)
  {
    if (dword_1EE418968 < v66)
      *(_QWORD *)(a1 + 96) = v64 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v66);
    v65 = dword_1EE418968;
  }
  v67 = *(_QWORD *)(a1 + 112);
  v68 = (*(_QWORD *)(a1 + 120) - v67) >> 3;
  if (v65 <= v68)
  {
    if (v65 < v68)
      *(_QWORD *)(a1 + 120) = v67 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v65 - v68);
    v65 = dword_1EE418968;
  }
  v69 = *(_QWORD *)(a1 + 64);
  v70 = (*(_QWORD *)(a1 + 72) - v69) >> 3;
  if (v65 <= v70)
  {
    if (v65 < v70)
      *(_QWORD *)(a1 + 72) = v69 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), v65 - v70);
    v65 = dword_1EE418968;
  }
  v72 = *(_QWORD *)(a1 + 208);
  v71 = *(_QWORD *)(a1 + 216);
  v73 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v72) >> 3);
  if (v65 <= v73)
  {
    if (v65 < v73)
    {
      v74 = v72 + 24 * (int)v65;
      if (v71 != v74)
      {
        v75 = *(_QWORD *)(a1 + 216);
        do
        {
          v77 = *(void **)(v75 - 24);
          v75 -= 24;
          v76 = v77;
          if (v77)
          {
            *(_QWORD *)(v71 - 16) = v76;
            operator delete(v76);
          }
          v71 = v75;
        }
        while (v75 != v74);
      }
      *(_QWORD *)(a1 + 216) = v74;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v65 - v73);
  }
  v78 = dword_1EE418968;
  v79 = dword_1EE418968;
  v80 = *(_QWORD *)(a1 + 448);
  v81 = (*(_QWORD *)(a1 + 456) - v80) >> 3;
  if (dword_1EE418968 <= v81)
  {
    if (dword_1EE418968 < v81)
      *(_QWORD *)(a1 + 456) = v80 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), dword_1EE418968 - v81);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v82 = *(_QWORD *)(a1 + 472);
  v83 = (*(_QWORD *)(a1 + 480) - v82) >> 3;
  if (v79 <= v83)
  {
    if (v79 < v83)
      *(_QWORD *)(a1 + 480) = v82 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v79 - v83);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v84 = *(_QWORD *)(a1 + 496);
  v85 = (*(_QWORD *)(a1 + 504) - v84) >> 3;
  if (v79 <= v85)
  {
    if (v79 < v85)
      *(_QWORD *)(a1 + 504) = v84 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v79 - v85);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v86 = *(_QWORD *)(a1 + 376);
  v87 = (*(_QWORD *)(a1 + 384) - v86) >> 3;
  if (v79 <= v87)
  {
    if (v79 < v87)
      *(_QWORD *)(a1 + 384) = v86 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v79 - v87);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v88 = *(_QWORD *)(a1 + 400);
  v89 = (*(_QWORD *)(a1 + 408) - v88) >> 3;
  if (v79 <= v89)
  {
    if (v79 < v89)
      *(_QWORD *)(a1 + 408) = v88 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v79 - v89);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v90 = *(_QWORD *)(a1 + 424);
  v91 = (*(_QWORD *)(a1 + 432) - v90) >> 3;
  if (v79 <= v91)
  {
    if (v79 < v91)
      *(_QWORD *)(a1 + 432) = v90 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v79 - v91);
    v78 = dword_1EE418968;
  }
  if (v78 >= 1)
  {
    v92 = 0;
    while (1)
    {
      v94 = *(unsigned int *)(a1 + 48);
      v95 = (void *)operator new[]();
      v96 = v95;
      if ((int)v94 >= 1)
        bzero(v95, 4 * v94);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v92) = v96;
      v97 = *(char **)(a1 + 2000);
      v98 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v97 < v98)
      {
        *(_QWORD *)v97 = v96;
        v99 = (uint64_t)(v97 + 8);
        goto LABEL_144;
      }
      v100 = *v16;
      v101 = v97 - *v16;
      v102 = v101 >> 3;
      v103 = (v101 >> 3) + 1;
      if (v103 >> 61)
        goto LABEL_543;
      v104 = v98 - (_QWORD)v100;
      if (v104 >> 2 > v103)
        v103 = v104 >> 2;
      v105 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v103;
      if (v105)
        break;
      v106 = 0;
      v107 = (_QWORD *)(8 * v102);
      *(_QWORD *)(8 * v102) = v96;
      v99 = 8 * v102 + 8;
      if (v97 != v100)
        goto LABEL_135;
LABEL_142:
      *(_QWORD *)(a1 + 1992) = v107;
      *(_QWORD *)(a1 + 2000) = v99;
      *(_QWORD *)(a1 + 2008) = &v106[8 * v105];
      if (v97)
        operator delete(v97);
LABEL_144:
      *(_QWORD *)(a1 + 2000) = v99;
      v117 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v92);
      v118 = 1;
      if (*(_BYTE *)(a1 + 40))
        v118 = 2;
      v119 = (uint64_t)(v117[1] - *v117) >> 2;
      if (v118 <= v119)
      {
        if (v118 < v119)
          v117[1] = *v117 + 4 * v118;
      }
      else
      {
        sub_19C101928((uint64_t)v117, v118 - v119);
      }
      v120 = *(unsigned int *)(a1 + 52);
      v121 = (void *)operator new[]();
      v122 = v121;
      if ((int)v120 >= 1)
        bzero(v121, 4 * v120);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v92) = v122;
      v123 = *(char **)(a1 + 2000);
      v124 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v123 < v124)
      {
        *(_QWORD *)v123 = v122;
        v125 = (uint64_t)(v123 + 8);
        goto LABEL_174;
      }
      v126 = *v16;
      v127 = v123 - *v16;
      v128 = v127 >> 3;
      v129 = (v127 >> 3) + 1;
      if (v129 >> 61)
        goto LABEL_543;
      v130 = v124 - (_QWORD)v126;
      if (v130 >> 2 > v129)
        v129 = v130 >> 2;
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
        v131 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v131 = v129;
      if (v131)
      {
        if (v131 >> 61)
          goto LABEL_544;
        v132 = operator new(8 * v131);
        v133 = &v132[8 * v128];
        *v133 = v122;
        v125 = (uint64_t)(v133 + 1);
        if (v123 == v126)
          goto LABEL_172;
LABEL_165:
        v134 = v123 - 8 - v126;
        if (v134 < 0x58)
          goto LABEL_560;
        if ((unint64_t)(v123 - &v132[v127]) < 0x20)
          goto LABEL_560;
        v135 = (v134 >> 3) + 1;
        v136 = 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
        v137 = &v123[-v136];
        v133 = (_QWORD *)((char *)v133 - v136);
        v138 = &v132[8 * v128 - 16];
        v139 = v123 - 16;
        v140 = v135 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v141 = *(_OWORD *)v139;
          *(v138 - 1) = *((_OWORD *)v139 - 1);
          *v138 = v141;
          v138 -= 2;
          v139 -= 32;
          v140 -= 4;
        }
        while (v140);
        v123 = v137;
        if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_560:
          do
          {
            v142 = *((_QWORD *)v123 - 1);
            v123 -= 8;
            *--v133 = v142;
          }
          while (v123 != v126);
        }
        v123 = *v16;
        goto LABEL_172;
      }
      v132 = 0;
      v133 = (_QWORD *)(8 * v128);
      *(_QWORD *)(8 * v128) = v122;
      v125 = 8 * v128 + 8;
      if (v123 != v126)
        goto LABEL_165;
LABEL_172:
      *(_QWORD *)(a1 + 1992) = v133;
      *(_QWORD *)(a1 + 2000) = v125;
      *(_QWORD *)(a1 + 2008) = &v132[8 * v131];
      if (v123)
        operator delete(v123);
LABEL_174:
      *(_QWORD *)(a1 + 2000) = v125;
      v143 = *(unsigned int *)(a1 + 52);
      v144 = (void *)operator new[]();
      v145 = v144;
      if ((int)v143 >= 1)
        bzero(v144, 4 * v143);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v92) = v145;
      v146 = *(char **)(a1 + 2000);
      v147 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v146 < v147)
      {
        *(_QWORD *)v146 = v145;
        v148 = (uint64_t)(v146 + 8);
        goto LABEL_198;
      }
      v149 = *v16;
      v150 = v146 - *v16;
      v151 = v150 >> 3;
      v152 = (v150 >> 3) + 1;
      if (v152 >> 61)
        goto LABEL_543;
      v153 = v147 - (_QWORD)v149;
      if (v153 >> 2 > v152)
        v152 = v153 >> 2;
      if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v154 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v154 = v152;
      if (v154)
      {
        if (v154 >> 61)
          goto LABEL_544;
        v155 = operator new(8 * v154);
        v156 = &v155[8 * v151];
        *v156 = v145;
        v148 = (uint64_t)(v156 + 1);
        if (v146 == v149)
          goto LABEL_196;
LABEL_189:
        v157 = v146 - 8 - v149;
        if (v157 < 0x58)
          goto LABEL_561;
        if ((unint64_t)(v146 - &v155[v150]) < 0x20)
          goto LABEL_561;
        v158 = (v157 >> 3) + 1;
        v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
        v160 = &v146[-v159];
        v156 = (_QWORD *)((char *)v156 - v159);
        v161 = &v155[8 * v151 - 16];
        v162 = v146 - 16;
        v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v164 = *(_OWORD *)v162;
          *(v161 - 1) = *((_OWORD *)v162 - 1);
          *v161 = v164;
          v161 -= 2;
          v162 -= 32;
          v163 -= 4;
        }
        while (v163);
        v146 = v160;
        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_561:
          do
          {
            v165 = *((_QWORD *)v146 - 1);
            v146 -= 8;
            *--v156 = v165;
          }
          while (v146 != v149);
        }
        v146 = *v16;
        goto LABEL_196;
      }
      v155 = 0;
      v156 = (_QWORD *)(8 * v151);
      *(_QWORD *)(8 * v151) = v145;
      v148 = 8 * v151 + 8;
      if (v146 != v149)
        goto LABEL_189;
LABEL_196:
      *(_QWORD *)(a1 + 1992) = v156;
      *(_QWORD *)(a1 + 2000) = v148;
      *(_QWORD *)(a1 + 2008) = &v155[8 * v154];
      if (v146)
        operator delete(v146);
LABEL_198:
      *(_QWORD *)(a1 + 2000) = v148;
      v166 = *(unsigned int *)(a1 + 52);
      v167 = (void *)operator new[]();
      v168 = v167;
      if ((int)v166 >= 1)
        bzero(v167, 4 * v166);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v92) = v168;
      v169 = *(char **)(a1 + 2000);
      v170 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v169 < v170)
      {
        *(_QWORD *)v169 = v168;
        v171 = (uint64_t)(v169 + 8);
        goto LABEL_222;
      }
      v172 = *v16;
      v173 = v169 - *v16;
      v174 = v173 >> 3;
      v175 = (v173 >> 3) + 1;
      if (v175 >> 61)
        goto LABEL_543;
      v176 = v170 - (_QWORD)v172;
      if (v176 >> 2 > v175)
        v175 = v176 >> 2;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
        v177 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        if (v177 >> 61)
          goto LABEL_544;
        v178 = operator new(8 * v177);
        v179 = &v178[8 * v174];
        *v179 = v168;
        v171 = (uint64_t)(v179 + 1);
        if (v169 == v172)
          goto LABEL_220;
LABEL_213:
        v180 = v169 - 8 - v172;
        if (v180 < 0x58)
          goto LABEL_562;
        if ((unint64_t)(v169 - &v178[v173]) < 0x20)
          goto LABEL_562;
        v181 = (v180 >> 3) + 1;
        v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
        v183 = &v169[-v182];
        v179 = (_QWORD *)((char *)v179 - v182);
        v184 = &v178[8 * v174 - 16];
        v185 = v169 - 16;
        v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v187 = *(_OWORD *)v185;
          *(v184 - 1) = *((_OWORD *)v185 - 1);
          *v184 = v187;
          v184 -= 2;
          v185 -= 32;
          v186 -= 4;
        }
        while (v186);
        v169 = v183;
        if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_562:
          do
          {
            v188 = *((_QWORD *)v169 - 1);
            v169 -= 8;
            *--v179 = v188;
          }
          while (v169 != v172);
        }
        v169 = *v16;
        goto LABEL_220;
      }
      v178 = 0;
      v179 = (_QWORD *)(8 * v174);
      *(_QWORD *)(8 * v174) = v168;
      v171 = 8 * v174 + 8;
      if (v169 != v172)
        goto LABEL_213;
LABEL_220:
      *(_QWORD *)(a1 + 1992) = v179;
      *(_QWORD *)(a1 + 2000) = v171;
      *(_QWORD *)(a1 + 2008) = &v178[8 * v177];
      if (v169)
        operator delete(v169);
LABEL_222:
      *(_QWORD *)(a1 + 2000) = v171;
      v189 = *(unsigned int *)(a1 + 52);
      v190 = (void *)operator new[]();
      v191 = v190;
      if ((int)v189 >= 1)
        bzero(v190, 4 * v189);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v92) = v191;
      v192 = *(char **)(a1 + 2000);
      v193 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v192 < v193)
      {
        *(_QWORD *)v192 = v191;
        v194 = (uint64_t)(v192 + 8);
        goto LABEL_246;
      }
      v195 = *v16;
      v196 = v192 - *v16;
      v197 = v196 >> 3;
      v198 = (v196 >> 3) + 1;
      if (v198 >> 61)
        goto LABEL_543;
      v199 = v193 - (_QWORD)v195;
      if (v199 >> 2 > v198)
        v198 = v199 >> 2;
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
        v200 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v200 = v198;
      if (v200)
      {
        if (v200 >> 61)
          goto LABEL_544;
        v201 = operator new(8 * v200);
        v202 = &v201[8 * v197];
        *v202 = v191;
        v194 = (uint64_t)(v202 + 1);
        if (v192 == v195)
          goto LABEL_244;
LABEL_237:
        v203 = v192 - 8 - v195;
        if (v203 < 0x58)
          goto LABEL_563;
        if ((unint64_t)(v192 - &v201[v196]) < 0x20)
          goto LABEL_563;
        v204 = (v203 >> 3) + 1;
        v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
        v206 = &v192[-v205];
        v202 = (_QWORD *)((char *)v202 - v205);
        v207 = &v201[8 * v197 - 16];
        v208 = v192 - 16;
        v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v210 = *(_OWORD *)v208;
          *(v207 - 1) = *((_OWORD *)v208 - 1);
          *v207 = v210;
          v207 -= 2;
          v208 -= 32;
          v209 -= 4;
        }
        while (v209);
        v192 = v206;
        if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_563:
          do
          {
            v211 = *((_QWORD *)v192 - 1);
            v192 -= 8;
            *--v202 = v211;
          }
          while (v192 != v195);
        }
        v192 = *v16;
        goto LABEL_244;
      }
      v201 = 0;
      v202 = (_QWORD *)(8 * v197);
      *(_QWORD *)(8 * v197) = v191;
      v194 = 8 * v197 + 8;
      if (v192 != v195)
        goto LABEL_237;
LABEL_244:
      *(_QWORD *)(a1 + 1992) = v202;
      *(_QWORD *)(a1 + 2000) = v194;
      *(_QWORD *)(a1 + 2008) = &v201[8 * v200];
      if (v192)
        operator delete(v192);
LABEL_246:
      *(_QWORD *)(a1 + 2000) = v194;
      v212 = *(unsigned int *)(a1 + 52);
      v213 = (void *)operator new[]();
      v214 = v213;
      if ((int)v212 >= 1)
        bzero(v213, 4 * v212);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v92) = v214;
      v215 = *(char **)(a1 + 2000);
      v216 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v215 < v216)
      {
        *(_QWORD *)v215 = v214;
        v217 = (uint64_t)(v215 + 8);
        goto LABEL_270;
      }
      v218 = *v16;
      v219 = v215 - *v16;
      v220 = v219 >> 3;
      v221 = (v219 >> 3) + 1;
      if (v221 >> 61)
        goto LABEL_543;
      v222 = v216 - (_QWORD)v218;
      if (v222 >> 2 > v221)
        v221 = v222 >> 2;
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
        v223 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v223 = v221;
      if (v223)
      {
        if (v223 >> 61)
          goto LABEL_544;
        v224 = operator new(8 * v223);
        v225 = &v224[8 * v220];
        *v225 = v214;
        v217 = (uint64_t)(v225 + 1);
        if (v215 == v218)
          goto LABEL_268;
LABEL_261:
        v226 = v215 - 8 - v218;
        if (v226 < 0x58)
          goto LABEL_564;
        if ((unint64_t)(v215 - &v224[v219]) < 0x20)
          goto LABEL_564;
        v227 = (v226 >> 3) + 1;
        v228 = 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
        v229 = &v215[-v228];
        v225 = (_QWORD *)((char *)v225 - v228);
        v230 = &v224[8 * v220 - 16];
        v231 = v215 - 16;
        v232 = v227 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v233 = *(_OWORD *)v231;
          *(v230 - 1) = *((_OWORD *)v231 - 1);
          *v230 = v233;
          v230 -= 2;
          v231 -= 32;
          v232 -= 4;
        }
        while (v232);
        v215 = v229;
        if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_564:
          do
          {
            v234 = *((_QWORD *)v215 - 1);
            v215 -= 8;
            *--v225 = v234;
          }
          while (v215 != v218);
        }
        v215 = *v16;
        goto LABEL_268;
      }
      v224 = 0;
      v225 = (_QWORD *)(8 * v220);
      *(_QWORD *)(8 * v220) = v214;
      v217 = 8 * v220 + 8;
      if (v215 != v218)
        goto LABEL_261;
LABEL_268:
      *(_QWORD *)(a1 + 1992) = v225;
      *(_QWORD *)(a1 + 2000) = v217;
      *(_QWORD *)(a1 + 2008) = &v224[8 * v223];
      if (v215)
        operator delete(v215);
LABEL_270:
      *(_QWORD *)(a1 + 2000) = v217;
      v235 = *(unsigned int *)(a1 + 52);
      v236 = (void *)operator new[]();
      v237 = v236;
      if ((int)v235 >= 1)
        bzero(v236, 4 * v235);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v92) = v237;
      v238 = *(char **)(a1 + 2000);
      v239 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v238 < v239)
      {
        *(_QWORD *)v238 = v237;
        v240 = (uint64_t)(v238 + 8);
        goto LABEL_294;
      }
      v241 = *v16;
      v242 = v238 - *v16;
      v243 = v242 >> 3;
      v244 = (v242 >> 3) + 1;
      if (v244 >> 61)
        goto LABEL_543;
      v245 = v239 - (_QWORD)v241;
      if (v245 >> 2 > v244)
        v244 = v245 >> 2;
      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
        v246 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v246 = v244;
      if (v246)
      {
        if (v246 >> 61)
          goto LABEL_544;
        v247 = operator new(8 * v246);
        v248 = &v247[8 * v243];
        *v248 = v237;
        v240 = (uint64_t)(v248 + 1);
        if (v238 == v241)
          goto LABEL_292;
LABEL_285:
        v249 = v238 - 8 - v241;
        if (v249 < 0x58)
          goto LABEL_565;
        if ((unint64_t)(v238 - &v247[v242]) < 0x20)
          goto LABEL_565;
        v250 = (v249 >> 3) + 1;
        v251 = 8 * (v250 & 0x3FFFFFFFFFFFFFFCLL);
        v252 = &v238[-v251];
        v248 = (_QWORD *)((char *)v248 - v251);
        v253 = &v247[8 * v243 - 16];
        v254 = v238 - 16;
        v255 = v250 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v256 = *(_OWORD *)v254;
          *(v253 - 1) = *((_OWORD *)v254 - 1);
          *v253 = v256;
          v253 -= 2;
          v254 -= 32;
          v255 -= 4;
        }
        while (v255);
        v238 = v252;
        if (v250 != (v250 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_565:
          do
          {
            v257 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v248 = v257;
          }
          while (v238 != v241);
        }
        v238 = *v16;
        goto LABEL_292;
      }
      v247 = 0;
      v248 = (_QWORD *)(8 * v243);
      *(_QWORD *)(8 * v243) = v237;
      v240 = 8 * v243 + 8;
      if (v238 != v241)
        goto LABEL_285;
LABEL_292:
      *(_QWORD *)(a1 + 1992) = v248;
      *(_QWORD *)(a1 + 2000) = v240;
      *(_QWORD *)(a1 + 2008) = &v247[8 * v246];
      if (v238)
        operator delete(v238);
LABEL_294:
      *(_QWORD *)(a1 + 2000) = v240;
      v258 = *(unsigned int *)(a1 + 52);
      v259 = (void *)operator new[]();
      v260 = v259;
      if ((int)v258 >= 1)
        bzero(v259, 4 * v258);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v92) = v260;
      v261 = *(char **)(a1 + 2000);
      v262 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v261 < v262)
      {
        *(_QWORD *)v261 = v260;
        v263 = (uint64_t)(v261 + 8);
        goto LABEL_318;
      }
      v264 = *v16;
      v265 = v261 - *v16;
      v266 = v265 >> 3;
      v267 = (v265 >> 3) + 1;
      if (v267 >> 61)
        goto LABEL_543;
      v268 = v262 - (_QWORD)v264;
      if (v268 >> 2 > v267)
        v267 = v268 >> 2;
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
        v269 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v269 = v267;
      if (v269)
      {
        if (v269 >> 61)
          goto LABEL_544;
        v270 = operator new(8 * v269);
        v271 = &v270[8 * v266];
        *v271 = v260;
        v263 = (uint64_t)(v271 + 1);
        if (v261 == v264)
          goto LABEL_316;
LABEL_309:
        v272 = v261 - 8 - v264;
        if (v272 < 0x58)
          goto LABEL_566;
        if ((unint64_t)(v261 - &v270[v265]) < 0x20)
          goto LABEL_566;
        v273 = (v272 >> 3) + 1;
        v274 = 8 * (v273 & 0x3FFFFFFFFFFFFFFCLL);
        v275 = &v261[-v274];
        v271 = (_QWORD *)((char *)v271 - v274);
        v276 = &v270[8 * v266 - 16];
        v277 = v261 - 16;
        v278 = v273 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v279 = *(_OWORD *)v277;
          *(v276 - 1) = *((_OWORD *)v277 - 1);
          *v276 = v279;
          v276 -= 2;
          v277 -= 32;
          v278 -= 4;
        }
        while (v278);
        v261 = v275;
        if (v273 != (v273 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_566:
          do
          {
            v280 = *((_QWORD *)v261 - 1);
            v261 -= 8;
            *--v271 = v280;
          }
          while (v261 != v264);
        }
        v261 = *v16;
        goto LABEL_316;
      }
      v270 = 0;
      v271 = (_QWORD *)(8 * v266);
      *(_QWORD *)(8 * v266) = v260;
      v263 = 8 * v266 + 8;
      if (v261 != v264)
        goto LABEL_309;
LABEL_316:
      *(_QWORD *)(a1 + 1992) = v271;
      *(_QWORD *)(a1 + 2000) = v263;
      *(_QWORD *)(a1 + 2008) = &v270[8 * v269];
      if (v261)
        operator delete(v261);
LABEL_318:
      *(_QWORD *)(a1 + 2000) = v263;
      v281 = *(unsigned int *)(a1 + 52);
      v282 = (void *)operator new[]();
      v283 = v282;
      if ((int)v281 >= 1)
        bzero(v282, 4 * v281);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v92) = v283;
      v284 = *(char **)(a1 + 2000);
      v285 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v284 >= v285)
      {
        v286 = *v16;
        v287 = v284 - *v16;
        v288 = v287 >> 3;
        v289 = (v287 >> 3) + 1;
        if (v289 >> 61)
          goto LABEL_543;
        v290 = v285 - (_QWORD)v286;
        if (v290 >> 2 > v289)
          v289 = v290 >> 2;
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v289;
        if (v291)
        {
          if (v291 >> 61)
            goto LABEL_544;
          v292 = operator new(8 * v291);
          v293 = &v292[8 * v288];
          *v293 = v283;
          v93 = (uint64_t)(v293 + 1);
          if (v284 == v286)
            goto LABEL_339;
LABEL_332:
          v294 = v284 - 8 - v286;
          if (v294 < 0x58)
            goto LABEL_567;
          if ((unint64_t)(v284 - &v292[v287]) < 0x20)
            goto LABEL_567;
          v295 = (v294 >> 3) + 1;
          v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
          v297 = &v284[-v296];
          v293 = (_QWORD *)((char *)v293 - v296);
          v298 = &v292[8 * v288 - 16];
          v299 = v284 - 16;
          v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            *v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          v284 = v297;
          if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_567:
            do
            {
              v302 = *((_QWORD *)v284 - 1);
              v284 -= 8;
              *--v293 = v302;
            }
            while (v284 != v286);
          }
          v284 = *v16;
        }
        else
        {
          v292 = 0;
          v293 = (_QWORD *)(8 * v288);
          *(_QWORD *)(8 * v288) = v283;
          v93 = 8 * v288 + 8;
          if (v284 != v286)
            goto LABEL_332;
        }
LABEL_339:
        *(_QWORD *)(a1 + 1992) = v293;
        *(_QWORD *)(a1 + 2000) = v93;
        *(_QWORD *)(a1 + 2008) = &v292[8 * v291];
        if (v284)
          operator delete(v284);
        goto LABEL_119;
      }
      *(_QWORD *)v284 = v283;
      v93 = (uint64_t)(v284 + 8);
LABEL_119:
      *(_QWORD *)(a1 + 2000) = v93;
      if (++v92 >= dword_1EE418968)
        return;
    }
    if (v105 >> 61)
      goto LABEL_544;
    v106 = operator new(8 * v105);
    v107 = &v106[8 * v102];
    *v107 = v96;
    v99 = (uint64_t)(v107 + 1);
    if (v97 == v100)
      goto LABEL_142;
LABEL_135:
    v108 = v97 - 8 - v100;
    if (v108 < 0x58)
      goto LABEL_568;
    if ((unint64_t)(v97 - &v106[v101]) < 0x20)
      goto LABEL_568;
    v109 = (v108 >> 3) + 1;
    v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
    v111 = &v97[-v110];
    v107 = (_QWORD *)((char *)v107 - v110);
    v112 = &v106[8 * v102 - 16];
    v113 = v97 - 16;
    v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v115 = *(_OWORD *)v113;
      *(v112 - 1) = *((_OWORD *)v113 - 1);
      *v112 = v115;
      v112 -= 2;
      v113 -= 32;
      v114 -= 4;
    }
    while (v114);
    v97 = v111;
    if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_568:
      do
      {
        v116 = *((_QWORD *)v97 - 1);
        v97 -= 8;
        *--v107 = v116;
      }
      while (v97 != v100);
    }
    v97 = *v16;
    goto LABEL_142;
  }
}

void sub_19C138644()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C138654(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19C13865C(uint64_t a1)
{
  return a1 + 112;
}

void sub_19C138664()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C138674(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19C13867C()
{
  return 0;
}

_BYTE *sub_19C138684(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 312);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1985);
  v24 = sub_19C2210B4();
  sub_19C101DB0(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(_BYTE **)(a1 + 304);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1985);
  v28 = sub_19C2210B4();
  sub_19C101DB0(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v29 = *(_BYTE **)(a1 + 320);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1985);
  v32 = sub_19C2210B4();
  sub_19C101DB0(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v33 = *(_BYTE **)(a1 + 336);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1985);
  v36 = sub_19C2210B4();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v37 = *(_BYTE **)(a1 + 328);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1985);
  v40 = sub_19C2210B4();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v41 = *(_BYTE **)(a1 + 344);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1985);
  v44 = sub_19C2210B4();
  return sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C138904(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  unint64_t *v11;
  int v12;
  unint64_t *v13;
  int v14;
  unint64_t *v15;
  int v16;
  unint64_t *v17;
  int v18;
  unint64_t *v19;
  int v20;
  unint64_t *v21;
  int v22;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(unint64_t **)(a1 + 312);
  v12 = sub_19C2210B4();
  sub_19C12CAAC(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v13 = *(unint64_t **)(a1 + 304);
  v14 = sub_19C2210B4();
  sub_19C12CAAC(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v15 = *(unint64_t **)(a1 + 320);
  v16 = sub_19C2210B4();
  sub_19C12CAAC(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v17 = *(unint64_t **)(a1 + 336);
  v18 = sub_19C2210B4();
  sub_19C12CAAC(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v19 = *(unint64_t **)(a1 + 328);
  v20 = sub_19C2210B4();
  sub_19C12CAAC(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v21 = *(unint64_t **)(a1 + 344);
  v22 = sub_19C2210B4();
  sub_19C12CAAC(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

_QWORD *sub_19C138AF0(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = *(_DWORD *)(a1 + 52);
    v8 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v8 < 1)
      goto LABEL_16;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
  v7 = *(_DWORD *)(a1 + 52);
  v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 < 1)
    goto LABEL_16;
LABEL_7:
  v9 = 0;
  v10 = *(_QWORD **)(a1 + 312);
  v11 = (_QWORD *)result[39];
  v12 = (_QWORD *)v5[39];
  do
  {
    *(_BYTE *)(*v10 + v9) = *(_BYTE *)(*v11 + v9) - *(_BYTE *)(*v12 + v9);
    ++v9;
  }
  while (v8 != v9);
  v7 = *(_DWORD *)(a1 + 52);
  v13 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD **)(a1 + 320);
    v16 = (_QWORD *)result[40];
    v17 = (_QWORD *)v5[40];
    do
    {
      *(_BYTE *)(*v15 + v14) = *(_BYTE *)(*v16 + v14) - *(_BYTE *)(*v17 + v14);
      ++v14;
    }
    while (v13 != v14);
    v7 = *(_DWORD *)(a1 + 52);
    v18 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v18 >= 1)
    {
      v19 = 0;
      v20 = *(_QWORD **)(a1 + 304);
      v21 = (_QWORD *)result[38];
      v22 = (_QWORD *)v5[38];
      do
      {
        *(_BYTE *)(*v20 + v19) = *(_BYTE *)(*v21 + v19) - *(_BYTE *)(*v22 + v19);
        ++v19;
      }
      while (v18 != v19);
      v7 = *(_DWORD *)(a1 + 52);
    }
  }
LABEL_16:
  if (v7)
  {
    v23 = 0;
    v24 = *(_QWORD **)(a1 + 336);
    v25 = (_QWORD *)result[42];
    v26 = (v7 * v7);
    v27 = (_QWORD *)v5[42];
    do
    {
      *(_BYTE *)(*v24 + v23) = *(_BYTE *)(*v25 + v23) - *(_BYTE *)(*v27 + v23);
      ++v23;
    }
    while (v26 != v23);
    v28 = *(_DWORD *)(a1 + 52);
    if (v28)
    {
      v29 = 0;
      v30 = *(_QWORD **)(a1 + 344);
      v31 = (_QWORD *)result[43];
      v32 = (v28 * v28);
      v33 = (_QWORD *)v5[43];
      do
      {
        *(_BYTE *)(*v30 + v29) = *(_BYTE *)(*v31 + v29) - *(_BYTE *)(*v33 + v29);
        ++v29;
      }
      while (v32 != v29);
      v34 = *(_DWORD *)(a1 + 52);
      if (v34)
      {
        v35 = 0;
        v36 = *(_QWORD **)(a1 + 328);
        v37 = (_QWORD *)result[41];
        v38 = (v34 * v34);
        v39 = (_QWORD *)v5[41];
        do
        {
          *(_BYTE *)(*v36 + v35) = *(_BYTE *)(*v37 + v35) - *(_BYTE *)(*v39 + v35);
          ++v35;
        }
        while (v38 != v35);
      }
    }
  }
  return result;
}

void *sub_19C138D24(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
  return result;
}

_QWORD *sub_19C138D8C(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
    v4 = *(_DWORD *)(a1 + 52);
    v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1)
      goto LABEL_14;
  }
  else
  {
    result = 0;
    v4 = *(_DWORD *)(a1 + 52);
    v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1)
      goto LABEL_14;
  }
  v6 = 0;
  v7 = *(_QWORD **)(a1 + 312);
  v8 = (_QWORD *)result[39];
  do
  {
    *(_BYTE *)(*v7 + v6) += *(_BYTE *)(*v8 + v6);
    ++v6;
  }
  while (v5 != v6);
  v4 = *(_DWORD *)(a1 + 52);
  v9 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(_QWORD **)(a1 + 304);
    v12 = (_QWORD *)result[38];
    do
    {
      *(_BYTE *)(*v11 + v10) += *(_BYTE *)(*v12 + v10);
      ++v10;
    }
    while (v9 != v10);
    v4 = *(_DWORD *)(a1 + 52);
    v13 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD **)(a1 + 320);
      v16 = (_QWORD *)result[40];
      do
      {
        *(_BYTE *)(*v15 + v14) += *(_BYTE *)(*v16 + v14);
        ++v14;
      }
      while (v13 != v14);
      v4 = *(_DWORD *)(a1 + 52);
    }
  }
LABEL_14:
  if (v4)
  {
    v17 = 0;
    v18 = *(_QWORD **)(a1 + 336);
    v19 = (_QWORD *)result[42];
    v20 = (v4 * v4);
    do
    {
      *(_BYTE *)(*v18 + v17) += *(_BYTE *)(*v19 + v17);
      ++v17;
    }
    while (v20 != v17);
    v21 = *(_DWORD *)(a1 + 52);
    if (v21)
    {
      v22 = 0;
      v23 = *(_QWORD **)(a1 + 328);
      v24 = (_QWORD *)result[41];
      v25 = (v21 * v21);
      do
      {
        *(_BYTE *)(*v23 + v22) += *(_BYTE *)(*v24 + v22);
        ++v22;
      }
      while (v25 != v22);
      v26 = *(_DWORD *)(a1 + 52);
      if (v26)
      {
        v27 = 0;
        v28 = *(_QWORD **)(a1 + 344);
        v29 = (_QWORD *)result[43];
        v30 = (v26 * v26);
        do
        {
          *(_BYTE *)(*v28 + v27) += *(_BYTE *)(*v29 + v27);
          ++v27;
        }
        while (v30 != v27);
      }
    }
  }
  return result;
}

void sub_19C138F58(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1128) + 64))(*(_QWORD *)(a1 + 1128));
  sub_19C2210D4(23);
}

uint64_t sub_19C138FA4(uint64_t result, float a2, double a3, double a4)
{
  float v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  float v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  float v32;

  v4 = -a2;
  v5 = *(_DWORD *)(result + 52);
  v6 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD **)(result + 312);
    do
    {
      LOBYTE(a4) = *(_BYTE *)(*v8 + v7);
      *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      v9 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v9 > a2))
        *(_BYTE *)(*v8 + v7) = (int)*(float *)&a4;
      ++v7;
    }
    while (v6 != v7);
    v5 = *(_DWORD *)(result + 52);
    v11 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD **)(result + 304);
      do
      {
        LOBYTE(a4) = *(_BYTE *)(*v13 + v12);
        *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        v14 = (float)SLODWORD(a4);
        v10 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v10 || (*(float *)&a4 = a2, v14 > a2))
          *(_BYTE *)(*v13 + v12) = (int)*(float *)&a4;
        ++v12;
      }
      while (v11 != v12);
      v5 = *(_DWORD *)(result + 52);
      v15 = (*(_DWORD *)(result + 48) * v5);
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v17 = *(_QWORD **)(result + 320);
        do
        {
          LOBYTE(a4) = *(_BYTE *)(*v17 + v16);
          *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          v18 = (float)SLODWORD(a4);
          v10 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v10 || (*(float *)&a4 = a2, v18 > a2))
            *(_BYTE *)(*v17 + v16) = (int)*(float *)&a4;
          ++v16;
        }
        while (v15 != v16);
        v5 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v5)
  {
    v19 = 0;
    v20 = *(_QWORD **)(result + 336);
    v21 = (v5 * v5);
    do
    {
      LOBYTE(a4) = *(_BYTE *)(*v20 + v19);
      *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      v22 = (float)SLODWORD(a4);
      v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v22 > a2))
        *(_BYTE *)(*v20 + v19) = (int)*(float *)&a4;
      ++v19;
    }
    while (v21 != v19);
    v23 = *(_DWORD *)(result + 52);
    if (v23)
    {
      v24 = 0;
      v25 = *(_QWORD **)(result + 328);
      v26 = (v23 * v23);
      do
      {
        LOBYTE(a4) = *(_BYTE *)(*v25 + v24);
        *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        v27 = (float)SLODWORD(a4);
        v10 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v10 || (*(float *)&a4 = a2, v27 > a2))
          *(_BYTE *)(*v25 + v24) = (int)*(float *)&a4;
        ++v24;
      }
      while (v26 != v24);
      v28 = *(_DWORD *)(result + 52);
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD **)(result + 344);
        v31 = (v28 * v28);
        do
        {
          LOBYTE(a4) = *(_BYTE *)(*v30 + v29);
          *(_QWORD *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          v32 = (float)SLODWORD(a4);
          v10 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v10 || (*(float *)&a4 = a2, v32 > a2))
            *(_BYTE *)(*v30 + v29) = (int)*(float *)&a4;
          ++v29;
        }
        while (v31 != v29);
      }
    }
  }
  return result;
}

uint64_t sub_19C1391E0(uint64_t result, float a2, double a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v3 = *(_DWORD *)(result + 52);
  v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(result + 312);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v6 + v5);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v6 + v5++) = (int)*(float *)&a3;
    }
    while (v4 != v5);
    v3 = *(_DWORD *)(result + 52);
    v7 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD **)(result + 312);
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*v9 + v8);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(_BYTE *)(*v9 + v8++) = (int)*(float *)&a3;
      }
      while (v7 != v8);
      v3 = *(_DWORD *)(result + 52);
      v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = *(_QWORD **)(result + 320);
        do
        {
          LOBYTE(a3) = *(_BYTE *)(*v12 + v11);
          *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(_BYTE *)(*v12 + v11++) = (int)*(float *)&a3;
        }
        while (v10 != v11);
        v3 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v3)
  {
    v13 = 0;
    v14 = *(_QWORD **)(result + 336);
    v15 = (v3 * v3);
    do
    {
      LOBYTE(a3) = *(_BYTE *)(*v14 + v13);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(_BYTE *)(*v14 + v13++) = (int)*(float *)&a3;
    }
    while (v15 != v13);
    v16 = *(_DWORD *)(result + 52);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD **)(result + 328);
      v19 = (v16 * v16);
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*v18 + v17);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(_BYTE *)(*v18 + v17++) = (int)*(float *)&a3;
      }
      while (v19 != v17);
      v20 = *(_DWORD *)(result + 52);
      if (v20)
      {
        v21 = 0;
        v22 = *(_QWORD **)(result + 344);
        v23 = (v20 * v20);
        do
        {
          LOBYTE(a3) = *(_BYTE *)(*v22 + v21);
          *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(_BYTE *)(*v22 + v21++) = (int)*(float *)&a3;
        }
        while (v23 != v21);
      }
    }
  }
  return result;
}

void sub_19C139370(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 52);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = (char *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)*a2;
    v12 = (uint64_t)&v9[-*a2] >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      goto LABEL_40;
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        goto LABEL_41;
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = (char *)*a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
  v18 = (_QWORD *)operator new();
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  *v18 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  v21 = *(_DWORD *)(a1 + 52);
  v23 = (char *)a2[1];
  v22 = a2[2];
  if ((unint64_t)v23 < v22)
  {
    *(_DWORD *)v23 = v21;
    *((_QWORD *)v23 + 1) = v18;
    v24 = v23 + 16;
    goto LABEL_39;
  }
  v25 = (char *)*a2;
  v26 = (uint64_t)&v23[-*a2] >> 4;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60)
LABEL_40:
    sub_19C07DA0C();
  v28 = v22 - (_QWORD)v25;
  if (v28 >> 3 > v27)
    v27 = v28 >> 3;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
    v29 = 0xFFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (!v29)
  {
    v30 = 0;
    goto LABEL_34;
  }
  if (v29 >> 60)
LABEL_41:
    sub_19C07C7FC();
  v30 = (char *)operator new(16 * v29);
LABEL_34:
  v31 = &v30[16 * v26];
  *(_DWORD *)v31 = v21;
  *((_QWORD *)v31 + 1) = v18;
  v24 = v31 + 16;
  if (v23 != v25)
  {
    do
    {
      *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
      v31 -= 16;
      v23 -= 16;
    }
    while (v23 != v25);
    v23 = (char *)*a2;
  }
  *a2 = v31;
  a2[1] = v24;
  a2[2] = &v30[16 * v29];
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v24;
}

void sub_19C139614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C139628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C13963C(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v7 = *(int *)(a1 + 52);
  v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + v9), 4 * v7);
  v10 = *a4;
  *a4 = v10 + 1;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19C1396E8(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a1 + 112);
  v8 = 8 * a3;
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + v8), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void sub_19C139774(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19C1397E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];

  v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[140] + 16))(a1[140]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[141] + 16))(a1[141]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[142] + 16))(a1[142]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[143] + 16))(a1[143]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[144] + 16))(a1[144]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[145] + 16))(a1[145]);
  v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
}

void sub_19C139B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C139B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;

  v4 = **(_QWORD **)(a1 + 304);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_74;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_75;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 312);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_74;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_75;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 320);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_74;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_75;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 328);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_74;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_75;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v58 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v59 = **(_QWORD **)(a1 + 336);
  v60 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *v49 = v59;
    v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  v62 = *(_QWORD **)a2;
  v63 = (uint64_t)v49 - *(_QWORD *)a2;
  v64 = (v63 >> 4) + 1;
  if (v64 >> 60)
    goto LABEL_74;
  v65 = v60 - (_QWORD)v62;
  if (v65 >> 3 > v64)
    v64 = v65 >> 3;
  v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v66 = v64;
  if (v66 >> 60)
LABEL_75:
    sub_19C07C7FC();
  v67 = 16 * v66;
  v68 = (char *)operator new(16 * v66);
  v69 = &v68[16 * (v63 >> 4)];
  *(_QWORD *)v69 = v59;
  v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((_QWORD *)v69 + 1) = v49[1])
  {
    v70 = *(v49 - 2);
    v49 -= 2;
    *((_QWORD *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(_QWORD *)a2 = v69;
  *(_QWORD *)(a2 + 8) = v61;
  *(_QWORD *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(_QWORD *)(a2 + 8) = v61;
  v71 = **(_QWORD **)(a1 + 344);
  v72 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *v61 = v71;
    v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  v74 = *(_QWORD **)a2;
  v75 = (uint64_t)v61 - *(_QWORD *)a2;
  v76 = (v75 >> 4) + 1;
  if (v76 >> 60)
LABEL_74:
    sub_19C07DA0C();
  v77 = v72 - (_QWORD)v74;
  if (v77 >> 3 > v76)
    v76 = v77 >> 3;
  v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v78 = v76;
  if (v78 >> 60)
    goto LABEL_75;
  v79 = 16 * v78;
  v80 = (char *)operator new(16 * v78);
  v81 = &v80[16 * (v75 >> 4)];
  *(_QWORD *)v81 = v71;
  v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((_QWORD *)v81 + 1) = v61[1])
  {
    v82 = *(v61 - 2);
    v61 -= 2;
    *((_QWORD *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(_QWORD *)a2 = v81;
  *(_QWORD *)(a2 + 8) = v73;
  *(_QWORD *)(a2 + 16) = &v80[v79];
  if (v74)
    operator delete(v74);
LABEL_73:
  *(_QWORD *)(a2 + 8) = v73;
}

uint64_t sub_19C13A07C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C13A088(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C13A090(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from allocAll");
  sub_19C136380(a1);
  operator delete(__p);
}

void sub_19C13A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C13A130(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;

  v2 = a1[250];
  v3 = a1[249];
  if (v2 == v3)
  {
    v3 = a1[250];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[250];
        v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[253];
  v7 = a1[252];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[253];
        v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    v10 = a1[102];
    v11 = a1[101];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  v10 = a1[102];
  v11 = a1[101];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[102];
      v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  v16 = a1[132];
  v17 = a1[131];
  if (v16 == v17)
  {
    v17 = a1[132];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[132];
        v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  v22 = a1[117];
  v23 = a1[116];
  if (v22 == v23)
  {
    v23 = a1[117];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[117];
        v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19C13A330(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C13A338(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C13A344(uint64_t result, float a2, double a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = (int)a2;
  if (*(int *)(result + 56) < 1)
  {
    v6 = v4 * *(_DWORD *)(result + 48);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = (float)v5;
      do
      {
        v9 = *(_QWORD *)(result + 240);
        LOBYTE(a3) = *(_BYTE *)(v9 + v7);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1072) + 4 * v7) * v8);
        *(_BYTE *)(v9 + v7++) = (int)*(float *)&a3;
      }
      while (v6 != v7);
      for (i = 0; i != v6; ++i)
      {
        v11 = *(_QWORD *)(result + 248);
        LOBYTE(a3) = *(_BYTE *)(v11 + i);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1088) + 4 * i) * v8);
        *(_BYTE *)(v11 + i) = (int)*(float *)&a3;
      }
      for (j = 0; j != v6; ++j)
      {
        v13 = *(_QWORD *)(result + 232);
        LOBYTE(a3) = *(_BYTE *)(v13 + j);
        *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(result + 1080) + 4 * j) * v8);
        *(_BYTE *)(v13 + j) = (int)*(float *)&a3;
      }
    }
  }
  else
  {
    sub_19C12CDA8(result + 712, (float)v5, result + 240, v4);
    sub_19C12CDA8(v3 + 952, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    result = sub_19C12CDA8(v3 + 832, (float)v5, v3 + 232, *(_DWORD *)(v3 + 52));
  }
  if (v4)
  {
    v14 = 0;
    v15 = v4 * v4;
    v16 = (float)v5;
    do
    {
      v17 = *(_QWORD *)(v3 + 264);
      LOBYTE(a3) = *(_BYTE *)(v17 + v14);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1096) + 4 * v14) * v16);
      *(_BYTE *)(v17 + v14++) = (int)*(float *)&a3;
    }
    while (v15 != v14);
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v3 + 272);
      LOBYTE(a3) = *(_BYTE *)(v19 + v18);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1112) + 4 * v18) * v16);
      *(_BYTE *)(v19 + v18++) = (int)*(float *)&a3;
    }
    while (v15 != v18);
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v3 + 256);
      LOBYTE(a3) = *(_BYTE *)(v21 + v20);
      *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(_QWORD *)(v3 + 1104) + 4 * v20) * v16);
      *(_BYTE *)(v21 + v20++) = (int)*(float *)&a3;
    }
    while (v15 != v20);
  }
  return result;
}

void sub_19C13A534(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  float32x4_t **v6;
  int v7;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int v22;
  float *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t v45;
  uint64_t v46;
  float *v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  int v68;
  uint64_t v69;
  char *v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x4_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v120;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  float32x4_t v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  float32x4_t *v146;
  float32x4_t *v147;
  int v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int v152;
  uint64_t v153;
  float32x4_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v160;
  uint64_t v161;
  float32x4_t *v162;
  float32x4_t *v163;
  float32x4_t v164;
  uint64_t v165;
  float *v166;
  float *v167;
  float v168;
  uint64_t *v169;
  int v170;
  float32x4_t *v171;
  float32x4_t *v172;
  float32x4_t *v173;
  uint64_t v174;
  float32x4_t v175;
  float32x4_t *v176;
  uint64_t v177;
  float32x4_t v178;
  uint64_t v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t *v183;
  float32x4_t *v184;
  float32x4_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t v197;
  uint64_t v198;
  float *v199;
  float *v200;
  float v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  float32x4_t *v205;
  float32x4_t *v206;
  int v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int v211;
  uint64_t v212;
  float32x4_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v219;
  uint64_t v220;
  float32x4_t *v221;
  float32x4_t *v222;
  float32x4_t v223;
  uint64_t v224;
  float *v225;
  float *v226;
  float v227;
  float **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x4_t *v232;
  float32x4_t *v233;
  int v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v246;
  uint64_t v247;
  float32x4_t *v248;
  float32x4_t *v249;
  float32x4_t v250;
  uint64_t v251;
  float *v252;
  float *v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  float32x4_t *v258;
  float32x4_t *v259;
  int v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v272;
  uint64_t v273;
  float32x4_t *v274;
  float32x4_t *v275;
  float32x4_t v276;
  uint64_t v277;
  float *v278;
  float *v279;
  float v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  NSObject *global_queue;
  uint64_t v287;
  uint64_t v288;
  size_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  size_t v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  NSObject *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  size_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  size_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _BYTE *v322;
  _BYTE *v323;
  size_t v324;
  int v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  size_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __int128 *v338;
  _OWORD *v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  int *v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  _BYTE *v351;
  size_t v352;
  int v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 *v360;
  _OWORD *v361;
  uint64_t v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  int *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _BYTE *v372;
  _BYTE *v373;
  size_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  __int128 *v380;
  _OWORD *v381;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  int *v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  float **v391;
  void **v395;
  int v396;
  uint64_t v397;
  void **v398;
  uint64_t v399;
  int v400;
  uint64_t block;
  uint64_t v402;
  void (*v403)(uint64_t, uint64_t);
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;

  v400 = a5 - 1;
  if (a5 >= 1)
  {
    v391 = (float **)(a1 + 704);
    v398 = (void **)(a1 + 1168);
    v395 = (void **)(a1 + 1184);
    v6 = (float32x4_t **)(a1 + 1176);
    v7 = a5 - 1;
    while (1)
    {
      v9 = *(unsigned __int8 *)(a1 + 2040);
      if (*(_BYTE *)(a1 + 2040))
        v10 = v400 - v7;
      else
        v10 = v7;
      if (*(_BYTE *)(a1 + 2040))
        v11 = v10 < v400;
      else
        v11 = v10 > 0;
      if (*(_BYTE *)(a1 + 2040))
        v12 = v10 > 0;
      else
        v12 = v10 < v400;
      v13 = v10 - 1;
      if (*(_BYTE *)(a1 + 2040))
        v14 = v10 + 1;
      else
        v14 = v10 - 1;
      v396 = v14;
      memmove(*(void **)(*(_QWORD *)(a1 + 584) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      v15 = 8 * v10;
      if (v12)
      {
        if (!v9)
          v13 = v10 + 1;
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        sub_19C12CFAC(v391, (_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v13), *(_QWORD **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        v16 = *(_QWORD *)(a1 + 584);
        v17 = *(_QWORD *)(a1 + 472);
        v18 = *(int *)(a1 + 52);
        v19 = (int)v18 / 8;
        if ((int)v18 >= 8)
        {
          v20 = *(float32x4_t **)(v16 + 8 * v10);
          v21 = *(float32x4_t **)(v17 + 8 * v13);
          v22 = (int)v18 / 8;
          v23 = *v391;
          do
          {
            v25 = *(float32x4_t *)v23;
            v24 = *(float32x4_t *)(v23 + 4);
            v23 += 8;
            v27 = *v21;
            v26 = v21[1];
            v21 += 2;
            v28 = vmlaq_f32(v20[1], v26, v24);
            *v20 = vmlaq_f32(*v20, v27, v25);
            v20[1] = v28;
            v20 += 2;
            --v22;
          }
          while (v22);
        }
        v29 = 8 * v19;
        if (8 * v19 < (int)v18)
        {
          v30 = *(_QWORD *)(v17 + 8 * v13);
          v31 = *v391;
          v32 = *(_QWORD *)(v16 + 8 * v10);
          v33 = v29;
          v34 = v18 - v29;
          if (v34 < 8)
            goto LABEL_39;
          v35 = 4 * v29;
          v36 = v32 + 4 * v18;
          v37 = v32 + v35 >= (unint64_t)(v30 + 4 * v18) || v30 + 4 * v29 >= v36;
          v38 = !v37;
          if ((unint64_t)&v31[(unint64_t)v35 / 4] < v36 && v32 + v35 < (unint64_t)&v31[v18])
            goto LABEL_39;
          if (v38)
            goto LABEL_39;
          v40 = v34 - (v18 & 7) + v33;
          v41 = v33 + (v18 & 7) - v18;
          v42 = (float32x4_t *)(v32 + v35 + 16);
          v43 = (float32x4_t *)&v31[(unint64_t)v35 / 4 + 4];
          v44 = (float32x4_t *)(v30 + v35 + 16);
          do
          {
            v45 = vmlaq_f32(*v42, *v44, *v43);
            v42[-1] = vmlaq_f32(v42[-1], v44[-1], v43[-1]);
            *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 += 2;
            v41 += 8;
          }
          while (v41);
          v33 = v40;
          if ((v18 & 7) != 0)
          {
LABEL_39:
            v46 = v18 - v33;
            v47 = (float *)(v32 + 4 * v33);
            v48 = (float *)(v30 + 4 * v33);
            v49 = &v31[v33];
            do
            {
              v50 = *v49++;
              v51 = v50;
              v52 = *v48++;
              *v47 = *v47 + (float)(v52 * v51);
              ++v47;
              --v46;
            }
            while (v46);
          }
        }
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 584) + v15), (_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v13), *(_QWORD **)(a1 + 328), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 584) + v15), (_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v13), *(_QWORD **)(a1 + 336), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      sub_19C102BD8(v398, (const void **)(*(_QWORD *)(a1 + 424) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19C102BD8(v395, (const void **)(*(_QWORD *)(a1 + 400) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19C102BD8((void **)(a1 + 1176), (const void **)(*(_QWORD *)(a1 + 376) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v10), 4 * *(int *)(a1 + 52));
      v53 = *(_QWORD *)(a1 + 608);
      v54 = *(unsigned int *)(a1 + 52);
      v55 = (int)v54;
      if ((int)v54 <= 0)
      {
        v74 = -8 * (-(int)v54 >> 3);
        if (v74 >= (int)v55)
          goto LABEL_61;
LABEL_53:
        v75 = *(_QWORD *)(v53 + 8 * v10);
        v76 = (char *)*v398;
        v77 = v74;
        v78 = v55 - v74;
        if (v78 < 8)
          goto LABEL_59;
        v79 = v75 + 4 * v74;
        v80 = (unint64_t)&v76[4 * v74];
        if (v79 < (unint64_t)&v76[4 * v55] && v80 < v75 + 4 * v55)
          goto LABEL_59;
        v81 = v78 - (v55 & 7) + v74;
        v82 = v74 + (unint64_t)(v55 & 7) - v55;
        v83 = (float32x4_t *)(v79 + 16);
        v84 = (float32x4_t *)(v80 + 16);
        do
        {
          v85 = vmulq_f32(*v84, *v83);
          v83[-1] = vmulq_f32(v84[-1], v83[-1]);
          *v83 = v85;
          v83 += 2;
          v84 += 2;
          v82 += 8;
        }
        while (v82);
        v77 = v81;
        if ((v55 & 7) != 0)
        {
LABEL_59:
          v86 = v55 - v77;
          v87 = (float *)&v76[4 * v77];
          v88 = (float *)(v75 + 4 * v77);
          do
          {
            v89 = *v87++;
            *v88 = v89 * *v88;
            ++v88;
            --v86;
          }
          while (v86);
        }
        goto LABEL_61;
      }
      v56 = *(float32x4_t **)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v57 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v10);
      v58 = *(_QWORD *)(v53 + 8 * v10);
      if (v54 < 8)
        break;
      v59 = 0;
      v118 = v58 + 4 * v54;
      v120 = v58 < (unint64_t)v57->u64 + 4 * v54 && (unint64_t)v57 < v118;
      if ((unint64_t)v56 < v118 && v58 < (unint64_t)v56->u64 + 4 * v54)
        goto LABEL_45;
      if (v120)
        goto LABEL_45;
      v59 = v54 & 0x7FFFFFF8;
      v122 = v56 + 1;
      v123 = v57 + 1;
      v124 = (float32x4_t *)(v58 + 16);
      v125 = v54 & 0xFFFFFFF8;
      do
      {
        v126 = vaddq_f32(vmlsq_f32(*v122, *v122, *v123), *v124);
        v124[-1] = vaddq_f32(vmlsq_f32(v122[-1], v122[-1], v123[-1]), v124[-1]);
        *v124 = v126;
        v122 += 2;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v59 != v54)
        goto LABEL_45;
LABEL_47:
      v68 = (int)v54 / 8;
      if ((int)v54 > 7)
      {
        v69 = 0;
        v70 = (char *)*v398;
        do
        {
          v71 = (float32x4_t *)(v58 + 32 * v69);
          v72 = (float32x4_t *)&v70[32 * v69];
          v73 = vmulq_f32(v72[1], v71[1]);
          *v71 = vmulq_f32(*v72, *v71);
          v71[1] = v73;
          ++v69;
        }
        while (v68 != (_DWORD)v69);
      }
      v74 = 8 * v68;
      if (8 * v68 < (int)v55)
        goto LABEL_53;
LABEL_61:
      v90 = *(_QWORD *)(a1 + 632);
      if (!v11)
      {
        memmove(*(void **)(v90 + 8 * v10), *(const void **)(*(_QWORD *)(a1 + 496) + 8 * v10), 4 * *(int *)(a1 + 52));
        v113 = *(_QWORD *)(a1 + 632);
        v114 = *(unsigned int *)(a1 + 52);
        v115 = (int)v114;
        if ((int)v114 <= 0)
        {
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = -(-(int)v114 >> 3);
        }
        else
        {
          v116 = *(float32x4_t **)(v113 + 8 * v10);
          if (v114 < 8)
          {
            v117 = 0;
            goto LABEL_129;
          }
          v117 = v114 & 0x7FFFFFF8;
          v176 = v116 + 1;
          v177 = v114 & 0xFFFFFFF8;
          do
          {
            v178 = vnegq_f32(*v176);
            v176[-1] = vnegq_f32(v176[-1]);
            *v176 = v178;
            v176 += 2;
            v177 -= 8;
          }
          while (v177);
          if (v117 != v114)
          {
LABEL_129:
            v179 = v114 - v117;
            v180 = &v116->f32[v117];
            do
            {
              *v180 = -*v180;
              ++v180;
              --v179;
            }
            while (v179);
          }
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = (int)v114 / 8;
          if ((int)v114 > 7)
          {
            v181 = 0;
            v182 = *v169;
            do
            {
              v183 = &v116[2 * v181];
              v184 = (float32x4_t *)(v182 + 32 * v181);
              v185 = vmulq_f32(v183[1], v184[1]);
              *v183 = vmulq_f32(*v183, *v184);
              v183[1] = v185;
              ++v181;
            }
            while (v170 != (_DWORD)v181);
          }
        }
        v186 = 8 * v170;
        if (8 * v170 < (int)v115)
        {
          v187 = *v169;
          v188 = *(_QWORD *)(v113 + 8 * v10);
          v189 = v186;
          v190 = v115 - v186;
          if (v190 < 8)
            goto LABEL_141;
          v191 = v188 + 4 * v186;
          v192 = v187 + 4 * v186;
          if (v191 < v187 + 4 * v115 && v192 < v188 + 4 * v115)
            goto LABEL_141;
          v193 = v190 - (v115 & 7) + v186;
          v194 = v186 + (unint64_t)(v115 & 7) - v115;
          v195 = (float32x4_t *)(v192 + 16);
          v196 = (float32x4_t *)(v191 + 16);
          do
          {
            v197 = vmulq_f32(*v196, *v195);
            v196[-1] = vmulq_f32(v196[-1], v195[-1]);
            *v196 = v197;
            v195 += 2;
            v196 += 2;
            v194 += 8;
          }
          while (v194);
          v189 = v193;
          if ((v115 & 7) != 0)
          {
LABEL_141:
            v198 = v115 - v189;
            v199 = (float *)(v188 + 4 * v189);
            v200 = (float *)(v187 + 4 * v189);
            do
            {
              v201 = *v200++;
              *v199 = *v199 * v201;
              ++v199;
              --v198;
            }
            while (v198);
          }
        }
        v202 = *(_QWORD *)(a1 + 632);
        v203 = *(int *)(a1 + 52);
        v204 = (int)v203 / 8;
        if ((int)v203 >= 8)
        {
          v205 = *(float32x4_t **)(v202 + 8 * v10);
          v206 = *v6;
          v207 = (int)v203 / 8;
          do
          {
            v208 = *v206;
            v209 = v206[1];
            v206 += 2;
            v210 = vmulq_f32(v209, v205[1]);
            *v205 = vmulq_f32(v208, *v205);
            v205[1] = v210;
            v205 += 2;
            --v207;
          }
          while (v207);
        }
        v211 = 8 * v204;
        if (8 * v204 < (int)v203)
        {
          v212 = *(_QWORD *)(v202 + 8 * v10);
          v213 = *v6;
          v214 = v211;
          v215 = v203 - v211;
          if (v215 < 8)
            goto LABEL_156;
          v216 = v212 + 4 * v211;
          v217 = (unint64_t)&v213[v211 / 4u];
          if (v216 < (unint64_t)v213->u64 + 4 * v203 && v217 < v212 + 4 * v203)
            goto LABEL_156;
          v219 = v215 - (v203 & 7) + v211;
          v220 = v211 + (unint64_t)(v203 & 7) - v203;
          v221 = (float32x4_t *)(v216 + 16);
          v222 = (float32x4_t *)(v217 + 16);
          do
          {
            v223 = vmulq_f32(*v222, *v221);
            v221[-1] = vmulq_f32(v222[-1], v221[-1]);
            *v221 = v223;
            v221 += 2;
            v222 += 2;
            v220 += 8;
          }
          while (v220);
          v214 = v219;
          if ((v203 & 7) != 0)
          {
LABEL_156:
            v224 = v203 - v214;
            v225 = &v213->f32[v214];
            v226 = (float *)(v212 + 4 * v214);
            do
            {
              v227 = *v225++;
              *v226 = v227 * *v226;
              ++v226;
              --v224;
            }
            while (v224);
          }
        }
        goto LABEL_158;
      }
      v91 = *(unsigned int *)(a1 + 52);
      v92 = (int)v91;
      if ((int)v91 > 0)
      {
        v93 = *(float32x4_t **)(*(_QWORD *)(a1 + 112) + 8 * v396);
        v94 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v10);
        v95 = *(float32x4_t **)(v90 + 8 * v10);
        if (v91 < 8)
        {
          v96 = 0;
          goto LABEL_65;
        }
        v96 = 0;
        if ((unint64_t)((char *)v95 - (char *)v93) < 0x20)
          goto LABEL_65;
        if ((unint64_t)((char *)v95 - (char *)v94) < 0x20)
          goto LABEL_65;
        v96 = v91 & 0x7FFFFFF8;
        v171 = v93 + 1;
        v172 = v94 + 1;
        v173 = v95 + 1;
        v174 = v91 & 0xFFFFFFF8;
        do
        {
          v175 = vsubq_f32(*v171, *v172);
          v173[-1] = vsubq_f32(v171[-1], v172[-1]);
          *v173 = v175;
          v171 += 2;
          v172 += 2;
          v173 += 2;
          v174 -= 8;
        }
        while (v174);
        if (v96 != v91)
        {
LABEL_65:
          v97 = v91 - v96;
          v98 = v96;
          v99 = &v95->f32[v96];
          v100 = &v94->f32[v98];
          v101 = &v93->f32[v98];
          do
          {
            v102 = *v101++;
            v103 = v102;
            v104 = *v100++;
            *v99++ = v103 - v104;
            --v97;
          }
          while (v97);
        }
        v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
        v106 = (int)v91 / 8;
        if ((int)v91 > 7)
        {
          v107 = 0;
          v108 = *v105;
          do
          {
            v109 = &v95[2 * v107];
            v110 = (float32x4_t *)(v108 + 32 * v107);
            v111 = vmulq_f32(v109[1], v110[1]);
            *v109 = vmulq_f32(*v109, *v110);
            v109[1] = v111;
            ++v107;
          }
          while (v106 != (_DWORD)v107);
        }
        v112 = 8 * v106;
        if (8 * v106 >= (int)v92)
          goto LABEL_103;
LABEL_92:
        v127 = *v105;
        v128 = *(_QWORD *)(v90 + 8 * v10);
        v129 = v112;
        v130 = v92 - v112;
        if (v130 < 8)
          goto LABEL_101;
        v131 = v128 + 4 * v112;
        v132 = v127 + 4 * v112;
        if (v131 < v127 + 4 * v92 && v132 < v128 + 4 * v92)
          goto LABEL_101;
        v134 = v130 - (v92 & 7) + v112;
        v135 = v112 + (unint64_t)(v92 & 7) - v92;
        v136 = (float32x4_t *)(v132 + 16);
        v137 = (float32x4_t *)(v131 + 16);
        do
        {
          v138 = vmulq_f32(*v137, *v136);
          v137[-1] = vmulq_f32(v137[-1], v136[-1]);
          *v137 = v138;
          v136 += 2;
          v137 += 2;
          v135 += 8;
        }
        while (v135);
        v129 = v134;
        if ((v92 & 7) != 0)
        {
LABEL_101:
          v139 = v92 - v129;
          v140 = (float *)(v128 + 4 * v129);
          v141 = (float *)(v127 + 4 * v129);
          do
          {
            v142 = *v141++;
            *v140 = *v140 * v142;
            ++v140;
            --v139;
          }
          while (v139);
        }
        goto LABEL_103;
      }
      v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v112 = -8 * (-(int)v91 >> 3);
      if (v112 < (int)v92)
        goto LABEL_92;
LABEL_103:
      v143 = *(_QWORD *)(a1 + 632);
      v144 = *(int *)(a1 + 52);
      v145 = (int)v144 / 8;
      if ((int)v144 >= 8)
      {
        v146 = *(float32x4_t **)(v143 + 8 * v10);
        v147 = *v6;
        v148 = (int)v144 / 8;
        do
        {
          v149 = *v147;
          v150 = v147[1];
          v147 += 2;
          v151 = vmulq_f32(v150, v146[1]);
          *v146 = vmulq_f32(v149, *v146);
          v146[1] = v151;
          v146 += 2;
          --v148;
        }
        while (v148);
      }
      v152 = 8 * v145;
      if (8 * v145 < (int)v144)
      {
        v153 = *(_QWORD *)(v143 + 8 * v10);
        v154 = *v6;
        v155 = v152;
        v156 = v144 - v152;
        if (v156 < 8)
          goto LABEL_116;
        v157 = v153 + 4 * v152;
        v158 = (unint64_t)&v154[v152 / 4u];
        if (v157 < (unint64_t)v154->u64 + 4 * v144 && v158 < v153 + 4 * v144)
          goto LABEL_116;
        v160 = v156 - (v144 & 7) + v152;
        v161 = v152 + (unint64_t)(v144 & 7) - v144;
        v162 = (float32x4_t *)(v157 + 16);
        v163 = (float32x4_t *)(v158 + 16);
        do
        {
          v164 = vmulq_f32(*v163, *v162);
          v162[-1] = vmulq_f32(v163[-1], v162[-1]);
          *v162 = v164;
          v162 += 2;
          v163 += 2;
          v161 += 8;
        }
        while (v161);
        v155 = v160;
        if ((v144 & 7) != 0)
        {
LABEL_116:
          v165 = v144 - v155;
          v166 = &v154->f32[v155];
          v167 = (float *)(v153 + 4 * v155);
          do
          {
            v168 = *v166++;
            *v167 = v168 * *v167;
            ++v167;
            --v165;
          }
          while (v165);
        }
      }
LABEL_158:
      v228 = (float **)(*(_QWORD *)(a1 + 656) + 8 * v10);
      if (v11)
      {
        sub_19C12CFAC(v228, (_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v10), *(_QWORD **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        v229 = *(_QWORD *)(a1 + 656);
        v230 = *(_QWORD *)(a1 + 112);
        v231 = *(int *)(a1 + 52);
        if ((int)v231 >= 8)
        {
          v232 = *(float32x4_t **)(v229 + 8 * v10);
          v233 = *(float32x4_t **)(v230 + 8 * v396);
          v234 = (int)v231 / 8;
          do
          {
            v235 = *v233;
            v236 = v233[1];
            v233 += 2;
            v237 = vmulq_f32(v236, v232[1]);
            *v232 = vmulq_f32(v235, *v232);
            v232[1] = v237;
            v232 += 2;
            --v234;
          }
          while (v234);
        }
        v238 = 8 * ((int)v231 / 8);
        if (v238 < (int)v231)
        {
          v239 = *(_QWORD *)(v229 + 8 * v10);
          v240 = *(_QWORD *)(v230 + 8 * v396);
          v241 = v238;
          v242 = v231 - v238;
          if (v242 < 8)
            goto LABEL_172;
          v243 = v239 + 4 * v241;
          v244 = v240 + 4 * v241;
          if (v243 < v240 + 4 * v231 && v244 < v239 + 4 * v231)
            goto LABEL_172;
          v246 = v242 - (v231 & 7) + v241;
          v247 = v241 + (v231 & 7) - v231;
          v248 = (float32x4_t *)(v243 + 16);
          v249 = (float32x4_t *)(v244 + 16);
          do
          {
            v250 = vmulq_f32(*v249, *v248);
            v248[-1] = vmulq_f32(v249[-1], v248[-1]);
            *v248 = v250;
            v248 += 2;
            v249 += 2;
            v247 += 8;
          }
          while (v247);
          v241 = v246;
          if ((v231 & 7) != 0)
          {
LABEL_172:
            v251 = v231 - v241;
            v252 = (float *)(v240 + 4 * v241);
            v253 = (float *)(v239 + 4 * v241);
            do
            {
              v254 = *v252++;
              *v253 = v254 * *v253;
              ++v253;
              --v251;
            }
            while (v251);
          }
        }
        v255 = *(_QWORD *)(a1 + 656);
        v256 = *(int *)(a1 + 52);
        v257 = (int)v256 / 8;
        if ((int)v256 >= 8)
        {
          v258 = *(float32x4_t **)(v255 + 8 * v10);
          v259 = (float32x4_t *)*v395;
          v260 = (int)v256 / 8;
          do
          {
            v261 = *v259;
            v262 = v259[1];
            v259 += 2;
            v263 = vmulq_f32(v262, v258[1]);
            *v258 = vmulq_f32(v261, *v258);
            v258[1] = v263;
            v258 += 2;
            --v260;
          }
          while (v260);
        }
        v264 = 8 * v257;
        if (8 * v257 < (int)v256)
        {
          v265 = *(_QWORD *)(v255 + 8 * v10);
          v266 = (char *)*v395;
          v267 = v264;
          v268 = v256 - v264;
          if (v268 < 8)
            goto LABEL_187;
          v269 = v265 + 4 * v264;
          v270 = (unint64_t)&v266[4 * v264];
          if (v269 < (unint64_t)&v266[4 * v256] && v270 < v265 + 4 * v256)
            goto LABEL_187;
          v272 = v268 - (v256 & 7) + v264;
          v273 = v264 + (unint64_t)(v256 & 7) - v256;
          v274 = (float32x4_t *)(v269 + 16);
          v275 = (float32x4_t *)(v270 + 16);
          do
          {
            v276 = vmulq_f32(*v275, *v274);
            v274[-1] = vmulq_f32(v275[-1], v274[-1]);
            *v274 = v276;
            v274 += 2;
            v275 += 2;
            v273 += 8;
          }
          while (v273);
          v267 = v272;
          if ((v256 & 7) != 0)
          {
LABEL_187:
            v277 = v256 - v267;
            v278 = (float *)&v266[4 * v267];
            v279 = (float *)(v265 + 4 * v267);
            do
            {
              v280 = *v278++;
              *v279 = v280 * *v279;
              ++v279;
              --v277;
            }
            while (v277);
          }
        }
      }
      else
      {
        bzero(*v228, 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 560) + 8 * v10), 4 * *(int *)(a1 + 48));
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 560) + v15), (_QWORD *)(*(_QWORD *)(a1 + 632) + v15), *(_QWORD **)(a1 + 304), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 560) + v15), (_QWORD *)(*(_QWORD *)(a1 + 608) + v15), *(_QWORD **)(a1 + 320), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 560) + v15), (_QWORD *)(*(_QWORD *)(a1 + 656) + v15), *(_QWORD **)(a1 + 312), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      if (v7-- <= 0)
        goto LABEL_193;
    }
    v59 = 0;
LABEL_45:
    v60 = v54 - v59;
    v61 = v59;
    v62 = (float *)(v58 + 4 * v59);
    v63 = &v57->f32[v61];
    v64 = &v56->f32[v61];
    do
    {
      v65 = *v64++;
      v66 = v65;
      v67 = *v63++;
      *v62 = (float)(v66 - (float)(v67 * v66)) + *v62;
      ++v62;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
LABEL_193:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    v281 = (a5 - 2);
    v282 = 1;
    v283 = a5 - 2;
    do
    {
      while (1)
      {
        v295 = *(_BYTE *)(a1 + 2040) ? v283 : v282;
        v296 = *(_BYTE *)(a1 + 2040) ? 1 : -1;
        v297 = v295 + v296;
        v298 = *(_BYTE *)(a1 + 2040) ? v281 : 1;
        v299 = *(_QWORD *)(a1 + 632) + 8 * v295;
        v300 = *(_QWORD *)(a1 + 112) + 8 * v297;
        v301 = *(_DWORD *)(a1 + 52);
        v399 = 8 * v295;
        if (v295 == v298)
          break;
        v397 = 8 * v297;
        v284 = v281;
        v285 = *(_QWORD *)(a1 + 1104);
        global_queue = dispatch_get_global_queue(0, 0);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v408 = v301;
        v405 = v285;
        v406 = v299;
        v281 = v284;
        v407 = v300;
        dispatch_apply(v301, global_queue, &block);
        v287 = *(_QWORD *)(a1 + 656) + v399;
        v288 = *(_QWORD *)(a1 + 112) + v397;
        v289 = *(int *)(a1 + 52);
        v290 = *(_QWORD *)(a1 + 1096);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v405 = v290;
        v408 = v289;
        v406 = v287;
        v407 = v288;
        dispatch_apply(v289, global_queue, &block);
        v291 = *(_QWORD *)(a1 + 608) + v399;
        v292 = *(_QWORD *)(a1 + 112) + v397;
        v293 = *(int *)(a1 + 52);
        v294 = *(_QWORD *)(a1 + 1112);
        block = MEMORY[0x1E0C809B0];
        v402 = 0x40000000;
        v403 = sub_19C103680;
        v404 = &unk_1E3D25490;
        v405 = v294;
        v408 = v293;
        v406 = v291;
        v407 = v292;
        dispatch_apply(v293, global_queue, &block);
        ++v282;
        if (--v283 == -1)
          goto LABEL_209;
      }
      bzero(*(void **)(a1 + 1104), 4 * (v301 * v301));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1096), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1112), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      ++v282;
      --v283;
    }
    while (v283 != -1);
  }
LABEL_209:
  if (a5 >= 1)
  {
    v302 = 0;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2040))
        v316 = v400 - v302;
      else
        v316 = v302;
      if (*(_BYTE *)(a1 + 2040))
        v317 = v400;
      else
        v317 = 0;
      if (a3[1] == *a3)
      {
        v318 = *(_QWORD *)(a1 + 656);
LABEL_226:
        v329 = 8 * v316;
        v330 = v318 + v329;
        v331 = *(_QWORD *)(a1 + 64) + v329;
        v332 = *(_DWORD *)(a1 + 48);
        v333 = *(int *)(a1 + 52);
        v334 = v329;
        if (v316 == v317)
        {
          bzero(*(void **)(a1 + 1072), 4 * v332 * (int)v333);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1080), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1088), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v303 = *(_QWORD *)(a1 + 1072);
          v304 = dispatch_get_global_queue(0, 0);
          block = MEMORY[0x1E0C809B0];
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v332;
          v405 = v303;
          v406 = v330;
          v407 = v331;
          dispatch_apply(v333, v304, &block);
          v305 = *(_QWORD *)(a1 + 632) + v334;
          v306 = *(_QWORD *)(a1 + 64) + v334;
          v307 = *(_DWORD *)(a1 + 48);
          v308 = *(int *)(a1 + 52);
          v309 = *(_QWORD *)(a1 + 1080);
          v310 = MEMORY[0x1E0C809B0];
          block = MEMORY[0x1E0C809B0];
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v307;
          v405 = v309;
          v406 = v305;
          v407 = v306;
          dispatch_apply(v308, v304, &block);
          v311 = *(_QWORD *)(a1 + 608) + v334;
          v312 = *(_QWORD *)(a1 + 64) + v334;
          v313 = *(_DWORD *)(a1 + 48);
          v314 = *(int *)(a1 + 52);
          v315 = *(_QWORD *)(a1 + 1088);
          block = v310;
          v402 = 0x40000000;
          v403 = sub_19C103680;
          v404 = &unk_1E3D25490;
          v408 = v313;
          v405 = v315;
          v406 = v311;
          v407 = v312;
          dispatch_apply(v314, v304, &block);
        }
        goto LABEL_212;
      }
      v318 = *(_QWORD *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_226;
      v319 = v316;
      v320 = *(_QWORD *)(a1 + 208);
      v321 = 24 * v316;
      v323 = *(_BYTE **)(v320 + v321);
      v322 = *(_BYTE **)(v320 + v321 + 8);
      v324 = v322 - v323;
      if (v322 == v323)
        break;
      if ((v324 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v325 = v302;
      v326 = *(_QWORD *)(a1 + 208);
      v327 = operator new(v322 - v323);
      memcpy(v327, v323, v324);
      v320 = v326;
      v302 = v325;
      v328 = *(unsigned int *)(a1 + 52);
      if ((int)v328 >= 1)
        goto LABEL_229;
LABEL_236:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v327)
          goto LABEL_242;
      }
      else
      {
        v347 = 0;
        v348 = *(_QWORD *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v348 + 24 * *(int *)(a1 + 728)) + 4 * v347) = *((_DWORD *)v327 + v347);
          ++v347;
        }
        while (v347 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v327);
      v320 = *(_QWORD *)(a1 + 208);
LABEL_242:
      v349 = *(_QWORD *)(a1 + 632);
      v350 = *(_BYTE **)(v320 + 24 * (int)v319);
      v351 = *(_BYTE **)(v320 + v321 + 8);
      v352 = v351 - v350;
      if (v351 == v350)
      {
        v355 = 0;
        v356 = *(unsigned int *)(a1 + 52);
        if ((int)v356 < 1)
          goto LABEL_254;
LABEL_247:
        v357 = 0;
        v358 = *(_QWORD *)(v349 + 8 * v319);
        v359 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v356 < 8)
          goto LABEL_252;
        if ((unint64_t)(v359 - v358) < 0x20)
          goto LABEL_252;
        v357 = v356 & 0x7FFFFFF8;
        v360 = (__int128 *)(v358 + 16);
        v361 = (_OWORD *)(v359 + 16);
        v362 = v356 & 0xFFFFFFF8;
        do
        {
          v363 = *v360;
          *(v361 - 1) = *(v360 - 1);
          *v361 = v363;
          v360 += 2;
          v361 += 2;
          v362 -= 8;
        }
        while (v362);
        if (v357 != v356)
        {
LABEL_252:
          v364 = v356 - v357;
          v365 = 4 * v357;
          v366 = (_DWORD *)(v359 + 4 * v357);
          v367 = (int *)(v358 + v365);
          do
          {
            v368 = *v367++;
            *v366++ = v368;
            --v364;
          }
          while (v364);
        }
        goto LABEL_254;
      }
      if ((v352 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v353 = v302;
      v354 = v320;
      v355 = operator new(v351 - v350);
      memcpy(v355, v350, v352);
      v320 = v354;
      v302 = v353;
      v356 = *(unsigned int *)(a1 + 52);
      if ((int)v356 >= 1)
        goto LABEL_247;
LABEL_254:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v355)
          goto LABEL_260;
      }
      else
      {
        v369 = 0;
        v370 = *(_QWORD *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v370 + 24 * *(int *)(a1 + 848)) + 4 * v369) = *((_DWORD *)v355 + v369);
          ++v369;
        }
        while (v369 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v355);
      v320 = *(_QWORD *)(a1 + 208);
LABEL_260:
      v371 = *(_QWORD *)(a1 + 608);
      v372 = *(_BYTE **)(v320 + 24 * (int)v319);
      v373 = *(_BYTE **)(v320 + v321 + 8);
      v374 = v373 - v372;
      if (v373 == v372)
      {
        v375 = 0;
        v376 = *(unsigned int *)(a1 + 52);
        if ((int)v376 < 1)
          goto LABEL_272;
LABEL_265:
        v377 = 0;
        v378 = *(_QWORD *)(v371 + 8 * v319);
        v379 = *(_QWORD *)(*(_QWORD *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v376 < 8)
          goto LABEL_270;
        if ((unint64_t)(v379 - v378) < 0x20)
          goto LABEL_270;
        v377 = v376 & 0x7FFFFFF8;
        v380 = (__int128 *)(v378 + 16);
        v381 = (_OWORD *)(v379 + 16);
        v382 = v376 & 0xFFFFFFF8;
        do
        {
          v383 = *v380;
          *(v381 - 1) = *(v380 - 1);
          *v381 = v383;
          v380 += 2;
          v381 += 2;
          v382 -= 8;
        }
        while (v382);
        if (v377 != v376)
        {
LABEL_270:
          v384 = v376 - v377;
          v385 = 4 * v377;
          v386 = (_DWORD *)(v379 + 4 * v377);
          v387 = (int *)(v378 + v385);
          do
          {
            v388 = *v387++;
            *v386++ = v388;
            --v384;
          }
          while (v384);
        }
        goto LABEL_272;
      }
      if ((v374 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v375 = operator new(v373 - v372);
      memcpy(v375, v372, v374);
      v376 = *(unsigned int *)(a1 + 52);
      if ((int)v376 >= 1)
        goto LABEL_265;
LABEL_272:
      if (*(int *)(a1 + 964) >= 1)
      {
        v389 = 0;
        v390 = *(_QWORD *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v390 + 24 * *(int *)(a1 + 968)) + 4 * v389) = *((_DWORD *)v375 + v389);
          ++v389;
        }
        while (v389 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_277:
        operator delete(v375);
        goto LABEL_212;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v375)
        goto LABEL_277;
LABEL_212:
      if (++v302 == a5)
        return;
    }
    v327 = 0;
    v328 = *(unsigned int *)(a1 + 52);
    if ((int)v328 < 1)
      goto LABEL_236;
LABEL_229:
    v335 = 0;
    v336 = *(_QWORD *)(v318 + 8 * v319);
    v337 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v328 < 8)
      goto LABEL_234;
    if ((unint64_t)(v337 - v336) < 0x20)
      goto LABEL_234;
    v335 = v328 & 0x7FFFFFF8;
    v338 = (__int128 *)(v336 + 16);
    v339 = (_OWORD *)(v337 + 16);
    v340 = v328 & 0xFFFFFFF8;
    do
    {
      v341 = *v338;
      *(v339 - 1) = *(v338 - 1);
      *v339 = v341;
      v338 += 2;
      v339 += 2;
      v340 -= 8;
    }
    while (v340);
    if (v335 != v328)
    {
LABEL_234:
      v342 = v328 - v335;
      v343 = 4 * v335;
      v344 = (_DWORD *)(v337 + 4 * v335);
      v345 = (int *)(v336 + v343);
      do
      {
        v346 = *v345++;
        *v344++ = v346;
        --v342;
      }
      while (v342);
    }
    goto LABEL_236;
  }
}

void sub_19C13BC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C13BCBC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2040] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE4190F8);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE4190F8);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE4190E0 = 0;
      *(_QWORD *)algn_1EE4190E8 = 0;
      qword_1EE4190F0 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE4190E0, &dword_19C079000);
      __cxa_guard_release(&qword_1EE4190F8);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE4190E0);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19C13BD88(_BYTE *a1)
{
  uint64_t result;

  a1[2040] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19C13BDBC(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 1988) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 304) = result + 232;
  *(_QWORD *)(a1 + 312) = result + 240;
  *(_QWORD *)(a1 + 320) = result + 248;
  *(_QWORD *)(a1 + 328) = result + 256;
  *(_QWORD *)(a1 + 336) = result + 264;
  *(_QWORD *)(a1 + 344) = result + 272;
  *(_QWORD *)(a1 + 352) = result + 280;
  *(_QWORD *)(a1 + 360) = result + 288;
  *(_QWORD *)(a1 + 368) = result + 296;
  return result;
}

void sub_19C13BE4C(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 1988))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF90, 0))__cxa_bad_cast();
    sub_19C2210D4(34);
  }
  sub_19C2210D4(1);
}

void sub_19C13BE94()
{
  sub_19C2210D4(1);
}

void sub_19C13BEA4()
{
  sub_19C2210D4(0);
}

void sub_19C13BEB8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C13D610(a1);
  operator delete(v1);
}

void sub_19C13BECC(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  float v13;
  signed int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  const void **v38;
  float *v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const void **v54;
  float *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  int v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t v88;
  uint64_t v89;
  float *v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  int v96;
  float *v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  int64_t v106;
  char *v107;
  uint64_t v108;
  const void **v109;
  int v110;
  float *v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  float *v125;
  float v126;
  float v127;
  float v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  int v132;
  float32x4_t *v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  BOOL v148;
  BOOL v149;
  uint64_t v151;
  uint64_t v152;
  float32x4_t *v153;
  float32x4_t *v154;
  float32x4_t *v155;
  float32x4_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  unint64_t v164;
  BOOL v166;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t *v170;
  uint64_t v171;
  float32x4_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  int64_t v182;
  char *v183;
  uint64_t v184;
  int v186;
  char v187;
  uint64_t v188;
  unsigned int v189;
  signed int v190;
  unsigned int v192;
  uint64_t v193;
  int v194;
  _BOOL4 v195;
  void *v196;
  void *v197;
  char *v198;
  void *v199;
  void *v200;
  char *v201;
  void *__p;
  void *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;

  if (a3[1] != *a3 && *(int *)(a1 + 56) >= 1)
  {
    v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = a4 & 0xFFFFFF;
    v10 = *(_QWORD *)(a1 + 2048);
    if (!v10)
      goto LABEL_7;
LABEL_6:
    v11 = *(float *)(v10 + 468);
    if (v11 > 0.0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = a4 & 0xFFFFFF;
  v10 = *(_QWORD *)(a1 + 2048);
  if (v10)
    goto LABEL_6;
LABEL_7:
  v11 = 50.0;
LABEL_8:
  v12 = a5 != 0;
  if (v9 > v12)
  {
    v189 = v9;
    v190 = v9 - 1;
    v13 = -v11;
    v186 = v8;
    while (1)
    {
      v192 = v12;
      if (*(_BYTE *)(a1 + 2040))
        v14 = v9 + ~v12;
      else
        v14 = v12;
      if (*(_BYTE *)(a1 + 2040))
        v15 = 1;
      else
        v15 = -1;
      if (*(_BYTE *)(a1 + 2040))
        v16 = v14 < v190;
      else
        v16 = v14 > 0;
      v195 = v16;
      memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v14), *(const void **)(*a2 + 8 * v14), 4 * *(int *)(a1 + 44));
      v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v8)
      {
        v18 = *(_DWORD *)(a1 + 48);
        v19 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v14);
        *v19 = **(_DWORD **)(*a3 + 24 * v14);
        if (v17)
          v19[1] = v18 - 1;
      }
      v20 = 8 * v14;
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + v20), 4 * *(int *)(a1 + 52));
      v21 = *(_QWORD *)(a1 + 2048);
      v193 = v14;
      if (v21)
      {
        if (!*(_BYTE *)(v21 + 20))
        {
          v173 = *(_DWORD *)(v21 + 40);
          if ((v173 == 4 || v173 == 2) && *(_DWORD *)(v21 + 44) == 3)
            break;
        }
      }
      v22 = *(_QWORD *)(a1 + 376);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = *(uint64_t **)(a1 + 304);
      v25 = *(_QWORD *)(a1 + 208) + 24 * v14;
      v203 = 0;
      v204 = 0;
      __p = 0;
      v27 = *(_BYTE **)v25;
      v26 = *(_BYTE **)(v25 + 8);
      v28 = v26 - v27;
      if (v26 != v27)
      {
        if (v28 < 0)
          sub_19C07DA0C();
        __p = operator new(v26 - v27);
        v203 = __p;
        v29 = (char *)__p + 4 * (v28 >> 2);
        v204 = v29;
        memcpy(__p, v27, v28);
        v203 = v29;
        v8 = v186;
      }
      sub_19C13D30C(a1, v8, (float **)(v22 + v20), (_QWORD *)(v23 + v20), v24, (uint64_t)&__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v30 = __p;
      v31 = v14;
      v32 = 0;
      if (__p)
      {
        v203 = __p;
LABEL_32:
        operator delete(v30);
      }
      v33 = *(_QWORD *)(a1 + 2048);
      if (!v33)
        goto LABEL_35;
LABEL_34:
      if (*(_BYTE *)(v33 + 244))
        goto LABEL_162;
LABEL_35:
      v34 = v14 + v15;
      v35 = *(_QWORD *)(a1 + 376);
      v36 = *(_DWORD *)(a1 + 52);
      v37 = v195;
      if (v195)
      {
        sub_19C12CFAC((float **)(v35 + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v34), *(_QWORD **)(a1 + 328), *(_DWORD *)(a1 + 52), v36, 1.0);
        v35 = *(_QWORD *)(a1 + 376);
        v36 = *(_DWORD *)(a1 + 52);
      }
      v38 = (const void **)(v35 + 8 * v31);
      if (v36 >= 1)
      {
        v39 = (float *)*v38;
        v40 = v36;
        do
        {
          v41 = -v11;
          if (*v39 < v13 || (v41 = v11, *v39 > v11))
            *v39 = v41;
          ++v39;
          --v40;
        }
        while (v40);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 448) + 8 * v31), v38, v36, *(_DWORD *)(a1 + 520));
      if ((v32 & 1) == 0)
      {
        v187 = v32;
        v42 = v34;
        v43 = *(_QWORD *)(a1 + 400);
        v44 = *(_QWORD *)(a1 + 64);
        v45 = *(uint64_t **)(a1 + 312);
        v46 = *(_QWORD *)(a1 + 208) + 24 * (int)v31;
        v200 = 0;
        v201 = 0;
        v199 = 0;
        v48 = *(_BYTE **)v46;
        v47 = *(_BYTE **)(v46 + 8);
        v49 = v47 - v48;
        if (v47 != v48)
        {
          if (v49 < 0)
            sub_19C07DA0C();
          v199 = operator new(v47 - v48);
          v200 = v199;
          v50 = (char *)v199 + 4 * (v49 >> 2);
          v201 = v50;
          memcpy(v199, v48, v49);
          v200 = v50;
          v8 = v186;
        }
        sub_19C13D30C(a1, v8, (float **)(v43 + v20), (_QWORD *)(v44 + v20), v45, (uint64_t)&v199, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v37 = v195;
        v34 = v42;
        v32 = v187;
        v31 = v193;
        if (v199)
        {
          v200 = v199;
          operator delete(v199);
        }
      }
      v51 = *(_QWORD *)(a1 + 2048);
      if (v51 && *(_BYTE *)(v51 + 244))
        goto LABEL_162;
      v52 = *(_QWORD *)(a1 + 400);
      v53 = *(_DWORD *)(a1 + 52);
      if (v37)
      {
        sub_19C12CFAC((float **)(v52 + 8 * v31), (_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v34), *(_QWORD **)(a1 + 336), *(_DWORD *)(a1 + 52), v53, 1.0);
        v52 = *(_QWORD *)(a1 + 400);
        v53 = *(_DWORD *)(a1 + 52);
      }
      v54 = (const void **)(v52 + 8 * v31);
      if (v53 >= 1)
      {
        v55 = (float *)*v54;
        v56 = v53;
        do
        {
          v57 = -v11;
          if (*v55 < v13 || (v57 = v11, *v55 > v11))
            *v55 = v57;
          ++v55;
          --v56;
        }
        while (v56);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 472) + v20), v54, v53, *(_DWORD *)(a1 + 524));
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + v20), 4 * *(int *)(a1 + 52));
      if (v37)
      {
        v58 = *(_QWORD *)(a1 + 88);
        v59 = *(_QWORD *)(a1 + 112);
        v60 = *(_QWORD *)(a1 + 472);
        v61 = *(int *)(a1 + 52);
        if ((int)v61 >= 8)
        {
          v62 = *(float32x4_t **)(v58 + v20);
          v63 = *(float32x4_t **)(v60 + v20);
          v64 = (int)v61 / 8;
          v65 = *(float32x4_t **)(v59 + 8 * v34);
          do
          {
            v67 = *v65;
            v66 = v65[1];
            v65 += 2;
            v69 = *v63;
            v68 = v63[1];
            v63 += 2;
            v70 = vmlaq_f32(v62[1], v68, v66);
            *v62 = vmlaq_f32(*v62, v69, v67);
            v62[1] = v70;
            v62 += 2;
            --v64;
          }
          while (v64);
        }
        v71 = 8 * ((int)v61 / 8);
        if (v71 < (int)v61)
        {
          v72 = *(_QWORD *)(v59 + 8 * v34);
          v73 = *(_QWORD *)(v60 + v20);
          v74 = *(_QWORD *)(v58 + v20);
          v75 = v71;
          v76 = v61 - v71;
          if (v76 < 8)
            goto LABEL_82;
          v77 = 4 * v75;
          v78 = v74 + 4 * v75;
          v79 = v74 + 4 * v61;
          v80 = v78 >= v73 + 4 * v61 || v73 + 4 * v75 >= v79;
          v81 = !v80;
          if (v72 + 4 * v75 < v79 && v78 < v72 + 4 * v61)
            goto LABEL_82;
          if (v81)
            goto LABEL_82;
          v83 = v76 - (v61 & 7) + v75;
          v84 = v75 + (v61 & 7) - v61;
          v85 = (float32x4_t *)(v74 + v77 + 16);
          v86 = (float32x4_t *)(v72 + v77 + 16);
          v87 = (float32x4_t *)(v73 + v77 + 16);
          do
          {
            v88 = vmlaq_f32(*v85, *v87, *v86);
            v85[-1] = vmlaq_f32(v85[-1], v87[-1], v86[-1]);
            *v85 = v88;
            v85 += 2;
            v86 += 2;
            v87 += 2;
            v84 += 8;
          }
          while (v84);
          v75 = v83;
          if ((v61 & 7) != 0)
          {
LABEL_82:
            v89 = v61 - v75;
            v90 = (float *)(v74 + 4 * v75);
            v91 = (float *)(v73 + 4 * v75);
            v92 = (float *)(v72 + 4 * v75);
            do
            {
              v93 = *v92++;
              v94 = v93;
              v95 = *v91++;
              *v90 = *v90 + (float)(v95 * v94);
              ++v90;
              --v89;
            }
            while (v89);
          }
        }
      }
      v96 = *(_DWORD *)(a1 + 52);
      if (v96 >= 1)
      {
        v97 = *(float **)(*(_QWORD *)(a1 + 88) + 8 * v31);
        v98 = *(unsigned int *)(a1 + 52);
        do
        {
          v99 = -v11;
          if (*v97 < v13 || (v99 = v11, *v97 > v11))
            *v97 = v99;
          ++v97;
          --v98;
        }
        while (v98);
      }
      if ((v32 & 1) == 0)
      {
        v194 = v34;
        v100 = *(_QWORD *)(a1 + 424);
        v101 = *(_QWORD *)(a1 + 64);
        v102 = *(uint64_t **)(a1 + 320);
        v103 = *(_QWORD *)(a1 + 208) + 24 * (int)v31;
        v197 = 0;
        v198 = 0;
        v196 = 0;
        v105 = *(_BYTE **)v103;
        v104 = *(_BYTE **)(v103 + 8);
        v106 = v104 - v105;
        if (v104 != v105)
        {
          if (v106 < 0)
            sub_19C07DA0C();
          v196 = operator new(v104 - v105);
          v197 = v196;
          v107 = (char *)v196 + 4 * (v106 >> 2);
          v198 = v107;
          memcpy(v196, v105, v106);
          v197 = v107;
          v37 = v195;
        }
        sub_19C13D30C(a1, v8, (float **)(v100 + v20), (_QWORD *)(v101 + v20), v102, (uint64_t)&v196, v96, *(_DWORD *)(a1 + 48), 1);
        v34 = v194;
        if (v196)
        {
          v197 = v196;
          operator delete(v196);
        }
      }
      v108 = *(_QWORD *)(a1 + 2048);
      if (v108)
      {
        if (*(_BYTE *)(v108 + 244))
LABEL_162:
          sub_19C2210D4(76);
      }
      sub_19C12CFAC((float **)(*(_QWORD *)(a1 + 424) + v20), (_QWORD *)(*(_QWORD *)(a1 + 88) + v20), *(_QWORD **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v109 = (const void **)(*(_QWORD *)(a1 + 424) + v20);
      v110 = *(_DWORD *)(a1 + 52);
      if (v110 >= 1)
      {
        v111 = (float *)*v109;
        v112 = *(unsigned int *)(a1 + 52);
        do
        {
          v113 = -v11;
          if (*v111 < v13 || (v113 = v11, *v111 > v11))
            *v111 = v113;
          ++v111;
          --v112;
        }
        while (v112);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 496) + v20), v109, v110, *(_DWORD *)(a1 + 528));
      bzero(*(void **)(*(_QWORD *)(a1 + 112) + v20), 4 * *(int *)(a1 + 52));
      v114 = *(_QWORD *)(a1 + 112);
      v115 = *(_QWORD *)(a1 + 448);
      v116 = *(unsigned int *)(a1 + 52);
      if ((int)v116 < 1)
        goto LABEL_111;
      v117 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + v20);
      v118 = *(float32x4_t **)(v115 + v20);
      v119 = *(_QWORD *)(v114 + v20);
      if (v116 >= 8)
      {
        v120 = 0;
        v164 = v119 + 4 * v116;
        v166 = v119 < (unint64_t)v118->u64 + 4 * v116 && (unint64_t)v118 < v164;
        if (((unint64_t)v117 >= v164 || v119 >= (unint64_t)v117->u64 + 4 * v116) && !v166)
        {
          v120 = v116 & 0x7FFFFFF8;
          v168 = v117 + 1;
          v169 = v118 + 1;
          v170 = (float32x4_t *)(v119 + 16);
          v171 = v116 & 0xFFFFFFF8;
          do
          {
            v172 = vaddq_f32(vmlsq_f32(*v168, *v168, *v169), *v170);
            v170[-1] = vaddq_f32(vmlsq_f32(v168[-1], v168[-1], v169[-1]), v170[-1]);
            *v170 = v172;
            v168 += 2;
            v169 += 2;
            v170 += 2;
            v171 -= 8;
          }
          while (v171);
          if (v120 == v116)
            goto LABEL_111;
        }
      }
      else
      {
        v120 = 0;
      }
      v121 = v116 - v120;
      v122 = v120;
      v123 = (float *)(v119 + v122 * 4);
      v124 = &v118->f32[v122];
      v125 = &v117->f32[v122];
      do
      {
        v126 = *v125++;
        v127 = v126;
        v128 = *v124++;
        *v123 = (float)(v127 - (float)(v128 * v127)) + *v123;
        ++v123;
        --v121;
      }
      while (v121);
LABEL_111:
      if (v37)
      {
        v129 = (int)v116;
        if ((int)v116 >= 8)
        {
          v130 = *(float32x4_t **)(v114 + v20);
          v131 = *(float32x4_t **)(v114 + 8 * v34);
          v132 = (int)v116 / 8;
          v133 = *(float32x4_t **)(v115 + v20);
          do
          {
            v135 = *v133;
            v134 = v133[1];
            v133 += 2;
            v137 = *v131;
            v136 = v131[1];
            v131 += 2;
            v138 = vmlaq_f32(v130[1], v136, v134);
            *v130 = vmlaq_f32(*v130, v137, v135);
            v130[1] = v138;
            v130 += 2;
            --v132;
          }
          while (v132);
        }
        v139 = 8 * ((int)v116 / 8);
        if (v139 < (int)v116)
        {
          v140 = *(_QWORD *)(v115 + v20);
          v141 = *(_QWORD *)(v114 + 8 * v34);
          v142 = *(_QWORD *)(v114 + v20);
          v143 = v139;
          v144 = v129 - v139;
          if (v144 < 8)
            goto LABEL_132;
          v145 = 4 * v143;
          v146 = v142 + 4 * v143;
          v147 = v142 + 4 * v129;
          v148 = v146 >= v141 + 4 * v129 || v141 + 4 * v143 >= v147;
          v149 = !v148;
          if (v140 + 4 * v143 < v147 && v146 < v140 + 4 * v129)
            goto LABEL_132;
          if (v149)
            goto LABEL_132;
          v151 = v144 - (v129 & 7) + v143;
          v152 = v143 + (v129 & 7) - v129;
          v153 = (float32x4_t *)(v142 + v145 + 16);
          v154 = (float32x4_t *)(v140 + v145 + 16);
          v155 = (float32x4_t *)(v141 + v145 + 16);
          do
          {
            v156 = vmlaq_f32(*v153, *v155, *v154);
            v153[-1] = vmlaq_f32(v153[-1], v155[-1], v154[-1]);
            *v153 = v156;
            v153 += 2;
            v154 += 2;
            v155 += 2;
            v152 += 8;
          }
          while (v152);
          v143 = v151;
          if ((v129 & 7) != 0)
          {
LABEL_132:
            v157 = v129 - v143;
            v158 = (float *)(v142 + 4 * v143);
            v159 = (float *)(v141 + 4 * v143);
            v160 = (float *)(v140 + 4 * v143);
            do
            {
              v161 = *v160++;
              v162 = v161;
              v163 = *v159++;
              *v158 = *v158 + (float)(v163 * v162);
              ++v158;
              --v157;
            }
            while (v157);
          }
        }
      }
      v12 = v192 + 1;
      v9 = v189;
      if (v192 + 1 == v189)
        return;
    }
    v174 = *(_QWORD *)(a1 + 376);
    v175 = *(_QWORD *)(a1 + 400);
    v176 = *(_QWORD *)(a1 + 424);
    v177 = *(_QWORD *)(a1 + 64);
    v178 = *(_QWORD **)(a1 + 304);
    v179 = *(_QWORD *)(a1 + 208) + 24 * v14;
    v206 = 0;
    v207 = 0;
    v205 = 0;
    v181 = *(_BYTE **)v179;
    v180 = *(_BYTE **)(v179 + 8);
    v182 = v180 - v181;
    if (v180 != v181)
    {
      v184 = v174;
      v188 = v175;
      if (v182 < 0)
        sub_19C07DA0C();
      v205 = (char *)operator new(v180 - v181);
      v206 = v205;
      v183 = &v205[4 * (v182 >> 2)];
      v207 = v183;
      memcpy(v205, v181, v182);
      v206 = v183;
      v175 = v188;
      v174 = v184;
    }
    sub_19C13CA54(a1, 0, (float32x4_t **)(v174 + v20), (float32x4_t **)(v175 + v20), (float32x4_t **)(v176 + v20), (_QWORD *)(v177 + v20), v178, (uint64_t)&v205, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
    v30 = v205;
    v31 = v14;
    v8 = v186;
    if (!v205)
    {
      v32 = 1;
      v33 = *(_QWORD *)(a1 + 2048);
      if (!v33)
        goto LABEL_35;
      goto LABEL_34;
    }
    v206 = v205;
    v32 = 1;
    goto LABEL_32;
  }
}

void sub_19C13C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_19C13CA54(uint64_t a1, int a2, float32x4_t **a3, float32x4_t **a4, float32x4_t **a5, _QWORD *a6, _QWORD *a7, uint64_t a8, int a9, int a10, char a11)
{
  float32x4_t **v15;
  void *v17;
  void *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  float32x4_t **v42;
  float32x4_t result;
  float **v44;
  uint64_t v45;
  float32x4_t *v46;
  float *v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v63;
  int v64;
  int v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float32x4_t *v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  __int32 *v75;
  __int32 *v76;
  int v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  uint64_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  __int32 v92;
  float *v93;
  float32x4_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float32x4_t *v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  int *v114;
  int v115;
  float32x4_t *v116;
  float *v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float *v122;
  float32x4_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  uint64_t v137;
  float32x4_t *v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  int *v144;
  int v145;
  float32x4_t *v146;
  float *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float *v151;
  float32x4_t *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  float32x4_t v161;
  uint64_t v162;
  float *v163;
  float *v164;
  float v165;
  float32x4_t *v166;
  float32x4_t *v167;
  uint64_t v168;
  float32x4_t v169;
  float32x4_t *v170;
  float32x4_t *v171;
  uint64_t v172;
  float32x4_t v173;
  __int128 *v174;
  _OWORD *v175;
  uint64_t v176;
  __int128 v177;
  __int128 *v178;
  _OWORD *v179;
  uint64_t v180;
  __int128 v181;
  float32x4_t **v182;
  float32x4_t **v183;

  if (a2)
    sub_19C2210D4(545);
  v15 = a3;
  if (!*(_QWORD *)(a1 + 552))
  {
    v17 = (void *)operator new[]();
    v18 = v17;
    if (a9 >= 1)
      bzero(v17, 4 * (3 * a9));
    *(_QWORD *)(a1 + 552) = v18;
    v19 = *(char **)(a1 + 2000);
    v20 = *(_QWORD *)(a1 + 2008);
    if ((unint64_t)v19 < v20)
    {
      *(_QWORD *)v19 = v18;
      v21 = (uint64_t)(v19 + 8);
LABEL_27:
      *(_QWORD *)(a1 + 2000) = v21;
      v15 = a3;
      goto LABEL_28;
    }
    v182 = a4;
    v183 = a5;
    v22 = (char **)(a1 + 1992);
    v23 = *(char **)(a1 + 1992);
    v24 = (char *)(v19 - v23);
    v25 = (v19 - v23) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      sub_19C07DA0C();
    v27 = v20 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        sub_19C07C7FC();
      v29 = operator new(8 * v28);
      v24 = (char *)(v19 - v23);
      v22 = (char **)(a1 + 1992);
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *v30 = v18;
      v21 = (uint64_t)(v30 + 1);
      v32 = (char *)(v19 - v23);
      if (v19 == v23)
        goto LABEL_25;
    }
    else
    {
      v29 = 0;
      v30 = (_QWORD *)(8 * v25);
      v31 = 0;
      *(_QWORD *)(8 * v25) = v18;
      v21 = 8 * v25 + 8;
      v32 = (char *)(v19 - v23);
      if (v19 == v23)
      {
LABEL_25:
        *(_QWORD *)(a1 + 1992) = v30;
        *(_QWORD *)(a1 + 2000) = v21;
        *(_QWORD *)(a1 + 2008) = v31;
        a4 = v182;
        a5 = v183;
        if (v19)
          operator delete(v19);
        goto LABEL_27;
      }
    }
    v33 = (unint64_t)(v32 - 8);
    if (v33 < 0x58)
      goto LABEL_130;
    if ((unint64_t)(v19 - v29 - (_QWORD)v24) < 0x20)
      goto LABEL_130;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v19[-v35];
    v30 = (_QWORD *)((char *)v30 - v35);
    v37 = &v29[8 * v25 - 16];
    v38 = v19 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v19 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_130:
      do
      {
        v41 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v30 = v41;
      }
      while (v19 != v23);
    }
    v19 = *v22;
    goto LABEL_25;
  }
LABEL_28:
  v42 = (float32x4_t **)(a1 + 552);
  sub_19C12CFAC((float **)(a1 + 552), a6, a7, 3 * a9, a10, 0.0);
  if (!a11)
  {
    if (a9 < 1)
      return result;
    v66 = 0;
    v67 = *v42;
    v68 = *v15;
    if (a9 < 8)
      goto LABEL_48;
    if ((unint64_t)((char *)v68 - (char *)v67) < 0x20)
      goto LABEL_48;
    v66 = a9 & 0xFFFFFFF8;
    v69 = v67 + 1;
    v70 = v68 + 1;
    v71 = v66;
    do
    {
      result = v69[-1];
      v72 = *v69;
      v70[-1] = result;
      *v70 = v72;
      v69 += 2;
      v70 += 2;
      v71 -= 8;
    }
    while (v71);
    if (v66 != a9)
    {
LABEL_48:
      v73 = a9 - v66;
      v74 = 4 * v66;
      v75 = (__int32 *)((char *)v68 + v74);
      v76 = (__int32 *)((char *)v67 + v74);
      do
      {
        v77 = *v76++;
        *v75++ = v77;
        --v73;
      }
      while (v73);
    }
    v78 = *a4;
    if (a9 >= 8
      && (v79 = (float32x4_t *)((char *)v67 + 4 * a9),
          (unint64_t)((char *)v78 - (char *)v79) >= 0x20))
    {
      v80 = a9 & 0xFFFFFFF8;
      v166 = v79 + 1;
      v167 = v78 + 1;
      v168 = v80;
      do
      {
        result = v166[-1];
        v169 = *v166;
        v167[-1] = result;
        *v167 = v169;
        v166 += 2;
        v167 += 2;
        v168 -= 8;
      }
      while (v168);
      if (v80 == a9)
      {
LABEL_55:
        v85 = *a5;
        v86 = 2 * a9;
        if (a9 >= 8
          && (v87 = (float32x4_t *)((char *)v67 + 4 * v86), (unint64_t)((char *)v85 - (char *)v87) >= 0x20))
        {
          v88 = a9 & 0xFFFFFFF8;
          v170 = v87 + 1;
          v171 = v85 + 1;
          v172 = v88;
          do
          {
            result = v170[-1];
            v173 = *v170;
            v171[-1] = result;
            *v171 = v173;
            v170 += 2;
            v171 += 2;
            v172 -= 8;
          }
          while (v172);
          if (v88 == a9)
            return result;
        }
        else
        {
          v88 = 0;
        }
        v89 = a9 - v88;
        v90 = &v85->i32[v88];
        v91 = &v67->i32[v88 + v86];
        do
        {
          v92 = *v91++;
          result.i32[0] = v92;
          *v90++ = v92;
          --v89;
        }
        while (v89);
        return result;
      }
    }
    else
    {
      v80 = 0;
    }
    v81 = a9 - v80;
    v82 = &v78->i32[v80];
    v83 = &v67->i32[v80 + a9];
    do
    {
      v84 = *v83++;
      *v82++ = v84;
      --v81;
    }
    while (v81);
    goto LABEL_55;
  }
  v44 = (float **)(a1 + 536);
  if (a9 <= 0)
  {
    sub_19C118B54(v44, "outvec0/gzx", a9);
    v64 = 0;
    v57 = -(-a9 >> 3);
    v65 = -8 * (-a9 >> 3);
    if (v65 >= a9)
      goto LABEL_72;
  }
  else
  {
    v45 = 0;
    v46 = *v42;
    v47 = *v44;
    if (a9 < 8)
      goto LABEL_35;
    if ((unint64_t)((char *)v47 - (char *)v46) < 0x20)
      goto LABEL_35;
    v45 = a9 & 0x7FFFFFF8;
    v48 = (__int128 *)&v46[1];
    v49 = v47 + 4;
    v50 = a9 & 0xFFFFFFF8;
    do
    {
      v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 8;
    }
    while (v50);
    if (v45 != a9)
    {
LABEL_35:
      v52 = a9 - v45;
      v53 = v45;
      v54 = &v47[v53];
      v55 = (int *)((char *)v46 + v53 * 4);
      do
      {
        v56 = *v55++;
        *(_DWORD *)v54++ = v56;
        --v52;
      }
      while (v52);
    }
    sub_19C118B54(v44, "outvec0/gzx", a9);
    v57 = a9 >> 3;
    if (a9 <= 7)
    {
      v64 = 0;
      v65 = 8 * v57;
      if (8 * v57 >= a9)
        goto LABEL_72;
    }
    else
    {
      v58 = 0;
      v59 = *v15;
      v60 = *v44;
      do
      {
        v61 = &v59[2 * v58];
        v62 = (float32x4_t *)&v60[8 * v58];
        v63 = vaddq_f32(v61[1], v62[1]);
        *v61 = vaddq_f32(*v61, *v62);
        v61[1] = v63;
        ++v58;
      }
      while (v57 != (_DWORD)v58);
      v64 = 1;
      v65 = 8 * v57;
      if (8 * v57 >= a9)
        goto LABEL_72;
    }
  }
  v93 = *v44;
  v94 = *v15;
  v95 = v65;
  v96 = a9 - (uint64_t)v65;
  if (v96 < 8)
    goto LABEL_70;
  v97 = v65;
  if ((char *)v94 + v97 * 4 < (char *)&v93[a9] && &v93[v97] < &v94->f32[a9])
    goto LABEL_70;
  v98 = v96 - (a9 & 7) + v65;
  v99 = v65 + (a9 & 7) - a9;
  v100 = v97 * 4 + 16;
  v101 = (float32x4_t *)&v93[v97 + 4];
  v102 = (float32x4_t *)((char *)v94 + v100);
  do
  {
    v103 = vaddq_f32(*v102, *v101);
    v102[-1] = vaddq_f32(v102[-1], v101[-1]);
    *v102 = v103;
    v101 += 2;
    v102 += 2;
    v99 += 8;
  }
  while (v99);
  v95 = v98;
  if ((a9 & 7) != 0)
  {
LABEL_70:
    v104 = a9 - v95;
    v105 = &v94->f32[v95];
    v106 = &v93[v95];
    do
    {
      v107 = *v106++;
      *v105 = *v105 + v107;
      ++v105;
      --v104;
    }
    while (v104);
  }
LABEL_72:
  if (a9 < 1)
    goto LABEL_78;
  v108 = *v42;
  v109 = *v44;
  if (a9 < 8 || (v110 = (uint64_t)v108->i64 + 4 * a9, (unint64_t)v109 - v110 < 0x20))
  {
    v111 = 0;
LABEL_76:
    v112 = a9 - v111;
    v113 = &v109[v111];
    v114 = &v108->i32[v111 + a9];
    do
    {
      v115 = *v114++;
      *(_DWORD *)v113++ = v115;
      --v112;
    }
    while (v112);
    goto LABEL_78;
  }
  v111 = a9 & 0xFFFFFFF8;
  v174 = (__int128 *)(v110 + 16);
  v175 = v109 + 4;
  v176 = v111;
  do
  {
    v177 = *v174;
    *(v175 - 1) = *(v174 - 1);
    *v175 = v177;
    v174 += 2;
    v175 += 2;
    v176 -= 8;
  }
  while (v176);
  if (v111 != a9)
    goto LABEL_76;
LABEL_78:
  sub_19C118B54(v44, "outvec1/grx", a9);
  if (v64)
  {
    v116 = *a4;
    v117 = *v44;
    v118 = v57;
    do
    {
      v119 = *(float32x4_t *)v117;
      v120 = *(float32x4_t *)(v117 + 4);
      v117 += 8;
      v121 = vaddq_f32(v116[1], v120);
      *v116 = vaddq_f32(*v116, v119);
      v116[1] = v121;
      v116 += 2;
      --v118;
    }
    while (v118);
  }
  if (v65 < a9)
  {
    v122 = *v44;
    v123 = *a4;
    v124 = v65;
    v125 = a9 - (uint64_t)v65;
    if (v125 < 8)
      goto LABEL_88;
    v126 = v65;
    if ((char *)v123 + v126 * 4 < (char *)&v122[a9] && &v122[v126] < &v123->f32[a9])
      goto LABEL_88;
    v127 = v125 - (a9 & 7) + v65;
    v128 = v65 + (a9 & 7) - a9;
    v129 = v126 * 4 + 16;
    v130 = (float32x4_t *)&v122[v126 + 4];
    v131 = (float32x4_t *)((char *)v123 + v129);
    do
    {
      v132 = vaddq_f32(*v131, *v130);
      v131[-1] = vaddq_f32(v131[-1], v130[-1]);
      *v131 = v132;
      v130 += 2;
      v131 += 2;
      v128 += 8;
    }
    while (v128);
    v124 = v127;
    if ((a9 & 7) != 0)
    {
LABEL_88:
      v133 = a9 - v124;
      v134 = &v123->f32[v124];
      v135 = &v122[v124];
      do
      {
        v136 = *v135++;
        *v134 = *v134 + v136;
        ++v134;
        --v133;
      }
      while (v133);
    }
  }
  if (a9 < 1)
    goto LABEL_96;
  v137 = (2 * a9);
  v138 = *v42;
  v139 = *v44;
  if (a9 >= 8 && (v140 = (uint64_t)v138->i64 + 4 * v137, (unint64_t)v139 - v140 >= 0x20))
  {
    v141 = a9 & 0xFFFFFFF8;
    v178 = (__int128 *)(v140 + 16);
    v179 = v139 + 4;
    v180 = v141;
    do
    {
      v181 = *v178;
      *(v179 - 1) = *(v178 - 1);
      *v179 = v181;
      v178 += 2;
      v179 += 2;
      v180 -= 8;
    }
    while (v180);
    if (v141 == a9)
      goto LABEL_96;
  }
  else
  {
    v141 = 0;
  }
  v142 = a9 - v141;
  v143 = &v139[v141];
  v144 = &v138->i32[v141 + v137];
  do
  {
    v145 = *v144++;
    *(_DWORD *)v143++ = v145;
    --v142;
  }
  while (v142);
LABEL_96:
  sub_19C118B54(v44, "outvec2/gox", a9);
  if (v64)
  {
    v146 = *a5;
    v147 = *v44;
    do
    {
      v148 = *(float32x4_t *)v147;
      v149 = *(float32x4_t *)(v147 + 4);
      v147 += 8;
      v150 = vaddq_f32(v146[1], v149);
      result = vaddq_f32(*v146, v148);
      *v146 = result;
      v146[1] = v150;
      v146 += 2;
      --v57;
    }
    while (v57);
  }
  if (v65 < a9)
  {
    v151 = *v44;
    v152 = *a5;
    v153 = v65;
    v154 = a9 - (uint64_t)v65;
    if (v154 < 8)
      goto LABEL_106;
    v155 = v65;
    if ((char *)v152 + v155 * 4 < (char *)&v151[a9] && &v151[v155] < &v152->f32[a9])
      goto LABEL_106;
    v156 = v154 - (a9 & 7) + v65;
    v157 = v65 + (a9 & 7) - a9;
    v158 = v155 * 4 + 16;
    v159 = (float32x4_t *)&v151[v155 + 4];
    v160 = (float32x4_t *)((char *)v152 + v158);
    do
    {
      result = vaddq_f32(v160[-1], v159[-1]);
      v161 = vaddq_f32(*v160, *v159);
      v160[-1] = result;
      *v160 = v161;
      v159 += 2;
      v160 += 2;
      v157 += 8;
    }
    while (v157);
    v153 = v156;
    if ((a9 & 7) != 0)
    {
LABEL_106:
      v162 = a9 - v153;
      v163 = &v152->f32[v153];
      v164 = &v151[v153];
      do
      {
        v165 = *v164++;
        result.f32[0] = *v163 + v165;
        *v163++ = result.f32[0];
        --v162;
      }
      while (v162);
    }
  }
  return result;
}

void sub_19C13D30C(uint64_t a1, int a2, float **a3, _QWORD *a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  float **v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  float32x4_t *v25;
  float *v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  float *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float v44;
  void *__p;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;

  if ((a9 & 1) != 0)
  {
    v13 = (float **)(a1 + 536);
    if (a2)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v15 = *(const void **)a6;
      v14 = *(_QWORD *)(a6 + 8);
      v16 = v14 - *(_QWORD *)a6;
      if (v14 != *(_QWORD *)a6)
      {
        if (v16 < 0)
          sub_19C07DA0C();
        v17 = (char *)operator new(v14 - *(_QWORD *)a6);
        v18 = &v17[4 * (v16 >> 2)];
        __p = v17;
        v47 = v18;
        memcpy(v17, v15, v16);
        v46 = v18;
      }
      sub_19C12E7D4(v13, (int **)&__p, a5, a7, a8);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      v19 = a7 / 8;
      if (a7 < 8)
        goto LABEL_19;
    }
    else
    {
      sub_19C12CFAC((float **)(a1 + 536), a4, a5, a7, a8, 0.0);
      v19 = a7 / 8;
      if (a7 < 8)
      {
LABEL_19:
        v31 = 8 * v19;
        if (8 * v19 < a7)
        {
          v32 = *v13;
          v33 = *a3;
          v34 = v31;
          if ((unint64_t)(a7 - (uint64_t)v31) < 8)
            goto LABEL_26;
          v35 = v31;
          if (&v33[v35] < &v32[a7] && &v32[v35] < &v33[a7])
            goto LABEL_26;
          v36 = v31 + (a7 & 7) - a7;
          v37 = v35 * 4 + 16;
          v38 = (float32x4_t *)&v32[v35 + 4];
          v39 = (float32x4_t *)((char *)v33 + v37);
          do
          {
            v40 = vaddq_f32(*v39, *v38);
            v39[-1] = vaddq_f32(v39[-1], v38[-1]);
            *v39 = v40;
            v38 += 2;
            v39 += 2;
            v36 += 8;
          }
          while (v36);
          v34 = a7 - (a7 & 7);
          if ((a7 & 7) != 0)
          {
LABEL_26:
            v41 = a7 - v34;
            v42 = &v33[v34];
            v43 = &v32[v34];
            do
            {
              v44 = *v43++;
              *v42 = *v42 + v44;
              ++v42;
              --v41;
            }
            while (v41);
          }
        }
        return;
      }
    }
    v25 = (float32x4_t *)*a3;
    v26 = *v13;
    v27 = v19;
    do
    {
      v28 = *(float32x4_t *)v26;
      v29 = *(float32x4_t *)(v26 + 4);
      v26 += 8;
      v30 = vaddq_f32(v25[1], v29);
      *v25 = vaddq_f32(*v25, v28);
      v25[1] = v30;
      v25 += 2;
      --v27;
    }
    while (v27);
    goto LABEL_19;
  }
  if (a2)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v21 = *(const void **)a6;
    v20 = *(_QWORD *)(a6 + 8);
    v22 = v20 - *(_QWORD *)a6;
    if (v20 != *(_QWORD *)a6)
    {
      if (v22 < 0)
        sub_19C07DA0C();
      v23 = (char *)operator new(v20 - *(_QWORD *)a6);
      v24 = &v23[4 * (v22 >> 2)];
      v48 = v23;
      v50 = v24;
      memcpy(v23, v21, v22);
      v49 = v24;
    }
    sub_19C12E7D4(a3, (int **)&v48, a5, a7, a8);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
  else
  {
    sub_19C12CFAC(a3, a4, a5, a7, a8, 0.0);
  }
}

void sub_19C13D5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C13D610(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  *a1 = &unk_1E3D1F420;
  sub_19C13A130(a1);
  v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19C22CB78((uint64_t)(a1 + 239));
  sub_19C22CB78((uint64_t)(a1 + 230));
  sub_19C22CB78((uint64_t)(a1 + 221));
  sub_19C22CB78((uint64_t)(a1 + 212));
  sub_19C22CB78((uint64_t)(a1 + 203));
  sub_19C22CB78((uint64_t)(a1 + 194));
  sub_19C22CB78((uint64_t)(a1 + 185));
  sub_19C22CB78((uint64_t)(a1 + 176));
  sub_19C22CB78((uint64_t)(a1 + 167));
  sub_19C22CB78((uint64_t)(a1 + 158));
  sub_19C22CB78((uint64_t)(a1 + 149));
  sub_19C101AC4(a1 + 119);
  sub_19C101AC4(a1 + 104);
  sub_19C101AC4(a1 + 89);
  v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  v16 = a1[26];
  if (v16)
  {
    v17 = a1[27];
    v18 = (void *)a1[26];
    if (v17 != v16)
    {
      v19 = a1[27];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1E3D1E2D8;
  v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19C13D868(uint64_t a1, int a2, __int128 *a3, float a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v66;
  void **v67;
  char **v68;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1EEE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  v5 = a3[2];
  v6 = a3[3];
  v7 = *((_QWORD *)a3 + 8);
  v9 = *a3;
  v8 = a3[1];
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  v66 = (void **)(a1 + 192);
  v67 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19C22CB44(a1 + 216);
  v68 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  v10 = dword_1EE418968;
  v11 = dword_1EE418968;
  v12 = *(_QWORD *)(a1 + 168);
  v13 = (*(_QWORD *)(a1 + 176) - v12) >> 3;
  if (dword_1EE418968 <= v13)
  {
    if (dword_1EE418968 < v13)
      *(_QWORD *)(a1 + 176) = v12 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v67, dword_1EE418968 - v13);
    v10 = dword_1EE418968;
    v11 = dword_1EE418968;
  }
  v14 = *(_QWORD *)(a1 + 192);
  v15 = (*(_QWORD *)(a1 + 200) - v14) >> 3;
  if (v11 <= v15)
  {
    if (v11 < v15)
      *(_QWORD *)(a1 + 200) = v14 + 8 * v11;
  }
  else
  {
    sub_19C098930(v66, v11 - v15);
    v10 = dword_1EE418968;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v10 >= 1)
  {
    for (i = 0; i < dword_1EE418968; ++i)
    {
      v18 = *(unsigned int *)(a1 + 44);
      v19 = (void *)operator new[]();
      v20 = v19;
      if ((int)v18 >= 1)
        bzero(v19, 4 * v18);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i) = v20;
      v21 = *(unsigned int *)(a1 + 44);
      v22 = (void *)operator new[]();
      v23 = v22;
      if ((int)v21 >= 1)
        bzero(v22, 4 * v21);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i) = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i);
      v26 = *(char **)(a1 + 296);
      v25 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v26 < v25)
      {
        *(_QWORD *)v26 = v24;
        v27 = v26 + 8;
        goto LABEL_30;
      }
      v28 = *v68;
      v29 = v26 - *v68;
      v30 = v29 >> 3;
      v31 = (v29 >> 3) + 1;
      if (v31 >> 61)
        sub_19C07DA0C();
      v32 = v25 - (_QWORD)v28;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          sub_19C07C7FC();
        v34 = operator new(8 * v33);
        v35 = &v34[8 * v30];
        *v35 = v24;
        v27 = (char *)(v35 + 1);
        if (v26 == v28)
        {
LABEL_28:
          *(_QWORD *)(a1 + 288) = v35;
          *(_QWORD *)(a1 + 296) = v27;
          *(_QWORD *)(a1 + 304) = &v34[8 * v33];
          if (!v26)
            goto LABEL_30;
LABEL_29:
          operator delete(v26);
          goto LABEL_30;
        }
      }
      else
      {
        v34 = 0;
        v35 = (_QWORD *)(8 * v30);
        *(_QWORD *)(8 * v30) = v24;
        v27 = (char *)(8 * v30 + 8);
        if (v26 == v28)
          goto LABEL_28;
      }
      v49 = v26 - 8 - v28;
      if (v49 < 0x58)
        goto LABEL_68;
      if ((unint64_t)(v26 - &v34[v29]) < 0x20)
        goto LABEL_68;
      v50 = (v49 >> 3) + 1;
      v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      v52 = &v26[-v51];
      v35 = (_QWORD *)((char *)v35 - v51);
      v53 = &v34[8 * v30 - 16];
      v54 = (__int128 *)(v26 - 16);
      v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v26 = v52;
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          v57 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v57;
        }
        while (v26 != v28);
      }
      v26 = *v68;
      *(_QWORD *)(a1 + 288) = v35;
      *(_QWORD *)(a1 + 296) = v27;
      *(_QWORD *)(a1 + 304) = &v34[8 * v33];
      if (v26)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(a1 + 296) = v27;
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i);
      v37 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v27 < v37)
      {
        *(_QWORD *)v27 = v36;
        v17 = (uint64_t)(v27 + 8);
        goto LABEL_12;
      }
      v38 = *v68;
      v39 = v27 - *v68;
      v40 = v39 >> 3;
      v41 = (v39 >> 3) + 1;
      if (v41 >> 61)
        sub_19C07DA0C();
      v42 = v37 - (_QWORD)v38;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          sub_19C07C7FC();
        v44 = operator new(8 * v43);
        v45 = &v44[8 * v40];
        v46 = &v44[8 * v43];
        *v45 = v36;
        v17 = (uint64_t)(v45 + 1);
        if (v27 == v38)
        {
LABEL_52:
          *(_QWORD *)(a1 + 288) = v45;
          *(_QWORD *)(a1 + 296) = v17;
          *(_QWORD *)(a1 + 304) = v46;
LABEL_60:
          operator delete(v27);
          goto LABEL_12;
        }
      }
      else
      {
        v44 = 0;
        v45 = (_QWORD *)(8 * v40);
        v46 = 0;
        *(_QWORD *)(8 * v40) = v36;
        v17 = 8 * v40 + 8;
        if (v27 == v38)
          goto LABEL_52;
      }
      v47 = v27 - 8 - v38;
      if (v47 < 0x58)
      {
        v48 = v27;
        goto LABEL_58;
      }
      if ((unint64_t)(v27 - &v44[v39]) < 0x20)
      {
        v48 = v27;
        do
        {
LABEL_58:
          v64 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v45 = v64;
        }
        while (v48 != v38);
        goto LABEL_59;
      }
      v58 = (v47 >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v27[-v59];
      v45 = (_QWORD *)((char *)v45 - v59);
      v60 = &v44[8 * v40 - 16];
      v61 = (__int128 *)(v27 - 16);
      v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *v61;
        *(v60 - 1) = *(v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      v27 = *(char **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v45;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v46;
      if (v27)
        goto LABEL_60;
LABEL_12:
      *(_QWORD *)(a1 + 296) = v17;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_19C13DD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12)
{
  _QWORD *v12;
  void *v14;
  void *v15;
  void *v16;

  v14 = *a10;
  if (*a10)
  {
    v12[25] = v14;
    operator delete(v14);
    v15 = *a11;
    if (!*a11)
    {
LABEL_3:
      *v12 = &unk_1E3D1E2D8;
      v16 = (void *)v12[1];
      if (!v16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  v12[22] = v15;
  operator delete(v15);
  *v12 = &unk_1E3D1E2D8;
  v16 = (void *)v12[1];
  if (!v16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v12[2] = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_19C13DE10()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C13DE20(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19C13DE28(uint64_t a1)
{
  return a1 + 192;
}

void sub_19C13DE30()
{
  sub_19C2210D4(1);
}

void sub_19C13DE40()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C13DE50()
{
  return 0;
}

_BYTE *sub_19C13DE58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    sub_19C2210D4(3);
  v9 = *a3;
  v10 = *(unsigned __int8 *)(a1 + 161);
  v11 = sub_19C2210B4();
  sub_19C101BB8((_BYTE *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  v12 = *a3;
  v13 = *(unsigned __int8 *)(a1 + 161);
  v14 = sub_19C2210B4();
  sub_19C101BB8((_BYTE *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  v15 = *a3;
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = sub_19C2210B4();
  sub_19C101BB8((_BYTE *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  v18 = *a3;
  v19 = *(unsigned __int8 *)(a1 + 161);
  v20 = sub_19C2210B4();
  return sub_19C101BB8((_BYTE *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, *(_DWORD *)(a1 + 44));
}

void sub_19C13DF8C(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int v9;
  int v10;
  int v11;
  int v12;

  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 44));
  v9 = sub_19C2210B4();
  sub_19C11A244((void **)(a1 + 128), __stream, a3, 3, v9, a5, *(_DWORD *)(a1 + 44));
  v10 = sub_19C2210B4();
  sub_19C11A244((void **)(a1 + 136), __stream, a3, 3, v10, a5, *(_DWORD *)(a1 + 44));
  v11 = sub_19C2210B4();
  sub_19C11A244((void **)(a1 + 144), __stream, a3, 3, v11, a5, *(_DWORD *)(a1 + 44));
  v12 = sub_19C2210B4();
  sub_19C11A244((void **)(a1 + 152), __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 44));
}

void sub_19C13E0B8(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19C11A63C(a1);
  operator delete(__p);
}

void sub_19C13E148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C13E164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;

  v3 = a1[36];
  v2 = a1[37];
  if (v2 == v3)
  {
    v3 = a1[37];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v3 = a1[36];
        v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19C13E1D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C13E1D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19C13E1E8()
{
  sub_19C2210D4(5);
}

int *sub_19C13E1F8(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t i;
  int32x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  BOOL v18;
  BOOL v20;
  BOOL v22;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    for (i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      v9 = v6[11];
      v10 = *(float32x4_t **)(*((_QWORD *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        v11 = (float32x4_t *)*((_QWORD *)v6 + 16);
        v12 = (float32x4_t *)*((_QWORD *)v6 + 17);
        v13 = (float32x4_t *)*((_QWORD *)v6 + 18);
        v14 = (float32x4_t *)*((_QWORD *)v6 + 19);
        if (v9 >= 8)
        {
          v15 = 0;
          v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            v15 = v9 & 0x7FFFFFF8;
            v24 = v11 + 1;
            v25 = v10 + 1;
            v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            v27 = v12 + 1;
            v28 = v14 + 1;
            v29 = v13 + 1;
            v30 = v9 & 0xFFFFFFF8;
            do
            {
              v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9)
              goto LABEL_3;
          }
        }
        else
        {
          v15 = 0;
        }
        v32 = v9 - v15;
        v33 = v15;
        v34 = &v10->f32[v15];
        v35 = &v14->f32[v33];
        v36 = &v13->f32[v33];
        v37 = &v12->f32[v33];
        v38 = &v11->f32[v33];
        do
        {
          v39 = *v38++;
          v40 = v39;
          v41 = *v37++;
          v42 = sqrtf(v41 + *(float *)v8.i32);
          v43 = *v36++;
          v44 = v43;
          v45 = *v35++;
          *v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

_QWORD *sub_19C13E3E4(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEF8, 0);
  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19C13E44C()
{
  sub_19C2210D4(5);
}

void sub_19C13E45C()
{
  sub_19C2210D4(5);
}

void sub_19C13E470(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C13E484(a1);
  operator delete(v1);
}

_QWORD *sub_19C13E484(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &unk_1E3D1EEE8;
  v4 = a1 + 36;
  v2 = (void **)a1[36];
  v3 = (void **)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        v2 = (void **)a1[36];
        v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19C22CB78((uint64_t)(a1 + 27));
  v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1E3D1E2D8;
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19C13E548(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  char **v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void **v70;
  char __p[17];
  char v72;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1EA38;
  v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = a4;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_BYTE *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19C2775D0;
  *(_DWORD *)(a1 + 328) = a5;
  *(_BYTE *)(a1 + 528) = 0;
  if (v8 != a2)
    sub_19C11EAD0(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  *(_QWORD *)(a1 + 224) = a3;
  v72 = 16;
  strcpy(__p, "From constructor");
  sub_19C11B874(a1);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v9)
  {
    v10 = 0;
    v11 = (void **)(a1 + 256);
    while (1)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8 * v10) + 272))(*(_QWORD *)(v9 + 8 * v10));
      v14 = v13;
      v16 = *(char **)(a1 + 264);
      v15 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)v16 = v13;
        v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      v18 = (char *)*v11;
      v19 = v16 - (_BYTE *)*v11;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        goto LABEL_73;
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23)
        break;
      v24 = 0;
      v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      v17 = 4 * v20 + 4;
      if (v16 != v18)
        goto LABEL_21;
LABEL_27:
      *(_QWORD *)(a1 + 256) = v25;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = &v24[4 * v23];
      if (v18)
        operator delete(v18);
LABEL_29:
      *(_QWORD *)(a1 + 264) = v17;
      if (!v10)
        goto LABEL_7;
      v36 = *(char **)(a1 + 360);
      v35 = *(_QWORD *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        v37 = (char *)*v70;
        v38 = v36 - (_BYTE *)*v70;
        v39 = v38 >> 2;
        v40 = (v38 >> 2) + 1;
        if (v40 >> 62)
LABEL_73:
          sub_19C07DA0C();
        v41 = v35 - (_QWORD)v37;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 62)
LABEL_72:
            sub_19C07C7FC();
          v43 = operator new(4 * v42);
          v44 = &v43[4 * v39];
          *v44 = v10;
          v12 = (uint64_t)(v44 + 1);
          if (v36 == v37)
            goto LABEL_48;
LABEL_42:
          v45 = v36 - 4 - v37;
          if (v45 < 0x2C)
            goto LABEL_76;
          if ((unint64_t)(v36 - &v43[v38]) < 0x20)
            goto LABEL_76;
          v46 = (v45 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v36[-v47];
          v44 = (_DWORD *)((char *)v44 - v47);
          v49 = &v43[4 * v39 - 16];
          v50 = v36 - 16;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v43 = 0;
          v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          v12 = 4 * v39 + 4;
          if (v36 != v37)
            goto LABEL_42;
        }
LABEL_48:
        *(_QWORD *)(a1 + 352) = v44;
        *(_QWORD *)(a1 + 360) = v12;
        *(_QWORD *)(a1 + 368) = &v43[4 * v42];
        if (v37)
          operator delete(v37);
        goto LABEL_6;
      }
      *(_DWORD *)v36 = v10;
      v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(_QWORD *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      v9 = *(_QWORD *)(a1 + 80);
      if (v10 >= (*(_QWORD *)(a1 + 88) - v9) >> 3)
        goto LABEL_50;
    }
    if (v23 >> 62)
      goto LABEL_72;
    v24 = operator new(4 * v23);
    v25 = &v24[4 * v20];
    *v25 = v14;
    v17 = (uint64_t)(v25 + 1);
    if (v16 == v18)
      goto LABEL_27;
LABEL_21:
    v26 = v16 - 4 - v18;
    if (v26 < 0x2C)
      goto LABEL_77;
    if ((unint64_t)(v16 - &v24[v19]) < 0x20)
      goto LABEL_77;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v16[-v28];
    v25 = (_DWORD *)((char *)v25 - v28);
    v30 = &v24[4 * v20 - 16];
    v31 = v16 - 16;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  v54 = dword_1EE418968;
  v55 = *(_QWORD *)(a1 + 376);
  v56 = (*(_QWORD *)(a1 + 384) - v55) >> 2;
  if (dword_1EE418968 <= v56)
  {
    if (dword_1EE418968 < v56)
      *(_QWORD *)(a1 + 384) = v55 + 4 * dword_1EE418968;
  }
  else
  {
    sub_19C101928(a1 + 376, dword_1EE418968 - v56);
    v54 = dword_1EE418968;
  }
  v57 = *(_QWORD *)(a1 + 400);
  v58 = (*(_QWORD *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58)
      *(_QWORD *)(a1 + 408) = v57 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 400, v54 - v58);
    v54 = dword_1EE418968;
  }
  v59 = *(_QWORD *)(a1 + 424);
  v60 = (*(_QWORD *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60)
      *(_QWORD *)(a1 + 432) = v59 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 424, v54 - v60);
  }
  v61 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v62 = *(_QWORD *)(a1 + 544);
  v63 = *(_QWORD *)(a1 + 536);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        v66 = *(_QWORD *)(a1 + 544);
        do
        {
          v68 = *(void **)(v66 - 24);
          v66 -= 24;
          v67 = v68;
          if (v68)
          {
            *(_QWORD *)(v62 - 16) = v67;
            operator delete(v67);
          }
          v62 = v66;
        }
        while (v66 != v65);
      }
      *(_QWORD *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19C167E70(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19C13EAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _QWORD *v22;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a22 < 0)
  {
    operator delete(__p);
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19C0830E8(v24);
      v26 = (void *)v22[56];
      if (!v26)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19C0830E8(v24);
  v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    v27 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    v28 = *a14;
    if (!*a14)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    v29 = *a15;
    if (!*a15)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    v30 = *a16;
    if (!*a16)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    v31 = (void *)v22[38];
    if (!v31)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    v32 = *a11;
    if (!*a11)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19C10850C(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19C10850C(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_19C13EC14(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19C13EC1C(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19C13EC24(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19C13EC2C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19C13EC90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C13ED08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *sub_19C13ED88(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C13EE50(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C13EF18(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

_QWORD *sub_19C13EFB8(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19C13F058(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C13F0B8(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C13F128(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19C13F178(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char __p[21];

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19C11B874(a1);
}

void sub_19C13F224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C13F240(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  v9 = a1[25];
  v8 = a1[26];
  if (v8 != v9)
  {
    v10 = a1[26];
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v8 - 16) = v11;
        operator delete(v11);
      }
      v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  v14 = a1[59];
  v13 = a1[60];
  if (v13 != v14)
  {
    v15 = a1[60];
    do
    {
      v17 = *(void **)(v15 - 24);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *(_QWORD *)(v13 - 16) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19C13F370(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  int *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  int v45;

  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v45 >= 1)
        {
          v17 = 0;
          v24 = 0;
          v25 = 1.1755e-38;
          do
          {
            v26 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v24);
            if (v26 > v25)
              v17 = v24;
            v25 = fmaxf(v26, v25);
            ++v24;
          }
          while (v45 != v24);
          goto LABEL_21;
        }
LABEL_24:
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 0;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        v17 = 2;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 2;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
        {
LABEL_22:
          v27 = (int *)(v20 + 8 * v17 + 4);
LABEL_23:
          v28 = *v27;
          goto LABEL_36;
        }
      }
      else
      {
        v17 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = v17;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
      }
LABEL_25:
      v29 = v19[6];
      if (v29)
      {
        v30 = v19 + 6;
        do
        {
          v31 = *(_DWORD *)(v29 + 28);
          v32 = v31 < v17;
          if (v31 >= v17)
            v33 = (uint64_t *)v29;
          else
            v33 = (uint64_t *)(v29 + 8);
          if (!v32)
            v30 = (_QWORD *)v29;
          v29 = *v33;
        }
        while (*v33);
        if (v30 != v19 + 6 && *((_DWORD *)v30 + 7) <= v17)
        {
          v27 = (int *)(v30 + 4);
          goto LABEL_23;
        }
      }
      v28 = -1;
LABEL_36:
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v8) = v28 + 1;
      v34 = *(int *)(v18 + 4 * v8);
      v35 = v19[13];
      if (v35)
      {
        v36 = (int *)(v35 + 8 * v34 + 4);
LABEL_38:
        v9 = *v36;
        goto LABEL_4;
      }
      v39 = v19[11];
      v37 = v19 + 11;
      v38 = v39;
      if (v39)
      {
        v40 = v37;
        do
        {
          v41 = *(_DWORD *)(v38 + 28);
          v42 = v41 < (int)v34;
          if (v41 >= (int)v34)
            v43 = (uint64_t *)v38;
          else
            v43 = (uint64_t *)(v38 + 8);
          if (!v42)
            v40 = (_QWORD *)v38;
          v38 = *v43;
        }
        while (*v43);
        if (v40 != v37 && *((_DWORD *)v40 + 7) <= (int)v34)
        {
          v36 = (int *)(v40 + 4);
          goto LABEL_38;
        }
      }
      v9 = -1;
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v8) = v9;
      v10 = **(_QWORD **)(a1 + 200);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      v12 = *(_QWORD **)(a1 + 200);
      v13 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8);
      v14 = v12[3 * (int)v13];
      *(_DWORD *)(*(_QWORD *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(v15);
      bzero(*(void **)(v14 + 8 * v8), 4 * v16);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4)
        return;
    }
    if (v45 >= 1)
    {
      v17 = 0;
      v21 = 0;
      v22 = 1.1755e-38;
      do
      {
        v23 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v21);
        if (v23 > v22)
          v17 = v21;
        v22 = fmaxf(v23, v22);
        ++v21;
      }
      while (v45 != v21);
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v8) = v17;
      v19 = *(_QWORD **)(a1 + 496);
      v20 = v19[8];
      if (v20)
        goto LABEL_22;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19C13F698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19C13F718(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19C13F77C()
{
  sub_19C2210D4(5);
}

void sub_19C13F78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  float32x4_t *v58;
  float32x4_t *v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t v74;
  uint64_t v75;
  float *v76;
  float *v77;
  float v78;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (i = 0; i != v9; ++i)
    {
      v13 = *(int *)(a1 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 248))(v14, *(_QWORD *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13));
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      v18 = *(const void **)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v19 = v17 - *(_QWORD *)v16;
      if (v17 == *(_QWORD *)v16)
      {
        v20 = 0;
      }
      else
      {
        if (v19 < 0)
          sub_19C07DA0C();
        v20 = operator new(v17 - *(_QWORD *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      v21 = *(_QWORD *)(a1 + 504);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 264))(v22);
      v24 = v23 / 8;
      if (v23 >= 8)
      {
        v25 = *(float32x4_t **)(v21 + 8 * i);
        v26 = (float32x4_t *)*((_QWORD *)v20 + i);
        v27 = v23 / 8;
        do
        {
          v28 = *v26;
          v29 = v26[1];
          v26 += 2;
          v30 = vaddq_f32(v25[1], v29);
          *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        v32 = *((_QWORD *)v20 + i);
        v33 = *(_QWORD *)(v21 + 8 * i);
        v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8)
          goto LABEL_23;
        v35 = v33 + 4 * v31;
        v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23)
          goto LABEL_23;
        v38 = v31 + (v23 & 7) - v23;
        v39 = (float32x4_t *)(v36 + 16);
        v40 = (float32x4_t *)(v35 + 16);
        do
        {
          v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          *v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          v42 = v23 - v34;
          v43 = (float *)(v33 + 4 * v34);
          v44 = (float *)(v32 + 4 * v34);
          do
          {
            v45 = *v44++;
            *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      v46 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 248))(v47, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v46));
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48);
      v51 = *(const void **)v49;
      v50 = *(_QWORD *)(v49 + 8);
      v52 = v50 - *(_QWORD *)v49;
      if (v50 == *(_QWORD *)v49)
      {
        v53 = 0;
      }
      else
      {
        if (v52 < 0)
          sub_19C07DA0C();
        v53 = operator new(v50 - *(_QWORD *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      v54 = *(_QWORD *)(a1 + 504);
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 264))(v55);
      v57 = v56 / 8;
      if (v56 >= 8)
      {
        v58 = *(float32x4_t **)(v54 + 8 * i);
        v59 = (float32x4_t *)*((_QWORD *)v53 + i);
        v60 = v56 / 8;
        do
        {
          v61 = *v59;
          v62 = v59[1];
          v59 += 2;
          v63 = vaddq_f32(v58[1], v62);
          *v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        v65 = *((_QWORD *)v53 + i);
        v66 = *(_QWORD *)(v54 + 8 * i);
        v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8)
          goto LABEL_42;
        v68 = v66 + 4 * v64;
        v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56)
          goto LABEL_42;
        v71 = v64 + (v56 & 7) - v56;
        v72 = (float32x4_t *)(v69 + 16);
        v73 = (float32x4_t *)(v68 + 16);
        do
        {
          v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          v75 = v56 - v67;
          v76 = (float *)(v66 + 4 * v67);
          v77 = (float *)(v65 + 4 * v67);
          do
          {
            v78 = *v77++;
            *v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53)
        operator delete(v53);
      if (v20)
        operator delete(v20);
    }
  }
}

void sub_19C13FBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_19C13FC24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  float v36;
  float v37;
  int v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  void **p_p;
  int *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  int *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  int *v70;
  uint64_t v71;
  int v72;
  int *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t *v85;
  int *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  int *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  _OWORD *v98;
  int *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  _DWORD *v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int *v138;
  char *v139;
  int *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  char *v155;
  __int128 *v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  _OWORD *v164;
  int *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  int64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  int *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  float v207;
  float32x4_t *v208;
  unint64_t v209;
  float32x4_t *v210;
  uint64_t v211;
  float32x4_t v212;
  unint64_t v213;
  float *v214;
  int *v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  vDSP_Length v221;
  char *v222;
  uint64_t v223;
  char *v224;
  int64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int *v229;
  int *v230;
  int *v231;
  uint64_t *v232;
  void *__p;
  int *v234;
  char *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  int *v239;
  int *v240;
  char *v241;
  float __C[3];

  v239 = 0;
  v240 = 0;
  v241 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  v15 = *(_QWORD *)(a1 + 224);
  if (v15)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    v17 = a5 != 0;
    v223 = a7;
    v226 = a2;
    v227 = a3;
    v228 = v16;
    do
    {
      v18 = *(int *)(a1 + 332);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 272))(v19);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v21 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 256))(v22, v228);
      }
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v23 + 224))(v23, a2, a3, v17, &v236);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      v232 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      __p = 0;
      v234 = 0;
      v235 = 0;
      v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        v42 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v17);
        v43 = (int *)operator new(4uLL);
        *v43 = v42;
        v234 = v43 + 1;
        v235 = (char *)(v43 + 1);
        __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        v31 = *v232;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 272))(v32);
        if (v33 < 1)
        {
          v38 = 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
            goto LABEL_25;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 1.1755e-38;
          do
          {
            v37 = *(float *)(*(_QWORD *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36)
              v34 = v35;
            v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          v38 = v34 + 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
          {
LABEL_25:
            *v40 = v38;
            v41 = (uint64_t)(v40 + 1);
LABEL_182:
            v234 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        v45 = (int *)__p;
        v46 = (char *)v40 - (_BYTE *)__p;
        v47 = ((char *)v40 - (_BYTE *)__p) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          sub_19C07DA0C();
        v49 = v39 - (_BYTE *)__p;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            sub_19C07C7FC();
          v51 = operator new(4 * v50);
          v52 = (int *)&v51[4 * v47];
          *v52 = v38;
          v41 = (uint64_t)(v52 + 1);
          if (v40 == v45)
            goto LABEL_180;
LABEL_174:
          v160 = (char *)(v40 - 1) - (char *)v45;
          if (v160 < 0x2C)
            goto LABEL_259;
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20)
            goto LABEL_259;
          v161 = (v160 >> 2) + 1;
          v162 = 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
          v163 = &v40[v162 / 0xFFFFFFFFFFFFFFFCLL];
          v52 = (int *)((char *)v52 - v162);
          v164 = &v51[4 * v47 - 16];
          v165 = v40 - 4;
          v166 = v161 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v167 = *(_OWORD *)v165;
            *(v164 - 1) = *((_OWORD *)v165 - 1);
            *v164 = v167;
            v164 -= 2;
            v165 -= 8;
            v166 -= 8;
          }
          while (v166);
          v40 = v163;
          if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              v168 = *--v40;
              *--v52 = v168;
            }
            while (v40 != v45);
          }
        }
        else
        {
          v51 = 0;
          v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          v41 = 4 * v47 + 4;
          if (v40 != v45)
            goto LABEL_174;
        }
LABEL_180:
        __p = v52;
        v234 = (int *)v41;
        v235 = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19C11EC14(*v232 + 8 * v17, (float32x4_t **)(*v232 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      v26 = v239;
      v240 = v239;
      v27 = *(_QWORD *)(a1 + 536);
      v28 = *(_QWORD *)(a1 + 544) - v27;
      if (!v28)
        goto LABEL_44;
      v29 = v28 / 24;
      if (v29 <= 1)
        v29 = 1;
      if (v29 >= 2)
      {
        v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        v53 = (_QWORD *)(v27 + 32);
        v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30)
          goto LABEL_44;
      }
      else
      {
        v30 = 0;
      }
      v56 = (_QWORD *)(v27 + 24 * v30 + 8);
      v57 = v29 - v30;
      do
      {
        *v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      v59 = *(_DWORD **)a7;
      v58 = *(_QWORD *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      v60 = v58 - *(_QWORD *)a7;
      if (v58 == *(_QWORD *)a7)
        goto LABEL_213;
      if (v60 < 5)
      {
        v240 = v26;
        if (v60 != 4)
          goto LABEL_212;
        v133 = operator new(4uLL);
        *v133 = *v59;
        v62 = (char *)(v133 + 1);
        v134 = v133;
        if (*v133 != -1)
          goto LABEL_145;
LABEL_184:
        v169 = *(_QWORD *)(a1 + 544);
        v170 = *(_QWORD *)(a1 + 536);
        if (v169 == v170)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        v171 = 0;
        v231 = v134;
        while (2)
        {
          v173 = *(_QWORD *)(v170 + 24 * v171);
          v174 = *(_QWORD *)(v170 + 24 * v171++ + 8);
          if (v174 == v173)
            goto LABEL_188;
          v175 = (char *)v234;
          if (v234 < (int *)v235)
          {
            *v234 = v171;
            v172 = (uint64_t)(v175 + 4);
            goto LABEL_187;
          }
          v176 = (char *)__p;
          v177 = (char *)v234 - (_BYTE *)__p;
          v178 = ((char *)v234 - (_BYTE *)__p) >> 2;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 62)
            sub_19C07DA0C();
          v180 = v235 - (_BYTE *)__p;
          if ((v235 - (_BYTE *)__p) >> 1 > v179)
            v179 = v180 >> 1;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
            v181 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            v225 = (char *)v234 - (_BYTE *)__p;
            if (v181 >> 62)
              sub_19C07C7FC();
            v182 = ((char *)v234 - (_BYTE *)__p) >> 2;
            v183 = v170;
            v184 = v181;
            v185 = (char *)operator new(4 * v181);
            v170 = v183;
            v181 = v184;
            v178 = v182;
            v177 = v225;
            v186 = &v185[4 * v182];
            *(_DWORD *)v186 = v171;
            v172 = (uint64_t)(v186 + 4);
            if (v175 != v176)
            {
LABEL_200:
              v187 = v175 - 4 - v176;
              if (v187 < 0x2C)
              {
                v134 = v231;
                goto LABEL_208;
              }
              v134 = v231;
              if ((unint64_t)(v175 - &v185[v177]) < 0x20)
                goto LABEL_260;
              v188 = (v187 >> 2) + 1;
              v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
              v190 = &v175[-v189];
              v186 -= v189;
              v191 = &v185[4 * v178 - 16];
              v192 = v175 - 16;
              v193 = v188 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v194 = *(_OWORD *)v192;
                *((_OWORD *)v191 - 1) = *((_OWORD *)v192 - 1);
                *(_OWORD *)v191 = v194;
                v191 -= 32;
                v192 -= 32;
                v193 -= 8;
              }
              while (v193);
              v175 = v190;
              if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  v195 = *((_DWORD *)v175 - 1);
                  v175 -= 4;
                  *((_DWORD *)v186 - 1) = v195;
                  v186 -= 4;
                }
                while (v175 != v176);
              }
LABEL_209:
              __p = v186;
              v234 = (int *)v172;
              v235 = &v185[4 * v181];
              if (v176)
              {
                operator delete(v176);
                v169 = *(_QWORD *)(a1 + 544);
                v170 = *(_QWORD *)(a1 + 536);
              }
LABEL_187:
              v234 = (int *)v172;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v169 - v170) >> 3) <= v171)
                goto LABEL_171;
              continue;
            }
          }
          else
          {
            v185 = 0;
            v186 = (char *)(4 * v178);
            *(_DWORD *)(4 * v178) = v171;
            v172 = 4 * v178 + 4;
            if (v175 != v176)
              goto LABEL_200;
          }
          break;
        }
        v134 = v231;
        goto LABEL_209;
      }
      v61 = operator new(4uLL);
      v229 = v61;
      *v61 = *v59;
      v62 = (char *)(v61 + 1);
      if (v59[1] != -1)
        sub_19C2210D4(900);
      if (v60 < 9)
      {
        v134 = v61;
        if (*v61 == -1)
          goto LABEL_184;
        goto LABEL_145;
      }
      v63 = 2;
      v224 = (char *)(v61 + 1);
      do
      {
        v65 = (int)v59[v63];
        v66 = *(_QWORD *)(a1 + 496);
        v67 = *(_QWORD *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            v68 = *(_DWORD *)(v67 + 8 * (_DWORD)v65 + 4);
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
LABEL_49:
            *v70 = v68;
            v64 = (uint64_t)(v70 + 1);
LABEL_50:
            v240 = (int *)v64;
            goto LABEL_51;
          }
          v81 = *(_QWORD *)(v66 + 88);
          v79 = v66 + 88;
          v80 = v81;
          if (!v81)
            goto LABEL_73;
          v82 = v79;
          do
          {
            v83 = *(_DWORD *)(v80 + 28);
            v84 = v83 < (int)v65;
            if (v83 >= (int)v65)
              v85 = (uint64_t *)v80;
            else
              v85 = (uint64_t *)(v80 + 8);
            if (!v84)
              v82 = v80;
            v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            v68 = -1;
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
            goto LABEL_49;
          }
          v68 = *(_DWORD *)(v82 + 32);
          v70 = v240;
          v69 = v241;
          if (v240 < (int *)v241)
            goto LABEL_49;
LABEL_74:
          v86 = v239;
          v87 = v70 - v239;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
            sub_19C07DA0C();
          v89 = v69 - (char *)v239;
          if (v89 >> 1 > v88)
            v88 = v89 >> 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
            v90 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 >> 62)
              sub_19C07C7FC();
            v91 = v90;
            v92 = operator new(4 * v90);
            v90 = v91;
            v93 = (int *)&v92[4 * v87];
            *v93 = v68;
            v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                v62 = v224;
                goto LABEL_93;
              }
              v62 = v224;
              if ((unint64_t)((char *)v86 - v92) < 0x20)
                goto LABEL_261;
              v95 = (v94 >> 2) + 1;
              v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              v93 = (int *)((char *)v93 - v96);
              v98 = &v92[4 * v87 - 16];
              v99 = v70 - 4;
              v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  v102 = *--v70;
                  *--v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              v239 = v93;
              v240 = (int *)v64;
              v241 = &v92[4 * v90];
              if (v86)
                operator delete(v86);
              goto LABEL_50;
            }
          }
          else
          {
            v92 = 0;
            v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            v64 = 4 * v87 + 4;
            if (v70 != v86)
              goto LABEL_83;
          }
          v62 = v224;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112))
            goto LABEL_86;
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        v71 = *(_QWORD *)(v66 + 64);
        if (v71)
        {
          v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67)
            goto LABEL_60;
        }
        else
        {
          v103 = *(_QWORD *)(v66 + 48);
          if (!v103)
            goto LABEL_106;
          v104 = v66 + 48;
          do
          {
            v105 = *(_DWORD *)(v103 + 28);
            v106 = v105 < (int)v65;
            if (v105 >= (int)v65)
              v107 = (uint64_t *)v103;
            else
              v107 = (uint64_t *)(v103 + 8);
            if (!v106)
              v104 = v103;
            v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            v72 = -1;
            if (v67)
              goto LABEL_60;
          }
        }
        v110 = *(_QWORD *)(v66 + 88);
        v108 = v66 + 88;
        v109 = v110;
        if (v110)
        {
          v111 = v108;
          do
          {
            v112 = *(_DWORD *)(v109 + 28);
            v113 = v112 < (int)v65;
            if (v112 >= (int)v65)
              v114 = (uint64_t *)v109;
            else
              v114 = (uint64_t *)(v109 + 8);
            if (!v113)
              v111 = v109;
            v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            v73 = (int *)(v111 + 32);
LABEL_61:
            v74 = *v73;
            v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
            v77 = *(char **)(v75 + 8);
            v76 = *(_QWORD *)(v75 + 16);
            if ((unint64_t)v77 >= v76)
              goto LABEL_118;
            goto LABEL_62;
          }
        }
        v74 = -1;
        v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
        v77 = *(char **)(v75 + 8);
        v76 = *(_QWORD *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          v115 = *(char **)v75;
          v116 = (uint64_t)&v77[-*(_QWORD *)v75];
          v117 = v116 >> 2;
          v118 = (v116 >> 2) + 1;
          if (v118 >> 62)
            sub_19C07DA0C();
          v119 = v76 - (_QWORD)v115;
          if (v119 >> 1 > v118)
            v118 = v119 >> 1;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
            v120 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v120 = v118;
          if (v120)
          {
            v222 = &v77[-*(_QWORD *)v75];
            if (v120 >> 62)
              sub_19C07C7FC();
            v121 = v120;
            v122 = operator new(4 * v120);
            v120 = v121;
            v116 = (uint64_t)v222;
            v123 = (int *)&v122[4 * v117];
            *v123 = v74;
            v78 = (uint64_t)(v123 + 1);
            if (v77 == v115)
              goto LABEL_137;
LABEL_131:
            v124 = v77 - 4 - v115;
            if (v124 < 0x2C)
              goto LABEL_262;
            if ((unint64_t)(v77 - &v122[v116]) < 0x20)
              goto LABEL_262;
            v125 = (v124 >> 2) + 1;
            v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            v127 = &v77[-v126];
            v123 = (int *)((char *)v123 - v126);
            v128 = &v122[4 * v117 - 16];
            v129 = v77 - 16;
            v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            v122 = 0;
            v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            v78 = 4 * v117 + 4;
            if (v77 != v115)
              goto LABEL_131;
          }
LABEL_137:
          *(_QWORD *)v75 = v123;
          *(_QWORD *)(v75 + 8) = v78;
          *(_QWORD *)(v75 + 16) = &v122[4 * v120];
          if (v115)
            operator delete(v115);
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)v77 = v74;
        v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(_QWORD *)(v75 + 8) = v78;
        v62 = v224;
LABEL_51:
        ++v63;
        v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
      v134 = v229;
      if (*v229 == -1)
        goto LABEL_184;
LABEL_145:
      v135 = 0;
      while (1)
      {
LABEL_147:
        v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (v137 = v136 + 1,
              (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19C2210D4(45);
        }
        v138 = v234;
        if (v234 >= (int *)v235)
          break;
        *v234 = v137;
        v234 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2))
          goto LABEL_171;
      }
      v139 = v62;
      v230 = v134;
      v140 = (int *)__p;
      v141 = (char *)v234 - (_BYTE *)__p;
      v142 = ((char *)v234 - (_BYTE *)__p) >> 2;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
        sub_19C07DA0C();
      v144 = v235 - (_BYTE *)__p;
      if ((v235 - (_BYTE *)__p) >> 1 > v143)
        v143 = v144 >> 1;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
        v145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (!v145)
      {
        v147 = 0;
        v148 = (char *)(4 * v142);
        *(_DWORD *)(4 * v142) = v137;
        v149 = 4 * v142 + 4;
        if (v138 != v140)
          goto LABEL_159;
LABEL_162:
        v62 = v139;
        a7 = v223;
        goto LABEL_168;
      }
      if (v145 >> 62)
        sub_19C07C7FC();
      v146 = v145;
      v147 = (char *)operator new(4 * v145);
      v145 = v146;
      v148 = &v147[4 * v142];
      *(_DWORD *)v148 = v137;
      v149 = (uint64_t)(v148 + 4);
      if (v138 == v140)
        goto LABEL_162;
LABEL_159:
      v150 = (char *)(v138 - 1) - (char *)v140;
      if (v150 < 0x2C)
      {
        v62 = v139;
        a7 = v223;
        goto LABEL_167;
      }
      v151 = (char *)v138 - &v147[v141];
      v62 = v139;
      a7 = v223;
      if (v151 < 0x20)
        goto LABEL_263;
      v152 = (v150 >> 2) + 1;
      v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
      v154 = &v138[v153 / 0xFFFFFFFFFFFFFFFCLL];
      v148 -= v153;
      v155 = &v147[4 * v142 - 16];
      v156 = (__int128 *)(v138 - 4);
      v157 = v152 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v158 = *v156;
        *((_OWORD *)v155 - 1) = *(v156 - 1);
        *(_OWORD *)v155 = v158;
        v155 -= 32;
        v156 -= 2;
        v157 -= 8;
      }
      while (v157);
      v138 = v154;
      if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          v159 = *--v138;
          *((_DWORD *)v148 - 1) = v159;
          v148 -= 4;
        }
        while (v138 != v140);
      }
LABEL_168:
      __p = v148;
      v234 = (int *)v149;
      v235 = &v147[4 * v145];
      if (v140)
        operator delete(v140);
      v134 = v230;
      v234 = (int *)v149;
      if (++v135 < (unint64_t)((v62 - (char *)v230) >> 2))
        goto LABEL_147;
LABEL_171:
      if (v134)
        goto LABEL_211;
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      v196 = (int *)*p_p;
      a2 = v226;
      a3 = v227;
      if (p_p[1] != *p_p)
      {
        v197 = 0;
        while (1)
        {
          v198 = v196[v197];
          v199 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v199 + 4 * v198))
          {
            *(_DWORD *)(v199 + 4 * v198) = 1;
            v200 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 256))(v200, v228);
          }
          v201 = *(_QWORD *)(a7 + 8) != *(_QWORD *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v198 - 24)
               : (void **)&v239;
          v202 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v202 + 224))(v202, v226, v227, v17, v201);
          v203 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          v204 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 32))(v203);
          v205 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v206 = *(unsigned int *)(v205 + 4 * v198);
          if ((int)v206 >= 1)
          {
            v207 = *(float *)(*(_QWORD *)(*v232 + 8 * v17) + 4 * v198 - 4);
            v208 = *(float32x4_t **)(*v204 + 8 * v17);
            if (v206 < 8)
            {
              v209 = 0;
              goto LABEL_230;
            }
            v209 = v206 & 0x7FFFFFF8;
            v210 = v208 + 1;
            v211 = v206 & 0xFFFFFFF8;
            do
            {
              v212 = vmulq_n_f32(*v210, v207);
              v210[-1] = vmulq_n_f32(v210[-1], v207);
              *v210 = v212;
              v210 += 2;
              v211 -= 8;
            }
            while (v211);
            if (v209 != v206)
            {
LABEL_230:
              v213 = v206 - v209;
              v214 = &v208->f32[v209];
              do
              {
                *v214 = *v214 * v207;
                ++v214;
                --v213;
              }
              while (v213);
            }
LABEL_232:
            if ((int)v206 >= 1)
            {
              v215 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * (int)v198 - 24);
              v216 = *(_DWORD **)(*v204 + 8 * v17);
              v217 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v17);
              do
              {
                v219 = *v215++;
                v218 = v219;
                LODWORD(v219) = *v216++;
                *(_DWORD *)(v217 + 4 * v218) = v219;
                --v206;
              }
              while (v206);
            }
          }
          ++v197;
          v196 = (int *)*p_p;
          if (v197 >= ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2)
            goto LABEL_236;
        }
        v206 = *(unsigned int *)(v205 + 4 * v198);
        goto LABEL_232;
      }
LABEL_236:
      v220 = *(_QWORD *)(a1 + 104);
      v221 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v220 + 8 * v17), 1, __C, v221);
      if (__p)
      {
        v234 = (int *)__p;
        operator delete(__p);
      }
      if (v236)
      {
        v237 = v236;
        operator delete(v236);
      }
      ++v17;
    }
    while (v17 != v228);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
}

void sub_19C140B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 120);
  if (!v26)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19C140C80(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEB0, 0);
  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v14 + 336))(v14, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19C140D44(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19C140E4C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19C140F2C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C140F40(a1);
  operator delete(v1);
}

_QWORD *sub_19C140F40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  *a1 = &unk_1E3D1EA38;
  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[67];
  if (v6)
  {
    v7 = a1[68];
    v8 = (void *)a1[67];
    if (v7 != v6)
    {
      v9 = a1[68];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  v13 = a1[59];
  if (v13)
  {
    v14 = a1[60];
    v15 = (void *)a1[59];
    if (v14 != v13)
    {
      v16 = a1[60];
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }
  return sub_19C10850C(a1);
}

uint64_t sub_19C1410D8(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  float v18;
  int v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;
  __int128 v67;
  char v68;
  __int128 __p;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char v76;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1FA40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  sub_19C22CB44(a1 + 1704);
  sub_19C22CB44(a1 + 1776);
  sub_19C22CB44(a1 + 1848);
  sub_19C22CB44(a1 + 1920);
  sub_19C22CB44(a1 + 1992);
  sub_19C22CB44(a1 + 2064);
  sub_19C22CB44(a1 + 2136);
  sub_19C22CB44(a1 + 2208);
  sub_19C22CB44(a1 + 2280);
  sub_19C22CB44(a1 + 2352);
  sub_19C22CB44(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v14 = *(unsigned __int8 *)(a7 + 45);
  *(_BYTE *)(a1 + 2692) = v14 ^ 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a9;
  if (a9)
  {
    v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2680) + 376);
    *(_BYTE *)(a1 + 40) = a8;
    v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(_BYTE *)(a1 + 40) = a8;
  }
  *(_BYTE *)(a1 + 1696) = v14;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a7 + 46);
  v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  v18 = *(float *)(a7 + 16);
  v19 = *(_DWORD *)(a7 + 20);
  v20 = *(double *)(a7 + 24);
  *(float *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v14)
  {
    v21 = *(_DWORD *)(a7 + 32);
    if (v21 == 2)
    {
      v30 = operator new();
      *(_QWORD *)v30 = &unk_1E3D1E968;
      *(float *)(v30 + 24) = v18;
      *(_DWORD *)(v30 + 28) = v19;
      *(_DWORD *)(v30 + 32) = 841731191;
      v31 = v20;
      *(_WORD *)(v30 + 143) = 259;
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 12) = 0;
      *(float *)(v30 + 36) = v31;
      *(_DWORD *)(v30 + 40) = v19;
      *(float *)(v30 + 44) = v31;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_QWORD *)(v30 + 112) = 0;
      *(_QWORD *)(v30 + 120) = 4802391;
      *(_QWORD *)(a1 + 1552) = v30;
      v32 = operator new();
      *(_QWORD *)v32 = &unk_1E3D1E968;
      *(float *)(v32 + 24) = v18;
      *(_DWORD *)(v32 + 28) = v19;
      *(_DWORD *)(v32 + 32) = 841731191;
      *(_WORD *)(v32 + 143) = 259;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v32 + 8) = 0;
      *(_BYTE *)(v32 + 12) = 0;
      *(float *)(v32 + 36) = v31;
      *(_DWORD *)(v32 + 40) = v19;
      *(float *)(v32 + 44) = v31;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      *(_OWORD *)(v32 + 80) = 0u;
      *(_OWORD *)(v32 + 96) = 0u;
      *(_QWORD *)(v32 + 112) = 0;
      *(_QWORD *)(v32 + 120) = 5195607;
      *(_QWORD *)(a1 + 1568) = v32;
      v33 = operator new();
      *(_QWORD *)v33 = &unk_1E3D1E968;
      *(float *)(v33 + 24) = v18;
      *(_DWORD *)(v33 + 28) = v19;
      *(_DWORD *)(v33 + 32) = 841731191;
      *(_WORD *)(v33 + 143) = 259;
      *(_QWORD *)(v33 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v33 + 8) = 0;
      *(_BYTE *)(v33 + 12) = 0;
      *(float *)(v33 + 36) = v31;
      *(_DWORD *)(v33 + 40) = v19;
      *(float *)(v33 + 44) = v31;
      *(_OWORD *)(v33 + 48) = 0u;
      *(_OWORD *)(v33 + 64) = 0u;
      *(_OWORD *)(v33 + 80) = 0u;
      *(_OWORD *)(v33 + 96) = 0u;
      *(_QWORD *)(v33 + 112) = 0;
      *(_QWORD *)(v33 + 120) = 4605783;
      *(_QWORD *)(a1 + 1560) = v33;
      v34 = operator new();
      *(_QWORD *)v34 = &unk_1E3D1E968;
      *(float *)(v34 + 24) = v18;
      *(_DWORD *)(v34 + 28) = v19;
      *(_DWORD *)(v34 + 32) = 841731191;
      *(_WORD *)(v34 + 143) = 259;
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v34 + 8) = 0;
      *(_BYTE *)(v34 + 12) = 0;
      *(float *)(v34 + 36) = v31;
      *(_DWORD *)(v34 + 40) = v19;
      *(float *)(v34 + 44) = v31;
      *(_OWORD *)(v34 + 48) = 0u;
      *(_OWORD *)(v34 + 64) = 0u;
      *(_OWORD *)(v34 + 80) = 0u;
      *(_OWORD *)(v34 + 96) = 0u;
      *(_QWORD *)(v34 + 112) = 0;
      *(_QWORD *)(v34 + 120) = 4801367;
      *(_QWORD *)(a1 + 1576) = v34;
      v35 = operator new();
      v36 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v35 = &unk_1E3D1E968;
      *(float *)(v35 + 24) = v18;
      *(_DWORD *)(v35 + 28) = v19;
      *(_DWORD *)(v35 + 32) = 841731191;
      *(_DWORD *)(v35 + 16) = v36;
      *(_DWORD *)(v35 + 20) = v36;
      *(_WORD *)(v35 + 143) = 260;
      *(_DWORD *)(v35 + 8) = 0;
      *(_BYTE *)(v35 + 12) = 0;
      *(float *)(v35 + 36) = v31;
      *(_DWORD *)(v35 + 40) = v19;
      *(float *)(v35 + 44) = v31;
      *(_OWORD *)(v35 + 48) = 0u;
      *(_OWORD *)(v35 + 64) = 0u;
      *(_OWORD *)(v35 + 80) = 0u;
      *(_OWORD *)(v35 + 96) = 0u;
      *(_QWORD *)(v35 + 112) = 0;
      *(_QWORD *)(v35 + 120) = 843663191;
      *(_QWORD *)(a1 + 1584) = v35;
      v37 = operator new();
      v38 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v37 = &unk_1E3D1E968;
      *(float *)(v37 + 24) = v18;
      *(_DWORD *)(v37 + 28) = v19;
      *(_DWORD *)(v37 + 32) = 841731191;
      *(_WORD *)(v37 + 143) = 260;
      *(_DWORD *)(v37 + 16) = v38;
      *(_DWORD *)(v37 + 20) = v38;
      *(_DWORD *)(v37 + 8) = 0;
      *(_BYTE *)(v37 + 12) = 0;
      *(float *)(v37 + 36) = v31;
      *(_DWORD *)(v37 + 40) = v19;
      *(float *)(v37 + 44) = v31;
      *(_OWORD *)(v37 + 48) = 0u;
      *(_OWORD *)(v37 + 64) = 0u;
      *(_OWORD *)(v37 + 80) = 0u;
      *(_OWORD *)(v37 + 96) = 0u;
      *(_QWORD *)(v37 + 112) = 0;
      *(_QWORD *)(v37 + 120) = 844056407;
      *(_QWORD *)(a1 + 1600) = v37;
      v39 = operator new();
      v40 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v39 = &unk_1E3D1E968;
      *(float *)(v39 + 24) = v18;
      *(_DWORD *)(v39 + 28) = v19;
      *(_DWORD *)(v39 + 32) = 841731191;
      *(_DWORD *)(v39 + 16) = v40;
      *(_DWORD *)(v39 + 20) = v40;
      *(_WORD *)(v39 + 143) = 260;
      *(_DWORD *)(v39 + 8) = 0;
      *(_BYTE *)(v39 + 12) = 0;
      *(float *)(v39 + 36) = v31;
      *(_DWORD *)(v39 + 40) = v19;
      *(float *)(v39 + 44) = v31;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_OWORD *)(v39 + 96) = 0u;
      *(_QWORD *)(v39 + 112) = 0;
      *(_QWORD *)(v39 + 120) = 843466583;
      *(_QWORD *)(a1 + 1592) = v39;
      v41 = operator new();
      v42 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v41 = &unk_1E3D1E968;
      *(float *)(v41 + 24) = v18;
      *(_DWORD *)(v41 + 28) = v19;
      *(_DWORD *)(v41 + 32) = 841731191;
      *(_WORD *)(v41 + 143) = 260;
      *(_DWORD *)(v41 + 16) = v42;
      *(_DWORD *)(v41 + 20) = v42;
      *(_DWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 12) = 0;
      *(float *)(v41 + 36) = v31;
      *(_DWORD *)(v41 + 40) = v19;
      *(float *)(v41 + 44) = v31;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_QWORD *)(v41 + 112) = 0;
      *(_QWORD *)(v41 + 120) = 843662167;
    }
    else
    {
      if (v21 != 1)
      {
        if (!v21)
        {
          v22 = operator new();
          v76 = 3;
          LODWORD(v75) = 4802391;
          sub_19C0FCB2C(v22, &v75, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1552) = v22;
          if (v76 < 0)
            operator delete((void *)v75);
          v23 = operator new();
          v74 = 3;
          LODWORD(v73) = 5195607;
          sub_19C0FCB2C(v23, &v73, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1560) = v23;
          if (v74 < 0)
            operator delete((void *)v73);
          v24 = operator new();
          v72 = 3;
          LODWORD(v71) = 4605783;
          sub_19C0FCB2C(v24, &v71, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1568) = v24;
          if (v72 < 0)
            operator delete((void *)v71);
          v25 = operator new();
          v70 = 3;
          LODWORD(__p) = 4801367;
          sub_19C0FCB2C(v25, &__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1576) = v25;
          if (v70 < 0)
            operator delete((void *)__p);
          v26 = operator new();
          v68 = 3;
          LODWORD(v67) = 4802391;
          sub_19C0FCB2C(v26, &v67, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1584) = v26;
          if (v68 < 0)
            operator delete((void *)v67);
          v27 = operator new();
          v66 = 3;
          LODWORD(v65) = 4605783;
          sub_19C0FCB2C(v27, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1592) = v27;
          if (v66 < 0)
            operator delete((void *)v65);
          v28 = operator new();
          v64 = 3;
          LODWORD(v63) = 5195607;
          sub_19C0FCB2C(v28, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1600) = v28;
          if (v64 < 0)
            operator delete((void *)v63);
          v29 = operator new();
          v62 = 4;
          strcpy((char *)v61, "WCI2");
          sub_19C0FCB2C(v29, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1608) = v29;
          if (v62 < 0)
            operator delete(v61[0]);
        }
        goto LABEL_31;
      }
      v43 = operator new();
      *(float *)(v43 + 20) = v18;
      *(_DWORD *)(v43 + 24) = v19;
      *(_DWORD *)(v43 + 28) = 841731191;
      *(double *)(v43 + 32) = v20;
      *(_WORD *)(v43 + 159) = 259;
      v44 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v43 = &unk_1E3D1E270;
      *(_QWORD *)(v43 + 8) = 0;
      *(_BYTE *)(v43 + 16) = 0;
      *(_DWORD *)(v43 + 40) = v19;
      *(double *)(v43 + 48) = v20;
      *(_QWORD *)(v43 + 56) = v44;
      *(_DWORD *)(v43 + 164) = 0;
      *(_OWORD *)(v43 + 64) = 0u;
      *(_OWORD *)(v43 + 80) = 0u;
      *(_OWORD *)(v43 + 96) = 0u;
      *(_OWORD *)(v43 + 112) = 0u;
      *(_QWORD *)(v43 + 128) = 0;
      *(_QWORD *)(v43 + 136) = 4802391;
      *(_QWORD *)(a1 + 1552) = v43;
      v45 = operator new();
      *(float *)(v45 + 20) = v18;
      *(_DWORD *)(v45 + 24) = v19;
      *(_DWORD *)(v45 + 28) = 841731191;
      *(double *)(v45 + 32) = v20;
      *(_WORD *)(v45 + 159) = 259;
      v46 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v45 = &unk_1E3D1E270;
      *(_QWORD *)(v45 + 8) = 0;
      *(_BYTE *)(v45 + 16) = 0;
      *(_DWORD *)(v45 + 40) = v19;
      *(double *)(v45 + 48) = v20;
      *(_QWORD *)(v45 + 56) = v46;
      *(_DWORD *)(v45 + 164) = 0;
      *(_OWORD *)(v45 + 64) = 0u;
      *(_OWORD *)(v45 + 80) = 0u;
      *(_OWORD *)(v45 + 96) = 0u;
      *(_OWORD *)(v45 + 112) = 0u;
      *(_QWORD *)(v45 + 128) = 0;
      *(_QWORD *)(v45 + 136) = 5195607;
      *(_QWORD *)(a1 + 1568) = v45;
      v47 = operator new();
      *(float *)(v47 + 20) = v18;
      *(_DWORD *)(v47 + 24) = v19;
      *(_DWORD *)(v47 + 28) = 841731191;
      *(double *)(v47 + 32) = v20;
      *(_WORD *)(v47 + 159) = 259;
      v48 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v47 = &unk_1E3D1E270;
      *(_QWORD *)(v47 + 8) = 0;
      *(_BYTE *)(v47 + 16) = 0;
      *(_DWORD *)(v47 + 40) = v19;
      *(double *)(v47 + 48) = v20;
      *(_QWORD *)(v47 + 56) = v48;
      *(_DWORD *)(v47 + 164) = 0;
      *(_OWORD *)(v47 + 64) = 0u;
      *(_OWORD *)(v47 + 80) = 0u;
      *(_OWORD *)(v47 + 96) = 0u;
      *(_OWORD *)(v47 + 112) = 0u;
      *(_QWORD *)(v47 + 128) = 0;
      *(_QWORD *)(v47 + 136) = 4605783;
      *(_QWORD *)(a1 + 1560) = v47;
      v49 = operator new();
      *(float *)(v49 + 20) = v18;
      *(_DWORD *)(v49 + 24) = v19;
      *(_DWORD *)(v49 + 28) = 841731191;
      *(double *)(v49 + 32) = v20;
      *(_WORD *)(v49 + 159) = 259;
      v50 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v49 = &unk_1E3D1E270;
      *(_QWORD *)(v49 + 8) = 0;
      *(_BYTE *)(v49 + 16) = 0;
      *(_DWORD *)(v49 + 40) = v19;
      *(double *)(v49 + 48) = v20;
      *(_QWORD *)(v49 + 56) = v50;
      *(_DWORD *)(v49 + 164) = 0;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 80) = 0u;
      *(_OWORD *)(v49 + 96) = 0u;
      *(_OWORD *)(v49 + 112) = 0u;
      *(_QWORD *)(v49 + 128) = 0;
      *(_QWORD *)(v49 + 136) = 4801367;
      *(_QWORD *)(a1 + 1576) = v49;
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 52);
      *(float *)(v51 + 20) = v18;
      *(_DWORD *)(v51 + 24) = v19;
      *(_DWORD *)(v51 + 28) = 841731191;
      *(double *)(v51 + 32) = v20;
      *(_DWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 60) = v52;
      *(_WORD *)(v51 + 159) = 260;
      *(_QWORD *)v51 = &unk_1E3D1E270;
      *(_QWORD *)(v51 + 8) = 0;
      *(_BYTE *)(v51 + 16) = 0;
      *(_DWORD *)(v51 + 40) = v19;
      *(double *)(v51 + 48) = v20;
      *(_DWORD *)(v51 + 164) = 0;
      *(_OWORD *)(v51 + 64) = 0u;
      *(_OWORD *)(v51 + 80) = 0u;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      *(_QWORD *)(v51 + 128) = 0;
      *(_QWORD *)(v51 + 136) = 843663191;
      *(_QWORD *)(a1 + 1584) = v51;
      v53 = operator new();
      v54 = *(_DWORD *)(a1 + 52);
      *(float *)(v53 + 20) = v18;
      *(_DWORD *)(v53 + 24) = v19;
      *(_DWORD *)(v53 + 28) = 841731191;
      *(double *)(v53 + 32) = v20;
      *(_WORD *)(v53 + 159) = 260;
      *(_DWORD *)(v53 + 56) = v54;
      *(_DWORD *)(v53 + 60) = v54;
      *(_QWORD *)v53 = &unk_1E3D1E270;
      *(_QWORD *)(v53 + 8) = 0;
      *(_BYTE *)(v53 + 16) = 0;
      *(_DWORD *)(v53 + 40) = v19;
      *(double *)(v53 + 48) = v20;
      *(_DWORD *)(v53 + 164) = 0;
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 96) = 0u;
      *(_OWORD *)(v53 + 112) = 0u;
      *(_QWORD *)(v53 + 128) = 0;
      *(_QWORD *)(v53 + 136) = 844056407;
      *(_QWORD *)(a1 + 1600) = v53;
      v55 = operator new();
      v56 = *(_DWORD *)(a1 + 52);
      *(float *)(v55 + 20) = v18;
      *(_DWORD *)(v55 + 24) = v19;
      *(_DWORD *)(v55 + 28) = 841731191;
      *(double *)(v55 + 32) = v20;
      *(_DWORD *)(v55 + 56) = v56;
      *(_DWORD *)(v55 + 60) = v56;
      *(_WORD *)(v55 + 159) = 260;
      *(_QWORD *)v55 = &unk_1E3D1E270;
      *(_QWORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 16) = 0;
      *(_DWORD *)(v55 + 40) = v19;
      *(double *)(v55 + 48) = v20;
      *(_DWORD *)(v55 + 164) = 0;
      *(_OWORD *)(v55 + 64) = 0u;
      *(_OWORD *)(v55 + 80) = 0u;
      *(_OWORD *)(v55 + 96) = 0u;
      *(_OWORD *)(v55 + 112) = 0u;
      *(_QWORD *)(v55 + 128) = 0;
      *(_QWORD *)(v55 + 136) = 843466583;
      *(_QWORD *)(a1 + 1592) = v55;
      v41 = operator new();
      v57 = *(_DWORD *)(a1 + 52);
      *(float *)(v41 + 20) = v18;
      *(_DWORD *)(v41 + 24) = v19;
      *(_DWORD *)(v41 + 28) = 841731191;
      *(double *)(v41 + 32) = v20;
      *(_WORD *)(v41 + 159) = 260;
      *(_DWORD *)(v41 + 56) = v57;
      *(_DWORD *)(v41 + 60) = v57;
      *(_QWORD *)v41 = &unk_1E3D1E270;
      *(_QWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 40) = v19;
      *(double *)(v41 + 48) = v20;
      *(_DWORD *)(v41 + 164) = 0;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_QWORD *)(v41 + 128) = 0;
      *(_QWORD *)(v41 + 136) = 843662167;
    }
    *(_QWORD *)(a1 + 1608) = v41;
  }
LABEL_31:
  v60 = (char *)operator new(0x20uLL);
  strcpy(v60, "LSTM alloc, from constructor");
  sub_19C1422C8(a1);
  operator delete(v60);
  return a1;
}

void sub_19C141D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void **v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void **v97;
  void *v98;

  if (a32 < 0)
    operator delete(__p);
  operator delete(v57);
  v97 = (void **)(v56 + 328);
  v98 = (void *)v56[331];
  if (v98)
  {
    v56[332] = v98;
    operator delete(v98);
    v64 = *v97;
    if (!*v97)
    {
LABEL_6:
      sub_19C22CB78(v62);
      sub_19C22CB78(v58);
      sub_19C22CB78(a10);
      sub_19C22CB78(a11);
      sub_19C22CB78(a12);
      sub_19C22CB78(a13);
      sub_19C22CB78(a20);
      sub_19C22CB78(v61);
      sub_19C22CB78(v60);
      sub_19C22CB78(v59);
      sub_19C22CB78(a14);
      sub_19C101AC4(a16);
      sub_19C101AC4(a17);
      sub_19C101AC4(a15);
      sub_19C101AC4(a18);
      v65 = (void *)v56[120];
      if (v65)
      {
        v56[121] = v65;
        operator delete(v65);
        v66 = (void *)v56[117];
        if (!v66)
        {
LABEL_8:
          v67 = (void *)v56[114];
          if (!v67)
            goto LABEL_9;
          goto LABEL_40;
        }
      }
      else
      {
        v66 = (void *)v56[117];
        if (!v66)
          goto LABEL_8;
      }
      v56[118] = v66;
      operator delete(v66);
      v67 = (void *)v56[114];
      if (!v67)
      {
LABEL_9:
        v68 = (void *)v56[111];
        if (!v68)
          goto LABEL_10;
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v67;
      operator delete(v67);
      v68 = (void *)v56[111];
      if (!v68)
      {
LABEL_10:
        v69 = (void *)v56[108];
        if (!v69)
          goto LABEL_11;
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v68;
      operator delete(v68);
      v69 = (void *)v56[108];
      if (!v69)
      {
LABEL_11:
        v70 = (void *)v56[105];
        if (!v70)
          goto LABEL_12;
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v69;
      operator delete(v69);
      v70 = (void *)v56[105];
      if (!v70)
      {
LABEL_12:
        v71 = (void *)v56[102];
        if (!v71)
          goto LABEL_13;
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v70;
      operator delete(v70);
      v71 = (void *)v56[102];
      if (!v71)
      {
LABEL_13:
        v72 = (void *)v56[99];
        if (!v72)
          goto LABEL_14;
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v71;
      operator delete(v71);
      v72 = (void *)v56[99];
      if (!v72)
      {
LABEL_14:
        v73 = (void *)v56[89];
        if (!v73)
          goto LABEL_15;
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v72;
      operator delete(v72);
      v73 = (void *)v56[89];
      if (!v73)
      {
LABEL_15:
        v74 = (void *)v56[86];
        if (!v74)
          goto LABEL_16;
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v73;
      operator delete(v73);
      v74 = (void *)v56[86];
      if (!v74)
      {
LABEL_16:
        v75 = (void *)v56[83];
        if (!v75)
          goto LABEL_17;
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v74;
      operator delete(v74);
      v75 = (void *)v56[83];
      if (!v75)
      {
LABEL_17:
        v76 = (void *)v56[80];
        if (!v76)
          goto LABEL_18;
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v75;
      operator delete(v75);
      v76 = (void *)v56[80];
      if (!v76)
      {
LABEL_18:
        v77 = (void *)v56[77];
        if (!v77)
          goto LABEL_19;
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v76;
      operator delete(v76);
      v77 = (void *)v56[77];
      if (!v77)
      {
LABEL_19:
        v78 = (void *)v56[74];
        if (!v78)
          goto LABEL_20;
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v77;
      operator delete(v77);
      v78 = (void *)v56[74];
      if (!v78)
      {
LABEL_20:
        v79 = (void *)v56[71];
        if (!v79)
          goto LABEL_21;
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v78;
      operator delete(v78);
      v79 = (void *)v56[71];
      if (!v79)
      {
LABEL_21:
        v80 = (void *)v56[68];
        if (!v80)
          goto LABEL_22;
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v79;
      operator delete(v79);
      v80 = (void *)v56[68];
      if (!v80)
      {
LABEL_22:
        v81 = (void *)v56[65];
        if (!v81)
          goto LABEL_23;
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v80;
      operator delete(v80);
      v81 = (void *)v56[65];
      if (!v81)
      {
LABEL_23:
        v82 = (void *)v56[62];
        if (!v82)
          goto LABEL_24;
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v81;
      operator delete(v81);
      v82 = (void *)v56[62];
      if (!v82)
      {
LABEL_24:
        v83 = (void *)v56[59];
        if (!v83)
          goto LABEL_25;
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v82;
      operator delete(v82);
      v83 = (void *)v56[59];
      if (!v83)
      {
LABEL_25:
        v84 = (void *)v56[56];
        if (!v84)
          goto LABEL_26;
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v83;
      operator delete(v83);
      v84 = (void *)v56[56];
      if (!v84)
      {
LABEL_26:
        v85 = (void *)v56[53];
        if (!v85)
          goto LABEL_27;
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v84;
      operator delete(v84);
      v85 = (void *)v56[53];
      if (!v85)
      {
LABEL_27:
        v86 = (void *)v56[50];
        if (!v86)
          goto LABEL_28;
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v85;
      operator delete(v85);
      v86 = (void *)v56[50];
      if (!v86)
      {
LABEL_28:
        v87 = (void **)(v56 + 26);
        v88 = (void *)v56[47];
        if (!v88)
          goto LABEL_29;
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v86;
      operator delete(v86);
      v87 = (void **)(v56 + 26);
      v88 = (void *)v56[47];
      if (!v88)
      {
LABEL_29:
        v89 = (void *)v56[44];
        if (!v89)
          goto LABEL_30;
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v88;
      operator delete(v88);
      v89 = (void *)v56[44];
      if (!v89)
      {
LABEL_30:
        sub_19C0830E8(v87);
        v90 = (void *)v56[23];
        if (!v90)
          goto LABEL_31;
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v89;
      operator delete(v89);
      sub_19C0830E8(v87);
      v90 = (void *)v56[23];
      if (!v90)
      {
LABEL_31:
        v91 = (void *)v56[20];
        if (!v91)
          goto LABEL_32;
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v90;
      operator delete(v90);
      v91 = (void *)v56[20];
      if (!v91)
      {
LABEL_32:
        v92 = (void *)v56[17];
        if (!v92)
          goto LABEL_33;
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v91;
      operator delete(v91);
      v92 = (void *)v56[17];
      if (!v92)
      {
LABEL_33:
        v93 = (void *)v56[14];
        if (!v93)
          goto LABEL_34;
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v92;
      operator delete(v92);
      v93 = (void *)v56[14];
      if (!v93)
      {
LABEL_34:
        v94 = (void *)v56[11];
        if (!v94)
          goto LABEL_35;
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v93;
      operator delete(v93);
      v94 = (void *)v56[11];
      if (!v94)
      {
LABEL_35:
        v95 = *a19;
        if (!*a19)
          goto LABEL_36;
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v94;
      operator delete(v94);
      v95 = *a19;
      if (!*a19)
      {
LABEL_36:
        *v56 = &unk_1E3D1E2D8;
        v96 = (void *)v56[1];
        if (!v96)
          goto LABEL_37;
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v95;
      operator delete(v95);
      *v56 = &unk_1E3D1E2D8;
      v96 = (void *)v56[1];
      if (!v96)
LABEL_37:
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v96;
      operator delete(v96);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v64 = *v97;
    if (!*v97)
      goto LABEL_6;
  }
  v56[329] = v64;
  operator delete(v64);
  goto LABEL_6;
}

void sub_19C1422C8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  _QWORD *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _OWORD *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  BOOL v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  int v195;
  uint64_t v196;
  char **v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  char **v203;
  char *v204;
  unint64_t v205;
  _QWORD *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  _QWORD *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  char *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  _OWORD *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  char *v261;
  unint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  _OWORD *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  _QWORD *v282;
  int v283;
  uint64_t v284;
  char **v285;
  char *v286;
  unint64_t v287;
  _QWORD *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _BYTE *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _BYTE *v316;
  _QWORD *v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  _OWORD *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  _BYTE *v341;
  _QWORD *v342;
  char *v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  _OWORD *v350;
  char *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _BYTE *v366;
  _QWORD *v367;
  char *v368;
  char *v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  _OWORD *v375;
  char *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  _BYTE *v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  _OWORD *v400;
  char *v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  char *v407;
  unint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  _BYTE *v416;
  _QWORD *v417;
  char *v418;
  char *v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  char *v432;
  unint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  _BYTE *v441;
  _QWORD *v442;
  char *v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  unsigned int v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  _QWORD *v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  _BYTE *v466;
  _QWORD *v467;
  char *v468;
  unint64_t v469;
  char **v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  _OWORD *v474;
  char *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  _QWORD *v479;
  char *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  _OWORD *v485;
  char *v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  char *v492;
  unint64_t v493;
  _QWORD *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _BYTE *v501;
  _QWORD *v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  _OWORD *v508;
  char *v509;
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  char *v515;
  unint64_t v516;
  _QWORD *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  _BYTE *v524;
  _QWORD *v525;
  char *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char *v530;
  _OWORD *v531;
  char *v532;
  uint64_t v533;
  __int128 v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  char *v538;
  unint64_t v539;
  _QWORD *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  _BYTE *v547;
  _QWORD *v548;
  char *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  _OWORD *v554;
  char *v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  void *v561;
  char *v562;
  unint64_t v563;
  uint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _QWORD *v572;
  char *v573;
  char *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char *v578;
  _OWORD *v579;
  char *v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  void *v586;
  char *v587;
  unint64_t v588;
  uint64_t v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  _BYTE *v596;
  _QWORD *v597;
  char *v598;
  char *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  _OWORD *v604;
  char *v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  int v609;
  void *v610;
  char *v611;
  unint64_t v612;
  uint64_t v613;
  void **p_vtable;
  char *v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  _BYTE *v621;
  _QWORD *v622;
  char *v623;
  char *v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  char *v628;
  _OWORD *v629;
  char *v630;
  uint64_t v631;
  __int128 v632;
  uint64_t v633;
  int v634;
  int v635;
  void *v636;
  char *v637;
  unint64_t v638;
  uint64_t v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  _BYTE *v646;
  _QWORD *v647;
  char *v648;
  char *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  _OWORD *v654;
  char *v655;
  uint64_t v656;
  __int128 v657;
  uint64_t v658;
  int v659;
  void *v660;
  char *v661;
  unint64_t v662;
  uint64_t v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  _BYTE *v670;
  _QWORD *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char *v677;
  _OWORD *v678;
  char *v679;
  uint64_t v680;
  __int128 v681;
  uint64_t v682;
  int v683;
  void *v684;
  char *v685;
  unint64_t v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  _BYTE *v694;
  _QWORD *v695;
  char *v696;
  char *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  _OWORD *v702;
  char *v703;
  uint64_t v704;
  __int128 v705;
  uint64_t v706;
  int v707;
  void *v708;
  char *v709;
  unint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  _BYTE *v717;
  _QWORD *v718;
  char *v719;
  uint64_t v720;
  char *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  char *v725;
  _OWORD *v726;
  char *v727;
  uint64_t v728;
  __int128 v729;
  uint64_t v730;
  unsigned int v731;
  void *v732;
  char *v733;
  unint64_t v734;
  uint64_t v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  _BYTE *v742;
  _QWORD *v743;
  char *v744;
  char *v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  char *v749;
  _OWORD *v750;
  char *v751;
  uint64_t v752;
  __int128 v753;
  uint64_t v754;
  unsigned int v755;
  void *v756;
  char *v757;
  unint64_t v758;
  uint64_t v759;
  char *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  _BYTE *v766;
  _QWORD *v767;
  char *v768;
  char *v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  _OWORD *v774;
  char *v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  unsigned int v779;
  void *v780;
  char *v781;
  unint64_t v782;
  uint64_t v783;
  char *v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  unint64_t v789;
  _BYTE *v790;
  _QWORD *v791;
  char *v792;
  char *v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  char *v797;
  _OWORD *v798;
  char *v799;
  uint64_t v800;
  __int128 v801;
  uint64_t v802;
  unsigned int v803;
  void *v804;
  char *v805;
  unint64_t v806;
  uint64_t v807;
  char *v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  unint64_t v813;
  _BYTE *v814;
  _QWORD *v815;
  char *v816;
  char *v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  _OWORD *v822;
  char *v823;
  uint64_t v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  void *v828;
  void *v829;
  char *v830;
  unint64_t v831;
  uint64_t v832;
  char *v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  _BYTE *v839;
  _QWORD *v840;
  char *v841;
  char *v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  char *v846;
  _OWORD *v847;
  char *v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  void *v854;
  char *v855;
  unint64_t v856;
  uint64_t v857;
  char *v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _BYTE *v864;
  _QWORD *v865;
  char *v866;
  char *v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  _OWORD *v872;
  char *v873;
  uint64_t v874;
  __int128 v875;
  uint64_t v876;
  uint64_t v877;
  void *v878;
  void *v879;
  char *v880;
  unint64_t v881;
  uint64_t v882;
  char *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  unint64_t v888;
  _BYTE *v889;
  _QWORD *v890;
  char *v891;
  char *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  char *v896;
  _OWORD *v897;
  char *v898;
  uint64_t v899;
  __int128 v900;
  uint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  void *v922;
  void *v923;
  unint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  unint64_t v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  void *v975;
  void *v976;
  char *v977;
  unint64_t v978;
  uint64_t v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  unint64_t v985;
  _BYTE *v986;
  _QWORD *v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  char *v991;
  _OWORD *v992;
  char *v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  int v997;
  void *v998;
  char *v999;
  unint64_t v1000;
  char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  _BYTE *v1007;
  _QWORD *v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  char *v1012;
  _OWORD *v1013;
  char *v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  void *v1021;
  void *v1022;
  char *v1023;
  unint64_t v1024;
  uint64_t v1025;
  char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  _BYTE *v1032;
  _QWORD *v1033;
  unint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  char *v1037;
  _OWORD *v1038;
  char *v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  void *v1044;
  void *v1045;
  char *v1046;
  unint64_t v1047;
  uint64_t v1048;
  char *v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  _BYTE *v1055;
  _QWORD *v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  char *v1060;
  _OWORD *v1061;
  char *v1062;
  uint64_t v1063;
  __int128 v1064;
  uint64_t v1065;
  uint64_t v1066;
  void *v1067;
  void *v1068;
  char *v1069;
  unint64_t v1070;
  uint64_t v1071;
  char *v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  _BYTE *v1078;
  _QWORD *v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  char *v1083;
  _OWORD *v1084;
  char *v1085;
  uint64_t v1086;
  __int128 v1087;
  uint64_t v1088;
  uint64_t v1089;
  void *v1090;
  void *v1091;
  char *v1092;
  unint64_t v1093;
  uint64_t v1094;
  char *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  _BYTE *v1101;
  _QWORD *v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  char *v1106;
  _OWORD *v1107;
  char *v1108;
  uint64_t v1109;
  __int128 v1110;
  uint64_t v1111;
  uint64_t v1112;
  void *v1113;
  void *v1114;
  char *v1115;
  unint64_t v1116;
  uint64_t v1117;
  char *v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  _BYTE *v1124;
  _QWORD *v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  char *v1129;
  _OWORD *v1130;
  char *v1131;
  uint64_t v1132;
  __int128 v1133;
  uint64_t v1134;
  uint64_t v1135;
  void *v1136;
  void *v1137;
  char *v1138;
  unint64_t v1139;
  uint64_t v1140;
  char *v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  _BYTE *v1147;
  _QWORD *v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  char *v1152;
  _OWORD *v1153;
  char *v1154;
  uint64_t v1155;
  __int128 v1156;
  uint64_t v1157;
  uint64_t v1158;
  void *v1159;
  void *v1160;
  char *v1161;
  unint64_t v1162;
  uint64_t v1163;
  char *v1164;
  uint64_t v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  _BYTE *v1170;
  _QWORD *v1171;
  unint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  char *v1175;
  _OWORD *v1176;
  char *v1177;
  uint64_t v1178;
  __int128 v1179;
  uint64_t v1180;
  uint64_t v1181;
  void *v1182;
  void *v1183;
  char *v1184;
  unint64_t v1185;
  uint64_t v1186;
  char *v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  _BYTE *v1193;
  _QWORD *v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  char *v1198;
  _OWORD *v1199;
  char *v1200;
  uint64_t v1201;
  __int128 v1202;
  uint64_t v1203;
  int v1204;
  void *v1205;
  char *v1206;
  unint64_t v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  _BYTE *v1215;
  _QWORD *v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  char *v1220;
  _OWORD *v1221;
  char *v1222;
  uint64_t v1223;
  __int128 v1224;
  uint64_t v1225;
  int v1226;
  void *v1227;
  char *v1228;
  unint64_t v1229;
  uint64_t v1230;
  char *v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  _BYTE *v1237;
  _QWORD *v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  char *v1242;
  _OWORD *v1243;
  char *v1244;
  uint64_t v1245;
  __int128 v1246;
  uint64_t v1247;
  int v1248;
  void *v1249;
  char *v1250;
  unint64_t v1251;
  uint64_t v1252;
  char *v1253;
  uint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  _BYTE *v1259;
  _QWORD *v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  char *v1264;
  _OWORD *v1265;
  char *v1266;
  uint64_t v1267;
  __int128 v1268;
  uint64_t v1269;
  int v1270;
  void *v1271;
  char *v1272;
  unint64_t v1273;
  uint64_t v1274;
  char *v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  _BYTE *v1281;
  _QWORD *v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  char *v1286;
  _OWORD *v1287;
  char *v1288;
  uint64_t v1289;
  __int128 v1290;
  uint64_t v1291;
  int v1292;
  void *v1293;
  char *v1294;
  unint64_t v1295;
  uint64_t v1296;
  char *v1297;
  uint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  _BYTE *v1303;
  _QWORD *v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  char *v1308;
  _OWORD *v1309;
  char *v1310;
  uint64_t v1311;
  __int128 v1312;
  uint64_t v1313;
  int v1314;
  void *v1315;
  char *v1316;
  unint64_t v1317;
  uint64_t v1318;
  char *v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  _BYTE *v1325;
  _QWORD *v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  char *v1330;
  _OWORD *v1331;
  char *v1332;
  uint64_t v1333;
  __int128 v1334;
  uint64_t v1335;
  int v1336;
  void *v1337;
  char *v1338;
  unint64_t v1339;
  uint64_t v1340;
  char *v1341;
  uint64_t v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  _BYTE *v1347;
  _QWORD *v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  char *v1352;
  _OWORD *v1353;
  char *v1354;
  uint64_t v1355;
  __int128 v1356;
  uint64_t v1357;
  int v1358;
  void *v1359;
  char *v1360;
  unint64_t v1361;
  char *v1362;
  uint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  _BYTE *v1368;
  _QWORD *v1369;
  unint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  char *v1373;
  _OWORD *v1374;
  char *v1375;
  uint64_t v1376;
  __int128 v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  void **v1381;
  _QWORD *v1382;
  unint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  void *v1386;
  void *v1387;
  char *v1388;
  unint64_t v1389;
  uint64_t v1390;
  char *v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  _BYTE *v1397;
  _QWORD *v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  char *v1402;
  _OWORD *v1403;
  char *v1404;
  uint64_t v1405;
  __int128 v1406;
  uint64_t v1407;
  uint64_t v1408;
  void *v1409;
  void *v1410;
  char *v1411;
  unint64_t v1412;
  uint64_t v1413;
  char *v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  _BYTE *v1420;
  _QWORD *v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  char *v1425;
  _OWORD *v1426;
  char *v1427;
  uint64_t v1428;
  __int128 v1429;
  uint64_t v1430;
  int v1431;
  void *v1432;
  char *v1433;
  unint64_t v1434;
  uint64_t v1435;
  char *v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  unint64_t v1441;
  _BYTE *v1442;
  _QWORD *v1443;
  unint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  char *v1447;
  _OWORD *v1448;
  char *v1449;
  uint64_t v1450;
  __int128 v1451;
  uint64_t v1452;
  int v1453;
  void *v1454;
  char *v1455;
  unint64_t v1456;
  uint64_t v1457;
  char *v1458;
  uint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  _BYTE *v1464;
  _QWORD *v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  char *v1469;
  _OWORD *v1470;
  char *v1471;
  uint64_t v1472;
  __int128 v1473;
  uint64_t v1474;
  uint64_t v1475;
  void *v1476;
  void *v1477;
  char *v1478;
  unint64_t v1479;
  uint64_t v1480;
  char *v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  _BYTE *v1487;
  _QWORD *v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  char *v1492;
  _OWORD *v1493;
  char *v1494;
  uint64_t v1495;
  __int128 v1496;
  uint64_t v1497;
  uint64_t v1498;
  void *v1499;
  void *v1500;
  char *v1501;
  unint64_t v1502;
  uint64_t v1503;
  char *v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  _BYTE *v1510;
  _QWORD *v1511;
  unint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  char *v1515;
  _OWORD *v1516;
  char *v1517;
  uint64_t v1518;
  __int128 v1519;
  uint64_t v1520;
  uint64_t v1521;
  void *v1522;
  void *v1523;
  char *v1524;
  unint64_t v1525;
  uint64_t v1526;
  char *v1527;
  uint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  _BYTE *v1533;
  _QWORD *v1534;
  unint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  char *v1538;
  _OWORD *v1539;
  char *v1540;
  uint64_t v1541;
  __int128 v1542;
  uint64_t v1543;
  uint64_t v1544;
  void *v1545;
  void *v1546;
  char *v1547;
  unint64_t v1548;
  uint64_t v1549;
  char *v1550;
  uint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  _BYTE *v1556;
  _QWORD *v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  char *v1561;
  _OWORD *v1562;
  char *v1563;
  uint64_t v1564;
  __int128 v1565;
  uint64_t v1566;
  uint64_t v1567;
  void *v1568;
  void *v1569;
  char *v1570;
  unint64_t v1571;
  uint64_t v1572;
  char *v1573;
  uint64_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  unint64_t v1578;
  _BYTE *v1579;
  _QWORD *v1580;
  unint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  char *v1584;
  _OWORD *v1585;
  char *v1586;
  uint64_t v1587;
  __int128 v1588;
  uint64_t v1589;
  uint64_t v1590;
  void *v1591;
  void *v1592;
  char *v1593;
  unint64_t v1594;
  uint64_t v1595;
  char *v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  _BYTE *v1602;
  _QWORD *v1603;
  unint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  char *v1607;
  _OWORD *v1608;
  char *v1609;
  uint64_t v1610;
  __int128 v1611;
  uint64_t v1612;
  uint64_t v1613;
  void *v1614;
  void *v1615;
  char *v1616;
  unint64_t v1617;
  char *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  unint64_t v1623;
  _BYTE *v1624;
  _QWORD *v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  char *v1629;
  _OWORD *v1630;
  char *v1631;
  uint64_t v1632;
  __int128 v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  __int128 v1637[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = (char **)(a1 + 2624);
  v6 = *(char **)(a1 + 2632);
  v7 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = v4;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_25;
  }
  v9 = *v5;
  v10 = v6 - *v5;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    goto LABEL_1698;
  v13 = v7 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      goto LABEL_1699;
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v4;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_23;
    goto LABEL_16;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v4;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_16:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_1704;
    if ((unint64_t)(v6 - &v15[v10]) < 0x20)
      goto LABEL_1704;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v6 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v6 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1704:
      do
      {
        v27 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v16 = v27;
      }
      while (v6 != v9);
    }
    v6 = *v5;
  }
LABEL_23:
  *(_QWORD *)(a1 + 2624) = v16;
  *(_QWORD *)(a1 + 2632) = v8;
  *(_QWORD *)(a1 + 2640) = v17;
  if (v6)
    operator delete(v6);
LABEL_25:
  *(_QWORD *)(a1 + 2632) = v8;
  v28 = *(unsigned int *)(a1 + 52);
  v29 = (void *)operator new[]();
  v30 = v29;
  if ((int)v28 >= 1)
    bzero(v29, 4 * v28);
  *(_QWORD *)(a1 + 1648) = v30;
  v31 = *(char **)(a1 + 2632);
  v32 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v31 < v32)
  {
    *(_QWORD *)v31 = v30;
    v33 = (uint64_t)(v31 + 8);
    goto LABEL_49;
  }
  v34 = *v5;
  v35 = v31 - *v5;
  v36 = v35 >> 3;
  v37 = (v35 >> 3) + 1;
  if (v37 >> 61)
    goto LABEL_1698;
  v38 = v32 - (_QWORD)v34;
  if (v38 >> 2 > v37)
    v37 = v38 >> 2;
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
    v39 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v39 = v37;
  if (v39)
  {
    if (v39 >> 61)
      goto LABEL_1699;
    v40 = operator new(8 * v39);
    v41 = &v40[8 * v36];
    v42 = &v40[8 * v39];
    *v41 = v30;
    v33 = (uint64_t)(v41 + 1);
    v43 = (char *)(v31 - v34);
    if (v31 == v34)
      goto LABEL_47;
    goto LABEL_40;
  }
  v40 = 0;
  v41 = (_QWORD *)(8 * v36);
  v42 = 0;
  *(_QWORD *)(8 * v36) = v30;
  v33 = 8 * v36 + 8;
  v43 = (char *)(v31 - v34);
  if (v31 != v34)
  {
LABEL_40:
    v44 = (unint64_t)(v43 - 8);
    if (v44 < 0x58)
      goto LABEL_1705;
    if ((unint64_t)(v31 - v40 - v35) < 0x20)
      goto LABEL_1705;
    v45 = (v44 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v31[-v46];
    v41 = (_QWORD *)((char *)v41 - v46);
    v48 = &v40[8 * v36 - 16];
    v49 = v31 - 16;
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *(_OWORD *)v49;
      *(v48 - 1) = *((_OWORD *)v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 32;
      v50 -= 4;
    }
    while (v50);
    v31 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1705:
      do
      {
        v52 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v41 = v52;
      }
      while (v31 != v34);
    }
    v31 = *v5;
  }
LABEL_47:
  *(_QWORD *)(a1 + 2624) = v41;
  *(_QWORD *)(a1 + 2632) = v33;
  *(_QWORD *)(a1 + 2640) = v42;
  if (v31)
    operator delete(v31);
LABEL_49:
  *(_QWORD *)(a1 + 2632) = v33;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1656) = v55;
  v56 = *(char **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 < v57)
  {
    *(_QWORD *)v56 = v55;
    v58 = (uint64_t)(v56 + 8);
    goto LABEL_73;
  }
  v59 = *v5;
  v60 = v56 - *v5;
  v61 = v60 >> 3;
  v62 = (v60 >> 3) + 1;
  if (v62 >> 61)
    goto LABEL_1698;
  v63 = v57 - (_QWORD)v59;
  if (v63 >> 2 > v62)
    v62 = v63 >> 2;
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v62;
  if (v64)
  {
    if (v64 >> 61)
      goto LABEL_1699;
    v65 = operator new(8 * v64);
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *v66 = v55;
    v58 = (uint64_t)(v66 + 1);
    v68 = (char *)(v56 - v59);
    if (v56 == v59)
      goto LABEL_71;
    goto LABEL_64;
  }
  v65 = 0;
  v66 = (_QWORD *)(8 * v61);
  v67 = 0;
  *(_QWORD *)(8 * v61) = v55;
  v58 = 8 * v61 + 8;
  v68 = (char *)(v56 - v59);
  if (v56 != v59)
  {
LABEL_64:
    v69 = (unint64_t)(v68 - 8);
    if (v69 < 0x58)
      goto LABEL_1706;
    if ((unint64_t)(v56 - v65 - v60) < 0x20)
      goto LABEL_1706;
    v70 = (v69 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v56[-v71];
    v66 = (_QWORD *)((char *)v66 - v71);
    v73 = &v65[8 * v61 - 16];
    v74 = v56 - 16;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 32;
      v75 -= 4;
    }
    while (v75);
    v56 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1706:
      do
      {
        v77 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v66 = v77;
      }
      while (v56 != v59);
    }
    v56 = *v5;
  }
LABEL_71:
  *(_QWORD *)(a1 + 2624) = v66;
  *(_QWORD *)(a1 + 2632) = v58;
  *(_QWORD *)(a1 + 2640) = v67;
  if (v56)
    operator delete(v56);
LABEL_73:
  *(_QWORD *)(a1 + 2632) = v58;
  v78 = *(unsigned int *)(a1 + 52);
  v79 = (void *)operator new[]();
  v80 = v79;
  if ((int)v78 >= 1)
    bzero(v79, 4 * v78);
  *(_QWORD *)(a1 + 1664) = v80;
  v81 = *(char **)(a1 + 2632);
  v82 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v81 < v82)
  {
    *(_QWORD *)v81 = v80;
    v83 = (uint64_t)(v81 + 8);
    goto LABEL_97;
  }
  v84 = *v5;
  v85 = v81 - *v5;
  v86 = v85 >> 3;
  v87 = (v85 >> 3) + 1;
  if (v87 >> 61)
    goto LABEL_1698;
  v88 = v82 - (_QWORD)v84;
  if (v88 >> 2 > v87)
    v87 = v88 >> 2;
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
  {
    if (v89 >> 61)
      goto LABEL_1699;
    v90 = operator new(8 * v89);
    v91 = &v90[8 * v86];
    v92 = &v90[8 * v89];
    *v91 = v80;
    v83 = (uint64_t)(v91 + 1);
    v93 = (char *)(v81 - v84);
    if (v81 == v84)
      goto LABEL_95;
    goto LABEL_88;
  }
  v90 = 0;
  v91 = (_QWORD *)(8 * v86);
  v92 = 0;
  *(_QWORD *)(8 * v86) = v80;
  v83 = 8 * v86 + 8;
  v93 = (char *)(v81 - v84);
  if (v81 != v84)
  {
LABEL_88:
    v94 = (unint64_t)(v93 - 8);
    if (v94 < 0x58)
      goto LABEL_1707;
    if ((unint64_t)(v81 - v90 - v85) < 0x20)
      goto LABEL_1707;
    v95 = (v94 >> 3) + 1;
    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
    v97 = &v81[-v96];
    v91 = (_QWORD *)((char *)v91 - v96);
    v98 = &v90[8 * v86 - 16];
    v99 = v81 - 16;
    v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *(_OWORD *)v99;
      *(v98 - 1) = *((_OWORD *)v99 - 1);
      *v98 = v101;
      v98 -= 2;
      v99 -= 32;
      v100 -= 4;
    }
    while (v100);
    v81 = v97;
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1707:
      do
      {
        v102 = *((_QWORD *)v81 - 1);
        v81 -= 8;
        *--v91 = v102;
      }
      while (v81 != v84);
    }
    v81 = *v5;
  }
LABEL_95:
  *(_QWORD *)(a1 + 2624) = v91;
  *(_QWORD *)(a1 + 2632) = v83;
  *(_QWORD *)(a1 + 2640) = v92;
  if (v81)
    operator delete(v81);
LABEL_97:
  *(_QWORD *)(a1 + 2632) = v83;
  v103 = *(unsigned int *)(a1 + 52);
  v104 = (void *)operator new[]();
  v105 = v104;
  if ((int)v103 >= 1)
    bzero(v104, 4 * v103);
  *(_QWORD *)(a1 + 1672) = v105;
  v106 = *(char **)(a1 + 2632);
  v107 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v106 < v107)
  {
    *(_QWORD *)v106 = v105;
    v108 = (uint64_t)(v106 + 8);
    goto LABEL_121;
  }
  v109 = *v5;
  v110 = v106 - *v5;
  v111 = v110 >> 3;
  v112 = (v110 >> 3) + 1;
  if (v112 >> 61)
    goto LABEL_1698;
  v113 = v107 - (_QWORD)v109;
  if (v113 >> 2 > v112)
    v112 = v113 >> 2;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
    v114 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v114 = v112;
  if (v114)
  {
    if (v114 >> 61)
      goto LABEL_1699;
    v115 = operator new(8 * v114);
    v116 = &v115[8 * v111];
    v117 = &v115[8 * v114];
    *v116 = v105;
    v108 = (uint64_t)(v116 + 1);
    v118 = (char *)(v106 - v109);
    if (v106 == v109)
      goto LABEL_119;
    goto LABEL_112;
  }
  v115 = 0;
  v116 = (_QWORD *)(8 * v111);
  v117 = 0;
  *(_QWORD *)(8 * v111) = v105;
  v108 = 8 * v111 + 8;
  v118 = (char *)(v106 - v109);
  if (v106 != v109)
  {
LABEL_112:
    v119 = (unint64_t)(v118 - 8);
    if (v119 < 0x58)
      goto LABEL_1708;
    if ((unint64_t)(v106 - v115 - v110) < 0x20)
      goto LABEL_1708;
    v120 = (v119 >> 3) + 1;
    v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
    v122 = &v106[-v121];
    v116 = (_QWORD *)((char *)v116 - v121);
    v123 = &v115[8 * v111 - 16];
    v124 = v106 - 16;
    v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v126 = *(_OWORD *)v124;
      *(v123 - 1) = *((_OWORD *)v124 - 1);
      *v123 = v126;
      v123 -= 2;
      v124 -= 32;
      v125 -= 4;
    }
    while (v125);
    v106 = v122;
    if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1708:
      do
      {
        v127 = *((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v116 = v127;
      }
      while (v106 != v109);
    }
    v106 = *v5;
  }
LABEL_119:
  *(_QWORD *)(a1 + 2624) = v116;
  *(_QWORD *)(a1 + 2632) = v108;
  *(_QWORD *)(a1 + 2640) = v117;
  if (v106)
    operator delete(v106);
LABEL_121:
  *(_QWORD *)(a1 + 2632) = v108;
  v128 = *(unsigned int *)(a1 + 52);
  v129 = (void *)operator new[]();
  v130 = v129;
  if ((int)v128 >= 1)
    bzero(v129, 4 * v128);
  *(_QWORD *)(a1 + 1680) = v130;
  v131 = *(char **)(a1 + 2632);
  v132 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v131 < v132)
  {
    *(_QWORD *)v131 = v130;
    v133 = (uint64_t)(v131 + 8);
    goto LABEL_145;
  }
  v134 = *v5;
  v135 = v131 - *v5;
  v136 = v135 >> 3;
  v137 = (v135 >> 3) + 1;
  if (v137 >> 61)
    goto LABEL_1698;
  v138 = v132 - (_QWORD)v134;
  if (v138 >> 2 > v137)
    v137 = v138 >> 2;
  if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
    v139 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v139 = v137;
  if (v139)
  {
    if (v139 >> 61)
      goto LABEL_1699;
    v140 = operator new(8 * v139);
    v141 = &v140[8 * v136];
    v142 = &v140[8 * v139];
    *v141 = v130;
    v133 = (uint64_t)(v141 + 1);
    v143 = (char *)(v131 - v134);
    if (v131 == v134)
      goto LABEL_143;
    goto LABEL_136;
  }
  v140 = 0;
  v141 = (_QWORD *)(8 * v136);
  v142 = 0;
  *(_QWORD *)(8 * v136) = v130;
  v133 = 8 * v136 + 8;
  v143 = (char *)(v131 - v134);
  if (v131 != v134)
  {
LABEL_136:
    v144 = (unint64_t)(v143 - 8);
    if (v144 < 0x58)
      goto LABEL_1709;
    if ((unint64_t)(v131 - v140 - v135) < 0x20)
      goto LABEL_1709;
    v145 = (v144 >> 3) + 1;
    v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
    v147 = &v131[-v146];
    v141 = (_QWORD *)((char *)v141 - v146);
    v148 = &v140[8 * v136 - 16];
    v149 = v131 - 16;
    v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v151 = *(_OWORD *)v149;
      *(v148 - 1) = *((_OWORD *)v149 - 1);
      *v148 = v151;
      v148 -= 2;
      v149 -= 32;
      v150 -= 4;
    }
    while (v150);
    v131 = v147;
    if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1709:
      do
      {
        v152 = *((_QWORD *)v131 - 1);
        v131 -= 8;
        *--v141 = v152;
      }
      while (v131 != v134);
    }
    v131 = *v5;
  }
LABEL_143:
  *(_QWORD *)(a1 + 2624) = v141;
  *(_QWORD *)(a1 + 2632) = v133;
  *(_QWORD *)(a1 + 2640) = v142;
  if (v131)
    operator delete(v131);
LABEL_145:
  *(_QWORD *)(a1 + 2632) = v133;
  v153 = *(unsigned int *)(a1 + 52);
  v154 = (void *)operator new[]();
  v155 = v154;
  if ((int)v153 >= 1)
    bzero(v154, 4 * v153);
  *(_QWORD *)(a1 + 1688) = v155;
  v156 = *(char **)(a1 + 2632);
  v157 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v156 < v157)
  {
    *(_QWORD *)v156 = v155;
    v158 = (uint64_t)(v156 + 8);
    goto LABEL_169;
  }
  v159 = *v5;
  v160 = v156 - *v5;
  v161 = v160 >> 3;
  v162 = (v160 >> 3) + 1;
  if (v162 >> 61)
    goto LABEL_1698;
  v163 = v157 - (_QWORD)v159;
  if (v163 >> 2 > v162)
    v162 = v163 >> 2;
  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
    v164 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v164 = v162;
  if (v164)
  {
    if (v164 >> 61)
      goto LABEL_1699;
    v165 = operator new(8 * v164);
    v166 = &v165[8 * v161];
    v167 = &v165[8 * v164];
    *v166 = v155;
    v158 = (uint64_t)(v166 + 1);
    v168 = (char *)(v156 - v159);
    if (v156 == v159)
      goto LABEL_167;
    goto LABEL_160;
  }
  v165 = 0;
  v166 = (_QWORD *)(8 * v161);
  v167 = 0;
  *(_QWORD *)(8 * v161) = v155;
  v158 = 8 * v161 + 8;
  v168 = (char *)(v156 - v159);
  if (v156 != v159)
  {
LABEL_160:
    v169 = (unint64_t)(v168 - 8);
    if (v169 < 0x58)
      goto LABEL_1710;
    if ((unint64_t)(v156 - v165 - v160) < 0x20)
      goto LABEL_1710;
    v170 = (v169 >> 3) + 1;
    v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
    v172 = &v156[-v171];
    v166 = (_QWORD *)((char *)v166 - v171);
    v173 = &v165[8 * v161 - 16];
    v174 = v156 - 16;
    v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v176 = *(_OWORD *)v174;
      *(v173 - 1) = *((_OWORD *)v174 - 1);
      *v173 = v176;
      v173 -= 2;
      v174 -= 32;
      v175 -= 4;
    }
    while (v175);
    v156 = v172;
    if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1710:
      do
      {
        v177 = *((_QWORD *)v156 - 1);
        v156 -= 8;
        *--v166 = v177;
      }
      while (v156 != v159);
    }
    v156 = *v5;
  }
LABEL_167:
  *(_QWORD *)(a1 + 2624) = v166;
  *(_QWORD *)(a1 + 2632) = v158;
  *(_QWORD *)(a1 + 2640) = v167;
  if (v156)
    operator delete(v156);
LABEL_169:
  *(_QWORD *)(a1 + 2632) = v158;
  v178 = *(_QWORD *)(a1 + 2680);
  if (v178)
  {
    v179 = *(_DWORD *)(v178 + 40) / 2;
    v180 = 4 * *(unsigned __int8 *)(v178 + 244);
    if (*(_BYTE *)(v178 + 384))
      v181 = 3;
    else
      v181 = 0;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
    {
LABEL_174:
      if (*(_BYTE *)(a1 + 2672))
        v183 = v179;
      else
        v183 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v184 = v180;
      else
        v184 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v185 = v181;
      else
        v185 = 0;
      if (*(int *)(a1 + 56) >= 1)
        goto LABEL_184;
      goto LABEL_187;
    }
  }
  else
  {
    v180 = 0;
    v181 = 0;
    v179 = 8;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
      goto LABEL_174;
  }
  v184 = 0;
  v183 = 0;
  v185 = 0;
  if (*(int *)(a1 + 56) >= 1)
  {
LABEL_184:
    v186 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v182 = *(unsigned __int8 *)(a1 + 42);
    goto LABEL_188;
  }
LABEL_187:
  v186 = 0;
LABEL_188:
  v187 = v182 == 0;
  v188 = v182 != 0;
  if (v187)
    v189 = dword_1EE418968;
  else
    v189 = 2;
  if ((v188 & v186) != 0)
    v190 = 2;
  else
    v190 = dword_1EE418968;
  v1635 = v189;
  v1636 = v190;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v191 = *(_QWORD *)(a1 + 2680);
    if (v191 && *(int *)(v191 + 40) >= 1)
    {
      v192 = (_QWORD *)(v191 + 8 * v183);
      *(_QWORD *)(a1 + 232) = v192[14];
      *(_QWORD *)(a1 + 240) = v192[15];
      *(_QWORD *)(a1 + 256) = v192[16];
      *(_QWORD *)(a1 + 248) = v192[17];
      *(_QWORD *)(a1 + 264) = v192[18];
      *(_QWORD *)(a1 + 272) = v192[19];
      *(_QWORD *)(a1 + 288) = v192[20];
      *(_QWORD *)(a1 + 280) = v192[21];
      if (*(_BYTE *)(a1 + 1697))
        goto LABEL_548;
      goto LABEL_201;
    }
    if (*(_BYTE *)(a1 + 1697))
      goto LABEL_548;
    v195 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v1637[0] = operator new[]();
    bzero(*(void **)&v1637[0], 4 * v195);
    sub_19C0FCEBC(v1637, v195, 0.1);
    v196 = *(_QWORD *)&v1637[0];
    *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1637[0];
    v197 = (char **)(a1 + 2648);
    v198 = *(char **)(a1 + 2656);
    v199 = *(_QWORD *)(a1 + 2664);
    if ((unint64_t)v198 < v199)
    {
      *(_QWORD *)v198 = v196;
      v200 = (uint64_t)(v198 + 8);
      goto LABEL_307;
    }
    v207 = *v197;
    v208 = v198 - *v197;
    v209 = v208 >> 3;
    v210 = (v208 >> 3) + 1;
    if (v210 >> 61)
      goto LABEL_1700;
    v211 = v199 - (_QWORD)v207;
    if (v211 >> 2 > v210)
      v210 = v211 >> 2;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
      v212 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v212 = v210;
    if (v212)
    {
      if (v212 >> 61)
        goto LABEL_1699;
      v213 = operator new(8 * v212);
      v214 = &v213[8 * v209];
      v215 = &v213[8 * v212];
      *v214 = v196;
      v200 = (uint64_t)(v214 + 1);
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
      {
LABEL_217:
        v217 = (unint64_t)(v216 - 8);
        if (v217 >= 0x58)
        {
          v296 = v198 - v213 - v208;
          v197 = (char **)(a1 + 2648);
          if (v296 >= 0x20)
          {
            v297 = (v217 >> 3) + 1;
            v298 = 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
            v299 = &v198[-v298];
            v214 = (_QWORD *)((char *)v214 - v298);
            v300 = &v213[8 * v209 - 16];
            v301 = v198 - 16;
            v302 = v297 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v303 = *(_OWORD *)v301;
              *(v300 - 1) = *((_OWORD *)v301 - 1);
              *v300 = v303;
              v300 -= 2;
              v301 -= 32;
              v302 -= 4;
            }
            while (v302);
            v198 = v299;
            if (v297 == (v297 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_304;
          }
        }
        else
        {
          v197 = (char **)(a1 + 2648);
        }
        do
        {
          v304 = *((_QWORD *)v198 - 1);
          v198 -= 8;
          *--v214 = v304;
        }
        while (v198 != v207);
LABEL_304:
        v198 = *v197;
LABEL_305:
        *(_QWORD *)(a1 + 2648) = v214;
        *(_QWORD *)(a1 + 2656) = v200;
        *(_QWORD *)(a1 + 2664) = v215;
        if (v198)
          operator delete(v198);
LABEL_307:
        *(_QWORD *)(a1 + 2656) = v200;
        v305 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
        *(_QWORD *)&v1637[0] = operator new[]();
        bzero(*(void **)&v1637[0], 4 * v305);
        sub_19C0FCEBC(v1637, v305, 0.1);
        v306 = *(_QWORD *)&v1637[0];
        *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1637[0];
        v307 = *(char **)(a1 + 2656);
        v308 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v307 < v308)
        {
          *(_QWORD *)v307 = v306;
          v309 = (uint64_t)(v307 + 8);
          goto LABEL_330;
        }
        v310 = *v197;
        v311 = v307 - *v197;
        v312 = v311 >> 3;
        v313 = (v311 >> 3) + 1;
        if (v313 >> 61)
          goto LABEL_1700;
        v314 = v308 - (_QWORD)v310;
        if (v314 >> 2 > v313)
          v313 = v314 >> 2;
        if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFF8)
          v315 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v315 = v313;
        if (v315)
        {
          if (v315 >> 61)
            goto LABEL_1699;
          v316 = operator new(8 * v315);
          v317 = &v316[8 * v312];
          v318 = &v316[8 * v315];
          *v317 = v306;
          v309 = (uint64_t)(v317 + 1);
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
          {
LABEL_318:
            v320 = (unint64_t)(v319 - 8);
            if (v320 >= 0x58)
            {
              v321 = v307 - &v316[v311];
              v197 = (char **)(a1 + 2648);
              if (v321 >= 0x20)
              {
                v322 = (v320 >> 3) + 1;
                v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
                v324 = &v307[-v323];
                v317 = (_QWORD *)((char *)v317 - v323);
                v325 = &v316[8 * v312 - 16];
                v326 = v307 - 16;
                v327 = v322 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v328 = *(_OWORD *)v326;
                  *(v325 - 1) = *((_OWORD *)v326 - 1);
                  *v325 = v328;
                  v325 -= 2;
                  v326 -= 32;
                  v327 -= 4;
                }
                while (v327);
                v307 = v324;
                if (v322 == (v322 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_327;
              }
            }
            else
            {
              v197 = (char **)(a1 + 2648);
            }
            do
            {
              v329 = *((_QWORD *)v307 - 1);
              v307 -= 8;
              *--v317 = v329;
            }
            while (v307 != v310);
LABEL_327:
            v307 = *v197;
LABEL_328:
            *(_QWORD *)(a1 + 2648) = v317;
            *(_QWORD *)(a1 + 2656) = v309;
            *(_QWORD *)(a1 + 2664) = v318;
            if (v307)
              operator delete(v307);
LABEL_330:
            *(_QWORD *)(a1 + 2656) = v309;
            v330 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
            *(_QWORD *)&v1637[0] = operator new[]();
            bzero(*(void **)&v1637[0], 4 * v330);
            sub_19C0FCEBC(v1637, v330, 0.1);
            v331 = *(_QWORD *)&v1637[0];
            *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1637[0];
            v332 = *(char **)(a1 + 2656);
            v333 = *(_QWORD *)(a1 + 2664);
            if ((unint64_t)v332 < v333)
            {
              *(_QWORD *)v332 = v331;
              v334 = (uint64_t)(v332 + 8);
              goto LABEL_353;
            }
            v335 = *v197;
            v336 = v332 - *v197;
            v337 = v336 >> 3;
            v338 = (v336 >> 3) + 1;
            if (v338 >> 61)
              goto LABEL_1700;
            v339 = v333 - (_QWORD)v335;
            if (v339 >> 2 > v338)
              v338 = v339 >> 2;
            if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
              v340 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v340 = v338;
            if (v340)
            {
              if (v340 >> 61)
                goto LABEL_1699;
              v341 = operator new(8 * v340);
              v342 = &v341[8 * v337];
              v343 = &v341[8 * v340];
              *v342 = v331;
              v334 = (uint64_t)(v342 + 1);
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
              {
LABEL_341:
                v345 = (unint64_t)(v344 - 8);
                if (v345 >= 0x58)
                {
                  v346 = v332 - &v341[v336];
                  v197 = (char **)(a1 + 2648);
                  if (v346 >= 0x20)
                  {
                    v347 = (v345 >> 3) + 1;
                    v348 = 8 * (v347 & 0x3FFFFFFFFFFFFFFCLL);
                    v349 = &v332[-v348];
                    v342 = (_QWORD *)((char *)v342 - v348);
                    v350 = &v341[8 * v337 - 16];
                    v351 = v332 - 16;
                    v352 = v347 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v353 = *(_OWORD *)v351;
                      *(v350 - 1) = *((_OWORD *)v351 - 1);
                      *v350 = v353;
                      v350 -= 2;
                      v351 -= 32;
                      v352 -= 4;
                    }
                    while (v352);
                    v332 = v349;
                    if (v347 == (v347 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_350;
                  }
                }
                else
                {
                  v197 = (char **)(a1 + 2648);
                }
                do
                {
                  v354 = *((_QWORD *)v332 - 1);
                  v332 -= 8;
                  *--v342 = v354;
                }
                while (v332 != v335);
LABEL_350:
                v332 = *v197;
LABEL_351:
                *(_QWORD *)(a1 + 2648) = v342;
                *(_QWORD *)(a1 + 2656) = v334;
                *(_QWORD *)(a1 + 2664) = v343;
                if (v332)
                  operator delete(v332);
LABEL_353:
                *(_QWORD *)(a1 + 2656) = v334;
                v355 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
                *(_QWORD *)&v1637[0] = operator new[]();
                bzero(*(void **)&v1637[0], 4 * v355);
                sub_19C0FCEBC(v1637, v355, 0.1);
                v356 = *(_QWORD *)&v1637[0];
                *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1637[0];
                v357 = *(char **)(a1 + 2656);
                v358 = *(_QWORD *)(a1 + 2664);
                if ((unint64_t)v357 < v358)
                {
                  *(_QWORD *)v357 = v356;
                  v359 = (uint64_t)(v357 + 8);
                  goto LABEL_376;
                }
                v360 = *v197;
                v361 = v357 - *v197;
                v362 = v361 >> 3;
                v363 = (v361 >> 3) + 1;
                if (v363 >> 61)
                  goto LABEL_1700;
                v364 = v358 - (_QWORD)v360;
                if (v364 >> 2 > v363)
                  v363 = v364 >> 2;
                if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
                  v365 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v365 = v363;
                if (v365)
                {
                  if (v365 >> 61)
                    goto LABEL_1699;
                  v366 = operator new(8 * v365);
                  v367 = &v366[8 * v362];
                  v368 = &v366[8 * v365];
                  *v367 = v356;
                  v359 = (uint64_t)(v367 + 1);
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                  {
LABEL_364:
                    v370 = (unint64_t)(v369 - 8);
                    if (v370 >= 0x58)
                    {
                      v371 = v357 - &v366[v361];
                      v197 = (char **)(a1 + 2648);
                      if (v371 >= 0x20)
                      {
                        v372 = (v370 >> 3) + 1;
                        v373 = 8 * (v372 & 0x3FFFFFFFFFFFFFFCLL);
                        v374 = &v357[-v373];
                        v367 = (_QWORD *)((char *)v367 - v373);
                        v375 = &v366[8 * v362 - 16];
                        v376 = v357 - 16;
                        v377 = v372 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v378 = *(_OWORD *)v376;
                          *(v375 - 1) = *((_OWORD *)v376 - 1);
                          *v375 = v378;
                          v375 -= 2;
                          v376 -= 32;
                          v377 -= 4;
                        }
                        while (v377);
                        v357 = v374;
                        if (v372 == (v372 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_373;
                      }
                    }
                    else
                    {
                      v197 = (char **)(a1 + 2648);
                    }
                    do
                    {
                      v379 = *((_QWORD *)v357 - 1);
                      v357 -= 8;
                      *--v367 = v379;
                    }
                    while (v357 != v360);
LABEL_373:
                    v357 = *v197;
LABEL_374:
                    *(_QWORD *)(a1 + 2648) = v367;
                    *(_QWORD *)(a1 + 2656) = v359;
                    *(_QWORD *)(a1 + 2664) = v368;
                    if (v357)
                      operator delete(v357);
LABEL_376:
                    *(_QWORD *)(a1 + 2656) = v359;
                    v380 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                    *(_QWORD *)&v1637[0] = operator new[]();
                    bzero(*(void **)&v1637[0], 4 * v380);
                    sub_19C0FCEBC(v1637, v380, 0.1);
                    v381 = *(_QWORD *)&v1637[0];
                    *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1637[0];
                    v382 = *(char **)(a1 + 2656);
                    v383 = *(_QWORD *)(a1 + 2664);
                    if ((unint64_t)v382 < v383)
                    {
                      *(_QWORD *)v382 = v381;
                      v384 = (uint64_t)(v382 + 8);
                      goto LABEL_399;
                    }
                    v385 = *v197;
                    v386 = v382 - *v197;
                    v387 = v386 >> 3;
                    v388 = (v386 >> 3) + 1;
                    if (v388 >> 61)
                      goto LABEL_1700;
                    v389 = v383 - (_QWORD)v385;
                    if (v389 >> 2 > v388)
                      v388 = v389 >> 2;
                    if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                      v390 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v390 = v388;
                    if (v390)
                    {
                      if (v390 >> 61)
                        goto LABEL_1699;
                      v391 = operator new(8 * v390);
                      v392 = &v391[8 * v387];
                      v393 = &v391[8 * v390];
                      *v392 = v381;
                      v384 = (uint64_t)(v392 + 1);
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                      {
LABEL_387:
                        v395 = (unint64_t)(v394 - 8);
                        if (v395 >= 0x58)
                        {
                          v396 = v382 - v391 - v386;
                          v197 = (char **)(a1 + 2648);
                          if (v396 >= 0x20)
                          {
                            v397 = (v395 >> 3) + 1;
                            v398 = 8 * (v397 & 0x3FFFFFFFFFFFFFFCLL);
                            v399 = &v382[-v398];
                            v392 = (_QWORD *)((char *)v392 - v398);
                            v400 = &v391[8 * v387 - 16];
                            v401 = v382 - 16;
                            v402 = v397 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v403 = *(_OWORD *)v401;
                              *(v400 - 1) = *((_OWORD *)v401 - 1);
                              *v400 = v403;
                              v400 -= 2;
                              v401 -= 32;
                              v402 -= 4;
                            }
                            while (v402);
                            v382 = v399;
                            if (v397 == (v397 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_396;
                          }
                        }
                        else
                        {
                          v197 = (char **)(a1 + 2648);
                        }
                        do
                        {
                          v404 = *((_QWORD *)v382 - 1);
                          v382 -= 8;
                          *--v392 = v404;
                        }
                        while (v382 != v385);
LABEL_396:
                        v382 = *v197;
LABEL_397:
                        *(_QWORD *)(a1 + 2648) = v392;
                        *(_QWORD *)(a1 + 2656) = v384;
                        *(_QWORD *)(a1 + 2664) = v393;
                        if (v382)
                          operator delete(v382);
LABEL_399:
                        *(_QWORD *)(a1 + 2656) = v384;
                        v405 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                        *(_QWORD *)&v1637[0] = operator new[]();
                        bzero(*(void **)&v1637[0], 4 * v405);
                        sub_19C0FCEBC(v1637, v405, 0.1);
                        v406 = *(_QWORD *)&v1637[0];
                        *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1637[0];
                        v407 = *(char **)(a1 + 2656);
                        v408 = *(_QWORD *)(a1 + 2664);
                        if ((unint64_t)v407 < v408)
                        {
                          *(_QWORD *)v407 = v406;
                          v409 = (uint64_t)(v407 + 8);
                          goto LABEL_422;
                        }
                        v410 = *v197;
                        v411 = v407 - *v197;
                        v412 = v411 >> 3;
                        v413 = (v411 >> 3) + 1;
                        if (v413 >> 61)
                          goto LABEL_1700;
                        v414 = v408 - (_QWORD)v410;
                        if (v414 >> 2 > v413)
                          v413 = v414 >> 2;
                        if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8)
                          v415 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v415 = v413;
                        if (v415)
                        {
                          if (v415 >> 61)
                            goto LABEL_1699;
                          v416 = operator new(8 * v415);
                          v417 = &v416[8 * v412];
                          v418 = &v416[8 * v415];
                          *v417 = v406;
                          v409 = (uint64_t)(v417 + 1);
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                          {
LABEL_410:
                            v420 = (unint64_t)(v419 - 8);
                            if (v420 >= 0x58)
                            {
                              v421 = v407 - v416 - v411;
                              v197 = (char **)(a1 + 2648);
                              if (v421 >= 0x20)
                              {
                                v422 = (v420 >> 3) + 1;
                                v423 = 8 * (v422 & 0x3FFFFFFFFFFFFFFCLL);
                                v424 = &v407[-v423];
                                v417 = (_QWORD *)((char *)v417 - v423);
                                v425 = &v416[8 * v412 - 16];
                                v426 = v407 - 16;
                                v427 = v422 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v428 = *(_OWORD *)v426;
                                  *(v425 - 1) = *((_OWORD *)v426 - 1);
                                  *v425 = v428;
                                  v425 -= 2;
                                  v426 -= 32;
                                  v427 -= 4;
                                }
                                while (v427);
                                v407 = v424;
                                if (v422 == (v422 & 0x3FFFFFFFFFFFFFFCLL))
                                  goto LABEL_419;
                              }
                            }
                            else
                            {
                              v197 = (char **)(a1 + 2648);
                            }
                            do
                            {
                              v429 = *((_QWORD *)v407 - 1);
                              v407 -= 8;
                              *--v417 = v429;
                            }
                            while (v407 != v410);
LABEL_419:
                            v407 = *v197;
LABEL_420:
                            *(_QWORD *)(a1 + 2648) = v417;
                            *(_QWORD *)(a1 + 2656) = v409;
                            *(_QWORD *)(a1 + 2664) = v418;
                            if (v407)
                              operator delete(v407);
LABEL_422:
                            *(_QWORD *)(a1 + 2656) = v409;
                            v430 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                            *(_QWORD *)&v1637[0] = operator new[]();
                            bzero(*(void **)&v1637[0], 4 * v430);
                            sub_19C0FCEBC(v1637, v430, 0.1);
                            v431 = *(_QWORD *)&v1637[0];
                            *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1637[0];
                            v432 = *(char **)(a1 + 2656);
                            v433 = *(_QWORD *)(a1 + 2664);
                            if ((unint64_t)v432 < v433)
                            {
                              *(_QWORD *)v432 = v431;
                              v434 = (uint64_t)(v432 + 8);
                              goto LABEL_445;
                            }
                            v435 = *v197;
                            v436 = v432 - *v197;
                            v437 = v436 >> 3;
                            v438 = (v436 >> 3) + 1;
                            if (v438 >> 61)
                              goto LABEL_1700;
                            v439 = v433 - (_QWORD)v435;
                            if (v439 >> 2 > v438)
                              v438 = v439 >> 2;
                            if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF8)
                              v440 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v440 = v438;
                            if (v440)
                            {
                              if (v440 >> 61)
                                goto LABEL_1699;
                              v441 = operator new(8 * v440);
                              v442 = &v441[8 * v437];
                              v443 = &v441[8 * v440];
                              *v442 = v431;
                              v434 = (uint64_t)(v442 + 1);
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                              {
LABEL_433:
                                v445 = (unint64_t)(v444 - 8);
                                if (v445 >= 0x58)
                                {
                                  v446 = v432 - v441 - v436;
                                  v197 = (char **)(a1 + 2648);
                                  if (v446 >= 0x20)
                                  {
                                    v447 = (v445 >> 3) + 1;
                                    v448 = 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
                                    v449 = &v432[-v448];
                                    v442 = (_QWORD *)((char *)v442 - v448);
                                    v450 = &v441[8 * v437 - 16];
                                    v451 = v432 - 16;
                                    v452 = v447 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v453 = *(_OWORD *)v451;
                                      *(v450 - 1) = *((_OWORD *)v451 - 1);
                                      *v450 = v453;
                                      v450 -= 2;
                                      v451 -= 32;
                                      v452 -= 4;
                                    }
                                    while (v452);
                                    v432 = v449;
                                    if (v447 == (v447 & 0x3FFFFFFFFFFFFFFCLL))
                                      goto LABEL_442;
                                  }
                                }
                                else
                                {
                                  v197 = (char **)(a1 + 2648);
                                }
                                do
                                {
                                  v454 = *((_QWORD *)v432 - 1);
                                  v432 -= 8;
                                  *--v442 = v454;
                                }
                                while (v432 != v435);
LABEL_442:
                                v432 = *v197;
LABEL_443:
                                *(_QWORD *)(a1 + 2648) = v442;
                                *(_QWORD *)(a1 + 2656) = v434;
                                *(_QWORD *)(a1 + 2664) = v443;
                                if (v432)
                                  operator delete(v432);
LABEL_445:
                                *(_QWORD *)(a1 + 2656) = v434;
                                v455 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                                *(_QWORD *)&v1637[0] = operator new[]();
                                bzero(*(void **)&v1637[0], 4 * v455);
                                sub_19C0FCEBC(v1637, v455, 0.1);
                                v456 = *(_QWORD *)&v1637[0];
                                *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1637[0];
                                v457 = *(char **)(a1 + 2656);
                                v458 = *(_QWORD *)(a1 + 2664);
                                if ((unint64_t)v457 < v458)
                                {
                                  *(_QWORD *)v457 = v456;
                                  v459 = v457 + 8;
                                  goto LABEL_468;
                                }
                                v460 = *v197;
                                v461 = v457 - *v197;
                                v462 = v461 >> 3;
                                v463 = (v461 >> 3) + 1;
                                if (!(v463 >> 61))
                                {
                                  v464 = v458 - (_QWORD)v460;
                                  if (v464 >> 2 > v463)
                                    v463 = v464 >> 2;
                                  if ((unint64_t)v464 >= 0x7FFFFFFFFFFFFFF8)
                                    v465 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v465 = v463;
                                  if (v465)
                                  {
                                    if (v465 >> 61)
                                      goto LABEL_1699;
                                    v466 = operator new(8 * v465);
                                  }
                                  else
                                  {
                                    v466 = 0;
                                  }
                                  v467 = &v466[8 * v462];
                                  v468 = &v466[8 * v465];
                                  *v467 = v456;
                                  v459 = v467 + 1;
                                  if (v457 == v460)
                                    goto LABEL_466;
                                  v469 = v457 - v460 - 8;
                                  if (v469 >= 0x58)
                                  {
                                    v470 = (char **)(a1 + 2648);
                                    if ((unint64_t)(v457 - v466 - v461) >= 0x20)
                                    {
                                      v471 = (v469 >> 3) + 1;
                                      v472 = 8 * (v471 & 0x3FFFFFFFFFFFFFFCLL);
                                      v473 = &v457[-v472];
                                      v467 = (_QWORD *)((char *)v467 - v472);
                                      v474 = &v466[8 * v462 - 16];
                                      v475 = v457 - 16;
                                      v476 = v471 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v477 = *(_OWORD *)v475;
                                        *(v474 - 1) = *((_OWORD *)v475 - 1);
                                        *v474 = v477;
                                        v474 -= 2;
                                        v475 -= 32;
                                        v476 -= 4;
                                      }
                                      while (v476);
                                      v457 = v473;
                                      if (v471 == (v471 & 0x3FFFFFFFFFFFFFFCLL))
                                        goto LABEL_465;
                                    }
                                  }
                                  else
                                  {
                                    v470 = (char **)(a1 + 2648);
                                  }
                                  do
                                  {
                                    v478 = *((_QWORD *)v457 - 1);
                                    v457 -= 8;
                                    *--v467 = v478;
                                  }
                                  while (v457 != v460);
LABEL_465:
                                  v457 = *v470;
LABEL_466:
                                  *(_QWORD *)(a1 + 2648) = v467;
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  *(_QWORD *)(a1 + 2664) = v468;
                                  if (v457)
                                    operator delete(v457);
LABEL_468:
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  if (*(_BYTE *)(a1 + 1697))
                                    goto LABEL_548;
LABEL_201:
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193 && *(_BYTE *)(v193 + 384))
                                  {
                                    v194 = (_QWORD *)(v193 + 8 * v185);
                                    *(_QWORD *)(a1 + 296) = v194[49];
                                    *(_QWORD *)(a1 + 304) = v194[50];
                                    *(_QWORD *)(a1 + 312) = v194[51];
                                    goto LABEL_286;
                                  }
                                  v201 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C0FCEBC(v1637, v201, 0.1);
                                  v202 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 296) = *(_QWORD *)&v1637[0];
                                  v203 = (char **)(a1 + 2648);
                                  v204 = *(char **)(a1 + 2656);
                                  v205 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v204 >= v205)
                                  {
                                    v218 = *v203;
                                    v219 = v204 - *v203;
                                    v220 = v219 >> 3;
                                    v221 = (v219 >> 3) + 1;
                                    if (v221 >> 61)
                                      goto LABEL_1701;
                                    v222 = v205 - (_QWORD)v218;
                                    if (v222 >> 2 > v221)
                                      v221 = v222 >> 2;
                                    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
                                      v223 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v223 = v221;
                                    if (v223)
                                    {
                                      if (v223 >> 61)
                                        goto LABEL_1699;
                                      v224 = operator new(8 * v223);
                                    }
                                    else
                                    {
                                      v224 = 0;
                                    }
                                    v225 = &v224[8 * v220];
                                    v226 = &v224[8 * v223];
                                    *v225 = v202;
                                    v206 = v225 + 1;
                                    if (v204 != v218)
                                    {
                                      v227 = v204 - v218 - 8;
                                      if (v227 < 0x58)
                                        goto LABEL_1711;
                                      if ((unint64_t)(v204 - v224 - v219) < 0x20)
                                        goto LABEL_1711;
                                      v228 = (v227 >> 3) + 1;
                                      v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                                      v230 = &v204[-v229];
                                      v225 = (_QWORD *)((char *)v225 - v229);
                                      v231 = &v224[8 * v220 - 16];
                                      v232 = v204 - 16;
                                      v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v234 = *(_OWORD *)v232;
                                        *(v231 - 1) = *((_OWORD *)v232 - 1);
                                        *v231 = v234;
                                        v231 -= 2;
                                        v232 -= 32;
                                        v233 -= 4;
                                      }
                                      while (v233);
                                      v204 = v230;
                                      if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1711:
                                        do
                                        {
                                          v235 = *((_QWORD *)v204 - 1);
                                          v204 -= 8;
                                          *--v225 = v235;
                                        }
                                        while (v204 != v218);
                                      }
                                      v204 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v225;
                                    *(_QWORD *)(a1 + 2656) = v206;
                                    *(_QWORD *)(a1 + 2664) = v226;
                                    if (v204)
                                      operator delete(v204);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v204 = v202;
                                    v206 = v204 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v206;
                                  v236 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C0FCEBC(v1637, v236, 0.1);
                                  v237 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 304) = *(_QWORD *)&v1637[0];
                                  v238 = *(char **)(a1 + 2656);
                                  v239 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v238 >= v239)
                                  {
                                    v241 = *v203;
                                    v242 = v238 - *v203;
                                    v243 = v242 >> 3;
                                    v244 = (v242 >> 3) + 1;
                                    if (v244 >> 61)
                                      goto LABEL_1701;
                                    v245 = v239 - (_QWORD)v241;
                                    if (v245 >> 2 > v244)
                                      v244 = v245 >> 2;
                                    if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                                      v246 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v246 = v244;
                                    if (v246)
                                    {
                                      if (v246 >> 61)
                                        goto LABEL_1699;
                                      v247 = operator new(8 * v246);
                                    }
                                    else
                                    {
                                      v247 = 0;
                                    }
                                    v248 = &v247[8 * v243];
                                    v249 = &v247[8 * v246];
                                    *v248 = v237;
                                    v240 = v248 + 1;
                                    if (v238 != v241)
                                    {
                                      v250 = v238 - v241 - 8;
                                      if (v250 < 0x58)
                                        goto LABEL_1712;
                                      if ((unint64_t)(v238 - v247 - v242) < 0x20)
                                        goto LABEL_1712;
                                      v251 = (v250 >> 3) + 1;
                                      v252 = 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
                                      v253 = &v238[-v252];
                                      v248 = (_QWORD *)((char *)v248 - v252);
                                      v254 = &v247[8 * v243 - 16];
                                      v255 = v238 - 16;
                                      v256 = v251 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v257 = *(_OWORD *)v255;
                                        *(v254 - 1) = *((_OWORD *)v255 - 1);
                                        *v254 = v257;
                                        v254 -= 2;
                                        v255 -= 32;
                                        v256 -= 4;
                                      }
                                      while (v256);
                                      v238 = v253;
                                      if (v251 != (v251 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1712:
                                        do
                                        {
                                          v258 = *((_QWORD *)v238 - 1);
                                          v238 -= 8;
                                          *--v248 = v258;
                                        }
                                        while (v238 != v241);
                                      }
                                      v238 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v248;
                                    *(_QWORD *)(a1 + 2656) = v240;
                                    *(_QWORD *)(a1 + 2664) = v249;
                                    if (v238)
                                      operator delete(v238);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v238 = v237;
                                    v240 = v238 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v240;
                                  v259 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C0FCEBC(v1637, v259, 0.1);
                                  v260 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 312) = *(_QWORD *)&v1637[0];
                                  v261 = *(char **)(a1 + 2656);
                                  v262 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v261 >= v262)
                                  {
                                    v264 = *v203;
                                    v265 = v261 - *v203;
                                    v266 = v265 >> 3;
                                    v267 = (v265 >> 3) + 1;
                                    if (v267 >> 61)
                                      goto LABEL_1701;
                                    v268 = v262 - (_QWORD)v264;
                                    if (v268 >> 2 > v267)
                                      v267 = v268 >> 2;
                                    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
                                      v269 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v269 = v267;
                                    if (v269)
                                    {
                                      if (v269 >> 61)
                                        goto LABEL_1699;
                                      v270 = operator new(8 * v269);
                                    }
                                    else
                                    {
                                      v270 = 0;
                                    }
                                    v271 = &v270[8 * v266];
                                    v272 = &v270[8 * v269];
                                    *v271 = v260;
                                    v263 = v271 + 1;
                                    if (v261 != v264)
                                    {
                                      v273 = v261 - v264 - 8;
                                      if (v273 < 0x58)
                                        goto LABEL_1713;
                                      if ((unint64_t)(v261 - v270 - v265) < 0x20)
                                        goto LABEL_1713;
                                      v274 = (v273 >> 3) + 1;
                                      v275 = 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
                                      v276 = &v261[-v275];
                                      v271 = (_QWORD *)((char *)v271 - v275);
                                      v277 = &v270[8 * v266 - 16];
                                      v278 = v261 - 16;
                                      v279 = v274 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v280 = *(_OWORD *)v278;
                                        *(v277 - 1) = *((_OWORD *)v278 - 1);
                                        *v277 = v280;
                                        v277 -= 2;
                                        v278 -= 32;
                                        v279 -= 4;
                                      }
                                      while (v279);
                                      v261 = v276;
                                      if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1713:
                                        do
                                        {
                                          v281 = *((_QWORD *)v261 - 1);
                                          v261 -= 8;
                                          *--v271 = v281;
                                        }
                                        while (v261 != v264);
                                      }
                                      v261 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v271;
                                    *(_QWORD *)(a1 + 2656) = v263;
                                    *(_QWORD *)(a1 + 2664) = v272;
                                    if (v261)
                                      operator delete(v261);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v261 = v260;
                                    v263 = v261 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v263;
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193)
                                  {
LABEL_286:
                                    if (*(_BYTE *)(v193 + 244))
                                    {
                                      v282 = (_QWORD *)(v193 + 8 * v184);
                                      *(_QWORD *)(a1 + 320) = v282[31];
                                      *(_QWORD *)(a1 + 328) = v282[32];
                                      *(_QWORD *)(a1 + 336) = v282[33];
                                      *(_QWORD *)(a1 + 344) = v282[34];
                                      goto LABEL_548;
                                    }
                                    v283 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C0FCEBC(v1637, v283, 0.1);
                                    v284 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 320) = *(_QWORD *)&v1637[0];
                                    v285 = (char **)(a1 + 2648);
                                    v286 = *(char **)(a1 + 2656);
                                    v287 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v286 >= v287)
                                    {
                                      v289 = *v285;
                                      v290 = v286 - *v285;
                                      v291 = v290 >> 3;
                                      v292 = (v290 >> 3) + 1;
                                      if (v292 >> 61)
                                        goto LABEL_1701;
                                      v293 = v287 - (_QWORD)v289;
                                      if (v293 >> 2 > v292)
                                        v292 = v293 >> 2;
                                      if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
                                        v294 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v294 = v292;
                                      if (v294)
                                      {
                                        if (v294 >> 61)
                                          goto LABEL_1699;
                                        v295 = operator new(8 * v294);
                                      }
                                      else
                                      {
                                        v295 = 0;
                                      }
                                      v479 = &v295[8 * v291];
                                      v480 = &v295[8 * v294];
                                      *v479 = v284;
                                      v288 = v479 + 1;
                                      if (v286 != v289)
                                      {
                                        v481 = v286 - v289 - 8;
                                        if (v481 < 0x58)
                                          goto LABEL_1714;
                                        if ((unint64_t)(v286 - v295 - v290) < 0x20)
                                          goto LABEL_1714;
                                        v482 = (v481 >> 3) + 1;
                                        v483 = 8 * (v482 & 0x3FFFFFFFFFFFFFFCLL);
                                        v484 = &v286[-v483];
                                        v479 = (_QWORD *)((char *)v479 - v483);
                                        v485 = &v295[8 * v291 - 16];
                                        v486 = v286 - 16;
                                        v487 = v482 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v488 = *(_OWORD *)v486;
                                          *(v485 - 1) = *((_OWORD *)v486 - 1);
                                          *v485 = v488;
                                          v485 -= 2;
                                          v486 -= 32;
                                          v487 -= 4;
                                        }
                                        while (v487);
                                        v286 = v484;
                                        if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1714:
                                          do
                                          {
                                            v489 = *((_QWORD *)v286 - 1);
                                            v286 -= 8;
                                            *--v479 = v489;
                                          }
                                          while (v286 != v289);
                                        }
                                        v286 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v479;
                                      *(_QWORD *)(a1 + 2656) = v288;
                                      *(_QWORD *)(a1 + 2664) = v480;
                                      if (v286)
                                        operator delete(v286);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v286 = v284;
                                      v288 = v286 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v288;
                                    v490 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C0FCEBC(v1637, v490, 0.1);
                                    v491 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 328) = *(_QWORD *)&v1637[0];
                                    v492 = *(char **)(a1 + 2656);
                                    v493 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v492 >= v493)
                                    {
                                      v495 = *v285;
                                      v496 = v492 - *v285;
                                      v497 = v496 >> 3;
                                      v498 = (v496 >> 3) + 1;
                                      if (v498 >> 61)
                                        goto LABEL_1701;
                                      v499 = v493 - (_QWORD)v495;
                                      if (v499 >> 2 > v498)
                                        v498 = v499 >> 2;
                                      if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFF8)
                                        v500 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v500 = v498;
                                      if (v500)
                                      {
                                        if (v500 >> 61)
                                          goto LABEL_1699;
                                        v501 = operator new(8 * v500);
                                      }
                                      else
                                      {
                                        v501 = 0;
                                      }
                                      v502 = &v501[8 * v497];
                                      v503 = &v501[8 * v500];
                                      *v502 = v491;
                                      v494 = v502 + 1;
                                      if (v492 != v495)
                                      {
                                        v504 = v492 - v495 - 8;
                                        if (v504 < 0x58)
                                          goto LABEL_1715;
                                        if ((unint64_t)(v492 - v501 - v496) < 0x20)
                                          goto LABEL_1715;
                                        v505 = (v504 >> 3) + 1;
                                        v506 = 8 * (v505 & 0x3FFFFFFFFFFFFFFCLL);
                                        v507 = &v492[-v506];
                                        v502 = (_QWORD *)((char *)v502 - v506);
                                        v508 = &v501[8 * v497 - 16];
                                        v509 = v492 - 16;
                                        v510 = v505 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v511 = *(_OWORD *)v509;
                                          *(v508 - 1) = *((_OWORD *)v509 - 1);
                                          *v508 = v511;
                                          v508 -= 2;
                                          v509 -= 32;
                                          v510 -= 4;
                                        }
                                        while (v510);
                                        v492 = v507;
                                        if (v505 != (v505 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1715:
                                          do
                                          {
                                            v512 = *((_QWORD *)v492 - 1);
                                            v492 -= 8;
                                            *--v502 = v512;
                                          }
                                          while (v492 != v495);
                                        }
                                        v492 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v502;
                                      *(_QWORD *)(a1 + 2656) = v494;
                                      *(_QWORD *)(a1 + 2664) = v503;
                                      if (v492)
                                        operator delete(v492);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v492 = v491;
                                      v494 = v492 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v494;
                                    v513 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C0FCEBC(v1637, v513, 0.1);
                                    v514 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 336) = *(_QWORD *)&v1637[0];
                                    v515 = *(char **)(a1 + 2656);
                                    v516 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v515 >= v516)
                                    {
                                      v518 = *v285;
                                      v519 = v515 - *v285;
                                      v520 = v519 >> 3;
                                      v521 = (v519 >> 3) + 1;
                                      if (v521 >> 61)
                                        goto LABEL_1701;
                                      v522 = v516 - (_QWORD)v518;
                                      if (v522 >> 2 > v521)
                                        v521 = v522 >> 2;
                                      if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFF8)
                                        v523 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v523 = v521;
                                      if (v523)
                                      {
                                        if (v523 >> 61)
                                          goto LABEL_1699;
                                        v524 = operator new(8 * v523);
                                      }
                                      else
                                      {
                                        v524 = 0;
                                      }
                                      v525 = &v524[8 * v520];
                                      v526 = &v524[8 * v523];
                                      *v525 = v514;
                                      v517 = v525 + 1;
                                      if (v515 != v518)
                                      {
                                        v527 = v515 - v518 - 8;
                                        if (v527 < 0x58)
                                          goto LABEL_1716;
                                        if ((unint64_t)(v515 - v524 - v519) < 0x20)
                                          goto LABEL_1716;
                                        v528 = (v527 >> 3) + 1;
                                        v529 = 8 * (v528 & 0x3FFFFFFFFFFFFFFCLL);
                                        v530 = &v515[-v529];
                                        v525 = (_QWORD *)((char *)v525 - v529);
                                        v531 = &v524[8 * v520 - 16];
                                        v532 = v515 - 16;
                                        v533 = v528 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v534 = *(_OWORD *)v532;
                                          *(v531 - 1) = *((_OWORD *)v532 - 1);
                                          *v531 = v534;
                                          v531 -= 2;
                                          v532 -= 32;
                                          v533 -= 4;
                                        }
                                        while (v533);
                                        v515 = v530;
                                        if (v528 != (v528 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1716:
                                          do
                                          {
                                            v535 = *((_QWORD *)v515 - 1);
                                            v515 -= 8;
                                            *--v525 = v535;
                                          }
                                          while (v515 != v518);
                                        }
                                        v515 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v525;
                                      *(_QWORD *)(a1 + 2656) = v517;
                                      *(_QWORD *)(a1 + 2664) = v526;
                                      if (v515)
                                        operator delete(v515);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v515 = v514;
                                      v517 = v515 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v517;
                                    v536 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C0FCEBC(v1637, v536, 0.1);
                                    v537 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 344) = *(_QWORD *)&v1637[0];
                                    v538 = *(char **)(a1 + 2656);
                                    v539 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v538 < v539)
                                    {
                                      *(_QWORD *)v538 = v537;
                                      v540 = v538 + 8;
LABEL_547:
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      goto LABEL_548;
                                    }
                                    v541 = *v285;
                                    v542 = v538 - *v285;
                                    v543 = v542 >> 3;
                                    v544 = (v542 >> 3) + 1;
                                    if (!(v544 >> 61))
                                    {
                                      v545 = v539 - (_QWORD)v541;
                                      if (v545 >> 2 > v544)
                                        v544 = v545 >> 2;
                                      if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF8)
                                        v546 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v546 = v544;
                                      if (v546)
                                      {
                                        if (v546 >> 61)
                                          goto LABEL_1699;
                                        v547 = operator new(8 * v546);
                                      }
                                      else
                                      {
                                        v547 = 0;
                                      }
                                      v548 = &v547[8 * v543];
                                      v549 = &v547[8 * v546];
                                      *v548 = v537;
                                      v540 = v548 + 1;
                                      if (v538 != v541)
                                      {
                                        v550 = v538 - v541 - 8;
                                        if (v550 < 0x58)
                                          goto LABEL_1717;
                                        if ((unint64_t)(v538 - v547 - v542) < 0x20)
                                          goto LABEL_1717;
                                        v551 = (v550 >> 3) + 1;
                                        v552 = 8 * (v551 & 0x3FFFFFFFFFFFFFFCLL);
                                        v553 = &v538[-v552];
                                        v548 = (_QWORD *)((char *)v548 - v552);
                                        v554 = &v547[8 * v543 - 16];
                                        v555 = v538 - 16;
                                        v556 = v551 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v557 = *(_OWORD *)v555;
                                          *(v554 - 1) = *((_OWORD *)v555 - 1);
                                          *v554 = v557;
                                          v554 -= 2;
                                          v555 -= 32;
                                          v556 -= 4;
                                        }
                                        while (v556);
                                        v538 = v553;
                                        if (v551 != (v551 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1717:
                                          do
                                          {
                                            v558 = *((_QWORD *)v538 - 1);
                                            v538 -= 8;
                                            *--v548 = v558;
                                          }
                                          while (v538 != v541);
                                        }
                                        v538 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v548;
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      *(_QWORD *)(a1 + 2664) = v549;
                                      if (v538)
                                        operator delete(v538);
                                      goto LABEL_547;
                                    }
LABEL_1701:
                                    sub_19C07DA0C();
                                  }
LABEL_548:
                                  *(_QWORD *)(a1 + 2504) = a1 + 232;
                                  *(_QWORD *)(a1 + 2512) = a1 + 240;
                                  *(_QWORD *)(a1 + 2520) = a1 + 248;
                                  *(_QWORD *)(a1 + 2528) = a1 + 256;
                                  *(_QWORD *)(a1 + 2536) = a1 + 264;
                                  *(_QWORD *)(a1 + 2544) = a1 + 272;
                                  *(_QWORD *)(a1 + 2552) = a1 + 280;
                                  *(_QWORD *)(a1 + 2560) = a1 + 288;
                                  *(_QWORD *)(a1 + 2568) = a1 + 296;
                                  *(_QWORD *)(a1 + 2576) = a1 + 304;
                                  *(_QWORD *)(a1 + 2584) = a1 + 312;
                                  *(_QWORD *)(a1 + 2592) = a1 + 320;
                                  *(_QWORD *)(a1 + 2600) = a1 + 328;
                                  *(_QWORD *)(a1 + 2608) = a1 + 336;
                                  *(_QWORD *)(a1 + 2616) = a1 + 344;
                                  goto LABEL_549;
                                }
LABEL_1700:
                                sub_19C07DA0C();
                              }
                            }
                            else
                            {
                              v441 = 0;
                              v442 = (_QWORD *)(8 * v437);
                              v443 = 0;
                              *(_QWORD *)(8 * v437) = v431;
                              v434 = 8 * v437 + 8;
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                                goto LABEL_433;
                            }
                            v197 = (char **)(a1 + 2648);
                            goto LABEL_443;
                          }
                        }
                        else
                        {
                          v416 = 0;
                          v417 = (_QWORD *)(8 * v412);
                          v418 = 0;
                          *(_QWORD *)(8 * v412) = v406;
                          v409 = 8 * v412 + 8;
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                            goto LABEL_410;
                        }
                        v197 = (char **)(a1 + 2648);
                        goto LABEL_420;
                      }
                    }
                    else
                    {
                      v391 = 0;
                      v392 = (_QWORD *)(8 * v387);
                      v393 = 0;
                      *(_QWORD *)(8 * v387) = v381;
                      v384 = 8 * v387 + 8;
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                        goto LABEL_387;
                    }
                    v197 = (char **)(a1 + 2648);
                    goto LABEL_397;
                  }
                }
                else
                {
                  v366 = 0;
                  v367 = (_QWORD *)(8 * v362);
                  v368 = 0;
                  *(_QWORD *)(8 * v362) = v356;
                  v359 = 8 * v362 + 8;
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                    goto LABEL_364;
                }
                v197 = (char **)(a1 + 2648);
                goto LABEL_374;
              }
            }
            else
            {
              v341 = 0;
              v342 = (_QWORD *)(8 * v337);
              v343 = 0;
              *(_QWORD *)(8 * v337) = v331;
              v334 = 8 * v337 + 8;
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
                goto LABEL_341;
            }
            v197 = (char **)(a1 + 2648);
            goto LABEL_351;
          }
        }
        else
        {
          v316 = 0;
          v317 = (_QWORD *)(8 * v312);
          v318 = 0;
          *(_QWORD *)(8 * v312) = v306;
          v309 = 8 * v312 + 8;
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
            goto LABEL_318;
        }
        v197 = (char **)(a1 + 2648);
        goto LABEL_328;
      }
    }
    else
    {
      v213 = 0;
      v214 = (_QWORD *)(8 * v209);
      v215 = 0;
      *(_QWORD *)(8 * v209) = v196;
      v200 = 8 * v209 + 8;
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
        goto LABEL_217;
    }
    v197 = (char **)(a1 + 2648);
    goto LABEL_305;
  }
LABEL_549:
  v559 = *(unsigned int *)(a1 + 52);
  v560 = (void *)operator new[]();
  v561 = v560;
  if ((int)v559 >= 1)
    bzero(v560, 4 * v559);
  *(_QWORD *)(a1 + 760) = v561;
  v562 = *(char **)(a1 + 2632);
  v563 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v562 < v563)
  {
    *(_QWORD *)v562 = v561;
    v564 = (uint64_t)(v562 + 8);
    goto LABEL_573;
  }
  v565 = *v5;
  v566 = v562 - *v5;
  v567 = v566 >> 3;
  v568 = (v566 >> 3) + 1;
  if (v568 >> 61)
    goto LABEL_1698;
  v569 = v563 - (_QWORD)v565;
  if (v569 >> 2 > v568)
    v568 = v569 >> 2;
  if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
    v570 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v570 = v568;
  if (v570)
  {
    if (v570 >> 61)
      goto LABEL_1699;
    v571 = operator new(8 * v570);
    v572 = &v571[8 * v567];
    v573 = &v571[8 * v570];
    *v572 = v561;
    v564 = (uint64_t)(v572 + 1);
    v574 = (char *)(v562 - v565);
    if (v562 == v565)
      goto LABEL_571;
    goto LABEL_564;
  }
  v571 = 0;
  v572 = (_QWORD *)(8 * v567);
  v573 = 0;
  *(_QWORD *)(8 * v567) = v561;
  v564 = 8 * v567 + 8;
  v574 = (char *)(v562 - v565);
  if (v562 != v565)
  {
LABEL_564:
    v575 = (unint64_t)(v574 - 8);
    if (v575 < 0x58)
      goto LABEL_1718;
    if ((unint64_t)(v562 - v571 - v566) < 0x20)
      goto LABEL_1718;
    v576 = (v575 >> 3) + 1;
    v577 = 8 * (v576 & 0x3FFFFFFFFFFFFFFCLL);
    v578 = &v562[-v577];
    v572 = (_QWORD *)((char *)v572 - v577);
    v579 = &v571[8 * v567 - 16];
    v580 = v562 - 16;
    v581 = v576 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v582 = *(_OWORD *)v580;
      *(v579 - 1) = *((_OWORD *)v580 - 1);
      *v579 = v582;
      v579 -= 2;
      v580 -= 32;
      v581 -= 4;
    }
    while (v581);
    v562 = v578;
    if (v576 != (v576 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1718:
      do
      {
        v583 = *((_QWORD *)v562 - 1);
        v562 -= 8;
        *--v572 = v583;
      }
      while (v562 != v565);
    }
    v562 = *v5;
  }
LABEL_571:
  *(_QWORD *)(a1 + 2624) = v572;
  *(_QWORD *)(a1 + 2632) = v564;
  *(_QWORD *)(a1 + 2640) = v573;
  if (v562)
    operator delete(v562);
LABEL_573:
  *(_QWORD *)(a1 + 2632) = v564;
  v584 = *(unsigned int *)(a1 + 52);
  v585 = (void *)operator new[]();
  v586 = v585;
  if ((int)v584 >= 1)
    bzero(v585, 4 * v584);
  *(_QWORD *)(a1 + 768) = v586;
  v587 = *(char **)(a1 + 2632);
  v588 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v587 < v588)
  {
    *(_QWORD *)v587 = v586;
    v589 = (uint64_t)(v587 + 8);
    goto LABEL_597;
  }
  v590 = *v5;
  v591 = v587 - *v5;
  v592 = v591 >> 3;
  v593 = (v591 >> 3) + 1;
  if (v593 >> 61)
    goto LABEL_1698;
  v594 = v588 - (_QWORD)v590;
  if (v594 >> 2 > v593)
    v593 = v594 >> 2;
  if ((unint64_t)v594 >= 0x7FFFFFFFFFFFFFF8)
    v595 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v595 = v593;
  if (v595)
  {
    if (v595 >> 61)
      goto LABEL_1699;
    v596 = operator new(8 * v595);
    v597 = &v596[8 * v592];
    v598 = &v596[8 * v595];
    *v597 = v586;
    v589 = (uint64_t)(v597 + 1);
    v599 = (char *)(v587 - v590);
    if (v587 == v590)
      goto LABEL_595;
    goto LABEL_588;
  }
  v596 = 0;
  v597 = (_QWORD *)(8 * v592);
  v598 = 0;
  *(_QWORD *)(8 * v592) = v586;
  v589 = 8 * v592 + 8;
  v599 = (char *)(v587 - v590);
  if (v587 != v590)
  {
LABEL_588:
    v600 = (unint64_t)(v599 - 8);
    if (v600 < 0x58)
      goto LABEL_1719;
    if ((unint64_t)(v587 - v596 - v591) < 0x20)
      goto LABEL_1719;
    v601 = (v600 >> 3) + 1;
    v602 = 8 * (v601 & 0x3FFFFFFFFFFFFFFCLL);
    v603 = &v587[-v602];
    v597 = (_QWORD *)((char *)v597 - v602);
    v604 = &v596[8 * v592 - 16];
    v605 = v587 - 16;
    v606 = v601 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v607 = *(_OWORD *)v605;
      *(v604 - 1) = *((_OWORD *)v605 - 1);
      *v604 = v607;
      v604 -= 2;
      v605 -= 32;
      v606 -= 4;
    }
    while (v606);
    v587 = v603;
    if (v601 != (v601 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1719:
      do
      {
        v608 = *((_QWORD *)v587 - 1);
        v587 -= 8;
        *--v597 = v608;
      }
      while (v587 != v590);
    }
    v587 = *v5;
  }
LABEL_595:
  *(_QWORD *)(a1 + 2624) = v597;
  *(_QWORD *)(a1 + 2632) = v589;
  *(_QWORD *)(a1 + 2640) = v598;
  if (v587)
    operator delete(v587);
LABEL_597:
  *(_QWORD *)(a1 + 2632) = v589;
  v609 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v610 = (void *)operator new[]();
  bzero(v610, 4 * v609);
  *(_QWORD *)(a1 + 752) = v610;
  v611 = *(char **)(a1 + 2632);
  v612 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v611 < v612)
  {
    *(_QWORD *)v611 = v610;
    v613 = (uint64_t)(v611 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_616;
  }
  v615 = *v5;
  v616 = v611 - *v5;
  v617 = v616 >> 3;
  v618 = (v616 >> 3) + 1;
  if (v618 >> 61)
    goto LABEL_1698;
  v619 = v612 - (_QWORD)v615;
  if (v619 >> 2 > v618)
    v618 = v619 >> 2;
  if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFF8)
    v620 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v620 = v618;
  if (v620)
  {
    if (v620 >> 61)
      goto LABEL_1699;
    v621 = operator new(8 * v620);
    v622 = &v621[8 * v617];
    v623 = &v621[8 * v620];
    *v622 = v610;
    v613 = (uint64_t)(v622 + 1);
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
    {
LABEL_608:
      v625 = (unint64_t)(v624 - 8);
      p_vtable = MLPNDArrayLossLabels.vtable;
      if (v625 < 0x58)
        goto LABEL_1720;
      if ((unint64_t)(v611 - v621 - v616) < 0x20)
        goto LABEL_1720;
      v626 = (v625 >> 3) + 1;
      v627 = 8 * (v626 & 0x3FFFFFFFFFFFFFFCLL);
      v628 = &v611[-v627];
      v622 = (_QWORD *)((char *)v622 - v627);
      v629 = &v621[8 * v617 - 16];
      v630 = v611 - 16;
      v631 = v626 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v632 = *(_OWORD *)v630;
        *(v629 - 1) = *((_OWORD *)v630 - 1);
        *v629 = v632;
        v629 -= 2;
        v630 -= 32;
        v631 -= 4;
      }
      while (v631);
      v611 = v628;
      if (v626 != (v626 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1720:
        do
        {
          v633 = *((_QWORD *)v611 - 1);
          v611 -= 8;
          *--v622 = v633;
        }
        while (v611 != v615);
      }
      v611 = *v5;
      *(_QWORD *)(a1 + 2624) = v622;
      *(_QWORD *)(a1 + 2632) = v613;
      *(_QWORD *)(a1 + 2640) = v623;
      if (v611)
        goto LABEL_615;
      goto LABEL_616;
    }
  }
  else
  {
    v621 = 0;
    v622 = (_QWORD *)(8 * v617);
    v623 = 0;
    *(_QWORD *)(8 * v617) = v610;
    v613 = 8 * v617 + 8;
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
      goto LABEL_608;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v622;
  *(_QWORD *)(a1 + 2632) = v613;
  *(_QWORD *)(a1 + 2640) = v623;
  if (v611)
LABEL_615:
    operator delete(v611);
LABEL_616:
  *(_QWORD *)(a1 + 2632) = v613;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  if (*(_DWORD *)(a1 + 56))
  {
    v634 = *(unsigned __int8 *)(a1 + 40) + 1;
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 984), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1104), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1224), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1344), v1637);
    sub_19C101AC4(v1637);
    goto LABEL_711;
  }
  v635 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v636 = (void *)operator new[]();
  bzero(v636, 4 * v635);
  *(_QWORD *)(a1 + 1464) = v636;
  v637 = *(char **)(a1 + 2632);
  v638 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v637 < v638)
  {
    *(_QWORD *)v637 = v636;
    v639 = (uint64_t)(v637 + 8);
    goto LABEL_644;
  }
  v640 = *v5;
  v641 = v637 - *v5;
  v642 = v641 >> 3;
  v643 = (v641 >> 3) + 1;
  if (v643 >> 61)
    goto LABEL_1698;
  v644 = v638 - (_QWORD)v640;
  if (v644 >> 2 > v643)
    v643 = v644 >> 2;
  if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
    v645 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v645 = v643;
  if (v645)
  {
    if (v645 >> 61)
      goto LABEL_1699;
    v646 = operator new(8 * v645);
    v647 = &v646[8 * v642];
    v648 = &v646[8 * v645];
    *v647 = v636;
    v639 = (uint64_t)(v647 + 1);
    v649 = (char *)(v637 - v640);
    if (v637 == v640)
      goto LABEL_642;
    goto LABEL_635;
  }
  v646 = 0;
  v647 = (_QWORD *)(8 * v642);
  v648 = 0;
  *(_QWORD *)(8 * v642) = v636;
  v639 = 8 * v642 + 8;
  v649 = (char *)(v637 - v640);
  if (v637 != v640)
  {
LABEL_635:
    v650 = (unint64_t)(v649 - 8);
    if (v650 < 0x58)
      goto LABEL_1721;
    if ((unint64_t)(v637 - v646 - v641) < 0x20)
      goto LABEL_1721;
    v651 = (v650 >> 3) + 1;
    v652 = 8 * (v651 & 0x3FFFFFFFFFFFFFFCLL);
    v653 = &v637[-v652];
    v647 = (_QWORD *)((char *)v647 - v652);
    v654 = &v646[8 * v642 - 16];
    v655 = v637 - 16;
    v656 = v651 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v657 = *(_OWORD *)v655;
      *(v654 - 1) = *((_OWORD *)v655 - 1);
      *v654 = v657;
      v654 -= 2;
      v655 -= 32;
      v656 -= 4;
    }
    while (v656);
    v637 = v653;
    if (v651 != (v651 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1721:
      do
      {
        v658 = *((_QWORD *)v637 - 1);
        v637 -= 8;
        *--v647 = v658;
      }
      while (v637 != v640);
    }
    v637 = *v5;
  }
LABEL_642:
  *(_QWORD *)(a1 + 2624) = v647;
  *(_QWORD *)(a1 + 2632) = v639;
  *(_QWORD *)(a1 + 2640) = v648;
  if (v637)
    operator delete(v637);
LABEL_644:
  *(_QWORD *)(a1 + 2632) = v639;
  v659 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v660 = (void *)operator new[]();
  bzero(v660, 4 * v659);
  *(_QWORD *)(a1 + 1472) = v660;
  v661 = *(char **)(a1 + 2632);
  v662 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v661 < v662)
  {
    *(_QWORD *)v661 = v660;
    v663 = (uint64_t)(v661 + 8);
    goto LABEL_666;
  }
  v664 = *v5;
  v665 = v661 - *v5;
  v666 = v665 >> 3;
  v667 = (v665 >> 3) + 1;
  if (v667 >> 61)
    goto LABEL_1698;
  v668 = v662 - (_QWORD)v664;
  if (v668 >> 2 > v667)
    v667 = v668 >> 2;
  if ((unint64_t)v668 >= 0x7FFFFFFFFFFFFFF8)
    v669 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v669 = v667;
  if (v669)
  {
    if (v669 >> 61)
      goto LABEL_1699;
    v670 = operator new(8 * v669);
    v671 = &v670[8 * v666];
    v672 = &v670[8 * v669];
    *v671 = v660;
    v663 = (uint64_t)(v671 + 1);
    v673 = (char *)(v661 - v664);
    if (v661 == v664)
      goto LABEL_664;
    goto LABEL_657;
  }
  v670 = 0;
  v671 = (_QWORD *)(8 * v666);
  v672 = 0;
  *(_QWORD *)(8 * v666) = v660;
  v663 = 8 * v666 + 8;
  v673 = (char *)(v661 - v664);
  if (v661 != v664)
  {
LABEL_657:
    v674 = (unint64_t)(v673 - 8);
    if (v674 < 0x58)
      goto LABEL_1722;
    if ((unint64_t)(v661 - v670 - v665) < 0x20)
      goto LABEL_1722;
    v675 = (v674 >> 3) + 1;
    v676 = 8 * (v675 & 0x3FFFFFFFFFFFFFFCLL);
    v677 = &v661[-v676];
    v671 = (_QWORD *)((char *)v671 - v676);
    v678 = &v670[8 * v666 - 16];
    v679 = v661 - 16;
    v680 = v675 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v681 = *(_OWORD *)v679;
      *(v678 - 1) = *((_OWORD *)v679 - 1);
      *v678 = v681;
      v678 -= 2;
      v679 -= 32;
      v680 -= 4;
    }
    while (v680);
    v661 = v677;
    if (v675 != (v675 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1722:
      do
      {
        v682 = *((_QWORD *)v661 - 1);
        v661 -= 8;
        *--v671 = v682;
      }
      while (v661 != v664);
    }
    v661 = *v5;
  }
LABEL_664:
  *(_QWORD *)(a1 + 2624) = v671;
  *(_QWORD *)(a1 + 2632) = v663;
  *(_QWORD *)(a1 + 2640) = v672;
  if (v661)
    operator delete(v661);
LABEL_666:
  *(_QWORD *)(a1 + 2632) = v663;
  v683 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v684 = (void *)operator new[]();
  bzero(v684, 4 * v683);
  *(_QWORD *)(a1 + 1480) = v684;
  v685 = *(char **)(a1 + 2632);
  v686 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v685 < v686)
  {
    *(_QWORD *)v685 = v684;
    v687 = (uint64_t)(v685 + 8);
    goto LABEL_688;
  }
  v688 = *v5;
  v689 = v685 - *v5;
  v690 = v689 >> 3;
  v691 = (v689 >> 3) + 1;
  if (v691 >> 61)
    goto LABEL_1698;
  v692 = v686 - (_QWORD)v688;
  if (v692 >> 2 > v691)
    v691 = v692 >> 2;
  if ((unint64_t)v692 >= 0x7FFFFFFFFFFFFFF8)
    v693 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v693 = v691;
  if (v693)
  {
    if (v693 >> 61)
      goto LABEL_1699;
    v694 = operator new(8 * v693);
    v695 = &v694[8 * v690];
    v696 = &v694[8 * v693];
    *v695 = v684;
    v687 = (uint64_t)(v695 + 1);
    v697 = (char *)(v685 - v688);
    if (v685 == v688)
      goto LABEL_686;
    goto LABEL_679;
  }
  v694 = 0;
  v695 = (_QWORD *)(8 * v690);
  v696 = 0;
  *(_QWORD *)(8 * v690) = v684;
  v687 = 8 * v690 + 8;
  v697 = (char *)(v685 - v688);
  if (v685 != v688)
  {
LABEL_679:
    v698 = (unint64_t)(v697 - 8);
    if (v698 < 0x58)
      goto LABEL_1723;
    if ((unint64_t)(v685 - v694 - v689) < 0x20)
      goto LABEL_1723;
    v699 = (v698 >> 3) + 1;
    v700 = 8 * (v699 & 0x3FFFFFFFFFFFFFFCLL);
    v701 = &v685[-v700];
    v695 = (_QWORD *)((char *)v695 - v700);
    v702 = &v694[8 * v690 - 16];
    v703 = v685 - 16;
    v704 = v699 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v705 = *(_OWORD *)v703;
      *(v702 - 1) = *((_OWORD *)v703 - 1);
      *v702 = v705;
      v702 -= 2;
      v703 -= 32;
      v704 -= 4;
    }
    while (v704);
    v685 = v701;
    if (v699 != (v699 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1723:
      do
      {
        v706 = *((_QWORD *)v685 - 1);
        v685 -= 8;
        *--v695 = v706;
      }
      while (v685 != v688);
    }
    v685 = *v5;
  }
LABEL_686:
  *(_QWORD *)(a1 + 2624) = v695;
  *(_QWORD *)(a1 + 2632) = v687;
  *(_QWORD *)(a1 + 2640) = v696;
  if (v685)
    operator delete(v685);
LABEL_688:
  *(_QWORD *)(a1 + 2632) = v687;
  v707 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v708 = (void *)operator new[]();
  bzero(v708, 4 * v707);
  *(_QWORD *)(a1 + 1488) = v708;
  v709 = *(char **)(a1 + 2632);
  v710 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v709 < v710)
  {
    *(_QWORD *)v709 = v708;
    *(_QWORD *)(a1 + 2632) = v709 + 8;
    goto LABEL_711;
  }
  v711 = *v5;
  v712 = v709 - *v5;
  v713 = v712 >> 3;
  v714 = (v712 >> 3) + 1;
  if (v714 >> 61)
    goto LABEL_1698;
  v715 = v710 - (_QWORD)v711;
  if (v715 >> 2 > v714)
    v714 = v715 >> 2;
  if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFF8)
    v716 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v716 = v714;
  if (v716)
  {
    if (v716 >> 61)
      goto LABEL_1699;
    v717 = operator new(8 * v716);
    v718 = &v717[8 * v713];
    v719 = &v717[8 * v716];
    *v718 = v708;
    v720 = (uint64_t)(v718 + 1);
    v721 = (char *)(v709 - v711);
    if (v709 == v711)
      goto LABEL_708;
    goto LABEL_701;
  }
  v717 = 0;
  v718 = (_QWORD *)(8 * v713);
  v719 = 0;
  *(_QWORD *)(8 * v713) = v708;
  v720 = 8 * v713 + 8;
  v721 = (char *)(v709 - v711);
  if (v709 != v711)
  {
LABEL_701:
    v722 = (unint64_t)(v721 - 8);
    if (v722 < 0x58)
      goto LABEL_1724;
    if ((unint64_t)(v709 - v717 - v712) < 0x20)
      goto LABEL_1724;
    v723 = (v722 >> 3) + 1;
    v724 = 8 * (v723 & 0x3FFFFFFFFFFFFFFCLL);
    v725 = &v709[-v724];
    v718 = (_QWORD *)((char *)v718 - v724);
    v726 = &v717[8 * v713 - 16];
    v727 = v709 - 16;
    v728 = v723 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v729 = *(_OWORD *)v727;
      *(v726 - 1) = *((_OWORD *)v727 - 1);
      *v726 = v729;
      v726 -= 2;
      v727 -= 32;
      v728 -= 4;
    }
    while (v728);
    v709 = v725;
    if (v723 != (v723 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1724:
      do
      {
        v730 = *((_QWORD *)v709 - 1);
        v709 -= 8;
        *--v718 = v730;
      }
      while (v709 != v711);
    }
    v709 = *v5;
  }
LABEL_708:
  *(_QWORD *)(a1 + 2624) = v718;
  *(_QWORD *)(a1 + 2632) = v720;
  *(_QWORD *)(a1 + 2640) = v719;
  if (v709)
    operator delete(v709);
  *(_QWORD *)(a1 + 2632) = v720;
LABEL_711:
  v731 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v732 = (void *)operator new[]();
  bzero(v732, 4 * v731);
  *(_QWORD *)(a1 + 1496) = v732;
  v733 = *(char **)(a1 + 2632);
  v734 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v733 < v734)
  {
    *(_QWORD *)v733 = v732;
    v735 = (uint64_t)(v733 + 8);
    goto LABEL_733;
  }
  v736 = *v5;
  v737 = v733 - *v5;
  v738 = v737 >> 3;
  v739 = (v737 >> 3) + 1;
  if (v739 >> 61)
    goto LABEL_1698;
  v740 = v734 - (_QWORD)v736;
  if (v740 >> 2 > v739)
    v739 = v740 >> 2;
  if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8)
    v741 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v741 = v739;
  if (v741)
  {
    if (v741 >> 61)
      goto LABEL_1699;
    v742 = operator new(8 * v741);
    v743 = &v742[8 * v738];
    v744 = &v742[8 * v741];
    *v743 = v732;
    v735 = (uint64_t)(v743 + 1);
    v745 = (char *)(v733 - v736);
    if (v733 == v736)
      goto LABEL_731;
    goto LABEL_724;
  }
  v742 = 0;
  v743 = (_QWORD *)(8 * v738);
  v744 = 0;
  *(_QWORD *)(8 * v738) = v732;
  v735 = 8 * v738 + 8;
  v745 = (char *)(v733 - v736);
  if (v733 != v736)
  {
LABEL_724:
    v746 = (unint64_t)(v745 - 8);
    if (v746 < 0x58)
      goto LABEL_1725;
    if ((unint64_t)(v733 - v742 - v737) < 0x20)
      goto LABEL_1725;
    v747 = (v746 >> 3) + 1;
    v748 = 8 * (v747 & 0x3FFFFFFFFFFFFFFCLL);
    v749 = &v733[-v748];
    v743 = (_QWORD *)((char *)v743 - v748);
    v750 = &v742[8 * v738 - 16];
    v751 = v733 - 16;
    v752 = v747 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v753 = *(_OWORD *)v751;
      *(v750 - 1) = *((_OWORD *)v751 - 1);
      *v750 = v753;
      v750 -= 2;
      v751 -= 32;
      v752 -= 4;
    }
    while (v752);
    v733 = v749;
    if (v747 != (v747 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1725:
      do
      {
        v754 = *((_QWORD *)v733 - 1);
        v733 -= 8;
        *--v743 = v754;
      }
      while (v733 != v736);
    }
    v733 = *v5;
  }
LABEL_731:
  *(_QWORD *)(a1 + 2624) = v743;
  *(_QWORD *)(a1 + 2632) = v735;
  *(_QWORD *)(a1 + 2640) = v744;
  if (v733)
    operator delete(v733);
LABEL_733:
  *(_QWORD *)(a1 + 2632) = v735;
  v755 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v756 = (void *)operator new[]();
  bzero(v756, 4 * v755);
  *(_QWORD *)(a1 + 1504) = v756;
  v757 = *(char **)(a1 + 2632);
  v758 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v757 < v758)
  {
    *(_QWORD *)v757 = v756;
    v759 = (uint64_t)(v757 + 8);
    goto LABEL_755;
  }
  v760 = *v5;
  v761 = v757 - *v5;
  v762 = v761 >> 3;
  v763 = (v761 >> 3) + 1;
  if (v763 >> 61)
    goto LABEL_1698;
  v764 = v758 - (_QWORD)v760;
  if (v764 >> 2 > v763)
    v763 = v764 >> 2;
  if ((unint64_t)v764 >= 0x7FFFFFFFFFFFFFF8)
    v765 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v765 = v763;
  if (v765)
  {
    if (v765 >> 61)
      goto LABEL_1699;
    v766 = operator new(8 * v765);
    v767 = &v766[8 * v762];
    v768 = &v766[8 * v765];
    *v767 = v756;
    v759 = (uint64_t)(v767 + 1);
    v769 = (char *)(v757 - v760);
    if (v757 == v760)
      goto LABEL_753;
    goto LABEL_746;
  }
  v766 = 0;
  v767 = (_QWORD *)(8 * v762);
  v768 = 0;
  *(_QWORD *)(8 * v762) = v756;
  v759 = 8 * v762 + 8;
  v769 = (char *)(v757 - v760);
  if (v757 != v760)
  {
LABEL_746:
    v770 = (unint64_t)(v769 - 8);
    if (v770 < 0x58)
      goto LABEL_1726;
    if ((unint64_t)(v757 - v766 - v761) < 0x20)
      goto LABEL_1726;
    v771 = (v770 >> 3) + 1;
    v772 = 8 * (v771 & 0x3FFFFFFFFFFFFFFCLL);
    v773 = &v757[-v772];
    v767 = (_QWORD *)((char *)v767 - v772);
    v774 = &v766[8 * v762 - 16];
    v775 = v757 - 16;
    v776 = v771 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v777 = *(_OWORD *)v775;
      *(v774 - 1) = *((_OWORD *)v775 - 1);
      *v774 = v777;
      v774 -= 2;
      v775 -= 32;
      v776 -= 4;
    }
    while (v776);
    v757 = v773;
    if (v771 != (v771 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1726:
      do
      {
        v778 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v767 = v778;
      }
      while (v757 != v760);
    }
    v757 = *v5;
  }
LABEL_753:
  *(_QWORD *)(a1 + 2624) = v767;
  *(_QWORD *)(a1 + 2632) = v759;
  *(_QWORD *)(a1 + 2640) = v768;
  if (v757)
    operator delete(v757);
LABEL_755:
  *(_QWORD *)(a1 + 2632) = v759;
  v779 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v780 = (void *)operator new[]();
  bzero(v780, 4 * v779);
  *(_QWORD *)(a1 + 1512) = v780;
  v781 = *(char **)(a1 + 2632);
  v782 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v781 < v782)
  {
    *(_QWORD *)v781 = v780;
    v783 = (uint64_t)(v781 + 8);
    goto LABEL_777;
  }
  v784 = *v5;
  v785 = v781 - *v5;
  v786 = v785 >> 3;
  v787 = (v785 >> 3) + 1;
  if (v787 >> 61)
    goto LABEL_1698;
  v788 = v782 - (_QWORD)v784;
  if (v788 >> 2 > v787)
    v787 = v788 >> 2;
  if ((unint64_t)v788 >= 0x7FFFFFFFFFFFFFF8)
    v789 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v789 = v787;
  if (v789)
  {
    if (v789 >> 61)
      goto LABEL_1699;
    v790 = operator new(8 * v789);
    v791 = &v790[8 * v786];
    v792 = &v790[8 * v789];
    *v791 = v780;
    v783 = (uint64_t)(v791 + 1);
    v793 = (char *)(v781 - v784);
    if (v781 == v784)
      goto LABEL_775;
    goto LABEL_768;
  }
  v790 = 0;
  v791 = (_QWORD *)(8 * v786);
  v792 = 0;
  *(_QWORD *)(8 * v786) = v780;
  v783 = 8 * v786 + 8;
  v793 = (char *)(v781 - v784);
  if (v781 != v784)
  {
LABEL_768:
    v794 = (unint64_t)(v793 - 8);
    if (v794 < 0x58)
      goto LABEL_1727;
    if ((unint64_t)(v781 - v790 - v785) < 0x20)
      goto LABEL_1727;
    v795 = (v794 >> 3) + 1;
    v796 = 8 * (v795 & 0x3FFFFFFFFFFFFFFCLL);
    v797 = &v781[-v796];
    v791 = (_QWORD *)((char *)v791 - v796);
    v798 = &v790[8 * v786 - 16];
    v799 = v781 - 16;
    v800 = v795 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v801 = *(_OWORD *)v799;
      *(v798 - 1) = *((_OWORD *)v799 - 1);
      *v798 = v801;
      v798 -= 2;
      v799 -= 32;
      v800 -= 4;
    }
    while (v800);
    v781 = v797;
    if (v795 != (v795 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1727:
      do
      {
        v802 = *((_QWORD *)v781 - 1);
        v781 -= 8;
        *--v791 = v802;
      }
      while (v781 != v784);
    }
    v781 = *v5;
  }
LABEL_775:
  *(_QWORD *)(a1 + 2624) = v791;
  *(_QWORD *)(a1 + 2632) = v783;
  *(_QWORD *)(a1 + 2640) = v792;
  if (v781)
    operator delete(v781);
LABEL_777:
  *(_QWORD *)(a1 + 2632) = v783;
  v803 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v804 = (void *)operator new[]();
  bzero(v804, 4 * v803);
  *(_QWORD *)(a1 + 1520) = v804;
  v805 = *(char **)(a1 + 2632);
  v806 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v805 < v806)
  {
    *(_QWORD *)v805 = v804;
    v807 = (uint64_t)(v805 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_796;
  }
  v808 = *v5;
  v809 = v805 - *v5;
  v810 = v809 >> 3;
  v811 = (v809 >> 3) + 1;
  if (v811 >> 61)
    goto LABEL_1698;
  v812 = v806 - (_QWORD)v808;
  if (v812 >> 2 > v811)
    v811 = v812 >> 2;
  if ((unint64_t)v812 >= 0x7FFFFFFFFFFFFFF8)
    v813 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v813 = v811;
  if (v813)
  {
    if (v813 >> 61)
      goto LABEL_1699;
    v814 = operator new(8 * v813);
    v815 = &v814[8 * v810];
    v816 = &v814[8 * v813];
    *v815 = v804;
    v807 = (uint64_t)(v815 + 1);
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
    {
LABEL_788:
      v818 = (unint64_t)(v817 - 8);
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      if (v818 < 0x58)
        goto LABEL_1728;
      if ((unint64_t)(v805 - v814 - v809) < 0x20)
        goto LABEL_1728;
      v819 = (v818 >> 3) + 1;
      v820 = 8 * (v819 & 0x3FFFFFFFFFFFFFFCLL);
      v821 = &v805[-v820];
      v815 = (_QWORD *)((char *)v815 - v820);
      v822 = &v814[8 * v810 - 16];
      v823 = v805 - 16;
      v824 = v819 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v825 = *(_OWORD *)v823;
        *(v822 - 1) = *((_OWORD *)v823 - 1);
        *v822 = v825;
        v822 -= 2;
        v823 -= 32;
        v824 -= 4;
      }
      while (v824);
      v805 = v821;
      if (v819 != (v819 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1728:
        do
        {
          v826 = *((_QWORD *)v805 - 1);
          v805 -= 8;
          *--v815 = v826;
        }
        while (v805 != v808);
      }
      v805 = *v5;
      *(_QWORD *)(a1 + 2624) = v815;
      *(_QWORD *)(a1 + 2632) = v807;
      *(_QWORD *)(a1 + 2640) = v816;
      if (v805)
        goto LABEL_795;
      goto LABEL_796;
    }
  }
  else
  {
    v814 = 0;
    v815 = (_QWORD *)(8 * v810);
    v816 = 0;
    *(_QWORD *)(8 * v810) = v804;
    v807 = 8 * v810 + 8;
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
      goto LABEL_788;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v815;
  *(_QWORD *)(a1 + 2632) = v807;
  *(_QWORD *)(a1 + 2640) = v816;
  if (v805)
LABEL_795:
    operator delete(v805);
LABEL_796:
  *(_QWORD *)(a1 + 2632) = v807;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  v827 = *(unsigned int *)(a1 + 52);
  v828 = (void *)operator new[]();
  v829 = v828;
  if ((int)v827 >= 1)
    bzero(v828, 4 * v827);
  *(_QWORD *)(a1 + 1528) = v829;
  v830 = *(char **)(a1 + 2632);
  v831 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v830 < v831)
  {
    *(_QWORD *)v830 = v829;
    v832 = (uint64_t)(v830 + 8);
    goto LABEL_824;
  }
  v833 = *v5;
  v834 = v830 - *v5;
  v835 = v834 >> 3;
  v836 = (v834 >> 3) + 1;
  if (v836 >> 61)
    goto LABEL_1698;
  v837 = v831 - (_QWORD)v833;
  if (v837 >> 2 > v836)
    v836 = v837 >> 2;
  if ((unint64_t)v837 >= 0x7FFFFFFFFFFFFFF8)
    v838 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v838 = v836;
  if (v838)
  {
    if (v838 >> 61)
      goto LABEL_1699;
    v839 = operator new(8 * v838);
    v840 = &v839[8 * v835];
    v841 = &v839[8 * v838];
    *v840 = v829;
    v832 = (uint64_t)(v840 + 1);
    v842 = (char *)(v830 - v833);
    if (v830 == v833)
      goto LABEL_822;
    goto LABEL_815;
  }
  v839 = 0;
  v840 = (_QWORD *)(8 * v835);
  v841 = 0;
  *(_QWORD *)(8 * v835) = v829;
  v832 = 8 * v835 + 8;
  v842 = (char *)(v830 - v833);
  if (v830 != v833)
  {
LABEL_815:
    v843 = (unint64_t)(v842 - 8);
    if (v843 < 0x58)
      goto LABEL_1729;
    if ((unint64_t)(v830 - v839 - v834) < 0x20)
      goto LABEL_1729;
    v844 = (v843 >> 3) + 1;
    v845 = 8 * (v844 & 0x3FFFFFFFFFFFFFFCLL);
    v846 = &v830[-v845];
    v840 = (_QWORD *)((char *)v840 - v845);
    v847 = &v839[8 * v835 - 16];
    v848 = v830 - 16;
    v849 = v844 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v850 = *(_OWORD *)v848;
      *(v847 - 1) = *((_OWORD *)v848 - 1);
      *v847 = v850;
      v847 -= 2;
      v848 -= 32;
      v849 -= 4;
    }
    while (v849);
    v830 = v846;
    if (v844 != (v844 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1729:
      do
      {
        v851 = *((_QWORD *)v830 - 1);
        v830 -= 8;
        *--v840 = v851;
      }
      while (v830 != v833);
    }
    v830 = *v5;
  }
LABEL_822:
  *(_QWORD *)(a1 + 2624) = v840;
  *(_QWORD *)(a1 + 2632) = v832;
  *(_QWORD *)(a1 + 2640) = v841;
  if (v830)
    operator delete(v830);
LABEL_824:
  *(_QWORD *)(a1 + 2632) = v832;
  v852 = *(unsigned int *)(a1 + 52);
  v853 = (void *)operator new[]();
  v854 = v853;
  if ((int)v852 >= 1)
    bzero(v853, 4 * v852);
  *(_QWORD *)(a1 + 1536) = v854;
  v855 = *(char **)(a1 + 2632);
  v856 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v855 < v856)
  {
    *(_QWORD *)v855 = v854;
    v857 = (uint64_t)(v855 + 8);
    goto LABEL_848;
  }
  v858 = *v5;
  v859 = v855 - *v5;
  v860 = v859 >> 3;
  v861 = (v859 >> 3) + 1;
  if (v861 >> 61)
    goto LABEL_1698;
  v862 = v856 - (_QWORD)v858;
  if (v862 >> 2 > v861)
    v861 = v862 >> 2;
  if ((unint64_t)v862 >= 0x7FFFFFFFFFFFFFF8)
    v863 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v863 = v861;
  if (v863)
  {
    if (v863 >> 61)
      goto LABEL_1699;
    v864 = operator new(8 * v863);
    v865 = &v864[8 * v860];
    v866 = &v864[8 * v863];
    *v865 = v854;
    v857 = (uint64_t)(v865 + 1);
    v867 = (char *)(v855 - v858);
    if (v855 == v858)
      goto LABEL_846;
    goto LABEL_839;
  }
  v864 = 0;
  v865 = (_QWORD *)(8 * v860);
  v866 = 0;
  *(_QWORD *)(8 * v860) = v854;
  v857 = 8 * v860 + 8;
  v867 = (char *)(v855 - v858);
  if (v855 != v858)
  {
LABEL_839:
    v868 = (unint64_t)(v867 - 8);
    if (v868 < 0x58)
      goto LABEL_1730;
    if ((unint64_t)(v855 - v864 - v859) < 0x20)
      goto LABEL_1730;
    v869 = (v868 >> 3) + 1;
    v870 = 8 * (v869 & 0x3FFFFFFFFFFFFFFCLL);
    v871 = &v855[-v870];
    v865 = (_QWORD *)((char *)v865 - v870);
    v872 = &v864[8 * v860 - 16];
    v873 = v855 - 16;
    v874 = v869 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v875 = *(_OWORD *)v873;
      *(v872 - 1) = *((_OWORD *)v873 - 1);
      *v872 = v875;
      v872 -= 2;
      v873 -= 32;
      v874 -= 4;
    }
    while (v874);
    v855 = v871;
    if (v869 != (v869 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1730:
      do
      {
        v876 = *((_QWORD *)v855 - 1);
        v855 -= 8;
        *--v865 = v876;
      }
      while (v855 != v858);
    }
    v855 = *v5;
  }
LABEL_846:
  *(_QWORD *)(a1 + 2624) = v865;
  *(_QWORD *)(a1 + 2632) = v857;
  *(_QWORD *)(a1 + 2640) = v866;
  if (v855)
    operator delete(v855);
LABEL_848:
  *(_QWORD *)(a1 + 2632) = v857;
  v877 = *(unsigned int *)(a1 + 52);
  v878 = (void *)operator new[]();
  v879 = v878;
  if ((int)v877 >= 1)
    bzero(v878, 4 * v877);
  *(_QWORD *)(a1 + 1544) = v879;
  v880 = *(char **)(a1 + 2632);
  v881 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v880 >= v881)
  {
    v883 = *v5;
    v884 = v880 - *v5;
    v885 = v884 >> 3;
    v886 = (v884 >> 3) + 1;
    if (!(v886 >> 61))
    {
      v887 = v881 - (_QWORD)v883;
      if (v887 >> 2 > v886)
        v886 = v887 >> 2;
      if ((unint64_t)v887 >= 0x7FFFFFFFFFFFFFF8)
        v888 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v888 = v886;
      if (!v888)
      {
        v889 = 0;
        v890 = (_QWORD *)(8 * v885);
        v891 = 0;
        *(_QWORD *)(8 * v885) = v879;
        v882 = 8 * v885 + 8;
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
          goto LABEL_861;
        goto LABEL_1696;
      }
      if (!(v888 >> 61))
      {
        v889 = operator new(8 * v888);
        v890 = &v889[8 * v885];
        v891 = &v889[8 * v888];
        *v890 = v879;
        v882 = (uint64_t)(v890 + 1);
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
        {
LABEL_861:
          v893 = (unint64_t)(v892 - 8);
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v893 < 0x58)
            goto LABEL_1731;
          if ((unint64_t)(v880 - v889 - v884) < 0x20)
            goto LABEL_1731;
          v894 = (v893 >> 3) + 1;
          v895 = 8 * (v894 & 0x3FFFFFFFFFFFFFFCLL);
          v896 = &v880[-v895];
          v890 = (_QWORD *)((char *)v890 - v895);
          v897 = &v889[8 * v885 - 16];
          v898 = v880 - 16;
          v899 = v894 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v900 = *(_OWORD *)v898;
            *(v897 - 1) = *((_OWORD *)v898 - 1);
            *v897 = v900;
            v897 -= 2;
            v898 -= 32;
            v899 -= 4;
          }
          while (v899);
          v880 = v896;
          if (v894 != (v894 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1731:
            do
            {
              v901 = *((_QWORD *)v880 - 1);
              v880 -= 8;
              *--v890 = v901;
            }
            while (v880 != v883);
          }
          v880 = *v5;
          *(_QWORD *)(a1 + 2624) = v890;
          *(_QWORD *)(a1 + 2632) = v882;
          *(_QWORD *)(a1 + 2640) = v891;
          if (!v880)
            goto LABEL_869;
LABEL_868:
          operator delete(v880);
          goto LABEL_869;
        }
LABEL_1696:
        p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v890;
        *(_QWORD *)(a1 + 2632) = v882;
        *(_QWORD *)(a1 + 2640) = v891;
        if (!v880)
          goto LABEL_869;
        goto LABEL_868;
      }
LABEL_1699:
      sub_19C07C7FC();
    }
LABEL_1698:
    sub_19C07DA0C();
  }
  *(_QWORD *)v880 = v879;
  v882 = (uint64_t)(v880 + 8);
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
LABEL_869:
  *(_QWORD *)(a1 + 2632) = v882;
LABEL_870:
  LODWORD(v902) = *((_DWORD *)p_vtable + 602);
  if (*(_BYTE *)(a1 + 2692))
  {
    v903 = (int)v902;
    v904 = *(_QWORD *)(a1 + 88);
    v905 = (*(_QWORD *)(a1 + 96) - v904) >> 3;
    if ((int)v902 <= v905)
    {
      if ((int)v902 < v905)
        *(_QWORD *)(a1 + 96) = v904 + 8 * (int)v902;
    }
    else
    {
      sub_19C098930((void **)(a1 + 88), (int)v902 - v905);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
      v903 = (int)v902;
    }
    v906 = *(_QWORD *)(a1 + 112);
    v907 = (*(_QWORD *)(a1 + 120) - v906) >> 3;
    if (v903 <= v907)
    {
      if (v903 < v907)
        *(_QWORD *)(a1 + 120) = v906 + 8 * v903;
    }
    else
    {
      sub_19C098930((void **)(a1 + 112), v903 - v907);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
    }
  }
  v908 = *(_QWORD *)(a1 + 184);
  v902 = (int)v902;
  v909 = (*(_QWORD *)(a1 + 192) - v908) >> 3;
  if ((int)v902 <= v909)
  {
    if ((int)v902 < v909)
      *(_QWORD *)(a1 + 192) = v908 + 8 * (int)v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), (int)v902 - v909);
    v902 = *((int *)p_vtable + 602);
  }
  v910 = *(_QWORD *)(a1 + 160);
  v911 = (*(_QWORD *)(a1 + 168) - v910) >> 3;
  if (v902 <= v911)
  {
    if (v902 < v911)
      *(_QWORD *)(a1 + 168) = v910 + 8 * v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v902 - v911);
  }
  v912 = *(_QWORD *)(a1 + 64);
  v913 = (*(_QWORD *)(a1 + 72) - v912) >> 3;
  if ((int)v1636 <= v913)
  {
    if ((int)v1636 < v913)
      *(_QWORD *)(a1 + 72) = v912 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), (int)v1636 - v913);
  }
  v914 = *(_QWORD *)(a1 + 136);
  v915 = (*(_QWORD *)(a1 + 144) - v914) >> 3;
  if ((int)v1636 <= v915)
  {
    if ((int)v1636 < v915)
      *(_QWORD *)(a1 + 144) = v914 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), (int)v1636 - v915);
  }
  v917 = *(_QWORD *)(a1 + 208);
  v916 = *(_QWORD *)(a1 + 216);
  v918 = *((int *)p_vtable + 602);
  v919 = 0xAAAAAAAAAAAAAAABLL * ((v916 - v917) >> 3);
  if (v918 <= v919)
  {
    if (v918 < v919)
    {
      v920 = v917 + 24 * (int)v918;
      if (v916 != v920)
      {
        v921 = *(_QWORD *)(a1 + 216);
        do
        {
          v923 = *(void **)(v921 - 24);
          v921 -= 24;
          v922 = v923;
          if (v923)
          {
            *(_QWORD *)(v916 - 16) = v922;
            operator delete(v922);
          }
          v916 = v921;
        }
        while (v921 != v920);
      }
      *(_QWORD *)(a1 + 216) = v920;
      p_vtable = MLPNDArrayLossLabels.vtable;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v918 - v919);
  }
  if (*(_BYTE *)(a1 + 2692))
  {
    v924 = (int)v1635;
    v925 = *(_QWORD *)(a1 + 640);
    v926 = (*(_QWORD *)(a1 + 648) - v925) >> 3;
    if ((int)v1635 <= v926)
    {
      if ((int)v1635 < v926)
        *(_QWORD *)(a1 + 648) = v925 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 640), (int)v1635 - v926);
    }
    v927 = *(_QWORD *)(a1 + 664);
    v928 = (*(_QWORD *)(a1 + 672) - v927) >> 3;
    if ((int)v1635 <= v928)
    {
      if ((int)v1635 < v928)
        *(_QWORD *)(a1 + 672) = v927 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 664), (int)v1635 - v928);
    }
    v929 = *(_QWORD *)(a1 + 688);
    v930 = (*(_QWORD *)(a1 + 696) - v929) >> 3;
    if ((int)v1635 <= v930)
    {
      if ((int)v1635 < v930)
        *(_QWORD *)(a1 + 696) = v929 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 688), (int)v1635 - v930);
    }
    v931 = *(_QWORD *)(a1 + 712);
    v932 = (*(_QWORD *)(a1 + 720) - v931) >> 3;
    if ((int)v1635 <= v932)
    {
      if ((int)v1635 < v932)
        *(_QWORD *)(a1 + 720) = v931 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 712), (int)v1635 - v932);
    }
    v933 = *(_QWORD *)(a1 + 544);
    v934 = (*(_QWORD *)(a1 + 552) - v933) >> 3;
    if ((int)v1635 <= v934)
    {
      if ((int)v1635 < v934)
        *(_QWORD *)(a1 + 552) = v933 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 544), (int)v1635 - v934);
    }
    v935 = *(_QWORD *)(a1 + 568);
    v936 = (*(_QWORD *)(a1 + 576) - v935) >> 3;
    if ((int)v1635 <= v936)
    {
      if ((int)v1635 < v936)
        *(_QWORD *)(a1 + 576) = v935 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 568), (int)v1635 - v936);
    }
    v937 = *(_QWORD *)(a1 + 592);
    v938 = (*(_QWORD *)(a1 + 600) - v937) >> 3;
    if ((int)v1635 <= v938)
    {
      if ((int)v1635 < v938)
        *(_QWORD *)(a1 + 600) = v937 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 592), (int)v1635 - v938);
    }
    v939 = *(_QWORD *)(a1 + 616);
    v940 = (*(_QWORD *)(a1 + 624) - v939) >> 3;
    if ((int)v1635 <= v940)
    {
      if ((int)v1635 < v940)
        *(_QWORD *)(a1 + 624) = v939 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 616), (int)v1635 - v940);
    }
  }
  else
  {
    v924 = (int)v1635;
  }
  v941 = *(_QWORD *)(a1 + 448);
  v942 = (*(_QWORD *)(a1 + 456) - v941) >> 3;
  if (v924 <= v942)
  {
    if (v924 < v942)
      *(_QWORD *)(a1 + 456) = v941 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), v924 - v942);
  }
  v943 = *(_QWORD *)(a1 + 472);
  v944 = (*(_QWORD *)(a1 + 480) - v943) >> 3;
  if (v924 <= v944)
  {
    if (v924 < v944)
      *(_QWORD *)(a1 + 480) = v943 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v924 - v944);
  }
  v945 = *(_QWORD *)(a1 + 496);
  v946 = (*(_QWORD *)(a1 + 504) - v945) >> 3;
  if (v924 <= v946)
  {
    if (v924 < v946)
      *(_QWORD *)(a1 + 504) = v945 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v924 - v946);
  }
  v947 = *(_QWORD *)(a1 + 520);
  v948 = (*(_QWORD *)(a1 + 528) - v947) >> 3;
  if (v924 <= v948)
  {
    if (v924 < v948)
      *(_QWORD *)(a1 + 528) = v947 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 520), v924 - v948);
  }
  v949 = *(_QWORD *)(a1 + 352);
  v950 = (*(_QWORD *)(a1 + 360) - v949) >> 3;
  if (v924 <= v950)
  {
    if (v924 < v950)
      *(_QWORD *)(a1 + 360) = v949 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 352), v924 - v950);
  }
  v951 = *(_QWORD *)(a1 + 376);
  v952 = (*(_QWORD *)(a1 + 384) - v951) >> 3;
  if (v924 <= v952)
  {
    if (v924 < v952)
      *(_QWORD *)(a1 + 384) = v951 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v924 - v952);
  }
  v953 = *(_QWORD *)(a1 + 400);
  v954 = (*(_QWORD *)(a1 + 408) - v953) >> 3;
  if (v924 <= v954)
  {
    if (v924 < v954)
      *(_QWORD *)(a1 + 408) = v953 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v924 - v954);
  }
  v955 = *(_QWORD *)(a1 + 424);
  v956 = (*(_QWORD *)(a1 + 432) - v955) >> 3;
  if (v924 <= v956)
  {
    if (v924 < v956)
      *(_QWORD *)(a1 + 432) = v955 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v924 - v956);
  }
  if (!*(_BYTE *)(a1 + 1696))
  {
    v957 = *((int *)p_vtable + 602);
    v958 = *(_QWORD *)(a1 + 960);
    v959 = (*(_QWORD *)(a1 + 968) - v958) >> 3;
    if (v957 <= v959)
    {
      if (v957 < v959)
        *(_QWORD *)(a1 + 968) = v958 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 960), v957 - v959);
      v957 = *((int *)p_vtable + 602);
    }
    v960 = *(_QWORD *)(a1 + 840);
    v961 = (*(_QWORD *)(a1 + 848) - v960) >> 3;
    if (v957 <= v961)
    {
      if (v957 < v961)
        *(_QWORD *)(a1 + 848) = v960 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 840), v957 - v961);
      v957 = *((int *)p_vtable + 602);
    }
    v962 = *(_QWORD *)(a1 + 816);
    v963 = (*(_QWORD *)(a1 + 824) - v962) >> 3;
    if (v957 <= v963)
    {
      if (v957 < v963)
        *(_QWORD *)(a1 + 824) = v962 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 816), v957 - v963);
      v957 = *((int *)p_vtable + 602);
    }
    v964 = *(_QWORD *)(a1 + 912);
    v965 = (*(_QWORD *)(a1 + 920) - v964) >> 3;
    if (v957 <= v965)
    {
      if (v957 < v965)
        *(_QWORD *)(a1 + 920) = v964 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 912), v957 - v965);
      v957 = *((int *)p_vtable + 602);
    }
    v966 = *(_QWORD *)(a1 + 888);
    v967 = (*(_QWORD *)(a1 + 896) - v966) >> 3;
    if (v957 <= v967)
    {
      if (v957 < v967)
        *(_QWORD *)(a1 + 896) = v966 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 888), v957 - v967);
      v957 = *((int *)p_vtable + 602);
    }
    v968 = *(_QWORD *)(a1 + 864);
    v969 = (*(_QWORD *)(a1 + 872) - v968) >> 3;
    if (v957 <= v969)
    {
      if (v957 < v969)
        *(_QWORD *)(a1 + 872) = v968 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 864), v957 - v969);
      v957 = *((int *)p_vtable + 602);
    }
    v970 = *(_QWORD *)(a1 + 936);
    v971 = (*(_QWORD *)(a1 + 944) - v970) >> 3;
    if (v957 <= v971)
    {
      if (v957 < v971)
        *(_QWORD *)(a1 + 944) = v970 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 936), v957 - v971);
    }
  }
  if ((int)v1636 >= 1)
  {
    v972 = 0;
    while (1)
    {
      v974 = *(unsigned int *)(a1 + 48);
      v975 = (void *)operator new[]();
      v976 = v975;
      if ((int)v974 >= 1)
        bzero(v975, 4 * v974);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v972) = v976;
      v977 = *(char **)(a1 + 2632);
      v978 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v977 < v978)
      {
        *(_QWORD *)v977 = v976;
        v979 = (uint64_t)(v977 + 8);
        goto LABEL_1027;
      }
      v980 = *v5;
      v981 = v977 - *v5;
      v982 = v981 >> 3;
      v983 = (v981 >> 3) + 1;
      if (v983 >> 61)
        goto LABEL_1698;
      v984 = v978 - (_QWORD)v980;
      if (v984 >> 2 > v983)
        v983 = v984 >> 2;
      v985 = (unint64_t)v984 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v983;
      if (v985)
        break;
      v986 = 0;
      v987 = (_QWORD *)(8 * v982);
      *(_QWORD *)(8 * v982) = v976;
      v979 = 8 * v982 + 8;
      if (v977 != v980)
        goto LABEL_1018;
LABEL_1025:
      *(_QWORD *)(a1 + 2624) = v987;
      *(_QWORD *)(a1 + 2632) = v979;
      *(_QWORD *)(a1 + 2640) = &v986[8 * v985];
      if (v977)
        operator delete(v977);
LABEL_1027:
      *(_QWORD *)(a1 + 2632) = v979;
      v997 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v998 = (void *)operator new[]();
      bzero(v998, 4 * v997);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v972) = v998;
      v999 = *(char **)(a1 + 2632);
      v1000 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v999 >= v1000)
      {
        v1001 = *v5;
        v1002 = v999 - *v5;
        v1003 = v1002 >> 3;
        v1004 = (v1002 >> 3) + 1;
        if (v1004 >> 61)
          goto LABEL_1698;
        v1005 = v1000 - (_QWORD)v1001;
        if (v1005 >> 2 > v1004)
          v1004 = v1005 >> 2;
        if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFF8)
          v1006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1006 = v1004;
        if (v1006)
        {
          if (v1006 >> 61)
            goto LABEL_1699;
          v1007 = operator new(8 * v1006);
          v1008 = &v1007[8 * v1003];
          *v1008 = v998;
          v973 = (uint64_t)(v1008 + 1);
          if (v999 == v1001)
            goto LABEL_1046;
LABEL_1039:
          v1009 = v999 - 8 - v1001;
          if (v1009 < 0x58)
            goto LABEL_1732;
          if ((unint64_t)(v999 - &v1007[v1002]) < 0x20)
            goto LABEL_1732;
          v1010 = (v1009 >> 3) + 1;
          v1011 = 8 * (v1010 & 0x3FFFFFFFFFFFFFFCLL);
          v1012 = &v999[-v1011];
          v1008 = (_QWORD *)((char *)v1008 - v1011);
          v1013 = &v1007[8 * v1003 - 16];
          v1014 = v999 - 16;
          v1015 = v1010 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1016 = *(_OWORD *)v1014;
            *(v1013 - 1) = *((_OWORD *)v1014 - 1);
            *v1013 = v1016;
            v1013 -= 2;
            v1014 -= 32;
            v1015 -= 4;
          }
          while (v1015);
          v999 = v1012;
          if (v1010 != (v1010 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1732:
            do
            {
              v1017 = *((_QWORD *)v999 - 1);
              v999 -= 8;
              *--v1008 = v1017;
            }
            while (v999 != v1001);
          }
          v999 = *v5;
        }
        else
        {
          v1007 = 0;
          v1008 = (_QWORD *)(8 * v1003);
          *(_QWORD *)(8 * v1003) = v998;
          v973 = 8 * v1003 + 8;
          if (v999 != v1001)
            goto LABEL_1039;
        }
LABEL_1046:
        *(_QWORD *)(a1 + 2624) = v1008;
        *(_QWORD *)(a1 + 2632) = v973;
        *(_QWORD *)(a1 + 2640) = &v1007[8 * v1006];
        if (v999)
          operator delete(v999);
        goto LABEL_1002;
      }
      *(_QWORD *)v999 = v998;
      v973 = (uint64_t)(v999 + 8);
LABEL_1002:
      *(_QWORD *)(a1 + 2632) = v973;
      if (++v972 == v1636)
        goto LABEL_1048;
    }
    if (v985 >> 61)
      goto LABEL_1699;
    v986 = operator new(8 * v985);
    v987 = &v986[8 * v982];
    *v987 = v976;
    v979 = (uint64_t)(v987 + 1);
    if (v977 == v980)
      goto LABEL_1025;
LABEL_1018:
    v988 = v977 - 8 - v980;
    if (v988 < 0x58)
      goto LABEL_1733;
    if ((unint64_t)(v977 - &v986[v981]) < 0x20)
      goto LABEL_1733;
    v989 = (v988 >> 3) + 1;
    v990 = 8 * (v989 & 0x3FFFFFFFFFFFFFFCLL);
    v991 = &v977[-v990];
    v987 = (_QWORD *)((char *)v987 - v990);
    v992 = &v986[8 * v982 - 16];
    v993 = v977 - 16;
    v994 = v989 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v995 = *(_OWORD *)v993;
      *(v992 - 1) = *((_OWORD *)v993 - 1);
      *v992 = v995;
      v992 -= 2;
      v993 -= 32;
      v994 -= 4;
    }
    while (v994);
    v977 = v991;
    if (v989 != (v989 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1733:
      do
      {
        v996 = *((_QWORD *)v977 - 1);
        v977 -= 8;
        *--v987 = v996;
      }
      while (v977 != v980);
    }
    v977 = *v5;
    goto LABEL_1025;
  }
LABEL_1048:
  if ((int)v1635 >= 1)
  {
    v1018 = 0;
    while (1)
    {
      if (!*(_BYTE *)(a1 + 2692))
        goto LABEL_1246;
      v1020 = *(unsigned int *)(a1 + 52);
      v1021 = (void *)operator new[]();
      v1022 = v1021;
      if ((int)v1020 >= 1)
        bzero(v1021, 4 * v1020);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v1018) = v1022;
      v1023 = *(char **)(a1 + 2632);
      v1024 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1023 < v1024)
      {
        *(_QWORD *)v1023 = v1022;
        v1025 = (uint64_t)(v1023 + 8);
        goto LABEL_1077;
      }
      v1026 = *v5;
      v1027 = v1023 - *v5;
      v1028 = v1027 >> 3;
      v1029 = (v1027 >> 3) + 1;
      if (v1029 >> 61)
        goto LABEL_1698;
      v1030 = v1024 - (_QWORD)v1026;
      if (v1030 >> 2 > v1029)
        v1029 = v1030 >> 2;
      v1031 = (unint64_t)v1030 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v1029;
      if (v1031)
        break;
      v1032 = 0;
      v1033 = (_QWORD *)(8 * v1028);
      *(_QWORD *)(8 * v1028) = v1022;
      v1025 = 8 * v1028 + 8;
      if (v1023 != v1026)
        goto LABEL_1068;
LABEL_1075:
      *(_QWORD *)(a1 + 2624) = v1033;
      *(_QWORD *)(a1 + 2632) = v1025;
      *(_QWORD *)(a1 + 2640) = &v1032[8 * v1031];
      if (v1023)
        operator delete(v1023);
LABEL_1077:
      *(_QWORD *)(a1 + 2632) = v1025;
      v1043 = *(unsigned int *)(a1 + 52);
      v1044 = (void *)operator new[]();
      v1045 = v1044;
      if ((int)v1043 >= 1)
        bzero(v1044, 4 * v1043);
      *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v1018) = v1045;
      v1046 = *(char **)(a1 + 2632);
      v1047 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1046 < v1047)
      {
        *(_QWORD *)v1046 = v1045;
        v1048 = (uint64_t)(v1046 + 8);
        goto LABEL_1101;
      }
      v1049 = *v5;
      v1050 = v1046 - *v5;
      v1051 = v1050 >> 3;
      v1052 = (v1050 >> 3) + 1;
      if (v1052 >> 61)
        goto LABEL_1698;
      v1053 = v1047 - (_QWORD)v1049;
      if (v1053 >> 2 > v1052)
        v1052 = v1053 >> 2;
      if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFF8)
        v1054 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1054 = v1052;
      if (v1054)
      {
        if (v1054 >> 61)
          goto LABEL_1699;
        v1055 = operator new(8 * v1054);
        v1056 = &v1055[8 * v1051];
        *v1056 = v1045;
        v1048 = (uint64_t)(v1056 + 1);
        if (v1046 == v1049)
          goto LABEL_1099;
LABEL_1092:
        v1057 = v1046 - 8 - v1049;
        if (v1057 < 0x58)
          goto LABEL_1734;
        if ((unint64_t)(v1046 - &v1055[v1050]) < 0x20)
          goto LABEL_1734;
        v1058 = (v1057 >> 3) + 1;
        v1059 = 8 * (v1058 & 0x3FFFFFFFFFFFFFFCLL);
        v1060 = &v1046[-v1059];
        v1056 = (_QWORD *)((char *)v1056 - v1059);
        v1061 = &v1055[8 * v1051 - 16];
        v1062 = v1046 - 16;
        v1063 = v1058 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1064 = *(_OWORD *)v1062;
          *(v1061 - 1) = *((_OWORD *)v1062 - 1);
          *v1061 = v1064;
          v1061 -= 2;
          v1062 -= 32;
          v1063 -= 4;
        }
        while (v1063);
        v1046 = v1060;
        if (v1058 != (v1058 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1734:
          do
          {
            v1065 = *((_QWORD *)v1046 - 1);
            v1046 -= 8;
            *--v1056 = v1065;
          }
          while (v1046 != v1049);
        }
        v1046 = *v5;
        goto LABEL_1099;
      }
      v1055 = 0;
      v1056 = (_QWORD *)(8 * v1051);
      *(_QWORD *)(8 * v1051) = v1045;
      v1048 = 8 * v1051 + 8;
      if (v1046 != v1049)
        goto LABEL_1092;
LABEL_1099:
      *(_QWORD *)(a1 + 2624) = v1056;
      *(_QWORD *)(a1 + 2632) = v1048;
      *(_QWORD *)(a1 + 2640) = &v1055[8 * v1054];
      if (v1046)
        operator delete(v1046);
LABEL_1101:
      *(_QWORD *)(a1 + 2632) = v1048;
      v1066 = *(unsigned int *)(a1 + 52);
      v1067 = (void *)operator new[]();
      v1068 = v1067;
      if ((int)v1066 >= 1)
        bzero(v1067, 4 * v1066);
      *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * v1018) = v1068;
      v1069 = *(char **)(a1 + 2632);
      v1070 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1069 < v1070)
      {
        *(_QWORD *)v1069 = v1068;
        v1071 = (uint64_t)(v1069 + 8);
        goto LABEL_1125;
      }
      v1072 = *v5;
      v1073 = v1069 - *v5;
      v1074 = v1073 >> 3;
      v1075 = (v1073 >> 3) + 1;
      if (v1075 >> 61)
        goto LABEL_1698;
      v1076 = v1070 - (_QWORD)v1072;
      if (v1076 >> 2 > v1075)
        v1075 = v1076 >> 2;
      if ((unint64_t)v1076 >= 0x7FFFFFFFFFFFFFF8)
        v1077 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1077 = v1075;
      if (v1077)
      {
        if (v1077 >> 61)
          goto LABEL_1699;
        v1078 = operator new(8 * v1077);
        v1079 = &v1078[8 * v1074];
        *v1079 = v1068;
        v1071 = (uint64_t)(v1079 + 1);
        if (v1069 == v1072)
          goto LABEL_1123;
LABEL_1116:
        v1080 = v1069 - 8 - v1072;
        if (v1080 < 0x58)
          goto LABEL_1735;
        if ((unint64_t)(v1069 - &v1078[v1073]) < 0x20)
          goto LABEL_1735;
        v1081 = (v1080 >> 3) + 1;
        v1082 = 8 * (v1081 & 0x3FFFFFFFFFFFFFFCLL);
        v1083 = &v1069[-v1082];
        v1079 = (_QWORD *)((char *)v1079 - v1082);
        v1084 = &v1078[8 * v1074 - 16];
        v1085 = v1069 - 16;
        v1086 = v1081 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1087 = *(_OWORD *)v1085;
          *(v1084 - 1) = *((_OWORD *)v1085 - 1);
          *v1084 = v1087;
          v1084 -= 2;
          v1085 -= 32;
          v1086 -= 4;
        }
        while (v1086);
        v1069 = v1083;
        if (v1081 != (v1081 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1735:
          do
          {
            v1088 = *((_QWORD *)v1069 - 1);
            v1069 -= 8;
            *--v1079 = v1088;
          }
          while (v1069 != v1072);
        }
        v1069 = *v5;
        goto LABEL_1123;
      }
      v1078 = 0;
      v1079 = (_QWORD *)(8 * v1074);
      *(_QWORD *)(8 * v1074) = v1068;
      v1071 = 8 * v1074 + 8;
      if (v1069 != v1072)
        goto LABEL_1116;
LABEL_1123:
      *(_QWORD *)(a1 + 2624) = v1079;
      *(_QWORD *)(a1 + 2632) = v1071;
      *(_QWORD *)(a1 + 2640) = &v1078[8 * v1077];
      if (v1069)
        operator delete(v1069);
LABEL_1125:
      *(_QWORD *)(a1 + 2632) = v1071;
      v1089 = *(unsigned int *)(a1 + 52);
      v1090 = (void *)operator new[]();
      v1091 = v1090;
      if ((int)v1089 >= 1)
        bzero(v1090, 4 * v1089);
      *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v1018) = v1091;
      v1092 = *(char **)(a1 + 2632);
      v1093 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1092 < v1093)
      {
        *(_QWORD *)v1092 = v1091;
        v1094 = (uint64_t)(v1092 + 8);
        goto LABEL_1149;
      }
      v1095 = *v5;
      v1096 = v1092 - *v5;
      v1097 = v1096 >> 3;
      v1098 = (v1096 >> 3) + 1;
      if (v1098 >> 61)
        goto LABEL_1698;
      v1099 = v1093 - (_QWORD)v1095;
      if (v1099 >> 2 > v1098)
        v1098 = v1099 >> 2;
      if ((unint64_t)v1099 >= 0x7FFFFFFFFFFFFFF8)
        v1100 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1100 = v1098;
      if (v1100)
      {
        if (v1100 >> 61)
          goto LABEL_1699;
        v1101 = operator new(8 * v1100);
        v1102 = &v1101[8 * v1097];
        *v1102 = v1091;
        v1094 = (uint64_t)(v1102 + 1);
        if (v1092 == v1095)
          goto LABEL_1147;
LABEL_1140:
        v1103 = v1092 - 8 - v1095;
        if (v1103 < 0x58)
          goto LABEL_1736;
        if ((unint64_t)(v1092 - &v1101[v1096]) < 0x20)
          goto LABEL_1736;
        v1104 = (v1103 >> 3) + 1;
        v1105 = 8 * (v1104 & 0x3FFFFFFFFFFFFFFCLL);
        v1106 = &v1092[-v1105];
        v1102 = (_QWORD *)((char *)v1102 - v1105);
        v1107 = &v1101[8 * v1097 - 16];
        v1108 = v1092 - 16;
        v1109 = v1104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1110 = *(_OWORD *)v1108;
          *(v1107 - 1) = *((_OWORD *)v1108 - 1);
          *v1107 = v1110;
          v1107 -= 2;
          v1108 -= 32;
          v1109 -= 4;
        }
        while (v1109);
        v1092 = v1106;
        if (v1104 != (v1104 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1736:
          do
          {
            v1111 = *((_QWORD *)v1092 - 1);
            v1092 -= 8;
            *--v1102 = v1111;
          }
          while (v1092 != v1095);
        }
        v1092 = *v5;
        goto LABEL_1147;
      }
      v1101 = 0;
      v1102 = (_QWORD *)(8 * v1097);
      *(_QWORD *)(8 * v1097) = v1091;
      v1094 = 8 * v1097 + 8;
      if (v1092 != v1095)
        goto LABEL_1140;
LABEL_1147:
      *(_QWORD *)(a1 + 2624) = v1102;
      *(_QWORD *)(a1 + 2632) = v1094;
      *(_QWORD *)(a1 + 2640) = &v1101[8 * v1100];
      if (v1092)
        operator delete(v1092);
LABEL_1149:
      *(_QWORD *)(a1 + 2632) = v1094;
      v1112 = *(unsigned int *)(a1 + 52);
      v1113 = (void *)operator new[]();
      v1114 = v1113;
      if ((int)v1112 >= 1)
        bzero(v1113, 4 * v1112);
      *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * v1018) = v1114;
      v1115 = *(char **)(a1 + 2632);
      v1116 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1115 < v1116)
      {
        *(_QWORD *)v1115 = v1114;
        v1117 = (uint64_t)(v1115 + 8);
        goto LABEL_1173;
      }
      v1118 = *v5;
      v1119 = v1115 - *v5;
      v1120 = v1119 >> 3;
      v1121 = (v1119 >> 3) + 1;
      if (v1121 >> 61)
        goto LABEL_1698;
      v1122 = v1116 - (_QWORD)v1118;
      if (v1122 >> 2 > v1121)
        v1121 = v1122 >> 2;
      if ((unint64_t)v1122 >= 0x7FFFFFFFFFFFFFF8)
        v1123 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1123 = v1121;
      if (v1123)
      {
        if (v1123 >> 61)
          goto LABEL_1699;
        v1124 = operator new(8 * v1123);
        v1125 = &v1124[8 * v1120];
        *v1125 = v1114;
        v1117 = (uint64_t)(v1125 + 1);
        if (v1115 == v1118)
          goto LABEL_1171;
LABEL_1164:
        v1126 = v1115 - 8 - v1118;
        if (v1126 < 0x58)
          goto LABEL_1737;
        if ((unint64_t)(v1115 - &v1124[v1119]) < 0x20)
          goto LABEL_1737;
        v1127 = (v1126 >> 3) + 1;
        v1128 = 8 * (v1127 & 0x3FFFFFFFFFFFFFFCLL);
        v1129 = &v1115[-v1128];
        v1125 = (_QWORD *)((char *)v1125 - v1128);
        v1130 = &v1124[8 * v1120 - 16];
        v1131 = v1115 - 16;
        v1132 = v1127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1133 = *(_OWORD *)v1131;
          *(v1130 - 1) = *((_OWORD *)v1131 - 1);
          *v1130 = v1133;
          v1130 -= 2;
          v1131 -= 32;
          v1132 -= 4;
        }
        while (v1132);
        v1115 = v1129;
        if (v1127 != (v1127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1737:
          do
          {
            v1134 = *((_QWORD *)v1115 - 1);
            v1115 -= 8;
            *--v1125 = v1134;
          }
          while (v1115 != v1118);
        }
        v1115 = *v5;
        goto LABEL_1171;
      }
      v1124 = 0;
      v1125 = (_QWORD *)(8 * v1120);
      *(_QWORD *)(8 * v1120) = v1114;
      v1117 = 8 * v1120 + 8;
      if (v1115 != v1118)
        goto LABEL_1164;
LABEL_1171:
      *(_QWORD *)(a1 + 2624) = v1125;
      *(_QWORD *)(a1 + 2632) = v1117;
      *(_QWORD *)(a1 + 2640) = &v1124[8 * v1123];
      if (v1115)
        operator delete(v1115);
LABEL_1173:
      *(_QWORD *)(a1 + 2632) = v1117;
      v1135 = *(unsigned int *)(a1 + 52);
      v1136 = (void *)operator new[]();
      v1137 = v1136;
      if ((int)v1135 >= 1)
        bzero(v1136, 4 * v1135);
      *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v1018) = v1137;
      v1138 = *(char **)(a1 + 2632);
      v1139 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1138 < v1139)
      {
        *(_QWORD *)v1138 = v1137;
        v1140 = (uint64_t)(v1138 + 8);
        goto LABEL_1197;
      }
      v1141 = *v5;
      v1142 = v1138 - *v5;
      v1143 = v1142 >> 3;
      v1144 = (v1142 >> 3) + 1;
      if (v1144 >> 61)
        goto LABEL_1698;
      v1145 = v1139 - (_QWORD)v1141;
      if (v1145 >> 2 > v1144)
        v1144 = v1145 >> 2;
      if ((unint64_t)v1145 >= 0x7FFFFFFFFFFFFFF8)
        v1146 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1146 = v1144;
      if (v1146)
      {
        if (v1146 >> 61)
          goto LABEL_1699;
        v1147 = operator new(8 * v1146);
        v1148 = &v1147[8 * v1143];
        *v1148 = v1137;
        v1140 = (uint64_t)(v1148 + 1);
        if (v1138 == v1141)
          goto LABEL_1195;
LABEL_1188:
        v1149 = v1138 - 8 - v1141;
        if (v1149 < 0x58)
          goto LABEL_1738;
        if ((unint64_t)(v1138 - &v1147[v1142]) < 0x20)
          goto LABEL_1738;
        v1150 = (v1149 >> 3) + 1;
        v1151 = 8 * (v1150 & 0x3FFFFFFFFFFFFFFCLL);
        v1152 = &v1138[-v1151];
        v1148 = (_QWORD *)((char *)v1148 - v1151);
        v1153 = &v1147[8 * v1143 - 16];
        v1154 = v1138 - 16;
        v1155 = v1150 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1156 = *(_OWORD *)v1154;
          *(v1153 - 1) = *((_OWORD *)v1154 - 1);
          *v1153 = v1156;
          v1153 -= 2;
          v1154 -= 32;
          v1155 -= 4;
        }
        while (v1155);
        v1138 = v1152;
        if (v1150 != (v1150 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1738:
          do
          {
            v1157 = *((_QWORD *)v1138 - 1);
            v1138 -= 8;
            *--v1148 = v1157;
          }
          while (v1138 != v1141);
        }
        v1138 = *v5;
        goto LABEL_1195;
      }
      v1147 = 0;
      v1148 = (_QWORD *)(8 * v1143);
      *(_QWORD *)(8 * v1143) = v1137;
      v1140 = 8 * v1143 + 8;
      if (v1138 != v1141)
        goto LABEL_1188;
LABEL_1195:
      *(_QWORD *)(a1 + 2624) = v1148;
      *(_QWORD *)(a1 + 2632) = v1140;
      *(_QWORD *)(a1 + 2640) = &v1147[8 * v1146];
      if (v1138)
        operator delete(v1138);
LABEL_1197:
      *(_QWORD *)(a1 + 2632) = v1140;
      v1158 = *(unsigned int *)(a1 + 52);
      v1159 = (void *)operator new[]();
      v1160 = v1159;
      if ((int)v1158 >= 1)
        bzero(v1159, 4 * v1158);
      *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * v1018) = v1160;
      v1161 = *(char **)(a1 + 2632);
      v1162 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1161 < v1162)
      {
        *(_QWORD *)v1161 = v1160;
        v1163 = (uint64_t)(v1161 + 8);
        goto LABEL_1221;
      }
      v1164 = *v5;
      v1165 = v1161 - *v5;
      v1166 = v1165 >> 3;
      v1167 = (v1165 >> 3) + 1;
      if (v1167 >> 61)
        goto LABEL_1698;
      v1168 = v1162 - (_QWORD)v1164;
      if (v1168 >> 2 > v1167)
        v1167 = v1168 >> 2;
      if ((unint64_t)v1168 >= 0x7FFFFFFFFFFFFFF8)
        v1169 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1169 = v1167;
      if (v1169)
      {
        if (v1169 >> 61)
          goto LABEL_1699;
        v1170 = operator new(8 * v1169);
        v1171 = &v1170[8 * v1166];
        *v1171 = v1160;
        v1163 = (uint64_t)(v1171 + 1);
        if (v1161 == v1164)
          goto LABEL_1219;
LABEL_1212:
        v1172 = v1161 - 8 - v1164;
        if (v1172 < 0x58)
          goto LABEL_1739;
        if ((unint64_t)(v1161 - &v1170[v1165]) < 0x20)
          goto LABEL_1739;
        v1173 = (v1172 >> 3) + 1;
        v1174 = 8 * (v1173 & 0x3FFFFFFFFFFFFFFCLL);
        v1175 = &v1161[-v1174];
        v1171 = (_QWORD *)((char *)v1171 - v1174);
        v1176 = &v1170[8 * v1166 - 16];
        v1177 = v1161 - 16;
        v1178 = v1173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1179 = *(_OWORD *)v1177;
          *(v1176 - 1) = *((_OWORD *)v1177 - 1);
          *v1176 = v1179;
          v1176 -= 2;
          v1177 -= 32;
          v1178 -= 4;
        }
        while (v1178);
        v1161 = v1175;
        if (v1173 != (v1173 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1739:
          do
          {
            v1180 = *((_QWORD *)v1161 - 1);
            v1161 -= 8;
            *--v1171 = v1180;
          }
          while (v1161 != v1164);
        }
        v1161 = *v5;
        goto LABEL_1219;
      }
      v1170 = 0;
      v1171 = (_QWORD *)(8 * v1166);
      *(_QWORD *)(8 * v1166) = v1160;
      v1163 = 8 * v1166 + 8;
      if (v1161 != v1164)
        goto LABEL_1212;
LABEL_1219:
      *(_QWORD *)(a1 + 2624) = v1171;
      *(_QWORD *)(a1 + 2632) = v1163;
      *(_QWORD *)(a1 + 2640) = &v1170[8 * v1169];
      if (v1161)
        operator delete(v1161);
LABEL_1221:
      *(_QWORD *)(a1 + 2632) = v1163;
      v1181 = *(unsigned int *)(a1 + 52);
      v1182 = (void *)operator new[]();
      v1183 = v1182;
      if ((int)v1181 >= 1)
        bzero(v1182, 4 * v1181);
      *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * v1018) = v1183;
      v1184 = *(char **)(a1 + 2632);
      v1185 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1184 >= v1185)
      {
        v1187 = *v5;
        v1188 = v1184 - *v5;
        v1189 = v1188 >> 3;
        v1190 = (v1188 >> 3) + 1;
        if (v1190 >> 61)
          goto LABEL_1698;
        v1191 = v1185 - (_QWORD)v1187;
        if (v1191 >> 2 > v1190)
          v1190 = v1191 >> 2;
        if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFF8)
          v1192 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1192 = v1190;
        if (v1192)
        {
          if (v1192 >> 61)
            goto LABEL_1699;
          v1193 = operator new(8 * v1192);
          v1194 = &v1193[8 * v1189];
          *v1194 = v1183;
          v1186 = (uint64_t)(v1194 + 1);
          if (v1184 == v1187)
            goto LABEL_1243;
LABEL_1236:
          v1195 = v1184 - 8 - v1187;
          if (v1195 < 0x58)
            goto LABEL_1740;
          if ((unint64_t)(v1184 - &v1193[v1188]) < 0x20)
            goto LABEL_1740;
          v1196 = (v1195 >> 3) + 1;
          v1197 = 8 * (v1196 & 0x3FFFFFFFFFFFFFFCLL);
          v1198 = &v1184[-v1197];
          v1194 = (_QWORD *)((char *)v1194 - v1197);
          v1199 = &v1193[8 * v1189 - 16];
          v1200 = v1184 - 16;
          v1201 = v1196 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1202 = *(_OWORD *)v1200;
            *(v1199 - 1) = *((_OWORD *)v1200 - 1);
            *v1199 = v1202;
            v1199 -= 2;
            v1200 -= 32;
            v1201 -= 4;
          }
          while (v1201);
          v1184 = v1198;
          if (v1196 != (v1196 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1740:
            do
            {
              v1203 = *((_QWORD *)v1184 - 1);
              v1184 -= 8;
              *--v1194 = v1203;
            }
            while (v1184 != v1187);
          }
          v1184 = *v5;
        }
        else
        {
          v1193 = 0;
          v1194 = (_QWORD *)(8 * v1189);
          *(_QWORD *)(8 * v1189) = v1183;
          v1186 = 8 * v1189 + 8;
          if (v1184 != v1187)
            goto LABEL_1236;
        }
LABEL_1243:
        *(_QWORD *)(a1 + 2624) = v1194;
        *(_QWORD *)(a1 + 2632) = v1186;
        *(_QWORD *)(a1 + 2640) = &v1193[8 * v1192];
        if (v1184)
          operator delete(v1184);
        goto LABEL_1245;
      }
      *(_QWORD *)v1184 = v1183;
      v1186 = (uint64_t)(v1184 + 8);
LABEL_1245:
      *(_QWORD *)(a1 + 2632) = v1186;
LABEL_1246:
      v1204 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1205 = (void *)operator new[]();
      bzero(v1205, 4 * v1204);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v1018) = v1205;
      v1206 = *(char **)(a1 + 2632);
      v1207 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1206 < v1207)
      {
        *(_QWORD *)v1206 = v1205;
        v1208 = (uint64_t)(v1206 + 8);
        goto LABEL_1268;
      }
      v1209 = *v5;
      v1210 = v1206 - *v5;
      v1211 = v1210 >> 3;
      v1212 = (v1210 >> 3) + 1;
      if (v1212 >> 61)
        goto LABEL_1698;
      v1213 = v1207 - (_QWORD)v1209;
      if (v1213 >> 2 > v1212)
        v1212 = v1213 >> 2;
      if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFF8)
        v1214 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1214 = v1212;
      if (v1214)
      {
        if (v1214 >> 61)
          goto LABEL_1699;
        v1215 = operator new(8 * v1214);
        v1216 = &v1215[8 * v1211];
        *v1216 = v1205;
        v1208 = (uint64_t)(v1216 + 1);
        if (v1206 == v1209)
          goto LABEL_1266;
LABEL_1259:
        v1217 = v1206 - 8 - v1209;
        if (v1217 < 0x58)
          goto LABEL_1741;
        if ((unint64_t)(v1206 - &v1215[v1210]) < 0x20)
          goto LABEL_1741;
        v1218 = (v1217 >> 3) + 1;
        v1219 = 8 * (v1218 & 0x3FFFFFFFFFFFFFFCLL);
        v1220 = &v1206[-v1219];
        v1216 = (_QWORD *)((char *)v1216 - v1219);
        v1221 = &v1215[8 * v1211 - 16];
        v1222 = v1206 - 16;
        v1223 = v1218 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1224 = *(_OWORD *)v1222;
          *(v1221 - 1) = *((_OWORD *)v1222 - 1);
          *v1221 = v1224;
          v1221 -= 2;
          v1222 -= 32;
          v1223 -= 4;
        }
        while (v1223);
        v1206 = v1220;
        if (v1218 != (v1218 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1741:
          do
          {
            v1225 = *((_QWORD *)v1206 - 1);
            v1206 -= 8;
            *--v1216 = v1225;
          }
          while (v1206 != v1209);
        }
        v1206 = *v5;
        goto LABEL_1266;
      }
      v1215 = 0;
      v1216 = (_QWORD *)(8 * v1211);
      *(_QWORD *)(8 * v1211) = v1205;
      v1208 = 8 * v1211 + 8;
      if (v1206 != v1209)
        goto LABEL_1259;
LABEL_1266:
      *(_QWORD *)(a1 + 2624) = v1216;
      *(_QWORD *)(a1 + 2632) = v1208;
      *(_QWORD *)(a1 + 2640) = &v1215[8 * v1214];
      if (v1206)
        operator delete(v1206);
LABEL_1268:
      *(_QWORD *)(a1 + 2632) = v1208;
      v1226 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1227 = (void *)operator new[]();
      bzero(v1227, 4 * v1226);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v1018) = v1227;
      v1228 = *(char **)(a1 + 2632);
      v1229 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1228 < v1229)
      {
        *(_QWORD *)v1228 = v1227;
        v1230 = (uint64_t)(v1228 + 8);
        goto LABEL_1290;
      }
      v1231 = *v5;
      v1232 = v1228 - *v5;
      v1233 = v1232 >> 3;
      v1234 = (v1232 >> 3) + 1;
      if (v1234 >> 61)
        goto LABEL_1698;
      v1235 = v1229 - (_QWORD)v1231;
      if (v1235 >> 2 > v1234)
        v1234 = v1235 >> 2;
      if ((unint64_t)v1235 >= 0x7FFFFFFFFFFFFFF8)
        v1236 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1236 = v1234;
      if (v1236)
      {
        if (v1236 >> 61)
          goto LABEL_1699;
        v1237 = operator new(8 * v1236);
        v1238 = &v1237[8 * v1233];
        *v1238 = v1227;
        v1230 = (uint64_t)(v1238 + 1);
        if (v1228 == v1231)
          goto LABEL_1288;
LABEL_1281:
        v1239 = v1228 - 8 - v1231;
        if (v1239 < 0x58)
          goto LABEL_1742;
        if ((unint64_t)(v1228 - &v1237[v1232]) < 0x20)
          goto LABEL_1742;
        v1240 = (v1239 >> 3) + 1;
        v1241 = 8 * (v1240 & 0x3FFFFFFFFFFFFFFCLL);
        v1242 = &v1228[-v1241];
        v1238 = (_QWORD *)((char *)v1238 - v1241);
        v1243 = &v1237[8 * v1233 - 16];
        v1244 = v1228 - 16;
        v1245 = v1240 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1246 = *(_OWORD *)v1244;
          *(v1243 - 1) = *((_OWORD *)v1244 - 1);
          *v1243 = v1246;
          v1243 -= 2;
          v1244 -= 32;
          v1245 -= 4;
        }
        while (v1245);
        v1228 = v1242;
        if (v1240 != (v1240 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1742:
          do
          {
            v1247 = *((_QWORD *)v1228 - 1);
            v1228 -= 8;
            *--v1238 = v1247;
          }
          while (v1228 != v1231);
        }
        v1228 = *v5;
        goto LABEL_1288;
      }
      v1237 = 0;
      v1238 = (_QWORD *)(8 * v1233);
      *(_QWORD *)(8 * v1233) = v1227;
      v1230 = 8 * v1233 + 8;
      if (v1228 != v1231)
        goto LABEL_1281;
LABEL_1288:
      *(_QWORD *)(a1 + 2624) = v1238;
      *(_QWORD *)(a1 + 2632) = v1230;
      *(_QWORD *)(a1 + 2640) = &v1237[8 * v1236];
      if (v1228)
        operator delete(v1228);
LABEL_1290:
      *(_QWORD *)(a1 + 2632) = v1230;
      v1248 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1249 = (void *)operator new[]();
      bzero(v1249, 4 * v1248);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v1018) = v1249;
      v1250 = *(char **)(a1 + 2632);
      v1251 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1250 < v1251)
      {
        *(_QWORD *)v1250 = v1249;
        v1252 = (uint64_t)(v1250 + 8);
        goto LABEL_1312;
      }
      v1253 = *v5;
      v1254 = v1250 - *v5;
      v1255 = v1254 >> 3;
      v1256 = (v1254 >> 3) + 1;
      if (v1256 >> 61)
        goto LABEL_1698;
      v1257 = v1251 - (_QWORD)v1253;
      if (v1257 >> 2 > v1256)
        v1256 = v1257 >> 2;
      if ((unint64_t)v1257 >= 0x7FFFFFFFFFFFFFF8)
        v1258 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1258 = v1256;
      if (v1258)
      {
        if (v1258 >> 61)
          goto LABEL_1699;
        v1259 = operator new(8 * v1258);
        v1260 = &v1259[8 * v1255];
        *v1260 = v1249;
        v1252 = (uint64_t)(v1260 + 1);
        if (v1250 == v1253)
          goto LABEL_1310;
LABEL_1303:
        v1261 = v1250 - 8 - v1253;
        if (v1261 < 0x58)
          goto LABEL_1743;
        if ((unint64_t)(v1250 - &v1259[v1254]) < 0x20)
          goto LABEL_1743;
        v1262 = (v1261 >> 3) + 1;
        v1263 = 8 * (v1262 & 0x3FFFFFFFFFFFFFFCLL);
        v1264 = &v1250[-v1263];
        v1260 = (_QWORD *)((char *)v1260 - v1263);
        v1265 = &v1259[8 * v1255 - 16];
        v1266 = v1250 - 16;
        v1267 = v1262 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1268 = *(_OWORD *)v1266;
          *(v1265 - 1) = *((_OWORD *)v1266 - 1);
          *v1265 = v1268;
          v1265 -= 2;
          v1266 -= 32;
          v1267 -= 4;
        }
        while (v1267);
        v1250 = v1264;
        if (v1262 != (v1262 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1743:
          do
          {
            v1269 = *((_QWORD *)v1250 - 1);
            v1250 -= 8;
            *--v1260 = v1269;
          }
          while (v1250 != v1253);
        }
        v1250 = *v5;
        goto LABEL_1310;
      }
      v1259 = 0;
      v1260 = (_QWORD *)(8 * v1255);
      *(_QWORD *)(8 * v1255) = v1249;
      v1252 = 8 * v1255 + 8;
      if (v1250 != v1253)
        goto LABEL_1303;
LABEL_1310:
      *(_QWORD *)(a1 + 2624) = v1260;
      *(_QWORD *)(a1 + 2632) = v1252;
      *(_QWORD *)(a1 + 2640) = &v1259[8 * v1258];
      if (v1250)
        operator delete(v1250);
LABEL_1312:
      *(_QWORD *)(a1 + 2632) = v1252;
      v1270 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1271 = (void *)operator new[]();
      bzero(v1271, 4 * v1270);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v1018) = v1271;
      v1272 = *(char **)(a1 + 2632);
      v1273 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1272 < v1273)
      {
        *(_QWORD *)v1272 = v1271;
        v1274 = (uint64_t)(v1272 + 8);
        goto LABEL_1334;
      }
      v1275 = *v5;
      v1276 = v1272 - *v5;
      v1277 = v1276 >> 3;
      v1278 = (v1276 >> 3) + 1;
      if (v1278 >> 61)
        goto LABEL_1698;
      v1279 = v1273 - (_QWORD)v1275;
      if (v1279 >> 2 > v1278)
        v1278 = v1279 >> 2;
      if ((unint64_t)v1279 >= 0x7FFFFFFFFFFFFFF8)
        v1280 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1280 = v1278;
      if (v1280)
      {
        if (v1280 >> 61)
          goto LABEL_1699;
        v1281 = operator new(8 * v1280);
        v1282 = &v1281[8 * v1277];
        *v1282 = v1271;
        v1274 = (uint64_t)(v1282 + 1);
        if (v1272 == v1275)
          goto LABEL_1332;
LABEL_1325:
        v1283 = v1272 - 8 - v1275;
        if (v1283 < 0x58)
          goto LABEL_1744;
        if ((unint64_t)(v1272 - &v1281[v1276]) < 0x20)
          goto LABEL_1744;
        v1284 = (v1283 >> 3) + 1;
        v1285 = 8 * (v1284 & 0x3FFFFFFFFFFFFFFCLL);
        v1286 = &v1272[-v1285];
        v1282 = (_QWORD *)((char *)v1282 - v1285);
        v1287 = &v1281[8 * v1277 - 16];
        v1288 = v1272 - 16;
        v1289 = v1284 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1290 = *(_OWORD *)v1288;
          *(v1287 - 1) = *((_OWORD *)v1288 - 1);
          *v1287 = v1290;
          v1287 -= 2;
          v1288 -= 32;
          v1289 -= 4;
        }
        while (v1289);
        v1272 = v1286;
        if (v1284 != (v1284 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1744:
          do
          {
            v1291 = *((_QWORD *)v1272 - 1);
            v1272 -= 8;
            *--v1282 = v1291;
          }
          while (v1272 != v1275);
        }
        v1272 = *v5;
        goto LABEL_1332;
      }
      v1281 = 0;
      v1282 = (_QWORD *)(8 * v1277);
      *(_QWORD *)(8 * v1277) = v1271;
      v1274 = 8 * v1277 + 8;
      if (v1272 != v1275)
        goto LABEL_1325;
LABEL_1332:
      *(_QWORD *)(a1 + 2624) = v1282;
      *(_QWORD *)(a1 + 2632) = v1274;
      *(_QWORD *)(a1 + 2640) = &v1281[8 * v1280];
      if (v1272)
        operator delete(v1272);
LABEL_1334:
      *(_QWORD *)(a1 + 2632) = v1274;
      v1292 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1293 = (void *)operator new[]();
      bzero(v1293, 4 * v1292);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v1018) = v1293;
      v1294 = *(char **)(a1 + 2632);
      v1295 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1294 < v1295)
      {
        *(_QWORD *)v1294 = v1293;
        v1296 = (uint64_t)(v1294 + 8);
        goto LABEL_1356;
      }
      v1297 = *v5;
      v1298 = v1294 - *v5;
      v1299 = v1298 >> 3;
      v1300 = (v1298 >> 3) + 1;
      if (v1300 >> 61)
        goto LABEL_1698;
      v1301 = v1295 - (_QWORD)v1297;
      if (v1301 >> 2 > v1300)
        v1300 = v1301 >> 2;
      if ((unint64_t)v1301 >= 0x7FFFFFFFFFFFFFF8)
        v1302 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1302 = v1300;
      if (v1302)
      {
        if (v1302 >> 61)
          goto LABEL_1699;
        v1303 = operator new(8 * v1302);
        v1304 = &v1303[8 * v1299];
        *v1304 = v1293;
        v1296 = (uint64_t)(v1304 + 1);
        if (v1294 == v1297)
          goto LABEL_1354;
LABEL_1347:
        v1305 = v1294 - 8 - v1297;
        if (v1305 < 0x58)
          goto LABEL_1745;
        if ((unint64_t)(v1294 - &v1303[v1298]) < 0x20)
          goto LABEL_1745;
        v1306 = (v1305 >> 3) + 1;
        v1307 = 8 * (v1306 & 0x3FFFFFFFFFFFFFFCLL);
        v1308 = &v1294[-v1307];
        v1304 = (_QWORD *)((char *)v1304 - v1307);
        v1309 = &v1303[8 * v1299 - 16];
        v1310 = v1294 - 16;
        v1311 = v1306 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1312 = *(_OWORD *)v1310;
          *(v1309 - 1) = *((_OWORD *)v1310 - 1);
          *v1309 = v1312;
          v1309 -= 2;
          v1310 -= 32;
          v1311 -= 4;
        }
        while (v1311);
        v1294 = v1308;
        if (v1306 != (v1306 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1745:
          do
          {
            v1313 = *((_QWORD *)v1294 - 1);
            v1294 -= 8;
            *--v1304 = v1313;
          }
          while (v1294 != v1297);
        }
        v1294 = *v5;
        goto LABEL_1354;
      }
      v1303 = 0;
      v1304 = (_QWORD *)(8 * v1299);
      *(_QWORD *)(8 * v1299) = v1293;
      v1296 = 8 * v1299 + 8;
      if (v1294 != v1297)
        goto LABEL_1347;
LABEL_1354:
      *(_QWORD *)(a1 + 2624) = v1304;
      *(_QWORD *)(a1 + 2632) = v1296;
      *(_QWORD *)(a1 + 2640) = &v1303[8 * v1302];
      if (v1294)
        operator delete(v1294);
LABEL_1356:
      *(_QWORD *)(a1 + 2632) = v1296;
      v1314 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1315 = (void *)operator new[]();
      bzero(v1315, 4 * v1314);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v1018) = v1315;
      v1316 = *(char **)(a1 + 2632);
      v1317 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1316 < v1317)
      {
        *(_QWORD *)v1316 = v1315;
        v1318 = (uint64_t)(v1316 + 8);
        goto LABEL_1378;
      }
      v1319 = *v5;
      v1320 = v1316 - *v5;
      v1321 = v1320 >> 3;
      v1322 = (v1320 >> 3) + 1;
      if (v1322 >> 61)
        goto LABEL_1698;
      v1323 = v1317 - (_QWORD)v1319;
      if (v1323 >> 2 > v1322)
        v1322 = v1323 >> 2;
      if ((unint64_t)v1323 >= 0x7FFFFFFFFFFFFFF8)
        v1324 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1324 = v1322;
      if (v1324)
      {
        if (v1324 >> 61)
          goto LABEL_1699;
        v1325 = operator new(8 * v1324);
        v1326 = &v1325[8 * v1321];
        *v1326 = v1315;
        v1318 = (uint64_t)(v1326 + 1);
        if (v1316 == v1319)
          goto LABEL_1376;
LABEL_1369:
        v1327 = v1316 - 8 - v1319;
        if (v1327 < 0x58)
          goto LABEL_1746;
        if ((unint64_t)(v1316 - &v1325[v1320]) < 0x20)
          goto LABEL_1746;
        v1328 = (v1327 >> 3) + 1;
        v1329 = 8 * (v1328 & 0x3FFFFFFFFFFFFFFCLL);
        v1330 = &v1316[-v1329];
        v1326 = (_QWORD *)((char *)v1326 - v1329);
        v1331 = &v1325[8 * v1321 - 16];
        v1332 = v1316 - 16;
        v1333 = v1328 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1334 = *(_OWORD *)v1332;
          *(v1331 - 1) = *((_OWORD *)v1332 - 1);
          *v1331 = v1334;
          v1331 -= 2;
          v1332 -= 32;
          v1333 -= 4;
        }
        while (v1333);
        v1316 = v1330;
        if (v1328 != (v1328 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1746:
          do
          {
            v1335 = *((_QWORD *)v1316 - 1);
            v1316 -= 8;
            *--v1326 = v1335;
          }
          while (v1316 != v1319);
        }
        v1316 = *v5;
        goto LABEL_1376;
      }
      v1325 = 0;
      v1326 = (_QWORD *)(8 * v1321);
      *(_QWORD *)(8 * v1321) = v1315;
      v1318 = 8 * v1321 + 8;
      if (v1316 != v1319)
        goto LABEL_1369;
LABEL_1376:
      *(_QWORD *)(a1 + 2624) = v1326;
      *(_QWORD *)(a1 + 2632) = v1318;
      *(_QWORD *)(a1 + 2640) = &v1325[8 * v1324];
      if (v1316)
        operator delete(v1316);
LABEL_1378:
      *(_QWORD *)(a1 + 2632) = v1318;
      v1336 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1337 = (void *)operator new[]();
      bzero(v1337, 4 * v1336);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v1018) = v1337;
      v1338 = *(char **)(a1 + 2632);
      v1339 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1338 < v1339)
      {
        *(_QWORD *)v1338 = v1337;
        v1340 = (uint64_t)(v1338 + 8);
        goto LABEL_1400;
      }
      v1341 = *v5;
      v1342 = v1338 - *v5;
      v1343 = v1342 >> 3;
      v1344 = (v1342 >> 3) + 1;
      if (v1344 >> 61)
        goto LABEL_1698;
      v1345 = v1339 - (_QWORD)v1341;
      if (v1345 >> 2 > v1344)
        v1344 = v1345 >> 2;
      if ((unint64_t)v1345 >= 0x7FFFFFFFFFFFFFF8)
        v1346 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1346 = v1344;
      if (v1346)
      {
        if (v1346 >> 61)
          goto LABEL_1699;
        v1347 = operator new(8 * v1346);
        v1348 = &v1347[8 * v1343];
        *v1348 = v1337;
        v1340 = (uint64_t)(v1348 + 1);
        if (v1338 == v1341)
          goto LABEL_1398;
LABEL_1391:
        v1349 = v1338 - 8 - v1341;
        if (v1349 < 0x58)
          goto LABEL_1747;
        if ((unint64_t)(v1338 - &v1347[v1342]) < 0x20)
          goto LABEL_1747;
        v1350 = (v1349 >> 3) + 1;
        v1351 = 8 * (v1350 & 0x3FFFFFFFFFFFFFFCLL);
        v1352 = &v1338[-v1351];
        v1348 = (_QWORD *)((char *)v1348 - v1351);
        v1353 = &v1347[8 * v1343 - 16];
        v1354 = v1338 - 16;
        v1355 = v1350 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1356 = *(_OWORD *)v1354;
          *(v1353 - 1) = *((_OWORD *)v1354 - 1);
          *v1353 = v1356;
          v1353 -= 2;
          v1354 -= 32;
          v1355 -= 4;
        }
        while (v1355);
        v1338 = v1352;
        if (v1350 != (v1350 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1747:
          do
          {
            v1357 = *((_QWORD *)v1338 - 1);
            v1338 -= 8;
            *--v1348 = v1357;
          }
          while (v1338 != v1341);
        }
        v1338 = *v5;
        goto LABEL_1398;
      }
      v1347 = 0;
      v1348 = (_QWORD *)(8 * v1343);
      *(_QWORD *)(8 * v1343) = v1337;
      v1340 = 8 * v1343 + 8;
      if (v1338 != v1341)
        goto LABEL_1391;
LABEL_1398:
      *(_QWORD *)(a1 + 2624) = v1348;
      *(_QWORD *)(a1 + 2632) = v1340;
      *(_QWORD *)(a1 + 2640) = &v1347[8 * v1346];
      if (v1338)
        operator delete(v1338);
LABEL_1400:
      *(_QWORD *)(a1 + 2632) = v1340;
      v1358 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1359 = (void *)operator new[]();
      bzero(v1359, 4 * v1358);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v1018) = v1359;
      v1360 = *(char **)(a1 + 2632);
      v1361 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1360 >= v1361)
      {
        v1362 = *v5;
        v1363 = v1360 - *v5;
        v1364 = v1363 >> 3;
        v1365 = (v1363 >> 3) + 1;
        if (v1365 >> 61)
          goto LABEL_1698;
        v1366 = v1361 - (_QWORD)v1362;
        if (v1366 >> 2 > v1365)
          v1365 = v1366 >> 2;
        if ((unint64_t)v1366 >= 0x7FFFFFFFFFFFFFF8)
          v1367 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1367 = v1365;
        if (v1367)
        {
          if (v1367 >> 61)
            goto LABEL_1699;
          v1368 = operator new(8 * v1367);
          v1369 = &v1368[8 * v1364];
          *v1369 = v1359;
          v1019 = (uint64_t)(v1369 + 1);
          if (v1360 == v1362)
            goto LABEL_1419;
LABEL_1412:
          v1370 = v1360 - 8 - v1362;
          if (v1370 < 0x58)
            goto LABEL_1748;
          if ((unint64_t)(v1360 - &v1368[v1363]) < 0x20)
            goto LABEL_1748;
          v1371 = (v1370 >> 3) + 1;
          v1372 = 8 * (v1371 & 0x3FFFFFFFFFFFFFFCLL);
          v1373 = &v1360[-v1372];
          v1369 = (_QWORD *)((char *)v1369 - v1372);
          v1374 = &v1368[8 * v1364 - 16];
          v1375 = v1360 - 16;
          v1376 = v1371 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1377 = *(_OWORD *)v1375;
            *(v1374 - 1) = *((_OWORD *)v1375 - 1);
            *v1374 = v1377;
            v1374 -= 2;
            v1375 -= 32;
            v1376 -= 4;
          }
          while (v1376);
          v1360 = v1373;
          if (v1371 != (v1371 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1748:
            do
            {
              v1378 = *((_QWORD *)v1360 - 1);
              v1360 -= 8;
              *--v1369 = v1378;
            }
            while (v1360 != v1362);
          }
          v1360 = *v5;
        }
        else
        {
          v1368 = 0;
          v1369 = (_QWORD *)(8 * v1364);
          *(_QWORD *)(8 * v1364) = v1359;
          v1019 = 8 * v1364 + 8;
          if (v1360 != v1362)
            goto LABEL_1412;
        }
LABEL_1419:
        *(_QWORD *)(a1 + 2624) = v1369;
        *(_QWORD *)(a1 + 2632) = v1019;
        *(_QWORD *)(a1 + 2640) = &v1368[8 * v1367];
        if (v1360)
          operator delete(v1360);
        goto LABEL_1051;
      }
      *(_QWORD *)v1360 = v1359;
      v1019 = (uint64_t)(v1360 + 8);
LABEL_1051:
      *(_QWORD *)(a1 + 2632) = v1019;
      if (++v1018 == v1635)
        goto LABEL_1421;
    }
    if (v1031 >> 61)
      goto LABEL_1699;
    v1032 = operator new(8 * v1031);
    v1033 = &v1032[8 * v1028];
    *v1033 = v1022;
    v1025 = (uint64_t)(v1033 + 1);
    if (v1023 == v1026)
      goto LABEL_1075;
LABEL_1068:
    v1034 = v1023 - 8 - v1026;
    if (v1034 < 0x58)
      goto LABEL_1749;
    if ((unint64_t)(v1023 - &v1032[v1027]) < 0x20)
      goto LABEL_1749;
    v1035 = (v1034 >> 3) + 1;
    v1036 = 8 * (v1035 & 0x3FFFFFFFFFFFFFFCLL);
    v1037 = &v1023[-v1036];
    v1033 = (_QWORD *)((char *)v1033 - v1036);
    v1038 = &v1032[8 * v1028 - 16];
    v1039 = v1023 - 16;
    v1040 = v1035 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1041 = *(_OWORD *)v1039;
      *(v1038 - 1) = *((_OWORD *)v1039 - 1);
      *v1038 = v1041;
      v1038 -= 2;
      v1039 -= 32;
      v1040 -= 4;
    }
    while (v1040);
    v1023 = v1037;
    if (v1035 != (v1035 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1749:
      do
      {
        v1042 = *((_QWORD *)v1023 - 1);
        v1023 -= 8;
        *--v1033 = v1042;
      }
      while (v1023 != v1026);
    }
    v1023 = *v5;
    goto LABEL_1075;
  }
LABEL_1421:
  if (dword_1EE418968 >= 1)
  {
    v1379 = 0;
    while (1)
    {
      v1382 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v1379);
      v1383 = 1;
      if (*(_BYTE *)(a1 + 40))
        v1383 = 2;
      v1384 = (uint64_t)(v1382[1] - *v1382) >> 2;
      if (v1383 <= v1384)
      {
        if (v1383 < v1384)
          v1382[1] = *v1382 + 4 * v1383;
      }
      else
      {
        sub_19C101928((uint64_t)v1382, v1383 - v1384);
      }
      if (*(_BYTE *)(a1 + 2692))
        break;
LABEL_1482:
      v1431 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1432 = (void *)operator new[]();
      bzero(v1432, 4 * v1431);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v1379) = v1432;
      v1433 = *(char **)(a1 + 2632);
      v1434 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1433 < v1434)
      {
        *(_QWORD *)v1433 = v1432;
        v1435 = (uint64_t)(v1433 + 8);
        goto LABEL_1504;
      }
      v1436 = *v5;
      v1437 = v1433 - *v5;
      v1438 = v1437 >> 3;
      v1439 = (v1437 >> 3) + 1;
      if (v1439 >> 61)
        goto LABEL_1698;
      v1440 = v1434 - (_QWORD)v1436;
      if (v1440 >> 2 > v1439)
        v1439 = v1440 >> 2;
      if ((unint64_t)v1440 >= 0x7FFFFFFFFFFFFFF8)
        v1441 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1441 = v1439;
      if (v1441)
      {
        if (v1441 >> 61)
          goto LABEL_1699;
        v1442 = operator new(8 * v1441);
        v1443 = &v1442[8 * v1438];
        *v1443 = v1432;
        v1435 = (uint64_t)(v1443 + 1);
        if (v1433 == v1436)
          goto LABEL_1502;
LABEL_1495:
        v1444 = v1433 - 8 - v1436;
        if (v1444 < 0x58)
          goto LABEL_1750;
        if ((unint64_t)(v1433 - &v1442[v1437]) < 0x20)
          goto LABEL_1750;
        v1445 = (v1444 >> 3) + 1;
        v1446 = 8 * (v1445 & 0x3FFFFFFFFFFFFFFCLL);
        v1447 = &v1433[-v1446];
        v1443 = (_QWORD *)((char *)v1443 - v1446);
        v1448 = &v1442[8 * v1438 - 16];
        v1449 = v1433 - 16;
        v1450 = v1445 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1451 = *(_OWORD *)v1449;
          *(v1448 - 1) = *((_OWORD *)v1449 - 1);
          *v1448 = v1451;
          v1448 -= 2;
          v1449 -= 32;
          v1450 -= 4;
        }
        while (v1450);
        v1433 = v1447;
        if (v1445 != (v1445 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1750:
          do
          {
            v1452 = *((_QWORD *)v1433 - 1);
            v1433 -= 8;
            *--v1443 = v1452;
          }
          while (v1433 != v1436);
        }
        v1433 = *v5;
        goto LABEL_1502;
      }
      v1442 = 0;
      v1443 = (_QWORD *)(8 * v1438);
      *(_QWORD *)(8 * v1438) = v1432;
      v1435 = 8 * v1438 + 8;
      if (v1433 != v1436)
        goto LABEL_1495;
LABEL_1502:
      *(_QWORD *)(a1 + 2624) = v1443;
      *(_QWORD *)(a1 + 2632) = v1435;
      *(_QWORD *)(a1 + 2640) = &v1442[8 * v1441];
      if (v1433)
        operator delete(v1433);
LABEL_1504:
      *(_QWORD *)(a1 + 2632) = v1435;
      v1453 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1454 = (void *)operator new[]();
      bzero(v1454, 4 * v1453);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v1379) = v1454;
      v1455 = *(char **)(a1 + 2632);
      v1456 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1455 < v1456)
      {
        *(_QWORD *)v1455 = v1454;
        v1457 = (uint64_t)(v1455 + 8);
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        goto LABEL_1523;
      }
      v1458 = *v5;
      v1459 = v1455 - *v5;
      v1460 = v1459 >> 3;
      v1461 = (v1459 >> 3) + 1;
      if (v1461 >> 61)
        goto LABEL_1698;
      v1462 = v1456 - (_QWORD)v1458;
      if (v1462 >> 2 > v1461)
        v1461 = v1462 >> 2;
      if ((unint64_t)v1462 >= 0x7FFFFFFFFFFFFFF8)
        v1463 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1463 = v1461;
      if (v1463)
      {
        if (v1463 >> 61)
          goto LABEL_1699;
        v1464 = operator new(8 * v1463);
        v1465 = &v1464[8 * v1460];
        *v1465 = v1454;
        v1457 = (uint64_t)(v1465 + 1);
        if (v1455 == v1458)
        {
LABEL_1539:
          v1381 = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 2624) = v1465;
          *(_QWORD *)(a1 + 2632) = v1457;
          *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
          if (v1455)
            goto LABEL_1522;
          goto LABEL_1523;
        }
      }
      else
      {
        v1464 = 0;
        v1465 = (_QWORD *)(8 * v1460);
        *(_QWORD *)(8 * v1460) = v1454;
        v1457 = 8 * v1460 + 8;
        if (v1455 == v1458)
          goto LABEL_1539;
      }
      v1466 = v1455 - 8 - v1458;
      v1381 = (void **)(MLPNDArrayLossLabels + 24);
      if (v1466 < 0x58)
        goto LABEL_1751;
      if ((unint64_t)(v1455 - &v1464[v1459]) < 0x20)
        goto LABEL_1751;
      v1467 = (v1466 >> 3) + 1;
      v1468 = 8 * (v1467 & 0x3FFFFFFFFFFFFFFCLL);
      v1469 = &v1455[-v1468];
      v1465 = (_QWORD *)((char *)v1465 - v1468);
      v1470 = &v1464[8 * v1460 - 16];
      v1471 = v1455 - 16;
      v1472 = v1467 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1473 = *(_OWORD *)v1471;
        *(v1470 - 1) = *((_OWORD *)v1471 - 1);
        *v1470 = v1473;
        v1470 -= 2;
        v1471 -= 32;
        v1472 -= 4;
      }
      while (v1472);
      v1455 = v1469;
      if (v1467 != (v1467 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1751:
        do
        {
          v1474 = *((_QWORD *)v1455 - 1);
          v1455 -= 8;
          *--v1465 = v1474;
        }
        while (v1455 != v1458);
      }
      v1455 = *v5;
      *(_QWORD *)(a1 + 2624) = v1465;
      *(_QWORD *)(a1 + 2632) = v1457;
      *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
      if (v1455)
LABEL_1522:
        operator delete(v1455);
LABEL_1523:
      *(_QWORD *)(a1 + 2632) = v1457;
      if (*(_BYTE *)(a1 + 1696))
        goto LABEL_1425;
      v1475 = *(unsigned int *)(a1 + 52);
      v1476 = (void *)operator new[]();
      v1477 = v1476;
      if ((int)v1475 >= 1)
        bzero(v1476, 4 * v1475);
      *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v1379) = v1477;
      v1478 = *(char **)(a1 + 2632);
      v1479 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1478 < v1479)
      {
        *(_QWORD *)v1478 = v1477;
        v1480 = (uint64_t)(v1478 + 8);
        goto LABEL_1551;
      }
      v1481 = *v5;
      v1482 = v1478 - *v5;
      v1483 = v1482 >> 3;
      v1484 = (v1482 >> 3) + 1;
      if (v1484 >> 61)
        goto LABEL_1698;
      v1485 = v1479 - (_QWORD)v1481;
      if (v1485 >> 2 > v1484)
        v1484 = v1485 >> 2;
      if ((unint64_t)v1485 >= 0x7FFFFFFFFFFFFFF8)
        v1486 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1486 = v1484;
      if (v1486)
      {
        if (v1486 >> 61)
          goto LABEL_1699;
        v1487 = operator new(8 * v1486);
        v1488 = &v1487[8 * v1483];
        *v1488 = v1477;
        v1480 = (uint64_t)(v1488 + 1);
        if (v1478 == v1481)
          goto LABEL_1549;
LABEL_1542:
        v1489 = v1478 - 8 - v1481;
        if (v1489 < 0x58)
          goto LABEL_1752;
        if ((unint64_t)(v1478 - &v1487[v1482]) < 0x20)
          goto LABEL_1752;
        v1490 = (v1489 >> 3) + 1;
        v1491 = 8 * (v1490 & 0x3FFFFFFFFFFFFFFCLL);
        v1492 = &v1478[-v1491];
        v1488 = (_QWORD *)((char *)v1488 - v1491);
        v1493 = &v1487[8 * v1483 - 16];
        v1494 = v1478 - 16;
        v1495 = v1490 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1496 = *(_OWORD *)v1494;
          *(v1493 - 1) = *((_OWORD *)v1494 - 1);
          *v1493 = v1496;
          v1493 -= 2;
          v1494 -= 32;
          v1495 -= 4;
        }
        while (v1495);
        v1478 = v1492;
        if (v1490 != (v1490 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1752:
          do
          {
            v1497 = *((_QWORD *)v1478 - 1);
            v1478 -= 8;
            *--v1488 = v1497;
          }
          while (v1478 != v1481);
        }
        v1478 = *v5;
        goto LABEL_1549;
      }
      v1487 = 0;
      v1488 = (_QWORD *)(8 * v1483);
      *(_QWORD *)(8 * v1483) = v1477;
      v1480 = 8 * v1483 + 8;
      if (v1478 != v1481)
        goto LABEL_1542;
LABEL_1549:
      *(_QWORD *)(a1 + 2624) = v1488;
      *(_QWORD *)(a1 + 2632) = v1480;
      *(_QWORD *)(a1 + 2640) = &v1487[8 * v1486];
      if (v1478)
        operator delete(v1478);
LABEL_1551:
      *(_QWORD *)(a1 + 2632) = v1480;
      v1498 = *(unsigned int *)(a1 + 52);
      v1499 = (void *)operator new[]();
      v1500 = v1499;
      if ((int)v1498 >= 1)
        bzero(v1499, 4 * v1498);
      *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v1379) = v1500;
      v1501 = *(char **)(a1 + 2632);
      v1502 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1501 < v1502)
      {
        *(_QWORD *)v1501 = v1500;
        v1503 = (uint64_t)(v1501 + 8);
        goto LABEL_1575;
      }
      v1504 = *v5;
      v1505 = v1501 - *v5;
      v1506 = v1505 >> 3;
      v1507 = (v1505 >> 3) + 1;
      if (v1507 >> 61)
        goto LABEL_1698;
      v1508 = v1502 - (_QWORD)v1504;
      if (v1508 >> 2 > v1507)
        v1507 = v1508 >> 2;
      if ((unint64_t)v1508 >= 0x7FFFFFFFFFFFFFF8)
        v1509 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1509 = v1507;
      if (v1509)
      {
        if (v1509 >> 61)
          goto LABEL_1699;
        v1510 = operator new(8 * v1509);
        v1511 = &v1510[8 * v1506];
        *v1511 = v1500;
        v1503 = (uint64_t)(v1511 + 1);
        if (v1501 == v1504)
          goto LABEL_1573;
LABEL_1566:
        v1512 = v1501 - 8 - v1504;
        if (v1512 < 0x58)
          goto LABEL_1753;
        if ((unint64_t)(v1501 - &v1510[v1505]) < 0x20)
          goto LABEL_1753;
        v1513 = (v1512 >> 3) + 1;
        v1514 = 8 * (v1513 & 0x3FFFFFFFFFFFFFFCLL);
        v1515 = &v1501[-v1514];
        v1511 = (_QWORD *)((char *)v1511 - v1514);
        v1516 = &v1510[8 * v1506 - 16];
        v1517 = v1501 - 16;
        v1518 = v1513 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1519 = *(_OWORD *)v1517;
          *(v1516 - 1) = *((_OWORD *)v1517 - 1);
          *v1516 = v1519;
          v1516 -= 2;
          v1517 -= 32;
          v1518 -= 4;
        }
        while (v1518);
        v1501 = v1515;
        if (v1513 != (v1513 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1753:
          do
          {
            v1520 = *((_QWORD *)v1501 - 1);
            v1501 -= 8;
            *--v1511 = v1520;
          }
          while (v1501 != v1504);
        }
        v1501 = *v5;
        goto LABEL_1573;
      }
      v1510 = 0;
      v1511 = (_QWORD *)(8 * v1506);
      *(_QWORD *)(8 * v1506) = v1500;
      v1503 = 8 * v1506 + 8;
      if (v1501 != v1504)
        goto LABEL_1566;
LABEL_1573:
      *(_QWORD *)(a1 + 2624) = v1511;
      *(_QWORD *)(a1 + 2632) = v1503;
      *(_QWORD *)(a1 + 2640) = &v1510[8 * v1509];
      if (v1501)
        operator delete(v1501);
LABEL_1575:
      *(_QWORD *)(a1 + 2632) = v1503;
      v1521 = *(unsigned int *)(a1 + 48);
      v1522 = (void *)operator new[]();
      v1523 = v1522;
      if ((int)v1521 >= 1)
        bzero(v1522, 4 * v1521);
      *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v1379) = v1523;
      v1524 = *(char **)(a1 + 2632);
      v1525 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1524 < v1525)
      {
        *(_QWORD *)v1524 = v1523;
        v1526 = (uint64_t)(v1524 + 8);
        goto LABEL_1599;
      }
      v1527 = *v5;
      v1528 = v1524 - *v5;
      v1529 = v1528 >> 3;
      v1530 = (v1528 >> 3) + 1;
      if (v1530 >> 61)
        goto LABEL_1698;
      v1531 = v1525 - (_QWORD)v1527;
      if (v1531 >> 2 > v1530)
        v1530 = v1531 >> 2;
      if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
        v1532 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1532 = v1530;
      if (v1532)
      {
        if (v1532 >> 61)
          goto LABEL_1699;
        v1533 = operator new(8 * v1532);
        v1534 = &v1533[8 * v1529];
        *v1534 = v1523;
        v1526 = (uint64_t)(v1534 + 1);
        if (v1524 == v1527)
          goto LABEL_1597;
LABEL_1590:
        v1535 = v1524 - 8 - v1527;
        if (v1535 < 0x58)
          goto LABEL_1754;
        if ((unint64_t)(v1524 - &v1533[v1528]) < 0x20)
          goto LABEL_1754;
        v1536 = (v1535 >> 3) + 1;
        v1537 = 8 * (v1536 & 0x3FFFFFFFFFFFFFFCLL);
        v1538 = &v1524[-v1537];
        v1534 = (_QWORD *)((char *)v1534 - v1537);
        v1539 = &v1533[8 * v1529 - 16];
        v1540 = v1524 - 16;
        v1541 = v1536 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1542 = *(_OWORD *)v1540;
          *(v1539 - 1) = *((_OWORD *)v1540 - 1);
          *v1539 = v1542;
          v1539 -= 2;
          v1540 -= 32;
          v1541 -= 4;
        }
        while (v1541);
        v1524 = v1538;
        if (v1536 != (v1536 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1754:
          do
          {
            v1543 = *((_QWORD *)v1524 - 1);
            v1524 -= 8;
            *--v1534 = v1543;
          }
          while (v1524 != v1527);
        }
        v1524 = *v5;
        goto LABEL_1597;
      }
      v1533 = 0;
      v1534 = (_QWORD *)(8 * v1529);
      *(_QWORD *)(8 * v1529) = v1523;
      v1526 = 8 * v1529 + 8;
      if (v1524 != v1527)
        goto LABEL_1590;
LABEL_1597:
      *(_QWORD *)(a1 + 2624) = v1534;
      *(_QWORD *)(a1 + 2632) = v1526;
      *(_QWORD *)(a1 + 2640) = &v1533[8 * v1532];
      if (v1524)
        operator delete(v1524);
LABEL_1599:
      *(_QWORD *)(a1 + 2632) = v1526;
      v1544 = *(unsigned int *)(a1 + 52);
      v1545 = (void *)operator new[]();
      v1546 = v1545;
      if ((int)v1544 >= 1)
        bzero(v1545, 4 * v1544);
      *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v1379) = v1546;
      v1547 = *(char **)(a1 + 2632);
      v1548 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1547 < v1548)
      {
        *(_QWORD *)v1547 = v1546;
        v1549 = (uint64_t)(v1547 + 8);
        goto LABEL_1623;
      }
      v1550 = *v5;
      v1551 = v1547 - *v5;
      v1552 = v1551 >> 3;
      v1553 = (v1551 >> 3) + 1;
      if (v1553 >> 61)
        goto LABEL_1698;
      v1554 = v1548 - (_QWORD)v1550;
      if (v1554 >> 2 > v1553)
        v1553 = v1554 >> 2;
      if ((unint64_t)v1554 >= 0x7FFFFFFFFFFFFFF8)
        v1555 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1555 = v1553;
      if (v1555)
      {
        if (v1555 >> 61)
          goto LABEL_1699;
        v1556 = operator new(8 * v1555);
        v1557 = &v1556[8 * v1552];
        *v1557 = v1546;
        v1549 = (uint64_t)(v1557 + 1);
        if (v1547 == v1550)
          goto LABEL_1621;
LABEL_1614:
        v1558 = v1547 - 8 - v1550;
        if (v1558 < 0x58)
          goto LABEL_1755;
        if ((unint64_t)(v1547 - &v1556[v1551]) < 0x20)
          goto LABEL_1755;
        v1559 = (v1558 >> 3) + 1;
        v1560 = 8 * (v1559 & 0x3FFFFFFFFFFFFFFCLL);
        v1561 = &v1547[-v1560];
        v1557 = (_QWORD *)((char *)v1557 - v1560);
        v1562 = &v1556[8 * v1552 - 16];
        v1563 = v1547 - 16;
        v1564 = v1559 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1565 = *(_OWORD *)v1563;
          *(v1562 - 1) = *((_OWORD *)v1563 - 1);
          *v1562 = v1565;
          v1562 -= 2;
          v1563 -= 32;
          v1564 -= 4;
        }
        while (v1564);
        v1547 = v1561;
        if (v1559 != (v1559 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1755:
          do
          {
            v1566 = *((_QWORD *)v1547 - 1);
            v1547 -= 8;
            *--v1557 = v1566;
          }
          while (v1547 != v1550);
        }
        v1547 = *v5;
        goto LABEL_1621;
      }
      v1556 = 0;
      v1557 = (_QWORD *)(8 * v1552);
      *(_QWORD *)(8 * v1552) = v1546;
      v1549 = 8 * v1552 + 8;
      if (v1547 != v1550)
        goto LABEL_1614;
LABEL_1621:
      *(_QWORD *)(a1 + 2624) = v1557;
      *(_QWORD *)(a1 + 2632) = v1549;
      *(_QWORD *)(a1 + 2640) = &v1556[8 * v1555];
      if (v1547)
        operator delete(v1547);
LABEL_1623:
      *(_QWORD *)(a1 + 2632) = v1549;
      v1567 = *(unsigned int *)(a1 + 52);
      v1568 = (void *)operator new[]();
      v1569 = v1568;
      if ((int)v1567 >= 1)
        bzero(v1568, 4 * v1567);
      *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v1379) = v1569;
      v1570 = *(char **)(a1 + 2632);
      v1571 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1570 < v1571)
      {
        *(_QWORD *)v1570 = v1569;
        v1572 = (uint64_t)(v1570 + 8);
        goto LABEL_1647;
      }
      v1573 = *v5;
      v1574 = v1570 - *v5;
      v1575 = v1574 >> 3;
      v1576 = (v1574 >> 3) + 1;
      if (v1576 >> 61)
        goto LABEL_1698;
      v1577 = v1571 - (_QWORD)v1573;
      if (v1577 >> 2 > v1576)
        v1576 = v1577 >> 2;
      if ((unint64_t)v1577 >= 0x7FFFFFFFFFFFFFF8)
        v1578 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1578 = v1576;
      if (v1578)
      {
        if (v1578 >> 61)
          goto LABEL_1699;
        v1579 = operator new(8 * v1578);
        v1580 = &v1579[8 * v1575];
        *v1580 = v1569;
        v1572 = (uint64_t)(v1580 + 1);
        if (v1570 == v1573)
          goto LABEL_1645;
LABEL_1638:
        v1581 = v1570 - 8 - v1573;
        if (v1581 < 0x58)
          goto LABEL_1756;
        if ((unint64_t)(v1570 - &v1579[v1574]) < 0x20)
          goto LABEL_1756;
        v1582 = (v1581 >> 3) + 1;
        v1583 = 8 * (v1582 & 0x3FFFFFFFFFFFFFFCLL);
        v1584 = &v1570[-v1583];
        v1580 = (_QWORD *)((char *)v1580 - v1583);
        v1585 = &v1579[8 * v1575 - 16];
        v1586 = v1570 - 16;
        v1587 = v1582 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1588 = *(_OWORD *)v1586;
          *(v1585 - 1) = *((_OWORD *)v1586 - 1);
          *v1585 = v1588;
          v1585 -= 2;
          v1586 -= 32;
          v1587 -= 4;
        }
        while (v1587);
        v1570 = v1584;
        if (v1582 != (v1582 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1756:
          do
          {
            v1589 = *((_QWORD *)v1570 - 1);
            v1570 -= 8;
            *--v1580 = v1589;
          }
          while (v1570 != v1573);
        }
        v1570 = *v5;
        goto LABEL_1645;
      }
      v1579 = 0;
      v1580 = (_QWORD *)(8 * v1575);
      *(_QWORD *)(8 * v1575) = v1569;
      v1572 = 8 * v1575 + 8;
      if (v1570 != v1573)
        goto LABEL_1638;
LABEL_1645:
      *(_QWORD *)(a1 + 2624) = v1580;
      *(_QWORD *)(a1 + 2632) = v1572;
      *(_QWORD *)(a1 + 2640) = &v1579[8 * v1578];
      if (v1570)
        operator delete(v1570);
LABEL_1647:
      *(_QWORD *)(a1 + 2632) = v1572;
      v1590 = *(unsigned int *)(a1 + 52);
      v1591 = (void *)operator new[]();
      v1592 = v1591;
      if ((int)v1590 >= 1)
        bzero(v1591, 4 * v1590);
      *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v1379) = v1592;
      v1593 = *(char **)(a1 + 2632);
      v1594 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1593 < v1594)
      {
        *(_QWORD *)v1593 = v1592;
        v1595 = (uint64_t)(v1593 + 8);
        goto LABEL_1671;
      }
      v1596 = *v5;
      v1597 = v1593 - *v5;
      v1598 = v1597 >> 3;
      v1599 = (v1597 >> 3) + 1;
      if (v1599 >> 61)
        goto LABEL_1698;
      v1600 = v1594 - (_QWORD)v1596;
      if (v1600 >> 2 > v1599)
        v1599 = v1600 >> 2;
      if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFF8)
        v1601 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1601 = v1599;
      if (v1601)
      {
        if (v1601 >> 61)
          goto LABEL_1699;
        v1602 = operator new(8 * v1601);
        v1603 = &v1602[8 * v1598];
        *v1603 = v1592;
        v1595 = (uint64_t)(v1603 + 1);
        if (v1593 == v1596)
          goto LABEL_1669;
LABEL_1662:
        v1604 = v1593 - 8 - v1596;
        if (v1604 < 0x58)
          goto LABEL_1757;
        if ((unint64_t)(v1593 - &v1602[v1597]) < 0x20)
          goto LABEL_1757;
        v1605 = (v1604 >> 3) + 1;
        v1606 = 8 * (v1605 & 0x3FFFFFFFFFFFFFFCLL);
        v1607 = &v1593[-v1606];
        v1603 = (_QWORD *)((char *)v1603 - v1606);
        v1608 = &v1602[8 * v1598 - 16];
        v1609 = v1593 - 16;
        v1610 = v1605 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1611 = *(_OWORD *)v1609;
          *(v1608 - 1) = *((_OWORD *)v1609 - 1);
          *v1608 = v1611;
          v1608 -= 2;
          v1609 -= 32;
          v1610 -= 4;
        }
        while (v1610);
        v1593 = v1607;
        if (v1605 != (v1605 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1757:
          do
          {
            v1612 = *((_QWORD *)v1593 - 1);
            v1593 -= 8;
            *--v1603 = v1612;
          }
          while (v1593 != v1596);
        }
        v1593 = *v5;
        goto LABEL_1669;
      }
      v1602 = 0;
      v1603 = (_QWORD *)(8 * v1598);
      *(_QWORD *)(8 * v1598) = v1592;
      v1595 = 8 * v1598 + 8;
      if (v1593 != v1596)
        goto LABEL_1662;
LABEL_1669:
      *(_QWORD *)(a1 + 2624) = v1603;
      *(_QWORD *)(a1 + 2632) = v1595;
      *(_QWORD *)(a1 + 2640) = &v1602[8 * v1601];
      if (v1593)
        operator delete(v1593);
LABEL_1671:
      *(_QWORD *)(a1 + 2632) = v1595;
      v1613 = *(unsigned int *)(a1 + 52);
      v1614 = (void *)operator new[]();
      v1615 = v1614;
      if ((int)v1613 >= 1)
        bzero(v1614, 4 * v1613);
      *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v1379) = v1615;
      v1616 = *(char **)(a1 + 2632);
      v1617 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1616 < v1617)
      {
        *(_QWORD *)v1616 = v1615;
        v1380 = (uint64_t)(v1616 + 8);
        v1381 = MLPNDArrayLossLabels.vtable;
      }
      else
      {
        v1618 = *v5;
        v1619 = v1616 - *v5;
        v1620 = v1619 >> 3;
        v1621 = (v1619 >> 3) + 1;
        if (v1621 >> 61)
          goto LABEL_1698;
        v1622 = v1617 - (_QWORD)v1618;
        if (v1622 >> 2 > v1621)
          v1621 = v1622 >> 2;
        if ((unint64_t)v1622 >= 0x7FFFFFFFFFFFFFF8)
          v1623 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1623 = v1621;
        if (v1623)
        {
          if (v1623 >> 61)
            goto LABEL_1699;
          v1624 = operator new(8 * v1623);
          v1625 = &v1624[8 * v1620];
          *v1625 = v1615;
          v1380 = (uint64_t)(v1625 + 1);
          if (v1616 != v1618)
          {
LABEL_1683:
            v1626 = v1616 - 8 - v1618;
            v1381 = (void **)(MLPNDArrayLossLabels + 24);
            if (v1626 < 0x58)
              goto LABEL_1758;
            if ((unint64_t)(v1616 - &v1624[v1619]) < 0x20)
              goto LABEL_1758;
            v1627 = (v1626 >> 3) + 1;
            v1628 = 8 * (v1627 & 0x3FFFFFFFFFFFFFFCLL);
            v1629 = &v1616[-v1628];
            v1625 = (_QWORD *)((char *)v1625 - v1628);
            v1630 = &v1624[8 * v1620 - 16];
            v1631 = v1616 - 16;
            v1632 = v1627 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1633 = *(_OWORD *)v1631;
              *(v1630 - 1) = *((_OWORD *)v1631 - 1);
              *v1630 = v1633;
              v1630 -= 2;
              v1631 -= 32;
              v1632 -= 4;
            }
            while (v1632);
            v1616 = v1629;
            if (v1627 != (v1627 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1758:
              do
              {
                v1634 = *((_QWORD *)v1616 - 1);
                v1616 -= 8;
                *--v1625 = v1634;
              }
              while (v1616 != v1618);
            }
            v1616 = *v5;
            *(_QWORD *)(a1 + 2624) = v1625;
            *(_QWORD *)(a1 + 2632) = v1380;
            *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
            if (!v1616)
              goto LABEL_1424;
LABEL_1693:
            operator delete(v1616);
            goto LABEL_1424;
          }
        }
        else
        {
          v1624 = 0;
          v1625 = (_QWORD *)(8 * v1620);
          *(_QWORD *)(8 * v1620) = v1615;
          v1380 = 8 * v1620 + 8;
          if (v1616 != v1618)
            goto LABEL_1683;
        }
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v1625;
        *(_QWORD *)(a1 + 2632) = v1380;
        *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
        if (v1616)
          goto LABEL_1693;
      }
LABEL_1424:
      *(_QWORD *)(a1 + 2632) = v1380;
LABEL_1425:
      if (++v1379 >= *((int *)v1381 + 602))
        return;
    }
    v1385 = *(unsigned int *)(a1 + 52);
    v1386 = (void *)operator new[]();
    v1387 = v1386;
    if ((int)v1385 >= 1)
      bzero(v1386, 4 * v1385);
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v1379) = v1387;
    v1388 = *(char **)(a1 + 2632);
    v1389 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v1388 < v1389)
    {
      *(_QWORD *)v1388 = v1387;
      v1390 = (uint64_t)(v1388 + 8);
      goto LABEL_1457;
    }
    v1391 = *v5;
    v1392 = v1388 - *v5;
    v1393 = v1392 >> 3;
    v1394 = (v1392 >> 3) + 1;
    if (v1394 >> 61)
      goto LABEL_1698;
    v1395 = v1389 - (_QWORD)v1391;
    if (v1395 >> 2 > v1394)
      v1394 = v1395 >> 2;
    if ((unint64_t)v1395 >= 0x7FFFFFFFFFFFFFF8)
      v1396 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v1396 = v1394;
    if (v1396)
    {
      if (v1396 >> 61)
        goto LABEL_1699;
      v1397 = operator new(8 * v1396);
      v1398 = &v1397[8 * v1393];
      *v1398 = v1387;
      v1390 = (uint64_t)(v1398 + 1);
      if (v1388 == v1391)
        goto LABEL_1455;
    }
    else
    {
      v1397 = 0;
      v1398 = (_QWORD *)(8 * v1393);
      *(_QWORD *)(8 * v1393) = v1387;
      v1390 = 8 * v1393 + 8;
      if (v1388 == v1391)
      {
LABEL_1455:
        *(_QWORD *)(a1 + 2624) = v1398;
        *(_QWORD *)(a1 + 2632) = v1390;
        *(_QWORD *)(a1 + 2640) = &v1397[8 * v1396];
        if (v1388)
          operator delete(v1388);
LABEL_1457:
        *(_QWORD *)(a1 + 2632) = v1390;
        v1408 = *(unsigned int *)(a1 + 52);
        v1409 = (void *)operator new[]();
        v1410 = v1409;
        if ((int)v1408 >= 1)
          bzero(v1409, 4 * v1408);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v1379) = v1410;
        v1411 = *(char **)(a1 + 2632);
        v1412 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1411 < v1412)
        {
          *(_QWORD *)v1411 = v1410;
          v1413 = (uint64_t)(v1411 + 8);
LABEL_1481:
          *(_QWORD *)(a1 + 2632) = v1413;
          goto LABEL_1482;
        }
        v1414 = *v5;
        v1415 = v1411 - *v5;
        v1416 = v1415 >> 3;
        v1417 = (v1415 >> 3) + 1;
        if (v1417 >> 61)
          goto LABEL_1698;
        v1418 = v1412 - (_QWORD)v1414;
        if (v1418 >> 2 > v1417)
          v1417 = v1418 >> 2;
        if ((unint64_t)v1418 >= 0x7FFFFFFFFFFFFFF8)
          v1419 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1419 = v1417;
        if (v1419)
        {
          if (v1419 >> 61)
            goto LABEL_1699;
          v1420 = operator new(8 * v1419);
          v1421 = &v1420[8 * v1416];
          *v1421 = v1410;
          v1413 = (uint64_t)(v1421 + 1);
          if (v1411 == v1414)
            goto LABEL_1479;
        }
        else
        {
          v1420 = 0;
          v1421 = (_QWORD *)(8 * v1416);
          *(_QWORD *)(8 * v1416) = v1410;
          v1413 = 8 * v1416 + 8;
          if (v1411 == v1414)
          {
LABEL_1479:
            *(_QWORD *)(a1 + 2624) = v1421;
            *(_QWORD *)(a1 + 2632) = v1413;
            *(_QWORD *)(a1 + 2640) = &v1420[8 * v1419];
            if (v1411)
              operator delete(v1411);
            goto LABEL_1481;
          }
        }
        v1422 = v1411 - 8 - v1414;
        if (v1422 < 0x58)
          goto LABEL_1759;
        if ((unint64_t)(v1411 - &v1420[v1415]) < 0x20)
          goto LABEL_1759;
        v1423 = (v1422 >> 3) + 1;
        v1424 = 8 * (v1423 & 0x3FFFFFFFFFFFFFFCLL);
        v1425 = &v1411[-v1424];
        v1421 = (_QWORD *)((char *)v1421 - v1424);
        v1426 = &v1420[8 * v1416 - 16];
        v1427 = v1411 - 16;
        v1428 = v1423 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1429 = *(_OWORD *)v1427;
          *(v1426 - 1) = *((_OWORD *)v1427 - 1);
          *v1426 = v1429;
          v1426 -= 2;
          v1427 -= 32;
          v1428 -= 4;
        }
        while (v1428);
        v1411 = v1425;
        if (v1423 != (v1423 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1759:
          do
          {
            v1430 = *((_QWORD *)v1411 - 1);
            v1411 -= 8;
            *--v1421 = v1430;
          }
          while (v1411 != v1414);
        }
        v1411 = *v5;
        goto LABEL_1479;
      }
    }
    v1399 = v1388 - 8 - v1391;
    if (v1399 < 0x58)
      goto LABEL_1760;
    if ((unint64_t)(v1388 - &v1397[v1392]) < 0x20)
      goto LABEL_1760;
    v1400 = (v1399 >> 3) + 1;
    v1401 = 8 * (v1400 & 0x3FFFFFFFFFFFFFFCLL);
    v1402 = &v1388[-v1401];
    v1398 = (_QWORD *)((char *)v1398 - v1401);
    v1403 = &v1397[8 * v1393 - 16];
    v1404 = v1388 - 16;
    v1405 = v1400 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1406 = *(_OWORD *)v1404;
      *(v1403 - 1) = *((_OWORD *)v1404 - 1);
      *v1403 = v1406;
      v1403 -= 2;
      v1404 -= 32;
      v1405 -= 4;
    }
    while (v1405);
    v1388 = v1402;
    if (v1400 != (v1400 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1760:
      do
      {
        v1407 = *((_QWORD *)v1388 - 1);
        v1388 -= 8;
        *--v1398 = v1407;
      }
      while (v1388 != v1391);
    }
    v1388 = *v5;
    goto LABEL_1455;
  }
}

void sub_19C149304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C149318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C14932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C149340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C149354()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C149364(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19C14936C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 99;
  v3 = a1[20];
  v4 = a1[21];
  v5 = (v4 - v3) >> 3;
  v6 = a1[99];
  v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7)
      a1[100] = v6 + 8 * v5;
  }
  else
  {
    sub_19C098930((void **)a1 + 99, v5 - v7);
    v3 = a1[20];
    v4 = a1[21];
    v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    v8 = *v2;
    if (v5 <= 1)
      v9 = 1;
    else
      v9 = v5;
    if (v9 < 4)
    {
      v10 = 0;
LABEL_14:
      v15 = (_QWORD *)(v8 + 8 * v10);
      v16 = (uint64_t *)(v3 + 8 * v10);
      v17 = v9 - v10;
      do
      {
        v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = (__int128 *)(v3 + 16);
    v12 = (_OWORD *)(v8 + 16);
    v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10)
      goto LABEL_14;
  }
  return v2;
}

void sub_19C14944C()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C14945C(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19C149464()
{
  return 0;
}

_BYTE *sub_19C14946C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  int v64;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 2568);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1697);
  v24 = sub_19C2210A4();
  sub_19C101BB8(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  v25 = *(_BYTE **)(a1 + 2576);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1697);
  v28 = sub_19C2210A4();
  sub_19C101BB8(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  v29 = *(_BYTE **)(a1 + 2584);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1697);
  v32 = sub_19C2210A4();
  sub_19C101BB8(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  v33 = *(_BYTE **)(a1 + 2504);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1697);
  v36 = sub_19C2210A4();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v37 = *(_BYTE **)(a1 + 2512);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1697);
  v40 = sub_19C2210A4();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v41 = *(_BYTE **)(a1 + 2520);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1697);
  v44 = sub_19C2210A4();
  sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v45 = *(_BYTE **)(a1 + 2528);
  v46 = *a3;
  v47 = *(unsigned __int8 *)(a1 + 1697);
  v48 = sub_19C2210A4();
  sub_19C101DB0(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v49 = *(_BYTE **)(a1 + 2536);
  v50 = *a3;
  v51 = *(unsigned __int8 *)(a1 + 1697);
  v52 = sub_19C2210A4();
  sub_19C101DB0(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v53 = *(_BYTE **)(a1 + 2544);
  v54 = *a3;
  v55 = *(unsigned __int8 *)(a1 + 1697);
  v56 = sub_19C2210A4();
  sub_19C101DB0(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v57 = *(_BYTE **)(a1 + 2552);
  v58 = *a3;
  v59 = *(unsigned __int8 *)(a1 + 1697);
  v60 = sub_19C2210A4();
  sub_19C101DB0(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v61 = *(_BYTE **)(a1 + 2560);
  v62 = *a3;
  v63 = *(unsigned __int8 *)(a1 + 1697);
  v64 = sub_19C2210A4();
  return sub_19C101DB0(v61, (uint64_t *)a2, v62, v63, v64, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C1497E0(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  void **v11;
  int v12;
  void **v13;
  int v14;
  void **v15;
  int v16;
  void **v17;
  int v18;
  void **v19;
  int v20;
  void **v21;
  int v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  void **v27;
  int v28;
  void **v29;
  int v30;
  void **v31;
  int v32;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(void ***)(a1 + 2568);
  v12 = sub_19C2210A4();
  sub_19C11A244(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52));
  v13 = *(void ***)(a1 + 2576);
  v14 = sub_19C2210A4();
  sub_19C11A244(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52));
  v15 = *(void ***)(a1 + 2584);
  v16 = sub_19C2210A4();
  sub_19C11A244(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52));
  v17 = *(void ***)(a1 + 2504);
  v18 = sub_19C2210A4();
  sub_19C14FD4C(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v19 = *(void ***)(a1 + 2512);
  v20 = sub_19C2210A4();
  sub_19C14FD4C(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v21 = *(void ***)(a1 + 2520);
  v22 = sub_19C2210A4();
  sub_19C14FD4C(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v23 = *(void ***)(a1 + 2528);
  v24 = sub_19C2210A4();
  sub_19C14FD4C(v23, __stream, a3, 3, v24, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(void ***)(a1 + 2536);
  v26 = sub_19C2210A4();
  sub_19C14FD4C(v25, __stream, a3, 3, v26, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v27 = *(void ***)(a1 + 2544);
  v28 = sub_19C2210A4();
  sub_19C14FD4C(v27, __stream, a3, 3, v28, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v29 = *(void ***)(a1 + 2552);
  v30 = sub_19C2210A4();
  sub_19C14FD4C(v29, __stream, a3, 3, v30, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v31 = *(void ***)(a1 + 2560);
  v32 = sub_19C2210A4();
  sub_19C14FD4C(v31, __stream, a3, 3, v32, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

float32_t sub_19C149AAC(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  float32x4_t v6;
  _QWORD **v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  __int32 *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  float *v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  uint64_t v81;
  float32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float *v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float32x4_t *v95;
  float32x4_t *v96;
  float32x4_t *v97;
  uint64_t v98;
  float32x4_t *v99;
  float32x4_t *v100;
  float32x4_t *v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  float *v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  uint64_t v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  __int32 *v123;
  float *v124;
  float *v125;
  float v126;
  float v127;
  float v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t *v132;
  uint64_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  float *v141;
  float *v142;
  float *v143;
  float v144;
  float v145;
  float v146;
  float32x4_t *v147;
  float32x4_t *v148;
  float32x4_t *v149;
  uint64_t v150;
  float32x4_t *v151;
  float32x4_t *v152;
  float32x4_t *v153;
  uint64_t v154;
  float32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float32x4_t *v164;
  float32x4_t *v165;
  float32x4_t *v166;
  uint64_t v167;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t *v170;
  uint64_t v171;
  float32x4_t v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  float32x4_t *v187;
  uint64_t v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t v191;
  __int32 *v192;
  float *v193;
  float *v194;
  float v195;
  float v196;
  float v197;

  if (lpsrc)
  {
    v5 = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = *(unsigned int *)(a1 + 52);
    if ((int)v8 < 1)
      goto LABEL_34;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v7 = (_QWORD **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 < 1)
    goto LABEL_34;
LABEL_7:
  v9 = (float32x4_t *)*v7[321];
  v10 = (float32x4_t *)*v5[321];
  v11 = **(float32x4_t ***)(a1 + 2568);
  if (v8 < 8)
  {
    v12 = 0;
LABEL_14:
    v18 = v8 - v12;
    v19 = v12;
    v20 = &v11->f32[v19];
    v21 = &v10->f32[v19];
    v22 = &v9->f32[v19];
    do
    {
      v23 = *v22++;
      v24 = v23;
      v25 = *v21++;
      *v20++ = v24 - v25;
      --v18;
    }
    while (v18);
    goto LABEL_16;
  }
  v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20)
    goto LABEL_14;
  v12 = v8 & 0x7FFFFFF8;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v11 + 1;
  v16 = v8 & 0xFFFFFFF8;
  do
  {
    v17 = vsubq_f32(*v13, *v14);
    v15[-1] = vsubq_f32(v13[-1], v14[-1]);
    *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8)
    goto LABEL_14;
LABEL_16:
  v26 = (float32x4_t *)*v7[322];
  v27 = (float32x4_t *)*v5[322];
  v28 = **(float32x4_t ***)(a1 + 2576);
  if (v8 < 8)
  {
    v29 = 0;
LABEL_23:
    v35 = v8 - v29;
    v36 = v29;
    v37 = &v28->f32[v36];
    v38 = &v27->f32[v36];
    v39 = &v26->f32[v36];
    do
    {
      v40 = *v39++;
      v41 = v40;
      v42 = *v38++;
      *v37++ = v41 - v42;
      --v35;
    }
    while (v35);
    goto LABEL_25;
  }
  v29 = 0;
  if ((unint64_t)((char *)v28 - (char *)v26) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)v28 - (char *)v27) < 0x20)
    goto LABEL_23;
  v29 = v8 & 0x7FFFFFF8;
  v30 = v26 + 1;
  v31 = v27 + 1;
  v32 = v28 + 1;
  v33 = v8 & 0xFFFFFFF8;
  do
  {
    v34 = vsubq_f32(*v30, *v31);
    v32[-1] = vsubq_f32(v30[-1], v31[-1]);
    *v32 = v34;
    v30 += 2;
    v31 += 2;
    v32 += 2;
    v33 -= 8;
  }
  while (v33);
  if (v29 != v8)
    goto LABEL_23;
LABEL_25:
  v43 = (float32x4_t *)*v7[323];
  v44 = (float32x4_t *)*v5[323];
  v45 = **(float32x4_t ***)(a1 + 2584);
  if (v8 < 8)
  {
    v46 = 0;
LABEL_32:
    v52 = v8 - v46;
    v53 = v46;
    v54 = (__int32 *)((char *)v45 + v53 * 4);
    v55 = &v44->f32[v53];
    v56 = &v43->f32[v53];
    do
    {
      v57 = *v56++;
      v58 = v57;
      v59 = *v55++;
      v6.f32[0] = v58 - v59;
      *v54++ = v6.i32[0];
      --v52;
    }
    while (v52);
    goto LABEL_34;
  }
  v46 = 0;
  if ((unint64_t)((char *)v45 - (char *)v43) < 0x20)
    goto LABEL_32;
  if ((unint64_t)((char *)v45 - (char *)v44) < 0x20)
    goto LABEL_32;
  v46 = v8 & 0x7FFFFFF8;
  v47 = v43 + 1;
  v48 = v44 + 1;
  v49 = v45 + 1;
  v50 = v8 & 0xFFFFFFF8;
  do
  {
    v6 = vsubq_f32(v47[-1], v48[-1]);
    v51 = vsubq_f32(*v47, *v48);
    v49[-1] = v6;
    *v49 = v51;
    v47 += 2;
    v48 += 2;
    v49 += 2;
    v50 -= 8;
  }
  while (v50);
  if (v46 != v8)
    goto LABEL_32;
LABEL_34:
  v60 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v60 < 1)
    goto LABEL_71;
  v61 = (float32x4_t *)*v7[313];
  v62 = (float32x4_t *)*v5[313];
  v63 = **(float32x4_t ***)(a1 + 2504);
  if (v60 < 8)
  {
    v64 = 0;
LABEL_42:
    v70 = v60 - v64;
    v71 = v64;
    v72 = &v63->f32[v71];
    v73 = &v62->f32[v71];
    v74 = &v61->f32[v71];
    do
    {
      v75 = *v74++;
      v76 = v75;
      v77 = *v73++;
      *v72++ = v76 - v77;
      --v70;
    }
    while (v70);
    goto LABEL_44;
  }
  v64 = 0;
  if ((unint64_t)((char *)v63 - (char *)v61) < 0x20)
    goto LABEL_42;
  if ((unint64_t)((char *)v63 - (char *)v62) < 0x20)
    goto LABEL_42;
  v64 = v60 & 0x7FFFFFF8;
  v65 = v61 + 1;
  v66 = v62 + 1;
  v67 = v63 + 1;
  v68 = v60 & 0xFFFFFFF8;
  do
  {
    v69 = vsubq_f32(*v65, *v66);
    v67[-1] = vsubq_f32(v65[-1], v66[-1]);
    *v67 = v69;
    v65 += 2;
    v66 += 2;
    v67 += 2;
    v68 -= 8;
  }
  while (v68);
  if (v64 != v60)
    goto LABEL_42;
LABEL_44:
  v78 = (float32x4_t *)*v7[315];
  v79 = (float32x4_t *)*v5[315];
  v80 = **(float32x4_t ***)(a1 + 2520);
  if (v60 < 8)
  {
    v81 = 0;
LABEL_51:
    v87 = v60 - v81;
    v88 = v81;
    v89 = &v80->f32[v88];
    v90 = &v79->f32[v88];
    v91 = &v78->f32[v88];
    do
    {
      v92 = *v91++;
      v93 = v92;
      v94 = *v90++;
      *v89++ = v93 - v94;
      --v87;
    }
    while (v87);
    goto LABEL_53;
  }
  v81 = 0;
  if ((unint64_t)((char *)v80 - (char *)v78) < 0x20)
    goto LABEL_51;
  if ((unint64_t)((char *)v80 - (char *)v79) < 0x20)
    goto LABEL_51;
  v81 = v60 & 0x7FFFFFF8;
  v82 = v78 + 1;
  v83 = v79 + 1;
  v84 = v80 + 1;
  v85 = v60 & 0xFFFFFFF8;
  do
  {
    v86 = vsubq_f32(*v82, *v83);
    v84[-1] = vsubq_f32(v82[-1], v83[-1]);
    *v84 = v86;
    v82 += 2;
    v83 += 2;
    v84 += 2;
    v85 -= 8;
  }
  while (v85);
  if (v81 != v60)
    goto LABEL_51;
LABEL_53:
  v95 = (float32x4_t *)*v7[314];
  v96 = (float32x4_t *)*v5[314];
  v97 = **(float32x4_t ***)(a1 + 2512);
  if (v60 < 8)
  {
    v98 = 0;
LABEL_60:
    v104 = v60 - v98;
    v105 = v98;
    v106 = &v97->f32[v105];
    v107 = &v96->f32[v105];
    v108 = &v95->f32[v105];
    do
    {
      v109 = *v108++;
      v110 = v109;
      v111 = *v107++;
      *v106++ = v110 - v111;
      --v104;
    }
    while (v104);
    goto LABEL_62;
  }
  v98 = 0;
  if ((unint64_t)((char *)v97 - (char *)v95) < 0x20)
    goto LABEL_60;
  if ((unint64_t)((char *)v97 - (char *)v96) < 0x20)
    goto LABEL_60;
  v98 = v60 & 0x7FFFFFF8;
  v99 = v95 + 1;
  v100 = v96 + 1;
  v101 = v97 + 1;
  v102 = v60 & 0xFFFFFFF8;
  do
  {
    v103 = vsubq_f32(*v99, *v100);
    v101[-1] = vsubq_f32(v99[-1], v100[-1]);
    *v101 = v103;
    v99 += 2;
    v100 += 2;
    v101 += 2;
    v102 -= 8;
  }
  while (v102);
  if (v98 != v60)
    goto LABEL_60;
LABEL_62:
  v112 = (float32x4_t *)*v7[316];
  v113 = (float32x4_t *)*v5[316];
  v114 = **(float32x4_t ***)(a1 + 2528);
  if (v60 < 8)
  {
    v115 = 0;
LABEL_69:
    v121 = v60 - v115;
    v122 = v115;
    v123 = (__int32 *)((char *)v114 + v122 * 4);
    v124 = &v113->f32[v122];
    v125 = &v112->f32[v122];
    do
    {
      v126 = *v125++;
      v127 = v126;
      v128 = *v124++;
      v6.f32[0] = v127 - v128;
      *v123++ = v6.i32[0];
      --v121;
    }
    while (v121);
    goto LABEL_71;
  }
  v115 = 0;
  if ((unint64_t)((char *)v114 - (char *)v112) < 0x20)
    goto LABEL_69;
  if ((unint64_t)((char *)v114 - (char *)v113) < 0x20)
    goto LABEL_69;
  v115 = v60 & 0x7FFFFFF8;
  v116 = v112 + 1;
  v117 = v113 + 1;
  v118 = v114 + 1;
  v119 = v60 & 0xFFFFFFF8;
  do
  {
    v6 = vsubq_f32(v116[-1], v117[-1]);
    v120 = vsubq_f32(*v116, *v117);
    v118[-1] = v6;
    *v118 = v120;
    v116 += 2;
    v117 += 2;
    v118 += 2;
    v119 -= 8;
  }
  while (v119);
  if (v115 != v60)
    goto LABEL_69;
LABEL_71:
  if (!(_DWORD)v8)
    return v6.f32[0];
  v129 = (v8 * v8);
  v130 = (float32x4_t *)*v7[317];
  v131 = (float32x4_t *)*v5[317];
  v132 = **(float32x4_t ***)(a1 + 2536);
  if (v129 < 8)
  {
    v133 = 0;
LABEL_79:
    v139 = v129 - v133;
    v140 = v133;
    v141 = &v132->f32[v140];
    v142 = &v131->f32[v140];
    v143 = &v130->f32[v140];
    do
    {
      v144 = *v143++;
      v145 = v144;
      v146 = *v142++;
      *v141++ = v145 - v146;
      --v139;
    }
    while (v139);
    goto LABEL_81;
  }
  v133 = 0;
  if ((unint64_t)((char *)v132 - (char *)v130) < 0x20)
    goto LABEL_79;
  if ((unint64_t)((char *)v132 - (char *)v131) < 0x20)
    goto LABEL_79;
  v133 = v129 & 0x7FFFFFF8;
  v134 = v130 + 1;
  v135 = v131 + 1;
  v136 = v132 + 1;
  v137 = v133;
  do
  {
    v138 = vsubq_f32(*v134, *v135);
    v136[-1] = vsubq_f32(v134[-1], v135[-1]);
    *v136 = v138;
    v134 += 2;
    v135 += 2;
    v136 += 2;
    v137 -= 8;
  }
  while (v137);
  if (v133 != v129)
    goto LABEL_79;
LABEL_81:
  v147 = (float32x4_t *)*v7[319];
  v148 = (float32x4_t *)*v5[319];
  v149 = **(float32x4_t ***)(a1 + 2552);
  if (v129 < 8)
  {
    v150 = 0;
LABEL_88:
    v156 = v129 - v150;
    v157 = v150;
    v158 = &v149->f32[v157];
    v159 = &v148->f32[v157];
    v160 = &v147->f32[v157];
    do
    {
      v161 = *v160++;
      v162 = v161;
      v163 = *v159++;
      *v158++ = v162 - v163;
      --v156;
    }
    while (v156);
    goto LABEL_90;
  }
  v150 = 0;
  if ((unint64_t)((char *)v149 - (char *)v147) < 0x20)
    goto LABEL_88;
  if ((unint64_t)((char *)v149 - (char *)v148) < 0x20)
    goto LABEL_88;
  v150 = v129 & 0x7FFFFFF8;
  v151 = v147 + 1;
  v152 = v148 + 1;
  v153 = v149 + 1;
  v154 = v150;
  do
  {
    v155 = vsubq_f32(*v151, *v152);
    v153[-1] = vsubq_f32(v151[-1], v152[-1]);
    *v153 = v155;
    v151 += 2;
    v152 += 2;
    v153 += 2;
    v154 -= 8;
  }
  while (v154);
  if (v150 != v129)
    goto LABEL_88;
LABEL_90:
  v164 = (float32x4_t *)*v7[318];
  v165 = (float32x4_t *)*v5[318];
  v166 = **(float32x4_t ***)(a1 + 2544);
  if (v129 < 8)
  {
    v167 = 0;
LABEL_97:
    v173 = v129 - v167;
    v174 = v167;
    v175 = &v166->f32[v174];
    v176 = &v165->f32[v174];
    v177 = &v164->f32[v174];
    do
    {
      v178 = *v177++;
      v179 = v178;
      v180 = *v176++;
      *v175++ = v179 - v180;
      --v173;
    }
    while (v173);
    goto LABEL_99;
  }
  v167 = 0;
  if ((unint64_t)((char *)v166 - (char *)v164) < 0x20)
    goto LABEL_97;
  if ((unint64_t)((char *)v166 - (char *)v165) < 0x20)
    goto LABEL_97;
  v167 = v129 & 0x7FFFFFF8;
  v168 = v164 + 1;
  v169 = v165 + 1;
  v170 = v166 + 1;
  v171 = v167;
  do
  {
    v172 = vsubq_f32(*v168, *v169);
    v170[-1] = vsubq_f32(v168[-1], v169[-1]);
    *v170 = v172;
    v168 += 2;
    v169 += 2;
    v170 += 2;
    v171 -= 8;
  }
  while (v171);
  if (v167 != v129)
    goto LABEL_97;
LABEL_99:
  v181 = (float32x4_t *)*v7[320];
  v182 = (float32x4_t *)*v5[320];
  v183 = **(float32x4_t ***)(a1 + 2560);
  if (v129 < 8)
  {
    v184 = 0;
LABEL_106:
    v190 = v129 - v184;
    v191 = v184;
    v192 = (__int32 *)((char *)v183 + v191 * 4);
    v193 = &v182->f32[v191];
    v194 = &v181->f32[v191];
    do
    {
      v195 = *v194++;
      v196 = v195;
      v197 = *v193++;
      v6.f32[0] = v196 - v197;
      *v192++ = v6.i32[0];
      --v190;
    }
    while (v190);
    return v6.f32[0];
  }
  v184 = 0;
  if ((unint64_t)((char *)v183 - (char *)v181) < 0x20)
    goto LABEL_106;
  if ((unint64_t)((char *)v183 - (char *)v182) < 0x20)
    goto LABEL_106;
  v184 = v129 & 0x7FFFFFF8;
  v185 = v181 + 1;
  v186 = v182 + 1;
  v187 = v183 + 1;
  v188 = v184;
  do
  {
    v6 = vsubq_f32(v185[-1], v186[-1]);
    v189 = vsubq_f32(*v185, *v186);
    v187[-1] = v6;
    *v187 = v189;
    v185 += 2;
    v186 += 2;
    v187 += 2;
    v188 -= 8;
  }
  while (v188);
  if (v184 != v129)
    goto LABEL_106;
  return v6.f32[0];
}

void *sub_19C14A318(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  return result;
}

void sub_19C14A380(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  float32x4_t **v4;
  float32x4_t **v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t *v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float v28;
  float32x4_t **v29;
  float32x4_t **v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int v38;
  float32x4_t *v39;
  float32x4_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float v53;
  float32x4_t **v54;
  float32x4_t **v55;
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  float32x4_t *v64;
  float32x4_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t v74;
  uint64_t v75;
  float *v76;
  float *v77;
  float v78;
  const float **v79;
  const float **v80;
  vDSP_Length v81;
  const float **v82;
  const float **v83;
  vDSP_Length v84;
  const float **v85;
  const float **v86;
  vDSP_Length v87;
  const float **v88;
  const float **v89;
  vDSP_Length v90;
  const float **v91;
  const float **v92;
  vDSP_Length v93;
  const float **v94;
  const float **v95;
  vDSP_Length v96;
  const float **v97;
  const float **v98;
  vDSP_Length v99;
  const float **v100;
  const float **v101;
  vDSP_Length v102;
  float __B;

  if (lpsrc)
    v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  else
    v3 = 0;
  v4 = *(float32x4_t ***)(a1 + 2568);
  v5 = (float32x4_t **)v3[321];
  v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    v7 = *v4;
    v8 = *v5;
    v9 = (int)v6 / 8;
    do
    {
      v10 = *v8;
      v11 = v8[1];
      v8 += 2;
      v12 = vaddq_f32(v7[1], v11);
      *v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  v13 = 8 * ((int)v6 / 8);
  if (v13 < (int)v6)
  {
    v14 = *v5;
    v15 = *v4;
    v16 = v13;
    v17 = v6 - v13;
    if (v17 < 8)
      goto LABEL_14;
    v18 = 4 * v13;
    if ((char *)v15 + v18 < (char *)&v14->f32[v6] && (char *)v14 + v18 < (char *)&v15->f32[v6])
      goto LABEL_14;
    v19 = v17 - (v6 & 7) + v13;
    v20 = v13 + (unint64_t)(v6 & 7) - v6;
    v21 = v18 + 16;
    v22 = (float32x4_t *)((char *)v14 + v18 + 16);
    v23 = (float32x4_t *)((char *)v15 + v21);
    do
    {
      v24 = vaddq_f32(*v23, *v22);
      v23[-1] = vaddq_f32(v23[-1], v22[-1]);
      *v23 = v24;
      v22 += 2;
      v23 += 2;
      v20 += 8;
    }
    while (v20);
    v16 = v19;
    if ((v6 & 7) != 0)
    {
LABEL_14:
      v25 = v6 - v16;
      v26 = &v15->f32[v16];
      v27 = &v14->f32[v16];
      do
      {
        v28 = *v27++;
        *v26 = *v26 + v28;
        ++v26;
        --v25;
      }
      while (v25);
    }
  }
  v29 = *(float32x4_t ***)(a1 + 2576);
  v30 = (float32x4_t **)v3[322];
  v31 = *(int *)(a1 + 52);
  if ((int)v31 >= 8)
  {
    v32 = *v29;
    v33 = *v30;
    v34 = (int)v31 / 8;
    do
    {
      v35 = *v33;
      v36 = v33[1];
      v33 += 2;
      v37 = vaddq_f32(v32[1], v36);
      *v32 = vaddq_f32(*v32, v35);
      v32[1] = v37;
      v32 += 2;
      --v34;
    }
    while (v34);
  }
  v38 = 8 * ((int)v31 / 8);
  if (v38 < (int)v31)
  {
    v39 = *v30;
    v40 = *v29;
    v41 = v38;
    v42 = v31 - v38;
    if (v42 < 8)
      goto LABEL_26;
    v43 = 4 * v38;
    if ((char *)v40 + v43 < (char *)&v39->f32[v31] && (char *)v39 + v43 < (char *)&v40->f32[v31])
      goto LABEL_26;
    v44 = v42 - (v31 & 7) + v38;
    v45 = v38 + (unint64_t)(v31 & 7) - v31;
    v46 = v43 + 16;
    v47 = (float32x4_t *)((char *)v39 + v43 + 16);
    v48 = (float32x4_t *)((char *)v40 + v46);
    do
    {
      v49 = vaddq_f32(*v48, *v47);
      v48[-1] = vaddq_f32(v48[-1], v47[-1]);
      *v48 = v49;
      v47 += 2;
      v48 += 2;
      v45 += 8;
    }
    while (v45);
    v41 = v44;
    if ((v31 & 7) != 0)
    {
LABEL_26:
      v50 = v31 - v41;
      v51 = &v40->f32[v41];
      v52 = &v39->f32[v41];
      do
      {
        v53 = *v52++;
        *v51 = *v51 + v53;
        ++v51;
        --v50;
      }
      while (v50);
    }
  }
  v54 = *(float32x4_t ***)(a1 + 2584);
  v55 = (float32x4_t **)v3[323];
  v56 = *(int *)(a1 + 52);
  if ((int)v56 >= 8)
  {
    v57 = *v54;
    v58 = *v55;
    v59 = (int)v56 / 8;
    do
    {
      v60 = *v58;
      v61 = v58[1];
      v58 += 2;
      v62 = vaddq_f32(v57[1], v61);
      *v57 = vaddq_f32(*v57, v60);
      v57[1] = v62;
      v57 += 2;
      --v59;
    }
    while (v59);
  }
  v63 = 8 * ((int)v56 / 8);
  if (v63 < (int)v56)
  {
    v64 = *v55;
    v65 = *v54;
    v66 = v63;
    v67 = v56 - v63;
    if (v67 < 8)
      goto LABEL_38;
    v68 = 4 * v63;
    if ((char *)v65 + v68 < (char *)&v64->f32[v56] && (char *)v64 + v68 < (char *)&v65->f32[v56])
      goto LABEL_38;
    v69 = v67 - (v56 & 7) + v63;
    v70 = v63 + (unint64_t)(v56 & 7) - v56;
    v71 = v68 + 16;
    v72 = (float32x4_t *)((char *)v64 + v68 + 16);
    v73 = (float32x4_t *)((char *)v65 + v71);
    do
    {
      v74 = vaddq_f32(*v73, *v72);
      v73[-1] = vaddq_f32(v73[-1], v72[-1]);
      *v73 = v74;
      v72 += 2;
      v73 += 2;
      v70 += 8;
    }
    while (v70);
    v66 = v69;
    if ((v56 & 7) != 0)
    {
LABEL_38:
      v75 = v56 - v66;
      v76 = &v65->f32[v66];
      v77 = &v64->f32[v66];
      do
      {
        v78 = *v77++;
        *v76 = *v76 + v78;
        ++v76;
        --v75;
      }
      while (v75);
    }
  }
  v79 = *(const float ***)(a1 + 2504);
  v80 = (const float **)v3[313];
  v81 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v80, 1, &__B, *v79, 1, (float *)*v79, 1, v81);
  v82 = *(const float ***)(a1 + 2512);
  v83 = (const float **)v3[314];
  v84 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v83, 1, &__B, *v82, 1, (float *)*v82, 1, v84);
  v85 = *(const float ***)(a1 + 2520);
  v86 = (const float **)v3[315];
  v87 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v86, 1, &__B, *v85, 1, (float *)*v85, 1, v87);
  v88 = *(const float ***)(a1 + 2528);
  v89 = (const float **)v3[316];
  v90 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v89, 1, &__B, *v88, 1, (float *)*v88, 1, v90);
  v91 = *(const float ***)(a1 + 2536);
  v92 = (const float **)v3[317];
  v93 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v92, 1, &__B, *v91, 1, (float *)*v91, 1, v93);
  v94 = *(const float ***)(a1 + 2544);
  v95 = (const float **)v3[318];
  v96 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v95, 1, &__B, *v94, 1, (float *)*v94, 1, v96);
  v97 = *(const float ***)(a1 + 2552);
  v98 = (const float **)v3[319];
  v99 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v98, 1, &__B, *v97, 1, (float *)*v97, 1, v99);
  v100 = *(const float ***)(a1 + 2560);
  v101 = (const float **)v3[320];
  v102 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v101, 1, &__B, *v100, 1, (float *)*v100, 1, v102);
}

void sub_19C14A8A4(uint64_t a1, void *lpsrc)
{
  _QWORD **v3;
  float v4;
  float **v5;
  uint64_t v6;
  vDSP_Length v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  float v42;
  const float **v43;
  vDSP_Length v44;
  const float **v45;
  vDSP_Length v46;
  const float **v47;
  vDSP_Length v48;
  const float **v49;
  vDSP_Length v50;
  const float **v51;
  vDSP_Length v52;
  const float **v53;
  vDSP_Length v54;
  const float **v55;
  vDSP_Length v56;
  const float **v57;
  vDSP_Length v58;
  const float **v59;
  vDSP_Length v60;
  const float **v61;
  vDSP_Length v62;
  float32x4_t *v63;
  float32x4_t *v64;
  uint64_t v65;
  float32x4_t v66;
  float v67;
  float __C;
  float __B;

  if (lpsrc)
    v3 = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  else
    v3 = 0;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  LODWORD(v67) = COERCE_UNSIGNED_INT64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552)));
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1552))(*(_QWORD *)(a1 + 1552), *(_QWORD *)(a1 + 2504), (uint64_t)(v3 + 29), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1560))(*(_QWORD *)(a1 + 1560), *(_QWORD *)(a1 + 2512), (uint64_t)(v3 + 30), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1568))(*(_QWORD *)(a1 + 1568), *(_QWORD *)(a1 + 2520), (uint64_t)(v3 + 31), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1576))(*(_QWORD *)(a1 + 1576), *(_QWORD *)(a1 + 2528), (uint64_t)(v3 + 32), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1584))(*(_QWORD *)(a1 + 1584), *(_QWORD *)(a1 + 2536), (uint64_t)(v3 + 33), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1592))(*(_QWORD *)(a1 + 1592), *(_QWORD *)(a1 + 2544), (uint64_t)(v3 + 34), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1600))(*(_QWORD *)(a1 + 1600), *(_QWORD *)(a1 + 2552), (uint64_t)(v3 + 35), v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1608))(*(_QWORD *)(a1 + 1608), *(_QWORD *)(a1 + 2560), (uint64_t)(v3 + 36), v4);
  v5 = *(float ***)(a1 + 2568);
  v6 = *(unsigned int *)(a1 + 52);
  v7 = (int)v6;
  if ((int)v6 <= 0)
  {
    v9 = *v5;
    goto LABEL_39;
  }
  v8 = *v3[321];
  v9 = *v5;
  if (v6 >= 8 && ((unint64_t)v9 >= v8 + 4 * v6 || v8 >= (unint64_t)&v9[v6]))
  {
    v10 = v6 & 0x7FFFFFF8;
    v63 = (float32x4_t *)(v8 + 16);
    v64 = (float32x4_t *)(v9 + 4);
    v65 = v6 & 0xFFFFFFF8;
    v11 = v67;
    do
    {
      v66 = vmlaq_n_f32(*v64, *v63, v67);
      v64[-1] = vmlaq_n_f32(v64[-1], v63[-1], v67);
      *v64 = v66;
      v63 += 2;
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v10 == v6)
      goto LABEL_11;
  }
  else
  {
    v10 = 0;
    v11 = v67;
  }
  v12 = v6 - v10;
  v13 = 4 * v10;
  v14 = &v9[v10];
  v15 = (float *)(v8 + v13);
  do
  {
    v16 = *v15++;
    *v14 = *v14 + (float)(v16 * v11);
    ++v14;
    --v12;
  }
  while (v12);
LABEL_11:
  v17 = *v3[322];
  v18 = **(_QWORD **)(a1 + 2576);
  if (v6 >= 8 && (v18 < v17 + 4 * v6 ? (v19 = v17 >= v18 + 4 * v6) : (v19 = 1), v19))
  {
    v20 = v6 & 0x7FFFFFF8;
    v21 = (float32x4_t *)(v17 + 16);
    v22 = (float32x4_t *)(v18 + 16);
    v23 = v6 & 0xFFFFFFF8;
    do
    {
      v24 = vmlaq_n_f32(*v22, *v21, v11);
      v22[-1] = vmlaq_n_f32(v22[-1], v21[-1], v11);
      *v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    if (v20 == v6)
      goto LABEL_24;
  }
  else
  {
    v20 = 0;
  }
  v25 = v6 - v20;
  v26 = 4 * v20;
  v27 = (float *)(v18 + v26);
  v28 = (float *)(v17 + v26);
  do
  {
    v29 = *v28++;
    *v27 = *v27 + (float)(v29 * v11);
    ++v27;
    --v25;
  }
  while (v25);
LABEL_24:
  v30 = *v3[323];
  v31 = **(_QWORD **)(a1 + 2584);
  if (v6 < 8 || (v31 < v30 + 4 * v6 ? (v32 = v30 >= v31 + 4 * v6) : (v32 = 1), !v32))
  {
    v33 = 0;
LABEL_35:
    v38 = v6 - v33;
    v39 = 4 * v33;
    v40 = (float *)(v31 + v39);
    v41 = (float *)(v30 + v39);
    do
    {
      v42 = *v41++;
      *v40 = *v40 + (float)(v42 * v11);
      ++v40;
      --v38;
    }
    while (v38);
    goto LABEL_39;
  }
  v33 = v6 & 0x7FFFFFF8;
  v34 = (float32x4_t *)(v30 + 16);
  v35 = (float32x4_t *)(v31 + 16);
  v36 = v6 & 0xFFFFFFF8;
  do
  {
    v37 = vmlaq_n_f32(*v35, *v34, v11);
    v35[-1] = vmlaq_n_f32(v35[-1], v34[-1], v11);
    *v35 = v37;
    v34 += 2;
    v35 += 2;
    v36 -= 8;
  }
  while (v36);
  if (v33 != v6)
    goto LABEL_35;
LABEL_39:
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v9, 1, &__B, &__C, v9, 1, v7);
  v43 = *(const float ***)(a1 + 2576);
  v44 = *(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v43, 1, &__B, &__C, (float *)*v43, 1, v44);
  v45 = *(const float ***)(a1 + 2584);
  v46 = *(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v45, 1, &__B, &__C, (float *)*v45, 1, v46);
  v47 = *(const float ***)(a1 + 2504);
  v48 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v47, 1, &__B, &__C, (float *)*v47, 1, v48);
  v49 = *(const float ***)(a1 + 2512);
  v50 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v49, 1, &__B, &__C, (float *)*v49, 1, v50);
  v51 = *(const float ***)(a1 + 2520);
  v52 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v51, 1, &__B, &__C, (float *)*v51, 1, v52);
  v53 = *(const float ***)(a1 + 2528);
  v54 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v53, 1, &__B, &__C, (float *)*v53, 1, v54);
  v55 = *(const float ***)(a1 + 2536);
  v56 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v55, 1, &__B, &__C, (float *)*v55, 1, v56);
  v57 = *(const float ***)(a1 + 2544);
  v58 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v57, 1, &__B, &__C, (float *)*v57, 1, v58);
  v59 = *(const float ***)(a1 + 2552);
  v60 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v59, 1, &__B, &__C, (float *)*v59, 1, v60);
  v61 = *(const float ***)(a1 + 2560);
  v62 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v61, 1, &__B, &__C, (float *)*v61, 1, v62);
}

void sub_19C14ADDC(uint64_t a1, float a2)
{
  const float **v4;
  float v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  const float **v17;
  vDSP_Length v18;
  const float **v19;
  vDSP_Length v20;
  const float **v21;
  vDSP_Length v22;
  const float **v23;
  vDSP_Length v24;
  const float **v25;
  vDSP_Length v26;
  float __C;
  float __B;

  v4 = *(const float ***)(a1 + 2568);
  v5 = -a2;
  v6 = *(int *)(a1 + 52);
  __C = a2;
  __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 2576);
  v8 = *(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 2584);
  v10 = *(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 2504);
  v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 2512);
  v14 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 2520);
  v16 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
  v17 = *(const float ***)(a1 + 2528);
  v18 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v17, 1, &__B, &__C, (float *)*v17, 1, v18);
  v19 = *(const float ***)(a1 + 2536);
  v20 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  v21 = *(const float ***)(a1 + 2544);
  v22 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  v23 = *(const float ***)(a1 + 2552);
  v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  v25 = *(const float ***)(a1 + 2560);
  v26 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
}

uint64_t sub_19C14AFE8(uint64_t result, float a2)
{
  uint64_t v2;
  float32x4_t *v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  uint64_t v8;
  float *v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  float *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  uint64_t v37;
  float *v38;
  float32x4_t *v39;
  uint64_t v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float *v45;
  float32x4_t *v46;
  uint64_t v47;
  float32x4_t *v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  float *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t *v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  float *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  float *v81;

  v2 = *(unsigned int *)(result + 52);
  if ((int)v2 < 1)
    goto LABEL_23;
  v3 = **(float32x4_t ***)(result + 2568);
  if (v2 < 8)
  {
    v4 = 0;
LABEL_7:
    v8 = v2 - v4;
    v9 = &v3->f32[v4];
    do
    {
      *v9 = *v9 * a2;
      ++v9;
      --v8;
    }
    while (v8);
    goto LABEL_9;
  }
  v4 = v2 & 0x7FFFFFF8;
  v5 = v3 + 1;
  v6 = v2 & 0xFFFFFFF8;
  do
  {
    v7 = vmulq_n_f32(*v5, a2);
    v5[-1] = vmulq_n_f32(v5[-1], a2);
    *v5 = v7;
    v5 += 2;
    v6 -= 8;
  }
  while (v6);
  if (v4 != v2)
    goto LABEL_7;
LABEL_9:
  v10 = **(float32x4_t ***)(result + 2576);
  if (v2 >= 8)
  {
    v11 = v2 & 0x7FFFFFF8;
    v12 = v10 + 1;
    v13 = v2 & 0xFFFFFFF8;
    do
    {
      v14 = vmulq_n_f32(*v12, a2);
      v12[-1] = vmulq_n_f32(v12[-1], a2);
      *v12 = v14;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v11 == v2)
      goto LABEL_16;
  }
  else
  {
    v11 = 0;
  }
  v15 = v2 - v11;
  v16 = &v10->f32[v11];
  do
  {
    *v16 = *v16 * a2;
    ++v16;
    --v15;
  }
  while (v15);
LABEL_16:
  v17 = **(float32x4_t ***)(result + 2584);
  if (v2 < 8)
  {
    v18 = 0;
LABEL_21:
    v22 = v2 - v18;
    v23 = &v17->f32[v18];
    do
    {
      *v23 = *v23 * a2;
      ++v23;
      --v22;
    }
    while (v22);
    goto LABEL_23;
  }
  v18 = v2 & 0x7FFFFFF8;
  v19 = v17 + 1;
  v20 = v2 & 0xFFFFFFF8;
  do
  {
    v21 = vmulq_n_f32(*v19, a2);
    v19[-1] = vmulq_n_f32(v19[-1], a2);
    *v19 = v21;
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  if (v18 != v2)
    goto LABEL_21;
LABEL_23:
  v24 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v24 < 1)
    goto LABEL_52;
  v25 = **(float32x4_t ***)(result + 2504);
  if (v24 < 8)
  {
    v26 = 0;
LABEL_29:
    v30 = v24 - v26;
    v31 = &v25->f32[v26];
    do
    {
      *v31 = *v31 * a2;
      ++v31;
      --v30;
    }
    while (v30);
    goto LABEL_31;
  }
  v26 = v24 & 0x7FFFFFF8;
  v27 = v25 + 1;
  v28 = v24 & 0xFFFFFFF8;
  do
  {
    v29 = vmulq_n_f32(*v27, a2);
    v27[-1] = vmulq_n_f32(v27[-1], a2);
    *v27 = v29;
    v27 += 2;
    v28 -= 8;
  }
  while (v28);
  if (v26 != v24)
    goto LABEL_29;
LABEL_31:
  v32 = **(float32x4_t ***)(result + 2512);
  if (v24 < 8)
  {
    v33 = 0;
LABEL_36:
    v37 = v24 - v33;
    v38 = &v32->f32[v33];
    do
    {
      *v38 = *v38 * a2;
      ++v38;
      --v37;
    }
    while (v37);
    goto LABEL_38;
  }
  v33 = v24 & 0x7FFFFFF8;
  v34 = v32 + 1;
  v35 = v24 & 0xFFFFFFF8;
  do
  {
    v36 = vmulq_n_f32(*v34, a2);
    v34[-1] = vmulq_n_f32(v34[-1], a2);
    *v34 = v36;
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v33 != v24)
    goto LABEL_36;
LABEL_38:
  v39 = **(float32x4_t ***)(result + 2520);
  if (v24 < 8)
  {
    v40 = 0;
LABEL_43:
    v44 = v24 - v40;
    v45 = &v39->f32[v40];
    do
    {
      *v45 = *v45 * a2;
      ++v45;
      --v44;
    }
    while (v44);
    goto LABEL_45;
  }
  v40 = v24 & 0x7FFFFFF8;
  v41 = v39 + 1;
  v42 = v24 & 0xFFFFFFF8;
  do
  {
    v43 = vmulq_n_f32(*v41, a2);
    v41[-1] = vmulq_n_f32(v41[-1], a2);
    *v41 = v43;
    v41 += 2;
    v42 -= 8;
  }
  while (v42);
  if (v40 != v24)
    goto LABEL_43;
LABEL_45:
  v46 = **(float32x4_t ***)(result + 2528);
  if (v24 < 8)
  {
    v47 = 0;
LABEL_50:
    v51 = v24 - v47;
    v52 = &v46->f32[v47];
    do
    {
      *v52 = *v52 * a2;
      ++v52;
      --v51;
    }
    while (v51);
    goto LABEL_52;
  }
  v47 = v24 & 0x7FFFFFF8;
  v48 = v46 + 1;
  v49 = v24 & 0xFFFFFFF8;
  do
  {
    v50 = vmulq_n_f32(*v48, a2);
    v48[-1] = vmulq_n_f32(v48[-1], a2);
    *v48 = v50;
    v48 += 2;
    v49 -= 8;
  }
  while (v49);
  if (v47 != v24)
    goto LABEL_50;
LABEL_52:
  if (!(_DWORD)v2)
    return result;
  v53 = (v2 * v2);
  v54 = **(float32x4_t ***)(result + 2536);
  if (v53 < 8)
  {
    v55 = 0;
LABEL_58:
    v59 = v53 - v55;
    v60 = &v54->f32[v55];
    do
    {
      *v60 = *v60 * a2;
      ++v60;
      --v59;
    }
    while (v59);
    goto LABEL_60;
  }
  v55 = v53 & 0x7FFFFFF8;
  v56 = v54 + 1;
  v57 = v55;
  do
  {
    v58 = vmulq_n_f32(*v56, a2);
    v56[-1] = vmulq_n_f32(v56[-1], a2);
    *v56 = v58;
    v56 += 2;
    v57 -= 8;
  }
  while (v57);
  if (v55 != v53)
    goto LABEL_58;
LABEL_60:
  v61 = **(float32x4_t ***)(result + 2544);
  if (v53 < 8)
  {
    v62 = 0;
LABEL_65:
    v66 = v53 - v62;
    v67 = &v61->f32[v62];
    do
    {
      *v67 = *v67 * a2;
      ++v67;
      --v66;
    }
    while (v66);
    goto LABEL_67;
  }
  v62 = v53 & 0x7FFFFFF8;
  v63 = v61 + 1;
  v64 = v62;
  do
  {
    v65 = vmulq_n_f32(*v63, a2);
    v63[-1] = vmulq_n_f32(v63[-1], a2);
    *v63 = v65;
    v63 += 2;
    v64 -= 8;
  }
  while (v64);
  if (v62 != v53)
    goto LABEL_65;
LABEL_67:
  v68 = **(float32x4_t ***)(result + 2552);
  if (v53 < 8)
  {
    v69 = 0;
LABEL_72:
    v73 = v53 - v69;
    v74 = &v68->f32[v69];
    do
    {
      *v74 = *v74 * a2;
      ++v74;
      --v73;
    }
    while (v73);
    goto LABEL_74;
  }
  v69 = v53 & 0x7FFFFFF8;
  v70 = v68 + 1;
  v71 = v69;
  do
  {
    v72 = vmulq_n_f32(*v70, a2);
    v70[-1] = vmulq_n_f32(v70[-1], a2);
    *v70 = v72;
    v70 += 2;
    v71 -= 8;
  }
  while (v71);
  if (v69 != v53)
    goto LABEL_72;
LABEL_74:
  v75 = **(float32x4_t ***)(result + 2560);
  if (v53 < 8)
  {
    v76 = 0;
LABEL_79:
    v80 = v53 - v76;
    v81 = &v75->f32[v76];
    do
    {
      *v81 = *v81 * a2;
      ++v81;
      --v80;
    }
    while (v80);
    return result;
  }
  v76 = v53 & 0x7FFFFFF8;
  v77 = v75 + 1;
  v78 = v76;
  do
  {
    v79 = vmulq_n_f32(*v77, a2);
    v77[-1] = vmulq_n_f32(v77[-1], a2);
    *v77 = v79;
    v77 += 2;
    v78 -= 8;
  }
  while (v78);
  if (v76 != v53)
    goto LABEL_79;
  return result;
}

void sub_19C14B45C(uint64_t a1, uint64_t *a2)
{
  int i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (*(int *)(a1 + 2688) >= 1)
  {
    for (i = 0; i < *(_DWORD *)(a1 + 2688); ++i)
    {
      v6 = (_QWORD *)operator new();
      v7 = *(unsigned int *)(a1 + 52);
      v8 = (void *)operator new[]();
      *v6 = v8;
      if ((int)v7 >= 1)
        bzero(v8, 4 * v7);
      v9 = *(_DWORD *)(a1 + 52);
      v11 = (char *)a2[1];
      v10 = a2[2];
      if ((unint64_t)v11 < v10)
      {
        *(_DWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v6;
        v12 = v11 + 16;
        goto LABEL_24;
      }
      v13 = (char *)*a2;
      v14 = (uint64_t)&v11[-*a2] >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        goto LABEL_43;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 60)
          goto LABEL_44;
        v18 = (char *)operator new(16 * v17);
        v19 = (uint64_t)&v18[16 * v14];
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = v19;
        if (v11 == v13)
          goto LABEL_22;
      }
      else
      {
        v18 = 0;
        v19 = 16 * v14;
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = 16 * v14;
        if (v11 == v13)
          goto LABEL_22;
      }
      do
      {
        *(_OWORD *)(v20 - 16) = *((_OWORD *)v11 - 1);
        v20 -= 16;
        v11 -= 16;
      }
      while (v11 != v13);
      v11 = (char *)*a2;
LABEL_22:
      v12 = (char *)(v19 + 16);
      *a2 = v20;
      a2[1] = v19 + 16;
      a2[2] = (uint64_t)&v18[16 * v17];
      if (v11)
        operator delete(v11);
LABEL_24:
      a2[1] = (uint64_t)v12;
      v21 = (_QWORD *)operator new();
      v22 = *(unsigned int *)(a1 + 52);
      v23 = (void *)operator new[]();
      *v21 = v23;
      if ((int)v22 >= 1)
        bzero(v23, 4 * v22);
      v24 = *(_DWORD *)(a1 + 52);
      v26 = (_QWORD *)a2[1];
      v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        v27 = (_QWORD *)*a2;
        v28 = ((uint64_t)v26 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
LABEL_43:
          sub_19C07DA0C();
        v30 = v25 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 60)
LABEL_44:
            sub_19C07C7FC();
          v32 = (char *)operator new(16 * v31);
          v33 = (uint64_t)&v32[16 * v28];
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = v33;
          if (v26 == v27)
            goto LABEL_40;
          do
          {
LABEL_38:
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v26 - 1);
            v34 -= 16;
            v26 -= 2;
          }
          while (v26 != v27);
          v26 = (_QWORD *)*a2;
        }
        else
        {
          v32 = 0;
          v33 = 16 * v28;
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = 16 * v28;
          if (v26 != v27)
            goto LABEL_38;
        }
LABEL_40:
        v5 = (_QWORD *)(v33 + 16);
        *a2 = v34;
        a2[1] = v33 + 16;
        a2[2] = (uint64_t)&v32[16 * v31];
        if (v26)
          operator delete(v26);
        goto LABEL_4;
      }
      *(_DWORD *)v26 = v24;
      v26[1] = v21;
      v5 = v26 + 2;
LABEL_4:
      a2[1] = (uint64_t)v5;
    }
  }
}

void sub_19C14B760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C14B774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19C14B788(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = *a4;
    v9 = 8 * a3;
    do
    {
      v10 = v6[13];
      v11 = *(_QWORD *)(*((_QWORD *)v6 + 20) + v9);
      v12 = 4 * (int)v10 * v7;
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      v14 = *a4;
      *a4 = v14 + 1;
      v15 = (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v9) + v12);
      v16 = v6[13];
      v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19C14B870(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = 8 * a3;
    do
    {
      v9 = 4 * v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + v8) + v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v8) + v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19C14B944(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19C14B9E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v3 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v4 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v5 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v6 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v7 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v8 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v9 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v11 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v12 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v13 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v14 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v15 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v16 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v17 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
  }
}

void sub_19C14BE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C14BEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;

  v4 = **(_QWORD **)(a1 + 2504);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_134;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_135;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 2512);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_134;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_135;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 2528);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_134;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_135;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 2520);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_134;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_135;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v59 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v60 = **(_QWORD **)(a1 + 2536);
  v61 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    v63 = *(_QWORD **)a2;
    v64 = (uint64_t)v49 - *(_QWORD *)a2;
    v65 = (v64 >> 4) + 1;
    if (v65 >> 60)
      goto LABEL_134;
    v66 = v61 - (_QWORD)v63;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v67 = v65;
    if (v67 >> 60)
      goto LABEL_135;
    v68 = 16 * v67;
    v69 = (char *)operator new(16 * v67);
    v70 = &v69[16 * (v64 >> 4)];
    *(_QWORD *)v70 = v60;
    v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((_QWORD *)v70 + 1) = v49[1])
    {
      v71 = *(v49 - 2);
      v49 -= 2;
      *((_QWORD *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(_QWORD *)a2 = v70;
    *(_QWORD *)(a2 + 8) = v62;
    *(_QWORD *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v49 = v60;
    v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v62;
  v72 = **(_QWORD **)(a1 + 2544);
  v73 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    v75 = *(_QWORD **)a2;
    v76 = (uint64_t)v62 - *(_QWORD *)a2;
    v77 = (v76 >> 4) + 1;
    if (v77 >> 60)
      goto LABEL_134;
    v78 = v73 - (_QWORD)v75;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v79 = v77;
    if (v79 >> 60)
      goto LABEL_135;
    v80 = 16 * v79;
    v81 = (char *)operator new(16 * v79);
    v82 = &v81[16 * (v76 >> 4)];
    *(_QWORD *)v82 = v72;
    v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((_QWORD *)v82 + 1) = v62[1])
    {
      v83 = *(v62 - 2);
      v62 -= 2;
      *((_QWORD *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(_QWORD *)a2 = v82;
    *(_QWORD *)(a2 + 8) = v74;
    *(_QWORD *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v62 = v72;
    v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v74;
  v84 = **(_QWORD **)(a1 + 2560);
  v85 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    v87 = *(_QWORD **)a2;
    v88 = (uint64_t)v74 - *(_QWORD *)a2;
    v89 = (v88 >> 4) + 1;
    if (v89 >> 60)
      goto LABEL_134;
    v90 = v85 - (_QWORD)v87;
    if (v90 >> 3 > v89)
      v89 = v90 >> 3;
    v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v91 = v89;
    if (v91 >> 60)
      goto LABEL_135;
    v92 = 16 * v91;
    v93 = (char *)operator new(16 * v91);
    v94 = &v93[16 * (v88 >> 4)];
    *(_QWORD *)v94 = v84;
    v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((_QWORD *)v94 + 1) = v74[1])
    {
      v95 = *(v74 - 2);
      v74 -= 2;
      *((_QWORD *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(_QWORD *)a2 = v94;
    *(_QWORD *)(a2 + 8) = v86;
    *(_QWORD *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v74 = v84;
    v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v86;
  v96 = **(_QWORD **)(a1 + 2552);
  v97 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    v99 = *(_QWORD **)a2;
    v100 = (uint64_t)v86 - *(_QWORD *)a2;
    v101 = (v100 >> 4) + 1;
    if (v101 >> 60)
      goto LABEL_134;
    v102 = v97 - (_QWORD)v99;
    if (v102 >> 3 > v101)
      v101 = v102 >> 3;
    v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v103 = v101;
    if (v103 >> 60)
      goto LABEL_135;
    v104 = 16 * v103;
    v105 = (char *)operator new(16 * v103);
    v106 = &v105[16 * (v100 >> 4)];
    *(_QWORD *)v106 = v96;
    v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((_QWORD *)v106 + 1) = v86[1])
    {
      v107 = *(v86 - 2);
      v86 -= 2;
      *((_QWORD *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(_QWORD *)a2 = v106;
    *(_QWORD *)(a2 + 8) = v98;
    *(_QWORD *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v86 = v96;
    v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v98;
  v108 = **(_QWORD **)(a1 + 2568);
  v109 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    v111 = *(_QWORD **)a2;
    v112 = (uint64_t)v98 - *(_QWORD *)a2;
    v113 = (v112 >> 4) + 1;
    if (v113 >> 60)
      goto LABEL_134;
    v114 = v109 - (_QWORD)v111;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v115 = v113;
    if (v115 >> 60)
      goto LABEL_135;
    v116 = 16 * v115;
    v117 = (char *)operator new(16 * v115);
    v118 = &v117[16 * (v112 >> 4)];
    *(_QWORD *)v118 = v108;
    v110 = v118 + 16;
    v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((_QWORD *)v118 + 1) = v98[1])
    {
      v120 = *(v98 - 2);
      v98 -= 2;
      *((_QWORD *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(_QWORD *)a2 = v118;
    *(_QWORD *)(a2 + 8) = v110;
    *(_QWORD *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v98 = v108;
    v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v110;
  v121 = **(_QWORD **)(a1 + 2576);
  v122 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    *v110 = v121;
    v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  v124 = *(_QWORD **)a2;
  v125 = (uint64_t)v110 - *(_QWORD *)a2;
  v126 = (v125 >> 4) + 1;
  if (v126 >> 60)
    goto LABEL_134;
  v127 = v122 - (_QWORD)v124;
  if (v127 >> 3 > v126)
    v126 = v127 >> 3;
  v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v128 = v126;
  if (v128 >> 60)
LABEL_135:
    sub_19C07C7FC();
  v129 = 16 * v128;
  v130 = (char *)operator new(16 * v128);
  v131 = &v130[16 * (v125 >> 4)];
  v132 = &v130[v129];
  *(_QWORD *)v131 = v121;
  v123 = v131 + 16;
  v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((_QWORD *)v131 + 1) = v110[1])
  {
    v134 = *(v110 - 2);
    v110 -= 2;
    *((_QWORD *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(_QWORD *)a2 = v131;
  *(_QWORD *)(a2 + 8) = v123;
  *(_QWORD *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(_QWORD *)(a2 + 8) = v123;
  v135 = **(_QWORD **)(a1 + 2584);
  v136 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    *v123 = v135;
    v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  v138 = *(_QWORD **)a2;
  v139 = (uint64_t)v123 - *(_QWORD *)a2;
  v140 = (v139 >> 4) + 1;
  if (v140 >> 60)
LABEL_134:
    sub_19C07DA0C();
  v141 = v136 - (_QWORD)v138;
  if (v141 >> 3 > v140)
    v140 = v141 >> 3;
  v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v142 = v140;
  if (v142 >> 60)
    goto LABEL_135;
  v143 = 16 * v142;
  v144 = (char *)operator new(16 * v142);
  v145 = &v144[16 * (v139 >> 4)];
  v146 = &v144[v143];
  *(_QWORD *)v145 = v135;
  v137 = v145 + 16;
  v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((_QWORD *)v145 + 1) = v123[1])
  {
    v148 = *(v123 - 2);
    v123 -= 2;
    *((_QWORD *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(_QWORD *)a2 = v145;
  *(_QWORD *)(a2 + 8) = v137;
  *(_QWORD *)(a2 + 16) = v146;
  if (v138)
    operator delete(v138);
LABEL_133:
  *(_QWORD *)(a2 + 8) = v137;
}

__n128 sub_19C14C7B0(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19C14C930(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C14C93C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C14C944(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "LSTM alloc, from allocAll");
  sub_19C1422C8(a1);
  operator delete(__p);
}

void sub_19C14C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C14C9E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    v10 = a1[136];
    v11 = a1[135];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  v10 = a1[136];
  v11 = a1[135];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[136];
      v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  v16 = a1[166];
  v17 = a1[165];
  if (v16 == v17)
  {
    v17 = a1[166];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[166];
        v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  v22 = a1[151];
  v23 = a1[150];
  if (v22 == v23)
  {
    v23 = a1[151];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[151];
        v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  v28 = a1[181];
  v29 = a1[180];
  if (v28 == v29)
  {
    v29 = a1[181];
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        v28 = a1[181];
        v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

uint64_t sub_19C14CC4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C14CC54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

float32_t sub_19C14CC60(uint64_t a1, float a2)
{
  int v3;
  unsigned int v4;
  vDSP_Length v5;
  vDSP_Length v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float32x4_t *v31;
  float32x4_t *v32;
  BOOL v33;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t v47;
  float __B;

  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    __B = a2;
    v5 = (int)(v4 * v3);
    vDSP_vsma(*(const float **)(a1 + 1464), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v5);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1480), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v5);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1472), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v5);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1488), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v5);
  }
  else
  {
    sub_19C15014C(a1 + 984, (uint64_t *)(a1 + 232), v4, v3, a2);
    sub_19C15014C(a1 + 1224, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19C15014C(a1 + 1104, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19C15014C(a1 + 1344, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  v6 = v4 * v4;
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1496), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v6);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1512), 1, &__B, *(const float **)(a1 + 280), 1, *(float **)(a1 + 280), 1, v6);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1504), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v6);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1520), 1, &__B, *(const float **)(a1 + 288), 1, *(float **)(a1 + 288), 1, v6);
  v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 < 1)
    return v7.f32[0];
  v9 = *(float32x4_t **)(a1 + 1528);
  v10 = *(float32x4_t **)(a1 + 296);
  v11 = 4 * v8;
  if (v8 >= 8 && (v10 >= (float32x4_t *)((char *)v9 + v11) || v9 >= (float32x4_t *)((char *)v10 + v11)))
  {
    v12 = v8 & 0x7FFFFFF8;
    v44 = v9 + 1;
    v45 = v10 + 1;
    v46 = v8 & 0xFFFFFFF8;
    do
    {
      v47 = vmlaq_n_f32(*v45, *v44, a2);
      v45[-1] = vmlaq_n_f32(v45[-1], v44[-1], a2);
      *v45 = v47;
      v44 += 2;
      v45 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v12 == v8)
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
  }
  v13 = v8 - v12;
  v14 = v12;
  v15 = &v10->f32[v14];
  v16 = &v9->f32[v14];
  do
  {
    v17 = *v16++;
    *v15 = *v15 + (float)(v17 * a2);
    ++v15;
    --v13;
  }
  while (v13);
LABEL_11:
  v18 = *(float32x4_t **)(a1 + 1544);
  v19 = *(float32x4_t **)(a1 + 312);
  if (v8 < 8
    || (v19 < (float32x4_t *)((char *)v18 + v11) ? (v20 = v18 >= (float32x4_t *)((char *)v19 + v11)) : (v20 = 1), !v20))
  {
    v21 = 0;
LABEL_22:
    v26 = v8 - v21;
    v27 = v21;
    v28 = &v19->f32[v27];
    v29 = &v18->f32[v27];
    do
    {
      v30 = *v29++;
      *v28 = *v28 + (float)(v30 * a2);
      ++v28;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  v21 = v8 & 0x7FFFFFF8;
  v22 = v18 + 1;
  v23 = v19 + 1;
  v24 = v8 & 0xFFFFFFF8;
  do
  {
    v25 = vmlaq_n_f32(*v23, *v22, a2);
    v23[-1] = vmlaq_n_f32(v23[-1], v22[-1], a2);
    *v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v21 != v8)
    goto LABEL_22;
LABEL_24:
  v31 = *(float32x4_t **)(a1 + 1536);
  v32 = *(float32x4_t **)(a1 + 304);
  if (v8 < 8
    || (v32 < (float32x4_t *)((char *)v31 + v11) ? (v33 = v31 >= (float32x4_t *)((char *)v32 + v11)) : (v33 = 1), !v33))
  {
    v34 = 0;
LABEL_35:
    v39 = v8 - v34;
    v40 = v34;
    v41 = &v32->f32[v34];
    v42 = &v31->f32[v40];
    do
    {
      v43 = *v42++;
      v7.f32[0] = *v41 + (float)(v43 * a2);
      *v41++ = v7.f32[0];
      --v39;
    }
    while (v39);
    return v7.f32[0];
  }
  v34 = v8 & 0x7FFFFFF8;
  v35 = v31 + 1;
  v36 = v32 + 1;
  v37 = v8 & 0xFFFFFFF8;
  do
  {
    v7 = v35[-1];
    v38 = vmlaq_n_f32(*v36, *v35, a2);
    v36[-1] = vmlaq_n_f32(v36[-1], v7, a2);
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  if (v34 != v8)
    goto LABEL_35;
  return v7.f32[0];
}

void sub_19C14D020(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v6;
  void **v7;
  int v8;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  int v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t v58;
  uint64_t v59;
  float *v60;
  float *v61;
  float *v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  float32x4_t *v74;
  float32x4_t *v75;
  int v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  uint64_t v102;
  uint64_t v103;
  float32x4_t *v104;
  float32x4_t *v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  float *v112;
  float *v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t **v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t *v125;
  int v126;
  float32x4_t *v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int v133;
  uint64_t v134;
  float32x4_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  BOOL v141;
  BOOL v142;
  uint64_t v144;
  uint64_t v145;
  float32x4_t *v146;
  float32x4_t *v147;
  float32x4_t *v148;
  float32x4_t v149;
  uint64_t v150;
  float *v151;
  float *v152;
  float *v153;
  float v154;
  float v155;
  float v156;
  float32x4_t *v157;
  uint64_t v158;
  uint64_t v159;
  float32x4_t **v160;
  uint64_t v161;
  float32x4_t *v162;
  float32x4_t *v163;
  int v164;
  float32x4_t *v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int v171;
  uint64_t v172;
  float32x4_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  BOOL v180;
  uint64_t v182;
  uint64_t v183;
  float32x4_t *v184;
  float32x4_t *v185;
  float32x4_t *v186;
  float32x4_t v187;
  uint64_t v188;
  float *v189;
  float *v190;
  float *v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  float32x4_t **v197;
  uint64_t v198;
  float32x4_t *v199;
  float32x4_t *v200;
  int v201;
  float32x4_t *v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int v208;
  uint64_t v209;
  float32x4_t *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  BOOL v216;
  BOOL v217;
  uint64_t v219;
  uint64_t v220;
  float32x4_t *v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t v224;
  uint64_t v225;
  float *v226;
  float *v227;
  float *v228;
  float v229;
  float v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  float32x4_t *v234;
  float32x4_t *v235;
  int v236;
  float32x4_t *v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  BOOL v250;
  BOOL v251;
  uint64_t v253;
  uint64_t v254;
  float32x4_t *v255;
  float32x4_t *v256;
  float32x4_t *v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  float *v261;
  float *v262;
  float v263;
  float v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  float32x4_t *v271;
  float32x4_t *v272;
  int v273;
  float32x4_t *v274;
  float32x4_t *v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  BOOL v294;
  BOOL v295;
  BOOL v296;
  BOOL v297;
  uint64_t v299;
  uint64_t v300;
  float32x4_t *v301;
  float32x4_t *v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t v305;
  uint64_t v306;
  uint64_t v307;
  float *v308;
  float *v309;
  float *v310;
  float *v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  float32x4_t *v323;
  float32x4_t *v324;
  int v325;
  float32x4_t *v326;
  float32x4_t *v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  BOOL v347;
  BOOL v348;
  BOOL v349;
  BOOL v350;
  uint64_t v352;
  uint64_t v353;
  float32x4_t *v354;
  float32x4_t *v355;
  float32x4_t *v356;
  float32x4_t *v357;
  float32x4_t v358;
  uint64_t v359;
  float *v360;
  float *v361;
  float *v362;
  float *v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  float32x4_t *v374;
  float32x4_t *v375;
  float32x4_t *v376;
  int v377;
  float32x4_t *v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  int v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  BOOL v398;
  BOOL v399;
  BOOL v400;
  BOOL v401;
  uint64_t v403;
  uint64_t v404;
  float32x4_t *v405;
  float32x4_t *v406;
  float32x4_t *v407;
  float32x4_t *v408;
  float32x4_t v409;
  uint64_t v410;
  float *v411;
  float *v412;
  float *v413;
  float *v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  uint64_t v420;
  size_t v421;
  float32x4_t **v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  NSObject *global_queue;
  const void *v428;
  uint64_t v429;
  uint64_t v430;
  size_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  size_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  size_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  float32x4_t *v449;
  float32x4_t *v450;
  int v451;
  float32x4_t *v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  BOOL v466;
  BOOL v467;
  uint64_t v469;
  uint64_t v470;
  float32x4_t *v471;
  float32x4_t *v472;
  float32x4_t *v473;
  float32x4_t v474;
  uint64_t v475;
  float *v476;
  float *v477;
  float *v478;
  float v479;
  float v480;
  float v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  float32x4_t *v486;
  float32x4_t *v487;
  int v488;
  float32x4_t *v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  float32x4_t *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  BOOL v503;
  BOOL v504;
  uint64_t v506;
  uint64_t v507;
  float32x4_t *v508;
  float32x4_t *v509;
  float32x4_t *v510;
  float32x4_t v511;
  uint64_t v512;
  float *v513;
  float *v514;
  float *v515;
  float v516;
  float v517;
  float v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  int v522;
  uint64_t v523;
  NSObject *v524;
  int v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  _BYTE *v529;
  _BYTE *v530;
  size_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  size_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  __int128 *v542;
  _OWORD *v543;
  uint64_t v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  _DWORD *v548;
  int *v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  NSObject *v554;
  const void *v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  size_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  size_t v564;
  uint64_t v565;
  int v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  float32x4_t *v574;
  float32x4_t *v575;
  int v576;
  float32x4_t *v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  float32x4_t *v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  unint64_t v590;
  BOOL v591;
  BOOL v592;
  uint64_t v594;
  uint64_t v595;
  float32x4_t *v596;
  float32x4_t *v597;
  float32x4_t *v598;
  float32x4_t v599;
  uint64_t v600;
  float *v601;
  float *v602;
  float *v603;
  float v604;
  float v605;
  float v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _BYTE *v611;
  _BYTE *v612;
  size_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  size_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  __int128 *v623;
  _OWORD *v624;
  uint64_t v625;
  __int128 v626;
  uint64_t v627;
  uint64_t v628;
  _DWORD *v629;
  int *v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  _BYTE *v635;
  _BYTE *v636;
  size_t v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  __int128 *v643;
  _OWORD *v644;
  uint64_t v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  _DWORD *v649;
  int *v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  _BYTE *v655;
  _BYTE *v656;
  size_t v657;
  void *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 *v663;
  _OWORD *v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667;
  uint64_t v668;
  _DWORD *v669;
  int *v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  void **v674;
  void **v675;
  int v677;
  void **v678;
  int v680;
  float32x4_t *v681;
  void **v682;
  float32x4_t **v683;
  void **v684;
  uint64_t v685;
  void **iterations;
  void **v687;
  float32x4_t **v688;
  _BOOL4 v690;
  int v691;
  int v692;
  int v693;
  const void *v694;
  const void *v695;
  const void *v696;
  const void *block;
  uint64_t v698;
  void (*v699)(uint64_t, uint64_t);
  void *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;

  v693 = a5 - 1;
  if (a5 >= 1)
  {
    v678 = (void **)(a1 + 1648);
    v6 = (void **)(a1 + 1656);
    v7 = (void **)(a1 + 1672);
    iterations = (void **)(a1 + 1664);
    v687 = (void **)(a1 + 1640);
    v682 = (void **)(a1 + 1688);
    v684 = (void **)(a1 + 1680);
    v8 = a5 - 1;
    v674 = (void **)(a1 + 1672);
    v675 = (void **)(a1 + 1656);
    do
    {
      v10 = v693 - v8;
      if (*(_BYTE *)(a1 + 2672))
      {
        v11 = v10 < v693;
      }
      else
      {
        v10 = v8;
        v11 = v8 > 0;
      }
      v690 = v11;
      if (*(_BYTE *)(a1 + 2672))
        v12 = v10 > 0;
      else
        v12 = v10 < v693;
      if (*(_BYTE *)(a1 + 2672))
        v13 = v10 - 1;
      else
        v13 = v10 + 1;
      v680 = v13;
      if (*(_BYTE *)(a1 + 2672))
        v14 = v10 + 1;
      else
        v14 = v10 - 1;
      v677 = v14;
      v15 = v10;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      v16 = 8 * v15;
      if (v12)
      {
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      block = *(const void **)(*(_QWORD *)(a1 + 352) + 8 * v15);
      v696 = *(const void **)(*(_QWORD *)(a1 + 376) + 8 * v15);
      v695 = *(const void **)(*(_QWORD *)(a1 + 424) + 8 * v15);
      v694 = *(const void **)(*(_QWORD *)(a1 + 400) + 8 * v15);
      v681 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v15);
      v17 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v15);
      sub_19C102BD8(v687, &v694, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v678, &v696, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v6, &block, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102E84(v7, &v695, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102BD8(iterations, &v695, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102E84(v684, (const void **)(*(_QWORD *)(a1 + 88) + v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19C102BD8(v682, (const void **)(*(_QWORD *)(a1 + 88) + v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v18 = *(_QWORD *)(a1 + 864);
      v19 = *(_QWORD *)(a1 + 840);
      v20 = *(int *)(a1 + 52);
      v21 = 4 * v20;
      bzero(*(void **)(v18 + 8 * v15), 4 * v20);
      v22 = (int)v20 / 8;
      if ((int)v20 >= 8)
      {
        v23 = *(float32x4_t **)(v18 + 8 * v15);
        v24 = *(float32x4_t **)(v19 + 8 * v15);
        v25 = (float32x4_t *)*v684;
        v26 = (int)v20 / 8;
        v27 = (float32x4_t *)*v687;
        do
        {
          v28 = *v27;
          v29 = v27[1];
          v27 += 2;
          v30 = *v25;
          v31 = v25[1];
          v25 += 2;
          v32 = vmulq_f32(v31, v29);
          v33 = vmulq_f32(v30, v28);
          v35 = *v24;
          v34 = v24[1];
          v24 += 2;
          v36 = vmlaq_f32(v23[1], v32, v34);
          *v23 = vmlaq_f32(*v23, v33, v35);
          v23[1] = v36;
          v23 += 2;
          --v26;
        }
        while (v26);
      }
      v37 = 8 * v22;
      if (8 * v22 < (int)v20)
      {
        v38 = (char *)*v687;
        v39 = *(_QWORD *)(v19 + 8 * v15);
        v40 = (char *)*v684;
        v41 = *(_QWORD *)(v18 + 8 * v15);
        v42 = v37;
        v43 = v20 - v37;
        if (v43 < 8)
          goto LABEL_46;
        v44 = 4 * v37;
        v45 = v41 + v44;
        v46 = v41 + v21;
        v47 = v41 + v44 >= (unint64_t)&v40[v21] || (unint64_t)&v40[v44] >= v46;
        v48 = !v47;
        v49 = v45 >= v39 + v21 || v39 + 4 * v42 >= v46;
        v50 = !v49;
        if ((unint64_t)&v38[v44] < v46 && v45 < (unint64_t)&v38[v21])
          goto LABEL_46;
        if (v48)
          goto LABEL_46;
        if (v50)
          goto LABEL_46;
        v52 = v43 - (v20 & 7) + v42;
        v53 = v42 + (v20 & 7) - v20;
        v54 = (float32x4_t *)(v41 + v44 + 16);
        v55 = (float32x4_t *)&v38[v44 + 16];
        v56 = (float32x4_t *)(v39 + v44 + 16);
        v57 = (float32x4_t *)&v40[v44 + 16];
        do
        {
          v58 = vmlaq_f32(*v54, vmulq_f32(*v57, *v55), *v56);
          v54[-1] = vmlaq_f32(v54[-1], vmulq_f32(v57[-1], v55[-1]), v56[-1]);
          *v54 = v58;
          v54 += 2;
          v55 += 2;
          v56 += 2;
          v57 += 2;
          v53 += 8;
        }
        while (v53);
        v42 = v52;
        if ((v20 & 7) != 0)
        {
LABEL_46:
          v59 = v20 - v42;
          v60 = (float *)(v41 + 4 * v42);
          v61 = (float *)(v39 + 4 * v42);
          v62 = (float *)&v40[4 * v42];
          v63 = (float *)&v38[4 * v42];
          do
          {
            v64 = *v63++;
            v65 = v64;
            v66 = *v62++;
            v67 = v66;
            v68 = *v61++;
            *v60 = *v60 + (float)((float)(v67 * v65) * v68);
            ++v60;
            --v59;
          }
          while (v59);
        }
      }
      v69 = *(_QWORD *)(a1 + 960);
      v70 = *(_QWORD *)(a1 + 840);
      v71 = *(int *)(a1 + 52);
      v72 = 4 * v71;
      bzero(*(void **)(v69 + 8 * v15), 4 * v71);
      v73 = (int)v71 / 8;
      if ((int)v71 >= 8)
      {
        v74 = *(float32x4_t **)(v69 + 8 * v15);
        v75 = *(float32x4_t **)(v70 + 8 * v15);
        v76 = (int)v71 / 8;
        v77 = v17;
        v78 = (float32x4_t *)*v682;
        do
        {
          v79 = *v78;
          v80 = v78[1];
          v78 += 2;
          v81 = *v77;
          v82 = v77[1];
          v77 += 2;
          v83 = vmulq_f32(v82, v80);
          v84 = vmulq_f32(v81, v79);
          v86 = *v75;
          v85 = v75[1];
          v75 += 2;
          v87 = vmlaq_f32(v74[1], v83, v85);
          *v74 = vmlaq_f32(*v74, v84, v86);
          v74[1] = v87;
          v74 += 2;
          --v76;
        }
        while (v76);
      }
      v88 = 8 * v73;
      if (8 * v73 < (int)v71)
      {
        v89 = *(_QWORD *)(v70 + 8 * v15);
        v90 = (char *)*v682;
        v91 = *(_QWORD *)(v69 + 8 * v15);
        v92 = v88;
        v93 = v71 - v88;
        if (v93 < 8)
          goto LABEL_75;
        v94 = 4 * v88;
        v95 = v91 + v94;
        v96 = v91 + v72;
        v97 = v91 + v94 >= (unint64_t)v17 + v72 || (unint64_t)v17 + v94 >= v96;
        v98 = !v97;
        v99 = v95 >= v89 + v72 || v89 + 4 * v92 >= v96;
        v100 = !v99;
        if ((unint64_t)&v90[v94] < v96 && v95 < (unint64_t)&v90[v72])
          goto LABEL_75;
        if (v98)
          goto LABEL_75;
        if (v100)
          goto LABEL_75;
        v102 = v93 - (v71 & 7) + v92;
        v103 = v92 + (v71 & 7) - v71;
        v104 = (float32x4_t *)(v91 + v94 + 16);
        v105 = (float32x4_t *)&v90[v94 + 16];
        v106 = (float32x4_t *)(v89 + v94 + 16);
        v107 = (float32x4_t *)((char *)v17 + v94 + 16);
        do
        {
          v108 = vmlaq_f32(*v104, vmulq_f32(*v107, *v105), *v106);
          v104[-1] = vmlaq_f32(v104[-1], vmulq_f32(v107[-1], v105[-1]), v106[-1]);
          *v104 = v108;
          v104 += 2;
          v105 += 2;
          v106 += 2;
          v107 += 2;
          v103 += 8;
        }
        while (v103);
        v92 = v102;
        if ((v71 & 7) != 0)
        {
LABEL_75:
          v109 = v71 - v92;
          v110 = 4 * v92;
          v111 = (float *)(v91 + v110);
          v112 = (float *)(v89 + v110);
          v113 = &v17->f32[(unint64_t)v110 / 4];
          v114 = (float *)&v90[v110];
          do
          {
            v115 = *v114++;
            v116 = v115;
            v117 = *v113++;
            v118 = v117;
            v119 = *v112++;
            *v111 = *v111 + (float)((float)(v118 * v116) * v119);
            ++v111;
            --v109;
          }
          while (v109);
        }
      }
      v120 = *(_QWORD *)(a1 + 960);
      v121 = *(_QWORD *)(a1 + 864);
      v122 = *(float32x4_t ***)(a1 + 2584);
      v123 = *(int *)(a1 + 52);
      if ((int)v123 >= 8)
      {
        v124 = *(float32x4_t **)(v120 + 8 * v15);
        v125 = *v122;
        v126 = (int)v123 / 8;
        v127 = *(float32x4_t **)(v121 + 8 * v15);
        do
        {
          v129 = *v127;
          v128 = v127[1];
          v127 += 2;
          v131 = *v125;
          v130 = v125[1];
          v125 += 2;
          v132 = vmlaq_f32(v124[1], v130, v128);
          *v124 = vmlaq_f32(*v124, v131, v129);
          v124[1] = v132;
          v124 += 2;
          --v126;
        }
        while (v126);
      }
      v133 = 8 * ((int)v123 / 8);
      if (v133 < (int)v123)
      {
        v134 = *(_QWORD *)(v121 + 8 * v15);
        v135 = *v122;
        v136 = *(_QWORD *)(v120 + 8 * v15);
        v137 = v133;
        v138 = v123 - v133;
        if (v138 < 8)
          goto LABEL_97;
        v139 = 4 * v133;
        v140 = v136 + 4 * v123;
        v141 = v136 + v139 >= (unint64_t)v135->u64 + 4 * v123 || (unint64_t)&v135[v133 / 4u] >= v140;
        v142 = !v141;
        if (v134 + v139 < v140 && v136 + v139 < (unint64_t)(v134 + 4 * v123))
          goto LABEL_97;
        if (v142)
          goto LABEL_97;
        v144 = v138 - (v123 & 7) + v137;
        v145 = v137 + (v123 & 7) - v123;
        v146 = (float32x4_t *)(v136 + v139 + 16);
        v147 = (float32x4_t *)(v134 + v139 + 16);
        v148 = (float32x4_t *)((char *)v135 + v139 + 16);
        do
        {
          v149 = vmlaq_f32(*v146, *v148, *v147);
          v146[-1] = vmlaq_f32(v146[-1], v148[-1], v147[-1]);
          *v146 = v149;
          v146 += 2;
          v147 += 2;
          v148 += 2;
          v145 += 8;
        }
        while (v145);
        v137 = v144;
        if ((v123 & 7) != 0)
        {
LABEL_97:
          v150 = v123 - v137;
          v151 = (float *)(v136 + 4 * v137);
          v152 = &v135->f32[v137];
          v153 = (float *)(v134 + 4 * v137);
          do
          {
            v154 = *v153++;
            v155 = v154;
            v156 = *v152++;
            *v151 = *v151 + (float)(v156 * v155);
            ++v151;
            --v150;
          }
          while (v150);
        }
      }
      if (v12)
      {
        v157 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v680);
        v158 = *(_QWORD *)(a1 + 960);
        v159 = *(_QWORD *)(a1 + 888);
        v160 = *(float32x4_t ***)(a1 + 2576);
        v161 = *(int *)(a1 + 52);
        if ((int)v161 >= 8)
        {
          v162 = *(float32x4_t **)(v158 + 8 * v15);
          v163 = *v160;
          v164 = (int)v161 / 8;
          v165 = *(float32x4_t **)(v159 + 8 * v680);
          do
          {
            v167 = *v165;
            v166 = v165[1];
            v165 += 2;
            v169 = *v163;
            v168 = v163[1];
            v163 += 2;
            v170 = vmlaq_f32(v162[1], v168, v166);
            *v162 = vmlaq_f32(*v162, v169, v167);
            v162[1] = v170;
            v162 += 2;
            --v164;
          }
          while (v164);
        }
        v171 = 8 * ((int)v161 / 8);
        if (v171 < (int)v161)
        {
          v172 = *(_QWORD *)(v159 + 8 * v680);
          v173 = *v160;
          v174 = *(_QWORD *)(v158 + 8 * v15);
          v175 = v171;
          v176 = v161 - v171;
          if (v176 < 8)
            goto LABEL_120;
          v177 = 4 * v171;
          v178 = v174 + 4 * v161;
          v179 = v174 + v177 >= (unint64_t)v173->u64 + 4 * v161 || (unint64_t)&v173[v171 / 4u] >= v178;
          v180 = !v179;
          if (v172 + v177 < v178 && v174 + v177 < (unint64_t)(v172 + 4 * v161))
            goto LABEL_120;
          if (v180)
            goto LABEL_120;
          v182 = v176 - (v161 & 7) + v175;
          v183 = v175 + (v161 & 7) - v161;
          v184 = (float32x4_t *)(v174 + v177 + 16);
          v185 = (float32x4_t *)(v172 + v177 + 16);
          v186 = (float32x4_t *)((char *)v173 + v177 + 16);
          do
          {
            v187 = vmlaq_f32(*v184, *v186, *v185);
            v184[-1] = vmlaq_f32(v184[-1], v186[-1], v185[-1]);
            *v184 = v187;
            v184 += 2;
            v185 += 2;
            v186 += 2;
            v183 += 8;
          }
          while (v183);
          v175 = v182;
          if ((v161 & 7) != 0)
          {
LABEL_120:
            v188 = v161 - v175;
            v189 = (float *)(v174 + 4 * v175);
            v190 = &v173->f32[v175];
            v191 = (float *)(v172 + 4 * v175);
            do
            {
              v192 = *v191++;
              v193 = v192;
              v194 = *v190++;
              *v189 = *v189 + (float)(v194 * v193);
              ++v189;
              --v188;
            }
            while (v188);
          }
        }
        v195 = *(_QWORD *)(a1 + 960);
        v196 = *(_QWORD *)(a1 + 912);
        v197 = *(float32x4_t ***)(a1 + 2568);
        v198 = *(int *)(a1 + 52);
        if ((int)v198 >= 8)
        {
          v199 = *(float32x4_t **)(v195 + 8 * v15);
          v200 = *v197;
          v201 = (int)v198 / 8;
          v202 = *(float32x4_t **)(v196 + 8 * v680);
          do
          {
            v204 = *v202;
            v203 = v202[1];
            v202 += 2;
            v206 = *v200;
            v205 = v200[1];
            v200 += 2;
            v207 = vmlaq_f32(v199[1], v205, v203);
            *v199 = vmlaq_f32(*v199, v206, v204);
            v199[1] = v207;
            v199 += 2;
            --v201;
          }
          while (v201);
        }
        v208 = 8 * ((int)v198 / 8);
        if (v208 < (int)v198)
        {
          v209 = *(_QWORD *)(v196 + 8 * v680);
          v210 = *v197;
          v211 = *(_QWORD *)(v195 + 8 * v15);
          v212 = v208;
          v213 = v198 - v208;
          if (v213 < 8)
            goto LABEL_142;
          v214 = 4 * v208;
          v215 = v211 + 4 * v198;
          v216 = v211 + v214 >= (unint64_t)v210->u64 + 4 * v198 || (unint64_t)&v210[v208 / 4u] >= v215;
          v217 = !v216;
          if (v209 + v214 < v215 && v211 + v214 < (unint64_t)(v209 + 4 * v198))
            goto LABEL_142;
          if (v217)
            goto LABEL_142;
          v219 = v213 - (v198 & 7) + v212;
          v220 = v212 + (v198 & 7) - v198;
          v221 = (float32x4_t *)(v211 + v214 + 16);
          v222 = (float32x4_t *)(v209 + v214 + 16);
          v223 = (float32x4_t *)((char *)v210 + v214 + 16);
          do
          {
            v224 = vmlaq_f32(*v221, *v223, *v222);
            v221[-1] = vmlaq_f32(v221[-1], v223[-1], v222[-1]);
            *v221 = v224;
            v221 += 2;
            v222 += 2;
            v223 += 2;
            v220 += 8;
          }
          while (v220);
          v212 = v219;
          if ((v198 & 7) != 0)
          {
LABEL_142:
            v225 = v198 - v212;
            v226 = (float *)(v211 + 4 * v212);
            v227 = &v210->f32[v212];
            v228 = (float *)(v209 + 4 * v212);
            do
            {
              v229 = *v228++;
              v230 = v229;
              v231 = *v227++;
              *v226 = *v226 + (float)(v231 * v230);
              ++v226;
              --v225;
            }
            while (v225);
          }
        }
        v232 = *(_QWORD *)(a1 + 960);
        v233 = *(int *)(a1 + 52);
        if ((int)v233 >= 8)
        {
          v234 = *(float32x4_t **)(v232 + 8 * v15);
          v235 = *(float32x4_t **)(v232 + 8 * v680);
          v236 = (int)v233 / 8;
          v237 = v157;
          do
          {
            v239 = *v235;
            v238 = v235[1];
            v235 += 2;
            v241 = *v237;
            v240 = v237[1];
            v237 += 2;
            v242 = vmlaq_f32(v234[1], v240, v238);
            *v234 = vmlaq_f32(*v234, v241, v239);
            v234[1] = v242;
            v234 += 2;
            --v236;
          }
          while (v236);
        }
        v243 = 8 * ((int)v233 / 8);
        if (v243 < (int)v233)
        {
          v244 = *(_QWORD *)(v232 + 8 * v680);
          v245 = *(_QWORD *)(v232 + 8 * v15);
          v246 = v243;
          v247 = v233 - v243;
          if (v247 < 8)
            goto LABEL_164;
          v248 = 4 * v243;
          v249 = v245 + 4 * v233;
          v250 = v245 + v248 >= (unint64_t)v157->u64 + 4 * v233 || (unint64_t)&v157[v243 / 4u] >= v249;
          v251 = !v250;
          if (v244 + v248 < v249 && v245 + v248 < (unint64_t)(v244 + 4 * v233))
            goto LABEL_164;
          if (v251)
            goto LABEL_164;
          v253 = v247 - (v233 & 7) + v246;
          v254 = v246 + (v233 & 7) - v233;
          v255 = (float32x4_t *)(v245 + v248 + 16);
          v256 = (float32x4_t *)(v244 + v248 + 16);
          v257 = (float32x4_t *)((char *)v157 + v248 + 16);
          do
          {
            v258 = vmlaq_f32(*v255, *v257, *v256);
            v255[-1] = vmlaq_f32(v255[-1], v257[-1], v256[-1]);
            *v255 = v258;
            v255 += 2;
            v256 += 2;
            v257 += 2;
            v254 += 8;
          }
          while (v254);
          v246 = v253;
          if ((v233 & 7) != 0)
          {
LABEL_164:
            v259 = v233 - v246;
            v260 = (float *)(v245 + 4 * v246);
            v261 = &v157->f32[v246];
            v262 = (float *)(v244 + 4 * v246);
            do
            {
              v263 = *v262++;
              v264 = v263;
              v265 = *v261++;
              *v260 = *v260 + (float)(v265 * v264);
              ++v260;
              --v259;
            }
            while (v259);
          }
        }
      }
      v266 = *(_QWORD *)(a1 + 936);
      v267 = *(_QWORD *)(a1 + 960);
      v268 = *(int *)(a1 + 52);
      v269 = 4 * v268;
      bzero(*(void **)(v266 + 8 * v15), 4 * v268);
      v270 = (int)v268 / 8;
      if ((int)v268 >= 8)
      {
        v271 = *(float32x4_t **)(v266 + 8 * v15);
        v272 = *(float32x4_t **)(v267 + 8 * v15);
        v273 = (int)v268 / 8;
        v274 = v681;
        v275 = (float32x4_t *)*iterations;
        do
        {
          v276 = *v275;
          v277 = v275[1];
          v275 += 2;
          v278 = *v272;
          v279 = v272[1];
          v272 += 2;
          v280 = vmulq_f32(v279, v277);
          v281 = vmulq_f32(v278, v276);
          v283 = *v274;
          v282 = v274[1];
          v274 += 2;
          v284 = vmlaq_f32(v271[1], v280, v282);
          *v271 = vmlaq_f32(*v271, v281, v283);
          v271[1] = v284;
          v271 += 2;
          --v273;
        }
        while (v273);
      }
      v285 = 8 * v270;
      if (8 * v270 < (int)v268)
      {
        v286 = *(_QWORD *)(v267 + 8 * v15);
        v287 = (char *)*iterations;
        v288 = *(_QWORD *)(v266 + 8 * v15);
        v289 = v285;
        v290 = v268 - v285;
        if (v290 < 8)
          goto LABEL_193;
        v291 = 4 * v285;
        v292 = v288 + v291;
        v293 = v288 + v269;
        v294 = v288 + v291 >= (unint64_t)(v286 + v269) || v286 + v291 >= v293;
        v295 = !v294;
        v296 = v292 >= (unint64_t)v681 + v269 || (unint64_t)v681->u64 + 4 * v289 >= v293;
        v297 = !v296;
        if ((unint64_t)&v287[v291] < v293 && v292 < (unint64_t)&v287[v269])
          goto LABEL_193;
        if (v295)
          goto LABEL_193;
        if (v297)
          goto LABEL_193;
        v299 = v290 - (v268 & 7) + v289;
        v300 = v289 + (v268 & 7) - v268;
        v301 = (float32x4_t *)(v288 + v291 + 16);
        v302 = (float32x4_t *)&v287[v291 + 16];
        v303 = (float32x4_t *)((char *)v681 + v291 + 16);
        v304 = (float32x4_t *)(v286 + v291 + 16);
        do
        {
          v305 = vmlaq_f32(*v301, vmulq_f32(*v304, *v302), *v303);
          v301[-1] = vmlaq_f32(v301[-1], vmulq_f32(v304[-1], v302[-1]), v303[-1]);
          *v301 = v305;
          v301 += 2;
          v302 += 2;
          v303 += 2;
          v304 += 2;
          v300 += 8;
        }
        while (v300);
        v289 = v299;
        if ((v268 & 7) != 0)
        {
LABEL_193:
          v306 = v268 - v289;
          v307 = 4 * v289;
          v308 = (float *)(v288 + v307);
          v309 = &v681->f32[(unint64_t)v307 / 4];
          v310 = (float *)(v286 + v307);
          v311 = (float *)&v287[v307];
          do
          {
            v312 = *v311++;
            v313 = v312;
            v314 = *v310++;
            v315 = v314;
            v316 = *v309++;
            *v308 = *v308 + (float)((float)(v315 * v313) * v316);
            ++v308;
            --v306;
          }
          while (v306);
        }
      }
      if (v690)
      {
        v317 = *(_QWORD *)(a1 + 888);
        v318 = *(_QWORD *)(a1 + 960);
        v319 = *(_QWORD *)(a1 + 88);
        v320 = *(int *)(a1 + 52);
        v321 = 4 * v320;
        bzero(*(void **)(v317 + 8 * v15), 4 * v320);
        v322 = (int)v320 / 8;
        if ((int)v320 >= 8)
        {
          v323 = *(float32x4_t **)(v317 + 8 * v15);
          v324 = *(float32x4_t **)(v319 + 8 * v677);
          v325 = (int)v320 / 8;
          v326 = *(float32x4_t **)(v318 + 8 * v15);
          v327 = (float32x4_t *)*v678;
          do
          {
            v328 = *v327;
            v329 = v327[1];
            v327 += 2;
            v330 = *v326;
            v331 = v326[1];
            v326 += 2;
            v332 = vmulq_f32(v331, v329);
            v333 = vmulq_f32(v330, v328);
            v335 = *v324;
            v334 = v324[1];
            v324 += 2;
            v336 = vmlaq_f32(v323[1], v332, v334);
            *v323 = vmlaq_f32(*v323, v333, v335);
            v323[1] = v336;
            v323 += 2;
            --v325;
          }
          while (v325);
        }
        v337 = 8 * v322;
        if (8 * v322 < (int)v320)
        {
          v338 = *(_QWORD *)(v318 + 8 * v15);
          v339 = *(_QWORD *)(v319 + 8 * v677);
          v340 = (char *)*v678;
          v341 = *(_QWORD *)(v317 + 8 * v15);
          v342 = v337;
          v343 = v320 - v337;
          if (v343 < 8)
            goto LABEL_223;
          v344 = 4 * v337;
          v345 = v341 + v344;
          v346 = v341 + v321;
          v347 = v341 + v344 >= (unint64_t)(v338 + v321) || v338 + v344 >= v346;
          v348 = !v347;
          v349 = v345 >= v339 + v321 || v339 + 4 * v342 >= v346;
          v350 = !v349;
          if ((unint64_t)&v340[v344] < v346 && v345 < (unint64_t)&v340[v321])
            goto LABEL_223;
          if (v348)
            goto LABEL_223;
          if (v350)
            goto LABEL_223;
          v352 = v343 - (v320 & 7) + v342;
          v353 = v342 + (v320 & 7) - v320;
          v354 = (float32x4_t *)(v341 + v344 + 16);
          v355 = (float32x4_t *)&v340[v344 + 16];
          v356 = (float32x4_t *)(v339 + v344 + 16);
          v357 = (float32x4_t *)(v338 + v344 + 16);
          do
          {
            v358 = vmlaq_f32(*v354, vmulq_f32(*v357, *v355), *v356);
            v354[-1] = vmlaq_f32(v354[-1], vmulq_f32(v357[-1], v355[-1]), v356[-1]);
            *v354 = v358;
            v354 += 2;
            v355 += 2;
            v356 += 2;
            v357 += 2;
            v353 += 8;
          }
          while (v353);
          v342 = v352;
          if ((v320 & 7) != 0)
          {
LABEL_223:
            v359 = v320 - v342;
            v360 = (float *)(v341 + 4 * v342);
            v361 = (float *)(v339 + 4 * v342);
            v362 = (float *)(v338 + 4 * v342);
            v363 = (float *)&v340[4 * v342];
            do
            {
              v364 = *v363++;
              v365 = v364;
              v366 = *v362++;
              v367 = v366;
              v368 = *v361++;
              *v360 = *v360 + (float)((float)(v367 * v365) * v368);
              ++v360;
              --v359;
            }
            while (v359);
          }
        }
      }
      v369 = *(_QWORD *)(a1 + 912);
      v370 = *(_QWORD *)(a1 + 960);
      v371 = *(int *)(a1 + 52);
      v372 = 4 * v371;
      bzero(*(void **)(v369 + 8 * v15), 4 * v371);
      v373 = (int)v371 / 8;
      v7 = v674;
      v6 = v675;
      if ((int)v371 >= 8)
      {
        v374 = *(float32x4_t **)(v369 + 8 * v15);
        v375 = (float32x4_t *)*v674;
        v376 = *(float32x4_t **)(v370 + 8 * v15);
        v377 = (int)v371 / 8;
        v378 = (float32x4_t *)*v675;
        do
        {
          v379 = *v378;
          v380 = v378[1];
          v378 += 2;
          v381 = *v376;
          v382 = v376[1];
          v376 += 2;
          v383 = vmulq_f32(v382, v380);
          v384 = vmulq_f32(v381, v379);
          v386 = *v375;
          v385 = v375[1];
          v375 += 2;
          v387 = vmlaq_f32(v374[1], v383, v385);
          *v374 = vmlaq_f32(*v374, v384, v386);
          v374[1] = v387;
          v374 += 2;
          --v377;
        }
        while (v377);
      }
      v388 = 8 * v373;
      if (8 * v373 < (int)v371)
      {
        v389 = (char *)*v675;
        v390 = *(_QWORD *)(v370 + 8 * v15);
        v391 = (char *)*v674;
        v392 = *(_QWORD *)(v369 + 8 * v15);
        v393 = v388;
        v394 = v371 - v388;
        if (v394 < 8)
          goto LABEL_252;
        v395 = 4 * v388;
        v396 = v392 + v395;
        v397 = v392 + v372;
        v398 = v392 + v395 >= (unint64_t)(v390 + v372) || v390 + v395 >= v397;
        v399 = !v398;
        v400 = v396 >= (unint64_t)&v391[v372] || (unint64_t)&v391[4 * v393] >= v397;
        v401 = !v400;
        if ((unint64_t)&v389[v395] < v397 && v396 < (unint64_t)&v389[v372])
          goto LABEL_252;
        if (v399)
          goto LABEL_252;
        if (v401)
          goto LABEL_252;
        v403 = v394 - (v371 & 7) + v393;
        v404 = v393 + (v371 & 7) - v371;
        v405 = (float32x4_t *)(v392 + v395 + 16);
        v406 = (float32x4_t *)&v389[v395 + 16];
        v407 = (float32x4_t *)&v391[v395 + 16];
        v408 = (float32x4_t *)(v390 + v395 + 16);
        do
        {
          v409 = vmlaq_f32(*v405, vmulq_f32(*v408, *v406), *v407);
          v405[-1] = vmlaq_f32(v405[-1], vmulq_f32(v408[-1], v406[-1]), v407[-1]);
          *v405 = v409;
          v405 += 2;
          v406 += 2;
          v407 += 2;
          v408 += 2;
          v404 += 8;
        }
        while (v404);
        v393 = v403;
        if ((v371 & 7) != 0)
        {
LABEL_252:
          v410 = v371 - v393;
          v411 = (float *)(v392 + 4 * v393);
          v412 = (float *)&v391[4 * v393];
          v413 = (float *)(v390 + 4 * v393);
          v414 = (float *)&v389[4 * v393];
          do
          {
            v415 = *v414++;
            v416 = v415;
            v417 = *v413++;
            v418 = v417;
            v419 = *v412++;
            *v411 = *v411 + (float)((float)(v418 * v416) * v419);
            ++v411;
            --v410;
          }
          while (v410);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + 8 * v15), 4 * *(int *)(a1 + 48));
        cblas_sgemv_NEWLAPACK();
        if (v690)
          cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
    }
    while (v8-- > 0);
  }
  v420 = *(unsigned int *)(a1 + 52);
  if ((int)v420 > 0)
  {
    v421 = 4 * v420;
    bzero(*(void **)(a1 + 1528), 4 * v420);
    v422 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v421);
    v688 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v421);
    if (*(int *)(a1 + 56) <= 0)
      goto LABEL_260;
    goto LABEL_259;
  }
  v422 = (float32x4_t **)(a1 + 1536);
  v688 = (float32x4_t **)(a1 + 1544);
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_259:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_260:
  if (a5 > 1)
  {
    v423 = (a5 - 2);
    v424 = 1;
    v683 = v422;
    do
    {
      while (1)
      {
        v441 = v693 - v424;
        if (!*(_BYTE *)(a1 + 2672))
          v441 = v424;
        v442 = v441;
        if (*(_BYTE *)(a1 + 2672))
          v443 = v423;
        else
          v443 = 1;
        if (*(_BYTE *)(a1 + 2672))
          v444 = v442 + 1;
        else
          v444 = v442 - 1;
        v445 = *(_QWORD *)(a1 + 912);
        v446 = *(_QWORD *)(a1 + 88);
        v447 = *(int *)(a1 + 52);
        v448 = (int)v447 / 8;
        if ((int)v447 >= 8)
        {
          v449 = *(float32x4_t **)(a1 + 1528);
          v450 = *(float32x4_t **)(v446 + 8 * v444);
          v451 = (int)v447 / 8;
          v452 = *(float32x4_t **)(v445 + 8 * v442);
          do
          {
            v454 = *v452;
            v453 = v452[1];
            v452 += 2;
            v456 = *v450;
            v455 = v450[1];
            v450 += 2;
            v457 = vmlaq_f32(v449[1], v455, v453);
            *v449 = vmlaq_f32(*v449, v456, v454);
            v449[1] = v457;
            v449 += 2;
            --v451;
          }
          while (v451);
        }
        v458 = 8 * v448;
        if (8 * v448 < (int)v447)
        {
          v459 = *(_QWORD *)(v445 + 8 * v442);
          v460 = *(_QWORD *)(v446 + 8 * v444);
          v461 = *(_QWORD *)(a1 + 1528);
          v462 = v458;
          v463 = v447 - v458;
          if (v463 < 8)
            goto LABEL_291;
          v464 = 4 * v458;
          v465 = v461 + 4 * v447;
          v466 = v461 + v464 >= (unint64_t)(v460 + 4 * v447) || v460 + 4 * v458 >= v465;
          v467 = !v466;
          if (v459 + v464 < v465 && v461 + v464 < (unint64_t)(v459 + 4 * v447))
            goto LABEL_291;
          if (v467)
            goto LABEL_291;
          v469 = v463 - (v447 & 7) + v462;
          v470 = v462 + (v447 & 7) - v447;
          v471 = (float32x4_t *)(v461 + v464 + 16);
          v472 = (float32x4_t *)(v459 + v464 + 16);
          v473 = (float32x4_t *)(v460 + v464 + 16);
          do
          {
            v474 = vmlaq_f32(*v471, *v473, *v472);
            v471[-1] = vmlaq_f32(v471[-1], v473[-1], v472[-1]);
            *v471 = v474;
            v471 += 2;
            v472 += 2;
            v473 += 2;
            v470 += 8;
          }
          while (v470);
          v462 = v469;
          if ((v447 & 7) != 0)
          {
LABEL_291:
            v475 = v447 - v462;
            v476 = (float *)(v461 + 4 * v462);
            v477 = (float *)(v460 + 4 * v462);
            v478 = (float *)(v459 + 4 * v462);
            do
            {
              v479 = *v478++;
              v480 = v479;
              v481 = *v477++;
              *v476 = *v476 + (float)(v481 * v480);
              ++v476;
              --v475;
            }
            while (v475);
          }
        }
        v482 = *(_QWORD *)(a1 + 888);
        v483 = *(_QWORD *)(a1 + 88);
        v484 = *(int *)(a1 + 52);
        v485 = (int)v484 / 8;
        if ((int)v484 >= 8)
        {
          v486 = *v422;
          v487 = *(float32x4_t **)(v483 + 8 * v444);
          v488 = (int)v484 / 8;
          v489 = *(float32x4_t **)(v482 + 8 * v442);
          do
          {
            v491 = *v489;
            v490 = v489[1];
            v489 += 2;
            v493 = *v487;
            v492 = v487[1];
            v487 += 2;
            v494 = vmlaq_f32(v486[1], v492, v490);
            *v486 = vmlaq_f32(*v486, v493, v491);
            v486[1] = v494;
            v486 += 2;
            --v488;
          }
          while (v488);
        }
        v495 = 8 * v485;
        if (8 * v485 < (int)v484)
        {
          v496 = *(_QWORD *)(v482 + 8 * v442);
          v497 = *(_QWORD *)(v483 + 8 * v444);
          v498 = *v422;
          v499 = v495;
          v500 = v484 - v495;
          if (v500 < 8)
            goto LABEL_313;
          v501 = 4 * v495;
          v502 = (unint64_t)v498->u64 + 4 * v484;
          v503 = (unint64_t)v498 + v501 >= v497 + 4 * v484 || v497 + 4 * v495 >= v502;
          v504 = !v503;
          if (v496 + v501 < v502 && (unint64_t)v498 + v501 < v496 + 4 * v484)
            goto LABEL_313;
          if (v504)
            goto LABEL_313;
          v506 = v500 - (v484 & 7) + v499;
          v507 = v499 + (v484 & 7) - v484;
          v508 = (float32x4_t *)((char *)v498 + v501 + 16);
          v509 = (float32x4_t *)(v496 + v501 + 16);
          v510 = (float32x4_t *)(v497 + v501 + 16);
          do
          {
            v511 = vmlaq_f32(*v508, *v510, *v509);
            v508[-1] = vmlaq_f32(v508[-1], v510[-1], v509[-1]);
            *v508 = v511;
            v508 += 2;
            v509 += 2;
            v510 += 2;
            v507 += 8;
          }
          while (v507);
          v499 = v506;
          if ((v484 & 7) != 0)
          {
LABEL_313:
            v512 = v484 - v499;
            v513 = &v498->f32[v499];
            v514 = (float *)(v497 + 4 * v499);
            v515 = (float *)(v496 + 4 * v499);
            do
            {
              v516 = *v515++;
              v517 = v516;
              v518 = *v514++;
              *v513 = *v513 + (float)(v518 * v517);
              ++v513;
              --v512;
            }
            while (v512);
          }
        }
        v519 = *(_QWORD *)(a1 + 912) + 8 * v442;
        v520 = *(_QWORD *)(a1 + 112) + 8 * v444;
        v521 = *(_DWORD *)(a1 + 52);
        if ((_DWORD)v442 == v443)
          break;
        v425 = v423;
        v426 = *(_QWORD *)(a1 + 1496);
        v685 = v444;
        global_queue = dispatch_get_global_queue(0, 0);
        v691 = v424;
        v428 = (const void *)MEMORY[0x1E0C809B0];
        block = (const void *)MEMORY[0x1E0C809B0];
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v521;
        v701 = v426;
        v702 = v519;
        v423 = v425;
        v703 = v520;
        dispatch_apply(v521, global_queue, &block);
        v429 = *(_QWORD *)(a1 + 888) + 8 * v442;
        v430 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v431 = *(int *)(a1 + 52);
        v432 = *(_QWORD *)(a1 + 1504);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v431;
        v701 = v432;
        v702 = v429;
        v703 = v430;
        dispatch_apply(v431, global_queue, &block);
        v433 = *(_QWORD *)(a1 + 864) + 8 * v442;
        v434 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v435 = *(int *)(a1 + 52);
        v436 = *(_QWORD *)(a1 + 1512);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v704 = v435;
        v701 = v436;
        v702 = v433;
        v703 = v434;
        dispatch_apply(v435, global_queue, &block);
        v437 = *(_QWORD *)(a1 + 936) + 8 * v442;
        v438 = *(_QWORD *)(a1 + 112) + 8 * v685;
        v439 = *(int *)(a1 + 52);
        v440 = *(_QWORD *)(a1 + 1520);
        block = v428;
        v698 = 0x40000000;
        v699 = sub_19C103680;
        v700 = &unk_1E3D25490;
        v422 = v683;
        v704 = v439;
        v701 = v440;
        v702 = v437;
        v703 = v438;
        dispatch_apply(v439, global_queue, &block);
        v424 = v691 + 1;
        if (v691 + 1 == a5)
          goto LABEL_317;
      }
      bzero(*(void **)(a1 + 1496), 4 * (v521 * v521));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1504), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1512), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1520), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      ++v424;
    }
    while (v424 != a5);
LABEL_317:
    v522 = 1;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2672))
        v525 = v693 - v522;
      else
        v525 = v522;
      if (*(_BYTE *)(a1 + 2672))
        v526 = v423;
      else
        v526 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        v534 = 8 * v525;
        v535 = *(_QWORD *)(a1 + 888) + v534;
        v536 = *(_QWORD *)(a1 + 64) + v534;
        v537 = *(_DWORD *)(a1 + 48);
        v538 = *(int *)(a1 + 52);
        if (v525 == v526)
        {
          bzero(*(void **)(a1 + 1472), 4 * v537 * (int)v538);
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v523 = *(_QWORD *)(a1 + 1472);
          v524 = dispatch_get_global_queue(0, 0);
          block = (const void *)MEMORY[0x1E0C809B0];
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v537;
          v701 = v523;
          v702 = v535;
          v703 = v536;
          dispatch_apply(v538, v524, &block);
        }
        goto LABEL_319;
      }
      v527 = *(_QWORD *)(a1 + 888);
      v528 = *(_QWORD *)(a1 + 208) + 24 * v525;
      v530 = *(_BYTE **)v528;
      v529 = *(_BYTE **)(v528 + 8);
      v531 = v529 - v530;
      if (v529 == v530)
        break;
      if ((v531 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v532 = operator new(v529 - v530);
      memcpy(v532, v530, v531);
      v533 = *(unsigned int *)(a1 + 52);
      if ((int)v533 >= 1)
        goto LABEL_336;
LABEL_343:
      if (*(int *)(a1 + 1116) >= 1)
      {
        v551 = 0;
        v552 = *(_QWORD *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v552 + 24 * *(int *)(a1 + 1120)) + 4 * v551) = *((_DWORD *)v532 + v551);
          ++v551;
        }
        while (v551 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_348:
        operator delete(v532);
        goto LABEL_319;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v532)
        goto LABEL_348;
LABEL_319:
      if (++v522 == a5)
        goto LABEL_349;
    }
    v532 = 0;
    v533 = *(unsigned int *)(a1 + 52);
    if ((int)v533 < 1)
      goto LABEL_343;
LABEL_336:
    v539 = 0;
    v540 = *(_QWORD *)(v527 + 8 * v525);
    v541 = *(_QWORD *)(*(_QWORD *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v533 < 8)
      goto LABEL_341;
    if ((unint64_t)(v541 - v540) < 0x20)
      goto LABEL_341;
    v539 = v533 & 0x7FFFFFF8;
    v542 = (__int128 *)(v540 + 16);
    v543 = (_OWORD *)(v541 + 16);
    v544 = v533 & 0xFFFFFFF8;
    do
    {
      v545 = *v542;
      *(v543 - 1) = *(v542 - 1);
      *v543 = v545;
      v542 += 2;
      v543 += 2;
      v544 -= 8;
    }
    while (v544);
    if (v539 != v533)
    {
LABEL_341:
      v546 = v533 - v539;
      v547 = 4 * v539;
      v548 = (_DWORD *)(v541 + 4 * v539);
      v549 = (int *)(v540 + v547);
      do
      {
        v550 = *v549++;
        *v548++ = v550;
        --v546;
      }
      while (v546);
    }
    goto LABEL_343;
  }
LABEL_349:
  if (a5 >= 1)
  {
    v692 = 0;
    while (1)
    {
      v566 = v693 - v692;
      if (*(_BYTE *)(a1 + 2672))
      {
        v567 = v693;
      }
      else
      {
        v566 = v692;
        v567 = 0;
      }
      v568 = v566;
      v569 = *(_QWORD *)(a1 + 864);
      v570 = *(_QWORD *)(a1 + 88);
      v571 = *(int *)(a1 + 52);
      v572 = (int)v571 / 8;
      v573 = 8 * v568;
      if ((int)v571 >= 8)
      {
        v574 = *v688;
        v575 = *(float32x4_t **)(v570 + 8 * v568);
        v576 = (int)v571 / 8;
        v577 = *(float32x4_t **)(v569 + 8 * v568);
        do
        {
          v579 = *v577;
          v578 = v577[1];
          v577 += 2;
          v581 = *v575;
          v580 = v575[1];
          v575 += 2;
          v582 = vmlaq_f32(v574[1], v580, v578);
          *v574 = vmlaq_f32(*v574, v581, v579);
          v574[1] = v582;
          v574 += 2;
          --v576;
        }
        while (v576);
      }
      v583 = 8 * v572;
      if (8 * v572 < (int)v571)
      {
        v584 = *(_QWORD *)(v569 + 8 * v568);
        v585 = *(_QWORD *)(v570 + 8 * v568);
        v586 = *v688;
        v587 = v583;
        v588 = v571 - v583;
        if (v588 < 8)
          goto LABEL_376;
        v589 = 4 * v583;
        v590 = (unint64_t)v586->u64 + 4 * v571;
        v591 = (unint64_t)v586 + v589 >= v585 + 4 * v571 || v585 + 4 * v583 >= v590;
        v592 = !v591;
        if (v584 + v589 < v590 && (unint64_t)v586 + v589 < v584 + 4 * v571)
          goto LABEL_376;
        if (v592)
          goto LABEL_376;
        v594 = v588 - (v571 & 7) + v587;
        v595 = v587 + (v571 & 7) - v571;
        v596 = (float32x4_t *)((char *)v586 + v589 + 16);
        v597 = (float32x4_t *)(v584 + v589 + 16);
        v598 = (float32x4_t *)(v585 + v589 + 16);
        do
        {
          v599 = vmlaq_f32(*v596, *v598, *v597);
          v596[-1] = vmlaq_f32(v596[-1], v598[-1], v597[-1]);
          *v596 = v599;
          v596 += 2;
          v597 += 2;
          v598 += 2;
          v595 += 8;
        }
        while (v595);
        v587 = v594;
        if ((v571 & 7) != 0)
        {
LABEL_376:
          v600 = v571 - v587;
          v601 = &v586->f32[v587];
          v602 = (float *)(v585 + 4 * v587);
          v603 = (float *)(v584 + 4 * v587);
          do
          {
            v604 = *v603++;
            v605 = v604;
            v606 = *v602++;
            *v601 = *v601 + (float)(v606 * v605);
            ++v601;
            --v600;
          }
          while (v600);
        }
      }
      if (a3[1] == *a3)
      {
        v607 = *(_QWORD *)(a1 + 912);
LABEL_385:
        v616 = v607 + v573;
        v617 = *(_QWORD *)(a1 + 64) + v573;
        v618 = *(_DWORD *)(a1 + 48);
        v619 = *(int *)(a1 + 52);
        if ((_DWORD)v568 == v567)
        {
          bzero(*(void **)(a1 + 1464), 4 * v618 * (int)v619);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1480), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1488), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v553 = *(_QWORD *)(a1 + 1464);
          v554 = dispatch_get_global_queue(0, 0);
          v555 = (const void *)MEMORY[0x1E0C809B0];
          block = (const void *)MEMORY[0x1E0C809B0];
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v618;
          v701 = v553;
          v702 = v616;
          v703 = v617;
          dispatch_apply(v619, v554, &block);
          v556 = *(_QWORD *)(a1 + 864) + v573;
          v557 = *(_QWORD *)(a1 + 64) + v573;
          v558 = *(_DWORD *)(a1 + 48);
          v559 = *(int *)(a1 + 52);
          v560 = *(_QWORD *)(a1 + 1480);
          block = v555;
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v558;
          v701 = v560;
          v702 = v556;
          v703 = v557;
          dispatch_apply(v559, v554, &block);
          v561 = *(_QWORD *)(a1 + 936) + v573;
          v562 = *(_QWORD *)(a1 + 64) + v573;
          v563 = *(_DWORD *)(a1 + 48);
          v564 = *(int *)(a1 + 52);
          v565 = *(_QWORD *)(a1 + 1488);
          block = v555;
          v698 = 0x40000000;
          v699 = sub_19C103680;
          v700 = &unk_1E3D25490;
          v704 = v563;
          v701 = v565;
          v702 = v561;
          v703 = v562;
          dispatch_apply(v564, v554, &block);
        }
        goto LABEL_352;
      }
      v607 = *(_QWORD *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_385;
      v608 = *(_QWORD *)(a1 + 208);
      v609 = 24 * v568;
      v610 = v608 + 24 * v568;
      v612 = *(_BYTE **)v610;
      v611 = *(_BYTE **)(v610 + 8);
      v613 = v611 - v612;
      if (v611 == v612)
        break;
      if ((v613 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v614 = operator new(v611 - v612);
      memcpy(v614, v612, v613);
      v609 = 24 * v568;
      v615 = *(unsigned int *)(a1 + 52);
      if ((int)v615 >= 1)
        goto LABEL_388;
LABEL_395:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v614)
          goto LABEL_401;
      }
      else
      {
        v632 = 0;
        v633 = *(_QWORD *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v633 + 24 * *(int *)(a1 + 1000)) + 4 * v632) = *((_DWORD *)v614 + v632);
          ++v632;
        }
        while (v632 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v614);
      v608 = *(_QWORD *)(a1 + 208);
LABEL_401:
      v634 = *(_QWORD *)(a1 + 864);
      v635 = *(_BYTE **)(v608 + 24 * (int)v568);
      v636 = *(_BYTE **)(v608 + v609 + 8);
      v637 = v636 - v635;
      if (v636 == v635)
      {
        v638 = 0;
        v639 = *(unsigned int *)(a1 + 52);
        if ((int)v639 < 1)
          goto LABEL_413;
LABEL_406:
        v640 = 0;
        v641 = *(_QWORD *)(v634 + 8 * v568);
        v642 = *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v639 < 8)
          goto LABEL_411;
        if ((unint64_t)(v642 - v641) < 0x20)
          goto LABEL_411;
        v640 = v639 & 0x7FFFFFF8;
        v643 = (__int128 *)(v641 + 16);
        v644 = (_OWORD *)(v642 + 16);
        v645 = v639 & 0xFFFFFFF8;
        do
        {
          v646 = *v643;
          *(v644 - 1) = *(v643 - 1);
          *v644 = v646;
          v643 += 2;
          v644 += 2;
          v645 -= 8;
        }
        while (v645);
        if (v640 != v639)
        {
LABEL_411:
          v647 = v639 - v640;
          v648 = 4 * v640;
          v649 = (_DWORD *)(v642 + 4 * v640);
          v650 = (int *)(v641 + v648);
          do
          {
            v651 = *v650++;
            *v649++ = v651;
            --v647;
          }
          while (v647);
        }
        goto LABEL_413;
      }
      if ((v637 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v638 = operator new(v636 - v635);
      memcpy(v638, v635, v637);
      v639 = *(unsigned int *)(a1 + 52);
      if ((int)v639 >= 1)
        goto LABEL_406;
LABEL_413:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v638)
          goto LABEL_419;
      }
      else
      {
        v652 = 0;
        v653 = *(_QWORD *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v653 + 24 * *(int *)(a1 + 1240)) + 4 * v652) = *((_DWORD *)v638 + v652);
          ++v652;
        }
        while (v652 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v638);
      v608 = *(_QWORD *)(a1 + 208);
LABEL_419:
      v654 = *(_QWORD *)(a1 + 936);
      v655 = *(_BYTE **)(v608 + 24 * (int)v568);
      v656 = *(_BYTE **)(v608 + v609 + 8);
      v657 = v656 - v655;
      if (v656 == v655)
      {
        v658 = 0;
        v659 = *(unsigned int *)(a1 + 52);
        if ((int)v659 < 1)
          goto LABEL_431;
LABEL_424:
        v660 = 0;
        v661 = *(_QWORD *)(v654 + 8 * v568);
        v662 = *(_QWORD *)(*(_QWORD *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v659 < 8)
          goto LABEL_429;
        if ((unint64_t)(v662 - v661) < 0x20)
          goto LABEL_429;
        v660 = v659 & 0x7FFFFFF8;
        v663 = (__int128 *)(v661 + 16);
        v664 = (_OWORD *)(v662 + 16);
        v665 = v659 & 0xFFFFFFF8;
        do
        {
          v666 = *v663;
          *(v664 - 1) = *(v663 - 1);
          *v664 = v666;
          v663 += 2;
          v664 += 2;
          v665 -= 8;
        }
        while (v665);
        if (v660 != v659)
        {
LABEL_429:
          v667 = v659 - v660;
          v668 = 4 * v660;
          v669 = (_DWORD *)(v662 + 4 * v660);
          v670 = (int *)(v661 + v668);
          do
          {
            v671 = *v670++;
            *v669++ = v671;
            --v667;
          }
          while (v667);
        }
        goto LABEL_431;
      }
      if ((v657 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v658 = operator new(v656 - v655);
      memcpy(v658, v655, v657);
      v659 = *(unsigned int *)(a1 + 52);
      if ((int)v659 >= 1)
        goto LABEL_424;
LABEL_431:
      if (*(int *)(a1 + 1356) >= 1)
      {
        v672 = 0;
        v673 = *(_QWORD *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v673 + 24 * *(int *)(a1 + 1360)) + 4 * v672) = *((_DWORD *)v658 + v672);
          ++v672;
        }
        while (v672 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_436:
        operator delete(v658);
        goto LABEL_352;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v658)
        goto LABEL_436;
LABEL_352:
      if (++v692 == a5)
        return;
    }
    v614 = 0;
    v615 = *(unsigned int *)(a1 + 52);
    if ((int)v615 < 1)
      goto LABEL_395;
LABEL_388:
    v620 = 0;
    v621 = *(_QWORD *)(v607 + 8 * v568);
    v622 = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v615 < 8)
      goto LABEL_393;
    if ((unint64_t)(v622 - v621) < 0x20)
      goto LABEL_393;
    v620 = v615 & 0x7FFFFFF8;
    v623 = (__int128 *)(v621 + 16);
    v624 = (_OWORD *)(v622 + 16);
    v625 = v615 & 0xFFFFFFF8;
    do
    {
      v626 = *v623;
      *(v624 - 1) = *(v623 - 1);
      *v624 = v626;
      v623 += 2;
      v624 += 2;
      v625 -= 8;
    }
    while (v625);
    if (v620 != v615)
    {
LABEL_393:
      v627 = v615 - v620;
      v628 = 4 * v620;
      v629 = (_DWORD *)(v622 + 4 * v620);
      v630 = (int *)(v621 + v628);
      do
      {
        v631 = *v630++;
        *v629++ = v631;
        --v627;
      }
      while (v627);
    }
    goto LABEL_395;
  }
}

void sub_19C14F268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C14F2C4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE418960);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE418960);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419100 = 0;
      *(_QWORD *)algn_1EE419108 = 0;
      qword_1EE419110 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419100, &dword_19C079000);
      __cxa_guard_release(&qword_1EE418960);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419100);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19C14F390(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19C14F3C4(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t sub_19C14F494(uint64_t a1, void *lpsrc, double a3)
{
  char *v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  void (***v9)(_QWORD, uint64_t, char *, __n128);
  void (**v10)(_QWORD, uint64_t, char *, __n128);
  int v11;
  int v12;
  void (***v13)(_QWORD, uint64_t, uint64_t, __n128);
  void (**v14)(_QWORD, uint64_t, uint64_t, __n128);
  int v15;
  int v16;
  void (***v17)(_QWORD, uint64_t, uint64_t, __n128);
  void (**v18)(_QWORD, uint64_t, uint64_t, __n128);
  int v19;
  int v20;
  void (***v21)(_QWORD, uint64_t, uint64_t, __n128);
  void (**v22)(_QWORD, uint64_t, uint64_t, __n128);
  int v23;
  void (***v24)(_QWORD, uint64_t, uint64_t, __n128);
  int v25;
  void (***v26)(_QWORD, uint64_t, uint64_t, __n128);
  int v27;
  void (***v28)(_QWORD, uint64_t, uint64_t, __n128);
  int v29;
  void (***v30)(_QWORD, uint64_t, uint64_t, __n128);
  uint64_t v31;
  vDSP_Length v32;
  float *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float v40;
  uint64_t v41;
  vDSP_Length v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float v50;
  uint64_t v51;
  vDSP_Length v52;
  float *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float v60;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t *v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  __n128 v74;
  float __C;
  float __B;

  v74.n128_f64[0] = a3;
  if (*(_DWORD *)(a1 + 2496))
    sub_19C2210D4(1);
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 52);
  v8 = v4 + 1464;
  v9 = *(void (****)(_QWORD, uint64_t, char *, __n128))(a1 + 1552);
  sub_19C22CBE0(a1 + 1704);
  if (*(_DWORD *)(a1 + 56))
  {
    v10 = *v9;
    if (*((_DWORD *)v5 + 247) * *((_DWORD *)v5 + 246) < 1)
      (*v10)(v9, a1 + 232, v8, v74);
    else
      v10[1](v9, a1 + 232, v5 + 984, v74);
  }
  else
  {
    (**v9)(v9, a1 + 232, v8, v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 232), 1, &__B, &__C, *(float **)(a1 + 232), 1, v7 * (uint64_t)v6);
  }
  sub_19C22CBE8(a1 + 1704);
  v12 = *(_DWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 52);
  v13 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1568);
  sub_19C22CBE0(a1 + 1776);
  if (*(_DWORD *)(a1 + 56))
  {
    v14 = *v13;
    if (*((_DWORD *)v5 + 307) * *((_DWORD *)v5 + 306) < 1)
      (*v14)(v13, a1 + 248, (uint64_t)(v5 + 1480), v74);
    else
      v14[1](v13, a1 + 248, (uint64_t)(v5 + 1224), v74);
  }
  else
  {
    (**v13)(v13, a1 + 248, (uint64_t)(v5 + 1480), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 248), 1, &__B, &__C, *(float **)(a1 + 248), 1, v12 * (uint64_t)v11);
  }
  sub_19C22CBE8(a1 + 1776);
  v16 = *(_DWORD *)(a1 + 48);
  v15 = *(_DWORD *)(a1 + 52);
  v17 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1560);
  sub_19C22CBE0(a1 + 1848);
  if (*(_DWORD *)(a1 + 56))
  {
    v18 = *v17;
    if (*((_DWORD *)v5 + 277) * *((_DWORD *)v5 + 276) < 1)
      (*v18)(v17, a1 + 240, (uint64_t)(v5 + 1472), v74);
    else
      v18[1](v17, a1 + 240, (uint64_t)(v5 + 1104), v74);
  }
  else
  {
    (**v17)(v17, a1 + 240, (uint64_t)(v5 + 1472), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 240), 1, &__B, &__C, *(float **)(a1 + 240), 1, v16 * (uint64_t)v15);
  }
  sub_19C22CBE8(a1 + 1848);
  v20 = *(_DWORD *)(a1 + 48);
  v19 = *(_DWORD *)(a1 + 52);
  v21 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1576);
  sub_19C22CBE0(a1 + 1920);
  if (*(_DWORD *)(a1 + 56))
  {
    v22 = *v21;
    if (*((_DWORD *)v5 + 337) * *((_DWORD *)v5 + 336) < 1)
      (*v22)(v21, a1 + 256, (uint64_t)(v5 + 1488), v74);
    else
      v22[1](v21, a1 + 256, (uint64_t)(v5 + 1344), v74);
  }
  else
  {
    (**v21)(v21, a1 + 256, (uint64_t)(v5 + 1488), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 256), 1, &__B, &__C, *(float **)(a1 + 256), 1, v20 * (uint64_t)v19);
  }
  sub_19C22CBE8(a1 + 1920);
  v23 = *(_DWORD *)(a1 + 52);
  v24 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1584);
  sub_19C22CBE0(a1 + 1992);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v24)(v24, a1 + 264, (uint64_t)(v5 + 1496), v74);
  }
  else
  {
    (**v24)(v24, a1 + 264, (uint64_t)(v5 + 1496), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 264), 1, &__B, &__C, *(float **)(a1 + 264), 1, (v23 * v23));
  }
  sub_19C22CBE8(a1 + 1992);
  v25 = *(_DWORD *)(a1 + 52);
  v26 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1600);
  sub_19C22CBE0(a1 + 2064);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v26)(v26, a1 + 280, (uint64_t)(v5 + 1512), v74);
  }
  else
  {
    (**v26)(v26, a1 + 280, (uint64_t)(v5 + 1512), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 280), 1, &__B, &__C, *(float **)(a1 + 280), 1, (v25 * v25));
  }
  sub_19C22CBE8(a1 + 2064);
  v27 = *(_DWORD *)(a1 + 52);
  v28 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1592);
  sub_19C22CBE0(a1 + 2136);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v28)(v28, a1 + 272, (uint64_t)(v5 + 1504), v74);
  }
  else
  {
    (**v28)(v28, a1 + 272, (uint64_t)(v5 + 1504), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 272), 1, &__B, &__C, *(float **)(a1 + 272), 1, (v27 * v27));
  }
  sub_19C22CBE8(a1 + 2136);
  v29 = *(_DWORD *)(a1 + 52);
  v30 = *(void (****)(_QWORD, uint64_t, uint64_t, __n128))(a1 + 1608);
  sub_19C22CBE0(a1 + 2208);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v30)(v30, a1 + 288, (uint64_t)(v5 + 1520), v74);
  }
  else
  {
    (**v30)(v30, a1 + 288, (uint64_t)(v5 + 1520), v74);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 288), 1, &__B, &__C, *(float **)(a1 + 288), 1, (v29 * v29));
  }
  sub_19C22CBE8(a1 + 2208);
  sub_19C22CBE0(a1 + 2280);
  v31 = *(unsigned int *)(a1 + 52);
  v32 = (int)v31;
  v33 = *(float **)(a1 + 296);
  if ((int)v31 >= 1)
  {
    v34 = *((_QWORD *)v5 + 191);
    if (v31 < 8 || (unint64_t)v33 < v34 + 4 * v31 && v34 < (unint64_t)&v33[v31])
    {
      v35 = 0;
LABEL_40:
      v36 = v31 - v35;
      v37 = 4 * v35;
      v38 = &v33[v35];
      v39 = (float *)(v34 + v37);
      do
      {
        v40 = *v39++;
        *v38 = *v38 + (float)(v40 * v74.n128_f32[0]);
        ++v38;
        --v36;
      }
      while (v36);
      goto LABEL_42;
    }
    v35 = v31 & 0x7FFFFFF8;
    v62 = (float32x4_t *)(v34 + 16);
    v63 = (float32x4_t *)(v33 + 4);
    v64 = v31 & 0xFFFFFFF8;
    do
    {
      v65 = vmlaq_n_f32(*v63, *v62, v74.n128_f32[0]);
      v63[-1] = vmlaq_n_f32(v63[-1], v62[-1], v74.n128_f32[0]);
      *v63 = v65;
      v62 += 2;
      v63 += 2;
      v64 -= 8;
    }
    while (v64);
    if (v35 != v31)
      goto LABEL_40;
  }
LABEL_42:
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v33, 1, &__B, &__C, v33, 1, v32);
  sub_19C22CBE8(a1 + 2280);
  sub_19C22CBE0(a1 + 2352);
  v41 = *(unsigned int *)(a1 + 52);
  v42 = (int)v41;
  v43 = *(float **)(a1 + 312);
  if ((int)v41 < 1)
    goto LABEL_49;
  v44 = *((_QWORD *)v5 + 193);
  if (v41 < 8 || (unint64_t)v43 < v44 + 4 * v41 && v44 < (unint64_t)&v43[v41])
  {
    v45 = 0;
LABEL_47:
    v46 = v41 - v45;
    v47 = 4 * v45;
    v48 = &v43[v45];
    v49 = (float *)(v44 + v47);
    do
    {
      v50 = *v49++;
      *v48 = *v48 + (float)(v50 * v74.n128_f32[0]);
      ++v48;
      --v46;
    }
    while (v46);
    goto LABEL_49;
  }
  v45 = v41 & 0x7FFFFFF8;
  v66 = (float32x4_t *)(v44 + 16);
  v67 = (float32x4_t *)(v43 + 4);
  v68 = v41 & 0xFFFFFFF8;
  do
  {
    v69 = vmlaq_n_f32(*v67, *v66, v74.n128_f32[0]);
    v67[-1] = vmlaq_n_f32(v67[-1], v66[-1], v74.n128_f32[0]);
    *v67 = v69;
    v66 += 2;
    v67 += 2;
    v68 -= 8;
  }
  while (v68);
  if (v45 != v41)
    goto LABEL_47;
LABEL_49:
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v43, 1, &__B, &__C, v43, 1, v42);
  sub_19C22CBE8(a1 + 2352);
  sub_19C22CBE0(a1 + 2424);
  v51 = *(unsigned int *)(a1 + 52);
  v52 = (int)v51;
  v53 = *(float **)(a1 + 304);
  if ((int)v51 < 1)
    goto LABEL_56;
  v54 = *((_QWORD *)v5 + 192);
  if (v51 < 8 || (unint64_t)v53 < v54 + 4 * v51 && v54 < (unint64_t)&v53[v51])
  {
    v55 = 0;
LABEL_54:
    v56 = v51 - v55;
    v57 = 4 * v55;
    v58 = &v53[v55];
    v59 = (float *)(v54 + v57);
    do
    {
      v60 = *v59++;
      *v58 = *v58 + (float)(v60 * v74.n128_f32[0]);
      ++v58;
      --v56;
    }
    while (v56);
    goto LABEL_56;
  }
  v55 = v51 & 0x7FFFFFF8;
  v70 = (float32x4_t *)(v54 + 16);
  v71 = (float32x4_t *)(v53 + 4);
  v72 = v51 & 0xFFFFFFF8;
  do
  {
    v73 = vmlaq_n_f32(*v71, *v70, v74.n128_f32[0]);
    v71[-1] = vmlaq_n_f32(v71[-1], v70[-1], v74.n128_f32[0]);
    *v71 = v73;
    v70 += 2;
    v71 += 2;
    v72 -= 8;
  }
  while (v72);
  if (v55 != v51)
    goto LABEL_54;
LABEL_56:
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(v53, 1, &__B, &__C, v53, 1, v52);
  return sub_19C22CBE8(a1 + 2424);
}

void sub_19C14FD14()
{
  sub_19C2210D4(1);
}

void sub_19C14FD24()
{
  sub_19C2210D4(0);
}

void sub_19C14FD38(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C152B34(a1);
  operator delete(v1);
}

void sub_19C14FD4C(void **a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  int v8;
  int v9;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v8 = a7;
          v9 = a8;
LABEL_8:
          sub_19C14FE24(a1, a2, a3, a4, v8, v9);
          return;
        case 8u:
          sub_19C150044((float **)a1, a2, a3, a4, a7, a8);
          break;
        case 0x10u:
          sub_19C14FF34((float **)a1, a2, a3, a4, a7, a8);
          break;
      }
      break;
  }
}

void sub_19C14FE24(void **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v11 = *a3 & 0xF;
    if (*a3 <= 0)
      v11 = -(-*a3 & 0xF);
    if (v11 >= 15)
      v12 = 16;
    else
      v12 = 15 - v11;
    sub_19C221368(__stream, a3, v12);
    sub_19C2213F8((size_t)__stream, a3, 85, v12);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  v13 = a6 * a5;
  v14 = (void *)operator new[]();
  bzero(v14, 4 * v13);
  sub_19C2214B0(__stream, a3, *a1, (uint64_t)v14, v13);
  operator delete[](v14);
}

void sub_19C14FF34(float **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  _WORD *v14;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v11 = *a3 & 0xF;
    if (*a3 <= 0)
      v11 = -(-*a3 & 0xF);
    if (v11 >= 15)
      v12 = 16;
    else
      v12 = 15 - v11;
    sub_19C221368(__stream, a3, v12);
    sub_19C2213F8((size_t)__stream, a3, 85, v12);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  v13 = a6 * a5;
  v14 = (_WORD *)operator new[]();
  bzero(v14, 2 * v13);
  sub_19C22150C(__stream, a3, *a1, v14, v13);
  operator delete[](v14);
}

void sub_19C150044(float **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  _BYTE *v14;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v11 = *a3 & 0xF;
    if (*a3 <= 0)
      v11 = -(-*a3 & 0xF);
    if (v11 >= 15)
      v12 = 16;
    else
      v12 = 15 - v11;
    sub_19C221368(__stream, a3, v12);
    sub_19C2213F8((size_t)__stream, a3, 85, v12);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  v13 = a6 * a5;
  v14 = (_BYTE *)operator new[]();
  bzero(v14, v13);
  sub_19C2215E4(__stream, a3, *a1, v14, v13);
  operator delete[](v14);
}

void sub_19C15014C(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, float a5)
{
  uint64_t v5;
  uint64_t v7;
  float **v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t i;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  int64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  void *v45;

  v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 >= 1)
  {
    if ((int)a3 > 0)
    {
      v7 = a3;
      v8 = *(float ***)(a1 + 24);
      if (a3 > 7)
      {
        v17 = a3 - (unint64_t)(a3 & 0xFFFFFFF8);
        if (a3 == (unint64_t)(a3 & 0xFFFFFFF8))
        {
          do
          {
            v18 = (float32x4_t *)(v8[v17] + 4);
            v19 = a3 & 0xFFFFFFF8;
            do
            {
              v20 = vmulq_n_f32(*v18, a5);
              v18[-1] = vmulq_n_f32(v18[-1], a5);
              *v18 = v20;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            ++v17;
          }
          while (v17 != v5);
        }
        else
        {
          for (i = 0; i != v5; ++i)
          {
            v22 = (float32x4_t *)v8[i];
            v23 = v22 + 1;
            v24 = a3 & 0xFFFFFFF8;
            do
            {
              v25 = vmulq_n_f32(*v23, a5);
              v23[-1] = vmulq_n_f32(v23[-1], a5);
              *v23 = v25;
              v23 += 2;
              v24 -= 8;
            }
            while (v24);
            v26 = (float *)((char *)v22->f32 + ((4 * a3) & 0x3FFFFFFE0));
            v27 = a3 - (unint64_t)(a3 & 0xFFFFFFF8);
            do
            {
              *v26 = *v26 * a5;
              ++v26;
              --v27;
            }
            while (v27);
          }
        }
      }
      else
      {
        v9 = *(unsigned int *)(a1 + 16);
        do
        {
          v10 = *v8;
          **v8 = **v8 * a5;
          if (a3 != 1)
          {
            v10[1] = v10[1] * a5;
            if (a3 != 2)
            {
              v10[2] = v10[2] * a5;
              if (a3 != 3)
              {
                v10[3] = v10[3] * a5;
                if (a3 != 4)
                {
                  v10[4] = v10[4] * a5;
                  if (a3 != 5)
                  {
                    v10[5] = v10[5] * a5;
                    if (a3 != 6)
                      v10[6] = v10[6] * a5;
                  }
                }
              }
            }
          }
          ++v8;
          --v9;
        }
        while (v9);
      }
      v28 = 0;
      v29 = a4;
      while (1)
      {
        v30 = *(_QWORD *)(a1 + 24);
        v31 = *(_QWORD *)(a1 + 48) + 24 * v28;
        v33 = *(_BYTE **)v31;
        v32 = *(_BYTE **)(v31 + 8);
        v34 = v32 - v33;
        if (v32 != v33)
        {
          if (v34 < 0)
            goto LABEL_18;
          v35 = (int *)operator new(v32 - v33);
          memcpy(v35, v33, v34);
          v36 = 0;
          v37 = *(_QWORD *)(v30 + 8 * v28);
          v38 = *a2;
          if ((unint64_t)(v34 >> 2) <= 1)
            v39 = 1;
          else
            v39 = v34 >> 2;
          do
          {
            v40 = 0;
            do
            {
              v41 = v36 * v29 + v35[v40];
              v42 = *(float *)(v38 + 4 * v41) + *(float *)(v37 + 4 * v36);
              *(float *)(v38 + 4 * v41) = v42;
              v43 = 2.0;
              if (v42 > 2.0 || (v43 = -2.0, v42 < -2.0))
                *(float *)(v38 + 4 * v41) = v43;
              ++v40;
            }
            while (v39 != v40);
            ++v36;
          }
          while (v36 != v7);
          operator delete(v35);
          LODWORD(v5) = *(_DWORD *)(a1 + 16);
        }
        if (++v28 >= (int)v5)
          return;
      }
    }
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v11);
      v15 = *v13;
      v14 = v13[1];
      v16 = v14 - v15;
      if (v14 != v15)
      {
        if ((v16 & 0x8000000000000000) != 0)
LABEL_18:
          sub_19C07DA0C();
        v45 = operator new(v16);
        operator delete(v45);
        LODWORD(v5) = *(_DWORD *)(a1 + 16);
      }
      ++v12;
      v11 += 24;
    }
    while (v12 < (int)v5);
  }
}

void sub_19C150450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C15046C(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  signed int v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  BOOL v37;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  vDSP_Length v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  vDSP_Length v47;
  float32x4_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  int v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t v87;
  float *v88;
  float *v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t *v103;
  float32x4_t *v104;
  int v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v121;
  uint64_t v123;
  uint64_t v124;
  float32x4_t *v125;
  float32x4_t *v126;
  float32x4_t *v127;
  float32x4_t v128;
  uint64_t v129;
  float *v130;
  float *v131;
  float *v132;
  float v133;
  float v134;
  float v135;
  unint64_t v136;
  BOOL v138;
  float32x4_t *v140;
  float32x4_t *v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  float *v148;
  float *v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  vDSP_Length v154;
  uint64_t v155;
  vDSP_Length v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  float32x4_t *v161;
  float32x4_t *v162;
  int v163;
  float32x2_t *v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int v169;
  uint64_t v170;
  float32x2_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  float32x4_t *v178;
  float32x4_t *v179;
  float32x4_t *v180;
  float32x4_t v181;
  unint64_t v182;
  float *v183;
  float *v184;
  float *v185;
  float v186;
  float v187;
  float v188;
  BOOL v189;
  float32x2_t **v190;
  int v191;
  signed int v192;
  int v195;
  char v196;
  unsigned int v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  void *__B;
  void *v203;
  uint64_t v204;
  float __C[3];

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
  {
    v189 = *(_BYTE *)(v9 + 464) != 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  else
  {
    v189 = 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v195 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_11:
  v195 = 0;
  if (!v9)
  {
LABEL_13:
    v10 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  v10 = *(float *)(v9 + 468);
  if (v10 <= 0.0)
    goto LABEL_13;
LABEL_14:
  if (a5 && *(_BYTE *)(a1 + 2672))
    sub_19C2210D4(34);
  v11 = a4 & 0xFFFFFF;
  if (a5)
    _ZF = *(_BYTE *)(a1 + 42) == 0;
  else
    _ZF = 0;
  v13 = _ZF;
  v14 = v195;
  if (v11 > v13)
  {
    v191 = a4 & 0xFFFFFF;
    v192 = v11 - 1;
    __asm { FMOV            V4.4S, #1.0 }
    v190 = (float32x2_t **)(a1 + 752);
    v198 = _Q4;
    while (1)
    {
      v18 = v11 + ~v13;
      v197 = v13;
      if (!*(_BYTE *)(a1 + 2672))
        v18 = v13;
      v19 = v18;
      v20 = *(_BYTE *)(a1 + 2672) ? v18 < v192 : v18 > 0;
      v21 = *(_BYTE *)(a1 + 2672) ? v18 + 1 : v18 - 1;
      v199 = v21;
      v22 = *(unsigned __int8 *)(a1 + 42);
      v23 = ((*(_BYTE *)(a1 + 42) != 0) & v14) != 0 ? 1 : v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (v14)
        break;
      memmove(*(void **)(v24 + 8 * v23), *(const void **)(*a2 + 8 * v23), 4 * *(int *)(a1 + 44));
      v25 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_40;
LABEL_41:
      if (v14)
      {
        v26 = *(_DWORD *)(a1 + 48);
        v27 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v19);
        *v27 = **(_DWORD **)(*a3 + 24 * v19);
        if (v25)
          v27[1] = v26 - 1;
      }
      v28 = *(_QWORD *)(a1 + 136);
      if (v8 == 1)
        memcpy(*(void **)(v28 + 8 * v23), *(const void **)(*(_QWORD *)(a1 + 64) + 8 * v23), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v28 + 8 * v23), *(const void **)(*a2 + 8 * v23), 4 * *(_DWORD *)(a1 + 44) * v8);
      if (v8 > *(_DWORD *)(a1 + 2688))
        sub_19C2210D4(83724);
      if (v22)
        v29 = 1;
      else
        v29 = v19;
      v30 = 8 * v29;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v29), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      v31 = *(_QWORD *)(a1 + 2680);
      v200 = v19;
      if (!v31)
      {
LABEL_74:
        v36 = v23;
        v35 = 0;
        v37 = !v20;
LABEL_75:
        sub_19C151F80(a1, v195, (float **)(*(_QWORD *)(a1 + 424) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 136) + 8 * v36), *(uint64_t **)(a1 + 2528), *(_QWORD *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v201 = 0;
LABEL_76:
        v40 = 1;
        if (!v37 && !v35)
        {
          sub_19C15294C((float **)(*(_QWORD *)(a1 + 424) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2560), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
          v40 = 0;
        }
        goto LABEL_79;
      }
      v32 = *(_DWORD *)(v31 + 40);
      if (!*(_BYTE *)(v31 + 20) && (v32 == 5 || v32 == 2))
      {
        v33 = *(_DWORD *)(v31 + 44) == 6;
        if (v32 == 5)
          goto LABEL_61;
      }
      else
      {
        v33 = 0;
        if (v32 == 5)
          goto LABEL_61;
      }
      if (v32 != 2)
      {
        if (!v33)
          goto LABEL_74;
        v35 = 0;
LABEL_69:
        v36 = v23;
        v39 = 1;
        sub_19C151600(a1, 0, (float **)(*(_QWORD *)(a1 + 352) + v30), (float **)(*(_QWORD *)(a1 + 376) + v30), (float **)(*(_QWORD *)(a1 + 424) + v30), (void **)(*(_QWORD *)(a1 + 400) + v30), (const void **)(*(_QWORD *)(a1 + 136) + 8 * v23), *(uint64_t **)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1u);
        v37 = !v20;
        v201 = 1;
        if (!v20 || !v35)
          goto LABEL_76;
        goto LABEL_70;
      }
LABEL_61:
      v34 = *(_DWORD *)(v31 + 60);
      v35 = v34 == 22;
      if (v33)
        goto LABEL_69;
      v36 = v23;
      v37 = !v20;
      if (v34 != 22 || !v20)
        goto LABEL_75;
      v39 = 0;
LABEL_70:
      __B = 0;
      v203 = 0;
      v204 = 0;
      sub_19C151600(a1, 0, (float **)(*(_QWORD *)(a1 + 352) + v30), (float **)(*(_QWORD *)(a1 + 376) + v30), (float **)(*(_QWORD *)(a1 + 424) + v30), (void **)(*(_QWORD *)(a1 + 400) + v30), (const void **)(*(_QWORD *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2536), (uint64_t)&__B, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1u);
      if (__B)
      {
        v203 = __B;
        operator delete(__B);
      }
      v35 = 1;
      v40 = 1;
      v201 = 1;
      if ((v39 & 1) == 0)
        goto LABEL_75;
LABEL_79:
      v196 = v40;
      sub_19C1521D4(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v29), *(float32x4_t ***)(a1 + 2608), v8, *(_DWORD *)(a1 + 52));
      v41 = v36;
      v42 = *(_QWORD *)(a1 + 424);
      v43 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v42 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v42 + 8 * v29), 1, v43);
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 520) + v30), (uint64_t *)(*(_QWORD *)(a1 + 424) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 740));
      v44 = v195;
      if ((v201 & 1) == 0)
        sub_19C151F80(a1, v195, (float **)(*(_QWORD *)(a1 + 352) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      sub_19C1521D4(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 352) + 8 * v29), *(float32x4_t ***)(a1 + 2592), v8, *(_DWORD *)(a1 + 52));
      if (v20)
      {
        if (v35)
        {
          v45 = (int)v199;
        }
        else
        {
          sub_19C15294C((float **)(*(_QWORD *)(a1 + 352) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 160) + 8 * v199), *(uint64_t **)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
          v45 = v199;
          v44 = v195;
        }
        sub_19C1524C0(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 352) + 8 * v29), *(float32x4_t ***)(a1 + 2568), (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v45), v8, *(_DWORD *)(a1 + 52));
      }
      v46 = *(_QWORD *)(a1 + 352);
      v47 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v46 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v46 + 8 * v29), 1, v47);
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 448) + v30), (uint64_t *)(*(_QWORD *)(a1 + 352) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v14 = v44;
      if ((v201 & 1) == 0)
        sub_19C151F80(a1, v44, (float **)(*(_QWORD *)(a1 + 376) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2512), *(_QWORD *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      sub_19C1521D4(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v29), *(float32x4_t ***)(a1 + 2600), v8, *(_DWORD *)(a1 + 52));
      v48 = v198;
      if (v20)
      {
        if (!v35)
          sub_19C15294C((float **)(*(_QWORD *)(a1 + 376) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2544), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
        sub_19C1524C0(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v29), *(float32x4_t ***)(a1 + 2576), (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * (int)v199), v8, *(_DWORD *)(a1 + 52));
        v48 = v198;
      }
      v49 = *(_QWORD *)(a1 + 2680);
      if (!v49)
      {
        v51 = *(_DWORD *)(a1 + 52);
        v52 = v200;
        goto LABEL_103;
      }
      v50 = *(unsigned __int8 *)(v49 + 465);
      v51 = *(_DWORD *)(a1 + 52);
      v52 = v200;
      if (v50)
      {
        v53 = (v51 * v8);
        if ((int)v53 >= 1)
        {
          v54 = *(float32x4_t **)(*(_QWORD *)(a1 + 376) + 8 * v29);
          if (v53 < 8)
          {
            v55 = 0;
LABEL_101:
            v59 = v53 - v55;
            v60 = &v54->f32[v55];
            do
            {
              *v60 = *v60 + 1.0;
              ++v60;
              --v59;
            }
            while (v59);
            goto LABEL_103;
          }
          v55 = v53 & 0x7FFFFFF8;
          v56 = v54 + 1;
          v57 = v53 & 0xFFFFFFF8;
          do
          {
            v58 = vaddq_f32(*v56, v48);
            v56[-1] = vaddq_f32(v56[-1], v48);
            *v56 = v58;
            v56 += 2;
            v57 -= 8;
          }
          while (v57);
          if (v55 != v53)
            goto LABEL_101;
        }
      }
LABEL_103:
      v61 = *(_QWORD *)(a1 + 376);
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v61 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v61 + 8 * v29), 1, v51 * v8);
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 472) + v30), (uint64_t *)(*(_QWORD *)(a1 + 376) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v62 = *(_QWORD *)(a1 + 184);
      v63 = *(_QWORD *)(a1 + 520);
      v64 = *(_QWORD *)(a1 + 448);
      v65 = *(int *)(a1 + 52) * (uint64_t)v8;
      if ((int)v65 >= 8)
      {
        v66 = *(float32x4_t **)(v62 + 8 * v52);
        v67 = *(float32x4_t **)(v64 + 8 * v29);
        v68 = (int)v65 / 8;
        v69 = *(float32x4_t **)(v63 + 8 * v29);
        do
        {
          v71 = *v69;
          v70 = v69[1];
          v69 += 2;
          v73 = *v67;
          v72 = v67[1];
          v67 += 2;
          *v66 = vmulq_f32(v73, v71);
          v66[1] = vmulq_f32(v72, v70);
          v66 += 2;
          --v68;
        }
        while (v68);
      }
      v74 = 8 * ((int)v65 / 8);
      if (v74 < (int)v65)
      {
        v75 = *(_QWORD *)(v63 + 8 * v29);
        v76 = *(_QWORD *)(v64 + 8 * v29);
        v77 = *(_QWORD *)(v62 + 8 * v52);
        v78 = v74;
        v79 = v65 - v74;
        if (v79 < 0xC)
          goto LABEL_113;
        v80 = 4 * v74;
        if ((unint64_t)(v77 - v75) < 0x20)
          goto LABEL_113;
        if ((unint64_t)(v77 - v76) < 0x20)
          goto LABEL_113;
        v81 = v79 - (v65 & 7) + v74;
        v82 = v74 + (unint64_t)(v65 & 7) - v65;
        v83 = (float32x4_t *)(v77 + v80 + 16);
        v84 = (float32x4_t *)(v75 + v80 + 16);
        v85 = (float32x4_t *)(v76 + v80 + 16);
        do
        {
          v86 = vmulq_f32(*v85, *v84);
          v83[-1] = vmulq_f32(v85[-1], v84[-1]);
          *v83 = v86;
          v83 += 2;
          v84 += 2;
          v85 += 2;
          v82 += 8;
        }
        while (v82);
        v78 = v81;
        if ((v65 & 7) != 0)
        {
LABEL_113:
          v87 = v65 - v78;
          v88 = (float *)(v77 + 4 * v78);
          v89 = (float *)(v76 + 4 * v78);
          v90 = (float *)(v75 + 4 * v78);
          do
          {
            v91 = *v90++;
            v92 = v91;
            v93 = *v89++;
            *v88++ = v93 * v92;
            --v87;
          }
          while (v87);
        }
      }
      if (!v20)
        goto LABEL_160;
      if (!v189)
      {
        v100 = *(_QWORD *)(a1 + 184);
        v101 = *(_QWORD *)(a1 + 472);
        v102 = *(int *)(a1 + 52) * (uint64_t)v8;
        if ((int)v102 >= 8)
        {
          v103 = *(float32x4_t **)(v100 + 8 * v52);
          v104 = *(float32x4_t **)(v100 + 8 * (int)v199);
          v105 = (int)v102 / 8;
          v106 = *(float32x4_t **)(v101 + 8 * v29);
          do
          {
            v108 = *v106;
            v107 = v106[1];
            v106 += 2;
            v110 = *v104;
            v109 = v104[1];
            v104 += 2;
            v111 = vmlaq_f32(v103[1], v109, v107);
            *v103 = vmlaq_f32(*v103, v110, v108);
            v103[1] = v111;
            v103 += 2;
            --v105;
          }
          while (v105);
        }
        v112 = 8 * ((int)v102 / 8);
        if (v112 < (int)v102)
        {
          v113 = *(_QWORD *)(v101 + 8 * v29);
          v114 = *(_QWORD *)(v100 + 8 * (int)v199);
          v115 = *(_QWORD *)(v100 + 8 * v52);
          v116 = v112;
          v117 = v102 - v112;
          if (v117 < 8)
            goto LABEL_140;
          v118 = 4 * v112;
          v119 = v115 + 4 * v102;
          _CF = v115 + v118 >= (unint64_t)(v114 + 4 * v102) || v114 + 4 * v112 >= v119;
          v121 = !_CF;
          if (v113 + v118 < v119 && v115 + v118 < (unint64_t)(v113 + 4 * v102))
            goto LABEL_140;
          if (v121)
            goto LABEL_140;
          v123 = v117 - (v102 & 7) + v116;
          v124 = v116 + (v102 & 7) - v102;
          v125 = (float32x4_t *)(v115 + v118 + 16);
          v126 = (float32x4_t *)(v113 + v118 + 16);
          v127 = (float32x4_t *)(v114 + v118 + 16);
          do
          {
            v128 = vmlaq_f32(*v125, *v127, *v126);
            v125[-1] = vmlaq_f32(v125[-1], v127[-1], v126[-1]);
            *v125 = v128;
            v125 += 2;
            v126 += 2;
            v127 += 2;
            v124 += 8;
          }
          while (v124);
          v116 = v123;
          if ((v102 & 7) != 0)
          {
LABEL_140:
            v129 = v102 - v116;
            v130 = (float *)(v115 + 4 * v116);
            v131 = (float *)(v114 + 4 * v116);
            v132 = (float *)(v113 + 4 * v116);
            do
            {
              v133 = *v132++;
              v134 = v133;
              v135 = *v131++;
              *v130 = *v130 + (float)(v135 * v134);
              ++v130;
              --v129;
            }
            while (v129);
          }
        }
        goto LABEL_160;
      }
      v94 = (*(_DWORD *)(a1 + 52) * v8);
      if ((int)v94 >= 1)
      {
        v95 = *(_QWORD *)(a1 + 184);
        v96 = *(float32x4_t **)(v95 + 8 * (int)v199);
        v97 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v29);
        v98 = *(_QWORD *)(v95 + 8 * v52);
        if (v94 >= 8)
        {
          v99 = 0;
          v136 = v98 + 4 * v94;
          v138 = v98 < (unint64_t)v97->u64 + 4 * v94 && (unint64_t)v97 < v136;
          if (((unint64_t)v96 >= v136 || v98 >= (unint64_t)v96->u64 + 4 * v94) && !v138)
          {
            v99 = v94 & 0x7FFFFFF8;
            v140 = v96 + 1;
            v141 = v97 + 1;
            v142 = (float32x4_t *)(v98 + 16);
            v143 = v94 & 0xFFFFFFF8;
            do
            {
              v144 = vaddq_f32(vmlsq_f32(*v140, *v140, *v141), *v142);
              v142[-1] = vaddq_f32(vmlsq_f32(v140[-1], v140[-1], v141[-1]), v142[-1]);
              *v142 = v144;
              v140 += 2;
              v141 += 2;
              v142 += 2;
              v143 -= 8;
            }
            while (v143);
            if (v99 == v94)
              goto LABEL_160;
          }
        }
        else
        {
          v99 = 0;
        }
        v145 = v94 - v99;
        v146 = v99;
        v147 = (float *)(v98 + v146 * 4);
        v148 = &v97->f32[v146];
        v149 = &v96->f32[v146];
        do
        {
          v150 = *v149++;
          v151 = v150;
          v152 = *v148++;
          *v147 = (float)(v151 - (float)(v152 * v151)) + *v147;
          ++v147;
          --v145;
        }
        while (v145);
      }
LABEL_160:
      v153 = *(_QWORD *)(a1 + 184);
      v154 = *(int *)(a1 + 52) * (uint64_t)v8;
      *(float *)&__B = -v10;
      __C[0] = v10;
      vDSP_vclip(*(const float **)(v153 + 8 * v52), 1, (const float *)&__B, __C, *(float **)(v153 + 8 * v52), 1, v154);
      if ((v201 & 1) == 0)
        sub_19C151F80(a1, v44, (float **)(*(_QWORD *)(a1 + 400) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2520), *(_QWORD *)(a1 + 208) + 24 * (int)v52, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      sub_19C1521D4(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v29), *(float32x4_t ***)(a1 + 2616), v8, *(_DWORD *)(a1 + 52));
      if ((v196 & 1) == 0)
        sub_19C15294C((float **)(*(_QWORD *)(a1 + 400) + 8 * v29), (const void **)(*(_QWORD *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2552), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
      sub_19C1524C0(a1, *(_QWORD *)(a1 + 2680), (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v29), *(float32x4_t ***)(a1 + 2584), (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v52), v8, *(_DWORD *)(a1 + 52));
      v155 = *(_QWORD *)(a1 + 400);
      v156 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v155 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v155 + 8 * v29), 1, v156);
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 496) + v30), (uint64_t *)(*(_QWORD *)(a1 + 400) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C0A3DD8(v190, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v52), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v157 = *(_QWORD *)(a1 + 160);
      v158 = *(_QWORD *)(a1 + 496);
      v159 = *(int *)(a1 + 52) * (uint64_t)v8;
      v160 = (int)v159 / 8;
      if ((int)v159 >= 8)
      {
        v161 = *(float32x4_t **)(v157 + 8 * v52);
        v162 = *(float32x4_t **)(v158 + 8 * v29);
        v163 = (int)v159 / 8;
        v164 = *v190;
        do
        {
          v166 = *(float32x4_t *)v164->f32;
          v165 = *(float32x4_t *)v164[2].f32;
          v164 += 4;
          v168 = *v162;
          v167 = v162[1];
          v162 += 2;
          *v161 = vmulq_f32(v168, v166);
          v161[1] = vmulq_f32(v167, v165);
          v161 += 2;
          --v163;
        }
        while (v163);
      }
      v169 = 8 * v160;
      if (8 * v160 < (int)v159)
      {
        v170 = *(_QWORD *)(v158 + 8 * v29);
        v171 = *v190;
        v172 = *(_QWORD *)(v157 + 8 * v52);
        v173 = v169;
        v174 = v159 - v169;
        if (v174 < 0xC)
          goto LABEL_174;
        v175 = 4 * v169;
        if ((unint64_t)(v172 - (_QWORD)v171) < 0x20)
          goto LABEL_174;
        if ((unint64_t)(v172 - v170) < 0x20)
          goto LABEL_174;
        v176 = v174 - (v159 & 7) + v169;
        v177 = v169 + (unint64_t)(v159 & 7) - v159;
        v178 = (float32x4_t *)(v172 + v175 + 16);
        v179 = (float32x4_t *)((char *)&v171[2] + v175);
        v180 = (float32x4_t *)(v170 + v175 + 16);
        do
        {
          v181 = vmulq_f32(*v180, *v179);
          v178[-1] = vmulq_f32(v180[-1], v179[-1]);
          *v178 = v181;
          v178 += 2;
          v179 += 2;
          v180 += 2;
          v177 += 8;
        }
        while (v177);
        v173 = v176;
        if ((v159 & 7) != 0)
        {
LABEL_174:
          v182 = v159 - v173;
          v183 = (float *)(v172 + 4 * v173);
          v184 = (float *)(v170 + 4 * v173);
          v185 = (float *)v171 + v173;
          do
          {
            v186 = *v185++;
            v187 = v186;
            v188 = *v184++;
            *v183++ = v188 * v187;
            --v182;
          }
          while (v182);
        }
      }
      if (*(_BYTE *)(a1 + 2692))
      {
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v52), *(const void **)(*(_QWORD *)(a1 + 160) + 8 * v52), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v52), *(const void **)(*(_QWORD *)(a1 + 184) + 8 * v52), 4 * *(int *)(a1 + 52));
      }
      v13 = v197 + 1;
      v11 = v191;
      if (v197 + 1 == v191)
        return;
    }
    bzero(*(void **)(v24 + 8 * v23), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v23) + 4 * **(int **)(*a3 + 24 * (int)v19)) = 1065353216;
    v25 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_41;
LABEL_40:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v23) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_41;
  }
}

void sub_19C151558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void *v56;

  v56 = *(void **)(v54 - 152);
  if (v56)
  {
    *(_QWORD *)(v54 - 144) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C151600(uint64_t a1, int a2, float **a3, float **a4, float **a5, void **a6, const void **a7, uint64_t *a8, uint64_t a9, int a10, int a11, int a12, unsigned __int8 a13)
{
  void **v14;
  float **v17;
  int v19;
  int v20;
  void *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  int v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  const float *v58;
  const float *v59;
  float *v60;
  vDSP_Length v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  uint64_t v72;
  _DWORD *v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _DWORD *v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int *v108;
  int v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  int *v125;
  int v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  const void *v131;
  float **v132;
  float *__C;
  float *__Ca;
  uint64_t *__dst;
  vDSP_Length __Na;

  if (a2)
    sub_19C2210D4(545);
  v14 = a6;
  v17 = a3;
  v19 = 4 * a11;
  if (!*(_QWORD *)(a1 + 784))
  {
    __dst = a8;
    v20 = *(_DWORD *)(a1 + 2688) * v19;
    v21 = (void *)operator new[]();
    bzero(v21, 4 * v20);
    *(_QWORD *)(a1 + 784) = v21;
    v22 = *(char **)(a1 + 2632);
    v23 = *(_QWORD *)(a1 + 2640);
    __C = (float *)a4;
    if ((unint64_t)v22 < v23)
    {
      *(_QWORD *)v22 = v21;
      v24 = (uint64_t)(v22 + 8);
      v14 = a6;
LABEL_22:
      *(_QWORD *)(a1 + 2632) = v24;
      a4 = (float **)__C;
      a8 = __dst;
      v17 = a3;
      goto LABEL_23;
    }
    v132 = a5;
    v25 = (char **)(a1 + 2624);
    v26 = *(char **)(a1 + 2624);
    v27 = (char *)(v22 - v26);
    v28 = (v22 - v26) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      sub_19C07DA0C();
    v30 = v23 - (_QWORD)v26;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        sub_19C07C7FC();
      v32 = operator new(8 * v31);
      v28 = (v22 - v26) >> 3;
      v25 = (char **)(a1 + 2624);
      v27 = (char *)(v22 - v26);
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v21;
      v24 = (uint64_t)(v33 + 1);
      v35 = (char *)(v22 - v26);
      if (v22 != v26)
      {
LABEL_14:
        v36 = (unint64_t)(v35 - 8);
        v14 = a6;
        if (v36 < 0x58)
          goto LABEL_117;
        if ((unint64_t)(v22 - v32 - (_QWORD)v27) < 0x20)
          goto LABEL_117;
        v37 = (v36 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v22[-v38];
        v33 = (_QWORD *)((char *)v33 - v38);
        v40 = &v32[8 * v28 - 16];
        v41 = v22 - 16;
        v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 32;
          v42 -= 4;
        }
        while (v42);
        v22 = v39;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_117:
          do
          {
            v44 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v33 = v44;
          }
          while (v22 != v26);
        }
        v22 = *v25;
        *(_QWORD *)(a1 + 2624) = v33;
        *(_QWORD *)(a1 + 2632) = v24;
        *(_QWORD *)(a1 + 2640) = v34;
        a5 = v132;
        if (!v22)
          goto LABEL_22;
LABEL_21:
        operator delete(v22);
        goto LABEL_22;
      }
    }
    else
    {
      v32 = 0;
      v33 = (_QWORD *)(8 * v28);
      v34 = 0;
      *(_QWORD *)(8 * v28) = v21;
      v24 = 8 * v28 + 8;
      v35 = (char *)(v22 - v26);
      if (v22 != v26)
        goto LABEL_14;
    }
    v14 = a6;
    *(_QWORD *)(a1 + 2624) = v33;
    *(_QWORD *)(a1 + 2632) = v24;
    *(_QWORD *)(a1 + 2640) = v34;
    a5 = v132;
    if (!v22)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_23:
  sub_19C15294C((float **)(a1 + 784), a7, a8, a10, a12, 4 * a11, 111, 0.0);
  v45 = *v17;
  v46 = *a4;
  v47 = *a5;
  v48 = (float *)*v14;
  v49 = a11 * a10;
  __Na = a11 * a10;
  v50 = 4 * __Na;
  if (a10 >= 1)
  {
    __Ca = v47;
    bzero(*(void **)(a1 + 752), 4 * v49);
    v51 = 4 * a11;
    v52 = 4 * v19;
    if (a11 <= 0)
    {
LABEL_47:
      if ((a13 & 1) != 0)
      {
        vDSP_vadd(*(const float **)(a1 + 752), 1, v45, 1, v45, 1, __Na);
        bzero(*(void **)(a1 + 752), v50);
        v76 = a13;
        if (a11 < 1)
          goto LABEL_71;
      }
      else
      {
        memmove(v45, *(const void **)(a1 + 752), v50);
        bzero(*(void **)(a1 + 752), v50);
        v76 = a13;
        if (a11 < 1)
        {
LABEL_71:
          if ((v76 & 1) != 0)
          {
            vDSP_vadd(*(const float **)(a1 + 752), 1, v46, 1, v46, 1, __Na);
            bzero(*(void **)(a1 + 752), v50);
            if (a11 < 1)
              goto LABEL_87;
          }
          else
          {
            memmove(v46, *(const void **)(a1 + 752), v50);
            bzero(*(void **)(a1 + 752), v50);
            if (a11 < 1)
            {
LABEL_87:
              if ((v76 & 1) != 0)
              {
                vDSP_vadd(*(const float **)(a1 + 752), 1, __Ca, 1, __Ca, 1, __Na);
                bzero(*(void **)(a1 + 752), v50);
                if (a11 < 1)
                {
LABEL_103:
                  v131 = *(const void **)(a1 + 752);
                  if (v76)
                  {
                    v58 = *(const float **)(a1 + 752);
                    v59 = v48;
                    v61 = a11 * a10;
                    v60 = v48;
                    goto LABEL_105;
                  }
                  goto LABEL_108;
                }
              }
              else
              {
                memmove(__Ca, *(const void **)(a1 + 752), v50);
                bzero(*(void **)(a1 + 752), v50);
                if (a11 < 1)
                  goto LABEL_103;
              }
              v114 = 0;
              v115 = 0;
              v116 = 3 * a11;
              v117 = *(_QWORD *)(a1 + 784);
              v118 = *(_QWORD *)(a1 + 752);
              v119 = v117 + 12 * a11;
              v120 = (__int128 *)(v119 + 16);
              v121 = (_OWORD *)(v118 + 16);
              while (1)
              {
                if (a11 >= 8 && (unint64_t)(v118 + v51 * v115 - (v119 + v52 * v115)) >= 0x20)
                {
                  v127 = v121;
                  v128 = v120;
                  v129 = a11 & 0xFFFFFFF8;
                  do
                  {
                    v130 = *v128;
                    *(v127 - 1) = *(v128 - 1);
                    *v127 = v130;
                    v128 += 2;
                    v127 += 2;
                    v129 -= 8;
                  }
                  while (v129);
                  v122 = a11 & 0x7FFFFFF8;
                  if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
                    goto LABEL_92;
                }
                else
                {
                  v122 = 0;
                }
                v123 = a11 - v122;
                v124 = (_DWORD *)(v118 + 4 * (v122 + v114));
                v125 = (int *)(v117 + 4 * (v122 + v116));
                do
                {
                  v126 = *v125++;
                  *v124++ = v126;
                  --v123;
                }
                while (v123);
LABEL_92:
                ++v115;
                v120 = (__int128 *)((char *)v120 + v52);
                v121 = (_OWORD *)((char *)v121 + v51);
                v114 += a11;
                v116 += v19;
                if (v115 == a10)
                  goto LABEL_103;
              }
            }
          }
          v97 = 0;
          v98 = 0;
          v99 = 2 * a11;
          v100 = *(_QWORD *)(a1 + 784);
          v101 = *(_QWORD *)(a1 + 752);
          v102 = v100 + 8 * a11;
          v103 = (__int128 *)(v102 + 16);
          v104 = (_OWORD *)(v101 + 16);
          while (1)
          {
            if (a11 >= 8 && (unint64_t)(v101 + v51 * v98 - (v102 + v52 * v98)) >= 0x20)
            {
              v110 = v104;
              v111 = v103;
              v112 = a11 & 0xFFFFFFF8;
              do
              {
                v113 = *v111;
                *(v110 - 1) = *(v111 - 1);
                *v110 = v113;
                v111 += 2;
                v110 += 2;
                v112 -= 8;
              }
              while (v112);
              v105 = a11 & 0x7FFFFFF8;
              if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
                goto LABEL_76;
            }
            else
            {
              v105 = 0;
            }
            v106 = a11 - v105;
            v107 = (_DWORD *)(v101 + 4 * (v105 + v97));
            v108 = (int *)(v100 + 4 * (v105 + v99));
            do
            {
              v109 = *v108++;
              *v107++ = v109;
              --v106;
            }
            while (v106);
LABEL_76:
            ++v98;
            v103 = (__int128 *)((char *)v103 + v52);
            v104 = (_OWORD *)((char *)v104 + v51);
            v97 += a11;
            v99 += v19;
            if (v98 == a10)
              goto LABEL_87;
          }
        }
      }
      v77 = *(_QWORD *)(a1 + 784);
      v78 = *(_QWORD *)(a1 + 752);
      v79 = v51 + v77;
      if (a11 < 8)
      {
        v80 = (_DWORD *)(v78 + 12);
        v81 = (_DWORD *)(v79 + 12);
        v82 = a10;
        do
        {
          *(v80 - 3) = *(v81 - 3);
          if (a11 != 1)
          {
            *(v80 - 2) = *(v81 - 2);
            if (a11 != 2)
            {
              *(v80 - 1) = *(v81 - 1);
              if (a11 != 3)
              {
                *v80 = *v81;
                if (a11 != 4)
                {
                  v80[1] = v81[1];
                  if (a11 != 5)
                  {
                    v80[2] = v81[2];
                    if (a11 != 6)
                      v80[3] = v81[3];
                  }
                }
              }
            }
          }
          v80 = (_DWORD *)((char *)v80 + v51);
          v81 = (_DWORD *)((char *)v81 + v52);
          --v82;
        }
        while (v82);
        goto LABEL_71;
      }
      v83 = 0;
      v84 = 0;
      v85 = (__int128 *)(v79 + 16);
      v86 = (_OWORD *)(v78 + 16);
      v87 = a11;
      while (1)
      {
        if ((unint64_t)(v78 + v51 * v84 - (v79 + v52 * v84)) >= 0x20)
        {
          v89 = v86;
          v90 = v85;
          v91 = a11 & 0xFFFFFFF8;
          do
          {
            v92 = *v90;
            *(v89 - 1) = *(v90 - 1);
            *v89 = v92;
            v90 += 2;
            v89 += 2;
            v91 -= 8;
          }
          while (v91);
          v88 = a11 & 0x7FFFFFF8;
          if ((a11 & 0xFFFFFFF8) == (unint64_t)a11)
            goto LABEL_62;
        }
        else
        {
          v88 = 0;
        }
        v93 = a11 - v88;
        v94 = (_DWORD *)(v78 + 4 * (v88 + v83));
        v95 = (int *)(v77 + 4 * (v88 + v87));
        do
        {
          v96 = *v95++;
          *v94++ = v96;
          --v93;
        }
        while (v93);
LABEL_62:
        ++v84;
        v85 = (__int128 *)((char *)v85 + v52);
        v86 = (_OWORD *)((char *)v86 + v51);
        v83 += a11;
        v87 += v19;
        if (v84 == a10)
          goto LABEL_71;
      }
    }
    v53 = *(_QWORD *)(a1 + 784);
    v54 = *(_QWORD *)(a1 + 752);
    if (a11 < 8)
    {
      v55 = (_DWORD *)(v54 + 12);
      v56 = (_DWORD *)(v53 + 12);
      v57 = a10;
      do
      {
        *(v55 - 3) = *(v56 - 3);
        if (a11 != 1)
        {
          *(v55 - 2) = *(v56 - 2);
          if (a11 != 2)
          {
            *(v55 - 1) = *(v56 - 1);
            if (a11 != 3)
            {
              *v55 = *v56;
              if (a11 != 4)
              {
                v55[1] = v56[1];
                if (a11 != 5)
                {
                  v55[2] = v56[2];
                  if (a11 != 6)
                    v55[3] = v56[3];
                }
              }
            }
          }
        }
        v55 = (_DWORD *)((char *)v55 + v51);
        v56 = (_DWORD *)((char *)v56 + v52);
        --v57;
      }
      while (v57);
      goto LABEL_47;
    }
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = (__int128 *)(v53 + 16);
    v66 = (_OWORD *)(v54 + 16);
    while (1)
    {
      if ((unint64_t)(v54 + v51 * v64 - (v53 + v52 * v64)) >= 0x20)
      {
        v68 = a11 & 0x7FFFFFF8;
        v69 = v66;
        v70 = v65;
        do
        {
          v71 = *v70;
          *(v69 - 1) = *(v70 - 1);
          *v69 = v71;
          v70 += 2;
          v69 += 2;
          v68 -= 8;
        }
        while (v68);
        v67 = a11 & 0xFFFFFFF8;
        if (v67 == a11)
          goto LABEL_38;
      }
      else
      {
        v67 = 0;
      }
      v72 = a11 - v67;
      v73 = (_DWORD *)(v54 + 4 * (v67 + v62));
      v74 = (int *)(v53 + 4 * (v67 + v63));
      do
      {
        v75 = *v74++;
        *v73++ = v75;
        --v72;
      }
      while (v72);
LABEL_38:
      v63 += v19;
      ++v64;
      v65 = (__int128 *)((char *)v65 + v52);
      v66 = (_OWORD *)((char *)v66 + v51);
      v62 += a11;
      if (v64 == a10)
        goto LABEL_47;
    }
  }
  bzero(*(void **)(a1 + 752), 4 * v49);
  if ((a13 & 1) != 0)
  {
    vDSP_vadd(*(const float **)(a1 + 752), 1, v45, 1, v45, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v46, 1, v46, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v47, 1, v47, 1, __Na);
    bzero(*(void **)(a1 + 752), v50);
    v58 = *(const float **)(a1 + 752);
    v59 = v48;
    v60 = v48;
    v61 = a11 * a10;
LABEL_105:
    vDSP_vadd(v58, 1, v59, 1, v60, 1, v61);
    return;
  }
  memmove(v45, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  memmove(v46, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  memmove(v47, *(const void **)(a1 + 752), v50);
  bzero(*(void **)(a1 + 752), v50);
  v131 = *(const void **)(a1 + 752);
LABEL_108:
  memmove(v48, v131, v50);
}

void sub_19C151F80(uint64_t a1, int a2, float **a3, const void **a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  uint64_t v15;
  const void *v16;
  int64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  const float *v26;
  float *v27;
  vDSP_Length v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;

  if ((a10 & 1) != 0)
  {
    if (!a2)
    {
      sub_19C15294C((float **)(a1 + 752), a4, a5, a7, a9, a8, 111, 0.0);
      v26 = *(const float **)(a1 + 752);
      v27 = *a3;
      v28 = a8 * a7;
LABEL_27:
      vDSP_vadd(v26, 1, v27, 1, v27, 1, v28);
      return;
    }
    if (a7 != 1)
      sub_19C2210D4(502);
    v16 = *(const void **)a6;
    v15 = *(_QWORD *)(a6 + 8);
    v17 = v15 - *(_QWORD *)a6;
    if (v15 == *(_QWORD *)a6)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      if (v17 < 0)
        sub_19C07DA0C();
      v18 = (int *)operator new(v15 - *(_QWORD *)a6);
      v19 = &v18[v17 >> 2];
      memcpy(v18, v16, v17);
      v20 = 4 * (v17 >> 2);
      if (v20 == 8)
      {
        if (a8 >= 1)
        {
          v22 = *v18;
          v21 = v18[1];
          v23 = *a5;
          v24 = a8;
          v25 = *(float **)(a1 + 760);
          do
          {
            *v25++ = *(float *)(v23 + 4 * v21) + *(float *)(v23 + 4 * v22);
            v23 += 4 * a9;
            --v24;
          }
          while (v24);
        }
        goto LABEL_24;
      }
    }
    if (a8 >= 1)
    {
      v29 = *(_DWORD **)(a1 + 760);
      if (v19 != v18)
      {
        v30 = 0;
        v31 = v20 >> 2;
        v32 = *a5;
        if (v31 <= 1)
          v31 = 1;
        do
        {
          v29[v30] = 0;
          v33 = 0.0;
          v34 = v18;
          v35 = v31;
          do
          {
            v36 = *v34++;
            v33 = *(float *)(v32 + 4 * (v30 * a9 + v36)) + v33;
            *(float *)&v29[v30] = v33;
            --v35;
          }
          while (v35);
          ++v30;
        }
        while (v30 != a8);
        goto LABEL_25;
      }
      bzero(v29, 4 * a8);
    }
LABEL_24:
    if (!v18)
    {
LABEL_26:
      v26 = *(const float **)(a1 + 760);
      v27 = *a3;
      v28 = a8;
      goto LABEL_27;
    }
LABEL_25:
    operator delete(v18);
    goto LABEL_26;
  }
  if (a2)
    sub_19C2210D4(456);
  sub_19C15294C(a3, a4, a5, a7, a9, a8, 111, 0.0);
}

void sub_19C1521B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1521D4(uint64_t a1, uint64_t a2, uint64_t *a3, float32x4_t **a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  BOOL v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t *v62;
  uint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float v69;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 244) && a5 >= 1)
    {
      if (a6 >= 0)
        v7 = a6;
      else
        v7 = a6 + 7;
      v8 = (int)(v7 & 0xFFFFFFF8);
      v9 = a6;
      if (a6 < 8)
      {
        if ((int)v8 < a6)
        {
          v33 = *a3;
          v34 = *a4;
          v35 = a5;
          v36 = 4 * v8;
          v37 = 4 * a6;
          v38 = (unint64_t)(*a4)->u64 + 4 * v8;
          v39 = a6 - v8;
          if (v39 >= 8)
          {
            v53 = 0;
            v54 = a6 - (a6 & 7);
            v55 = (float32x4_t *)((char *)v34 + v36 + 16);
            v56 = (float32x4_t *)(v33 + v36 + 16);
            v57 = v33 + v36;
            v58 = v33;
            do
            {
              v59 = v57 + v37 * v53 >= (unint64_t)v34 + v37 || v38 >= v33 + v37 + v37 * v53;
              v60 = v8;
              if (!v59)
                goto LABEL_49;
              v61 = v56;
              v62 = v55;
              v63 = v8 + (v9 & 7) - v9;
              do
              {
                v64 = vaddq_f32(*v61, *v62);
                v61[-1] = vaddq_f32(v61[-1], v62[-1]);
                *v61 = v64;
                v62 += 2;
                v61 += 2;
                v63 += 8;
              }
              while (v63);
              v60 = v54;
              if ((v9 & 7) != 0)
              {
LABEL_49:
                v65 = v9 - v60;
                v66 = v60;
                v67 = (float *)(v58 + 4 * v60);
                v68 = &v34->f32[v66];
                do
                {
                  v69 = *v68++;
                  *v67 = *v67 + v69;
                  ++v67;
                  --v65;
                }
                while (v65);
              }
              ++v53;
              v56 = (float32x4_t *)((char *)v56 + v37);
              v58 += v37;
            }
            while (v53 != v35);
          }
          else
          {
            v40 = 0;
            v41 = (float *)(v33 + v36);
            do
            {
              v42 = (float *)v38;
              v43 = v41;
              v44 = v39;
              do
              {
                v45 = *v42++;
                *v43 = *v43 + v45;
                ++v43;
                --v44;
              }
              while (v44);
              ++v40;
              v41 = (float *)((char *)v41 + v37);
            }
            while (v40 != v35);
          }
        }
      }
      else
      {
        v10 = v7 >> 3;
        if ((int)v8 >= a6)
        {
          v46 = 0;
          do
          {
            v47 = (float32x4_t *)(*a3 + 4 * v46 * a6);
            v48 = *a4;
            v49 = v10;
            do
            {
              v50 = *v48;
              v51 = v48[1];
              v48 += 2;
              v52 = vaddq_f32(v47[1], v51);
              *v47 = vaddq_f32(*v47, v50);
              v47[1] = v52;
              v47 += 2;
              --v49;
            }
            while (v49);
            ++v46;
          }
          while (v46 != a5);
        }
        else
        {
          v11 = 0;
          v12 = 0;
          v13 = *a4;
          v14 = 4 * v8;
          v15 = 4 * v9;
          v16 = 4 * v8 + 16;
          do
          {
            v17 = *a3;
            v18 = (float32x4_t *)(*a3 + 4 * v12 * v9);
            v19 = v10;
            do
            {
              v20 = *v13;
              v21 = v13[1];
              v13 += 2;
              v22 = vaddq_f32(v18[1], v21);
              *v18 = vaddq_f32(*v18, v20);
              v18[1] = v22;
              v18 += 2;
              --v19;
            }
            while (v19);
            v13 = *a4;
            v23 = v8;
            if ((unint64_t)(v9 - v8) < 8)
              goto LABEL_24;
            v24 = v17 + v14 + v15 * v12 >= (unint64_t)v13 + v15
               || (unint64_t)v13 + v14 >= v17 + v15 + v15 * v12;
            v23 = v8;
            if (!v24)
              goto LABEL_24;
            v25 = (float32x4_t *)((char *)v13 + 4 * v8 + 16);
            v26 = (float32x4_t *)(v17 + v16);
            v27 = v8 + (v9 & 7) - v9;
            do
            {
              v28 = vaddq_f32(*v26, *v25);
              v26[-1] = vaddq_f32(v26[-1], v25[-1]);
              *v26 = v28;
              v25 += 2;
              v26 += 2;
              v27 += 8;
            }
            while (v27);
            v23 = v9 - (v9 & 7);
            if ((v9 & 7) != 0)
            {
LABEL_24:
              v29 = v9 - v23;
              v30 = (float *)(v17 + v11 + 4 * v23);
              v31 = &v13->f32[v23];
              do
              {
                v32 = *v31++;
                *v30 = *v30 + v32;
                ++v30;
                --v29;
              }
              while (v29);
            }
            ++v12;
            v16 += v15;
            v11 += v15;
          }
          while (v12 != a5);
        }
      }
    }
  }
}

uint64_t sub_19C1524C0(uint64_t result, uint64_t a2, uint64_t *a3, float32x4_t **a4, uint64_t *a5, int a6, int a7)
{
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  float32x4_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float v52;
  int v53;
  signed int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  float *v66;
  float *v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v90;
  BOOL v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  float *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float v105;
  float32x4_t *v106;
  float32x4_t *v107;
  uint64_t v108;
  float32x4_t *v109;
  float *v110;
  float *v111;
  float *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v120;
  BOOL v121;
  float *v122;
  float *v123;
  float *v124;
  uint64_t v125;
  float32x4_t *v126;
  float32x4_t *v127;
  float32x4_t *v128;
  uint64_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float v133;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 384))
      v7 = a6 <= 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  else if (a6 < 1)
  {
    return result;
  }
  v8 = *(_DWORD *)(result + 52);
  if (v8 < 8)
  {
    v53 = v8 + 7;
    if (v8 >= 0)
      v53 = *(_DWORD *)(result + 52);
    v54 = v53 & 0xFFFFFFF8;
    if (v54 < v8)
    {
      v55 = *a3;
      v56 = *a5;
      result = v54;
      v57 = v8;
      v58 = *a4;
      v59 = a6;
      v60 = 4 * v54;
      v61 = &(*a4)->f32[(unint64_t)v60 / 4];
      v62 = v57 - result;
      if ((unint64_t)(v57 - result) > 7)
      {
        v73 = 4 * a7;
        v74 = 4 * v57;
        v75 = &v58->i8[4 * v57];
        v76 = 0;
        v77 = v57 & 7;
        if ((v57 & 7) != 0)
        {
          v78 = v57 - v77;
          v79 = result + v77 - v57;
          v80 = (float32x4_t *)(v55 + v60 + 16);
          v81 = (float32x4_t *)(v56 + v60 + 16);
          v82 = v56;
          v83 = v55;
          do
          {
            v84 = v74 + v73 * v76;
            v85 = v56 + v84;
            v86 = v60 + v73 * v76;
            v87 = v55 + v84;
            v88 = v55 + v86;
            v90 = v55 + v86 < v85 && v56 + v86 < v87;
            v91 = (unint64_t)v61 >= v87 || v88 >= (unint64_t)v75;
            v92 = result;
            if (v91)
            {
              v92 = result;
              if (!v90)
              {
                v93 = v81;
                v94 = (float32x4_t *)((char *)v58 + v60 + 16);
                v95 = v80;
                v96 = v79;
                do
                {
                  v97 = vmlaq_f32(*v95, *v93, *v94);
                  v95[-1] = vmlaq_f32(v95[-1], v93[-1], v94[-1]);
                  *v95 = v97;
                  v95 += 2;
                  v94 += 2;
                  v93 += 2;
                  v96 += 8;
                }
                while (v96);
                v92 = v78;
              }
            }
            v98 = v57 - v92;
            v99 = v92;
            v100 = (float *)(v83 + 4 * v92);
            v101 = (float *)(v82 + v99 * 4);
            v102 = &v58->f32[v99];
            do
            {
              v103 = *v102++;
              v104 = v103;
              v105 = *v101++;
              *v100 = *v100 + (float)(v105 * v104);
              ++v100;
              --v98;
            }
            while (v98);
            ++v76;
            v80 = (float32x4_t *)((char *)v80 + v73);
            v81 = (float32x4_t *)((char *)v81 + v73);
            v83 += v73;
            v82 += v73;
          }
          while (v76 != a6);
        }
        else
        {
          result -= v57;
          v106 = (float32x4_t *)((char *)v58 + v60 + 16);
          v107 = (float32x4_t *)(v55 + v60 + 16);
          v108 = 4 * a7;
          v109 = (float32x4_t *)(v56 + v60 + 16);
          v110 = (float *)(v55 + v60);
          v111 = (float *)(v56 + v60);
          v112 = &v58->f32[(unint64_t)v60 / 4];
          do
          {
            v113 = v74 + v73 * v76;
            v114 = v56 + v113;
            v115 = v60 + v73 * v76;
            v116 = v56 + v115;
            v117 = v55 + v113;
            v118 = v55 + v115;
            v120 = v118 < v114 && v116 < v117;
            v121 = (unint64_t)v61 >= v117 || v118 >= (unint64_t)v75;
            v122 = v112;
            v123 = v111;
            v124 = v110;
            v125 = v62;
            if (!v121)
              goto LABEL_85;
            v126 = v109;
            v127 = v107;
            v128 = v106;
            v129 = result;
            v122 = v112;
            v123 = v111;
            v124 = v110;
            v125 = v62;
            if (v120)
            {
LABEL_85:
              do
              {
                v131 = *v122++;
                v132 = v131;
                v133 = *v123++;
                *v124 = *v124 + (float)(v133 * v132);
                ++v124;
                --v125;
              }
              while (v125);
            }
            else
            {
              do
              {
                v130 = vmlaq_f32(*v127, *v126, *v128);
                v127[-1] = vmlaq_f32(v127[-1], v126[-1], v128[-1]);
                *v127 = v130;
                v128 += 2;
                v127 += 2;
                v126 += 2;
                v129 += 8;
              }
              while (v129);
            }
            ++v76;
            v107 = (float32x4_t *)((char *)v107 + v108);
            v109 = (float32x4_t *)((char *)v109 + v108);
            v110 = (float *)((char *)v110 + v108);
            v111 = (float *)((char *)v111 + v108);
          }
          while (v76 != v59);
        }
      }
      else
      {
        v63 = 0;
        v64 = (float *)(v55 + v60);
        v65 = 4 * a7;
        v66 = (float *)(v56 + v60);
        do
        {
          v67 = v61;
          v68 = v66;
          v69 = v64;
          result = v62;
          do
          {
            v70 = *v67++;
            v71 = v70;
            v72 = *v68++;
            *v69 = *v69 + (float)(v72 * v71);
            ++v69;
            --result;
          }
          while (result);
          ++v63;
          v64 = (float *)((char *)v64 + v65);
          v66 = (float *)((char *)v66 + v65);
        }
        while (v63 != a6);
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = a7;
    v12 = a6;
    v13 = 4 * a7;
    v14 = 16;
    do
    {
      v15 = *a3;
      v16 = *a5;
      v17 = *(int *)(result + 52);
      v18 = (int)v17 / 8;
      if ((int)v17 >= 8)
      {
        v19 = 4 * v10 * v11;
        v20 = (float32x4_t *)(v15 + v19);
        v21 = (float32x4_t *)(v16 + v19);
        v22 = *a4;
        v23 = (int)v17 / 8;
        do
        {
          v25 = *v22;
          v24 = v22[1];
          v22 += 2;
          v27 = *v21;
          v26 = v21[1];
          v21 += 2;
          v28 = vmlaq_f32(v20[1], v26, v24);
          *v20 = vmlaq_f32(*v20, v27, v25);
          v20[1] = v28;
          v20 += 2;
          --v23;
        }
        while (v23);
      }
      v29 = 8 * v18;
      if (8 * v18 < (int)v17)
      {
        v30 = *a4;
        v31 = v29;
        v32 = v17 - v29;
        if (v32 < 0xC)
          goto LABEL_32;
        v33 = 4 * v29;
        v34 = v13 * v10 + v33;
        v35 = v15 + v34;
        v36 = v13 * v10 + 4 * v17;
        v37 = v15 + v36;
        v38 = v16 + v34;
        v39 = v35 >= v16 + v36 || v38 >= v37;
        v40 = !v39;
        if ((unint64_t)v30->u64 + 4 * v31 < v37 && v35 < (unint64_t)v30->u64 + 4 * v17)
          goto LABEL_32;
        if (v40)
          goto LABEL_32;
        v42 = v32 - (v17 & 7) + v31;
        v43 = v31 + (v17 & 7) - v17;
        v44 = (float32x4_t *)(v15 + v9 + v33);
        v45 = (float32x4_t *)((char *)v30 + v33 + 16);
        v46 = (float32x4_t *)(v16 + v14 + v33);
        do
        {
          v47 = vmlaq_f32(v44[1], *v46, *v45);
          *v44 = vmlaq_f32(*v44, v46[-1], v45[-1]);
          v44[1] = v47;
          v44 += 2;
          v45 += 2;
          v46 += 2;
          v43 += 8;
        }
        while (v43);
        v31 = v42;
        if ((v17 & 7) != 0)
        {
LABEL_32:
          v48 = v17 - v31;
          v49 = v15 + 4 * v31;
          v50 = v16 + 4 * v31;
          v51 = &v30->f32[v31];
          do
          {
            v52 = *v51++;
            *(float *)(v49 + v9) = *(float *)(v49 + v9) + (float)(*(float *)(v50 + v9) * v52);
            v49 += 4;
            v50 += 4;
            --v48;
          }
          while (v48);
        }
      }
      ++v10;
      v9 += v13;
      v14 += v13;
    }
    while (v10 != v12);
  }
  return result;
}

void sub_19C15294C(float **a1, const void **a2, uint64_t *a3, int a4, int a5, int a6, int a7, float a8)
{
  vDSP_Length v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  void *v20;
  int v21;
  float *v22;
  _DWORD v23[8];
  _QWORD v24[6];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[3];
  _QWORD v31[3];

  if (a7 != 111)
  {
    cblas_sgemm_NEWLAPACK();
    return;
  }
  v15 = a6 * a4;
  v16 = (qword_1ECD3EE70 - qword_1ECD3EE68) >> 2;
  if (v15 <= v16)
  {
    if (v15 < v16)
      qword_1ECD3EE70 = qword_1ECD3EE68 + 4 * v15;
  }
  else
  {
    sub_19C0A36A4((uint64_t)&qword_1ECD3EE68, v15 - v16);
  }
  v17 = *a3;
  v18 = a5;
  v30[2] = 0;
  v31[0] = a5;
  v31[1] = 0x3F80000000010020;
  v31[2] = 0;
  v30[0] = a6;
  v30[1] = 0x3F80000000010020;
  v24[0] = a5;
  v24[1] = a6;
  v24[2] = v17;
  v24[3] = 0x3F80000000010020;
  v24[4] = 0;
  v24[5] = 0;
  v25 = xmmword_19C277458;
  v26 = unk_19C277468;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  bzero(v23, 0x20uLL);
  v23[0] = 1;
  v19 = (void *)MEMORY[0x1A1AD1434](v31, v30, v24, v23);
  if (!v19)
    sub_19C2210D4(1011);
  v20 = v19;
  v21 = BNNSFilterApplyBatch(v19, a4, *a2, v18, (void *)qword_1ECD3EE68, a6);
  v22 = *a1;
  if (a8 != 0.0)
  {
    vDSP_vadd(v22, 1, (const float *)qword_1ECD3EE68, 1, *a1, 1, v15);
    if (!v21)
      goto LABEL_10;
LABEL_12:
    sub_19C2210D4(346);
  }
  memcpy(v22, (const void *)qword_1ECD3EE68, 4 * v15);
  if (v21)
    goto LABEL_12;
LABEL_10:
  BNNSFilterDestroy(v20);
}

_QWORD *sub_19C152B34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  *a1 = &unk_1E3D1FA40;
  sub_19C14C9E4(a1);
  v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[194] = 0;
    v3 = a1[195];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    a1[195] = 0;
    v4 = a1[196];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    a1[196] = 0;
    v5 = a1[197];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    a1[197] = 0;
    v6 = a1[198];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    a1[198] = 0;
    v7 = a1[199];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    a1[199] = 0;
    v8 = a1[200];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    a1[200] = 0;
    v9 = a1[201];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    a1[201] = 0;
  }
  v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19C22CB78((uint64_t)(a1 + 303));
  sub_19C22CB78((uint64_t)(a1 + 294));
  sub_19C22CB78((uint64_t)(a1 + 285));
  sub_19C22CB78((uint64_t)(a1 + 276));
  sub_19C22CB78((uint64_t)(a1 + 267));
  sub_19C22CB78((uint64_t)(a1 + 258));
  sub_19C22CB78((uint64_t)(a1 + 249));
  sub_19C22CB78((uint64_t)(a1 + 240));
  sub_19C22CB78((uint64_t)(a1 + 231));
  sub_19C22CB78((uint64_t)(a1 + 222));
  sub_19C22CB78((uint64_t)(a1 + 213));
  sub_19C101AC4(a1 + 168);
  sub_19C101AC4(a1 + 153);
  sub_19C101AC4(a1 + 138);
  sub_19C101AC4(a1 + 123);
  v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  v36 = a1[26];
  if (v36)
  {
    v37 = a1[27];
    v38 = (void *)a1[26];
    if (v37 != v36)
    {
      v39 = a1[27];
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1E3D1E2D8;
  v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}

uint64_t sub_19C152F14(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  float v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int32x2_t v22;
  __int128 v24;
  char v25;
  void *__p[2];
  char v27;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20A40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(_QWORD *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(_BYTE *)(*(_QWORD *)(a1 + 528) + 376);
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  v27 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v27 < 0)
  {
    operator delete(__p[0]);
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  else
  {
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  v18 = *(_DWORD *)(a7 + 32);
  switch(v18)
  {
    case 2:
      v20 = operator new();
      *(_QWORD *)v20 = &unk_1E3D1E968;
      *(float *)(v20 + 24) = v15;
      *(_DWORD *)(v20 + 28) = v16;
      *(_DWORD *)(v20 + 32) = 841731191;
      v21 = v17;
      *(_QWORD *)(v20 + 128) = 114;
      *(_WORD *)(v20 + 143) = 265;
      *(int32x2_t *)(v20 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 12) = 0;
      *(float *)(v20 + 36) = v21;
      *(_DWORD *)(v20 + 40) = v16;
      *(float *)(v20 + 44) = v21;
      *(_OWORD *)(v20 + 48) = 0u;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_QWORD *)(v20 + 112) = 0;
      *(_QWORD *)(v20 + 120) = 0x6579614C6C6C7546;
LABEL_14:
      *(_QWORD *)(a1 + 424) = v20;
      return a1;
    case 1:
      v20 = operator new();
      *(float *)(v20 + 20) = v15;
      *(_DWORD *)(v20 + 24) = v16;
      *(_DWORD *)(v20 + 28) = 841731191;
      *(double *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 144) = 114;
      *(_WORD *)(v20 + 159) = 265;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v20 = &unk_1E3D1E270;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 40) = v16;
      *(double *)(v20 + 48) = v17;
      *(int32x2_t *)(v20 + 56) = v22;
      *(_DWORD *)(v20 + 164) = 0;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_OWORD *)(v20 + 112) = 0u;
      *(_QWORD *)(v20 + 128) = 0;
      *(_QWORD *)(v20 + 136) = 0x6579614C6C6C7546;
      goto LABEL_14;
    case 0:
      v19 = operator new();
      v25 = 9;
      strcpy((char *)&v24, "FullLayer");
      sub_19C0FCB2C(v19, &v24, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v15);
      *(_QWORD *)(a1 + 424) = v19;
      if (v25 < 0)
        operator delete((void *)v24);
      break;
  }
  return a1;
}

void sub_19C15325C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void **v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v23);
  sub_19C22CB78(v22);
  v26 = *(void **)(v20 + 384);
  if (v26)
  {
    *(_QWORD *)(v20 + 392) = v26;
    operator delete(v26);
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
    {
LABEL_5:
      v28 = *(void **)(v20 + 312);
      if (!v28)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
      goto LABEL_5;
  }
  *(_QWORD *)(v20 + 344) = v27;
  operator delete(v27);
  v28 = *(void **)(v20 + 312);
  if (!v28)
  {
LABEL_6:
    v29 = *(void **)(v20 + 288);
    if (!v29)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v20 + 320) = v28;
  operator delete(v28);
  v29 = *(void **)(v20 + 288);
  if (!v29)
  {
LABEL_7:
    v30 = *(void **)(v20 + 264);
    if (!v30)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v20 + 296) = v29;
  operator delete(v29);
  v30 = *(void **)(v20 + 264);
  if (!v30)
  {
LABEL_8:
    sub_19C101AC4(v21);
    v31 = *(void **)(v20 + 72);
    if (!v31)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v20 + 272) = v30;
  operator delete(v30);
  sub_19C101AC4(v21);
  v31 = *(void **)(v20 + 72);
  if (!v31)
  {
LABEL_9:
    v32 = *v24;
    if (!*v24)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v20 + 80) = v31;
  operator delete(v31);
  v32 = *v24;
  if (!*v24)
  {
LABEL_10:
    *(_QWORD *)v20 = &unk_1E3D1E2D8;
    v33 = *(void **)(v20 + 8);
    if (!v33)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v20 + 56) = v32;
  operator delete(v32);
  *(_QWORD *)v20 = &unk_1E3D1E2D8;
  v33 = *(void **)(v20 + 8);
  if (!v33)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  *(_QWORD *)(v20 + 16) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_19C1533B8()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C1533C8(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C1533D0(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19C1533D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C1533E4(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19C1533EC()
{
  return 0;
}

_BYTE *sub_19C1533F4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 512);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 117);
  v18 = sub_19C2210A4();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

void sub_19C153508(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  void **v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 104);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 408));
  v11 = *(void ***)(a1 + 512);
  v12 = sub_19C2210A4();
  sub_19C14FD4C(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

float32_t sub_19C1535B0(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  float32x4_t v6;
  _QWORD *v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
      v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
      if ((int)v8 < 1)
        return v6.f32[0];
      goto LABEL_7;
    }
  }
  v7 = 0;
  v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v8 < 1)
    return v6.f32[0];
LABEL_7:
  v9 = (float32x4_t *)v7[16];
  v10 = (float32x4_t *)v5[16];
  v11 = **(float32x4_t ***)(a1 + 512);
  if (v8 < 8)
  {
    v12 = 0;
LABEL_14:
    v18 = v8 - v12;
    v19 = v12;
    v20 = (__int32 *)((char *)v11 + v19 * 4);
    v21 = &v10->f32[v19];
    v22 = &v9->f32[v19];
    do
    {
      v23 = *v22++;
      v24 = v23;
      v25 = *v21++;
      v6.f32[0] = v24 - v25;
      *v20++ = v6.i32[0];
      --v18;
    }
    while (v18);
    return v6.f32[0];
  }
  v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20)
    goto LABEL_14;
  v12 = v8 & 0x7FFFFFF8;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v11 + 1;
  v16 = v8 & 0xFFFFFFF8;
  do
  {
    v6 = vsubq_f32(v13[-1], v14[-1]);
    v17 = vsubq_f32(*v13, *v14);
    v15[-1] = v6;
    *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8)
    goto LABEL_14;
  return v6.f32[0];
}

void *sub_19C1536FC(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  return result;
}

void sub_19C153764(uint64_t a1, void *lpsrc)
{
  const float **v3;
  const float **v4;
  vDSP_Length v5;
  float __B;

  v3 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  v4 = *(const float ***)(a1 + 512);
  v5 = *(int *)(a1 + 104) * (uint64_t)*(int *)(a1 + 100);
  __B = 1.0;
  vDSP_vsma(v3[16], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void sub_19C1537DC(uint64_t a1, void *lpsrc)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const float **v7;
  vDSP_Length v8;
  float __C;
  float __B;

  if (lpsrc)
    v3 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 424);
  v5 = *(_QWORD *)(a1 + 512);
  v6 = v3 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  (**(void (***)(uint64_t, uint64_t, char *))v4)(v4, v5, v6);
  v7 = *(const float ***)(a1 + 512);
  v8 = *(int *)(a1 + 108);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
}

void sub_19C153898(uint64_t a1, float a2)
{
  const float **v2;
  vDSP_Length v3;
  float __C;
  float __B;

  v2 = *(const float ***)(a1 + 512);
  v3 = *(int *)(a1 + 108);
  __B = -a2;
  __C = a2;
  vDSP_vclip(*v2, 1, &__B, &__C, (float *)*v2, 1, v3);
}

uint64_t sub_19C1538E0(uint64_t result, float a2)
{
  uint64_t v2;
  float32x4_t *v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  uint64_t v8;
  float *v9;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = **(float32x4_t ***)(result + 512);
    if (v2 < 8)
    {
      v4 = 0;
LABEL_7:
      v8 = v2 - v4;
      v9 = &v3->f32[v4];
      do
      {
        *v9 = *v9 * a2;
        ++v9;
        --v8;
      }
      while (v8);
      return result;
    }
    v4 = v2 & 0x7FFFFFF8;
    v5 = v3 + 1;
    v6 = v2 & 0xFFFFFFF8;
    do
    {
      v7 = vmulq_n_f32(*v5, a2);
      v5[-1] = vmulq_n_f32(v5[-1], a2);
      *v5 = v7;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v4 != v2)
      goto LABEL_7;
  }
  return result;
}

uint64_t sub_19C153964(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
}

void sub_19C153974(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 512);
  v5 = *(_DWORD *)(a1 + 100);
  v4 = *(_DWORD *)(a1 + 104);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C153A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t sub_19C153A98(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C153AA4(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C153AAC(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277590;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C153B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C153B64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 80) = v6;
    v11 = *(_QWORD *)(a1 + 240);
    v10 = *(_QWORD *)(a1 + 248);
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v7;
  v11 = *(_QWORD *)(a1 + 240);
  v10 = *(_QWORD *)(a1 + 248);
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v11 = *(_QWORD *)(a1 + 240);
      v10 = *(_QWORD *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(_QWORD *)(a1 + 248) = v11;
  v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  v17 = *(_QWORD *)(a1 + 360);
  v16 = *(_QWORD *)(a1 + 368);
  if (v16 != v17)
  {
    v18 = *(_QWORD *)(a1 + 368);
    do
    {
      v20 = *(void **)(v18 - 24);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *(_QWORD *)(v16 - 16) = v19;
        operator delete(v19);
      }
      v16 = v18;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 368) = v17;
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

float sub_19C153CF8(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float result;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.1755e-38;
    do
    {
      v9 = *(float *)(*(_QWORD *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8)
        v6 = v7;
      v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19C153DA8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t **v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  __int32 *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 1.1755e-38;
    do
    {
      v11 = *(float *)(*(_QWORD *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10)
        v8 = v9;
      v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0])
        v12 = v13;
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      v19 = *v15;
      v20 = *(float32x4_t **)(v6 + 8 * a4);
      v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          v22 = v18 & 0x7FFFFFF8;
          v23 = v19 + 1;
          v24 = v20 + 1;
          v25 = v21 + 1;
          v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18)
            return a6.f32[0];
        }
      }
      else
      {
        v22 = 0;
      }
      v28 = &v21->i32[v22];
      v29 = &v20->f32[v22];
      v30 = &v19->f32[v22];
      v31 = v18 - v22;
      do
      {
        v32 = *v30++;
        v33 = v32;
        v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19C153F40(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  float32x4_t v8;
  uint64_t v9;
  vDSP_Length v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  uint64_t v22;
  NSObject *global_queue;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float __C;
  _QWORD __B[7];
  int v40;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    sub_19C10B530((void **)(a1 + 416), (float32x4_t **)(*(_QWORD *)(a1 + 384) + 8 * a4), (const void **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    cblas_sgemv_NEWLAPACK();
    v9 = *(_QWORD *)(a1 + 312);
    v10 = *(int *)(a1 + 104);
    __C = 50.0;
    LODWORD(__B[0]) = -1035468800;
    vDSP_vclip(*(const float **)(v9 + 8 * a4), 1, (const float *)__B, &__C, *(float **)(v9 + 8 * a4), 1, v10);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    v18 = *(_QWORD *)(a1 + 264) + 8 * a4;
    v19 = a1 + 416;
    v20 = *(_DWORD *)(a1 + 104);
    v21 = *(int *)(a1 + 100);
    v22 = *(_QWORD *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    __B[0] = MEMORY[0x1E0C809B0];
    __B[1] = 0x40000000;
    __B[2] = sub_19C103680;
    __B[3] = &unk_1E3D25490;
    v40 = v20;
    __B[4] = v22;
    __B[5] = v19;
    __B[6] = v18;
    dispatch_apply(v21, global_queue, __B);
    return;
  }
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 360) + 24 * a4;
  v14 = *(_BYTE **)v12;
  v13 = *(_BYTE **)(v12 + 8);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if ((v15 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v16 = operator new(v13 - v14);
    memcpy(v16, v14, v15);
    v17 = *(unsigned int *)(a1 + 100);
    if ((int)v17 < 1)
      goto LABEL_20;
    goto LABEL_13;
  }
  v16 = 0;
  v17 = *(unsigned int *)(a1 + 100);
  if ((int)v17 >= 1)
  {
LABEL_13:
    v24 = 0;
    v25 = *(_QWORD *)(v11 + 8 * a4);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v17 < 8)
      goto LABEL_18;
    if ((unint64_t)(v26 - v25) < 0x20)
      goto LABEL_18;
    v24 = v17 & 0x7FFFFFF8;
    v27 = (__int128 *)(v25 + 16);
    v28 = (_OWORD *)(v26 + 16);
    v29 = v17 & 0xFFFFFFF8;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 8;
    }
    while (v29);
    if (v24 != v17)
    {
LABEL_18:
      v31 = v17 - v24;
      v32 = 4 * v24;
      v33 = (_DWORD *)(v26 + 4 * v24);
      v34 = (int *)(v25 + v32);
      do
      {
        v35 = *v34++;
        *v33++ = v35;
        --v31;
      }
      while (v31);
    }
  }
LABEL_20:
  if (*(int *)(a1 + 156) >= 1)
  {
    v36 = 0;
    v37 = *(_QWORD *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v37 + 24 * *(int *)(a1 + 160)) + 4 * v36) = *((_DWORD *)v16 + v36);
      ++v36;
    }
    while (v36 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
    goto LABEL_25;
  }
  ++*(_DWORD *)(a1 + 160);
  if (v16)
LABEL_25:
    operator delete(v16);
}

void sub_19C154224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C154240(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      v4 = *(_QWORD *)(a1 + 264);
      if (*(_QWORD *)(a1 + 272) == v4)
        goto LABEL_7;
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) == v4)
    goto LABEL_7;
LABEL_5:
  v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    v4 = *(_QWORD *)(a1 + 264);
  }
  while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
LABEL_7:
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(_BYTE *)(a1 + 116))
  {
    v8 = 0;
    v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(_BYTE *)(a1 + 116))
        goto LABEL_14;
    }
  }
}

uint64_t sub_19C154364(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19C15436C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_19C154378(uint64_t a1)
{
  uint64_t (**v1)(void);

  v1 = **(uint64_t (****)(void))(a1 + 424);
  if (*(int *)(a1 + 112) < 1)
    return (*v1)();
  else
    return v1[1]();
}

void sub_19C1543AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    v10 = __OFSUB__(a5, 1);
    v9 = a5 - 1;
    if (v9 < 0 != v10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    v9 = a5 - 1;
    if (a5 < 1)
      return;
  }
  v11 = 0;
  do
  {
    if (*(_BYTE *)(a1 + 520))
      v12 = v11;
    else
      v12 = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19C154458(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  _QWORD *v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  vDSP_Length v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  float __C;
  float __B;

  v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    v9 = 0;
    if (!a5)
      goto LABEL_7;
  }
  else
  {
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5)
      goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 520))
    sub_19C2210D4(34);
LABEL_7:
  v10 = a4 & 0xFFFFFF;
  v11 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v11)
  {
    v45 = v7;
    v44 = a4 & 0xFFFFFF;
    while (1)
    {
      v15 = *(_BYTE *)(a1 + 520) ? v10 + ~v11 : v11;
      v16 = v15;
      v17 = *(_BYTE *)(a1 + 42) ? 1 : v15;
      v18 = ((*(_BYTE *)(a1 + 42) != 0) & v9) != 0 ? 1 : v15;
      v19 = *(_QWORD *)(a1 + 264);
      if (!v9)
        break;
      bzero(*(void **)(v19 + 8 * v18), 4 * *(int *)(a1 + 104));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v18) + 4 * **(int **)(*v7 + 24 * (int)v16)) = 1065353216;
      v20 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_24;
LABEL_25:
      if (v9)
      {
        v21 = *(_QWORD *)(a1 + 360);
        v22 = *(char **)(v21 + 24 * v16);
        *(_DWORD *)v22 = **(_DWORD **)(*v7 + 24 * v16);
        if (v20)
          *((_DWORD *)v22 + 1) = *(_DWORD *)(a1 + 104) - 1;
        v23 = *(_QWORD *)(a1 + 384);
        v24 = *(char **)(v21 + 24 * (int)v16 + 8);
        v25 = v24 - v22;
        if (v24 == v22)
        {
          v26 = 0;
          v27 = 0;
        }
        else
        {
          if (v25 < 0)
            sub_19C07DA0C();
          v26 = (int *)operator new(v24 - v22);
          v27 = &v26[v25 >> 2];
          memcpy(v26, v22, v25);
        }
        v12 = v17;
        v28 = *(uint64_t **)(a1 + 512);
        v29 = *(unsigned int *)(a1 + 100);
        v30 = *(int *)(a1 + 104);
        if ((char *)v27 - (char *)v26 == 8)
        {
          if ((int)v29 >= 1)
          {
            v32 = *v26;
            v31 = v26[1];
            v33 = 4 * v30;
            v34 = *v28;
            v35 = *(float **)(v23 + 8 * v17);
            do
            {
              *v35++ = *(float *)(v34 + 4 * v31) + *(float *)(v34 + 4 * v32);
              v34 += v33;
              --v29;
            }
            while (v29);
          }
        }
        else if ((int)v29 >= 1)
        {
          v36 = *(_DWORD **)(v23 + 8 * v17);
          if (v27 != v26)
          {
            v37 = 0;
            v38 = v27 - v26;
            v39 = *v28;
            if (v38 <= 1)
              v38 = 1;
            v7 = v45;
            v10 = v44;
            do
            {
              v36[v37] = 0;
              v40 = 0.0;
              v41 = v26;
              v42 = v38;
              do
              {
                v43 = *v41++;
                v40 = *(float *)(v39 + 4 * (v37 * v30 + v43)) + v40;
                *(float *)&v36[v37] = v40;
                --v42;
              }
              while (v42);
              ++v37;
            }
            while (v37 != v29);
LABEL_48:
            operator delete(v26);
            goto LABEL_10;
          }
          bzero(v36, 4 * v29);
        }
        v7 = v45;
        v10 = v44;
        if (v26)
          goto LABEL_48;
      }
      else
      {
        v12 = v17;
        cblas_sgemv_NEWLAPACK();
      }
LABEL_10:
      v13 = *(_QWORD *)(a1 + 384);
      v14 = *(int *)(a1 + 100);
      __C = 50.0;
      __B = -50.0;
      vDSP_vclip(*(const float **)(v13 + 8 * v12), 1, &__B, &__C, *(float **)(v13 + 8 * v12), 1, v14);
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 288) + 8 * v16), (const void **)(*(_QWORD *)(a1 + 384) + 8 * v12), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
      if (++v11 == v10)
        return;
    }
    memmove(*(void **)(v19 + 8 * v18), *(const void **)(*a2 + 8 * v18), 4 * *(int *)(a1 + 96));
    v20 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_25;
LABEL_24:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v18) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_25;
  }
}

void sub_19C1547FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C154818(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE419130);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE419130);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419118 = 0;
      unk_1EE419120 = 0;
      qword_1EE419128 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419118, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419130);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419118);
  a1[520] = 0;
  return result;
}

uint64_t sub_19C1548E4(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19C154918(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

uint64_t sub_19C154978(uint64_t a1, void *lpsrc, float a3)
{
  void (**v5)(float);
  const float **v6;
  vDSP_Length v7;
  float __C;
  float __B;

  if (*(_DWORD *)(a1 + 504))
    sub_19C2210D4(1);
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0))__cxa_bad_cast();
  sub_19C22CBE0(a1 + 432);
  v5 = **(void (****)(float))(a1 + 424);
  if (*(_DWORD *)(a1 + 112))
  {
    v5[1](a3);
  }
  else
  {
    (*v5)(a3);
    v6 = *(const float ***)(a1 + 512);
    v7 = *(int *)(a1 + 108);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*v6, 1, &__B, &__C, (float *)*v6, 1, v7);
  }
  return sub_19C22CBE8(a1 + 432);
}

_DWORD *sub_19C154A68(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float sub_19C154A80(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 100);
  v4 = *(float ***)(a1 + 288);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C154BC0(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C155DE4(a1);
  operator delete(v1);
}

uint64_t sub_19C154BD4(uint64_t a1)
{
  return a1 + 336;
}

float sub_19C154BDC(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19C154BEC(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 288);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19C154D6C(uint64_t a1, float a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  void **p_vtable;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char **v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  void *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _OWORD *v152;
  __int128 *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _OWORD *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  int v232;
  char **v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236[8];

  v4 = *(_QWORD *)(a1 + 528);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 376);
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_3:
      v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
      v7 = *(_DWORD *)(a1 + 100) * v6;
      *(_DWORD *)(a1 + 104) = v6;
      *(_DWORD *)(a1 + 108) = v7;
      if (*(_DWORD *)(a1 + 504))
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v10 = *(_DWORD *)(a1 + 96);
  v7 = *(_DWORD *)(a1 + 100) * v10;
  *(_DWORD *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 108) = v7;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    if (*(_BYTE *)(a1 + 116))
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 117))
  {
    if (v4 && *(_DWORD *)(v4 + 40) == 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 112);
    }
    else
    {
      *(_QWORD *)&v236[0] = operator new[]();
      bzero(*(void **)&v236[0], 4 * v7);
      sub_19C0FCEBC(v236, v7, a2);
      v11 = *(_QWORD *)&v236[0];
      *(_QWORD *)(a1 + 128) = *(_QWORD *)&v236[0];
      v13 = *(char **)(a1 + 80);
      v12 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(char **)(a1 + 72);
        v16 = (v13 - v15) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          goto LABEL_263;
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            goto LABEL_264;
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v11;
        v14 = v21 + 8;
        if (v13 != v15)
        {
          v23 = v13 - v15 - 8;
          if (v23 < 0x58)
            goto LABEL_268;
          if ((unint64_t)(v15 - v20) < 0x20)
            goto LABEL_268;
          v24 = (v23 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v26 = &v13[-v25];
          v21 -= v25;
          v27 = &v20[8 * v16 - 16];
          v28 = (__int128 *)(v13 - 16);
          v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v28;
            *((_OWORD *)v27 - 1) = *(v28 - 1);
            *(_OWORD *)v27 = v30;
            v27 -= 32;
            v28 -= 2;
            v29 -= 4;
          }
          while (v29);
          v13 = v26;
          if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_268:
            do
            {
              v31 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v21 - 1) = v31;
              v21 -= 8;
            }
            while (v13 != v15);
          }
          v13 = *(char **)(a1 + 72);
        }
        *(_QWORD *)(a1 + 72) = v21;
        *(_QWORD *)(a1 + 80) = v14;
        *(_QWORD *)(a1 + 88) = v22;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v13 = v11;
        v14 = v13 + 8;
      }
      *(_QWORD *)(a1 + 80) = v14;
    }
  }
  *(_QWORD *)(a1 + 512) = a1 + 128;
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  if (!*(_BYTE *)(a1 + 116))
  {
LABEL_37:
    v32 = *(unsigned int *)(a1 + 100);
    v33 = (void *)operator new[]();
    v34 = v33;
    if ((int)v32 >= 1)
      bzero(v33, 4 * v32);
    *(_QWORD *)(a1 + 416) = v34;
    v35 = (char **)(a1 + 48);
    v37 = *(char **)(a1 + 56);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v37 < v36)
    {
      *(_QWORD *)v37 = v34;
      v38 = (uint64_t)(v37 + 8);
      goto LABEL_62;
    }
    v39 = *v35;
    v40 = v37 - *v35;
    v41 = v40 >> 3;
    v42 = (v40 >> 3) + 1;
    if (v42 >> 61)
      goto LABEL_263;
    v43 = v36 - (_QWORD)v39;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        goto LABEL_264;
      v45 = operator new(8 * v44);
      v46 = &v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = v34;
      v38 = (uint64_t)(v46 + 1);
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
      {
LABEL_50:
        v49 = (unint64_t)(v48 - 8);
        if (v49 >= 0x58)
        {
          v50 = v37 - &v45[v40];
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v50 >= 0x20)
          {
            v51 = (v49 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v53 = &v37[-v52];
            v46 = (_QWORD *)((char *)v46 - v52);
            v54 = &v45[8 * v41 - 16];
            v55 = v37 - 16;
            v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            v37 = v53;
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_60:
              v37 = *v35;
              *(_QWORD *)(a1 + 48) = v46;
              *(_QWORD *)(a1 + 56) = v38;
              *(_QWORD *)(a1 + 64) = v47;
              if (!v37)
                goto LABEL_62;
              goto LABEL_61;
            }
          }
        }
        else
        {
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        }
        do
        {
          v58 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v46 = v58;
        }
        while (v37 != v39);
        goto LABEL_60;
      }
    }
    else
    {
      v45 = 0;
      v46 = (_QWORD *)(8 * v41);
      v47 = 0;
      *(_QWORD *)(8 * v41) = v34;
      v38 = 8 * v41 + 8;
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
        goto LABEL_50;
    }
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    *(_QWORD *)(a1 + 48) = v46;
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v47;
    if (!v37)
    {
LABEL_62:
      *(_QWORD *)(a1 + 56) = v38;
      if (*(int *)(a1 + 112) >= 1)
      {
        sub_19C100764((uint64_t)v236, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *((_DWORD *)p_vtable + 602), *(unsigned __int8 *)(a1 + 40) + 1);
        sub_19C1007E8((unsigned int *)(a1 + 144), v236);
        sub_19C101AC4(v236);
      }
      v59 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
      v60 = (void *)operator new[]();
      bzero(v60, 4 * v59);
      *(_QWORD *)(a1 + 136) = v60;
      v62 = *(char **)(a1 + 56);
      v61 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v62 < v61)
      {
        *(_QWORD *)v62 = v60;
        v63 = (uint64_t)(v62 + 8);
        goto LABEL_87;
      }
      v64 = *v35;
      v65 = v62 - *v35;
      v66 = v65 >> 3;
      v67 = (v65 >> 3) + 1;
      if (!(v67 >> 61))
      {
        v68 = v61 - (_QWORD)v64;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (!v69)
        {
          v70 = 0;
          v71 = (_QWORD *)(8 * v66);
          v72 = 0;
          *(_QWORD *)(8 * v66) = v60;
          v63 = 8 * v66 + 8;
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
          {
LABEL_75:
            v74 = (unint64_t)(v73 - 8);
            if (v74 >= 0x58)
            {
              v75 = v62 - &v70[v65];
              p_vtable = MLPNDArrayLossLabels.vtable;
              if (v75 >= 0x20)
              {
                v76 = (v74 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v78 = &v62[-v77];
                v71 = (_QWORD *)((char *)v71 - v77);
                v79 = &v70[8 * v66 - 16];
                v80 = v62 - 16;
                v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v82 = *(_OWORD *)v80;
                  *(v79 - 1) = *((_OWORD *)v80 - 1);
                  *v79 = v82;
                  v79 -= 2;
                  v80 -= 32;
                  v81 -= 4;
                }
                while (v81);
                v62 = v78;
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_85:
                  v62 = *v35;
                  *(_QWORD *)(a1 + 48) = v71;
                  *(_QWORD *)(a1 + 56) = v63;
                  *(_QWORD *)(a1 + 64) = v72;
                  if (!v62)
                    goto LABEL_87;
                  goto LABEL_86;
                }
              }
            }
            else
            {
              p_vtable = (void **)(MLPNDArrayLossLabels + 24);
            }
            do
            {
              v83 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v71 = v83;
            }
            while (v62 != v64);
            goto LABEL_85;
          }
LABEL_78:
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 48) = v71;
          *(_QWORD *)(a1 + 56) = v63;
          *(_QWORD *)(a1 + 64) = v72;
          if (!v62)
          {
LABEL_87:
            *(_QWORD *)(a1 + 56) = v63;
            if (*(int *)(a1 + 112) >= 1)
              goto LABEL_6;
            goto LABEL_88;
          }
LABEL_86:
          operator delete(v62);
          goto LABEL_87;
        }
        if (!(v69 >> 61))
        {
          v70 = operator new(8 * v69);
          v71 = &v70[8 * v66];
          v72 = &v70[8 * v69];
          *v71 = v60;
          v63 = (uint64_t)(v71 + 1);
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
            goto LABEL_75;
          goto LABEL_78;
        }
LABEL_264:
        sub_19C07C7FC();
      }
LABEL_263:
      sub_19C07DA0C();
    }
LABEL_61:
    operator delete(v37);
    goto LABEL_62;
  }
LABEL_5:
  if (*(int *)(a1 + 112) >= 1)
  {
LABEL_6:
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    goto LABEL_89;
  }
LABEL_88:
  v9 = 0;
LABEL_89:
  if (*(_BYTE *)(a1 + 42))
    v84 = 2;
  else
    v84 = *((unsigned int *)p_vtable + 602);
  v234 = v84;
  if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
    v85 = 2;
  else
    v85 = *((_DWORD *)p_vtable + 602);
  v86 = v85;
  v87 = *(_QWORD *)(a1 + 264);
  v88 = (*(_QWORD *)(a1 + 272) - v87) >> 3;
  if (v86 <= v88)
  {
    if (v86 < v88)
      *(_QWORD *)(a1 + 272) = v87 + 8 * v86;
  }
  else
  {
    sub_19C098930((void **)(a1 + 264), v86 - v88);
  }
  v89 = *(_QWORD *)(a1 + 384);
  v90 = (*(_QWORD *)(a1 + 392) - v89) >> 3;
  if ((int)v234 <= v90)
  {
    if ((int)v234 < v90)
      *(_QWORD *)(a1 + 392) = v89 + 8 * (int)v234;
  }
  else
  {
    sub_19C098930((void **)(a1 + 384), (int)v234 - v90);
  }
  v91 = *((_DWORD *)p_vtable + 602);
  v92 = *(_QWORD *)(a1 + 288);
  v93 = (*(_QWORD *)(a1 + 296) - v92) >> 3;
  if (v91 <= v93)
  {
    if (v91 < v93)
      *(_QWORD *)(a1 + 296) = v92 + 8 * v91;
  }
  else
  {
    sub_19C098930((void **)(a1 + 288), v91 - v93);
    v91 = *((_DWORD *)p_vtable + 602);
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v94 = v91;
    v95 = *(_QWORD *)(a1 + 312);
    v96 = (*(_QWORD *)(a1 + 320) - v95) >> 3;
    if (v91 <= v96)
    {
      if (v91 < v96)
        *(_QWORD *)(a1 + 320) = v95 + 8 * v91;
    }
    else
    {
      sub_19C098930((void **)(a1 + 312), v91 - v96);
      v91 = *((_DWORD *)p_vtable + 602);
      v94 = v91;
    }
    v97 = *(_QWORD *)(a1 + 336);
    v98 = (*(_QWORD *)(a1 + 344) - v97) >> 3;
    if (v94 <= v98)
    {
      if (v94 < v98)
        *(_QWORD *)(a1 + 344) = v97 + 8 * v94;
    }
    else
    {
      sub_19C098930((void **)(a1 + 336), v94 - v98);
      v91 = *((_DWORD *)p_vtable + 602);
    }
  }
  v99 = v91;
  v101 = *(_QWORD *)(a1 + 360);
  v100 = *(_QWORD *)(a1 + 368);
  v102 = 0xAAAAAAAAAAAAAAABLL * ((v100 - v101) >> 3);
  if (v99 <= v102)
  {
    if (v99 < v102)
    {
      v103 = v101 + 24 * (int)v99;
      if (v100 != v103)
      {
        v104 = *(_QWORD *)(a1 + 368);
        do
        {
          v106 = *(void **)(v104 - 24);
          v104 -= 24;
          v105 = v106;
          if (v106)
          {
            *(_QWORD *)(v100 - 16) = v105;
            operator delete(v105);
          }
          v100 = v104;
        }
        while (v104 != v103);
      }
      *(_QWORD *)(a1 + 368) = v103;
    }
  }
  else
  {
    sub_19C167E70(a1 + 360, v99 - v102);
  }
  v232 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v86 >= 1)
  {
    v107 = 0;
    v233 = (char **)(a1 + 48);
    v108 = v86;
    while (1)
    {
      v110 = *(unsigned int *)(a1 + 104);
      v111 = (void *)operator new[]();
      v112 = v111;
      if ((int)v110 >= 1)
        bzero(v111, 4 * v110);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v107) = v112;
      v114 = *(char **)(a1 + 56);
      v113 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v114 >= v113)
        break;
      *(_QWORD *)v114 = v112;
      v109 = (uint64_t)(v114 + 8);
LABEL_128:
      *(_QWORD *)(a1 + 56) = v109;
      if (++v107 == v108)
        goto LABEL_152;
    }
    v115 = *v233;
    v116 = v114 - *v233;
    v117 = v116 >> 3;
    v118 = (v116 >> 3) + 1;
    if (v118 >> 61)
      sub_19C07DA0C();
    v119 = v113 - (_QWORD)v115;
    if (v119 >> 2 > v118)
      v118 = v119 >> 2;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    if (v120)
    {
      if (v120 >> 61)
        goto LABEL_264;
      v121 = operator new(8 * v120);
      v122 = &v121[8 * v117];
      *v122 = v112;
      v109 = (uint64_t)(v122 + 1);
      if (v114 == v115)
        goto LABEL_150;
    }
    else
    {
      v121 = 0;
      v122 = (_QWORD *)(8 * v117);
      *(_QWORD *)(8 * v117) = v112;
      v109 = 8 * v117 + 8;
      if (v114 == v115)
      {
LABEL_150:
        *(_QWORD *)(a1 + 48) = v122;
        *(_QWORD *)(a1 + 56) = v109;
        *(_QWORD *)(a1 + 64) = &v121[8 * v120];
        if (v114)
          operator delete(v114);
        goto LABEL_128;
      }
    }
    v123 = v114 - 8 - v115;
    if (v123 < 0x58)
      goto LABEL_269;
    if ((unint64_t)(v114 - &v121[v116]) < 0x20)
      goto LABEL_269;
    v124 = (v123 >> 3) + 1;
    v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    v126 = &v114[-v125];
    v122 = (_QWORD *)((char *)v122 - v125);
    v127 = &v121[8 * v117 - 16];
    v128 = (__int128 *)(v114 - 16);
    v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v130 = *v128;
      *(v127 - 1) = *(v128 - 1);
      *v127 = v130;
      v127 -= 2;
      v128 -= 2;
      v129 -= 4;
    }
    while (v129);
    v114 = v126;
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_269:
      do
      {
        v131 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *--v122 = v131;
      }
      while (v114 != v115);
    }
    v114 = *v233;
    goto LABEL_150;
  }
LABEL_152:
  if ((int)v234 >= 1)
  {
    v132 = 0;
    v133 = (char **)(a1 + 48);
    while (1)
    {
      v135 = *(unsigned int *)(a1 + 100);
      v136 = (void *)operator new[]();
      v137 = v136;
      if ((int)v135 >= 1)
        bzero(v136, 4 * v135);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v132) = v137;
      v139 = *(char **)(a1 + 56);
      v138 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v139 >= v138)
        break;
      *(_QWORD *)v139 = v137;
      v134 = (uint64_t)(v139 + 8);
LABEL_155:
      *(_QWORD *)(a1 + 56) = v134;
      if (++v132 == v234)
        goto LABEL_179;
    }
    v140 = *v133;
    v141 = v139 - *v133;
    v142 = v141 >> 3;
    v143 = (v141 >> 3) + 1;
    if (v143 >> 61)
      goto LABEL_263;
    v144 = v138 - (_QWORD)v140;
    if (v144 >> 2 > v143)
      v143 = v144 >> 2;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
      v145 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v145 = v143;
    if (v145)
    {
      if (v145 >> 61)
        goto LABEL_264;
      v146 = operator new(8 * v145);
      v147 = &v146[8 * v142];
      *v147 = v137;
      v134 = (uint64_t)(v147 + 1);
      if (v139 == v140)
        goto LABEL_177;
    }
    else
    {
      v146 = 0;
      v147 = (_QWORD *)(8 * v142);
      *(_QWORD *)(8 * v142) = v137;
      v134 = 8 * v142 + 8;
      if (v139 == v140)
      {
LABEL_177:
        *(_QWORD *)(a1 + 48) = v147;
        *(_QWORD *)(a1 + 56) = v134;
        *(_QWORD *)(a1 + 64) = &v146[8 * v145];
        if (v139)
          operator delete(v139);
        goto LABEL_155;
      }
    }
    v148 = v139 - 8 - v140;
    if (v148 < 0x58)
      goto LABEL_270;
    if ((unint64_t)(v139 - &v146[v141]) < 0x20)
      goto LABEL_270;
    v149 = (v148 >> 3) + 1;
    v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
    v151 = &v139[-v150];
    v147 = (_QWORD *)((char *)v147 - v150);
    v152 = &v146[8 * v142 - 16];
    v153 = (__int128 *)(v139 - 16);
    v154 = v149 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v155 = *v153;
      *(v152 - 1) = *(v153 - 1);
      *v152 = v155;
      v152 -= 2;
      v153 -= 2;
      v154 -= 4;
    }
    while (v154);
    v139 = v151;
    if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_270:
      do
      {
        v156 = *((_QWORD *)v139 - 1);
        v139 -= 8;
        *--v147 = v156;
      }
      while (v139 != v140);
    }
    v139 = *v133;
    goto LABEL_177;
  }
LABEL_179:
  v157 = MLPNDArrayLossLabels.vtable;
  if (dword_1EE418968 >= 1)
  {
    v158 = 0;
    v159 = (char **)(a1 + 48);
    v160 = 1;
    if (v232)
      v160 = 2;
    v235 = v160;
    while (1)
    {
      if (*(_BYTE *)(a1 + 116))
        goto LABEL_235;
      v161 = *(unsigned int *)(a1 + 104);
      v162 = (void *)operator new[]();
      v163 = v162;
      if ((int)v161 >= 1)
        bzero(v162, 4 * v161);
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v158) = v163;
      v165 = *(char **)(a1 + 56);
      v164 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v165 < v164)
      {
        *(_QWORD *)v165 = v163;
        v166 = (uint64_t)(v165 + 8);
        goto LABEL_210;
      }
      v167 = *v159;
      v168 = v165 - *v159;
      v169 = v168 >> 3;
      v170 = (v168 >> 3) + 1;
      if (v170 >> 61)
        goto LABEL_263;
      v171 = v164 - (_QWORD)v167;
      if (v171 >> 2 > v170)
        v170 = v171 >> 2;
      v172 = (unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v170;
      if (v172)
        break;
      v173 = 0;
      v174 = (_QWORD *)(8 * v169);
      *(_QWORD *)(8 * v169) = v163;
      v166 = 8 * v169 + 8;
      if (v165 != v167)
        goto LABEL_201;
LABEL_208:
      *(_QWORD *)(a1 + 48) = v174;
      *(_QWORD *)(a1 + 56) = v166;
      *(_QWORD *)(a1 + 64) = &v173[8 * v172];
      v157 = (void **)(MLPNDArrayLossLabels + 24);
      if (v165)
        operator delete(v165);
LABEL_210:
      *(_QWORD *)(a1 + 56) = v166;
      v184 = *(unsigned int *)(a1 + 100);
      v185 = (void *)operator new[]();
      v186 = v185;
      if ((int)v184 >= 1)
        bzero(v185, 4 * v184);
      *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v158) = v186;
      v188 = *(char **)(a1 + 56);
      v187 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v188 >= v187)
      {
        v190 = *v159;
        v191 = v188 - *v159;
        v192 = v191 >> 3;
        v193 = (v191 >> 3) + 1;
        if (v193 >> 61)
          goto LABEL_263;
        v194 = v187 - (_QWORD)v190;
        if (v194 >> 2 > v193)
          v193 = v194 >> 2;
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
          v195 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v195 = v193;
        if (v195)
        {
          if (v195 >> 61)
            goto LABEL_264;
          v196 = operator new(8 * v195);
          v197 = &v196[8 * v192];
          *v197 = v186;
          v189 = (uint64_t)(v197 + 1);
          if (v188 == v190)
            goto LABEL_232;
LABEL_225:
          v198 = v188 - 8 - v190;
          if (v198 < 0x58)
            goto LABEL_271;
          if ((unint64_t)(v188 - &v196[v191]) < 0x20)
            goto LABEL_271;
          v199 = (v198 >> 3) + 1;
          v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
          v201 = &v188[-v200];
          v197 = (_QWORD *)((char *)v197 - v200);
          v202 = &v196[8 * v192 - 16];
          v203 = v188 - 16;
          v204 = v199 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v205 = *(_OWORD *)v203;
            *(v202 - 1) = *((_OWORD *)v203 - 1);
            *v202 = v205;
            v202 -= 2;
            v203 -= 32;
            v204 -= 4;
          }
          while (v204);
          v188 = v201;
          if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_271:
            do
            {
              v206 = *((_QWORD *)v188 - 1);
              v188 -= 8;
              *--v197 = v206;
            }
            while (v188 != v190);
          }
          v188 = *v159;
        }
        else
        {
          v196 = 0;
          v197 = (_QWORD *)(8 * v192);
          *(_QWORD *)(8 * v192) = v186;
          v189 = 8 * v192 + 8;
          if (v188 != v190)
            goto LABEL_225;
        }
LABEL_232:
        *(_QWORD *)(a1 + 48) = v197;
        *(_QWORD *)(a1 + 56) = v189;
        *(_QWORD *)(a1 + 64) = &v196[8 * v195];
        v157 = (void **)(MLPNDArrayLossLabels + 24);
        if (v188)
          operator delete(v188);
        goto LABEL_234;
      }
      *(_QWORD *)v188 = v186;
      v189 = (uint64_t)(v188 + 8);
LABEL_234:
      *(_QWORD *)(a1 + 56) = v189;
LABEL_235:
      v207 = *(unsigned int *)(a1 + 100);
      v208 = (void *)operator new[]();
      v209 = v208;
      if ((int)v207 >= 1)
        bzero(v208, 4 * v207);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v158) = v209;
      v211 = *(char **)(a1 + 56);
      v210 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v211 >= v210)
      {
        v213 = *v159;
        v214 = v211 - *v159;
        v215 = v214 >> 3;
        v216 = (v214 >> 3) + 1;
        if (v216 >> 61)
          goto LABEL_263;
        v217 = v210 - (_QWORD)v213;
        if (v217 >> 2 > v216)
          v216 = v217 >> 2;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v216;
        if (v218)
        {
          if (v218 >> 61)
            goto LABEL_264;
          v219 = operator new(8 * v218);
          v220 = &v219[8 * v215];
          *v220 = v209;
          v212 = (uint64_t)(v220 + 1);
          if (v211 == v213)
            goto LABEL_257;
LABEL_250:
          v221 = v211 - 8 - v213;
          if (v221 < 0x58)
            goto LABEL_272;
          if ((unint64_t)(v211 - &v219[v214]) < 0x20)
            goto LABEL_272;
          v222 = (v221 >> 3) + 1;
          v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
          v224 = &v211[-v223];
          v220 = (_QWORD *)((char *)v220 - v223);
          v225 = &v219[8 * v215 - 16];
          v226 = v211 - 16;
          v227 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v228 = *(_OWORD *)v226;
            *(v225 - 1) = *((_OWORD *)v226 - 1);
            *v225 = v228;
            v225 -= 2;
            v226 -= 32;
            v227 -= 4;
          }
          while (v227);
          v211 = v224;
          if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_272:
            do
            {
              v229 = *((_QWORD *)v211 - 1);
              v211 -= 8;
              *--v220 = v229;
            }
            while (v211 != v213);
          }
          v211 = *v159;
        }
        else
        {
          v219 = 0;
          v220 = (_QWORD *)(8 * v215);
          *(_QWORD *)(8 * v215) = v209;
          v212 = 8 * v215 + 8;
          if (v211 != v213)
            goto LABEL_250;
        }
LABEL_257:
        *(_QWORD *)(a1 + 48) = v220;
        *(_QWORD *)(a1 + 56) = v212;
        *(_QWORD *)(a1 + 64) = &v219[8 * v218];
        v157 = MLPNDArrayLossLabels.vtable;
        if (v211)
          operator delete(v211);
        goto LABEL_259;
      }
      *(_QWORD *)v211 = v209;
      v212 = (uint64_t)(v211 + 8);
LABEL_259:
      *(_QWORD *)(a1 + 56) = v212;
      v230 = (_QWORD *)(*(_QWORD *)(a1 + 360) + 24 * v158);
      v231 = (uint64_t)(v230[1] - *v230) >> 2;
      if (v235 > v231)
      {
        sub_19C101928((uint64_t)v230, v235 - v231);
      }
      else if (v235 < v231)
      {
        v230[1] = *v230 + 4 * v235;
      }
      if (++v158 >= *((int *)v157 + 602))
        return;
    }
    if (v172 >> 61)
      goto LABEL_264;
    v173 = operator new(8 * v172);
    v174 = &v173[8 * v169];
    *v174 = v163;
    v166 = (uint64_t)(v174 + 1);
    if (v165 == v167)
      goto LABEL_208;
LABEL_201:
    v175 = v165 - 8 - v167;
    if (v175 < 0x58)
      goto LABEL_273;
    if ((unint64_t)(v165 - &v173[v168]) < 0x20)
      goto LABEL_273;
    v176 = (v175 >> 3) + 1;
    v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    v178 = &v165[-v177];
    v174 = (_QWORD *)((char *)v174 - v177);
    v179 = &v173[8 * v169 - 16];
    v180 = v165 - 16;
    v181 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v182 = *(_OWORD *)v180;
      *(v179 - 1) = *((_OWORD *)v180 - 1);
      *v179 = v182;
      v179 -= 2;
      v180 -= 32;
      v181 -= 4;
    }
    while (v181);
    v165 = v178;
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_273:
      do
      {
        v183 = *((_QWORD *)v165 - 1);
        v165 -= 8;
        *--v174 = v183;
      }
      while (v165 != v167);
    }
    v165 = *v159;
    goto LABEL_208;
  }
}

void sub_19C155DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C155DE4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *a1 = &unk_1E3D20A40;
  sub_19C153B64((uint64_t)a1);
  v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19C22CB78((uint64_t)(a1 + 54));
  v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  v4 = a1[45];
  if (v4)
  {
    v5 = a1[46];
    v6 = (void *)a1[45];
    if (v5 != v4)
    {
      v7 = a1[46];
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19C101AC4(a1 + 18);
  v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1E3D1E2D8;
  v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19C155F24(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  void *__p;
  __int128 v17;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1E628;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19C22CB44(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a9;
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 60) = a6;
  *(_BYTE *)(a1 + 61) = a7;
  __p = operator new(0x20uLL);
  v17 = xmmword_19C2775A0;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  return a1;
}

void sub_19C156068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a15 < 0)
    operator delete(__p);
  sub_19C22CB78(v16);
  v19 = (void *)v15[34];
  if (v19)
  {
    v15[35] = v19;
    operator delete(v19);
    v20 = *v17;
    if (!*v17)
    {
LABEL_5:
      v21 = (void *)v15[23];
      if (!v21)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *v17;
    if (!*v17)
      goto LABEL_5;
  }
  v15[32] = v20;
  operator delete(v20);
  v21 = (void *)v15[23];
  if (!v21)
  {
LABEL_6:
    v22 = (void *)v15[20];
    if (!v22)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v21;
  operator delete(v21);
  v22 = (void *)v15[20];
  if (!v22)
  {
LABEL_7:
    v23 = (void *)v15[17];
    if (!v23)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v22;
  operator delete(v22);
  v23 = (void *)v15[17];
  if (!v23)
  {
LABEL_8:
    v24 = (void *)v15[14];
    if (!v24)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v23;
  operator delete(v23);
  v24 = (void *)v15[14];
  if (!v24)
  {
LABEL_9:
    v25 = (void *)v15[11];
    if (!v25)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v24;
  operator delete(v24);
  v25 = (void *)v15[11];
  if (!v25)
  {
LABEL_10:
    *v15 = &unk_1E3D1E2D8;
    v26 = (void *)v15[1];
    if (!v26)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v25;
  operator delete(v25);
  *v15 = &unk_1E3D1E2D8;
  v26 = (void *)v15[1];
  if (!v26)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v26;
  operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_19C156180()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C156190(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19C156198(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19C1561A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C1561AC(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19C1561B4()
{
  return 0;
}

_BYTE *sub_19C1561BC(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 376);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 61);
  v18 = sub_19C2210A4();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

void sub_19C1562D0(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  void **v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 52);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 208));
  v11 = *(void ***)(a1 + 376);
  v12 = sub_19C2210A4();
  sub_19C14FD4C(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

float32_t sub_19C156378(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  float32x4_t v6;
  _QWORD *v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
      v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
      if ((int)v8 < 1)
        return v6.f32[0];
      goto LABEL_7;
    }
  }
  v7 = 0;
  v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v8 < 1)
    return v6.f32[0];
LABEL_7:
  v9 = (float32x4_t *)v7[8];
  v10 = (float32x4_t *)v5[8];
  v11 = **(float32x4_t ***)(a1 + 376);
  if (v8 < 8)
  {
    v12 = 0;
LABEL_14:
    v18 = v8 - v12;
    v19 = v12;
    v20 = (__int32 *)((char *)v11 + v19 * 4);
    v21 = &v10->f32[v19];
    v22 = &v9->f32[v19];
    do
    {
      v23 = *v22++;
      v24 = v23;
      v25 = *v21++;
      v6.f32[0] = v24 - v25;
      *v20++ = v6.i32[0];
      --v18;
    }
    while (v18);
    return v6.f32[0];
  }
  v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20)
    goto LABEL_14;
  v12 = v8 & 0x7FFFFFF8;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v11 + 1;
  v16 = v8 & 0xFFFFFFF8;
  do
  {
    v6 = vsubq_f32(v13[-1], v14[-1]);
    v17 = vsubq_f32(*v13, *v14);
    v15[-1] = v6;
    *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8)
    goto LABEL_14;
  return v6.f32[0];
}

void *sub_19C1564C4(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
  return result;
}

void sub_19C15652C(uint64_t a1, void *lpsrc)
{
  const float **v3;
  const float **v4;
  vDSP_Length v5;
  float __B;

  v3 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
  v4 = *(const float ***)(a1 + 376);
  v5 = *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 48);
  __B = 1.0;
  vDSP_vsma(v3[8], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void sub_19C1565B0(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 48);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 48);
  v9 = a2[1];
  v8 = (unint64_t)a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = (v9 - *a2) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_19C07DA0C();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_19C07C7FC();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = *a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
}

void sub_19C156724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C156738(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19C156798(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19C1567CC(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19C156818(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 376);
  v5 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C156924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t sub_19C15693C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C156948(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C156950(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277570;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C1569EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C156A08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;

  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19C156AB8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19C156AC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void sub_19C156AD4(uint64_t a1, float a2)
{
  vDSP_Length v2;
  float __B;

  v2 = *(int *)(a1 + 56);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 80), 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v2);
}

void sub_19C156B18(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  char v8;
  float32x4_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  vDSP_Length v15;
  NSObject *global_queue;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  float __C;
  _QWORD __B[7];
  int v28;

  v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v10 = a5 - 1;
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v12 = v11;
      else
        v12 = v10;
      v13 = 8 * v12;
      sub_19C10B530((void **)(a1 + 216), (float32x4_t **)(*(_QWORD *)(a1 + 184) + v13), (const void **)(*a4 + v13), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
      cblas_sgemv_NEWLAPACK();
      v14 = *(_QWORD *)(a1 + 136);
      v15 = *(int *)(a1 + 52);
      __C = 50.0;
      LODWORD(__B[0]) = -1035468800;
      vDSP_vclip(*(const float **)(v14 + v13), 1, (const float *)__B, &__C, *(float **)(v14 + v13), 1, v15);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v17 = 0;
    v18 = MEMORY[0x1E0C809B0];
    do
    {
      --a5;
      if (*(_BYTE *)(a1 + 232))
        v19 = v17;
      else
        v19 = a5;
      v20 = 8 * v19;
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88) + v20;
      v23 = *a4 + v20;
      v24 = *(_DWORD *)(a1 + 52);
      v25 = *(int *)(a1 + 48);
      __B[0] = v18;
      __B[1] = 0x40000000;
      __B[2] = sub_19C103680;
      __B[3] = &unk_1E3D25490;
      v28 = v24;
      __B[4] = v21;
      __B[5] = v23;
      __B[6] = v22;
      dispatch_apply(v25, global_queue, __B);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v19) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      ++v17;
    }
    while (a5 > 0);
  }
}

void sub_19C156D10(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  float v7;
  int v8;
  unsigned int v9;
  float32x4_t **v10;
  vDSP_Length v11;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  float32x4_t **v41;
  uint64_t v42;
  int v43;
  float32x4_t *v44;
  float32x4_t *v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  float32x4_t *v51;
  float32x4_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t v61;
  uint64_t v62;
  float *v63;
  float *v64;
  float v65;
  __int128 *v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 v69;
  _BOOL4 v71;
  float __C;
  float __B;

  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
  {
    if (*(float *)(v6 + 468) <= 0.0)
      v7 = 50.0;
    else
      v7 = *(float *)(v6 + 468);
    if (*(_BYTE *)(v6 + 20) || *(_DWORD *)(v6 + 40) != 1)
    {
      v71 = 0;
      if (!a5)
        goto LABEL_13;
    }
    else
    {
      v71 = *(_DWORD *)(v6 + 44) == 1;
      if (!a5)
        goto LABEL_13;
    }
  }
  else
  {
    v71 = 1;
    v7 = 50.0;
    if (!a5)
      goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 232))
    sub_19C2210D4(34);
LABEL_13:
  v8 = a4 & 0xFFFFFF;
  v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    v10 = (float32x4_t **)(a1 + 216);
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v12 = v8 + ~v9;
      else
        v12 = v9;
      if (*(_BYTE *)(a1 + 232))
        v13 = 1;
      else
        v13 = -1;
      if (*(_BYTE *)(a1 + 232))
        v14 = v12 >= v8 - 1;
      else
        v14 = v12 < 1;
      v15 = v12;
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v12), 4 * *(int *)(a1 + 52));
      v16 = *(_QWORD *)(a1 + 88);
      v17 = *(unsigned int *)(a1 + 44);
      v18 = 8 * v12;
      if ((int)v17 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD *)(*a2 + 8 * v12);
        v21 = *(_QWORD *)(v16 + 8 * v12);
        if (v17 < 8)
          goto LABEL_31;
        if ((unint64_t)(v21 - v20) < 0x20)
          goto LABEL_31;
        v19 = v17 & 0x7FFFFFF8;
        v22 = (__int128 *)(v20 + 16);
        v23 = (_OWORD *)(v21 + 16);
        v24 = v17 & 0xFFFFFFF8;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        if (v19 != v17)
        {
LABEL_31:
          v26 = v17 - v19;
          v27 = 4 * v19;
          v28 = (_DWORD *)(v21 + 4 * v19);
          v29 = (int *)(v20 + v27);
          do
          {
            v30 = *v29++;
            *v28++ = v30;
            --v26;
          }
          while (v26);
        }
      }
      v31 = v12 + v13;
      if (!v71 || v14)
      {
        v32 = *(_QWORD *)(v16 + 8 * v15);
      }
      else
      {
        v33 = *(unsigned int *)(a1 + 48);
        v32 = *(_QWORD *)(v16 + 8 * v15);
        if ((int)v33 >= 1)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v31);
          if (v33 >= 8 && (unint64_t)(4 * (int)v17 + v32 - v34) >= 0x20)
          {
            v35 = v33 & 0x7FFFFFF8;
            v66 = (__int128 *)(v34 + 16);
            v67 = (_OWORD *)(v32 + 4 * (int)v17 + 16);
            v68 = v33 & 0xFFFFFFF8;
            do
            {
              v69 = *v66;
              *(v67 - 1) = *(v66 - 1);
              *v67 = v69;
              v66 += 2;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            if (v35 == v33)
              goto LABEL_41;
          }
          else
          {
            v35 = 0;
          }
          v36 = v33 - v35;
          v37 = 4 * (v35 + (int)v17);
          v38 = (int *)(v34 + 4 * v35);
          do
          {
            v39 = *v38++;
            *(_DWORD *)(v32 + v37) = v39;
            v37 += 4;
            --v36;
          }
          while (v36);
        }
      }
LABEL_41:
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(v32 + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      cblas_sgemv_NEWLAPACK();
      if (!v71 && !v14)
        cblas_sgemv_NEWLAPACK();
      v40 = *(_QWORD *)(a1 + 240);
      if (v40 && *(_BYTE *)(v40 + 244))
      {
        v41 = *(float32x4_t ***)(a1 + 392);
        v42 = *(int *)(a1 + 48);
        v43 = (int)v42 / 8;
        if ((int)v42 >= 8)
        {
          v44 = *v10;
          v45 = *v41;
          v46 = (int)v42 / 8;
          do
          {
            v47 = *v45;
            v48 = v45[1];
            v45 += 2;
            v49 = vaddq_f32(v44[1], v48);
            *v44 = vaddq_f32(*v44, v47);
            v44[1] = v49;
            v44 += 2;
            --v46;
          }
          while (v46);
        }
        v50 = 8 * v43;
        if (8 * v43 < (int)v42)
        {
          v51 = *v41;
          v52 = *v10;
          v53 = v50;
          v54 = v42 - v50;
          if (v54 < 8)
            goto LABEL_57;
          v55 = (unint64_t)&v52[v50 / 4u];
          v56 = (unint64_t)&v51[v50 / 4u];
          if (v55 < (unint64_t)v51->u64 + 4 * v42 && v56 < (unint64_t)v52->u64 + 4 * v42)
            goto LABEL_57;
          v57 = v54 - (v42 & 7) + v50;
          v58 = v50 + (unint64_t)(v42 & 7) - v42;
          v59 = (float32x4_t *)(v56 + 16);
          v60 = (float32x4_t *)(v55 + 16);
          do
          {
            v61 = vaddq_f32(*v60, *v59);
            v60[-1] = vaddq_f32(v60[-1], v59[-1]);
            *v60 = v61;
            v59 += 2;
            v60 += 2;
            v58 += 8;
          }
          while (v58);
          v53 = v57;
          if ((v42 & 7) != 0)
          {
LABEL_57:
            v62 = v42 - v53;
            v63 = &v52->f32[v53];
            v64 = &v51->f32[v53];
            do
            {
              v65 = *v64++;
              *v63 = *v63 + v65;
              ++v63;
              --v62;
            }
            while (v62);
          }
        }
      }
      v11 = *(int *)(a1 + 48);
      __C = v7;
      __B = -v7;
      vDSP_vclip(*(const float **)(a1 + 216), 1, &__B, &__C, *(float **)(a1 + 216), 1, v11);
      memmove(*(void **)(*(_QWORD *)(a1 + 184) + 8 * v15), *(const void **)(a1 + 216), 4 * *(int *)(a1 + 48));
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 112) + v18), (const void **)(a1 + 216), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      ++v9;
    }
    while (v9 != v8);
  }
}

char *sub_19C1571AC(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19C15720C(uint64_t a1, void *lpsrc, float a3)
{
  const float **v5;
  const float **v6;
  vDSP_Length v7;
  float __B;

  if (*(_DWORD *)(a1 + 368))
    sub_19C2210D4(1);
  v5 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE50, 0);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  sub_19C22CBE0(a1 + 296);
  v7 = *(int *)(a1 + 56);
  __B = a3;
  vDSP_vsma(v6[10], 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v7);
  return sub_19C22CBE8(a1 + 296);
}

uint64_t sub_19C1572BC(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 112);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19C15743C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 48);
  v4 = *(float ***)(a1 + 112);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C15757C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C1584B0(a1);
  operator delete(v1);
}

uint64_t sub_19C157590(uint64_t a1)
{
  return a1 + 160;
}

float sub_19C157598(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19C1575A8(uint64_t a1, float a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  char **v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  int v53;
  void *v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _OWORD *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  void *v212;

  v4 = *(_QWORD *)(a1 + 240);
  if (!v4)
  {
    v5 = 1;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
LABEL_7:
    v6 = 2;
    v7 = 2;
    v8 = *(unsigned int *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)(a1 + 52) = v9;
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v4 + 20) || *(_DWORD *)(v4 + 40) != 1)
  {
    v5 = 0;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
    goto LABEL_7;
  }
  v5 = *(_DWORD *)(v4 + 44) == 1;
  if (*(_BYTE *)(a1 + 42))
    goto LABEL_7;
LABEL_24:
  v6 = 2 * (*(_BYTE *)(a1 + 232) != 0);
  v7 = 2 * *(unsigned __int8 *)(a1 + 232);
  v8 = *(unsigned int *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v9;
  if (v5)
  {
LABEL_8:
    v9 += v8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  *(_DWORD *)(a1 + 56) = v8 * v9;
  v10 = (void *)operator new[]();
  v11 = v10;
  if ((int)v8 >= 1)
    bzero(v10, 4 * v8);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = (char **)(a1 + 248);
  v14 = *(char **)(a1 + 256);
  v13 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = v11;
    v15 = (uint64_t)(v14 + 8);
    goto LABEL_36;
  }
  v16 = *v12;
  v17 = v14 - *v12;
  v18 = v17 >> 3;
  v19 = (v17 >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_236;
  v20 = v13 - (_QWORD)v16;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      goto LABEL_237;
    v22 = operator new(8 * v21);
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v11;
    v15 = (uint64_t)(v23 + 1);
    v25 = (char *)(v14 - v16);
    if (v14 == v16)
      goto LABEL_34;
    goto LABEL_27;
  }
  v22 = 0;
  v23 = (_QWORD *)(8 * v18);
  v24 = 0;
  *(_QWORD *)(8 * v18) = v11;
  v15 = 8 * v18 + 8;
  v25 = (char *)(v14 - v16);
  if (v14 != v16)
  {
LABEL_27:
    v26 = (unint64_t)(v25 - 8);
    if (v26 < 0x58)
      goto LABEL_241;
    if ((unint64_t)(v14 - v22 - v17) < 0x20)
      goto LABEL_241;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v14[-v28];
    v23 = (_QWORD *)((char *)v23 - v28);
    v30 = &v22[8 * v18 - 16];
    v31 = v14 - 16;
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    v14 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_241:
      do
      {
        v34 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v23 = v34;
      }
      while (v14 != v16);
    }
    v14 = *v12;
  }
LABEL_34:
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 256) = v15;
  *(_QWORD *)(a1 + 264) = v24;
  if (v14)
    operator delete(v14);
LABEL_36:
  *(_QWORD *)(a1 + 256) = v15;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v40 = *(_QWORD *)(a1 + 240);
    if (v40 && (v41 = *(_DWORD *)(v40 + 40), v41 >= 1))
    {
      v42 = v40 + 8 * v6;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v42 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v41 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v42 + 120);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v40 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v40 + 8 * v7 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      v53 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
      v212 = (void *)operator new[]();
      bzero(v212, 4 * v53);
      sub_19C0FCEBC(&v212, v53, a2);
      v54 = v212;
      *(_QWORD *)(a1 + 64) = v212;
      v56 = *(char **)(a1 + 280);
      v55 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v56 >= v55)
      {
        v195 = *(char **)(a1 + 272);
        v196 = (v56 - v195) >> 3;
        v197 = v196 + 1;
        if ((unint64_t)(v196 + 1) >> 61)
          sub_19C07DA0C();
        v198 = v55 - (_QWORD)v195;
        if (v198 >> 2 > v197)
          v197 = v198 >> 2;
        if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v197;
        if (v199)
        {
          if (v199 >> 61)
            goto LABEL_237;
          v200 = (char *)operator new(8 * v199);
        }
        else
        {
          v200 = 0;
        }
        v201 = &v200[8 * v196];
        v202 = &v200[8 * v199];
        *(_QWORD *)v201 = v54;
        v57 = v201 + 8;
        if (v56 != v195)
        {
          v203 = v56 - v195 - 8;
          if (v203 < 0x58)
            goto LABEL_242;
          if ((unint64_t)(v195 - v200) < 0x20)
            goto LABEL_242;
          v204 = (v203 >> 3) + 1;
          v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
          v206 = &v56[-v205];
          v201 -= v205;
          v207 = &v200[8 * v196 - 16];
          v208 = (__int128 *)(v56 - 16);
          v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v210 = *v208;
            *((_OWORD *)v207 - 1) = *(v208 - 1);
            *(_OWORD *)v207 = v210;
            v207 -= 32;
            v208 -= 2;
            v209 -= 4;
          }
          while (v209);
          v56 = v206;
          if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_242:
            do
            {
              v211 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v201 - 1) = v211;
              v201 -= 8;
            }
            while (v56 != v195);
          }
          v56 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v201;
        *(_QWORD *)(a1 + 280) = v57;
        *(_QWORD *)(a1 + 288) = v202;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v56 = v54;
        v57 = v56 + 8;
      }
      *(_QWORD *)(a1 + 280) = v57;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (*(_BYTE *)(a1 + 60))
    goto LABEL_71;
  v35 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
  v36 = (void *)operator new[]();
  bzero(v36, 4 * v35);
  *(_QWORD *)(a1 + 80) = v36;
  v38 = *(char **)(a1 + 256);
  v37 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v38 >= v37)
  {
    v43 = *v12;
    v44 = v38 - *v12;
    v45 = v44 >> 3;
    v46 = (v44 >> 3) + 1;
    if (!(v46 >> 61))
    {
      v47 = v37 - (_QWORD)v43;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (!v48)
      {
        v49 = 0;
        v50 = (_QWORD *)(8 * v45);
        v51 = 0;
        *(_QWORD *)(8 * v45) = v36;
        v39 = 8 * v45 + 8;
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
          goto LABEL_68;
        goto LABEL_61;
      }
      if (!(v48 >> 61))
      {
        v49 = operator new(8 * v48);
        v50 = &v49[8 * v45];
        v51 = &v49[8 * v48];
        *v50 = v36;
        v39 = (uint64_t)(v50 + 1);
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
        {
LABEL_68:
          *(_QWORD *)(a1 + 248) = v50;
          *(_QWORD *)(a1 + 256) = v39;
          *(_QWORD *)(a1 + 264) = v51;
          if (v38)
            operator delete(v38);
          goto LABEL_70;
        }
LABEL_61:
        v58 = (unint64_t)(v52 - 8);
        if (v58 < 0x58)
          goto LABEL_243;
        if ((unint64_t)(v38 - v49 - v44) < 0x20)
          goto LABEL_243;
        v59 = (v58 >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v38[-v60];
        v50 = (_QWORD *)((char *)v50 - v60);
        v62 = &v49[8 * v45 - 16];
        v63 = v38 - 16;
        v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(_OWORD *)v63;
          *(v62 - 1) = *((_OWORD *)v63 - 1);
          *v62 = v65;
          v62 -= 2;
          v63 -= 32;
          v64 -= 4;
        }
        while (v64);
        v38 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_243:
          do
          {
            v66 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v50 = v66;
          }
          while (v38 != v43);
        }
        v38 = *v12;
        goto LABEL_68;
      }
LABEL_237:
      sub_19C07C7FC();
    }
LABEL_236:
    sub_19C07DA0C();
  }
  *(_QWORD *)v38 = v36;
  v39 = (uint64_t)(v38 + 8);
LABEL_70:
  *(_QWORD *)(a1 + 256) = v39;
LABEL_71:
  v67 = *(_QWORD *)(a1 + 88);
  v68 = dword_1EE418968;
  v69 = dword_1EE418968;
  v70 = (*(_QWORD *)(a1 + 96) - v67) >> 3;
  if (dword_1EE418968 <= v70)
  {
    if (dword_1EE418968 < v70)
      *(_QWORD *)(a1 + 96) = v67 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v70);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v71 = *(_QWORD *)(a1 + 112);
  v72 = (*(_QWORD *)(a1 + 120) - v71) >> 3;
  if (v69 <= v72)
  {
    if (v69 < v72)
      *(_QWORD *)(a1 + 120) = v71 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v69 - v72);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v73 = *(_QWORD *)(a1 + 136);
  v74 = (*(_QWORD *)(a1 + 144) - v73) >> 3;
  if (v69 <= v74)
  {
    if (v69 < v74)
      *(_QWORD *)(a1 + 144) = v73 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), v69 - v74);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v75 = *(_QWORD *)(a1 + 160);
  v76 = (*(_QWORD *)(a1 + 168) - v75) >> 3;
  if (v69 <= v76)
  {
    if (v69 < v76)
      *(_QWORD *)(a1 + 168) = v75 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v69 - v76);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v77 = *(_QWORD *)(a1 + 184);
  v78 = (*(_QWORD *)(a1 + 192) - v77) >> 3;
  if (v69 <= v78)
  {
    if (v69 < v78)
      *(_QWORD *)(a1 + 192) = v77 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), v69 - v78);
    v68 = dword_1EE418968;
  }
  if (v68 >= 1)
  {
    v79 = 0;
    while (1)
    {
      v81 = *(unsigned int *)(a1 + 52);
      v82 = (void *)operator new[]();
      v83 = v82;
      if ((int)v81 >= 1)
        bzero(v82, 4 * v81);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v79) = v83;
      v85 = *(char **)(a1 + 256);
      v84 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v85 < v84)
      {
        *(_QWORD *)v85 = v83;
        v86 = (uint64_t)(v85 + 8);
        goto LABEL_119;
      }
      v87 = *v12;
      v88 = v85 - *v12;
      v89 = v88 >> 3;
      v90 = (v88 >> 3) + 1;
      if (v90 >> 61)
        goto LABEL_236;
      v91 = v84 - (_QWORD)v87;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      v92 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v90;
      if (v92)
        break;
      v93 = 0;
      v94 = (_QWORD *)(8 * v89);
      *(_QWORD *)(8 * v89) = v83;
      v86 = 8 * v89 + 8;
      if (v85 != v87)
        goto LABEL_110;
LABEL_117:
      *(_QWORD *)(a1 + 248) = v94;
      *(_QWORD *)(a1 + 256) = v86;
      *(_QWORD *)(a1 + 264) = &v93[8 * v92];
      if (v85)
        operator delete(v85);
LABEL_119:
      *(_QWORD *)(a1 + 256) = v86;
      v104 = *(unsigned int *)(a1 + 52);
      v105 = (void *)operator new[]();
      v106 = v105;
      if ((int)v104 >= 1)
        bzero(v105, 4 * v104);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v79) = v106;
      v108 = *(char **)(a1 + 256);
      v107 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v108 < v107)
      {
        *(_QWORD *)v108 = v106;
        v109 = (uint64_t)(v108 + 8);
        goto LABEL_143;
      }
      v110 = *v12;
      v111 = v108 - *v12;
      v112 = v111 >> 3;
      v113 = (v111 >> 3) + 1;
      if (v113 >> 61)
        goto LABEL_236;
      v114 = v107 - (_QWORD)v110;
      if (v114 >> 2 > v113)
        v113 = v114 >> 2;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
        v115 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
      {
        if (v115 >> 61)
          goto LABEL_237;
        v116 = operator new(8 * v115);
        v117 = &v116[8 * v112];
        *v117 = v106;
        v109 = (uint64_t)(v117 + 1);
        if (v108 == v110)
          goto LABEL_141;
LABEL_134:
        v118 = v108 - 8 - v110;
        if (v118 < 0x58)
          goto LABEL_244;
        if ((unint64_t)(v108 - &v116[v111]) < 0x20)
          goto LABEL_244;
        v119 = (v118 >> 3) + 1;
        v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
        v121 = &v108[-v120];
        v117 = (_QWORD *)((char *)v117 - v120);
        v122 = &v116[8 * v112 - 16];
        v123 = v108 - 16;
        v124 = v119 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125 = *(_OWORD *)v123;
          *(v122 - 1) = *((_OWORD *)v123 - 1);
          *v122 = v125;
          v122 -= 2;
          v123 -= 32;
          v124 -= 4;
        }
        while (v124);
        v108 = v121;
        if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_244:
          do
          {
            v126 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *--v117 = v126;
          }
          while (v108 != v110);
        }
        v108 = *v12;
        goto LABEL_141;
      }
      v116 = 0;
      v117 = (_QWORD *)(8 * v112);
      *(_QWORD *)(8 * v112) = v106;
      v109 = 8 * v112 + 8;
      if (v108 != v110)
        goto LABEL_134;
LABEL_141:
      *(_QWORD *)(a1 + 248) = v117;
      *(_QWORD *)(a1 + 256) = v109;
      *(_QWORD *)(a1 + 264) = &v116[8 * v115];
      if (v108)
        operator delete(v108);
LABEL_143:
      *(_QWORD *)(a1 + 256) = v109;
      v127 = *(unsigned int *)(a1 + 48);
      v128 = (void *)operator new[]();
      v129 = v128;
      if ((int)v127 >= 1)
        bzero(v128, 4 * v127);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v79) = v129;
      v131 = *(char **)(a1 + 256);
      v130 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v131 < v130)
      {
        *(_QWORD *)v131 = v129;
        v132 = (uint64_t)(v131 + 8);
        goto LABEL_167;
      }
      v133 = *v12;
      v134 = v131 - *v12;
      v135 = v134 >> 3;
      v136 = (v134 >> 3) + 1;
      if (v136 >> 61)
        goto LABEL_236;
      v137 = v130 - (_QWORD)v133;
      if (v137 >> 2 > v136)
        v136 = v137 >> 2;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 61)
          goto LABEL_237;
        v139 = operator new(8 * v138);
        v140 = &v139[8 * v135];
        *v140 = v129;
        v132 = (uint64_t)(v140 + 1);
        if (v131 == v133)
          goto LABEL_165;
LABEL_158:
        v141 = v131 - 8 - v133;
        if (v141 < 0x58)
          goto LABEL_245;
        if ((unint64_t)(v131 - &v139[v134]) < 0x20)
          goto LABEL_245;
        v142 = (v141 >> 3) + 1;
        v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
        v144 = &v131[-v143];
        v140 = (_QWORD *)((char *)v140 - v143);
        v145 = &v139[8 * v135 - 16];
        v146 = v131 - 16;
        v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 4;
        }
        while (v147);
        v131 = v144;
        if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_245:
          do
          {
            v149 = *((_QWORD *)v131 - 1);
            v131 -= 8;
            *--v140 = v149;
          }
          while (v131 != v133);
        }
        v131 = *v12;
        goto LABEL_165;
      }
      v139 = 0;
      v140 = (_QWORD *)(8 * v135);
      *(_QWORD *)(8 * v135) = v129;
      v132 = 8 * v135 + 8;
      if (v131 != v133)
        goto LABEL_158;
LABEL_165:
      *(_QWORD *)(a1 + 248) = v140;
      *(_QWORD *)(a1 + 256) = v132;
      *(_QWORD *)(a1 + 264) = &v139[8 * v138];
      if (v131)
        operator delete(v131);
LABEL_167:
      *(_QWORD *)(a1 + 256) = v132;
      v150 = *(unsigned int *)(a1 + 48);
      v151 = (void *)operator new[]();
      v152 = v151;
      if ((int)v150 >= 1)
        bzero(v151, 4 * v150);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v79) = v152;
      v154 = *(char **)(a1 + 256);
      v153 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v154 < v153)
      {
        *(_QWORD *)v154 = v152;
        v155 = (uint64_t)(v154 + 8);
        goto LABEL_191;
      }
      v156 = *v12;
      v157 = v154 - *v12;
      v158 = v157 >> 3;
      v159 = (v157 >> 3) + 1;
      if (v159 >> 61)
        goto LABEL_236;
      v160 = v153 - (_QWORD)v156;
      if (v160 >> 2 > v159)
        v159 = v160 >> 2;
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
        v161 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v161 = v159;
      if (v161)
      {
        if (v161 >> 61)
          goto LABEL_237;
        v162 = operator new(8 * v161);
        v163 = &v162[8 * v158];
        *v163 = v152;
        v155 = (uint64_t)(v163 + 1);
        if (v154 == v156)
          goto LABEL_189;
LABEL_182:
        v164 = v154 - 8 - v156;
        if (v164 < 0x58)
          goto LABEL_246;
        if ((unint64_t)(v154 - &v162[v157]) < 0x20)
          goto LABEL_246;
        v165 = (v164 >> 3) + 1;
        v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
        v167 = &v154[-v166];
        v163 = (_QWORD *)((char *)v163 - v166);
        v168 = &v162[8 * v158 - 16];
        v169 = v154 - 16;
        v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 32;
          v170 -= 4;
        }
        while (v170);
        v154 = v167;
        if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_246:
          do
          {
            v172 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v163 = v172;
          }
          while (v154 != v156);
        }
        v154 = *v12;
        goto LABEL_189;
      }
      v162 = 0;
      v163 = (_QWORD *)(8 * v158);
      *(_QWORD *)(8 * v158) = v152;
      v155 = 8 * v158 + 8;
      if (v154 != v156)
        goto LABEL_182;
LABEL_189:
      *(_QWORD *)(a1 + 248) = v163;
      *(_QWORD *)(a1 + 256) = v155;
      *(_QWORD *)(a1 + 264) = &v162[8 * v161];
      if (v154)
        operator delete(v154);
LABEL_191:
      *(_QWORD *)(a1 + 256) = v155;
      v173 = *(unsigned int *)(a1 + 48);
      v174 = (void *)operator new[]();
      v175 = v174;
      if ((int)v173 >= 1)
        bzero(v174, 4 * v173);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v79) = v175;
      v177 = *(char **)(a1 + 256);
      v176 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v177 >= v176)
      {
        v178 = *v12;
        v179 = v177 - *v12;
        v180 = v179 >> 3;
        v181 = (v179 >> 3) + 1;
        if (v181 >> 61)
          goto LABEL_236;
        v182 = v176 - (_QWORD)v178;
        if (v182 >> 2 > v181)
          v181 = v182 >> 2;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
          v183 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v183 = v181;
        if (v183)
        {
          if (v183 >> 61)
            goto LABEL_237;
          v184 = operator new(8 * v183);
          v185 = &v184[8 * v180];
          *v185 = v175;
          v80 = (uint64_t)(v185 + 1);
          if (v177 == v178)
            goto LABEL_212;
LABEL_205:
          v186 = v177 - 8 - v178;
          if (v186 < 0x58)
            goto LABEL_247;
          if ((unint64_t)(v177 - &v184[v179]) < 0x20)
            goto LABEL_247;
          v187 = (v186 >> 3) + 1;
          v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
          v189 = &v177[-v188];
          v185 = (_QWORD *)((char *)v185 - v188);
          v190 = &v184[8 * v180 - 16];
          v191 = v177 - 16;
          v192 = v187 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            *v190 = v193;
            v190 -= 2;
            v191 -= 32;
            v192 -= 4;
          }
          while (v192);
          v177 = v189;
          if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_247:
            do
            {
              v194 = *((_QWORD *)v177 - 1);
              v177 -= 8;
              *--v185 = v194;
            }
            while (v177 != v178);
          }
          v177 = *v12;
        }
        else
        {
          v184 = 0;
          v185 = (_QWORD *)(8 * v180);
          *(_QWORD *)(8 * v180) = v175;
          v80 = 8 * v180 + 8;
          if (v177 != v178)
            goto LABEL_205;
        }
LABEL_212:
        *(_QWORD *)(a1 + 248) = v185;
        *(_QWORD *)(a1 + 256) = v80;
        *(_QWORD *)(a1 + 264) = &v184[8 * v183];
        if (v177)
          operator delete(v177);
        goto LABEL_94;
      }
      *(_QWORD *)v177 = v175;
      v80 = (uint64_t)(v177 + 8);
LABEL_94:
      *(_QWORD *)(a1 + 256) = v80;
      if (++v79 >= dword_1EE418968)
        return;
    }
    if (v92 >> 61)
      goto LABEL_237;
    v93 = operator new(8 * v92);
    v94 = &v93[8 * v89];
    *v94 = v83;
    v86 = (uint64_t)(v94 + 1);
    if (v85 == v87)
      goto LABEL_117;
LABEL_110:
    v95 = v85 - 8 - v87;
    if (v95 < 0x58)
      goto LABEL_248;
    if ((unint64_t)(v85 - &v93[v88]) < 0x20)
      goto LABEL_248;
    v96 = (v95 >> 3) + 1;
    v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v85[-v97];
    v94 = (_QWORD *)((char *)v94 - v97);
    v99 = &v93[8 * v89 - 16];
    v100 = v85 - 16;
    v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *(_OWORD *)v100;
      *(v99 - 1) = *((_OWORD *)v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 32;
      v101 -= 4;
    }
    while (v101);
    v85 = v98;
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_248:
      do
      {
        v103 = *((_QWORD *)v85 - 1);
        v85 -= 8;
        *--v94 = v103;
      }
      while (v85 != v87);
    }
    v85 = *v12;
    goto LABEL_117;
  }
}

_QWORD *sub_19C1584B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  *a1 = &unk_1E3D1E628;
  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
      goto LABEL_13;
  }
  v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1E3D1E2D8;
  v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19C158614(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15;
  float v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  float v23;
  void *v25[2];
  char v26;
  char __p[23];
  char v28;

  v15 = sub_19C158960(a1, a5);
  *(_QWORD *)v15 = &unk_1E3D20230;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(_QWORD *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8)
    a7 = *(_BYTE *)(a8 + 376);
  *(_BYTE *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0)
    sub_19C2210D4(34);
  v28 = 7;
  strcpy(__p, "SoftMax");
  sub_19C154D6C(a1, -0.215);
  v16 = *(float *)(a6 + 16);
  v17 = *(_DWORD *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v19 = *(_DWORD *)(a6 + 32);
    if (v19 == 2)
    {
      v21 = operator new();
      *(_QWORD *)v21 = &unk_1E3D1E968;
      *(float *)(v21 + 24) = v16;
      *(_DWORD *)(v21 + 28) = v17;
      *(_DWORD *)(v21 + 32) = 841731191;
      v23 = v18;
      *(_WORD *)(v21 + 143) = 263;
      *(int32x2_t *)(v21 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 12) = 0;
      *(float *)(v21 + 36) = v23;
      *(_DWORD *)(v21 + 40) = v17;
      *(float *)(v21 + 44) = v23;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_QWORD *)(v21 + 112) = 0;
      *(_QWORD *)(v21 + 120) = 0x78616D74666F53;
    }
    else
    {
      if (v19 != 1)
      {
        if (!v19)
        {
          v20 = operator new();
          v26 = 7;
          strcpy((char *)v25, "Softmax");
          sub_19C0FCB2C(v20, (__int128 *)v25, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v16);
          *(_QWORD *)(a1 + 424) = v20;
          if (v26 < 0)
            operator delete(v25[0]);
        }
        return a1;
      }
      v21 = operator new();
      *(float *)(v21 + 20) = v16;
      *(_DWORD *)(v21 + 24) = v17;
      *(_DWORD *)(v21 + 28) = 841731191;
      *(double *)(v21 + 32) = v18;
      *(_WORD *)(v21 + 159) = 263;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v21 = &unk_1E3D1E270;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 40) = v17;
      *(double *)(v21 + 48) = v18;
      *(int32x2_t *)(v21 + 56) = v22;
      *(_DWORD *)(v21 + 164) = 0;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_OWORD *)(v21 + 112) = 0u;
      *(_QWORD *)(v21 + 128) = 0;
      *(_QWORD *)(v21 + 136) = 0x78616D74666F53;
    }
    *(_QWORD *)(a1 + 424) = v21;
  }
  return a1;
}

void sub_19C1588F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v15);
  sub_19C155DE4(v14);
  _Unwind_Resume(a1);
}

void sub_19C158924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  sub_19C155DE4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C158960(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20A40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return a1;
}

void sub_19C158A38(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = v3;
  sub_19C22CB78(v5);
  v7 = *(void **)(v1 + 384);
  if (v7)
  {
    *(_QWORD *)(v1 + 392) = v7;
    operator delete(v7);
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
    {
LABEL_3:
      v9 = *(void **)(v1 + 312);
      if (!v9)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 344) = v8;
  operator delete(v8);
  v9 = *(void **)(v1 + 312);
  if (!v9)
  {
LABEL_4:
    v10 = *(void **)(v1 + 288);
    if (!v10)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 320) = v9;
  operator delete(v9);
  v10 = *(void **)(v1 + 288);
  if (!v10)
  {
LABEL_5:
    v11 = *(void **)(v1 + 264);
    if (!v11)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v1 + 296) = v10;
  operator delete(v10);
  v11 = *(void **)(v1 + 264);
  if (!v11)
  {
LABEL_6:
    sub_19C101AC4(v2);
    v12 = *(void **)(v1 + 72);
    if (!v12)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 272) = v11;
  operator delete(v11);
  sub_19C101AC4(v2);
  v12 = *(void **)(v1 + 72);
  if (!v12)
  {
LABEL_7:
    v13 = *v4;
    if (!*v4)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v1 + 80) = v12;
  operator delete(v12);
  v13 = *v4;
  if (!*v4)
  {
LABEL_8:
    *(_QWORD *)v1 = &unk_1E3D1E2D8;
    v14 = *(void **)(v1 + 8);
    if (!v14)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v1 + 56) = v13;
  operator delete(v13);
  *(_QWORD *)v1 = &unk_1E3D1E2D8;
  v14 = *(void **)(v1 + 8);
  if (!v14)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_17:
  *(_QWORD *)(v1 + 16) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

void sub_19C158B5C()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C158B6C(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C158B74(uint64_t a1)
{
  return a1 + 288;
}

void sub_19C158B7C(uint64_t a1)
{
  void *__p[4];

  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19C154D6C(a1, -0.44);
}

void sub_19C158BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C158C10(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, const void **a5)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  vDSP_Length v14;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  const void *v27;
  int64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  vDSP_Length __N;
  float v49;
  float __C;
  int __B;

  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = a4;
  v11 = *(_DWORD *)(a1 + 100);
  v12 = *(int *)(a1 + 96);
  v13 = *(_QWORD **)(a1 + 512);
  v14 = *(int *)(a1 + 104);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*(_BYTE *)(a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10)
              + 4 * v14
              - 4) = 1065353216;
  v46 = v11;
  __N = v11;
  v17 = *a5;
  v16 = a5[1];
  if (v9)
    v18 = 1;
  else
    v18 = v10;
  v19 = *(_QWORD *)(a1 + 384);
  v20 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v16 == v17)
  {
    cblas_sgemv_NEWLAPACK();
    v41 = *(_QWORD *)(a1 + 384);
    __C = 50.0;
    __B = -1035468800;
    vDSP_vclip(*(const float **)(v41 + 8 * v18), 1, (const float *)&__B, &__C, *(float **)(v41 + 8 * v18), 1, __N);
    v42 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v43 = *(_QWORD *)(a1 + 384);
    __C = 0.0;
    __B = v46;
    vvexpf(*(float **)(v42 + 8 * v10), *(const float **)(v43 + 8 * v18), &__B);
    vDSP_sve(*(const float **)(v42 + 8 * v10), 1, &__C, __B);
    if (__C <= 0.0)
      v44 = 0.001;
    else
      v44 = __C + 0.001;
    v49 = v44;
    vDSP_vsdiv(*(const float **)(v42 + 8 * v10), 1, &v49, *(float **)(v42 + 8 * v10), 1, __B);
    v45 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    __C = 5.0;
    __B = -1063256064;
    vDSP_vclip(*(const float **)(v45 + 8 * v10), 1, (const float *)&__B, &__C, *(float **)(v45 + 8 * v10), 1, __N);
  }
  else
  {
    v47 = 4 * __N;
    bzero(*(void **)(v19 + 8 * v18), 4 * __N);
    v21 = (int *)*a5;
    if (a5[1] != *a5)
    {
      v22 = 0;
      do
      {
        vDSP_dotpr(*(const float **)(v20 + 8 * v10), 1, (const float *)(*v13 + 4 * v21[v22] * (int)v14), 1, (float *)(*(_QWORD *)(v19 + 8 * v18) + 4 * v21[v22]), v14);
        ++v22;
        v21 = (int *)*a5;
      }
      while (v22 < ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 2);
    }
    v23 = *(_QWORD *)(a1 + 384);
    __C = 50.0;
    __B = -1035468800;
    vDSP_vclip(*(const float **)(v23 + 8 * v18), 1, (const float *)&__B, &__C, *(float **)(v23 + 8 * v18), 1, __N);
    v24 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v25 = *(_QWORD *)(a1 + 384);
    v27 = *a5;
    v26 = a5[1];
    v28 = v26 - (_BYTE *)*a5;
    if (v26 == *a5)
    {
      bzero(*(void **)(v24 + 8 * v10), v47);
    }
    else
    {
      if (v28 < 0)
        sub_19C07DA0C();
      v29 = (int *)operator new(v26 - (_BYTE *)*a5);
      memcpy(v29, v27, v28);
      bzero(*(void **)(v24 + 8 * v10), v47);
      v30 = 0;
      v31 = *(_QWORD *)(v25 + 8 * v18);
      v32 = v28 >> 2;
      v33 = *(_QWORD *)(v24 + 8 * v10);
      if (v32 <= 1)
        v34 = 1;
      else
        v34 = v32;
      v35 = 0.0;
      do
      {
        v36 = 4 * v29[v30];
        v37 = expf(*(float *)(v31 + v36));
        *(float *)(v33 + v36) = v37;
        v35 = v37 + v35;
        ++v30;
      }
      while (v34 != v30);
      v38 = 0;
      v39 = 1.0 / (float)(v35 + 0.001);
      if (v35 <= 0.0)
        v39 = 1000.0;
      do
      {
        v40 = 4 * v29[v38];
        *(float *)(v33 + v40) = *(float *)(v33 + v40) * v39;
        ++v38;
      }
      while (v34 != v38);
      operator delete(v29);
    }
  }
}

void sub_19C158FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C159000(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  int v11;
  uint64_t v12;

  v10 = result;
  if (a5 && *(_BYTE *)(result + 520))
    sub_19C2210D4(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 224))(v10, a2, a3, v12, a7);
      v12 = (v12 + 1);
    }
    while (v11 != (_DWORD)v12);
  }
  return result;
}

void sub_19C159090(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C155DE4(a1);
  operator delete(v1);
}

uint64_t sub_19C1590A4(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  _DWORD *v16;
  char *__p;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1F5A8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19C22CB44(a1 + 1192);
  sub_19C22CB44(a1 + 1264);
  sub_19C22CB44(a1 + 1336);
  sub_19C22CB44(a1 + 1408);
  sub_19C22CB44(a1 + 1480);
  sub_19C22CB44(a1 + 1552);
  sub_19C22CB44(a1 + 1624);
  sub_19C22CB44(a1 + 1696);
  sub_19C22CB44(a1 + 1768);
  sub_19C22CB44(a1 + 1840);
  sub_19C22CB44(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2040) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2048) = a9;
  if (a9)
  {
    v14 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    v15 = v14 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2048) + 376);
  }
  else
  {
    v15 = 1;
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  v16 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v16[1];
  *(_DWORD *)(a1 + 528) = v16[2];
  if (!a8)
    v15 = 0;
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from constructor");
  sub_19C1596DC(a1);
  operator delete(__p);
  return a1;
}

void sub_19C159394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  void **v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  if (a27 < 0)
  {
    operator delete(__p);
    v36 = (void *)v27[252];
    if (!v36)
    {
LABEL_3:
      v37 = *v32;
      if (!*v32)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v36 = (void *)v27[252];
    if (!v36)
      goto LABEL_3;
  }
  v27[253] = v36;
  operator delete(v36);
  v37 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19C22CB78(v33);
    sub_19C22CB78(v34);
    sub_19C22CB78(a10);
    sub_19C22CB78(a11);
    sub_19C22CB78(a12);
    sub_19C22CB78(a13);
    sub_19C22CB78(a14);
    sub_19C22CB78(a15);
    sub_19C22CB78(a16);
    sub_19C22CB78(a17);
    sub_19C22CB78(a18);
    sub_19C101AC4(v31);
    sub_19C101AC4(v29);
    sub_19C101AC4(a19);
    v38 = (void *)v27[85];
    if (v38)
    {
      v27[86] = v38;
      operator delete(v38);
      v39 = (void *)v27[82];
      if (!v39)
      {
LABEL_7:
        v40 = (void *)v27[79];
        if (!v40)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = (void *)v27[82];
      if (!v39)
        goto LABEL_7;
    }
    v27[83] = v39;
    operator delete(v39);
    v40 = (void *)v27[79];
    if (!v40)
    {
LABEL_8:
      v41 = (void *)v27[76];
      if (!v41)
        goto LABEL_9;
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v40;
    operator delete(v40);
    v41 = (void *)v27[76];
    if (!v41)
    {
LABEL_9:
      v42 = (void *)v27[73];
      if (!v42)
        goto LABEL_10;
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v41;
    operator delete(v41);
    v42 = (void *)v27[73];
    if (!v42)
    {
LABEL_10:
      v43 = (void *)v27[70];
      if (!v43)
        goto LABEL_11;
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v42;
    operator delete(v42);
    v43 = (void *)v27[70];
    if (!v43)
    {
LABEL_11:
      v44 = (void *)v27[62];
      if (!v44)
        goto LABEL_12;
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v43;
    operator delete(v43);
    v44 = (void *)v27[62];
    if (!v44)
    {
LABEL_12:
      v45 = (void *)v27[59];
      if (!v45)
        goto LABEL_13;
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v44;
    operator delete(v44);
    v45 = (void *)v27[59];
    if (!v45)
    {
LABEL_13:
      v46 = (void *)v27[56];
      if (!v46)
        goto LABEL_14;
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v45;
    operator delete(v45);
    v46 = (void *)v27[56];
    if (!v46)
    {
LABEL_14:
      v47 = (void *)v27[53];
      if (!v47)
        goto LABEL_15;
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v46;
    operator delete(v46);
    v47 = (void *)v27[53];
    if (!v47)
    {
LABEL_15:
      v48 = (void *)v27[50];
      if (!v48)
        goto LABEL_16;
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v47;
    operator delete(v47);
    v48 = (void *)v27[50];
    if (!v48)
    {
LABEL_16:
      v49 = *v30;
      if (!*v30)
        goto LABEL_17;
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v48;
    operator delete(v48);
    v49 = *v30;
    if (!*v30)
    {
LABEL_17:
      sub_19C0830E8(v28);
      v50 = (void *)v27[23];
      if (!v50)
        goto LABEL_18;
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v49;
    operator delete(v49);
    sub_19C0830E8(v28);
    v50 = (void *)v27[23];
    if (!v50)
    {
LABEL_18:
      v51 = (void *)v27[20];
      if (!v51)
        goto LABEL_19;
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v50;
    operator delete(v50);
    v51 = (void *)v27[20];
    if (!v51)
    {
LABEL_19:
      v52 = (void *)v27[17];
      if (!v52)
        goto LABEL_20;
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v51;
    operator delete(v51);
    v52 = (void *)v27[17];
    if (!v52)
    {
LABEL_20:
      v53 = (void *)v27[14];
      if (!v53)
        goto LABEL_21;
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v52;
    operator delete(v52);
    v53 = (void *)v27[14];
    if (!v53)
    {
LABEL_21:
      v54 = (void *)v27[11];
      if (!v54)
        goto LABEL_22;
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v53;
    operator delete(v53);
    v54 = (void *)v27[11];
    if (!v54)
    {
LABEL_22:
      v55 = *a20;
      if (!*a20)
        goto LABEL_23;
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v54;
    operator delete(v54);
    v55 = *a20;
    if (!*a20)
    {
LABEL_23:
      *v27 = &unk_1E3D1E2D8;
      v56 = (void *)v27[1];
      if (!v56)
        goto LABEL_24;
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v55;
    operator delete(v55);
    *v27 = &unk_1E3D1E2D8;
    v56 = (void *)v27[1];
    if (!v56)
LABEL_24:
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v56;
    operator delete(v56);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v37;
  operator delete(v37);
  goto LABEL_5;
}

void sub_19C1596DC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  void *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _OWORD *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _OWORD *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _OWORD *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  _OWORD *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  void *v260;
  char *v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  char *v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  _QWORD *v310;
  char *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  _OWORD *v316;
  char *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  int v321;
  void *v322;
  char *v323;
  unint64_t v324;
  _QWORD *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _BYTE *v332;
  _QWORD *v333;
  char *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  _OWORD *v339;
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  int v344;
  void *v345;
  char *v346;
  unint64_t v347;
  _QWORD *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _QWORD *v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  unsigned int v367;
  void *v368;
  char *v369;
  unint64_t v370;
  _QWORD *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  _BYTE *v378;
  _QWORD *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  _OWORD *v385;
  char *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  unsigned int v390;
  void *v391;
  char *v392;
  unint64_t v393;
  _QWORD *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _BYTE *v401;
  _QWORD *v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  unsigned int v413;
  void *v414;
  char *v415;
  unint64_t v416;
  _QWORD *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  _QWORD *v425;
  char *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  _OWORD *v431;
  char *v432;
  uint64_t v433;
  __int128 v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  int v438;
  void *v439;
  char **v440;
  char *v441;
  unint64_t v442;
  _QWORD *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _BYTE *v450;
  _QWORD *v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  _OWORD *v457;
  char *v458;
  uint64_t v459;
  __int128 v460;
  uint64_t v461;
  int v462;
  void *v463;
  char *v464;
  unint64_t v465;
  _QWORD *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  _QWORD *v474;
  char *v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  _OWORD *v480;
  char *v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  int v485;
  void *v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  _BYTE *v496;
  _QWORD *v497;
  char *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  _OWORD *v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  void *v508;

  v2 = 3;
  v3 = 6;
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988))
      goto LABEL_23;
LABEL_11:
    v4 = *(_QWORD *)(a1 + 2048);
    if (v4 && (v5 = *(_DWORD *)(v4 + 40), v5 >= 1))
    {
      v6 = (_QWORD *)(v4 + 8 * v3);
      if (v5 == 6)
      {
        *(_QWORD *)(a1 + 232) = v6[14];
        *(_QWORD *)(a1 + 240) = v6[15];
        *(_QWORD *)(a1 + 248) = v6[16];
      }
      else
      {
        if (v5 != 4)
          sub_19C2210D4(45);
        *(_QWORD *)(a1 + 232) = v6[14];
      }
      *(_QWORD *)(a1 + 256) = v6[17];
      *(_QWORD *)(a1 + 264) = v6[18];
      *(_QWORD *)(a1 + 272) = v6[19];
    }
    else if (!*(_BYTE *)(a1 + 1985))
    {
      v7 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v7);
      sub_19C0FCEBC(&v508, v7, 0.1);
      v8 = v508;
      *(_QWORD *)(a1 + 232) = v508;
      v9 = (char **)(a1 + 2016);
      v10 = *(char **)(a1 + 2024);
      v11 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v10 >= v11)
      {
        v303 = *v9;
        v304 = v10 - *v9;
        v305 = v304 >> 3;
        v306 = (v304 >> 3) + 1;
        if (v306 >> 61)
          goto LABEL_543;
        v307 = v11 - (_QWORD)v303;
        if (v307 >> 2 > v306)
          v306 = v307 >> 2;
        if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v306;
        if (v308)
        {
          if (v308 >> 61)
            goto LABEL_544;
          v309 = operator new(8 * v308);
        }
        else
        {
          v309 = 0;
        }
        v310 = &v309[8 * v305];
        v311 = &v309[8 * v308];
        *v310 = v8;
        v12 = v310 + 1;
        if (v10 != v303)
        {
          v312 = v10 - v303 - 8;
          if (v312 < 0x58)
            goto LABEL_548;
          if ((unint64_t)(v10 - v309 - v304) < 0x20)
            goto LABEL_548;
          v313 = (v312 >> 3) + 1;
          v314 = 8 * (v313 & 0x3FFFFFFFFFFFFFFCLL);
          v315 = &v10[-v314];
          v310 = (_QWORD *)((char *)v310 - v314);
          v316 = &v309[8 * v305 - 16];
          v317 = v10 - 16;
          v318 = v313 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v319 = *(_OWORD *)v317;
            *(v316 - 1) = *((_OWORD *)v317 - 1);
            *v316 = v319;
            v316 -= 2;
            v317 -= 32;
            v318 -= 4;
          }
          while (v318);
          v10 = v315;
          if (v313 != (v313 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_548:
            do
            {
              v320 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *--v310 = v320;
            }
            while (v10 != v303);
          }
          v10 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v310;
        *(_QWORD *)(a1 + 2024) = v12;
        *(_QWORD *)(a1 + 2032) = v311;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v10 = v8;
        v12 = v10 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v12;
      v321 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v321);
      sub_19C0FCEBC(&v508, v321, 0.1);
      v322 = v508;
      *(_QWORD *)(a1 + 240) = v508;
      v323 = *(char **)(a1 + 2024);
      v324 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v323 >= v324)
      {
        v326 = *v9;
        v327 = v323 - *v9;
        v328 = v327 >> 3;
        v329 = (v327 >> 3) + 1;
        if (v329 >> 61)
          goto LABEL_543;
        v330 = v324 - (_QWORD)v326;
        if (v330 >> 2 > v329)
          v329 = v330 >> 2;
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF8)
          v331 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v331 = v329;
        if (v331)
        {
          if (v331 >> 61)
            goto LABEL_544;
          v332 = operator new(8 * v331);
        }
        else
        {
          v332 = 0;
        }
        v333 = &v332[8 * v328];
        v334 = &v332[8 * v331];
        *v333 = v322;
        v325 = v333 + 1;
        if (v323 != v326)
        {
          v335 = v323 - v326 - 8;
          if (v335 < 0x58)
            goto LABEL_549;
          if ((unint64_t)(v323 - &v332[v327]) < 0x20)
            goto LABEL_549;
          v336 = (v335 >> 3) + 1;
          v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
          v338 = &v323[-v337];
          v333 = (_QWORD *)((char *)v333 - v337);
          v339 = &v332[8 * v328 - 16];
          v340 = v323 - 16;
          v341 = v336 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v342 = *(_OWORD *)v340;
            *(v339 - 1) = *((_OWORD *)v340 - 1);
            *v339 = v342;
            v339 -= 2;
            v340 -= 32;
            v341 -= 4;
          }
          while (v341);
          v323 = v338;
          if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_549:
            do
            {
              v343 = *((_QWORD *)v323 - 1);
              v323 -= 8;
              *--v333 = v343;
            }
            while (v323 != v326);
          }
          v323 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v333;
        *(_QWORD *)(a1 + 2024) = v325;
        *(_QWORD *)(a1 + 2032) = v334;
        if (v323)
          operator delete(v323);
      }
      else
      {
        *(_QWORD *)v323 = v322;
        v325 = v323 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v325;
      v344 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v344);
      sub_19C0FCEBC(&v508, v344, 0.1);
      v345 = v508;
      *(_QWORD *)(a1 + 248) = v508;
      v346 = *(char **)(a1 + 2024);
      v347 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v346 >= v347)
      {
        v349 = *v9;
        v350 = v346 - *v9;
        v351 = v350 >> 3;
        v352 = (v350 >> 3) + 1;
        if (v352 >> 61)
          goto LABEL_543;
        v353 = v347 - (_QWORD)v349;
        if (v353 >> 2 > v352)
          v352 = v353 >> 2;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v352;
        if (v354)
        {
          if (v354 >> 61)
            goto LABEL_544;
          v355 = operator new(8 * v354);
        }
        else
        {
          v355 = 0;
        }
        v356 = &v355[8 * v351];
        v357 = &v355[8 * v354];
        *v356 = v345;
        v348 = v356 + 1;
        if (v346 != v349)
        {
          v358 = v346 - v349 - 8;
          if (v358 < 0x58)
            goto LABEL_550;
          if ((unint64_t)(v346 - &v355[v350]) < 0x20)
            goto LABEL_550;
          v359 = (v358 >> 3) + 1;
          v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
          v361 = &v346[-v360];
          v356 = (_QWORD *)((char *)v356 - v360);
          v362 = &v355[8 * v351 - 16];
          v363 = v346 - 16;
          v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v365 = *(_OWORD *)v363;
            *(v362 - 1) = *((_OWORD *)v363 - 1);
            *v362 = v365;
            v362 -= 2;
            v363 -= 32;
            v364 -= 4;
          }
          while (v364);
          v346 = v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_550:
            do
            {
              v366 = *((_QWORD *)v346 - 1);
              v346 -= 8;
              *--v356 = v366;
            }
            while (v346 != v349);
          }
          v346 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v356;
        *(_QWORD *)(a1 + 2024) = v348;
        *(_QWORD *)(a1 + 2032) = v357;
        if (v346)
          operator delete(v346);
      }
      else
      {
        *(_QWORD *)v346 = v345;
        v348 = v346 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v348;
      v367 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v367);
      sub_19C0FCEBC(&v508, v367, 0.1);
      v368 = v508;
      *(_QWORD *)(a1 + 256) = v508;
      v369 = *(char **)(a1 + 2024);
      v370 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v369 >= v370)
      {
        v372 = *v9;
        v373 = v369 - *v9;
        v374 = v373 >> 3;
        v375 = (v373 >> 3) + 1;
        if (v375 >> 61)
          goto LABEL_543;
        v376 = v370 - (_QWORD)v372;
        if (v376 >> 2 > v375)
          v375 = v376 >> 2;
        if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
          v377 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        if (v377)
        {
          if (v377 >> 61)
            goto LABEL_544;
          v378 = operator new(8 * v377);
        }
        else
        {
          v378 = 0;
        }
        v379 = &v378[8 * v374];
        v380 = &v378[8 * v377];
        *v379 = v368;
        v371 = v379 + 1;
        if (v369 != v372)
        {
          v381 = v369 - v372 - 8;
          if (v381 < 0x58)
            goto LABEL_551;
          if ((unint64_t)(v369 - v378 - v373) < 0x20)
            goto LABEL_551;
          v382 = (v381 >> 3) + 1;
          v383 = 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
          v384 = &v369[-v383];
          v379 = (_QWORD *)((char *)v379 - v383);
          v385 = &v378[8 * v374 - 16];
          v386 = v369 - 16;
          v387 = v382 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v388 = *(_OWORD *)v386;
            *(v385 - 1) = *((_OWORD *)v386 - 1);
            *v385 = v388;
            v385 -= 2;
            v386 -= 32;
            v387 -= 4;
          }
          while (v387);
          v369 = v384;
          if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_551:
            do
            {
              v389 = *((_QWORD *)v369 - 1);
              v369 -= 8;
              *--v379 = v389;
            }
            while (v369 != v372);
          }
          v369 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v379;
        *(_QWORD *)(a1 + 2024) = v371;
        *(_QWORD *)(a1 + 2032) = v380;
        if (v369)
          operator delete(v369);
      }
      else
      {
        *(_QWORD *)v369 = v368;
        v371 = v369 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v371;
      v390 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v390);
      sub_19C0FCEBC(&v508, v390, 0.1);
      v391 = v508;
      *(_QWORD *)(a1 + 264) = v508;
      v392 = *(char **)(a1 + 2024);
      v393 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v392 >= v393)
      {
        v395 = *v9;
        v396 = v392 - *v9;
        v397 = v396 >> 3;
        v398 = (v396 >> 3) + 1;
        if (v398 >> 61)
          goto LABEL_543;
        v399 = v393 - (_QWORD)v395;
        if (v399 >> 2 > v398)
          v398 = v399 >> 2;
        if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8)
          v400 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v400 = v398;
        if (v400)
        {
          if (v400 >> 61)
            goto LABEL_544;
          v401 = operator new(8 * v400);
        }
        else
        {
          v401 = 0;
        }
        v402 = &v401[8 * v397];
        v403 = &v401[8 * v400];
        *v402 = v391;
        v394 = v402 + 1;
        if (v392 != v395)
        {
          v404 = v392 - v395 - 8;
          if (v404 < 0x58)
            goto LABEL_552;
          if ((unint64_t)(v392 - v401 - v396) < 0x20)
            goto LABEL_552;
          v405 = (v404 >> 3) + 1;
          v406 = 8 * (v405 & 0x3FFFFFFFFFFFFFFCLL);
          v407 = &v392[-v406];
          v402 = (_QWORD *)((char *)v402 - v406);
          v408 = &v401[8 * v397 - 16];
          v409 = v392 - 16;
          v410 = v405 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v411 = *(_OWORD *)v409;
            *(v408 - 1) = *((_OWORD *)v409 - 1);
            *v408 = v411;
            v408 -= 2;
            v409 -= 32;
            v410 -= 4;
          }
          while (v410);
          v392 = v407;
          if (v405 != (v405 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_552:
            do
            {
              v412 = *((_QWORD *)v392 - 1);
              v392 -= 8;
              *--v402 = v412;
            }
            while (v392 != v395);
          }
          v392 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v402;
        *(_QWORD *)(a1 + 2024) = v394;
        *(_QWORD *)(a1 + 2032) = v403;
        if (v392)
          operator delete(v392);
      }
      else
      {
        *(_QWORD *)v392 = v391;
        v394 = v392 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v394;
      v413 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 4 * v413);
      sub_19C0FCEBC(&v508, v413, 0.1);
      v414 = v508;
      *(_QWORD *)(a1 + 272) = v508;
      v415 = *(char **)(a1 + 2024);
      v416 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v415 >= v416)
      {
        v418 = *v9;
        v419 = v415 - *v9;
        v420 = v419 >> 3;
        v421 = (v419 >> 3) + 1;
        if (v421 >> 61)
          goto LABEL_543;
        v422 = v416 - (_QWORD)v418;
        if (v422 >> 2 > v421)
          v421 = v422 >> 2;
        if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v421;
        if (v423)
        {
          if (v423 >> 61)
            goto LABEL_544;
          v424 = operator new(8 * v423);
        }
        else
        {
          v424 = 0;
        }
        v425 = &v424[8 * v420];
        v426 = &v424[8 * v423];
        *v425 = v414;
        v417 = v425 + 1;
        if (v415 != v418)
        {
          v427 = v415 - v418 - 8;
          if (v427 < 0x58)
            goto LABEL_553;
          if ((unint64_t)(v415 - v424 - v419) < 0x20)
            goto LABEL_553;
          v428 = (v427 >> 3) + 1;
          v429 = 8 * (v428 & 0x3FFFFFFFFFFFFFFCLL);
          v430 = &v415[-v429];
          v425 = (_QWORD *)((char *)v425 - v429);
          v431 = &v424[8 * v420 - 16];
          v432 = v415 - 16;
          v433 = v428 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v434 = *(_OWORD *)v432;
            *(v431 - 1) = *((_OWORD *)v432 - 1);
            *v431 = v434;
            v431 -= 2;
            v432 -= 32;
            v433 -= 4;
          }
          while (v433);
          v415 = v430;
          if (v428 != (v428 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_553:
            do
            {
              v435 = *((_QWORD *)v415 - 1);
              v415 -= 8;
              *--v425 = v435;
            }
            while (v415 != v418);
          }
          v415 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v425;
        *(_QWORD *)(a1 + 2024) = v417;
        *(_QWORD *)(a1 + 2032) = v426;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *(_QWORD *)v415 = v414;
        v417 = v415 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v417;
      if (*(_BYTE *)(a1 + 1985))
        goto LABEL_22;
      goto LABEL_473;
    }
    if (*(_BYTE *)(a1 + 1985))
    {
LABEL_22:
      *(_QWORD *)(a1 + 304) = a1 + 232;
      *(_QWORD *)(a1 + 312) = a1 + 240;
      *(_QWORD *)(a1 + 320) = a1 + 248;
      *(_QWORD *)(a1 + 328) = a1 + 256;
      *(_QWORD *)(a1 + 336) = a1 + 264;
      *(_QWORD *)(a1 + 344) = a1 + 272;
      *(_QWORD *)(a1 + 352) = a1 + 280;
      *(_QWORD *)(a1 + 360) = a1 + 288;
      *(_QWORD *)(a1 + 368) = a1 + 296;
      goto LABEL_23;
    }
LABEL_473:
    v436 = *(_QWORD *)(a1 + 2048);
    if (v436)
    {
      if (*(_BYTE *)(v436 + 244))
      {
        v437 = (_QWORD *)(v436 + 8 * v2);
        *(_QWORD *)(a1 + 280) = v437[31];
        *(_QWORD *)(a1 + 288) = v437[32];
        *(_QWORD *)(a1 + 296) = v437[33];
      }
      else
      {
        v438 = *(_DWORD *)(a1 + 52);
        v508 = (void *)operator new[]();
        sub_19C0FCEBC(&v508, v438, 0.1);
        v439 = v508;
        *(_QWORD *)(a1 + 280) = v508;
        v440 = (char **)(a1 + 2016);
        v441 = *(char **)(a1 + 2024);
        v442 = *(_QWORD *)(a1 + 2032);
        if ((unint64_t)v441 >= v442)
        {
          v444 = *v440;
          v445 = v441 - *v440;
          v446 = v445 >> 3;
          v447 = (v445 >> 3) + 1;
          if (v447 >> 61)
            goto LABEL_543;
          v448 = v442 - (_QWORD)v444;
          if (v448 >> 2 > v447)
            v447 = v448 >> 2;
          if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
            v449 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v449 = v447;
          if (v449)
          {
            if (v449 >> 61)
              goto LABEL_544;
            v450 = operator new(8 * v449);
          }
          else
          {
            v450 = 0;
          }
          v451 = &v450[8 * v446];
          v452 = &v450[8 * v449];
          *v451 = v439;
          v443 = v451 + 1;
          if (v441 != v444)
          {
            v453 = v441 - v444 - 8;
            if (v453 < 0x58)
              goto LABEL_554;
            if ((unint64_t)(v441 - &v450[v445]) < 0x20)
              goto LABEL_554;
            v454 = (v453 >> 3) + 1;
            v455 = 8 * (v454 & 0x3FFFFFFFFFFFFFFCLL);
            v456 = &v441[-v455];
            v451 = (_QWORD *)((char *)v451 - v455);
            v457 = &v450[8 * v446 - 16];
            v458 = v441 - 16;
            v459 = v454 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v460 = *(_OWORD *)v458;
              *(v457 - 1) = *((_OWORD *)v458 - 1);
              *v457 = v460;
              v457 -= 2;
              v458 -= 32;
              v459 -= 4;
            }
            while (v459);
            v441 = v456;
            if (v454 != (v454 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_554:
              do
              {
                v461 = *((_QWORD *)v441 - 1);
                v441 -= 8;
                *--v451 = v461;
              }
              while (v441 != v444);
            }
            v441 = *v440;
          }
          *(_QWORD *)(a1 + 2016) = v451;
          *(_QWORD *)(a1 + 2024) = v443;
          *(_QWORD *)(a1 + 2032) = v452;
          if (v441)
            operator delete(v441);
        }
        else
        {
          *(_QWORD *)v441 = v439;
          v443 = v441 + 8;
        }
        *(_QWORD *)(a1 + 2024) = v443;
        v462 = *(_DWORD *)(a1 + 52);
        v508 = (void *)operator new[]();
        sub_19C0FCEBC(&v508, v462, 0.1);
        v463 = v508;
        *(_QWORD *)(a1 + 288) = v508;
        v464 = *(char **)(a1 + 2024);
        v465 = *(_QWORD *)(a1 + 2032);
        if ((unint64_t)v464 >= v465)
        {
          v467 = *v440;
          v468 = v464 - *v440;
          v469 = v468 >> 3;
          v470 = (v468 >> 3) + 1;
          if (v470 >> 61)
            goto LABEL_543;
          v471 = v465 - (_QWORD)v467;
          if (v471 >> 2 > v470)
            v470 = v471 >> 2;
          if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
            v472 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v472 = v470;
          if (v472)
          {
            if (v472 >> 61)
              goto LABEL_544;
            v473 = operator new(8 * v472);
          }
          else
          {
            v473 = 0;
          }
          v474 = &v473[8 * v469];
          v475 = &v473[8 * v472];
          *v474 = v463;
          v466 = v474 + 1;
          if (v464 != v467)
          {
            v476 = v464 - v467 - 8;
            if (v476 < 0x58)
              goto LABEL_555;
            if ((unint64_t)(v464 - v473 - v468) < 0x20)
              goto LABEL_555;
            v477 = (v476 >> 3) + 1;
            v478 = 8 * (v477 & 0x3FFFFFFFFFFFFFFCLL);
            v479 = &v464[-v478];
            v474 = (_QWORD *)((char *)v474 - v478);
            v480 = &v473[8 * v469 - 16];
            v481 = v464 - 16;
            v482 = v477 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v483 = *(_OWORD *)v481;
              *(v480 - 1) = *((_OWORD *)v481 - 1);
              *v480 = v483;
              v480 -= 2;
              v481 -= 32;
              v482 -= 4;
            }
            while (v482);
            v464 = v479;
            if (v477 != (v477 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_555:
              do
              {
                v484 = *((_QWORD *)v464 - 1);
                v464 -= 8;
                *--v474 = v484;
              }
              while (v464 != v467);
            }
            v464 = *v440;
          }
          *(_QWORD *)(a1 + 2016) = v474;
          *(_QWORD *)(a1 + 2024) = v466;
          *(_QWORD *)(a1 + 2032) = v475;
          if (v464)
            operator delete(v464);
        }
        else
        {
          *(_QWORD *)v464 = v463;
          v466 = v464 + 8;
        }
        *(_QWORD *)(a1 + 2024) = v466;
        v485 = *(_DWORD *)(a1 + 52);
        v508 = (void *)operator new[]();
        sub_19C0FCEBC(&v508, v485, 0.1);
        v486 = v508;
        *(_QWORD *)(a1 + 296) = v508;
        v487 = *(char **)(a1 + 2024);
        v488 = *(_QWORD *)(a1 + 2032);
        if ((unint64_t)v487 >= v488)
        {
          v490 = *v440;
          v491 = v487 - *v440;
          v492 = v491 >> 3;
          v493 = (v491 >> 3) + 1;
          if (v493 >> 61)
            goto LABEL_543;
          v494 = v488 - (_QWORD)v490;
          if (v494 >> 2 > v493)
            v493 = v494 >> 2;
          if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8)
            v495 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v495 = v493;
          if (v495)
          {
            if (v495 >> 61)
              goto LABEL_544;
            v496 = operator new(8 * v495);
          }
          else
          {
            v496 = 0;
          }
          v497 = &v496[8 * v492];
          v498 = &v496[8 * v495];
          *v497 = v486;
          v489 = v497 + 1;
          if (v487 != v490)
          {
            v499 = v487 - v490 - 8;
            if (v499 < 0x58)
              goto LABEL_556;
            if ((unint64_t)(v487 - v496 - v491) < 0x20)
              goto LABEL_556;
            v500 = (v499 >> 3) + 1;
            v501 = 8 * (v500 & 0x3FFFFFFFFFFFFFFCLL);
            v502 = &v487[-v501];
            v497 = (_QWORD *)((char *)v497 - v501);
            v503 = &v496[8 * v492 - 16];
            v504 = v487 - 16;
            v505 = v500 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v506 = *(_OWORD *)v504;
              *(v503 - 1) = *((_OWORD *)v504 - 1);
              *v503 = v506;
              v503 -= 2;
              v504 -= 32;
              v505 -= 4;
            }
            while (v505);
            v487 = v502;
            if (v500 != (v500 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_556:
              do
              {
                v507 = *((_QWORD *)v487 - 1);
                v487 -= 8;
                *--v497 = v507;
              }
              while (v487 != v490);
            }
            v487 = *v440;
          }
          *(_QWORD *)(a1 + 2016) = v497;
          *(_QWORD *)(a1 + 2024) = v489;
          *(_QWORD *)(a1 + 2032) = v498;
          if (v487)
            operator delete(v487);
        }
        else
        {
          *(_QWORD *)v487 = v486;
          v489 = v487 + 8;
        }
        *(_QWORD *)(a1 + 2024) = v489;
      }
    }
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 2040))
    v3 = 6;
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 2040))
    v2 = 3;
  else
    v2 = 0;
  if (!*(_DWORD *)(a1 + 1988))
    goto LABEL_11;
LABEL_23:
  v13 = *(unsigned int *)(a1 + 52);
  v14 = (void *)operator new[]();
  v15 = v14;
  if ((int)v13 >= 1)
    bzero(v14, 4 * v13);
  *(_QWORD *)(a1 + 536) = v15;
  v16 = (char **)(a1 + 1992);
  v17 = *(char **)(a1 + 2000);
  v18 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v17 < v18)
  {
    *(_QWORD *)v17 = v15;
    v19 = (uint64_t)(v17 + 8);
    goto LABEL_47;
  }
  v20 = *v16;
  v21 = v17 - *v16;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    goto LABEL_543;
  v24 = v18 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      goto LABEL_544;
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v15;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v17 - v20);
    if (v17 == v20)
      goto LABEL_45;
    goto LABEL_38;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v17 - v20);
  if (v17 != v20)
  {
LABEL_38:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_557;
    if ((unint64_t)(v17 - v26 - v21) < 0x20)
      goto LABEL_557;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v17[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v17 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v17 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_557:
      do
      {
        v38 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v27 = v38;
      }
      while (v17 != v20);
    }
    v17 = *v16;
  }
LABEL_45:
  *(_QWORD *)(a1 + 1992) = v27;
  *(_QWORD *)(a1 + 2000) = v19;
  *(_QWORD *)(a1 + 2008) = v28;
  if (v17)
    operator delete(v17);
LABEL_47:
  *(_QWORD *)(a1 + 2000) = v19;
  v39 = *(unsigned int *)(a1 + 52);
  v40 = (void *)operator new[]();
  v41 = v40;
  if ((int)v39 >= 1)
    bzero(v40, 4 * v39);
  *(_QWORD *)(a1 + 544) = v41;
  v42 = *(char **)(a1 + 2000);
  v43 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v42 < v43)
  {
    *(_QWORD *)v42 = v41;
    v44 = (uint64_t)(v42 + 8);
    goto LABEL_71;
  }
  v45 = *v16;
  v46 = v42 - *v16;
  v47 = v46 >> 3;
  v48 = (v46 >> 3) + 1;
  if (v48 >> 61)
LABEL_543:
    sub_19C07DA0C();
  v49 = v43 - (_QWORD)v45;
  if (v49 >> 2 > v48)
    v48 = v49 >> 2;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v48;
  if (!v50)
  {
    v51 = 0;
    v52 = (_QWORD *)(8 * v47);
    v53 = 0;
    *(_QWORD *)(8 * v47) = v41;
    v44 = 8 * v47 + 8;
    v54 = (char *)(v42 - v45);
    if (v42 == v45)
      goto LABEL_69;
LABEL_62:
    v55 = (unint64_t)(v54 - 8);
    if (v55 < 0x58)
      goto LABEL_558;
    if ((unint64_t)(v42 - v51 - v46) < 0x20)
      goto LABEL_558;
    v56 = (v55 >> 3) + 1;
    v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    v58 = &v42[-v57];
    v52 = (_QWORD *)((char *)v52 - v57);
    v59 = &v51[8 * v47 - 16];
    v60 = v42 - 16;
    v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 4;
    }
    while (v61);
    v42 = v58;
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_558:
      do
      {
        v63 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *--v52 = v63;
      }
      while (v42 != v45);
    }
    v42 = *v16;
    goto LABEL_69;
  }
  if (v50 >> 61)
LABEL_544:
    sub_19C07C7FC();
  v51 = operator new(8 * v50);
  v52 = &v51[8 * v47];
  v53 = &v51[8 * v50];
  *v52 = v41;
  v44 = (uint64_t)(v52 + 1);
  v54 = (char *)(v42 - v45);
  if (v42 != v45)
    goto LABEL_62;
LABEL_69:
  *(_QWORD *)(a1 + 1992) = v52;
  *(_QWORD *)(a1 + 2000) = v44;
  *(_QWORD *)(a1 + 2008) = v53;
  if (v42)
    operator delete(v42);
LABEL_71:
  v64 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 2000) = v44;
  v65 = dword_1EE418968;
  v66 = (*(_QWORD *)(a1 + 96) - v64) >> 3;
  if (dword_1EE418968 <= v66)
  {
    if (dword_1EE418968 < v66)
      *(_QWORD *)(a1 + 96) = v64 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v66);
    v65 = dword_1EE418968;
  }
  v67 = *(_QWORD *)(a1 + 112);
  v68 = (*(_QWORD *)(a1 + 120) - v67) >> 3;
  if (v65 <= v68)
  {
    if (v65 < v68)
      *(_QWORD *)(a1 + 120) = v67 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v65 - v68);
    v65 = dword_1EE418968;
  }
  v69 = *(_QWORD *)(a1 + 64);
  v70 = (*(_QWORD *)(a1 + 72) - v69) >> 3;
  if (v65 <= v70)
  {
    if (v65 < v70)
      *(_QWORD *)(a1 + 72) = v69 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), v65 - v70);
    v65 = dword_1EE418968;
  }
  v72 = *(_QWORD *)(a1 + 208);
  v71 = *(_QWORD *)(a1 + 216);
  v73 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v72) >> 3);
  if (v65 <= v73)
  {
    if (v65 < v73)
    {
      v74 = v72 + 24 * (int)v65;
      if (v71 != v74)
      {
        v75 = *(_QWORD *)(a1 + 216);
        do
        {
          v77 = *(void **)(v75 - 24);
          v75 -= 24;
          v76 = v77;
          if (v77)
          {
            *(_QWORD *)(v71 - 16) = v76;
            operator delete(v76);
          }
          v71 = v75;
        }
        while (v75 != v74);
      }
      *(_QWORD *)(a1 + 216) = v74;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v65 - v73);
  }
  v78 = dword_1EE418968;
  v79 = dword_1EE418968;
  v80 = *(_QWORD *)(a1 + 448);
  v81 = (*(_QWORD *)(a1 + 456) - v80) >> 3;
  if (dword_1EE418968 <= v81)
  {
    if (dword_1EE418968 < v81)
      *(_QWORD *)(a1 + 456) = v80 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), dword_1EE418968 - v81);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v82 = *(_QWORD *)(a1 + 472);
  v83 = (*(_QWORD *)(a1 + 480) - v82) >> 3;
  if (v79 <= v83)
  {
    if (v79 < v83)
      *(_QWORD *)(a1 + 480) = v82 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v79 - v83);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v84 = *(_QWORD *)(a1 + 496);
  v85 = (*(_QWORD *)(a1 + 504) - v84) >> 3;
  if (v79 <= v85)
  {
    if (v79 < v85)
      *(_QWORD *)(a1 + 504) = v84 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v79 - v85);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v86 = *(_QWORD *)(a1 + 376);
  v87 = (*(_QWORD *)(a1 + 384) - v86) >> 3;
  if (v79 <= v87)
  {
    if (v79 < v87)
      *(_QWORD *)(a1 + 384) = v86 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v79 - v87);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v88 = *(_QWORD *)(a1 + 400);
  v89 = (*(_QWORD *)(a1 + 408) - v88) >> 3;
  if (v79 <= v89)
  {
    if (v79 < v89)
      *(_QWORD *)(a1 + 408) = v88 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v79 - v89);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v90 = *(_QWORD *)(a1 + 424);
  v91 = (*(_QWORD *)(a1 + 432) - v90) >> 3;
  if (v79 <= v91)
  {
    if (v79 < v91)
      *(_QWORD *)(a1 + 432) = v90 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v79 - v91);
    v78 = dword_1EE418968;
  }
  if (v78 >= 1)
  {
    v92 = 0;
    while (1)
    {
      v94 = *(unsigned int *)(a1 + 48);
      v95 = (void *)operator new[]();
      v96 = v95;
      if ((int)v94 >= 1)
        bzero(v95, 4 * v94);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v92) = v96;
      v97 = *(char **)(a1 + 2000);
      v98 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v97 < v98)
      {
        *(_QWORD *)v97 = v96;
        v99 = (uint64_t)(v97 + 8);
        goto LABEL_144;
      }
      v100 = *v16;
      v101 = v97 - *v16;
      v102 = v101 >> 3;
      v103 = (v101 >> 3) + 1;
      if (v103 >> 61)
        goto LABEL_543;
      v104 = v98 - (_QWORD)v100;
      if (v104 >> 2 > v103)
        v103 = v104 >> 2;
      v105 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v103;
      if (v105)
        break;
      v106 = 0;
      v107 = (_QWORD *)(8 * v102);
      *(_QWORD *)(8 * v102) = v96;
      v99 = 8 * v102 + 8;
      if (v97 != v100)
        goto LABEL_135;
LABEL_142:
      *(_QWORD *)(a1 + 1992) = v107;
      *(_QWORD *)(a1 + 2000) = v99;
      *(_QWORD *)(a1 + 2008) = &v106[8 * v105];
      if (v97)
        operator delete(v97);
LABEL_144:
      *(_QWORD *)(a1 + 2000) = v99;
      v117 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v92);
      v118 = 1;
      if (*(_BYTE *)(a1 + 40))
        v118 = 2;
      v119 = (uint64_t)(v117[1] - *v117) >> 2;
      if (v118 <= v119)
      {
        if (v118 < v119)
          v117[1] = *v117 + 4 * v118;
      }
      else
      {
        sub_19C101928((uint64_t)v117, v118 - v119);
      }
      v120 = *(unsigned int *)(a1 + 52);
      v121 = (void *)operator new[]();
      v122 = v121;
      if ((int)v120 >= 1)
        bzero(v121, 4 * v120);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v92) = v122;
      v123 = *(char **)(a1 + 2000);
      v124 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v123 < v124)
      {
        *(_QWORD *)v123 = v122;
        v125 = (uint64_t)(v123 + 8);
        goto LABEL_174;
      }
      v126 = *v16;
      v127 = v123 - *v16;
      v128 = v127 >> 3;
      v129 = (v127 >> 3) + 1;
      if (v129 >> 61)
        goto LABEL_543;
      v130 = v124 - (_QWORD)v126;
      if (v130 >> 2 > v129)
        v129 = v130 >> 2;
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
        v131 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v131 = v129;
      if (v131)
      {
        if (v131 >> 61)
          goto LABEL_544;
        v132 = operator new(8 * v131);
        v133 = &v132[8 * v128];
        *v133 = v122;
        v125 = (uint64_t)(v133 + 1);
        if (v123 == v126)
          goto LABEL_172;
LABEL_165:
        v134 = v123 - 8 - v126;
        if (v134 < 0x58)
          goto LABEL_559;
        if ((unint64_t)(v123 - &v132[v127]) < 0x20)
          goto LABEL_559;
        v135 = (v134 >> 3) + 1;
        v136 = 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
        v137 = &v123[-v136];
        v133 = (_QWORD *)((char *)v133 - v136);
        v138 = &v132[8 * v128 - 16];
        v139 = v123 - 16;
        v140 = v135 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v141 = *(_OWORD *)v139;
          *(v138 - 1) = *((_OWORD *)v139 - 1);
          *v138 = v141;
          v138 -= 2;
          v139 -= 32;
          v140 -= 4;
        }
        while (v140);
        v123 = v137;
        if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_559:
          do
          {
            v142 = *((_QWORD *)v123 - 1);
            v123 -= 8;
            *--v133 = v142;
          }
          while (v123 != v126);
        }
        v123 = *v16;
        goto LABEL_172;
      }
      v132 = 0;
      v133 = (_QWORD *)(8 * v128);
      *(_QWORD *)(8 * v128) = v122;
      v125 = 8 * v128 + 8;
      if (v123 != v126)
        goto LABEL_165;
LABEL_172:
      *(_QWORD *)(a1 + 1992) = v133;
      *(_QWORD *)(a1 + 2000) = v125;
      *(_QWORD *)(a1 + 2008) = &v132[8 * v131];
      if (v123)
        operator delete(v123);
LABEL_174:
      *(_QWORD *)(a1 + 2000) = v125;
      v143 = *(unsigned int *)(a1 + 52);
      v144 = (void *)operator new[]();
      v145 = v144;
      if ((int)v143 >= 1)
        bzero(v144, 4 * v143);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v92) = v145;
      v146 = *(char **)(a1 + 2000);
      v147 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v146 < v147)
      {
        *(_QWORD *)v146 = v145;
        v148 = (uint64_t)(v146 + 8);
        goto LABEL_198;
      }
      v149 = *v16;
      v150 = v146 - *v16;
      v151 = v150 >> 3;
      v152 = (v150 >> 3) + 1;
      if (v152 >> 61)
        goto LABEL_543;
      v153 = v147 - (_QWORD)v149;
      if (v153 >> 2 > v152)
        v152 = v153 >> 2;
      if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v154 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v154 = v152;
      if (v154)
      {
        if (v154 >> 61)
          goto LABEL_544;
        v155 = operator new(8 * v154);
        v156 = &v155[8 * v151];
        *v156 = v145;
        v148 = (uint64_t)(v156 + 1);
        if (v146 == v149)
          goto LABEL_196;
LABEL_189:
        v157 = v146 - 8 - v149;
        if (v157 < 0x58)
          goto LABEL_560;
        if ((unint64_t)(v146 - &v155[v150]) < 0x20)
          goto LABEL_560;
        v158 = (v157 >> 3) + 1;
        v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
        v160 = &v146[-v159];
        v156 = (_QWORD *)((char *)v156 - v159);
        v161 = &v155[8 * v151 - 16];
        v162 = v146 - 16;
        v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v164 = *(_OWORD *)v162;
          *(v161 - 1) = *((_OWORD *)v162 - 1);
          *v161 = v164;
          v161 -= 2;
          v162 -= 32;
          v163 -= 4;
        }
        while (v163);
        v146 = v160;
        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_560:
          do
          {
            v165 = *((_QWORD *)v146 - 1);
            v146 -= 8;
            *--v156 = v165;
          }
          while (v146 != v149);
        }
        v146 = *v16;
        goto LABEL_196;
      }
      v155 = 0;
      v156 = (_QWORD *)(8 * v151);
      *(_QWORD *)(8 * v151) = v145;
      v148 = 8 * v151 + 8;
      if (v146 != v149)
        goto LABEL_189;
LABEL_196:
      *(_QWORD *)(a1 + 1992) = v156;
      *(_QWORD *)(a1 + 2000) = v148;
      *(_QWORD *)(a1 + 2008) = &v155[8 * v154];
      if (v146)
        operator delete(v146);
LABEL_198:
      *(_QWORD *)(a1 + 2000) = v148;
      v166 = *(unsigned int *)(a1 + 52);
      v167 = (void *)operator new[]();
      v168 = v167;
      if ((int)v166 >= 1)
        bzero(v167, 4 * v166);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v92) = v168;
      v169 = *(char **)(a1 + 2000);
      v170 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v169 < v170)
      {
        *(_QWORD *)v169 = v168;
        v171 = (uint64_t)(v169 + 8);
        goto LABEL_222;
      }
      v172 = *v16;
      v173 = v169 - *v16;
      v174 = v173 >> 3;
      v175 = (v173 >> 3) + 1;
      if (v175 >> 61)
        goto LABEL_543;
      v176 = v170 - (_QWORD)v172;
      if (v176 >> 2 > v175)
        v175 = v176 >> 2;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
        v177 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        if (v177 >> 61)
          goto LABEL_544;
        v178 = operator new(8 * v177);
        v179 = &v178[8 * v174];
        *v179 = v168;
        v171 = (uint64_t)(v179 + 1);
        if (v169 == v172)
          goto LABEL_220;
LABEL_213:
        v180 = v169 - 8 - v172;
        if (v180 < 0x58)
          goto LABEL_561;
        if ((unint64_t)(v169 - &v178[v173]) < 0x20)
          goto LABEL_561;
        v181 = (v180 >> 3) + 1;
        v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
        v183 = &v169[-v182];
        v179 = (_QWORD *)((char *)v179 - v182);
        v184 = &v178[8 * v174 - 16];
        v185 = v169 - 16;
        v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v187 = *(_OWORD *)v185;
          *(v184 - 1) = *((_OWORD *)v185 - 1);
          *v184 = v187;
          v184 -= 2;
          v185 -= 32;
          v186 -= 4;
        }
        while (v186);
        v169 = v183;
        if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_561:
          do
          {
            v188 = *((_QWORD *)v169 - 1);
            v169 -= 8;
            *--v179 = v188;
          }
          while (v169 != v172);
        }
        v169 = *v16;
        goto LABEL_220;
      }
      v178 = 0;
      v179 = (_QWORD *)(8 * v174);
      *(_QWORD *)(8 * v174) = v168;
      v171 = 8 * v174 + 8;
      if (v169 != v172)
        goto LABEL_213;
LABEL_220:
      *(_QWORD *)(a1 + 1992) = v179;
      *(_QWORD *)(a1 + 2000) = v171;
      *(_QWORD *)(a1 + 2008) = &v178[8 * v177];
      if (v169)
        operator delete(v169);
LABEL_222:
      *(_QWORD *)(a1 + 2000) = v171;
      v189 = *(unsigned int *)(a1 + 52);
      v190 = (void *)operator new[]();
      v191 = v190;
      if ((int)v189 >= 1)
        bzero(v190, 4 * v189);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v92) = v191;
      v192 = *(char **)(a1 + 2000);
      v193 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v192 < v193)
      {
        *(_QWORD *)v192 = v191;
        v194 = (uint64_t)(v192 + 8);
        goto LABEL_246;
      }
      v195 = *v16;
      v196 = v192 - *v16;
      v197 = v196 >> 3;
      v198 = (v196 >> 3) + 1;
      if (v198 >> 61)
        goto LABEL_543;
      v199 = v193 - (_QWORD)v195;
      if (v199 >> 2 > v198)
        v198 = v199 >> 2;
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
        v200 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v200 = v198;
      if (v200)
      {
        if (v200 >> 61)
          goto LABEL_544;
        v201 = operator new(8 * v200);
        v202 = &v201[8 * v197];
        *v202 = v191;
        v194 = (uint64_t)(v202 + 1);
        if (v192 == v195)
          goto LABEL_244;
LABEL_237:
        v203 = v192 - 8 - v195;
        if (v203 < 0x58)
          goto LABEL_562;
        if ((unint64_t)(v192 - &v201[v196]) < 0x20)
          goto LABEL_562;
        v204 = (v203 >> 3) + 1;
        v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
        v206 = &v192[-v205];
        v202 = (_QWORD *)((char *)v202 - v205);
        v207 = &v201[8 * v197 - 16];
        v208 = v192 - 16;
        v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v210 = *(_OWORD *)v208;
          *(v207 - 1) = *((_OWORD *)v208 - 1);
          *v207 = v210;
          v207 -= 2;
          v208 -= 32;
          v209 -= 4;
        }
        while (v209);
        v192 = v206;
        if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_562:
          do
          {
            v211 = *((_QWORD *)v192 - 1);
            v192 -= 8;
            *--v202 = v211;
          }
          while (v192 != v195);
        }
        v192 = *v16;
        goto LABEL_244;
      }
      v201 = 0;
      v202 = (_QWORD *)(8 * v197);
      *(_QWORD *)(8 * v197) = v191;
      v194 = 8 * v197 + 8;
      if (v192 != v195)
        goto LABEL_237;
LABEL_244:
      *(_QWORD *)(a1 + 1992) = v202;
      *(_QWORD *)(a1 + 2000) = v194;
      *(_QWORD *)(a1 + 2008) = &v201[8 * v200];
      if (v192)
        operator delete(v192);
LABEL_246:
      *(_QWORD *)(a1 + 2000) = v194;
      v212 = *(unsigned int *)(a1 + 52);
      v213 = (void *)operator new[]();
      v214 = v213;
      if ((int)v212 >= 1)
        bzero(v213, 4 * v212);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v92) = v214;
      v215 = *(char **)(a1 + 2000);
      v216 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v215 < v216)
      {
        *(_QWORD *)v215 = v214;
        v217 = (uint64_t)(v215 + 8);
        goto LABEL_270;
      }
      v218 = *v16;
      v219 = v215 - *v16;
      v220 = v219 >> 3;
      v221 = (v219 >> 3) + 1;
      if (v221 >> 61)
        goto LABEL_543;
      v222 = v216 - (_QWORD)v218;
      if (v222 >> 2 > v221)
        v221 = v222 >> 2;
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
        v223 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v223 = v221;
      if (v223)
      {
        if (v223 >> 61)
          goto LABEL_544;
        v224 = operator new(8 * v223);
        v225 = &v224[8 * v220];
        *v225 = v214;
        v217 = (uint64_t)(v225 + 1);
        if (v215 == v218)
          goto LABEL_268;
LABEL_261:
        v226 = v215 - 8 - v218;
        if (v226 < 0x58)
          goto LABEL_563;
        if ((unint64_t)(v215 - &v224[v219]) < 0x20)
          goto LABEL_563;
        v227 = (v226 >> 3) + 1;
        v228 = 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
        v229 = &v215[-v228];
        v225 = (_QWORD *)((char *)v225 - v228);
        v230 = &v224[8 * v220 - 16];
        v231 = v215 - 16;
        v232 = v227 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v233 = *(_OWORD *)v231;
          *(v230 - 1) = *((_OWORD *)v231 - 1);
          *v230 = v233;
          v230 -= 2;
          v231 -= 32;
          v232 -= 4;
        }
        while (v232);
        v215 = v229;
        if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_563:
          do
          {
            v234 = *((_QWORD *)v215 - 1);
            v215 -= 8;
            *--v225 = v234;
          }
          while (v215 != v218);
        }
        v215 = *v16;
        goto LABEL_268;
      }
      v224 = 0;
      v225 = (_QWORD *)(8 * v220);
      *(_QWORD *)(8 * v220) = v214;
      v217 = 8 * v220 + 8;
      if (v215 != v218)
        goto LABEL_261;
LABEL_268:
      *(_QWORD *)(a1 + 1992) = v225;
      *(_QWORD *)(a1 + 2000) = v217;
      *(_QWORD *)(a1 + 2008) = &v224[8 * v223];
      if (v215)
        operator delete(v215);
LABEL_270:
      *(_QWORD *)(a1 + 2000) = v217;
      v235 = *(unsigned int *)(a1 + 52);
      v236 = (void *)operator new[]();
      v237 = v236;
      if ((int)v235 >= 1)
        bzero(v236, 4 * v235);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v92) = v237;
      v238 = *(char **)(a1 + 2000);
      v239 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v238 < v239)
      {
        *(_QWORD *)v238 = v237;
        v240 = (uint64_t)(v238 + 8);
        goto LABEL_294;
      }
      v241 = *v16;
      v242 = v238 - *v16;
      v243 = v242 >> 3;
      v244 = (v242 >> 3) + 1;
      if (v244 >> 61)
        goto LABEL_543;
      v245 = v239 - (_QWORD)v241;
      if (v245 >> 2 > v244)
        v244 = v245 >> 2;
      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
        v246 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v246 = v244;
      if (v246)
      {
        if (v246 >> 61)
          goto LABEL_544;
        v247 = operator new(8 * v246);
        v248 = &v247[8 * v243];
        *v248 = v237;
        v240 = (uint64_t)(v248 + 1);
        if (v238 == v241)
          goto LABEL_292;
LABEL_285:
        v249 = v238 - 8 - v241;
        if (v249 < 0x58)
          goto LABEL_564;
        if ((unint64_t)(v238 - &v247[v242]) < 0x20)
          goto LABEL_564;
        v250 = (v249 >> 3) + 1;
        v251 = 8 * (v250 & 0x3FFFFFFFFFFFFFFCLL);
        v252 = &v238[-v251];
        v248 = (_QWORD *)((char *)v248 - v251);
        v253 = &v247[8 * v243 - 16];
        v254 = v238 - 16;
        v255 = v250 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v256 = *(_OWORD *)v254;
          *(v253 - 1) = *((_OWORD *)v254 - 1);
          *v253 = v256;
          v253 -= 2;
          v254 -= 32;
          v255 -= 4;
        }
        while (v255);
        v238 = v252;
        if (v250 != (v250 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_564:
          do
          {
            v257 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v248 = v257;
          }
          while (v238 != v241);
        }
        v238 = *v16;
        goto LABEL_292;
      }
      v247 = 0;
      v248 = (_QWORD *)(8 * v243);
      *(_QWORD *)(8 * v243) = v237;
      v240 = 8 * v243 + 8;
      if (v238 != v241)
        goto LABEL_285;
LABEL_292:
      *(_QWORD *)(a1 + 1992) = v248;
      *(_QWORD *)(a1 + 2000) = v240;
      *(_QWORD *)(a1 + 2008) = &v247[8 * v246];
      if (v238)
        operator delete(v238);
LABEL_294:
      *(_QWORD *)(a1 + 2000) = v240;
      v258 = *(unsigned int *)(a1 + 52);
      v259 = (void *)operator new[]();
      v260 = v259;
      if ((int)v258 >= 1)
        bzero(v259, 4 * v258);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v92) = v260;
      v261 = *(char **)(a1 + 2000);
      v262 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v261 < v262)
      {
        *(_QWORD *)v261 = v260;
        v263 = (uint64_t)(v261 + 8);
        goto LABEL_318;
      }
      v264 = *v16;
      v265 = v261 - *v16;
      v266 = v265 >> 3;
      v267 = (v265 >> 3) + 1;
      if (v267 >> 61)
        goto LABEL_543;
      v268 = v262 - (_QWORD)v264;
      if (v268 >> 2 > v267)
        v267 = v268 >> 2;
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
        v269 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v269 = v267;
      if (v269)
      {
        if (v269 >> 61)
          goto LABEL_544;
        v270 = operator new(8 * v269);
        v271 = &v270[8 * v266];
        *v271 = v260;
        v263 = (uint64_t)(v271 + 1);
        if (v261 == v264)
          goto LABEL_316;
LABEL_309:
        v272 = v261 - 8 - v264;
        if (v272 < 0x58)
          goto LABEL_565;
        if ((unint64_t)(v261 - &v270[v265]) < 0x20)
          goto LABEL_565;
        v273 = (v272 >> 3) + 1;
        v274 = 8 * (v273 & 0x3FFFFFFFFFFFFFFCLL);
        v275 = &v261[-v274];
        v271 = (_QWORD *)((char *)v271 - v274);
        v276 = &v270[8 * v266 - 16];
        v277 = v261 - 16;
        v278 = v273 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v279 = *(_OWORD *)v277;
          *(v276 - 1) = *((_OWORD *)v277 - 1);
          *v276 = v279;
          v276 -= 2;
          v277 -= 32;
          v278 -= 4;
        }
        while (v278);
        v261 = v275;
        if (v273 != (v273 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_565:
          do
          {
            v280 = *((_QWORD *)v261 - 1);
            v261 -= 8;
            *--v271 = v280;
          }
          while (v261 != v264);
        }
        v261 = *v16;
        goto LABEL_316;
      }
      v270 = 0;
      v271 = (_QWORD *)(8 * v266);
      *(_QWORD *)(8 * v266) = v260;
      v263 = 8 * v266 + 8;
      if (v261 != v264)
        goto LABEL_309;
LABEL_316:
      *(_QWORD *)(a1 + 1992) = v271;
      *(_QWORD *)(a1 + 2000) = v263;
      *(_QWORD *)(a1 + 2008) = &v270[8 * v269];
      if (v261)
        operator delete(v261);
LABEL_318:
      *(_QWORD *)(a1 + 2000) = v263;
      v281 = *(unsigned int *)(a1 + 52);
      v282 = (void *)operator new[]();
      v283 = v282;
      if ((int)v281 >= 1)
        bzero(v282, 4 * v281);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v92) = v283;
      v284 = *(char **)(a1 + 2000);
      v285 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v284 >= v285)
      {
        v286 = *v16;
        v287 = v284 - *v16;
        v288 = v287 >> 3;
        v289 = (v287 >> 3) + 1;
        if (v289 >> 61)
          goto LABEL_543;
        v290 = v285 - (_QWORD)v286;
        if (v290 >> 2 > v289)
          v289 = v290 >> 2;
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v289;
        if (v291)
        {
          if (v291 >> 61)
            goto LABEL_544;
          v292 = operator new(8 * v291);
          v293 = &v292[8 * v288];
          *v293 = v283;
          v93 = (uint64_t)(v293 + 1);
          if (v284 == v286)
            goto LABEL_339;
LABEL_332:
          v294 = v284 - 8 - v286;
          if (v294 < 0x58)
            goto LABEL_566;
          if ((unint64_t)(v284 - &v292[v287]) < 0x20)
            goto LABEL_566;
          v295 = (v294 >> 3) + 1;
          v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
          v297 = &v284[-v296];
          v293 = (_QWORD *)((char *)v293 - v296);
          v298 = &v292[8 * v288 - 16];
          v299 = v284 - 16;
          v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            *v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          v284 = v297;
          if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_566:
            do
            {
              v302 = *((_QWORD *)v284 - 1);
              v284 -= 8;
              *--v293 = v302;
            }
            while (v284 != v286);
          }
          v284 = *v16;
        }
        else
        {
          v292 = 0;
          v293 = (_QWORD *)(8 * v288);
          *(_QWORD *)(8 * v288) = v283;
          v93 = 8 * v288 + 8;
          if (v284 != v286)
            goto LABEL_332;
        }
LABEL_339:
        *(_QWORD *)(a1 + 1992) = v293;
        *(_QWORD *)(a1 + 2000) = v93;
        *(_QWORD *)(a1 + 2008) = &v292[8 * v291];
        if (v284)
          operator delete(v284);
        goto LABEL_119;
      }
      *(_QWORD *)v284 = v283;
      v93 = (uint64_t)(v284 + 8);
LABEL_119:
      *(_QWORD *)(a1 + 2000) = v93;
      if (++v92 >= dword_1EE418968)
        return;
    }
    if (v105 >> 61)
      goto LABEL_544;
    v106 = operator new(8 * v105);
    v107 = &v106[8 * v102];
    *v107 = v96;
    v99 = (uint64_t)(v107 + 1);
    if (v97 == v100)
      goto LABEL_142;
LABEL_135:
    v108 = v97 - 8 - v100;
    if (v108 < 0x58)
      goto LABEL_567;
    if ((unint64_t)(v97 - &v106[v101]) < 0x20)
      goto LABEL_567;
    v109 = (v108 >> 3) + 1;
    v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
    v111 = &v97[-v110];
    v107 = (_QWORD *)((char *)v107 - v110);
    v112 = &v106[8 * v102 - 16];
    v113 = v97 - 16;
    v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v115 = *(_OWORD *)v113;
      *(v112 - 1) = *((_OWORD *)v113 - 1);
      *v112 = v115;
      v112 -= 2;
      v113 -= 32;
      v114 -= 4;
    }
    while (v114);
    v97 = v111;
    if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_567:
      do
      {
        v116 = *((_QWORD *)v97 - 1);
        v97 -= 8;
        *--v107 = v116;
      }
      while (v97 != v100);
    }
    v97 = *v16;
    goto LABEL_142;
  }
}

void sub_19C15B9E0()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C15B9F0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19C15B9F8(uint64_t a1)
{
  return a1 + 112;
}

void sub_19C15BA00()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C15BA10(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19C15BA18()
{
  return 0;
}

_BYTE *sub_19C15BA20(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 312);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1985);
  v24 = sub_19C2210A4();
  sub_19C101DB0(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(_BYTE **)(a1 + 304);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1985);
  v28 = sub_19C2210A4();
  sub_19C101DB0(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v29 = *(_BYTE **)(a1 + 320);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1985);
  v32 = sub_19C2210A4();
  sub_19C101DB0(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v33 = *(_BYTE **)(a1 + 336);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1985);
  v36 = sub_19C2210A4();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v37 = *(_BYTE **)(a1 + 328);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1985);
  v40 = sub_19C2210A4();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v41 = *(_BYTE **)(a1 + 344);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1985);
  v44 = sub_19C2210A4();
  return sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C15BCA0(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  void **v11;
  int v12;
  void **v13;
  int v14;
  void **v15;
  int v16;
  void **v17;
  int v18;
  void **v19;
  int v20;
  void **v21;
  int v22;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(void ***)(a1 + 312);
  v12 = sub_19C2210A4();
  sub_19C14FD4C(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v13 = *(void ***)(a1 + 304);
  v14 = sub_19C2210A4();
  sub_19C14FD4C(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v15 = *(void ***)(a1 + 320);
  v16 = sub_19C2210A4();
  sub_19C14FD4C(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v17 = *(void ***)(a1 + 336);
  v18 = sub_19C2210A4();
  sub_19C14FD4C(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v19 = *(void ***)(a1 + 328);
  v20 = sub_19C2210A4();
  sub_19C14FD4C(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v21 = *(void ***)(a1 + 344);
  v22 = sub_19C2210A4();
  sub_19C14FD4C(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

float32_t sub_19C15BE8C(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  float32x4_t v6;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  uint64_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  __int32 *v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t *v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  float32x4_t *v96;
  float32x4_t *v97;
  float32x4_t *v98;
  uint64_t v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  uint64_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  __int32 *v107;
  float *v108;
  float *v109;
  float v110;
  float v111;
  float v112;

  if (lpsrc)
  {
    v5 = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 52);
    v9 = (*(_DWORD *)(a1 + 48) * v8);
    if ((int)v9 < 1)
      goto LABEL_34;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v7 = (_QWORD **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v9 < 1)
    goto LABEL_34;
LABEL_7:
  v10 = (float32x4_t *)*v7[39];
  v11 = (float32x4_t *)*v5[39];
  v12 = **(float32x4_t ***)(a1 + 312);
  if (v9 < 8)
  {
    v13 = 0;
LABEL_14:
    v19 = v9 - v13;
    v20 = v13;
    v21 = &v12->f32[v20];
    v22 = &v11->f32[v20];
    v23 = &v10->f32[v20];
    do
    {
      v24 = *v23++;
      v25 = v24;
      v26 = *v22++;
      *v21++ = v25 - v26;
      --v19;
    }
    while (v19);
    goto LABEL_16;
  }
  v13 = 0;
  if ((unint64_t)((char *)v12 - (char *)v10) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v12 - (char *)v11) < 0x20)
    goto LABEL_14;
  v13 = v9 & 0x7FFFFFF8;
  v14 = v10 + 1;
  v15 = v11 + 1;
  v16 = v12 + 1;
  v17 = v9 & 0xFFFFFFF8;
  do
  {
    v18 = vsubq_f32(*v14, *v15);
    v16[-1] = vsubq_f32(v14[-1], v15[-1]);
    *v16 = v18;
    v14 += 2;
    v15 += 2;
    v16 += 2;
    v17 -= 8;
  }
  while (v17);
  if (v13 != v9)
    goto LABEL_14;
LABEL_16:
  v27 = (float32x4_t *)*v7[40];
  v28 = (float32x4_t *)*v5[40];
  v29 = **(float32x4_t ***)(a1 + 320);
  if (v9 < 8)
  {
    v30 = 0;
LABEL_23:
    v36 = v9 - v30;
    v37 = v30;
    v38 = &v29->f32[v37];
    v39 = &v28->f32[v37];
    v40 = &v27->f32[v37];
    do
    {
      v41 = *v40++;
      v42 = v41;
      v43 = *v39++;
      *v38++ = v42 - v43;
      --v36;
    }
    while (v36);
    goto LABEL_25;
  }
  v30 = 0;
  if ((unint64_t)((char *)v29 - (char *)v27) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)v29 - (char *)v28) < 0x20)
    goto LABEL_23;
  v30 = v9 & 0x7FFFFFF8;
  v31 = v27 + 1;
  v32 = v28 + 1;
  v33 = v29 + 1;
  v34 = v9 & 0xFFFFFFF8;
  do
  {
    v35 = vsubq_f32(*v31, *v32);
    v33[-1] = vsubq_f32(v31[-1], v32[-1]);
    *v33 = v35;
    v31 += 2;
    v32 += 2;
    v33 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v9)
    goto LABEL_23;
LABEL_25:
  v44 = (float32x4_t *)*v7[38];
  v45 = (float32x4_t *)*v5[38];
  v46 = **(float32x4_t ***)(a1 + 304);
  if (v9 < 8)
  {
    v47 = 0;
LABEL_32:
    v53 = v9 - v47;
    v54 = v47;
    v55 = (__int32 *)((char *)v46 + v54 * 4);
    v56 = &v45->f32[v54];
    v57 = &v44->f32[v54];
    do
    {
      v58 = *v57++;
      v59 = v58;
      v60 = *v56++;
      v6.f32[0] = v59 - v60;
      *v55++ = v6.i32[0];
      --v53;
    }
    while (v53);
    goto LABEL_34;
  }
  v47 = 0;
  if ((unint64_t)((char *)v46 - (char *)v44) < 0x20)
    goto LABEL_32;
  if ((unint64_t)((char *)v46 - (char *)v45) < 0x20)
    goto LABEL_32;
  v47 = v9 & 0x7FFFFFF8;
  v48 = v44 + 1;
  v49 = v45 + 1;
  v50 = v46 + 1;
  v51 = v9 & 0xFFFFFFF8;
  do
  {
    v6 = vsubq_f32(v48[-1], v49[-1]);
    v52 = vsubq_f32(*v48, *v49);
    v50[-1] = v6;
    *v50 = v52;
    v48 += 2;
    v49 += 2;
    v50 += 2;
    v51 -= 8;
  }
  while (v51);
  if (v47 != v9)
    goto LABEL_32;
LABEL_34:
  if (!v8)
    return v6.f32[0];
  v61 = (v8 * v8);
  v62 = (float32x4_t *)*v7[42];
  v63 = (float32x4_t *)*v5[42];
  v64 = **(float32x4_t ***)(a1 + 336);
  if (v61 < 8)
  {
    v65 = 0;
LABEL_42:
    v71 = v61 - v65;
    v72 = v65;
    v73 = &v64->f32[v72];
    v74 = &v63->f32[v72];
    v75 = &v62->f32[v72];
    do
    {
      v76 = *v75++;
      v77 = v76;
      v78 = *v74++;
      *v73++ = v77 - v78;
      --v71;
    }
    while (v71);
    goto LABEL_44;
  }
  v65 = 0;
  if ((unint64_t)((char *)v64 - (char *)v62) < 0x20)
    goto LABEL_42;
  if ((unint64_t)((char *)v64 - (char *)v63) < 0x20)
    goto LABEL_42;
  v65 = v61 & 0x7FFFFFF8;
  v66 = v62 + 1;
  v67 = v63 + 1;
  v68 = v64 + 1;
  v69 = v65;
  do
  {
    v70 = vsubq_f32(*v66, *v67);
    v68[-1] = vsubq_f32(v66[-1], v67[-1]);
    *v68 = v70;
    v66 += 2;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v65 != v61)
    goto LABEL_42;
LABEL_44:
  v79 = (float32x4_t *)*v7[43];
  v80 = (float32x4_t *)*v5[43];
  v81 = **(float32x4_t ***)(a1 + 344);
  if (v61 < 8)
  {
    v82 = 0;
LABEL_51:
    v88 = v61 - v82;
    v89 = v82;
    v90 = &v81->f32[v89];
    v91 = &v80->f32[v89];
    v92 = &v79->f32[v89];
    do
    {
      v93 = *v92++;
      v94 = v93;
      v95 = *v91++;
      *v90++ = v94 - v95;
      --v88;
    }
    while (v88);
    goto LABEL_53;
  }
  v82 = 0;
  if ((unint64_t)((char *)v81 - (char *)v79) < 0x20)
    goto LABEL_51;
  if ((unint64_t)((char *)v81 - (char *)v80) < 0x20)
    goto LABEL_51;
  v82 = v61 & 0x7FFFFFF8;
  v83 = v79 + 1;
  v84 = v80 + 1;
  v85 = v81 + 1;
  v86 = v82;
  do
  {
    v87 = vsubq_f32(*v83, *v84);
    v85[-1] = vsubq_f32(v83[-1], v84[-1]);
    *v85 = v87;
    v83 += 2;
    v84 += 2;
    v85 += 2;
    v86 -= 8;
  }
  while (v86);
  if (v82 != v61)
    goto LABEL_51;
LABEL_53:
  v96 = (float32x4_t *)*v7[41];
  v97 = (float32x4_t *)*v5[41];
  v98 = **(float32x4_t ***)(a1 + 328);
  if (v61 < 8)
  {
    v99 = 0;
LABEL_60:
    v105 = v61 - v99;
    v106 = v99;
    v107 = (__int32 *)((char *)v98 + v106 * 4);
    v108 = &v97->f32[v106];
    v109 = &v96->f32[v106];
    do
    {
      v110 = *v109++;
      v111 = v110;
      v112 = *v108++;
      v6.f32[0] = v111 - v112;
      *v107++ = v6.i32[0];
      --v105;
    }
    while (v105);
    return v6.f32[0];
  }
  v99 = 0;
  if ((unint64_t)((char *)v98 - (char *)v96) < 0x20)
    goto LABEL_60;
  if ((unint64_t)((char *)v98 - (char *)v97) < 0x20)
    goto LABEL_60;
  v99 = v61 & 0x7FFFFFF8;
  v100 = v96 + 1;
  v101 = v97 + 1;
  v102 = v98 + 1;
  v103 = v99;
  do
  {
    v6 = vsubq_f32(v100[-1], v101[-1]);
    v104 = vsubq_f32(*v100, *v101);
    v102[-1] = v6;
    *v102 = v104;
    v100 += 2;
    v101 += 2;
    v102 += 2;
    v103 -= 8;
  }
  while (v103);
  if (v99 != v61)
    goto LABEL_60;
  return v6.f32[0];
}

void *sub_19C15C36C(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  return result;
}

void sub_19C15C3D4(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  const float **v4;
  const float **v5;
  vDSP_Length v6;
  const float **v7;
  const float **v8;
  vDSP_Length v9;
  const float **v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  const float **v14;
  vDSP_Length v15;
  const float **v16;
  const float **v17;
  vDSP_Length v18;
  const float **v19;
  const float **v20;
  vDSP_Length v21;
  float __B;

  if (lpsrc)
    v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  else
    v3 = 0;
  v4 = *(const float ***)(a1 + 312);
  v5 = (const float **)v3[39];
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 304);
  v8 = (const float **)v3[38];
  v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  v10 = *(const float ***)(a1 + 320);
  v11 = (const float **)v3[40];
  v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  v13 = *(const float ***)(a1 + 336);
  v14 = (const float **)v3[42];
  v15 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  v16 = *(const float ***)(a1 + 328);
  v17 = (const float **)v3[41];
  v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  v19 = *(const float ***)(a1 + 344);
  v20 = (const float **)v3[43];
  v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
}

void sub_19C15C56C(uint64_t a1, void *lpsrc)
{
  void *v3;
  float v4;
  const float **v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  float __C;
  float __B;

  if (lpsrc)
    v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  else
    v3 = 0;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 1128) + 64))(*(_QWORD *)(a1 + 1128));
  (***(void (****)(_QWORD, _QWORD, uint64_t))(a1 + 1128))(*(_QWORD *)(a1 + 1128), *(_QWORD *)(a1 + 304), (uint64_t)v3 + 232);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1120))(*(_QWORD *)(a1 + 1120), *(_QWORD *)(a1 + 312), (uint64_t)v3 + 240, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1136))(*(_QWORD *)(a1 + 1136), *(_QWORD *)(a1 + 320), (uint64_t)v3 + 248, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1152))(*(_QWORD *)(a1 + 1152), *(_QWORD *)(a1 + 328), (uint64_t)v3 + 256, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1144))(*(_QWORD *)(a1 + 1144), *(_QWORD *)(a1 + 336), (uint64_t)v3 + 264, v4);
  (***(void (****)(_QWORD, _QWORD, uint64_t, float))(a1 + 1160))(*(_QWORD *)(a1 + 1160), *(_QWORD *)(a1 + 344), (uint64_t)v3 + 272, v4);
  v5 = *(const float ***)(a1 + 304);
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v5, 1, &__B, &__C, (float *)*v5, 1, v6);
  v7 = *(const float ***)(a1 + 312);
  v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 320);
  v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 328);
  v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 336);
  v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 344);
  v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = 2.0;
  __B = -2.0;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

void sub_19C15C798(uint64_t a1, float a2)
{
  const float **v4;
  float v5;
  vDSP_Length v6;
  const float **v7;
  vDSP_Length v8;
  const float **v9;
  vDSP_Length v10;
  const float **v11;
  vDSP_Length v12;
  const float **v13;
  vDSP_Length v14;
  const float **v15;
  vDSP_Length v16;
  float __C;
  float __B;

  v4 = *(const float ***)(a1 + 312);
  v5 = -a2;
  v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  v7 = *(const float ***)(a1 + 304);
  v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  v9 = *(const float ***)(a1 + 320);
  v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  __C = a2;
  __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  v11 = *(const float ***)(a1 + 336);
  v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  v13 = *(const float ***)(a1 + 328);
  v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  v15 = *(const float ***)(a1 + 344);
  v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  __C = a2;
  __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

uint64_t sub_19C15C8D4(uint64_t result, float a2)
{
  int v2;
  uint64_t v3;
  float32x4_t *v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  float *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  uint64_t v37;
  float *v38;
  float32x4_t *v39;
  uint64_t v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float *v45;

  v2 = *(_DWORD *)(result + 52);
  v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 < 1)
    goto LABEL_23;
  v4 = **(float32x4_t ***)(result + 312);
  if (v3 < 8)
  {
    v5 = 0;
LABEL_7:
    v9 = v3 - v5;
    v10 = &v4->f32[v5];
    do
    {
      *v10 = *v10 * a2;
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_9;
  }
  v5 = v3 & 0x7FFFFFF8;
  v6 = v4 + 1;
  v7 = v3 & 0xFFFFFFF8;
  do
  {
    v8 = vmulq_n_f32(*v6, a2);
    v6[-1] = vmulq_n_f32(v6[-1], a2);
    *v6 = v8;
    v6 += 2;
    v7 -= 8;
  }
  while (v7);
  if (v5 != v3)
    goto LABEL_7;
LABEL_9:
  if (v3 >= 8)
  {
    v11 = v3 & 0x7FFFFFF8;
    v12 = v4 + 1;
    v13 = v3 & 0xFFFFFFF8;
    do
    {
      v14 = vmulq_n_f32(*v12, a2);
      v12[-1] = vmulq_n_f32(v12[-1], a2);
      *v12 = v14;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v11 == v3)
      goto LABEL_16;
  }
  else
  {
    v11 = 0;
  }
  v15 = v3 - v11;
  v16 = &v4->f32[v11];
  do
  {
    *v16 = *v16 * a2;
    ++v16;
    --v15;
  }
  while (v15);
LABEL_16:
  v17 = **(float32x4_t ***)(result + 320);
  if (v3 < 8)
  {
    v18 = 0;
LABEL_21:
    v22 = v3 - v18;
    v23 = &v17->f32[v18];
    do
    {
      *v23 = *v23 * a2;
      ++v23;
      --v22;
    }
    while (v22);
    goto LABEL_23;
  }
  v18 = v3 & 0x7FFFFFF8;
  v19 = v17 + 1;
  v20 = v3 & 0xFFFFFFF8;
  do
  {
    v21 = vmulq_n_f32(*v19, a2);
    v19[-1] = vmulq_n_f32(v19[-1], a2);
    *v19 = v21;
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  if (v18 != v3)
    goto LABEL_21;
LABEL_23:
  if (!v2)
    return result;
  v24 = (v2 * v2);
  v25 = **(float32x4_t ***)(result + 336);
  if (v24 < 8)
  {
    v26 = 0;
LABEL_29:
    v30 = v24 - v26;
    v31 = &v25->f32[v26];
    do
    {
      *v31 = *v31 * a2;
      ++v31;
      --v30;
    }
    while (v30);
    goto LABEL_31;
  }
  v26 = v24 & 0x7FFFFFF8;
  v27 = v25 + 1;
  v28 = v26;
  do
  {
    v29 = vmulq_n_f32(*v27, a2);
    v27[-1] = vmulq_n_f32(v27[-1], a2);
    *v27 = v29;
    v27 += 2;
    v28 -= 8;
  }
  while (v28);
  if (v26 != v24)
    goto LABEL_29;
LABEL_31:
  v32 = **(float32x4_t ***)(result + 328);
  if (v24 < 8)
  {
    v33 = 0;
LABEL_36:
    v37 = v24 - v33;
    v38 = &v32->f32[v33];
    do
    {
      *v38 = *v38 * a2;
      ++v38;
      --v37;
    }
    while (v37);
    goto LABEL_38;
  }
  v33 = v24 & 0x7FFFFFF8;
  v34 = v32 + 1;
  v35 = v33;
  do
  {
    v36 = vmulq_n_f32(*v34, a2);
    v34[-1] = vmulq_n_f32(v34[-1], a2);
    *v34 = v36;
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v33 != v24)
    goto LABEL_36;
LABEL_38:
  v39 = **(float32x4_t ***)(result + 344);
  if (v24 < 8)
  {
    v40 = 0;
LABEL_43:
    v44 = v24 - v40;
    v45 = &v39->f32[v40];
    do
    {
      *v45 = *v45 * a2;
      ++v45;
      --v44;
    }
    while (v44);
    return result;
  }
  v40 = v24 & 0x7FFFFFF8;
  v41 = v39 + 1;
  v42 = v40;
  do
  {
    v43 = vmulq_n_f32(*v41, a2);
    v41[-1] = vmulq_n_f32(v41[-1], a2);
    *v41 = v43;
    v41 += 2;
    v42 -= 8;
  }
  while (v42);
  if (v40 != v24)
    goto LABEL_43;
  return result;
}

void sub_19C15CB40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 52);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = (char *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)*a2;
    v12 = (uint64_t)&v9[-*a2] >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      goto LABEL_40;
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        goto LABEL_41;
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = (char *)*a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
  v18 = (_QWORD *)operator new();
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  *v18 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  v21 = *(_DWORD *)(a1 + 52);
  v23 = (char *)a2[1];
  v22 = a2[2];
  if ((unint64_t)v23 < v22)
  {
    *(_DWORD *)v23 = v21;
    *((_QWORD *)v23 + 1) = v18;
    v24 = v23 + 16;
    goto LABEL_39;
  }
  v25 = (char *)*a2;
  v26 = (uint64_t)&v23[-*a2] >> 4;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60)
LABEL_40:
    sub_19C07DA0C();
  v28 = v22 - (_QWORD)v25;
  if (v28 >> 3 > v27)
    v27 = v28 >> 3;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
    v29 = 0xFFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (!v29)
  {
    v30 = 0;
    goto LABEL_34;
  }
  if (v29 >> 60)
LABEL_41:
    sub_19C07C7FC();
  v30 = (char *)operator new(16 * v29);
LABEL_34:
  v31 = &v30[16 * v26];
  *(_DWORD *)v31 = v21;
  *((_QWORD *)v31 + 1) = v18;
  v24 = v31 + 16;
  if (v23 != v25)
  {
    do
    {
      *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
      v31 -= 16;
      v23 -= 16;
    }
    while (v23 != v25);
    v23 = (char *)*a2;
  }
  *a2 = v31;
  a2[1] = v24;
  a2[2] = &v30[16 * v29];
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v24;
}

void sub_19C15CDE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C15CDF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C15CE0C(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v7 = *(int *)(a1 + 52);
  v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + v9), 4 * v7);
  v10 = *a4;
  *a4 = v10 + 1;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19C15CEB8(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a1 + 112);
  v8 = 8 * a3;
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + v8), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void sub_19C15CF44(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19C15CFB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];

  v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[140] + 16))(a1[140]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[141] + 16))(a1[141]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[142] + 16))(a1[142]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[143] + 16))(a1[143]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[144] + 16))(a1[144]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[145] + 16))(a1[145]);
  v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
  v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0)
    operator delete(*(void **)&v14[1]);
}

void sub_19C15D314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C15D35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;

  v4 = **(_QWORD **)(a1 + 304);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_74;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_75;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 312);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_74;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_75;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 320);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_74;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_75;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 328);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_74;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_75;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v58 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v59 = **(_QWORD **)(a1 + 336);
  v60 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *v49 = v59;
    v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  v62 = *(_QWORD **)a2;
  v63 = (uint64_t)v49 - *(_QWORD *)a2;
  v64 = (v63 >> 4) + 1;
  if (v64 >> 60)
    goto LABEL_74;
  v65 = v60 - (_QWORD)v62;
  if (v65 >> 3 > v64)
    v64 = v65 >> 3;
  v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v66 = v64;
  if (v66 >> 60)
LABEL_75:
    sub_19C07C7FC();
  v67 = 16 * v66;
  v68 = (char *)operator new(16 * v66);
  v69 = &v68[16 * (v63 >> 4)];
  *(_QWORD *)v69 = v59;
  v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((_QWORD *)v69 + 1) = v49[1])
  {
    v70 = *(v49 - 2);
    v49 -= 2;
    *((_QWORD *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(_QWORD *)a2 = v69;
  *(_QWORD *)(a2 + 8) = v61;
  *(_QWORD *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(_QWORD *)(a2 + 8) = v61;
  v71 = **(_QWORD **)(a1 + 344);
  v72 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *v61 = v71;
    v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  v74 = *(_QWORD **)a2;
  v75 = (uint64_t)v61 - *(_QWORD *)a2;
  v76 = (v75 >> 4) + 1;
  if (v76 >> 60)
LABEL_74:
    sub_19C07DA0C();
  v77 = v72 - (_QWORD)v74;
  if (v77 >> 3 > v76)
    v76 = v77 >> 3;
  v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v78 = v76;
  if (v78 >> 60)
    goto LABEL_75;
  v79 = 16 * v78;
  v80 = (char *)operator new(16 * v78);
  v81 = &v80[16 * (v75 >> 4)];
  *(_QWORD *)v81 = v71;
  v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((_QWORD *)v81 + 1) = v61[1])
  {
    v82 = *(v61 - 2);
    v61 -= 2;
    *((_QWORD *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(_QWORD *)a2 = v81;
  *(_QWORD *)(a2 + 8) = v73;
  *(_QWORD *)(a2 + 16) = &v80[v79];
  if (v74)
    operator delete(v74);
LABEL_73:
  *(_QWORD *)(a2 + 8) = v73;
}

uint64_t sub_19C15D84C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C15D858(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C15D860(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from allocAll");
  sub_19C1596DC(a1);
  operator delete(__p);
}

void sub_19C15D8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C15D900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;

  v2 = a1[250];
  v3 = a1[249];
  if (v2 == v3)
  {
    v3 = a1[250];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[250];
        v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[253];
  v7 = a1[252];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[253];
        v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    v10 = a1[102];
    v11 = a1[101];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  v10 = a1[102];
  v11 = a1[101];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[102];
      v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  v16 = a1[132];
  v17 = a1[131];
  if (v16 == v17)
  {
    v17 = a1[132];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[132];
        v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  v22 = a1[117];
  v23 = a1[116];
  if (v22 == v23)
  {
    v23 = a1[117];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[117];
        v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19C15DB00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C15DB08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void sub_19C15DB14(uint64_t a1, float a2)
{
  int v4;
  unsigned int v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float __B;

  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    __B = a2;
    v6 = (int)(v5 * v4);
    vDSP_vsma(*(const float **)(a1 + 1072), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1088), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1080), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
  }
  else
  {
    sub_19C15014C(a1 + 712, (uint64_t *)(a1 + 240), v5, v4, a2);
    sub_19C15014C(a1 + 952, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19C15014C(a1 + 832, (uint64_t *)(a1 + 232), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  v7 = v5 * v5;
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1096), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1112), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1104), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v7);
}

void sub_19C15DC98(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  float32x4_t **v6;
  int v7;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t v45;
  uint64_t v46;
  float *v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  int v68;
  uint64_t v69;
  char *v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x4_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v120;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  float32x4_t v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  float32x4_t *v146;
  float32x4_t *v147;
  int v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int v152;
  uint64_t v153;
  float32x4_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v160;
  uint64_t v161;
  float32x4_t *v162;
  float32x4_t *v163;
  float32x4_t v164;
  uint64_t v165;
  float *v166;
  float *v167;
  float v168;
  uint64_t *v169;
  int v170;
  float32x4_t *v171;
  float32x4_t *v172;
  float32x4_t *v173;
  uint64_t v174;
  float32x4_t v175;
  float32x4_t *v176;
  uint64_t v177;
  float32x4_t v178;
  uint64_t v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t *v183;
  float32x4_t *v184;
  float32x4_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t v197;
  uint64_t v198;
  float *v199;
  float *v200;
  float v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  float32x4_t *v205;
  float32x4_t *v206;
  int v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int v211;
  uint64_t v212;
  float32x4_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v219;
  uint64_t v220;
  float32x4_t *v221;
  float32x4_t *v222;
  float32x4_t v223;
  uint64_t v224;
  float *v225;
  float *v226;
  float v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  float32x4_t *v231;
  float32x4_t *v232;
  int v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v245;
  uint64_t v246;
  float32x4_t *v247;
  float32x4_t *v248;
  float32x4_t v249;
  uint64_t v250;
  float *v251;
  float *v252;
  float v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  float32x4_t *v257;
  float32x4_t *v258;
  int v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int v263;
  uint64_t v264;
  char *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v271;
  uint64_t v272;
  float32x4_t *v273;
  float32x4_t *v274;
  float32x4_t v275;
  uint64_t v276;
  float *v277;
  float *v278;
  float v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  NSObject *global_queue;
  uint64_t v286;
  uint64_t v287;
  size_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  size_t v292;
  uint64_t v293;
  int v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  NSObject *v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  size_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  size_t v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _BYTE *v321;
  _BYTE *v322;
  size_t v323;
  int v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  size_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 *v337;
  _OWORD *v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  _DWORD *v343;
  int *v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _BYTE *v349;
  _BYTE *v350;
  size_t v351;
  int v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 *v359;
  _OWORD *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  _DWORD *v365;
  int *v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _BYTE *v371;
  _BYTE *v372;
  size_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int128 *v379;
  _OWORD *v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  _DWORD *v385;
  int *v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  void **v393;
  int v394;
  uint64_t v395;
  void **v396;
  uint64_t v397;
  int v398;
  uint64_t block;
  uint64_t v400;
  void (*v401)(uint64_t, uint64_t);
  void *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;

  v398 = a5 - 1;
  if (a5 >= 1)
  {
    v396 = (void **)(a1 + 1168);
    v393 = (void **)(a1 + 1184);
    v6 = (float32x4_t **)(a1 + 1176);
    v7 = a5 - 1;
    while (1)
    {
      v9 = *(unsigned __int8 *)(a1 + 2040);
      if (*(_BYTE *)(a1 + 2040))
        v10 = v398 - v7;
      else
        v10 = v7;
      if (*(_BYTE *)(a1 + 2040))
        v11 = v10 < v398;
      else
        v11 = v10 > 0;
      if (*(_BYTE *)(a1 + 2040))
        v12 = v10 > 0;
      else
        v12 = v10 < v398;
      v13 = v10 - 1;
      if (*(_BYTE *)(a1 + 2040))
        v14 = v10 + 1;
      else
        v14 = v10 - 1;
      v394 = v14;
      memmove(*(void **)(*(_QWORD *)(a1 + 584) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      v15 = 8 * v10;
      if (v12)
      {
        if (!v9)
          v13 = v10 + 1;
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        cblas_sgemv_NEWLAPACK();
        v16 = *(_QWORD *)(a1 + 584);
        v17 = *(_QWORD *)(a1 + 472);
        v18 = *(int *)(a1 + 52);
        v19 = (int)v18 / 8;
        if ((int)v18 >= 8)
        {
          v20 = *(float32x4_t **)(v16 + 8 * v10);
          v21 = *(float32x4_t **)(v17 + 8 * v13);
          v22 = (int)v18 / 8;
          v23 = *(float32x4_t **)(a1 + 704);
          do
          {
            v25 = *v23;
            v24 = v23[1];
            v23 += 2;
            v27 = *v21;
            v26 = v21[1];
            v21 += 2;
            v28 = vmlaq_f32(v20[1], v26, v24);
            *v20 = vmlaq_f32(*v20, v27, v25);
            v20[1] = v28;
            v20 += 2;
            --v22;
          }
          while (v22);
        }
        v29 = 8 * v19;
        if (8 * v19 < (int)v18)
        {
          v30 = *(_QWORD *)(v17 + 8 * v13);
          v31 = *(_QWORD *)(a1 + 704);
          v32 = *(_QWORD *)(v16 + 8 * v10);
          v33 = v29;
          v34 = v18 - v29;
          if (v34 < 8)
            goto LABEL_39;
          v35 = 4 * v29;
          v36 = v32 + 4 * v18;
          v37 = v32 + v35 >= (unint64_t)(v30 + 4 * v18) || v30 + 4 * v29 >= v36;
          v38 = !v37;
          if (v31 + v35 < v36 && v32 + v35 < (unint64_t)(v31 + 4 * v18))
            goto LABEL_39;
          if (v38)
            goto LABEL_39;
          v40 = v34 - (v18 & 7) + v33;
          v41 = v33 + (v18 & 7) - v18;
          v42 = (float32x4_t *)(v32 + v35 + 16);
          v43 = (float32x4_t *)(v31 + v35 + 16);
          v44 = (float32x4_t *)(v30 + v35 + 16);
          do
          {
            v45 = vmlaq_f32(*v42, *v44, *v43);
            v42[-1] = vmlaq_f32(v42[-1], v44[-1], v43[-1]);
            *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 += 2;
            v41 += 8;
          }
          while (v41);
          v33 = v40;
          if ((v18 & 7) != 0)
          {
LABEL_39:
            v46 = v18 - v33;
            v47 = (float *)(v32 + 4 * v33);
            v48 = (float *)(v30 + 4 * v33);
            v49 = (float *)(v31 + 4 * v33);
            do
            {
              v50 = *v49++;
              v51 = v50;
              v52 = *v48++;
              *v47 = *v47 + (float)(v52 * v51);
              ++v47;
              --v46;
            }
            while (v46);
          }
        }
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      sub_19C102BD8(v396, (const void **)(*(_QWORD *)(a1 + 424) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19C102BD8(v393, (const void **)(*(_QWORD *)(a1 + 400) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19C102BD8((void **)(a1 + 1176), (const void **)(*(_QWORD *)(a1 + 376) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v10), 4 * *(int *)(a1 + 52));
      v53 = *(_QWORD *)(a1 + 608);
      v54 = *(unsigned int *)(a1 + 52);
      v55 = (int)v54;
      if ((int)v54 <= 0)
      {
        v74 = -8 * (-(int)v54 >> 3);
        if (v74 >= (int)v55)
          goto LABEL_61;
LABEL_53:
        v75 = *(_QWORD *)(v53 + 8 * v10);
        v76 = (char *)*v396;
        v77 = v74;
        v78 = v55 - v74;
        if (v78 < 8)
          goto LABEL_59;
        v79 = v75 + 4 * v74;
        v80 = (unint64_t)&v76[4 * v74];
        if (v79 < (unint64_t)&v76[4 * v55] && v80 < v75 + 4 * v55)
          goto LABEL_59;
        v81 = v78 - (v55 & 7) + v74;
        v82 = v74 + (unint64_t)(v55 & 7) - v55;
        v83 = (float32x4_t *)(v79 + 16);
        v84 = (float32x4_t *)(v80 + 16);
        do
        {
          v85 = vmulq_f32(*v84, *v83);
          v83[-1] = vmulq_f32(v84[-1], v83[-1]);
          *v83 = v85;
          v83 += 2;
          v84 += 2;
          v82 += 8;
        }
        while (v82);
        v77 = v81;
        if ((v55 & 7) != 0)
        {
LABEL_59:
          v86 = v55 - v77;
          v87 = (float *)&v76[4 * v77];
          v88 = (float *)(v75 + 4 * v77);
          do
          {
            v89 = *v87++;
            *v88 = v89 * *v88;
            ++v88;
            --v86;
          }
          while (v86);
        }
        goto LABEL_61;
      }
      v56 = *(float32x4_t **)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v57 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v10);
      v58 = *(_QWORD *)(v53 + 8 * v10);
      if (v54 < 8)
        break;
      v59 = 0;
      v118 = v58 + 4 * v54;
      v120 = v58 < (unint64_t)v57->u64 + 4 * v54 && (unint64_t)v57 < v118;
      if ((unint64_t)v56 < v118 && v58 < (unint64_t)v56->u64 + 4 * v54)
        goto LABEL_45;
      if (v120)
        goto LABEL_45;
      v59 = v54 & 0x7FFFFFF8;
      v122 = v56 + 1;
      v123 = v57 + 1;
      v124 = (float32x4_t *)(v58 + 16);
      v125 = v54 & 0xFFFFFFF8;
      do
      {
        v126 = vaddq_f32(vmlsq_f32(*v122, *v122, *v123), *v124);
        v124[-1] = vaddq_f32(vmlsq_f32(v122[-1], v122[-1], v123[-1]), v124[-1]);
        *v124 = v126;
        v122 += 2;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v59 != v54)
        goto LABEL_45;
LABEL_47:
      v68 = (int)v54 / 8;
      if ((int)v54 > 7)
      {
        v69 = 0;
        v70 = (char *)*v396;
        do
        {
          v71 = (float32x4_t *)(v58 + 32 * v69);
          v72 = (float32x4_t *)&v70[32 * v69];
          v73 = vmulq_f32(v72[1], v71[1]);
          *v71 = vmulq_f32(*v72, *v71);
          v71[1] = v73;
          ++v69;
        }
        while (v68 != (_DWORD)v69);
      }
      v74 = 8 * v68;
      if (8 * v68 < (int)v55)
        goto LABEL_53;
LABEL_61:
      v90 = *(_QWORD *)(a1 + 632);
      if (!v11)
      {
        memmove(*(void **)(v90 + 8 * v10), *(const void **)(*(_QWORD *)(a1 + 496) + 8 * v10), 4 * *(int *)(a1 + 52));
        v113 = *(_QWORD *)(a1 + 632);
        v114 = *(unsigned int *)(a1 + 52);
        v115 = (int)v114;
        if ((int)v114 <= 0)
        {
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = -(-(int)v114 >> 3);
        }
        else
        {
          v116 = *(float32x4_t **)(v113 + 8 * v10);
          if (v114 < 8)
          {
            v117 = 0;
            goto LABEL_129;
          }
          v117 = v114 & 0x7FFFFFF8;
          v176 = v116 + 1;
          v177 = v114 & 0xFFFFFFF8;
          do
          {
            v178 = vnegq_f32(*v176);
            v176[-1] = vnegq_f32(v176[-1]);
            *v176 = v178;
            v176 += 2;
            v177 -= 8;
          }
          while (v177);
          if (v117 != v114)
          {
LABEL_129:
            v179 = v114 - v117;
            v180 = &v116->f32[v117];
            do
            {
              *v180 = -*v180;
              ++v180;
              --v179;
            }
            while (v179);
          }
          v169 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
          v170 = (int)v114 / 8;
          if ((int)v114 > 7)
          {
            v181 = 0;
            v182 = *v169;
            do
            {
              v183 = &v116[2 * v181];
              v184 = (float32x4_t *)(v182 + 32 * v181);
              v185 = vmulq_f32(v183[1], v184[1]);
              *v183 = vmulq_f32(*v183, *v184);
              v183[1] = v185;
              ++v181;
            }
            while (v170 != (_DWORD)v181);
          }
        }
        v186 = 8 * v170;
        if (8 * v170 < (int)v115)
        {
          v187 = *v169;
          v188 = *(_QWORD *)(v113 + 8 * v10);
          v189 = v186;
          v190 = v115 - v186;
          if (v190 < 8)
            goto LABEL_141;
          v191 = v188 + 4 * v186;
          v192 = v187 + 4 * v186;
          if (v191 < v187 + 4 * v115 && v192 < v188 + 4 * v115)
            goto LABEL_141;
          v193 = v190 - (v115 & 7) + v186;
          v194 = v186 + (unint64_t)(v115 & 7) - v115;
          v195 = (float32x4_t *)(v192 + 16);
          v196 = (float32x4_t *)(v191 + 16);
          do
          {
            v197 = vmulq_f32(*v196, *v195);
            v196[-1] = vmulq_f32(v196[-1], v195[-1]);
            *v196 = v197;
            v195 += 2;
            v196 += 2;
            v194 += 8;
          }
          while (v194);
          v189 = v193;
          if ((v115 & 7) != 0)
          {
LABEL_141:
            v198 = v115 - v189;
            v199 = (float *)(v188 + 4 * v189);
            v200 = (float *)(v187 + 4 * v189);
            do
            {
              v201 = *v200++;
              *v199 = *v199 * v201;
              ++v199;
              --v198;
            }
            while (v198);
          }
        }
        v202 = *(_QWORD *)(a1 + 632);
        v203 = *(int *)(a1 + 52);
        v204 = (int)v203 / 8;
        if ((int)v203 >= 8)
        {
          v205 = *(float32x4_t **)(v202 + 8 * v10);
          v206 = *v6;
          v207 = (int)v203 / 8;
          do
          {
            v208 = *v206;
            v209 = v206[1];
            v206 += 2;
            v210 = vmulq_f32(v209, v205[1]);
            *v205 = vmulq_f32(v208, *v205);
            v205[1] = v210;
            v205 += 2;
            --v207;
          }
          while (v207);
        }
        v211 = 8 * v204;
        if (8 * v204 < (int)v203)
        {
          v212 = *(_QWORD *)(v202 + 8 * v10);
          v213 = *v6;
          v214 = v211;
          v215 = v203 - v211;
          if (v215 < 8)
            goto LABEL_156;
          v216 = v212 + 4 * v211;
          v217 = (unint64_t)&v213[v211 / 4u];
          if (v216 < (unint64_t)v213->u64 + 4 * v203 && v217 < v212 + 4 * v203)
            goto LABEL_156;
          v219 = v215 - (v203 & 7) + v211;
          v220 = v211 + (unint64_t)(v203 & 7) - v203;
          v221 = (float32x4_t *)(v216 + 16);
          v222 = (float32x4_t *)(v217 + 16);
          do
          {
            v223 = vmulq_f32(*v222, *v221);
            v221[-1] = vmulq_f32(v222[-1], v221[-1]);
            *v221 = v223;
            v221 += 2;
            v222 += 2;
            v220 += 8;
          }
          while (v220);
          v214 = v219;
          if ((v203 & 7) != 0)
          {
LABEL_156:
            v224 = v203 - v214;
            v225 = &v213->f32[v214];
            v226 = (float *)(v212 + 4 * v214);
            do
            {
              v227 = *v225++;
              *v226 = v227 * *v226;
              ++v226;
              --v224;
            }
            while (v224);
          }
        }
        goto LABEL_158;
      }
      v91 = *(unsigned int *)(a1 + 52);
      v92 = (int)v91;
      if ((int)v91 > 0)
      {
        v93 = *(float32x4_t **)(*(_QWORD *)(a1 + 112) + 8 * v394);
        v94 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v10);
        v95 = *(float32x4_t **)(v90 + 8 * v10);
        if (v91 < 8)
        {
          v96 = 0;
          goto LABEL_65;
        }
        v96 = 0;
        if ((unint64_t)((char *)v95 - (char *)v93) < 0x20)
          goto LABEL_65;
        if ((unint64_t)((char *)v95 - (char *)v94) < 0x20)
          goto LABEL_65;
        v96 = v91 & 0x7FFFFFF8;
        v171 = v93 + 1;
        v172 = v94 + 1;
        v173 = v95 + 1;
        v174 = v91 & 0xFFFFFFF8;
        do
        {
          v175 = vsubq_f32(*v171, *v172);
          v173[-1] = vsubq_f32(v171[-1], v172[-1]);
          *v173 = v175;
          v171 += 2;
          v172 += 2;
          v173 += 2;
          v174 -= 8;
        }
        while (v174);
        if (v96 != v91)
        {
LABEL_65:
          v97 = v91 - v96;
          v98 = v96;
          v99 = &v95->f32[v96];
          v100 = &v94->f32[v98];
          v101 = &v93->f32[v98];
          do
          {
            v102 = *v101++;
            v103 = v102;
            v104 = *v100++;
            *v99++ = v103 - v104;
            --v97;
          }
          while (v97);
        }
        v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
        v106 = (int)v91 / 8;
        if ((int)v91 > 7)
        {
          v107 = 0;
          v108 = *v105;
          do
          {
            v109 = &v95[2 * v107];
            v110 = (float32x4_t *)(v108 + 32 * v107);
            v111 = vmulq_f32(v109[1], v110[1]);
            *v109 = vmulq_f32(*v109, *v110);
            v109[1] = v111;
            ++v107;
          }
          while (v106 != (_DWORD)v107);
        }
        v112 = 8 * v106;
        if (8 * v106 >= (int)v92)
          goto LABEL_103;
LABEL_92:
        v127 = *v105;
        v128 = *(_QWORD *)(v90 + 8 * v10);
        v129 = v112;
        v130 = v92 - v112;
        if (v130 < 8)
          goto LABEL_101;
        v131 = v128 + 4 * v112;
        v132 = v127 + 4 * v112;
        if (v131 < v127 + 4 * v92 && v132 < v128 + 4 * v92)
          goto LABEL_101;
        v134 = v130 - (v92 & 7) + v112;
        v135 = v112 + (unint64_t)(v92 & 7) - v92;
        v136 = (float32x4_t *)(v132 + 16);
        v137 = (float32x4_t *)(v131 + 16);
        do
        {
          v138 = vmulq_f32(*v137, *v136);
          v137[-1] = vmulq_f32(v137[-1], v136[-1]);
          *v137 = v138;
          v136 += 2;
          v137 += 2;
          v135 += 8;
        }
        while (v135);
        v129 = v134;
        if ((v92 & 7) != 0)
        {
LABEL_101:
          v139 = v92 - v129;
          v140 = (float *)(v128 + 4 * v129);
          v141 = (float *)(v127 + 4 * v129);
          do
          {
            v142 = *v141++;
            *v140 = *v140 * v142;
            ++v140;
            --v139;
          }
          while (v139);
        }
        goto LABEL_103;
      }
      v105 = (uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v10);
      v112 = -8 * (-(int)v91 >> 3);
      if (v112 < (int)v92)
        goto LABEL_92;
LABEL_103:
      v143 = *(_QWORD *)(a1 + 632);
      v144 = *(int *)(a1 + 52);
      v145 = (int)v144 / 8;
      if ((int)v144 >= 8)
      {
        v146 = *(float32x4_t **)(v143 + 8 * v10);
        v147 = *v6;
        v148 = (int)v144 / 8;
        do
        {
          v149 = *v147;
          v150 = v147[1];
          v147 += 2;
          v151 = vmulq_f32(v150, v146[1]);
          *v146 = vmulq_f32(v149, *v146);
          v146[1] = v151;
          v146 += 2;
          --v148;
        }
        while (v148);
      }
      v152 = 8 * v145;
      if (8 * v145 < (int)v144)
      {
        v153 = *(_QWORD *)(v143 + 8 * v10);
        v154 = *v6;
        v155 = v152;
        v156 = v144 - v152;
        if (v156 < 8)
          goto LABEL_116;
        v157 = v153 + 4 * v152;
        v158 = (unint64_t)&v154[v152 / 4u];
        if (v157 < (unint64_t)v154->u64 + 4 * v144 && v158 < v153 + 4 * v144)
          goto LABEL_116;
        v160 = v156 - (v144 & 7) + v152;
        v161 = v152 + (unint64_t)(v144 & 7) - v144;
        v162 = (float32x4_t *)(v157 + 16);
        v163 = (float32x4_t *)(v158 + 16);
        do
        {
          v164 = vmulq_f32(*v163, *v162);
          v162[-1] = vmulq_f32(v163[-1], v162[-1]);
          *v162 = v164;
          v162 += 2;
          v163 += 2;
          v161 += 8;
        }
        while (v161);
        v155 = v160;
        if ((v144 & 7) != 0)
        {
LABEL_116:
          v165 = v144 - v155;
          v166 = &v154->f32[v155];
          v167 = (float *)(v153 + 4 * v155);
          do
          {
            v168 = *v166++;
            *v167 = v168 * *v167;
            ++v167;
            --v165;
          }
          while (v165);
        }
      }
LABEL_158:
      if (v11)
      {
        cblas_sgemv_NEWLAPACK();
        v228 = *(_QWORD *)(a1 + 656);
        v229 = *(_QWORD *)(a1 + 112);
        v230 = *(int *)(a1 + 52);
        if ((int)v230 >= 8)
        {
          v231 = *(float32x4_t **)(v228 + 8 * v10);
          v232 = *(float32x4_t **)(v229 + 8 * v394);
          v233 = (int)v230 / 8;
          do
          {
            v234 = *v232;
            v235 = v232[1];
            v232 += 2;
            v236 = vmulq_f32(v235, v231[1]);
            *v231 = vmulq_f32(v234, *v231);
            v231[1] = v236;
            v231 += 2;
            --v233;
          }
          while (v233);
        }
        v237 = 8 * ((int)v230 / 8);
        if (v237 < (int)v230)
        {
          v238 = *(_QWORD *)(v228 + 8 * v10);
          v239 = *(_QWORD *)(v229 + 8 * v394);
          v240 = v237;
          v241 = v230 - v237;
          if (v241 < 8)
            goto LABEL_172;
          v242 = v238 + 4 * v240;
          v243 = v239 + 4 * v240;
          if (v242 < v239 + 4 * v230 && v243 < v238 + 4 * v230)
            goto LABEL_172;
          v245 = v241 - (v230 & 7) + v240;
          v246 = v240 + (v230 & 7) - v230;
          v247 = (float32x4_t *)(v242 + 16);
          v248 = (float32x4_t *)(v243 + 16);
          do
          {
            v249 = vmulq_f32(*v248, *v247);
            v247[-1] = vmulq_f32(v248[-1], v247[-1]);
            *v247 = v249;
            v247 += 2;
            v248 += 2;
            v246 += 8;
          }
          while (v246);
          v240 = v245;
          if ((v230 & 7) != 0)
          {
LABEL_172:
            v250 = v230 - v240;
            v251 = (float *)(v239 + 4 * v240);
            v252 = (float *)(v238 + 4 * v240);
            do
            {
              v253 = *v251++;
              *v252 = v253 * *v252;
              ++v252;
              --v250;
            }
            while (v250);
          }
        }
        v254 = *(_QWORD *)(a1 + 656);
        v255 = *(int *)(a1 + 52);
        v256 = (int)v255 / 8;
        if ((int)v255 >= 8)
        {
          v257 = *(float32x4_t **)(v254 + 8 * v10);
          v258 = (float32x4_t *)*v393;
          v259 = (int)v255 / 8;
          do
          {
            v260 = *v258;
            v261 = v258[1];
            v258 += 2;
            v262 = vmulq_f32(v261, v257[1]);
            *v257 = vmulq_f32(v260, *v257);
            v257[1] = v262;
            v257 += 2;
            --v259;
          }
          while (v259);
        }
        v263 = 8 * v256;
        if (8 * v256 < (int)v255)
        {
          v264 = *(_QWORD *)(v254 + 8 * v10);
          v265 = (char *)*v393;
          v266 = v263;
          v267 = v255 - v263;
          if (v267 < 8)
            goto LABEL_187;
          v268 = v264 + 4 * v263;
          v269 = (unint64_t)&v265[4 * v263];
          if (v268 < (unint64_t)&v265[4 * v255] && v269 < v264 + 4 * v255)
            goto LABEL_187;
          v271 = v267 - (v255 & 7) + v263;
          v272 = v263 + (unint64_t)(v255 & 7) - v255;
          v273 = (float32x4_t *)(v268 + 16);
          v274 = (float32x4_t *)(v269 + 16);
          do
          {
            v275 = vmulq_f32(*v274, *v273);
            v273[-1] = vmulq_f32(v274[-1], v273[-1]);
            *v273 = v275;
            v273 += 2;
            v274 += 2;
            v272 += 8;
          }
          while (v272);
          v266 = v271;
          if ((v255 & 7) != 0)
          {
LABEL_187:
            v276 = v255 - v266;
            v277 = (float *)&v265[4 * v266];
            v278 = (float *)(v264 + 4 * v266);
            do
            {
              v279 = *v277++;
              *v278 = v279 * *v278;
              ++v278;
              --v276;
            }
            while (v276);
          }
        }
      }
      else
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 656) + 8 * v10), 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 560) + 8 * v10), 4 * *(int *)(a1 + 48));
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      if (v7-- <= 0)
        goto LABEL_193;
    }
    v59 = 0;
LABEL_45:
    v60 = v54 - v59;
    v61 = v59;
    v62 = (float *)(v58 + 4 * v59);
    v63 = &v57->f32[v61];
    v64 = &v56->f32[v61];
    do
    {
      v65 = *v64++;
      v66 = v65;
      v67 = *v63++;
      *v62 = (float)(v66 - (float)(v67 * v66)) + *v62;
      ++v62;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
LABEL_193:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    v280 = (a5 - 2);
    v281 = 1;
    v282 = a5 - 2;
    do
    {
      while (1)
      {
        v294 = *(_BYTE *)(a1 + 2040) ? v282 : v281;
        v295 = *(_BYTE *)(a1 + 2040) ? 1 : -1;
        v296 = v294 + v295;
        v297 = *(_BYTE *)(a1 + 2040) ? v280 : 1;
        v298 = *(_QWORD *)(a1 + 632) + 8 * v294;
        v299 = *(_QWORD *)(a1 + 112) + 8 * v296;
        v300 = *(_DWORD *)(a1 + 52);
        v397 = 8 * v294;
        if (v294 == v297)
          break;
        v395 = 8 * v296;
        v283 = v280;
        v284 = *(_QWORD *)(a1 + 1104);
        global_queue = dispatch_get_global_queue(0, 0);
        block = MEMORY[0x1E0C809B0];
        v400 = 0x40000000;
        v401 = sub_19C103680;
        v402 = &unk_1E3D25490;
        v406 = v300;
        v403 = v284;
        v404 = v298;
        v280 = v283;
        v405 = v299;
        dispatch_apply(v300, global_queue, &block);
        v286 = *(_QWORD *)(a1 + 656) + v397;
        v287 = *(_QWORD *)(a1 + 112) + v395;
        v288 = *(int *)(a1 + 52);
        v289 = *(_QWORD *)(a1 + 1096);
        block = MEMORY[0x1E0C809B0];
        v400 = 0x40000000;
        v401 = sub_19C103680;
        v402 = &unk_1E3D25490;
        v403 = v289;
        v406 = v288;
        v404 = v286;
        v405 = v287;
        dispatch_apply(v288, global_queue, &block);
        v290 = *(_QWORD *)(a1 + 608) + v397;
        v291 = *(_QWORD *)(a1 + 112) + v395;
        v292 = *(int *)(a1 + 52);
        v293 = *(_QWORD *)(a1 + 1112);
        block = MEMORY[0x1E0C809B0];
        v400 = 0x40000000;
        v401 = sub_19C103680;
        v402 = &unk_1E3D25490;
        v403 = v293;
        v406 = v292;
        v404 = v290;
        v405 = v291;
        dispatch_apply(v292, global_queue, &block);
        ++v281;
        if (--v282 == -1)
          goto LABEL_209;
      }
      bzero(*(void **)(a1 + 1104), 4 * (v300 * v300));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1096), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1112), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      ++v281;
      --v282;
    }
    while (v282 != -1);
  }
LABEL_209:
  if (a5 >= 1)
  {
    v301 = 0;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2040))
        v315 = v398 - v301;
      else
        v315 = v301;
      if (*(_BYTE *)(a1 + 2040))
        v316 = v398;
      else
        v316 = 0;
      if (a3[1] == *a3)
      {
        v317 = *(_QWORD *)(a1 + 656);
LABEL_226:
        v328 = 8 * v315;
        v329 = v317 + v328;
        v330 = *(_QWORD *)(a1 + 64) + v328;
        v331 = *(_DWORD *)(a1 + 48);
        v332 = *(int *)(a1 + 52);
        v333 = v328;
        if (v315 == v316)
        {
          bzero(*(void **)(a1 + 1072), 4 * v331 * (int)v332);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1080), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1088), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v302 = *(_QWORD *)(a1 + 1072);
          v303 = dispatch_get_global_queue(0, 0);
          block = MEMORY[0x1E0C809B0];
          v400 = 0x40000000;
          v401 = sub_19C103680;
          v402 = &unk_1E3D25490;
          v406 = v331;
          v403 = v302;
          v404 = v329;
          v405 = v330;
          dispatch_apply(v332, v303, &block);
          v304 = *(_QWORD *)(a1 + 632) + v333;
          v305 = *(_QWORD *)(a1 + 64) + v333;
          v306 = *(_DWORD *)(a1 + 48);
          v307 = *(int *)(a1 + 52);
          v308 = *(_QWORD *)(a1 + 1080);
          v309 = MEMORY[0x1E0C809B0];
          block = MEMORY[0x1E0C809B0];
          v400 = 0x40000000;
          v401 = sub_19C103680;
          v402 = &unk_1E3D25490;
          v406 = v306;
          v403 = v308;
          v404 = v304;
          v405 = v305;
          dispatch_apply(v307, v303, &block);
          v310 = *(_QWORD *)(a1 + 608) + v333;
          v311 = *(_QWORD *)(a1 + 64) + v333;
          v312 = *(_DWORD *)(a1 + 48);
          v313 = *(int *)(a1 + 52);
          v314 = *(_QWORD *)(a1 + 1088);
          block = v309;
          v400 = 0x40000000;
          v401 = sub_19C103680;
          v402 = &unk_1E3D25490;
          v406 = v312;
          v403 = v314;
          v404 = v310;
          v405 = v311;
          dispatch_apply(v313, v303, &block);
        }
        goto LABEL_212;
      }
      v317 = *(_QWORD *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_226;
      v318 = v315;
      v319 = *(_QWORD *)(a1 + 208);
      v320 = 24 * v315;
      v322 = *(_BYTE **)(v319 + v320);
      v321 = *(_BYTE **)(v319 + v320 + 8);
      v323 = v321 - v322;
      if (v321 == v322)
        break;
      if ((v323 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v324 = v301;
      v325 = *(_QWORD *)(a1 + 208);
      v326 = operator new(v321 - v322);
      memcpy(v326, v322, v323);
      v319 = v325;
      v301 = v324;
      v327 = *(unsigned int *)(a1 + 52);
      if ((int)v327 >= 1)
        goto LABEL_229;
LABEL_236:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v326)
          goto LABEL_242;
      }
      else
      {
        v346 = 0;
        v347 = *(_QWORD *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v347 + 24 * *(int *)(a1 + 728)) + 4 * v346) = *((_DWORD *)v326 + v346);
          ++v346;
        }
        while (v346 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v326);
      v319 = *(_QWORD *)(a1 + 208);
LABEL_242:
      v348 = *(_QWORD *)(a1 + 632);
      v349 = *(_BYTE **)(v319 + 24 * (int)v318);
      v350 = *(_BYTE **)(v319 + v320 + 8);
      v351 = v350 - v349;
      if (v350 == v349)
      {
        v354 = 0;
        v355 = *(unsigned int *)(a1 + 52);
        if ((int)v355 < 1)
          goto LABEL_254;
LABEL_247:
        v356 = 0;
        v357 = *(_QWORD *)(v348 + 8 * v318);
        v358 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v355 < 8)
          goto LABEL_252;
        if ((unint64_t)(v358 - v357) < 0x20)
          goto LABEL_252;
        v356 = v355 & 0x7FFFFFF8;
        v359 = (__int128 *)(v357 + 16);
        v360 = (_OWORD *)(v358 + 16);
        v361 = v355 & 0xFFFFFFF8;
        do
        {
          v362 = *v359;
          *(v360 - 1) = *(v359 - 1);
          *v360 = v362;
          v359 += 2;
          v360 += 2;
          v361 -= 8;
        }
        while (v361);
        if (v356 != v355)
        {
LABEL_252:
          v363 = v355 - v356;
          v364 = 4 * v356;
          v365 = (_DWORD *)(v358 + 4 * v356);
          v366 = (int *)(v357 + v364);
          do
          {
            v367 = *v366++;
            *v365++ = v367;
            --v363;
          }
          while (v363);
        }
        goto LABEL_254;
      }
      if ((v351 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v352 = v301;
      v353 = v319;
      v354 = operator new(v350 - v349);
      memcpy(v354, v349, v351);
      v319 = v353;
      v301 = v352;
      v355 = *(unsigned int *)(a1 + 52);
      if ((int)v355 >= 1)
        goto LABEL_247;
LABEL_254:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v354)
          goto LABEL_260;
      }
      else
      {
        v368 = 0;
        v369 = *(_QWORD *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v369 + 24 * *(int *)(a1 + 848)) + 4 * v368) = *((_DWORD *)v354 + v368);
          ++v368;
        }
        while (v368 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v354);
      v319 = *(_QWORD *)(a1 + 208);
LABEL_260:
      v370 = *(_QWORD *)(a1 + 608);
      v371 = *(_BYTE **)(v319 + 24 * (int)v318);
      v372 = *(_BYTE **)(v319 + v320 + 8);
      v373 = v372 - v371;
      if (v372 == v371)
      {
        v374 = 0;
        v375 = *(unsigned int *)(a1 + 52);
        if ((int)v375 < 1)
          goto LABEL_272;
LABEL_265:
        v376 = 0;
        v377 = *(_QWORD *)(v370 + 8 * v318);
        v378 = *(_QWORD *)(*(_QWORD *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v375 < 8)
          goto LABEL_270;
        if ((unint64_t)(v378 - v377) < 0x20)
          goto LABEL_270;
        v376 = v375 & 0x7FFFFFF8;
        v379 = (__int128 *)(v377 + 16);
        v380 = (_OWORD *)(v378 + 16);
        v381 = v375 & 0xFFFFFFF8;
        do
        {
          v382 = *v379;
          *(v380 - 1) = *(v379 - 1);
          *v380 = v382;
          v379 += 2;
          v380 += 2;
          v381 -= 8;
        }
        while (v381);
        if (v376 != v375)
        {
LABEL_270:
          v383 = v375 - v376;
          v384 = 4 * v376;
          v385 = (_DWORD *)(v378 + 4 * v376);
          v386 = (int *)(v377 + v384);
          do
          {
            v387 = *v386++;
            *v385++ = v387;
            --v383;
          }
          while (v383);
        }
        goto LABEL_272;
      }
      if ((v373 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v374 = operator new(v372 - v371);
      memcpy(v374, v371, v373);
      v375 = *(unsigned int *)(a1 + 52);
      if ((int)v375 >= 1)
        goto LABEL_265;
LABEL_272:
      if (*(int *)(a1 + 964) >= 1)
      {
        v388 = 0;
        v389 = *(_QWORD *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v389 + 24 * *(int *)(a1 + 968)) + 4 * v388) = *((_DWORD *)v374 + v388);
          ++v388;
        }
        while (v388 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_277:
        operator delete(v374);
        goto LABEL_212;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v374)
        goto LABEL_277;
LABEL_212:
      if (++v301 == a5)
        return;
    }
    v326 = 0;
    v327 = *(unsigned int *)(a1 + 52);
    if ((int)v327 < 1)
      goto LABEL_236;
LABEL_229:
    v334 = 0;
    v335 = *(_QWORD *)(v317 + 8 * v318);
    v336 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v327 < 8)
      goto LABEL_234;
    if ((unint64_t)(v336 - v335) < 0x20)
      goto LABEL_234;
    v334 = v327 & 0x7FFFFFF8;
    v337 = (__int128 *)(v335 + 16);
    v338 = (_OWORD *)(v336 + 16);
    v339 = v327 & 0xFFFFFFF8;
    do
    {
      v340 = *v337;
      *(v338 - 1) = *(v337 - 1);
      *v338 = v340;
      v337 += 2;
      v338 += 2;
      v339 -= 8;
    }
    while (v339);
    if (v334 != v327)
    {
LABEL_234:
      v341 = v327 - v334;
      v342 = 4 * v334;
      v343 = (_DWORD *)(v336 + 4 * v334);
      v344 = (int *)(v335 + v342);
      do
      {
        v345 = *v344++;
        *v343++ = v345;
        --v341;
      }
      while (v341);
    }
    goto LABEL_236;
  }
}

void sub_19C15F490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C15F4D8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2040] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE419150);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE419150);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419138 = 0;
      unk_1EE419140 = 0;
      qword_1EE419148 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419138, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419150);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419138);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19C15F5A4(_BYTE *a1)
{
  uint64_t result;

  a1[2040] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19C15F5D8(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 1988) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 304) = result + 232;
  *(_QWORD *)(a1 + 312) = result + 240;
  *(_QWORD *)(a1 + 320) = result + 248;
  *(_QWORD *)(a1 + 328) = result + 256;
  *(_QWORD *)(a1 + 336) = result + 264;
  *(_QWORD *)(a1 + 344) = result + 272;
  *(_QWORD *)(a1 + 352) = result + 280;
  *(_QWORD *)(a1 + 360) = result + 288;
  *(_QWORD *)(a1 + 368) = result + 296;
  return result;
}

uint64_t sub_19C15F668(uint64_t a1, void *lpsrc, float a3)
{
  char *v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  void (***v10)(_QWORD, uint64_t, char *, float);
  void (**v11)(_QWORD, uint64_t, char *, float);
  int v12;
  int v13;
  void (***v14)(_QWORD, uint64_t, uint64_t, float);
  void (**v15)(_QWORD, uint64_t, uint64_t, float);
  int v16;
  int v17;
  void (***v18)(_QWORD, uint64_t, uint64_t, float);
  void (**v19)(_QWORD, uint64_t, uint64_t, float);
  int v20;
  void (***v21)(_QWORD, uint64_t, uint64_t, float);
  int v22;
  void (***v23)(_QWORD, uint64_t, uint64_t, float);
  int v24;
  void (***v25)(_QWORD, uint64_t, uint64_t, float);
  float __C;
  float __B;

  if (*(_DWORD *)(a1 + 1988))
    sub_19C2210D4(1);
  v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFA8, 0);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = v5 + 1072;
  v10 = *(void (****)(_QWORD, uint64_t, char *, float))(a1 + 1120);
  sub_19C22CBE0(a1 + 1192);
  if (*(_DWORD *)(a1 + 56))
  {
    v11 = *v10;
    if (*((_DWORD *)v6 + 179) * *((_DWORD *)v6 + 178) < 1)
      (*v11)(v10, a1 + 240, v9, a3);
    else
      v11[1](v10, a1 + 240, v6 + 712, a3);
  }
  else
  {
    (**v10)(v10, a1 + 240, v9, a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 240), 1, &__B, &__C, *(float **)(a1 + 240), 1, v8 * (uint64_t)v7);
  }
  sub_19C22CBE8(a1 + 1192);
  v13 = *(_DWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 52);
  v14 = *(void (****)(_QWORD, uint64_t, uint64_t, float))(a1 + 1136);
  sub_19C22CBE0(a1 + 1264);
  if (*(_DWORD *)(a1 + 56))
  {
    v15 = *v14;
    if (*((_DWORD *)v6 + 239) * *((_DWORD *)v6 + 238) < 1)
      (*v15)(v14, a1 + 248, (uint64_t)(v6 + 1088), a3);
    else
      v15[1](v14, a1 + 248, (uint64_t)(v6 + 952), a3);
  }
  else
  {
    (**v14)(v14, a1 + 248, (uint64_t)(v6 + 1088), a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 248), 1, &__B, &__C, *(float **)(a1 + 248), 1, v13 * (uint64_t)v12);
  }
  sub_19C22CBE8(a1 + 1264);
  v17 = *(_DWORD *)(a1 + 48);
  v16 = *(_DWORD *)(a1 + 52);
  v18 = *(void (****)(_QWORD, uint64_t, uint64_t, float))(a1 + 1128);
  sub_19C22CBE0(a1 + 1336);
  if (*(_DWORD *)(a1 + 56))
  {
    v19 = *v18;
    if (*((_DWORD *)v6 + 209) * *((_DWORD *)v6 + 208) < 1)
      (*v19)(v18, a1 + 232, (uint64_t)(v6 + 1080), a3);
    else
      v19[1](v18, a1 + 232, (uint64_t)(v6 + 832), a3);
  }
  else
  {
    (**v18)(v18, a1 + 232, (uint64_t)(v6 + 1080), a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 232), 1, &__B, &__C, *(float **)(a1 + 232), 1, v17 * (uint64_t)v16);
  }
  sub_19C22CBE8(a1 + 1336);
  v20 = *(_DWORD *)(a1 + 52);
  v21 = *(void (****)(_QWORD, uint64_t, uint64_t, float))(a1 + 1144);
  sub_19C22CBE0(a1 + 1408);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v21)(v21, a1 + 264, (uint64_t)(v6 + 1096), a3);
  }
  else
  {
    (**v21)(v21, a1 + 264, (uint64_t)(v6 + 1096), a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 264), 1, &__B, &__C, *(float **)(a1 + 264), 1, (v20 * v20));
  }
  sub_19C22CBE8(a1 + 1408);
  v22 = *(_DWORD *)(a1 + 52);
  v23 = *(void (****)(_QWORD, uint64_t, uint64_t, float))(a1 + 1160);
  sub_19C22CBE0(a1 + 1480);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v23)(v23, a1 + 272, (uint64_t)(v6 + 1112), a3);
  }
  else
  {
    (**v23)(v23, a1 + 272, (uint64_t)(v6 + 1112), a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 272), 1, &__B, &__C, *(float **)(a1 + 272), 1, (v22 * v22));
  }
  sub_19C22CBE8(a1 + 1480);
  v24 = *(_DWORD *)(a1 + 52);
  v25 = *(void (****)(_QWORD, uint64_t, uint64_t, float))(a1 + 1152);
  sub_19C22CBE0(a1 + 1552);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v25)(v25, a1 + 256, (uint64_t)(v6 + 1104), a3);
  }
  else
  {
    (**v25)(v25, a1 + 256, (uint64_t)(v6 + 1104), a3);
    __C = 2.0;
    __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 256), 1, &__B, &__C, *(float **)(a1 + 256), 1, (v24 * v24));
  }
  return sub_19C22CBE8(a1 + 1552);
}

void sub_19C15FAF4()
{
  sub_19C2210D4(1);
}

void sub_19C15FB04()
{
  sub_19C2210D4(0);
}

void sub_19C15FB18(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C1616F8(a1);
  operator delete(v1);
}

void sub_19C15FB2C(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  signed int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t **v33;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  float32x4_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float v57;
  int v58;
  uint64_t v59;
  int v60;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t **v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  int v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int v81;
  float32x4_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t *v104;
  float32x4_t *v105;
  int v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  BOOL v123;
  uint64_t v125;
  uint64_t v126;
  float32x4_t *v127;
  float32x4_t *v128;
  float32x4_t *v129;
  float32x4_t v130;
  uint64_t v131;
  float *v132;
  float *v133;
  float *v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  vDSP_Length v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  int64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  float32x4_t **v150;
  uint64_t v151;
  float32x4_t *v152;
  float32x4_t *v153;
  int v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int v158;
  float32x4_t *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v166;
  uint64_t v167;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t v170;
  uint64_t v171;
  float *v172;
  float *v173;
  float v174;
  uint64_t v175;
  vDSP_Length v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float32x4_t *v180;
  float32x4_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  float *v186;
  float *v187;
  float *v188;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  float32x4_t *v193;
  float32x4_t *v194;
  int v195;
  float32x4_t *v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  BOOL v211;
  BOOL v212;
  uint64_t v214;
  uint64_t v215;
  float32x4_t *v216;
  float32x4_t *v217;
  float32x4_t *v218;
  float32x4_t v219;
  uint64_t v220;
  float *v221;
  float *v222;
  float *v223;
  float v224;
  float v225;
  float v226;
  unint64_t v227;
  BOOL v229;
  float32x4_t *v231;
  float32x4_t *v232;
  float32x4_t *v233;
  uint64_t v234;
  float32x4_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  _BYTE *v244;
  int64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  int v251;
  unsigned int v252;
  signed int v253;
  unsigned int v255;
  int v256;
  char v257;
  int v258;
  _BOOL4 v259;
  void *v260;
  void *v261;
  char *v262;
  void *v263;
  void *v264;
  char *v265;
  void *__p;
  void *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  float __C;
  float __B[3];

  if (a3[1] != *a3 && *(int *)(a1 + 56) >= 1)
  {
    v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = a4 & 0xFFFFFF;
    v10 = *(_QWORD *)(a1 + 2048);
    if (!v10)
      goto LABEL_7;
LABEL_6:
    v11 = *(float *)(v10 + 468);
    if (v11 > 0.0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = a4 & 0xFFFFFF;
  v10 = *(_QWORD *)(a1 + 2048);
  if (v10)
    goto LABEL_6;
LABEL_7:
  v11 = 50.0;
LABEL_8:
  v12 = a5 != 0;
  if (v9 > v12)
  {
    v252 = v9;
    v253 = v9 - 1;
    v251 = v8;
    do
    {
      if (*(_BYTE *)(a1 + 2040))
        v13 = v9 + ~v12;
      else
        v13 = v12;
      if (*(_BYTE *)(a1 + 2040))
        v14 = 1;
      else
        v14 = -1;
      v255 = v12;
      v256 = v14;
      if (*(_BYTE *)(a1 + 2040))
        v15 = v13 < v253;
      else
        v15 = v13 > 0;
      v259 = v15;
      v16 = v13;
      memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v13), *(const void **)(*a2 + 8 * v13), 4 * *(int *)(a1 + 44));
      v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v8)
      {
        v18 = *(_DWORD *)(a1 + 48);
        v19 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v13);
        *v19 = **(_DWORD **)(*a3 + 24 * v13);
        if (v17)
          v19[1] = v18 - 1;
      }
      v20 = 8 * v13;
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + v20), 4 * *(int *)(a1 + 52));
      v21 = *(_QWORD *)(a1 + 2048);
      if (v21
        && !*(_BYTE *)(v21 + 20)
        && ((v236 = *(_DWORD *)(v21 + 40), v236 == 4) || v236 == 2)
        && *(_DWORD *)(v21 + 44) == 3)
      {
        v237 = *(_QWORD *)(a1 + 376);
        v238 = *(_QWORD *)(a1 + 400);
        v239 = *(_QWORD *)(a1 + 424);
        v240 = *(_QWORD *)(a1 + 64);
        v241 = *(_QWORD *)(a1 + 304);
        v242 = *(_QWORD *)(a1 + 208) + 24 * v13;
        v270 = 0;
        v271 = 0;
        v269 = 0;
        v244 = *(_BYTE **)v242;
        v243 = *(_BYTE **)(v242 + 8);
        v245 = v243 - v244;
        if (v243 != v244)
        {
          v248 = v237;
          v249 = v238;
          if (v245 < 0)
            sub_19C07DA0C();
          v246 = v239;
          v269 = (char *)operator new(v243 - v244);
          v270 = v269;
          v247 = &v269[4 * (v245 >> 2)];
          v271 = v247;
          memcpy(v269, v244, v245);
          v270 = v247;
          v239 = v246;
          v8 = v251;
          v237 = v248;
          v238 = v249;
        }
        sub_19C1609A8(a1, 0, (_QWORD *)(v237 + v20), (float32x4_t **)(v238 + v20), (float32x4_t **)(v239 + v20), v240 + v20, v241, (uint64_t)&v269, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        if (v269)
        {
          v270 = v269;
          v30 = 1;
          operator delete(v269);
          v31 = *(_QWORD *)(a1 + 2048);
          if (!v31)
            goto LABEL_50;
        }
        else
        {
          v30 = 1;
          v31 = *(_QWORD *)(a1 + 2048);
          if (!v31)
            goto LABEL_50;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 376);
        v23 = *(_QWORD *)(a1 + 64);
        v24 = *(uint64_t **)(a1 + 304);
        v25 = *(_QWORD *)(a1 + 208) + 24 * v13;
        v267 = 0;
        v268 = 0;
        __p = 0;
        v27 = *(_BYTE **)v25;
        v26 = *(_BYTE **)(v25 + 8);
        v28 = v26 - v27;
        if (v26 != v27)
        {
          if (v28 < 0)
            sub_19C07DA0C();
          __p = operator new(v26 - v27);
          v267 = __p;
          v29 = (char *)__p + 4 * (v28 >> 2);
          v268 = v29;
          memcpy(__p, v27, v28);
          v267 = v29;
          v8 = v251;
        }
        sub_19C161278(a1, v8, (float **)(v22 + v20), v23 + v20, v24, (uint64_t)&__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        if (__p)
        {
          v30 = 0;
          v267 = __p;
          operator delete(__p);
          v31 = *(_QWORD *)(a1 + 2048);
          if (!v31)
            goto LABEL_50;
        }
        else
        {
          v30 = 0;
          v31 = *(_QWORD *)(a1 + 2048);
          if (!v31)
            goto LABEL_50;
        }
      }
      if (*(_BYTE *)(v31 + 244))
      {
        v32 = *(_QWORD *)(a1 + 376);
        v33 = *(float32x4_t ***)(a1 + 352);
        v34 = *(int *)(a1 + 52);
        if ((int)v34 >= 8)
        {
          v35 = *(float32x4_t **)(v32 + 8 * v13);
          v36 = *v33;
          v37 = (int)v34 / 8;
          do
          {
            v38 = *v36;
            v39 = v36[1];
            v36 += 2;
            v40 = vaddq_f32(v35[1], v39);
            *v35 = vaddq_f32(*v35, v38);
            v35[1] = v40;
            v35 += 2;
            --v37;
          }
          while (v37);
        }
        v41 = 8 * ((int)v34 / 8);
        if (v41 < (int)v34)
        {
          v42 = *v33;
          v43 = *(_QWORD *)(v32 + 8 * v13);
          v44 = v41;
          v45 = v34 - v41;
          if (v45 < 8)
            goto LABEL_48;
          v46 = v43 + 4 * v41;
          v47 = (unint64_t)&v42[v41 / 4u];
          if (v46 < (unint64_t)v42->u64 + 4 * v34 && v47 < v43 + 4 * v34)
            goto LABEL_48;
          v49 = v45 - (v34 & 7) + v41;
          v50 = v41 + (unint64_t)(v34 & 7) - v34;
          v51 = (float32x4_t *)(v47 + 16);
          v52 = (float32x4_t *)(v46 + 16);
          do
          {
            v53 = vaddq_f32(*v52, *v51);
            v52[-1] = vaddq_f32(v52[-1], v51[-1]);
            *v52 = v53;
            v51 += 2;
            v52 += 2;
            v50 += 8;
          }
          while (v50);
          v44 = v49;
          if ((v34 & 7) != 0)
          {
LABEL_48:
            v54 = v34 - v44;
            v55 = (float *)(v43 + 4 * v44);
            v56 = &v42->f32[v44];
            do
            {
              v57 = *v56++;
              *v55 = *v55 + v57;
              ++v55;
              --v54;
            }
            while (v54);
          }
        }
      }
LABEL_50:
      v58 = v13 + v256;
      v59 = *(_QWORD *)(a1 + 376);
      v60 = *(_DWORD *)(a1 + 52);
      v61 = v259;
      if (v259)
      {
        cblas_sgemv_NEWLAPACK();
        v59 = *(_QWORD *)(a1 + 376);
        v60 = *(_DWORD *)(a1 + 52);
      }
      __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v59 + 8 * v16), 1, __B, &__C, *(float **)(v59 + 8 * v16), 1, v60);
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 448) + v20), (const void **)(*(_QWORD *)(a1 + 376) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      if ((v30 & 1) == 0)
      {
        v257 = v30;
        v62 = v58;
        v63 = *(_QWORD *)(a1 + 400);
        v64 = *(_QWORD *)(a1 + 64);
        v65 = *(uint64_t **)(a1 + 312);
        v66 = *(_QWORD *)(a1 + 208) + 24 * (int)v16;
        v264 = 0;
        v265 = 0;
        v263 = 0;
        v68 = *(_BYTE **)v66;
        v67 = *(_BYTE **)(v66 + 8);
        v69 = v67 - v68;
        if (v67 != v68)
        {
          if (v69 < 0)
            sub_19C07DA0C();
          v263 = operator new(v67 - v68);
          v264 = v263;
          v70 = (char *)v263 + 4 * (v69 >> 2);
          v265 = v70;
          memcpy(v263, v68, v69);
          v264 = v70;
          v8 = v251;
        }
        sub_19C161278(a1, v8, (float **)(v63 + v20), v64 + v20, v65, (uint64_t)&v263, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v61 = v259;
        v58 = v62;
        v30 = v257;
        if (v263)
        {
          v264 = v263;
          operator delete(v263);
        }
      }
      v71 = *(_QWORD *)(a1 + 2048);
      if (v71 && *(_BYTE *)(v71 + 244))
      {
        v72 = *(_QWORD *)(a1 + 400);
        v73 = *(float32x4_t ***)(a1 + 360);
        v74 = *(int *)(a1 + 52);
        if ((int)v74 >= 8)
        {
          v75 = *(float32x4_t **)(v72 + 8 * v16);
          v76 = *v73;
          v77 = (int)v74 / 8;
          do
          {
            v78 = *v76;
            v79 = v76[1];
            v76 += 2;
            v80 = vaddq_f32(v75[1], v79);
            *v75 = vaddq_f32(*v75, v78);
            v75[1] = v80;
            v75 += 2;
            --v77;
          }
          while (v77);
        }
        v81 = 8 * ((int)v74 / 8);
        if (v81 < (int)v74)
        {
          v82 = *v73;
          v83 = *(_QWORD *)(v72 + 8 * v16);
          v84 = v81;
          v85 = v74 - v81;
          if (v85 < 8)
            goto LABEL_73;
          v86 = v83 + 4 * v81;
          v87 = (unint64_t)&v82[v81 / 4u];
          if (v86 < (unint64_t)v82->u64 + 4 * v74 && v87 < v83 + 4 * v74)
            goto LABEL_73;
          v89 = v85 - (v74 & 7) + v81;
          v90 = v81 + (unint64_t)(v74 & 7) - v74;
          v91 = (float32x4_t *)(v87 + 16);
          v92 = (float32x4_t *)(v86 + 16);
          do
          {
            v93 = vaddq_f32(*v92, *v91);
            v92[-1] = vaddq_f32(v92[-1], v91[-1]);
            *v92 = v93;
            v91 += 2;
            v92 += 2;
            v90 += 8;
          }
          while (v90);
          v84 = v89;
          if ((v74 & 7) != 0)
          {
LABEL_73:
            v94 = v74 - v84;
            v95 = (float *)(v83 + 4 * v84);
            v96 = &v82->f32[v84];
            do
            {
              v97 = *v96++;
              *v95 = *v95 + v97;
              ++v95;
              --v94;
            }
            while (v94);
          }
        }
      }
      v98 = *(_QWORD *)(a1 + 400);
      v99 = *(_DWORD *)(a1 + 52);
      if (v61)
      {
        cblas_sgemv_NEWLAPACK();
        v98 = *(_QWORD *)(a1 + 400);
        v99 = *(_DWORD *)(a1 + 52);
      }
      __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v98 + 8 * v16), 1, __B, &__C, *(float **)(v98 + 8 * v16), 1, v99);
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 472) + v20), (const void **)(*(_QWORD *)(a1 + 400) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v16), 4 * *(int *)(a1 + 52));
      if (v61)
      {
        v100 = *(_QWORD *)(a1 + 88);
        v101 = *(_QWORD *)(a1 + 112);
        v102 = *(_QWORD *)(a1 + 472);
        v103 = *(int *)(a1 + 52);
        if ((int)v103 >= 8)
        {
          v104 = *(float32x4_t **)(v100 + 8 * v16);
          v105 = *(float32x4_t **)(v102 + 8 * v16);
          v106 = (int)v103 / 8;
          v107 = *(float32x4_t **)(v101 + 8 * v58);
          do
          {
            v109 = *v107;
            v108 = v107[1];
            v107 += 2;
            v111 = *v105;
            v110 = v105[1];
            v105 += 2;
            v112 = vmlaq_f32(v104[1], v110, v108);
            *v104 = vmlaq_f32(*v104, v111, v109);
            v104[1] = v112;
            v104 += 2;
            --v106;
          }
          while (v106);
        }
        v113 = 8 * ((int)v103 / 8);
        if (v113 < (int)v103)
        {
          v114 = *(_QWORD *)(v101 + 8 * v58);
          v115 = *(_QWORD *)(v102 + 8 * v16);
          v116 = *(_QWORD *)(v100 + 8 * v16);
          v117 = v113;
          v118 = v103 - v113;
          if (v118 < 8)
            goto LABEL_98;
          v119 = 4 * v117;
          v120 = v116 + 4 * v117;
          v121 = v116 + 4 * v103;
          v122 = v120 >= v115 + 4 * v103 || v115 + 4 * v117 >= v121;
          v123 = !v122;
          if (v114 + 4 * v117 < v121 && v120 < v114 + 4 * v103)
            goto LABEL_98;
          if (v123)
            goto LABEL_98;
          v125 = v118 - (v103 & 7) + v117;
          v126 = v117 + (v103 & 7) - v103;
          v127 = (float32x4_t *)(v116 + v119 + 16);
          v128 = (float32x4_t *)(v114 + v119 + 16);
          v129 = (float32x4_t *)(v115 + v119 + 16);
          do
          {
            v130 = vmlaq_f32(*v127, *v129, *v128);
            v127[-1] = vmlaq_f32(v127[-1], v129[-1], v128[-1]);
            *v127 = v130;
            v127 += 2;
            v128 += 2;
            v129 += 2;
            v126 += 8;
          }
          while (v126);
          v117 = v125;
          if ((v103 & 7) != 0)
          {
LABEL_98:
            v131 = v103 - v117;
            v132 = (float *)(v116 + 4 * v117);
            v133 = (float *)(v115 + 4 * v117);
            v134 = (float *)(v114 + 4 * v117);
            do
            {
              v135 = *v134++;
              v136 = v135;
              v137 = *v133++;
              *v132 = *v132 + (float)(v137 * v136);
              ++v132;
              --v131;
            }
            while (v131);
          }
        }
      }
      v138 = *(_QWORD *)(a1 + 88);
      v139 = *(int *)(a1 + 52);
      __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v138 + 8 * v16), 1, __B, &__C, *(float **)(v138 + 8 * v16), 1, v139);
      if ((v30 & 1) == 0)
      {
        v258 = v58;
        v140 = *(_QWORD *)(a1 + 424);
        v141 = *(_QWORD *)(a1 + 64);
        v142 = *(uint64_t **)(a1 + 320);
        v143 = *(_QWORD *)(a1 + 208) + 24 * (int)v16;
        v261 = 0;
        v262 = 0;
        v260 = 0;
        v145 = *(_BYTE **)v143;
        v144 = *(_BYTE **)(v143 + 8);
        v146 = v144 - v145;
        if (v144 != v145)
        {
          if (v146 < 0)
            sub_19C07DA0C();
          v260 = operator new(v144 - v145);
          v261 = v260;
          v147 = (char *)v260 + 4 * (v146 >> 2);
          v262 = v147;
          memcpy(v260, v145, v146);
          v261 = v147;
          v61 = v259;
        }
        sub_19C161278(a1, v8, (float **)(v140 + v20), v141 + v20, v142, (uint64_t)&v260, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        v58 = v258;
        if (v260)
        {
          v261 = v260;
          operator delete(v260);
        }
      }
      v148 = *(_QWORD *)(a1 + 2048);
      if (v148 && *(_BYTE *)(v148 + 244))
      {
        v149 = *(_QWORD *)(a1 + 424);
        v150 = *(float32x4_t ***)(a1 + 368);
        v151 = *(int *)(a1 + 52);
        if ((int)v151 >= 8)
        {
          v152 = *(float32x4_t **)(v149 + 8 * v16);
          v153 = *v150;
          v154 = (int)v151 / 8;
          do
          {
            v155 = *v153;
            v156 = v153[1];
            v153 += 2;
            v157 = vaddq_f32(v152[1], v156);
            *v152 = vaddq_f32(*v152, v155);
            v152[1] = v157;
            v152 += 2;
            --v154;
          }
          while (v154);
        }
        v158 = 8 * ((int)v151 / 8);
        if (v158 < (int)v151)
        {
          v159 = *v150;
          v160 = *(_QWORD *)(v149 + 8 * v16);
          v161 = v158;
          v162 = v151 - v158;
          if (v162 < 8)
            goto LABEL_121;
          v163 = v160 + 4 * v158;
          v164 = (unint64_t)&v159[v158 / 4u];
          if (v163 < (unint64_t)v159->u64 + 4 * v151 && v164 < v160 + 4 * v151)
            goto LABEL_121;
          v166 = v162 - (v151 & 7) + v158;
          v167 = v158 + (unint64_t)(v151 & 7) - v151;
          v168 = (float32x4_t *)(v164 + 16);
          v169 = (float32x4_t *)(v163 + 16);
          do
          {
            v170 = vaddq_f32(*v169, *v168);
            v169[-1] = vaddq_f32(v169[-1], v168[-1]);
            *v169 = v170;
            v168 += 2;
            v169 += 2;
            v167 += 8;
          }
          while (v167);
          v161 = v166;
          if ((v151 & 7) != 0)
          {
LABEL_121:
            v171 = v151 - v161;
            v172 = (float *)(v160 + 4 * v161);
            v173 = &v159->f32[v161];
            do
            {
              v174 = *v173++;
              *v172 = *v172 + v174;
              ++v172;
              --v171;
            }
            while (v171);
          }
        }
      }
      cblas_sgemv_NEWLAPACK();
      v175 = *(_QWORD *)(a1 + 424);
      v176 = *(int *)(a1 + 52);
      __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v175 + 8 * v16), 1, __B, &__C, *(float **)(v175 + 8 * v16), 1, v176);
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 496) + v20), (const void **)(*(_QWORD *)(a1 + 424) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      bzero(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v16), 4 * *(int *)(a1 + 52));
      v177 = *(_QWORD *)(a1 + 112);
      v178 = *(_QWORD *)(a1 + 448);
      v179 = *(unsigned int *)(a1 + 52);
      if ((int)v179 < 1)
        goto LABEL_128;
      v180 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v16);
      v181 = *(float32x4_t **)(v178 + 8 * v16);
      v182 = *(_QWORD *)(v177 + 8 * v16);
      if (v179 >= 8)
      {
        v183 = 0;
        v227 = v182 + 4 * v179;
        v229 = v182 < (unint64_t)v181->u64 + 4 * v179 && (unint64_t)v181 < v227;
        if (((unint64_t)v180 >= v227 || v182 >= (unint64_t)v180->u64 + 4 * v179) && !v229)
        {
          v183 = v179 & 0x7FFFFFF8;
          v231 = v180 + 1;
          v232 = v181 + 1;
          v233 = (float32x4_t *)(v182 + 16);
          v234 = v179 & 0xFFFFFFF8;
          do
          {
            v235 = vaddq_f32(vmlsq_f32(*v231, *v231, *v232), *v233);
            v233[-1] = vaddq_f32(vmlsq_f32(v231[-1], v231[-1], v232[-1]), v233[-1]);
            *v233 = v235;
            v231 += 2;
            v232 += 2;
            v233 += 2;
            v234 -= 8;
          }
          while (v234);
          if (v183 == v179)
            goto LABEL_128;
        }
      }
      else
      {
        v183 = 0;
      }
      v184 = v179 - v183;
      v185 = v183;
      v186 = (float *)(v182 + v185 * 4);
      v187 = &v181->f32[v185];
      v188 = &v180->f32[v185];
      do
      {
        v189 = *v188++;
        v190 = v189;
        v191 = *v187++;
        *v186 = (float)(v190 - (float)(v191 * v190)) + *v186;
        ++v186;
        --v184;
      }
      while (v184);
LABEL_128:
      if (v61)
      {
        v192 = (int)v179;
        if ((int)v179 >= 8)
        {
          v193 = *(float32x4_t **)(v177 + 8 * v16);
          v194 = *(float32x4_t **)(v177 + 8 * v58);
          v195 = (int)v179 / 8;
          v196 = *(float32x4_t **)(v178 + 8 * v16);
          do
          {
            v198 = *v196;
            v197 = v196[1];
            v196 += 2;
            v200 = *v194;
            v199 = v194[1];
            v194 += 2;
            v201 = vmlaq_f32(v193[1], v199, v197);
            *v193 = vmlaq_f32(*v193, v200, v198);
            v193[1] = v201;
            v193 += 2;
            --v195;
          }
          while (v195);
        }
        v202 = 8 * ((int)v179 / 8);
        if (v202 < (int)v179)
        {
          v203 = *(_QWORD *)(v178 + 8 * v16);
          v204 = *(_QWORD *)(v177 + 8 * v58);
          v205 = *(_QWORD *)(v177 + 8 * v16);
          v206 = v202;
          v207 = v192 - v202;
          if (v207 < 8)
            goto LABEL_149;
          v208 = 4 * v206;
          v209 = v205 + 4 * v206;
          v210 = v205 + 4 * v192;
          v211 = v209 >= v204 + 4 * v192 || v204 + 4 * v206 >= v210;
          v212 = !v211;
          if (v203 + 4 * v206 < v210 && v209 < v203 + 4 * v192)
            goto LABEL_149;
          if (v212)
            goto LABEL_149;
          v214 = v207 - (v192 & 7) + v206;
          v215 = v206 + (v192 & 7) - v192;
          v216 = (float32x4_t *)(v205 + v208 + 16);
          v217 = (float32x4_t *)(v203 + v208 + 16);
          v218 = (float32x4_t *)(v204 + v208 + 16);
          do
          {
            v219 = vmlaq_f32(*v216, *v218, *v217);
            v216[-1] = vmlaq_f32(v216[-1], v218[-1], v217[-1]);
            *v216 = v219;
            v216 += 2;
            v217 += 2;
            v218 += 2;
            v215 += 8;
          }
          while (v215);
          v206 = v214;
          if ((v192 & 7) != 0)
          {
LABEL_149:
            v220 = v192 - v206;
            v221 = (float *)(v205 + 4 * v206);
            v222 = (float *)(v204 + 4 * v206);
            v223 = (float *)(v203 + 4 * v206);
            do
            {
              v224 = *v223++;
              v225 = v224;
              v226 = *v222++;
              *v221 = *v221 + (float)(v226 * v225);
              ++v221;
              --v220;
            }
            while (v220);
          }
        }
      }
      v12 = v255 + 1;
      v9 = v252;
    }
    while (v255 + 1 != v252);
  }
}

void sub_19C16091C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(_QWORD *)(v28 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_19C1609A8(uint64_t a1, int a2, _QWORD *a3, float32x4_t **a4, float32x4_t **a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11)
{
  void *v15;
  void *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  float32x4_t result;
  float32x4_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int *v52;
  int v53;
  int v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t v60;
  int v61;
  int v62;
  uint64_t v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  __int32 *v72;
  __int32 *v73;
  int v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 v81;
  float32x4_t *v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  uint64_t v86;
  __int32 *v87;
  __int32 *v88;
  __int32 v89;
  float32x4_t *v90;
  float32x4_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float32x4_t v100;
  uint64_t v101;
  float *v102;
  float *v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int *v111;
  int v112;
  float32x4_t *v113;
  float32x4_t *v114;
  int v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float32x4_t *v127;
  float32x4_t *v128;
  float32x4_t v129;
  uint64_t v130;
  float *v131;
  float *v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  int *v141;
  int v142;
  float32x4_t *v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t *v148;
  float32x4_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float32x4_t *v156;
  float32x4_t *v157;
  float32x4_t v158;
  uint64_t v159;
  float *v160;
  float *v161;
  float v162;
  float32x4_t *v163;
  float32x4_t *v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t *v168;
  uint64_t v169;
  float32x4_t v170;
  __int128 *v171;
  _OWORD *v172;
  uint64_t v173;
  __int128 v174;
  __int128 *v175;
  _OWORD *v176;
  uint64_t v177;
  __int128 v178;
  float32x4_t **v179;
  float32x4_t **v180;
  _QWORD *v181;

  if (a2)
    sub_19C2210D4(545);
  if (!*(_QWORD *)(a1 + 552))
  {
    v15 = (void *)operator new[]();
    v16 = v15;
    if (a9 >= 1)
      bzero(v15, 4 * (3 * a9));
    *(_QWORD *)(a1 + 552) = v16;
    v17 = *(char **)(a1 + 2000);
    v18 = *(_QWORD *)(a1 + 2008);
    v181 = a3;
    if ((unint64_t)v17 < v18)
    {
      *(_QWORD *)v17 = v16;
      v19 = (uint64_t)(v17 + 8);
LABEL_27:
      *(_QWORD *)(a1 + 2000) = v19;
      a3 = v181;
      goto LABEL_28;
    }
    v179 = a4;
    v180 = a5;
    v20 = (char **)(a1 + 1992);
    v21 = *(char **)(a1 + 1992);
    v22 = (char *)(v17 - v21);
    v23 = (v17 - v21) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_19C07DA0C();
    v25 = v18 - (_QWORD)v21;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        sub_19C07C7FC();
      v27 = operator new(8 * v26);
      v22 = (char *)(v17 - v21);
      v20 = (char **)(a1 + 1992);
      v28 = &v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v16;
      v19 = (uint64_t)(v28 + 1);
      v30 = (char *)(v17 - v21);
      if (v17 == v21)
        goto LABEL_25;
    }
    else
    {
      v27 = 0;
      v28 = (_QWORD *)(8 * v23);
      v29 = 0;
      *(_QWORD *)(8 * v23) = v16;
      v19 = 8 * v23 + 8;
      v30 = (char *)(v17 - v21);
      if (v17 == v21)
      {
LABEL_25:
        *(_QWORD *)(a1 + 1992) = v28;
        *(_QWORD *)(a1 + 2000) = v19;
        *(_QWORD *)(a1 + 2008) = v29;
        a4 = v179;
        a5 = v180;
        if (v17)
          operator delete(v17);
        goto LABEL_27;
      }
    }
    v31 = (unint64_t)(v30 - 8);
    if (v31 < 0x58)
      goto LABEL_130;
    if ((unint64_t)(v17 - v27 - (_QWORD)v22) < 0x20)
      goto LABEL_130;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v17[-v33];
    v28 = (_QWORD *)((char *)v28 - v33);
    v35 = &v27[8 * v23 - 16];
    v36 = v17 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v17 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_130:
      do
      {
        v39 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v28 = v39;
      }
      while (v17 != v21);
    }
    v17 = *v20;
    goto LABEL_25;
  }
LABEL_28:
  cblas_sgemv_NEWLAPACK();
  if (!a11)
  {
    if (a9 < 1)
      return result;
    v63 = 0;
    v64 = *(float32x4_t **)(a1 + 552);
    v65 = (float32x4_t *)*a3;
    if (a9 < 8)
      goto LABEL_48;
    if ((unint64_t)((char *)v65 - (char *)v64) < 0x20)
      goto LABEL_48;
    v63 = a9 & 0xFFFFFFF8;
    v66 = v64 + 1;
    v67 = v65 + 1;
    v68 = v63;
    do
    {
      result = v66[-1];
      v69 = *v66;
      v67[-1] = result;
      *v67 = v69;
      v66 += 2;
      v67 += 2;
      v68 -= 8;
    }
    while (v68);
    if (v63 != a9)
    {
LABEL_48:
      v70 = a9 - v63;
      v71 = 4 * v63;
      v72 = (__int32 *)((char *)v65 + v71);
      v73 = (__int32 *)((char *)v64 + v71);
      do
      {
        v74 = *v73++;
        *v72++ = v74;
        --v70;
      }
      while (v70);
    }
    v75 = *a4;
    if (a9 >= 8
      && (v76 = (float32x4_t *)((char *)v64 + 4 * a9),
          (unint64_t)((char *)v75 - (char *)v76) >= 0x20))
    {
      v77 = a9 & 0xFFFFFFF8;
      v163 = v76 + 1;
      v164 = v75 + 1;
      v165 = v77;
      do
      {
        result = v163[-1];
        v166 = *v163;
        v164[-1] = result;
        *v164 = v166;
        v163 += 2;
        v164 += 2;
        v165 -= 8;
      }
      while (v165);
      if (v77 == a9)
      {
LABEL_55:
        v82 = *a5;
        v83 = 2 * a9;
        if (a9 >= 8
          && (v84 = (float32x4_t *)((char *)v64 + 4 * v83), (unint64_t)((char *)v82 - (char *)v84) >= 0x20))
        {
          v85 = a9 & 0xFFFFFFF8;
          v167 = v84 + 1;
          v168 = v82 + 1;
          v169 = v85;
          do
          {
            result = v167[-1];
            v170 = *v167;
            v168[-1] = result;
            *v168 = v170;
            v167 += 2;
            v168 += 2;
            v169 -= 8;
          }
          while (v169);
          if (v85 == a9)
            return result;
        }
        else
        {
          v85 = 0;
        }
        v86 = a9 - v85;
        v87 = &v82->i32[v85];
        v88 = &v64->i32[v85 + v83];
        do
        {
          v89 = *v88++;
          result.i32[0] = v89;
          *v87++ = v89;
          --v86;
        }
        while (v86);
        return result;
      }
    }
    else
    {
      v77 = 0;
    }
    v78 = a9 - v77;
    v79 = &v75->i32[v77];
    v80 = &v64->i32[v77 + a9];
    do
    {
      v81 = *v80++;
      *v79++ = v81;
      --v78;
    }
    while (v78);
    goto LABEL_55;
  }
  v41 = (float32x4_t **)(a1 + 536);
  if (a9 <= 0)
  {
    sub_19C118B54((float **)(a1 + 536), "outvec0/gzx", a9);
    v61 = 0;
    v54 = -(-a9 >> 3);
    v62 = -8 * (-a9 >> 3);
    if (v62 >= a9)
      goto LABEL_72;
  }
  else
  {
    v42 = 0;
    v43 = *(_QWORD *)(a1 + 552);
    v44 = *(_QWORD *)(a1 + 536);
    if (a9 < 8)
      goto LABEL_35;
    if ((unint64_t)(v44 - v43) < 0x20)
      goto LABEL_35;
    v42 = a9 & 0x7FFFFFF8;
    v45 = (__int128 *)(v43 + 16);
    v46 = (_OWORD *)(v44 + 16);
    v47 = a9 & 0xFFFFFFF8;
    do
    {
      v48 = *v45;
      *(v46 - 1) = *(v45 - 1);
      *v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 8;
    }
    while (v47);
    if (v42 != a9)
    {
LABEL_35:
      v49 = a9 - v42;
      v50 = 4 * v42;
      v51 = (_DWORD *)(v44 + v50);
      v52 = (int *)(v43 + v50);
      do
      {
        v53 = *v52++;
        *v51++ = v53;
        --v49;
      }
      while (v49);
    }
    sub_19C118B54((float **)(a1 + 536), "outvec0/gzx", a9);
    v54 = a9 >> 3;
    if (a9 <= 7)
    {
      v61 = 0;
      v62 = 8 * v54;
      if (8 * v54 >= a9)
        goto LABEL_72;
    }
    else
    {
      v55 = 0;
      v56 = (float32x4_t *)*a3;
      v57 = *v41;
      do
      {
        v58 = &v56[2 * v55];
        v59 = &v57[2 * v55];
        v60 = vaddq_f32(v58[1], v59[1]);
        *v58 = vaddq_f32(*v58, *v59);
        v58[1] = v60;
        ++v55;
      }
      while (v54 != (_DWORD)v55);
      v61 = 1;
      v62 = 8 * v54;
      if (8 * v54 >= a9)
        goto LABEL_72;
    }
  }
  v90 = *v41;
  v91 = (float32x4_t *)*a3;
  v92 = v62;
  v93 = a9 - (uint64_t)v62;
  if (v93 < 8)
    goto LABEL_70;
  v94 = 4 * v62;
  if ((char *)v91 + v94 < (char *)&v90->f32[a9] && (char *)v90 + v94 < (char *)&v91->f32[a9])
    goto LABEL_70;
  v95 = v93 - (a9 & 7) + v62;
  v96 = v62 + (a9 & 7) - a9;
  v97 = v94 + 16;
  v98 = (float32x4_t *)((char *)v90 + v94 + 16);
  v99 = (float32x4_t *)((char *)v91 + v97);
  do
  {
    v100 = vaddq_f32(*v99, *v98);
    v99[-1] = vaddq_f32(v99[-1], v98[-1]);
    *v99 = v100;
    v98 += 2;
    v99 += 2;
    v96 += 8;
  }
  while (v96);
  v92 = v95;
  if ((a9 & 7) != 0)
  {
LABEL_70:
    v101 = a9 - v92;
    v102 = &v91->f32[v92];
    v103 = &v90->f32[v92];
    do
    {
      v104 = *v103++;
      *v102 = *v102 + v104;
      ++v102;
      --v101;
    }
    while (v101);
  }
LABEL_72:
  if (a9 < 1)
    goto LABEL_78;
  v105 = *(_QWORD *)(a1 + 552);
  v106 = *(_QWORD *)(a1 + 536);
  if (a9 < 8 || (v107 = 4 * a9 + v105, (unint64_t)(v106 - v107) < 0x20))
  {
    v108 = 0;
LABEL_76:
    v109 = a9 - v108;
    v110 = (_DWORD *)(v106 + 4 * v108);
    v111 = (int *)(v105 + 4 * (v108 + a9));
    do
    {
      v112 = *v111++;
      *v110++ = v112;
      --v109;
    }
    while (v109);
    goto LABEL_78;
  }
  v108 = a9 & 0xFFFFFFF8;
  v171 = (__int128 *)(v107 + 16);
  v172 = (_OWORD *)(v106 + 16);
  v173 = v108;
  do
  {
    v174 = *v171;
    *(v172 - 1) = *(v171 - 1);
    *v172 = v174;
    v171 += 2;
    v172 += 2;
    v173 -= 8;
  }
  while (v173);
  if (v108 != a9)
    goto LABEL_76;
LABEL_78:
  sub_19C118B54((float **)(a1 + 536), "outvec1/grx", a9);
  if (v61)
  {
    v113 = *a4;
    v114 = *v41;
    v115 = v54;
    do
    {
      v116 = *v114;
      v117 = v114[1];
      v114 += 2;
      v118 = vaddq_f32(v113[1], v117);
      *v113 = vaddq_f32(*v113, v116);
      v113[1] = v118;
      v113 += 2;
      --v115;
    }
    while (v115);
  }
  if (v62 < a9)
  {
    v119 = *v41;
    v120 = *a4;
    v121 = v62;
    v122 = a9 - (uint64_t)v62;
    if (v122 < 8)
      goto LABEL_88;
    v123 = 4 * v62;
    if ((char *)v120 + v123 < (char *)&v119->f32[a9] && (char *)v119 + v123 < (char *)&v120->f32[a9])
      goto LABEL_88;
    v124 = v122 - (a9 & 7) + v62;
    v125 = v62 + (a9 & 7) - a9;
    v126 = v123 + 16;
    v127 = (float32x4_t *)((char *)v119 + v123 + 16);
    v128 = (float32x4_t *)((char *)v120 + v126);
    do
    {
      v129 = vaddq_f32(*v128, *v127);
      v128[-1] = vaddq_f32(v128[-1], v127[-1]);
      *v128 = v129;
      v127 += 2;
      v128 += 2;
      v125 += 8;
    }
    while (v125);
    v121 = v124;
    if ((a9 & 7) != 0)
    {
LABEL_88:
      v130 = a9 - v121;
      v131 = &v120->f32[v121];
      v132 = &v119->f32[v121];
      do
      {
        v133 = *v132++;
        *v131 = *v131 + v133;
        ++v131;
        --v130;
      }
      while (v130);
    }
  }
  if (a9 < 1)
    goto LABEL_96;
  v134 = (2 * a9);
  v135 = *(_QWORD *)(a1 + 552);
  v136 = *(_QWORD *)(a1 + 536);
  if (a9 >= 8 && (v137 = 4 * v134 + v135, (unint64_t)(v136 - v137) >= 0x20))
  {
    v138 = a9 & 0xFFFFFFF8;
    v175 = (__int128 *)(v137 + 16);
    v176 = (_OWORD *)(v136 + 16);
    v177 = v138;
    do
    {
      v178 = *v175;
      *(v176 - 1) = *(v175 - 1);
      *v176 = v178;
      v175 += 2;
      v176 += 2;
      v177 -= 8;
    }
    while (v177);
    if (v138 == a9)
      goto LABEL_96;
  }
  else
  {
    v138 = 0;
  }
  v139 = a9 - v138;
  v140 = (_DWORD *)(v136 + 4 * v138);
  v141 = (int *)(v135 + 4 * (v138 + v134));
  do
  {
    v142 = *v141++;
    *v140++ = v142;
    --v139;
  }
  while (v139);
LABEL_96:
  sub_19C118B54((float **)(a1 + 536), "outvec2/gox", a9);
  if (v61)
  {
    v143 = *a5;
    v144 = *v41;
    do
    {
      v145 = *v144;
      v146 = v144[1];
      v144 += 2;
      v147 = vaddq_f32(v143[1], v146);
      result = vaddq_f32(*v143, v145);
      *v143 = result;
      v143[1] = v147;
      v143 += 2;
      --v54;
    }
    while (v54);
  }
  if (v62 < a9)
  {
    v148 = *v41;
    v149 = *a5;
    v150 = v62;
    v151 = a9 - (uint64_t)v62;
    if (v151 < 8)
      goto LABEL_106;
    v152 = 4 * v62;
    if ((char *)v149 + v152 < (char *)&v148->f32[a9] && (char *)v148 + v152 < (char *)&v149->f32[a9])
      goto LABEL_106;
    v153 = v151 - (a9 & 7) + v62;
    v154 = v62 + (a9 & 7) - a9;
    v155 = v152 + 16;
    v156 = (float32x4_t *)((char *)v148 + v152 + 16);
    v157 = (float32x4_t *)((char *)v149 + v155);
    do
    {
      result = vaddq_f32(v157[-1], v156[-1]);
      v158 = vaddq_f32(*v157, *v156);
      v157[-1] = result;
      *v157 = v158;
      v156 += 2;
      v157 += 2;
      v154 += 8;
    }
    while (v154);
    v150 = v153;
    if ((a9 & 7) != 0)
    {
LABEL_106:
      v159 = a9 - v150;
      v160 = &v149->f32[v150];
      v161 = &v148->f32[v150];
      do
      {
        v162 = *v161++;
        result.f32[0] = *v160 + v162;
        *v160++ = result.f32[0];
        --v159;
      }
      while (v159);
    }
  }
  return result;
}

void sub_19C161278(uint64_t a1, int a2, float **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  uint64_t v14;
  const void *v15;
  int64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  float32x4_t *v53;
  float32x4_t *v54;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int v59;
  uint64_t v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float v72;

  if ((a9 & 1) == 0)
  {
    if (!a2)
    {
      cblas_sgemv_NEWLAPACK();
      return;
    }
    v26 = *(const void **)a6;
    v25 = *(_QWORD *)(a6 + 8);
    v27 = v25 - *(_QWORD *)a6;
    if (v25 == *(_QWORD *)a6)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      if (v27 < 0)
        sub_19C07DA0C();
      v28 = (int *)operator new(v25 - *(_QWORD *)a6);
      v29 = &v28[v27 >> 2];
      memcpy(v28, v26, v27);
      v30 = 4 * (v27 >> 2);
      if (v30 == 8)
      {
        if (a7 >= 1)
        {
          v32 = *v28;
          v31 = v28[1];
          v33 = *a5;
          v34 = *a3;
          v35 = a7;
          do
          {
            *v34++ = *(float *)(v33 + 4 * v31) + *(float *)(v33 + 4 * v32);
            v33 += 4 * a8;
            --v35;
          }
          while (v35);
        }
        goto LABEL_55;
      }
    }
    if (a7 >= 1)
    {
      v44 = *a3;
      if (v29 != v28)
      {
        v45 = 0;
        v46 = v30 >> 2;
        v47 = *a5;
        if (v46 <= 1)
          v46 = 1;
        do
        {
          v44[v45] = 0.0;
          v48 = 0.0;
          v49 = v28;
          v50 = v46;
          do
          {
            v51 = *v49++;
            v48 = *(float *)(v47 + 4 * (v45 * a8 + v51)) + v48;
            v44[v45] = v48;
            --v50;
          }
          while (v50);
          ++v45;
        }
        while (v45 != a7);
        goto LABEL_56;
      }
      bzero(v44, 4 * a7);
    }
LABEL_55:
    if (!v28)
      return;
LABEL_56:
    operator delete(v28);
    return;
  }
  if (!a2)
  {
    cblas_sgemv_NEWLAPACK();
    goto LABEL_41;
  }
  v15 = *(const void **)a6;
  v14 = *(_QWORD *)(a6 + 8);
  v16 = v14 - *(_QWORD *)a6;
  if (v14 == *(_QWORD *)a6)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_21;
  }
  if (v16 < 0)
    sub_19C07DA0C();
  v17 = (int *)operator new(v14 - *(_QWORD *)a6);
  v18 = &v17[v16 >> 2];
  memcpy(v17, v15, v16);
  v19 = 4 * (v16 >> 2);
  if (v19 != 8)
  {
LABEL_21:
    if (a7 >= 1)
    {
      v36 = *(_DWORD **)(a1 + 536);
      if (v18 != v17)
      {
        v37 = 0;
        v38 = v19 >> 2;
        v39 = *a5;
        if (v38 <= 1)
          v38 = 1;
        do
        {
          v36[v37] = 0;
          v40 = 0.0;
          v41 = v17;
          v42 = v38;
          do
          {
            v43 = *v41++;
            v40 = *(float *)(v39 + 4 * (v37 * a8 + v43)) + v40;
            *(float *)&v36[v37] = v40;
            --v42;
          }
          while (v42);
          ++v37;
        }
        while (v37 != a7);
        goto LABEL_40;
      }
      bzero(v36, 4 * a7);
    }
    goto LABEL_39;
  }
  if (a7 >= 1)
  {
    v21 = *v17;
    v20 = v17[1];
    v22 = *a5;
    v23 = *(float **)(a1 + 536);
    v24 = a7;
    do
    {
      *v23++ = *(float *)(v22 + 4 * v20) + *(float *)(v22 + 4 * v21);
      v22 += 4 * a8;
      --v24;
    }
    while (v24);
  }
LABEL_39:
  if (v17)
LABEL_40:
    operator delete(v17);
LABEL_41:
  v52 = a7 / 8;
  if (a7 >= 8)
  {
    v53 = (float32x4_t *)*a3;
    v54 = *(float32x4_t **)(a1 + 536);
    v55 = a7 / 8;
    do
    {
      v56 = *v54;
      v57 = v54[1];
      v54 += 2;
      v58 = vaddq_f32(v53[1], v57);
      *v53 = vaddq_f32(*v53, v56);
      v53[1] = v58;
      v53 += 2;
      --v55;
    }
    while (v55);
  }
  v59 = 8 * v52;
  if (8 * v52 < a7)
  {
    v60 = *(_QWORD *)(a1 + 536);
    v61 = *a3;
    v62 = v59;
    if ((unint64_t)(a7 - (uint64_t)v59) < 8)
      goto LABEL_51;
    v63 = 4 * v59;
    if ((unint64_t)&v61[(unint64_t)v63 / 4] < v60 + 4 * a7 && v60 + v63 < (unint64_t)&v61[a7])
      goto LABEL_51;
    v64 = v59 + (a7 & 7) - a7;
    v65 = v63 + 16;
    v66 = (float32x4_t *)(v60 + v63 + 16);
    v67 = (float32x4_t *)((char *)v61 + v65);
    do
    {
      v68 = vaddq_f32(*v67, *v66);
      v67[-1] = vaddq_f32(v67[-1], v66[-1]);
      *v67 = v68;
      v66 += 2;
      v67 += 2;
      v64 += 8;
    }
    while (v64);
    v62 = a7 - (a7 & 7);
    if ((a7 & 7) != 0)
    {
LABEL_51:
      v69 = a7 - v62;
      v70 = &v61[v62];
      v71 = (float *)(v60 + 4 * v62);
      do
      {
        v72 = *v71++;
        *v70 = *v70 + v72;
        ++v70;
        --v69;
      }
      while (v69);
    }
  }
}

void sub_19C1616C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C1616F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  *a1 = &unk_1E3D1F5A8;
  sub_19C15D900(a1);
  v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19C22CB78((uint64_t)(a1 + 239));
  sub_19C22CB78((uint64_t)(a1 + 230));
  sub_19C22CB78((uint64_t)(a1 + 221));
  sub_19C22CB78((uint64_t)(a1 + 212));
  sub_19C22CB78((uint64_t)(a1 + 203));
  sub_19C22CB78((uint64_t)(a1 + 194));
  sub_19C22CB78((uint64_t)(a1 + 185));
  sub_19C22CB78((uint64_t)(a1 + 176));
  sub_19C22CB78((uint64_t)(a1 + 167));
  sub_19C22CB78((uint64_t)(a1 + 158));
  sub_19C22CB78((uint64_t)(a1 + 149));
  sub_19C101AC4(a1 + 119);
  sub_19C101AC4(a1 + 104);
  sub_19C101AC4(a1 + 89);
  v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  v16 = a1[26];
  if (v16)
  {
    v17 = a1[27];
    v18 = (void *)a1[26];
    if (v17 != v16)
    {
      v19 = a1[27];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1E3D1E2D8;
  v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19C161950(uint64_t a1, int a2, __int128 *a3, float a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v66;
  void **v67;
  char **v68;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1F070;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  v5 = a3[2];
  v6 = a3[3];
  v7 = *((_QWORD *)a3 + 8);
  v9 = *a3;
  v8 = a3[1];
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  v66 = (void **)(a1 + 192);
  v67 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19C22CB44(a1 + 216);
  v68 = (char **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  v10 = dword_1EE418968;
  v11 = dword_1EE418968;
  v12 = *(_QWORD *)(a1 + 168);
  v13 = (*(_QWORD *)(a1 + 176) - v12) >> 3;
  if (dword_1EE418968 <= v13)
  {
    if (dword_1EE418968 < v13)
      *(_QWORD *)(a1 + 176) = v12 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v67, dword_1EE418968 - v13);
    v10 = dword_1EE418968;
    v11 = dword_1EE418968;
  }
  v14 = *(_QWORD *)(a1 + 192);
  v15 = (*(_QWORD *)(a1 + 200) - v14) >> 3;
  if (v11 <= v15)
  {
    if (v11 < v15)
      *(_QWORD *)(a1 + 200) = v14 + 8 * v11;
  }
  else
  {
    sub_19C098930(v66, v11 - v15);
    v10 = dword_1EE418968;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v10 >= 1)
  {
    for (i = 0; i < dword_1EE418968; ++i)
    {
      v18 = *(unsigned int *)(a1 + 44);
      v19 = (void *)operator new[]();
      v20 = v19;
      if ((int)v18 >= 1)
        bzero(v19, 4 * v18);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i) = v20;
      v21 = *(unsigned int *)(a1 + 44);
      v22 = (void *)operator new[]();
      v23 = v22;
      if ((int)v21 >= 1)
        bzero(v22, 4 * v21);
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i) = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * i);
      v26 = *(char **)(a1 + 296);
      v25 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v26 < v25)
      {
        *(_QWORD *)v26 = v24;
        v27 = v26 + 8;
        goto LABEL_30;
      }
      v28 = *v68;
      v29 = v26 - *v68;
      v30 = v29 >> 3;
      v31 = (v29 >> 3) + 1;
      if (v31 >> 61)
        sub_19C07DA0C();
      v32 = v25 - (_QWORD)v28;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          sub_19C07C7FC();
        v34 = operator new(8 * v33);
        v35 = &v34[8 * v30];
        *v35 = v24;
        v27 = (char *)(v35 + 1);
        if (v26 == v28)
        {
LABEL_28:
          *(_QWORD *)(a1 + 288) = v35;
          *(_QWORD *)(a1 + 296) = v27;
          *(_QWORD *)(a1 + 304) = &v34[8 * v33];
          if (!v26)
            goto LABEL_30;
LABEL_29:
          operator delete(v26);
          goto LABEL_30;
        }
      }
      else
      {
        v34 = 0;
        v35 = (_QWORD *)(8 * v30);
        *(_QWORD *)(8 * v30) = v24;
        v27 = (char *)(8 * v30 + 8);
        if (v26 == v28)
          goto LABEL_28;
      }
      v49 = v26 - 8 - v28;
      if (v49 < 0x58)
        goto LABEL_68;
      if ((unint64_t)(v26 - &v34[v29]) < 0x20)
        goto LABEL_68;
      v50 = (v49 >> 3) + 1;
      v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      v52 = &v26[-v51];
      v35 = (_QWORD *)((char *)v35 - v51);
      v53 = &v34[8 * v30 - 16];
      v54 = (__int128 *)(v26 - 16);
      v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v26 = v52;
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          v57 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v57;
        }
        while (v26 != v28);
      }
      v26 = *v68;
      *(_QWORD *)(a1 + 288) = v35;
      *(_QWORD *)(a1 + 296) = v27;
      *(_QWORD *)(a1 + 304) = &v34[8 * v33];
      if (v26)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(a1 + 296) = v27;
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * i);
      v37 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v27 < v37)
      {
        *(_QWORD *)v27 = v36;
        v17 = (uint64_t)(v27 + 8);
        goto LABEL_12;
      }
      v38 = *v68;
      v39 = v27 - *v68;
      v40 = v39 >> 3;
      v41 = (v39 >> 3) + 1;
      if (v41 >> 61)
        sub_19C07DA0C();
      v42 = v37 - (_QWORD)v38;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          sub_19C07C7FC();
        v44 = operator new(8 * v43);
        v45 = &v44[8 * v40];
        v46 = &v44[8 * v43];
        *v45 = v36;
        v17 = (uint64_t)(v45 + 1);
        if (v27 == v38)
        {
LABEL_52:
          *(_QWORD *)(a1 + 288) = v45;
          *(_QWORD *)(a1 + 296) = v17;
          *(_QWORD *)(a1 + 304) = v46;
LABEL_60:
          operator delete(v27);
          goto LABEL_12;
        }
      }
      else
      {
        v44 = 0;
        v45 = (_QWORD *)(8 * v40);
        v46 = 0;
        *(_QWORD *)(8 * v40) = v36;
        v17 = 8 * v40 + 8;
        if (v27 == v38)
          goto LABEL_52;
      }
      v47 = v27 - 8 - v38;
      if (v47 < 0x58)
      {
        v48 = v27;
        goto LABEL_58;
      }
      if ((unint64_t)(v27 - &v44[v39]) < 0x20)
      {
        v48 = v27;
        do
        {
LABEL_58:
          v64 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v45 = v64;
        }
        while (v48 != v38);
        goto LABEL_59;
      }
      v58 = (v47 >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v27[-v59];
      v45 = (_QWORD *)((char *)v45 - v59);
      v60 = &v44[8 * v40 - 16];
      v61 = (__int128 *)(v27 - 16);
      v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *v61;
        *(v60 - 1) = *(v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      v27 = *(char **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v45;
      *(_QWORD *)(a1 + 296) = v17;
      *(_QWORD *)(a1 + 304) = v46;
      if (v27)
        goto LABEL_60;
LABEL_12:
      *(_QWORD *)(a1 + 296) = v17;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return a1;
}

void sub_19C161E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12)
{
  _QWORD *v12;
  void *v14;
  void *v15;
  void *v16;

  v14 = *a10;
  if (*a10)
  {
    v12[25] = v14;
    operator delete(v14);
    v15 = *a11;
    if (!*a11)
    {
LABEL_3:
      *v12 = &unk_1E3D1E2D8;
      v16 = (void *)v12[1];
      if (!v16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  v12[22] = v15;
  operator delete(v15);
  *v12 = &unk_1E3D1E2D8;
  v16 = (void *)v12[1];
  if (!v16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v12[2] = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_19C161EF8()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C161F08(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19C161F10(uint64_t a1)
{
  return a1 + 192;
}

void sub_19C161F18()
{
  sub_19C2210D4(1);
}

void sub_19C161F28()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C161F38()
{
  return 0;
}

_BYTE *sub_19C161F40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v6 = *(int *)(a2 + 72);
  v7 = (int *)(*(_QWORD *)a2 + v6);
  if ((unint64_t)v7 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4)
  {
    v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8)
    sub_19C2210D4(3);
  v9 = *a3;
  v10 = *(unsigned __int8 *)(a1 + 161);
  v11 = sub_19C2210A4();
  sub_19C101BB8((_BYTE *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  v12 = *a3;
  v13 = *(unsigned __int8 *)(a1 + 161);
  v14 = sub_19C2210A4();
  sub_19C101BB8((_BYTE *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  v15 = *a3;
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = sub_19C2210A4();
  sub_19C101BB8((_BYTE *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  v18 = *a3;
  v19 = *(unsigned __int8 *)(a1 + 161);
  v20 = sub_19C2210A4();
  return sub_19C101BB8((_BYTE *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, *(_DWORD *)(a1 + 44));
}

void sub_19C162074(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int v9;
  int v10;
  int v11;
  int v12;

  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 44));
  v9 = sub_19C2210A4();
  sub_19C11A244((void **)(a1 + 128), __stream, a3, 3, v9, a5, *(_DWORD *)(a1 + 44));
  v10 = sub_19C2210A4();
  sub_19C11A244((void **)(a1 + 136), __stream, a3, 3, v10, a5, *(_DWORD *)(a1 + 44));
  v11 = sub_19C2210A4();
  sub_19C11A244((void **)(a1 + 144), __stream, a3, 3, v11, a5, *(_DWORD *)(a1 + 44));
  v12 = sub_19C2210A4();
  sub_19C11A244((void **)(a1 + 152), __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 44));
}

void sub_19C1621A0(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19C11A63C(a1);
  operator delete(__p);
}

void sub_19C162230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C16224C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;

  v3 = a1[36];
  v2 = a1[37];
  if (v2 == v3)
  {
    v3 = a1[37];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v3 = a1[36];
        v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19C1622B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C1622C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19C1622D0()
{
  sub_19C2210D4(5);
}

int *sub_19C1622E0(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int *v6;
  uint64_t i;
  int32x2_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  BOOL v18;
  BOOL v20;
  BOOL v22;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    v6 = result;
    for (i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((_QWORD *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      v9 = v6[11];
      v10 = *(float32x4_t **)(*((_QWORD *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        v11 = (float32x4_t *)*((_QWORD *)v6 + 16);
        v12 = (float32x4_t *)*((_QWORD *)v6 + 17);
        v13 = (float32x4_t *)*((_QWORD *)v6 + 18);
        v14 = (float32x4_t *)*((_QWORD *)v6 + 19);
        if (v9 >= 8)
        {
          v15 = 0;
          v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            v15 = v9 & 0x7FFFFFF8;
            v24 = v11 + 1;
            v25 = v10 + 1;
            v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            v27 = v12 + 1;
            v28 = v14 + 1;
            v29 = v13 + 1;
            v30 = v9 & 0xFFFFFFF8;
            do
            {
              v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9)
              goto LABEL_3;
          }
        }
        else
        {
          v15 = 0;
        }
        v32 = v9 - v15;
        v33 = v15;
        v34 = &v10->f32[v15];
        v35 = &v14->f32[v33];
        v36 = &v13->f32[v33];
        v37 = &v12->f32[v33];
        v38 = &v11->f32[v33];
        do
        {
          v39 = *v38++;
          v40 = v39;
          v41 = *v37++;
          v42 = sqrtf(v41 + *(float *)v8.i32);
          v43 = *v36++;
          v44 = v43;
          v45 = *v35++;
          *v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      result = (int *)memmove(*(void **)(*((_QWORD *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

_QWORD *sub_19C1624CC(_QWORD *a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CF10, 0);
  if (!result)
    __cxa_bad_cast();
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19C162534()
{
  sub_19C2210D4(5);
}

void sub_19C162544()
{
  sub_19C2210D4(5);
}

void sub_19C162558(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C16256C(a1);
  operator delete(v1);
}

_QWORD *sub_19C16256C(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &unk_1E3D1F070;
  v4 = a1 + 36;
  v2 = (void **)a1[36];
  v3 = (void **)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        v2 = (void **)a1[36];
        v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19C22CB78((uint64_t)(a1 + 27));
  v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1E3D1E2D8;
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19C162630(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  char **v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void **v70;
  char __p[17];
  char v72;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1EBC8;
  v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = a4;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_BYTE *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19C2775D0;
  *(_DWORD *)(a1 + 328) = a5;
  *(_BYTE *)(a1 + 528) = 0;
  if (v8 != a2)
    sub_19C11EAD0(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  *(_QWORD *)(a1 + 224) = a3;
  v72 = 16;
  strcpy(__p, "From constructor");
  sub_19C11B874(a1);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v9)
  {
    v10 = 0;
    v11 = (void **)(a1 + 256);
    while (1)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8 * v10) + 272))(*(_QWORD *)(v9 + 8 * v10));
      v14 = v13;
      v16 = *(char **)(a1 + 264);
      v15 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)v16 = v13;
        v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      v18 = (char *)*v11;
      v19 = v16 - (_BYTE *)*v11;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        goto LABEL_73;
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23)
        break;
      v24 = 0;
      v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      v17 = 4 * v20 + 4;
      if (v16 != v18)
        goto LABEL_21;
LABEL_27:
      *(_QWORD *)(a1 + 256) = v25;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = &v24[4 * v23];
      if (v18)
        operator delete(v18);
LABEL_29:
      *(_QWORD *)(a1 + 264) = v17;
      if (!v10)
        goto LABEL_7;
      v36 = *(char **)(a1 + 360);
      v35 = *(_QWORD *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        v37 = (char *)*v70;
        v38 = v36 - (_BYTE *)*v70;
        v39 = v38 >> 2;
        v40 = (v38 >> 2) + 1;
        if (v40 >> 62)
LABEL_73:
          sub_19C07DA0C();
        v41 = v35 - (_QWORD)v37;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 62)
LABEL_72:
            sub_19C07C7FC();
          v43 = operator new(4 * v42);
          v44 = &v43[4 * v39];
          *v44 = v10;
          v12 = (uint64_t)(v44 + 1);
          if (v36 == v37)
            goto LABEL_48;
LABEL_42:
          v45 = v36 - 4 - v37;
          if (v45 < 0x2C)
            goto LABEL_76;
          if ((unint64_t)(v36 - &v43[v38]) < 0x20)
            goto LABEL_76;
          v46 = (v45 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v36[-v47];
          v44 = (_DWORD *)((char *)v44 - v47);
          v49 = &v43[4 * v39 - 16];
          v50 = v36 - 16;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v43 = 0;
          v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          v12 = 4 * v39 + 4;
          if (v36 != v37)
            goto LABEL_42;
        }
LABEL_48:
        *(_QWORD *)(a1 + 352) = v44;
        *(_QWORD *)(a1 + 360) = v12;
        *(_QWORD *)(a1 + 368) = &v43[4 * v42];
        if (v37)
          operator delete(v37);
        goto LABEL_6;
      }
      *(_DWORD *)v36 = v10;
      v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(_QWORD *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      v9 = *(_QWORD *)(a1 + 80);
      if (v10 >= (*(_QWORD *)(a1 + 88) - v9) >> 3)
        goto LABEL_50;
    }
    if (v23 >> 62)
      goto LABEL_72;
    v24 = operator new(4 * v23);
    v25 = &v24[4 * v20];
    *v25 = v14;
    v17 = (uint64_t)(v25 + 1);
    if (v16 == v18)
      goto LABEL_27;
LABEL_21:
    v26 = v16 - 4 - v18;
    if (v26 < 0x2C)
      goto LABEL_77;
    if ((unint64_t)(v16 - &v24[v19]) < 0x20)
      goto LABEL_77;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v16[-v28];
    v25 = (_DWORD *)((char *)v25 - v28);
    v30 = &v24[4 * v20 - 16];
    v31 = v16 - 16;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  v54 = dword_1EE418968;
  v55 = *(_QWORD *)(a1 + 376);
  v56 = (*(_QWORD *)(a1 + 384) - v55) >> 2;
  if (dword_1EE418968 <= v56)
  {
    if (dword_1EE418968 < v56)
      *(_QWORD *)(a1 + 384) = v55 + 4 * dword_1EE418968;
  }
  else
  {
    sub_19C101928(a1 + 376, dword_1EE418968 - v56);
    v54 = dword_1EE418968;
  }
  v57 = *(_QWORD *)(a1 + 400);
  v58 = (*(_QWORD *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58)
      *(_QWORD *)(a1 + 408) = v57 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 400, v54 - v58);
    v54 = dword_1EE418968;
  }
  v59 = *(_QWORD *)(a1 + 424);
  v60 = (*(_QWORD *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60)
      *(_QWORD *)(a1 + 432) = v59 + 4 * v54;
  }
  else
  {
    sub_19C101928(a1 + 424, v54 - v60);
  }
  v61 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v62 = *(_QWORD *)(a1 + 544);
  v63 = *(_QWORD *)(a1 + 536);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        v66 = *(_QWORD *)(a1 + 544);
        do
        {
          v68 = *(void **)(v66 - 24);
          v66 -= 24;
          v67 = v68;
          if (v68)
          {
            *(_QWORD *)(v62 - 16) = v67;
            operator delete(v67);
          }
          v62 = v66;
        }
        while (v66 != v65);
      }
      *(_QWORD *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19C167E70(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19C162B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _QWORD *v22;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a22 < 0)
  {
    operator delete(__p);
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19C0830E8(v24);
      v26 = (void *)v22[56];
      if (!v26)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v24 = (void **)(v22 + 59);
    sub_19C0830E8(a12);
    v25 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19C0830E8(v24);
  v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    v27 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    v28 = *a14;
    if (!*a14)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    v29 = *a15;
    if (!*a15)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    v30 = *a16;
    if (!*a16)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    v31 = (void *)v22[38];
    if (!v31)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    v32 = *a11;
    if (!*a11)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19C10850C(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19C10850C(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_19C162CFC(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19C162D04(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19C162D0C(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19C162D14(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19C162D78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C162DF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *sub_19C162E70(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C162F38(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C163000(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

_QWORD *sub_19C1630A0(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19C163140(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C1631A0(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

