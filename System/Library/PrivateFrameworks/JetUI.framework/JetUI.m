uint64_t getEnumTagSinglePayload for FontUseCase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

void destroy for FontSource(uint64_t a1)
{
  sub_1AC68D860(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

ValueMetadata *type metadata accessor for FontSource()
{
  return &type metadata for FontSource;
}

ValueMetadata *type metadata accessor for FontUseCase()
{
  return &type metadata for FontUseCase;
}

uint64_t storeEnumTagSinglePayload for FontUseCase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

void destroy for FontUseCase(uint64_t a1)
{
  sub_1AC6921AC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

id sub_1AC688BE8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  qword_1ED0BE280 = (uint64_t)result;
  return result;
}

uint64_t sub_1AC688C18(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v9 = *v4 + 16;
  swift_beginAccess();
  sub_1AC68E218(v9, (uint64_t)v13);
  v10 = v14;
  v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)(v11 + 8) + 24))(v10, a1, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

id sub_1AC688CBC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  qword_1ED0BE260 = (uint64_t)result;
  return result;
}

uint64_t sub_1AC688D20(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1AF440830](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id sub_1AC688D60()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  qword_1ED0BD480 = (uint64_t)result;
  return result;
}

BOOL sub_1AC688DA0()
{
  return sub_1AC688DC4();
}

BOOL sub_1AC688DC4()
{
  uint64_t v0;
  unint64_t v1;
  _BOOL4 v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    if (v1)
      v2 = objc_msgSend((id)v1, sel_length) == 0;
    else
      v2 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v1 & 0xFFFFFFFFFFFFLL;
    v5 = v4 == 0;
    if (v3)
      v2 = v5;
    else
      v2 = 1;
  }
  return !v2;
}

double CGFloat.scalingLike(_:with:)(_QWORD *a1, void *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = a1[3];
  v6 = a1[4];
  v7 = __swift_project_boxed_opaque_existential_1(a1, v5);
  return sub_1AC68ACCC(a3, (uint64_t)v7, a2, v5, v6);
}

uint64_t sub_1AC688E98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v13;

  v2 = sub_1AC725854();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE198);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  if (v9)
  {
    v10 = (void *)v9;
    sub_1AC725830();

    v11 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v11(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(a1, v8, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  sub_1AC6E86E8((uint64_t)v8);
  return sub_1AC725848();
}

uint64_t initializeWithCopy for TextAppearance(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t sub_1AC689010()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AC689088(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1AC6890C8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  return v3 != 0;
}

uint64_t sub_1AC68911C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 160);
}

uint64_t sub_1AC689158()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AC725A1C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1AC6891D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AC725A1C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AC689240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F0);
  MEMORY[0x1E0C80A78]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED0BD778 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BD5D8);
  v6 = sub_1AC725968();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v4, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  swift_beginAccess();
  sub_1AC697520((uint64_t)v4, v5);
  return swift_endAccess();
}

uint64_t sub_1AC689358()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ReusePool.init(recycler:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  *a5 = sub_1AC7263E8();
  v11 = type metadata accessor for ReusePool(0, a3, a4, v10);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))((char *)a5 + *(int *)(v11 + 36), a1, a3);
  *(uint64_t *)((char *)a5 + *(int *)(v11 + 40)) = a2;
  return result;
}

uint64_t type metadata accessor for ReusePool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReusePool);
}

double sub_1AC6894F4(uint64_t a1, double a2, double a3)
{
  _QWORD **v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **v3) + 0x50))(v11);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v9 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 8))(a1, v7, v8, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

void sub_1AC6895B4()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  qword_1ED0BD790 = (uint64_t)v1;
}

uint64_t sub_1AC68961C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t VerticalStack.Properties.bottomSpacing.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

uint64_t initializeWithCopy for Resize(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  if (*(_BYTE *)(a2 + 80) == 1)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 80) = 1;
    swift_retain();
  }
  else
  {
    v5 = (_OWORD *)(a1 + 40);
    v6 = (_OWORD *)(a2 + 40);
    if (*(_BYTE *)(a2 + 80))
    {
      v9 = *(_OWORD *)(a2 + 56);
      *v5 = *v6;
      *(_OWORD *)(a1 + 56) = v9;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      *(_BYTE *)(a1 + 80) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 128) == 1)
  {
    v13 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v13;
    *(_BYTE *)(a1 + 128) = 1;
    swift_retain();
  }
  else
  {
    v10 = (_OWORD *)(a1 + 88);
    v11 = (_OWORD *)(a2 + 88);
    if (*(_BYTE *)(a2 + 128))
    {
      v14 = *(_OWORD *)(a2 + 104);
      *v10 = *v11;
      *(_OWORD *)(a1 + 104) = v14;
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 112) = v12;
      (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
      *(_BYTE *)(a1 + 128) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 176) == 1)
  {
    v18 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v18;
    *(_BYTE *)(a1 + 176) = 1;
    swift_retain();
  }
  else
  {
    v15 = (_OWORD *)(a1 + 136);
    v16 = (_OWORD *)(a2 + 136);
    if (*(_BYTE *)(a2 + 176))
    {
      v19 = *(_OWORD *)(a2 + 152);
      *v15 = *v16;
      *(_OWORD *)(a1 + 152) = v19;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      *(_BYTE *)(a1 + 176) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 224) == 1)
  {
    v23 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v23;
    *(_BYTE *)(a1 + 224) = 1;
    swift_retain();
  }
  else
  {
    v20 = (_OWORD *)(a1 + 184);
    v21 = (_OWORD *)(a2 + 184);
    if (*(_BYTE *)(a2 + 224))
    {
      v24 = *(_OWORD *)(a2 + 200);
      *v20 = *v21;
      *(_OWORD *)(a1 + 200) = v24;
      *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
    }
    else
    {
      v22 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 208) = v22;
      (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
      *(_BYTE *)(a1 + 224) = 0;
    }
  }
  return a1;
}

uint64_t initializeWithCopy for HorizontalStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StaticDimension(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AC689928()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 72);
}

uint64_t type metadata accessor for LayoutViewPlaceholder()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ReusePool.drain()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v19 = *(_QWORD *)(v0 + 16);
  v20 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v17 - v5;
  v22 = *v1;
  v7 = sub_1AC72646C();
  swift_bridgeObjectRetain();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF38], v7);
  sub_1AC726754();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_1AC726460();
  swift_unknownObjectRetain();
  v14 = sub_1AC726730();
  v15 = sub_1AC726748();
  v21 = v14;
  if (v14 == v15)
  {
LABEL_6:
    swift_unknownObjectRelease_n();
  }
  else
  {
    v16 = v21;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 24);
    while (1)
    {
      sub_1AC72673C();
      if (v21 < v11 || (uint64_t)(v13 >> 1) <= v16)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9 + *(_QWORD *)(v4 + 72) * v16++, AssociatedTypeWitness);
      v18(v6, v19, v20);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
      if (v16 == sub_1AC726748())
        goto LABEL_6;
    }
    __break(1u);
  }
}

uint64_t LayoutViewPlaceholder.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AC689B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = sub_1AC726628();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC725BB4();
  MEMORY[0x1E0C80A78]();
  sub_1AC72661C();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78]();
  sub_1AC690B38();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BD760);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AC727FC0;
  sub_1AC726610();
  v7[1] = v5;
  sub_1AC688D20((unint64_t *)&qword_1ED0BE0B8, v4, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE0A8);
  sub_1AC689088(&qword_1ED0BE0B0, &qword_1ED0BE0A8);
  sub_1AC72676C();
  sub_1AC725BA8();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_1AC726664();
  qword_1ED0BD5D0 = result;
  return result;
}

double sub_1AC689D80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = *v0 + 16;
  swift_beginAccess();
  sub_1AC68E218(v1, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

id sub_1AC689E24(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;

  return objc_msgSend(*v3, *a3);
}

id sub_1AC689E30(uint64_t a1, uint64_t a2)
{
  return sub_1AC689E24(a1, a2, (SEL *)&selRef_frame);
}

CGSize __swiftcall CustomLayoutView.sizeThatFits(_:)(CGSize a1)
{
  _QWORD *v1;
  double height;
  double width;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGSize result;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  height = a1.height;
  width = a1.width;
  v4 = objc_msgSend(v1, sel_traitCollection);
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50))(v13);
  v5 = v14;
  v6 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v7 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v6 + 8))(v4, v5, v6, width, height);
  v9 = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);

  v10 = v7;
  v11 = v9;
  result.height = v11;
  result.width = v10;
  return result;
}

__n128 LabelPlaceholder.layoutTextView.getter@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[7];

  sub_1AC68CE14(v1, (uint64_t)v9);
  v3 = type metadata accessor for _LabelPlaceholderLayoutTextView();
  v4 = swift_allocObject();
  v5 = v9[5];
  *(_OWORD *)(v4 + 80) = v9[4];
  *(_OWORD *)(v4 + 96) = v5;
  result = (__n128)v9[6];
  v7 = v9[1];
  *(_OWORD *)(v4 + 16) = v9[0];
  *(_OWORD *)(v4 + 32) = v7;
  v8 = v9[3];
  *(_OWORD *)(v4 + 48) = v9[2];
  *(_OWORD *)(v4 + 64) = v8;
  *(__n128 *)(v4 + 112) = result;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_BYTE *)(v4 + 160) = 0;
  a1[3] = v3;
  a1[4] = (uint64_t)&off_1E5BF9A60;
  *a1 = v4;
  return result;
}

uint64_t type metadata accessor for _LabelPlaceholderLayoutTextView()
{
  return objc_opt_self();
}

id JULoadingViewController.init(label:presentationContext:pageRenderMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  id v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = &v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  sub_1AC68BB50(a3, (uint64_t)&v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = a4;
  v13.receiver = v4;
  v13.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, 0, 0);
  sub_1AC68BB14(a3);
  return v11;
}

double Separator.frame(forBoundingRect:in:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double Width;
  double v22;
  double v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  CGFloat v30;
  CGFloat v31;
  double MinX;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v40;
  CGFloat v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v6 = v5;
  v12 = sub_1AC726A48();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78]();
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, sel_traitCollection);
  v17 = *(_QWORD *)(v6 + 48);
  v18 = *(_QWORD *)(v6 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 24), v17);
  sub_1AC68E57C((uint64_t)v15);
  AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v17, v18);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v42.origin.x = a2;
  v42.origin.y = a3;
  v40 = a4;
  v41 = a5;
  v42.size.width = a4;
  v42.size.height = a5;
  Width = CGRectGetWidth(v42);
  v22 = *(double *)(v6 + 8);
  v23 = *(double *)(v6 + 16);
  v24 = objc_msgSend(v16, sel_preferredContentSizeCategory);
  LOBYTE(v12) = sub_1AC726670();

  v25 = 1.0;
  if ((v12 & 1) == 0)
  {
    objc_msgSend(v16, sel_displayScale, 1.0);
    if (v26 <= 0.0)
      v26 = ForJetUIOnly_MainScreenScale();
    v25 = 1.0 / v26;
  }
  v27 = Width - (v22 + v23);
  v28 = v20 + v20 + 0.0 + v25;
  v29 = objc_msgSend(v16, sel_layoutDirection);
  v43.origin.x = a2;
  v43.origin.y = a3;
  v31 = v40;
  v30 = v41;
  v43.size.width = v40;
  v43.size.height = v41;
  MinX = CGRectGetMinX(v43);
  if (v29 == (id)1)
    v33 = v23;
  else
    v33 = v22;
  v34 = v33 + MinX;
  v35 = a2;
  v36 = a3;
  v37 = v31;
  v38 = v30;
  if ((*(_BYTE *)v6 & 1) != 0)
  {
    CGRectGetMaxY(*(CGRect *)&v35);
    v44.origin.y = 0.0;
    v44.origin.x = v34;
    v44.size.width = v27;
    v44.size.height = v28;
    CGRectGetHeight(v44);
  }
  else
  {
    CGRectGetMinY(*(CGRect *)&v35);
  }

  return v34;
}

id static Locale.useLocale(forStorefront:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = sub_1AC725B9C();
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED0BD770 != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD758);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AC727FC0;
  sub_1AC725B90();
  v9[1] = v6;
  sub_1AC688D20(&qword_1ED0BE090, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE098);
  sub_1AC689088(&qword_1ED0BE0A0, &qword_1ED0BE098);
  v7 = sub_1AC72676C();
  MEMORY[0x1E0C80A78](v7);
  v9[-2] = a1;
  sub_1AC726640();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1ED0BE2C0 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED0BE260, sel_removeAllObjects);
  if (qword_1ED0BE2B8 != -1)
    swift_once();
  return objc_msgSend((id)qword_1ED0BE280, sel_removeAllObjects);
}

uint64_t initializeWithCopy for VerticalStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

CGFloat CGRect.withLayoutDirection(in:relativeTo:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v17;
  id v18;
  CGFloat tx;
  double MinX;
  CGFloat MaxX;
  CGFloat ty;
  __int128 v24;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  CGAffineTransform v28;
  CGAffineTransform v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v17 = objc_msgSend(a1, sel_traitCollection);
  v18 = objc_msgSend(v17, sel_layoutDirection);

  if (v18 == (id)1)
  {
    CGAffineTransformMakeScale(&v29, -1.0, 1.0);
    v24 = *(_OWORD *)&v29.c;
    v25 = *(_OWORD *)&v29.a;
    v27 = a8;
    tx = v29.tx;
    ty = v29.ty;
    v30.origin.x = a2;
    v30.origin.y = a3;
    v30.size.width = a4;
    v30.size.height = a5;
    v26 = a9;
    MinX = CGRectGetMinX(v30);
    v31.origin.x = a2;
    v31.origin.y = a3;
    v31.size.width = a4;
    v31.size.height = a5;
    MaxX = CGRectGetMaxX(v31);
    *(_OWORD *)&v29.a = v25;
    *(_OWORD *)&v29.c = v24;
    v29.tx = tx;
    v29.ty = ty;
    CGAffineTransformTranslate(&v28, &v29, -(MinX + MaxX), 0.0);
    v29 = v28;
    v32.origin.x = a6;
    v32.origin.y = a7;
    v32.size.height = v26;
    v32.size.width = v27;
    *(_QWORD *)&a6 = (unint64_t)CGRectApplyAffineTransform(v32, &v29);
  }
  return a6;
}

id TextAppearance.init()@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
  *a1 = result;
  a1[1] = 4;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

uint64_t HorizontalStack.Properties.trailingSpacing.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

uint64_t Center.init(_:filling:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_1AC68AAA4(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t type metadata accessor for LayoutTextViewPlaceholder()
{
  return objc_opt_self();
}

uint64_t sub_1AC68A774()
{
  uint64_t v0;

  sub_1AC68A798(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_1AC68A798(uint64_t a1)
{
  destroy for LabelPlaceholder(a1);
  return a1;
}

void destroy for LabelPlaceholder(uint64_t a1)
{
  id *v2;

  sub_1AC68A814(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v2 = (id *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  else

}

void sub_1AC68A814(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t HorizontalStack.Properties.leadingSpacing.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return sub_1AC68AAA4(a1, v1);
}

uint64_t sub_1AC68A850()
{
  sub_1AC688D20(&qword_1ED0BD598, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1AC729210);
  sub_1AC688D20(&qword_1ED0BD5B0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1AC7291B0);
  return sub_1AC726988();
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1ED0BE348);
}

id JULoadingViewController.__allocating_init(label:presentationContext:pageRenderMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  id v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  sub_1AC68BB50(a3, (uint64_t)&v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v9[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, 0, 0);
  sub_1AC68BB14(a3);
  return v11;
}

uint64_t LayoutTextView.withLanguageAwareOutsets.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  result = sub_1AC68AA30((uint64_t)v8, a1, a2);
  a3[3] = (uint64_t)&type metadata for LanguageAwareLayoutTextView;
  a3[4] = (uint64_t)&off_1E5BF94A0;
  *a3 = result;
  return result;
}

uint64_t sub_1AC68AA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_0, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F8);
  v6 = swift_allocObject();
  sub_1AC68AAA4(&v8, v6 + 16);
  return v6;
}

uint64_t sub_1AC68AAA4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_1AC68AABC(void *a1)
{
  id *v1;

  objc_msgSend(*v1, sel_setFont_, a1);

}

uint64_t StaticDimension.value(compatibleWith:rounded:)(void *a1, uint64_t a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  uint64_t result;
  _BYTE v16[24];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v5 = sub_1AC726A48();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *v2;
  v10 = *((_QWORD *)v2 + 1) + 16;
  swift_beginAccess();
  sub_1AC68E218(v10, (uint64_t)v17);
  v11 = v18;
  v12 = v19;
  v13 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v14 = sub_1AC68ACCC(v9, (uint64_t)v13, a1, v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  *(double *)v17 = v14;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 88))(v8, v5);
  if ((_DWORD)result != *MEMORY[0x1E0DED4F0]
    && (_DWORD)result != *MEMORY[0x1E0DED4E8]
    && (_DWORD)result != *MEMORY[0x1E0DED500]
    && (_DWORD)result != *MEMORY[0x1E0DED508]
    && (_DWORD)result != *MEMORY[0x1E0DED4D8]
    && (_DWORD)result != *MEMORY[0x1E0DED4E0])
  {
    sub_1AC7264E4();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

double sub_1AC68ACCC(double a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v6;
  double v7;

  v6 = CustomTextStyle.scalingValues(compatibleWith:)(a3, a4, a5);
  return v7 * (a1 / v6);
}

uint64_t HorizontalStack.init(with:)@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v5[24];
  ValueMetadata *v6;
  _UNKNOWN **v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  __int16 v10;

  v6 = &type metadata for ZeroDimension;
  v7 = &protocol witness table for ZeroDimension;
  v8 = &type metadata for ZeroDimension;
  v9 = &protocol witness table for ZeroDimension;
  v10 = 0;
  if (a1)
    a1(v5);
  sub_1AC692CD0((uint64_t)v5, a2);
  sub_1AC68AD94((uint64_t)a1);
  result = sub_1AC68DF00((uint64_t)v5);
  *(_QWORD *)(a2 + 88) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1AC68AD94(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t LayoutViewPlaceholder.init(representing:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  *(_BYTE *)(v2 + 32) = 1;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_BYTE *)(v2 + 72) = 0;
  v5 = swift_allocObject();
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v2 + 16) = sub_1AC69645C;
  *(_QWORD *)(v2 + 24) = v5;
  v6 = fabs(a1) >= COERCE_DOUBLE(1);
  v7 = fabs(a2) >= COERCE_DOUBLE(1) && v6;
  swift_beginAccess();
  *(_BYTE *)(v2 + 32) = v7;
  return v2;
}

BOOL UITraitCollection.prefersRightToLeftLayouts.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_layoutDirection) == (id)1;
}

uint64_t static CharacterSet.excessiveLineHeight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v2 = sub_1AC725854();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BE180);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

double VerticalMarginsMeasurable.init(child:topMargin:bottomMargin:skipIfEmpty:shouldMeasureToBaseline:)@<D0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  _OWORD v17[3];
  __int128 v18;
  _BYTE v19[26];

  sub_1AC68AAA4(a1, (uint64_t)v16);
  sub_1AC68AAA4(a2, (uint64_t)v17 + 8);
  sub_1AC68AAA4(a3, (uint64_t)&v18);
  v19[24] = a4;
  v19[25] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD600);
  v11 = (_OWORD *)swift_allocObject();
  v12 = v18;
  v11[5] = v17[2];
  v11[6] = v12;
  v11[7] = *(_OWORD *)v19;
  *(_OWORD *)((char *)v11 + 122) = *(_OWORD *)&v19[10];
  v13 = v16[1];
  v11[1] = v16[0];
  v11[2] = v13;
  result = *(double *)v17;
  v15 = v17[1];
  v11[3] = v17[0];
  v11[4] = v15;
  *a6 = v11;
  return result;
}

uint64_t LayoutTextViewPlaceholder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t LayoutTextViewPlaceholder.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;

  *(_QWORD *)(v7 + 104) = 0;
  v13 = (void **)(v7 + 104);
  if (a2)
    v14 = a1;
  else
    v14 = 0;
  v15 = 0xE000000000000000;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_BYTE *)(v7 + 80) = 0;
  if (a2)
    v15 = a2;
  *(_QWORD *)(v7 + 16) = v14;
  *(_QWORD *)(v7 + 24) = v15;
  swift_beginAccess();
  v16 = *v13;
  *v13 = a3;

  *(_QWORD *)(v7 + 32) = a4;
  *(_QWORD *)(v7 + 40) = a6;
  *(_QWORD *)(v7 + 88) = a7;
  *(_QWORD *)(v7 + 96) = a5;
  return v7;
}

UIColor __swiftcall UIColor.init(light:lightHighContrast:dark:darkHighContrast:)(UIColor light, UIColor lightHighContrast, UIColor dark, UIColor darkHighContrast)
{
  id v8;
  UIColor *v9;
  void *v10;
  objc_class *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  id v15;
  _QWORD v17[6];

  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v9 = (UIColor *)swift_allocObject();
  v9[2].super.isa = darkHighContrast.super.isa;
  v9[3].super.isa = dark.super.isa;
  v9[4].super.isa = lightHighContrast.super.isa;
  v9[5].super.isa = light.super.isa;
  v17[4] = sub_1AC68C5B8;
  v17[5] = v9;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1107296256;
  v17[2] = sub_1AC68C568;
  v17[3] = &block_descriptor_2;
  v10 = _Block_copy(v17);
  v11 = darkHighContrast.super.isa;
  v12 = dark.super.isa;
  v13 = lightHighContrast.super.isa;
  v14 = light.super.isa;
  swift_release();
  v15 = objc_msgSend(v8, sel_initWithDynamicProvider_, v10);

  _Block_release(v10);
  return (UIColor)v15;
}

uint64_t VerticalStack.Properties.topSpacing.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return sub_1AC68AAA4(a1, v1);
}

uint64_t sub_1AC68B1BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1AC72622C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Void __swiftcall CustomLayoutView.layoutSubviews()()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD v11[5];
  objc_super v12;

  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for CustomLayoutView();
  v1 = objc_msgSendSuper2(&v12, sel_layoutSubviews);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(id))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))(v1);
  v3 = objc_msgSend(v0, sel_frame);
  v5 = v4;
  v7 = v6;
  (*(void (**)(_QWORD *__return_ptr, id))((*v2 & *v0) + 0x50))(v11, v3);
  v8 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v9 = objc_msgSend(v0, sel_traitCollection);
  (*(void (**)(double, double, double, double))(v8 + 16))(0.0, 0.0, v5, v7);

  v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x68))(v10);
}

uint64_t type metadata accessor for CustomLayoutView()
{
  return objc_opt_self();
}

id sub_1AC68B364()
{
  id *v0;

  return objc_msgSend(*v0, sel_isHidden);
}

uint64_t VerticalStack.init(with:)@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v5[24];
  ValueMetadata *v6;
  _UNKNOWN **v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  char v10;
  uint64_t v11;
  char v12;

  v6 = &type metadata for ZeroDimension;
  v7 = &protocol witness table for ZeroDimension;
  v8 = &type metadata for ZeroDimension;
  v9 = &protocol witness table for ZeroDimension;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (a1)
    a1(v5);
  sub_1AC68DD94((uint64_t)v5, a2);
  sub_1AC68AD94((uint64_t)a1);
  result = sub_1AC68DF00((uint64_t)v5);
  *(_QWORD *)(a2 + 104) = MEMORY[0x1E0DEE9D8];
  return result;
}

Swift::Int __swiftcall LayoutTextView.estimatedNumberOfLines(from:)(JUMeasurements from)
{
  uint64_t v1;
  double var3;
  double var2;
  double var1;
  Swift::Int result;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;

  var3 = from.var3;
  var2 = from.var2;
  var1 = from.var1;
  result = (*(uint64_t (**)(__n128))(v1 + 64))(*(__n128 *)&from.var0);
  if (!result)
    goto LABEL_11;
  v6 = (void *)result;
  v7 = var1 - var3 - var2;
  objc_msgSend((id)result, sel_lineHeight);
  v9 = v8;

  v10 = round(v7 / v9);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = (uint64_t)v10 & ~((uint64_t)v10 >> 63);
  result = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

id sub_1AC68B4D4()
{
  id *v0;

  return objc_msgSend(*v0, sel_font);
}

uint64_t destroy for HorizontalStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return swift_bridgeObjectRelease();
}

uint64_t destroy for Margins(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 160);
}

double static Separator.thickness(compatibleWith:)(void *a1)
{
  id v2;
  char v3;
  double result;
  double v5;

  v2 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v3 = sub_1AC726670();

  result = 1.0;
  if ((v3 & 1) == 0)
  {
    objc_msgSend(a1, sel_displayScale, 1.0);
    if (v5 <= 0.0)
      v5 = ForJetUIOnly_MainScreenScale();
    return 1.0 / v5;
  }
  return result;
}

uint64_t static Dimensions.defaultRoundingRule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED0BE338 != -1)
    swift_once();
  v2 = sub_1AC726A48();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BE2C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1AC68B694@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return sub_1AC68BB50(v6, a3);
}

uint64_t sub_1AC68B6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDCC8);
  MEMORY[0x1E0C80A78](v35);
  v36 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDC90);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDC88);
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDCD8);
  v34 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v33 = (char *)v30 - v19;
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_label + 8);
  if (v20)
  {
    v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_label);
    v38 = v20;
    sub_1AC68F334();
    v30[1] = a2;
    swift_bridgeObjectRetain();
    sub_1AC7259F8();
    sub_1AC7259E0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_1AC68BB50(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext, (uint64_t)v7);
    v37 = MEMORY[0x1E0CDDD78];
    v38 = MEMORY[0x1E0CDDD58];
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v22 = v32;
    sub_1AC725B84();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v22);
    v23 = sub_1AC725A1C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v7, v23);
    v25 = v33;
    v24 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v18, v15);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v36, v25, v15);
    swift_storeEnumTagMultiPayload();
    v37 = v22;
    v38 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
  }
  else
  {
    sub_1AC7259EC();
    sub_1AC7259E0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_1AC68BB50(a1 + OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext, (uint64_t)v7);
    v37 = MEMORY[0x1E0CDDD78];
    v38 = MEMORY[0x1E0CDDD58];
    v26 = swift_getOpaqueTypeConformance2();
    v27 = v32;
    sub_1AC725B84();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v27);
    v28 = sub_1AC725A1C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v7, v28);
    v25 = v33;
    v24 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v18, v15);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v36, v25, v15);
    swift_storeEnumTagMultiPayload();
    v37 = v27;
    v38 = v26;
    swift_getOpaqueTypeConformance2();
  }
  sub_1AC725B6C();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v25, v15);
}

uint64_t sub_1AC68BB14(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AC68BB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC68BB94(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for JULoadingViewController.PresentationContext(uint64_t a1)
{
  return sub_1AC68BB94(a1, (uint64_t *)&unk_1ED0BDC28);
}

uint64_t sub_1AC68BBDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1AC72622C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id UIColor.highlighted.getter()
{
  void *v0;
  void *v1;
  id result;
  id v3;

  v1 = v0;
  if (qword_1ED0BD788 != -1)
  {
    swift_once();
    v1 = v3;
  }
  result = objc_msgSend(v1, sel__colorBlendedWithColor_, qword_1ED0BD790);
  if (!result)
    return v3;
  return result;
}

uint64_t sub_1AC68BC84()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t destroy for VerticalMarginsMeasurable.Storage(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

BOOL UITraitCollection.isSizeClassCompact.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_horizontalSizeClass) == (id)1;
}

uint64_t assignWithCopy for FontUseCase(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1AC692480(*(id *)a2, v4, v5, v6, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_1AC6921AC(v9, v10, v11, v12, v13, v14);
  return a1;
}

NSAttributedString __swiftcall NSAttributedString.init(attributedString:defaultAttributes:)(NSAttributedString attributedString, Swift::OpaquePointer defaultAttributes)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSAttributedString result;
  id v14;
  _QWORD v15[6];

  v3 = -[objc_class string](attributedString.super.isa, sel_string);
  sub_1AC72622C();

  v4 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v5 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1AC690AA0();
  v6 = (void *)sub_1AC726178();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_initWithString_attributes_, v5, v6);

  v8 = -[objc_class length](attributedString.super.isa, sel_length);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v7;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1AC690B30;
  *(_QWORD *)(v10 + 24) = v9;
  v15[4] = sub_1AC690B08;
  v15[5] = v10;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_1AC690918;
  v15[3] = &block_descriptor_8;
  v11 = _Block_copy(v15);
  v12 = v7;
  swift_retain();
  swift_release();
  -[objc_class enumerateAttributesInRange:options:usingBlock:](attributedString.super.isa, sel_enumerateAttributesInRange_options_usingBlock_, 0, v8, 0, v11);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  result.super.isa = (Class)swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v12);
    swift_release();

    return (NSAttributedString)v14;
  }
  return result;
}

uint64_t destroy for VerticalStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return swift_bridgeObjectRelease();
}

uint64_t static Locale.storefront.getter()
{
  if (qword_1ED0BD770 != -1)
    swift_once();
  sub_1AC725968();
  return sub_1AC72664C();
}

uint64_t ReusePool.dequeue(or:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1AC7266C4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  ReusePool.dequeue()(a2, (uint64_t)&v14 - v9);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v10, AssociatedTypeWitness);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return a1(v12);
}

uint64_t ReusePool.dequeue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v6);
  if ((sub_1AC7265B0() & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF20], v6);
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF58], v6);
    sub_1AC7265EC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a2, v4, v3);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, v7, 1, AssociatedTypeWitness);
}

uint64_t destroy for Resize(_BYTE *a1)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  if (a1[80] == 1)
  {
    result = swift_release();
  }
  else if (!a1[80])
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 40));
  }
  if (a1[128] == 1)
  {
    result = swift_release();
  }
  else if (!a1[128])
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 88));
  }
  if (a1[176] == 1)
  {
    result = swift_release();
  }
  else if (!a1[176])
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 136));
  }
  if (a1[224] == 1)
    return swift_release();
  if (!a1[224])
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 184));
  return result;
}

uint64_t StaticDimension.init(_:scaledLike:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE170);
  v6 = swift_allocObject();
  result = sub_1AC68AAA4(a1, v6 + 16);
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t sub_1AC68C3FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED0BD778 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BD5D8);
  swift_beginAccess();
  sub_1AC68C520(v5, (uint64_t)v4);
  v6 = sub_1AC725968();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v4, v6);
  sub_1AC72595C();
  return sub_1AC70B034((uint64_t)v4);
}

uint64_t sub_1AC68C520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1AC68C568(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

id sub_1AC68C5B8(void *a1)
{
  void **v1;

  return sub_1AC68C5C4(a1, v1[2], v1[3], v1[4], v1[5]);
}

id sub_1AC68C5C4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  BOOL v11;
  void *v12;

  v9 = objc_msgSend(a1, sel_userInterfaceStyle);
  v10 = objc_msgSend(a1, sel_accessibilityContrast);
  if (v9 == (id)1)
  {
    if (v10 == (id)1)
      v12 = a4;
    else
      v12 = a5;
  }
  else if (v9 == (id)2)
  {
    v11 = v10 == (id)-1 || v10 == 0;
    v12 = a3;
    if (!v11)
    {
      if (v10 == (id)1)
        v12 = a2;
      else
        v12 = a5;
    }
  }
  else
  {
    v12 = a5;
  }
  return v12;
}

Swift::Void __swiftcall JULoadingViewController.viewDidLoad()()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  _QWORD v45[2];
  objc_super v46;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDCD0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46.receiver = v1;
  v46.super_class = ObjectType;
  objc_msgSendSuper2(&v46, sel_viewDidLoad);
  sub_1AC68B6E0((uint64_t)v1, (uint64_t)v5);
  v6 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDCC0));
  v7 = (void *)sub_1AC725B60();
  objc_msgSend(v1, sel_addChildViewController_, v7);
  v8 = objc_msgSend(v7, sel_view);
  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = v8;
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v10 = objc_msgSend(v1, sel_view);
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = v10;
  v12 = objc_msgSend(v7, sel_view);
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v13 = v12;
  objc_msgSend(v11, sel_addSubview_, v12);

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1AC72D690;
  v15 = objc_msgSend(v7, sel_view);
  if (!v15)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, sel_topAnchor);

  v18 = objc_msgSend(v1, sel_view);
  if (!v18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, sel_topAnchor);

  v21 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v20);
  *(_QWORD *)(v14 + 32) = v21;
  v22 = objc_msgSend(v7, sel_view);
  if (!v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, sel_leadingAnchor);

  v25 = objc_msgSend(v1, sel_view);
  if (!v25)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, sel_leadingAnchor);

  v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v27);
  *(_QWORD *)(v14 + 40) = v28;
  v29 = objc_msgSend(v7, sel_view);
  if (!v29)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, sel_bottomAnchor);

  v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, sel_bottomAnchor);

  v35 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v34);
  *(_QWORD *)(v14 + 48) = v35;
  v36 = objc_msgSend(v7, sel_view);
  if (!v36)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, sel_trailingAnchor);

  v39 = objc_msgSend(v1, sel_view);
  if (v39)
  {
    v40 = v39;
    v41 = (void *)objc_opt_self();
    v42 = objc_msgSend(v40, sel_trailingAnchor);

    v43 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v42);
    *(_QWORD *)(v14 + 56) = v43;
    v45[1] = v14;
    sub_1AC7263AC();
    sub_1AC68CB18();
    v44 = (void *)sub_1AC726394();
    swift_bridgeObjectRelease();
    objc_msgSend(v41, sel_activateConstraints_, v44);

    objc_msgSend(v7, sel_didMoveToParentViewController_, v1);
    return;
  }
LABEL_23:
  __break(1u);
}

unint64_t sub_1AC68CB18()
{
  unint64_t result;

  result = qword_1ED0BDCE0;
  if (!qword_1ED0BDCE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0BDCE0);
  }
  return result;
}

uint64_t Measurable.placeable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *boxed_opaque_existential_0;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23[3];

  v4 = v3;
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v23, (uint64_t)a3);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD548);
    if (swift_dynamicCast())
    {
      sub_1AC68AAA4(v23, (uint64_t)v20);
      v12 = v21;
      v13 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD458);
      if (swift_dynamicCast())
      {
        a3[3] = &type metadata for _MeasurableLayoutPlaceable;
        a3[4] = &protocol witness table for _MeasurableLayoutPlaceable;
        v14 = swift_allocObject();
        *a3 = v14;
        sub_1AC6DACE4(v23, (_OWORD *)(v14 + 16));
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BE1A0);
        if (swift_dynamicCast())
        {
          a3[3] = &type metadata for _LayoutViewPlaceable;
          a3[4] = &protocol witness table for _LayoutViewPlaceable;
          v15 = swift_allocObject();
          *a3 = v15;
          sub_1AC68AAA4(v23, v15 + 16);
        }
        else
        {
          a3[3] = &type metadata for _MeasurablePlaceable;
          a3[4] = &protocol witness table for _MeasurablePlaceable;
          v16 = (uint64_t *)swift_allocObject();
          *a3 = v16;
          v16[5] = a1;
          v16[6] = a2;
          boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v16 + 2);
          v11((char *)boxed_opaque_existential_0, v4, a1);
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a1);
}

uint64_t sub_1AC68CD9C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + 16;
  swift_beginAccess();
  a1[3] = (uint64_t)&type metadata for LabelPlaceholder;
  a1[4] = (uint64_t)&protocol witness table for LabelPlaceholder;
  v4 = swift_allocObject();
  *a1 = v4;
  return sub_1AC68CE14(v3, v4 + 16);
}

uint64_t sub_1AC68CE14(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LabelPlaceholder(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1AC68CEF8(*(void **)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_BYTE *)(a2 + 96);
  if ((v7 & 1) != 0)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, a2 + 24);
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
  }
  else
  {
    v10 = *(void **)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v12 = v10;
  }
  *(_BYTE *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

id sub_1AC68CEF8(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

id TraitEnvironmentPlaceholder.__allocating_init(_:)()
{
  objc_class *v0;
  void *v1;
  id v2;
  char *v3;
  objc_super v5;

  sub_1AC69232C();
  v1 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v1);

  v3 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v2;
  v5.receiver = v3;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, sel_init);
}

id sub_1AC68CFA8()
{
  id *v0;

  return objc_msgSend(*v0, sel_hasContent);
}

BOOL sub_1AC68CFC8(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_text);
  if (v2)
  {
    v3 = v2;
    v4 = sub_1AC72622C();
    v6 = v5;

    swift_bridgeObjectRelease();
    v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    return v7 != 0;
  }
  else
  {

    return 0;
  }
}

JUMeasurements __swiftcall Measurable.measurements(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  uint64_t v9;
  objc_class *v10;
  void *v11;
  id v12;
  objc_class *v13;
  char *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  objc_super v27;
  JUMeasurements result;

  v4 = v3;
  v5 = v2;
  height = fitting.height;
  width = fitting.width;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AC727FB0;
  *(UITraitCollection *)(v9 + 32) = with;
  sub_1AC69232C();
  v10 = with.super.isa;
  v11 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v11);

  v13 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v12;
  v27.receiver = v14;
  v27.super_class = v13;
  v15 = objc_msgSendSuper2(&v27, sel_init);
  v16 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v4 + 8))(v15, v5, v4, width, height);
  v18 = v17;
  v20 = v19;
  v22 = v21;

  v23 = v16;
  v24 = v18;
  v25 = v20;
  v26 = v22;
  result.var3 = v26;
  result.var2 = v25;
  result.var1 = v24;
  result.var0 = v23;
  return result;
}

double sub_1AC68D194(void *a1, double a2, double a3)
{
  id v6;
  unint64_t v7;
  unint64_t v8;
  double v9;

  swift_unknownObjectRetain();
  v6 = a1;
  objc_msgSend(v6, sel_sizeThatFits_, a2, a3);
  *(_QWORD *)&v9 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v8, v7), (CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
  objc_msgSend(v6, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v6, sel__baselineOffsetFromBottom);
  swift_unknownObjectRelease();

  return v9;
}

void _sSo6UIViewC5JetUIE22setAutomationSemanticsyy0B6Engine0eF0VF_0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;

  v1 = v0;
  v2 = sub_1AC725E30();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC725F44();
  sub_1AC725E24();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v6 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v6);

}

uint64_t UITraitCollection.prefersAccessibilityLayouts.getter()
{
  void *v0;
  id v1;
  char v2;

  v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);
  v2 = sub_1AC726670();

  return v2 & 1;
}

uint64_t _s5JetUI15StaticDimensionV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[5];
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (*a1 == *a2)
  {
    StaticDimension.source.getter((uint64_t)&v26);
    v14 = v27;
    v15 = v26;
    v2 = v29;
    v13 = v28;
    v3 = v30;
    v4 = v31;
    v24[0] = v26;
    v24[1] = v27;
    v24[2] = v28;
    v24[3] = v29;
    v24[4] = v30;
    v25 = v31;
    StaticDimension.source.getter((uint64_t)&v18);
    v5 = v18;
    v6 = v19;
    v8 = v20;
    v7 = v21;
    v9 = v22;
    v10 = v23;
    v16[0] = v18;
    v16[1] = v19;
    v16[2] = v20;
    v16[3] = v21;
    v16[4] = v22;
    v17 = v23;
    v11 = _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0((uint64_t)v24, (uint64_t)v16);
    sub_1AC68D860(v5, v6, v8, v7, v9, v10);
    sub_1AC68D860(v15, v14, v13, v2, v3, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char v31;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  _QWORD v42[5];
  char v43;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(char *)(a1 + 40);
  v9 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(char *)(a2 + 40);
  v41 = v2;
  if (v7 < 0)
  {
    if (v13 < 0)
    {
      v42[0] = *(_QWORD *)a1;
      v42[1] = v2;
      v42[2] = v5;
      v42[3] = v4;
      v42[4] = v6;
      v43 = v7 & 0x7F;
      v33 = v9;
      v28 = v9;
      v36 = v8;
      v38 = v6;
      v29 = v2;
      v30 = v3;
      sub_1AC6923FC(v28, v8, v10, v11, v12, v13);
      sub_1AC6923FC(v30, v29, v5, v4, v6, v7);
      sub_1AC6923FC(v30, v29, v5, v4, v6, v7);
      sub_1AC6923FC(v33, v36, v10, v11, v12, v13);
      _s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
      v27 = v31;
      sub_1AC68D860(v30, v41, v5, v4, v38, v7);
      sub_1AC68D860(v33, v36, v10, v11, v12, v13);
      sub_1AC68D860(v33, v36, v10, v11, v12, v13);
      sub_1AC68D860(v30, v41, v5, v4, v38, v7);
      return v27 & 1;
    }
    goto LABEL_9;
  }
  if (v13 < 0)
  {
LABEL_9:
    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(_QWORD *)(a2 + 24);
    v24 = *(_QWORD *)(a2 + 32);
    v40 = *(_BYTE *)(a1 + 40);
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(void **)a1;
    sub_1AC6923FC(v3, v2, v5, v4, v6, v40);
    sub_1AC6923FC(v9, v25, v22, v23, v24, v13);
    sub_1AC68D860(v26, v41, v5, v4, v6, v40);
    sub_1AC68D860(v9, v25, v22, v23, v24, v13);
    v27 = 0;
    return v27 & 1;
  }
  v39 = *(_BYTE *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 32);
  v34 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  v16 = *(void **)a1;
  v17 = sub_1AC72622C();
  v19 = v18;
  if (v17 == sub_1AC72622C() && v19 == v20)
    v35 = 1;
  else
    v35 = sub_1AC726A78();
  sub_1AC6923FC(v9, v14, v10, v11, v15, v39);
  sub_1AC6923FC(v16, v41, v5, v34, v37, v7);
  sub_1AC6923FC(v16, v41, v5, v34, v37, v7);
  sub_1AC6923FC(v9, v14, v10, v11, v15, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AC68D860(v16, v41, v5, v34, v37, v7);
  sub_1AC68D860(v9, v14, v10, v11, v15, v39);
  sub_1AC68D860(v9, v14, v10, v11, v15, v39);
  sub_1AC68D860(v16, v41, v5, v34, v37, v7);
  v27 = v35;
  return v27 & 1;
}

void sub_1AC68D860(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 < 0)
    sub_1AC6921AC(a1, a2, a3, a4, a5, a6 & 0x7F);
  else

}

uint64_t StaticDimension.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;

  v3 = *(_QWORD *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1AC68E218(v3, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE178);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v5 = v10;
    v6 = v11;
    v7 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    *(_QWORD *)&v9[0] = 0;
    *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1AC726868();
    v12 = v9[0];
    *(_QWORD *)&v9[0] = 0;
    *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
    sub_1AC726868();
    v8 = v9[0];
    sub_1AC7262C8();
    sub_1AC7264D8();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    sub_1AC7262C8();
    sub_1AC68E218(v3, (uint64_t)v9);
    sub_1AC726904();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    v12 = v8;
    sub_1AC7262C8();
    result = sub_1AC726910();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AC68DA70(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1AC726220();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1AC68DAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1AC72622C();
  v2 = v1;
  if (v0 == sub_1AC72622C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1AC726A78();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1AC68DB74()
{
  uint64_t v0;

  sub_1AC72622C();
  sub_1AC726AFC();
  sub_1AC7262A4();
  v0 = sub_1AC726B2C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VerticalStack.add(_:with:)(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[5];
  uint64_t v26;
  _BYTE v27[40];

  v3 = v2;
  sub_1AC68E218(a1, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    v25[2] = v19;
    v25[3] = v20;
    v25[4] = v21;
    v26 = v22;
    v25[0] = v17;
    v25[1] = v18;
    if (BYTE8(v19) == 1)
      sub_1AC725F38();
    sub_1AC6A2928((uint64_t)v25);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  sub_1AC68DD94(v2, (uint64_t)v25);
  if (a2)
    a2(v25);
  sub_1AC68E218(a1, (uint64_t)&v17);
  sub_1AC68DD94((uint64_t)v25, (uint64_t)&v19 + 8);
  v6 = *(_QWORD **)(v2 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1AC68DDC8(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_1AC68DDC8((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[18 * v8];
  v9[2] = v17;
  v10 = v18;
  v11 = v19;
  v12 = v21;
  v9[5] = v20;
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  v13 = v22;
  v14 = v23;
  v15 = v24[0];
  *(_OWORD *)((char *)v9 + 153) = *(_OWORD *)((char *)v24 + 9);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  *(_QWORD *)(v3 + 104) = v6;
  return sub_1AC68DF00((uint64_t)v25);
}

uint64_t sub_1AC68DD94(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VerticalStack.Properties(a2, a1);
  return a2;
}

_QWORD *sub_1AC68DDC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD578);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 144 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD520);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1AC68DF00(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return a1;
}

double VerticalMarginsMeasurable.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[24];
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v7 = sub_1AC726A48();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  v12 = *v3 + 16;
  swift_beginAccess();
  sub_1AC68E218(v12, (uint64_t)v35);
  v13 = v36;
  v14 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  v15 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v14 + 8))(a1, v13, v14, a2, a3);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v22 = fabs(v17);
  if (fabs(v15) < COERCE_DOUBLE(1) || v22 < COERCE_DOUBLE(1))
  {
    v15 = 0.0;
    if ((*(_BYTE *)(v11 + 136) & 1) == 0)
    {
      sub_1AC68E218(v11 + 56, (uint64_t)v35);
      v24 = v36;
      v25 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_1AC68E57C((uint64_t)v10);
      AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v24, v25);
      v26 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v26(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      sub_1AC68E218(v11 + 96, (uint64_t)v35);
      v27 = v36;
      v28 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_1AC68E57C((uint64_t)v10);
      AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v27, v28);
      v26(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      return a2;
    }
  }
  else
  {
    sub_1AC68E218(v11 + 56, (uint64_t)v35);
    v29 = v36;
    v30 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    AnyDimension.topMargin(from:in:)(a1, v29, v30, v15, v17, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    sub_1AC68E218(v11 + 96, (uint64_t)v35);
    v31 = v36;
    v32 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    AnyDimension.bottomMargin(from:in:)(a1, v31, v32, v15, v17, v19, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  return v15;
}

uint64_t sub_1AC68E218(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double AnyDimension.bottomMargin(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double v16;
  uint64_t v18;

  v11 = sub_1AC726A48();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC68E57C((uint64_t)v14);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v14, a2, a3);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v16 - a7;
}

double AnyDimension.topMargin(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  uint64_t v17;

  v10 = sub_1AC726A48();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC68E57C((uint64_t)v13);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v13, a2, a3);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v15 - a6;
}

uint64_t AnyDimension.value(in:rounded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[2];

  v8 = sub_1AC726A48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = (*(double (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if ((_DWORD)result != *MEMORY[0x1E0DED4F0]
    && (_DWORD)result != *MEMORY[0x1E0DED4E8]
    && (_DWORD)result != *MEMORY[0x1E0DED500]
    && (_DWORD)result != *MEMORY[0x1E0DED508]
    && (_DWORD)result != *MEMORY[0x1E0DED4D8]
    && (_DWORD)result != *MEMORY[0x1E0DED4E0])
  {
    sub_1AC7264E4();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t sub_1AC68E57C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED0BE338 != -1)
    swift_once();
  v2 = sub_1AC726A48();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BE2C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_1AC68E5EC(void *a1, double a2, double a3)
{
  LayoutTextViewPlaceholder.measurements(fitting:in:)(a1, a2, a3);
}

void LayoutTextViewPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  _QWORD *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  swift_beginAccess();
  swift_beginAccess();
  v7 = (void *)v3[13];
  if (v7)
  {
    swift_beginAccess();
    v8 = v3[4];
    swift_beginAccess();
    v9 = v3[12];
    swift_beginAccess();
    v10 = v3[5];
    swift_beginAccess();
    v11 = v3[11];
    swift_bridgeObjectRetain();
    TextMeasurable.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(v7, v8, v9, v10, v11, 0, (uint64_t)&v13);
    v12 = v13;
    TextMeasurable.measurements(fitting:in:)(a1, a2, a3);

  }
  else
  {
    __break(1u);
  }
}

void TextMeasurable.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, char a6@<W7>, uint64_t a7@<X8>)
{
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;

  v13 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v14 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithString_, v14);

  v16 = objc_msgSend(v15, sel_length);
  objc_msgSend(v15, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1138], a1, 0, v16);
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
  objc_msgSend(v17, sel_setAlignment_, a2);
  objc_msgSend(v17, sel_setLineBreakMode_, a3);
  objc_msgSend(v17, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (a4)
  {
    objc_msgSend(v17, sel_setMinimumLineHeight_, (double)a4);
    objc_msgSend(v17, sel_setMaximumLineHeight_, (double)a4);
  }
  v18 = *MEMORY[0x1E0DC1178];
  v19 = v17;
  objc_msgSend(v15, sel_addAttribute_value_range_, v18, v19, 0, v16);

  *(_QWORD *)a7 = v15;
  *(_QWORD *)(a7 + 8) = a5;
  *(_BYTE *)(a7 + 16) = a6 & 1;
}

void TextMeasurable.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  double v24;
  void (*v25)(_BYTE *, uint64_t);
  double v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[4];
  int v45;
  uint64_t aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;

  v7 = sub_1AC726A48();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v44[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v44[-v12];
  v14 = *(void **)v3;
  v15 = *(_QWORD *)(v3 + 8);
  v45 = *(unsigned __int8 *)(v3 + 16);
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12A0]), sel_init);
  objc_msgSend(v16, sel_setWantsBaselineOffset_, 1);
  if (v15 >= 1)
    objc_msgSend(v16, sel_setMaximumNumberOfLines_, v15);
  objc_msgSend(v14, sel_boundingRectWithSize_options_context_, 1, v16, a2, a3);
  v18 = v17;
  v20 = v19;
  v21 = objc_msgSend(a1, sel_traitCollection);
  v22 = *MEMORY[0x1E0DED500];
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 104);
  v23(v13, v22, v7);
  objc_msgSend(v21, sel_displayScale);
  if (v24 <= 0.0)
    v24 = ForJetUIOnly_MainScreenScale();
  sub_1AC68EE10((uint64_t)v13, v24, v18);
  v25 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v25(v13, v7);
  v23(v11, v22, v7);
  objc_msgSend(v21, sel_displayScale);
  if (v26 <= 0.0)
    v26 = ForJetUIOnly_MainScreenScale();
  sub_1AC68EE10((uint64_t)v11, v26, v20);
  v25(v11, v7);
  objc_msgSend(v16, sel_firstBaselineOffset);
  objc_msgSend(v16, sel_baselineOffset);
  if (v45)
  {
    v27 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
    v28 = objc_msgSend(v14, sel_string);
    v29 = sub_1AC72622C();
    v31 = v30;

    aBlock = v29;
    v47 = v31;
    if (qword_1ED0BE2A8 != -1)
      swift_once();
    v32 = sub_1AC725854();
    __swift_project_value_buffer(v32, (uint64_t)qword_1ED0BE180);
    sub_1AC68F334();
    sub_1AC726700();
    v34 = v33;
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {

    }
    else
    {
      v35 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
      v53 = *MEMORY[0x1E0DC49E8];
      v54 = v35;
      v52 = 0;
      v36 = objc_msgSend(v14, sel_length);
      v37 = *MEMORY[0x1E0DC1138];
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = &v53;
      *(_QWORD *)(v38 + 24) = &v52;
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = sub_1AC69E660;
      *(_QWORD *)(v39 + 24) = v38;
      v50 = sub_1AC690AE8;
      v51 = v39;
      aBlock = MEMORY[0x1E0C809B0];
      v47 = 1107296256;
      v48 = sub_1AC69CE30;
      v49 = &block_descriptor_12;
      v40 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v37, 0, v36, 0x100000, v40);
      _Block_release(v40);
      LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v36 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        if (v52 != 1)
        {
          *(_QWORD *)&v53 = UIFont.languageAwareOutsets.getter();
          *((_QWORD *)&v53 + 1) = v41;
          *(_QWORD *)&v54 = v42;
          *((_QWORD *)&v54 + 1) = v43;
        }

        swift_release();
      }
    }
  }
  else
  {

  }
}

double sub_1AC68EE10(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  int v11;
  double v12;
  double v13;
  uint64_t v15;
  double v16;

  v6 = sub_1AC726A48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2 * a3;
  v16 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v11 == *MEMORY[0x1E0DED4F0])
  {
    v12 = round(v10);
  }
  else if (v11 == *MEMORY[0x1E0DED4E8])
  {
    v12 = rint(v10);
  }
  else if (v11 == *MEMORY[0x1E0DED500])
  {
    v12 = ceil(v10);
  }
  else if (v11 == *MEMORY[0x1E0DED508])
  {
    v12 = floor(v10);
  }
  else if (v11 == *MEMORY[0x1E0DED4D8])
  {
    v12 = trunc(v10);
  }
  else if (v11 == *MEMORY[0x1E0DED4E0])
  {
    v12 = ceil(v10);
    v13 = floor(v10);
    if (v10 < 0.0)
      v12 = v13;
  }
  else
  {
    sub_1AC7264E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v12 = v16;
  }
  return v12 / a2;
}

double sub_1AC68EF94()
{
  uint64_t v0;

  return *(float *)v0;
}

double sub_1AC68EFA0(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;

  return sub_1AC68EFA8(a1, *v3, a2, a3);
}

double sub_1AC68EFA8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v7 = a2 + 16;
  swift_beginAccess();
  sub_1AC68E218(v7, (uint64_t)v14);
  v8 = v15;
  v9 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v10 = (*(double (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 8))(a1, v8, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  sub_1AC68E218(v7, (uint64_t)v14);
  v11 = v15;
  v12 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

void sub_1AC68F0C0()
{
  LayoutTextViewPlaceholder.languageAwareOutsets.getter();
}

void LayoutTextViewPlaceholder.languageAwareOutsets.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;

  swift_beginAccess();
  swift_beginAccess();
  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    v2 = qword_1ED0BE2A8;
    swift_bridgeObjectRetain();
    v3 = v1;
    if (v2 != -1)
      swift_once();
    v4 = sub_1AC725854();
    __swift_project_value_buffer(v4, (uint64_t)qword_1ED0BE180);
    sub_1AC68F334();
    sub_1AC726700();
    if ((v5 & 1) == 0)
      UIFont.languageAwareOutsets.getter();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

id sub_1AC68F21C()
{
  id *v0;

  return objc_msgSend(*v0, sel_jet_isTextExtraTall);
}

uint64_t sub_1AC68F23C(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_text);
  if (!v2)
  {

    return 0;
  }
  v3 = v2;
  sub_1AC72622C();

  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v4 = sub_1AC725854();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  v5 = 1;
  sub_1AC726700();
  v7 = v6;

  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 0;
  return v5;
}

unint64_t sub_1AC68F334()
{
  unint64_t result;

  result = qword_1ED0BDC00;
  if (!qword_1ED0BDC00)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED0BDC00);
  }
  return result;
}

UIFont __swiftcall FontSource.font(compatibleWith:)(UITraitCollection compatibleWith)
{
  uint64_t v1;
  void *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  char v13;

  v3 = *(void **)v1;
  v4 = *(char *)(v1 + 40);
  if ((v4 & 0x80000000) == 0)
    return (UIFont)objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v3, compatibleWith.super.isa);
  v7 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v10 = v1 + 8;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v10 + 8);
  v12[0] = v3;
  v12[1] = v8;
  v12[2] = v9;
  v12[3] = v7;
  v12[4] = v6;
  v13 = v4 & 0x7F;
  sub_1AC6923FC(v3, v8, v9, v7, v6, v4);
  v11 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v12, compatibleWith.super.isa);
  sub_1AC68D860(v3, v8, v9, v7, v6, v4);
  return (UIFont)v11;
}

id _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  char *v17;
  id v18;
  Class isa;
  id compatibleWith;
  objc_super v22;
  objc_super v23;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = (objc_class *)type metadata accessor for CacheKey();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
  *(_QWORD *)v11 = v3;
  *((_QWORD *)v11 + 1) = v4;
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = v6;
  *((_QWORD *)v11 + 4) = v7;
  v11[40] = v8;
  *(_QWORD *)&v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = a2;
  v12 = a2;
  sub_1AC692480(v3, v4, v5, v6, v7, v8);
  v23.receiver = v10;
  v23.super_class = v9;
  v13 = objc_msgSendSuper2(&v23, sel_init);
  if (qword_1ED0BE2B8 != -1)
    swift_once();
  v14 = objc_msgSend((id)qword_1ED0BE280, sel_objectForKey_, v13);
  if (v14)
  {
    v15 = v14;
  }
  else
  {
    v16 = (char *)objc_allocWithZone(v9);
    v17 = &v16[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
    *(_QWORD *)v17 = v3;
    *((_QWORD *)v17 + 1) = v4;
    *((_QWORD *)v17 + 2) = v5;
    *((_QWORD *)v17 + 3) = v6;
    *((_QWORD *)v17 + 4) = v7;
    v17[40] = v8;
    *(_QWORD *)&v16[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = v12;
    compatibleWith = v12;
    sub_1AC692480(v3, v4, v5, v6, v7, v8);
    v22.receiver = v16;
    v22.super_class = v9;
    v18 = objc_msgSendSuper2(&v22, sel_init);
    if (qword_1ED0BE2C0 != -1)
      swift_once();
    isa = (Class)objc_msgSend((id)qword_1ED0BE260, sel_objectForKey_, v18);
    if (!isa)
    {
      isa = FontUseCase.makeFontDescriptor(compatibleWith:)((UITraitCollection)compatibleWith).super.isa;
      objc_msgSend((id)qword_1ED0BE260, sel_setObject_forKey_, isa, v18);
    }

    v15 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, isa, 0.0);
    objc_msgSend((id)qword_1ED0BE280, sel_setObject_forKey_, v15, v13);

    v13 = isa;
  }

  return v15;
}

uint64_t type metadata accessor for CacheKey()
{
  return objc_opt_self();
}

UIFontDescriptor __swiftcall FontUseCase.makeFontDescriptor(compatibleWith:)(UITraitCollection compatibleWith)
{
  uint64_t v2;
  uint64_t v3;
  UIFontDescriptor result;

  v2 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1AC72610C();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
  return result;
}

id sub_1AC68F7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v8 = (void *)objc_opt_self();
  *(_QWORD *)(v7 - 144) = v6;
  v9 = objc_msgSend(v8, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_);
  v10 = v9;
  if ((_DWORD)v5)
  {
    v11 = objc_msgSend(v9, sel_fontDescriptorWithSymbolicTraits_, v5);
    if (v11)
    {
      v12 = v11;

      sub_1AC6921AC(v6, v5, *(_QWORD *)(v7 - 136), v0, v4, 0);
      return v12;
    }
    else
    {
      if (qword_1EEC8A210 != -1)
        swift_once();
      v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1EEC95CB8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v13, v2);
      *(_QWORD *)(v7 - 152) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(sub_1AC725D10() - 8) + 80);
      v15 = (v14 + 32) & ~v14;
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1AC727FC0;
      *(_QWORD *)(v7 - 160) = v16 + v15;
      *(_QWORD *)(v7 - 152) = v16;
      sub_1AC725CD4();
      sub_1AC725CC8();
      *(_QWORD *)(v7 - 104) = &type metadata for FontUseCase;
      v17 = swift_allocObject();
      *(_QWORD *)(v7 - 128) = v17;
      *(_QWORD *)(v17 + 16) = v6;
      *(_QWORD *)(v17 + 24) = v5;
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v7 - 136);
      *(_QWORD *)(v17 + 40) = v0;
      *(_QWORD *)(v17 + 48) = v4;
      *(_BYTE *)(v17 + 56) = 0;
      v18 = *(id *)(v7 - 144);
      sub_1AC725CA4();
      sub_1AC690CC0(v7 - 128);
      sub_1AC725CC8();
      sub_1AC725CEC();
      sub_1AC726010();
      sub_1AC6921AC(v6, v5, *(_QWORD *)(v7 - 136), v0, v4, 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
    }
  }
  else
  {
    sub_1AC6921AC(v6, v5, *(_QWORD *)(v7 - 136), v0, v4, 0);
  }
  return v10;
}

id _sSo16UIFontDescriptorC5JetUIE010systemFontB06ofSize6weightAB12CoreGraphics7CGFloatV_So0A6WeightatFZ_0(double a1, double a2)
{
  uint64_t inited;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE298);
  inited = swift_initStackObject();
  v5 = (void **)MEMORY[0x1E0DC1408];
  *(_OWORD *)(inited + 16) = xmmword_1AC729820;
  v6 = *v5;
  *(_QWORD *)(inited + 32) = *v5;
  v7 = sub_1AC72622C();
  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 48) = v9;
  v10 = (void *)*MEMORY[0x1E0DC1458];
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 72) = v10;
  v11 = MEMORY[0x1E0DEB070];
  *(_QWORD *)(inited + 104) = MEMORY[0x1E0DEB070];
  *(double *)(inited + 80) = a2;
  v12 = v6;
  v13 = v10;
  v14 = sub_1AC6903A4(inited);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE2A0);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AC729820;
  v16 = (void *)*MEMORY[0x1E0DC1390];
  *(_QWORD *)(v15 + 32) = *MEMORY[0x1E0DC1390];
  *(double *)(v15 + 40) = a1;
  v17 = (void *)*MEMORY[0x1E0DC13C0];
  *(_QWORD *)(v15 + 64) = v11;
  *(_QWORD *)(v15 + 72) = v17;
  *(_QWORD *)(v15 + 104) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE258);
  *(_QWORD *)(v15 + 80) = v14;
  v18 = v16;
  v19 = v17;
  sub_1AC690388(v15);
  v20 = objc_allocWithZone(MEMORY[0x1E0DC1358]);
  type metadata accessor for AttributeName(0);
  sub_1AC690340();
  v21 = (void *)sub_1AC726178();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithFontAttributes_, v21);

  return v22;
}

unint64_t sub_1AC68FFAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = sub_1AC72694C();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1AC6902E4(v11, (uint64_t)&v18, a3);
    v12 = v18;
    result = a4(v18);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v12;
    result = (unint64_t)sub_1AC6900D4(&v19, (_OWORD *)(v8[7] + 32 * result));
    v15 = v8[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_1AC6900D4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1AC6900E4(uint64_t a1)
{
  uint64_t v2;

  sub_1AC72622C();
  sub_1AC726AFC();
  sub_1AC7262A4();
  v2 = sub_1AC726B2C();
  swift_bridgeObjectRelease();
  return sub_1AC690170(a1, v2);
}

unint64_t sub_1AC690170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1AC72622C();
    v8 = v7;
    if (v6 == sub_1AC72622C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1AC72622C();
          v15 = v14;
          if (v13 == sub_1AC72622C() && v15 == v16)
            break;
          v18 = sub_1AC726A78();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1AC6902E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1ED0BE358);
}

unint64_t sub_1AC690340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0BE270;
  if (!qword_1ED0BE270)
  {
    type metadata accessor for AttributeName(255);
    result = MEMORY[0x1AF440830](&unk_1AC7292E0, v1);
    atomic_store(result, (unint64_t *)&qword_1ED0BE270);
  }
  return result;
}

unint64_t sub_1AC690388(uint64_t a1)
{
  return sub_1AC68FFAC(a1, &qword_1ED0BE290, &qword_1ED0BE278, (uint64_t (*)(uint64_t))sub_1AC690328);
}

unint64_t sub_1AC6903A4(uint64_t a1)
{
  return sub_1AC68FFAC(a1, &qword_1ED0BE288, &qword_1ED0BE268, (uint64_t (*)(uint64_t))sub_1AC690328);
}

JUMeasurements __swiftcall LabelPlaceholder.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  double height;
  double width;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  char v30;
  SEL *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  id v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  CGSize v51;
  void *v52;
  void *v53;
  double v54;
  CGFloat v55;
  double v56;
  double v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  JUMeasurements result;

  v3 = v2;
  height = toFit.height;
  width = toFit.width;
  v7 = sub_1AC725BC0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AC690B38();
  *v10 = sub_1AC726634();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v11 = sub_1AC725BCC();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    if (qword_1ED0BD530 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = objc_msgSend((id)qword_1ED0BD480, sel__defaultAttributes);
  if (v12)
  {
    v13 = v12;
    type metadata accessor for Key(0);
    sub_1AC690AA0();
    v14 = sub_1AC726184();

  }
  else
  {
    v14 = 0;
  }
  sub_1AC690B74(v3 + 24, (uint64_t)&v63);
  if ((v68 & 1) != 0)
  {
    v60 = v65;
    v61 = v66;
    v62 = v67;
    v59 = v64;
    v58 = v63;
    v15 = (void *)qword_1ED0BD480;
    v16 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
    v17 = *((_QWORD *)&v59 + 1);
    v18 = v60;
    __swift_project_boxed_opaque_existential_1(&v58, *((uint64_t *)&v59 + 1));
    v19 = (void *)(*(uint64_t (**)(Class, uint64_t, uint64_t))(v18 + 8))(with.super.isa, v17, v18);

    v20 = *((_QWORD *)&v60 + 1);
    v21 = v61;
    v22 = v62;
    objc_msgSend(v15, sel_setFont_, v19);
    objc_msgSend(v15, sel_setTextAlignment_, v20);
    objc_msgSend(v15, sel_setLineBreakMode_, (_QWORD)v21);
    objc_msgSend(v15, sel_setNumberOfLines_, *((_QWORD *)&v21 + 1));
    objc_msgSend(v15, sel_setLineSpacing_, v22);

    sub_1AC6B9A50((uint64_t)&v58);
  }
  else
  {
    v23 = *((_QWORD *)&v63 + 1);
    v24 = v64;
    v25 = v65;
    v26 = (void *)qword_1ED0BD480;
    v27 = (id)v63;
    objc_msgSend(v26, sel_setFont_, v27);
    objc_msgSend(v26, sel_setTextAlignment_, v23);
    objc_msgSend(v26, sel_setLineBreakMode_, (_QWORD)v24);
    objc_msgSend(v26, sel_setNumberOfLines_, *((_QWORD *)&v24 + 1));
    objc_msgSend(v26, sel_setLineSpacing_, v25);

  }
  v28 = *(void **)v3;
  v29 = *(_QWORD *)(v3 + 8);
  v30 = *(_BYTE *)(v3 + 16);
  v31 = (SEL *)&unk_1E5C05000;
  v32 = (void *)qword_1ED0BD480;
  if ((v30 & 1) != 0)
  {
    objc_msgSend((id)qword_1ED0BD480, sel_setAttributedText_, *(_QWORD *)v3);
  }
  else
  {
    if (v29)
    {
      swift_bridgeObjectRetain();
      v33 = (void *)sub_1AC726208();
      sub_1AC68A814(v28, v29, 0);
    }
    else
    {
      v33 = 0;
    }
    objc_msgSend(v32, sel_setText_, v33);

    v34 = (void *)qword_1ED0BD480;
    v35 = objc_msgSend((id)qword_1ED0BD480, sel_font);
    objc_msgSend(v34, sel_set_fontForShortcutBaselineCalculation_, v35);

    v31 = (SEL *)&unk_1E5C05000;
  }
  v36 = (void *)qword_1ED0BD480;
  objc_msgSend((id)qword_1ED0BD480, sel_sizeThatFits_, width, height);
  v38 = v37;
  v40 = v39;
  objc_msgSend(v36, sel__firstBaselineOffsetFromTop);
  v42 = v41;
  objc_msgSend(v36, sel__baselineOffsetFromBottom);
  v44 = v43;
  if ((*(_BYTE *)(v3 + 104) & 1) != 0)
  {
    v45 = objc_msgSend(v36, sel_font);
    sub_1AC6E4F98(v45, v28, v29, v30);
    v47 = v46;
    v49 = v48;

    v40 = v49 + v40 + v47;
    v42 = v42 + v47;
    v44 = v44 + v49;
  }
  *(_QWORD *)&v50 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v40, v38), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  v51 = constrainHeight(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v40, v38), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  v52 = (void *)qword_1ED0BD480;
  objc_msgSend((id)qword_1ED0BD480, sel_setText_, 0, v51.width);
  if (v14)
  {
    type metadata accessor for Key(0);
    sub_1AC690AA0();
    v53 = (void *)sub_1AC726178();
  }
  else
  {
    v53 = 0;
  }
  objc_msgSend(v52, sel__setDefaultAttributes_, v53);

  objc_msgSend((id)qword_1ED0BD480, v31[383], 0);
  swift_bridgeObjectRelease();
  v54 = v50;
  v55 = v51.height;
  v56 = v42;
  v57 = v44;
  result.var3 = v57;
  result.var2 = v56;
  result.var1 = v55;
  result.var0 = v54;
  return result;
}

uint64_t sub_1AC690918(uint64_t a1)
{
  void (*v1)(void);

  v1 = *(void (**)(void))(a1 + 32);
  type metadata accessor for Key(0);
  sub_1AC688D20((unint64_t *)&qword_1ED0BDC10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728C28);
  sub_1AC726184();
  v1();
  return swift_bridgeObjectRelease();
}

void sub_1AC6909B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;

  type metadata accessor for Key(0);
  sub_1AC690AA0();
  v8 = (id)sub_1AC726178();
  objc_msgSend(a5, sel_addAttributes_range_, v8, a2, a3);

}

void sub_1AC690A48(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1ED0BDDB0);
}

unint64_t sub_1AC690AA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0BDC10;
  if (!qword_1ED0BDC10)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1AF440830](&unk_1AC728C28, v1);
    atomic_store(result, (unint64_t *)&qword_1ED0BDC10);
  }
  return result;
}

uint64_t sub_1AC690AE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1AC690B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1AC690B10(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_1AC690B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_1AC690B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1AC6909B8(a1, a2, a3, a4, *(void **)(v4 + 16));
}

unint64_t sub_1AC690B38()
{
  unint64_t result;

  result = qword_1ED0BE0C0;
  if (!qword_1ED0BE0C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0BE0C0);
  }
  return result;
}

uint64_t sub_1AC690B74(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LabelPlaceholder.Appearance(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  char v6;
  void *v7;
  id v8;

  v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v6 = 1;
  }
  else
  {
    v7 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    v8 = v7;
    v6 = 0;
  }
  *(_BYTE *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_1AC690CC0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE0D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AC690D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  char v6;
  id v7;
  char v8;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  swift_getObjectType();
  sub_1AC690E28(a1, (uint64_t)&v11);
  if (!*((_QWORD *)&v12 + 1))
  {
    sub_1AC690CC0((uint64_t)&v11);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 32);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 40);
  v5 = *(_OWORD *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase + 16);
  v11 = *(_OWORD *)(v1 + OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase);
  v12 = v5;
  v13 = v3;
  v14 = v4;
  _s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0((uint64_t)&v11);
  if ((v6 & 1) == 0)
  {

    goto LABEL_7;
  }
  sub_1AC690E70();
  v7 = *(id *)&v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection];
  v8 = sub_1AC7266A0();

  return v8 & 1;
}

uint64_t sub_1AC690E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AC690E70()
{
  unint64_t result;

  result = qword_1ED0BE0C8;
  if (!qword_1ED0BE0C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0BE0C8);
  }
  return result;
}

void FontUseCase.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_1AC690FE4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1AC726B08();
  ((void (*)(void *))JetFontTextStyleFastHashValue)(v2);
  sub_1AC726B08();
  sub_1AC726B14();
  sub_1AC6921AC(v2, v1, v3, v4, v0, 0);
}

void VerticalStack.Placements.measure.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  void *v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  double v30;
  double v31;
  double v32;
  double v33;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 16);
  v20[0] = *(_OWORD *)v0;
  v20[1] = v5;
  v21 = v1;
  v22[0] = v2;
  v22[1] = v3;
  v22[2] = v4;
  VerticalStack.Placements.union.getter((uint64_t)v29);
  v6 = v30;
  v7 = v31;
  v8 = v32;
  v9 = v33;
  v10 = *(_QWORD *)(v2 + 16);
  if (v10)
  {
    sub_1AC691774(v2 + 32, (uint64_t)v20);
    v11 = v28;
    v12 = v23;
    v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    if ((v11 & 1) != 0)
      v14 = AnyDimension.topMargin(from:with:)(v1, v12, v13, v6, v7, v8);
    else
      v14 = AnyDimension.value(with:)(v1, v12, v13);
    if (v14 < 0.0)
      v15 = 0.0;
    else
      v15 = v14;
    sub_1AC6916CC((uint64_t)v20, &qword_1ED0BD520);
    if (v10 > *(_QWORD *)(v2 + 16))
    {
      __break(1u);
    }
    else
    {
      v16 = v7 + v15;
      sub_1AC691774(v2 + 32 + 144 * v10 - 144, (uint64_t)v20);
      v17 = v28;
      v18 = v26;
      v19 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      if ((v17 & 2) != 0)
        AnyDimension.bottomMargin(from:with:)(v1, v18, v19, v6, v16, v8, v9);
      else
        AnyDimension.value(with:)(v1, v18, v19);
      sub_1AC6916CC((uint64_t)v20, &qword_1ED0BD520);
    }
  }
}

void VerticalStack.Placements.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  double MinX;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  double height;
  double width;
  CGFloat MaxY;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  _BYTE v52[40];
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = v1;
    sub_1AC691774(v3 + 144 * v4 + 32, (uint64_t)v53);
    *(_QWORD *)(v1 + 48) = v4 + 1;
    v6 = *(double *)v1;
    v7 = *(double *)(v1 + 8);
    v9 = *(double *)(v1 + 16);
    v8 = *(double *)(v1 + 24);
    if ((v64 & 1) != 0)
    {
      MinX = CGRectGetMinX(*(CGRect *)v1);
      v11 = *(double *)(v1 + 56);
      sub_1AC68E218((uint64_t)v53, (uint64_t)v52);
      sub_1AC68E218((uint64_t)v52, (uint64_t)&v46);
      v12 = floor(MinX);
      v13 = floor(v11);
LABEL_5:
      *((double *)&v48 + 1) = v12;
      v49 = *(unint64_t *)&v13;
      *(_QWORD *)&v50 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      *((_QWORD *)&v50 + 1) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v14 = v49;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v14;
      v15 = v47;
      *(_OWORD *)a1 = v46;
      *(_OWORD *)(a1 + 16) = v15;
      *(_OWORD *)(a1 + 64) = v50;
LABEL_27:
      sub_1AC6916CC((uint64_t)v53, &qword_1ED0BD520);
      return;
    }
    v65 = *(CGRect *)v1;
    height = v65.size.height;
    width = v65.size.width;
    if (CGRectGetHeight(*(CGRect *)v1) != 0.0)
    {
      v66.origin.x = v6;
      v66.origin.y = v7;
      v66.size.width = v9;
      v66.size.height = v8;
      width = CGRectGetWidth(v66);
      v67.origin.x = v6;
      v67.origin.y = v7;
      v67.size.width = v9;
      v67.size.height = v8;
      MaxY = CGRectGetMaxY(v67);
      v19 = *(double *)(v1 + 56);
      height = MaxY - v19;
      if (MaxY - v19 <= 0.0)
      {
        v70.origin.x = v6;
        v70.origin.y = v7;
        v70.size.width = v9;
        v70.size.height = v8;
        v44 = CGRectGetMinX(v70);
        sub_1AC68E218((uint64_t)v53, (uint64_t)v52);
        sub_1AC68E218((uint64_t)v52, (uint64_t)&v46);
        v12 = floor(v44);
        v13 = floor(v19);
        goto LABEL_5;
      }
    }
    v20 = *(void **)(v1 + 32);
    v21 = v54;
    v22 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    v23 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v22 + 8))(v20, v21, v22, width, height);
    v25 = v24;
    v27 = v26;
    v45 = v28;
    if (v62)
    {
      v29 = v6;
      v30 = v7;
      v31 = v9;
      v32 = v8;
      if (v62 == 1)
      {
        v33 = CGRectGetMidX(*(CGRect *)&v29) + v23 * -0.5;
        if (v33 >= 0.0)
          goto LABEL_18;
      }
      else
      {
        v33 = CGRectGetMaxX(*(CGRect *)&v29) - v23;
        if (v33 >= 0.0)
        {
LABEL_18:
          v34 = v63;
          v35 = v57;
          v36 = v58;
          __swift_project_boxed_opaque_existential_1(v56, v57);
          if ((v34 & 1) != 0)
            v37 = AnyDimension.topMargin(from:with:)(v20, v35, v36, v23, v25, v27);
          else
            v37 = AnyDimension.value(with:)(v20, v35, v36);
          if (v37 < 0.0)
            v37 = 0.0;
          v38 = *(double *)(v5 + 56) + v37;
          v39 = v60;
          v40 = v61;
          __swift_project_boxed_opaque_existential_1(v59, v60);
          if ((v34 & 2) != 0)
            v41 = AnyDimension.bottomMargin(from:with:)(v20, v39, v40, v23, v25, v27, v45);
          else
            v41 = AnyDimension.value(with:)(v20, v39, v40);
          *(double *)(v5 + 56) = v25 + v38 + v41;
          sub_1AC68E218((uint64_t)v53, (uint64_t)v52);
          sub_1AC68E218((uint64_t)v52, (uint64_t)&v46);
          *((_QWORD *)&v48 + 1) = floor(v33);
          *(_QWORD *)&v49 = floor(v38);
          *((_QWORD *)&v49 + 1) = ceil(v23);
          *(_QWORD *)&v50 = ceil(v25);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          *((_QWORD *)&v50 + 1) = floor(v27);
          v51 = floor(v45);
          v42 = v49;
          *(_OWORD *)(a1 + 32) = v48;
          *(_OWORD *)(a1 + 48) = v42;
          v43 = v47;
          *(_OWORD *)a1 = v46;
          *(_OWORD *)(a1 + 16) = v43;
          *(_OWORD *)(a1 + 64) = v50;
          *(double *)(a1 + 80) = v51;
          goto LABEL_27;
        }
      }
    }
    else
    {
      v68.origin.x = v6;
      v68.origin.y = v7;
      v68.size.width = v9;
      v68.size.height = v8;
      v33 = CGRectGetMinX(v68);
      if (v33 >= 0.0)
        goto LABEL_18;
    }
    v69.origin.x = v6;
    v69.origin.y = v7;
    v69.size.width = v9;
    v69.size.height = v8;
    if (CGRectGetWidth(v69) == 0.0)
      v33 = 0.0;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for DSAccessibilityDiagnosticInfo.Rect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1AC6916CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AC691708(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for HorizontalStack.Properties(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t destroy for StaticDimension()
{
  return swift_release();
}

uint64_t sub_1AC691774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6917BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(unsigned __int8 *)(v7 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for StaticDimension(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void _s5JetUI11FontUseCaseO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_1AC691924()
{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  if (v5)
  {
    v26 = v3;
    v35 = v1;
    v37 = v3;
    v27 = v7;
    v28 = v0;
    sub_1AC692480(v1, v26, v0, v9, v4, v2);
    sub_1AC692480(v6, v27, v11, v10, v8, v5);
    sub_1AC6921AC(v35, v37, v28, v9, v4, v2);
    sub_1AC6921AC(v6, v27, v11, v10, v8, v5);
    return 0;
  }
  v34 = v4;
  v36 = v3;
  v12 = v7;
  v13 = v0;
  v33 = v9;
  v14 = v1;
  v15 = sub_1AC72622C();
  v17 = v16;
  if (v15 == sub_1AC72622C() && v17 == v18)
  {
    v29 = v12;
    v30 = v10;
    sub_1AC692480(v6, v12, v11, v10, v8, 0);
    v22 = v36;
    v31 = v13;
    v24 = v29;
    sub_1AC692480(v14, v36, v31, v33, v34, 0);
    sub_1AC692480(v14, v36, v31, v33, v34, 0);
    sub_1AC692480(v6, v29, v11, v30, v8, 0);
    swift_bridgeObjectRelease_n();
    sub_1AC6921AC(v14, v36, v31, v33, v34, 0);
    sub_1AC6921AC(v6, v29, v11, v30, v8, 0);
    sub_1AC6921AC(v6, v29, v11, v30, v8, 0);
    sub_1AC6921AC(v14, v36, v31, v33, v34, 0);
    return v22 == v24;
  }
  v32 = sub_1AC726A78();
  v20 = v12;
  v21 = v10;
  sub_1AC692480(v6, v12, v11, v10, v8, 0);
  v22 = v36;
  v23 = v13;
  v24 = v20;
  sub_1AC692480(v14, v36, v23, v33, v34, 0);
  sub_1AC692480(v14, v36, v23, v33, v34, 0);
  sub_1AC692480(v6, v20, v11, v21, v8, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AC6921AC(v14, v36, v23, v33, v34, 0);
  sub_1AC6921AC(v6, v20, v11, v21, v8, 0);
  sub_1AC6921AC(v6, v20, v11, v21, v8, 0);
  sub_1AC6921AC(v14, v36, v23, v33, v34, 0);
  result = 0;
  if ((v32 & 1) != 0)
    return v22 == v24;
  return result;
}

void sub_1AC6921AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      return;
  }
}

double AnyDimension.value(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  objc_class *v10;
  char *v11;
  id v12;
  double v13;
  objc_super v15;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AC727FB0;
  *(_QWORD *)(v6 + 32) = a1;
  sub_1AC69232C();
  v7 = a1;
  v8 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v8);

  v10 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v11 = (char *)objc_allocWithZone(v10);
  *(_QWORD *)&v11[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v9;
  v15.receiver = v11;
  v15.super_class = v10;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = (*(double (**)(id, uint64_t, uint64_t))(a3 + 8))(v12, a2, a3);

  return v13;
}

unint64_t sub_1AC69232C()
{
  unint64_t result;

  result = qword_1ED0BE0E0;
  if (!qword_1ED0BE0E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0BE0E0);
  }
  return result;
}

uint64_t type metadata accessor for TraitEnvironmentPlaceholder()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for FontSource(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1AC6923FC(*(id *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

id sub_1AC6923FC(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 < 0)
    return sub_1AC692480(a1, a2, a3, a4, a5, a6 & 0x7F);
  else
    return a1;
}

uint64_t initializeWithCopy for FontUseCase(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1AC692480(*(id *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

id sub_1AC692480(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      result = result;
      break;
    case 2:
    case 3:
      swift_bridgeObjectRetain();
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

double sub_1AC6924E8()
{
  return 0.0;
}

double sub_1AC6924F0()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1AC6924F8(void *a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = *(double *)v1;
  v4 = *(_QWORD *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v12);
  v5 = objc_msgSend(a1, sel_traitCollection);
  v6 = v13;
  v7 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  v8 = CustomTextStyle.scalingValues(compatibleWith:)(v5, v6, v7);
  v10 = v9;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10 * (v3 / v8);
}

double CustomTextStyle.scalingValues(compatibleWith:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  double v13;
  uint64_t (*v14)(void);
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  void *v20;

  v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v7 = sub_1AC72622C();
  v9 = v8;
  if (v7 == sub_1AC72622C() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
    return 1.0;
  }
  else
  {
    v12 = sub_1AC726A78();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 1.0;
    if ((v12 & 1) == 0)
    {
      if (qword_1ED0BDC18 != -1)
        swift_once();
      v14 = *(uint64_t (**)(void))(a3 + 8);
      v15 = (id)qword_1ED0BDC20;
      v16 = (void *)v14();

      objc_msgSend(v16, sel_lineHeight);
      v18 = v17;
      objc_msgSend(v16, sel_leading);
      v13 = v18 + v19;
      v20 = (void *)((uint64_t (*)(void *, uint64_t, uint64_t))v14)(a1, a2, a3);
      objc_msgSend(v20, sel_lineHeight);
      objc_msgSend(v20, sel_leading);

    }
  }
  return v13;
}

double sub_1AC692768(double a1, double a2)
{
  id *v2;
  id v5;
  unint64_t v6;
  unint64_t v7;
  double v8;

  v5 = *v2;
  objc_msgSend(*v2, sel_sizeThatFits_);
  *(_QWORD *)&v8 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v7, v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  objc_msgSend(v5, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v5, sel__baselineOffsetFromBottom);
  return v8;
}

void VerticalStack.Placements.union.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  id v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  void *v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v3 = (void *)*((_QWORD *)v1 + 4);
  v4 = *((_QWORD *)v1 + 5);
  v5 = *((_QWORD *)v1 + 6);
  v6 = *((_QWORD *)v1 + 7);
  v7 = v1[1];
  v34 = *v1;
  v35 = v7;
  v36 = v3;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v8 = v3;
  swift_bridgeObjectRetain();
  VerticalStack.Placements.next()((uint64_t)&v28);
  if (*((_QWORD *)&v29 + 1))
  {
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    x = *((double *)&v30 + 1);
    width = *((double *)&v31 + 1);
    y = *(double *)&v31;
    v13 = *((_QWORD *)&v32 + 1);
    height = *(double *)&v32;
    v14 = v33;
    sub_1AC6929AC((uint64_t)&v22);
    VerticalStack.Placements.next()((uint64_t)&v28);
    if (*((_QWORD *)&v29 + 1))
    {
      v20 = v13;
      do
      {
        v21 = v14;
        v24 = v30;
        v25 = v31;
        v26 = v32;
        v27 = v33;
        v22 = v28;
        v23 = v29;
        v15 = *((double *)&v30 + 1);
        v17 = *((double *)&v31 + 1);
        v16 = *(double *)&v31;
        v18 = *(double *)&v32;
        v40.origin.x = x;
        v40.origin.y = y;
        v40.size.width = width;
        v40.size.height = height;
        v42.origin.x = *((CGFloat *)&v30 + 1);
        *(_OWORD *)&v42.origin.y = v31;
        *(_QWORD *)&v42.size.height = v32;
        v41 = CGRectUnion(v40, v42);
        x = v41.origin.x;
        y = v41.origin.y;
        width = v41.size.width;
        height = v41.size.height;
        v41.origin.x = v15;
        v41.origin.y = v16;
        v14 = v21;
        v41.size.width = v17;
        v41.size.height = v18;
        if (!CGRectIsEmpty(v41))
          v14 = v27;
        sub_1AC6929AC((uint64_t)&v22);
        VerticalStack.Placements.next()((uint64_t)&v28);
      }
      while (*((_QWORD *)&v29 + 1));
      v13 = v20;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0.0;
    width = 0.0;
    height = 0.0;
    x = 0.0;
    y = 0.0;
  }
  v19 = v36;
  swift_bridgeObjectRelease();

  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_QWORD *)(a1 + 32) = v13;
  *(double *)(a1 + 40) = v14;
}

uint64_t sub_1AC6929AC(uint64_t a1)
{
  destroy for Constrain();
  return a1;
}

double sub_1AC6929E4(void *a1, CGFloat a2, CGFloat a3)
{
  id v6;
  double v7;
  double v8;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = a2;
  v10.size.height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308)
    a2 = 0.0;
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.width = a2;
  v11.size.height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308)
    a3 = 0.0;
  v6 = a1;
  swift_bridgeObjectRetain();
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.width = a2;
  v12.size.height = a3;
  CGRectGetMinY(v12);
  VerticalStack.Placements.measure.getter();
  v8 = v7;
  swift_bridgeObjectRelease();

  return v8;
}

double AnyDimension.topMargin(from:with:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  return AnyDimension.value(with:)(a1, a2, a3) - a6;
}

uint64_t HorizontalStack.add(_:with:)(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[5];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  _BYTE v26[40];

  v3 = v2;
  sub_1AC68E218(a1, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    v17[2] = v21;
    v17[3] = v22;
    v17[4] = v23;
    v18 = v24;
    v17[0] = v19;
    v17[1] = v20;
    if ((BYTE8(v21) & 1) == 0)
      sub_1AC725F38();
    sub_1AC6A2928((uint64_t)v17);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  sub_1AC692CD0(v2, (uint64_t)v17);
  if (a2)
    a2(v17);
  sub_1AC68E218(a1, (uint64_t)&v19);
  sub_1AC692CD0((uint64_t)v17, (uint64_t)&v21 + 8);
  v6 = *(_QWORD **)(v2 + 88);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1AC692D68(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_1AC692D68((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[16 * v8];
  v10 = v19;
  v11 = v20;
  v12 = v22;
  v9[4] = v21;
  v9[5] = v12;
  v9[2] = v10;
  v9[3] = v11;
  v13 = v23;
  v14 = v24;
  v15 = v25[0];
  *(_OWORD *)((char *)v9 + 138) = *(_OWORD *)((char *)v25 + 10);
  v9[7] = v14;
  v9[8] = v15;
  v9[6] = v13;
  *(_QWORD *)(v3 + 88) = v6;
  return sub_1AC68DF00((uint64_t)v17);
}

uint64_t sub_1AC692CD0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HorizontalStack.Properties(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  return a1;
}

_QWORD *sub_1AC692D68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD570);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[16 * v8 + 4])
      memmove(v10 + 4, a4 + 4, v8 << 7);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD518);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1AC692E8C(void *a1, CGFloat a2, CGFloat a3)
{
  id v6;
  double v7;
  double v8;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = a2;
  v10.size.height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308)
    a2 = 0.0;
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.width = a2;
  v11.size.height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308)
    a3 = 0.0;
  v6 = a1;
  swift_bridgeObjectRetain();
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.width = a2;
  v12.size.height = a3;
  CGRectGetMinX(v12);
  HorizontalStack.Placements.measure.getter();
  v8 = v7;
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t sub_1AC692F98(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v6;
  id v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGPoint origin;
  CGSize size;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat d;
  CGFloat tx;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  _BYTE v47[32];
  CGFloat ty;
  double v49;
  CGFloat v50;
  double v51;
  __int128 v52;
  double v53;
  __int128 v54;
  double rect[7];
  CGAffineTransform v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  CGRect v60;
  _BYTE v61[208];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  CGRect v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v6 = v5;
  sub_1AC693604((_OWORD *)(v6 + 40), &v62);
  sub_1AC68E218(v6, (uint64_t)&v56);
  *(_OWORD *)&v61[104] = v68;
  *(_OWORD *)&v61[120] = v69;
  *(_OWORD *)&v61[136] = v70;
  *(_OWORD *)&v61[152] = v71;
  *(_OWORD *)&v61[40] = v64;
  *(_OWORD *)&v61[56] = v65;
  *(_OWORD *)&v61[72] = v66;
  *(_OWORD *)&v61[88] = v67;
  *(_OWORD *)&v61[8] = v62;
  memset(&v61[168], 0, 40);
  *(CGFloat *)v47 = a2;
  *(CGFloat *)&v47[8] = a3;
  v60.origin.x = a2;
  v60.origin.y = a3;
  *(CGFloat *)&v47[16] = a4;
  *(CGFloat *)&v47[24] = a5;
  v60.size.width = a4;
  v60.size.height = a5;
  *(_QWORD *)v61 = a1;
  *(_OWORD *)&v61[24] = v63;
  v12 = a1;
  sub_1AC69514C((uint64_t)&v61[168]);
  sub_1AC68AAA4((__int128 *)&v56, (uint64_t)&v61[168]);
  v83 = *(_OWORD *)&v61[160];
  v84 = *(_OWORD *)&v61[176];
  v85 = *(_OWORD *)&v61[192];
  v79 = *(_OWORD *)&v61[96];
  v80 = *(_OWORD *)&v61[112];
  v81 = *(_OWORD *)&v61[128];
  v82 = *(_OWORD *)&v61[144];
  v75 = *(_OWORD *)&v61[32];
  v76 = *(_OWORD *)&v61[48];
  v77 = *(_OWORD *)&v61[64];
  v78 = *(_OWORD *)&v61[80];
  v72 = v60;
  v73 = *(_OWORD *)v61;
  v74 = *(_OWORD *)&v61[16];
  sub_1AC693A88((uint64_t)&v72, (uint64_t)&v60);
  sub_1AC695DFC((uint64_t)&v61[168], (uint64_t)&v62);
  if (*((_QWORD *)&v63 + 1))
  {
    while (1)
    {
      sub_1AC68AAA4(&v62, (uint64_t)&v56);
      sub_1AC69514C((uint64_t)&v61[168]);
      memset(&v61[168], 0, 40);
      v13 = *(_QWORD *)v61;
      v14 = sub_1AC69388C(*(void **)v61);
      rect[0] = v15;
      v17 = v16;
      origin = v60.origin;
      size = v60.size;
      v21 = CGRectGetWidth(v60) - (v15 + v20);
      v86.origin = origin;
      v86.size = size;
      v49 = v17;
      v22 = CGRectGetHeight(v86) - (v14 + v17);
      if (v21 < 0.0)
        v21 = 0.0;
      v23 = v22 < 0.0 ? 0.0 : v22;
      d = v56.d;
      tx = v56.tx;
      __swift_project_boxed_opaque_existential_1(&v56, *(uint64_t *)&v56.d);
      v51 = (*(double (**)(uint64_t, CGFloat, CGFloat, double, double))(*(_QWORD *)&tx + 8))(v13, COERCE_CGFLOAT(*(_QWORD *)&d), COERCE_CGFLOAT(*(_QWORD *)&tx), v21, v23);
      v53 = v26;
      v28 = v27;
      v30 = v29;
      v87.origin = origin;
      v87.size = size;
      v31 = rect[0] + CGRectGetMinX(v87);
      v88.origin = origin;
      v88.size = size;
      v32 = v14 + CGRectGetMinY(v88);
      sub_1AC68E218((uint64_t)&v56, (uint64_t)&rect[1]);
      sub_1AC68E218((uint64_t)&rect[1], (uint64_t)&v62);
      *((_QWORD *)&v64 + 1) = floor(v31);
      *(_QWORD *)&v65 = floor(v32);
      *((_QWORD *)&v65 + 1) = ceil(v51);
      *(_QWORD *)&v66 = ceil(v53);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      v33 = v62;
      v34 = v63;
      v35 = v64;
      v36 = v65;
      v37 = v66;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      if (!*((_QWORD *)&v34 + 1))
        break;
      v62 = v33;
      v63 = v34;
      v64 = v35;
      v65 = v36;
      *(_QWORD *)&v66 = v37;
      *((_QWORD *)&v66 + 1) = floor(v14 + v28);
      *(_QWORD *)&v67 = floor(v49 + v30);
      sub_1AC68E218((uint64_t)&v62, (uint64_t)v57);
      v38 = v58;
      v39 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      x = *((double *)&v64 + 1);
      width = *((double *)&v65 + 1);
      y = *(double *)&v65;
      height = *(double *)&v66;
      if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v56, -1.0, 1.0);
        v52 = *(_OWORD *)&v56.c;
        v54 = *(_OWORD *)&v56.a;
        v50 = v56.tx;
        ty = v56.ty;
        rect[0] = x;
        MinX = CGRectGetMinX(*(CGRect *)v47);
        MaxX = CGRectGetMaxX(*(CGRect *)v47);
        *(_OWORD *)&v56.a = v54;
        *(_OWORD *)&v56.c = v52;
        v56.tx = v50;
        v56.ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v56, -(MinX + MaxX), 0.0);
        v56 = *(CGAffineTransform *)&rect[1];
        v89.origin.x = rect[0];
        v89.origin.y = y;
        v89.size.width = width;
        v89.size.height = height;
        v90 = CGRectApplyAffineTransform(v89, &v56);
        x = v90.origin.x;
        y = v90.origin.y;
        width = v90.size.width;
        height = v90.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v39 + 16))(v12, v38, v39, x, y, width, height);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      sub_1AC6929AC((uint64_t)&v62);
      sub_1AC695DFC((uint64_t)&v61[168], (uint64_t)&v62);
      if (!*((_QWORD *)&v63 + 1))
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    sub_1AC69514C((uint64_t)&v62);
  }
  sub_1AC693804((uint64_t)&v60);
  return sub_1AC693804((uint64_t)&v72);
}

double sub_1AC693454(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  id v7;
  double v8;
  __int128 v10;
  _BYTE v11[208];
  __int128 v12[2];
  _OWORD v13[10];
  _OWORD v14[15];
  CGRect v15;
  CGRect v16;

  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = a2;
  v15.size.height = a3;
  if (CGRectGetWidth(v15) == 1.79769313e308)
    a2 = 0.0;
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = a2;
  v16.size.height = a3;
  if (CGRectGetHeight(v16) == 1.79769313e308)
    a3 = 0.0;
  sub_1AC693604((_OWORD *)(v3 + 40), v13);
  sub_1AC68E218(v3, (uint64_t)v12);
  memset(&v11[168], 0, 40);
  *(CGFloat *)&v10 = a2;
  *((CGFloat *)&v10 + 1) = a3;
  *(_QWORD *)v11 = a1;
  *(_OWORD *)&v11[104] = v13[6];
  *(_OWORD *)&v11[120] = v13[7];
  *(_OWORD *)&v11[136] = v13[8];
  *(_OWORD *)&v11[152] = v13[9];
  *(_OWORD *)&v11[40] = v13[2];
  *(_OWORD *)&v11[56] = v13[3];
  *(_OWORD *)&v11[72] = v13[4];
  *(_OWORD *)&v11[88] = v13[5];
  *(_OWORD *)&v11[8] = v13[0];
  *(_OWORD *)&v11[24] = v13[1];
  v7 = a1;
  sub_1AC69514C((uint64_t)&v11[168]);
  sub_1AC68AAA4(v12, (uint64_t)&v11[168]);
  v14[12] = *(_OWORD *)&v11[160];
  v14[13] = *(_OWORD *)&v11[176];
  v14[14] = *(_OWORD *)&v11[192];
  v14[8] = *(_OWORD *)&v11[96];
  v14[9] = *(_OWORD *)&v11[112];
  v14[10] = *(_OWORD *)&v11[128];
  v14[11] = *(_OWORD *)&v11[144];
  v14[4] = *(_OWORD *)&v11[32];
  v14[5] = *(_OWORD *)&v11[48];
  v14[6] = *(_OWORD *)&v11[64];
  v14[7] = *(_OWORD *)&v11[80];
  v14[0] = 0uLL;
  v14[1] = v10;
  v14[2] = *(_OWORD *)v11;
  v14[3] = *(_OWORD *)&v11[16];
  v8 = Margins.Placements.measure.getter();
  sub_1AC693804((uint64_t)v14);
  return v8;
}

_OWORD *sub_1AC693604(_OWORD *a1, _OWORD *a2)
{
  initializeWithCopy for Margins.Insets(a2, a1);
  return a2;
}

_OWORD *initializeWithCopy for Margins.Insets(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

double Margins.Placements.measure.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[240];
  CGRect v19;
  CGRect v20;

  sub_1AC693A88(v0, (uint64_t)v18);
  Margins.Placements.next()((uint64_t)&v12);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = v14;
    v9 = v15;
    v10 = v16;
    v11 = v17;
    v7[0] = v12;
    v7[1] = v13;
    sub_1AC69388C(*(void **)(v0 + 32));
    v2 = v1;
    v4 = v3;
    v19.origin.x = *((CGFloat *)&v8 + 1);
    *(_OWORD *)&v19.origin.y = v9;
    *(_QWORD *)&v19.size.height = v10;
    v5 = v4 + v2 + CGRectGetWidth(v19);
    v20.origin.x = *((CGFloat *)&v8 + 1);
    *(_OWORD *)&v20.origin.y = v9;
    *(_QWORD *)&v20.size.height = v10;
    CGRectGetHeight(v20);
    sub_1AC6929AC((uint64_t)v7);
    sub_1AC693804((uint64_t)v18);
  }
  else
  {
    sub_1AC693804((uint64_t)v18);
    return 0.0;
  }
  return v5;
}

uint64_t sub_1AC693804(uint64_t a1)
{
  destroy for Margins.Placements(a1);
  return a1;
}

uint64_t destroy for Margins.Placements(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  result = __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  if (*(_QWORD *)(a1 + 224))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  return result;
}

double sub_1AC69388C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  objc_class *v8;
  char *v9;
  id v10;
  uint64_t v11;
  double (*v12)(void);
  id v13;
  double v14;
  uint64_t v15;
  void (*v16)(void);
  id v17;
  uint64_t v18;
  void (*v19)(void);
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  id v25;
  objc_super v27;
  uint64_t v28;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AC727FB0;
  *(_QWORD *)(v4 + 32) = a1;
  v28 = v4;
  sub_1AC7263AC();
  sub_1AC69232C();
  v5 = a1;
  v6 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v6);

  v8 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v9 = (char *)objc_allocWithZone(v8);
  *(_QWORD *)&v9[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v7;
  v27.receiver = v9;
  v27.super_class = v8;
  v10 = objc_msgSendSuper2(&v27, sel_init);
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v12 = *(double (**)(void))(v11 + 8);
  v13 = v10;
  v14 = v12();

  v15 = v2[9];
  __swift_project_boxed_opaque_existential_1(v2 + 5, v2[8]);
  v16 = *(void (**)(void))(v15 + 8);
  v17 = v13;
  v16();

  v18 = v2[14];
  __swift_project_boxed_opaque_existential_1(v2 + 10, v2[13]);
  v19 = *(void (**)(void))(v18 + 8);
  v20 = v17;
  v19();

  v21 = v2 + 15;
  v23 = v2[18];
  v22 = v2[19];
  __swift_project_boxed_opaque_existential_1(v21, v23);
  v24 = *(void (**)(void))(v22 + 8);
  v25 = v20;
  v24();

  return v14;
}

uint64_t sub_1AC693A88(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Margins.Placements(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for Margins.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = a1 + 40;
  v7 = a2 + 40;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  v11 = v5;
  v10(v6, v7, v9);
  v12 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 80, a2 + 80);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 120, a2 + 120);
  v14 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 160, a2 + 160);
  v15 = (_OWORD *)(a1 + 200);
  v16 = (_OWORD *)(a2 + 200);
  v17 = *(_QWORD *)(a2 + 224);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v17;
    *(_QWORD *)(a1 + 232) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 216);
    *v15 = *v16;
    *(_OWORD *)(a1 + 216) = v19;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  }
  return a1;
}

uint64_t Margins.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  uint64_t result;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  double v41;
  _BYTE v42[40];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  sub_1AC695DFC(v1 + 200, (uint64_t)&v36);
  if (*((_QWORD *)&v37 + 1))
  {
    sub_1AC68AAA4(&v36, (uint64_t)v43);
    sub_1AC6916CC(v1 + 200, &qword_1ED0BD568);
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    *(_QWORD *)(v1 + 232) = 0;
    v3 = *(void **)(v1 + 32);
    v4 = sub_1AC69388C(v3);
    v6 = v5;
    v34 = v5;
    v35 = v7;
    v8 = v7;
    v10 = v9;
    v11 = *(double *)v1;
    v12 = *(double *)(v1 + 8);
    v13 = *(double *)(v1 + 16);
    v14 = *(double *)(v1 + 24);
    v46.origin.x = *(CGFloat *)v1;
    v46.origin.y = v12;
    v46.size.width = v13;
    v46.size.height = v14;
    v15 = CGRectGetWidth(v46) - (v6 + v10);
    v47.origin.x = v11;
    v47.origin.y = v12;
    v47.size.width = v13;
    v47.size.height = v14;
    v16 = CGRectGetHeight(v47) - (v4 + v8);
    if (v15 < 0.0)
      v17 = 0.0;
    else
      v17 = v15;
    if (v16 < 0.0)
      v18 = 0.0;
    else
      v18 = v16;
    v19 = v44;
    v20 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    v21 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v20 + 8))(v3, v19, v20, v17, v18);
    v32 = v22;
    v33 = v21;
    v24 = v23;
    v26 = v25;
    v48.origin.x = v11;
    v48.origin.y = v12;
    v48.size.width = v13;
    v48.size.height = v14;
    v27 = v34 + CGRectGetMinX(v48);
    v49.origin.x = v11;
    v49.origin.y = v12;
    v49.size.width = v13;
    v49.size.height = v14;
    v28 = v4 + CGRectGetMinY(v49);
    sub_1AC68E218((uint64_t)v43, (uint64_t)v42);
    sub_1AC68E218((uint64_t)v42, (uint64_t)&v36);
    *((_QWORD *)&v38 + 1) = floor(v27);
    *(_QWORD *)&v39 = floor(v28);
    *((_QWORD *)&v39 + 1) = ceil(v33);
    *(_QWORD *)&v40 = ceil(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    *((_QWORD *)&v40 + 1) = floor(v4 + v24);
    v41 = floor(v35 + v26);
    v29 = v39;
    *(_OWORD *)(a1 + 32) = v38;
    *(_OWORD *)(a1 + 48) = v29;
    v30 = v37;
    *(_OWORD *)a1 = v36;
    *(_OWORD *)(a1 + 16) = v30;
    *(_OWORD *)(a1 + 64) = v40;
    *(double *)(a1 + 80) = v41;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
  else
  {
    result = sub_1AC6916CC((uint64_t)&v36, &qword_1ED0BD568);
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

void HorizontalStack.Placements.measure.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  void *v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  CGFloat v19[2];

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v5;
  v12 = v1;
  v13[0] = v2;
  v13[1] = v3;
  v13[2] = v4;
  HorizontalStack.Placements.union.getter(v19);
  v6 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    sub_1AC6902E4(v2 + 32, (uint64_t)v11, &qword_1ED0BD518);
    v7 = v14;
    v8 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    AnyDimension.value(with:)(v1, v7, v8);
    sub_1AC6916CC((uint64_t)v11, &qword_1ED0BD518);
    if (v6 > *(_QWORD *)(v2 + 16))
    {
      __break(1u);
    }
    else
    {
      sub_1AC6902E4(v2 + 32 + (v6 << 7) - 128, (uint64_t)v11, &qword_1ED0BD518);
      v9 = v17;
      v10 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      AnyDimension.value(with:)(v1, v9, v10);
      sub_1AC6916CC((uint64_t)v11, &qword_1ED0BD518);
    }
  }
}

void sub_1AC693F64(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double x;
  double y;
  double width;
  double height;
  double v19;
  CGFloat MaxX;
  void *v21;
  CGFloat v22;
  CGFloat ty;
  CGFloat tx;
  __int128 v25;
  __int128 v26;
  _QWORD rect[7];
  CGAffineTransform v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  CGFloat MinX;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v10 = *(_QWORD *)(v5 + 88);
  v11 = a1;
  swift_bridgeObjectRetain();
  v51.origin.x = a2;
  v51.origin.y = a3;
  v51.size.width = a4;
  v51.size.height = a5;
  v43 = a2;
  v44 = a3;
  v22 = a5;
  v45 = a4;
  v46 = a5;
  v47 = v11;
  v48 = v10;
  v49 = 0;
  MinX = CGRectGetMinX(v51);
  v12 = v11;
  swift_bridgeObjectRetain();
  HorizontalStack.Placements.next()((uint64_t)&v37);
  while (*((_QWORD *)&v38 + 1))
  {
    v33 = v39;
    v34 = v40;
    v35 = v41;
    v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1AC68E218((uint64_t)v32, (uint64_t)v29);
    v13 = v30;
    v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    x = *((double *)&v33 + 1);
    width = *((double *)&v34 + 1);
    y = *(double *)&v34;
    height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      v25 = *(_OWORD *)&v28.c;
      v26 = *(_OWORD *)&v28.a;
      ty = v28.ty;
      tx = v28.tx;
      v52.origin.x = a2;
      v52.origin.y = a3;
      v52.size.width = a4;
      v52.size.height = v22;
      *(double *)rect = x;
      v19 = CGRectGetMinX(v52);
      v53.origin.x = a2;
      v53.origin.y = a3;
      v53.size.width = a4;
      v53.size.height = v22;
      MaxX = CGRectGetMaxX(v53);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.tx = tx;
      v28.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(v19 + MaxX), 0.0);
      v28 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v54.origin.x = rect[0];
      v54.origin.y = y;
      v54.size.width = width;
      v54.size.height = height;
      v55 = CGRectApplyAffineTransform(v54, &v28);
      x = v55.origin.x;
      y = v55.origin.y;
      width = v55.size.width;
      height = v55.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1AC6929AC((uint64_t)v32);
    HorizontalStack.Placements.next()((uint64_t)&v37);
  }
  v21 = v47;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t HorizontalStack.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double MinY;
  double v8;
  __int128 v9;
  __int128 v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  CGFloat MaxX;
  double v18;
  double Height;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[40];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  char v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      v5 = v1;
      sub_1AC6902E4(v3 + (v4 << 7) + 32, (uint64_t)v36, &qword_1ED0BD518);
      *(_QWORD *)(v1 + 48) = v4 + 1;
      if ((v46 & 1) != 0)
      {
        v6 = *(double *)(v1 + 56);
        MinY = CGRectGetMinY(*(CGRect *)v1);
        sub_1AC68E218((uint64_t)v36, (uint64_t)v35);
        sub_1AC68E218((uint64_t)v35, (uint64_t)v31);
        v8 = floor(v6);
LABEL_5:
        *((double *)&v32 + 1) = v8;
        v33 = COERCE_UNSIGNED_INT64(floor(MinY));
        *(_QWORD *)&v34 = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
        *((_QWORD *)&v34 + 1) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        v9 = v33;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)(a1 + 48) = v9;
        v10 = v31[1];
        *(_OWORD *)a1 = v31[0];
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 64) = v34;
        return sub_1AC6916CC((uint64_t)v36, &qword_1ED0BD518);
      }
      v12 = *(double *)v1;
      v11 = *(double *)(v1 + 8);
      v14 = *(double *)(v1 + 16);
      v13 = *(double *)(v1 + 24);
      v47.origin.x = *(CGFloat *)v1;
      v47.origin.y = v11;
      v47.size.width = v14;
      v47.size.height = v13;
      if (CGRectGetWidth(v47) == 0.0)
      {
        v15 = v13;
        v16 = v14;
      }
      else
      {
        v48.origin.x = v12;
        v48.origin.y = v11;
        v48.size.width = v14;
        v48.size.height = v13;
        MaxX = CGRectGetMaxX(v48);
        v18 = *(double *)(v1 + 56);
        v16 = MaxX - v18;
        v49.origin.x = v12;
        v49.origin.y = v11;
        v49.size.width = v14;
        v49.size.height = v13;
        Height = CGRectGetHeight(v49);
        if (v16 <= 0.0)
        {
          v50.origin.x = v12;
          v50.origin.y = v11;
          v50.size.width = v14;
          v50.size.height = v13;
          MinY = CGRectGetMinY(v50);
          sub_1AC68E218((uint64_t)v36, (uint64_t)v35);
          sub_1AC68E218((uint64_t)v35, (uint64_t)v31);
          v8 = floor(v18);
          goto LABEL_5;
        }
        v15 = Height;
      }
      v20 = *(void **)(v1 + 32);
      v21 = v37;
      v22 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      v23 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v22 + 8))(v20, v21, v22, v16, v15);
      v24 = v40;
      v25 = v41;
      __swift_project_boxed_opaque_existential_1(v39, v40);
      v26 = AnyDimension.value(with:)(v20, v24, v25);
      if (v26 < 0.0)
        v26 = 0.0;
      v27 = *(double *)(v5 + 56) + v26;
      v28 = v43;
      v29 = v44;
      __swift_project_boxed_opaque_existential_1(v42, v43);
      *(double *)(v5 + 56) = v23 + v27 + AnyDimension.value(with:)(v20, v28, v29);
      __asm { BR              X10 }
    }
    __break(1u);
  }
  return result;
}

double sub_1AC6945C0(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  uint64_t v7;
  id v8;
  double v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16[2];
  _OWORD v17[5];
  uint64_t v18;
  CGRect v19;
  CGRect v20;

  v19.origin.x = 0.0;
  v19.origin.y = 0.0;
  v19.size.width = a2;
  v19.size.height = a3;
  if (CGRectGetWidth(v19) == 1.79769313e308)
    a2 = 0.0;
  v20.origin.x = 0.0;
  v20.origin.y = 0.0;
  v20.size.width = a2;
  v20.size.height = a3;
  if (CGRectGetHeight(v20) == 1.79769313e308)
    a3 = 0.0;
  v7 = *(_QWORD *)(v3 + 40);
  sub_1AC68E218(v3, (uint64_t)v16);
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  *(CGFloat *)&v11 = a2;
  *((CGFloat *)&v11 + 1) = a3;
  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = v7;
  v8 = a1;
  sub_1AC69514C((uint64_t)&v13);
  sub_1AC68AAA4(v16, (uint64_t)&v13);
  v17[2] = v12;
  v17[3] = v13;
  v17[4] = v14;
  v18 = v15;
  v17[0] = 0uLL;
  v17[1] = v11;
  v9 = Center.Placements.measure.getter();
  sub_1AC694D3C((uint64_t)v17);
  return v9;
}

double Center.Placements.measure.getter()
{
  uint64_t v0;
  CGRect *v1;
  double v2;
  uint64_t v3;
  double Width;
  _QWORD v6[8];
  _BYTE v7[88];

  v1 = (CGRect *)v0;
  sub_1AC69628C(v0, (uint64_t)v7);
  Center.Placements.next()((uint64_t)v6);
  if (v6[3])
  {
    v2 = *(double *)&v6[7];
    sub_1AC6929AC((uint64_t)v6);
    sub_1AC694D3C((uint64_t)v7);
    v3 = *(_QWORD *)(v0 + 40);
    if ((v3 & 1) == 0)
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1AC694D3C((uint64_t)v7);
  if (qword_1EEC89658 != -1)
    swift_once();
  v2 = *(double *)&xmmword_1EEC8A840;
  v3 = *(_QWORD *)(v0 + 40);
  if ((v3 & 1) != 0)
  {
LABEL_3:
    Width = CGRectGetWidth(*v1);
    if (v2 <= Width)
      v2 = Width;
  }
LABEL_5:
  if ((v3 & 2) != 0)
    CGRectGetHeight(*v1);
  return v2;
}

uint64_t Center.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  _BYTE v29[40];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  CGRect v33;
  CGRect v34;

  v2 = v1;
  v4 = v1 + 48;
  sub_1AC695DFC(v4, (uint64_t)&v23);
  if (*((_QWORD *)&v24 + 1))
  {
    sub_1AC68AAA4(&v23, (uint64_t)v30);
    sub_1AC69514C(v4);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(v4 + 32) = 0;
    v5 = v31;
    v6 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    v7 = *(double *)(v2 + 16);
    v8 = *(double *)(v2 + 24);
    v9 = (*(double (**)(_QWORD, uint64_t, uint64_t, double, double))(v6 + 8))(*(_QWORD *)(v2 + 32), v5, v6, v7, v8);
    v11 = v10;
    v21 = v13;
    v22 = v12;
    v14 = *(double *)v2;
    v15 = *(double *)(v2 + 8);
    v33.origin.x = *(CGFloat *)v2;
    v33.origin.y = v15;
    v33.size.width = v7;
    v33.size.height = v8;
    v16 = CGRectGetMidX(v33) - v9 * 0.5;
    v34.origin.x = v14;
    v34.origin.y = v15;
    v34.size.width = v7;
    v34.size.height = v8;
    v17 = CGRectGetMidY(v34) - v11 * 0.5;
    sub_1AC68E218((uint64_t)v30, (uint64_t)v29);
    sub_1AC68E218((uint64_t)v29, (uint64_t)&v23);
    *((_QWORD *)&v25 + 1) = floor(v16);
    *(_QWORD *)&v26 = floor(v17);
    *((_QWORD *)&v26 + 1) = ceil(v9);
    *(_QWORD *)&v27 = ceil(v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    *((_QWORD *)&v27 + 1) = floor(v22);
    v28 = floor(v21);
    v18 = v26;
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)(a1 + 48) = v18;
    v19 = v24;
    *(_OWORD *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v19;
    *(_OWORD *)(a1 + 64) = v27;
    *(double *)(a1 + 80) = v28;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    result = sub_1AC69514C((uint64_t)&v23);
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1AC694994(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v11;
  id v12;
  CGFloat d;
  CGFloat tx;
  CGSize v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGPoint v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  _BYTE v42[32];
  CGFloat ty;
  CGFloat v44;
  __int128 v45;
  __int128 v46;
  double rect[7];
  CGAffineTransform v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  CGPoint v62;
  CGSize v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[5];
  uint64_t v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v11 = *(_QWORD *)(v5 + 40);
  sub_1AC68E218(v5, (uint64_t)&v52);
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  *(CGFloat *)v42 = a2;
  *(CGFloat *)&v42[8] = a3;
  v62.x = a2;
  v62.y = a3;
  *(CGFloat *)&v42[16] = a4;
  *(CGFloat *)&v42[24] = a5;
  v63.width = a4;
  v63.height = a5;
  *(_QWORD *)&v64 = a1;
  *((_QWORD *)&v64 + 1) = v11;
  v12 = a1;
  sub_1AC69514C((uint64_t)&v65);
  sub_1AC68AAA4(&v52, (uint64_t)&v65);
  v68[2] = v64;
  v68[3] = v65;
  v68[4] = v66;
  v69 = v67;
  v68[0] = v62;
  v68[1] = v63;
  sub_1AC69628C((uint64_t)v68, (uint64_t)&v62);
  sub_1AC695DFC((uint64_t)&v65, (uint64_t)&v52);
  if (v54)
  {
    while (1)
    {
      sub_1AC68AAA4(&v52, (uint64_t)&v48);
      sub_1AC69514C((uint64_t)&v65);
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      d = v48.d;
      tx = v48.tx;
      __swift_project_boxed_opaque_existential_1(&v48, *(uint64_t *)&v48.d);
      v15 = v63;
      v16 = (*(double (**)(_QWORD, CGFloat, CGFloat, CGFloat, CGFloat))(*(_QWORD *)&tx + 8))(v64, COERCE_CGFLOAT(*(_QWORD *)&d), COERCE_CGFLOAT(*(_QWORD *)&tx), v63.width, v63.height);
      v18 = v17;
      v20 = v19;
      v22 = v21;
      v23 = v62;
      v70.origin = v62;
      v70.size = v15;
      rect[0] = CGRectGetMidX(v70) - v16 * 0.5;
      v71.origin = v23;
      v71.size = v15;
      v24 = CGRectGetMidY(v71) - v18 * 0.5;
      sub_1AC68E218((uint64_t)&v48, (uint64_t)&rect[1]);
      sub_1AC68E218((uint64_t)&rect[1], (uint64_t)&v52);
      v56 = floor(rect[0]);
      v57 = floor(v24);
      v58 = ceil(v16);
      v59 = ceil(v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      v25 = v52;
      v26 = v53;
      v27 = v54;
      v28 = v55;
      v29 = v56;
      v31 = v57;
      v30 = v58;
      v32 = v59;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      if (!v27)
        break;
      v52 = v25;
      v53 = v26;
      v54 = v27;
      v55 = v28;
      v56 = v29;
      v57 = v31;
      v58 = v30;
      v59 = v32;
      v60 = floor(v20);
      v61 = floor(v22);
      sub_1AC68E218((uint64_t)&v52, (uint64_t)v49);
      v33 = v50;
      v34 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      x = v56;
      y = v57;
      width = v58;
      height = v59;
      if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v48, -1.0, 1.0);
        v45 = *(_OWORD *)&v48.c;
        v46 = *(_OWORD *)&v48.a;
        ty = v48.ty;
        v44 = v48.tx;
        rect[0] = x;
        MinX = CGRectGetMinX(*(CGRect *)v42);
        MaxX = CGRectGetMaxX(*(CGRect *)v42);
        *(_OWORD *)&v48.a = v46;
        *(_OWORD *)&v48.c = v45;
        v48.tx = v44;
        v48.ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v48, -(MinX + MaxX), 0.0);
        v48 = *(CGAffineTransform *)&rect[1];
        v72.origin.x = rect[0];
        v72.origin.y = y;
        v72.size.width = width;
        v72.size.height = height;
        v73 = CGRectApplyAffineTransform(v72, &v48);
        x = v73.origin.x;
        y = v73.origin.y;
        width = v73.size.width;
        height = v73.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v34 + 16))(v12, v33, v34, x, y, width, height);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      sub_1AC6929AC((uint64_t)&v52);
      sub_1AC695DFC((uint64_t)&v65, (uint64_t)&v52);
      if (!v54)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    sub_1AC69514C((uint64_t)&v52);
  }
  sub_1AC694D3C((uint64_t)&v62);
  return sub_1AC694D3C((uint64_t)v68);
}

uint64_t sub_1AC694D3C(uint64_t a1)
{
  destroy for Center.Placements(a1);
  return a1;
}

void destroy for Center.Placements(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
}

uint64_t sub_1AC694DA4(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  CGFloat v21;
  CGFloat ty;
  CGFloat tx;
  __int128 v24;
  __int128 v25;
  _QWORD rect[7];
  CGAffineTransform v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42[17];
  _QWORD v43[5];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  sub_1AC695D34(v5 + 40, (uint64_t)&v44);
  sub_1AC695D34(v5 + 88, (uint64_t)&v45);
  sub_1AC695D34(v5 + 136, (uint64_t)&v46);
  sub_1AC695D34(v5 + 184, (uint64_t)&v47);
  sub_1AC68E218(v5, (uint64_t)v42);
  memset(v48, 0, sizeof(v48));
  *(CGFloat *)v43 = a2;
  *(CGFloat *)&v43[1] = a3;
  v21 = a5;
  *(CGFloat *)&v43[2] = a4;
  *(CGFloat *)&v43[3] = a5;
  v49 = 0;
  v43[4] = a1;
  v11 = a1;
  sub_1AC69514C((uint64_t)v48);
  sub_1AC68AAA4(v42, (uint64_t)v48);
  sub_1AC695324((uint64_t)v43, (uint64_t)v42);
  Resize.Placements.next()((uint64_t)&v36);
  while (*((_QWORD *)&v37 + 1))
  {
    v32 = v38;
    v33 = v39;
    v34 = v40;
    v35 = v41;
    v31[0] = v36;
    v31[1] = v37;
    sub_1AC68E218((uint64_t)v31, (uint64_t)v28);
    v12 = v29;
    v13 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    x = *((double *)&v32 + 1);
    width = *((double *)&v33 + 1);
    y = *(double *)&v33;
    height = *(double *)&v34;
    if (objc_msgSend(v11, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v27, -1.0, 1.0);
      v24 = *(_OWORD *)&v27.c;
      v25 = *(_OWORD *)&v27.a;
      ty = v27.ty;
      tx = v27.tx;
      v50.origin.x = a2;
      v50.origin.y = a3;
      v50.size.width = a4;
      v50.size.height = v21;
      *(double *)rect = x;
      MinX = CGRectGetMinX(v50);
      v51.origin.x = a2;
      v51.origin.y = a3;
      v51.size.width = a4;
      v51.size.height = v21;
      MaxX = CGRectGetMaxX(v51);
      *(_OWORD *)&v27.a = v25;
      *(_OWORD *)&v27.c = v24;
      v27.tx = tx;
      v27.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v27, -(MinX + MaxX), 0.0);
      v27 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v52.origin.x = rect[0];
      v52.origin.y = y;
      v52.size.width = width;
      v52.size.height = height;
      v53 = CGRectApplyAffineTransform(v52, &v27);
      x = v53.origin.x;
      y = v53.origin.y;
      width = v53.size.width;
      height = v53.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v13 + 16))(v11, v12, v13, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    sub_1AC6929AC((uint64_t)v31);
    Resize.Placements.next()((uint64_t)&v36);
  }
  sub_1AC695048((uint64_t)v42);
  return sub_1AC695048((uint64_t)v43);
}

uint64_t sub_1AC695048(uint64_t a1)
{
  destroy for Resize.Placements(a1);
  return a1;
}

void destroy for Resize.Placements(uint64_t a1)
{

  if (*(_BYTE *)(a1 + 80) == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  if (*(_BYTE *)(a1 + 128) == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(a1 + 128))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  }
  if (*(_BYTE *)(a1 + 176) == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  }
  if (*(_BYTE *)(a1 + 224) == 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 256))
LABEL_17:
      __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 224))
      __swift_destroy_boxed_opaque_existential_1(a1 + 184);
    if (*(_QWORD *)(a1 + 256))
      goto LABEL_17;
  }
}

uint64_t sub_1AC69514C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1AC69518C(void *a1, CGFloat a2, CGFloat a3)
{
  double v6;
  double v7;
  _BYTE v9[272];
  CGRect v10;
  CGRect v11;

  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = a2;
  v10.size.height = a3;
  if (CGRectGetWidth(v10) == 1.79769313e308)
    a2 = 0.0;
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.width = a2;
  v11.size.height = a3;
  if (CGRectGetHeight(v11) == 1.79769313e308)
    v6 = 0.0;
  else
    v6 = a3;
  Resize.layout(relativeTo:with:)(a1, (uint64_t)v9, 0.0, 0.0, a2, v6);
  v7 = sub_1AC695268();
  sub_1AC695048((uint64_t)v9);
  return v7;
}

double sub_1AC695268()
{
  uint64_t v0;
  double v1;
  _BYTE v3[24];
  uint64_t v4;
  double v5;
  _BYTE v6[272];

  sub_1AC695324(v0, (uint64_t)v6);
  Resize.Placements.next()((uint64_t)v3);
  if (v4)
  {
    v1 = v5;
    sub_1AC6929AC((uint64_t)v3);
    sub_1AC695048((uint64_t)v6);
  }
  else
  {
    sub_1AC695048((uint64_t)v6);
    if (qword_1EEC89658 != -1)
      swift_once();
    v1 = *(double *)&xmmword_1EEC8A840;
  }
  return ceil(v1);
}

uint64_t sub_1AC695324(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Resize.Placements(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for Resize.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  int v6;
  id v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(unsigned __int8 *)(a2 + 80);
  v7 = v5;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 80) = 1;
    swift_retain();
  }
  else
  {
    v8 = (_OWORD *)(a1 + 40);
    v9 = (_OWORD *)(a2 + 40);
    if (v6)
    {
      v12 = *(_OWORD *)(a2 + 56);
      *v8 = *v9;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v10;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
      *(_BYTE *)(a1 + 80) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 128) == 1)
  {
    v16 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v16;
    *(_BYTE *)(a1 + 128) = 1;
    swift_retain();
  }
  else
  {
    v13 = (_OWORD *)(a1 + 88);
    v14 = (_OWORD *)(a2 + 88);
    if (*(_BYTE *)(a2 + 128))
    {
      v17 = *(_OWORD *)(a2 + 104);
      *v13 = *v14;
      *(_OWORD *)(a1 + 104) = v17;
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 112) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
      *(_BYTE *)(a1 + 128) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 176) == 1)
  {
    v21 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v21;
    *(_BYTE *)(a1 + 176) = 1;
    swift_retain();
  }
  else
  {
    v18 = (_OWORD *)(a1 + 136);
    v19 = (_OWORD *)(a2 + 136);
    if (*(_BYTE *)(a2 + 176))
    {
      v22 = *(_OWORD *)(a2 + 152);
      *v18 = *v19;
      *(_OWORD *)(a1 + 152) = v22;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    }
    else
    {
      v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
      *(_BYTE *)(a1 + 176) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 224) == 1)
  {
    v26 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v26;
    *(_BYTE *)(a1 + 224) = 1;
    swift_retain();
  }
  else
  {
    v23 = (_OWORD *)(a1 + 184);
    v24 = (_OWORD *)(a2 + 184);
    if (*(_BYTE *)(a2 + 224))
    {
      v27 = *(_OWORD *)(a2 + 200);
      *v23 = *v24;
      *(_OWORD *)(a1 + 200) = v27;
      *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
    }
    else
    {
      v25 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 208) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
      *(_BYTE *)(a1 + 224) = 0;
    }
  }
  v28 = (_OWORD *)(a1 + 232);
  v29 = (_OWORD *)(a2 + 232);
  v30 = *(_QWORD *)(a2 + 256);
  if (v30)
  {
    v31 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v30;
    *(_QWORD *)(a1 + 264) = v31;
    (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v28, v29);
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 248);
    *v28 = *v29;
    *(_OWORD *)(a1 + 248) = v32;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  }
  return a1;
}

_OWORD *Resize.init(_:width:height:firstBaseline:lastBaseline:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  int8x16_t v12;
  BOOL v13;
  int8x16_t v14;
  BOOL v15;
  int8x16_t v16;
  BOOL v17;
  int8x16_t v18;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char v35;

  sub_1AC695D34((uint64_t)a2, (uint64_t)&v20);
  sub_1AC695D34((uint64_t)a3, (uint64_t)&v24);
  sub_1AC695D34((uint64_t)a4, (uint64_t)&v28);
  sub_1AC695D34((uint64_t)a5, (uint64_t)&v32);
  if (v23 == 2
    && ((v12 = vorrq_s8(v21, v22),
         !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v20))
      ? (v13 = v27 == 2)
      : (v13 = 0),
        v13
     && ((v14 = vorrq_s8(v25, v26),
          !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | v24))
       ? (v15 = v31 == 2)
       : (v15 = 0),
         v15
      && ((v16 = vorrq_s8(v29, v30),
           !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)) | v28))
        ? (v17 = v35 == 2)
        : (v17 = 0),
          v17
       && (v18 = vorrq_s8(v33, v34),
           !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)) | v32))))))
  {
    sub_1AC725F38();
    sub_1AC69634C((uint64_t)&v28);
    sub_1AC69634C((uint64_t)&v24);
    sub_1AC69634C((uint64_t)&v20);
  }
  else
  {
    sub_1AC6916CC((uint64_t)&v20, (uint64_t *)&unk_1ED0BD550);
  }
  sub_1AC68AAA4(a1, a6);
  sub_1AC695830(a2, (_OWORD *)(a6 + 40));
  sub_1AC695830(a3, (_OWORD *)(a6 + 88));
  sub_1AC695830(a4, (_OWORD *)(a6 + 136));
  return sub_1AC695830(a5, (_OWORD *)(a6 + 184));
}

uint64_t Resize.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  id v14;
  __int128 v16[2];
  __int128 v17[3];
  __int128 v18[3];
  __int128 v19[3];
  __int128 v20[3];

  v7 = v6;
  sub_1AC695D34(v7 + 40, (uint64_t)v20);
  sub_1AC695D34(v7 + 88, (uint64_t)v19);
  sub_1AC695D34(v7 + 136, (uint64_t)v18);
  sub_1AC695D34(v7 + 184, (uint64_t)v17);
  sub_1AC68E218(v7, (uint64_t)v16);
  *(_OWORD *)(a2 + 248) = 0u;
  *(_QWORD *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  sub_1AC695830(v20, (_OWORD *)(a2 + 40));
  sub_1AC695830(v19, (_OWORD *)(a2 + 88));
  sub_1AC695830(v18, (_OWORD *)(a2 + 136));
  sub_1AC695830(v17, (_OWORD *)(a2 + 184));
  v14 = a1;
  sub_1AC6916CC(a2 + 232, &qword_1ED0BD568);
  return sub_1AC68AAA4(v16, a2 + 232);
}

_OWORD *sub_1AC695830(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t Resize.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double MinX;
  double MinY;
  __int128 v44;
  __int128 v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  CGRect v59;
  CGRect v60;

  v2 = v1;
  v4 = v1 + 232;
  sub_1AC695DFC(v4, (uint64_t)&v47);
  if (*((_QWORD *)&v48 + 1))
  {
    sub_1AC68AAA4(&v47, (uint64_t)v56);
    sub_1AC6916CC(v4, &qword_1ED0BD568);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(v4 + 32) = 0;
    v5 = *(double *)(v2 + 16);
    v6 = *(double *)(v2 + 24);
    sub_1AC695D34(v2 + 40, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      sub_1AC69634C((uint64_t)&v47);
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v8 = v54;
      v9 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v10 = AnyDimension.value(with:)(*(void **)(v2 + 32), v8, v9);
      if (v10 < v5 || v5 == 0.0)
        v5 = v10;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    sub_1AC695D34(v2 + 88, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      sub_1AC69634C((uint64_t)&v47);
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v12 = v54;
      v13 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v14 = AnyDimension.value(with:)(*(void **)(v2 + 32), v12, v13);
      if (v14 < v6 || v6 == 0.0)
        v6 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    v16 = v57;
    v17 = v58;
    __swift_project_boxed_opaque_existential_1(v56, v57);
    v18 = *(void **)(v2 + 32);
    v19 = (*(double (**)(void *, uint64_t, uint64_t, double, double))(v17 + 8))(v18, v16, v17, v5, v6);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    sub_1AC695D34(v2 + 40, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        v19 = ((double (*)(void *, double, double, double))v47)(v18, v19, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v26 = v54;
      v27 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v19 = AnyDimension.value(with:)(v18, v26, v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    v28 = *(void **)(v2 + 32);
    sub_1AC695D34(v2 + 88, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        v21 = ((double (*)(void *, double, double, double))v47)(v28, v21, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v29 = v54;
      v30 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v21 = AnyDimension.value(with:)(v28, v29, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    v31 = *(void **)(v2 + 32);
    sub_1AC695D34(v2 + 136, (uint64_t)&v47);
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        v23 = ((double (*)(void *, double, double, double))v47)(v31, v23, v5, v6);
        swift_release();
      }
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v32 = v54;
      v33 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v23 = AnyDimension.value(with:)(v31, v32, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    v34 = *(void **)(v2 + 32);
    sub_1AC695D34(v2 + 184, (uint64_t)&v47);
    v46 = v23;
    if (BYTE8(v49))
    {
      if (BYTE8(v49) == 1)
      {
        v35 = ((double (*)(void *, double, double, double))v47)(v34, v25, v5, v6);
        swift_release();
      }
      else
      {
        v35 = v25;
      }
    }
    else
    {
      sub_1AC68AAA4(&v47, (uint64_t)v53);
      v36 = v54;
      v37 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v35 = AnyDimension.value(with:)(v34, v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    v38 = *(double *)v2;
    v39 = *(double *)(v2 + 8);
    v40 = *(double *)(v2 + 16);
    v41 = *(double *)(v2 + 24);
    v59.origin.x = *(CGFloat *)v2;
    v59.origin.y = v39;
    v59.size.width = v40;
    v59.size.height = v41;
    MinX = CGRectGetMinX(v59);
    v60.origin.x = v38;
    v60.origin.y = v39;
    v60.size.width = v40;
    v60.size.height = v41;
    MinY = CGRectGetMinY(v60);
    sub_1AC68E218((uint64_t)v56, (uint64_t)v53);
    sub_1AC68E218((uint64_t)v53, (uint64_t)&v47);
    *((_QWORD *)&v49 + 1) = floor(MinX);
    *(_QWORD *)&v50 = floor(MinY);
    *((_QWORD *)&v50 + 1) = ceil(v19);
    *(_QWORD *)&v51 = ceil(v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    *((_QWORD *)&v51 + 1) = floor(v46);
    v52 = floor(v35);
    v44 = v50;
    *(_OWORD *)(a1 + 32) = v49;
    *(_OWORD *)(a1 + 48) = v44;
    v45 = v48;
    *(_OWORD *)a1 = v47;
    *(_OWORD *)(a1 + 16) = v45;
    *(_OWORD *)(a1 + 64) = v51;
    *(double *)(a1 + 80) = v52;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  }
  else
  {
    result = sub_1AC6916CC((uint64_t)&v47, &qword_1ED0BD568);
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1AC695D34(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Resize.Rule(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for Resize.Rule(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 40) = 1;
    swift_retain();
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t sub_1AC695DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1AC695E44(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  void *v21;
  CGFloat v22;
  CGFloat ty;
  CGFloat tx;
  __int128 v25;
  __int128 v26;
  _QWORD rect[7];
  CGAffineTransform v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  CGFloat MinY;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v10 = *(_QWORD *)(v5 + 104);
  v11 = a1;
  swift_bridgeObjectRetain();
  v51.origin.x = a2;
  v51.origin.y = a3;
  v51.size.width = a4;
  v51.size.height = a5;
  v43 = a2;
  v44 = a3;
  v22 = a5;
  v45 = a4;
  v46 = a5;
  v47 = v11;
  v48 = v10;
  v49 = 0;
  MinY = CGRectGetMinY(v51);
  v12 = v11;
  swift_bridgeObjectRetain();
  VerticalStack.Placements.next()((uint64_t)&v37);
  while (*((_QWORD *)&v38 + 1))
  {
    v33 = v39;
    v34 = v40;
    v35 = v41;
    v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1AC68E218((uint64_t)v32, (uint64_t)v29);
    v13 = v30;
    v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    x = *((double *)&v33 + 1);
    width = *((double *)&v34 + 1);
    y = *(double *)&v34;
    height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      v25 = *(_OWORD *)&v28.c;
      v26 = *(_OWORD *)&v28.a;
      ty = v28.ty;
      tx = v28.tx;
      v52.origin.x = a2;
      v52.origin.y = a3;
      v52.size.width = a4;
      v52.size.height = v22;
      *(double *)rect = x;
      MinX = CGRectGetMinX(v52);
      v53.origin.x = a2;
      v53.origin.y = a3;
      v53.size.width = a4;
      v53.size.height = v22;
      MaxX = CGRectGetMaxX(v53);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.tx = tx;
      v28.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(MinX + MaxX), 0.0);
      v28 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v54.origin.x = rect[0];
      v54.origin.y = y;
      v54.size.width = width;
      v54.size.height = height;
      v55 = CGRectApplyAffineTransform(v54, &v28);
      x = v55.origin.x;
      y = v55.origin.y;
      width = v55.size.width;
      height = v55.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1AC6929AC((uint64_t)v32);
    VerticalStack.Placements.next()((uint64_t)&v37);
  }
  v21 = v47;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

JUMeasurements __swiftcall _LayoutViewPlaceable.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  _QWORD *v2;
  double height;
  double width;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  void *v10;
  id v11;
  objc_class *v12;
  char *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  objc_super v26;
  uint64_t v27;
  JUMeasurements result;

  height = toFit.height;
  width = toFit.width;
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AC727FB0;
  *(UITraitCollection *)(v8 + 32) = with;
  v27 = v8;
  sub_1AC7263AC();
  sub_1AC69232C();
  v9 = with.super.isa;
  v10 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v10);

  v12 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v13 = (char *)objc_allocWithZone(v12);
  *(_QWORD *)&v13[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v11;
  v26.receiver = v13;
  v26.super_class = v12;
  v14 = objc_msgSendSuper2(&v26, sel_init);
  v15 = (*(double (**)(id, uint64_t, double, double))(*(_QWORD *)(v7 + 8) + 8))(v14, v6, width, height);
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = v15;
  v23 = v17;
  v24 = v19;
  v25 = v21;
  result.var3 = v25;
  result.var2 = v24;
  result.var1 = v23;
  result.var0 = v22;
  return result;
}

id sub_1AC696218(void *a1)
{
  return objc_msgSend(a1, sel_sizeThatFits_);
}

id sub_1AC69623C(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_measurementsWithFitting_in_, a1);
}

id sub_1AC696254()
{
  return sub_1AC69627C();
}

id sub_1AC69627C()
{
  void *v0;

  return objc_msgSend(v0, sel_setFrame_);
}

uint64_t sub_1AC69628C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Center.Placements(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for Center.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a1 + 48;
  v8 = a2 + 48;
  v9 = *(_QWORD *)(a2 + 72);
  v10 = v5;
  if (v9)
  {
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(v7, v8, v9);
  }
  else
  {
    v12 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v12;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  }
  return a1;
}

uint64_t sub_1AC69634C(uint64_t a1)
{
  destroy for Resize.Rule(a1);
  return a1;
}

uint64_t destroy for Resize.Rule(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return swift_release();
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t sub_1AC6963B0(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[3];
  v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 24))(v9, v10, a1, a2, a3, a4);
}

id sub_1AC696424()
{
  id *v0;

  return objc_msgSend(*v0, sel_setFrame_);
}

uint64_t sub_1AC696438()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 16))();
}

double sub_1AC696460()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double HorizontalStack.Placements.union.getter@<D0>(CGFloat *a1@<X8>)
{
  __int128 *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  id v8;
  CGFloat x;
  CGFloat width;
  CGFloat y;
  CGFloat height;
  CGFloat v13;
  CGFloat v14;
  __int128 v15;
  double v16;
  double v17;
  void *v18;
  double result;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v3 = (void *)*((_QWORD *)v1 + 4);
  v4 = *((_QWORD *)v1 + 5);
  v5 = *((_QWORD *)v1 + 6);
  v6 = *((_QWORD *)v1 + 7);
  v7 = v1[1];
  v34 = *v1;
  v35 = v7;
  v36 = v3;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v8 = v3;
  swift_bridgeObjectRetain();
  HorizontalStack.Placements.next()((uint64_t)&v28);
  if (*((_QWORD *)&v29 + 1))
  {
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    x = *((double *)&v30 + 1);
    width = *((double *)&v31 + 1);
    y = *(double *)&v31;
    height = *(double *)&v32;
    v20 = v33;
    v21 = *((double *)&v32 + 1);
    sub_1AC6929AC((uint64_t)&v22);
    while (1)
    {
      HorizontalStack.Placements.next()((uint64_t)&v28);
      if (!*((_QWORD *)&v29 + 1))
        break;
      v24 = v30;
      v25 = v31;
      v26 = v32;
      v27 = v33;
      v22 = v28;
      v23 = v29;
      v13 = *((double *)&v30 + 1);
      v15 = v31;
      v14 = *(double *)&v32;
      v40.origin.x = x;
      v40.origin.y = y;
      v40.size.width = width;
      v40.size.height = height;
      v42.origin.x = *((CGFloat *)&v30 + 1);
      *(_OWORD *)&v42.origin.y = v31;
      *(_QWORD *)&v42.size.height = v32;
      v41 = CGRectUnion(v40, v42);
      x = v41.origin.x;
      y = v41.origin.y;
      width = v41.size.width;
      height = v41.size.height;
      v41.origin.x = v13;
      *(_OWORD *)&v41.origin.y = v15;
      v41.size.height = v14;
      if (!CGRectIsEmpty(v41))
      {
        v16 = v21;
        if (v21 >= *((double *)&v26 + 1))
          v16 = *((double *)&v26 + 1);
        v17 = v20;
        if (v20 >= v27)
          v17 = v27;
        v20 = v17;
        v21 = v16;
      }
      sub_1AC6929AC((uint64_t)&v22);
    }
  }
  else
  {
    v20 = 0.0;
    v21 = 0.0;
    width = 0.0;
    height = 0.0;
    x = 0.0;
    y = 0.0;
  }
  v18 = v36;
  swift_bridgeObjectRelease();

  *a1 = x;
  a1[1] = y;
  a1[2] = width;
  a1[3] = height;
  result = v20;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

double sub_1AC696634(double a1, double a2)
{
  return _sSo8UIButtonC5JetUIE7measure5toFit4withSo14JUMeasurementsVSo6CGSizeV_So17UITraitCollectionCtF_0(a1, a2);
}

double _sSo8UIButtonC5JetUIE7measure5toFit4withSo14JUMeasurementsVSo6CGSizeV_So17UITraitCollectionCtF_0(double a1, double a2)
{
  void *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  id v11;
  double v12;
  unint64_t v13;
  unint64_t v14;

  objc_msgSend(v2, sel_sizeThatFits_);
  v6 = v5;
  v8 = v7;
  v9 = objc_msgSend(v2, sel_titleLabel);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v2, sel_subtitleLabel);

    if (!v11)
    {
      objc_msgSend(v10, sel_sizeThatFits_, v6, v8);
      objc_msgSend(v10, sel__firstBaselineOffsetFromTop, constrainWidth(of:toFit:)((CGSize)__PAIR128__(v14, v13), (CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6)).width);
      objc_msgSend(v10, sel__baselineOffsetFromBottom);
      *(_QWORD *)&v12 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));

      return v12;
    }

  }
  *(_QWORD *)&v12 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  return v12;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF440818]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1AF4407B8](a1, v6, a5);
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF440824](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticDimension()
{
  return &type metadata for StaticDimension;
}

uint64_t sub_1AC696954(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

uint64_t sub_1AC69697C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for AspectRatio()
{
  return &type metadata for AspectRatio;
}

__C::CGRect __swiftcall CGRect.subtracting(insets:)(UIEdgeInsets insets)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGFloat v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  __C::CGRect result;

  v5 = insets.top + v2;
  v6 = v3 - (insets.left + insets.right);
  v7 = v4 - (insets.top + insets.bottom);
  v8 = insets.left + v1;
  v9 = v5;
  v10 = v6;
  result.size.height = v7;
  result.size.width = v10;
  result.origin.y = v9;
  result.origin.x = v8;
  return result;
}

uint64_t getEnumTagSinglePayload for AspectRatio(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

ValueMetadata *type metadata accessor for VerticalStack()
{
  return &type metadata for VerticalStack;
}

uint64_t dispatch thunk of LayoutView.hasContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LayoutView.isHidden.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1AC696A20(uint64_t result)
{
  *(_BYTE *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t sub_1AC696A30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

uint64_t dispatch thunk of Measurable.measurements(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t VerticalStack.Properties.alignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for Resize.Rule()
{
  return &type metadata for Resize.Rule;
}

id sub_1AC696A5C(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_setNumberOfLines_, a1);
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Resize()
{
  return &type metadata for Resize;
}

uint64_t getEnumTagSinglePayload for LabelPlaceholder(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t dispatch thunk of Placeable.place(at:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for LabelPlaceholder()
{
  return &type metadata for LabelPlaceholder;
}

ValueMetadata *type metadata accessor for HorizontalStack()
{
  return &type metadata for HorizontalStack;
}

uint64_t dispatch thunk of LayoutView.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

id sub_1AC696B14(char a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_setHidden_, a1 & 1);
}

uint64_t dispatch thunk of LayoutView.isHidden.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

id sub_1AC696B34(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_setLineBreakMode_, a1);
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of LayoutTextView.isTextExtraTall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

double AspectRatio.height(fromWidth:)(double a1)
{
  double *v1;
  double v2;

  v2 = 0.0;
  if (*v1 != 0.0)
    v2 = v1[1] / *v1;
  return v2 * a1;
}

uint64_t dispatch thunk of Placeable.measure(toFit:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t storeEnumTagSinglePayload for LabelPlaceholder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AspectRatio(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t VerticalStack.Properties.shouldSkip.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

uint64_t HorizontalStack.Properties.alignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t dispatch thunk of LayoutTextView.font.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

CGSize __swiftcall CGSize.subtracting(insets:)(UIEdgeInsets insets)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGSize result;

  v3 = v1 - (insets.left + insets.right);
  v4 = v2 - (insets.top + insets.bottom);
  v5 = v3;
  result.height = v4;
  result.width = v5;
  return result;
}

__C::CGRect __swiftcall CGRect.withLayoutDirection(_:relativeTo:)(UITraitEnvironmentLayoutDirection _, __C::CGRect relativeTo)
{
  double v2;
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double MinX;
  CGFloat MaxX;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat ty;
  CGFloat tx;
  __int128 v21;
  __int128 v22;
  CGFloat rect;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  __C::CGRect result;

  v6 = v4;
  v7 = v3;
  v8 = v2;
  if (_ == UITraitEnvironmentLayoutDirectionRightToLeft)
  {
    height = relativeTo.size.height;
    width = relativeTo.size.width;
    y = relativeTo.origin.y;
    x = relativeTo.origin.x;
    rect = v5;
    CGAffineTransformMakeScale(&v25, -1.0, 1.0);
    v21 = *(_OWORD *)&v25.c;
    v22 = *(_OWORD *)&v25.a;
    ty = v25.ty;
    tx = v25.tx;
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    MinX = CGRectGetMinX(v26);
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.width = width;
    v27.size.height = height;
    MaxX = CGRectGetMaxX(v27);
    *(_OWORD *)&v25.a = v22;
    *(_OWORD *)&v25.c = v21;
    v25.tx = tx;
    v25.ty = ty;
    CGAffineTransformTranslate(&v24, &v25, -(MinX + MaxX), 0.0);
    v25 = v24;
    v28.origin.x = v8;
    v28.origin.y = v7;
    v28.size.width = v6;
    v28.size.height = rect;
    v29 = CGRectApplyAffineTransform(v28, &v25);
    v8 = v29.origin.x;
    v7 = v29.origin.y;
    v6 = v29.size.width;
    v5 = v29.size.height;
  }
  v15 = v8;
  v16 = v7;
  v17 = v6;
  v18 = v5;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

void destroy for TextMeasurable(id *a1)
{

}

ValueMetadata *type metadata accessor for TextMeasurable()
{
  return &type metadata for TextMeasurable;
}

uint64_t sub_1AC696D94(uint64_t a1, uint64_t a2)
{
  return sub_1AC68B1BC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t static VerticalStack.Edge.top.getter()
{
  return 1;
}

uint64_t VerticalStack.Properties.edgesAlignedToBaseline.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = result;
  return result;
}

uint64_t sub_1AC696DB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Margins()
{
  return &type metadata for Margins;
}

ValueMetadata *type metadata accessor for Center()
{
  return &type metadata for Center;
}

uint64_t static Center.Axis.vertical.getter()
{
  return 2;
}

ValueMetadata *type metadata accessor for ZeroDimension()
{
  return &type metadata for ZeroDimension;
}

Swift::Void __swiftcall CGRect.subtract(insets:)(UIEdgeInsets insets)
{
  double *v1;
  double v2;
  double v3;

  v2 = v1[1] + insets.top;
  *v1 = *v1 + insets.left;
  v1[1] = v2;
  v3 = v1[3] - (insets.top + insets.bottom);
  v1[2] = v1[2] - (insets.left + insets.right);
  v1[3] = v3;
}

uint64_t dispatch thunk of LayoutView.frame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for Pin.Edge()
{
  return &type metadata for Pin.Edge;
}

ValueMetadata *type metadata accessor for TextAppearance()
{
  return &type metadata for TextAppearance;
}

double AspectRatio.horizontalFraction.getter()
{
  double *v0;
  double v1;
  double result;

  v1 = v0[1];
  result = *v0 / v1;
  if (v1 == 0.0)
    return 0.0;
  return result;
}

double LayoutRect.origin.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void AspectRatio.init(_:_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

Swift::Void __swiftcall CGSize.add(outsets:)(UIEdgeInsets outsets)
{
  double *v1;
  CGFloat v2;

  v2 = outsets.top + outsets.bottom + v1[1];
  *v1 = outsets.left + outsets.right + *v1;
  v1[1] = v2;
}

ValueMetadata *type metadata accessor for VerticalMarginsMeasurable()
{
  return &type metadata for VerticalMarginsMeasurable;
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = *a3;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = v5;
  result = *(__n128 *)(a3 + 1);
  v7 = *(_OWORD *)(a3 + 3);
  *(__n128 *)(a5 + 32) = result;
  *(_OWORD *)(a5 + 48) = v7;
  *(_BYTE *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = a4;
  return result;
}

id TextAppearance.withFont(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  return a1;
}

id TextAppearance.withNumberOfLines(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(a2 + 24) = a1;
  *(_QWORD *)(a2 + 32) = v4;
  return v3;
}

id TextAppearance.withLineBreakMode(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  return v3;
}

uint64_t type metadata accessor for StackChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StackChild);
}

double LayoutRect.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1AC696F50()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for JULoadingViewController(uint64_t a1)
{
  return sub_1AC68BB94(a1, (uint64_t *)&unk_1ED0BDCB0);
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:presentationContext:pageRenderMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t static JULoadingViewController.PresentationContext.fullCover.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AC68B694(qword_1ED0BD490, (uint64_t)qword_1ED0BD580, a1);
}

ValueMetadata *type metadata accessor for HorizontalStack.Properties()
{
  return &type metadata for HorizontalStack.Properties;
}

ValueMetadata *type metadata accessor for VerticalStack.Properties()
{
  return &type metadata for VerticalStack.Properties;
}

BOOL sub_1AC696FB8(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_1AC696FD4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for MutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableBox);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

double sub_1AC697130(void *a1)
{
  double v1;

  objc_msgSend(a1, sel__contentInsetsFromFonts);
  return fabs(v1);
}

id sub_1AC69715C()
{
  id *v0;

  return objc_msgSend(*v0, sel_jet_languageAwareOutsets);
}

uint64_t sub_1AC69716C()
{
  return sub_1AC688D20(&qword_1ED0BE350, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1AC728FD0);
}

uint64_t sub_1AC697198()
{
  return sub_1AC688D20((unint64_t *)&unk_1ED0BD5B8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1AC729148);
}

uint64_t sub_1AC6971C4()
{
  return sub_1AC688D20((unint64_t *)&unk_1ED0BD5A0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1AC729174);
}

uint64_t sub_1AC6971F0()
{
  return sub_1AC688D20(&qword_1ED0BE340, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1AC7291E4);
}

uint64_t sub_1AC69721C()
{
  return sub_1AC688D20((unint64_t *)&unk_1ED0BDDA0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728494);
}

uint64_t destroy for Separator(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

ValueMetadata *type metadata accessor for Separator()
{
  return &type metadata for Separator;
}

uint64_t Separator.init(position:leadingInset:trailingInset:verticalOutset:)@<X0>(_BYTE *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(_BYTE *)a3 = *a1;
  *(double *)(a3 + 8) = a4;
  *(double *)(a3 + 16) = a5;
  return sub_1AC68AAA4(a2, a3 + 24);
}

_BYTE *sub_1AC6972B0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Separator.Position()
{
  return &type metadata for Separator.Position;
}

ValueMetadata *type metadata accessor for Baselines()
{
  return &type metadata for Baselines;
}

void Baselines.init(first:last:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double Baselines.first.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_1AC6972F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *v0 + 16;
  swift_beginAccess();
  sub_1AC68E218(v1, (uint64_t)v5);
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 64))(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v2 & 1;
}

ValueMetadata *type metadata accessor for VerticalMarginsMeasurable.Storage()
{
  return &type metadata for VerticalMarginsMeasurable.Storage;
}

uint64_t sub_1AC69737C(uint64_t a1)
{
  return sub_1AC697390(a1, qword_1ED0BD580, MEMORY[0x1E0DDB3A8]);
}

uint64_t sub_1AC697390(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  __swift_allocate_value_buffer(v5, a2);
  v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  v7 = *a3;
  v8 = sub_1AC725A1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
}

uint64_t sub_1AC6973FC(uint64_t a1)
{
  return sub_1AC697390(a1, qword_1ED0BDD20, MEMORY[0x1E0DDB398]);
}

uint64_t static JULoadingViewController.PresentationContext.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AC68B694(&qword_1ED0BDCA0, (uint64_t)qword_1ED0BDD20, a1);
}

ValueMetadata *type metadata accessor for DisjointStack()
{
  return &type metadata for DisjointStack;
}

unint64_t sub_1AC697444()
{
  unint64_t result;

  result = qword_1ED0BD618[0];
  if (!qword_1ED0BD618[0])
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for FontUseCase, &type metadata for FontUseCase);
    atomic_store(result, qword_1ED0BD618);
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutRect()
{
  return &type metadata for LayoutRect;
}

__n128 LayoutRect.baselines.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 LayoutRect.init(origin:size:baselines:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  __n128 result;

  a2->n128_f64[0] = a3;
  a2->n128_f64[1] = a4;
  a2[1].n128_f64[0] = a5;
  a2[1].n128_f64[1] = a6;
  result = *a1;
  a2[2] = *a1;
  return result;
}

uint64_t sub_1AC6974B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1AC726A48();
  __swift_allocate_value_buffer(v0, qword_1ED0BE2C8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED0BE2C8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x1E0DED4F0], v0);
}

ValueMetadata *type metadata accessor for JetUIBugCompatibility()
{
  return &type metadata for JetUIBugCompatibility;
}

uint64_t sub_1AC697520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC697568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD5F0);
  __swift_allocate_value_buffer(v0, qword_1ED0BD5D8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED0BD5D8);
  v2 = sub_1AC725968();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_1AC6975D0()
{
  uint64_t v0;

  return sub_1AC689240(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1AC6975E8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1AC725854();
  __swift_allocate_value_buffer(v0, qword_1ED0BE180);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED0BE180);
  return sub_1AC688E98(v1);
}

id JetTraitsForScreen(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForScreen:](__JUObjCFunctions, "traitCollectionForScreen:", a1);
}

id JetTraitsForView(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForView:](__JUObjCFunctions, "traitCollectionForView:", a1);
}

id JetTraitsForWindow(uint64_t a1)
{
  return +[__JUObjCFunctions traitCollectionForWindow:](__JUObjCFunctions, "traitCollectionForWindow:", a1);
}

void JUAddOverridesForSupportingLayoutDirectionOnUIView()
{
  if (sOverride_UIView_traitCollection != -1)
    dispatch_once(&sOverride_UIView_traitCollection, &__block_literal_global);
}

id swizzle_UIView_traitCollection(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  sOriginal_UIView_traitCollection();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_juLayoutDirectionValue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3
    && (v4 = objc_msgSend(v1, "_juLayoutDirectionFromLayoutDirectionValue:", v3),
        v4 != objc_msgSend(v2, "layoutDirection")))
  {
    objc_msgSend(MEMORY[0x1E0DC3E88], "traitCollectionWithLayoutDirection:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v2;
    v10[1] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0DC3E88], "traitCollectionWithTraitsFromCollections:", v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = v2;
  }
  v8 = v5;

  return v8;
}

void JUNQMLParserStartDocument(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(v1, "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "parserDidStartDocument:", v1);

}

void JUNQMLParserEndDocument(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(v1, "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "parserDidEndDocument:", v1);

}

void JUNQMLParserStartElement(void *a1, const xmlChar *a2, xmlChar **a3)
{
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  id v9;
  xmlChar *v10;
  xmlChar **v11;
  xmlChar *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  xmlChar *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    objc_msgSend(v18, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "parserDidStartListElement:", v18);
LABEL_13:

    v7 = v18;
    goto LABEL_14;
  }
  v20 = 0;
  if (TryListTypeFromName(a2, &v20))
  {
    objc_msgSend(v18, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "parser:didStartListOfStyle:", v18, v20);
    goto LABEL_13;
  }
  v19 = 0;
  v6 = TryTextElementFromName(a2, &v19, objc_msgSend(v18, "behavior"));
  v7 = v18;
  if (v6)
  {
    objc_msgSend(v18, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v19;
    if (a3)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v10 = *a3;
      if (*a3)
      {
        v11 = a3 + 2;
        do
        {
          v12 = *(v11 - 1);
          v13 = xmlStrlen(v10);
          NSStringFromXmlChar((__CFString *)v10, v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = xmlStrlen(v12);
          NSStringFromXmlChar((__CFString *)v12, v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v16, v14);

          v17 = *v11;
          v11 += 2;
          v10 = v17;
        }
        while (v17);
      }
    }
    else
    {
      v9 = (id)MEMORY[0x1E0C9AA70];
    }
    objc_msgSend(v5, "parser:didStartElement:attributes:", v18, v8, v9);

    goto LABEL_13;
  }
LABEL_14:

}

void JUNQMLParserEndElement(void *a1, const xmlChar *a2)
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"br"))
  {
    objc_msgSend(v6, "delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "parserDidFindNewline:", v6);
LABEL_9:

    v5 = v6;
    goto LABEL_10;
  }
  if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    objc_msgSend(v6, "delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "parserDidEndListElement:", v6);
    goto LABEL_9;
  }
  v8 = 0;
  if (TryListTypeFromName(a2, &v8))
  {
    objc_msgSend(v6, "delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "parser:didEndListOfStyle:", v6, v8);
    goto LABEL_9;
  }
  v7 = 0;
  v4 = TryTextElementFromName(a2, &v7, objc_msgSend(v6, "behavior"));
  v5 = v6;
  if (v4)
  {
    objc_msgSend(v6, "delegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "parser:didEndElement:", v6, v7);
    goto LABEL_9;
  }
LABEL_10:

}

void JUNQMLParserCharacters(void *a1, __CFString *a2, int a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a1;
  NSStringFromXmlChar(a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v7, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parser:didFindCharacters:", v7, v5);

  }
}

void JUNQMLParserError(void *a1)
{
  xmlErrorPtr LastError;
  xmlErrorPtr v2;
  id v3;

  v3 = a1;
  LastError = xmlCtxtGetLastError((void *)objc_msgSend(v3, "_parserContext"));
  if (LastError)
  {
    v2 = LastError;
    objc_msgSend(v3, "reportParseError:", LastError);
    if (v2->level == XML_ERR_FATAL)
      xmlStopParser((xmlParserCtxtPtr)objc_msgSend(v3, "_parserContext"));
  }

}

uint64_t TryListTypeFromName(const xmlChar *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (xmlStrEqual(a1, (const xmlChar *)"ol"))
  {
    v4 = 0;
  }
  else
  {
    result = xmlStrEqual(a1, (const xmlChar *)"ul");
    if (!(_DWORD)result)
      return result;
    v4 = 1;
  }
  *a2 = v4;
  return 1;
}

uint64_t TryTextElementFromName(const xmlChar *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  if (xmlStrEqual(a1, (const xmlChar *)"em"))
  {
    v6 = a3 != 1;
LABEL_6:
    *a2 = v6;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"b") || xmlStrEqual(a1, (const xmlChar *)"strong"))
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"i"))
  {
    v6 = 1;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"u"))
  {
    v6 = 2;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"strike") || xmlStrEqual(a1, (const xmlChar *)"del"))
  {
    v6 = 3;
    goto LABEL_6;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"p") || (result = xmlStrEqual(a1, (const xmlChar *)"div"), (_DWORD)result))
  {
    v6 = 4;
    goto LABEL_6;
  }
  return result;
}

__CFString *NSStringFromXmlChar(__CFString *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
      return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a1, a2, 4);
    a1 = &stru_1E5C00BA8;
  }
  return a1;
}

CGFloat JURectWithFlippedOriginRelativeToBoundingRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v14;
  CGRect v16;
  CGRect v17;

  v16.origin.x = a5;
  v16.origin.y = a6;
  v16.size.width = a7;
  v16.size.height = a8;
  v14 = a1 - CGRectGetMinX(v16);
  v17.origin.x = a5;
  v17.origin.y = a6;
  v17.size.width = a7;
  v17.size.height = a8;
  return CGRectGetMaxX(v17) - v14 - a3;
}

CGFloat JURectWithConditionalOriginRelativeToBoundingRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v15;
  CGRect v17;
  CGRect v18;

  if (a1)
  {
    v17.origin.x = a6;
    v17.origin.y = a7;
    v17.size.width = a8;
    v17.size.height = a9;
    v15 = a2 - CGRectGetMinX(v17);
    v18.origin.x = a6;
    v18.origin.y = a7;
    v18.size.width = a8;
    v18.size.height = a9;
    return CGRectGetMaxX(v18) - v15 - a4;
  }
  return a2;
}

CGFloat JURectMakeWithDirectionalOriginRelativeToBoundingRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v15;
  CGRect v17;
  CGRect v18;

  if (a1)
  {
    v17.origin.x = a6;
    v17.origin.y = a7;
    v17.size.width = a8;
    v17.size.height = a9;
    v15 = a2 - CGRectGetMinX(v17);
    v18.origin.x = a6;
    v18.origin.y = a7;
    v18.size.width = a8;
    v18.size.height = a9;
    return CGRectGetMaxX(v18) - v15 - a4;
  }
  return a2;
}

id JUPlaceableForButton(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForButton:](__JUObjCFunctions, "placeableForButton:", a1);
}

id JUPlaceableForImageView(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForImageView:](__JUObjCFunctions, "placeableForImageView:", a1);
}

id JUPlaceableForLabel(uint64_t a1)
{
  return +[__JUObjCFunctions placeableForLabel:](__JUObjCFunctions, "placeableForLabel:", a1);
}

id JUContentUnavailableViewControllerMake(uint64_t a1, uint64_t a2)
{
  return +[__JUObjCFunctions makeContentUnavailableViewControllerWithError:retryAction:](__JUObjCFunctions, "makeContentUnavailableViewControllerWithError:retryAction:", a1, a2);
}

id JULoadingViewControllerMake(uint64_t a1)
{
  return +[__JUObjCFunctions makeLoadingViewControllerWithLabel:](__JUObjCFunctions, "makeLoadingViewControllerWithLabel:", a1);
}

float ForJetUIOnly_MainScreenScale()
{
  if (ForJetUIOnly_MainScreenScale_onceToken[0] != -1)
    dispatch_once(ForJetUIOnly_MainScreenScale_onceToken, &__block_literal_global_0);
  return *(double *)&ForJetUIOnly_MainScreenScale_scale;
}

uint64_t JUGetBidiClass(int a1)
{
  uint64_t result;
  int v3;

  if (a1 == 65532)
    return 14;
  v3 = MEMORY[0x1AF4409EC]();
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
    case 13:
      result = 2;
      break;
    case 2:
      if ((a1 - 1776) >= 0xA)
        result = 3;
      else
        result = 4;
      break;
    case 3:
      result = 6;
      break;
    case 4:
      result = 7;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 12;
      break;
    case 8:
      result = 13;
      break;
    case 9:
      return 14;
    case 10:
    case 18:
      result = 15;
      break;
    case 11:
    case 12:
    case 14:
    case 15:
      result = 8;
      break;
    case 16:
      result = 9;
      break;
    case 17:
      result = 16;
      break;
    case 19:
    case 20:
    case 21:
      result = 10;
      break;
    case 22:
      result = 11;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL JUMeasurementsEqual(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

uint64_t sub_1AC698B70()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id i;
  void *v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v2 = objc_msgSend(v1, sel_connectedScenes);

  sub_1AC69C244(0, (unint64_t *)&qword_1EEC8A5D0);
  sub_1AC69C1E4();
  v3 = sub_1AC7264FC();

  sub_1AC698E50(v3, (uint64_t)&v23);
  sub_1AC698F1C();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    for (i = objc_msgSend(v5, sel_activationState, 1, 3); ; i = objc_msgSend(v13, sel_activationState, v21))
    {
      if (!i)
      {
        objc_opt_self();
        v16 = swift_dynamicCastObjCClass();
        if (v16)
        {
          v17 = (void *)v16;
          v18 = v7;
          v19 = objc_msgSend(v17, sel_keyWindow);
          if (v19)
          {
            v9 = v19;
            __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v21;
            *(_QWORD *)(inited + 32) = v9;
            v22 = inited;
            sub_1AC7263AC();
            v11 = v9;
            v12 = sub_1AC699118(v22, v6, 0);
            swift_bridgeObjectRelease();
            sub_1AC6AC5F4(v12);

            goto LABEL_4;
          }

        }
      }
      if (qword_1EEC8A210 != -1)
        swift_once();
      v15 = sub_1AC72610C();
      __swift_project_value_buffer(v15, (uint64_t)qword_1EEC95CB8);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
      sub_1AC725D10();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1AC727FC0;
      sub_1AC725C8C();
      sub_1AC72601C();

      swift_bridgeObjectRelease();
LABEL_4:
      sub_1AC698F1C();
      v6 = v14;
      v7 = v13;
      if (!v13)
      {
        v0 = v24;
        break;
      }
    }
  }
  sub_1AC69C23C();
  return v0;
}

uint64_t sub_1AC698E50@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if ((result & 0xC000000000000001) != 0)
  {
    sub_1AC726790();
    sub_1AC69C244(0, (unint64_t *)&qword_1EEC8A5D0);
    sub_1AC69C1E4();
    sub_1AC726538();
    result = v10;
    v3 = v11;
    v4 = v12;
    v5 = v13;
  }
  else
  {
    v6 = -1;
    v7 = -1 << *(_BYTE *)(result + 32);
    v8 = ~v7;
    v3 = result + 56;
    v9 = -v7;
    if (v9 < 64)
      v6 = ~(-1 << v9);
    v5 = v6 & *(_QWORD *)(result + 56);
    v4 = (unint64_t)v8;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1AC698F1C()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;

  v1 = v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    if (sub_1AC7267CC())
    {
      sub_1AC69C244(0, (unint64_t *)&qword_1EEC8A5D0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v15)
        goto LABEL_6;
    }
    return;
  }
  v3 = v0[3];
  v2 = v0[4];
  if (v2)
  {
    v4 = (v2 - 1) & v2;
    v5 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_4:
    v6 = *(void **)(*(_QWORD *)(*v0 + 48) + 8 * v5);
    v7 = v6;
    goto LABEL_5;
  }
  v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_35:
    __break(1u);
    return;
  }
  v10 = (unint64_t)(v0[2] + 64) >> 6;
  if (v9 >= v10)
  {
    v6 = 0;
    v4 = 0;
    goto LABEL_5;
  }
  v11 = v0[1];
  v12 = *(_QWORD *)(v11 + 8 * v9);
  if (v12)
  {
LABEL_14:
    v4 = (v12 - 1) & v12;
    v5 = __clz(__rbit64(v12)) + (v9 << 6);
    v3 = v9;
    goto LABEL_4;
  }
  v13 = v3 + 2;
  if (v3 + 2 >= v10)
    goto LABEL_31;
  v12 = *(_QWORD *)(v11 + 8 * v13);
  if (v12)
  {
LABEL_19:
    v9 = v13;
    goto LABEL_14;
  }
  if (v3 + 3 >= v10)
    goto LABEL_32;
  v12 = *(_QWORD *)(v11 + 8 * (v3 + 3));
  if (v12)
  {
    v9 = v3 + 3;
    goto LABEL_14;
  }
  v13 = v3 + 4;
  if (v3 + 4 < v10)
  {
    v12 = *(_QWORD *)(v11 + 8 * v13);
    if (v12)
      goto LABEL_19;
    v9 = v3 + 5;
    if (v3 + 5 < v10)
    {
      v12 = *(_QWORD *)(v11 + 8 * v9);
      if (v12)
        goto LABEL_14;
      v9 = v10 - 1;
      v14 = v3 + 6;
      while (v10 != v14)
      {
        v12 = *(_QWORD *)(v11 + 8 * v14++);
        if (v12)
        {
          v9 = v14 - 1;
          goto LABEL_14;
        }
      }
LABEL_31:
      v6 = 0;
      v4 = 0;
      v3 = v9;
      goto LABEL_5;
    }
LABEL_32:
    v6 = 0;
    v4 = 0;
    v3 = v13;
    goto LABEL_5;
  }
  v6 = 0;
  v4 = 0;
  v3 += 3;
LABEL_5:
  v1[3] = v3;
  v1[4] = v4;
  if (v6)
  {
LABEL_6:
    v8 = v1[5];
    if (!__OFADD__(v8, 1))
    {
      v1[5] = v8 + 1;
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t sub_1AC699118(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  SEL *v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  id v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  _BOOL4 v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  unint64_t v59;
  char *v60;
  CGPoint v61;
  CGRect v62;

  v4 = a1;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v5 = sub_1AC726928();
    if (v5)
      goto LABEL_3;
LABEL_30:
    v60 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_31:
    swift_bridgeObjectRelease();
    return (uint64_t)v60;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_30;
LABEL_3:
  result = objc_opt_self();
  v57 = (id)result;
  if (v5 >= 1)
  {
    v7 = 0;
    v56 = v4 & 0xC000000000000001;
    v52 = a3 + 1;
    v8 = __OFADD__(a3, 1);
    v53 = v8;
    v9 = (SEL *)&unk_1E5C05000;
    v60 = (char *)MEMORY[0x1E0DEE9D8];
    v54 = v5;
    v55 = v4;
    while (1)
    {
      if (v56)
        v10 = (id)MEMORY[0x1AF43FE40](v7, v4);
      else
        v10 = *(id *)(v4 + 8 * v7 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, sel_superview);
      if (!v12)
        v12 = v11;
      objc_msgSend(v11, v9[235]);
      objc_msgSend(v12, sel_convertPoint_toView_, 0);
      v14 = v13;
      v16 = v15;

      v17 = objc_msgSend(v57, sel_mainScreen);
      objc_msgSend(v17, sel_bounds);
      v19 = v18;
      v21 = v20;
      v23 = v22;
      v25 = v24;

      v62.origin.x = v19;
      v62.origin.y = v21;
      v62.size.width = v23;
      v62.size.height = v25;
      v61.x = v14;
      v61.y = v16;
      v26 = CGRectContainsPoint(v62, v61);
      v27 = MEMORY[0x1E0DEE9D8];
      if (v26)
      {
        v28 = objc_msgSend(v11, sel_subviews);
        sub_1AC69C244(0, (unint64_t *)&unk_1EEC8A5F0);
        a3 = sub_1AC7263A0();

        if (v53)
        {
          __break(1u);
          goto LABEL_29;
        }
        v27 = sub_1AC699118(a3, a2, v52);
        swift_bridgeObjectRelease();
      }
      v29 = objc_msgSend(v11, sel_accessibilityIdentifier);
      if (v29)
      {
        v30 = v29;
        v31 = sub_1AC72622C();
        v59 = v32;

      }
      else
      {
        v31 = 0x3E7974706D653C3CLL;
        v59 = 0xE90000000000003ELL;
      }
      v33 = objc_msgSend(v11, sel_accessibilityLabel);
      if (v33)
      {
        v34 = v33;
        v35 = v27;
        v36 = sub_1AC72622C();
        v38 = v37;

      }
      else
      {
        v35 = v27;
        v36 = 0x3E7974706D653C3CLL;
        v38 = 0xE90000000000003ELL;
      }
      v39 = objc_msgSend(v11, sel_accessibilityContainerType);
      objc_msgSend(v11, v9[235]);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      v47 = v46;
      v48 = objc_msgSend(v11, sel_accessibilityTraits);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v60 = sub_1AC6A2718(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
      v50 = *((_QWORD *)v60 + 2);
      v49 = *((_QWORD *)v60 + 3);
      if (v50 >= v49 >> 1)
        v60 = sub_1AC6A2718((char *)(v49 > 1), v50 + 1, 1, v60);
      ++v7;
      *((_QWORD *)v60 + 2) = v50 + 1;
      v51 = &v60[96 * v50];
      *((_QWORD *)v51 + 4) = v31;
      *((_QWORD *)v51 + 5) = v59;
      *((_QWORD *)v51 + 6) = v36;
      *((_QWORD *)v51 + 7) = v38;
      *((_QWORD *)v51 + 8) = v39;
      *((_QWORD *)v51 + 9) = v35;
      *((_QWORD *)v51 + 10) = v41;
      *((_QWORD *)v51 + 11) = v43;
      *((_QWORD *)v51 + 12) = v47;
      *((_QWORD *)v51 + 13) = v45;
      *((_QWORD *)v51 + 14) = v48;
      *((_QWORD *)v51 + 15) = a2;

      v4 = v55;
      v9 = (SEL *)&unk_1E5C05000;
      if (v54 == v7)
        goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1AC69950C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC699530 + 4 * byte_1AC727FD0[*v0]))(120, 0xE100000000000000);
}

uint64_t sub_1AC699530()
{
  return 121;
}

uint64_t sub_1AC699538()
{
  return 0x746867696568;
}

uint64_t sub_1AC69954C()
{
  return 0x6874646977;
}

uint64_t sub_1AC699560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC69BCC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AC699584()
{
  return 0;
}

void sub_1AC699590(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1AC69959C()
{
  sub_1AC6997AC();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6995C4()
{
  sub_1AC6997AC();
  return sub_1AC726BBC();
}

uint64_t DSAccessibilityDiagnosticInfo.Rect.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A298);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11 = v1[2];
  v10 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6997AC();
  sub_1AC726B68();
  v14 = v9;
  HIBYTE(v13) = 0;
  sub_1AC6997F0();
  sub_1AC726A18();
  if (!v2)
  {
    v14 = v8;
    HIBYTE(v13) = 1;
    sub_1AC726A18();
    v14 = v11;
    HIBYTE(v13) = 2;
    sub_1AC726A18();
    v14 = v10;
    HIBYTE(v13) = 3;
    sub_1AC726A18();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1AC6997AC()
{
  unint64_t result;

  result = qword_1EEC8A2A0;
  if (!qword_1EEC8A2A0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC728CBC, &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2A0);
  }
  return result;
}

unint64_t sub_1AC6997F0()
{
  unint64_t result;

  result = qword_1EEC8A2A8;
  if (!qword_1EEC8A2A8)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2A8);
  }
  return result;
}

uint64_t DSAccessibilityDiagnosticInfo.Rect.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6997AC();
  sub_1AC726B50();
  if (!v2)
  {
    HIBYTE(v14) = 0;
    sub_1AC699A3C();
    sub_1AC7269D0();
    v9 = v15;
    HIBYTE(v14) = 1;
    sub_1AC7269D0();
    v10 = v15;
    HIBYTE(v14) = 2;
    sub_1AC7269D0();
    v12 = v15;
    HIBYTE(v14) = 3;
    sub_1AC7269D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v15;
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1AC699A3C()
{
  unint64_t result;

  result = qword_1EEC8A2B8;
  if (!qword_1EEC8A2B8)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2B8);
  }
  return result;
}

uint64_t sub_1AC699A80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DSAccessibilityDiagnosticInfo.Rect.init(from:)(a1, a2);
}

uint64_t sub_1AC699A94(_QWORD *a1)
{
  return DSAccessibilityDiagnosticInfo.Rect.encode(to:)(a1);
}

BOOL sub_1AC699AA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s5JetUI19VerticalStackLayoutV9AlignmentO9hashValueSivg_0()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

uint64_t sub_1AC699B00()
{
  return sub_1AC726B08();
}

uint64_t sub_1AC699B28()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

uint64_t sub_1AC699B68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC699BA0 + 4 * byte_1AC727FD4[*v0]))(0x696669746E656469, 0xEB00000000737265);
}

uint64_t sub_1AC699BA0()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1AC699BB4()
{
  return 0x54746E656D656C65;
}

uint64_t sub_1AC699BD4()
{
  return 0x6E6572646C696863;
}

uint64_t sub_1AC699BEC()
{
  return 1952671090;
}

uint64_t sub_1AC699BFC()
{
  return 0x737469617274;
}

uint64_t sub_1AC699C10()
{
  return 0x6449776F646E6977;
}

uint64_t sub_1AC699C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC69BE38(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AC699C4C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1AC699C58()
{
  sub_1AC699F24();
  return sub_1AC726BB0();
}

uint64_t sub_1AC699C80()
{
  sub_1AC699F24();
  return sub_1AC726BBC();
}

uint64_t DSAccessibilityDiagnosticInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v20 = v1[3];
  v21 = v7;
  v8 = v1[4];
  v18 = v1[5];
  v19 = v8;
  v9 = v1[6];
  v10 = v1[7];
  v11 = v1[8];
  v12 = v1[9];
  v13 = v1[10];
  v17[1] = v1[11];
  v17[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC699F24();
  sub_1AC726B68();
  LOBYTE(v23) = 0;
  v14 = v22;
  sub_1AC7269F4();
  if (!v14)
  {
    v15 = v18;
    LOBYTE(v23) = 1;
    sub_1AC7269F4();
    LOBYTE(v23) = 2;
    sub_1AC726A0C();
    v23 = v15;
    v27 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2D0);
    sub_1AC69A3D8(&qword_1EEC8A2D8, (uint64_t (*)(void))sub_1AC699F68, MEMORY[0x1E0DEAF10]);
    sub_1AC726A18();
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v26 = v12;
    v27 = 4;
    sub_1AC699FAC();
    sub_1AC726A18();
    LOBYTE(v23) = 5;
    sub_1AC726A24();
    LOBYTE(v23) = 6;
    sub_1AC726A0C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AC699F24()
{
  unint64_t result;

  result = qword_1EEC8A2C8;
  if (!qword_1EEC8A2C8)
  {
    result = MEMORY[0x1AF440830](&unk_1AC728C6C, &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2C8);
  }
  return result;
}

unint64_t sub_1AC699F68()
{
  unint64_t result;

  result = qword_1EEC8A2E0;
  if (!qword_1EEC8A2E0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSAccessibilityDiagnosticInfo, &type metadata for DSAccessibilityDiagnosticInfo);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2E0);
  }
  return result;
}

unint64_t sub_1AC699FAC()
{
  unint64_t result;

  result = qword_1EEC8A2E8;
  if (!qword_1EEC8A2E8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSAccessibilityDiagnosticInfo.Rect, &type metadata for DSAccessibilityDiagnosticInfo.Rect);
    atomic_store(result, (unint64_t *)&qword_1EEC8A2E8);
  }
  return result;
}

uint64_t DSAccessibilityDiagnosticInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC699F24();
  sub_1AC726B50();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v31) = 0;
  v9 = sub_1AC7269AC();
  v11 = v10;
  v30 = v9;
  LOBYTE(v31) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1AC7269AC();
  v14 = v13;
  v28 = v12;
  v29 = v11;
  LOBYTE(v31) = 2;
  swift_bridgeObjectRetain();
  v15 = v14;
  v17 = sub_1AC7269C4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2D0);
  v35 = 3;
  sub_1AC69A3D8(&qword_1EEC8A2F8, (uint64_t (*)(void))sub_1AC69A440, MEMORY[0x1E0DEAF40]);
  sub_1AC7269D0();
  v18 = v31;
  v35 = 4;
  sub_1AC69A484();
  v27 = v18;
  swift_bridgeObjectRetain();
  v26[1] = 0;
  sub_1AC7269D0();
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  LOBYTE(v31) = 5;
  v26[0] = sub_1AC7269DC();
  LOBYTE(v31) = 6;
  v23 = sub_1AC7269C4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v24 = v29;
  *a2 = v30;
  a2[1] = v24;
  v25 = v27;
  a2[2] = v28;
  a2[3] = v15;
  a2[4] = v17;
  a2[5] = v25;
  a2[6] = v19;
  a2[7] = v20;
  a2[8] = v21;
  a2[9] = v22;
  a2[10] = v26[0];
  a2[11] = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC69A3D8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8A2D0);
    v8 = a2();
    result = MEMORY[0x1AF440830](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AC69A440()
{
  unint64_t result;

  result = qword_1EEC8A300;
  if (!qword_1EEC8A300)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSAccessibilityDiagnosticInfo, &type metadata for DSAccessibilityDiagnosticInfo);
    atomic_store(result, (unint64_t *)&qword_1EEC8A300);
  }
  return result;
}

unint64_t sub_1AC69A484()
{
  unint64_t result;

  result = qword_1EEC8A308;
  if (!qword_1EEC8A308)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSAccessibilityDiagnosticInfo.Rect, &type metadata for DSAccessibilityDiagnosticInfo.Rect);
    atomic_store(result, (unint64_t *)&qword_1EEC8A308);
  }
  return result;
}

uint64_t sub_1AC69A4C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DSAccessibilityDiagnosticInfo.init(from:)(a1, a2);
}

uint64_t sub_1AC69A4DC(_QWORD *a1)
{
  return DSAccessibilityDiagnosticInfo.encode(to:)(a1);
}

uint64_t DSAccessibilityDiagnosticCollector.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DSAccessibilityDiagnosticCollector.getDiagnosticInfo()()
{
  uint64_t v0;

  sub_1AC725800();
  swift_allocObject();
  sub_1AC7257F4();
  sub_1AC698B70();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2D0);
  sub_1AC69A3D8(&qword_1EEC8A2D8, (uint64_t (*)(void))sub_1AC699F68, MEMORY[0x1E0DEAF10]);
  v0 = sub_1AC7257E8();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1AC69A600()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AC69A62C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AC725800();
  swift_allocObject();
  sub_1AC7257F4();
  sub_1AC698B70();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A2D0);
  sub_1AC69A3D8(&qword_1EEC8A2D8, (uint64_t (*)(void))sub_1AC699F68, MEMORY[0x1E0DEAF10]);
  v1 = sub_1AC7257E8();
  if (v0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v2 = v1;
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v2;
}

uint64_t destroy for DSAccessibilityDiagnosticInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DSAccessibilityDiagnosticInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DSAccessibilityDiagnosticInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1;
}

uint64_t assignWithTake for DSAccessibilityDiagnosticInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo()
{
  return &type metadata for DSAccessibilityDiagnosticInfo;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.Rect()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.Rect;
}

_QWORD *initializeBufferWithCopyOfBuffer for DSAccessibilityDiagnosticCollector(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DSAccessibilityDiagnosticCollector()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for DSAccessibilityDiagnosticCollector(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DSAccessibilityDiagnosticCollector(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticCollector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticCollector()
{
  return &type metadata for DSAccessibilityDiagnosticCollector;
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1ED0BD730);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A498);
}

void type metadata accessor for SymbolicTraits(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4A0);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4A8);
}

void type metadata accessor for NSLineBreakMode(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4B0);
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4B8);
}

void type metadata accessor for ContentMode(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4C0);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4C8);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4D0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1AC690A48(a1, (unint64_t *)&unk_1EEC8A4D8);
}

void type metadata accessor for Measurements(uint64_t a1)
{
  sub_1AC690A48(a1, (unint64_t *)&unk_1ED0BD720);
}

void type metadata accessor for NSWritingDirection(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4E8);
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A4F0);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1AC690A48(a1, (unint64_t *)&unk_1EEC8A4F8);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1AC69AD1C + 4 * byte_1AC727FE0[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1AC69AD50 + 4 * byte_1AC727FDB[v4]))();
}

uint64_t sub_1AC69AD50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC69AD58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC69AD60);
  return result;
}

uint64_t sub_1AC69AD6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC69AD74);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1AC69AD78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC69AD80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC69AD8C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1AC69AD94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.CodingKeys()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DSAccessibilityDiagnosticInfo.Rect.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AC69AE88 + 4 * byte_1AC727FEA[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AC69AEBC + 4 * byte_1AC727FE5[v4]))();
}

uint64_t sub_1AC69AEBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC69AEC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC69AECCLL);
  return result;
}

uint64_t sub_1AC69AED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC69AEE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AC69AEE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC69AEEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSAccessibilityDiagnosticInfo.Rect.CodingKeys()
{
  return &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys;
}

unint64_t sub_1AC69AF0C()
{
  unint64_t result;

  result = qword_1EEC8A508;
  if (!qword_1EEC8A508)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72830C, &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A508);
  }
  return result;
}

unint64_t sub_1AC69AF54()
{
  unint64_t result;

  result = qword_1EEC8A510;
  if (!qword_1EEC8A510)
  {
    result = MEMORY[0x1AF440830](&unk_1AC7283C4, &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A510);
  }
  return result;
}

uint64_t sub_1AC69AF9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1AC69AFF0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1AC69AFF8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1AC69B00C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1AC69B020(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_1AC69B044(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1AC69B058(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

void sub_1AC69B06C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_1AC69B078(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1AC69B08C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AC69B098(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1AC726214();
  *a2 = 0;
  return result;
}

uint64_t sub_1AC69B10C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1AC72622C();
  v2 = sub_1AC726208();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_1AC69B14C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

void sub_1AC69B17C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1AC69B184@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1AC69B198@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1AC69B1AC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1AC69B1C0(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1AC69B1F0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1AC69B21C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1AC69B240(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1AC69B254(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1AC69B268(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1AC69B27C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1AC69B290(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1AC69B2A4(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1AC69B2B8(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1AC69B2CC()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1AC69B2DC()
{
  return sub_1AC726760();
}

_DWORD *sub_1AC69B2F4(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1AC69B308()
{
  return sub_1AC7259B0();
}

uint64_t sub_1AC69B310(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1AF43EF70](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1AC69B360(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x1AF43EF7C](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1AC69B3B4(double *a1@<X8>)
{
  *a1 = MEMORY[0x1AF43EF88]();
}

uint64_t sub_1AC69B3D8()
{
  return sub_1AC7264F0();
}

uint64_t sub_1AC69B3E0()
{
  return sub_1AC726B20();
}

uint64_t sub_1AC69B410()
{
  return sub_1AC726AF0();
}

_DWORD *sub_1AC69B420@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1AC69B430(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_1AC69B43C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_1AC69B44C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

_QWORD *sub_1AC69B458@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_1AC69B464(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AC69B478@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = sub_1AC69C1AC(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

BOOL sub_1AC69B4B4(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AC69B4C8()
{
  sub_1AC688D20(&qword_1EEC8A5A8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1AC728A40);
  sub_1AC688D20(&qword_1EEC8A5B0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1AC7289E0);
  sub_1AC69C12C();
  return sub_1AC726988();
}

uint64_t sub_1AC69B568()
{
  sub_1AC688D20((unint64_t *)&qword_1ED0BDC10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728C28);
  sub_1AC688D20(&qword_1EEC89638, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728460);
  return sub_1AC726988();
}

uint64_t sub_1AC69B5EC()
{
  return sub_1AC688D20((unint64_t *)&unk_1EEC89628, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728424);
}

uint64_t sub_1AC69B618()
{
  return sub_1AC688D20(&qword_1EEC89640, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC7283F8);
}

uint64_t sub_1AC69B644()
{
  sub_1AC688D20(&qword_1EEC8A598, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1AC728B98);
  sub_1AC688D20(&qword_1EEC8A5A0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1AC728B38);
  return sub_1AC726988();
}

uint64_t sub_1AC69B6C8()
{
  sub_1AC688D20(&qword_1EEC8A5C0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1AC728744);
  sub_1AC688D20(&qword_1EEC8A5C8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1AC7286E4);
  return sub_1AC726988();
}

uint64_t sub_1AC69B74C()
{
  return sub_1AC688D20(&qword_1EEC8A518, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1AC7286A8);
}

uint64_t sub_1AC69B778()
{
  return sub_1AC688D20(&qword_1EEC8A520, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1AC72867C);
}

uint64_t sub_1AC69B7A4()
{
  sub_1AC688D20((unint64_t *)&qword_1ED0BE270, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1AC7292E0);
  sub_1AC688D20(&qword_1EEC8A670, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1AC728F9C);
  return sub_1AC726988();
}

uint64_t sub_1AC69B828()
{
  sub_1AC688D20(&qword_1EEC8A678, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1AC728EA4);
  sub_1AC688D20((unint64_t *)&unk_1EEC8A680, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1AC728E44);
  return sub_1AC726988();
}

uint64_t sub_1AC69B8AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AC726208();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AC69B8F0()
{
  sub_1AC688D20(&qword_1EEC8A658, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1AC7292A0);
  sub_1AC688D20((unint64_t *)&unk_1EEC8A660, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1AC7290A8);
  return sub_1AC726988();
}

uint64_t sub_1AC69B974(uint64_t a1, uint64_t a2)
{
  return sub_1AC68B1BC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1AC69B980()
{
  sub_1AC72622C();
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC69B9C0()
{
  return sub_1AC688D20(&qword_1EEC8A528, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1AC728718);
}

uint64_t sub_1AC69B9EC()
{
  return sub_1AC688D20(&qword_1EEC8A530, (uint64_t (*)(uint64_t))type metadata accessor for SymbolicTraits, (uint64_t)&unk_1AC728808);
}

uint64_t sub_1AC69BA18()
{
  return sub_1AC688D20(&qword_1EEC8A538, (uint64_t (*)(uint64_t))type metadata accessor for SymbolicTraits, (uint64_t)&unk_1AC7287D4);
}

uint64_t sub_1AC69BA44()
{
  return sub_1AC688D20(&qword_1EEC8A540, (uint64_t (*)(uint64_t))type metadata accessor for SymbolicTraits, (uint64_t)&unk_1AC728834);
}

uint64_t sub_1AC69BA70()
{
  return sub_1AC688D20(&qword_1EEC8A548, (uint64_t (*)(uint64_t))type metadata accessor for SymbolicTraits, (uint64_t)&unk_1AC728870);
}

uint64_t sub_1AC69BA9C()
{
  return sub_1AC688D20(&qword_1EEC8A550, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1AC7289A4);
}

uint64_t sub_1AC69BAC8()
{
  return sub_1AC688D20(&qword_1EEC8A558, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1AC728978);
}

uint64_t sub_1AC69BAF4()
{
  return sub_1AC688D20(&qword_1EEC8A560, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1AC728A14);
}

uint64_t sub_1AC69BB20()
{
  return sub_1AC688D20(&qword_1EEC8A568, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1AC728AFC);
}

uint64_t sub_1AC69BB4C()
{
  return sub_1AC688D20(&qword_1EEC8A570, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1AC728AD0);
}

uint64_t sub_1AC69BB78()
{
  return sub_1AC688D20(&qword_1ED0BD5C8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1AC728B6C);
}

unint64_t sub_1AC69BBA8()
{
  unint64_t result;

  result = qword_1EEC8A578;
  if (!qword_1EEC8A578)
  {
    result = MEMORY[0x1AF440830](&unk_1AC728334, &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A578);
  }
  return result;
}

unint64_t sub_1AC69BBF0()
{
  unint64_t result;

  result = qword_1EEC8A580;
  if (!qword_1EEC8A580)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72835C, &type metadata for DSAccessibilityDiagnosticInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A580);
  }
  return result;
}

unint64_t sub_1AC69BC38()
{
  unint64_t result;

  result = qword_1EEC8A588;
  if (!qword_1EEC8A588)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72827C, &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A588);
  }
  return result;
}

unint64_t sub_1AC69BC80()
{
  unint64_t result;

  result = qword_1EEC8A590;
  if (!qword_1EEC8A590)
  {
    result = MEMORY[0x1AF440830](&unk_1AC7282A4, &type metadata for DSAccessibilityDiagnosticInfo.Rect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8A590);
  }
  return result;
}

uint64_t sub_1AC69BCC4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 120 && a2 == 0xE100000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1AC69BE38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEB00000000737265;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x54746E656D656C65 && a2 == 0xEB00000000657079 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1952671090 && a2 == 0xE400000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6449776F646E6977 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_1AC69C12C()
{
  unint64_t result;

  result = qword_1EEC8A5B8;
  if (!qword_1EEC8A5B8)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEF060], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEC8A5B8);
  }
  return result;
}

uint64_t sub_1AC69C174(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1AC69C1AC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_1AC69C1E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8A5D8;
  if (!qword_1EEC8A5D8)
  {
    v1 = sub_1AC69C244(255, (unint64_t *)&qword_1EEC8A5D0);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8A5D8);
  }
  return result;
}

uint64_t sub_1AC69C23C()
{
  return swift_release();
}

uint64_t sub_1AC69C244(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for NQMLAttributeName(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1EEC8A600);
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
  sub_1AC690A48(a1, &qword_1ED0BDB30);
}

uint64_t sub_1AC69C2A4()
{
  return sub_1AC688D20(&qword_1EEC8A608, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1AC728E08);
}

uint64_t sub_1AC69C2D0()
{
  return sub_1AC688D20((unint64_t *)&unk_1EEC8A610, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1AC728DDC);
}

uint64_t sub_1AC69C2FC()
{
  return sub_1AC688D20(&qword_1ED0BDB38, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1AC728E78);
}

uint64_t sub_1AC69C328()
{
  return sub_1AC688D20(&qword_1EEC8A620, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1AC728F60);
}

uint64_t sub_1AC69C354()
{
  return sub_1AC688D20(&qword_1EEC8A628, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1AC728F34);
}

uint64_t sub_1AC69C380()
{
  return sub_1AC688D20(&qword_1EEC8A630, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1AC729070);
}

uint64_t sub_1AC69C3AC()
{
  return sub_1AC688D20((unint64_t *)&unk_1EEC8A638, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1AC729048);
}

uint64_t sub_1AC69C3D8()
{
  return sub_1AC688D20((unint64_t *)&unk_1EEC8A648, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1AC7290D8);
}

id sub_1AC69C47C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void static UIFontDescriptor.preferred(forUseWith:compatibleWith:)()
{
  sub_1AC726910();
  __break(1u);
}

Class static UIFontDescriptor.preferredFontDescriptor(forUseWith:compatibleWith:)(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v16;
  objc_super v17;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = (objc_class *)type metadata accessor for CacheKey();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_useCase];
  *(_QWORD *)v11 = v3;
  *((_QWORD *)v11 + 1) = v4;
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = v6;
  *((_QWORD *)v11 + 4) = v7;
  v11[40] = v8;
  *(_QWORD *)&v10[OBJC_IVAR____TtC5JetUIP33_925E47A64C9969C34ACE8A7AFC4CB7868CacheKey_traitCollection] = a2;
  v12 = a2;
  sub_1AC692480(v3, v4, v5, v6, v7, v8);
  v17.receiver = v10;
  v17.super_class = v9;
  v13 = objc_msgSendSuper2(&v17, sel_init);
  if (qword_1ED0BE2C0 != -1)
    swift_once();
  isa = (Class)objc_msgSend((id)qword_1ED0BE260, sel_objectForKey_, v13);
  if (!isa)
  {
    LOBYTE(v16) = v8;
    isa = FontUseCase.makeFontDescriptor(compatibleWith:)((UITraitCollection)v12).super.isa;
    objc_msgSend((id)qword_1ED0BE260, sel_setObject_forKey_, isa, v13, v3, v4, v5, v6, v7, v16);
  }

  return isa;
}

void static UIFont.preferred(forUseWith:compatibleWith:)()
{
  sub_1AC726910();
  __break(1u);
}

void static UIFont.preferredFont(forUseWith:)()
{
  sub_1AC726910();
  __break(1u);
}

double UIFont.estimatedFirstBaseline.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(v0, sel_lineHeight);
  v2 = v1;
  objc_msgSend(v0, sel_descender);
  return v2 + v3;
}

id static FontUseCase.removeCachedFontsAndDescriptors()()
{
  if (qword_1ED0BE2C0 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED0BE260, sel_removeAllObjects);
  if (qword_1ED0BE2B8 != -1)
    swift_once();
  return objc_msgSend((id)qword_1ED0BE280, sel_removeAllObjects);
}

double PlacementSequence.measure.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 16))(v3);
  return ceil(*(double *)&v3[2]);
}

uint64_t dispatch thunk of PlacementSequence.union.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlacementSequence.measure.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

double sub_1AC69C800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 16))(v4, v1, v2);
  return ceil(*(double *)&v4[2]);
}

double sub_1AC69C86C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  CGFloat v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v1 = *((_QWORD *)v0 + 6);
  v2 = *((_QWORD *)v0 + 11);
  v3 = *((_BYTE *)v0 + 96);
  v4 = v0[1];
  v7 = *v0;
  v8 = v4;
  v9 = v0[2];
  v10 = v1;
  v11 = *(__int128 *)((char *)v0 + 56);
  v12 = *(__int128 *)((char *)v0 + 72);
  v13 = v2;
  v14 = v3;
  DisjointStack.Placements.union.getter(v6);
  return ceil(v6[2]);
}

double sub_1AC69C8E8()
{
  CGFloat v1[3];

  Pin.Placements.union.getter(v1);
  return ceil(v1[2]);
}

uint64_t static TextMeasurable.defaultTextAlignment.getter()
{
  return 4;
}

uint64_t static TextMeasurable.defaultLineBreakMode.getter()
{
  return 0;
}

void TextMeasurable.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  __int128 aBlock;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];

  v14 = (void *)*MEMORY[0x1E0DC1138];
  v40 = (void *)sub_1AC69C244(0, (unint64_t *)&qword_1ED0BD740);
  *(_QWORD *)&aBlock = a2;
  sub_1AC6900D4(&aBlock, v44);
  v15 = v14;
  v16 = a2;
  v17 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = v17;
  sub_1AC69E4FC(v44, v15, isUniquelyReferenced_nonNull_native);
  v19 = v43;

  swift_bridgeObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
  objc_msgSend(v20, sel_setAlignment_, a3);
  objc_msgSend(v20, sel_setLineBreakMode_, a4);
  objc_msgSend(v20, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (a5)
  {
    objc_msgSend(v20, sel_setMinimumLineHeight_, (double)a5);
    objc_msgSend(v20, sel_setMaximumLineHeight_, (double)a5);
  }
  v21 = (void *)*MEMORY[0x1E0DC1178];
  v40 = (void *)sub_1AC69C244(0, &qword_1ED0BD738);
  *(_QWORD *)&aBlock = v20;
  sub_1AC6900D4(&aBlock, v44);
  v22 = v21;
  v23 = v20;
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v43 = v19;
  sub_1AC69E4FC(v44, v22, v24);

  swift_bridgeObjectRelease();
  v25 = objc_msgSend(a1, sel_string);
  sub_1AC72622C();

  v26 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v27 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1AC688D20((unint64_t *)&qword_1ED0BDC10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728C28);
  v28 = (void *)sub_1AC726178();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v26, sel_initWithString_attributes_, v27, v28);

  v30 = objc_msgSend(a1, sel_length);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v29;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = sub_1AC690B30;
  *(_QWORD *)(v32 + 24) = v31;
  v41 = sub_1AC690AE8;
  v42 = v32;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_1AC690918;
  v40 = &block_descriptor;
  v33 = _Block_copy(&aBlock);
  v34 = v29;
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v30, 0, v33);
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v33 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, v34);

    swift_release();
    *(_QWORD *)a8 = v35;
    *(_QWORD *)(a8 + 8) = a6;
    *(_BYTE *)(a8 + 16) = a7 & 1;
  }
}

JetUI::TextMeasurable __swiftcall TextMeasurable.init(attributedText:numberOfLines:isLanguageAware:)(NSAttributedString attributedText, Swift::Int numberOfLines, Swift::Bool isLanguageAware)
{
  uint64_t v3;
  JetUI::TextMeasurable result;

  *(NSAttributedString *)v3 = attributedText;
  *(_QWORD *)(v3 + 8) = numberOfLines;
  *(_BYTE *)(v3 + 16) = isLanguageAware;
  result.numberOfLines = numberOfLines;
  result.attributedText = attributedText;
  result.isLanguageAware = isLanguageAware;
  return result;
}

id TextMeasurable.attributedText.getter()
{
  id *v0;

  return *v0;
}

uint64_t TextMeasurable.numberOfLines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TextMeasurable.isLanguageAware.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

Swift::Bool __swiftcall TextMeasurable.isTruncated(whenFitting:)(CGSize whenFitting)
{
  uint64_t v1;
  double height;
  double width;
  id v4;
  uint64_t v5;
  Swift::Bool result;
  id v7;
  void *v8;
  double v9;
  CGRect v10;

  height = whenFitting.height;
  width = whenFitting.width;
  v4 = *(id *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  if ((uint64_t)objc_msgSend(*(id *)v1, sel_length) < 1)
    return 0;
  result = 1;
  if (width > 0.0 && height > 0.0)
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12A0]), sel_init);
    v8 = v7;
    if (!v5)
      objc_msgSend(v7, sel_setMaximumNumberOfLines_, 0);
    objc_msgSend(v4, sel_boundingRectWithSize_options_context_, 1, v8, width, 1.79769313e308);
    v9 = CGRectGetHeight(v10);

    return v9 > height;
  }
  return result;
}

uint64_t sub_1AC69CE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType();
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return sub_1AC690CC0((uint64_t)&v11);
}

uint64_t sub_1AC69CEB8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD748);
  v35 = a2;
  v6 = sub_1AC726940();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      sub_1AC6900D4(v22, v36);
    }
    else
    {
      sub_1AC69FE7C((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    sub_1AC72622C();
    sub_1AC726AFC();
    sub_1AC7262A4();
    v24 = sub_1AC726B2C();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)sub_1AC6900D4(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1AC69D1F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A700);
  v42 = a2;
  v6 = sub_1AC726940();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1AC726AFC();
    sub_1AC7262A4();
    result = sub_1AC726B2C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1AC69D514(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = sub_1AC725E78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A720);
  v39 = a2;
  v10 = sub_1AC726940();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_1AC6900D4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_1AC69FE7C(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    sub_1AC688D20(&qword_1EEC8ACC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3FC28], MEMORY[0x1E0D3FC38]);
    result = sub_1AC7261C0();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)sub_1AC6900D4(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1AC69D8B0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A718);
  v37 = a2;
  v6 = sub_1AC726940();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1AC726AFC();
    sub_1AC7262A4();
    result = sub_1AC726B2C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1AC69DBB8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A710);
  v37 = a2;
  v6 = sub_1AC726940();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v37 & 1) != 0)
    {
      sub_1AC68AAA4(v25, (uint64_t)v38);
    }
    else
    {
      sub_1AC68E218((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_1AC726AFC();
    sub_1AC7262A4();
    result = sub_1AC726B2C();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_1AC68AAA4(v38, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1AC69DEDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A728);
  v6 = a2;
  v7 = sub_1AC726940();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1AC69FEFC(v37, *((unint64_t *)&v37 + 1));
      }
      sub_1AC726AFC();
      sub_1AC7262A4();
      result = sub_1AC726B2C();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_1AC69E1E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A708);
  v6 = sub_1AC726940();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v35[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v23 = v35[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = 16 * v21;
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *v30;
      v31 = v30[1];
      v36 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      sub_1AC726AFC();
      swift_bridgeObjectRetain();
      sub_1AC7262A4();
      swift_bridgeObjectRelease();
      result = sub_1AC726B2C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 16 * v17;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
      *v19 = v32;
      v19[1] = v31;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v18) = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_1AC69E4FC(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1AC6B4D78((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return sub_1AC6900D4(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1AC69F1B0();
      goto LABEL_7;
    }
    sub_1AC69CEB8(v12, a3 & 1);
    v18 = sub_1AC6B4D78((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1AC69F040(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)sub_1AC726AB4();
  __break(1u);
  return result;
}

uint64_t sub_1AC69E61C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1AC69E640()
{
  return swift_deallocObject();
}

uint64_t sub_1AC69E650()
{
  return swift_deallocObject();
}

void sub_1AC69E660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1AC6BDEB8(a1, a2, a3, a4, *(float64x2_t **)(v4 + 16), *(_BYTE **)(v4 + 24));
}

uint64_t sub_1AC69E668()
{
  return swift_deallocObject();
}

uint64_t initializeBufferWithCopyOfBuffer for TextMeasurable(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for TextMeasurable(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextMeasurable(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextMeasurable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1AC69E7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1AC6B4E9C(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1AC69F374();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1AC69D1F0(v17, a5 & 1);
  v23 = sub_1AC6B4E9C(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1AC726AB4();
  __break(1u);
  return result;
}

_OWORD *sub_1AC69E950(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1AC725E78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1AC6B4DF8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return sub_1AC6900D4(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1AC69F52C();
      goto LABEL_7;
    }
    sub_1AC69D514(v17, a3 & 1);
    v23 = sub_1AC6B4DF8(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1AC69F0A4(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)sub_1AC726AB4();
  __break(1u);
  return result;
}

uint64_t sub_1AC69EACC(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1AC6B4E9C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1AC69F768();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1 & 1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1AC69D8B0(result, a4 & 1);
  result = sub_1AC6B4E9C(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1AC726AB4();
  __break(1u);
  return result;
}

uint64_t sub_1AC69EC24(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1AC6B4E9C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 40 * v12;
        __swift_destroy_boxed_opaque_existential_1(v19);
        return sub_1AC68AAA4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1AC69F910();
      goto LABEL_7;
    }
    sub_1AC69DBB8(v15, a4 & 1);
    v21 = sub_1AC6B4E9C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1AC69F144(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1AC726AB4();
  __break(1u);
  return result;
}

uint64_t sub_1AC69ED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1AC6B4E9C(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1AC69FAF8();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      result = sub_1AC69FEB8(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1AC69DEDC(v17, a5 & 1);
  v23 = sub_1AC6B4E9C(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1AC726AB4();
  __break(1u);
  return result;
}

uint64_t sub_1AC69EECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1AC6B4F00(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1AC69FCBC();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_release();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (_QWORD *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1AC69E1E8(v17, a5 & 1);
  v23 = sub_1AC6B4F00(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1AC726AB4();
  __break(1u);
  return result;
}

_OWORD *sub_1AC69F040(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1AC6900D4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_1AC69F0A4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1AC725E78();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1AC6900D4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1AC69F144(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1AC68AAA4(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

id sub_1AC69F1B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD748);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1AC69FE7C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1AC6900D4(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1AC69F374()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A700);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1AC69F52C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = sub_1AC725E78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A720);
  v6 = *v0;
  v7 = sub_1AC726934();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_1AC69FE7C(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_1AC6900D4(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1AC69F768()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A718);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1AC69F910()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A710);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_1AC68E218(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1AC68AAA4(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1AC69FAF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A728);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)sub_1AC69FEFC(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1AC69FCBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A708);
  v2 = *v0;
  v3 = sub_1AC726934();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1AC69FE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1AC69FEB8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1AC69FEFC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1AC69FF5C()
{
  uint64_t v0;

  v0 = sub_1AC725854();
  __swift_allocate_value_buffer(v0, qword_1EEC89660);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEC89660);
  return sub_1AC72580C();
}

UIColor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UIColor.init(htmlColor:)(Swift::String htmlColor)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  objc_class *v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  UIColor result;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  double *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  object = htmlColor._object;
  countAndFlagsBits = htmlColor._countAndFlagsBits;
  v5 = sub_1AC725854();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = countAndFlagsBits;
  v68 = (uint64_t)object;
  if (qword_1EEC89680 != -1)
    swift_once();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EEC89660);
  sub_1AC72583C();
  sub_1AC68F334();
  sub_1AC726700();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) == 0)
  {
    v11 = sub_1AC726334();
    v13 = v12;
    v14 = MEMORY[0x1AF43F828](v11);
    v16 = v15;
    swift_bridgeObjectRelease();
    sub_1AC6A058C();
    swift_allocError();
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 16) = countAndFlagsBits;
    *(_QWORD *)(v17 + 24) = object;
    *(_BYTE *)(v17 + 32) = 0;
    goto LABEL_11;
  }
  if ((sub_1AC72631C() & 1) != 0)
    v18 = sub_1AC7262BC();
  else
    v18 = 15;
  swift_bridgeObjectRetain();
  v59 = countAndFlagsBits;
  v19 = sub_1AC6A0540(v18, countAndFlagsBits, (unint64_t)object);
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v24 = sub_1AC7266DC();
  swift_bridgeObjectRelease();
  v25 = v24 - 3;
  if ((unint64_t)(v24 - 3) >= 6 || ((0x2Bu >> v25) & 1) == 0)
  {
    v13 = (objc_class *)sub_1AC7266DC();
    swift_bridgeObjectRelease();
    sub_1AC6A058C();
    swift_allocError();
    v26 = v59;
    *(_QWORD *)v27 = v13;
    *(_QWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 16) = object;
    *(_QWORD *)(v27 + 24) = 0;
    *(_BYTE *)(v27 + 32) = 1;
LABEL_11:
    swift_willThrow();
    return (UIColor)v13;
  }
  v65 = v2;
  v58 = object;
  v29 = 8 * v25;
  v30 = *(double *)((char *)&unk_1AC729438 + v29);
  v31 = *(_QWORD *)((char *)&unk_1AC729468 + v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD750);
  inited = swift_initStackObject();
  v33 = 0;
  v34 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1AC7293C0;
  *(_QWORD *)(inited + 32) = 0;
  v57 = (double *)(inited + 32);
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0x3FF0000000000000;
  v63 = v23;
  v64 = inited;
  v61 = v19;
  v62 = v21;
  v60 = v31;
  do
  {
    v35 = sub_1AC7266D0();
    if ((v36 & 1) != 0)
      break;
    v37 = v35;
    result.super.isa = (Class)sub_1AC7266D0();
    if ((v38 & 1) != 0)
      break;
    if ((unint64_t)result.super.isa >> 14 < v37 >> 14)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v41 = sub_1AC7266E8();
    v43 = v42;
    v44 = v39;
    v45 = v40;
    if ((v41 ^ v42) < 0x4000)
      goto LABEL_35;
    if ((v40 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v48 = (uint64_t)sub_1AC6A05D0(v41, v43, v44, v45, 16);
      v51 = v50;
      swift_bridgeObjectRelease();
      if ((v51 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      if ((v40 & 0x2000000000000000) != 0)
      {
        v67 = v39;
        v68 = v40 & 0xFFFFFFFFFFFFFFLL;
        v46 = &v67;
      }
      else if ((v39 & 0x1000000000000000) != 0)
      {
        v46 = (_QWORD *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v46 = (_QWORD *)sub_1AC7268B0();
      }
      v47 = v65;
      v48 = sub_1AC6A0E5C((uint64_t)v46, v41, v43, v44, v45, 16);
      v65 = v47;
      v66 = v49 & 1;
      if ((v49 & 1) != 0)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        v13 = (objc_class *)MEMORY[0x1AF43F828](v41, v43, v44, v45);
        v54 = v53;
        swift_bridgeObjectRelease();
        sub_1AC6A058C();
        swift_allocError();
        *(_QWORD *)v55 = v13;
        *(_QWORD *)(v55 + 8) = v54;
        v56 = v58;
        *(_QWORD *)(v55 + 16) = v59;
        *(_QWORD *)(v55 + 24) = v56;
        *(_BYTE *)(v55 + 32) = 2;
        swift_willThrow();
        swift_setDeallocating();
        return (UIColor)v13;
      }
    }
    result.super.isa = (Class)swift_bridgeObjectRelease();
    inited = v64;
    if (v34 >= *(_QWORD *)(v64 + 16))
      goto LABEL_37;
    *(double *)(v64 + 8 * v34 + 32) = (double)v48 / v30;
    v33 += v60;
    ++v34;
  }
  while (v34 != 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result.super.isa = (Class)objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v52 = *(_QWORD *)(inited + 16);
  if (!v52)
    goto LABEL_38;
  if (v52 == 1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v52 < 3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v52 != 3)
  {
    v13 = -[objc_class initWithRed:green:blue:alpha:](result.super.isa, sel_initWithRed_green_blue_alpha_, *v57, *(double *)(inited + 40), *(double *)(inited + 48), *(double *)(inited + 56));
    swift_setDeallocating();
    return (UIColor)v13;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A0540(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_1AC726334();
  __break(1u);
  return result;
}

unint64_t sub_1AC6A058C()
{
  unint64_t result;

  result = qword_1EEC8A730;
  if (!qword_1EEC8A730)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for UIColor.HTMLColorError, &type metadata for UIColor.HTMLColorError);
    atomic_store(result, (unint64_t *)&qword_1EEC8A730);
  }
  return result;
}

unsigned __int8 *sub_1AC6A05D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_1AC6A1510();
  swift_bridgeObjectRetain();
  v7 = sub_1AC726328();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1AC6A093C();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_1AC7268B0();
  }
LABEL_7:
  v13 = sub_1AC6A06C0(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1AC6A06C0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1AC6A093C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1AC726334();
  v4 = sub_1AC6A09B8(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1AC6A09B8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1AC6A0AFC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1AC6A0BE8(v9, 0);
      v12 = sub_1AC6A0C4C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1AF43F84C](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1AF43F84CLL);
LABEL_9:
      sub_1AC7268B0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1AF43F84C]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1AC6A0AFC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1AC6E01A4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1AC6E01A4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1AC7262EC();
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AC6A0BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A740);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_1AC6A0C4C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1AC6E01A4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1AC7262F8();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1AC7268B0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1AC6E01A4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1AC7262D4();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1AC6A0E5C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1AC6E01A4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_1AC7262EC();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1AC6E01A4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1AC6E01A4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_1AC7262EC();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_1AC6A1280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 2)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a5 != 1)
  {
    if (a5)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRetain();
}

uint64_t _s14HTMLColorErrorOwxx(uint64_t a1)
{
  return sub_1AC6A12E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_1AC6A12E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a5 != 1)
  {
    if (a5)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease();
}

uint64_t _s14HTMLColorErrorOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AC6A1280(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s14HTMLColorErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AC6A1280(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1AC6A12E4(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14HTMLColorErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1AC6A12E4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s14HTMLColorErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s14HTMLColorErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AC6A14F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1AC6A14F8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UIColor.HTMLColorError()
{
  return &type metadata for UIColor.HTMLColorError;
}

unint64_t sub_1AC6A1510()
{
  unint64_t result;

  result = qword_1EEC8A738;
  if (!qword_1EEC8A738)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EEC8A738);
  }
  return result;
}

uint64_t VerticalSpaceMeasurable.init(_:multiplier:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
  v6 = swift_allocObject();
  result = sub_1AC68AAA4(a1, v6 + 16);
  *(_QWORD *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t VerticalSpaceMeasurable.verticalSpace.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

double VerticalSpaceMeasurable.multiplier.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double VerticalSpaceMeasurable.measurements(fitting:in:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t);
  int v20;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v23[24];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v5 = sub_1AC726A48();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v23[-v10];
  v12 = *(double *)(v2 + 8);
  v13 = *(_QWORD *)v2 + 16;
  swift_beginAccess();
  sub_1AC68E218(v13, (uint64_t)v24);
  v14 = v25;
  v15 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  v16 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(a1, v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v17 = v12 * v16;
  if (qword_1ED0BE338 != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED0BE2C8);
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v19(v11, v18, v5);
  *(double *)v24 = v17;
  v19(v9, (uint64_t)v11, v5);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 88))(v9, v5);
  if (v20 == *MEMORY[0x1E0DED4F0]
    || v20 == *MEMORY[0x1E0DED4E8]
    || v20 == *MEMORY[0x1E0DED500]
    || v20 == *MEMORY[0x1E0DED508]
    || v20 == *MEMORY[0x1E0DED4D8]
    || v20 == *MEMORY[0x1E0DED4E0])
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    sub_1AC7264E4();
    v22 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v22(v11, v5);
    v22(v9, v5);
  }
  return a2;
}

double sub_1AC6A1898(uint64_t a1, double a2)
{
  return VerticalSpaceMeasurable.measurements(fitting:in:)(a1, a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for VerticalSpaceMeasurable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for VerticalSpaceMeasurable()
{
  return swift_release();
}

_QWORD *assignWithCopy for VerticalSpaceMeasurable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for VerticalSpaceMeasurable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalSpaceMeasurable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalSpaceMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalSpaceMeasurable()
{
  return &type metadata for VerticalSpaceMeasurable;
}

uint64_t static ObjCFunctions.placeable(for:)(void *a1)
{
  return sub_1AC6A1A58(a1, &qword_1EEC8A750, 0x1E0DC3518, (uint64_t)&protocol witness table for UIButton);
}

{
  return sub_1AC6A1A58(a1, &qword_1EEC8A758, 0x1E0DC3890, (uint64_t)&protocol witness table for UIImageView);
}

{
  return sub_1AC6A1A58(a1, (unint64_t *)&unk_1EEC8A760, 0x1E0DC3990, (uint64_t)&protocol witness table for UILabel);
}

uint64_t sub_1AC6A1A58(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_class *v10;
  id v11;
  id v12;
  objc_super v14;
  _QWORD v15[6];

  v15[5] = &unk_1EECAA1A8;
  v7 = swift_dynamicCastObjCProtocolConditional();
  if (v7)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    v15[3] = sub_1AC69C244(0, a2);
    v15[4] = a4;
    v15[0] = a1;
    v10 = (objc_class *)type metadata accessor for _PlaceableAsJUPlaceable();
    v11 = objc_allocWithZone(v10);
    sub_1AC68E218((uint64_t)v15, (uint64_t)v11 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base);
    v14.receiver = v11;
    v14.super_class = v10;
    v12 = a1;
    v8 = (uint64_t)objc_msgSendSuper2(&v14, sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return v8;
}

id sub_1AC6A1B48(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void *v10;
  id v11;
  objc_class *v13;
  id v14;
  id v15;
  id v16;
  objc_super v17;
  _QWORD v18[6];

  v18[5] = &unk_1EECAA1A8;
  v9 = swift_dynamicCastObjCProtocolConditional();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = a3;
    return v10;
  }
  else
  {
    v18[3] = sub_1AC69C244(0, a4);
    v18[4] = a6;
    v18[0] = a3;
    v13 = (objc_class *)type metadata accessor for _PlaceableAsJUPlaceable();
    v14 = objc_allocWithZone(v13);
    sub_1AC68E218((uint64_t)v18, (uint64_t)v14 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base);
    v17.receiver = v14;
    v17.super_class = v13;
    v15 = a3;
    v16 = objc_msgSendSuper2(&v17, sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);

    return v16;
  }
}

uint64_t HorizontalStack.Alignment._verticalLayoutAlignment.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0x3030201u >> (8 * result);
  return result;
}

uint64_t HorizontalStack.Alignment.hash(into:)()
{
  return sub_1AC726B08();
}

BOOL static HorizontalStack.Alignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t HorizontalStack.Alignment.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

void HorizontalStack.Properties.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ZeroDimension;
  *(_QWORD *)(a1 + 32) = &protocol witness table for ZeroDimension;
  *(_QWORD *)(a1 + 64) = &type metadata for ZeroDimension;
  *(_QWORD *)(a1 + 72) = &protocol witness table for ZeroDimension;
  *(_WORD *)(a1 + 80) = 0;
}

uint64_t HorizontalStack.Properties.leadingSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1, a1);
}

uint64_t (*HorizontalStack.Properties.leadingSpacing.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.trailingSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 40, a1);
}

uint64_t (*HorizontalStack.Properties.trailingSpacing.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.alignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t (*HorizontalStack.Properties.alignment.modify())()
{
  return nullsub_1;
}

uint64_t HorizontalStack.Properties.shouldSkip.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t HorizontalStack.Properties.shouldSkip.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*HorizontalStack.Properties.shouldSkip.modify())()
{
  return nullsub_1;
}

double sub_1AC6A1DC4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 48);
  result = *(double *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 48) = v2;
  *(double *)(a1 + 56) = result;
  return result;
}

uint64_t sub_1AC6A1DE8()
{
  return 0;
}

uint64_t sub_1AC6A1DF0()
{
  return 2;
}

_QWORD *sub_1AC6A1DF8()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _QWORD *v3;
  __int128 v5[4];

  v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  v2 = v0[3];
  v5[2] = v0[2];
  v5[3] = v2;
  v3 = sub_1AC70F4E0(v5);
  sub_1AC6A4090((uint64_t)v5);
  return v3;
}

__int128 *sub_1AC6A1E40(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC70D4CC(a1, a2, a3);
}

uint64_t sub_1AC6A1E78()
{
  return sub_1AC726358();
}

unint64_t sub_1AC6A1E98()
{
  return 0xD00000000000005ALL;
}

uint64_t HorizontalStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_1AC6A295C(v3, a3);
  return HorizontalStack.add(_:with:)(a1, a2);
}

uint64_t HorizontalStack.insert(_:at:with:)(uint64_t a1, int64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v3;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  _BYTE v22[88];

  sub_1AC68E218(a1, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    v10 = v17;
    v11 = v18;
    v12 = v19;
    *(_QWORD *)&v13 = v20;
    v8 = v15;
    v9 = v16;
    if ((BYTE8(v17) & 1) == 0)
      sub_1AC725F38();
    sub_1AC6A2928((uint64_t)&v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  sub_1AC692CD0(v3, (uint64_t)v22);
  if (a3)
    a3(v22);
  sub_1AC68E218(a1, (uint64_t)&v15);
  result = sub_1AC692CD0((uint64_t)v22, (uint64_t)&v17 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    v12 = v19;
    v13 = v20;
    v14[0] = v21[0];
    *(_OWORD *)((char *)v14 + 10) = *(_OWORD *)((char *)v21 + 10);
    v8 = v15;
    v9 = v16;
    v10 = v17;
    v11 = v18;
    sub_1AC6A36E0(a2, a2, (uint64_t)&v8);
    return sub_1AC68DF00((uint64_t)v22);
  }
  __break(1u);
  return result;
}

uint64_t HorizontalStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_1AC6A295C(v4, a4);
  return HorizontalStack.insert(_:at:with:)(a1, a2, a3);
}

void HorizontalStack.layout(relativeTo:with:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v12;
  id v13;
  CGFloat MinX;
  CGRect v15;

  v12 = *(_QWORD *)(v6 + 88);
  v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  MinX = CGRectGetMinX(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinX;
}

uint64_t sub_1AC6A2160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11[2];
  uint64_t v12;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  sub_1AC68E218(a1, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v11, (uint64_t)v14);
    v6 = v15;
    v7 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 8))(v13, a2, v6, v7);
    v8 = 0x3030201u >> (8 * *(_BYTE *)(a1 + 120));
    *a3 = v13[0];
    a3[1] = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    result = sub_1AC6916CC((uint64_t)v11, &qword_1ED0BD540);
    v10 = 0x3030201u >> (8 * *(_BYTE *)(a1 + 120));
    *a3 = 0;
    a3[1] = v10;
  }
  return result;
}

JetUI::_LayoutAlignment __swiftcall HorizontalStack._layoutAlignment(with:)(UITraitCollection with)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  Class isa;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  Class v18;
  __int128 v19[2];
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[120];
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  _BYTE v29[136];

  v3 = v1;
  v4 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v4 + 16))
  {
    isa = with.super.isa;
    sub_1AC6902E4(v4 + 32, (uint64_t)v29, &qword_1ED0BD518);
    LOWORD(with.super.isa) = sub_1AC6A2160((uint64_t)v29, (uint64_t)isa, &v27);
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v6 != 0;
    v8 = v6 - v7;
    if (v6 == v7)
    {
      LOBYTE(v9) = v27;
      LOBYTE(v10) = v28;
LABEL_17:
      LOWORD(with.super.isa) = sub_1AC6916CC((uint64_t)v29, &qword_1ED0BD518);
      *v3 = v9;
      v3[1] = v10;
      return (JetUI::_LayoutAlignment)with.super.isa;
    }
    if (v6 > v7)
    {
      v18 = isa;
      v9 = v27;
      v10 = v28;
      swift_bridgeObjectRetain();
      v12 = v4 + (v7 << 7) + 32;
      do
      {
        sub_1AC6902E4(v12, (uint64_t)v25, &qword_1ED0BD518);
        sub_1AC68E218((uint64_t)v25, (uint64_t)v21);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
        if (swift_dynamicCast())
        {
          sub_1AC68AAA4(v19, (uint64_t)v22);
          v17 = v23;
          v16 = v24;
          __swift_project_boxed_opaque_existential_1(v22, v23);
          (*(void (**)(_QWORD *__return_ptr, Class, uint64_t, uint64_t))(v16 + 8))(v21, v18, v17, v16);
          v13 = LOBYTE(v21[0]);
          v14 = v26;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        }
        else
        {
          v20 = 0;
          memset(v19, 0, sizeof(v19));
          sub_1AC6916CC((uint64_t)v19, &qword_1ED0BD540);
          v13 = 0;
          v14 = v26;
        }
        v15 = 0x3030201u >> (8 * v14);
        sub_1AC6916CC((uint64_t)v25, &qword_1ED0BD518);
        if (v13 != v9)
          v9 = 0;
        if (v10 != v15)
          v10 = 0;
        v12 += 128;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    v11 = 0x3030201u >> (8 * *(_BYTE *)(v2 + 80));
    *v3 = 0;
    v3[1] = v11;
  }
  return (JetUI::_LayoutAlignment)with.super.isa;
}

void sub_1AC6A2490(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v12;
  id v13;
  CGFloat MinX;
  CGRect v15;

  v12 = *(_QWORD *)(v6 + 88);
  v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  MinX = CGRectGetMinX(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinX;
}

char *sub_1AC6A2514(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BD468);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A2614(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC897D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A2718(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A2830(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD750);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1AC6A2928(uint64_t a1)
{
  destroy for Pin(a1);
  return a1;
}

uint64_t sub_1AC6A295C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HorizontalStack(a2, a1);
  return a2;
}

char *sub_1AC6A2990(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A778);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AC6A2A90(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC897C8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[26 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 208 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC89710);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A2BC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AC6A2CE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDDB8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD38);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1AC6A2E14(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7D0);
  v10 = *(_QWORD *)(type metadata accessor for DSLocalizationInfoLog() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for DSLocalizationInfoLog() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1AC6A2F88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A3080(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A3178(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A798);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AC6A3270(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7B8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7C0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A3390(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A7B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AC6A34AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BDDF0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8])
      memmove(v12, v13, 136 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AC6A35C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A780);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A788);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1AC6A36E0(unint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC692D68(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[16 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD518);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 128;
  v18 = &v5[16 * a2 + 4];
  v19 = v17 << 7;
  if ((_QWORD *)(v14 + 128) != v18 || result >= (unint64_t)v18 + v19)
    result = (unint64_t)memmove((void *)result, v18, v19);
  v20 = v5[2];
  v16 = __OFADD__(v20, v9);
  v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1AC6902E4(a3, (uint64_t)&v5[16 * v7 + 4], &qword_1ED0BD518);
    return sub_1AC6916CC(a3, &qword_1EEC8A7F0);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A3838()
{
  unint64_t result;

  result = qword_1EEC8A770;
  if (!qword_1EEC8A770)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for HorizontalStack.Alignment, &type metadata for HorizontalStack.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8A770);
  }
  return result;
}

unint64_t sub_1AC6A387C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6A38A0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6A38A0()
{
  unint64_t result;

  result = qword_1EEC89718;
  if (!qword_1EEC89718)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for HorizontalStack.Placements, &type metadata for HorizontalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC89718);
  }
  return result;
}

unint64_t sub_1AC6A38E8()
{
  unint64_t result;

  result = qword_1EEC89720;
  if (!qword_1EEC89720)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for HorizontalStack.Placements, &type metadata for HorizontalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC89720);
  }
  return result;
}

unint64_t sub_1AC6A3930()
{
  unint64_t result;

  result = qword_1EEC89728;
  if (!qword_1EEC89728)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for HorizontalStack.Placements, &type metadata for HorizontalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC89728);
  }
  return result;
}

uint64_t assignWithCopy for HorizontalStack(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for HorizontalStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HorizontalStack.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AC6A3C9C + 4 * byte_1AC7294ED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AC6A3CD0 + 4 * asc_1AC7294E8[v4]))();
}

uint64_t sub_1AC6A3CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6A3CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6A3CE0);
  return result;
}

uint64_t sub_1AC6A3CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6A3CF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AC6A3CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6A3D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HorizontalStack.Alignment()
{
  return &type metadata for HorizontalStack.Alignment;
}

uint64_t assignWithCopy for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for HorizontalStack.Properties(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack.Properties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack.Properties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for HorizontalStack.Placements(uint64_t a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HorizontalStack.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for HorizontalStack.Placements(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = (void *)a2[4];
  v5 = (void *)a1[4];
  a1[4] = v4;
  v6 = v4;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HorizontalStack.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalStack.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalStack.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalStack.Placements()
{
  return &type metadata for HorizontalStack.Placements;
}

uint64_t sub_1AC6A4090(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_1AC6A40BC(unint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC6A2A90(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[26 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC89710);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 208;
  v18 = &v5[26 * a2 + 4];
  v19 = 26 * v17;
  if ((_QWORD *)(v14 + 208) != v18 || result >= (unint64_t)&v18[v19])
    result = (unint64_t)memmove((void *)result, v18, v19 * 8);
  v20 = v5[2];
  v16 = __OFADD__(v20, v9);
  v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1AC6902E4(a3, v14, &qword_1EEC89710);
    return sub_1AC6916CC(a3, &qword_1EEC897C0);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A421C(unint64_t result, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC6A2BC8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[104 * v7 + 32];
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 104;
  v18 = &v5[104 * a2 + 32];
  v19 = 104 * v17;
  if ((char *)(v14 + 104) != v18 || result >= (unint64_t)&v18[v19])
    result = (unint64_t)memmove((void *)result, v18, v19);
  v20 = *((_QWORD *)v5 + 2);
  v16 = __OFADD__(v20, v9);
  v21 = v20 + v9;
  if (!v16)
  {
    *((_QWORD *)v5 + 2) = v21;
LABEL_19:
    sub_1AC6A47B8(a3, (uint64_t)&v5[104 * v7 + 32]);
    return sub_1AC6916CC(a3, &qword_1EEC8A7E0);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A436C(unint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC6A2CE0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[5 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD38);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 40;
  v18 = &v5[5 * a2 + 4];
  if ((_QWORD *)(v14 + 40) != v18 || result >= (unint64_t)&v18[5 * v17])
    result = (unint64_t)memmove((void *)result, v18, 40 * v17);
  v19 = v5[2];
  v16 = __OFADD__(v19, v9);
  v20 = v19 + v9;
  if (!v16)
  {
    v5[2] = v20;
LABEL_19:
    sub_1AC68E218(a3, v14);
    return sub_1AC6916CC(a3, &qword_1EEC8A7D8);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A44C8(unint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC68DDC8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[18 * v7 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD520);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 144;
  v18 = &v5[18 * a2 + 4];
  v19 = 18 * v17;
  if ((_QWORD *)(v14 + 144) != v18 || result >= (unint64_t)&v18[v19])
    result = (unint64_t)memmove((void *)result, v18, v19 * 8);
  v20 = v5[2];
  v16 = __OFADD__(v20, v9);
  v21 = v20 + v9;
  if (!v16)
  {
    v5[2] = v21;
LABEL_19:
    sub_1AC6902E4(a3, v14, &qword_1ED0BD520);
    return sub_1AC6916CC(a3, &qword_1EEC8A7C8);
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A4628(unint64_t result, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1AC6A34AC(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[136 * v7 + 32];
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 136;
  v18 = &v5[136 * a2 + 32];
  if ((char *)(v14 + 136) != v18 || result >= (unint64_t)&v18[136 * v17])
    result = (unint64_t)memmove((void *)result, v18, 136 * v17);
  v19 = *((_QWORD *)v5 + 2);
  v16 = __OFADD__(v19, v9);
  v20 = v19 + v9;
  if (!v16)
  {
    *((_QWORD *)v5 + 2) = v20;
LABEL_19:
    sub_1AC6A477C(a3, (uint64_t)&v5[136 * v7 + 32]);
    return sub_1AC6916CC(a3, &qword_1EEC8A790);
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1AC6A477C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VerticalFlowLayout.Child(a2, a1);
  return a2;
}

uint64_t sub_1AC6A47B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VerticalStackLayout.Child(a2, a1);
  return a2;
}

uint64_t Constrain.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[144];

  sub_1AC6A48BC(v1, (uint64_t)v15);
  Constrain.Placements.next()((uint64_t)v9);
  result = sub_1AC6A4BA8((uint64_t)v15);
  if (v10)
  {
    v7 = v12;
    v8 = v11;
    v4 = v13;
    v5 = v14;
    result = sub_1AC6929AC((uint64_t)v9);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  else
  {
    if (qword_1EEC89658 != -1)
      result = swift_once();
    v6 = xmmword_1EEC8A840;
    *(_OWORD *)a1 = xmmword_1EEC8A830;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = xmmword_1EEC8A850;
  }
  return result;
}

uint64_t sub_1AC6A48BC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Constrain.Placements(a2, a1);
  return a2;
}

uint64_t Constrain.Placements.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  int v4;
  double v5;
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double Width;
  unsigned __int8 v12;
  int v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  char v19;
  double Height;
  unsigned __int8 v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double MinX;
  double MinY;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  double v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  _BYTE v52[40];
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  sub_1AC695DFC(v1 + 104, (uint64_t)&v46);
  if (*((_QWORD *)&v47 + 1))
  {
    sub_1AC68AAA4(&v46, (uint64_t)v53);
    sub_1AC6916CC(v1 + 104, &qword_1ED0BD568);
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_QWORD *)(v1 + 136) = 0;
    v3 = *(double *)(v1 + 40);
    v4 = *(unsigned __int8 *)(v1 + 48);
    v5 = *(double *)(v1 + 56);
    v6 = *(unsigned __int8 *)(v1 + 64);
    v7 = *(double *)v1;
    v8 = *(double *)(v1 + 8);
    v9 = *(double *)(v1 + 16);
    v10 = *(double *)(v1 + 24);
    v56.origin.x = *(CGFloat *)v1;
    v56.origin.y = v8;
    v56.size.width = v9;
    v56.size.height = v10;
    Width = CGRectGetWidth(v56);
    v12 = v4 ^ 1;
    v13 = (v4 ^ 1) & (Width < v3);
    v45 = v3;
    if (v13)
      v14 = v3;
    else
      v14 = Width;
    if (Width > v5)
      Width = v5;
    if (v6)
      Width = v14;
    if ((v13 & 1) != 0)
      v15 = v14;
    else
      v15 = Width;
    v16 = *(double *)(v1 + 72);
    v17 = *(unsigned __int8 *)(v1 + 80);
    v18 = *(double *)(v1 + 88);
    v19 = *(_BYTE *)(v1 + 96);
    v57.origin.x = v7;
    v57.origin.y = v8;
    v57.size.width = v9;
    v57.size.height = v10;
    Height = CGRectGetHeight(v57);
    v21 = v17 ^ 1;
    v22 = (v17 ^ 1) & (Height < v16);
    if (v22)
      v23 = v16;
    else
      v23 = Height;
    if (Height > v18)
      Height = v18;
    if ((v19 & 1) != 0)
      Height = v23;
    if ((v22 & 1) != 0)
      v24 = v23;
    else
      v24 = Height;
    v25 = v54;
    v26 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    v27 = (*(double (**)(_QWORD, uint64_t, uint64_t, double, double))(v26 + 8))(*(_QWORD *)(v1 + 32), v25, v26, v15, v24);
    v29 = v28;
    v43 = v31;
    v44 = v30;
    v58.origin.x = v7;
    v58.origin.y = v8;
    v58.size.width = v9;
    v58.size.height = v10;
    MinX = CGRectGetMinX(v58);
    v59.origin.x = v7;
    v59.origin.y = v8;
    v59.size.width = v9;
    v59.size.height = v10;
    MinY = CGRectGetMinY(v59);
    v34 = v45;
    if ((v12 & (v27 < v45)) == 0)
      v34 = v27;
    v35 = v5;
    if (v27 <= v5)
      v35 = v27;
    if (v12 & (v27 < v45) | v6 & 1)
      v36 = v34;
    else
      v36 = v35;
    if ((v21 & (v29 < v16)) != 0)
      v37 = v16;
    else
      v37 = v29;
    v38 = v18;
    if (v29 <= v18)
      v38 = v29;
    if (v21 & (v29 < v16) | v19 & 1)
      v39 = v37;
    else
      v39 = v38;
    sub_1AC68E218((uint64_t)v53, (uint64_t)v52);
    sub_1AC68E218((uint64_t)v52, (uint64_t)&v46);
    *((_QWORD *)&v48 + 1) = floor(MinX);
    *(_QWORD *)&v49 = floor(MinY);
    *((_QWORD *)&v49 + 1) = ceil(v36);
    *(_QWORD *)&v50 = ceil(v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    *((_QWORD *)&v50 + 1) = floor(v44);
    v51 = floor(v43);
    v40 = v49;
    *(_OWORD *)(a1 + 32) = v48;
    *(_OWORD *)(a1 + 48) = v40;
    v41 = v47;
    *(_OWORD *)a1 = v46;
    *(_OWORD *)(a1 + 16) = v41;
    *(_OWORD *)(a1 + 64) = v50;
    *(double *)(a1 + 80) = v51;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  else
  {
    result = sub_1AC6916CC((uint64_t)&v46, &qword_1ED0BD568);
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1AC6A4BA8(uint64_t a1)
{
  destroy for Constrain.Placements(a1);
  return a1;
}

__n128 sub_1AC6A4BDC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AC6A4C08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AC70F4F4(v0);
  sub_1AC6A4BA8(v0);
  return v1;
}

BOOL sub_1AC6A4C3C(double a1, double a2)
{
  return a1 < a2;
}

unint64_t sub_1AC6A4C48()
{
  return 0xD000000000000054;
}

unint64_t sub_1AC6A4C64()
{
  return 0xD000000000000056;
}

uint64_t Constrain.init(_:width:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  char v13;
  char v15;
  __int128 *v17;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;

  v13 = a5;
  v15 = a3;
  v17 = (__int128 *)a1;
  if (((a3 | a5) & 1) == 0)
  {
    v21 = &v20;
    MEMORY[0x1E0C80A78](a1);
    a1 = sub_1AC7260D0();
  }
  if (((a7 | a10) & 1) == 0)
  {
    v21 = &v20;
    MEMORY[0x1E0C80A78](a1);
    sub_1AC7260D0();
  }
  result = sub_1AC68AAA4(v17, a9);
  *(_QWORD *)(a9 + 40) = a2;
  *(_BYTE *)(a9 + 48) = v15 & 1;
  *(_QWORD *)(a9 + 56) = a4;
  *(_BYTE *)(a9 + 64) = v13 & 1;
  *(_QWORD *)(a9 + 72) = a6;
  *(_BYTE *)(a9 + 80) = a7 & 1;
  *(_QWORD *)(a9 + 88) = a8;
  *(_BYTE *)(a9 + 96) = a10 & 1;
  return result;
}

uint64_t Constrain.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  char v22;
  __int128 v23[2];

  v13 = *(_QWORD *)(v6 + 40);
  v14 = *(_BYTE *)(v6 + 48);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = *(_BYTE *)(v6 + 64);
  v17 = *(_QWORD *)(v6 + 72);
  v18 = *(_BYTE *)(v6 + 80);
  v19 = *(_QWORD *)(v6 + 88);
  v22 = *(_BYTE *)(v6 + 96);
  sub_1AC68E218(v6, (uint64_t)v23);
  *(_OWORD *)(a2 + 120) = 0u;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = v13;
  *(_BYTE *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v19;
  *(_BYTE *)(a2 + 96) = v22;
  v20 = a1;
  sub_1AC6916CC(a2 + 104, &qword_1ED0BD568);
  return sub_1AC68AAA4(v23, a2 + 104);
}

JetUI::_LayoutAlignment __swiftcall Constrain._layoutAlignment(with:)(UITraitCollection with)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  JetUI::_LayoutAlignment v8;
  __int128 v9[2];
  uint64_t v10;
  _BYTE v11[40];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = v1;
  sub_1AC68E218(v3, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v9, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(Class, uint64_t, uint64_t))(v7 + 8))(with.super.isa, v6, v7);
    return (JetUI::_LayoutAlignment)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v8 = (JetUI::_LayoutAlignment)sub_1AC6916CC((uint64_t)v9, &qword_1ED0BD540);
    *v5 = 0;
  }
  return v8;
}

uint64_t sub_1AC6A4FC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  char v22;
  __int128 v23[2];

  v13 = *(_QWORD *)(v6 + 40);
  v14 = *(_BYTE *)(v6 + 48);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = *(_BYTE *)(v6 + 64);
  v17 = *(_QWORD *)(v6 + 72);
  v18 = *(_BYTE *)(v6 + 80);
  v19 = *(_QWORD *)(v6 + 88);
  v22 = *(_BYTE *)(v6 + 96);
  sub_1AC68E218(v6, (uint64_t)v23);
  *(_OWORD *)(a2 + 120) = 0u;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = v13;
  *(_BYTE *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v19;
  *(_BYTE *)(a2 + 96) = v22;
  v20 = a1;
  sub_1AC6916CC(a2 + 104, &qword_1ED0BD568);
  return sub_1AC68AAA4(v23, a2 + 104);
}

BOOL sub_1AC6A50C0()
{
  uint64_t v0;

  return *(double *)(v0 + 16) < *(double *)(v0 + 24);
}

unint64_t sub_1AC6A50D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6A50F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6A50F4()
{
  unint64_t result;

  result = qword_1EEC8A800;
  if (!qword_1EEC8A800)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Constrain.Placements, &type metadata for Constrain.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8A800);
  }
  return result;
}

unint64_t sub_1AC6A513C()
{
  unint64_t result;

  result = qword_1EEC8A808;
  if (!qword_1EEC8A808)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Constrain.Placements, &type metadata for Constrain.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8A808);
  }
  return result;
}

unint64_t sub_1AC6A5184()
{
  unint64_t result;

  result = qword_1EEC8A810;
  if (!qword_1EEC8A810)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Constrain.Placements, &type metadata for Constrain.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8A810);
  }
  return result;
}

uint64_t initializeWithCopy for Constrain(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  return a1;
}

uint64_t assignWithCopy for Constrain(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Constrain(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for Constrain(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Constrain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Constrain()
{
  return &type metadata for Constrain;
}

void destroy for Constrain.Placements(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 128))
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
}

uint64_t initializeWithCopy for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  __int128 v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  v6 = a1 + 104;
  v7 = a2 + 104;
  v8 = *(_QWORD *)(a2 + 128);
  v9 = v5;
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 136) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v6, v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v11;
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 128) = v11;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 104, a2 + 104);
      return a1;
    }
LABEL_7:
    v12 = *(_OWORD *)(a2 + 104);
    v13 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v12;
    *(_OWORD *)(a1 + 120) = v13;
    return a1;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for Constrain.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 128))
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for Constrain.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Constrain.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Constrain.Placements()
{
  return &type metadata for Constrain.Placements;
}

BOOL sub_1AC6A5764(void *a1)
{
  id v1;
  BOOL v2;

  v1 = a1;
  v2 = UIView.hasContent.getter();

  return v2;
}

BOOL UIView.hasContent.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  objc_msgSend(v0, sel_sizeThatFits_, *MEMORY[0x1E0DC5000], *(double *)(MEMORY[0x1E0DC5000] + 8));
  return (v2 & 0x7FFFFFFFFFFFFFFFLL) != 0 && (v1 & 0x7FFFFFFFFFFFFFFFLL) != 0;
}

id sub_1AC6A57D8(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id UIView.focusedFrame.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_frame);
}

void (*sub_1AC6A57F4(_QWORD *a1))(double **a1)
{
  void **v1;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *v1;
  v3[4] = *v1;
  objc_msgSend(v4, sel_frame);
  *v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  return sub_1AC6A5850;
}

void sub_1AC6A5850(double **a1)
{
  double *v1;

  v1 = *a1;
  objc_msgSend(*((id *)*a1 + 4), sel_setFrame_, *v1, v1[1], v1[2], v1[3]);
  free(v1);
}

id (*sub_1AC6A5888(uint64_t a1))(uint64_t a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v3, sel_isHidden);
  return sub_1AC6A58C8;
}

id sub_1AC6A58C8(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setHidden_, *(unsigned __int8 *)(a1 + 8));
}

id sub_1AC6A58E0(uint64_t a1, uint64_t a2)
{
  return sub_1AC689E24(a1, a2, (SEL *)&selRef_jet_focusedFrame);
}

double AnyDimension.bottomMargin(from:with:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  return AnyDimension.value(with:)(a1, a2, a3) - a7;
}

double EstimatedMeasurable<>.measurements(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(a2, v10);
  v15 = (*(double (**)(char *, uint64_t, uint64_t, uint64_t, double, double))(a3 + 16))(v14, a1, a2, a3, a4, a5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v15;
}

uint64_t static EstimatedMeasurable.estimatedSize(fitting:using:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static EstimatedMeasurable.estimatedMeasurements(fitting:using:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

double static AspectRatio.square.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  swift_beginAccess();
  result = *(double *)&xmmword_1EEC8A818;
  *a1 = xmmword_1EEC8A818;
  return result;
}

uint64_t static AspectRatio.square.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  result = swift_beginAccess();
  *(_QWORD *)&xmmword_1EEC8A818 = v1;
  *((_QWORD *)&xmmword_1EEC8A818 + 1) = v2;
  return result;
}

uint64_t (*static AspectRatio.square.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

double AspectRatio.horizontal.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void AspectRatio.horizontal.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*AspectRatio.horizontal.modify())()
{
  return nullsub_1;
}

double AspectRatio.vertical.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void AspectRatio.vertical.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*AspectRatio.vertical.modify())()
{
  return nullsub_1;
}

double AspectRatio.verticalFraction.getter()
{
  double *v0;
  double result;

  result = 0.0;
  if (*v0 != 0.0)
    return v0[1] / *v0;
  return result;
}

BOOL AspectRatio.isSquare.getter()
{
  double *v0;

  return *v0 == v0[1];
}

double AspectRatio.width(fromHeight:)(double a1)
{
  double *v1;
  double v2;
  double v3;

  v2 = v1[1];
  v3 = *v1 / v2;
  if (v2 == 0.0)
    v3 = 0.0;
  return v3 * a1;
}

BOOL static AspectRatio.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t AspectRatio.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A828);
  v3 = swift_allocObject();
  v4 = MEMORY[0x1E0DEB070];
  *(_OWORD *)(v3 + 16) = xmmword_1AC729820;
  v5 = MEMORY[0x1E0DEB100];
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 96) = v4;
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 72) = v2;
  return sub_1AC726244();
}

uint64_t sub_1AC6A5C1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A828);
  v3 = swift_allocObject();
  v4 = MEMORY[0x1E0DEB070];
  *(_OWORD *)(v3 + 16) = xmmword_1AC729820;
  v5 = MEMORY[0x1E0DEB100];
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 96) = v4;
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 72) = v2;
  return sub_1AC726244();
}

double LayoutRect.measurements.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double sub_1AC6A5C9C()
{
  double result;

  result = 0.0;
  xmmword_1EEC8A840 = 0u;
  xmmword_1EEC8A850 = 0u;
  xmmword_1EEC8A830 = 0u;
  return result;
}

double static LayoutRect.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;

  if (qword_1EEC89658 != -1)
    swift_once();
  v2 = xmmword_1EEC8A840;
  *a1 = xmmword_1EEC8A830;
  a1[1] = v2;
  result = *(double *)&xmmword_1EEC8A850;
  a1[2] = xmmword_1EEC8A850;
  return result;
}

void LayoutRect.init(representing:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  CGFloat Height;

  Height = CGRectGetHeight(*(CGRect *)&a2);
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(CGFloat *)(a1 + 32) = Height;
  *(_QWORD *)(a1 + 40) = 0;
}

void _s5JetUI10LayoutRectV6origin12measurementsACSo7CGPointV_So14JUMeasurementsVtcfC_0(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

double LayoutRect.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void LayoutRect.origin.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*LayoutRect.origin.modify())()
{
  return nullsub_1;
}

void LayoutRect.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*LayoutRect.size.modify())()
{
  return nullsub_1;
}

__n128 LayoutRect.baselines.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*LayoutRect.baselines.modify())()
{
  return nullsub_1;
}

double LayoutRect.minX.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double LayoutRect.minY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double LayoutRect.midX.getter()
{
  double *v0;

  return *v0 + v0[2] * 0.5;
}

double LayoutRect.midY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8) + *(double *)(v0 + 24) * 0.5;
}

double LayoutRect.maxX.getter()
{
  double *v0;

  return *v0 + v0[2];
}

double LayoutRect.maxY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8) + *(double *)(v0 + 24);
}

double LayoutRect.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double LayoutRect.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double LayoutRect.firstBaseline.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double LayoutRect.firstBaselineFromTop.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8) + *(double *)(v0 + 32);
}

double LayoutRect.lastBaseline.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double LayoutRect.lastBaselineFromBottom.getter()
{
  double *v0;

  return v0[1] + v0[3] - v0[5];
}

double LayoutRect.cgRect.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

BOOL _s5JetUI10LayoutRectV2eeoiySbAC_ACtFZ_0(float64x2_t *a1, float64x2_t *a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) == 0)return 0;
  if (a1[2].f64[1] == a2[2].f64[1])
    return a1[2].f64[0] == a2[2].f64[0];
  return 0;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LayoutRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

uint64_t CollectionContentReloadTriggerPublisher._subscribeContent<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v6 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedConformanceWitness();
  CollectionContent.observeReloadTriggers<A>(_:)(v3, AssociatedTypeWitness, AssociatedConformanceWitness, v6, v7);
  return swift_unknownObjectRelease();
}

uint64_t dispatch thunk of _AnyCollectionContentReloadTriggerPublisher._subscribeContent<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of CollectionContentReloadTriggerPublisher.onContentReloadTrigger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

__n128 AppStore.HorizontalPairLayout.init(leadingView:trailingView:priorityView:alignmentSpace:interViewSpacing:)@<Q0>(__int128 *a1@<X0>, __int128 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X8>)
{
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  _OWORD v17[2];
  _OWORD v18[3];
  _OWORD v19[3];
  _OWORD v20[2];
  uint64_t v21;

  v10 = *a3;
  sub_1AC68AAA4(a1, (uint64_t)v17);
  sub_1AC68AAA4(a2, (uint64_t)v18 + 8);
  LOBYTE(v19[0]) = v10;
  sub_1AC6A6160(a4, (uint64_t)v19 + 8);
  sub_1AC68AAA4(a5, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
  v11 = swift_allocObject();
  v12 = v20[1];
  *(_OWORD *)(v11 + 144) = v20[0];
  *(_OWORD *)(v11 + 160) = v12;
  *(_QWORD *)(v11 + 176) = v21;
  v13 = v19[0];
  *(_OWORD *)(v11 + 80) = v18[2];
  *(_OWORD *)(v11 + 96) = v13;
  v14 = v19[2];
  *(_OWORD *)(v11 + 112) = v19[1];
  *(_OWORD *)(v11 + 128) = v14;
  v15 = v17[1];
  *(_OWORD *)(v11 + 16) = v17[0];
  *(_OWORD *)(v11 + 32) = v15;
  result = (__n128)v18[1];
  *(_OWORD *)(v11 + 48) = v18[0];
  *(__n128 *)(v11 + 64) = result;
  *a6 = v11;
  return result;
}

uint64_t sub_1AC6A6160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.HorizontalPairLayout.leadingView.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t AppStore.HorizontalPairLayout.leadingView.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[10];
  uint64_t v13;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6A6308(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6A633C((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
    v5 = swift_allocObject();
    v6 = v12[9];
    *(_OWORD *)(v5 + 144) = v12[8];
    *(_OWORD *)(v5 + 160) = v6;
    *(_QWORD *)(v5 + 176) = v13;
    v7 = v12[5];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    v8 = v12[7];
    *(_OWORD *)(v5 + 112) = v12[6];
    *(_OWORD *)(v5 + 128) = v8;
    v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AC6A6308(uint64_t a1, uint64_t a2)
{
  _s20HorizontalPairLayoutV7StorageVwcp(a2, a1);
  return a2;
}

uint64_t sub_1AC6A633C(uint64_t a1, uint64_t a2)
{
  _s20HorizontalPairLayoutV7StorageVwta(a2, a1);
  return a2;
}

void (*AppStore.HorizontalPairLayout.leadingView.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v3);
  return sub_1AC6A63DC;
}

void sub_1AC6A63DC(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.HorizontalPairLayout.leadingView.setter);
}

uint64_t AppStore.HorizontalPairLayout.trailingView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 56, a1);
}

uint64_t AppStore.HorizontalPairLayout.trailingView.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  _OWORD v13[8];
  uint64_t v14;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6A6308(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v13 + 1, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6A633C((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
    v5 = swift_allocObject();
    v6 = v13[7];
    *(_OWORD *)(v5 + 144) = v13[6];
    *(_OWORD *)(v5 + 160) = v6;
    *(_QWORD *)(v5 + 176) = v14;
    v7 = v13[3];
    *(_OWORD *)(v5 + 80) = v13[2];
    *(_OWORD *)(v5 + 96) = v7;
    v8 = v13[5];
    *(_OWORD *)(v5 + 112) = v13[4];
    *(_OWORD *)(v5 + 128) = v8;
    v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    v10 = v13[1];
    *(_OWORD *)(v5 + 48) = v13[0];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.HorizontalPairLayout.trailingView.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 56, (uint64_t)v3);
  return sub_1AC6A65B8;
}

void sub_1AC6A65B8(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.HorizontalPairLayout.trailingView.setter);
}

void sub_1AC6A65C4(uint64_t *a1, char a2, void (*a3)(char *))
{
  char *v4;

  v4 = (char *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_1AC68E218(*a1, (uint64_t)(v4 + 40));
    a3(v4 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    a3((char *)*a1);
  }
  free(v4);
}

BOOL static AppStore.HorizontalPairLayout.Edge.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AppStore.HorizontalPairLayout.Edge.hash(into:)()
{
  return sub_1AC726B08();
}

uint64_t AppStore.HorizontalPairLayout.Edge.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

BOOL sub_1AC6A66AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AppStore.HorizontalPairLayout.priorityView.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v3 + 96);
  return result;
}

uint64_t AppStore.HorizontalPairLayout.priorityView.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = *a1;
  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6A6308(v3, (uint64_t)v12);
  LOBYTE(v13) = v2;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6A633C((uint64_t)v12, v4);
    return swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
    v6 = swift_allocObject();
    v7 = v17;
    *(_OWORD *)(v6 + 144) = v16;
    *(_OWORD *)(v6 + 160) = v7;
    *(_QWORD *)(v6 + 176) = v18;
    v8 = v13;
    *(_OWORD *)(v6 + 80) = v12[4];
    *(_OWORD *)(v6 + 96) = v8;
    v9 = v15;
    *(_OWORD *)(v6 + 112) = v14;
    *(_OWORD *)(v6 + 128) = v9;
    v10 = v12[1];
    *(_OWORD *)(v6 + 16) = v12[0];
    *(_OWORD *)(v6 + 32) = v10;
    v11 = v12[3];
    *(_OWORD *)(v6 + 48) = v12[2];
    *(_OWORD *)(v6 + 64) = v11;
    result = swift_release();
    *v1 = v6;
  }
  return result;
}

void (*AppStore.HorizontalPairLayout.priorityView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x100uLL);
  *a1 = v3;
  v3[30] = v1;
  v4 = *v1;
  swift_beginAccess();
  *((_BYTE *)v3 + 248) = *(_BYTE *)(v4 + 96);
  return sub_1AC6A6870;
}

void sub_1AC6A6870(uint64_t a1, char a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = *(_BYTE **)a1;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 248);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 240) + 16;
  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    sub_1AC6A6308(v4, (uint64_t)v2);
    v2[80] = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = (uint64_t *)*((_QWORD *)v2 + 30);
    if (isUniquelyReferenced_nonNull_native)
    {
      v7 = *v6 + 16;
      swift_beginAccess();
      sub_1AC6A633C((uint64_t)v2, v7);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
      v11 = swift_allocObject();
      v13 = *((_OWORD *)v2 + 1);
      v12 = *((_OWORD *)v2 + 2);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = v12;
      v14 = *((_OWORD *)v2 + 6);
      v16 = *((_OWORD *)v2 + 3);
      v15 = *((_OWORD *)v2 + 4);
      *(_OWORD *)(v11 + 96) = *((_OWORD *)v2 + 5);
      *(_OWORD *)(v11 + 112) = v14;
      *(_OWORD *)(v11 + 64) = v16;
      *(_OWORD *)(v11 + 80) = v15;
      v18 = *((_OWORD *)v2 + 8);
      v17 = *((_OWORD *)v2 + 9);
      v19 = *((_OWORD *)v2 + 7);
      *(_QWORD *)(v11 + 176) = *((_QWORD *)v2 + 20);
      *(_OWORD *)(v11 + 144) = v18;
      *(_OWORD *)(v11 + 160) = v17;
      *(_OWORD *)(v11 + 128) = v19;
      swift_release();
      *v6 = v11;
    }
  }
  else
  {
    swift_beginAccess();
    sub_1AC6A6308(v4, (uint64_t)v2);
    v2[80] = v3;
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = (uint64_t *)*((_QWORD *)v2 + 30);
    if (v8)
    {
      v10 = *v9 + 16;
      swift_beginAccess();
      sub_1AC6A633C((uint64_t)v2, v10);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
      v20 = swift_allocObject();
      v22 = *((_OWORD *)v2 + 1);
      v21 = *((_OWORD *)v2 + 2);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = v21;
      v23 = *((_OWORD *)v2 + 6);
      v25 = *((_OWORD *)v2 + 3);
      v24 = *((_OWORD *)v2 + 4);
      *(_OWORD *)(v20 + 96) = *((_OWORD *)v2 + 5);
      *(_OWORD *)(v20 + 112) = v23;
      *(_OWORD *)(v20 + 64) = v25;
      *(_OWORD *)(v20 + 80) = v24;
      v27 = *((_OWORD *)v2 + 8);
      v26 = *((_OWORD *)v2 + 9);
      v28 = *((_OWORD *)v2 + 7);
      *(_QWORD *)(v20 + 176) = *((_QWORD *)v2 + 20);
      *(_OWORD *)(v20 + 144) = v27;
      *(_OWORD *)(v20 + 160) = v26;
      *(_OWORD *)(v20 + 128) = v28;
      swift_release();
      *v9 = v20;
    }
  }
  free(v2);
}

uint64_t AppStore.HorizontalPairLayout.alignmentSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC6A6A94(v3 + 104, a1);
}

uint64_t sub_1AC6A6A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.HorizontalPairLayout.alignmentSpace.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[5];
  _OWORD v13[5];
  uint64_t v14;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6A6308(v3, (uint64_t)v12);
  sub_1AC6A6BFC(a1, (uint64_t)v13 + 8);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6A633C((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
    v5 = swift_allocObject();
    v6 = v13[4];
    *(_OWORD *)(v5 + 144) = v13[3];
    *(_OWORD *)(v5 + 160) = v6;
    *(_QWORD *)(v5 + 176) = v14;
    v7 = v13[0];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    v8 = v13[2];
    *(_OWORD *)(v5 + 112) = v13[1];
    *(_OWORD *)(v5 + 128) = v8;
    v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *v1 = v5;
  }
  return sub_1AC6A6C44(a1);
}

uint64_t sub_1AC6A6BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6A6C44(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE228);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*AppStore.HorizontalPairLayout.alignmentSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC6A6A94(v4 + 104, (uint64_t)v3);
  return sub_1AC6A6CEC;
}

void sub_1AC6A6CEC(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_1AC6A6A94(*a1, (uint64_t)v2 + 40);
    AppStore.HorizontalPairLayout.alignmentSpace.setter((uint64_t)v2 + 40);
    sub_1AC6A6C44((uint64_t)v2);
  }
  else
  {
    AppStore.HorizontalPairLayout.alignmentSpace.setter(*a1);
  }
  free(v2);
}

uint64_t AppStore.HorizontalPairLayout.interViewSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 144, a1);
}

uint64_t AppStore.HorizontalPairLayout.interViewSpacing.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[8];
  _OWORD v13[2];
  uint64_t v14;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6A6308(v3, (uint64_t)v12);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v13, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6A633C((uint64_t)v12, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC89648);
    v5 = swift_allocObject();
    v6 = v13[1];
    *(_OWORD *)(v5 + 144) = v13[0];
    *(_OWORD *)(v5 + 160) = v6;
    *(_QWORD *)(v5 + 176) = v14;
    v7 = v12[5];
    *(_OWORD *)(v5 + 80) = v12[4];
    *(_OWORD *)(v5 + 96) = v7;
    v8 = v12[7];
    *(_OWORD *)(v5 + 112) = v12[6];
    *(_OWORD *)(v5 + 128) = v8;
    v9 = v12[1];
    *(_OWORD *)(v5 + 16) = v12[0];
    *(_OWORD *)(v5 + 32) = v9;
    v10 = v12[3];
    *(_OWORD *)(v5 + 48) = v12[2];
    *(_OWORD *)(v5 + 64) = v10;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.HorizontalPairLayout.interViewSpacing.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 144, (uint64_t)v3);
  return sub_1AC6A6F1C;
}

void sub_1AC6A6F1C(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.HorizontalPairLayout.interViewSpacing.setter);
}

double sub_1AC6A6F28@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double MinY;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double MinX;
  uint64_t v29;
  uint64_t v30;
  double result;
  double v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v15 = *v7;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v18 = (*(double (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(v17 + 8) + 8))(a2, v16, a6, a7);
  v20 = v19;
  v32 = v21;
  v23 = v22;
  swift_beginAccess();
  sub_1AC6A6A94(v15 + 104, (uint64_t)&v33);
  if (v34)
  {
    sub_1AC68AAA4(&v33, (uint64_t)v35);
    v38.origin.x = a4;
    v38.origin.y = a5;
    v38.size.width = a6;
    v38.size.height = a7;
    MinY = CGRectGetMinY(v38);
    v25 = v36;
    v26 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    v27 = MinY + AnyDimension.topMargin(from:in:)(a2, v25, v26, v18, v20, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    sub_1AC6A6C44((uint64_t)&v33);
    v39.origin.x = a4;
    v39.origin.y = a5;
    v39.size.width = a6;
    v39.size.height = a7;
    v27 = CGRectGetMinY(v39);
  }
  v40.origin.x = a4;
  v40.origin.y = a5;
  v40.size.width = a6;
  v40.size.height = a7;
  MinX = CGRectGetMinX(v40);
  v29 = a1[3];
  v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v30 + 24))(v29, v30, MinX, v27, v18, v20);
  *(double *)a3 = MinX;
  *(double *)(a3 + 8) = v27;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v20;
  result = v32;
  *(double *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v23;
  return result;
}

double sub_1AC6A70EC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double MinY;
  uint64_t v25;
  uint64_t v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  double v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v15 = *v7;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v18 = (*(double (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(v17 + 8) + 8))(a2, v16, a6, a7);
  v20 = v19;
  v32 = v21;
  v23 = v22;
  swift_beginAccess();
  sub_1AC6A6A94(v15 + 104, (uint64_t)&v33);
  if (v34)
  {
    sub_1AC68AAA4(&v33, (uint64_t)v35);
    v38.origin.x = a4;
    v38.origin.y = a5;
    v38.size.width = a6;
    v38.size.height = a7;
    MinY = CGRectGetMinY(v38);
    v25 = v36;
    v26 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    v27 = MinY + AnyDimension.topMargin(from:in:)(a2, v25, v26, v18, v20, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    sub_1AC6A6C44((uint64_t)&v33);
    v39.origin.x = a4;
    v39.origin.y = a5;
    v39.size.width = a6;
    v39.size.height = a7;
    v27 = CGRectGetMinY(v39);
  }
  v40.origin.x = a4;
  v40.origin.y = a5;
  v40.size.width = a6;
  v40.size.height = a7;
  v28 = CGRectGetMaxX(v40) - v18;
  v29 = a1[3];
  v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  (*(void (**)(uint64_t, uint64_t, CGFloat, double, double, double))(v30 + 24))(v29, v30, v28, v27, v18, v20);
  *(CGFloat *)a3 = v28;
  *(double *)(a3 + 8) = v27;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v20;
  result = v32;
  *(double *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v23;
  return result;
}

uint64_t AppStore.HorizontalPairLayout.placeChildren(relativeTo:in:)@<X0>(void *a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  CGFloat v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  double v28;
  double MinX;
  double MaxX;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  CGFloat v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  CGFloat v49;
  CGFloat MinY;
  CGFloat v51;
  double v52;
  double v53;
  double v54;
  CGFloat v55;
  CGFloat v56;
  double v57;
  double v58;
  double *v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat Width;
  double v67;
  CGFloat v68;
  double v69;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  CGFloat v78;
  CGFloat v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v79 = a5;
  v12 = sub_1AC726A48();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v6;
  v17 = objc_msgSend(a1, sel_traitCollection);
  v18 = objc_msgSend(v17, sel_layoutDirection);

  v78 = a3;
  if (v18 == (id)1)
  {
    swift_beginAccess();
    sub_1AC68E218(v16 + 56, (uint64_t)v90);
    sub_1AC68E218(v16 + 16, (uint64_t)v87);
    swift_beginAccess();
    if ((*(_BYTE *)(v16 + 96) & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    swift_beginAccess();
    sub_1AC68E218(v16 + 16, (uint64_t)v90);
    sub_1AC68E218(v16 + 56, (uint64_t)v87);
    swift_beginAccess();
    if ((*(_BYTE *)(v16 + 96) & 1) != 0)
    {
LABEL_3:
      v80 = v16;
      v19 = v79;
      sub_1AC6A70EC(v87, (uint64_t)a1, (uint64_t)&v81, a3, a4, v79, a6);
      v77 = v82;
      v20 = v83;
      v75 = v84;
      v73 = v85;
      v21 = v86;
      sub_1AC68E218(v16 + 144, (uint64_t)&v81);
      v22 = *(_QWORD *)&v84;
      v23 = *(_QWORD *)&v85;
      __swift_project_boxed_opaque_existential_1(&v81, *(uint64_t *)&v84);
      sub_1AC68E57C((uint64_t)v15);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v22, v23);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
      v95.origin.x = v78;
      v95.origin.y = a4;
      v95.size.width = v19;
      v95.size.height = a6;
      v26 = CGRectGetWidth(v95) - (v20 + v25);
      v27 = v78;
      v28 = floor(v26);
      v96.origin.x = v78;
      v96.origin.y = a4;
      v96.size.width = v28;
      v96.size.height = a6;
      MinX = CGRectGetMinX(v96);
      v97.origin.x = v27;
      v97.origin.y = a4;
      v97.size.width = v19;
      v97.size.height = a6;
      if (CGRectGetMinX(v97) > MinX)
        goto LABEL_5;
      v98.origin.x = v27;
      v98.origin.y = a4;
      v98.size.width = v28;
      v98.size.height = a6;
      MaxX = CGRectGetMaxX(v98);
      v99.origin.x = v27;
      v99.origin.y = a4;
      v99.size.width = v79;
      v99.size.height = a6;
      if (MaxX <= CGRectGetMaxX(v99))
      {
        v80 = v16;
        sub_1AC6A6F28(v90, (uint64_t)a1, (uint64_t)&v81, v27, a4, v28, a6);
        v31 = v82;
        v76 = v84;
        v74 = v85;
        v32 = v86;
      }
      else
      {
LABEL_5:
        if (qword_1EEC89658 != -1)
          swift_once();
        v31 = *((double *)&xmmword_1EEC8A830 + 1);
        v76 = *((double *)&xmmword_1EEC8A840 + 1);
        v32 = *((double *)&xmmword_1EEC8A850 + 1);
        v74 = *(double *)&xmmword_1EEC8A850;
        v33 = v91;
        v34 = v92;
        __swift_project_boxed_opaque_existential_1(v90, v91);
        (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v34 + 24))(v33, v34, 0.0, 0.0, 0.0, 0.0);
      }
      v46 = v77;
      goto LABEL_18;
    }
  }
  v80 = v16;
  v35 = v79;
  sub_1AC6A6F28(v90, (uint64_t)a1, (uint64_t)&v81, a3, a4, v79, a6);
  v77 = v82;
  v36 = v83;
  v76 = v84;
  v74 = v85;
  v32 = v86;
  sub_1AC68E218(v16 + 144, (uint64_t)&v81);
  v37 = *(_QWORD *)&v84;
  v38 = *(_QWORD *)&v85;
  __swift_project_boxed_opaque_existential_1(&v81, *(uint64_t *)&v84);
  sub_1AC68E57C((uint64_t)v15);
  AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v15, v37, v38);
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
  v41 = v36 + v40 + v78;
  v27 = v78;
  v42 = ceil(v41);
  v100.origin.x = v78;
  v100.origin.y = a4;
  v100.size.width = v35;
  v100.size.height = a6;
  v43 = floor(CGRectGetMaxX(v100) - v42);
  v101.origin.x = v42;
  v101.origin.y = a4;
  v101.size.width = v43;
  v101.size.height = a6;
  v44 = CGRectGetMinX(v101);
  v102.origin.x = v27;
  v102.origin.y = a4;
  v102.size.width = v35;
  v102.size.height = a6;
  if (CGRectGetMinX(v102) > v44)
    goto LABEL_11;
  v103.origin.x = v42;
  v103.origin.y = a4;
  v103.size.width = v43;
  v103.size.height = a6;
  v45 = CGRectGetMaxX(v103);
  v104.origin.x = v27;
  v104.origin.y = a4;
  v104.size.width = v79;
  v104.size.height = a6;
  if (v45 <= CGRectGetMaxX(v104))
  {
    v80 = v16;
    sub_1AC6A70EC(v87, (uint64_t)a1, (uint64_t)&v81, v42, a4, v43, a6);
    v46 = v82;
    v75 = v84;
    v73 = v85;
    v21 = v86;
  }
  else
  {
LABEL_11:
    if (qword_1EEC89658 != -1)
      swift_once();
    v46 = *((double *)&xmmword_1EEC8A830 + 1);
    v75 = *((double *)&xmmword_1EEC8A840 + 1);
    v21 = *((double *)&xmmword_1EEC8A850 + 1);
    v73 = *(double *)&xmmword_1EEC8A850;
    v47 = v88;
    v48 = v89;
    __swift_project_boxed_opaque_existential_1(v87, v88);
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v48 + 24))(v47, v48, 0.0, 0.0, 0.0, 0.0);
  }
  v31 = v77;
LABEL_18:
  v105.origin.x = v27;
  v105.origin.y = a4;
  v49 = v79;
  v105.size.width = v79;
  v105.size.height = a6;
  MinY = CGRectGetMinY(v105);
  v51 = v27;
  v52 = v31 - MinY;
  v106.origin.x = v51;
  v106.origin.y = a4;
  v106.size.width = v49;
  v106.size.height = a6;
  v53 = v46 - CGRectGetMinY(v106);
  if (v52 > v53)
    v53 = v52;
  v77 = v46;
  if (v53 <= 0.0)
  {
    v55 = a4;
    if (v32 > v21)
      v60 = v32;
    else
      v60 = v21;
    v72 = v60;
    v54 = v31;
    v56 = a6;
    if (v74 <= v73)
      v58 = v73 + 0.0;
    else
      v58 = v74 + 0.0;
    v59 = (double *)&v94;
  }
  else
  {
    v54 = v31;
    v55 = a4;
    v56 = a6;
    v57 = v74;
    if (v74 <= v73)
      v57 = v73;
    v74 = v57 + v53;
    if (v32 <= v21)
      v58 = v21;
    else
      v58 = v32;
    v59 = (double *)&v93;
  }
  *(v59 - 32) = v58;
  v61 = v78;
  v107.origin.x = v78;
  v62 = v55;
  v107.origin.y = v55;
  v63 = v79;
  v107.size.width = v79;
  v107.size.height = v56;
  v64 = CGRectGetMinX(v107);
  v108.origin.x = v61;
  v108.origin.y = v62;
  v108.size.width = v63;
  v108.size.height = v56;
  v65 = CGRectGetMinY(v108);
  v109.origin.x = v61;
  v109.origin.y = v62;
  v109.size.width = v63;
  v109.size.height = v56;
  Width = CGRectGetWidth(v109);
  if (v54 + v76 > v77 + v75)
    v67 = v54 + v76;
  else
    v67 = v77 + v75;
  v110.origin.x = v61;
  v110.origin.y = v62;
  v110.size.width = v63;
  v110.size.height = v56;
  v68 = CGRectGetMinY(v110);
  *a2 = v64;
  a2[1] = v65;
  a2[2] = Width;
  a2[3] = v67 - v68;
  v69 = v72;
  a2[4] = v74;
  a2[5] = v69;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
}

unint64_t sub_1AC6A7AB0()
{
  unint64_t result;

  result = qword_1EEC8A860;
  if (!qword_1EEC8A860)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for AppStore.HorizontalPairLayout.Edge, &type metadata for AppStore.HorizontalPairLayout.Edge);
    atomic_store(result, (unint64_t *)&qword_1EEC8A860);
  }
  return result;
}

uint64_t sub_1AC6A7AF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a2);
}

uint64_t sub_1AC6A7B40(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.leadingView.setter(v2);
}

uint64_t sub_1AC6A7B74@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 56, a2);
}

uint64_t sub_1AC6A7BBC(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.trailingView.setter(v2);
}

uint64_t sub_1AC6A7BF0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 96);
  return result;
}

uint64_t sub_1AC6A7C34(char *a1)
{
  char v2;

  v2 = *a1;
  return AppStore.HorizontalPairLayout.priorityView.setter(&v2);
}

uint64_t sub_1AC6A7C68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  return sub_1AC6A6A94(v3 + 104, a2);
}

uint64_t sub_1AC6A7CB0(uint64_t a1)
{
  _BYTE v2[40];

  sub_1AC6A6A94(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.alignmentSpace.setter((uint64_t)v2);
}

uint64_t sub_1AC6A7CE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 144, a2);
}

uint64_t sub_1AC6A7D2C(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.HorizontalPairLayout.interViewSpacing.setter(v2);
}

ValueMetadata *type metadata accessor for AppStore.HorizontalPairLayout()
{
  return &type metadata for AppStore.HorizontalPairLayout;
}

uint64_t _s20HorizontalPairLayoutV4EdgeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20HorizontalPairLayoutV4EdgeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6A7E4C + 4 * byte_1AC729985[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6A7E80 + 4 * asc_1AC729980[v4]))();
}

uint64_t sub_1AC6A7E80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6A7E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6A7E90);
  return result;
}

uint64_t sub_1AC6A7E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6A7EA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6A7EA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6A7EB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppStore.HorizontalPairLayout.Edge()
{
  return &type metadata for AppStore.HorizontalPairLayout.Edge;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwxx(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 128);
}

uint64_t _s20HorizontalPairLayoutV7StorageVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = (_OWORD *)(a1 + 88);
  v7 = (_OWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 112);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v8;
    *(_QWORD *)(a1 + 120) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *v6 = *v7;
    *(_OWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  }
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 128, a2 + 128);
  return a1;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 112) = v4;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 88, a2 + 88);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 88) = v5;
    *(_OWORD *)(a1 + 104) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
LABEL_8:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t _s20HorizontalPairLayoutV7StorageVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s20HorizontalPairLayoutV7StorageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s20HorizontalPairLayoutV7StorageVMa()
{
  return &_s20HorizontalPairLayoutV7StorageVN;
}

uint64_t static Center.Axis.neither.getter()
{
  return 0;
}

uint64_t static Center.Axis.horizontal.getter()
{
  return 1;
}

uint64_t static Center.Axis.both.getter()
{
  return 3;
}

_QWORD *sub_1AC6A8240@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1AC6A8254@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1AC6A8268@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1AC6A8294@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1AC6A82B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1AC6A82CC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1AC6A82E0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1AC6A82F4()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1AC6A8304(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1AC6A8318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AC69C170();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t Center.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  CGFloat v5;
  CGFloat v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  __int128 v20;
  double v21;
  __int128 v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  _BYTE v31[40];
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[48];
  double v38;
  CGFloat v39;
  CGFloat v40;
  double v41;
  double v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  CGRect v46;
  CGRect v47;

  sub_1AC69628C(v1, (uint64_t)&v39);
  sub_1AC695DFC((uint64_t)v44, (uint64_t)&v25);
  if (*((_QWORD *)&v26 + 1))
  {
    sub_1AC68AAA4(&v25, (uint64_t)v32);
    sub_1AC69514C((uint64_t)v44);
    memset(v44, 0, sizeof(v44));
    v45 = 0;
    v3 = v33;
    v4 = v34;
    __swift_project_boxed_opaque_existential_1(v32, v33);
    v5 = v41;
    v6 = v42;
    v7 = (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v4 + 8))(v43, v3, v4, v41, v42);
    v9 = v8;
    v23 = v10;
    v21 = v11;
    v12 = v39;
    v13 = v40;
    v46.origin.x = v39;
    v46.origin.y = v40;
    v46.size.width = v5;
    v46.size.height = v6;
    v14 = CGRectGetMidX(v46) - v7 * 0.5;
    v47.origin.x = v12;
    v47.origin.y = v13;
    v47.size.width = v5;
    v47.size.height = v6;
    v15 = CGRectGetMidY(v47) - v9 * 0.5;
    sub_1AC68E218((uint64_t)v32, (uint64_t)v31);
    sub_1AC68E218((uint64_t)v31, (uint64_t)&v25);
    *((_QWORD *)&v27 + 1) = floor(v14);
    *(_QWORD *)&v28 = floor(v15);
    *((_QWORD *)&v28 + 1) = ceil(v7);
    *(_QWORD *)&v29 = ceil(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *((_QWORD *)&v29 + 1) = floor(v23);
    v30 = floor(v21);
    *(_OWORD *)v37 = v27;
    *(_OWORD *)&v37[16] = v28;
    v35 = v25;
    v36 = v26;
    *(_OWORD *)&v37[32] = v29;
    v38 = v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    v16 = *((_QWORD *)&v36 + 1);
    result = sub_1AC694D3C((uint64_t)&v39);
    if (v16)
    {
      v22 = *(_OWORD *)&v37[24];
      v24 = *(_OWORD *)&v37[8];
      v18 = *(_QWORD *)&v37[40];
      v19 = v38;
      result = sub_1AC6929AC((uint64_t)&v35);
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 32) = v18;
      *(double *)(a1 + 40) = v19;
      return result;
    }
  }
  else
  {
    sub_1AC69514C((uint64_t)&v25);
    result = sub_1AC694D3C((uint64_t)&v39);
  }
  if (qword_1EEC89658 != -1)
    result = swift_once();
  v20 = xmmword_1EEC8A840;
  *(_OWORD *)a1 = xmmword_1EEC8A830;
  *(_OWORD *)(a1 + 16) = v20;
  *(_OWORD *)(a1 + 32) = xmmword_1EEC8A850;
  return result;
}

__n128 sub_1AC6A858C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v1 + 80);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1AC6A85B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AC70F970(v0);
  sub_1AC694D3C(v0);
  return v1;
}

uint64_t Center.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v13;
  id v14;
  __int128 v16[2];

  v13 = *(_QWORD *)(v6 + 40);
  sub_1AC68E218(v6, (uint64_t)v16);
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = v13;
  v14 = a1;
  sub_1AC69514C(a2 + 48);
  return sub_1AC68AAA4(v16, a2 + 48);
}

JetUI::_LayoutAlignment __swiftcall Center._layoutAlignment(with:)(UITraitCollection with)
{
  _WORD *v1;

  *v1 = 514;
  return (JetUI::_LayoutAlignment)with.super.isa;
}

uint64_t sub_1AC6A8688@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v13;
  id v14;
  __int128 v16[2];

  v13 = *(_QWORD *)(v6 + 40);
  sub_1AC68E218(v6, (uint64_t)v16);
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = v13;
  v14 = a1;
  sub_1AC69514C(a2 + 48);
  return sub_1AC68AAA4(v16, a2 + 48);
}

void sub_1AC6A8720(_WORD *a1@<X8>)
{
  *a1 = 514;
}

unint64_t sub_1AC6A8730()
{
  unint64_t result;

  result = qword_1EEC8A868;
  if (!qword_1EEC8A868)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Axis, &type metadata for Center.Axis);
    atomic_store(result, (unint64_t *)&qword_1EEC8A868);
  }
  return result;
}

unint64_t sub_1AC6A8778()
{
  unint64_t result;

  result = qword_1EEC8A870;
  if (!qword_1EEC8A870)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Axis, &type metadata for Center.Axis);
    atomic_store(result, (unint64_t *)&qword_1EEC8A870);
  }
  return result;
}

unint64_t sub_1AC6A87C0()
{
  unint64_t result;

  result = qword_1EEC8A878;
  if (!qword_1EEC8A878)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Axis, &type metadata for Center.Axis);
    atomic_store(result, (unint64_t *)&qword_1EEC8A878);
  }
  return result;
}

unint64_t sub_1AC6A8808()
{
  unint64_t result;

  result = qword_1EEC8A880;
  if (!qword_1EEC8A880)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Axis, &type metadata for Center.Axis);
    atomic_store(result, (unint64_t *)&qword_1EEC8A880);
  }
  return result;
}

unint64_t sub_1AC6A884C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6A8870();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6A8870()
{
  unint64_t result;

  result = qword_1EEC8A888;
  if (!qword_1EEC8A888)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Placements, &type metadata for Center.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8A888);
  }
  return result;
}

unint64_t sub_1AC6A88B8()
{
  unint64_t result;

  result = qword_1EEC8A890;
  if (!qword_1EEC8A890)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Placements, &type metadata for Center.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8A890);
  }
  return result;
}

unint64_t sub_1AC6A8900()
{
  unint64_t result;

  result = qword_1EEC8A898[0];
  if (!qword_1EEC8A898[0])
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Center.Placements, &type metadata for Center.Placements);
    atomic_store(result, qword_1EEC8A898);
  }
  return result;
}

uint64_t initializeWithCopy for Center(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for Center(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for Center(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for Center(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Center(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Center.Axis()
{
  return &type metadata for Center.Axis;
}

uint64_t assignWithCopy for Center.Placements(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 72) = v7;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Center.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for Center.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Center.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Center.Placements()
{
  return &type metadata for Center.Placements;
}

id sub_1AC6A8CA8()
{
  return static JUComponent.makeView()();
}

id static JUComponent.makeView()()
{
  swift_getAssociatedTypeWitness();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_1AC6A8D08()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t static JUComponent.reapplyTriggers(for:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1AC6A8D20()
{
  return 0;
}

uint64_t static JUComponent.reapplyDirectly(from:to:)()
{
  return 0;
}

void JUComponentConfiguration.init(contentsOf:with:asPartOf:)(unint64_t *a1@<X8>)
{
  *a1 = sub_1AC6A8E00(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for JUComponentConfiguration();
}

uint64_t sub_1AC6A8D90(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + a1[13], v4, v1);
  v7 = v5 + a1[14];
  v8 = sub_1AC725F14();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v3, v8);
  *(_QWORD *)(v5 + a1[15]) = v2;
  return result;
}

unint64_t sub_1AC6A8E00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A948);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A720);
  v6 = sub_1AC72694C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1AC6902E4(v12, (uint64_t)v5, &qword_1EEC8A948);
    result = sub_1AC6B4DF8((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1AC725E78();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)sub_1AC6900D4(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for JUComponentConfiguration()
{
  JUMPOUT(0x1AF4407B8);
}

unint64_t sub_1AC6A8FA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A920);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = sub_1AC6B4E6C((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A90B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A700);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1AC6B4E9C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A91D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A940);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1AC6B4F00(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (_QWORD *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A92F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A938);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    v8 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1AC6B4E9C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A9404(uint64_t a1)
{
  return sub_1AC68FFAC(a1, &qword_1ED0BD748, &qword_1EEC8A930, (uint64_t (*)(uint64_t))sub_1AC6B4D78);
}

unint64_t sub_1AC6A9420(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A718);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1AC6B4E9C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A9530(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A728);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    sub_1AC69FEFC(v7, v8);
    result = sub_1AC6B4E9C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A9654(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A708);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_1AC6B4F00(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (_QWORD *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AC6A977C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A928);
  v2 = (_QWORD *)sub_1AC72694C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_1AC690328();
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t JUComponentConfiguration.model.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t JUComponentConfiguration.model.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*JUComponentConfiguration.model.modify())()
{
  return nullsub_1;
}

uint64_t JUComponentConfiguration.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  v5 = sub_1AC725F14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t JUComponentConfiguration.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 56);
  v5 = sub_1AC725F14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*JUComponentConfiguration.state.modify())()
{
  return nullsub_1;
}

uint64_t JUComponentConfiguration.objectGraph.getter()
{
  return swift_retain();
}

uint64_t JUComponentConfiguration.objectGraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 60);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*JUComponentConfiguration.objectGraph.modify())()
{
  return nullsub_1;
}

uint64_t dispatch thunk of static JUComponent.makeView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static JUComponent.prepare(toReuse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static JUComponent.apply(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of static JUComponent.reapplyTriggers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of static JUComponent.reapplyDirectly(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t sub_1AC6A99E0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1AC6A99E8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = sub_1AC725F14();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1AC6A9A90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = *(int *)(a3 + 52);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 56);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_1AC725F14();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 60)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 60));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1AC6A9B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 52));
  v4 = a1 + *(int *)(a2 + 56);
  v5 = sub_1AC725F14();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

_QWORD *sub_1AC6A9BDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 52);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 56);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1AC725F14();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 60)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 60));
  swift_retain();
  return a1;
}

char *sub_1AC6A9C90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  v6 = *(int *)(a3 + 56);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1AC725F14();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 60)] = *(_QWORD *)&a2[*(int *)(a3 + 60)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1AC6A9D48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  v6 = *(int *)(a3 + 56);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1AC725F14();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 60)] = *(_QWORD *)&a2[*(int *)(a3 + 60)];
  return a1;
}

char *sub_1AC6A9DE0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))(&a1[*(int *)(a3 + 52)], &a2[*(int *)(a3 + 52)]);
  v6 = *(int *)(a3 + 56);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1AC725F14();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 60)] = *(_QWORD *)&a2[*(int *)(a3 + 60)];
  swift_release();
  return a1;
}

uint64_t sub_1AC6A9E88()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6A9E94(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = *(int *)(a3 + 52);
    }
    else
    {
      v8 = sub_1AC725F14();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v10], a2, v8);
  }
}

uint64_t sub_1AC6A9F30()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1AC6A9F3C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = *(_QWORD *)(v7 - 8);
    if (*(_DWORD *)(v8 + 84) == a3)
    {
      v9 = *(int *)(a4 + 52);
    }
    else
    {
      v7 = sub_1AC725F14();
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(int *)(a4 + 56);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(&v5[v9], a2, a2, v7);
  }
  return result;
}

void sub_1AC6A9FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  UIImage *v46;
  NSData *v47;
  void (*v48)(void *);
  NSData *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(void *);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  __int128 aBlock;
  __int128 v78;
  uint64_t (*v79)();
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v0 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v0);
  v73 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1AC72610C();
  v2 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v75 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v5 = objc_msgSend(v4, sel_connectedScenes);

  v6 = sub_1AC6AA874();
  sub_1AC69C1E4();
  v7 = sub_1AC7264FC();

  if ((v7 & 0xC000000000000001) != 0)
  {
    sub_1AC726790();
    sub_1AC726538();
    v7 = v81;
    v70 = v82;
    v9 = v83;
    v8 = v84;
    v10 = v85;
  }
  else
  {
    v8 = 0;
    v11 = -1 << *(_BYTE *)(v7 + 32);
    v12 = *(_QWORD *)(v7 + 56);
    v70 = v7 + 56;
    v9 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & v12;
  }
  v65 = 0;
  v64 = 0;
  v68 = v7 & 0x7FFFFFFFFFFFFFFFLL;
  v69 = (unint64_t)(v9 + 64) >> 6;
  v63 = (char *)MEMORY[0x1E0DEE9D8];
  v72 = xmmword_1AC727FC0;
  v71 = 0x80000001AC7305D0;
  v66 = MEMORY[0x1E0DEE9B0] + 8;
  v67 = v6;
  v62 = v9;
LABEL_8:
  v15 = v8;
  v16 = v10;
  while (v7 < 0)
  {
    v24 = sub_1AC7267CC();
    if (!v24)
      goto LABEL_48;
    v76 = v24;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v25 = (id)aBlock;
    swift_unknownObjectRelease();
    v8 = v15;
    v10 = v16;
    if (!v25)
      goto LABEL_48;
LABEL_32:
    if (!objc_msgSend(v25, sel_activationState))
    {
      objc_opt_self();
      v29 = swift_dynamicCastObjCClass();
      if (v29)
      {
        v30 = (void *)v29;
        v31 = v25;
        v32 = objc_msgSend(v30, sel_keyWindow);
        if (v32)
        {
          v36 = v32;
          objc_msgSend(v32, sel_bounds);
          v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithBounds_, v37, v38, v39, v40);
          v42 = swift_allocObject();
          *(_QWORD *)(v42 + 16) = v36;
          v43 = v36;
          sub_1AC68AD94((uint64_t)v65);
          v44 = swift_allocObject();
          *(_QWORD *)(v44 + 16) = sub_1AC6AA9A4;
          *(_QWORD *)(v44 + 24) = v42;
          v64 = v42;
          v79 = sub_1AC690AE8;
          v80 = v44;
          *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v78 = sub_1AC6AA94C;
          *((_QWORD *)&v78 + 1) = &block_descriptor_0;
          v45 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          v46 = (UIImage *)objc_msgSend(v41, sel_imageWithActions_, v45);

          _Block_release(v45);
          LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v45 & 1) != 0)
            goto LABEL_50;
          v47 = UIImagePNGRepresentation(v46);
          v48 = (void (*)(void *))v46;
          if (v47)
          {
            v49 = v47;
            v65 = v48;
            v60 = v43;
            v61 = v7;
            v50 = sub_1AC7258D8();
            v52 = v51;

            sub_1AC69FEFC(v50, v52);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v59 = v2;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              v63 = sub_1AC6A2990(0, *((_QWORD *)v63 + 2) + 1, 1, v63);
            v55 = *((_QWORD *)v63 + 2);
            v54 = *((_QWORD *)v63 + 3);
            if (v55 >= v54 >> 1)
              v63 = sub_1AC6A2990((char *)(v54 > 1), v55 + 1, 1, v63);
            v56 = v63;
            *((_QWORD *)v63 + 2) = v55 + 1;
            v57 = &v56[16 * v55];
            *((_QWORD *)v57 + 4) = v50;
            *((_QWORD *)v57 + 5) = v52;

            sub_1AC69FEB8(v50, v52);
            v65 = sub_1AC6AA9A4;
            v2 = v59;
            v7 = v61;
          }
          else
          {

            v65 = sub_1AC6AA9A4;
          }
          goto LABEL_8;
        }

      }
    }
    if (qword_1EEC8A210 != -1)
      swift_once();
    v33 = v74;
    v34 = __swift_project_value_buffer(v74, (uint64_t)qword_1EEC95CB8);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v75, v34, v33);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
    sub_1AC725D10();
    *(_OWORD *)(swift_allocObject() + 16) = v72;
    sub_1AC725CD4();
    sub_1AC725CC8();
    v35 = objc_msgSend(v25, sel_title);
    if (v35)
    {
      v17 = v35;
      v18 = sub_1AC72622C();
      v20 = v19;

      *((_QWORD *)&v78 + 1) = MEMORY[0x1E0DEA968];
      *(_QWORD *)&aBlock = v18;
      *((_QWORD *)&aBlock + 1) = v20;
    }
    else
    {
      aBlock = 0u;
      v78 = 0u;
    }
    sub_1AC725CA4();
    sub_1AC690CC0((uint64_t)&aBlock);
    sub_1AC725CC8();
    sub_1AC725CEC();
    v22 = v74;
    v21 = v75;
    sub_1AC72601C();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v22);
    v15 = v8;
    v16 = v10;
  }
  if (v16)
  {
    v10 = (v16 - 1) & v16;
    v23 = __clz(__rbit64(v16)) | (v15 << 6);
    v8 = v15;
LABEL_31:
    v25 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v23);
    if (!v25)
      goto LABEL_48;
    goto LABEL_32;
  }
  v26 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v26 >= v69)
      goto LABEL_48;
    v27 = *(_QWORD *)(v70 + 8 * v26);
    v8 = v15 + 1;
    if (!v27)
    {
      v8 = v15 + 2;
      if (v15 + 2 >= v69)
        goto LABEL_48;
      v27 = *(_QWORD *)(v70 + 8 * v8);
      if (!v27)
      {
        v8 = v15 + 3;
        if (v15 + 3 >= v69)
          goto LABEL_48;
        v27 = *(_QWORD *)(v70 + 8 * v8);
        if (!v27)
        {
          v8 = v15 + 4;
          if (v15 + 4 >= v69)
            goto LABEL_48;
          v27 = *(_QWORD *)(v70 + 8 * v8);
          if (!v27)
          {
            v28 = v15 + 5;
            while (v69 != v28)
            {
              v27 = *(_QWORD *)(v70 + 8 * v28++);
              if (v27)
              {
                v8 = v28 - 1;
                goto LABEL_30;
              }
            }
LABEL_48:
            sub_1AC69C23C();
            sub_1AC68AD94((uint64_t)v65);
            return;
          }
        }
      }
    }
LABEL_30:
    v10 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v8 << 6);
    goto LABEL_31;
  }
  __break(1u);
LABEL_50:
  __break(1u);
}

unint64_t sub_1AC6AA874()
{
  unint64_t result;

  result = qword_1EEC8A5D0;
  if (!qword_1EEC8A5D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8A5D0);
  }
  return result;
}

void sub_1AC6AA8B0(void *a1, id a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, sel_layer);
  v4 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v3, sel_renderInContext_, v4);

}

uint64_t sub_1AC6AA92C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1AC6AA94C(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_1AC6AA980()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1AC6AA9A4(void *a1)
{
  uint64_t v1;

  sub_1AC6AA8B0(a1, *(id *)(v1 + 16));
}

uint64_t sub_1AC6AA9AC()
{
  return swift_deallocObject();
}

void destroy for DSPNGPackager(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for DSPNGPackager(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for DSPNGPackager(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for DSPNGPackager(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for DSPNGPackager(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSPNGPackager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSPNGPackager()
{
  return &type metadata for DSPNGPackager;
}

uint64_t sub_1AC6AAB98(uint64_t a1, unint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;

  v6 = v5;
  v12 = sub_1AC72625C();
  MEMORY[0x1E0C80A78](v12);
  if (*a3 != 1)
  {
    v19 = *(_QWORD *)(v6 + 16);
    v18 = (uint64_t *)(v6 + 16);
    if (!*(_QWORD *)(v19 + 16)
      || (swift_bridgeObjectRetain(), sub_1AC6B4E9C(a4, a5), v21 = v20, swift_bridgeObjectRelease(), (v21 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      sub_1AC726250();
      v23 = sub_1AC726238();
      if (v24)
      {
        v25 = v23;
        v26 = v24;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = *v18;
        *v18 = 0x8000000000000000;
        sub_1AC69E7DC(v25, v26, a4, a5, isUniquelyReferenced_nonNull_native);
        *v18 = v28;
      }
      else
      {
        sub_1AC6AB0F4(a4, a5);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    return 0;
  }
  v13 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
  sub_1AC69FEFC(a1, a2);
  v14 = (void *)sub_1AC7258C0();
  v15 = objc_msgSend(v13, sel_initWithData_, v14);
  sub_1AC69FEB8(a1, a2);

  if (!v15)
    return 0;
  v16 = *(void **)(v6 + 24);
  v17 = sub_1AC7064F4(v16, v15);

  if (!v17)
    return 0;

  *(_QWORD *)(v6 + 24) = v17;
  return 1;
}

NSData *sub_1AC6AAD84@<X0>(uint64_t a1@<X2>, UIImage *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  NSData *result;
  NSData *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a1;
  v6 = sub_1AC7258B4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - v11;
  v13 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v14 = objc_msgSend(v13, sel_temporaryDirectory);

  sub_1AC725890();
  sub_1AC725884();
  sub_1AC725884();
  result = UIImagePNGRepresentation(a2);
  if (result)
  {
    v16 = result;
    v17 = sub_1AC7258D8();
    v19 = v18;

    sub_1AC7258E4();
    if (v3)
    {
      sub_1AC69FEB8(v17, v19);
      v20 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v20(a3, v6);
    }
    else
    {
      v24 = v7;
      sub_1AC69FEB8(v17, v19);
      sub_1AC725800();
      swift_allocObject();
      sub_1AC7257F4();
      v26 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A950);
      sub_1AC6AB098();
      v21 = sub_1AC7257E8();
      v23 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1AC7258CC();
      sub_1AC69FEB8(v21, v23);
      sub_1AC6ABA28();
      swift_bridgeObjectRelease();
      v20 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    }
    v20((uint64_t)v10, v6);
    return (NSData *)((uint64_t (*)(char *, uint64_t))v20)(v12, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSData *sub_1AC6AB04C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6AAD84(*(_QWORD *)(v1 + 16), *(UIImage **)(v1 + 24), a1);
}

uint64_t sub_1AC6AB064()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  v1 = sub_1AC6A90B0(MEMORY[0x1E0DEE9D8]);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v1;
  return result;
}

unint64_t sub_1AC6AB098()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEC8A958;
  if (!qword_1EEC8A958)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8A950);
    v2[0] = MEMORY[0x1E0DEA970];
    v2[1] = MEMORY[0x1E0DEA970];
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8A958);
  }
  return result;
}

uint64_t sub_1AC6AB0F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1AC6B4E9C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1AC69F374();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  sub_1AC6AB3CC(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1AC6AB1D8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1AC6B4DF8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1AC69F52C();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1AC725E78();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1AC6900D4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1AC6AB5A0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1AC6AB2D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1AC6B4E9C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1AC69F910();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1AC68AAA4((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v8), a3);
    sub_1AC6AB840(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

unint64_t sub_1AC6AB3CC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1AC726778();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1AC726AFC();
        swift_bridgeObjectRetain();
        sub_1AC7262A4();
        v9 = sub_1AC726B2C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1AC6AB5A0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_1AC725E78();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1AC726778();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1AC688D20(&qword_1EEC8ACC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3FC28], MEMORY[0x1E0D3FC38]);
        v18 = sub_1AC7261C0();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1AC6AB840(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1AC726778();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1AC726AFC();
        swift_bridgeObjectRetain();
        sub_1AC7262A4();
        v11 = sub_1AC726B2C();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1AC6ABA28()
{
  const __CFURL *v0;
  CGImageSource *v1;
  const __CFURL *v2;
  CGImageDestination *v3;
  uint64_t inited;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  const __CFDictionary *v11;
  _BYTE *v12;
  _BYTE *v13;

  v0 = (const __CFURL *)sub_1AC725878();
  v1 = CGImageSourceCreateWithURL(v0, 0);

  if (v1)
  {
    v2 = (const __CFURL *)sub_1AC725878();
    v3 = CGImageDestinationCreateWithURL(v2, (CFStringRef)*MEMORY[0x1E0CA5C10], 1uLL, 0);

    if (v3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A968);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1AC727FC0;
      v5 = (void *)*MEMORY[0x1E0CBCCB0];
      *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBCCB0];
      v6 = v5;
      *(_QWORD *)(inited + 40) = sub_1AC726208();
      sub_1AC6A8FA8(inited);
      v7 = swift_initStackObject();
      *(_OWORD *)(v7 + 16) = xmmword_1AC727FC0;
      v8 = (void *)*MEMORY[0x1E0CBCB50];
      *(_QWORD *)(v7 + 32) = *MEMORY[0x1E0CBCB50];
      sub_1AC6ABCAC();
      sub_1AC688D20(&qword_1EEC8A978, (uint64_t (*)(uint64_t))sub_1AC6ABCAC, MEMORY[0x1E0DEFCF8]);
      v9 = v8;
      v10 = sub_1AC726178();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 40) = v10;
      sub_1AC6A8FA8(v7);
      v11 = (const __CFDictionary *)sub_1AC726178();
      swift_bridgeObjectRelease();
      CGImageDestinationAddImageFromSource(v3, v1, 0, v11);

      CGImageDestinationFinalize(v3);
    }
    else
    {
      sub_1AC6ABC68();
      swift_allocError();
      *v13 = 0;
      swift_willThrow();

    }
  }
  else
  {
    sub_1AC6ABC68();
    swift_allocError();
    *v12 = 1;
    swift_willThrow();
  }
}

unint64_t sub_1AC6ABC68()
{
  unint64_t result;

  result = qword_1EEC8A960;
  if (!qword_1EEC8A960)
  {
    result = MEMORY[0x1AF440830](&unk_1AC729E4C, &type metadata for DSPNGPackagerError);
    atomic_store(result, (unint64_t *)&qword_1EEC8A960);
  }
  return result;
}

unint64_t sub_1AC6ABCAC()
{
  unint64_t result;

  result = qword_1EEC8A970;
  if (!qword_1EEC8A970)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8A970);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DSPNGPackagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6ABD34 + 4 * byte_1AC729DA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6ABD68 + 4 * byte_1AC729DA0[v4]))();
}

uint64_t sub_1AC6ABD68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6ABD70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6ABD78);
  return result;
}

uint64_t sub_1AC6ABD84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6ABD8CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6ABD90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6ABD98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSPNGPackagerError()
{
  return &type metadata for DSPNGPackagerError;
}

unint64_t sub_1AC6ABDB8()
{
  unint64_t result;

  result = qword_1EEC8A980;
  if (!qword_1EEC8A980)
  {
    result = MEMORY[0x1AF440830](&unk_1AC729E24, &type metadata for DSPNGPackagerError);
    atomic_store(result, (unint64_t *)&qword_1EEC8A980);
  }
  return result;
}

uint64_t sub_1AC6ABDFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

id sub_1AC6ABE04(void *a1)
{
  return objc_msgSend(a1, sel_navigationController);
}

id UINavigationController.ju_navigationController.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_navigationController);
}

id sub_1AC6ABE4C(void *a1)
{
  return objc_msgSend(a1, sel_navigationItem);
}

id UINavigationController.ju_navigationItem.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_navigationItem);
}

_QWORD *LayoutView.withMeasurements(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PartialLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  result = sub_1AC704138((uint64_t)v17, a4, a5, a6, a7, v18, a1, a2);
  a3[3] = v18;
  a3[4] = &off_1E5BF7E78;
  *a3 = result;
  return result;
}

_QWORD *LayoutView.withMeasurements(representing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PartialLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a1);
  result = sub_1AC704138((uint64_t)v13, a4, a5, a5, 0.0, v14, a1, a2);
  a3[3] = v14;
  a3[4] = &off_1E5BF7E78;
  *a3 = result;
  return result;
}

uint64_t LayoutView.withMeasurements(providedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15[2];

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PartialLayoutView();
  sub_1AC68E218(a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  result = sub_1AC704208(v15, (uint64_t)v11, v12, a2, a3);
  a4[3] = v12;
  a4[4] = (uint64_t)&off_1E5BF7E78;
  *a4 = result;
  return result;
}

uint64_t dispatch thunk of LayoutView.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LayoutView.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutView.focusedFrame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t static JetUIBugCompatibility.textFieldAdoptsMeasurableIncorrectly.getter()
{
  return 1;
}

uint64_t static JetUIBugCompatibility.compressedFitSizeRequiresExactMatch.getter()
{
  return 2;
}

uint64_t sub_1AC6AC13C()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE168);
  swift_allocObject();
  result = sub_1AC726BC8();
  qword_1ED0BE078 = result;
  return result;
}

uint64_t static JetUIBugCompatibility.enable<A>(_:perform:)()
{
  if (qword_1ED0BE070 != -1)
    swift_once();
  sub_1AC726BD4();
  return sub_1AC726BE0();
}

uint64_t static JetUIBugCompatibility.disable<A>(_:perform:)()
{
  if (qword_1ED0BE070 != -1)
    swift_once();
  sub_1AC726BD4();
  return sub_1AC726BE0();
}

unint64_t sub_1AC6AC31C()
{
  unint64_t result;

  result = qword_1EEC8A988;
  if (!qword_1EEC8A988)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for JetUIBugCompatibility, &type metadata for JetUIBugCompatibility);
    atomic_store(result, (unint64_t *)&qword_1EEC8A988);
  }
  return result;
}

unint64_t sub_1AC6AC364()
{
  unint64_t result;

  result = qword_1EEC8A990;
  if (!qword_1EEC8A990)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for JetUIBugCompatibility, &type metadata for JetUIBugCompatibility);
    atomic_store(result, (unint64_t *)&qword_1EEC8A990);
  }
  return result;
}

unint64_t sub_1AC6AC3AC()
{
  unint64_t result;

  result = qword_1EEC8A998;
  if (!qword_1EEC8A998)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for JetUIBugCompatibility, &type metadata for JetUIBugCompatibility);
    atomic_store(result, (unint64_t *)&qword_1EEC8A998);
  }
  return result;
}

unint64_t sub_1AC6AC3F4()
{
  unint64_t result;

  result = qword_1EEC8A9A0;
  if (!qword_1EEC8A9A0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for JetUIBugCompatibility, &type metadata for JetUIBugCompatibility);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9A0);
  }
  return result;
}

uint64_t destroy for DSScreenshotCapturer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s5JetUI20DSScreenshotCapturerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DSScreenshotCapturer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for DSScreenshotCapturer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSScreenshotCapturer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSScreenshotCapturer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSScreenshotCapturer()
{
  return &type metadata for DSScreenshotCapturer;
}

uint64_t sub_1AC6AC5F4(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1AC6A2718((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AC6AC6E0(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1AC6A2990((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AC6AC7C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AC6AC7F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AC6AC7FC()
{
  uint64_t v0;

  sub_1AC6A9FD0();
  sub_1AC6AC6E0(v0);
  return 1;
}

uint64_t ReusePool.limit.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t ReusePool.limit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 40)) = a1;
  return sub_1AC6AC834(a2);
}

uint64_t sub_1AC6AC834(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v23 - v7;
  v9 = *(_QWORD *)((char *)v1 + *(int *)(a1 + 40));
  if (v9 >= 1)
  {
    v10 = *v1;
    result = MEMORY[0x1AF43F9CC](*v1, AssociatedTypeWitness);
    if (v9 < result)
    {
      result = MEMORY[0x1AF43F9CC](v10, AssociatedTypeWitness);
      v11 = __OFSUB__(result, v9);
      v12 = result - v9;
      if (v11)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (v12 < 0)
      {
LABEL_14:
        __break(1u);
        return result;
      }
      v23 = (void (*)(char *, uint64_t, uint64_t))a1;
      sub_1AC726484();
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v27 = 0;
      v28 = v12;
      v19 = sub_1AC72646C();
      MEMORY[0x1AF440830](MEMORY[0x1E0DEAF58], v19);
      sub_1AC7265D4();
      swift_unknownObjectRetain();
      v20 = sub_1AC726730();
      v21 = sub_1AC726748();
      v24 = v20;
      if (v20 != v21)
      {
        v22 = v24;
        v23 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 24);
        while (1)
        {
          result = sub_1AC72673C();
          if (v24 < v16 || (uint64_t)(v18 >> 1) <= v22)
            break;
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v14 + *(_QWORD *)(v5 + 72) * v22++, AssociatedTypeWitness);
          v23(v8, v25, v26);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
          if (v22 == sub_1AC726748())
            return swift_unknownObjectRelease_n();
        }
        __break(1u);
        goto LABEL_13;
      }
      return swift_unknownObjectRelease_n();
    }
  }
  return result;
}

uint64_t *(*ReusePool.limit.modify(_QWORD *a1, uint64_t a2))(uint64_t *result, char a2)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = v2;
  return sub_1AC6ACA78;
}

uint64_t *sub_1AC6ACA78(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
    return (uint64_t *)sub_1AC6AC834(*result);
  return result;
}

uint64_t ReusePool.isEmpty.getter()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v0);
  return sub_1AC7265B0() & 1;
}

BOOL ReusePool.canRecycleMore.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return MEMORY[0x1AF43F9CC](v3, AssociatedTypeWitness) < *(uint64_t *)((char *)v1 + *(int *)(a1 + 40));
}

BOOL ReusePool.recycle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v12 - v8;
  v10 = ReusePool.canRecycleMore.getter(a2);
  if (v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
    sub_1AC72646C();
    sub_1AC726430();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v5, v4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v5, v4);
  }
  return v10;
}

uint64_t ReusePool.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  sub_1AC726868();
  swift_bridgeObjectRelease();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  sub_1AC726A30();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1AF43F9CC](v1, AssociatedTypeWitness);
  sub_1AC726A30();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return 0x6F6F506573756552;
}

uint64_t sub_1AC6ACDF0()
{
  sub_1AC726A30();
  sub_1AC7262C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6ACE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = type metadata accessor for ReusePool(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  *a5 = *(_QWORD *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_1AC6ACE8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for ReusePool(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return ReusePool.limit.setter(v4, v5);
}

uint64_t sub_1AC6ACEC8()
{
  return 16;
}

__n128 sub_1AC6ACED4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of Recycler.didRecycle(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Recycler.didDiscard(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Recycler.didDequeue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t *sub_1AC6ACEF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    *(_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_1AC6ACFD8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1AC6AD01C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v9(v7, v8, v4);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1AC6AD0AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1AC6AD144(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1AC6AD1C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AC6AD254(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1AC6AD2E0 + 4 * byte_1AC72A0B8[v10]))();
  }
}

void sub_1AC6AD360(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1AC6AD468()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1AC6AD4D0);
}

void sub_1AC6AD470(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1AC6AD478);
  JUMPOUT(0x1AC6AD4D0);
}

void sub_1AC6AD488()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1AC6AD4D0);
}

void sub_1AC6AD490()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1AC6AD4D0);
}

void sub_1AC6AD498(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1AC6AD4CCLL);
      JUMPOUT(0x1AC6AD4C8);
    }
    JUMPOUT(0x1AC6AD4A4);
  }
  JUMPOUT(0x1AC6AD4D0);
}

id NSAttributedString.baseWritingDirection(forCharacterAt:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;

  if ((uint64_t)objc_msgSend(v1, sel_length) <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A828);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1AC72A130;
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v7 = sub_1AC6AD6AC();
    v8 = MEMORY[0x1E0DEB418];
    v9 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v6 + 32) = 0xD000000000000025;
    *(_QWORD *)(v6 + 40) = 0x80000001AC730730;
    *(_QWORD *)(v6 + 96) = v8;
    *(_QWORD *)(v6 + 104) = v9;
    *(_QWORD *)(v6 + 64) = v7;
    *(_QWORD *)(v6 + 72) = a1;
    v10 = objc_msgSend(v1, sel_length);
    *(_QWORD *)(v6 + 136) = v8;
    *(_QWORD *)(v6 + 144) = v9;
    *(_QWORD *)(v6 + 112) = v10;
    sub_1AC726244();
    v11 = (void *)*MEMORY[0x1E0C99858];
    v12 = objc_allocWithZone(MEMORY[0x1E0C99DA0]);
    v13 = v11;
    v14 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v12, sel_initWithName_reason_userInfo_, v13, v14, 0);

    objc_msgSend(v4, sel_raise);
    v5 = 0;
  }
  else
  {
    v3 = objc_msgSend(v1, sel_juParagraphStyleAtIndex_effectiveRange_, a1, 0);
    if (!v3)
      return 0;
    v4 = v3;
    v5 = objc_msgSend(v3, sel_baseWritingDirection);
  }

  return v5;
}

unint64_t sub_1AC6AD6AC()
{
  unint64_t result;

  result = qword_1EEC8BAB0;
  if (!qword_1EEC8BAB0)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEC8BAB0);
  }
  return result;
}

uint64_t NSAttributedString.juBaseWritingDirectionForCharacterAtIndex(_:unknownStyle:)(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  char v4;

  result = (uint64_t)NSAttributedString.baseWritingDirection(forCharacterAt:)(a1);
  if (a2)
    *a2 = v4 & 1;
  if ((v4 & 1) != 0)
    return -1;
  return result;
}

uint64_t sub_1AC6AD724(void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  id v7;
  char v8;
  uint64_t v9;

  v6 = a1;
  v7 = NSAttributedString.baseWritingDirection(forCharacterAt:)(a3);
  if (a4)
    *a4 = v8 & 1;
  if ((v8 & 1) != 0)
    v9 = -1;
  else
    v9 = (uint64_t)v7;

  return v9;
}

Swift::String __swiftcall NSAttributedString.convertedWritingDirectionToBidiControlCharacters()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v0);
  if (qword_1EEC8A1C0 != -1)
    swift_once();
  v2 = qword_1EEC8A9B0;
  v3 = objc_retainAutorelease(v1);
  objc_msgSend(v3, sel_performSelector_, v2);
  v4 = objc_msgSend(v3, sel_string);
  v5 = sub_1AC72622C();
  v7 = v6;

  v8 = v5;
  v9 = v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall NSMutableAttributedString.convertWritingDirectionToBidiControlCharacters()()
{
  void *v0;

  if (qword_1EEC8A1C0 != -1)
    swift_once();
  objc_msgSend(objc_retainAutorelease(v0), sel_performSelector_, qword_1EEC8A9B0);
}

void sub_1AC6AD898()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v1 = (void *)sub_1AC726208();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  qword_1EEC8A9A8 = (uint64_t)v2;
}

id static NSAttributedString.juEmpty.getter()
{
  if (qword_1EEC8A1B8 != -1)
    swift_once();
  return (id)qword_1EEC8A9A8;
}

id sub_1AC6AD934()
{
  if (qword_1EEC8A1B8 != -1)
    swift_once();
  return (id)qword_1EEC8A9A8;
}

uint64_t sub_1AC6AD974(void *a1)
{
  objc_msgSend(a1, sel_length);
  return 0;
}

uint64_t NSAttributedString.juFullRange.getter()
{
  void *v0;

  objc_msgSend(v0, sel_length);
  return 0;
}

uint64_t NSAttributedString.juParagraphStyle(at:effectiveRange:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (objc_msgSend(v2, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E0DC1178], a1, a2))
  {
    sub_1AC726724();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1AC6ADF18((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_1AC69C244(0, (unint64_t *)&unk_1EEC8BA90);
    if (swift_dynamicCast())
      return v4;
    else
      return 0;
  }
  else
  {
    sub_1AC690CC0((uint64_t)v6);
    return 0;
  }
}

id sub_1AC6ADA98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;

  v6 = a1;
  v7 = (void *)NSAttributedString.juParagraphStyle(at:effectiveRange:)(a3, a4);

  return v7;
}

uint64_t NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v20[6];
  uint64_t v21;
  char v22;

  if ((uint64_t)objc_msgSend(v1, sel_length) <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A828);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1AC72A130;
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1AC6AD6AC();
    v12 = MEMORY[0x1E0DEB418];
    v13 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v10 + 32) = 0xD000000000000034;
    *(_QWORD *)(v10 + 40) = 0x80000001AC730760;
    *(_QWORD *)(v10 + 96) = v12;
    *(_QWORD *)(v10 + 104) = v13;
    *(_QWORD *)(v10 + 64) = v11;
    *(_QWORD *)(v10 + 72) = a1;
    v14 = objc_msgSend(v1, sel_length);
    *(_QWORD *)(v10 + 136) = v12;
    *(_QWORD *)(v10 + 144) = v13;
    *(_QWORD *)(v10 + 112) = v14;
    sub_1AC726244();
    v15 = (void *)*MEMORY[0x1E0C99858];
    v16 = objc_allocWithZone(MEMORY[0x1E0C99DA0]);
    v17 = v15;
    v18 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v16, sel_initWithName_reason_userInfo_, v17, v18, 0);

    objc_msgSend(v19, sel_raise);
    return 0;
  }
  v21 = 0;
  v22 = 1;
  v3 = *MEMORY[0x1E0DC1178];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = &v21;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_1AC6ADF70;
  *(_QWORD *)(v5 + 24) = v4;
  v20[4] = sub_1AC690B08;
  v20[5] = v5;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1107296256;
  v20[2] = sub_1AC69CE30;
  v20[3] = &block_descriptor_1;
  v6 = _Block_copy(v20);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateAttribute_inRange_options_usingBlock_, v3, 0, a1, 2, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v9 = v21;
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

void sub_1AC6ADD94(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  id v7;
  _BYTE v8[24];
  uint64_t v9;

  sub_1AC690E28(a1, (uint64_t)v8);
  if (v9)
  {
    sub_1AC69C244(0, (unint64_t *)&unk_1EEC8BA90);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (objc_msgSend(v7, sel_baseWritingDirection) == (id)1 || !objc_msgSend(v7, sel_baseWritingDirection))
      {
        *(_QWORD *)a5 = objc_msgSend(v7, sel_baseWritingDirection);
        *(_BYTE *)(a5 + 8) = 0;
        *a4 = 1;
      }

    }
  }
  else
  {
    sub_1AC690CC0((uint64_t)v8);
  }
}

uint64_t NSAttributedString.juStrongBaseWritingDirectionOfParagraphAtOrBeforeIndex(_:)(uint64_t a1)
{
  uint64_t result;
  char v2;

  result = NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(a1);
  if ((v2 & 1) != 0)
    return -1;
  return result;
}

uint64_t sub_1AC6ADE84(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  char v6;
  char v7;

  v4 = a1;
  v5 = NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(a3);
  v7 = v6;

  if ((v7 & 1) != 0)
    return -1;
  else
    return v5;
}

void sub_1AC6ADECC()
{
  NSString *v0;
  SEL v1;

  v0 = (NSString *)sub_1AC726208();
  v1 = NSSelectorFromString(v0);

  qword_1EEC8A9B0 = (uint64_t)v1;
}

uint64_t sub_1AC6ADF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6ADF60()
{
  return swift_deallocObject();
}

void sub_1AC6ADF70(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  sub_1AC6ADD94(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1AC6ADF78()
{
  return swift_deallocObject();
}

Swift::Void __swiftcall NSMutableAttributedString.convertLineSeparatorsIntoLineFeeds(at:paragraphRanges:)(Swift::OpaquePointer at, Swift::OpaquePointer paragraphRanges)
{
  void *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)at._rawValue + 2);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v7 = *((_QWORD *)at._rawValue + i + 4);
      v8 = v7;
      sub_1AC6AE018(&v8, v2, (unint64_t)paragraphRanges._rawValue);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_1AC6AE018(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  double v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v5 = *a1;
  v6 = (void *)sub_1AC726208();
  objc_msgSend(a2, sel_replaceCharactersInRange_withString_, v5, 1, v6);

  if (!(a3 >> 62))
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  v7 = sub_1AC726928();
  if (!v7)
    goto LABEL_23;
LABEL_3:
  v8 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x1AF43FE40](v8 - 4, a3);
    else
      v9 = *(id *)(a3 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    objc_msgSend(v9, sel_juDirectionalRangeValue);
    if (v5 >= v17)
    {
      if (__OFSUB__(v5, v17))
        goto LABEL_21;
      if (v5 - v17 < v18)
        break;
    }

    ++v8;
    if (v11 == v7)
      goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_juDirectionalRangeValue);
  v12 = objc_msgSend(a2, sel_juParagraphStyleAtIndex_effectiveRange_, v17, 0);
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, sel_paragraphSpacing);
    if (v14 == 0.0
      || (objc_msgSend(v13, sel_mutableCopy),
          sub_1AC726724(),
          swift_unknownObjectRelease(),
          sub_1AC69C244(0, &qword_1ED0BD738),
          (swift_dynamicCast() & 1) == 0))
    {

    }
    else
    {
      objc_msgSend(v19, sel_setParagraphSpacing_, 0.0);
      v15 = *MEMORY[0x1E0DC1178];
      v16 = v19;
      objc_msgSend(a2, sel_addAttribute_value_range_, v15, v16, v17, v18);

    }
  }

}

Swift::Void __swiftcall NSMutableString.convertLineSeparatorsIntoLineFeeds(at:)(Swift::OpaquePointer at)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *((_QWORD *)at._rawValue + 2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *((_QWORD *)at._rawValue + v4++ + 4);
      v6 = (void *)sub_1AC726208();
      objc_msgSend(v1, sel_replaceCharactersInRange_withString_, v5, 1, v6);

    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
}

id NSParagraphStyle.juWithBaseWritingDirection(_:)(uint64_t a1)
{
  void *v1;
  id v4;

  objc_msgSend(v1, sel_mutableCopy);
  sub_1AC726724();
  swift_unknownObjectRelease();
  sub_1AC69C244(0, &qword_1ED0BD738);
  swift_dynamicCast();
  objc_msgSend(v4, sel_setBaseWritingDirection_, a1);
  objc_msgSend(v4, sel_copy);
  sub_1AC726724();

  swift_unknownObjectRelease();
  sub_1AC69C244(0, (unint64_t *)&unk_1EEC8BA90);
  swift_dynamicCast();
  return v4;
}

id sub_1AC6AE450(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;

  v4 = a1;
  v5 = NSParagraphStyle.juWithBaseWritingDirection(_:)(a3);

  return v5;
}

uint64_t UIUserInterfaceLayoutDirection.textAlignment(whenLeftToRight:rightToLeft:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 == 1)
    return a2;
  return result;
}

void static Models.Artwork.Style.unspecified.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

void static Models.Artwork.Format.png.getter(_QWORD *a1@<X8>)
{
  *a1 = 6778480;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.Format.jpeg.getter(_QWORD *a1@<X8>)
{
  *a1 = 1734701162;
  a1[1] = 0xE400000000000000;
}

void static Models.Artwork.Format.heic.getter(_QWORD *a1@<X8>)
{
  *a1 = 1667851624;
  a1[1] = 0xE400000000000000;
}

void static Models.Artwork.Format.lcr.getter(_QWORD *a1@<X8>)
{
  *a1 = 7496556;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.Crop.boundingBox.getter(_QWORD *a1@<X8>)
{
  *a1 = 25186;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.specificRectangle.getter(_QWORD *a1@<X8>)
{
  *a1 = 29299;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.sourceSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 29555;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.squareCenterCrop.getter(_QWORD *a1@<X8>)
{
  *a1 = 25443;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fa.getter(_QWORD *a1@<X8>)
{
  *a1 = 24934;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fm.getter(_QWORD *a1@<X8>)
{
  *a1 = 28006;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fn.getter(_QWORD *a1@<X8>)
{
  *a1 = 28262;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.fo.getter(_QWORD *a1@<X8>)
{
  *a1 = 28518;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.em.getter(_QWORD *a1@<X8>)
{
  *a1 = 28005;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.el.getter(_QWORD *a1@<X8>)
{
  *a1 = 27749;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ek.getter(_QWORD *a1@<X8>)
{
  *a1 = 27493;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.en.getter(_QWORD *a1@<X8>)
{
  *a1 = 28261;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ep.getter(_QWORD *a1@<X8>)
{
  *a1 = 28773;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.oa.getter(_QWORD *a1@<X8>)
{
  *a1 = 24943;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ob.getter(_QWORD *a1@<X8>)
{
  *a1 = 25199;
  a1[1] = 0xE200000000000000;
}

void static Models.Artwork.Crop.ta.getter(_QWORD *a1@<X8>)
{
  *a1 = 24948;
  a1[1] = 0xE200000000000000;
}

CGSize __swiftcall Models.Artwork.Crop.scale(_:toFit:)(CGSize _, CGSize toFit)
{
  uint64_t *v2;
  double height;
  double width;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  BOOL v15;
  double v16;
  double v17;
  CGSize result;

  height = toFit.height;
  width = toFit.width;
  v5 = _.height;
  v6 = _.width;
  v7 = *v2;
  v8 = v2[1];
  v9 = 0.0;
  if (v6 == 0.0 && _.height == 0.0)
  {
    v10 = 0.0;
    goto LABEL_34;
  }
  if (toFit.width != 0.0 || (v10 = 0.0, toFit.height != 0.0))
  {
    if (toFit.width == 0.0)
    {
      v11 = 0.0;
      v12 = 0.0;
      if (toFit.height == 0.0)
      {
LABEL_9:
        if (v7 == 25443 && v8 == 0xE200000000000000)
        {
          if (v6 != v5)
            goto LABEL_21;
        }
        else
        {
          v13 = sub_1AC726A78() & (v6 == v5);
          v15 = v7 == 29299 && v8 == 0xE200000000000000;
          if ((v13 & 1) == 0 && !v15)
          {
LABEL_21:
            if ((sub_1AC726A78() & 1) == 0)
            {
              v16 = v12 * width;
              v17 = v11 * height;
              if (v7 == 25186 && v8 == 0xE200000000000000 || (sub_1AC726A78() & 1) != 0)
              {
                if (v11 >= v12)
                  v6 = v16;
                else
                  v5 = v17;
              }
              else if (v11 < v12)
              {
                v6 = v16;
              }
              else
              {
                v5 = v17;
              }
            }
          }
        }
        v9 = floor(v6);
        v10 = floor(v5);
        goto LABEL_34;
      }
    }
    else
    {
      v12 = 0.0;
      v11 = v6 / toFit.width;
      if (toFit.height == 0.0)
        goto LABEL_9;
    }
    v12 = v5 / toFit.height;
    goto LABEL_9;
  }
LABEL_34:
  result.height = v10;
  result.width = v9;
  return result;
}

uint64_t Models.Artwork.URLTemplate.Key.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static Models.Artwork.URLTemplate.Key.width.getter(_QWORD *a1@<X8>)
{
  *a1 = 8222587;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.height.getter(_QWORD *a1@<X8>)
{
  *a1 = 8218747;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.crop.getter(_QWORD *a1@<X8>)
{
  *a1 = 8217467;
  a1[1] = 0xE300000000000000;
}

void static Models.Artwork.URLTemplate.Key.format.getter(_QWORD *a1@<X8>)
{
  *a1 = 8218235;
  a1[1] = 0xE300000000000000;
}

uint64_t Models.Artwork.URLTemplate.Key.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *sub_1AC6AE81C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_1AC6AE828@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.URLTemplate.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1AC725C68();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a2, v10);
    v11 = sub_1AC725C74();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    *a3 = v8;
    a3[1] = v9;
  }
  else
  {
    v13 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v14 = MEMORY[0x1E0DEE9D8];
    *v15 = &type metadata for Models.Artwork.URLTemplate;
    v15[1] = v14;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0D414F0], v13);
    swift_willThrow();
    v16 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
    v17 = sub_1AC725C74();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  }
  return result;
}

unint64_t sub_1AC6AE968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8A9B8;
  if (!qword_1EEC8A9B8)
  {
    v1 = sub_1AC726118();
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D41508], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9B8);
  }
  return result;
}

uint64_t Models.Artwork.URLTemplate.makeURL(withSubstitutions:)(Swift::OpaquePointer a1)
{
  Models.Artwork.URLTemplate.makeString(withSubstitutions:)(a1);
  sub_1AC7258A8();
  return swift_bridgeObjectRelease();
}

Swift::String __swiftcall Models.Artwork.URLTemplate.makeString(withSubstitutions:)(Swift::OpaquePointer withSubstitutions)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  void *v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  Swift::String result;

  v3 = *v1;
  v2 = (void *)v1[1];
  v4 = (char *)withSubstitutions._rawValue + 64;
  v5 = 1 << *((_BYTE *)withSubstitutions._rawValue + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *((_QWORD *)withSubstitutions._rawValue + 8);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v8)
      goto LABEL_21;
    v15 = *(_QWORD *)&v4[8 * v14];
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_21;
      v15 = *(_QWORD *)&v4[8 * v11];
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_21;
        v15 = *(_QWORD *)&v4[8 * v11];
        if (!v15)
          break;
      }
    }
LABEL_20:
    v7 = (v15 - 1) & v15;
LABEL_5:
    sub_1AC68F334();
    swift_bridgeObjectRetain();
    v3 = sub_1AC726718();
    v13 = v12;
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
    v2 = v13;
  }
  v16 = v14 + 3;
  if (v16 >= v8)
  {
LABEL_21:
    swift_release();
    v9 = v3;
    v10 = v2;
    goto LABEL_24;
  }
  v15 = *(_QWORD *)&v4[8 * v16];
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v8)
      goto LABEL_21;
    v15 = *(_QWORD *)&v4[8 * v11];
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t sub_1AC6AEBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_1AC725C68();
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    v12 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);
    v13 = sub_1AC725C74();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    *a3 = v10;
    a3[1] = v11;
  }
  else
  {
    v15 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v16 = MEMORY[0x1E0DEE9D8];
    *v17 = v4;
    v17[1] = v16;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0D414F0], v15);
    swift_willThrow();
    v18 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
    v19 = sub_1AC725C74();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  }
  return result;
}

uint64_t sub_1AC6AED00()
{
  sub_1AC726AFC();
  swift_bridgeObjectRetain();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6AED58()
{
  swift_bridgeObjectRetain();
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6AED9C()
{
  sub_1AC726AFC();
  swift_bridgeObjectRetain();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6AEDF0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1AC726A78();
}

_QWORD *Models.Artwork.init(template:size:style:crop:format:quality:supportsWideGamut:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = result[1];
  v11 = *a2;
  v12 = a2[1];
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  *(_QWORD *)a8 = *result;
  *(_QWORD *)(a8 + 8) = v10;
  *(double *)(a8 + 16) = a9;
  *(double *)(a8 + 24) = a10;
  *(_QWORD *)(a8 + 32) = v11;
  *(_QWORD *)(a8 + 40) = v12;
  *(_QWORD *)(a8 + 48) = v13;
  *(_QWORD *)(a8 + 56) = v14;
  *(_QWORD *)(a8 + 64) = v15;
  *(_QWORD *)(a8 + 72) = v16;
  *(_QWORD *)(a8 + 80) = a5;
  *(_BYTE *)(a8 + 88) = a6 & 1;
  *(_BYTE *)(a8 + 89) = a7;
  return result;
}

uint64_t Models.Artwork.init(deserializing:using:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  void (*v20)(_BYTE *, uint64_t);
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t result;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;

  v60 = a3;
  v5 = sub_1AC725C74();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v59 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x1E0C80A78](v7);
  v62 = &v51[-v10];
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v51[-v12];
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = &v51[-v15];
  MEMORY[0x1E0C80A78](v14);
  v18 = &v51[-v17];
  v19 = a1;
  sub_1AC725C80();
  sub_1AC6AF418();
  sub_1AC725C14();
  v20 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v20(v18, v5);
  v21 = v65;
  if (!v65)
  {
    v33 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    *v34 = 0x6574616C706D6574;
    v34[1] = 0xE800000000000000;
    v34[2] = &type metadata for Models.Artwork;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v34, *MEMORY[0x1E0D414E8], v33);
    swift_willThrow();
    v35 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a2, v35);
    v32 = v19;
    return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v32, v5);
  }
  v63 = a2;
  v22 = v64;
  v66 = a1;
  sub_1AC725C80();
  v23 = sub_1AC725C50();
  v25 = v24;
  v20(v16, v5);
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v36 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v38 = v37;
    *v37 = 0x6874646977;
    v37[1] = 0xE500000000000000;
LABEL_9:
    v37[2] = &type metadata for Models.Artwork;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0D414E8], v36);
    swift_willThrow();
    v39 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v63, v39);
    v32 = v66;
    return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v32, v5);
  }
  sub_1AC725C80();
  v58 = sub_1AC725C50();
  v27 = v26;
  v20(v13, v5);
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v36 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v38 = v37;
    *v37 = 0x746867696568;
    v37[1] = 0xE600000000000000;
    goto LABEL_9;
  }
  v55 = v22;
  sub_1AC725C80();
  sub_1AC6AF480();
  sub_1AC725BFC();
  v20(v18, v5);
  v54 = v64;
  v57 = v65;
  sub_1AC725C80();
  sub_1AC6AF4D4();
  sub_1AC725BFC();
  v20(v18, v5);
  v28 = v64;
  v56 = v65;
  v29 = v62;
  sub_1AC725C80();
  sub_1AC6AF518();
  v30 = v61;
  sub_1AC725C08();
  if (!v30)
  {
    v20(v29, v5);
    v61 = v65;
    v62 = v64;
    v41 = v66;
    sub_1AC725C80();
    v53 = sub_1AC725C20();
    v52 = v42;
    v20(v18, v5);
    v43 = v59;
    sub_1AC725C80();
    v44 = sub_1AC725C38();
    v20(v43, v5);
    v45 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v63, v45);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v20)(v41, v5);
    v46 = v60;
    *v60 = v55;
    v46[1] = v21;
    v47 = v58;
    v46[2] = v23;
    v46[3] = v47;
    v48 = v57;
    v46[4] = v54;
    v46[5] = v48;
    v49 = v56;
    v46[6] = v28;
    v46[7] = v49;
    v50 = v61;
    v46[8] = v62;
    v46[9] = v50;
    v46[10] = v53;
    *((_BYTE *)v46 + 88) = v52 & 1;
    *((_BYTE *)v46 + 89) = v44 & 1;
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = sub_1AC725D58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v63, v31);
  v20(v66, v5);
  v32 = v29;
  return ((uint64_t (*)(_QWORD, _QWORD))v20)(v32, v5);
}

unint64_t sub_1AC6AF418()
{
  unint64_t result;

  result = qword_1EEC8A9C0;
  if (!qword_1EEC8A9C0)
  {
    result = MEMORY[0x1AF440830]("\r;M9й", &type metadata for Models.Artwork.URLTemplate);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9C0);
  }
  return result;
}

void sub_1AC6AF45C(_QWORD *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

unint64_t sub_1AC6AF480()
{
  unint64_t result;

  result = qword_1EEC8A9C8;
  if (!qword_1EEC8A9C8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Style, &type metadata for Models.Artwork.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9C8);
  }
  return result;
}

void sub_1AC6AF4C4(_QWORD *a1@<X8>)
{
  *a1 = 25186;
  a1[1] = 0xE200000000000000;
}

unint64_t sub_1AC6AF4D4()
{
  unint64_t result;

  result = qword_1EEC8A9D0;
  if (!qword_1EEC8A9D0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Crop, &type metadata for Models.Artwork.Crop);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9D0);
  }
  return result;
}

unint64_t sub_1AC6AF518()
{
  unint64_t result;

  result = qword_1EEC8A9D8;
  if (!qword_1EEC8A9D8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Format, &type metadata for Models.Artwork.Format);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9D8);
  }
  return result;
}

uint64_t Models.Artwork.template.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double Models.Artwork.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t Models.Artwork.style.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.crop.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.format.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  *a1 = *(_QWORD *)(v1 + 64);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Artwork.quality.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t Models.Artwork.supportsWideGamut.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t Models.Artwork.removingStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 80);
  v8 = *(_BYTE *)(v1 + 88);
  v9 = *(_BYTE *)(v1 + 89);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = 0x6669636570736E75;
  *(_QWORD *)(a1 + 40) = 0xEB00000000646569;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 89) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

JSValue __swiftcall Models.Artwork.makeValue(in:)(JSContext in)
{
  uint64_t v1;
  uint64_t inited;
  unint64_t v4;
  objc_class *v5;
  uint64_t v6;
  void *v7;
  id v8;
  objc_class *v9;
  id v10;
  objc_class *v11;
  id v12;
  objc_class *v13;
  id v14;
  objc_class *v15;
  id v16;
  objc_class *v17;
  id v18;
  objc_class *v19;
  uint64_t v20;
  id v21;
  objc_class *v22;
  id v23;
  objc_class *v24;
  id v25;
  JSValue result;
  char v27;

  v27 = *(_BYTE *)(v1 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A9E0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AC72A150;
  *(_QWORD *)(inited + 32) = 0x6574616C706D6574;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  v4 = sub_1AC6A91D0(MEMORY[0x1E0DEE9D8]);
  Models.Artwork.URLTemplate.makeString(withSubstitutions:)((Swift::OpaquePointer)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = in.super.isa;
  v6 = sub_1AC726A9C();
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_valueWithObject_inContext_, v6, v5);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = 0x6874646977;
  *(_QWORD *)(inited + 64) = 0xE500000000000000;
  v9 = v5;
  v10 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1AC726A9C(), v9);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = 0x746867696568;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v11 = v9;
  v12 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1AC726A9C(), v11);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 96) = v12;
  *(_QWORD *)(inited + 104) = 0x656C797473;
  *(_QWORD *)(inited + 112) = 0xE500000000000000;
  v13 = v11;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1AC726A9C(), v13);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 120) = v14;
  *(_QWORD *)(inited + 128) = 1886351971;
  *(_QWORD *)(inited + 136) = 0xE400000000000000;
  v15 = v13;
  swift_bridgeObjectRetain();
  v16 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1AC726A9C(), v15);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 144) = v16;
  *(_QWORD *)(inited + 152) = 0x74616D726F66;
  *(_QWORD *)(inited + 160) = 0xE600000000000000;
  v17 = v15;
  swift_bridgeObjectRetain();
  v18 = objc_msgSend(v7, sel_valueWithObject_inContext_, sub_1AC726A9C(), v17);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 168) = v18;
  *(_QWORD *)(inited + 176) = 0x7974696C617571;
  *(_QWORD *)(inited + 184) = 0xE700000000000000;
  v19 = v17;
  if ((v27 & 1) != 0)
    v20 = 0;
  else
    v20 = sub_1AC726A6C();
  v21 = objc_msgSend(v7, (SEL)&selRef_removeItemAtPath_error_, v20, v17);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 192) = v21;
  *(_QWORD *)(inited + 200) = 0xD000000000000011;
  *(_QWORD *)(inited + 208) = 0x80000001AC730890;
  v22 = v17;
  v23 = objc_msgSend(v7, (SEL)&selRef_removeItemAtPath_error_, sub_1AC726A9C(), v22);
  swift_unknownObjectRelease();

  *(_QWORD *)(inited + 216) = v23;
  sub_1AC6A92F0(inited);
  v24 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A9E8);
  v25 = objc_msgSend(v7, (SEL)&selRef_removeItemAtPath_error_, sub_1AC726A9C(), v24);
  swift_unknownObjectRelease();

  if (v25)
    return (JSValue)v25;
  __break(1u);
  return result;
}

uint64_t sub_1AC6AFAEC@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Models.Artwork.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1AC6AFB00()
{
  return sub_1AC725FC8();
}

uint64_t sub_1AC6AFB14()
{
  return sub_1AC725FD4();
}

uint64_t sub_1AC6AFB2C()
{
  sub_1AC6AF480();
  return sub_1AC72637C();
}

uint64_t sub_1AC6AFB88()
{
  sub_1AC6AF480();
  return sub_1AC726370();
}

uint64_t sub_1AC6AFBD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC6AFC08 + 4 * byte_1AC72A160[a1]))(0x6574616C706D6574, 0xE800000000000000);
}

uint64_t sub_1AC6AFC08()
{
  return 0x6874646977;
}

uint64_t sub_1AC6AFC1C()
{
  return 0x746867696568;
}

uint64_t sub_1AC6AFC30()
{
  return 0x656C797473;
}

uint64_t sub_1AC6AFC44()
{
  return 1886351971;
}

uint64_t sub_1AC6AFC54()
{
  return 0x74616D726F66;
}

uint64_t sub_1AC6AFC68()
{
  return 0x7974696C617571;
}

unint64_t sub_1AC6AFC80()
{
  return 0xD000000000000011;
}

uint64_t sub_1AC6AFC9C()
{
  sub_1AC6AF4D4();
  return sub_1AC72637C();
}

uint64_t sub_1AC6AFCF8()
{
  sub_1AC6AF4D4();
  return sub_1AC726370();
}

uint64_t sub_1AC6AFD44()
{
  sub_1AC6AF518();
  return sub_1AC72637C();
}

uint64_t sub_1AC6AFDA0()
{
  sub_1AC6AF518();
  return sub_1AC726370();
}

uint64_t sub_1AC6AFDEC()
{
  sub_1AC6AF418();
  return sub_1AC72637C();
}

uint64_t sub_1AC6AFE48()
{
  sub_1AC6AF418();
  return sub_1AC726370();
}

uint64_t sub_1AC6AFE94()
{
  unsigned __int8 *v0;

  return sub_1AC6AFBD4(*v0);
}

uint64_t sub_1AC6AFE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6B11B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AC6AFEC0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1AC6AFECC()
{
  sub_1AC6B03D4();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6AFEF4()
{
  sub_1AC6B03D4();
  return sub_1AC726BBC();
}

uint64_t Models.Artwork.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8A9F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6B03D4();
  sub_1AC726B50();
  if (!v2)
  {
    v34 = 0;
    sub_1AC6B0418();
    sub_1AC7269D0();
    v10 = v31;
    v9 = v32;
    LOBYTE(v31) = 1;
    sub_1AC7269B8();
    v12 = v11;
    LOBYTE(v31) = 2;
    sub_1AC7269B8();
    v14 = v13;
    v30 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA08);
    v34 = 3;
    sub_1AC6B04E8(&qword_1EEC8AA10, &qword_1EEC8AA08, sub_1AC6B045C, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    if (v32 >= 2)
    {
      v28 = v31;
      v29 = v32;
    }
    else
    {
      sub_1AC6B0590(v31, v32);
      v29 = 0xEB00000000646569;
      v28 = 0x6669636570736E75;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA30);
    v34 = 4;
    sub_1AC6B04E8(&qword_1EEC8AA38, &qword_1EEC8AA30, sub_1AC6B04C4, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    v16 = v32;
    if (v32 >= 2)
    {
      v27 = v31;
    }
    else
    {
      sub_1AC6B0590(v31, v32);
      v16 = 0xE200000000000000;
      v27 = 25186;
    }
    v34 = 5;
    sub_1AC6B05A4();
    sub_1AC7269D0();
    v25 = v31;
    v26 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA60);
    v34 = 6;
    sub_1AC6B05E8();
    sub_1AC7269A0();
    v23 = v31;
    v24 = v16;
    v33 = v32;
    v17 = BYTE1(v32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA78);
    v34 = 7;
    sub_1AC6B066C();
    sub_1AC7269A0();
    v33 |= v17;
    if (v17)
      v18 = 0;
    else
      v18 = v23;
    v19 = ((v31 & 0xFE) != 2) & v31;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v30;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v14;
    v20 = v29;
    *(_QWORD *)(a2 + 32) = v28;
    *(_QWORD *)(a2 + 40) = v20;
    v21 = v24;
    *(_QWORD *)(a2 + 48) = v27;
    *(_QWORD *)(a2 + 56) = v21;
    v22 = v26;
    *(_QWORD *)(a2 + 64) = v25;
    *(_QWORD *)(a2 + 72) = v22;
    *(_QWORD *)(a2 + 80) = v18;
    *(_BYTE *)(a2 + 88) = v33 & 1;
    *(_BYTE *)(a2 + 89) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1AC6B03D4()
{
  unint64_t result;

  result = qword_1EEC8A9F8;
  if (!qword_1EEC8A9F8)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72A724, &_s7ArtworkV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8A9F8);
  }
  return result;
}

unint64_t sub_1AC6B0418()
{
  unint64_t result;

  result = qword_1EEC8AA00;
  if (!qword_1EEC8AA00)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.URLTemplate, &type metadata for Models.Artwork.URLTemplate);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA00);
  }
  return result;
}

uint64_t sub_1AC6B045C()
{
  return sub_1AC6B04E8(&qword_1EEC8AA18, &qword_1EEC8AA20, (uint64_t (*)(void))sub_1AC6B0480, MEMORY[0x1E0D41770]);
}

unint64_t sub_1AC6B0480()
{
  unint64_t result;

  result = qword_1EEC8AA28;
  if (!qword_1EEC8AA28)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Style, &type metadata for Models.Artwork.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA28);
  }
  return result;
}

uint64_t sub_1AC6B04C4()
{
  return sub_1AC6B04E8(&qword_1EEC8AA40, &qword_1EEC8AA48, (uint64_t (*)(void))sub_1AC6B054C, MEMORY[0x1E0D41770]);
}

uint64_t sub_1AC6B04E8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1AF440830](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AC6B054C()
{
  unint64_t result;

  result = qword_1EEC8AA50;
  if (!qword_1EEC8AA50)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Crop, &type metadata for Models.Artwork.Crop);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA50);
  }
  return result;
}

uint64_t sub_1AC6B0590(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1AC6B05A4()
{
  unint64_t result;

  result = qword_1EEC8AA58;
  if (!qword_1EEC8AA58)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Format, &type metadata for Models.Artwork.Format);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA58);
  }
  return result;
}

unint64_t sub_1AC6B05E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEC8AA68;
  if (!qword_1EEC8AA68)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AA60);
    v2 = sub_1AC6B0B30(&qword_1EEC8AA70, &qword_1ED0BDD10, MEMORY[0x1E0DEB448], MEMORY[0x1E0D41770]);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D3FB78], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA68);
  }
  return result;
}

unint64_t sub_1AC6B066C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEC8AA80;
  if (!qword_1EEC8AA80)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AA78);
    v2 = sub_1AC6B0B30((unint64_t *)&qword_1EEC8AA88, &qword_1EEC8AA90, MEMORY[0x1E0DEAFC0], MEMORY[0x1E0D41770]);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D3FB78], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA80);
  }
  return result;
}

uint64_t Models.Artwork.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA98);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v10 = v1[2];
  v9 = v1[3];
  v11 = v1[4];
  v24 = v1[5];
  v25 = v11;
  v12 = v1[7];
  v22 = v1[6];
  v23 = v12;
  v13 = v1[9];
  v20 = v1[8];
  v21 = v13;
  v19 = v1[10];
  v29 = *((unsigned __int8 *)v1 + 88);
  v18[3] = *((unsigned __int8 *)v1 + 89);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6B03D4();
  sub_1AC726B68();
  v27 = v7;
  v28 = v8;
  v30 = 0;
  sub_1AC6B0A20();
  v14 = v26;
  sub_1AC726A18();
  if (!v14)
  {
    v16 = v24;
    v15 = v25;
    v27 = v10;
    v30 = 1;
    sub_1AC6997F0();
    sub_1AC726A18();
    v27 = v9;
    v30 = 2;
    sub_1AC726A18();
    v27 = v15;
    v28 = v16;
    v30 = 3;
    sub_1AC6B0A64();
    sub_1AC726A18();
    v27 = v22;
    v28 = v23;
    v30 = 4;
    sub_1AC6B0AA8();
    sub_1AC726A18();
    v27 = v20;
    v28 = v21;
    v30 = 5;
    sub_1AC6B0AEC();
    sub_1AC726A18();
    v27 = v19;
    LOBYTE(v28) = v29;
    v30 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD10);
    sub_1AC6B0B30(&qword_1EEC8AAC0, &qword_1ED0BDD10, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEE988]);
    sub_1AC726A18();
    LOBYTE(v27) = 7;
    sub_1AC726A00();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AC6B0A20()
{
  unint64_t result;

  result = qword_1EEC8AAA0;
  if (!qword_1EEC8AAA0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.URLTemplate, &type metadata for Models.Artwork.URLTemplate);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAA0);
  }
  return result;
}

unint64_t sub_1AC6B0A64()
{
  unint64_t result;

  result = qword_1EEC8AAA8;
  if (!qword_1EEC8AAA8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Style, &type metadata for Models.Artwork.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAA8);
  }
  return result;
}

unint64_t sub_1AC6B0AA8()
{
  unint64_t result;

  result = qword_1EEC8AAB0;
  if (!qword_1EEC8AAB0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Crop, &type metadata for Models.Artwork.Crop);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAB0);
  }
  return result;
}

unint64_t sub_1AC6B0AEC()
{
  unint64_t result;

  result = qword_1EEC8AAB8;
  if (!qword_1EEC8AAB8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.Format, &type metadata for Models.Artwork.Format);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAB8);
  }
  return result;
}

uint64_t sub_1AC6B0B30(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x1AF440830](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AC6B0B90()
{
  unint64_t result;

  result = qword_1EEC8AAC8;
  if (!qword_1EEC8AAC8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.URLTemplate.Key, &type metadata for Models.Artwork.URLTemplate.Key);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAC8);
  }
  return result;
}

unint64_t sub_1AC6B0BD8()
{
  unint64_t result;

  result = qword_1EEC8AAD0;
  if (!qword_1EEC8AAD0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork.URLTemplate, &type metadata for Models.Artwork.URLTemplate);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAD0);
  }
  return result;
}

uint64_t sub_1AC6B0C1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Artwork.init(from:)(a1, a2);
}

uint64_t sub_1AC6B0C30(_QWORD *a1)
{
  return Models.Artwork.encode(to:)(a1);
}

uint64_t _s7ArtworkVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s7ArtworkVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7ArtworkVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s7ArtworkVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

uint64_t _s7ArtworkVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 90))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7ArtworkVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 90) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Artwork()
{
  return &type metadata for Models.Artwork;
}

ValueMetadata *type metadata accessor for Models.Artwork.Style()
{
  return &type metadata for Models.Artwork.Style;
}

ValueMetadata *type metadata accessor for Models.Artwork.Format()
{
  return &type metadata for Models.Artwork.Format;
}

ValueMetadata *type metadata accessor for Models.Artwork.Crop()
{
  return &type metadata for Models.Artwork.Crop;
}

ValueMetadata *type metadata accessor for Models.Artwork.URLTemplate()
{
  return &type metadata for Models.Artwork.URLTemplate;
}

ValueMetadata *type metadata accessor for Models.Artwork.URLTemplate.Key()
{
  return &type metadata for Models.Artwork.URLTemplate.Key;
}

uint64_t _s7ArtworkV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7ArtworkV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1AC6B105C + 4 * byte_1AC72A16D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1AC6B1090 + 4 * byte_1AC72A168[v4]))();
}

uint64_t sub_1AC6B1090(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6B1098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6B10A0);
  return result;
}

uint64_t sub_1AC6B10AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6B10B4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1AC6B10B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6B10C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7ArtworkV10CodingKeysOMa()
{
  return &_s7ArtworkV10CodingKeysON;
}

unint64_t sub_1AC6B10E0()
{
  unint64_t result;

  result = qword_1EEC8AAD8;
  if (!qword_1EEC8AAD8)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72A6FC, &_s7ArtworkV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAD8);
  }
  return result;
}

unint64_t sub_1AC6B1128()
{
  unint64_t result;

  result = qword_1EEC8AAE0;
  if (!qword_1EEC8AAE0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72A66C, &_s7ArtworkV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AAE0);
  }
  return result;
}

unint64_t sub_1AC6B1170()
{
  unint64_t result;

  result = qword_1EEC8AAE8[0];
  if (!qword_1EEC8AAE8[0])
  {
    result = MEMORY[0x1AF440830](&unk_1AC72A694, &_s7ArtworkV10CodingKeysON);
    atomic_store(result, qword_1EEC8AAE8);
  }
  return result;
}

uint64_t sub_1AC6B11B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1886351971 && a2 == 0xE400000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974696C617571 && a2 == 0xE700000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AC730890)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t type metadata accessor for ImmutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImmutableBox);
}

uint64_t sub_1AC6B1508()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

id JUComponentCollectionViewCell.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

char *JUComponentCollectionViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  objc_super v18;

  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x68);
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  v12 = v4;
  *(_QWORD *)((char *)v12 + qword_1EEC8AB70) = v11(v9, v10);
  *(_QWORD *)((char *)v12 + qword_1EEC8AB78) = MEMORY[0x1E0DEE9E8];

  v18.receiver = v12;
  v18.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell(0, v9, v10, v13);
  v14 = (char *)objc_msgSendSuper2(&v18, sel_initWithFrame_, a1, a2, a3, a4);
  v15 = objc_msgSend(v14, sel_contentView);
  v16 = *(id *)&v14[qword_1EEC8AB70];
  objc_msgSend(v15, sel_addSubview_, v16);

  return v14;
}

uint64_t type metadata accessor for JUComponentCollectionViewCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JUComponentCollectionViewCell);
}

char *sub_1AC6B16C0(double a1, double a2, double a3, double a4)
{
  return JUComponentCollectionViewCell.init(frame:)(a1, a2, a3, a4);
}

id JUComponentCollectionViewCell.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id JUComponentCollectionViewCell.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

id sub_1AC6B1720()
{
  return JUComponentCollectionViewCell.init()();
}

id JUComponentCollectionViewCell.componentView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + qword_1EEC8AB70);
}

Swift::Void __swiftcall JUComponentCollectionViewCell.prepareForReuse()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v4;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68);
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for JUComponentCollectionViewCell(0, v2, v3, v0);
  objc_msgSendSuper2(&v4, sel_prepareForReuse);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 64))(*(_QWORD *)((char *)v1 + qword_1EEC8AB70), v2, v3);
}

void sub_1AC6B17D4(void *a1)
{
  id v1;

  v1 = a1;
  JUComponentCollectionViewCell.prepareForReuse()();

}

id sub_1AC6B1808(void *a1)
{
  return objc_msgSend(a1, sel_size);
}

void *sub_1AC6B1830(void *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  id v8;
  uint64_t AssociatedConformanceWitness;
  double (*v10)(id, uint64_t, uint64_t, double, double);
  id v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  void *v17;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  objc_msgSend(a1, sel_copy);
  sub_1AC726724();
  swift_unknownObjectRelease();
  sub_1AC6B19CC();
  swift_dynamicCast();
  v4 = (*(double (**)(void *))((*v3 & *v1) + 0x88))(a1);
  v6 = v5;
  v7 = *(void **)((char *)v1 + qword_1EEC8AB70);
  v8 = objc_msgSend(v7, sel_traitCollection);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = *(double (**)(id, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 8);
  v11 = v7;
  v12 = swift_checkMetadataState();
  v13 = v10(v8, v12, AssociatedConformanceWitness, v4, v6);
  v15 = v14;

  objc_msgSend(v17, sel_setSize_, v13, v15);
  return v17;
}

unint64_t sub_1AC6B19CC()
{
  unint64_t result;

  result = qword_1EEC8AB80;
  if (!qword_1EEC8AB80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8AB80);
  }
  return result;
}

id sub_1AC6B1A08(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  v5 = a1;
  v6 = sub_1AC6B1830(v4);

  return v6;
}

id sub_1AC6B1A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  void *v6;
  objc_super v8;

  v5 = (objc_class *)type metadata accessor for JUComponentCollectionViewCell(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x68), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70), a4);
  v8.receiver = v4;
  v8.super_class = v5;
  objc_msgSendSuper2(&v8, sel_layoutSubviews);
  v6 = *(void **)((char *)v4 + qword_1EEC8AB70);
  objc_msgSend(v4, sel_frame);
  return objc_msgSend(v6, sel_setFrame_, 0.0, 0.0);
}

void sub_1AC6B1ADC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_1AC6B1A54((uint64_t)v4, v1, v2, v3);

}

void JUComponentCollectionViewCell.apply(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1;
  v20 = sub_1AC725E30();
  v19[4] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v19[3] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 104);
  v7 = *(_QWORD *)(v4 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19[2] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = sub_1AC725F68();
  v21 = *(_QWORD *)(v9 - 8);
  v22 = v9;
  MEMORY[0x1E0C80A78](v9);
  v19[5] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v11);
  v12 = sub_1AC725EF0();
  MEMORY[0x1E0C80A78](v12);
  v19[0] = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = a1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 72))(a1, *(_QWORD *)&v2[qword_1EEC8AB70], v6, v7);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 80))(a1, v6, v7);
  v15 = (uint64_t *)&v2[qword_1EEC8AB78];
  swift_beginAccess();
  *v15 = v14;
  swift_bridgeObjectRelease();
  v23 = v2;
  objc_msgSend(v2, sel_setIsAccessibilityElement_, 1);
  v16 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = swift_getAssociatedConformanceWitness();
  v24 = AssociatedTypeWitness;
  v25 = v16;
  v26 = AssociatedConformanceWitness;
  v27 = v18;
  type metadata accessor for JUComponentConfiguration();
}

uint64_t sub_1AC6B1D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v8 = *(_QWORD *)(v7 - 248) + *(int *)(a1 + 52);
  sub_1AC726148();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v6) == 1)
  {
    sub_1AC6916CC(v2, &qword_1EEC8AB88);
    v9 = *(_QWORD *)(v7 - 240);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v8, v3);
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v3);
    sub_1AC726BEC();
    *(_QWORD *)(v7 - 120) = MEMORY[0x1E0DEC198];
    *(_QWORD *)(v7 - 144) = swift_allocObject();
    sub_1AC725E54();
    *(_OWORD *)(v7 - 176) = 0u;
    *(_OWORD *)(v7 - 160) = 0u;
    v10 = *(_QWORD *)(v7 - 216);
    sub_1AC725F5C();
    swift_bridgeObjectRelease();
    sub_1AC6916CC(v7 - 176, (uint64_t *)&unk_1ED0BE0D0);
    sub_1AC6916CC(v7 - 144, (uint64_t *)&unk_1ED0BE0D0);
    v11 = *(_QWORD *)(v7 - 232);
    sub_1AC725F44();
    sub_1AC725E24();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 224) + 8))(v11, *(_QWORD *)(v7 - 208));
    v12 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)(v7 - 184), sel_setAccessibilityIdentifier_, v12);

    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 200) + 8))(v10, *(_QWORD *)(v7 - 192));
  }
  else
  {
    v14 = *(_QWORD *)(v7 - 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14, v2, v1);
    v15 = *(_QWORD *)(v7 - 240);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v4, v8, v3);
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, v3);
    sub_1AC726BEC();
    v16 = *(_QWORD *)(v7 - 216);
    sub_1AC725F50();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v7 - 232);
    sub_1AC725F44();
    sub_1AC725E24();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 224) + 8))(v17, *(_QWORD *)(v7 - 208));
    v18 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)(v7 - 184), sel_setAccessibilityIdentifier_, v18);

    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 200) + 8))(v16, *(_QWORD *)(v7 - 192));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v14, v1);
  }
}

uint64_t sub_1AC6B2034()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void JUComponentCollectionViewCell.apply(contentsOf:with:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a2;
  v16 = a3;
  v14 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020);
  v12[1] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v12[2] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB90);
  v12[9] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v12[10] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1AC725F14();
  MEMORY[0x1E0C80A78](v7);
  v12[8] = (char *)v12 - v8;
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedConformanceWitness();
  v17 = v9;
  v18 = AssociatedTypeWitness;
  v12[6] = v11;
  v12[7] = AssociatedConformanceWitness;
  v19 = AssociatedConformanceWitness;
  v20 = v11;
  type metadata accessor for JUComponentConfiguration();
}

void sub_1AC6B21F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _BYTE v20[80];

  *(_QWORD *)(v3 - 224) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v3 - 216) = a1;
  MEMORY[0x1E0C80A78](a1);
  v5 = (unint64_t *)&v20[-v4];
  v6 = sub_1AC7266C4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v20[-v9];
  v11 = *(_QWORD *)(v2 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v20[-v15];
  *(_QWORD *)(v3 - 232) = v1;
  sub_1AC725D94();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD18);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v16, v10, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v2);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 184) + 16))(*(_QWORD *)(v3 - 176), *(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 168));
    sub_1AC725F20();
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)(v5);
  }
  v18(v10, 1, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 248) + 16))(*(_QWORD *)(v3 - 240), *(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 232));
  sub_1AC6B2490();
  *(_QWORD *)(v3 - 128) = sub_1AC726A30();
  *(_QWORD *)(v3 - 120) = v19;
  sub_1AC7262C8();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC726910();
  __break(1u);
}

unint64_t sub_1AC6B2490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8AB98;
  if (!qword_1EEC8AB98)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D3F8A0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8AB98);
  }
  return result;
}

uint64_t JUComponentCollectionViewCell.automaticReloadTriggers.getter()
{
  sub_1AC6B355C();
  return swift_bridgeObjectRetain();
}

uint64_t JUComponentCollectionViewCell.applyMatchedReloadTriggers(_:)(uint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70) + 88))(a1, *(_QWORD *)((char *)v1 + qword_1EEC8AB70)) & 1;
}

void JUComponentCollectionViewCell.shouldSelect(contentsOf:with:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a2;
  v16 = a3;
  v14 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020);
  v12[1] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v12[2] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB90);
  v12[9] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v12[10] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1AC725F14();
  MEMORY[0x1E0C80A78](v7);
  v12[8] = (char *)v12 - v8;
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedConformanceWitness();
  v17 = v9;
  v18 = AssociatedTypeWitness;
  v12[7] = AssociatedConformanceWitness;
  v19 = AssociatedConformanceWitness;
  v20 = v11;
  v12[4] = v11;
  type metadata accessor for JUComponentConfiguration();
}

void sub_1AC6B26E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _BYTE v20[80];

  *(_QWORD *)(v3 - 216) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v3 - 208) = a1;
  MEMORY[0x1E0C80A78](a1);
  v5 = (unint64_t *)&v20[-v4];
  v6 = sub_1AC7266C4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v20[-v9];
  v11 = *(_QWORD *)(v2 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v20[-v15];
  *(_QWORD *)(v3 - 232) = v1;
  sub_1AC725D94();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD18);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v16, v10, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v2);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 184) + 16))(*(_QWORD *)(v3 - 176), *(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 168));
    sub_1AC725F20();
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)(v5);
  }
  v18(v10, 1, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 248) + 16))(*(_QWORD *)(v3 - 240), *(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 232));
  sub_1AC6B2490();
  *(_QWORD *)(v3 - 128) = sub_1AC726A30();
  *(_QWORD *)(v3 - 120) = v19;
  sub_1AC7262C8();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC726910();
  __break(1u);
}

void sub_1AC6B299C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for JUComponentConfiguration();
}

BOOL sub_1AC6B2A6C()
{
  _BOOL8 v0;
  _QWORD v2[15];

  sub_1AC725E60();
  v0 = v2[3] != 0;
  sub_1AC6916CC((uint64_t)v2, &qword_1EEC8ABA0);
  return v0;
}

void JUComponentCollectionViewCell.didSelect(contentsOf:with:withMetrics:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a4;
  v18 = a3;
  v15 = a1;
  v16 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020);
  v13[0] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v13[1] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB90);
  v13[8] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v13[9] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1AC725F14();
  MEMORY[0x1E0C80A78](v8);
  v13[7] = (char *)v13 - v9;
  v10 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedConformanceWitness();
  v19 = v10;
  v20 = AssociatedTypeWitness;
  v13[6] = AssociatedConformanceWitness;
  v21 = AssociatedConformanceWitness;
  v22 = v12;
  v13[3] = v12;
  type metadata accessor for JUComponentConfiguration();
}

void sub_1AC6B2C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _BYTE v20[80];

  *(_QWORD *)(v3 - 224) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v3 - 216) = a1;
  MEMORY[0x1E0C80A78](a1);
  v5 = (unint64_t *)&v20[-v4];
  v6 = sub_1AC7266C4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v20[-v9];
  v11 = *(_QWORD *)(v2 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v20[-v15];
  *(_QWORD *)(v3 - 240) = v1;
  sub_1AC725D94();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD18);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v16, v10, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v2);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 192) + 16))(*(_QWORD *)(v3 - 184), *(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 176));
    sub_1AC725F20();
    swift_retain();
    JUComponentConfiguration.init(contentsOf:with:asPartOf:)(v5);
  }
  v18(v10, 1, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 16))(*(_QWORD *)(v3 - 248), *(_QWORD *)(v3 - 168), *(_QWORD *)(v3 - 240));
  sub_1AC6B2490();
  *(_QWORD *)(v3 - 128) = sub_1AC726A30();
  *(_QWORD *)(v3 - 120) = v19;
  sub_1AC7262C8();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC726910();
  __break(1u);
}

void sub_1AC6B2F18()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(qword_1EEC8ABA8);
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for JUComponentConfiguration();
}

uint64_t sub_1AC6B3028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1AC725E60();
  if (!*(_QWORD *)(v4 - 136))
    return sub_1AC6916CC(v4 - 160, &qword_1EEC8ABA0);
  sub_1AC68AAA4((__int128 *)(v4 - 160), v4 - 120);
  sub_1AC68E218(v4 - 120, v4 - 160);
  sub_1AC6B35A0(v3, v1);
  v6 = *(_QWORD *)(v2 + *(int *)(a1 + 60));
  type metadata accessor for JUActionPerformer();
  v7 = swift_allocObject();
  sub_1AC68AAA4((__int128 *)(v4 - 160), v7 + 16);
  sub_1AC6B35E8(v1, v7 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_objectGraph) = v6;
  swift_retain();
  sub_1AC6DCDA0();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v7 + 16);
  sub_1AC6916CC(v7 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext, qword_1EEC8ABA8);
  swift_release();
  swift_deallocClassInstance();
  return __swift_destroy_boxed_opaque_existential_1(v4 - 120);
}

uint64_t sub_1AC6B3150()
{
  uint64_t v0;

  return swift_bridgeObjectRelease();
}

id JUComponentCollectionViewCell.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for JUComponentCollectionViewCell(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x68), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t sub_1AC6B31C8(uint64_t a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6B3200()
{
  sub_1AC6B355C();
  return swift_bridgeObjectRetain();
}

id JUAnyComponentCollectionViewCell.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void JUAnyComponentCollectionViewCell.init(coder:)()
{
  sub_1AC726910();
  __break(1u);
}

Swift::Void __swiftcall JUAnyComponentCollectionViewCell.encode(with:)(NSCoder with)
{
  sub_1AC726910();
  __break(1u);
}

void sub_1AC6B3424()
{
  sub_1AC726910();
  __break(1u);
}

void sub_1AC6B347C()
{
  sub_1AC726910();
  __break(1u);
}

void sub_1AC6B34D4()
{
  sub_1AC726910();
  __break(1u);
}

id JUAnyComponentCollectionViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JUAnyComponentCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AC6B355C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + qword_1EEC8AB78;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1AC6B35A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EEC8ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6B35E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EEC8ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for JUAnyComponentCollectionViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1AC6B3650()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for JUComponentCollectionViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.fitSize(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.shouldSelect(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of JUComponentCollectionViewCell.didSelect(for:withMetrics:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t method lookup function for JUAnyComponentCollectionViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.apply(contentsOf:with:asPartOf:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.shouldSelect(contentsOf:with:asPartOf:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of JUAnyComponentCollectionViewCell.didSelect(contentsOf:with:withMetrics:asPartOf:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t Margins.init(top:left:bottom:right:child:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  return sub_1AC6B3774(a1, (void (*)(_QWORD *, double, double, double, double))Margins.init(top:left:bottom:right:child:), a2, a3, a4, a5);
}

uint64_t Margins.init(insets:child:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  return sub_1AC6B3774(a1, (void (*)(_QWORD *, double, double, double, double))Margins.init(insets:child:), a2, a3, a4, a5);
}

uint64_t sub_1AC6B3774(_QWORD *a1, void (*a2)(_QWORD *, double, double, double, double), double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v12 = a1[3];
  v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, v15);
  a2(v15, a3, a4, a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Margins.init(_:top:leading:bottom:trailing:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  v12 = a1[3];
  v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, a6);
  sub_1AC68AAA4(a2, (uint64_t)(a6 + 5));
  sub_1AC68AAA4(a3, (uint64_t)(a6 + 10));
  sub_1AC68AAA4(a4, (uint64_t)(a6 + 15));
  sub_1AC68AAA4(a5, (uint64_t)(a6 + 20));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

id ObjCFunctions.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ObjCFunctions()
{
  return objc_opt_self();
}

double _sSo7CGPointV5JetUIE19interpolateLinearly7between3and8forInputA2B_AB12CoreGraphics7CGFloatVtFZ_0(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + (1.0 - a5) * a1;
}

float64x2_t sub_1AC6B3988@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t result;

  result = vaddq_f64(vmulq_n_f64(*a1, 1.0 - a4), vmulq_n_f64(*a2, nullsub_1()));
  *a3 = result;
  return result;
}

double static CGRect.interpolateLinearly(between:and:forInput:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  return sub_1AC6B3A3C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1AC6B39F4(CGFloat *a1@<X0>, CGFloat *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)a3 = sub_1AC6B3A3C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3], a4);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = v7;
}

double sub_1AC6B3A3C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  double MinX;
  double v24;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  v24 = (1.0 - a9) * MinX + CGRectGetMinX(v29) * a9;
  v30.origin.x = a1;
  v30.origin.y = a2;
  v30.size.width = a3;
  v30.size.height = a4;
  CGRectGetMinY(v30);
  v31.origin.x = a5;
  v31.origin.y = a6;
  v31.size.width = a7;
  v31.size.height = a8;
  CGRectGetMinY(v31);
  v32.origin.x = a1;
  v32.origin.y = a2;
  v32.size.width = a3;
  v32.size.height = a4;
  CGRectGetWidth(v32);
  v33.origin.x = a5;
  v33.origin.y = a6;
  v33.size.width = a7;
  v33.size.height = a8;
  CGRectGetWidth(v33);
  v34.origin.x = a1;
  v34.origin.y = a2;
  v34.size.width = a3;
  v34.size.height = a4;
  CGRectGetHeight(v34);
  v35.origin.x = a5;
  v35.origin.y = a6;
  v35.size.width = a7;
  v35.size.height = a8;
  CGRectGetHeight(v35);
  return v24;
}

BOOL sub_1AC6B3BA4(void *a1)
{
  id v1;
  id v2;
  _OWORD v4[2];

  v1 = a1;
  v2 = objc_msgSend(v1, sel_contents);
  if (v2)
  {
    sub_1AC726724();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1AC690CC0((uint64_t)v4);

  return v2 != 0;
}

BOOL CALayer.hasContent.getter()
{
  void *v0;
  id v1;
  _OWORD v3[2];

  v1 = objc_msgSend(v0, sel_contents);
  if (v1)
  {
    sub_1AC726724();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_1AC690CC0((uint64_t)v3);
  return v1 != 0;
}

id sub_1AC6B3C94(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id CALayer.focusedFrame.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_frame);
}

double CALayer.measurements(fitting:in:)()
{
  void *v0;
  double v1;

  objc_msgSend(v0, sel_bounds);
  return v1;
}

double sub_1AC6B3CE0(void *a1)
{
  double v1;

  objc_msgSend(a1, sel_bounds);
  return v1;
}

id sub_1AC6B3D0C()
{
  qword_1EEC95C90 = *MEMORY[0x1E0DC4750];
  return (id)qword_1EEC95C90;
}

id sub_1AC6B3D24()
{
  qword_1EEC95C98 = *MEMORY[0x1E0DC4768];
  return (id)qword_1EEC95C98;
}

uint64_t ApplicationStatePresenter.__allocating_init(isEnabled:)(char a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ApplicationStatePresenter.init(isEnabled:)(a1);
  return v2;
}

uint64_t ApplicationStatePresenter.init(isEnabled:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  *(_QWORD *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EEC8AC30);
  swift_allocObject();
  *(_QWORD *)(v2 + 40) = sub_1AC72613C();
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v5 = qword_1EEC8A1C8;
  swift_retain();
  if (v5 != -1)
    swift_once();
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v2, sel_applicationDidBecomeActive, qword_1EEC95C90, 0);
  swift_release();
  v6 = qword_1EEC8A1D0;
  swift_retain();
  if (v6 != -1)
    swift_once();
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v2, sel_applicationDidResignActive, qword_1EEC95C98, 0);

  swift_release();
  return v2;
}

uint64_t ApplicationStatePresenter.deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  sub_1AC6B3F34(v0 + 24);
  swift_release();
  return v0;
}

uint64_t sub_1AC6B3F34(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t ApplicationStatePresenter.__deallocating_deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  sub_1AC6B3F34(v0 + 24);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ApplicationStatePresenter.isEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ApplicationStatePresenter.isEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ApplicationStatePresenter.isEnabled.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t ApplicationStatePresenter.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1AF4409A4](v0 + 24);
}

uint64_t ApplicationStatePresenter.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ApplicationStatePresenter.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4409A4](v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  return sub_1AC6B417C;
}

void sub_1AC6B417C(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t ApplicationStatePresenter.onActiveDidChange.getter()
{
  return swift_retain();
}

uint64_t sub_1AC6B41F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 24;
  swift_beginAccess();
  result = MEMORY[0x1AF4409A4](v4);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1AC6B424C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of ApplicationStatePresenterDelegate.applicationDidBecomeActive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ApplicationStatePresenterDelegate.applicationDidResignActive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1AC6B42B4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t ObjectType;

  result = swift_beginAccess();
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    swift_beginAccess();
    if (MEMORY[0x1AF4409A4](v0 + 24))
    {
      v2 = *(_QWORD *)(v0 + 32);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
      swift_unknownObjectRelease();
    }
    return sub_1AC726130();
  }
  return result;
}

uint64_t sub_1AC6B4364()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t ObjectType;

  result = swift_beginAccess();
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    swift_beginAccess();
    if (MEMORY[0x1AF4409A4](v0 + 24))
    {
      v2 = *(_QWORD *)(v0 + 32);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
      swift_unknownObjectRelease();
    }
    return sub_1AC726130();
  }
  return result;
}

uint64_t sub_1AC6B4410(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t type metadata accessor for ApplicationStatePresenter()
{
  return objc_opt_self();
}

uint64_t method lookup function for ApplicationStatePresenter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ApplicationStatePresenter.__allocating_init(isEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t JUComponentShelfLayoutConfiguration.init(forContentsOf:with:at:in:asPartOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;

  *a8 = sub_1AC6A8E00(MEMORY[0x1E0DEE9D8]);
  v17 = (int *)type metadata accessor for JUComponentShelfLayoutConfiguration(0, a6, a7, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))((char *)a8 + v17[9], a1, a6);
  v18 = (char *)a8 + v17[10];
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a2, v19);
  v20 = (char *)a8 + v17[11];
  v21 = sub_1AC7259A4();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a3, v21);
  *(unint64_t *)((char *)a8 + v17[12]) = a4;
  *(unint64_t *)((char *)a8 + v17[13]) = a5;
  return result;
}

uint64_t type metadata accessor for JUComponentShelfLayoutConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JUComponentShelfLayoutConfiguration);
}

uint64_t JUComponentShelfLayoutConfiguration.model.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t JUComponentShelfLayoutConfiguration.model.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

double (*JUComponentShelfLayoutConfiguration.model.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t JUComponentShelfLayoutConfiguration.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

double (*JUComponentShelfLayoutConfiguration.state.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.indexPath.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_1AC7259A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t JUComponentShelfLayoutConfiguration.indexPath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = sub_1AC7259A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

double (*JUComponentShelfLayoutConfiguration.indexPath.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.layoutEnvironment.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t JUComponentShelfLayoutConfiguration.layoutEnvironment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 48);
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

double (*JUComponentShelfLayoutConfiguration.layoutEnvironment.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.objectGraph.getter()
{
  return swift_retain();
}

uint64_t JUComponentShelfLayoutConfiguration.objectGraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 52);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

double (*JUComponentShelfLayoutConfiguration.objectGraph.modify())(void)
{
  return nullsub_1;
}

uint64_t JUComponentShelfLayoutConfiguration.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  v28 = a2;
  v30 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = sub_1AC7266C4();
  v10 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v12 = (char *)&v27 - v11;
  v13 = sub_1AC725E78();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v5;
  v29 = a1;
  sub_1AC725E84();
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_1AC6B4DF8((uint64_t)v16), (v19 & 1) != 0))
  {
    sub_1AC69FE7C(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (*((_QWORD *)&v32 + 1))
  {
    sub_1AC6900D4(&v31, v33);
    sub_1AC69FE7C((uint64_t)v33, (uint64_t)&v31);
    v20 = swift_dynamicCast();
    v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if (v20)
    {
      v22(v12, 0, 1, AssociatedTypeWitness);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v30, v12, AssociatedTypeWitness);
    }
    else
    {
      v22(v12, 1, 1, AssociatedTypeWitness);
      v24 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v27);
      MEMORY[0x1E0C80A78](v24);
      v25 = *(_QWORD *)(v28 + 24);
      *(&v27 - 6) = *(_QWORD *)(v28 + 16);
      *(&v27 - 5) = a3;
      *(&v27 - 4) = v25;
      *(&v27 - 3) = a4;
      v26 = v29;
      *(&v27 - 2) = (uint64_t)v33;
      *(&v27 - 1) = v26;
      sub_1AC725F38();
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    }
  }
  else
  {
    sub_1AC690CC0((uint64_t)&v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  }
}

uint64_t sub_1AC6B4A14()
{
  sub_1AC726868();
  sub_1AC7262C8();
  sub_1AC726904();
  sub_1AC7262C8();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_getAssociatedTypeWitness();
  sub_1AC726BEC();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return 0;
}

uint64_t JUComponentShelfLayoutConfiguration.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  sub_1AC6B52A4(a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*JUComponentShelfLayoutConfiguration.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v15 = malloc(v14);
  v11[8] = v15;
  JUComponentShelfLayoutConfiguration.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1AC6B4C80;
}

void sub_1AC6B4C80(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 56), v4, v5);
    sub_1AC6B52A4((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_1AC6B52A4(*(_QWORD *)(*(_QWORD *)a1 + 64));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

id JUComponentShelfLayoutConfiguration.traitCollection.getter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + *(int *)(a1 + 48)), sel_traitCollection);
}

unint64_t sub_1AC6B4D78(uint64_t a1)
{
  uint64_t v2;

  sub_1AC72622C();
  sub_1AC726AFC();
  sub_1AC7262A4();
  v2 = sub_1AC726B2C();
  swift_bridgeObjectRelease();
  return sub_1AC690170(a1, v2);
}

unint64_t sub_1AC6B4DF8(uint64_t a1)
{
  uint64_t v2;

  sub_1AC725E78();
  sub_1AC6B60B0(&qword_1EEC8ACC0, MEMORY[0x1E0D3FC38]);
  v2 = sub_1AC7261C0();
  return sub_1AC6B4F84(a1, v2);
}

uint64_t sub_1AC6B4E5C()
{
  return sub_1AC6B4A14();
}

unint64_t sub_1AC6B4E6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AC726694();
  return sub_1AC6B50BC(a1, v2);
}

unint64_t sub_1AC6B4E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1AC726AFC();
  sub_1AC7262A4();
  v4 = sub_1AC726B2C();
  return sub_1AC6B51C4(a1, a2, v4);
}

unint64_t sub_1AC6B4F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1AC726AFC();
  swift_bridgeObjectRetain();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  v4 = sub_1AC726B2C();
  return sub_1AC6B51C4(a1, a2, v4);
}

unint64_t sub_1AC6B4F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1AC725E78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1AC6B60B0(&qword_1EEC8ACC8, MEMORY[0x1E0D3FC40]);
      v14 = sub_1AC7261FC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1AC6B50BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1AC6ABCAC();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1AC7266A0();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1AC7266A0();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1AC6B51C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1AC726A78() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1AC726A78() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1AC6B52A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v8[4];

  v2 = sub_1AC725E78();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC725E84();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[3] = AssociatedTypeWitness;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0, a1, AssociatedTypeWitness);
  return sub_1AC6D5DA0((uint64_t)v8, (uint64_t)v4);
}

uint64_t dispatch thunk of static JUComponentShelfLayout.layoutSection(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1AC6B537C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1AC6B5384()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1AC6B6054();
    if (v1 <= 0x3F)
    {
      sub_1AC7259A4();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1AC6B5450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v38 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 64);
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v8 = *(_QWORD *)(v37 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v7 + v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = sub_1AC7259A4();
  v13 = a2;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v11 + v15;
  v17 = *(_QWORD *)(v14 + 64) + 7;
  v18 = v9 | v15 | v5;
  v19 = (v9 | *(_DWORD *)(v14 + 80) | v5) & 0x100000;
  v20 = *v13;
  *a1 = *v13;
  if (v18 > 7
    || v19 != 0
    || ((((v17 + ((v16 + ((v10 + ((v6 + 8) & ~v6)) & ~(unint64_t)v9)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v30 = (uint64_t *)(v20 + ((v18 & 0xF8 ^ 0x1F8) & (v18 + 16)));
  }
  else
  {
    v35 = ~(unint64_t)v9;
    v36 = ~v15;
    v23 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v24 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v26 = v12;
    swift_bridgeObjectRetain();
    v25(v23, v24, v38);
    v27 = (v23 + v10) & v35;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v27, (v24 + v10) & v35, v37);
    v28 = (v27 + v16) & v36;
    v29 = ((v24 + v10) & v35) + v16;
    v30 = a1;
    v31 = v29 & v36;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v28, v29 & v36, v26);
    v32 = (_QWORD *)((v17 + v28) & 0xFFFFFFFFFFFFF8);
    v33 = (_QWORD *)((v17 + v31) & 0xFFFFFFFFFFFFF8);
    *v32 = *v33;
    *(_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v30;
}

uint64_t sub_1AC6B563C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = sub_1AC7259A4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))((v9 + v10 + *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80), v11);
  swift_unknownObjectRelease();
  return swift_release();
}

_QWORD *sub_1AC6B5714(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v10 + v13;
  v15 = (v10 + v13 + v7) & ~v13;
  v16 = (v14 + v8) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v16, v11);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = sub_1AC7259A4();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v17 + v20 + v15) & ~v20;
  v22 = (v17 + v20 + v16) & ~v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v21, v22, v18);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (_QWORD *)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1AC6B583C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + v8) & ~v13;
  v15 = (v10 + v13 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v14, v15, v11);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = sub_1AC7259A4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v16 + v19 + v14) & ~v19;
  v21 = (v16 + v19 + v15) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))(v20, v21, v17);
  v22 = *(_QWORD *)(v18 + 64) + 7;
  v23 = (_QWORD *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v22 + v21;
  v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v23 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1AC6B5988(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v11 + v6) & ~v11;
  v13 = (v8 + v11 + v7) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v13, v9);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = sub_1AC7259A4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v14 + v17 + v12) & ~v17;
  v19 = (v14 + v17 + v13) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v18, v19, v15);
  v20 = *(_QWORD *)(v16 + 64) + 7;
  v21 = (_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1AC6B5A9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + v8) & ~v13;
  v15 = (v10 + v13 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v14, v15, v11);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = sub_1AC7259A4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v16 + v19 + v14) & ~v19;
  v21 = (v16 + v19 + v15) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(v20, v21, v17);
  v22 = *(_QWORD *)(v18 + 64) + 7;
  v23 = (_QWORD *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  swift_unknownObjectRelease();
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1AC6B5BD0(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  v12 = sub_1AC7259A4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  if (v11 <= v14)
    v15 = *(_DWORD *)(v13 + 84);
  else
    v15 = v11;
  if (v15 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  else
    v16 = v15;
  if (!a2)
    return 0;
  v17 = v12;
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = *(_QWORD *)(v6 + 64);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = *(_QWORD *)(v9 + 64) + v21;
  if (v16 < a2)
  {
    if (((((((*(_QWORD *)(v13 + 64) + ((v22 + ((v19 + v20 + ((v18 + 8) & ~v18)) & ~v20)) & ~v21) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v23 = 2;
    else
      v23 = a2 - v16 + 1;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v25 = v24;
    else
      v25 = 0;
    __asm { BR              X4 }
  }
  if ((v15 & 0x80000000) != 0)
  {
    v28 = ((unint64_t)a1 + v18 + 8) & ~v18;
    if ((_DWORD)v7 == v16)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v28, v7, v5);
    }
    else
    {
      v29 = (v28 + v19 + v20) & ~v20;
      if ((_DWORD)v10 == v16)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v29, v10, v8);
      else
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v22 + v29) & ~v21, v14, v17);
    }
  }
  else
  {
    v27 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    return (v27 + 1);
  }
}

void sub_1AC6B5DEC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  v11 = *(_QWORD *)(sub_1AC7259A4() - 8);
  if (v10 <= *(_DWORD *)(v11 + 84))
    v12 = *(_DWORD *)(v11 + 84);
  else
    v12 = v10;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v13 >= a3)
  {
    v16 = 0u;
    if (a2 <= v13)
      goto LABEL_23;
  }
  else
  {
    if (((((*(_DWORD *)(v11 + 64)
           + ((*(_DWORD *)(v9 + 64)
             + *(unsigned __int8 *)(v11 + 80)
             + ((*(_DWORD *)(v7 + 64)
               + *(unsigned __int8 *)(v9 + 80)
               + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & ~*(unsigned __int8 *)(v11 + 80))
           + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v14 = a3 - v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v13)
LABEL_23:
      __asm { BR              X4 }
  }
  if (((((*(_DWORD *)(v11 + 64)
         + ((*(_DWORD *)(v9 + 64)
           + *(unsigned __int8 *)(v11 + 80)
           + ((*(_DWORD *)(v7 + 64)
             + *(unsigned __int8 *)(v9 + 80)
             + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & ~*(unsigned __int8 *)(v11 + 80))
         + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v17 = ~v13 + a2;
    bzero(a1, ((((*(_QWORD *)(v11 + 64)+ ((*(_QWORD *)(v9 + 64)+ *(unsigned __int8 *)(v11 + 80)+ ((*(_QWORD *)(v7 + 64)+ *(unsigned __int8 *)(v9 + 80)+ ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_1AC6B5F74()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1AC6B5FE0);
}

void sub_1AC6B5F7C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1AC6B5F84);
  JUMPOUT(0x1AC6B5FE0);
}

void sub_1AC6B5F94()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1AC6B5FE0);
}

void sub_1AC6B5F9C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1AC6B5FE0);
}

void sub_1AC6B5FA4()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (v1)
  {
    if ((v0 & 0x80000000) == 0)
    {
      if ((v1 & 0x80000000) == 0)
        JUMPOUT(0x1AC6B5FDCLL);
      JUMPOUT(0x1AC6B5FD8);
    }
    JUMPOUT(0x1AC6B5FB0);
  }
  JUMPOUT(0x1AC6B5FE0);
}

void sub_1AC6B6054()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0BE040)
  {
    v0 = sub_1AC725E0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0BE040);
  }
}

uint64_t dispatch thunk of static JUComponentShelfLayoutConfigurationKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1AC6B60B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1AC725E78();
    result = MEMORY[0x1AF440830](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AC6B60F0()
{
  id *v0;

  return swift_deallocObject();
}

uint64_t LayoutAttributedTextViewPlaceholder.__allocating_init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  LayoutAttributedTextViewPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t LayoutAttributedTextViewPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v12;
  id v13;
  void *v14;
  void *v15;

  *(_QWORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(v6 + 72) = 0;
  if (a1)
  {
    v12 = a1;
  }
  else
  {
    v13 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v14 = (void *)sub_1AC726208();
    v12 = objc_msgSend(v13, sel_initWithString_, v14);

  }
  *(_QWORD *)(v6 + 16) = v12;
  swift_beginAccess();
  v15 = *(void **)(v6 + 96);
  *(_QWORD *)(v6 + 96) = a2;

  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 80) = a6;
  *(_QWORD *)(v6 + 88) = a4;
  return v6;
}

id LayoutAttributedTextViewPlaceholder.attributedText.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 16);
}

void LayoutAttributedTextViewPlaceholder.attributedText.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*LayoutAttributedTextViewPlaceholder.attributedText.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.textAlignment.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t LayoutAttributedTextViewPlaceholder.textAlignment.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.textAlignment.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.lineSpacing.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t LayoutAttributedTextViewPlaceholder.lineSpacing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.lineSpacing.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void LayoutAttributedTextViewPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  _QWORD *v3;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  swift_beginAccess();
  v7 = (void *)v3[2];
  swift_beginAccess();
  v8 = (void *)v3[12];
  if (v8)
  {
    swift_beginAccess();
    v9 = v3[3];
    swift_beginAccess();
    v10 = v3[11];
    swift_beginAccess();
    v11 = v3[4];
    swift_beginAccess();
    TextMeasurable.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(v7, v8, v9, v10, v11, v3[10], 0, (uint64_t)&v13);
    v12 = v13;
    TextMeasurable.measurements(fitting:in:)(a1, a2, a3);

  }
  else
  {
    __break(1u);
  }
}

uint64_t LayoutAttributedTextViewPlaceholder.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t result;
  void *v5;
  id v6;
  id v7;

  v1 = v0;
  sub_1AC726868();
  v2 = sub_1AC726BEC();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_beginAccess();
  v3 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1AC72622C();

  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  result = swift_beginAccess();
  v5 = *(void **)(v1 + 96);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v6, sel_description);
    sub_1AC72622C();

    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    sub_1AC7262C8();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL LayoutAttributedTextViewPlaceholder.hasContent.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  v2 = sub_1AC72622C();
  v4 = v3;

  swift_bridgeObjectRelease();
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  return v5 != 0;
}

double _s5JetUI35LayoutAttributedTextViewPlaceholderC12focusedFrameSo6CGRectVvg_0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 40);
}

uint64_t LayoutAttributedTextViewPlaceholder.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;
  uint64_t result;

  result = swift_beginAccess();
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.frame.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.isHidden.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t LayoutAttributedTextViewPlaceholder.isHidden.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 72) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.isHidden.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.numberOfLines.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 80);
}

uint64_t LayoutAttributedTextViewPlaceholder.numberOfLines.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.numberOfLines.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutAttributedTextViewPlaceholder.lineBreakMode.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 88);
}

uint64_t LayoutAttributedTextViewPlaceholder.lineBreakMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*LayoutAttributedTextViewPlaceholder.lineBreakMode.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *LayoutAttributedTextViewPlaceholder.font.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 96);
  v2 = v1;
  return v1;
}

void LayoutAttributedTextViewPlaceholder.font.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = a1;

}

uint64_t (*LayoutAttributedTextViewPlaceholder.font.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

BOOL LayoutAttributedTextViewPlaceholder.isTextExtraTall.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  char v3;
  _BOOL8 v4;

  swift_beginAccess();
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1AC72622C();

  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v2 = sub_1AC725854();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  v4 = (v3 & 1) == 0;
  swift_bridgeObjectRelease();
  return v4;
}

void LayoutAttributedTextViewPlaceholder.languageAwareOutsets.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1AC72622C();

  swift_beginAccess();
  v2 = *(void **)(v0 + 96);
  if (v2)
  {
    v3 = qword_1ED0BE2A8;
    v4 = v2;
    if (v3 != -1)
      swift_once();
    v5 = sub_1AC725854();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED0BE180);
    sub_1AC68F334();
    sub_1AC726700();
    if ((v6 & 1) == 0)
      UIFont.languageAwareOutsets.getter();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t LayoutAttributedTextViewPlaceholder.textLength.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_string);
  sub_1AC72622C();

  v2 = sub_1AC7262B0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t LayoutAttributedTextViewPlaceholder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LayoutAttributedTextViewPlaceholder.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1AC6B6E8C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 80);
}

uint64_t sub_1AC6B6EC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 80) = a1;
  return result;
}

uint64_t (*sub_1AC6B6F08())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1AC6B6F48()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 88);
}

uint64_t sub_1AC6B6F84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 88) = a1;
  return result;
}

uint64_t (*sub_1AC6B6FC4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *sub_1AC6B7004()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(void **)(v1 + 96);
  v3 = v2;
  return v2;
}

void sub_1AC6B7048(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = a1;

}

uint64_t (*sub_1AC6B7090())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

BOOL sub_1AC6B70D0()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  char v4;
  _BOOL8 v5;

  v1 = *v0;
  swift_beginAccess();
  v2 = objc_msgSend(*(id *)(v1 + 16), sel_string);
  sub_1AC72622C();

  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v3 = sub_1AC725854();
  __swift_project_value_buffer(v3, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  v5 = (v4 & 1) == 0;
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1AC6B71C0()
{
  LayoutAttributedTextViewPlaceholder.languageAwareOutsets.getter();
}

uint64_t sub_1AC6B71E0()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = *v0;
  swift_beginAccess();
  v2 = objc_msgSend(*(id *)(v1 + 16), sel_string);
  sub_1AC72622C();

  v3 = sub_1AC7262B0();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1AC6B7268()
{
  return LayoutAttributedTextViewPlaceholder.description.getter();
}

uint64_t sub_1AC6B728C(double a1, double a2, double a3, double a4)
{
  double **v4;
  double *v9;
  uint64_t result;

  v9 = *v4;
  result = swift_beginAccess();
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  v9[8] = a4;
  return result;
}

uint64_t (*sub_1AC6B72EC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1AC6B732C(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 72) = a1;
  return result;
}

uint64_t (*sub_1AC6B736C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

BOOL sub_1AC6B73AC()
{
  return LayoutAttributedTextViewPlaceholder.hasContent.getter();
}

double sub_1AC6B73D0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 40);
}

void sub_1AC6B7410(void *a1, double a2, double a3)
{
  LayoutAttributedTextViewPlaceholder.measurements(fitting:in:)(a1, a2, a3);
}

uint64_t type metadata accessor for LayoutAttributedTextViewPlaceholder()
{
  return objc_opt_self();
}

uint64_t method lookup function for LayoutAttributedTextViewPlaceholder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LayoutAttributedTextViewPlaceholder.__allocating_init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

UIEdgeInsets __swiftcall CGFloat.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1;
  double v2;
  double v3;
  double v4;
  UIEdgeInsets result;

  v1 = *MEMORY[0x1E0DC49E8];
  v2 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v3 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v4 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

double sub_1AC6B7480()
{
  return *MEMORY[0x1E0DC49E8];
}

double Float.rawValue(in:)(float a1)
{
  return a1;
}

UIEdgeInsets __swiftcall Float.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1;
  double v2;
  double v3;
  double v4;
  UIEdgeInsets result;

  v1 = *MEMORY[0x1E0DC49E8];
  v2 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v3 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v4 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

double JUMeasurements.toNearestPixel.getter(double a1)
{
  return ceil(a1);
}

float64x2_t Baselines.toNearestPixel.getter@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64x2_t result;

  result = vrndmq_f64(*v1);
  *a1 = result;
  return result;
}

double CGPoint.toNearestPixel.getter(double a1)
{
  return floor(a1);
}

double CGSize.toNearestPixel.getter(double a1)
{
  return ceil(a1);
}

double CGRect.toNearestPixel.getter(double a1)
{
  return floor(a1);
}

float64x2_t LayoutRect.toNearestPixel.getter@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t result;

  v2 = vrndpq_f64(v1[1]);
  *a1 = vrndmq_f64(*v1);
  a1[1] = v2;
  result = vrndmq_f64(v1[2]);
  a1[2] = result;
  return result;
}

uint64_t dispatch thunk of FlowActionFactory.makeViewController(toSatisfy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

double ZStack.EdgePosition.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  sub_1AC6B7598(a1, (uint64_t)&v6);
  v4 = v7;
  sub_1AC6B75D4(a1);
  if (v4)
  {
    sub_1AC68AAA4(&v6, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1AC6B7598(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisjointStack.EdgePosition(a2, a1);
  return a2;
}

uint64_t sub_1AC6B75D4(uint64_t a1)
{
  destroy for DisjointStack.EdgePosition(a1);
  return a1;
}

double ZStack.EdgePosition.base.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  double result;
  __int128 v4;
  uint64_t v5;

  sub_1AC6B765C(v1, (uint64_t)&v4);
  if (v5)
  {
    sub_1AC68AAA4(&v4, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1AC6B765C(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

double ZStack.Properties.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ZStack.Properties.init(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[40];
  __int128 v15;
  uint64_t v16;

  a2[5] = 0u;
  v4 = (uint64_t)(a2 + 5);
  a2[8] = 0u;
  a2[9] = 0u;
  v5 = (uint64_t)a2 + 40;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  sub_1AC6B7598(a1, (uint64_t)v14);
  sub_1AC6B7598((uint64_t)v14, (uint64_t)&v15);
  v6 = v16;
  sub_1AC6B75D4((uint64_t)v14);
  if (v6)
  {
    sub_1AC68AAA4(&v15, (uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  sub_1AC68AAA4(&v11, (uint64_t)&v15);
  sub_1AC6B78B4(&v15, (uint64_t)a2);
  sub_1AC6B7598(a1 + 40, (uint64_t)v14);
  sub_1AC6B7598((uint64_t)v14, (uint64_t)&v15);
  v7 = v16;
  sub_1AC6B75D4((uint64_t)v14);
  if (v7)
  {
    sub_1AC68AAA4(&v15, (uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  sub_1AC68AAA4(&v11, (uint64_t)&v15);
  sub_1AC6B78B4(&v15, v5);
  sub_1AC6B7598(a1 + 80, (uint64_t)v14);
  sub_1AC6B7598((uint64_t)v14, (uint64_t)&v15);
  v8 = v16;
  sub_1AC6B75D4((uint64_t)v14);
  if (v8)
  {
    sub_1AC68AAA4(&v15, (uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  sub_1AC68AAA4(&v11, (uint64_t)&v15);
  sub_1AC6B78B4(&v15, v4);
  sub_1AC6B7598(a1 + 120, (uint64_t)v14);
  sub_1AC6B7598((uint64_t)v14, (uint64_t)&v15);
  v9 = v16;
  sub_1AC6B75D4((uint64_t)v14);
  if (v9)
  {
    sub_1AC68AAA4(&v15, (uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  sub_1AC68AAA4(&v11, (uint64_t)&v15);
  sub_1AC6B78B4(&v15, (uint64_t)a2 + 120);
  return sub_1AC6B7918(a1);
}

uint64_t ZStack.Properties.topEdge.setter(__int128 *a1)
{
  uint64_t v1;

  return sub_1AC6B78B4(a1, v1);
}

uint64_t sub_1AC6B78B4(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

uint64_t ZStack.Properties.leadingEdge.setter(__int128 *a1)
{
  uint64_t v1;

  return sub_1AC6B78B4(a1, v1 + 40);
}

uint64_t ZStack.Properties.bottomEdge.setter(__int128 *a1)
{
  uint64_t v1;

  return sub_1AC6B78B4(a1, v1 + 80);
}

uint64_t ZStack.Properties.trailingEdge.setter(__int128 *a1)
{
  uint64_t v1;

  return sub_1AC6B78B4(a1, v1 + 120);
}

uint64_t sub_1AC6B7918(uint64_t a1)
{
  destroy for DisjointStack.Properties(a1);
  return a1;
}

uint64_t ZStack.Properties.topEdge.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;

  return sub_1AC6B765C(v1, a1);
}

double (*ZStack.Properties.topEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.leadingEdge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6B765C((__int128 *)(v1 + 40), a1);
}

double (*ZStack.Properties.leadingEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.bottomEdge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6B765C((__int128 *)(v1 + 80), a1);
}

double (*ZStack.Properties.bottomEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.trailingEdge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6B765C((__int128 *)(v1 + 120), a1);
}

double (*ZStack.Properties.trailingEdge.modify())(void)
{
  return nullsub_1;
}

uint64_t ZStack.Properties.base.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[2];

  *(_OWORD *)(a1 + 80) = 0u;
  v3 = a1 + 80;
  *(_WORD *)(a1 + 160) = 0;
  v4 = a1 + 40;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1AC6B765C(v1, (uint64_t)v11);
  sub_1AC6B765C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1AC68AAA4(&v6, (uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  sub_1AC6B7B54((uint64_t)v11);
  sub_1AC6B7B8C((uint64_t)&v8, a1);
  sub_1AC6B765C((__int128 *)((char *)v1 + 40), (uint64_t)v11);
  sub_1AC6B765C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1AC68AAA4(&v6, (uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  sub_1AC6B7B54((uint64_t)v11);
  sub_1AC6B7B8C((uint64_t)&v8, v4);
  sub_1AC6B765C(v1 + 5, (uint64_t)v11);
  sub_1AC6B765C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1AC68AAA4(&v6, (uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  sub_1AC6B7B54((uint64_t)v11);
  sub_1AC6B7B8C((uint64_t)&v8, v3);
  sub_1AC6B765C((__int128 *)((char *)v1 + 120), (uint64_t)v11);
  sub_1AC6B765C(v11, (uint64_t)&v6);
  if (v7)
  {
    sub_1AC68AAA4(&v6, (uint64_t)&v8);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  sub_1AC6B7B54((uint64_t)v11);
  return sub_1AC6B7B8C((uint64_t)&v8, a1 + 120);
}

uint64_t sub_1AC6B7B54(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t sub_1AC6B7B8C(uint64_t a1, uint64_t a2)
{
  assignWithTake for DisjointStack.EdgePosition(a2, a1);
  return a2;
}

void ZStack.Placements.union.getter(CGFloat *a1@<X8>)
{
  DisjointStack.Placements.union.getter(a1);
}

double ZStack.Placements.measure.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  CGFloat v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v1 = *((_QWORD *)v0 + 6);
  v2 = *((_QWORD *)v0 + 11);
  v3 = *((_BYTE *)v0 + 96);
  v4 = v0[1];
  v7 = *v0;
  v8 = v4;
  v9 = v0[2];
  v10 = v1;
  v11 = *(__int128 *)((char *)v0 + 56);
  v12 = *(__int128 *)((char *)v0 + 72);
  v13 = v2;
  v14 = v3;
  DisjointStack.Placements.union.getter(v6);
  return ceil(v6[2]);
}

void sub_1AC6B7CA8(CGFloat *a1@<X8>)
{
  DisjointStack.Placements.union.getter(a1);
}

__n128 sub_1AC6B7D0C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_BYTE *)(v1 + 96);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  result = *(__n128 *)(v1 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 96) = v4;
  return result;
}

uint64_t sub_1AC6B7D48()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[6];
  char v8;

  v1 = *(_OWORD *)(v0 + 80);
  v7[4] = *(_OWORD *)(v0 + 64);
  v7[5] = v1;
  v8 = *(_BYTE *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v3;
  sub_1AC70FCC8((uint64_t)v7);
  v5 = v4;
  sub_1AC6B9624((uint64_t)v7);
  return v5;
}

uint64_t sub_1AC6B7DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC70D318(a1, a2, a3);
}

uint64_t sub_1AC6B7DE8(uint64_t a1, void (*a2)(_OWORD *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[10];
  __int16 v11;
  _OWORD v12[10];

  v4 = *(_OWORD *)(a1 + 144);
  v10[8] = *(_OWORD *)(a1 + 128);
  v10[9] = v4;
  v11 = *(_WORD *)(a1 + 160);
  v5 = *(_OWORD *)(a1 + 80);
  v10[4] = *(_OWORD *)(a1 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v10[6] = *(_OWORD *)(a1 + 96);
  v10[7] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v8;
  ZStack.Properties.init(_:)((uint64_t)v10, v12);
  a2(v12);
  ZStack.Properties.base.getter(a1);
  return sub_1AC6B9664((uint64_t)v12);
}

uint64_t ZStack.init(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[10];
  __int16 v15;
  _OWORD v16[10];
  __int128 v17;

  if (a1)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = (void (*)(uint64_t))sub_1AC6B846C;
  }
  else
  {
    v7 = 0;
  }
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  if (a1)
  {
    sub_1AC6B83FC(a1);
    v7((uint64_t)v14);
  }
  else
  {
    sub_1AC6B83FC(0);
  }
  sub_1AC6B840C((uint64_t)v14, (uint64_t)v16);
  sub_1AC68AD94((uint64_t)v7);
  sub_1AC6B7918((uint64_t)v14);
  *((_QWORD *)&v17 + 1) = MEMORY[0x1E0DEE9D8];
  v8 = v16[9];
  a3[8] = v16[8];
  a3[9] = v8;
  a3[10] = v17;
  v9 = v16[5];
  a3[4] = v16[4];
  a3[5] = v9;
  v10 = v16[7];
  a3[6] = v16[6];
  a3[7] = v10;
  v11 = v16[1];
  *a3 = v16[0];
  a3[1] = v11;
  v12 = v16[3];
  a3[2] = v16[2];
  a3[3] = v12;
  return sub_1AC68AD94(a1);
}

uint64_t ZStack.add(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[2];
  _OWORD v24[9];
  _OWORD v25[2];
  _BYTE v26[176];

  if (a2)
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = a3;
    sub_1AC6B840C(v3, (uint64_t)v26);
    sub_1AC6B83FC(a2);
    sub_1AC6B7DE8((uint64_t)v26, *(void (**)(_OWORD *))(v7 + 16));
    v8 = sub_1AC6B9698;
  }
  else
  {
    sub_1AC6B840C(v3, (uint64_t)v26);
    sub_1AC6B83FC(0);
    v8 = 0;
  }
  sub_1AC68E218(a1, (uint64_t)v23);
  sub_1AC6B840C((uint64_t)v26, (uint64_t)v24 + 8);
  v9 = *(_QWORD **)(v3 + 168);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = sub_1AC6A2A90(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = sub_1AC6A2A90((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[26 * v11];
  v12[2] = v23[0];
  v13 = v23[1];
  v14 = v24[0];
  v15 = v24[2];
  v12[5] = v24[1];
  v12[6] = v15;
  v12[3] = v13;
  v12[4] = v14;
  v16 = v24[3];
  v17 = v24[4];
  v18 = v24[6];
  v12[9] = v24[5];
  v12[10] = v18;
  v12[7] = v16;
  v12[8] = v17;
  v19 = v24[7];
  v20 = v24[8];
  v21 = v25[0];
  *(_OWORD *)((char *)v12 + 218) = *(_OWORD *)((char *)v25 + 10);
  v12[12] = v20;
  v12[13] = v21;
  v12[11] = v19;
  *(_QWORD *)(v3 + 168) = v9;
  sub_1AC6B7918((uint64_t)v26);
  return sub_1AC68AD94((uint64_t)v8);
}

uint64_t ZStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_1AC6B8474(v4, a4);
  return ZStack.add(_:with:)(a1, a2, a3);
}

uint64_t ZStack.insert(_:at:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  _OWORD v12[11];
  _OWORD v13[2];
  _OWORD v14[2];
  _OWORD v15[9];
  _OWORD v16[2];
  _BYTE v17[168];

  if (a3)
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a3;
    *(_QWORD *)(v9 + 24) = a4;
    sub_1AC6B840C(v4, (uint64_t)v17);
    sub_1AC6B83FC(a3);
    sub_1AC6B7DE8((uint64_t)v17, *(void (**)(_OWORD *))(v9 + 16));
    v10 = sub_1AC6B9698;
  }
  else
  {
    sub_1AC6B840C(v4, (uint64_t)v17);
    sub_1AC6B83FC(0);
    v10 = 0;
  }
  sub_1AC68E218(a1, (uint64_t)v14);
  result = sub_1AC6B840C((uint64_t)v17, (uint64_t)v15 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 168) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    v12[10] = v15[8];
    v13[0] = v16[0];
    *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v16 + 10);
    v12[6] = v15[4];
    v12[7] = v15[5];
    v12[8] = v15[6];
    v12[9] = v15[7];
    v12[2] = v15[0];
    v12[3] = v15[1];
    v12[4] = v15[2];
    v12[5] = v15[3];
    v12[0] = v14[0];
    v12[1] = v14[1];
    sub_1AC6A40BC(a2, a2, (uint64_t)v12);
    sub_1AC6B7918((uint64_t)v17);
    return sub_1AC68AD94((uint64_t)v10);
  }
  __break(1u);
  return result;
}

uint64_t ZStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  sub_1AC6B8474(v5, a5);
  return ZStack.insert(_:at:with:)(a1, a2, a3, a4);
}

void __swiftcall ZStack.layout(relativeTo:with:)(JetUI::ZStack::Placements *__return_ptr retstr, __C::CGRect relativeTo, UITraitCollection with)
{
  uint64_t v3;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _QWORD *v9;
  uint64_t v10;
  objc_class *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  height = relativeTo.size.height;
  width = relativeTo.size.width;
  y = relativeTo.origin.y;
  x = relativeTo.origin.x;
  v9 = *(_QWORD **)(v3 + 168);
  v10 = v9[2];
  v11 = with.super.isa;
  swift_bridgeObjectRetain();
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC897B8);
    v12 = (_QWORD *)sub_1AC7263F4();
    v12[2] = v10;
    v13 = 4;
    do
    {
      v14 = &v12[v13];
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_BYTE *)v14 + 32) = 1;
      v13 += 5;
      --v10;
    }
    while (v10);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  retstr->base.boundingRect.origin.x = x;
  retstr->base.boundingRect.origin.y = y;
  retstr->base.boundingRect.size.width = width;
  retstr->base.boundingRect.size.height = height;
  retstr->base.traits.super.isa = v11;
  retstr->base.children._rawValue = v9;
  retstr->base.measurements._rawValue = v12;
  *(_OWORD *)&retstr->base.walkingChildIndex = 0u;
  *(_OWORD *)&retstr->base.$__lazy_storage_$_contentBoundingRect.value.origin.y = 0u;
  retstr->base.$__lazy_storage_$_contentBoundingRect.value.size.height = 0.0;
  retstr->base.$__lazy_storage_$_contentBoundingRect.is_nil = 1;
}

uint64_t sub_1AC6B83FC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1AC6B840C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisjointStack.Properties(a2, a1);
  return a2;
}

uint64_t sub_1AC6B8448()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6B846C(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6B7DE8(a1, *(void (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_1AC6B8474(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisjointStack(a2, a1);
  return a2;
}

unint64_t sub_1AC6B84A8(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6B84CC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6B84CC()
{
  unint64_t result;

  result = qword_1EEC8ACD0;
  if (!qword_1EEC8ACD0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for ZStack.Placements, &type metadata for ZStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8ACD0);
  }
  return result;
}

unint64_t sub_1AC6B8514()
{
  unint64_t result;

  result = qword_1EEC8ACD8;
  if (!qword_1EEC8ACD8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for ZStack.Placements, &type metadata for ZStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8ACD8);
  }
  return result;
}

unint64_t sub_1AC6B855C()
{
  unint64_t result;

  result = qword_1EEC8ACE0;
  if (!qword_1EEC8ACE0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for ZStack.Placements, &type metadata for ZStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8ACE0);
  }
  return result;
}

uint64_t destroy for DisjointStack(_QWORD *a1)
{
  if (a1[3])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  if (a1[8])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  if (a1[13])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  if (a1[18])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisjointStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = (_OWORD *)(a1 + 80);
  v13 = (_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 96);
    *v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v17 = (_OWORD *)(a1 + 120);
  v18 = (_OWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 144);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 136);
    *v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ZStack(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      sub_1AC6B8950(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (_OWORD *)(a1 + 40);
  v10 = (__int128 *)((char *)a2 + 40);
  v11 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v11)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
    }
    else
    {
      sub_1AC6B8950(a1 + 40);
      v12 = *((_QWORD *)a2 + 9);
      v13 = *(__int128 *)((char *)a2 + 56);
      *v9 = *v10;
      *(_OWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 72) = v12;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 40, (uint64_t)a2 + 40);
  }
  else
  {
    v14 = *v10;
    v15 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *v9 = v14;
    *(_OWORD *)(a1 + 56) = v15;
  }
  v16 = (_OWORD *)(a1 + 80);
  v17 = a2 + 5;
  v18 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)a2 + 10);
    }
    else
    {
      sub_1AC6B8950(a1 + 80);
      v19 = *((_QWORD *)a2 + 14);
      v20 = a2[6];
      *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 112) = v19;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, (uint64_t)(a2 + 5));
  }
  else
  {
    v21 = *v17;
    v22 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *v16 = v21;
    *(_OWORD *)(a1 + 96) = v22;
  }
  v23 = (_OWORD *)(a1 + 120);
  v24 = (__int128 *)((char *)a2 + 120);
  v25 = *((_QWORD *)a2 + 18);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v25)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)a2 + 15);
    }
    else
    {
      sub_1AC6B8950(a1 + 120);
      v26 = *((_QWORD *)a2 + 19);
      v27 = *(__int128 *)((char *)a2 + 136);
      *v23 = *v24;
      *(_OWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 152) = v26;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 144) = v25;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 120, (uint64_t)a2 + 120);
  }
  else
  {
    v28 = *v24;
    v29 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *v23 = v28;
    *(_OWORD *)(a1 + 136) = v29;
  }
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AC6B8950(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8ACE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for ZStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      sub_1AC6B8950(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    else
      sub_1AC6B8950(a1 + 40);
  }
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a2 + 104))
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    else
      sub_1AC6B8950(a1 + 80);
  }
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 144))
  {
    if (*(_QWORD *)(a2 + 144))
      __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    else
      sub_1AC6B8950(a1 + 120);
  }
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisjointStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack()
{
  return &type metadata for ZStack;
}

uint64_t destroy for DisjointStack.EdgePosition(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for DisjointStack.EdgePosition(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for DisjointStack.EdgePosition(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DisjointStack.EdgePosition(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack.EdgePosition(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisjointStack.EdgePosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_1AC6B8DD4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1AC6B8DEC(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.EdgePosition()
{
  return &type metadata for ZStack.EdgePosition;
}

uint64_t destroy for DisjointStack.Properties(uint64_t result)
{
  _QWORD *v1;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(result + 24))
    result = __swift_destroy_boxed_opaque_existential_1(result);
  if (v1[8])
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 5));
  if (v1[13])
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 10));
  if (v1[18])
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 15));
  return result;
}

uint64_t initializeWithCopy for ZStack.Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = (_OWORD *)(a1 + 80);
  v13 = (_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 96);
    *v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v17 = (_OWORD *)(a1 + 120);
  v18 = (_OWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 144);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 136);
    *v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  return a1;
}

uint64_t assignWithCopy for ZStack.Properties(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      sub_1AC6B8950(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (_OWORD *)(a1 + 40);
  v10 = (__int128 *)((char *)a2 + 40);
  v11 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v11)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
    }
    else
    {
      sub_1AC6B8950(a1 + 40);
      v12 = *((_QWORD *)a2 + 9);
      v13 = *(__int128 *)((char *)a2 + 56);
      *v9 = *v10;
      *(_OWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 72) = v12;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 40, (uint64_t)a2 + 40);
  }
  else
  {
    v14 = *v10;
    v15 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *v9 = v14;
    *(_OWORD *)(a1 + 56) = v15;
  }
  v16 = (_OWORD *)(a1 + 80);
  v17 = a2 + 5;
  v18 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)a2 + 10);
    }
    else
    {
      sub_1AC6B8950(a1 + 80);
      v19 = *((_QWORD *)a2 + 14);
      v20 = a2[6];
      *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 112) = v19;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, (uint64_t)(a2 + 5));
  }
  else
  {
    v21 = *v17;
    v22 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *v16 = v21;
    *(_OWORD *)(a1 + 96) = v22;
  }
  v23 = (_OWORD *)(a1 + 120);
  v24 = (__int128 *)((char *)a2 + 120);
  v25 = *((_QWORD *)a2 + 18);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v25)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)a2 + 15);
    }
    else
    {
      sub_1AC6B8950(a1 + 120);
      v26 = *((_QWORD *)a2 + 19);
      v27 = *(__int128 *)((char *)a2 + 136);
      *v23 = *v24;
      *(_OWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 152) = v26;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 144) = v25;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 120, (uint64_t)a2 + 120);
  }
  else
  {
    v28 = *v24;
    v29 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *v23 = v28;
    *(_OWORD *)(a1 + 136) = v29;
  }
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for ZStack.Properties(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      sub_1AC6B8950(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    else
      sub_1AC6B8950(a1 + 40);
  }
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a2 + 104))
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    else
      sub_1AC6B8950(a1 + 80);
  }
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 144))
  {
    if (*(_QWORD *)(a2 + 144))
      __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    else
      sub_1AC6B8950(a1 + 120);
  }
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZStack.Properties(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ZStack.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.Properties()
{
  return &type metadata for ZStack.Properties;
}

uint64_t destroy for DisjointStack.Placements(uint64_t a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  id v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

uint64_t assignWithTake for DisjointStack.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisjointStack.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisjointStack.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZStack.Placements()
{
  return &type metadata for ZStack.Placements;
}

uint64_t sub_1AC6B9624(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1AC6B9664(uint64_t a1)
{
  destroy for DisjointStack.Properties(a1);
  return a1;
}

id sub_1AC6B969C()
{
  id *v0;

  return *v0;
}

id DynamicLabel.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id DynamicLabel.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  objc_class *v10;
  id v11;
  objc_super v13;

  v9 = &v4[OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle];
  v10 = (objc_class *)type metadata accessor for DynamicLabel();
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v13.receiver = v4;
  v13.super_class = v10;
  v11 = objc_msgSendSuper2(&v13, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v11, sel_setAdjustsFontForContentSizeCategory_, 1);
  return v11;
}

uint64_t type metadata accessor for DynamicLabel()
{
  return objc_opt_self();
}

id DynamicLabel.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void DynamicLabel.init(coder:)()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  sub_1AC726910();
  __break(1u);
}

_QWORD *DynamicLabel.__allocating_init(with:)(uint64_t a1)
{
  objc_class *v1;
  _QWORD *v3;
  void (*v4)(_BYTE *);
  _QWORD *v5;
  _BYTE v7[72];

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1AC6B9A14(a1, (uint64_t)v7);
  v4 = *(void (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78);
  v5 = v3;
  v4(v7);

  sub_1AC6B9A50(a1);
  return v5;
}

uint64_t sub_1AC6B9A14(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DynamicTextAppearance(a2, a1);
  return a2;
}

uint64_t sub_1AC6B9A50(uint64_t a1)
{
  destroy for Constrain();
  return a1;
}

uint64_t sub_1AC6B9A84()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  objc_super v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[5];

  v1 = v0;
  (*(void (**)(__int128 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))(&v7);
  if (!v8)
    return sub_1AC6B9CB4((uint64_t)&v7);
  sub_1AC68AAA4(&v7, (uint64_t)v9);
  v2 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  v3 = objc_msgSend(v0, sel_traitCollection);
  v4 = (void *)(*(uint64_t (**)(void))(v2 + 8))();

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v6, sel_setFont_, v4);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1AC6B9B68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle;
  swift_beginAccess();
  return sub_1AC6B9BB8(v3, a1);
}

uint64_t sub_1AC6B9BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6B9C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC5JetUI12DynamicLabel_customTextStyle;
  swift_beginAccess();
  sub_1AC6B9C6C(a1, v3);
  swift_endAccess();
  sub_1AC6B9A84();
  return sub_1AC6B9CB4(a1);
}

uint64_t sub_1AC6B9C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6B9CB4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD528);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*sub_1AC6B9CF4(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1AC6B9D3C;
}

uint64_t sub_1AC6B9D3C(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1AC6B9A84();
  return result;
}

id sub_1AC6B9DB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DynamicLabel();
  return objc_msgSendSuper2(&v2, sel_font);
}

void sub_1AC6B9E70(void *a1)
{
  _QWORD *v1;
  objc_super v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60))(v4);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v3, sel_setFont_, a1);

}

id sub_1AC6B9EE0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  id result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;

  v3 = (void *)*MEMORY[0x1E0DC4A88];
  a1[3] = (uint64_t)&type metadata for FontSource;
  a1[4] = (uint64_t)&protocol witness table for FontSource;
  v4 = swift_allocObject();
  *a1 = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 56) = 0;
  a1[5] = 4;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  (*(void (**)(__int128 *__return_ptr, void *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58))(&v6, v3);
  if (v7)
  {
    sub_1AC68AAA4(&v6, (uint64_t)&v8);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_1AC68AAA4(&v8, (uint64_t)a1);
    a1[5] = (uint64_t)objc_msgSend(v1, sel_textAlignment);
    a1[6] = (uint64_t)objc_msgSend(v1, sel_lineBreakMode);
    a1[7] = (uint64_t)objc_msgSend(v1, sel_numberOfLines);
    result = objc_msgSend(v1, sel_lineSpacing);
    a1[8] = (uint64_t)result;
    return result;
  }
  sub_1AC6B9CB4((uint64_t)&v6);
  result = objc_msgSend(v1, sel_font);
  if (result)
  {
    v9 = &type metadata for DynamicLabel.StubTextStyle;
    v10 = &off_1E5BF6708;
    *(_QWORD *)&v8 = result;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AC6BA044()
{
  uint64_t v0;

  sub_1AC68D860(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t sub_1AC6BA074(_QWORD *a1)
{
  _QWORD *v1;
  _BYTE v4[40];

  sub_1AC68E218((uint64_t)a1, (uint64_t)v4);
  (*(void (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60))(v4);
  objc_msgSend(v1, sel_setTextAlignment_, a1[5]);
  objc_msgSend(v1, sel_setLineBreakMode_, a1[6]);
  objc_msgSend(v1, sel_setNumberOfLines_, a1[7]);
  objc_msgSend(v1, sel_setLineSpacing_, a1[8]);
  return sub_1AC6B9A50((uint64_t)a1);
}

void (*sub_1AC6BA118(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0xC0uLL);
  *a1 = v3;
  v3[23] = v1;
  sub_1AC6B9EE0(v3);
  return sub_1AC6BA164;
}

void sub_1AC6BA164(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 72;
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)v2[23];
    sub_1AC6B9A14(*a1, v3);
    sub_1AC68E218(v3, (uint64_t)(v2 + 18));
    (*(void (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60))(v2 + 18);
    objc_msgSend(v4, sel_setTextAlignment_, v2[14]);
    objc_msgSend(v4, sel_setLineBreakMode_, v2[15]);
    objc_msgSend(v4, sel_setNumberOfLines_, v2[16]);
    objc_msgSend(v4, sel_setLineSpacing_, v2[17]);
    sub_1AC6B9A50(v3);
  }
  else
  {
    v5 = (_QWORD *)v2[23];
    sub_1AC68E218(*a1, v3);
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x60))(v3);
    objc_msgSend(v5, sel_setTextAlignment_, v2[5]);
    objc_msgSend(v5, sel_setLineBreakMode_, v2[6]);
    objc_msgSend(v5, sel_setNumberOfLines_, v2[7]);
    objc_msgSend(v5, sel_setLineSpacing_, v2[8]);
  }
  sub_1AC6B9A50((uint64_t)v2);
  free(v2);
}

void sub_1AC6BA2BC(id a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for DynamicLabel();
  objc_msgSendSuper2(&v11, sel_traitCollectionDidChange_, a1);
  if (objc_msgSend(v1, sel_adjustsFontForContentSizeCategory))
  {
    if (a1)
      a1 = objc_msgSend(a1, sel_preferredContentSizeCategory);
    v3 = objc_msgSend(v1, sel_traitCollection);
    v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

    if (!a1)
      goto LABEL_10;
    v5 = sub_1AC72622C();
    v7 = v6;
    if (v5 == sub_1AC72622C() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_12;
    }
    v10 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
LABEL_10:
      sub_1AC6B9A84();
LABEL_12:

  }
}

id DynamicLabel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DynamicLabel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1AC6BA474(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x58))();
}

uint64_t sub_1AC6BA4AC(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  sub_1AC6B9BB8(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x60))(v4);
}

uint64_t sub_1AC6BA4FC(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))();
}

uint64_t sub_1AC6BA534(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[72];

  sub_1AC6B9A14(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x78))(v4);
}

uint64_t method lookup function for DynamicLabel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of DynamicLabel.customTextStyle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of DynamicLabel.dynamicTextAppearance.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

ValueMetadata *type metadata accessor for DynamicLabel.StubTextStyle()
{
  return &type metadata for DynamicLabel.StubTextStyle;
}

uint64_t VerticalStackLayout.init(alignment:spacing:children:)@<X0>(char *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
  v8 = swift_allocObject();
  result = sub_1AC68AAA4(a2, v8 + 16);
  *(_BYTE *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

void VerticalStackLayout.alignment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *VerticalStackLayout.alignment.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

double (*VerticalStackLayout.alignment.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStackLayout.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8) + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t VerticalStackLayout.spacing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];

  sub_1AC68E218(a1, (uint64_t)v6);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v3 = *(_QWORD *)(v1 + 8) + 16;
    swift_beginAccess();
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_1AC68AAA4(v6, v3);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
    v4 = swift_allocObject();
    sub_1AC68AAA4(v6, v4 + 16);
    swift_release();
    *(_QWORD *)(v1 + 8) = v4;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*VerticalStackLayout.spacing.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0xB0uLL);
  *a1 = v3;
  v3[21] = v1;
  v4 = *(_QWORD *)(v1 + 8) + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v3);
  return sub_1AC6BA84C;
}

void sub_1AC6BA84C(uint64_t *a1, char a2)
{
  _QWORD *v3;
  __int128 *v4;
  __int128 *v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)*a1;
  v4 = (__int128 *)(*a1 + 40);
  v5 = (__int128 *)(*a1 + 80);
  sub_1AC68E218(*a1, (uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    sub_1AC68E218((uint64_t)v4, (uint64_t)v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = v3[21];
    if (isUniquelyReferenced_nonNull_native)
    {
      v8 = *(_QWORD *)(v7 + 8) + 16;
      swift_beginAccess();
      __swift_destroy_boxed_opaque_existential_1(v8);
      sub_1AC68AAA4(v5, v8);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
      v12 = swift_allocObject();
      sub_1AC68AAA4(v5, v12 + 16);
      swift_release();
      *(_QWORD *)(v7 + 8) = v12;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    v9 = swift_isUniquelyReferenced_nonNull_native();
    v10 = v3[21];
    if (v9)
    {
      v11 = *(_QWORD *)(v10 + 8) + 16;
      swift_beginAccess();
      __swift_destroy_boxed_opaque_existential_1(v11);
      sub_1AC68AAA4(v4, v11);
      swift_endAccess();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
      v13 = swift_allocObject();
      sub_1AC68AAA4(v4, v13 + 16);
      swift_release();
      *(_QWORD *)(v10 + 8) = v13;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  free(v3);
}

JetUI::VerticalStackLayout::ExclusionCondition __swiftcall VerticalStackLayout.ExclusionCondition.init(rawValue:)(JetUI::VerticalStackLayout::ExclusionCondition rawValue)
{
  JetUI::VerticalStackLayout::ExclusionCondition *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t VerticalStackLayout.ExclusionCondition.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static VerticalStackLayout.ExclusionCondition.isHidden.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static VerticalStackLayout.ExclusionCondition.hasNoContent.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static VerticalStackLayout.Child.make(forView:space:spaceMultiplier:alignment:excludeWhen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v9;
  uint64_t v10;
  uint64_t result;

  v9 = *a3;
  v10 = *a4;
  sub_1AC68E218(a1, a5);
  result = sub_1AC68E218(a2, a5 + 40);
  *(double *)(a5 + 80) = a6;
  *(_BYTE *)(a5 + 96) = v9;
  *(_QWORD *)(a5 + 88) = v10;
  return result;
}

_QWORD *static VerticalStackLayout.Child.make(forView:withMeasurementsFitting:in:alignment:excludeWhen:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;

  v12 = *a3;
  v13 = *a4;
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v16 = (*(double (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(v15 + 8) + 8))(a2, v14, a6, a7);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  result = LayoutView.withMeasurements(_:)(v23, v24, (_QWORD *)a5, v16, v18, v20, v22);
  *(_QWORD *)(a5 + 64) = MEMORY[0x1E0DEF040];
  *(_QWORD *)(a5 + 72) = &protocol witness table for CGFloat;
  *(double *)(a5 + 40) = v18;
  *(_BYTE *)(a5 + 96) = v12;
  *(_QWORD *)(a5 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 88) = v13;
  return result;
}

uint64_t VerticalStackLayout.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1, a1);
}

uint64_t VerticalStackLayout.Child.space.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 40, a1);
}

double VerticalStackLayout.Child.spaceMultiplier.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void VerticalStackLayout.Child.excludeWhen.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 88);
}

BOOL static VerticalStackLayout.Child.Alignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t VerticalStackLayout.Child.Alignment.hash(into:)()
{
  return sub_1AC726B08();
}

void VerticalStackLayout.Child.alignment.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

uint64_t VerticalStackLayout.children.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 VerticalStackLayout.addChild(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _OWORD v11[6];
  char v12;

  sub_1AC6A47B8(a1, (uint64_t)v11);
  v2 = *(char **)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1AC6A2BC8(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1AC6A2BC8((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[104 * v4];
  v6 = v11[0];
  v7 = v11[2];
  *((_OWORD *)v5 + 3) = v11[1];
  *((_OWORD *)v5 + 4) = v7;
  *((_OWORD *)v5 + 2) = v6;
  result = (__n128)v11[3];
  v9 = v11[4];
  v10 = v11[5];
  v5[128] = v12;
  *((_OWORD *)v5 + 6) = v9;
  *((_OWORD *)v5 + 7) = v10;
  *((__n128 *)v5 + 5) = result;
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

unint64_t VerticalStackLayout.insertChild(_:at:)(unint64_t result, int64_t a2)
{
  uint64_t v2;
  _BYTE v4[104];

  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    sub_1AC6A47B8(result, (uint64_t)v4);
    return sub_1AC6A421C(a2, a2, (uint64_t)v4);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall VerticalStackLayout.removeChild(at:)(Swift::Int at)
{
  _BYTE v1[104];

  sub_1AC6BAD38(at, (uint64_t)v1);
  sub_1AC68DF00((uint64_t)v1);
}

uint64_t sub_1AC6BAD38@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC71EDAC(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v5 + 104 * a1;
    v9 = *(_OWORD *)(v8 + 112);
    v10 = v7 - 1;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a2 + 80) = v9;
    *(_BYTE *)(a2 + 96) = *(_BYTE *)(v8 + 128);
    v11 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a2 + 16) = v11;
    v12 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 48) = v12;
    result = (uint64_t)memmove((void *)(v8 + 32), (const void *)(v8 + 136), 104 * (v7 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v10;
    *v2 = v5;
  }
  return result;
}

uint64_t sub_1AC6BADE0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC71EDC0(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = (__int128 *)&v5[5 * a1];
    sub_1AC68AAA4(v9 + 2, a2);
    result = (uint64_t)memmove(v9 + 2, (char *)v9 + 72, 40 * (v8 - a1));
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

uint64_t sub_1AC6BAE84(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC71EDE8(v3);
    v3 = (_QWORD *)result;
  }
  v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = &v3[2 * a1];
    v8 = v7[4];
    memmove(v7 + 4, v7 + 6, 16 * (v5 - 1 - a1));
    v3[2] = v6;
    *v1 = v3;
    return v8;
  }
  return result;
}

uint64_t sub_1AC6BAF0C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC71EDFC(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v5 + 136 * a1;
    v9 = *(_OWORD *)(v8 + 144);
    v10 = v7 - 1;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(a2 + 112) = v9;
    *(_QWORD *)(a2 + 128) = *(_QWORD *)(v8 + 160);
    v11 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 48) = v11;
    v12 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a2 + 80) = v12;
    v13 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a2 + 16) = v13;
    result = (uint64_t)memmove((void *)(v8 + 32), (const void *)(v8 + 168), 136 * (v7 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v10;
    *v2 = v5;
  }
  return result;
}

uint64_t sub_1AC6BAFC0(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC71EE10(v3);
    v3 = (_QWORD *)result;
  }
  v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = &v3[a1];
    v8 = v7[4];
    memmove(v7 + 4, v7 + 5, 8 * (v5 - 1 - a1));
    v3[2] = v6;
    *v1 = v3;
    return v8;
  }
  return result;
}

Swift::Void __swiftcall VerticalStackLayout.removeAllChildren()()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
}

uint64_t VerticalStackLayout.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  unsigned __int8 *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  _QWORD v66[2];
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[88];
  char v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  uint64_t v87;
  uint64_t v88;
  double v89;
  char v90;

  v7 = sub_1AC726A48();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v12 = *((_QWORD *)v3 + 2);
  v13 = *((_QWORD *)v3 + 1) + 16;
  swift_beginAccess();
  sub_1AC68E218(v13, (uint64_t)v83);
  v14 = v84;
  v15 = v85;
  __swift_project_boxed_opaque_existential_1(v83, v84);
  sub_1AC68E57C((uint64_t)v10);
  v74 = a1;
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v10, v14, v15);
  v17 = v16;
  v72 = *(void (**)(char *, uint64_t))(v8 + 8);
  v73 = v7;
  v72(v10, v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  v19 = *(_QWORD **)(v12 + 16);
  if (v11 != 3)
  {
    if (!v19)
      return result;
    v70 = v86;
    result = swift_bridgeObjectRetain();
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = v12 + 32;
    v52 = 0.0;
    v68 = v12 + 32;
    v69 = (_QWORD *)((char *)v19 - 1);
LABEL_27:
    v71 = v49;
    v53 = v51 + 104 * v50;
    while (1)
    {
      if (v50 >= *(_QWORD *)(v12 + 16))
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      sub_1AC6A47B8(v53, (uint64_t)v83);
      v54 = v90;
      sub_1AC6A47B8((uint64_t)v83, (uint64_t)v80);
      if ((v54 & 2) != 0)
      {
        v55 = v81;
        v56 = v82;
        __swift_project_boxed_opaque_existential_1(v80, v81);
        v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v55, v56);
        sub_1AC68DF00((uint64_t)v80);
        sub_1AC6A47B8((uint64_t)v83, (uint64_t)v78);
        if ((v57 & 1) == 0)
        {
          sub_1AC68DF00((uint64_t)v78);
          goto LABEL_29;
        }
      }
      else
      {
        sub_1AC68DF00((uint64_t)v80);
        sub_1AC6A47B8((uint64_t)v83, (uint64_t)v78);
      }
      v58 = v79;
      sub_1AC6A47B8((uint64_t)v78, (uint64_t)v75);
      if ((v58 & 1) == 0)
      {
        sub_1AC68DF00((uint64_t)v78);
        result = sub_1AC68DF00((uint64_t)v75);
LABEL_38:
        v35 = __OFADD__(v48++, 1);
        if (!v35)
        {
          v62 = v87;
          v63 = v88;
          __swift_project_boxed_opaque_existential_1(v70, v87);
          sub_1AC68E57C((uint64_t)v10);
          AnyDimension.value(in:rounded:)(v74, (uint64_t)v10, v62, v63);
          v65 = v64;
          v72(v10, v73);
          v52 = v52 + v65 * v89;
          result = sub_1AC68DF00((uint64_t)v83);
          v49 = 1;
          v47 = v69 == (_QWORD *)v50++;
          v51 = v68;
          if (!v47)
            goto LABEL_27;
LABEL_41:
          result = swift_bridgeObjectRelease();
          if (!__OFSUB__(v48, 1))
            return result;
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
        }
LABEL_50:
        __break(1u);
        return result;
      }
      v59 = v76;
      v60 = v77;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 40))(v59, v60);
      sub_1AC68DF00((uint64_t)v78);
      result = sub_1AC68DF00((uint64_t)v75);
      if ((v61 & 1) == 0)
        goto LABEL_38;
LABEL_29:
      ++v50;
      result = sub_1AC68DF00((uint64_t)v83);
      v53 += 104;
      if (v19 == (_QWORD *)v50)
        goto LABEL_41;
    }
  }
  if (!v19)
    return result;
  v66[1] = v17;
  v69 = v86;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = v12 + 32;
  v24 = 0.0;
  v25 = a2;
  v67 = v12 + 32;
  v68 = (unint64_t)v19 - 1;
  while (2)
  {
    v71 = v21;
    v26 = v23 + 104 * v22;
    while (1)
    {
      if (v22 >= *(_QWORD *)(v12 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
      sub_1AC6A47B8(v26, (uint64_t)v83);
      v27 = v90;
      sub_1AC6A47B8((uint64_t)v83, (uint64_t)v80);
      if ((v27 & 2) != 0)
      {
        v28 = v81;
        v29 = v82;
        __swift_project_boxed_opaque_existential_1(v80, v81);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 64))(v28, v29);
        sub_1AC68DF00((uint64_t)v80);
        sub_1AC6A47B8((uint64_t)v83, (uint64_t)v78);
        if ((v30 & 1) == 0)
        {
          sub_1AC68DF00((uint64_t)v78);
          goto LABEL_6;
        }
      }
      else
      {
        sub_1AC68DF00((uint64_t)v80);
        sub_1AC6A47B8((uint64_t)v83, (uint64_t)v78);
      }
      v31 = v79;
      sub_1AC6A47B8((uint64_t)v78, (uint64_t)v75);
      if ((v31 & 1) == 0)
        break;
      v32 = v76;
      v33 = v77;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
      sub_1AC68DF00((uint64_t)v78);
      result = sub_1AC68DF00((uint64_t)v75);
      if ((v34 & 1) == 0)
        goto LABEL_15;
LABEL_6:
      ++v22;
      result = sub_1AC68DF00((uint64_t)v83);
      v26 += 104;
      if (v19 == (_QWORD *)v22)
        goto LABEL_22;
    }
    sub_1AC68DF00((uint64_t)v78);
    result = sub_1AC68DF00((uint64_t)v75);
LABEL_15:
    v35 = __OFADD__(v20++, 1);
    if (v35)
      goto LABEL_49;
    v70 = (_QWORD *)(v22 + 1);
    v36 = v84;
    v37 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    v38 = v74;
    v39 = (*(double (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(v37 + 8) + 8))(v74, v36, a2, a3);
    v41 = v40;
    v42 = v87;
    v43 = v88;
    __swift_project_boxed_opaque_existential_1(v69, v87);
    sub_1AC68E57C((uint64_t)v10);
    AnyDimension.value(in:rounded:)(v38, (uint64_t)v10, v42, v43);
    v45 = v44;
    v72(v10, v73);
    v46 = v45 * v89;
    if (v45 * v89 >= v41)
      v46 = v41;
    if (v39 > v25)
      v25 = v39;
    v24 = v24 + v46;
    result = sub_1AC68DF00((uint64_t)v83);
    v21 = 1;
    v47 = v68 == v22;
    v22 = (unint64_t)v70;
    v23 = v67;
    if (!v47)
      continue;
    break;
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v20, 1))
    goto LABEL_50;
  return result;
}

double VerticalStackLayout.placeChildren(relativeTo:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  unsigned __int8 *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  double MinY;
  uint64_t v25;
  uint64_t v26;
  double v27;
  void (*v28)(uint64_t, uint64_t);
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v63;
  void (*v64)(_BYTE *, _QWORD, uint64_t);
  id v65;
  double v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  double MidX;
  id v71;
  double v72;
  _BYTE *v73;
  double MinX;
  double v75;
  uint64_t v76;
  uint64_t v77;
  double result;
  CGFloat v79;
  _BYTE v80[56];
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _BYTE *v92;
  double v93;
  double v94;
  double v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  int v101;
  double v102;
  double v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  CGFloat v107;
  CGFloat v108;
  CGFloat v109;
  _QWORD v110[3];
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[112];
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  char v124;
  char v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;

  v13 = sub_1AC726A48();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v13);
  v92 = &v80[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v15);
  v85 = &v80[-v18];
  v19 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v17);
  v97 = &v80[-v20];
  MEMORY[0x1E0C80A78](v19);
  v22 = &v80[-v21];
  v87 = *v6;
  v23 = *((_QWORD *)v6 + 1);
  v98 = *((_QWORD *)v6 + 2);
  v108 = a3;
  v109 = a4;
  v126.origin.x = a3;
  v126.origin.y = a4;
  v126.size.width = a5;
  v107 = a6;
  v126.size.height = a6;
  MinY = CGRectGetMinY(v126);
  swift_beginAccess();
  sub_1AC68E218(v23 + 16, (uint64_t)v117);
  v25 = v118;
  v26 = v119;
  __swift_project_boxed_opaque_existential_1(v117, v118);
  sub_1AC68E57C((uint64_t)v22);
  v100 = (void *)a1;
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v22, v25, v26);
  v102 = v27;
  v88 = v14;
  v28 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v96 = v22;
  v29 = v22;
  v30 = v98;
  v99 = v13;
  v104 = v28;
  v28((uint64_t)v29, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  v31 = *(_QWORD *)(v30 + 16);
  if (!v31)
  {
    v76 = 0;
    v75 = 0.0;
    v36 = 0.0;
    v106 = 0;
    v77 = -1;
    goto LABEL_36;
  }
  v84 = a2;
  v91 = &v120;
  v82 = *MEMORY[0x1E0DED500];
  v81 = *MEMORY[0x1E0DED508];
  swift_bridgeObjectRetain();
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v105 = 0;
  v106 = 0;
  v35 = v30 + 32;
  v94 = 0.0;
  v36 = 0.0;
  v89 = v30 + 32;
  v90 = v31 - 1;
  do
  {
    v101 = v33;
    v37 = v35 + 104 * v34;
    v38 = v34;
    while (1)
    {
      if (v38 >= *(_QWORD *)(v30 + 16))
        goto LABEL_39;
      sub_1AC6A47B8(v37, (uint64_t)v117);
      v39 = v124;
      sub_1AC6A47B8((uint64_t)v117, (uint64_t)v114);
      if ((v39 & 2) != 0)
      {
        v40 = v115;
        v41 = v116;
        __swift_project_boxed_opaque_existential_1(v114, v115);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 64))(v40, v41);
        sub_1AC68DF00((uint64_t)v114);
        sub_1AC6A47B8((uint64_t)v117, (uint64_t)v113);
        if ((v42 & 1) == 0)
        {
          sub_1AC68DF00((uint64_t)v113);
          goto LABEL_5;
        }
      }
      else
      {
        sub_1AC68DF00((uint64_t)v114);
        sub_1AC6A47B8((uint64_t)v117, (uint64_t)v113);
      }
      v43 = v113[88];
      sub_1AC6A47B8((uint64_t)v113, (uint64_t)v110);
      if ((v43 & 1) == 0)
        break;
      v44 = v111;
      v45 = v112;
      __swift_project_boxed_opaque_existential_1(v110, v111);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 40))(v44, v45);
      sub_1AC68DF00((uint64_t)v113);
      sub_1AC68DF00((uint64_t)v110);
      if ((v46 & 1) == 0)
        goto LABEL_14;
LABEL_5:
      ++v38;
      sub_1AC68DF00((uint64_t)v117);
      v37 += 104;
      if (v31 == v38)
        goto LABEL_35;
    }
    sub_1AC68DF00((uint64_t)v113);
    sub_1AC68DF00((uint64_t)v110);
LABEL_14:
    if (__OFADD__(v32++, 1))
      goto LABEL_40;
    v95 = v36;
    v48 = v121;
    v49 = v122;
    __swift_project_boxed_opaque_existential_1(v91, v121);
    v50 = (uint64_t)v96;
    sub_1AC68E57C((uint64_t)v96);
    v51 = v100;
    AnyDimension.value(in:rounded:)((uint64_t)v100, v50, v48, v49);
    v53 = v52;
    v54 = v99;
    v104(v50, v99);
    v103 = v53 * v123;
    v55 = v118;
    v56 = v119;
    __swift_project_boxed_opaque_existential_1(v117, v118);
    v57 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(v56 + 8) + 8))(v51, v55, a5, v107);
    v83 = v58;
    v105 = v59;
    v61 = fabs(v60);
    if (fabs(v57) >= COERCE_DOUBLE(1) && v61 >= COERCE_DOUBLE(1))
    {
      v64 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v88 + 104);
      v64(v97, v82, v54);
      v65 = objc_msgSend(v51, sel_traitCollection);
      objc_msgSend(v65, sel_displayScale);
      if (v66 <= 0.0)
        v66 = ForJetUIOnly_MainScreenScale();
      v67 = v97;
      v86 = sub_1AC68EE10((uint64_t)v97, v66, v57);

      v68 = v67;
      v69 = v99;
      v104((uint64_t)v68, v99);
      if (v125)
      {
        if (v125 == 1)
        {
          v128.origin.x = v108;
          v128.origin.y = v109;
          v128.size.width = a5;
          v128.size.height = v107;
          MidX = CGRectGetMidX(v128);
          v64(v85, v81, v69);
          v71 = objc_msgSend(v51, sel_traitCollection);
          objc_msgSend(v71, sel_displayScale);
          if (v72 <= 0.0)
            v72 = ForJetUIOnly_MainScreenScale();
          v73 = v85;
          v93 = sub_1AC68EE10((uint64_t)v85, v72, MidX + v86 * -0.5);

          v104((uint64_t)v73, v69);
LABEL_33:
          __asm { BR              X8 }
        }
        v130.origin.x = v108;
        v130.origin.y = v109;
        v130.size.width = a5;
        v130.size.height = v107;
        MinX = CGRectGetMaxX(v130) - v86;
      }
      else
      {
        v129.origin.x = v108;
        v129.origin.y = v109;
        v129.size.width = a5;
        v129.size.height = v107;
        MinX = CGRectGetMinX(v129);
      }
      v93 = MinX;
      goto LABEL_33;
    }
    v35 = v89;
    if ((v101 & 1) == 0)
    {
      v127.origin.x = v108;
      v127.origin.y = v109;
      v127.size.width = a5;
      v127.size.height = v107;
      v94 = v103 + MinY - CGRectGetMinY(v127);
    }
    v63 = MinY + v103;
    v105 = 0;
    v34 = v38 + 1;
    v36 = v95 + v103;
    sub_1AC68DF00((uint64_t)v117);
    v33 = 1;
    MinY = v63;
  }
  while (v90 != v38);
LABEL_35:
  swift_bridgeObjectRelease();
  a2 = v84;
  v75 = v94;
  v76 = v105;
  v77 = v32 - 1;
  if (__OFSUB__(v32, 1))
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    JUMPOUT(0x1AC6BC034);
  }
LABEL_36:
  result = v36 + v102 * (double)(v77 & ~(v77 >> 63));
  v79 = v109;
  *(CGFloat *)a2 = v108;
  *(CGFloat *)(a2 + 8) = v79;
  *(_QWORD *)(a2 + 16) = v106;
  *(double *)(a2 + 24) = result;
  *(double *)(a2 + 32) = v75;
  *(_QWORD *)(a2 + 40) = v76;
  return result;
}

uint64_t sub_1AC6BC050(uint64_t a1, double a2, double a3)
{
  return VerticalStackLayout.measurements(fitting:in:)(a1, a2, a3);
}

unint64_t sub_1AC6BC06C()
{
  unint64_t result;

  result = qword_1EEC8ACF8;
  if (!qword_1EEC8ACF8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.Alignment, &type metadata for VerticalStackLayout.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8ACF8);
  }
  return result;
}

unint64_t sub_1AC6BC0B4()
{
  unint64_t result;

  result = qword_1EEC8AD00;
  if (!qword_1EEC8AD00)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.ExclusionCondition, &type metadata for VerticalStackLayout.ExclusionCondition);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD00);
  }
  return result;
}

unint64_t sub_1AC6BC0FC()
{
  unint64_t result;

  result = qword_1EEC8AD08;
  if (!qword_1EEC8AD08)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.ExclusionCondition, &type metadata for VerticalStackLayout.ExclusionCondition);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD08);
  }
  return result;
}

unint64_t sub_1AC6BC144()
{
  unint64_t result;

  result = qword_1ED0BD448;
  if (!qword_1ED0BD448)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.ExclusionCondition, &type metadata for VerticalStackLayout.ExclusionCondition);
    atomic_store(result, (unint64_t *)&qword_1ED0BD448);
  }
  return result;
}

unint64_t sub_1AC6BC18C()
{
  unint64_t result;

  result = qword_1ED0BD450;
  if (!qword_1ED0BD450)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.ExclusionCondition, &type metadata for VerticalStackLayout.ExclusionCondition);
    atomic_store(result, (unint64_t *)&qword_1ED0BD450);
  }
  return result;
}

unint64_t sub_1AC6BC1D4()
{
  unint64_t result;

  result = qword_1EEC8AD10;
  if (!qword_1EEC8AD10)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStackLayout.Child.Alignment, &type metadata for VerticalStackLayout.Child.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD10);
  }
  return result;
}

uint64_t sub_1AC6BC218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8) + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a2);
}

uint64_t sub_1AC6BC264(uint64_t a1)
{
  _BYTE v2[40];

  sub_1AC68E218(a1, (uint64_t)v2);
  return VerticalStackLayout.spacing.setter((uint64_t)v2);
}

uint64_t destroy for VerticalStackLayout()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _s5JetUI19VerticalStackLayoutVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerticalStackLayout(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerticalStackLayout(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStackLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout()
{
  return &type metadata for VerticalStackLayout;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout.Alignment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStackLayout.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1AC6BC51C + 4 * byte_1AC72ADE5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1AC6BC550 + 4 * byte_1AC72ADE0[v4]))();
}

uint64_t sub_1AC6BC550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BC558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6BC560);
  return result;
}

uint64_t sub_1AC6BC56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6BC574);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1AC6BC578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BC580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Alignment()
{
  return &type metadata for VerticalStackLayout.Alignment;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.ExclusionCondition()
{
  return &type metadata for VerticalStackLayout.ExclusionCondition;
}

uint64_t initializeWithCopy for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for VerticalStackLayout.Child(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Child()
{
  return &type metadata for VerticalStackLayout.Child;
}

uint64_t getEnumTagSinglePayload for VerticalStackLayout.Child.Alignment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStackLayout.Child.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AC6BC7C0 + 4 * byte_1AC72ADEF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AC6BC7F4 + 4 * byte_1AC72ADEA[v4]))();
}

uint64_t sub_1AC6BC7F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BC7FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6BC804);
  return result;
}

uint64_t sub_1AC6BC810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6BC818);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AC6BC81C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BC824(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackLayout.Child.Alignment()
{
  return &type metadata for VerticalStackLayout.Child.Alignment;
}

_BYTE *StackMeasurable.init(axis:skipEmptyChildren:children:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a3;
  *(_BYTE *)(a4 + 16) = a2;
  return result;
}

BOOL static StackMeasurable.Axis.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t StackMeasurable.Axis.hash(into:)()
{
  return sub_1AC726B08();
}

uint64_t StackMeasurable.Axis.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

void StackMeasurable.axis.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *StackMeasurable.axis.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

double (*StackMeasurable.axis.modify())(void)
{
  return nullsub_1;
}

uint64_t StackMeasurable.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StackMeasurable.addChild(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  __int128 v6[2];

  sub_1AC68E218(a1, (uint64_t)v6);
  v2 = *(_QWORD **)(v1 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1AC6A2CE0(0, v2[2] + 1, 1, v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1AC6A2CE0((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  result = sub_1AC68AAA4(v6, (uint64_t)&v2[5 * v4 + 4]);
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

unint64_t StackMeasurable.insertChild(_:at:)(unint64_t result, int64_t a2)
{
  uint64_t v2;
  _BYTE v4[40];

  if (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    sub_1AC68E218(result, (uint64_t)v4);
    return sub_1AC6A436C(a2, a2, (uint64_t)v4);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall StackMeasurable.removeChild(at:)(Swift::Int at)
{
  _BYTE v1[40];

  sub_1AC6BADE0(at, (uint64_t)v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

Swift::Void __swiftcall StackMeasurable.removeAllChildren()()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 8) = MEMORY[0x1E0DEE9D8];
}

uint64_t StackMeasurable.skipEmptyChildren.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t StackMeasurable.skipEmptyChildren.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

double (*StackMeasurable.skipEmptyChildren.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_1AC6BCA8C(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = result;
    v9 = *(unsigned __int8 *)(v3 + 16);
    result = swift_bridgeObjectRetain();
    v10 = 0;
    v11 = v4 + 32;
    v12 = 0.0;
    v13 = 0.0;
LABEL_6:
    v14 = v11 + 40 * v10;
    for (i = v10; i < *(_QWORD *)(v4 + 16); ++i)
    {
      v10 = i + 1;
      sub_1AC68E218(v14, (uint64_t)v22);
      v16 = v23;
      v17 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v17 + 8))(v6, v16, v17, a2, a3);
      if (!v9
        || ((v20 = fabs(v19), fabs(v18) >= COERCE_DOUBLE(1)) ? (v21 = v20 < COERCE_DOUBLE(1)) : (v21 = 1), !v21))
      {
        if (v13 <= v18)
          v13 = v18;
        v12 = v12 + v19;
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        v11 = v4 + 32;
        if (v5 - 1 == i)
          return swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      v14 += 40;
      if (v5 == v10)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

double StackMeasurable.measurements(fitting:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v8 = *(_BYTE *)(v3 + 16);
    LOBYTE(v18[0]) = 1;
    v18[1] = v7;
    v19 = v8;
    sub_1AC6BCA8C(a1, a2, a3);
    return v9;
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 16);
    if (v11)
    {
      v12 = v7 + 32;
      swift_bridgeObjectRetain();
      v13 = 0.0;
      v10 = 0.0;
      do
      {
        sub_1AC68E218(v12, (uint64_t)v18);
        v14 = v20;
        v15 = v21;
        __swift_project_boxed_opaque_existential_1(v18, v20);
        v10 = v10
            + (*(double (**)(uint64_t, uint64_t, uint64_t, double, double))(v15 + 8))(a1, v14, v15, a2, a3);
        if (v13 <= v16)
          v13 = v16;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
        v12 += 40;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0.0;
    }
  }
  return v10;
}

unint64_t sub_1AC6BCD7C()
{
  unint64_t result;

  result = qword_1EEC8AD18;
  if (!qword_1EEC8AD18)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for StackMeasurable.Axis, &type metadata for StackMeasurable.Axis);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD18);
  }
  return result;
}

uint64_t sub_1AC6BCDC4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StackMeasurable(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StackMeasurable(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackMeasurable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackMeasurable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StackMeasurable()
{
  return &type metadata for StackMeasurable;
}

uint64_t storeEnumTagSinglePayload for StackMeasurable.Axis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6BCF7C + 4 * byte_1AC72B11D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6BCFB0 + 4 * byte_1AC72B118[v4]))();
}

uint64_t sub_1AC6BCFB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BCFB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6BCFC0);
  return result;
}

uint64_t sub_1AC6BCFCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6BCFD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6BCFD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BCFE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StackMeasurable.Axis()
{
  return &type metadata for StackMeasurable.Axis;
}

uint64_t HorizontalStack.add(_:with:)(_QWORD *a1, void (*a2)(_OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = a1[3];
  v4 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  Measurable.placeable.getter(v3, v4, v6);
  HorizontalStack.add(_:with:)((uint64_t)v6, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t HorizontalStack.adding(_:with:)@<X0>(_QWORD *a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v4 = v3;
  v7 = a1[3];
  v8 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  Measurable.placeable.getter(v7, v8, v10);
  sub_1AC6A295C(v4, a3);
  HorizontalStack.add(_:with:)((uint64_t)v10, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t HorizontalStack.insert(_:at:with:)(_QWORD *a1, int64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v5 = a1[3];
  v6 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  Measurable.placeable.getter(v5, v6, v8);
  HorizontalStack.insert(_:at:with:)((uint64_t)v8, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t HorizontalStack.inserting(_:at:with:)@<X0>(_QWORD *a1@<X0>, int64_t a2@<X1>, void (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v5 = v4;
  v9 = a1[3];
  v10 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Measurable.placeable.getter(v9, v10, v12);
  sub_1AC6A295C(v5, a4);
  HorizontalStack.insert(_:at:with:)((uint64_t)v12, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

void NSAttributedString.languageAwareOutsets.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t aBlock;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
  v3 = objc_msgSend(v0, sel_string);
  v4 = sub_1AC72622C();
  v6 = v5;

  aBlock = v4;
  v20 = v6;
  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v7 = sub_1AC725854();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {

  }
  else
  {
    v10 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
    v26 = *MEMORY[0x1E0DC49E8];
    v27 = v10;
    v25 = 0;
    v11 = objc_msgSend(v1, sel_length);
    v12 = *MEMORY[0x1E0DC1138];
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = &v26;
    *(_QWORD *)(v13 + 24) = &v25;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = sub_1AC69E660;
    *(_QWORD *)(v14 + 24) = v13;
    v23 = sub_1AC690B08;
    v24 = v14;
    aBlock = MEMORY[0x1E0C809B0];
    v20 = 1107296256;
    v21 = sub_1AC69CE30;
    v22 = &block_descriptor_3;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v1, sel_enumerateAttribute_inRange_options_usingBlock_, v12, 0, v11, 0x100000, v15);
    _Block_release(v15);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v11 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (v25 != 1)
      {
        *(_QWORD *)&v26 = UIFont.languageAwareOutsets.getter();
        *((_QWORD *)&v26 + 1) = v16;
        *(_QWORD *)&v27 = v17;
        *((_QWORD *)&v27 + 1) = v18;
      }

      swift_release();
    }
  }
}

UIEdgeInsets __swiftcall String.languageAwareOutsets(whenUsedWith:)(UIFont whenUsedWith)
{
  uint64_t v1;
  char v2;
  double v3;
  double v4;
  double v5;
  double v6;
  UIEdgeInsets result;

  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v1 = sub_1AC725854();
  __swift_project_value_buffer(v1, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  if ((v2 & 1) != 0)
  {
    v3 = *MEMORY[0x1E0DC49E8];
    v4 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
    v5 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
    v6 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  }
  else
  {
    v3 = UIFont.languageAwareOutsets.getter();
  }
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

uint64_t sub_1AC6BD5B4()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1AC6BDF94((uint64_t)&unk_1E5BF6290);
  result = swift_arrayDestroy();
  qword_1ED0BD430 = v0;
  return result;
}

uint64_t Locale.hasExtraTallWritingSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v16;
  char v17;
  uint64_t v19[4];

  v1 = v0;
  v2 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1AC72610C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AC725938();
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    if (qword_1ED0BD478 != -1)
      swift_once();
    v11 = sub_1AC6BD8D4(v9, v10, qword_1ED0BD430);
    swift_bridgeObjectRelease();
    return v11 & 1;
  }
  else
  {
    if (qword_1EEC8A210 != -1)
      swift_once();
    v13 = __swift_project_value_buffer(v3, (uint64_t)qword_1EEC95CB8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
    sub_1AC725D10();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1AC727FC0;
    sub_1AC725CD4();
    sub_1AC725CC8();
    v14 = sub_1AC725968();
    v19[3] = v14;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_0, v1, v14);
    sub_1AC725CA4();
    sub_1AC690CC0((uint64_t)v19);
    sub_1AC725CC8();
    sub_1AC725CEC();
    sub_1AC726010();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1AC72592C();
    if (qword_1ED0BD478 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    v17 = sub_1AC6BE134(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v17 & 1;
  }
}

uint64_t sub_1AC6BD8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1AC726AFC();
    sub_1AC7262A4();
    v6 = sub_1AC726B2C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1AC726A78() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1AC726A78() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1AC6BDA08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]),
        v6 = sub_1AC7261C0(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_1AC6BE2F8(&qword_1EEC8AD28, MEMORY[0x1E0DEC1A8], MEMORY[0x1E0D41600]);
      v12 = sub_1AC7261FC();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

double UIFont.languageAwareOutsets.getter()
{
  int LanguageAwareOutsets;
  double result;

  LanguageAwareOutsets = CTFontGetLanguageAwareOutsets();
  result = 0.0;
  if (!LanguageAwareOutsets)
    return *MEMORY[0x1E0DC49E8];
  return result;
}

UIEdgeInsets __swiftcall NSAttributedString.languageAwareOutsets(whenUsedWith:)(UIFont whenUsedWith)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  UIEdgeInsets result;

  v2 = v1;
  v3 = objc_msgSend(v1, sel_string);
  v4 = sub_1AC72622C();
  v6 = v5;

  aBlock = v4;
  v28 = v6;
  if (qword_1ED0BE2A8 != -1)
    swift_once();
  v7 = sub_1AC725854();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    v20 = *MEMORY[0x1E0DC49E8];
    v21 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
    v22 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
    v23 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  }
  else
  {
    v10 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
    v34 = *MEMORY[0x1E0DC49E8];
    v35 = v10;
    v33 = 0;
    v11 = objc_msgSend(v2, sel_length);
    v12 = *MEMORY[0x1E0DC1138];
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = &v34;
    *(_QWORD *)(v13 + 24) = &v33;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = sub_1AC6BE394;
    *(_QWORD *)(v14 + 24) = v13;
    v31 = sub_1AC6BE398;
    v32 = v14;
    aBlock = MEMORY[0x1E0C809B0];
    v28 = 1107296256;
    v29 = sub_1AC69CE30;
    v30 = &block_descriptor_14;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v2, sel_enumerateAttribute_inRange_options_usingBlock_, v12, 0, v11, 0x100000, v15);
    _Block_release(v15);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v11 & 1) != 0)
    {
      __break(1u);
      goto LABEL_12;
    }
    if (v33 == 1)
    {
      v21 = *((double *)&v34 + 1);
      v20 = *(double *)&v34;
      v23 = *((double *)&v35 + 1);
      v22 = *(double *)&v35;
    }
    else
    {
      v20 = UIFont.languageAwareOutsets.getter();
      v21 = v24;
      v22 = v25;
      v23 = v26;
      *(double *)&v34 = v20;
      *((double *)&v34 + 1) = v24;
      *(double *)&v35 = v25;
      *((double *)&v35 + 1) = v26;
    }
    swift_release();
  }
  v16 = v20;
  v17 = v21;
  v18 = v22;
  v19 = v23;
LABEL_12:
  result.right = v19;
  result.bottom = v18;
  result.left = v17;
  result.top = v16;
  return result;
}

void sub_1AC6BDEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, _BYTE *a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float64_t v15;
  float64_t v16;
  float64_t v17;
  float64_t v18;
  void *v19;
  _BYTE v20[24];
  uint64_t v21;

  sub_1AC690E28(a1, (uint64_t)v20);
  if (v21)
  {
    sub_1AC6BE358();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = UIFont.languageAwareOutsets.getter();
      v15 = v9;
      v16 = v8;
      v17 = v11;
      v18 = v10;

      v12.f64[0] = v16;
      v12.f64[1] = v15;
      v13 = vbslq_s8((int8x16_t)vcgeq_f64(v12, *a5), (int8x16_t)v12, *(int8x16_t *)a5);
      v12.f64[0] = v18;
      v12.f64[1] = v17;
      v14 = vbslq_s8((int8x16_t)vcgeq_f64(v12, a5[1]), (int8x16_t)v12, (int8x16_t)a5[1]);
      *a5 = (float64x2_t)v13;
      a5[1] = (float64x2_t)v14;
      *a6 = 1;
    }
  }
  else
  {
    sub_1AC690CC0((uint64_t)v20);
  }
}

uint64_t sub_1AC6BDF74()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6BDF84()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6BDF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD460);
    v3 = sub_1AC72682C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1AC726AFC();
      swift_bridgeObjectRetain();
      sub_1AC7262A4();
      result = sub_1AC726B2C();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1AC726A78(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1AC726A78();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1AC6BE134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  char v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v1 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v9 >= v5)
      goto LABEL_24;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_24;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_24;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_24;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
          {
            v11 = v9 + 4;
            if (v11 >= v5)
            {
LABEL_24:
              v12 = 0;
              goto LABEL_25;
            }
            v10 = *(_QWORD *)(v1 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                v7 = v11 + 1;
                if (__OFADD__(v11, 1))
                  goto LABEL_27;
                if (v7 >= v5)
                  goto LABEL_24;
                v10 = *(_QWORD *)(v1 + 8 * v7);
                ++v11;
                if (v10)
                  goto LABEL_22;
              }
            }
            v7 = v11;
          }
        }
      }
    }
LABEL_22:
    v4 = (v10 - 1) & v10;
LABEL_5:
    swift_bridgeObjectRetain();
    v8 = sub_1AC72631C();
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      v12 = 1;
LABEL_25:
      swift_release();
      return v12;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1AC6BE2D8()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6BE2E8()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6BE2F8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE058);
    v8 = a2;
    result = MEMORY[0x1AF440830](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AC6BE358()
{
  unint64_t result;

  result = qword_1ED0BD740;
  if (!qword_1ED0BD740)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0BD740);
  }
  return result;
}

void Layout.withMeasurements(providedBy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC68E218(v11, (uint64_t)v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  sub_1AC704424(v14, (uint64_t)v10, a2, a3);
  a4[3] = &type metadata for PartialMeasurableLayout;
  a4[4] = &off_1E5BF9048;
  a4[5] = &off_1E5BF9038;
  *a4 = v12;
}

uint64_t dispatch thunk of Layout.placeChildren(relativeTo:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id ViewRecycler.didRecycle(_:)(void *a1)
{
  return sub_1AC6BE4C4(a1);
}

id ViewRecycler.didDiscard(_:)(void *a1)
{
  return sub_1AC6BE4A8(a1);
}

id ViewRecycler.didDequeue(_:)(void *a1)
{
  return sub_1AC6BE4B4(a1);
}

id sub_1AC6BE484(void **a1)
{
  return sub_1AC6BE4C4(*a1);
}

id sub_1AC6BE490(void **a1)
{
  return sub_1AC6BE4A8(*a1);
}

id sub_1AC6BE49C(void **a1)
{
  return sub_1AC6BE4B4(*a1);
}

id sub_1AC6BE4A8(void *a1)
{
  return objc_msgSend(a1, sel_removeFromSuperview);
}

id sub_1AC6BE4B4(void *a1)
{
  return objc_msgSend(a1, sel_setHidden_, 0);
}

id sub_1AC6BE4C4(void *a1)
{
  return objc_msgSend(a1, sel_setHidden_, 1);
}

uint64_t sub_1AC6BE4D4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for ViewRecycler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewRecycler);
}

uint64_t sub_1AC6BE4E8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 0x5474736575716572;
  if (*v0)
    return v1;
  else
    return 7955819;
}

uint64_t sub_1AC6BE540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6BF55C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AC6BE564(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1AC6BE570()
{
  sub_1AC6BE73C();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6BE598()
{
  sub_1AC6BE73C();
  return sub_1AC726BBC();
}

uint64_t DSLocalizationInfoLog.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AD48);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6BE73C();
  sub_1AC726B68();
  v8[15] = 0;
  sub_1AC7269F4();
  if (!v1)
  {
    v8[14] = 1;
    sub_1AC7269F4();
    type metadata accessor for DSLocalizationInfoLog();
    v8[13] = 2;
    sub_1AC7258FC();
    sub_1AC688D20(&qword_1EEC8AD58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1AC726A18();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1AC6BE73C()
{
  unint64_t result;

  result = qword_1EEC8AD50;
  if (!qword_1EEC8AD50)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B3D8, &type metadata for DSLocalizationInfoLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD50);
  }
  return result;
}

uint64_t type metadata accessor for DSLocalizationInfoLog()
{
  uint64_t result;

  result = qword_1EEC8AD88;
  if (!qword_1EEC8AD88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DSLocalizationInfoLog.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  char v27;
  char v28;

  v22 = a2;
  v23 = sub_1AC7258FC();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AD60);
  v6 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DSLocalizationInfoLog();
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1AC6BE73C();
  sub_1AC726B50();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v20 = v9;
  v13 = v6;
  v14 = v5;
  v16 = v23;
  v15 = v24;
  v28 = 0;
  *v11 = sub_1AC7269AC();
  v11[1] = v17;
  v27 = 1;
  v11[2] = sub_1AC7269AC();
  v11[3] = v18;
  v26 = 2;
  sub_1AC688D20(&qword_1EEC8AD68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  sub_1AC7269D0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v15);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v11 + *(int *)(v20 + 24), v14, v16);
  sub_1AC6BEA5C((uint64_t)v11, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return sub_1AC6BEAA0((uint64_t)v11);
}

uint64_t sub_1AC6BEA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6BEAA0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AC6BEADC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DSLocalizationInfoLog.init(from:)(a1, a2);
}

uint64_t sub_1AC6BEAF0(_QWORD *a1)
{
  return DSLocalizationInfoLog.encode(to:)(a1);
}

void sub_1AC6BEB04()
{
  qword_1EEC8AD30 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)algn_1EEC8AD38 = 0xD000000000000022;
  qword_1EEC8AD40 = 0x80000001AC72B2D0;
}

uint64_t static DSLocalizationDiagnosticsCollector.shared.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EEC8A1E0 != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EEC8AD38;
  v3 = qword_1EEC8AD40;
  *a1 = qword_1EEC8AD30;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t DSLocalizationDiagnosticsCollector.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DSLocalizationDiagnosticsCollector.getDiagnosticInfo()()
{
  uint64_t v0;

  sub_1AC725800();
  swift_allocObject();
  sub_1AC7257F4();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AD70);
  sub_1AC6BEC74();
  v0 = sub_1AC7257E8();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_1AC6BEC74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEC8AD78;
  if (!qword_1EEC8AD78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AD70);
    v2 = sub_1AC688D20(&qword_1EEC8AD80, (uint64_t (*)(uint64_t))type metadata accessor for DSLocalizationInfoLog, (uint64_t)&protocol conformance descriptor for DSLocalizationInfoLog);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD78);
  }
  return result;
}

Swift::Void __swiftcall DSLocalizationDiagnosticsCollector.addLocalizationLog(by:and:)(Swift::String by, Swift::String and)
{
  _QWORD **v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  object = and._object;
  countAndFlagsBits = and._countAndFlagsBits;
  v5 = by._object;
  v6 = by._countAndFlagsBits;
  v7 = type metadata accessor for DSLocalizationInfoLog();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AC7258F0();
  *v10 = v6;
  v10[1] = (uint64_t)v5;
  v10[2] = countAndFlagsBits;
  v10[3] = (uint64_t)object;
  v11 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = (_QWORD *)sub_1AC6A2E14(0, v11[2] + 1, 1, v11);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = (_QWORD *)sub_1AC6A2E14(v12 > 1, v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  sub_1AC6BEEE8((uint64_t)v10, (uint64_t)v11+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v13);
  *v2 = v11;
}

Swift::Void __swiftcall DSLocalizationDiagnosticsCollector.clearLogs()()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1AC6BEE3C()
{
  uint64_t v0;

  sub_1AC725800();
  swift_allocObject();
  sub_1AC7257F4();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AD70);
  sub_1AC6BEC74();
  v0 = sub_1AC7257E8();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1AC6BEEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DSLocalizationInfoLog();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for DSLocalizationInfoLog(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1AC7258FC();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for DSLocalizationInfoLog(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1AC7258FC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DSLocalizationInfoLog(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AC7258FC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for DSLocalizationInfoLog(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AC7258FC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for DSLocalizationInfoLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1AC7258FC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for DSLocalizationInfoLog(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1AC7258FC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSLocalizationInfoLog()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6BF238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1AC7258FC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DSLocalizationInfoLog()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6BF2C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1AC7258FC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1AC6BF334()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AC7258FC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSLocalizationDiagnosticsCollector()
{
  return &type metadata for DSLocalizationDiagnosticsCollector;
}

uint64_t storeEnumTagSinglePayload for DSLocalizationInfoLog.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AC6BF404 + 4 * byte_1AC72B245[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AC6BF438 + 4 * byte_1AC72B240[v4]))();
}

uint64_t sub_1AC6BF438(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BF440(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6BF448);
  return result;
}

uint64_t sub_1AC6BF454(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6BF45CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AC6BF460(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6BF468(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSLocalizationInfoLog.CodingKeys()
{
  return &type metadata for DSLocalizationInfoLog.CodingKeys;
}

unint64_t sub_1AC6BF488()
{
  unint64_t result;

  result = qword_1EEC8AD98;
  if (!qword_1EEC8AD98)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B3B0, &type metadata for DSLocalizationInfoLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8AD98);
  }
  return result;
}

unint64_t sub_1AC6BF4D0()
{
  unint64_t result;

  result = qword_1EEC8ADA0;
  if (!qword_1EEC8ADA0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B320, &type metadata for DSLocalizationInfoLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADA0);
  }
  return result;
}

unint64_t sub_1AC6BF518()
{
  unint64_t result;

  result = qword_1EEC8ADA8;
  if (!qword_1EEC8ADA8)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B348, &type metadata for DSLocalizationInfoLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADA8);
  }
  return result;
}

uint64_t sub_1AC6BF55C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5474736575716572 && a2 == 0xEB00000000656D69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id sub_1AC6BF6B0()
{
  if (qword_1ED0BDC18 != -1)
    swift_once();
  qword_1EEC8ADB0 = qword_1ED0BDC20;
  return (id)qword_1ED0BDC20;
}

uint64_t Models.Paragraph.Alignment.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  v4 = 5;
  if (v2 < 5)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static Models.Paragraph.Alignment.allCases.getter()
{
  return &unk_1E5BFBDF0;
}

uint64_t Models.Paragraph.Alignment.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC6BF784 + 4 * byte_1AC72B428[*v0]))(1952867692, 0xE400000000000000);
}

uint64_t sub_1AC6BF784()
{
  return 0x7265746E6563;
}

uint64_t sub_1AC6BF798()
{
  return 0x7468676972;
}

uint64_t sub_1AC6BF7AC()
{
  return 0x656966697473756ALL;
}

void sub_1AC6BF7DC(char *a1)
{
  sub_1AC70B4B4(*a1);
}

void sub_1AC6BF7E8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1AC726AFC();
  __asm { BR              X9 }
}

uint64_t sub_1AC6BF82C()
{
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

void sub_1AC6BF8AC()
{
  __asm { BR              X10 }
}

uint64_t sub_1AC6BF8E0()
{
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

void sub_1AC6BF94C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1AC726AFC();
  __asm { BR              X9 }
}

uint64_t sub_1AC6BF98C()
{
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6BFA0C@<X0>(char *a1@<X8>)
{
  return Models.Paragraph.Alignment.init(rawValue:)(a1);
}

uint64_t sub_1AC6BFA18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1AC6BFA40 + 4 * byte_1AC72B43C[*v0]))();
}

void sub_1AC6BFA40(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
}

void sub_1AC6BFA58(_QWORD *a1@<X8>)
{
  *a1 = 0x7468676972;
  a1[1] = 0xE500000000000000;
}

void sub_1AC6BFA70(_QWORD *a1@<X8>)
{
  *a1 = 0x656966697473756ALL;
  a1[1] = 0xE900000000000064;
}

void sub_1AC6BFAA4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5BFBF40;
}

uint64_t Models.Paragraph.Style.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static Models.Paragraph.Style.allCases.getter()
{
  return &unk_1E5BFBCA0;
}

uint64_t Models.Paragraph.Style.rawValue.getter()
{
  return 0x647261646E617473;
}

uint64_t sub_1AC6BFB2C()
{
  return 1;
}

uint64_t sub_1AC6BFB34()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6BFB84()
{
  return sub_1AC7262A4();
}

uint64_t sub_1AC6BFB9C()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6BFBE8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1AC6BFC38(_QWORD *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void sub_1AC6BFC54(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5BFBDC8;
}

uint64_t Models.Paragraph.init(text:style:alignment:isCollapsed:wantsCollapsedNewlines:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, char *a2@<X2>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v28;
  _QWORD v29[2];
  char v30;

  v10 = *a1;
  v11 = a1[1];
  v12 = *((_BYTE *)a1 + 16);
  v13 = *a2;
  v14 = (int *)type metadata accessor for Models.Paragraph();
  v15 = a6 + v14[5];
  *(_QWORD *)v15 = v10;
  *(_QWORD *)(v15 + 8) = v11;
  *(_BYTE *)(v15 + 16) = v12;
  v29[0] = v10;
  v29[1] = v11;
  v30 = v12;
  v16 = sub_1AC6C0CD4((uint64_t)v29);
  v17 = v16;
  *(_QWORD *)(a6 + v14[6]) = v16;
  if ((a4 & 1) != 0)
  {
    v18 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v19 = v17;
    v20 = objc_msgSend(v18, sel_initWithAttributedString_, v19);
    v28 = objc_msgSend(v20, sel_length);
    v21 = objc_msgSend(v20, sel_mutableString);
    LOBYTE(v18) = v13;
    v22 = a3;
    v23 = a5;
    v24 = (void *)sub_1AC726208();
    v25 = (void *)sub_1AC726208();
    objc_msgSend(v21, sel_replaceOccurrencesOfString_withString_options_range_, v24, v25, 1024, 0, v28);

    a5 = v23;
    a3 = v22;
    v13 = (char)v18;

    *(_QWORD *)(a6 + v14[7]) = v20;
  }
  else
  {
    *(_QWORD *)(a6 + v14[7]) = v16;
    v26 = v16;
  }
  *(_BYTE *)(a6 + v14[8]) = v13;
  *(_BYTE *)(a6 + v14[10]) = a3 & 1;
  return sub_1AC6C1178(a5, a6);
}

uint64_t type metadata accessor for Models.Paragraph()
{
  uint64_t result;

  result = qword_1EEC8AE68;
  if (!qword_1EEC8AE68)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Models.Paragraph.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  char v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  char v71;
  _QWORD v72[2];
  unsigned __int8 v73;
  int v74;
  unsigned __int8 v75;

  v64 = a3;
  v66 = type metadata accessor for Models.Paragraph();
  MEMORY[0x1E0C80A78](v66);
  v65 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1AC725D58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v62 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v53 - v12;
  v67 = sub_1AC725C74();
  v14 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v61 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v59 = (char *)&v53 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v53 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v53 - v22;
  sub_1AC725C80();
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v69 = a2;
  v60 = v24;
  v24(v13, a2, v8);
  v25 = v68;
  Models.ProgrammedText.init(deserializing:using:)((uint64_t)v23, (uint64_t)v13, v72);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v69, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, v67);
  }
  else
  {
    v68 = v9;
    v57 = v72[0];
    v58 = 0;
    v56 = v72[1];
    v55 = v73;
    v54 = a1;
    sub_1AC725C80();
    sub_1AC6C11C0();
    sub_1AC725BFC();
    v27 = *(void (**)(char *, uint64_t))(v14 + 8);
    v28 = v67;
    v27(v20, v67);
    sub_1AC725C80();
    sub_1AC6C1204();
    sub_1AC725BFC();
    v27(v20, v28);
    v74 = v75;
    v29 = v59;
    sub_1AC725C80();
    v30 = sub_1AC725C38();
    v27(v29, v28);
    LODWORD(v59) = v30 & 1;
    v31 = v61;
    sub_1AC725C80();
    LOBYTE(v29) = sub_1AC725C38();
    v61 = (char *)v27;
    v27(v31, v28);
    sub_1AC725EF0();
    sub_1AC725C80();
    v60(v62, v69, v8);
    v32 = (uint64_t)v63;
    sub_1AC725ED8();
    v34 = (uint64_t)v65;
    v33 = (int *)v66;
    v35 = &v65[*(int *)(v66 + 20)];
    v37 = v56;
    v36 = v57;
    *(_QWORD *)v35 = v57;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v55;
    v35[16] = v55;
    v70[0] = v36;
    v70[1] = v37;
    v71 = v38;
    v39 = sub_1AC6C0CD4((uint64_t)v70);
    v40 = v39;
    *(_QWORD *)(v34 + v33[6]) = v39;
    if ((v29 & 1) != 0)
    {
      v42 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
      v43 = v40;
      v44 = objc_msgSend(v42, sel_initWithAttributedString_, v43);
      v45 = objc_msgSend(v44, sel_length);
      v46 = v28;
      v47 = v32;
      v48 = objc_msgSend(v44, sel_mutableString);
      v49 = (void *)sub_1AC726208();
      v50 = (void *)sub_1AC726208();
      v51 = v45;
      v34 = (uint64_t)v65;
      objc_msgSend(v48, sel_replaceOccurrencesOfString_withString_options_range_, v49, v50, 1024, 0, v51);

      v33 = (int *)v66;
      v32 = v47;
      v28 = v46;

      *(_QWORD *)(v34 + v33[7]) = v44;
    }
    else
    {
      *(_QWORD *)(v34 + v33[7]) = v39;
      v41 = v39;
    }
    v52 = v64;
    *(_BYTE *)(v34 + v33[8]) = v74;
    *(_BYTE *)(v34 + v33[10]) = (_BYTE)v59;
    sub_1AC6C1178(v32, v34);
    sub_1AC6C1248(v34, v52);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v8);
    return ((uint64_t (*)(uint64_t, uint64_t))v61)(v54, v28);
  }
}

uint64_t Models.Paragraph.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6C128C(v1, a1);
}

id Models.Paragraph.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = v1 + *(int *)(type metadata accessor for Models.Paragraph() + 20);
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1AC68CEF8(v4, v5, v6);
}

id Models.Paragraph.attributedText.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 24));
}

id Models.Paragraph.collapsedAttributedText.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 28));
}

uint64_t Models.Paragraph.alignment.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Models.Paragraph();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t Models.Paragraph.isCollapsed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Models.Paragraph() + 40));
}

uint64_t sub_1AC6C04A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC6C04D4 + 4 * byte_1AC72B441[a1]))(1954047348, 0xE400000000000000);
}

uint64_t sub_1AC6C04D4()
{
  return 0x656C797473;
}

uint64_t sub_1AC6C04E8()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_1AC6C0504()
{
  return 0x70616C6C6F437369;
}

unint64_t sub_1AC6C0524()
{
  return 0xD000000000000016;
}

unint64_t sub_1AC6C0544()
{
  return 0xD000000000000011;
}

uint64_t sub_1AC6C0560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6C128C(v1, a1);
}

uint64_t sub_1AC6C056C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Paragraph.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1AC6C0580()
{
  sub_1AC6C11C0();
  return sub_1AC72637C();
}

uint64_t sub_1AC6C05DC()
{
  sub_1AC6C1204();
  return sub_1AC72637C();
}

uint64_t sub_1AC6C0638()
{
  unsigned __int8 *v0;

  return sub_1AC6C04A8(*v0);
}

uint64_t sub_1AC6C0640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6C2294(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AC6C0664(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1AC6C0670()
{
  sub_1AC6C12D4();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6C0698()
{
  sub_1AC6C12D4();
  return sub_1AC726BBC();
}

uint64_t Models.Paragraph.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  void *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  int v47;
  id v48;
  int v49;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  int v61;
  char v62;

  v55 = a2;
  v54 = type metadata accessor for Models.Paragraph();
  MEMORY[0x1E0C80A78](v54);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v43 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8ADC8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1AC6C12D4();
  v16 = (uint64_t)v57;
  sub_1AC726B50();
  if (!v16)
  {
    v52 = v4;
    v53 = v7;
    v57 = v10;
    v17 = v12;
    v62 = 0;
    sub_1AC6C1318();
    sub_1AC7269D0();
    v18 = v58;
    v19 = v59;
    v20 = v60;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8ADE0);
    v62 = 1;
    sub_1AC6B04E8(&qword_1EEC8ADE8, &qword_1EEC8ADE0, sub_1AC6C135C, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    v50 = v19;
    v51 = v18;
    v61 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AE08);
    v62 = 2;
    sub_1AC6B04E8(&qword_1EEC8AE10, &qword_1EEC8AE08, sub_1AC6C13C4, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    if (v58 - 5 >= 2)
      v21 = v58;
    else
      v21 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA78);
    v62 = 3;
    sub_1AC6B04E8((unint64_t *)&qword_1EEC8AA80, &qword_1EEC8AA78, (uint64_t (*)(void))sub_1AC6C142C, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    v49 = v21;
    v23 = v58;
    v24 = (v58 & 0xFE) != 2;
    v62 = 4;
    sub_1AC7269A0();
    LODWORD(v46) = v24;
    v47 = v23;
    LODWORD(v48) = v58;
    sub_1AC725EF0();
    LOBYTE(v58) = 5;
    sub_1AC688D20((unint64_t *)&qword_1EEC8AE30, (uint64_t (*)(uint64_t))MEMORY[0x1E0D401F0], MEMORY[0x1E0D40200]);
    v25 = (uint64_t)v57;
    sub_1AC7269A0();
    v26 = v51;
    v47 &= v46;
    v27 = v25;
    v28 = v48 & 0xFE;
    sub_1AC6C128C(v27, (uint64_t)v53);
    v29 = v26;
    v30 = (int *)v54;
    v31 = (uint64_t)v52;
    v32 = &v52[*(int *)(v54 + 20)];
    v33 = v50;
    *(_QWORD *)v32 = v29;
    *((_QWORD *)v32 + 1) = v33;
    v34 = v61;
    v32[16] = v61;
    v58 = v29;
    v59 = v33;
    v60 = v34;
    sub_1AC68CEF8(v29, v33, v34);
    v35 = sub_1AC6C0CD4((uint64_t)&v58);
    v36 = v35;
    *(_QWORD *)(v31 + v30[6]) = v35;
    if (v28 == 2 || (v48 & 1) == 0)
    {
      *(_QWORD *)(v31 + v30[7]) = v35;
      v41 = v35;
    }
    else
    {
      v37 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
      v46 = v36;
      v38 = objc_msgSend(v37, sel_initWithAttributedString_, v46);
      v48 = v38;
      v45 = objc_msgSend(v38, sel_length);
      v39 = objc_msgSend(v38, sel_mutableString);
      v40 = (void *)sub_1AC726208();
      v44 = (id)sub_1AC726208();
      objc_msgSend(v39, sel_replaceOccurrencesOfString_withString_options_range_, v40, v44, 1024, 0, v45);

      *(_QWORD *)(v31 + v30[7]) = v48;
    }
    v42 = v55;
    *(_BYTE *)(v31 + v30[8]) = v49;
    *(_BYTE *)(v31 + v30[10]) = v47;
    sub_1AC6C1178((uint64_t)v53, v31);
    sub_1AC6C1248(v31, v42);
    sub_1AC68A814(v51, v33, v61);
    sub_1AC6C1488((uint64_t)v57);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
}

uint64_t sub_1AC6C0CC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Paragraph.init(from:)(a1, a2);
}

id sub_1AC6C0CD4(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t inited;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38[10];
  char v39;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 255)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_init);
  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (void *)objc_opt_self();
  v5 = (id)*MEMORY[0x1E0DC4B10];
  sub_1AC6C2518(v2, v3, v1);
  if (qword_1EEC8A1E8 != -1)
    swift_once();
  v6 = objc_msgSend(v4, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v5, qword_1EEC8ADB0);

  v7 = v6;
  v8 = sub_1AC6DA8C4();
  v9 = (void *)sub_1AC6DA9F8();
  v10 = (void *)sub_1AC6DA9F8();

  if ((v1 & 1) != 0)
  {
    sub_1AC68CEF8(v2, v3, 1);
    v23 = objc_msgSend(v2, sel_string);
    v24 = sub_1AC72622C();
    v26 = v25;

    sub_1AC6C2530(v2, v3, v1);
    sub_1AC6C2530(v2, v3, v1);
    v38[0] = 10;
    v38[1] = 0xE100000000000000;
    v38[2] = (uint64_t)v7;
    v38[3] = (uint64_t)v8;
    v38[4] = 161644770;
    v38[5] = 0xA400000000000000;
    v38[6] = (uint64_t)v9;
    v38[7] = 606245;
    v38[8] = 0xE300000000000000;
    v38[9] = (uint64_t)v10;
    v39 = 0;
    v27 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
    swift_bridgeObjectRetain();
    v28 = v7;
    v29 = v8;
    swift_bridgeObjectRetain();
    v30 = v9;
    swift_bridgeObjectRetain();
    v31 = v10;
    v32 = sub_1AC71D9DC(v24, v26, v38);
    objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
    v33 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
    v34 = objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
    if (qword_1EEC8A278 != -1)
      swift_once();
    sub_1AC6D5BAC((void *)qword_1EEC8B988);

    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, *(_QWORD *)&v32[v33]);
    sub_1AC6C2530(v2, v3, v1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return v35;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8BA80);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1AC729820;
    v37 = v9;
    v12 = (void *)*MEMORY[0x1E0DC1178];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1178];
    v13 = sub_1AC69C244(0, (unint64_t *)&unk_1EEC8BA90);
    *(_QWORD *)(inited + 40) = v8;
    v14 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = v13;
    *(_QWORD *)(inited + 72) = v14;
    *(_QWORD *)(inited + 104) = sub_1AC69C244(0, (unint64_t *)&qword_1ED0BD740);
    *(_QWORD *)(inited + 80) = v7;
    sub_1AC6C2518(v2, v3, v1);
    v36 = v7;
    v15 = v12;
    v16 = v8;
    v17 = v14;
    sub_1AC6A9404(inited);
    v18 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v19 = (void *)sub_1AC726208();
    sub_1AC6C2530(v2, v3, v1);
    type metadata accessor for Key(0);
    sub_1AC688D20((unint64_t *)&qword_1ED0BDC10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1AC728C28);
    v20 = (void *)sub_1AC726178();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v18, sel_initWithString_attributes_, v19, v20);

    sub_1AC6C2530(v2, v3, v1);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
}

uint64_t sub_1AC6C1178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AC6C11C0()
{
  unint64_t result;

  result = qword_1EEC8ADB8;
  if (!qword_1EEC8ADB8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Style, &type metadata for Models.Paragraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADB8);
  }
  return result;
}

unint64_t sub_1AC6C1204()
{
  unint64_t result;

  result = qword_1EEC8ADC0;
  if (!qword_1EEC8ADC0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Alignment, &type metadata for Models.Paragraph.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADC0);
  }
  return result;
}

uint64_t sub_1AC6C1248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Models.Paragraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6C128C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AC6C12D4()
{
  unint64_t result;

  result = qword_1EEC8ADD0;
  if (!qword_1EEC8ADD0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B868, &_s9ParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADD0);
  }
  return result;
}

unint64_t sub_1AC6C1318()
{
  unint64_t result;

  result = qword_1EEC8ADD8;
  if (!qword_1EEC8ADD8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.ProgrammedText, &type metadata for Models.ProgrammedText);
    atomic_store(result, (unint64_t *)&qword_1EEC8ADD8);
  }
  return result;
}

uint64_t sub_1AC6C135C()
{
  return sub_1AC6B04E8(&qword_1EEC8ADF0, &qword_1EEC8ADF8, (uint64_t (*)(void))sub_1AC6C1380, MEMORY[0x1E0D41770]);
}

unint64_t sub_1AC6C1380()
{
  unint64_t result;

  result = qword_1EEC8AE00;
  if (!qword_1EEC8AE00)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Style, &type metadata for Models.Paragraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE00);
  }
  return result;
}

uint64_t sub_1AC6C13C4()
{
  return sub_1AC6B04E8(&qword_1EEC8AE18, &qword_1EEC8AE20, (uint64_t (*)(void))sub_1AC6C13E8, MEMORY[0x1E0D41770]);
}

unint64_t sub_1AC6C13E8()
{
  unint64_t result;

  result = qword_1EEC8AE28;
  if (!qword_1EEC8AE28)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Alignment, &type metadata for Models.Paragraph.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE28);
  }
  return result;
}

unint64_t sub_1AC6C142C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEC8AA88;
  if (!qword_1EEC8AA88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AA90);
    v2 = MEMORY[0x1E0DEAFC0];
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D41770], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AA88);
  }
  return result;
}

uint64_t sub_1AC6C1488(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AC6C14CC()
{
  unint64_t result;

  result = qword_1EEC8AE38;
  if (!qword_1EEC8AE38)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Alignment, &type metadata for Models.Paragraph.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE38);
  }
  return result;
}

uint64_t sub_1AC6C1510()
{
  return sub_1AC6C15A0(&qword_1EEC8AE40, &qword_1EEC8AE48);
}

unint64_t sub_1AC6C1538()
{
  unint64_t result;

  result = qword_1EEC8AE50;
  if (!qword_1EEC8AE50)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Paragraph.Style, &type metadata for Models.Paragraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE50);
  }
  return result;
}

uint64_t sub_1AC6C157C()
{
  return sub_1AC6C15A0(&qword_1EEC8AE58, &qword_1EEC8AE60);
}

uint64_t sub_1AC6C15A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *_s9ParagraphVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AC725EF0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(void **)v13;
    v15 = *((_QWORD *)v13 + 1);
    v16 = v13[16];
    sub_1AC68CEF8(*(void **)v13, v15, v16);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    v12[16] = v16;
    v17 = a3[6];
    v18 = a3[7];
    v19 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + v17) = (uint64_t)v19;
    v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = (uint64_t)v20;
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v21 = v19;
    v22 = v20;
  }
  return a1;
}

void _s9ParagraphVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1AC725EF0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_1AC68A814(*(void **)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));

}

char *_s9ParagraphVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(void **)v11;
  v13 = *((_QWORD *)v11 + 1);
  v14 = v11[16];
  sub_1AC68CEF8(*(void **)v11, v13, v14);
  *(_QWORD *)v10 = v12;
  *((_QWORD *)v10 + 1) = v13;
  v10[16] = v14;
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)&a2[v15];
  *(_QWORD *)&a1[v15] = v17;
  v18 = *(void **)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  v19 = v17;
  v20 = v18;
  return a1;
}

char *_s9ParagraphVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void **)v14;
  v16 = *((_QWORD *)v14 + 1);
  v17 = v14[16];
  sub_1AC68CEF8(*(void **)v14, v16, v17);
  v18 = *(void **)v13;
  v19 = *((_QWORD *)v13 + 1);
  v20 = v13[16];
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = v16;
  v13[16] = v17;
  sub_1AC68A814(v18, v19, v20);
  v21 = a3[6];
  v22 = *(void **)&a2[v21];
  v23 = *(void **)&a1[v21];
  *(_QWORD *)&a1[v21] = v22;
  v24 = v22;

  v25 = a3[7];
  v26 = *(void **)&a2[v25];
  v27 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = v26;
  v28 = v26;

  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *_s9ParagraphVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *_s9ParagraphVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[16];
  v16 = *(void **)v13;
  v17 = *((_QWORD *)v13 + 1);
  v18 = v13[16];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v15;
  sub_1AC68A814(v16, v17, v18);
  v19 = a3[6];
  v20 = *(void **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];

  v21 = a3[7];
  v22 = *(void **)&a1[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];

  a1[a3[8]] = a2[a3[8]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t _s9ParagraphVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6C1CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s9ParagraphVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6C1D30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_1AC6C1DAC()
{
  unint64_t v0;

  sub_1AC6C1E50();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1AC6C1E50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEC8AE78)
  {
    sub_1AC725EF0();
    v0 = sub_1AC7266C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEC8AE78);
  }
}

uint64_t _s9ParagraphV9AlignmentOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s9ParagraphV9AlignmentOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AC6C1F80 + 4 * byte_1AC72B44C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AC6C1FB4 + 4 * byte_1AC72B447[v4]))();
}

uint64_t sub_1AC6C1FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C1FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6C1FC4);
  return result;
}

uint64_t sub_1AC6C1FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6C1FD8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AC6C1FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C1FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Models.Paragraph.Alignment()
{
  return &type metadata for Models.Paragraph.Alignment;
}

uint64_t _s9ParagraphV5StyleOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s9ParagraphV5StyleOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AC6C2094 + 4 * byte_1AC72B451[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AC6C20B4 + 4 * byte_1AC72B456[v4]))();
}

_BYTE *sub_1AC6C2094(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AC6C20B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AC6C20BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AC6C20C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AC6C20CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AC6C20D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Models.Paragraph.Style()
{
  return &type metadata for Models.Paragraph.Style;
}

uint64_t _s9ParagraphV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1AC6C213C + 4 * byte_1AC72B460[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1AC6C2170 + 4 * byte_1AC72B45B[v4]))();
}

uint64_t sub_1AC6C2170(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C2178(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6C2180);
  return result;
}

uint64_t sub_1AC6C218C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6C2194);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1AC6C2198(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C21A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9ParagraphV10CodingKeysOMa()
{
  return &_s9ParagraphV10CodingKeysON;
}

unint64_t sub_1AC6C21C0()
{
  unint64_t result;

  result = qword_1EEC8AE80;
  if (!qword_1EEC8AE80)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B840, &_s9ParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE80);
  }
  return result;
}

unint64_t sub_1AC6C2208()
{
  unint64_t result;

  result = qword_1EEC8AE88;
  if (!qword_1EEC8AE88)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B7B0, &_s9ParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE88);
  }
  return result;
}

unint64_t sub_1AC6C2250()
{
  unint64_t result;

  result = qword_1EEC8AE90;
  if (!qword_1EEC8AE90)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72B7D8, &_s9ParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE90);
  }
  return result;
}

uint64_t sub_1AC6C2294(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x70616C6C6F437369 && a2 == 0xEB00000000646573 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001AC730CB0 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AC730CD0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

id sub_1AC6C2518(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1AC68CEF8(result, a2, a3 & 1);
  return result;
}

void sub_1AC6C2530(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_1AC68A814(a1, a2, a3 & 1);
}

uint64_t sub_1AC6C2548@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_0;

  v3 = *(_QWORD *)(a1 + 16);
  a2[3] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_0, v2, v3);
}

uint64_t sub_1AC6C2580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v21;

  v14 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v21 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v13 + 40))(a1, v14, v13, a4, a5, a6, a7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return AnyPlacementSequence.init<A>(_:)((uint64_t)v17, AssociatedTypeWitness, AssociatedConformanceWitness, v19, a3);
}

uint64_t AnyPrimitiveLayout.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_0;

  a5[3] = type metadata accessor for _ConcretePrimitiveLayoutBox(0, a2, a3, a4);
  a5[4] = (uint64_t)&off_1E5BF95A8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_0, a1, a2);
}

uint64_t type metadata accessor for _ConcretePrimitiveLayoutBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConcretePrimitiveLayoutBox);
}

uint64_t AnyPrimitiveLayout.base.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyPrimitiveLayout.layout(relativeTo:with:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[3];
  v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v12 + 16))(a1, v11, v12, a2, a3, a4, a5);
}

unint64_t sub_1AC6C27D0()
{
  unint64_t result;

  result = qword_1EEC8AE98;
  if (!qword_1EEC8AE98)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for AnyPlacementSequence, &type metadata for AnyPlacementSequence);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE98);
  }
  return result;
}

uint64_t sub_1AC6C2814(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[3];
  v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v12 + 16))(a1, v11, v12, a2, a3, a4, a5);
}

uint64_t initializeWithCopy for AnyPrimitiveLayout(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyPrimitiveLayout(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for AnyPrimitiveLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPrimitiveLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPrimitiveLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPrimitiveLayout()
{
  return &type metadata for AnyPrimitiveLayout;
}

uint64_t sub_1AC6C29D4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1AC6C29DC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AC6C2A48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1AC6C2AB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1AC6C2AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1AC6C2AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1AC6C2B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1AC6C2B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1AC6C2B88(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1AC6C2C38 + 4 * byte_1AC72B8C0[(v7 - 1)]))();
}

void sub_1AC6C2C88(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void LabelPlaceholder.init(text:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a6;
  *(_BYTE *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = a8 & 1;
}

void LabelPlaceholder.init(attributedText:font:textAlignment:lineBreakMode:lineSpacing:numberOfLines:isLanguageAware:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  id v15;
  id v16;

  v15 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
  v16 = a2;

  *(_QWORD *)a8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, a1);
  *(_QWORD *)(a8 + 8) = 0;
  *(_BYTE *)(a8 + 16) = 1;
  *(_QWORD *)(a8 + 24) = v16;
  *(_QWORD *)(a8 + 32) = a3;
  *(_QWORD *)(a8 + 40) = a4;
  *(_QWORD *)(a8 + 48) = a6;
  *(_QWORD *)(a8 + 56) = a5;
  *(_BYTE *)(a8 + 96) = 0;

  *(_QWORD *)(a8 + 104) = a7 & 1;
}

void LabelPlaceholder.init(attributedText:numberOfLines:isLanguageAware:)()
{
  sub_1AC726910();
  __break(1u);
}

Swift::Bool __swiftcall LabelPlaceholder.isTruncated(whenFitting:)(CGSize whenFitting)
{
  uint64_t v1;
  double height;
  double width;
  uint64_t v4;
  unint64_t v5;
  id v7;
  id v8;
  id v9;
  Swift::Bool v10;

  height = whenFitting.height;
  width = whenFitting.width;
  v4 = *(_QWORD *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    if (!v4)
      return v4;
    v4 = (uint64_t)objc_msgSend((id)v4, sel_length);
    if (!v4)
      return v4;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v1 + 8);
  if (!v5)
  {
    LOBYTE(v4) = 0;
    return v4;
  }
  if ((v5 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v5) & 0xF;
  else
    v4 &= 0xFFFFFFFFFFFFuLL;
  if (v4)
  {
LABEL_10:
    if (width == 0.0 && height == 0.0)
    {
      LOBYTE(v4) = 1;
    }
    else
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel_system);
      v8 = objc_msgSend(v7, sel_preferredContentSizeCategory);

      v9 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, v8);
      v10 = LabelPlaceholder.willTextTruncate(fitting:with:)((CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width), (UITraitCollection)v9);

      LOBYTE(v4) = v10;
    }
  }
  return v4;
}

double LabelPlaceholder.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  id v5;
  double v6;

  v5 = objc_msgSend(a1, sel_traitCollection);
  *(_QWORD *)&v6 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v5);

  return v6;
}

double sub_1AC6C31B8(void *a1, double a2, double a3)
{
  id v5;
  double v6;

  v5 = objc_msgSend(a1, sel_traitCollection);
  *(_QWORD *)&v6 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v5);

  return v6;
}

uint64_t sub_1AC6C3230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD v10[4];
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  swift_beginAccess();
  sub_1AC690B74(v1 + 40, (uint64_t)v12);
  if ((v16 & 1) != 0)
  {
    v10[2] = v13;
    v10[3] = v14;
    v11 = v15;
    v10[0] = *(_OWORD *)v12;
    v10[1] = *(_OWORD *)&v12[16];
    sub_1AC6B9A14((uint64_t)v10, (uint64_t)&v4);
    v8 = a1;
    sub_1AC6B9A50((uint64_t)v10);
    v9 = 1;
    swift_beginAccess();
  }
  else
  {
    v4 = *(_QWORD *)v12;
    v5 = *(_OWORD *)&v12[8];
    v6 = a1;
    v7 = v13;
    v9 = 0;
    swift_beginAccess();
  }
  sub_1AC6C4254((uint64_t)&v4, v1 + 40);
  return swift_endAccess();
}

uint64_t sub_1AC6C3344(uint64_t a1)
{
  uint64_t v1;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  _OWORD v9[4];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[32];
  __int128 v13;
  uint64_t v14;
  char v15;

  swift_beginAccess();
  sub_1AC690B74(v1 + 40, (uint64_t)&v11);
  if ((v15 & 1) != 0)
  {
    v9[2] = *(_OWORD *)&v12[16];
    v9[3] = v13;
    v10 = v14;
    v9[0] = v11;
    v9[1] = *(_OWORD *)v12;
    sub_1AC6B9A14((uint64_t)v9, (uint64_t)&v4);
    v7 = a1;
    sub_1AC6B9A50((uint64_t)v9);
    v8 = 1;
    swift_beginAccess();
  }
  else
  {
    v4 = v11;
    v5 = a1;
    v6 = *(_OWORD *)&v12[8];
    v8 = 0;
    swift_beginAccess();
  }
  sub_1AC6C4254((uint64_t)&v4, v1 + 40);
  return swift_endAccess();
}

uint64_t sub_1AC6C3454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  _OWORD v8[4];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  swift_beginAccess();
  sub_1AC690B74(v0 + 40, (uint64_t)&v10);
  if ((v15 & 1) == 0)
    return v10;
  v8[2] = v12;
  v8[3] = v13;
  v9 = v14;
  v8[0] = v10;
  v8[1] = v11;
  v1 = *((_QWORD *)&v11 + 1);
  v2 = v12;
  __swift_project_boxed_opaque_existential_1(v8, *((uint64_t *)&v11 + 1));
  v3 = objc_msgSend((id)objc_opt_self(), sel_system);
  v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  v5 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  v6 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v2 + 8))(v5, v1, v2);

  sub_1AC6B9A50((uint64_t)v8);
  return v6;
}

void sub_1AC6C357C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  uint64_t v23;
  _BYTE v24[48];
  __int128 v25;
  uint64_t v26;
  char v27;

  swift_beginAccess();
  v3 = v1 + 40;
  sub_1AC690B74(v1 + 40, (uint64_t)v24);
  if ((v27 & 1) != 0)
  {
    *(_OWORD *)v22 = *(_OWORD *)&v24[32];
    *(_OWORD *)&v22[16] = v25;
    v23 = v26;
    v20 = *(_OWORD *)v24;
    v21 = *(_OWORD *)&v24[16];
    v4 = objc_msgSend((id)objc_opt_self(), sel_system);
    v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    v7 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
    v8 = *((_QWORD *)&v21 + 1);
    v9 = *(_QWORD *)v22;
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    v10 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v9 + 8))(v6, v8, v9);

    if (a1)
    {
      v12 = *(_QWORD *)&v22[24];
      v11 = v23;
      v14 = *(_OWORD *)&v22[8];
      sub_1AC6B9A50((uint64_t)&v20);

      v16 = a1;
      v17 = v14;
      *(_QWORD *)&v18 = v12;
      *((_QWORD *)&v18 + 1) = v11;
      v19 = 0;
      swift_beginAccess();
      sub_1AC6C4254((uint64_t)&v16, v3);
LABEL_6:
      swift_endAccess();
      return;
    }
    __break(1u);
  }
  else if (a1)
  {
    v13 = *(_OWORD *)&v24[24];
    v15 = *(_OWORD *)&v24[8];

    v16 = a1;
    v17 = v15;
    v18 = v13;
    v19 = 0;
    swift_beginAccess();
    sub_1AC6C4254((uint64_t)&v16, v1 + 40);
    goto LABEL_6;
  }
  __break(1u);
}

BOOL sub_1AC6C37A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  char v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  swift_beginAccess();
  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_string);
      sub_1AC72622C();

      if (qword_1ED0BE2A8 != -1)
        swift_once();
      v4 = sub_1AC725854();
      __swift_project_value_buffer(v4, (uint64_t)qword_1ED0BE180);
      sub_1AC68F334();
      sub_1AC726700();
      v6 = (v5 & 1) == 0;
      sub_1AC68A814(v2, v1, 1);
      swift_bridgeObjectRelease();
      return v6;
    }
    return 0;
  }
  if (!v1)
    return 0;
  v7 = qword_1ED0BE2A8;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = sub_1AC725854();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED0BE180);
  sub_1AC68F334();
  sub_1AC726700();
  v6 = (v9 & 1) == 0;
  sub_1AC68A814(v2, v1, 0);
  return v6;
}

double sub_1AC6C3954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  id v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  id v18;
  double v19;
  _OWORD v21[4];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v1 = v0;
  swift_beginAccess();
  sub_1AC690B74(v0 + 40, (uint64_t)&v23);
  if ((v28 & 1) != 0)
  {
    v21[2] = v25;
    v21[3] = v26;
    v22 = v27;
    v21[0] = v23;
    v21[1] = v24;
    v2 = *((_QWORD *)&v24 + 1);
    v3 = v25;
    __swift_project_boxed_opaque_existential_1(v21, *((uint64_t *)&v24 + 1));
    v4 = objc_msgSend((id)objc_opt_self(), sel_system);
    v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    v7 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v3 + 8))(v6, v2, v3);

    v8 = *(void **)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 24);
    v10 = *(_BYTE *)(v1 + 32);
    sub_1AC68CEF8(v8, v9, v10);
    v11 = v7;
    sub_1AC6E4F98(v7, v8, v9, v10);
    v13 = v12;

    sub_1AC68A814(v8, v9, v10);
    sub_1AC6B9A50((uint64_t)v21);
  }
  else
  {
    v14 = (void *)v23;
    v15 = *(void **)(v1 + 16);
    v16 = *(_QWORD *)(v1 + 24);
    v17 = *(_BYTE *)(v1 + 32);
    sub_1AC68CEF8(v15, v16, v17);
    v18 = v14;
    sub_1AC6E4F98(v14, v15, v16, v17);
    v13 = v19;

    sub_1AC68A814(v15, v16, v17);
  }
  return v13;
}

id sub_1AC6C3B5C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = sub_1AC7262B0();
      sub_1AC68A814(v1, v2, 0);
      return (id)v3;
    }
    v4 = *(void **)(v0 + 16);
    v5 = 0;
    v6 = 0;
LABEL_8:
    sub_1AC68A814(v4, v5, v6);
    return 0;
  }
  if (!v1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 24);
    v6 = 1;
    goto LABEL_8;
  }
  return objc_msgSend(*(id *)(v0 + 16), sel_length);
}

uint64_t sub_1AC6C3C18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[4];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v1 = *v0;
  swift_beginAccess();
  sub_1AC690B74(v1 + 40, (uint64_t)&v6);
  if ((v11 & 1) != 0)
  {
    v4[2] = v8;
    v4[3] = v9;
    v5 = v10;
    v4[0] = v6;
    v4[1] = v7;
    v2 = *((_QWORD *)&v9 + 1);
    sub_1AC6B9A50((uint64_t)v4);
  }
  else
  {
    v2 = *((_QWORD *)&v7 + 1);

  }
  return v2;
}

uint64_t sub_1AC6C3CA4(uint64_t a1)
{
  return sub_1AC6C3230(a1);
}

void (*sub_1AC6C3CC4(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v3 = malloc(0xC0uLL);
  *a1 = v3;
  v4 = *v1;
  v3[23] = v4;
  swift_beginAccess();
  sub_1AC690B74(v4 + 40, (uint64_t)v3);
  if ((v3[9] & 1) != 0)
  {
    v5 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v3 + 7) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v3 + 8) = v5;
    v3[18] = v3[8];
    v6 = *((_OWORD *)v3 + 1);
    *((_OWORD *)v3 + 5) = *(_OWORD *)v3;
    *((_OWORD *)v3 + 6) = v6;
    v7 = v3[17];
    sub_1AC6B9A50((uint64_t)(v3 + 10));
  }
  else
  {
    v7 = v3[3];

  }
  v3[22] = v7;
  return sub_1AC6C3D70;
}

void sub_1AC6C3D70(uint64_t a1, uint64_t a2)
{
  sub_1AC6C3EE0(a1, a2, (void (*)(_QWORD))sub_1AC6C3230);
}

uint64_t sub_1AC6C3D7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[4];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v1 = *v0;
  swift_beginAccess();
  sub_1AC690B74(v1 + 40, (uint64_t)&v6);
  if ((v11 & 1) != 0)
  {
    v4[2] = v8;
    v4[3] = v9;
    v5 = v10;
    v4[0] = v6;
    v4[1] = v7;
    v2 = v9;
    sub_1AC6B9A50((uint64_t)v4);
  }
  else
  {
    v2 = v7;

  }
  return v2;
}

uint64_t sub_1AC6C3E08(uint64_t a1)
{
  return sub_1AC6C3344(a1);
}

void (*sub_1AC6C3E28(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v3 = malloc(0xC0uLL);
  *a1 = v3;
  v4 = *v1;
  v3[23] = v4;
  swift_beginAccess();
  sub_1AC690B74(v4 + 40, (uint64_t)v3);
  if ((v3[9] & 1) != 0)
  {
    v5 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v3 + 7) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v3 + 8) = v5;
    v3[18] = v3[8];
    v6 = *((_OWORD *)v3 + 1);
    *((_OWORD *)v3 + 5) = *(_OWORD *)v3;
    *((_OWORD *)v3 + 6) = v6;
    v7 = v3[16];
    sub_1AC6B9A50((uint64_t)(v3 + 10));
  }
  else
  {
    v7 = v3[2];

  }
  v3[22] = v7;
  return sub_1AC6C3ED4;
}

void sub_1AC6C3ED4(uint64_t a1, uint64_t a2)
{
  sub_1AC6C3EE0(a1, a2, (void (*)(_QWORD))sub_1AC6C3344);
}

void sub_1AC6C3EE0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(_QWORD *)(*(_QWORD *)a1 + 176));
  free(v3);
}

uint64_t sub_1AC6C3F08()
{
  return sub_1AC6C3454();
}

void sub_1AC6C3F28(uint64_t a1)
{
  sub_1AC6C357C(a1);
}

void (*sub_1AC6C3F48(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;

  a1[1] = *v1;
  *a1 = sub_1AC6C3454();
  return sub_1AC6C3F80;
}

void sub_1AC6C3F80(uint64_t *a1, char a2)
{
  void *v2;
  id v3;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    sub_1AC6C357C((uint64_t)v2);

  }
  else
  {
    sub_1AC6C357C(*a1);
  }
}

BOOL sub_1AC6C3FD4()
{
  return sub_1AC6C37A0();
}

double sub_1AC6C3FF8()
{
  return sub_1AC6C3954();
}

id sub_1AC6C4018()
{
  return sub_1AC6C3B5C();
}

double sub_1AC6C4038()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 128);
}

uint64_t sub_1AC6C4078(double a1, double a2, double a3, double a4)
{
  double **v4;
  double *v9;
  uint64_t result;

  v9 = *v4;
  result = swift_beginAccess();
  v9[16] = a1;
  v9[17] = a2;
  v9[18] = a3;
  v9[19] = a4;
  return result;
}

uint64_t (*sub_1AC6C40D8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1AC6C4118(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 160) = a1;
  return result;
}

uint64_t (*sub_1AC6C4158())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double sub_1AC6C4198(void *a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v7;
  id v8;
  double v9;
  _BYTE v11[112];

  v7 = *v3 + 16;
  swift_beginAccess();
  sub_1AC68CE14(v7, (uint64_t)v11);
  v8 = objc_msgSend(a1, sel_traitCollection);
  *(_QWORD *)&v9 = (unint64_t)LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), (UITraitCollection)v8);

  sub_1AC68A798((uint64_t)v11);
  return v9;
}

uint64_t sub_1AC6C4254(uint64_t a1, uint64_t a2)
{
  assignWithTake for LabelPlaceholder.Appearance(a2, a1);
  return a2;
}

uint64_t sub_1AC6C4290()
{
  uint64_t v0;
  id *v1;

  sub_1AC68A814(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  v1 = (id *)(v0 + 40);
  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  else

  return swift_deallocObject();
}

uint64_t sub_1AC6C42D4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1AC726A30();
  qword_1EEC8AEA0 = result;
  *(_QWORD *)algn_1EEC8AEA8 = v1;
  return result;
}

uint64_t sub_1AC6C4320()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1AC726A30();
  qword_1EEC8AEB0 = result;
  *(_QWORD *)algn_1EEC8AEB8 = v1;
  return result;
}

uint64_t WritingDirectionsCounts.natural.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
}

uint64_t WritingDirectionsCounts.leftToRight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
}

uint64_t WritingDirectionsCounts.rightToLeft.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
}

uint64_t WritingDirectionsCounts.total.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_total);
}

uint64_t WritingDirectionsCounts.significantValues.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_significantValues);
}

uint64_t WritingDirectionsCounts.hasStronglyTypedCounts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts);
}

uint64_t WritingDirectionsCounts.isRTLEnough.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough);
}

uint64_t WritingDirectionsCounts.isRTLMinimal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal);
}

char *WritingDirectionsCounts.__allocating_init(natural:leftToRight:rightToLeft:)(char *a1, uint64_t a2, unint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(a1, a2, a3);
}

char *WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(char *result, uint64_t a2, unint64_t a3)
{
  _BYTE *v3;
  char *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  objc_super v10;

  *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_natural] = result;
  *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight] = a2;
  *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft] = a3;
  v4 = &result[a2];
  if (__CFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = __CFADD__(v4, a3);
  v6 = &v4[a3];
  if (v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_total] = v6;
  v7 = result != 0;
  if (!a3)
  {
    if (a2)
      ++v7;
    *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_significantValues] = v7;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] = a2 != 0;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] = 0;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal] = 0;
    goto LABEL_12;
  }
  if (a2)
    v8 = 2;
  else
    v8 = 1;
  *(_QWORD *)&v3[OBJC_IVAR___JUWritingDirectionsCounts_significantValues] = v8 + v7;
  v3[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] = 1;
  if (!__CFADD__(a3, a2))
  {
    v9 = (float)a3 / (float)(a3 + a2);
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] = v9 >= 0.4;
    v3[OBJC_IVAR___JUWritingDirectionsCounts_isRTLMinimal] = v9 >= 0.15;
LABEL_12:
    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for WritingDirectionsCounts();
    return (char *)objc_msgSendSuper2(&v10, sel_init);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WritingDirectionsCounts()
{
  return objc_opt_self();
}

char *WritingDirectionsCounts.__allocating_init(summing:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  void *v6;
  void *v7;
  char *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  if (!v1)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v13 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v3, v2);
  }
  v5 = (void **)(a1 + 32);
  while (1)
  {
    v7 = *v5++;
    v6 = v7;
    if (!v7)
      goto LABEL_3;
    result = (char *)objc_msgSend(v6, sel_writingDirectionsQuantities);
    v9 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
    v10 = __CFADD__(v4, v9);
    v4 += v9;
    if (v10)
      break;
    v11 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
    v10 = __CFADD__(v3, v11);
    v3 += v11;
    if (v10)
      goto LABEL_12;
    v12 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

    v10 = __CFADD__(v2, v12);
    v2 += v12;
    if (v10)
    {
      __break(1u);
      goto LABEL_10;
    }
LABEL_3:
    if (!--v1)
      goto LABEL_10;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void WritingDirectionsCounts.__allocating_init(counting:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  BOOL v6;
  void *v7;
  void *v8;
  _BYTE *v9;
  int v10;
  id v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
LABEL_14:
    v2 = 0;
    v3 = 0;
    v4 = 0;
LABEL_15:
    swift_bridgeObjectRelease();
    v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v3, v2);
    return;
  }
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = (void **)(a1 + 32);
  while (1)
  {
    v8 = *v5++;
    v7 = v8;
    if (!v8)
      goto LABEL_4;
    v9 = objc_msgSend(v7, sel_writingDirectionsQuantities);
    if ((v9[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] & 1) != 0)
      break;
    v10 = v9[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts];

    if (v10 == 1)
    {
      v6 = __CFADD__(v3++, 1);
      if (v6)
        goto LABEL_17;
    }
    else
    {
      v6 = __CFADD__(v4++, 1);
      if (v6)
      {
        __break(1u);
        goto LABEL_14;
      }
    }
LABEL_4:
    if (!--v1)
      goto LABEL_15;
  }

  v6 = __CFADD__(v2++, 1);
  if (!v6)
    goto LABEL_4;
  __break(1u);
LABEL_17:
  __break(1u);
}

BOOL sub_1AC6C4838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_1AC690E28(a1, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for WritingDirectionsCounts();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_QWORD *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_natural) == *(_QWORD *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_natural]
        && *(_QWORD *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight) == *(_QWORD *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight])
      {
        v2 = *(_QWORD *)(v1 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
        v3 = *(_QWORD *)&v5[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

        return v2 == v3;
      }

    }
  }
  else
  {
    sub_1AC690CC0((uint64_t)v6);
  }
  return 0;
}

BOOL == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_natural) == *(_QWORD *)(a2
                                                                                      + OBJC_IVAR___JUWritingDirectionsCounts_natural)
      && *(_QWORD *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight) == *(_QWORD *)(a2
                                                                                          + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight)
      && *(_QWORD *)(a1 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft) == *(_QWORD *)(a2
                                                                                          + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
}

char *+ infix(_:_:)(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v2 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
  v3 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  v4 = (char *)(v2 + v3);
  if (__CFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  v6 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  v7 = v5 + v6;
  if (__CFADD__(v5, v6))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];
  v9 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  v10 = v8 + v9;
  if (!__CFADD__(v8, v9))
  {
    v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v7, v10);
  }
LABEL_7:
  __break(1u);
  return result;
}

char *sub_1AC6C4AA8()
{
  id v0;
  char *result;

  v0 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
  result = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(0, 0, 0);
  qword_1EEC8AEC0 = (uint64_t)result;
  return result;
}

id static WritingDirectionsCounts.zero.getter()
{
  if (qword_1EEC8A200 != -1)
    swift_once();
  return (id)qword_1EEC8AEC0;
}

uint64_t sub_1AC6C4BB8()
{
  uint64_t v0;
  _QWORD v2[2];

  strcpy((char *)v2, "Natural: ");
  sub_1AC726A30();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  strcpy((char *)v2, "{ Counts: { ");
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC726868();
  swift_bridgeObjectRelease();
  sub_1AC726A30();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = v2[0];
  sub_1AC726868();
  swift_bridgeObjectRelease();
  sub_1AC726A30();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC726868();
  swift_bridgeObjectRelease();
  v2[0] = 0x45204C5452207349;
  v2[1] = 0xEF28206867756F6ELL;
  if (qword_1EEC8A1F0 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AC726868();
  swift_bridgeObjectRelease();
  v2[0] = 0xD000000000000010;
  v2[1] = 0x80000001AC730DB0;
  if (qword_1EEC8A1F8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  return v0;
}

id WritingDirectionsCounts.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WritingDirectionsCounts.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id WritingDirectionsCounts.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WritingDirectionsCounts();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void += infix(_:_:)(void **a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;

  v2 = (char *)*a1;
  v3 = *(_QWORD *)((char *)*a1 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  v4 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  v5 = (char *)(v3 + v4);
  if (__CFADD__(v3, v4))
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)&v2[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  v8 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  v9 = v7 + v8;
  if (__CFADD__(v7, v8))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = *(_QWORD *)&v2[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];

  v12 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  v13 = v11 + v12;
  if (!__CFADD__(v11, v12))
  {
    v14 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    *a1 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v5, v9, v13);
    return;
  }
LABEL_7:
  __break(1u);
}

char *sub_1AC6C5208(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v2 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_natural];
  v3 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_natural);
  v4 = (char *)(v2 + v3);
  if (__CFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_leftToRight];
  v6 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_leftToRight);
  v7 = v5 + v6;
  if (__CFADD__(v5, v6))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = *(_QWORD *)&result[OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft];
  v9 = *(_QWORD *)(a2 + OBJC_IVAR___JUWritingDirectionsCounts_rightToLeft);
  v10 = v8 + v9;
  if (!__CFADD__(v8, v9))
  {
    v11 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
    return WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v4, v7, v10);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t method lookup function for WritingDirectionsCounts()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WritingDirectionsCounts.__allocating_init(natural:leftToRight:rightToLeft:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static WritingDirectionsCounts.add(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t Models.Button.Kind.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Models.Button.Kind.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void static Models.Button.Kind.standard.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void static Models.Button.Kind.share.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6572616873;
  a1[1] = 0xE500000000000000;
}

uint64_t Models.Button.init(kind:title:action:buttonColor:titleColor:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  _QWORD *v19;

  v15 = *a1;
  v16 = a1[1];
  v17 = (int *)type metadata accessor for Models.Button();
  v18 = (_QWORD *)(a8 + v17[5]);
  *v18 = v15;
  v18[1] = v16;
  v19 = (_QWORD *)(a8 + v17[6]);
  *v19 = a2;
  v19[1] = a3;
  sub_1AC6C5414(a4, a8 + v17[9], &qword_1EEC8ABA0);
  *(_QWORD *)(a8 + v17[7]) = a5;
  *(_QWORD *)(a8 + v17[8]) = a6;
  return sub_1AC6C5414(a7, a8, &qword_1EEC8AB88);
}

uint64_t type metadata accessor for Models.Button()
{
  uint64_t result;

  result = qword_1EEC8AF50;
  if (!qword_1EEC8AF50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1AC6C5414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t Models.Button.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[40];
  char *v65;

  v60 = a2;
  v55 = a3;
  v4 = sub_1AC725D58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1AC725C74();
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  MEMORY[0x1E0C80A78](v8);
  v56 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v49 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v49 - v13;
  MEMORY[0x1E0C80A78](v15);
  v16 = sub_1AC725EF0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1;
  sub_1AC725C80();
  v20 = v19;
  v21 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v60, v4);
  v22 = v61;
  sub_1AC725EE4();
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v21, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v65, v59);
  }
  else
  {
    v24 = v57;
    v51 = v5;
    v52 = v20;
    v53 = v4;
    v54 = v17;
    v61 = v16;
    sub_1AC725C80();
    v25 = sub_1AC725C68();
    v26 = v59;
    v27 = *(void (**)(char *, uint64_t))(v58 + 8);
    v28 = v14;
    v30 = v29;
    v27(v28, v59);
    if (v30)
    {
      v50 = v25;
      v31 = v24;
      sub_1AC725C80();
      sub_1AC725E3C();
      v27(v24, v26);
      sub_1AC6C5970();
      sub_1AC725C80();
      static UIColor.tryToMakeInstance(byDeserializing:using:)();
      v58 = v32;
      v27(v24, v26);
      sub_1AC725C80();
      static UIColor.tryToMakeInstance(byDeserializing:using:)();
      v34 = v33;
      v27(v31, v26);
      v35 = v56;
      sub_1AC725C80();
      sub_1AC6C59AC();
      sub_1AC725C08();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v21, v53);
      v27(v65, v26);
      v27(v35, v26);
      v40 = v62;
      v41 = v63;
      v42 = (int *)type metadata accessor for Models.Button();
      v43 = v55;
      sub_1AC6C5414((uint64_t)v64, v55 + v42[9], &qword_1EEC8ABA0);
      v44 = v34;
      v45 = v54;
      v46 = v61;
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v43, v52, v61);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v46);
      v47 = (_QWORD *)(v43 + v42[5]);
      *v47 = v40;
      v47[1] = v41;
      v48 = (uint64_t *)(v43 + v42[6]);
      *v48 = v50;
      v48[1] = v30;
      *(_QWORD *)(v43 + v42[7]) = v58;
      *(_QWORD *)(v43 + v42[8]) = v44;
    }
    else
    {
      v36 = sub_1AC726118();
      sub_1AC688D20((unint64_t *)&qword_1EEC8A9B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D41500], MEMORY[0x1E0D41508]);
      swift_allocError();
      v38 = v37;
      v39 = type metadata accessor for Models.Button();
      *v38 = 0x656C746974;
      v38[1] = 0xE500000000000000;
      v38[2] = v39;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0D414E8], v36);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v21, v53);
      v27(v65, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v52, v61);
    }
  }
  return result;
}

unint64_t sub_1AC6C5970()
{
  unint64_t result;

  result = qword_1EEC8AF08;
  if (!qword_1EEC8AF08)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8AF08);
  }
  return result;
}

unint64_t sub_1AC6C59AC()
{
  unint64_t result;

  result = qword_1EEC8AF10;
  if (!qword_1EEC8AF10)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Button.Kind, &type metadata for Models.Button.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF10);
  }
  return result;
}

uint64_t Models.Button.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6902E4(v1, a1, &qword_1EEC8AB88);
}

uint64_t Models.Button.kind.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for Models.Button() + 20));
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Models.Button.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Models.Button() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void *Models.Button.buttonColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Button() + 28));
  v2 = v1;
  return v1;
}

void *Models.Button.titleColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for Models.Button() + 32));
  v2 = v1;
  return v1;
}

uint64_t Models.Button.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Models.Button();
  return sub_1AC6902E4(v1 + *(int *)(v3 + 36), a1, &qword_1EEC8ABA0);
}

uint64_t sub_1AC6C5B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6902E4(v1, a1, &qword_1EEC8AB88);
}

uint64_t sub_1AC6C5B44@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Button.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1AC6C5B58()
{
  sub_1AC6C59AC();
  return sub_1AC72637C();
}

uint64_t sub_1AC6C5BB4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1AC6C5BE8 + 4 * byte_1AC72BA78[*v0]))(0xD000000000000011, 0x80000001AC730CD0);
}

uint64_t sub_1AC6C5BE8()
{
  return 0x656C746974;
}

uint64_t sub_1AC6C5BFC()
{
  return 0x6E6F69746361;
}

uint64_t sub_1AC6C5C10()
{
  return 0x6F436E6F74747562;
}

uint64_t sub_1AC6C5C30()
{
  return 0x6C6F43656C746974;
}

uint64_t sub_1AC6C5C4C()
{
  return 1684957547;
}

uint64_t sub_1AC6C5C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6C7020(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AC6C5C80()
{
  sub_1AC6C6364();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6C5CA8()
{
  sub_1AC6C6364();
  return sub_1AC726BBC();
}

uint64_t Models.Button.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  _QWORD *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[64];

  v57 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AF18);
  MEMORY[0x1E0C80A78](v3);
  v55 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v5);
  v50 = (unint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AC725D58();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x1E0C80A78](v7);
  v56 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AC725C74();
  v10 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  v52 = v10;
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v43 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AF20);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = sub_1AC6C6364();
  v20 = v58;
  sub_1AC726B50();
  if (!v20)
  {
    v46 = v19;
    v47 = v16;
    v58 = v18;
    v48 = v15;
    v21 = v57;
    sub_1AC68E218((uint64_t)a1, (uint64_t)v61);
    sub_1AC725C44();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1AC726B44();
    sub_1AC725D4C();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AF30);
    v61[0] = 0;
    sub_1AC6C63A8();
    v23 = (uint64_t)v55;
    sub_1AC7269A0();
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v23, 1, v22);
    v45 = v14;
    if (v24 == 1)
    {
      sub_1AC6916CC(v23, &qword_1EEC8AF18);
      v25 = sub_1AC725EF0();
      v26 = v50;
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v50, 1, 1, v25);
    }
    else
    {
      v26 = v50;
      sub_1AC6902E4(v23, v50, &qword_1EEC8AB88);
      sub_1AC6916CC(v23, &qword_1EEC8AF30);
    }
    v27 = v51;
    v61[0] = 1;
    v28 = v58;
    v51 = sub_1AC7269AC();
    v55 = v30;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1AC726B44();
    sub_1AC725FBC();
    swift_bridgeObjectRelease();
    LOBYTE(v59) = 2;
    sub_1AC725F2C();
    v50 = sub_1AC6C5970();
    v31 = v49;
    sub_1AC725C80();
    static UIColor.tryToMakeInstance(byDeserializing:using:)();
    v46 = v32;
    v44 = *(void (**)(char *, uint64_t))(v52 + 8);
    v44(v31, v27);
    sub_1AC725C80();
    static UIColor.tryToMakeInstance(byDeserializing:using:)();
    v52 = v33;
    v34 = v31;
    v35 = v44;
    v44(v34, v27);
    v61[63] = 5;
    sub_1AC6C6488();
    v36 = v48;
    sub_1AC7269D0();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);
    v35(v45, v27);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v36);
    v38 = v59;
    v37 = v60;
    v39 = (int *)type metadata accessor for Models.Button();
    sub_1AC6C5414((uint64_t)v61, v21 + v39[9], &qword_1EEC8ABA0);
    sub_1AC6C5414(v26, v21, &qword_1EEC8AB88);
    v40 = (_QWORD *)(v21 + v39[5]);
    *v40 = v38;
    v40[1] = v37;
    v41 = (uint64_t *)(v21 + v39[6]);
    v42 = v55;
    *v41 = v51;
    v41[1] = (uint64_t)v42;
    *(_QWORD *)(v21 + v39[7]) = v46;
    *(_QWORD *)(v21 + v39[8]) = v52;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1AC6C6364()
{
  unint64_t result;

  result = qword_1EEC8AF28;
  if (!qword_1EEC8AF28)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72BCE8, &_s6ButtonV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF28);
  }
  return result;
}

unint64_t sub_1AC6C63A8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EEC8AF38;
  if (!qword_1EEC8AF38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AF30);
    v2 = sub_1AC6C640C();
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D3FB78], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF38);
  }
  return result;
}

unint64_t sub_1AC6C640C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEC8AF40;
  if (!qword_1EEC8AF40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8AB88);
    v2 = sub_1AC688D20((unint64_t *)&qword_1EEC8AE30, (uint64_t (*)(uint64_t))MEMORY[0x1E0D401F0], MEMORY[0x1E0D40200]);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D41770], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF40);
  }
  return result;
}

unint64_t sub_1AC6C6488()
{
  unint64_t result;

  result = qword_1EEC8AF48;
  if (!qword_1EEC8AF48)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Button.Kind, &type metadata for Models.Button.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF48);
  }
  return result;
}

uint64_t sub_1AC6C64CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Button.init(from:)(a1, a2);
}

uint64_t *_s6ButtonVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  __int128 v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AC725EF0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[7];
    v20 = a3[8];
    v21 = *(void **)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = (uint64_t)v21;
    v22 = *(void **)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = (uint64_t)v22;
    v23 = a3[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_QWORD *)v25 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = v21;
    v28 = v22;
    if (v26)
    {
      v29 = *((_QWORD *)v25 + 4);
      *((_QWORD *)v24 + 3) = v26;
      *((_QWORD *)v24 + 4) = v29;
      (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
    }
    else
    {
      v30 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v30;
      *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    }
  }
  return a1;
}

uint64_t _s6ButtonVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_1AC725EF0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = a1 + a2[9];
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

char *_s6ButtonVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  __int128 v28;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[7];
  v18 = a3[8];
  v19 = *(void **)&a2[v17];
  *(_QWORD *)&a1[v17] = v19;
  v20 = *(void **)&a2[v18];
  *(_QWORD *)&a1[v18] = v20;
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = v19;
  v26 = v20;
  if (v24)
  {
    v27 = *((_QWORD *)v23 + 4);
    *((_QWORD *)v22 + 3) = v24;
    *((_QWORD *)v22 + 4) = v27;
    (**(void (***)(char *, char *, uint64_t))(v24 - 8))(v22, v23, v24);
  }
  else
  {
    v28 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v28;
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  }
  return a1;
}

char *_s6ButtonVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = *(void **)&a1[v18];
  v20 = *(void **)&a2[v18];
  *(_QWORD *)&a1[v18] = v20;
  v21 = v20;

  v22 = a3[8];
  v23 = *(void **)&a1[v22];
  v24 = *(void **)&a2[v22];
  *(_QWORD *)&a1[v22] = v24;
  v25 = v24;

  v26 = a3[9];
  v27 = (uint64_t)&a1[v26];
  v28 = &a2[v26];
  v29 = *((_QWORD *)v28 + 3);
  if (!*(_QWORD *)&a1[v26 + 24])
  {
    if (v29)
    {
      *(_QWORD *)(v27 + 24) = v29;
      *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
      (**(void (***)(uint64_t, char *))(v29 - 8))(v27, v28);
      return a1;
    }
LABEL_13:
    v30 = *(_OWORD *)v28;
    v31 = *((_OWORD *)v28 + 1);
    *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
    *(_OWORD *)v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
    return a1;
  }
  if (!v29)
  {
    __swift_destroy_boxed_opaque_existential_1(v27);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v27, (uint64_t *)v28);
  return a1;
}

char *_s6ButtonVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[9];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  return a1;
}

char *_s6ButtonVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = *(void **)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];

  v24 = a3[8];
  v25 = *(void **)&a1[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];

  v26 = a3[9];
  v27 = &a1[v26];
  if (*(_QWORD *)&a1[v26 + 24])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v26]);
  v28 = *(_OWORD *)&a2[v26 + 16];
  *(_OWORD *)v27 = *(_OWORD *)&a2[v26];
  *((_OWORD *)v27 + 1) = v28;
  *((_QWORD *)v27 + 4) = *(_QWORD *)&a2[v26 + 32];
  return a1;
}

uint64_t _s6ButtonVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6C6CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s6ButtonVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6C6D64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_1AC6C6DE4()
{
  unint64_t v0;

  sub_1AC6C1E50();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for Models.Button.Kind()
{
  return &type metadata for Models.Button.Kind;
}

uint64_t _s6ButtonV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1AC6C6EC8 + 4 * byte_1AC72BA83[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1AC6C6EFC + 4 * byte_1AC72BA7E[v4]))();
}

uint64_t sub_1AC6C6EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C6F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6C6F0CLL);
  return result;
}

uint64_t sub_1AC6C6F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6C6F20);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1AC6C6F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6C6F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6ButtonV10CodingKeysOMa()
{
  return &_s6ButtonV10CodingKeysON;
}

unint64_t sub_1AC6C6F4C()
{
  unint64_t result;

  result = qword_1EEC8AF60;
  if (!qword_1EEC8AF60)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72BCC0, &_s6ButtonV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF60);
  }
  return result;
}

unint64_t sub_1AC6C6F94()
{
  unint64_t result;

  result = qword_1EEC8AF68;
  if (!qword_1EEC8AF68)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72BC30, &_s6ButtonV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF68);
  }
  return result;
}

unint64_t sub_1AC6C6FDC()
{
  unint64_t result;

  result = qword_1EEC8AF70;
  if (!qword_1EEC8AF70)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72BC58, &_s6ButtonV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF70);
  }
  return result;
}

uint64_t sub_1AC6C7020(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001AC730CD0 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F436E6F74747562 && a2 == 0xEB00000000726F6CLL || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F43656C746974 && a2 == 0xEA0000000000726FLL || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

id TraitEnvironmentPlaceholder.__allocating_init(traitCollection:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id TraitEnvironmentPlaceholder.init(traitCollection:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id TraitEnvironmentPlaceholder.traitCollection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection);
}

id TraitEnvironmentPlaceholder.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TraitEnvironmentPlaceholder.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TraitEnvironmentPlaceholder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id UITraitEnvironment.withOverrideTraitCollection(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  objc_class *v7;
  char *v8;
  objc_super v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1AC72BD40;
  *(_QWORD *)(v3 + 32) = objc_msgSend(v1, sel_traitCollection);
  *(_QWORD *)(v3 + 40) = a1;
  v11 = v3;
  sub_1AC7263AC();
  sub_1AC69232C();
  v4 = a1;
  v5 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v5);

  v7 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v6;
  v10.receiver = v8;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, sel_init);
}

id UITraitEnvironment.withAccessibleContentSizesDisabled.getter()
{
  void *v0;
  id v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  objc_class *v9;
  char *v10;
  objc_super v12;
  uint64_t v13;

  v1 = objc_msgSend(v0, sel_traitCollection);
  v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);
  v3 = sub_1AC726670();

  if ((v3 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1AC72BD40;
    *(_QWORD *)(v4 + 32) = objc_msgSend(v0, sel_traitCollection);
    v5 = *MEMORY[0x1E0DC48F0];
    v6 = (void *)objc_opt_self();
    *(_QWORD *)(v4 + 40) = objc_msgSend(v6, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    v13 = v4;
    sub_1AC7263AC();
    sub_1AC69232C();
    v7 = (void *)sub_1AC726394();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_traitCollectionWithTraitsFromCollections_, v7);

    v9 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
    v10 = (char *)objc_allocWithZone(v9);
    *(_QWORD *)&v10[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v8;
    v12.receiver = v10;
    v12.super_class = v9;
    return objc_msgSendSuper2(&v12, sel_init);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  return v0;
}

uint64_t method lookup function for TraitEnvironmentPlaceholder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TraitEnvironmentPlaceholder.__allocating_init(traitCollection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t VerticalMarginsMeasurable.child.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t VerticalMarginsMeasurable.topMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 56, a1);
}

uint64_t VerticalMarginsMeasurable.bottomMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 96, a1);
}

uint64_t VerticalMarginsMeasurable.skipIfEmpty.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 136);
}

uint64_t VerticalMarginsMeasurable.shouldMeasureToBaseline.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 137);
}

uint64_t initializeWithCopy for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  return a1;
}

__n128 __swift_memcpy122_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(__int128 *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for VerticalMarginsMeasurable.Storage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalMarginsMeasurable.Storage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 122))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalMarginsMeasurable.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 122) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 122) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s5JetUI7MarginsV6insets5childACSo12UIEdgeInsetsV_AA9Placeable_ptcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;

  sub_1AC68E218(a1, a2);
  v23 = MEMORY[0x1E0DEF040];
  v24 = &protocol witness table for CGFloat;
  *(double *)&v22 = a3;
  v20 = MEMORY[0x1E0DEF040];
  v21 = &protocol witness table for CGFloat;
  *(double *)&v19 = a4;
  v17 = MEMORY[0x1E0DEF040];
  v18 = &protocol witness table for CGFloat;
  *(double *)&v16 = a5;
  v14 = MEMORY[0x1E0DEF040];
  v15 = &protocol witness table for CGFloat;
  *(double *)&v13 = a6;
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_1AC68AAA4(&v22, a2 + 40);
  sub_1AC68AAA4(&v19, a2 + 80);
  sub_1AC68AAA4(&v16, a2 + 120);
  return sub_1AC68AAA4(&v13, a2 + 160);
}

uint64_t Margins.init(_:top:leading:bottom:trailing:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  sub_1AC68AAA4(a1, a6);
  sub_1AC68AAA4(a2, a6 + 40);
  sub_1AC68AAA4(a3, a6 + 80);
  sub_1AC68AAA4(a4, a6 + 120);
  return sub_1AC68AAA4(a5, a6 + 160);
}

uint64_t Margins.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[240];

  sub_1AC693A88(v1, (uint64_t)v15);
  Margins.Placements.next()((uint64_t)v9);
  result = sub_1AC693804((uint64_t)v15);
  if (v10)
  {
    v7 = v12;
    v8 = v11;
    v4 = v13;
    v5 = v14;
    result = sub_1AC6929AC((uint64_t)v9);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  else
  {
    if (qword_1EEC89658 != -1)
      result = swift_once();
    v6 = xmmword_1EEC8A840;
    *(_OWORD *)a1 = xmmword_1EEC8A830;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = xmmword_1EEC8A850;
  }
  return result;
}

__n128 sub_1AC6C7C10@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(v1 + 224);
  v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  v4 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  result = *(__n128 *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1AC6C7C54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AC7106B8(v0);
  sub_1AC693804(v0);
  return v1;
}

uint64_t Margins.layout(relativeTo:with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  __int128 v20[2];
  _OWORD v21[10];

  sub_1AC693604((_OWORD *)(v6 + 40), v21);
  sub_1AC68E218(v6, (uint64_t)v20);
  *(_OWORD *)(a2 + 216) = 0u;
  *(_QWORD *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 200) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  v13 = v21[7];
  *(_OWORD *)(a2 + 136) = v21[6];
  *(_OWORD *)(a2 + 152) = v13;
  v14 = v21[9];
  *(_OWORD *)(a2 + 168) = v21[8];
  *(_OWORD *)(a2 + 184) = v14;
  v15 = v21[3];
  *(_OWORD *)(a2 + 72) = v21[2];
  *(_OWORD *)(a2 + 88) = v15;
  v16 = v21[5];
  *(_OWORD *)(a2 + 104) = v21[4];
  *(_OWORD *)(a2 + 120) = v16;
  v17 = v21[1];
  *(_OWORD *)(a2 + 40) = v21[0];
  *(_OWORD *)(a2 + 56) = v17;
  v18 = a1;
  sub_1AC6916CC(a2 + 200, &qword_1ED0BD568);
  return sub_1AC68AAA4(v20, a2 + 200);
}

JetUI::_LayoutAlignment __swiftcall Margins._layoutAlignment(with:)(UITraitCollection with)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  JetUI::_LayoutAlignment v8;
  __int128 v9[2];
  uint64_t v10;
  _BYTE v11[40];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = v1;
  sub_1AC68E218(v3, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v9, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(Class, uint64_t, uint64_t))(v7 + 8))(with.super.isa, v6, v7);
    return (JetUI::_LayoutAlignment)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v8 = (JetUI::_LayoutAlignment)sub_1AC6916CC((uint64_t)v9, &qword_1ED0BD540);
    *v5 = 0;
  }
  return v8;
}

unint64_t sub_1AC6C7E58(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6C7E7C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6C7E7C()
{
  unint64_t result;

  result = qword_1EEC8AF80;
  if (!qword_1EEC8AF80)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Margins.Placements, &type metadata for Margins.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF80);
  }
  return result;
}

unint64_t sub_1AC6C7EC4()
{
  unint64_t result;

  result = qword_1EEC8AF88;
  if (!qword_1EEC8AF88)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Margins.Placements, &type metadata for Margins.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF88);
  }
  return result;
}

unint64_t sub_1AC6C7F0C()
{
  unint64_t result;

  result = qword_1EEC8AF90;
  if (!qword_1EEC8AF90)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Margins.Placements, &type metadata for Margins.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8AF90);
  }
  return result;
}

uint64_t sub_1AC6C7F50@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  __int128 v20[2];
  _OWORD v21[10];

  sub_1AC693604((_OWORD *)(v6 + 40), v21);
  sub_1AC68E218(v6, (uint64_t)v20);
  *(_OWORD *)(a2 + 216) = 0u;
  *(_QWORD *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 200) = 0u;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = a1;
  v13 = v21[7];
  *(_OWORD *)(a2 + 136) = v21[6];
  *(_OWORD *)(a2 + 152) = v13;
  v14 = v21[9];
  *(_OWORD *)(a2 + 168) = v21[8];
  *(_OWORD *)(a2 + 184) = v14;
  v15 = v21[3];
  *(_OWORD *)(a2 + 72) = v21[2];
  *(_OWORD *)(a2 + 88) = v15;
  v16 = v21[5];
  *(_OWORD *)(a2 + 104) = v21[4];
  *(_OWORD *)(a2 + 120) = v16;
  v17 = v21[1];
  *(_OWORD *)(a2 + 40) = v21[0];
  *(_OWORD *)(a2 + 56) = v17;
  v18 = a1;
  sub_1AC6916CC(a2 + 200, &qword_1ED0BD568);
  return sub_1AC68AAA4(v20, a2 + 200);
}

_OWORD *initializeWithCopy for Margins(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  v8 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t *assignWithCopy for Margins(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  __swift_assign_boxed_opaque_existential_1(a1 + 15, a2 + 15);
  __swift_assign_boxed_opaque_existential_1(a1 + 20, a2 + 20);
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for Margins(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 200))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 200) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t assignWithCopy for Margins.Placements(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  v7 = *(_QWORD *)(a2 + 224);
  if (!*(_QWORD *)(a1 + 224))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 224) = v7;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 200, a2 + 200);
      return a1;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 200);
    v9 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 216) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 200);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for Margins.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 224))
    __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  v8 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v8;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Margins.Placements()
{
  return &type metadata for Margins.Placements;
}

uint64_t destroy for Margins.Insets(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 120);
}

uint64_t *assignWithCopy for Margins.Insets(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  __swift_assign_boxed_opaque_existential_1(a1 + 15, a2 + 15);
  return a1;
}

uint64_t assignWithTake for Margins.Insets(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for Margins.Insets(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Margins.Insets(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Margins.Insets()
{
  return &type metadata for Margins.Insets;
}

CGPoint *sub_1AC6C87B8(CGPoint *result, uint64_t a2, uint64_t a3)
{
  CGPoint *v3;
  CGPoint *v4;
  CGPoint v5;
  CGPoint v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGSize v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGPoint v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  double v23;
  __int128 v24;
  __int128 v25;
  CGPoint v26;
  CGPoint v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  _BYTE v36[40];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  CGPoint v52;
  CGSize v53;
  CGPoint v54;
  CGPoint v55;
  CGPoint v56;
  CGFloat x;
  CGRect v58;
  CGRect v59;

  v4 = result;
  v5 = v3[3];
  v54 = v3[2];
  v55 = v5;
  v56 = v3[4];
  x = v3[5].x;
  v6 = v3[1];
  v52 = *v3;
  v53 = (CGSize)v6;
  if (!a2)
  {
    v7 = 0;
LABEL_15:
    v26 = v3[3];
    v4[2] = v3[2];
    v4[3] = v26;
    v4[4] = v3[4];
    v4[5].x = v3[5].x;
    v27 = v3[1];
    *v4 = *v3;
    v4[1] = v27;
    return (CGPoint *)v7;
  }
  v7 = a3;
  if (!a3)
  {
LABEL_11:
    v3 = &v52;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    sub_1AC695DFC((uint64_t)&v55, (uint64_t)&v30);
    if (*((_QWORD *)&v31 + 1))
    {
      v9 = 0;
      while (1)
      {
        sub_1AC68AAA4(&v30, (uint64_t)v37);
        sub_1AC6916CC((uint64_t)&v55, &qword_1ED0BD568);
        v55 = (CGPoint)0;
        v56 = (CGPoint)0;
        x = 0.0;
        v10 = v38;
        v11 = v39;
        __swift_project_boxed_opaque_existential_1(v37, v38);
        v12 = v53;
        v13 = (*(double (**)(_QWORD, uint64_t, uint64_t, CGFloat, CGFloat))(v11 + 8))(*(_QWORD *)&v54.x, v10, v11, v53.width, v53.height);
        v15 = v14;
        v28 = v17;
        v29 = v16;
        v18 = v52;
        v58.origin = v52;
        v58.size = v12;
        v19 = CGRectGetMidX(v58) - v13 * 0.5;
        v59.origin = v18;
        v59.size = v12;
        v20 = CGRectGetMidY(v59) - v15 * 0.5;
        sub_1AC68E218((uint64_t)v37, (uint64_t)v36);
        sub_1AC68E218((uint64_t)v36, (uint64_t)&v30);
        *((_QWORD *)&v32 + 1) = floor(v19);
        *(_QWORD *)&v33 = floor(v20);
        *((_QWORD *)&v33 + 1) = ceil(v13);
        *(_QWORD *)&v34 = ceil(v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        *((_QWORD *)&v34 + 1) = floor(v29);
        v35 = floor(v28);
        v42 = v32;
        v43 = v33;
        v40 = v30;
        v41 = v31;
        v44 = v34;
        v45 = v35;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        if (!*((_QWORD *)&v41 + 1))
          break;
        v21 = v43;
        v48 = v42;
        v49 = v43;
        v22 = v44;
        v50 = v44;
        v23 = v45;
        v51 = v45;
        v24 = v40;
        v25 = v41;
        v46 = v40;
        v47 = v41;
        *(_OWORD *)(v8 + 32) = v42;
        *(_OWORD *)(v8 + 48) = v21;
        *(_OWORD *)(v8 + 64) = v22;
        *(double *)(v8 + 80) = v23;
        *(_OWORD *)v8 = v24;
        *(_OWORD *)(v8 + 16) = v25;
        if (v7 - 1 == v9)
          goto LABEL_11;
        v8 += 88;
        sub_1AC695DFC((uint64_t)&v55, (uint64_t)&v30);
        ++v9;
        if (!*((_QWORD *)&v31 + 1))
          goto LABEL_13;
      }
    }
    else
    {
      v9 = 0;
LABEL_13:
      sub_1AC6916CC((uint64_t)&v30, &qword_1ED0BD568);
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0.0;
    }
    sub_1AC6916CC((uint64_t)&v40, &qword_1EEC8AF98);
    v3 = &v52;
    v7 = v9;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

CGPoint *sub_1AC6C8A74(CGPoint *result, uint64_t a2, uint64_t a3)
{
  CGRect *v3;
  CGPoint *v4;
  CGSize size;
  CGSize v6;
  CGSize v7;
  CGSize v8;
  CGSize v9;
  CGSize v10;
  CGSize v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGFloat x;
  double v16;
  double v17;
  double v18;
  double v19;
  CGPoint v20;
  CGSize v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  double v39;
  __int128 v40;
  __int128 v41;
  CGSize v42;
  CGSize v43;
  CGSize v44;
  CGSize v45;
  CGSize v46;
  CGSize v47;
  CGSize v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  _BYTE v61[40];
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  CGRect v77;
  CGPoint v78;
  CGSize v79;
  CGPoint v80;
  CGSize v81;
  CGPoint v82;
  CGSize v83;
  CGPoint origin;
  CGSize v85;
  CGPoint v86;
  CGSize v87;
  _OWORD v88[4];
  CGRect v89;
  CGRect v90;
  CGRect v91;

  v4 = result;
  size = v3[6].size;
  v88[0] = v3[6].origin;
  v88[1] = size;
  v88[2] = v3[7].origin;
  v6 = v3[4].size;
  origin = v3[4].origin;
  v85 = v6;
  v7 = v3[5].size;
  v86 = v3[5].origin;
  v87 = v7;
  v8 = v3[2].size;
  v80 = v3[2].origin;
  v81 = v8;
  v9 = v3[3].size;
  v82 = v3[3].origin;
  v83 = v9;
  v10 = v3->size;
  v77.origin = v3->origin;
  v77.size = v10;
  v11 = v3[1].size;
  v78 = v3[1].origin;
  v79 = v11;
  if (!a2)
  {
    v12 = 0;
LABEL_22:
    v42 = v3[6].size;
    v4[12] = v3[6].origin;
    v4[13] = (CGPoint)v42;
    v4[14] = v3[7].origin;
    v43 = v3[4].size;
    v4[8] = v3[4].origin;
    v4[9] = (CGPoint)v43;
    v44 = v3[5].size;
    v4[10] = v3[5].origin;
    v4[11] = (CGPoint)v44;
    v45 = v3[2].size;
    v4[4] = v3[2].origin;
    v4[5] = (CGPoint)v45;
    v46 = v3[3].size;
    v4[6] = v3[3].origin;
    v4[7] = (CGPoint)v46;
    v47 = v3->size;
    *v4 = v3->origin;
    v4[1] = (CGPoint)v47;
    v48 = v3[1].size;
    v4[2] = v3[1].origin;
    v4[3] = (CGPoint)v48;
    return (CGPoint *)v12;
  }
  v12 = a3;
  if (!a3)
  {
    v3 = &v77;
    goto LABEL_22;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13 = a2;
    sub_1AC695DFC((uint64_t)v88 + 8, (uint64_t)&v55);
    if (*((_QWORD *)&v56 + 1))
    {
      v14 = 0;
      v49 = v12;
      v50 = v12 - 1;
      while (1)
      {
        sub_1AC68AAA4(&v55, (uint64_t)v62);
        sub_1AC6916CC((uint64_t)v88 + 8, &qword_1ED0BD568);
        memset((char *)v88 + 8, 0, 40);
        x = v78.x;
        v16 = sub_1AC69388C(*(void **)&v78.x);
        v53 = v17;
        v54 = v18;
        v19 = v18;
        v20 = v77.origin;
        v21 = v77.size;
        v23 = CGRectGetWidth(v77) - (v17 + v22);
        v89.origin = v20;
        v89.size = v21;
        v24 = CGRectGetHeight(v89) - (v16 + v19);
        v25 = v23 < 0.0 ? 0.0 : v23;
        v26 = v24 < 0.0 ? 0.0 : v24;
        v27 = v63;
        v28 = v64;
        __swift_project_boxed_opaque_existential_1(v62, v63);
        v29 = (*(double (**)(CGFloat, uint64_t, uint64_t, double, double))(v28 + 8))(COERCE_CGFLOAT(*(_QWORD *)&x), v27, v28, v25, v26);
        v51 = v30;
        v52 = v29;
        v32 = v31;
        v34 = v33;
        v90.origin = v20;
        v90.size = v21;
        v35 = v53 + CGRectGetMinX(v90);
        v91.origin = v20;
        v91.size = v21;
        v36 = v16 + CGRectGetMinY(v91);
        sub_1AC68E218((uint64_t)v62, (uint64_t)v61);
        sub_1AC68E218((uint64_t)v61, (uint64_t)&v55);
        *((_QWORD *)&v57 + 1) = floor(v35);
        *(_QWORD *)&v58 = floor(v36);
        *((_QWORD *)&v58 + 1) = ceil(v52);
        *(_QWORD *)&v59 = ceil(v51);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        *((_QWORD *)&v59 + 1) = floor(v16 + v32);
        v60 = floor(v54 + v34);
        v67 = v57;
        v68 = v58;
        v65 = v55;
        v66 = v56;
        v69 = v59;
        v70 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
        if (!*((_QWORD *)&v66 + 1))
          break;
        v37 = v68;
        v73 = v67;
        v74 = v68;
        v38 = v69;
        v75 = v69;
        v39 = v70;
        v76 = v70;
        v40 = v65;
        v41 = v66;
        v71 = v65;
        v72 = v66;
        *(_OWORD *)(v13 + 32) = v67;
        *(_OWORD *)(v13 + 48) = v37;
        *(_OWORD *)(v13 + 64) = v38;
        *(double *)(v13 + 80) = v39;
        *(_OWORD *)v13 = v40;
        *(_OWORD *)(v13 + 16) = v41;
        if (v50 == v14)
        {
          v3 = &v77;
          v12 = v49;
          goto LABEL_22;
        }
        v13 += 88;
        sub_1AC695DFC((uint64_t)v88 + 8, (uint64_t)&v55);
        ++v14;
        if (!*((_QWORD *)&v56 + 1))
          goto LABEL_19;
      }
    }
    else
    {
      v14 = 0;
LABEL_19:
      sub_1AC6916CC((uint64_t)&v55, &qword_1ED0BD568);
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0.0;
    }
    sub_1AC6916CC((uint64_t)&v65, &qword_1EEC8AF98);
    v3 = &v77;
    v12 = v14;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

CGPoint *sub_1AC6C8DF8(CGPoint *result, uint64_t a2, uint64_t a3)
{
  CGRect *v3;
  CGSize size;
  CGSize v5;
  CGSize v6;
  CGSize v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double y;
  int width_low;
  double height;
  int x_low;
  CGPoint v15;
  CGSize v16;
  double Width;
  unsigned __int8 v18;
  int v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double MinX;
  double MinY;
  double v39;
  double v40;
  __int128 v41;
  __int128 v42;
  double v43;
  __int128 v44;
  __int128 v45;
  CGSize v46;
  CGSize v47;
  CGSize v48;
  CGSize v49;
  uint64_t v50;
  CGPoint *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  _BYTE v63[40];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  double v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double v78;
  CGRect v79;
  CGPoint origin;
  CGSize v81;
  CGPoint v82;
  CGSize v83;
  _OWORD v84[4];
  CGRect v85;
  CGRect v86;
  CGRect v87;

  size = v3[3].size;
  v84[0] = v3[3].origin;
  v84[1] = size;
  v84[2] = v3[4].origin;
  v5 = v3[1].size;
  origin = v3[1].origin;
  v81 = v5;
  v6 = v3[2].size;
  v82 = v3[2].origin;
  v83 = v6;
  v7 = v3->size;
  v79.origin = v3->origin;
  v79.size = v7;
  if (!a2)
  {
    v8 = 0;
LABEL_48:
    v46 = v3[3].size;
    result[6] = v3[3].origin;
    result[7] = (CGPoint)v46;
    result[8] = v3[4].origin;
    v47 = v3[1].size;
    result[2] = v3[1].origin;
    result[3] = (CGPoint)v47;
    v48 = v3[2].size;
    result[4] = v3[2].origin;
    result[5] = (CGPoint)v48;
    v49 = v3->size;
    *result = v3->origin;
    result[1] = (CGPoint)v49;
    return (CGPoint *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v3 = &v79;
    goto LABEL_48;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v51 = result;
    sub_1AC695DFC((uint64_t)v84 + 8, (uint64_t)&v57);
    if (*((_QWORD *)&v58 + 1))
    {
      v10 = v8;
      v8 = 0;
      v50 = v10;
      v52 = v10 - 1;
      while (1)
      {
        sub_1AC68AAA4(&v57, (uint64_t)v64);
        sub_1AC6916CC((uint64_t)v84 + 8, &qword_1ED0BD568);
        memset((char *)v84 + 8, 0, 40);
        y = origin.y;
        width_low = LOBYTE(v81.width);
        height = v81.height;
        x_low = LOBYTE(v82.x);
        v15 = v79.origin;
        v16 = v79.size;
        Width = CGRectGetWidth(v79);
        v18 = width_low ^ 1;
        v19 = (width_low ^ 1) & (Width < y);
        v56 = y;
        if (v19)
          v20 = y;
        else
          v20 = Width;
        if (Width > height)
          Width = height;
        if ((x_low & 1) != 0)
          Width = v20;
        if ((v19 & 1) != 0)
          v21 = v20;
        else
          v21 = Width;
        v22 = v82.y;
        v23 = LOBYTE(v83.width);
        v24 = v83.height;
        v25 = LOBYTE(v84[0]);
        v85.origin = v15;
        v85.size = v16;
        v26 = CGRectGetHeight(v85);
        v27 = (v23 ^ 1) & (v26 < v22);
        if (v27)
          v28 = v22;
        else
          v28 = v26;
        v53 = v24;
        if (v26 > v24)
          v26 = v24;
        if (v25)
          v26 = v28;
        if ((v27 & 1) != 0)
          v29 = v28;
        else
          v29 = v26;
        v30 = v65;
        v31 = v66;
        __swift_project_boxed_opaque_existential_1(v64, v65);
        v32 = (*(double (**)(_QWORD, uint64_t, uint64_t, double, double))(v31 + 8))(*(_QWORD *)&origin.x, v30, v31, v21, v29);
        v34 = v33;
        v54 = v36;
        v55 = v35;
        v86.origin = v15;
        v86.size = v16;
        MinX = CGRectGetMinX(v86);
        v87.origin = v15;
        v87.size = v16;
        MinY = CGRectGetMinY(v87);
        if ((v18 & (v32 < v56)) != 0)
          v39 = v56;
        else
          v39 = v32;
        if ((v18 & (v32 < v56) | x_low) != 1)
        {
          v39 = height;
          if (v32 <= height)
            v39 = v32;
        }
        v40 = ((v23 ^ 1) & (v34 < v22)) != 0 ? v22 : v34;
        if (((v23 ^ 1) & (v34 < v22) | v25) != 1)
        {
          v40 = v53;
          if (v34 <= v53)
            v40 = v34;
        }
        sub_1AC68E218((uint64_t)v64, (uint64_t)v63);
        sub_1AC68E218((uint64_t)v63, (uint64_t)&v57);
        *((_QWORD *)&v59 + 1) = floor(MinX);
        *(_QWORD *)&v60 = floor(MinY);
        *((_QWORD *)&v60 + 1) = ceil(v39);
        *(_QWORD *)&v61 = ceil(v40);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
        *((_QWORD *)&v61 + 1) = floor(v55);
        v62 = floor(v54);
        v69 = v59;
        v70 = v60;
        v67 = v57;
        v68 = v58;
        v71 = v61;
        v72 = v62;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        if (!*((_QWORD *)&v68 + 1))
          break;
        v41 = v70;
        v75 = v69;
        v76 = v70;
        v42 = v71;
        v77 = v71;
        v43 = v72;
        v78 = v72;
        v44 = v67;
        v45 = v68;
        v73 = v67;
        v74 = v68;
        *(_OWORD *)(v9 + 32) = v69;
        *(_OWORD *)(v9 + 48) = v41;
        *(_OWORD *)(v9 + 64) = v42;
        *(double *)(v9 + 80) = v43;
        *(_OWORD *)v9 = v44;
        *(_OWORD *)(v9 + 16) = v45;
        if (v52 == v8)
        {
          v3 = &v79;
          v8 = v50;
          result = v51;
          goto LABEL_48;
        }
        v9 += 88;
        sub_1AC695DFC((uint64_t)v84 + 8, (uint64_t)&v57);
        ++v8;
        if (!*((_QWORD *)&v58 + 1))
          goto LABEL_45;
      }
    }
    else
    {
      v8 = 0;
LABEL_45:
      sub_1AC6916CC((uint64_t)&v57, &qword_1ED0BD568);
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0.0;
    }
    sub_1AC6916CC((uint64_t)&v67, &qword_1EEC8AF98);
    v3 = &v79;
    result = v51;
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

void sub_1AC6C91E8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;

  v0 = (void *)*MEMORY[0x1E0DC4918];
  v1 = (void *)objc_opt_self();
  v2 = v0;
  v3 = objc_msgSend(v1, sel_traitCollectionWithPreferredContentSizeCategory_, v2);

  qword_1ED0BDC20 = (uint64_t)v3;
}

id static UITraitCollection.unscaledContentSizeCategory.getter()
{
  if (qword_1ED0BDC18 != -1)
    swift_once();
  return (id)qword_1ED0BDC20;
}

id sub_1AC6C9294(void *a1)
{
  uint64_t v1;
  void *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  char v13;

  v3 = *(void **)v1;
  v4 = *(char *)(v1 + 40);
  if ((v4 & 0x80000000) == 0)
    return objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v3, a1);
  v7 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v10 = v1 + 8;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v10 + 8);
  v12[0] = v3;
  v12[1] = v8;
  v12[2] = v9;
  v12[3] = v7;
  v12[4] = v6;
  v13 = v4 & 0x7F;
  sub_1AC6923FC(v3, v8, v9, v7, v6, v4);
  v11 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v12, a1);
  sub_1AC68D860(v3, v8, v9, v7, v6, v4);
  return v11;
}

double sub_1AC6C9384(void *a1)
{
  __int128 *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  double v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  _BYTE v20[48];
  _OWORD v21[2];
  char v22;
  _BYTE v23[48];
  _OWORD v24[2];
  char v25;
  _BYTE v26[48];

  v3 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v4 = sub_1AC72622C();
  v6 = v5;
  if (v4 == sub_1AC72622C() && v6 == v7)
  {

    swift_bridgeObjectRelease_n();
    return 1.0;
  }
  else
  {
    v9 = sub_1AC726A78();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = 1.0;
    if ((v9 & 1) == 0)
    {
      if (qword_1ED0BDC18 != -1)
        swift_once();
      v11 = (void *)qword_1ED0BDC20;
      sub_1AC695830(v1, v24);
      if (v25 < 0)
      {
        v25 &= ~0x80u;
        sub_1AC6C9B0C((uint64_t)v24, (uint64_t)v26);
        sub_1AC6C9B0C((uint64_t)v26, (uint64_t)v23);
        v13 = v11;
        sub_1AC6C9940((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6923FC);
        v12 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v23, v13);
        sub_1AC6C9940((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC68D860);

      }
      else
      {
        v12 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *(_QWORD *)&v24[0], v11);
      }
      objc_msgSend(v12, sel_lineHeight);
      v15 = v14;
      objc_msgSend(v12, sel_leading);
      v17 = v16;
      sub_1AC695830(v1, v21);
      if (v22 < 0)
      {
        v22 &= ~0x80u;
        sub_1AC6C9B0C((uint64_t)v21, (uint64_t)v23);
        sub_1AC6C9B0C((uint64_t)v23, (uint64_t)v20);
        sub_1AC6C9940((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6923FC);
        v18 = _sSo6UIFontC5JetUIE13preferredFont10forUseWith010compatibleH0AbC0eG4CaseO_So17UITraitCollectionCtFZ_0((uint64_t)v20, a1);
        sub_1AC6C9940((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC68D860);
      }
      else
      {
        v18 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *(_QWORD *)&v21[0], a1);
      }
      v10 = v15 + v17;
      objc_msgSend(v18, sel_lineHeight);
      objc_msgSend(v18, sel_leading);

    }
  }
  return v10;
}

double CGFloat.scaled(by:compatibleWith:)(__int128 *a1, void *a2, double a3)
{
  double v5;
  double v6;
  double v7;
  _OWORD v9[3];

  sub_1AC695830(a1, v9);
  sub_1AC6C9940((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6923FC);
  v5 = sub_1AC6C9384(a2);
  v7 = v6;
  sub_1AC6C9940((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC68D860);
  return v7 * (a3 / v5);
}

char *Array<A>.scalingLike(_:with:)(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = a1[3];
  v6 = a1[4];
  v7 = __swift_project_boxed_opaque_existential_1(a1, v5);
  return sub_1AC6C9848((uint64_t)v7, a2, a3, v5, v6);
}

char *Array<A>.scaled(by:compatibleWith:)(__int128 *a1, void *a2, uint64_t a3)
{
  char *v5;
  _OWORD v7[3];

  sub_1AC695830(a1, v7);
  sub_1AC6C9940((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6923FC);
  v5 = sub_1AC6C9758((uint64_t)v7, a2, a3);
  sub_1AC6C9940((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC68D860);
  return v5;
}

char *sub_1AC6C9758(uint64_t a1, void *a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  int64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t i;
  double v12;
  unint64_t v13;

  v4 = sub_1AC6C9384(a2);
  v6 = v5;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_1AC6A2830(0, v7, 0, MEMORY[0x1E0DEE9D8]);
  v9 = v8;
  if (v7)
  {
    v10 = *((_QWORD *)v8 + 2);
    swift_bridgeObjectRetain();
    for (i = 0; i != v7; ++i)
    {
      v12 = *(double *)(a3 + 8 * i + 32);
      v13 = *((_QWORD *)v9 + 3);
      if (v10 >= v13 >> 1)
        v9 = sub_1AC6A2830((char *)(v13 > 1), v10 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v10 + 1;
      *(double *)&v9[8 * v10++ + 32] = v6 * (v12 / v4);
    }
    swift_bridgeObjectRelease();
  }
  return v9;
}

char *sub_1AC6C9848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6;
  double v7;
  double v8;
  int64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t i;
  double v14;
  unint64_t v15;

  v6 = CustomTextStyle.scalingValues(compatibleWith:)(a2, a4, a5);
  v8 = v7;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = sub_1AC6A2830(0, v9, 0, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  if (v9)
  {
    v12 = *((_QWORD *)v10 + 2);
    swift_bridgeObjectRetain();
    for (i = 0; i != v9; ++i)
    {
      v14 = *(double *)(a3 + 8 * i + 32);
      v15 = *((_QWORD *)v11 + 3);
      if (v12 >= v15 >> 1)
        v11 = sub_1AC6A2830((char *)(v15 > 1), v12 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v12 + 1;
      *(double *)&v11[8 * v12++ + 32] = v8 * (v14 / v6);
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1AC6C9940(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t assignWithCopy for FontSource(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1AC6923FC(*(id *)a2, v4, v5, v6, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_1AC68D860(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FontSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_1AC68D860(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 63);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 40) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FontSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 63;
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1AC6C9B0C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t static Interpolatable.interpolate(between:and:following:forInput:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, double a6)
{
  float v10;

  *(float *)&a6 = a6;
  objc_msgSend(a3, sel__solveForInput_, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(a5 + 8))(a1, a2, a4, a5, v10);
}

uint64_t dispatch thunk of static Interpolatable.interpolateLinearly(between:and:forInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1AC6C9BD4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1AC6CAB20);
}

uint64_t CollectionContent.init<A>(_:collectionView:cellProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1AC6C9BD4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_1AC6CA7A4);
}

uint64_t sub_1AC6C9BD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v8;

  v8 = a7();
  swift_unknownObjectRelease();

  swift_release();
  return v8;
}

uint64_t sub_1AC6C9C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 0;
  v8 = sub_1AC6C9CB8(a2, a3, a4, a1);
  swift_release();
  return v8;
}

uint64_t sub_1AC6C9CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[2];
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;

  v5 = v4;
  v39 = a4;
  v40 = a3;
  v8 = *(_QWORD *)v4;
  v38 = sub_1AC7259A4();
  v32 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v33 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v34 = (char *)&v30 - v11;
  v12 = *(_QWORD *)(v8 + 80);
  v13 = sub_1AC725DB8();
  v14 = sub_1AC7266C4();
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v30 - v19;
  swift_beginAccess();
  v21 = *((_QWORD *)v5 + 3);
  v35 = v8;
  v36 = a1;
  v41[0] = a1;
  v41[1] = a2;
  v23 = type metadata accessor for CollectionContent.SupplementaryViewProvider(0, v12, *(_QWORD *)(v8 + 88), v22);
  swift_bridgeObjectRetain();
  MEMORY[0x1AF43F75C](v42, v41, v21, MEMORY[0x1E0DEA968], v23, MEMORY[0x1E0DEA978]);
  v37 = a2;
  swift_bridgeObjectRelease();
  v24 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[0];
  v25 = v42[1];
  v26 = v43;
  swift_endAccess();
  if (v26 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v40, v38);
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_1AC726868();
    v41[0] = v5;
    sub_1AC726A54();
    sub_1AC7262C8();
    sub_1AC7262C8();
    sub_1AC7262C8();
    sub_1AC6CB064();
    sub_1AC726A30();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((v26 & 1) != 0)
    {
      v28 = v24(v5, v40, v39);
      sub_1AC6CB0AC((uint64_t)v24, v25, v26);
      return v28;
    }
    v33 = v5;
    v27 = v40;
    sub_1AC725998();
    sub_1AC725B18();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v16, v13);
      v28 = v24(v20, v27, v39);
      sub_1AC6CB0AC((uint64_t)v24, v25, v26);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v13);
      return v28;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v31);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v27, v38);
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_1AC726868();
    v41[0] = v33;
    sub_1AC726A54();
    sub_1AC7262C8();
    sub_1AC7262C8();
    sub_1AC7262C8();
    sub_1AC6CB064();
    sub_1AC726A30();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
  }
  result = sub_1AC726910();
  __break(1u);
  return result;
}

uint64_t sub_1AC6CA0D4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  return CollectionContent.apply(_:animatingDifferences:completion:)(a1, *(unsigned __int8 *)(v1 + 40), 0, 0);
}

uint64_t *CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AC6CA148(a1, a2, a3, a4, (uint64_t)&unk_1E5BFE858, (uint64_t)sub_1AC6CAB9C);
}

{
  return sub_1AC6CA148(a1, a2, a3, a4, (uint64_t)&unk_1E5BFE880, (uint64_t)sub_1AC6CABE0);
}

uint64_t *sub_1AC6CA148(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v12 = *a1;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v6 + 80);
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  *(_QWORD *)(v13 + 48) = a1;
  v14 = *(_QWORD *)(v12 + 80);
  v15 = *(_QWORD *)(v12 + 88);
  swift_allocObject();
  v16 = swift_unknownObjectRetain();
  v17 = sub_1AC6CA7A4(v16, a2, a6, v13, v14, v15);
  swift_unknownObjectRelease();

  swift_release();
  return v17;
}

uint64_t sub_1AC6CA218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void (*a10)(uint64_t, __n128))
{
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v14 = __swift_instantiateConcreteTypeFromMangledName(a9);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a10(a1, v16);
  v19 = a4(a1, a2, v18, a3);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return v19;
}

id CollectionContent.view.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t CollectionContent.animatePresenterChanges.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CollectionContent.animatePresenterChanges.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 40) = a1;
  return result;
}

uint64_t (*CollectionContent.animatePresenterChanges.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t CollectionContent.animateReloadTriggers.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t CollectionContent.animateReloadTriggers.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 41) = a1;
  return result;
}

uint64_t (*CollectionContent.animateReloadTriggers.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CollectionContent.onSnapshotApplied.getter()
{
  return swift_retain();
}

uint64_t CollectionContent.addSectionViewProvider(forKind:_:)()
{
  return sub_1AC6CA450();
}

uint64_t CollectionContent.addSupplementaryViewProvider(forKind:_:)()
{
  return sub_1AC6CA450();
}

uint64_t sub_1AC6CA450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for CollectionContent.SupplementaryViewProvider(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  sub_1AC72619C();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AC7261B4();
  return swift_endAccess();
}

uint64_t CollectionContent.section(for:)()
{
  sub_1AC725998();
  return sub_1AC725B18();
}

uint64_t CollectionContent.snapshot()()
{
  return sub_1AC725B3C();
}

uint64_t CollectionContent.apply(_:animatingDifferences:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *v4;
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = *(_QWORD *)(v7 + 80);
  v9[3] = *(_QWORD *)(v7 + 88);
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = v8;
  sub_1AC6B83FC(a3);
  swift_retain();
  sub_1AC725B24();
  swift_release();
  return swift_release();
}

uint64_t sub_1AC6CA628(void (*a1)(void))
{
  uint64_t result;

  if (a1)
    a1();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1AC725BD8();
    return swift_release();
  }
  return result;
}

uint64_t CollectionContent.indexPath(forSection:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1AC725B30();
  if ((v3 & 1) != 0)
  {
    v4 = sub_1AC7259A4();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  else
  {
    MEMORY[0x1AF43EF40](0, v2);
    v4 = sub_1AC7259A4();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t CollectionContent.item(for:)()
{
  return sub_1AC725B0C();
}

uint64_t CollectionContent.indexPath(forItem:)()
{
  return sub_1AC725B48();
}

uint64_t CollectionContent.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CollectionContent.__deallocating_deinit()
{
  CollectionContent.deinit();
  return swift_deallocClassInstance();
}

uint64_t *sub_1AC6CA7A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v7 = v6;
  v32 = a3;
  v33 = a2;
  v37 = a1;
  v11 = *(_QWORD *)(*v7 + 80);
  v34 = *v7;
  v12 = sub_1AC725DB8();
  v13 = *(_QWORD *)(v34 + 88);
  v14 = sub_1AC725DB8();
  v15 = MEMORY[0x1E0D3F890];
  v40 = v12;
  v41 = v14;
  v42 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v12);
  v43 = MEMORY[0x1AF440830](v15, v14);
  v35 = sub_1AC725AA0();
  v16 = sub_1AC725ECC();
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  MEMORY[0x1E0C80A78](v16);
  v36 = (char *)&v31 - v17;
  v40 = v12;
  v41 = v14;
  sub_1AC725B54();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v11;
  v18[3] = v13;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = v32;
  v18[7] = a4;
  v19 = v33;
  swift_retain();
  v20 = (void *)sub_1AC725AF4();
  v7[2] = (uint64_t)v20;
  v7[4] = (uint64_t)v19;
  type metadata accessor for CollectionContent.SupplementaryViewProvider(255, v11, v13, v21);
  v22 = v19;
  swift_getTupleTypeMetadata2();
  sub_1AC7263E8();
  v7[3] = sub_1AC726190();
  *((_WORD *)v7 + 20) = 1;
  sub_1AC725BF0();
  v7[6] = sub_1AC725BE4();
  v23 = swift_allocObject();
  swift_weakInit();
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v11;
  v24[3] = v13;
  v24[4] = a5;
  v24[5] = a6;
  v24[6] = v23;
  v25 = v20;
  swift_retain();
  sub_1AC725B00();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a5;
  *(_QWORD *)(v26 + 24) = a6;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = a5;
  v27[3] = a6;
  v27[4] = sub_1AC6CAF7C;
  v27[5] = v26;
  v28 = sub_1AC725BF0();
  MEMORY[0x1AF440830](MEMORY[0x1E0D3F3D8], v28);
  sub_1AC723760();
  v29 = v36;
  sub_1AC725DD0();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  (*(void (**)(uint64_t, uint64_t))(a6 + 40))(a5, a6);
  return v7;
}

uint64_t *sub_1AC6CAB20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return sub_1AC6CA7A4(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1AC6CAB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6CABF4(a1, a2, a3, &qword_1ED0BE050, (void (*)(uint64_t, __n128))DiffableDataStatePresenter.lens(for:));
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CABE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6CABF4(a1, a2, a3, &qword_1EEC8AB90, (void (*)(uint64_t, __n128))DiffableDataStatePresenter.writableLens(for:));
}

uint64_t sub_1AC6CABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t, __n128))
{
  uint64_t v5;

  return sub_1AC6CA218(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), a4, a5);
}

uint64_t type metadata accessor for CollectionContent.SupplementaryViewProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionContent.SupplementaryViewProvider);
}

uint64_t sub_1AC6CAC34()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CAC68()
{
  uint64_t v0;

  return sub_1AC6CA628(*(void (**)(void))(v0 + 32));
}

uint64_t sub_1AC6CAC78()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CollectionContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionContent);
}

uint64_t method lookup function for CollectionContent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CollectionContent.__allocating_init<A>(_:collectionView:cellProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_1AC6CAD08()
{
  return swift_retain();
}

uint64_t sub_1AC6CAD10()
{
  return sub_1AC6CAD20();
}

uint64_t sub_1AC6CAD20()
{
  return swift_release();
}

uint64_t sub_1AC6CAD28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1AC6CAD08();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1AC6CAD70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1AC6CAD08();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AC6CAD20();
  return a1;
}

uint64_t sub_1AC6CADC4(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AC6CAD20();
  return a1;
}

uint64_t _s14ProgrammedTextOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s14ProgrammedTextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AC6CAE94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1AC6CAE9C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

uint64_t sub_1AC6CAEA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CAECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a3, a2, a1);
}

uint64_t sub_1AC6CAEF8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1AC6CAF1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CAF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AC6C9C20(a1, a2, a3, a4);
}

uint64_t sub_1AC6CAF6C()
{
  return swift_deallocObject();
}

uint64_t (*sub_1AC6CAF7C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 32) = a1;
  swift_retain();
  return sub_1AC6CB044;
}

uint64_t sub_1AC6CAFDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CB000()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1AC6CB020()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6CB044(uint64_t a1)
{
  return sub_1AC6CA0D4(a1);
}

unint64_t sub_1AC6CB064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8AFA0;
  if (!qword_1EEC8AFA0)
  {
    v1 = sub_1AC7259A4();
    result = MEMORY[0x1AF440830](MEMORY[0x1E0CB1698], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8AFA0);
  }
  return result;
}

uint64_t sub_1AC6CB0AC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return sub_1AC6CAD20();
  return result;
}

double sub_1AC6CB0C8()
{
  uint64_t v0;
  double v1;
  _BYTE v3[24];
  uint64_t v4;
  double v5;
  _BYTE v6[144];

  sub_1AC6A48BC(v0, (uint64_t)v6);
  Constrain.Placements.next()((uint64_t)v3);
  if (v4)
  {
    v1 = v5;
    sub_1AC6929AC((uint64_t)v3);
    sub_1AC6A4BA8((uint64_t)v6);
  }
  else
  {
    sub_1AC6A4BA8((uint64_t)v6);
    if (qword_1EEC89658 != -1)
      swift_once();
    v1 = *(double *)&xmmword_1EEC8A840;
  }
  return ceil(v1);
}

double sub_1AC6CB184(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  double v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[48];
  __int128 v24[2];
  _OWORD v25[10];
  CGRect v26;
  CGRect v27;

  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.width = a2;
  v26.size.height = a3;
  if (CGRectGetWidth(v26) == 1.79769313e308)
    a2 = 0.0;
  v27.origin.x = 0.0;
  v27.origin.y = 0.0;
  v27.size.width = a2;
  v27.size.height = a3;
  if (CGRectGetHeight(v27) == 1.79769313e308)
    a3 = 0.0;
  v6 = *(_QWORD *)(v3 + 40);
  v7 = *(_BYTE *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v9 = *(_BYTE *)(v3 + 64);
  v10 = *(_QWORD *)(v3 + 72);
  v11 = *(_BYTE *)(v3 + 80);
  v12 = *(_QWORD *)(v3 + 88);
  v13 = *(_BYTE *)(v3 + 96);
  sub_1AC68E218(v3, (uint64_t)v24);
  memset(&v23[8], 0, 40);
  *(CGFloat *)&v18 = a2;
  *((CGFloat *)&v18 + 1) = a3;
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = v6;
  LOBYTE(v20) = v7;
  *((_QWORD *)&v20 + 1) = v8;
  LOBYTE(v21) = v9;
  *((_QWORD *)&v21 + 1) = v10;
  LOBYTE(v22) = v11;
  *((_QWORD *)&v22 + 1) = v12;
  v23[0] = v13;
  v14 = a1;
  sub_1AC69514C((uint64_t)&v23[8]);
  sub_1AC68AAA4(v24, (uint64_t)&v23[8]);
  v25[6] = *(_OWORD *)v23;
  v25[7] = *(_OWORD *)&v23[16];
  v25[8] = *(_OWORD *)&v23[32];
  v25[2] = v19;
  v25[3] = v20;
  v25[4] = v21;
  v25[5] = v22;
  v25[0] = 0uLL;
  v25[1] = v18;
  v15 = sub_1AC6CB0C8();
  sub_1AC6A4BA8((uint64_t)v25);
  return v15;
}

double sub_1AC6CB320(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  double Height;
  CGFloat v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  CGFloat v17[13];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  CGRect v22;
  CGRect v23;

  v22.origin.x = 0.0;
  v22.origin.y = 0.0;
  v22.size.width = a2;
  v22.size.height = a3;
  if (CGRectGetWidth(v22) == 1.79769313e308)
    a2 = 0.0;
  v23.origin.x = 0.0;
  v23.origin.y = 0.0;
  v23.size.width = a2;
  v23.size.height = a3;
  Height = CGRectGetHeight(v23);
  v8 = *(double *)(v3 + 168);
  v9 = *(_QWORD *)(*(_QWORD *)&v8 + 16);
  v10 = a1;
  swift_bridgeObjectRetain();
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC897B8);
    v11 = sub_1AC7263F4();
    v12 = *(double *)&v11;
    *(_QWORD *)(v11 + 16) = v9;
    v13 = 32;
    do
    {
      v14 = v11 + v13;
      *(_OWORD *)v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(_BYTE *)(v14 + 32) = 1;
      v13 += 40;
      --v9;
    }
    while (v9);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v17[6] = 0.0;
  v17[7] = 0.0;
  if (Height == 1.79769313e308)
    v15 = 0.0;
  else
    v15 = a3;
  v17[8] = a2;
  v17[9] = v15;
  *(_QWORD *)&v17[10] = v10;
  v17[11] = v8;
  v17[12] = v12;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v21 = 1;
  DisjointStack.Placements.union.getter(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return ceil(v17[2]);
}

double sub_1AC6CB488(uint64_t a1, CGFloat a2, CGFloat a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD v13[3];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;

  v17.origin.x = 0.0;
  v17.origin.y = 0.0;
  v17.size.width = a2;
  v17.size.height = a3;
  if (CGRectGetWidth(v17) == 1.79769313e308)
    a2 = 0.0;
  v18.origin.x = 0.0;
  v18.origin.y = 0.0;
  v18.size.width = a2;
  v18.size.height = a3;
  if (CGRectGetHeight(v18) == 1.79769313e308)
    a3 = 0.0;
  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, CGFloat, CGFloat))(v8 + 16))(v14, a1, v7, v8, 0.0, 0.0, a2, a3);
  v9 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v13, v9, v10);
  v11 = ceil(*(double *)&v13[2]);
  sub_1AC6CCF24((uint64_t)v14);
  return v11;
}

JUMeasurements __swiftcall PrimitiveLayout.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t AssociatedConformanceWitness;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  CGRect v27;
  CGRect v28;
  JUMeasurements result;

  v4 = v3;
  v5 = v2;
  height = toFit.height;
  width = toFit.width;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v26 - v11;
  v27.origin.x = 0.0;
  v27.origin.y = 0.0;
  v27.size.width = width;
  v27.size.height = height;
  if (CGRectGetWidth(v27) == 1.79769313e308)
    width = 0.0;
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  v28.size.width = width;
  v28.size.height = height;
  if (CGRectGetHeight(v28) == 1.79769313e308)
    v13.n128_u64[0] = 0;
  else
    v13.n128_f64[0] = height;
  (*(void (**)(Class, uint64_t, uint64_t, double, double, double, __n128))(v4 + 40))(with.super.isa, v5, v4, 0.0, 0.0, width, v13);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  v22 = v15;
  v23 = v17;
  v24 = v19;
  v25 = v21;
  result.var3 = v25;
  result.var2 = v24;
  result.var1 = v23;
  result.var0 = v22;
  return result;
}

uint64_t sub_1AC6CB72C(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  id v17;
  double v18;
  int v19;
  double v20;
  int v21;
  CGPoint origin;
  CGSize size;
  double Width;
  unsigned __int8 v25;
  int v26;
  double v27;
  double v28;
  double v29;
  int v30;
  double v31;
  int v32;
  double Height;
  int v34;
  double v35;
  double v36;
  CGFloat d;
  CGFloat tx;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double MinY;
  double v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double x;
  double y;
  double v59;
  double v60;
  double MinX;
  CGFloat MaxX;
  _BYTE v64[32];
  CGFloat ty;
  CGFloat v66;
  double v67;
  __int128 v68;
  char v69;
  double v70;
  __int128 v71;
  double rect[7];
  CGAffineTransform v73;
  _QWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  CGRect v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[48];
  CGRect v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;

  v11 = *(_QWORD *)(v5 + 40);
  v12 = *(_BYTE *)(v5 + 48);
  v13 = *(_QWORD *)(v5 + 56);
  v14 = *(_BYTE *)(v5 + 64);
  v15 = *(_QWORD *)(v5 + 72);
  v16 = *(_BYTE *)(v5 + 80);
  rect[0] = *(double *)(v5 + 88);
  v69 = *(_BYTE *)(v5 + 96);
  sub_1AC68E218(v5, (uint64_t)&v77);
  memset(&v92[8], 0, 40);
  *(CGFloat *)v64 = a2;
  *(CGFloat *)&v64[8] = a3;
  v87.origin.x = a2;
  v87.origin.y = a3;
  *(CGFloat *)&v64[16] = a4;
  *(CGFloat *)&v64[24] = a5;
  v87.size.width = a4;
  v87.size.height = a5;
  *(_QWORD *)&v88 = a1;
  *((_QWORD *)&v88 + 1) = v11;
  LOBYTE(v89) = v12;
  *((_QWORD *)&v89 + 1) = v13;
  LOBYTE(v90) = v14;
  *((_QWORD *)&v90 + 1) = v15;
  LOBYTE(v91) = v16;
  *((double *)&v91 + 1) = rect[0];
  v92[0] = v69;
  v17 = a1;
  sub_1AC69514C((uint64_t)&v92[8]);
  sub_1AC68AAA4(&v77, (uint64_t)&v92[8]);
  v98 = *(_OWORD *)v92;
  v99 = *(_OWORD *)&v92[16];
  v100 = *(_OWORD *)&v92[32];
  v94 = v88;
  v95 = v89;
  v96 = v90;
  v97 = v91;
  v93 = v87;
  sub_1AC6A48BC((uint64_t)&v93, (uint64_t)&v87);
  sub_1AC695DFC((uint64_t)&v92[8], (uint64_t)&v77);
  if (v79)
  {
    while (1)
    {
      sub_1AC68AAA4(&v77, (uint64_t)&v73);
      sub_1AC69514C((uint64_t)&v92[8]);
      memset(&v92[8], 0, 40);
      v18 = *((double *)&v88 + 1);
      v19 = v89;
      v20 = *((double *)&v89 + 1);
      v21 = v90;
      origin = v87.origin;
      size = v87.size;
      Width = CGRectGetWidth(v87);
      v25 = v19 ^ 1;
      v26 = (v19 ^ 1) & (Width < v18);
      if (v26)
        v27 = v18;
      else
        v27 = Width;
      if (Width > v20)
        Width = v20;
      if ((v21 & 1) != 0)
        Width = v27;
      if ((v26 & 1) != 0)
        v28 = v27;
      else
        v28 = Width;
      v29 = *((double *)&v90 + 1);
      v30 = v91;
      v31 = *((double *)&v91 + 1);
      v32 = v92[0];
      v101.origin = origin;
      v101.size = size;
      Height = CGRectGetHeight(v101);
      v34 = (v30 ^ 1) & (Height < v29);
      if (v34)
        v35 = v29;
      else
        v35 = Height;
      if (Height > v31)
        Height = v31;
      if (v32)
        Height = v35;
      if ((v34 & 1) != 0)
        v36 = v35;
      else
        v36 = Height;
      d = v73.d;
      tx = v73.tx;
      __swift_project_boxed_opaque_existential_1(&v73, *(uint64_t *)&v73.d);
      v39 = (*(double (**)(_QWORD, CGFloat, CGFloat, double, double))(*(_QWORD *)&tx + 8))(v88, COERCE_CGFLOAT(*(_QWORD *)&d), COERCE_CGFLOAT(*(_QWORD *)&tx), v28, v36);
      v41 = v40;
      v70 = v42;
      v67 = v43;
      v102.origin = origin;
      v102.size = size;
      rect[0] = CGRectGetMinX(v102);
      v103.origin = origin;
      v103.size = size;
      MinY = CGRectGetMinY(v103);
      if ((v25 & (v39 < v18)) != 0)
        v45 = v18;
      else
        v45 = v39;
      if ((v25 & (v39 < v18) | v21) != 1)
      {
        v45 = v20;
        if (v39 <= v20)
          v45 = v39;
      }
      v46 = (v30 ^ 1) & (v41 < v29) | v32;
      if (((v30 ^ 1) & (v41 < v29)) == 0)
        v29 = v41;
      if (v46 != 1)
      {
        v29 = v31;
        if (v41 <= v31)
          v29 = v41;
      }
      sub_1AC68E218((uint64_t)&v73, (uint64_t)&rect[1]);
      sub_1AC68E218((uint64_t)&rect[1], (uint64_t)&v77);
      v81 = floor(rect[0]);
      v82 = floor(MinY);
      v83 = ceil(v45);
      v84 = ceil(v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&rect[1]);
      v47 = v77;
      v48 = v78;
      v49 = v79;
      v50 = v80;
      v51 = v81;
      v52 = v82;
      v53 = v83;
      v54 = v84;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      if (!v49)
        break;
      v77 = v47;
      v78 = v48;
      v79 = v49;
      v80 = v50;
      v81 = v51;
      v82 = v52;
      v83 = v53;
      v84 = v54;
      v85 = floor(v70);
      v86 = floor(v67);
      sub_1AC68E218((uint64_t)&v77, (uint64_t)v74);
      v55 = v75;
      v56 = v76;
      __swift_project_boxed_opaque_existential_1(v74, v75);
      x = v81;
      y = v82;
      v59 = v83;
      v60 = v84;
      if (objc_msgSend(v17, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v73, -1.0, 1.0);
        v68 = *(_OWORD *)&v73.c;
        v71 = *(_OWORD *)&v73.a;
        ty = v73.ty;
        v66 = v73.tx;
        rect[0] = x;
        MinX = CGRectGetMinX(*(CGRect *)v64);
        MaxX = CGRectGetMaxX(*(CGRect *)v64);
        *(_OWORD *)&v73.a = v71;
        *(_OWORD *)&v73.c = v68;
        v73.tx = v66;
        v73.ty = ty;
        CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v73, -(MinX + MaxX), 0.0);
        v73 = *(CGAffineTransform *)&rect[1];
        v104.origin.x = rect[0];
        v104.origin.y = y;
        v104.size.width = v59;
        v104.size.height = v60;
        v105 = CGRectApplyAffineTransform(v104, &v73);
        x = v105.origin.x;
        y = v105.origin.y;
        v59 = v105.size.width;
        v60 = v105.size.height;
      }
      (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v56 + 16))(v17, v55, v56, x, y, v59, v60);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
      sub_1AC6929AC((uint64_t)&v77);
      sub_1AC695DFC((uint64_t)&v92[8], (uint64_t)&v77);
      if (!v79)
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    sub_1AC69514C((uint64_t)&v77);
  }
  sub_1AC6A4BA8((uint64_t)&v87);
  return sub_1AC6A4BA8((uint64_t)&v93);
}

void sub_1AC6CBC1C(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  void *v22;
  _BYTE v23[32];
  CGFloat ty;
  CGFloat tx;
  __int128 v26;
  __int128 v27;
  _QWORD rect[7];
  CGAffineTransform v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  CGRect v55;
  CGRect v56;

  *(double *)&v23[16] = a4;
  *(double *)&v23[24] = a5;
  *(double *)v23 = a2;
  *(double *)&v23[8] = a3;
  v6 = *(_QWORD *)(v5 + 168);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = a1;
  swift_bridgeObjectRetain();
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC897B8);
    v9 = sub_1AC7263F4();
    v10 = v9;
    *(_QWORD *)(v9 + 16) = v7;
    v11 = 32;
    do
    {
      v12 = v9 + v11;
      *(_OWORD *)v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_BYTE *)(v12 + 32) = 1;
      v11 += 40;
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  v44 = *(_QWORD *)v23;
  v45 = *(_QWORD *)&v23[8];
  v46 = *(_QWORD *)&v23[16];
  v47 = *(_QWORD *)&v23[24];
  v48 = v8;
  v49 = v6;
  v51 = 0u;
  v52 = 0u;
  v50 = v10;
  v53 = 0;
  v54 = 1;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DisjointStack.Placements.next()((uint64_t)&v38);
  while (*((_QWORD *)&v39 + 1))
  {
    v34 = v40;
    v35 = v41;
    v36 = v42;
    v37 = v43;
    v33[0] = v38;
    v33[1] = v39;
    sub_1AC68E218((uint64_t)v33, (uint64_t)v30);
    v14 = v31;
    v15 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    x = *((double *)&v34 + 1);
    width = *((double *)&v35 + 1);
    y = *(double *)&v35;
    height = *(double *)&v36;
    if (objc_msgSend(v13, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v29, -1.0, 1.0);
      v26 = *(_OWORD *)&v29.c;
      v27 = *(_OWORD *)&v29.a;
      ty = v29.ty;
      tx = v29.tx;
      *(double *)rect = x;
      MinX = CGRectGetMinX(*(CGRect *)v23);
      MaxX = CGRectGetMaxX(*(CGRect *)v23);
      *(_OWORD *)&v29.a = v27;
      *(_OWORD *)&v29.c = v26;
      v29.tx = tx;
      v29.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v29, -(MinX + MaxX), 0.0);
      v29 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v55.origin.x = rect[0];
      v55.origin.y = y;
      v55.size.width = width;
      v55.size.height = height;
      v56 = CGRectApplyAffineTransform(v55, &v29);
      x = v56.origin.x;
      y = v56.origin.y;
      width = v56.size.width;
      height = v56.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v15 + 16))(v13, v14, v15, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    sub_1AC6929AC((uint64_t)v33);
    DisjointStack.Placements.next()((uint64_t)&v38);
  }
  v22 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_1AC6CBEF8(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  CGFloat v22;
  CGFloat ty;
  CGFloat tx;
  __int128 v25;
  __int128 v26;
  _QWORD rect[7];
  CGAffineTransform v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[136];
  _QWORD v44[5];
  char v45;
  char v46;
  uint64_t v47;
  _BYTE v48[48];
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v11 = *(_BYTE *)(v5 + 40);
  sub_1AC68E218(v5 + 48, (uint64_t)&v47);
  sub_1AC68E218(v5, (uint64_t)v48);
  *(CGFloat *)v44 = a2;
  *(CGFloat *)&v44[1] = a3;
  v22 = a5;
  *(CGFloat *)&v44[2] = a4;
  *(CGFloat *)&v44[3] = a5;
  v44[4] = a1;
  v45 = 0;
  v46 = v11;
  v48[40] = 0;
  sub_1AC6CCBF8((uint64_t)v44, (uint64_t)v43);
  v12 = a1;
  Pin.Placements.next()((uint64_t)&v37);
  while (*((_QWORD *)&v38 + 1))
  {
    v33 = v39;
    v34 = v40;
    v35 = v41;
    v36 = v42;
    v32[0] = v37;
    v32[1] = v38;
    sub_1AC68E218((uint64_t)v32, (uint64_t)v29);
    v13 = v30;
    v14 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    x = *((double *)&v33 + 1);
    width = *((double *)&v34 + 1);
    y = *(double *)&v34;
    height = *(double *)&v35;
    if (objc_msgSend(v12, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v28, -1.0, 1.0);
      v25 = *(_OWORD *)&v28.c;
      v26 = *(_OWORD *)&v28.a;
      ty = v28.ty;
      tx = v28.tx;
      v49.origin.x = a2;
      v49.origin.y = a3;
      v49.size.width = a4;
      v49.size.height = v22;
      *(double *)rect = x;
      MinX = CGRectGetMinX(v49);
      v50.origin.x = a2;
      v50.origin.y = a3;
      v50.size.width = a4;
      v50.size.height = v22;
      MaxX = CGRectGetMaxX(v50);
      *(_OWORD *)&v28.a = v26;
      *(_OWORD *)&v28.c = v25;
      v28.tx = tx;
      v28.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v28, -(MinX + MaxX), 0.0);
      v28 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v51.origin.x = rect[0];
      v51.origin.y = y;
      v51.size.width = width;
      v51.size.height = height;
      v52 = CGRectApplyAffineTransform(v51, &v28);
      x = v52.origin.x;
      y = v52.origin.y;
      width = v52.size.width;
      height = v52.size.height;
    }
    (*(void (**)(id, uint64_t, uint64_t, double, double, double, double))(v14 + 16))(v12, v13, v14, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    sub_1AC6929AC((uint64_t)v32);
    Pin.Placements.next()((uint64_t)&v37);
  }
  sub_1AC6CCC34((uint64_t)v43);
  return sub_1AC6CCC34((uint64_t)v44);
}

uint64_t sub_1AC6CC160(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double x;
  double y;
  double width;
  double height;
  double MinX;
  CGFloat MaxX;
  CGFloat v24;
  CGFloat ty;
  CGFloat tx;
  __int128 v27;
  __int128 v28;
  _QWORD rect[7];
  CGAffineTransform v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[5];
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  v11 = v5[3];
  v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  v24 = a5;
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(v12 + 16))(v45, a1, v11, v12, a2, a3, a4, a5);
  sub_1AC6CCEE8((uint64_t)v45, (uint64_t)&v39);
  v13 = *((_QWORD *)&v40 + 1);
  v14 = v41;
  __swift_project_boxed_opaque_existential_1(&v39, *((uint64_t *)&v40 + 1));
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  sub_1AC6CCF24((uint64_t)&v39);
  sub_1AC726958();
  while (*((_QWORD *)&v40 + 1))
  {
    v35 = v41;
    v36 = v42;
    v37 = v43;
    v38 = v44;
    v34[0] = v39;
    v34[1] = v40;
    sub_1AC68E218((uint64_t)v34, (uint64_t)v31);
    v15 = v32;
    v16 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    x = *((double *)&v35 + 1);
    width = *((double *)&v36 + 1);
    y = *(double *)&v36;
    height = *(double *)&v37;
    if (objc_msgSend(a1, sel_layoutDirection) == (id)1)
    {
      CGAffineTransformMakeScale(&v30, -1.0, 1.0);
      v27 = *(_OWORD *)&v30.c;
      v28 = *(_OWORD *)&v30.a;
      ty = v30.ty;
      tx = v30.tx;
      v46.origin.x = a2;
      v46.origin.y = a3;
      v46.size.width = a4;
      v46.size.height = v24;
      *(double *)rect = x;
      MinX = CGRectGetMinX(v46);
      v47.origin.x = a2;
      v47.origin.y = a3;
      v47.size.width = a4;
      v47.size.height = v24;
      MaxX = CGRectGetMaxX(v47);
      *(_OWORD *)&v30.a = v28;
      *(_OWORD *)&v30.c = v27;
      v30.tx = tx;
      v30.ty = ty;
      CGAffineTransformTranslate((CGAffineTransform *)&rect[1], &v30, -(MinX + MaxX), 0.0);
      v30 = *(CGAffineTransform *)&rect[1];
      *(_QWORD *)&v48.origin.x = rect[0];
      v48.origin.y = y;
      v48.size.width = width;
      v48.size.height = height;
      v49 = CGRectApplyAffineTransform(v48, &v30);
      x = v49.origin.x;
      y = v49.origin.y;
      width = v49.size.width;
      height = v49.size.height;
    }
    (*(void (**)(void *, uint64_t, uint64_t, double, double, double, double))(v16 + 16))(a1, v15, v16, x, y, width, height);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    sub_1AC6929AC((uint64_t)v34);
    sub_1AC726958();
  }
  swift_release();
  return sub_1AC6CCF24((uint64_t)v45);
}

Swift::Void __swiftcall PrimitiveLayout.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double height;
  double width;
  double y;
  double x;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(Class, _QWORD, uint64_t, double, double, double, double);
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat MinX;
  double v32;
  CGFloat MaxX;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat ty;
  CGFloat tx;
  __int128 v44;
  __int128 v45;
  CGFloat v46;
  CGAffineTransform v47;
  CGAffineTransform v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v4 = v3;
  *(_QWORD *)&v45 = v2;
  height = at.size.height;
  width = at.size.width;
  y = at.origin.y;
  x = at.origin.x;
  swift_getAssociatedTypeWitness();
  v46 = *(double *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v34 - v11;
  v13 = swift_checkMetadataState();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v34 - v18;
  v20 = *(void (**)(Class, _QWORD, uint64_t, double, double, double, double))(v4 + 40);
  v38 = x;
  v39 = y;
  v40 = width;
  v41 = height;
  v20(with.super.isa, v45, v4, x, y, width, height);
  v34 = v19;
  v35 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  sub_1AC726340();
  v36 = v13;
  swift_getAssociatedConformanceWitness();
  sub_1AC7266F4();
  if (*((_QWORD *)&v58 + 1))
  {
    v22 = v38;
    v21 = v39;
    v23 = v40;
    v24 = v41;
    do
    {
      v53 = v59;
      v54 = v60;
      v55 = v61;
      v56 = v62;
      v52[0] = v57;
      v52[1] = v58;
      sub_1AC68E218((uint64_t)v52, (uint64_t)v49);
      v25 = v50;
      v26 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      v27 = *((double *)&v53 + 1);
      v29 = *((double *)&v54 + 1);
      v28 = *(double *)&v54;
      v30 = *(double *)&v55;
      if (-[objc_class layoutDirection](with.super.isa, sel_layoutDirection) == (id)1)
      {
        CGAffineTransformMakeScale(&v48, -1.0, 1.0);
        v44 = *(_OWORD *)&v48.c;
        v45 = *(_OWORD *)&v48.a;
        ty = v48.ty;
        tx = v48.tx;
        v63.origin.x = v22;
        v63.origin.y = v21;
        v63.size.width = v23;
        v63.size.height = v24;
        MinX = CGRectGetMinX(v63);
        v46 = v27;
        v32 = MinX;
        v64.origin.x = v22;
        v64.origin.y = v21;
        v64.size.width = v23;
        v64.size.height = v24;
        MaxX = CGRectGetMaxX(v64);
        *(_OWORD *)&v48.a = v45;
        *(_OWORD *)&v48.c = v44;
        v48.tx = tx;
        v48.ty = ty;
        CGAffineTransformTranslate(&v47, &v48, -(v32 + MaxX), 0.0);
        v48 = v47;
        v65.origin.x = v46;
        v65.origin.y = v28;
        v65.size.width = v29;
        v65.size.height = v30;
        v66 = CGRectApplyAffineTransform(v65, &v48);
        v27 = v66.origin.x;
        v28 = v66.origin.y;
        v29 = v66.size.width;
        v30 = v66.size.height;
      }
      (*(void (**)(Class, uint64_t, uint64_t, double, double, double, double))(v26 + 16))(with.super.isa, v25, v26, v27, v28, v29, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      sub_1AC6929AC((uint64_t)v52);
      sub_1AC7266F4();
    }
    while (*((_QWORD *)&v58 + 1));
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
}

uint64_t sub_1AC6CC7A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFF0);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6A295C(v1, v3 + 16);
}

uint64_t PrimitiveLayout._eraseToAnyForTesting(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v10, v4, a2, v8);
  return AnyPrimitiveLayout.init<A>(_:)((uint64_t)v10, a2, a3, v12, a4);
}

uint64_t sub_1AC6CC888@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFE8);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CD044(v1, v3 + 16);
}

uint64_t sub_1AC6CC8DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFE0);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCFE4(v1, v3 + 16);
}

uint64_t sub_1AC6CC938@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AC6CCAC8(&qword_1EEC8AFD8, sub_1AC6B8474, a1);
}

uint64_t sub_1AC6CC95C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFD0);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCEAC(v1, v3 + 16);
}

_OWORD *sub_1AC6CC9B0@<X0>(uint64_t *a1@<X8>)
{
  _OWORD *v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFC8);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCE4C(v1, (_OWORD *)(v3 + 16));
}

uint64_t sub_1AC6CCA04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFC0);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCDCC(v1, v3 + 16);
}

uint64_t sub_1AC6CCA58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFB8);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCD5C(v1, v3 + 16);
}

uint64_t sub_1AC6CCAAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1AC6CCAC8(&qword_1EEC8AFB0, sub_1AC6CCC6C, a1);
}

uint64_t sub_1AC6CCAC8@<X0>(uint64_t *a1@<X3>, uint64_t (*a2)(uint64_t, uint64_t)@<X5>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  a3[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  a3[4] = (uint64_t)&off_1E5BF95A8;
  v5 = swift_allocObject();
  *a3 = v5;
  return a2(v3, v5 + 16);
}

uint64_t sub_1AC6CCB34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AFA8);
  a1[4] = (uint64_t)&off_1E5BF95A8;
  v3 = swift_allocObject();
  *a1 = v3;
  return sub_1AC6CCBBC(v1, v3 + 16);
}

uint64_t dispatch thunk of PrimitiveLayout.layout(relativeTo:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_1AC6CCB90()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocObject();
}

uint64_t sub_1AC6CCBBC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Pin(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCBF8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Pin.Placements(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCC34(uint64_t a1)
{
  destroy for Pin.Placements(a1);
  return a1;
}

uint64_t sub_1AC6CCC6C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisjointStack(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCCA8()
{
  _BYTE *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 16));
  if (v0[96] == 1)
  {
    swift_release();
  }
  else if (!v0[96])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 56));
  }
  if (v0[144] == 1)
  {
    swift_release();
  }
  else if (!v0[144])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 104));
  }
  if (v0[192] == 1)
  {
    swift_release();
  }
  else if (!v0[192])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 152));
  }
  if (v0[240] == 1)
  {
    swift_release();
  }
  else if (!v0[240])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 200));
  }
  return swift_deallocObject();
}

uint64_t sub_1AC6CCD5C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Resize(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCD98()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AC6CCDCC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VerticalStack(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCE08()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  return swift_deallocObject();
}

_OWORD *sub_1AC6CCE4C(_OWORD *a1, _OWORD *a2)
{
  initializeWithCopy for Margins(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCE88()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1AC6CCEAC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPrimitiveLayout(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCEE8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPrimitiveLayout(a2, a1);
  return a2;
}

uint64_t sub_1AC6CCF24(uint64_t a1)
{
  destroy for Constrain();
  return a1;
}

uint64_t objectdestroy_2Tm()
{
  _QWORD *v0;

  if (v0[5])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (v0[10])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  if (v0[15])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  if (v0[20])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AC6CCFC0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1AC6CCFE4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Center(a2, a1);
  return a2;
}

uint64_t sub_1AC6CD020()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1AC6CD044(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Constrain(a2, a1);
  return a2;
}

uint64_t sub_1AC6CD080()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t static VerticalStack.Edge.bottom.getter()
{
  return 2;
}

uint64_t static VerticalStack.Edge.none.getter()
{
  return 0;
}

uint64_t static VerticalStack.Edge.all.getter()
{
  return 3;
}

uint64_t VerticalStack.Alignment._horizontalLayoutAlignment.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result + 1;
  return result;
}

uint64_t VerticalStack.Alignment.hash(into:)()
{
  return sub_1AC726B08();
}

BOOL static VerticalStack.Alignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t VerticalStack.Alignment.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

void VerticalStack.Properties.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ZeroDimension;
  *(_QWORD *)(a1 + 32) = &protocol witness table for ZeroDimension;
  *(_QWORD *)(a1 + 64) = &type metadata for ZeroDimension;
  *(_QWORD *)(a1 + 72) = &protocol witness table for ZeroDimension;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
}

uint64_t VerticalStack.Properties.topSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1, a1);
}

double (*VerticalStack.Properties.topSpacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.bottomSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 40, a1);
}

double (*VerticalStack.Properties.bottomSpacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.alignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

double (*VerticalStack.Properties.alignment.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.edgesAlignedToBaseline.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

double (*VerticalStack.Properties.edgesAlignedToBaseline.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalStack.Properties.shouldSkip.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

double (*VerticalStack.Properties.shouldSkip.modify())(void)
{
  return nullsub_1;
}

void VerticalStack.Properties.topSpacing(from:with:)(void *a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4;
  v10 = v4[11];
  v11 = v4[3];
  v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  if ((v10 & 1) != 0)
    AnyDimension.topMargin(from:with:)(a1, v11, v12, a2, a3, a4);
  else
    AnyDimension.value(with:)(a1, v11, v12);
}

void VerticalStack.Properties.bottomSpacing(from:with:)(void *a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = v5[11];
  v13 = v5[8];
  v12 = v5[9];
  __swift_project_boxed_opaque_existential_1(v5 + 5, v13);
  if ((v11 & 2) != 0)
    AnyDimension.bottomMargin(from:with:)(a1, v13, v12, a2, a3, a4, a5);
  else
    AnyDimension.value(with:)(a1, v13, v12);
}

_QWORD *sub_1AC6CD374()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _QWORD *v3;
  __int128 v5[4];

  v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  v2 = v0[3];
  v5[2] = v0[2];
  v5[3] = v2;
  v3 = sub_1AC70FED0(v5);
  sub_1AC6A4090((uint64_t)v5);
  return v3;
}

__int128 *sub_1AC6CD3BC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC70D4C0(a1, a2, a3);
}

unint64_t sub_1AC6CD3F4()
{
  return 0xD000000000000056;
}

uint64_t VerticalStack.adding(_:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_1AC6CCDCC(v3, a3);
  return VerticalStack.add(_:with:)(a1, a2);
}

uint64_t VerticalStack.insert(_:at:with:)(uint64_t a1, int64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v3;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _BYTE v24[104];

  sub_1AC68E218(a1, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    v10 = v18;
    v11 = v19;
    v12 = v20;
    *(_QWORD *)&v13 = v21;
    v8 = v16;
    v9 = v17;
    if (BYTE8(v18) == 1)
      sub_1AC725F38();
    sub_1AC6A2928((uint64_t)&v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  sub_1AC68DD94(v3, (uint64_t)v24);
  if (a3)
    a3(v24);
  sub_1AC68E218(a1, (uint64_t)&v16);
  result = sub_1AC68DD94((uint64_t)v24, (uint64_t)&v18 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 104) + 16) < a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    v14 = v22;
    v15[0] = v23[0];
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v23 + 9);
    v10 = v18;
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v8 = v16;
    v9 = v17;
    sub_1AC6A44C8(a2, a2, (uint64_t)&v8);
    return sub_1AC68DF00((uint64_t)v24);
  }
  __break(1u);
  return result;
}

uint64_t VerticalStack.inserting(_:at:with:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_1AC6CCDCC(v4, a4);
  return VerticalStack.insert(_:at:with:)(a1, a2, a3);
}

void VerticalStack.layout(relativeTo:with:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v12;
  id v13;
  CGFloat MinY;
  CGRect v15;

  v12 = *(_QWORD *)(v6 + 104);
  v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  MinY = CGRectGetMinY(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinY;
}

uint64_t sub_1AC6CD6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  __int128 v10[2];
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  sub_1AC68E218(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v10, (uint64_t)v13);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 8))(v12, a2, v6, v7);
    v8 = BYTE1(v12[0]);
    *a3 = *(_BYTE *)(a1 + 120) + 1;
    a3[1] = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    result = sub_1AC6916CC((uint64_t)v10, &qword_1ED0BD540);
    *a3 = *(_BYTE *)(a1 + 120) + 1;
    a3[1] = 0;
  }
  return result;
}

JetUI::_LayoutAlignment __swiftcall VerticalStack._layoutAlignment(with:)(UITraitCollection with)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  Class isa;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  __int128 v17[2];
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[120];
  char v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  _BYTE v27[152];

  v3 = v1;
  v4 = *(_QWORD *)(v2 + 104);
  if (*(_QWORD *)(v4 + 16))
  {
    isa = with.super.isa;
    sub_1AC691774(v4 + 32, (uint64_t)v27);
    LOWORD(with.super.isa) = sub_1AC6CD6C0((uint64_t)v27, (uint64_t)isa, &v25);
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v6 != 0;
    v8 = v6 - v7;
    if (v6 == v7)
    {
      v9 = v25;
      LOBYTE(v10) = v26;
LABEL_17:
      LOWORD(with.super.isa) = sub_1AC6916CC((uint64_t)v27, &qword_1ED0BD520);
      *v3 = v9;
      v3[1] = v10;
      return (JetUI::_LayoutAlignment)with.super.isa;
    }
    if (v6 > v7)
    {
      v16 = isa;
      v9 = v25;
      v10 = v26;
      swift_bridgeObjectRetain();
      v11 = v4 + 144 * v7 + 32;
      do
      {
        sub_1AC691774(v11, (uint64_t)v23);
        sub_1AC68E218((uint64_t)v23, (uint64_t)v19);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
        if (swift_dynamicCast())
        {
          sub_1AC68AAA4(v17, (uint64_t)v20);
          v15 = v21;
          v14 = v22;
          __swift_project_boxed_opaque_existential_1(v20, v21);
          (*(void (**)(_QWORD *__return_ptr, Class, uint64_t, uint64_t))(v14 + 8))(v19, v16, v15, v14);
          v12 = BYTE1(v19[0]);
          v13 = v24;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
        else
        {
          v18 = 0;
          memset(v17, 0, sizeof(v17));
          sub_1AC6916CC((uint64_t)v17, &qword_1ED0BD540);
          v12 = 0;
          v13 = v24;
        }
        sub_1AC6916CC((uint64_t)v23, &qword_1ED0BD520);
        if (v9 != (v13 + 1))
          v9 = 0;
        if (v12 != v10)
          v10 = 0;
        v11 += 144;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    *v1 = *(_BYTE *)(v2 + 80) + 1;
    v1[1] = 0;
  }
  return (JetUI::_LayoutAlignment)with.super.isa;
}

void sub_1AC6CD9BC(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v12;
  id v13;
  CGFloat MinY;
  CGRect v15;

  v12 = *(_QWORD *)(v6 + 104);
  v13 = a1;
  swift_bridgeObjectRetain();
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  MinY = CGRectGetMinY(v15);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = 0;
  *(CGFloat *)(a2 + 56) = MinY;
}

unint64_t sub_1AC6CDA44()
{
  unint64_t result;

  result = qword_1EEC8AFF8;
  if (!qword_1EEC8AFF8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Edge, &type metadata for VerticalStack.Edge);
    atomic_store(result, (unint64_t *)&qword_1EEC8AFF8);
  }
  return result;
}

unint64_t sub_1AC6CDA8C()
{
  unint64_t result;

  result = qword_1EEC8B000;
  if (!qword_1EEC8B000)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Edge, &type metadata for VerticalStack.Edge);
    atomic_store(result, (unint64_t *)&qword_1EEC8B000);
  }
  return result;
}

unint64_t sub_1AC6CDAD4()
{
  unint64_t result;

  result = qword_1EEC8B008;
  if (!qword_1EEC8B008)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Edge, &type metadata for VerticalStack.Edge);
    atomic_store(result, (unint64_t *)&qword_1EEC8B008);
  }
  return result;
}

unint64_t sub_1AC6CDB1C()
{
  unint64_t result;

  result = qword_1EEC8B010;
  if (!qword_1EEC8B010)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Edge, &type metadata for VerticalStack.Edge);
    atomic_store(result, (unint64_t *)&qword_1EEC8B010);
  }
  return result;
}

unint64_t sub_1AC6CDB64()
{
  unint64_t result;

  result = qword_1EEC8B018;
  if (!qword_1EEC8B018)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Alignment, &type metadata for VerticalStack.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8B018);
  }
  return result;
}

unint64_t sub_1AC6CDBA8(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6CDBCC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6CDBCC()
{
  unint64_t result;

  result = qword_1EEC8B020;
  if (!qword_1EEC8B020)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Placements, &type metadata for VerticalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B020);
  }
  return result;
}

unint64_t sub_1AC6CDC14()
{
  unint64_t result;

  result = qword_1EEC8B028;
  if (!qword_1EEC8B028)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Placements, &type metadata for VerticalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B028);
  }
  return result;
}

unint64_t sub_1AC6CDC5C()
{
  unint64_t result;

  result = qword_1EEC8B030;
  if (!qword_1EEC8B030)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalStack.Placements, &type metadata for VerticalStack.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B030);
  }
  return result;
}

uint64_t assignWithCopy for VerticalStack(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerticalStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalStack(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalStack.Edge()
{
  return &type metadata for VerticalStack.Edge;
}

uint64_t storeEnumTagSinglePayload for VerticalStack.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AC6CDE84 + 4 * byte_1AC72C069[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AC6CDEB8 + 4 * asc_1AC72C064[v4]))();
}

uint64_t sub_1AC6CDEB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6CDEC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6CDEC8);
  return result;
}

uint64_t sub_1AC6CDED4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6CDEDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AC6CDEE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6CDEE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalStack.Alignment()
{
  return &type metadata for VerticalStack.Alignment;
}

uint64_t assignWithCopy for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for VerticalStack.Properties(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for VerticalStack.Placements()
{
  return &type metadata for VerticalStack.Placements;
}

double ZeroDimension.rawValue(in:)()
{
  return 0.0;
}

UIEdgeInsets __swiftcall ZeroDimension.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  double v1;
  double v2;
  double v3;
  double v4;
  UIEdgeInsets result;

  v1 = *MEMORY[0x1E0DC49E8];
  v2 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v3 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v4 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  result.right = v4;
  result.bottom = v3;
  result.left = v2;
  result.top = v1;
  return result;
}

uint64_t static ZeroDimension.== infix(_:_:)()
{
  return 1;
}

uint64_t ZeroDimension.description.getter()
{
  return 0x6F72657A2ELL;
}

uint64_t sub_1AC6CE008()
{
  return 0x6F72657A2ELL;
}

double static LayoutViewPlaceholder.withIdentityMeasurement.getter()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 32) = 1;
  result = 0.0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_BYTE *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 16) = sub_1AC6CE060;
  *(_QWORD *)(v0 + 24) = 0;
  return result;
}

double LayoutViewPlaceholder.__allocating_init(measureWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 32) = 1;
  result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return result;
}

uint64_t LayoutViewPlaceholder.init(measureWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = 1;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_BYTE *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t LayoutViewPlaceholder.__allocating_init(measurements:)(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  double *v9;
  BOOL v10;
  BOOL v11;

  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 32) = 1;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_BYTE *)(v8 + 72) = 0;
  v9 = (double *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  *(_QWORD *)(v8 + 16) = sub_1AC69645C;
  *(_QWORD *)(v8 + 24) = v9;
  v10 = fabs(a1) >= COERCE_DOUBLE(1);
  v11 = fabs(a2) >= COERCE_DOUBLE(1) && v10;
  swift_beginAccess();
  *(_BYTE *)(v8 + 32) = v11;
  return v8;
}

uint64_t LayoutViewPlaceholder.init(measurements:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  BOOL v10;
  BOOL v11;

  *(_BYTE *)(v4 + 32) = 1;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_BYTE *)(v4 + 72) = 0;
  v9 = (double *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  *(_QWORD *)(v4 + 16) = sub_1AC69645C;
  *(_QWORD *)(v4 + 24) = v9;
  v10 = fabs(a1) >= COERCE_DOUBLE(1);
  v11 = fabs(a2) >= COERCE_DOUBLE(1) && v10;
  swift_beginAccess();
  *(_BYTE *)(v4 + 32) = v11;
  return v4;
}

uint64_t sub_1AC6CE288()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6CE298()
{
  return swift_deallocObject();
}

uint64_t LayoutViewPlaceholder.__allocating_init(representing:)(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 32) = 1;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_BYTE *)(v4 + 72) = 0;
  v5 = swift_allocObject();
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v4 + 16) = sub_1AC69645C;
  *(_QWORD *)(v4 + 24) = v5;
  v6 = fabs(a1) >= COERCE_DOUBLE(1);
  v7 = fabs(a2) >= COERCE_DOUBLE(1) && v6;
  swift_beginAccess();
  *(_BYTE *)(v4 + 32) = v7;
  return v4;
}

uint64_t sub_1AC6CE378()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6CE388()
{
  return swift_deallocObject();
}

uint64_t LayoutViewPlaceholder.measurements(fitting:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t LayoutViewPlaceholder.hasContent.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t LayoutViewPlaceholder.hasContent.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 32) = a1;
  return result;
}

uint64_t (*LayoutViewPlaceholder.hasContent.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;
  uint64_t result;

  result = swift_beginAccess();
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
  return result;
}

uint64_t (*LayoutViewPlaceholder.frame.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.isHidden.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t LayoutViewPlaceholder.isHidden.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 72) = a1;
  return result;
}

uint64_t (*LayoutViewPlaceholder.isHidden.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t LayoutViewPlaceholder.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t sub_1AC6CE5BC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t method lookup function for LayoutViewPlaceholder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(measureWith:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(measurements:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of LayoutViewPlaceholder.__allocating_init(representing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

id TextAppearance.withTextAlignment(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(a2 + 32) = v4;
  return v3;
}

id TextAppearance.withLineSpacing(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = a1;
  return v3;
}

id TextAppearance.font.getter()
{
  id *v0;

  return *v0;
}

void TextAppearance.font.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

double (*TextAppearance.font.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.textAlignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TextAppearance.textAlignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

double (*TextAppearance.textAlignment.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.lineBreakMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TextAppearance.lineBreakMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

double (*TextAppearance.lineBreakMode.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.numberOfLines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t TextAppearance.numberOfLines.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

double (*TextAppearance.numberOfLines.modify())(void)
{
  return nullsub_1;
}

uint64_t TextAppearance.lineSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t TextAppearance.lineSpacing.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

double (*TextAppearance.lineSpacing.modify())(void)
{
  return nullsub_1;
}

BOOL _s5JetUI14TextAppearanceV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL8 result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  sub_1AC690E70();
  v10 = sub_1AC7266A0();
  result = 0;
  if ((v10 & 1) != 0 && v2 == v6)
    return v3 == v7 && v4 == v8 && v5 == v9;
  return result;
}

uint64_t assignWithCopy for TextAppearance(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TextAppearance(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextAppearance(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextAppearance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Models.Video.Behavior.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Models.Video.Behavior.allowAutoPlay.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Models.Video.Behavior.loop.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Models.Video.Behavior.allowFullScreen.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t Models.Video.Behavior.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Models.Video.Behavior.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t);
  char v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v6 = sub_1AC725C74();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v22 - v14;
  sub_1AC725C80();
  v16 = sub_1AC725C38();
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v15, v6);
  LODWORD(v15) = v16 & 1;
  sub_1AC725C80();
  v18 = sub_1AC725C38();
  v17(v12, v6);
  LODWORD(v15) = v15 & 0xFFFFFFFD | (2 * (v18 & 1));
  sub_1AC725C80();
  v19 = sub_1AC725C38();
  v17(v9, v6);
  v20 = sub_1AC725D58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a2, v20);
  result = ((uint64_t (*)(uint64_t, uint64_t))v17)(a1, v6);
  *a3 = v15 & 0xFFFFFFFB | (4 * (v19 & 1));
  return result;
}

uint64_t sub_1AC6CEAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Models.Video.Behavior.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.Video.init(videoURL:preview:behavior:playbackControls:autoPlayPlaybackControls:templateMediaEvent:templateClickEvent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v52 = a6;
  v53 = a7;
  v50 = a1;
  v14 = sub_1AC725920();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  v18 = a2[1];
  v19 = a2[2];
  v20 = a2[3];
  v21 = *((_OWORD *)a2 + 2);
  v44 = *((_OWORD *)a2 + 3);
  v45 = v21;
  v43 = *((_OWORD *)a2 + 4);
  v22 = a2[10];
  v23 = *((_BYTE *)a2 + 88);
  LOBYTE(a2) = *((_BYTE *)a2 + 89);
  v24 = *a3;
  v25 = *a4;
  v46 = v17;
  v47 = v25;
  v49 = *a5;
  v48 = *((unsigned __int8 *)a5 + 8);
  v26 = sub_1AC7258B4();
  v51 = *(_QWORD *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(a8, a1, v26);
  v27 = (int *)type metadata accessor for Models.Video();
  v28 = a8 + v27[5];
  *(_QWORD *)v28 = v46;
  *(_QWORD *)(v28 + 8) = v18;
  *(_QWORD *)(v28 + 16) = v19;
  *(_QWORD *)(v28 + 24) = v20;
  v29 = v44;
  *(_OWORD *)(v28 + 32) = v45;
  *(_OWORD *)(v28 + 48) = v29;
  *(_OWORD *)(v28 + 64) = v43;
  *(_QWORD *)(v28 + 80) = v22;
  *(_BYTE *)(v28 + 88) = v23;
  *(_BYTE *)(v28 + 89) = (_BYTE)a2;
  *(_QWORD *)(a8 + v27[6]) = v24;
  *(_QWORD *)(a8 + v27[7]) = v47;
  v30 = a8 + v27[8];
  *(_QWORD *)v30 = v49;
  *(_BYTE *)(v30 + 8) = v48;
  v31 = a8 + v27[9];
  v32 = sub_1AC725D7C();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v35 = v52;
  v34(v31, v52, v32);
  v36 = v53;
  v34(a8 + v27[10], v53, v32);
  sub_1AC725914();
  v37 = sub_1AC725908();
  v39 = v38;
  v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v40(v36, v32);
  v40(v35, v32);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v26);
  result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v16, v55);
  v42 = (uint64_t *)(a8 + v27[11]);
  *v42 = v37;
  v42[1] = v39;
  return result;
}

uint64_t type metadata accessor for Models.Video()
{
  uint64_t result;

  result = qword_1EEC8B100;
  if (!qword_1EEC8B100)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Models.Video.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, char *, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  uint64_t v151;

  v136 = a2;
  v114 = a3;
  v113 = sub_1AC725920();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113);
  v111 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for Models.Video();
  MEMORY[0x1E0C80A78](v132);
  v110 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_1AC725D7C();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v117 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v122 = (char *)&v98 - v8;
  v9 = sub_1AC725D58();
  v10 = *(_QWORD *)(v9 - 8);
  v134 = v9;
  v135 = v10;
  MEMORY[0x1E0C80A78](v9);
  v116 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v121 = (char *)&v98 - v13;
  MEMORY[0x1E0C80A78](v14);
  v124 = (char *)&v98 - v15;
  MEMORY[0x1E0C80A78](v16);
  v130 = (char *)&v98 - v17;
  MEMORY[0x1E0C80A78](v18);
  v128 = (char *)&v98 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B038);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1AC725C74();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v115 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v120 = (char *)&v98 - v27;
  MEMORY[0x1E0C80A78](v28);
  v123 = (char *)&v98 - v29;
  MEMORY[0x1E0C80A78](v30);
  v129 = (void (*)(char *, char *, uint64_t))((char *)&v98 - v31);
  MEMORY[0x1E0C80A78](v32);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v98 - v34;
  v36 = sub_1AC7258B4();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v133 = (char *)&v98 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v41 = (char *)&v98 - v40;
  v137 = a1;
  sub_1AC725C80();
  sub_1AC725C2C();
  v42 = v37;
  v43 = *(void (**)(char *, uint64_t))(v24 + 8);
  v43(v35, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v22, 1, v36) == 1)
  {
    sub_1AC6CF920((uint64_t)v22);
    v44 = sub_1AC726118();
    sub_1AC688D20((unint64_t *)&qword_1EEC8A9B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D41500], MEMORY[0x1E0D41508]);
    swift_allocError();
    *v45 = 0x4C52556F65646976;
    v46 = v132;
    v45[1] = 0xE800000000000000;
    v45[2] = v46;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v45, *MEMORY[0x1E0D414E8], v44);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v134);
    return ((uint64_t (*)(uint64_t, uint64_t))v43)(v137, v23);
  }
  else
  {
    v108 = v23;
    v126 = v42;
    v48 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v127 = v41;
    v125 = v36;
    v48(v41, v22, v36);
    v49 = v134;
    sub_1AC725C80();
    v50 = v136;
    v51 = v128;
    v109 = *(void (**)(char *, uint64_t, uint64_t))(v135 + 16);
    v109(v128, v136, v49);
    sub_1AC6CF960();
    v52 = (uint64_t *)&v138;
    sub_1AC725ED8();
    if (v139 == 1)
    {
      if (qword_1EEC8A220 != -1)
        swift_once();
      v52 = &qword_1EEC8B3A0;
    }
    v107 = (void (*)(uint64_t, uint64_t))v43;
    v53 = (char *)*v52;
    sub_1AC725C80();
    v54 = v49;
    v55 = v109;
    v109(v51, v50, v49);
    sub_1AC725ED8();
    v56 = v138;
    v128 = v53;
    if ((_BYTE)v139)
      v56 = v53;
    v106 = v56;
    v57 = v50;
    v58 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
    v59 = v133;
    v60 = v125;
    v58(v133, v127, v125);
    v61 = v129;
    v62 = v54;
    sub_1AC725C80();
    v63 = (uint64_t)v130;
    v64 = v54;
    v65 = v55;
    v55(v130, v57, v64);
    v66 = v131;
    Models.Artwork.init(deserializing:using:)(v61, v63, &v138);
    if (v66)
    {
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v62);
      v107(v137, v108);
      v67 = *(void (**)(char *, uint64_t))(v126 + 8);
      v67(v59, v60);
      return ((uint64_t (*)(char *, uint64_t))v67)(v127, v60);
    }
    else
    {
      v129 = v58;
      v105 = v138;
      v130 = v139;
      v68 = v140;
      v69 = v141;
      v104 = v142;
      v131 = v143;
      v70 = v145;
      v103 = v144;
      v71 = v147;
      v102 = v146;
      v101 = v148;
      v100 = v149;
      v72 = v150;
      v73 = (uint64_t)v123;
      sub_1AC725C80();
      v74 = (uint64_t)v124;
      v65(v124, v136, v62);
      Models.Video.Behavior.init(deserializing:using:)(v73, v74, &v151);
      v99 = v72;
      v123 = v71;
      v124 = v70;
      v75 = v151;
      sub_1AC725C80();
      v76 = v136;
      v65(v121, v136, v62);
      sub_1AC725D70();
      sub_1AC725C80();
      v65(v116, v76, v62);
      v77 = v117;
      sub_1AC725D70();
      v78 = v124;
      v79 = v123;
      v80 = (uint64_t)v110;
      v129(v110, v133, v125);
      v81 = (int *)v132;
      v82 = v80 + *(int *)(v132 + 20);
      v83 = v130;
      *(_QWORD *)v82 = v105;
      *(_QWORD *)(v82 + 8) = v83;
      *(_QWORD *)(v82 + 16) = v68;
      *(_QWORD *)(v82 + 24) = v69;
      v84 = v131;
      *(_QWORD *)(v82 + 32) = v104;
      *(_QWORD *)(v82 + 40) = v84;
      *(_QWORD *)(v82 + 48) = v103;
      *(_QWORD *)(v82 + 56) = v78;
      *(_QWORD *)(v82 + 64) = v102;
      *(_QWORD *)(v82 + 72) = v79;
      *(_QWORD *)(v82 + 80) = v101;
      *(_BYTE *)(v82 + 88) = v100;
      *(_BYTE *)(v82 + 89) = v99;
      *(_QWORD *)(v80 + v81[6]) = v75;
      *(_QWORD *)(v80 + v81[7]) = v128;
      v85 = v80 + v81[8];
      *(_QWORD *)v85 = v106;
      *(_BYTE *)(v85 + 8) = 0;
      v86 = v118;
      v87 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 16);
      v88 = v122;
      v89 = v119;
      v87(v80 + v81[9], v122, v119);
      v87(v80 + v81[10], v77, v89);
      v90 = v77;
      v91 = v111;
      sub_1AC725914();
      v131 = sub_1AC725908();
      v130 = v92;
      v93 = *(void (**)(char *, uint64_t))(v86 + 8);
      v93(v90, v89);
      v93(v88, v89);
      v94 = *(void (**)(char *, uint64_t))(v126 + 8);
      v95 = v125;
      v94(v133, v125);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v91, v113);
      v96 = (uint64_t *)(v80 + v81[11]);
      v97 = v130;
      *v96 = v131;
      v96[1] = (uint64_t)v97;
      sub_1AC6D0C74(v80, v114);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v62);
      v107(v137, v108);
      return ((uint64_t (*)(char *, uint64_t))v94)(v127, v95);
    }
  }
}

uint64_t sub_1AC6CF920(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AC6CF960()
{
  unint64_t result;

  result = qword_1EEC8B040;
  if (!qword_1EEC8B040)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B040);
  }
  return result;
}

uint64_t Models.Video.videoURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AC7258B4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Models.Video.preview.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 20);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(_QWORD *)(v3 + 72);
  v11 = *(_QWORD *)(v3 + 80);
  v12 = *(_BYTE *)(v3 + 88);
  v13 = *(_BYTE *)(v3 + 89);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 89) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Models.Video.behavior.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Models.Video();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t Models.Video.playbackControls.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Models.Video();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t Models.Video.autoPlayPlaybackControls.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for Models.Video();
  v4 = (uint64_t *)(v1 + *(int *)(result + 32));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t Models.Video.templateMediaEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 36);
  v4 = sub_1AC725D7C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Models.Video.templateClickEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Models.Video() + 40);
  v4 = sub_1AC725D7C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Models.Video.playbackID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Models.Video() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1AC6CFBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Models.Video.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.Video.Behavior.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;

  v5 = sub_1AC725D58();
  v24 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - v9;
  v23 = sub_1AC725C74();
  v26 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - v14;
  sub_1AC68E218((uint64_t)a1, (uint64_t)v25);
  sub_1AC725C44();
  if (!v2)
  {
    v21 = a2;
    v22 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v16 = v22;
    sub_1AC726B44();
    sub_1AC725D4C();
    v17 = v23;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v12, v15, v23);
    v18 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v7, v10, v16);
    Models.Video.Behavior.init(deserializing:using:)((uint64_t)v12, (uint64_t)v7, v25);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v17);
    *v21 = v25[0];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Models.Video.Behavior.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v7[24];
  uint64_t v8;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC726B5C();
  sub_1AC6A9420(MEMORY[0x1E0DEE9D8]);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_3;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1AC69EACC(1, 1886351212, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if ((v2 & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_1AC69EACC(1, 0x747541776F6C6C61, 0xED000079616C506FLL, v5);
  swift_bridgeObjectRelease();
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v2 & 4) != 0)
  {
LABEL_4:
    v3 = swift_isUniquelyReferenced_nonNull_native();
    sub_1AC69EACC(1, 0x6C7546776F6C6C61, 0xEF6E65657263536CLL, v3);
    swift_bridgeObjectRelease();
  }
LABEL_5:
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B048);
  sub_1AC6D0CE0();
  sub_1AC726A90();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t sub_1AC6CFF8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC6CFFC0
                                                            + 4 * asc_1AC72C538[a1]))(0x4C52556F65646976, 0xE800000000000000);
}

unint64_t sub_1AC6CFFC0()
{
  return 0xD000000000000010;
}

uint64_t sub_1AC6CFFF8()
{
  return 0x77656976657270;
}

uint64_t sub_1AC6D0010()
{
  return 0x726F697661686562;
}

unint64_t sub_1AC6D0024()
{
  return 0xD000000000000012;
}

uint64_t sub_1AC6D004C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Models.Video.Behavior.init(from:)(a1, a2);
}

uint64_t sub_1AC6D0060(_QWORD *a1)
{
  return Models.Video.Behavior.encode(to:)(a1);
}

uint64_t sub_1AC6D0074()
{
  unsigned __int8 *v0;

  return sub_1AC6CFF8C(*v0);
}

uint64_t sub_1AC6D007C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6D1BF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AC6D00A0()
{
  sub_1AC6D0D44();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6D00C8()
{
  sub_1AC6D0D44();
  return sub_1AC726BBC();
}

uint64_t Models.Video.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void (**v49)(char *, char *, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;

  v72 = a2;
  v71 = sub_1AC725920();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Models.Video();
  MEMORY[0x1E0C80A78](v68);
  v67 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_1AC725D7C();
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v74 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v76 = (char *)&v51 - v7;
  v77 = sub_1AC7258B4();
  v8 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v51 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B058);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v79 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1AC6D0D44();
  v19 = v78;
  sub_1AC726B50();
  if (!v19)
  {
    v66 = v10;
    v78 = v8;
    v20 = v15;
    LOBYTE(v81) = 0;
    sub_1AC688D20(&qword_1EEC8B068, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    sub_1AC7269D0();
    v21 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B070);
    LOBYTE(v94) = 1;
    sub_1AC6B04E8(&qword_1EEC8B078, &qword_1EEC8B070, sub_1AC6D0D88, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    if ((BYTE1(v82) & 1) != 0 || (v82 & 1) != 0)
    {
      if (qword_1EEC8A220 != -1)
        swift_once();
      v23 = qword_1EEC8B3A0;
    }
    else
    {
      v23 = v81;
    }
    LOBYTE(v94) = 2;
    sub_1AC7269A0();
    v65 = v23;
    if ((BYTE1(v82) & 1) != 0)
    {
      v64 = v23;
    }
    else
    {
      if ((v82 & 1) != 0)
        v24 = v23;
      else
        v24 = v81;
      v64 = v24;
    }
    v63 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
    v63(v66, v13, v77);
    LOBYTE(v94) = 3;
    sub_1AC6D0DF0();
    sub_1AC7269D0();
    v61 = v81;
    v62 = v82;
    v25 = v83;
    v26 = v84;
    v27 = v86;
    v60 = v85;
    v28 = v88;
    v59 = v87;
    v29 = v90;
    v58 = v89;
    v57 = v91;
    v56 = v92;
    v55 = v93;
    v80 = 4;
    sub_1AC6D0E34();
    sub_1AC7269D0();
    v52 = v29;
    v53 = v28;
    v54 = v27;
    v51 = v94;
    v80 = 5;
    sub_1AC688D20(&qword_1EEC8B0A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3F700], MEMORY[0x1E0D3F718]);
    v30 = v75;
    v31 = v76;
    sub_1AC7269D0();
    v80 = 6;
    sub_1AC7269D0();
    v32 = (uint64_t)v67;
    v63(v67, v66, v77);
    v33 = v31;
    v34 = (int *)v68;
    v35 = v32 + *(int *)(v68 + 20);
    v36 = v62;
    *(_QWORD *)v35 = v61;
    *(_QWORD *)(v35 + 8) = v36;
    *(_QWORD *)(v35 + 16) = v25;
    *(_QWORD *)(v35 + 24) = v26;
    v37 = v54;
    *(_QWORD *)(v35 + 32) = v60;
    *(_QWORD *)(v35 + 40) = v37;
    v38 = v53;
    *(_QWORD *)(v35 + 48) = v59;
    *(_QWORD *)(v35 + 56) = v38;
    v39 = v52;
    *(_QWORD *)(v35 + 64) = v58;
    *(_QWORD *)(v35 + 72) = v39;
    *(_QWORD *)(v35 + 80) = v57;
    *(_BYTE *)(v35 + 88) = v56;
    *(_BYTE *)(v35 + 89) = v55;
    *(_QWORD *)(v32 + v34[6]) = v51;
    *(_QWORD *)(v32 + v34[7]) = v65;
    v40 = v32 + v34[8];
    *(_QWORD *)v40 = v64;
    *(_BYTE *)(v40 + 8) = 0;
    v41 = v32 + v34[9];
    v65 = v14;
    v42 = *(void (**)(uint64_t, char *, uint64_t))(v73 + 16);
    v42(v41, v33, v30);
    v43 = v74;
    v42(v32 + v34[10], v74, v30);
    v44 = v69;
    sub_1AC725914();
    v63 = (void (*)(char *, char *, uint64_t))sub_1AC725908();
    v62 = v45;
    v64 = (uint64_t)v21;
    v46 = *(void (**)(char *, uint64_t))(v73 + 8);
    v46(v43, v30);
    v46(v76, v30);
    v47 = v77;
    v48 = *(void (**)(char *, uint64_t))(v78 + 8);
    v48(v66, v77);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v44, v71);
    v49 = (void (**)(char *, char *, uint64_t))(v32 + v34[11]);
    v50 = v62;
    *v49 = v63;
    v49[1] = v50;
    sub_1AC6D0C74(v32, v72);
    v48((char *)v64, v47);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v65);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
}

uint64_t Models.Video.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B0B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6D0D44();
  sub_1AC726B68();
  LOBYTE(v21) = 0;
  sub_1AC7258B4();
  sub_1AC688D20(&qword_1EEC8B0B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  sub_1AC726A18();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for Models.Video();
    v21 = *(_QWORD *)(v3 + v9[7]);
    v30 = 1;
    sub_1AC6D0E78();
    sub_1AC726A18();
    v10 = (uint64_t *)(v3 + v9[8]);
    v11 = *v10;
    LOBYTE(v10) = *((_BYTE *)v10 + 8);
    v21 = v11;
    LOBYTE(v22) = (_BYTE)v10;
    v30 = 2;
    sub_1AC7269E8();
    v12 = (uint64_t *)(v3 + v9[5]);
    v13 = v12[1];
    v14 = *((_OWORD *)v12 + 3);
    v15 = *((_OWORD *)v12 + 4);
    v16 = v12[10];
    v17 = *((_BYTE *)v12 + 88);
    v18 = *((_BYTE *)v12 + 89);
    v21 = *v12;
    v22 = v13;
    v19 = *((_OWORD *)v12 + 2);
    v23 = *((_OWORD *)v12 + 1);
    v24 = v19;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = 3;
    sub_1AC6D0EBC();
    sub_1AC726A18();
    v21 = *(_QWORD *)(v3 + v9[6]);
    v30 = 4;
    sub_1AC6D0F00();
    sub_1AC726A18();
    LOBYTE(v21) = 5;
    sub_1AC725D7C();
    sub_1AC688D20(&qword_1EEC8B0D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3F700], MEMORY[0x1E0D3F710]);
    sub_1AC726A18();
    LOBYTE(v21) = 6;
    sub_1AC726A18();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1AC6D0C4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.Video.init(from:)(a1, a2);
}

uint64_t sub_1AC6D0C60(_QWORD *a1)
{
  return Models.Video.encode(to:)(a1);
}

uint64_t sub_1AC6D0C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Models.Video();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1AC6D0CE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEC8B050;
  if (!qword_1EEC8B050)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8B048);
    v2[0] = MEMORY[0x1E0DEA970];
    v2[1] = MEMORY[0x1E0DEAFA8];
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEC8B050);
  }
  return result;
}

unint64_t sub_1AC6D0D44()
{
  unint64_t result;

  result = qword_1EEC8B060;
  if (!qword_1EEC8B060)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72C944, &_s5VideoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B060);
  }
  return result;
}

uint64_t sub_1AC6D0D88()
{
  return sub_1AC6B04E8(&qword_1EEC8B080, &qword_1EEC8B088, (uint64_t (*)(void))sub_1AC6D0DAC, MEMORY[0x1E0D41770]);
}

unint64_t sub_1AC6D0DAC()
{
  unint64_t result;

  result = qword_1EEC8B090;
  if (!qword_1EEC8B090)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B090);
  }
  return result;
}

unint64_t sub_1AC6D0DF0()
{
  unint64_t result;

  result = qword_1EEC8B098;
  if (!qword_1EEC8B098)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork, &type metadata for Models.Artwork);
    atomic_store(result, (unint64_t *)&qword_1EEC8B098);
  }
  return result;
}

unint64_t sub_1AC6D0E34()
{
  unint64_t result;

  result = qword_1EEC8B0A0;
  if (!qword_1EEC8B0A0)
  {
    result = MEMORY[0x1AF440830]("](M9ġ", &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0A0);
  }
  return result;
}

unint64_t sub_1AC6D0E78()
{
  unint64_t result;

  result = qword_1EEC8B0C0;
  if (!qword_1EEC8B0C0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0C0);
  }
  return result;
}

unint64_t sub_1AC6D0EBC()
{
  unint64_t result;

  result = qword_1EEC8B0C8;
  if (!qword_1EEC8B0C8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Artwork, &type metadata for Models.Artwork);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0C8);
  }
  return result;
}

unint64_t sub_1AC6D0F00()
{
  unint64_t result;

  result = qword_1EEC8B0D0;
  if (!qword_1EEC8B0D0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Video.Behavior, &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0D0);
  }
  return result;
}

unint64_t sub_1AC6D0F48()
{
  unint64_t result;

  result = qword_1EEC8B0E0;
  if (!qword_1EEC8B0E0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Video.Behavior, &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0E0);
  }
  return result;
}

unint64_t sub_1AC6D0F90()
{
  unint64_t result;

  result = qword_1EEC8B0E8;
  if (!qword_1EEC8B0E8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Video.Behavior, &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0E8);
  }
  return result;
}

unint64_t sub_1AC6D0FD8()
{
  unint64_t result;

  result = qword_1EEC8B0F0;
  if (!qword_1EEC8B0F0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Video.Behavior, &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0F0);
  }
  return result;
}

unint64_t sub_1AC6D1020()
{
  unint64_t result;

  result = qword_1EEC8B0F8;
  if (!qword_1EEC8B0F8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.Video.Behavior, &type metadata for Models.Video.Behavior);
    atomic_store(result, (unint64_t *)&qword_1EEC8B0F8);
  }
  return result;
}

char *_s5VideoVwCP(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AC7258B4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = &a1[v8];
    v11 = &a2[v8];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
    v13 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 5) = v13;
    v14 = *((_QWORD *)v11 + 7);
    *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
    *((_QWORD *)v10 + 7) = v14;
    v15 = *((_QWORD *)v11 + 10);
    *((_QWORD *)v10 + 9) = *((_QWORD *)v11 + 9);
    *((_QWORD *)v10 + 10) = v15;
    *((_QWORD *)v10 + 8) = *((_QWORD *)v11 + 8);
    *((_WORD *)v10 + 44) = *((_WORD *)v11 + 44);
    *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
    v16 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v17[8] = v18[8];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = a3[9];
    v20 = &a1[v19];
    v29 = &a2[v19];
    v21 = sub_1AC725D7C();
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v20, v29, v21);
    v22(&a1[a3[10]], &a2[a3[10]], v21);
    v23 = a3[11];
    v24 = &a1[v23];
    v25 = &a2[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s5VideoVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v4 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 36);
  v6 = sub_1AC725D7C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + *(int *)(a2 + 40), v6);
  return swift_bridgeObjectRelease();
}

uint64_t _s5VideoVwcp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = v11;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = v13;
  v14 = *(_QWORD *)(v10 + 80);
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v9 + 80) = v14;
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
  *(_WORD *)(v9 + 88) = *(_WORD *)(v10 + 88);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = a3[9];
  v19 = a1 + v18;
  v27 = a2 + v18;
  v20 = sub_1AC725D7C();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v27, v20);
  v21(a1 + a3[10], a2 + a3[10], v20);
  v22 = a3[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5VideoVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 80);
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(v9 + 88);
  *(_QWORD *)(v8 + 80) = v10;
  *(_BYTE *)(v8 + 89) = *(_BYTE *)(v9 + 89);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  *(_BYTE *)(v12 + 8) = *((_BYTE *)v13 + 8);
  *(_QWORD *)v12 = v14;
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1AC725D7C();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24);
  v19(v16, v17, v18);
  v19(a1 + a3[10], a2 + a3[10], v18);
  v20 = a3[11];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VideoVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[3];
  v9[2] = v10[2];
  v9[3] = v11;
  v9[4] = v10[4];
  *(_OWORD *)((char *)v9 + 74) = *(_OWORD *)((char *)v10 + 74);
  v12 = v10[1];
  *v9 = *v10;
  v9[1] = v12;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1AC725D7C();
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v20(a1 + a3[10], a2 + a3[10], v19);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t _s5VideoVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(v9 + 88);
  *(_BYTE *)(v8 + 89) = *(_BYTE *)(v9 + 89);
  v14 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[8];
  v16 = a3[9];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a1 + v16;
  v20 = a2 + v16;
  v21 = sub_1AC725D7C();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40);
  v22(v19, v20, v21);
  v22(a1 + a3[10], a2 + a3[10], v21);
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5VideoVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6D182C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_1AC7258B4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1AC725D7C();
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t _s5VideoVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6D18E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1AC7258B4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1AC725D7C();
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1AC6D198C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1AC7258B4();
  if (v1 <= 0x3F)
  {
    result = sub_1AC725D7C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.Video.Behavior()
{
  return &type metadata for Models.Video.Behavior;
}

uint64_t _s5VideoV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1AC6D1A9C + 4 * byte_1AC72C544[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1AC6D1AD0 + 4 * byte_1AC72C53F[v4]))();
}

uint64_t sub_1AC6D1AD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D1AD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6D1AE0);
  return result;
}

uint64_t sub_1AC6D1AEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6D1AF4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1AC6D1AF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D1B00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s5VideoV10CodingKeysOMa()
{
  return &_s5VideoV10CodingKeysON;
}

unint64_t sub_1AC6D1B20()
{
  unint64_t result;

  result = qword_1EEC8B110;
  if (!qword_1EEC8B110)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72C91C, &_s5VideoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B110);
  }
  return result;
}

unint64_t sub_1AC6D1B68()
{
  unint64_t result;

  result = qword_1EEC8B118;
  if (!qword_1EEC8B118)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72C88C, &_s5VideoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B118);
  }
  return result;
}

unint64_t sub_1AC6D1BB0()
{
  unint64_t result;

  result = qword_1EEC8B120;
  if (!qword_1EEC8B120)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72C8B4, &_s5VideoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B120);
  }
  return result;
}

uint64_t sub_1AC6D1BF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C52556F65646976 && a2 == 0xE800000000000000;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001AC731280 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001AC7312A0 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x77656976657270 && a2 == 0xE700000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001AC7312C0 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001AC7312E0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t dispatch thunk of _TestableLayout._eraseToAnyForTesting(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for AppStore()
{
  return &type metadata for AppStore;
}

uint64_t Models.TitledParagraph.Style.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static Models.TitledParagraph.Style.allCases.getter()
{
  return &unk_1E5BFB570;
}

uint64_t Models.TitledParagraph.Style.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6961746564;
  else
    return 0x776569767265766FLL;
}

uint64_t sub_1AC6D1F70(char *a1, char *a2)
{
  return sub_1AC70B610(*a1, *a2);
}

uint64_t sub_1AC6D1F7C()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6D1FF8()
{
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6D2050()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6D20C8@<X0>(char *a1@<X8>)
{
  return Models.TitledParagraph.Style.init(rawValue:)(a1);
}

void sub_1AC6D20D4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x776569767265766FLL;
  if (*v1)
    v2 = 0x6C6961746564;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1AC6D2110(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5BFB678;
}

uint64_t Models.TitledParagraph.init(text:style:primarySubtitle:secondarySubtitle:isCollapsed:wantsCollapsedNewlines:impressionMetrics:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  char v42;

  v12 = *a1;
  v13 = a1[1];
  v14 = *((_BYTE *)a1 + 16);
  v38 = a3[1];
  v39 = *a3;
  v36 = *a2;
  v37 = *((_BYTE *)a3 + 16);
  v15 = *a4;
  v16 = a4[1];
  v40 = *((_BYTE *)a4 + 16);
  v17 = (int *)type metadata accessor for Models.TitledParagraph();
  v18 = a8 + v17[5];
  *(_QWORD *)v18 = v12;
  *(_QWORD *)(v18 + 8) = v13;
  *(_BYTE *)(v18 + 16) = v14;
  v41[0] = v12;
  v41[1] = v13;
  v42 = v14;
  v19 = sub_1AC6C0CD4((uint64_t)v41);
  v20 = v19;
  *(_QWORD *)(a8 + v17[6]) = v19;
  if ((a6 & 1) != 0)
  {
    v21 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v22 = v20;
    v23 = objc_msgSend(v21, sel_initWithAttributedString_, v22);
    v34 = objc_msgSend(v23, sel_length);
    v24 = objc_msgSend(v23, sel_mutableString);
    v35 = v15;
    v25 = a5;
    v26 = a7;
    v27 = (void *)sub_1AC726208();
    v28 = v16;
    v29 = (void *)sub_1AC726208();
    objc_msgSend(v24, sel_replaceOccurrencesOfString_withString_options_range_, v27, v29, 1024, 0, v34);

    a7 = v26;
    a5 = v25;
    v15 = v35;

    v16 = v28;
    *(_QWORD *)(a8 + v17[7]) = v23;
  }
  else
  {
    *(_QWORD *)(a8 + v17[7]) = v19;
    v30 = v19;
  }
  *(_BYTE *)(a8 + v17[8]) = v36;
  v31 = a8 + v17[9];
  *(_QWORD *)v31 = v39;
  *(_QWORD *)(v31 + 8) = v38;
  *(_BYTE *)(v31 + 16) = v37;
  v32 = a8 + v17[10];
  *(_QWORD *)v32 = v15;
  *(_QWORD *)(v32 + 8) = v16;
  *(_BYTE *)(v32 + 16) = v40;
  *(_BYTE *)(a8 + v17[11]) = a5 & 1;
  return sub_1AC6C1178(a7, a8);
}

uint64_t type metadata accessor for Models.TitledParagraph()
{
  uint64_t result;

  result = qword_1EEC8B1A0;
  if (!qword_1EEC8B1A0)
    return swift_getSingletonMetadata();
  return result;
}

void Models.TitledParagraph.init(deserializing:using:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  void (*v105)(char *, uint64_t, uint64_t);
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  char v112;
  _QWORD v113[2];
  unsigned __int8 v114;
  _QWORD v115[2];
  unsigned __int8 v116;
  _QWORD v117[2];
  unsigned __int8 v118;
  int v119;
  unsigned __int8 v120;

  v110 = a2;
  v96 = a3;
  v100 = type metadata accessor for Models.TitledParagraph();
  MEMORY[0x1E0C80A78](v100);
  v99 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v5);
  v98 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AC725D58();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v97 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v101 = (char *)&v86 - v11;
  MEMORY[0x1E0C80A78](v12);
  v103 = (char *)&v86 - v13;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v86 - v15;
  v108 = sub_1AC725C74();
  v106 = *(void (**)(char *, uint64_t))(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v86 - v20;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v86 - v23;
  MEMORY[0x1E0C80A78](v25);
  v102 = (char *)&v86 - v26;
  MEMORY[0x1E0C80A78](v27);
  v104 = (char *)&v86 - v28;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v86 - v30;
  v32 = a1;
  sub_1AC725C80();
  v33 = v110;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v109 = v7;
  v105 = v34;
  v34(v16, v110, v7);
  v35 = v107;
  Models.ProgrammedText.init(deserializing:using:)((uint64_t)v31, (uint64_t)v16, v117);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v109);
    (*((void (**)(char *, uint64_t))v106 + 1))(v32, v108);
  }
  else
  {
    v92 = v24;
    v90 = v21;
    v91 = v18;
    v93 = v8;
    v94 = v117[0];
    v95 = v117[1];
    LODWORD(v107) = v118;
    v36 = v104;
    v37 = v32;
    sub_1AC725C80();
    sub_1AC6D36E8();
    sub_1AC725BFC();
    v38 = (void (*)(char *, uint64_t))*((_QWORD *)v106 + 1);
    v39 = v108;
    v38(v36, v108);
    v40 = v120;
    v41 = (uint64_t)v102;
    sub_1AC725C80();
    v42 = v109;
    v43 = (uint64_t)v103;
    v105(v103, v110, v109);
    Models.ProgrammedText.init(deserializing:using:)(v41, v43, v115);
    v44 = v37;
    v45 = v39;
    v106 = v38;
    v46 = v115[0];
    v102 = (char *)v115[1];
    LODWORD(v41) = v116;
    v47 = v44;
    v48 = (uint64_t)v92;
    v103 = v47;
    sub_1AC725C80();
    v49 = v110;
    v50 = (uint64_t)v101;
    v105(v101, v110, v42);
    Models.ProgrammedText.init(deserializing:using:)(v48, v50, v113);
    v89 = v46;
    LODWORD(v92) = v41;
    LODWORD(v101) = v40;
    v88 = v113[0];
    v87 = v113[1];
    v119 = v114;
    v51 = v90;
    v52 = v103;
    sub_1AC725C80();
    v53 = v45;
    LOBYTE(v45) = sub_1AC725C38();
    v54 = v51;
    v55 = v106;
    v106(v54, v53);
    LODWORD(v90) = v45 & 1;
    v56 = v91;
    sub_1AC725C80();
    LOBYTE(v46) = sub_1AC725C38();
    v55(v56, v53);
    sub_1AC725EF0();
    sub_1AC725C80();
    v105(v97, v49, v42);
    v57 = (uint64_t)v98;
    sub_1AC725ED8();
    v58 = (int *)v100;
    v59 = (uint64_t)v99;
    v60 = &v99[*(int *)(v100 + 20)];
    v61 = v94;
    v62 = v95;
    *(_QWORD *)v60 = v94;
    *((_QWORD *)v60 + 1) = v62;
    v63 = v107;
    v60[16] = v107;
    v111[0] = v61;
    v111[1] = v62;
    v112 = v63;
    v64 = sub_1AC6C0CD4((uint64_t)v111);
    v65 = v64;
    *(_QWORD *)(v59 + v58[6]) = v64;
    if ((v46 & 1) != 0)
    {
      v67 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
      v68 = v65;
      v69 = objc_msgSend(v67, sel_initWithAttributedString_, v68);
      v70 = objc_msgSend(v69, sel_length);
      v71 = objc_msgSend(v69, sel_mutableString);
      v72 = (void *)sub_1AC726208();
      v73 = (void *)sub_1AC726208();
      v74 = v70;
      v52 = v103;
      v58 = (int *)v100;
      objc_msgSend(v71, sel_replaceOccurrencesOfString_withString_options_range_, v72, v73, 1024, 0, v74);

      v59 = (uint64_t)v99;
      v57 = (uint64_t)v98;
      *(_QWORD *)(v59 + v58[7]) = v69;
    }
    else
    {
      *(_QWORD *)(v59 + v58[7]) = v64;
      v66 = v64;
    }
    v75 = v110;
    v76 = v96;
    v77 = v93;
    v78 = v102;
    v79 = v89;
    v80 = v88;
    v81 = v87;
    v82 = v119;
    v83 = (char)v90;
    *(_BYTE *)(v59 + v58[8]) = (_BYTE)v101;
    v84 = v59 + v58[9];
    *(_QWORD *)v84 = v79;
    *(_QWORD *)(v84 + 8) = v78;
    *(_BYTE *)(v84 + 16) = (_BYTE)v92;
    v85 = v59 + v58[10];
    *(_QWORD *)v85 = v80;
    *(_QWORD *)(v85 + 8) = v81;
    *(_BYTE *)(v85 + 16) = v82;
    *(_BYTE *)(v59 + v58[11]) = v83;
    sub_1AC6C1178(v57, v59);
    sub_1AC6D372C(v59, v76);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v109);
    v106(v52, v108);
  }
}

void sub_1AC6D2B80(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Models.TitledParagraph.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6C128C(v1, a1);
}

id Models.TitledParagraph.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 20);
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1AC68CEF8(v4, v5, v6);
}

id Models.TitledParagraph.attributedText.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 24));
}

id Models.TitledParagraph.collapsedAttributedText.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 28));
}

uint64_t Models.TitledParagraph.style.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Models.TitledParagraph();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

id Models.TitledParagraph.primarySubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 36);
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1AC6C2518(v4, v5, v6);
}

id Models.TitledParagraph.secondarySubtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + *(int *)(type metadata accessor for Models.TitledParagraph() + 40);
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1AC6C2518(v4, v5, v6);
}

uint64_t Models.TitledParagraph.isCollapsed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Models.TitledParagraph() + 44));
}

uint64_t Models.TitledParagraph.isCollapsed.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Models.TitledParagraph();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

double (*Models.TitledParagraph.isCollapsed.modify())(void)
{
  type metadata accessor for Models.TitledParagraph();
  return nullsub_1;
}

uint64_t sub_1AC6D2D2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AC6D2D58
                                                            + 4 * asc_1AC72C9C0[a1]))(1954047348, 0xE400000000000000);
}

uint64_t sub_1AC6D2D58()
{
  return 0x656C797473;
}

uint64_t sub_1AC6D2D6C()
{
  return 0x537972616D697270;
}

unint64_t sub_1AC6D2D90()
{
  return 0xD000000000000011;
}

void sub_1AC6D2DF8(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Models.TitledParagraph.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1AC6D2E0C()
{
  sub_1AC6D36E8();
  return sub_1AC72637C();
}

uint64_t sub_1AC6D2E68()
{
  unsigned __int8 *v0;

  return sub_1AC6D2D2C(*v0);
}

uint64_t sub_1AC6D2E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AC6D4808(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AC6D2E94()
{
  sub_1AC6D3770();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6D2EBC()
{
  sub_1AC6D3770();
  return sub_1AC726BBC();
}

uint64_t Models.TitledParagraph.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v35;
  _BOOL4 v36;
  unsigned __int8 v37;
  uint64_t v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  int *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _BOOL4 v67;
  int v68;
  void *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  unsigned __int8 v93;
  int v94;
  char v95;

  v87 = a2;
  v88 = type metadata accessor for Models.TitledParagraph();
  MEMORY[0x1E0C80A78](v88);
  v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v64 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B130);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v90 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1AC6D3770();
  v16 = (uint64_t)v89;
  sub_1AC726B50();
  if (!v16)
  {
    v85 = v4;
    v86 = v7;
    v89 = v10;
    v17 = v12;
    v95 = 0;
    sub_1AC6C1318();
    sub_1AC7269D0();
    v18 = v11;
    v20 = v91;
    v19 = v92;
    v21 = v93;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B140);
    v95 = 1;
    sub_1AC6B04E8(&qword_1EEC8B148, &qword_1EEC8B140, sub_1AC6D37B4, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    v94 = v21;
    v83 = v19;
    v84 = v20;
    LODWORD(v19) = v91;
    LODWORD(v20) = v91 != 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B168);
    v95 = 2;
    sub_1AC6B04E8(&qword_1EEC8B170, &qword_1EEC8B168, sub_1AC6D381C, MEMORY[0x1E0D3FB78]);
    sub_1AC7269A0();
    v77 = (int)v20;
    v78 = v19;
    v22 = v92;
    v23 = v93;
    v82 = v91;
    if (v93 == 254)
      v24 = 0;
    else
      v24 = v91;
    if (v93 == 254)
      v25 = 0;
    else
      v25 = v92;
    v80 = v25;
    v81 = v24;
    if (v93 == 254)
      v26 = -1;
    else
      v26 = v93;
    v79 = v26;
    v95 = 3;
    sub_1AC7269A0();
    v75 = v22;
    v76 = v23;
    v27 = v91;
    v28 = v92;
    v29 = v93;
    if (v93 == 254)
      v30 = 0;
    else
      v30 = v91;
    if (v93 == 254)
      v31 = 0;
    else
      v31 = v92;
    v72 = v31;
    v73 = v30;
    if (v93 == 254)
      v32 = -1;
    else
      v32 = v93;
    v71 = v32;
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AA78);
    v95 = 4;
    sub_1AC6B04E8((unint64_t *)&qword_1EEC8AA80, &qword_1EEC8AA78, (uint64_t (*)(void))sub_1AC6C142C, MEMORY[0x1E0D3FB78]);
    v74 = (id)v33;
    sub_1AC7269A0();
    v69 = v27;
    v70 = v28;
    v68 = v29;
    v35 = v91;
    v36 = (v91 & 0xFE) != 2;
    v95 = 5;
    sub_1AC7269A0();
    v37 = v76;
    v67 = v36;
    LODWORD(v74) = v91;
    sub_1AC725EF0();
    LOBYTE(v91) = 6;
    sub_1AC6D3854();
    v38 = (uint64_t)v89;
    sub_1AC7269A0();
    v39 = v84;
    v66 = v14;
    v65 = v18;
    v77 &= v78;
    v78 = v67 & v35;
    v40 = v74 & 0xFE;
    sub_1AC6C128C(v38, (uint64_t)v86);
    v41 = v88;
    v42 = (uint64_t)v85;
    v43 = &v85[*(int *)(v88 + 20)];
    v44 = v83;
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v44;
    v45 = v94;
    v43[16] = v94;
    v91 = v39;
    v92 = v44;
    v93 = v45;
    sub_1AC68CEF8(v39, v44, v45);
    sub_1AC6D389C(v82, v75, v37);
    v46 = v68;
    sub_1AC6D389C(v69, v70, v68);
    v47 = sub_1AC6C0CD4((uint64_t)&v91);
    v48 = v47;
    *(_QWORD *)(v42 + *(int *)(v41 + 24)) = v47;
    if (v40 == 2 || (v74 & 1) == 0)
    {
      v55 = (int *)v88;
      *(_QWORD *)(v42 + *(int *)(v88 + 28)) = v47;
      v56 = v47;
    }
    else
    {
      v49 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
      v50 = v48;
      v51 = objc_msgSend(v49, sel_initWithAttributedString_, v50);
      v74 = objc_msgSend(v51, sel_length);
      v52 = objc_msgSend(v51, sel_mutableString);
      v53 = (void *)sub_1AC726208();
      v54 = (void *)sub_1AC726208();
      objc_msgSend(v52, sel_replaceOccurrencesOfString_withString_options_range_, v53, v54, 1024, 0, v74);

      v55 = (int *)v88;
      *(_QWORD *)(v42 + *(int *)(v88 + 28)) = v51;
    }
    v57 = v87;
    v58 = v65;
    v59 = v66;
    *(_BYTE *)(v42 + v55[8]) = v77;
    v60 = v42 + v55[9];
    v61 = v80;
    *(_QWORD *)v60 = v81;
    *(_QWORD *)(v60 + 8) = v61;
    *(_BYTE *)(v60 + 16) = v79;
    v62 = v42 + v55[10];
    v63 = v72;
    *(_QWORD *)v62 = v73;
    *(_QWORD *)(v62 + 8) = v63;
    *(_BYTE *)(v62 + 16) = v71;
    *(_BYTE *)(v42 + v55[11]) = v78;
    sub_1AC6C1178((uint64_t)v86, v42);
    sub_1AC6D372C(v42, v57);
    sub_1AC6D3840(v69, v70, v46);
    sub_1AC6D3840(v82, v75, v76);
    sub_1AC68A814(v84, v83, v94);
    sub_1AC6C1488((uint64_t)v89);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v59, v58);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
}

uint64_t sub_1AC6D36D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.TitledParagraph.init(from:)(a1, a2);
}

unint64_t sub_1AC6D36E8()
{
  unint64_t result;

  result = qword_1EEC8B128;
  if (!qword_1EEC8B128)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.TitledParagraph.Style, &type metadata for Models.TitledParagraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8B128);
  }
  return result;
}

uint64_t sub_1AC6D372C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Models.TitledParagraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AC6D3770()
{
  unint64_t result;

  result = qword_1EEC8B138;
  if (!qword_1EEC8B138)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72CCD4, &_s15TitledParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B138);
  }
  return result;
}

uint64_t sub_1AC6D37B4()
{
  return sub_1AC6B04E8(&qword_1EEC8B150, &qword_1EEC8B158, (uint64_t (*)(void))sub_1AC6D37D8, MEMORY[0x1E0D41770]);
}

unint64_t sub_1AC6D37D8()
{
  unint64_t result;

  result = qword_1EEC8B160;
  if (!qword_1EEC8B160)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.TitledParagraph.Style, &type metadata for Models.TitledParagraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8B160);
  }
  return result;
}

uint64_t sub_1AC6D381C()
{
  return sub_1AC6B04E8(&qword_1EEC8B178, &qword_1EEC8B180, (uint64_t (*)(void))sub_1AC6C1318, MEMORY[0x1E0D41770]);
}

void sub_1AC6D3840(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254)
    sub_1AC6C2530(a1, a2, a3);
}

unint64_t sub_1AC6D3854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8AE30;
  if (!qword_1EEC8AE30)
  {
    v1 = sub_1AC725EF0();
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D40200], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8AE30);
  }
  return result;
}

id sub_1AC6D389C(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254)
    return sub_1AC6C2518(result, a2, a3);
  return result;
}

unint64_t sub_1AC6D38B4()
{
  unint64_t result;

  result = qword_1EEC8B188;
  if (!qword_1EEC8B188)
  {
    result = MEMORY[0x1AF440830]("]&M9ȟ", &type metadata for Models.TitledParagraph.Style);
    atomic_store(result, (unint64_t *)&qword_1EEC8B188);
  }
  return result;
}

unint64_t sub_1AC6D38FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8B190;
  if (!qword_1EEC8B190)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8B198);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8B190);
  }
  return result;
}

uint64_t *_s15TitledParagraphVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  id v25;
  id v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AC725EF0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(void **)v13;
    v15 = *((_QWORD *)v13 + 1);
    v16 = v13[16];
    sub_1AC68CEF8(*(void **)v13, v15, v16);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    v12[16] = v16;
    v17 = a3[6];
    v18 = a3[7];
    v19 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + v17) = (uint64_t)v19;
    v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = (uint64_t)v20;
    v21 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((unsigned __int8 *)a2 + v21 + 16);
    v25 = v19;
    v26 = v20;
    if (v24 == 255)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v22[16] = v23[16];
    }
    else
    {
      v27 = v24 & 1;
      v28 = *(void **)v23;
      v29 = *((_QWORD *)v23 + 1);
      sub_1AC68CEF8(v28, v29, v27);
      *(_QWORD *)v22 = v28;
      *((_QWORD *)v22 + 1) = v29;
      v22[16] = v27;
    }
    v30 = a3[10];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = v32[16];
    if (v33 == 255)
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
    }
    else
    {
      v34 = v33 & 1;
      v35 = *(_QWORD *)v32;
      v36 = *((_QWORD *)v32 + 1);
      sub_1AC68CEF8(*(void **)v32, v36, v33 & 1);
      *(_QWORD *)v31 = v35;
      *((_QWORD *)v31 + 1) = v36;
      v31[16] = v34;
    }
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return a1;
}

void _s15TitledParagraphVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v4 = sub_1AC725EF0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_1AC68A814(*(void **)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));

  v6 = a1 + a2[9];
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 != 255)
    sub_1AC68A814(*(void **)v6, *(_QWORD *)(v6 + 8), v7 & 1);
  v8 = a1 + a2[10];
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 255)
    sub_1AC68A814(*(void **)v8, *(_QWORD *)(v8 + 8), v9 & 1);
}

char *_s15TitledParagraphVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  id v23;
  id v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(void **)v11;
  v13 = *((_QWORD *)v11 + 1);
  v14 = v11[16];
  sub_1AC68CEF8(*(void **)v11, v13, v14);
  *(_QWORD *)v10 = v12;
  *((_QWORD *)v10 + 1) = v13;
  v10[16] = v14;
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)&a2[v15];
  *(_QWORD *)&a1[v15] = v17;
  v18 = *(void **)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  v19 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = a2[v19 + 16];
  v23 = v17;
  v24 = v18;
  if (v22 == 255)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
  }
  else
  {
    v25 = v22 & 1;
    v26 = *(void **)v21;
    v27 = *((_QWORD *)v21 + 1);
    sub_1AC68CEF8(v26, v27, v25);
    *(_QWORD *)v20 = v26;
    *((_QWORD *)v20 + 1) = v27;
    v20[16] = v25;
  }
  v28 = a3[10];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = v30[16];
  if (v31 == 255)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
  }
  else
  {
    v32 = v31 & 1;
    v33 = *(_QWORD *)v30;
    v34 = *((_QWORD *)v30 + 1);
    sub_1AC68CEF8(*(void **)v30, v34, v31 & 1);
    *(_QWORD *)v29 = v33;
    *((_QWORD *)v29 + 1) = v34;
    v29[16] = v32;
  }
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *_s15TitledParagraphVwca(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  char v34;
  __int128 v35;
  char v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  char v50;
  __int128 v51;
  char v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  char v58;
  void *v59;
  uint64_t v60;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void **)v14;
  v16 = *((_QWORD *)v14 + 1);
  v17 = v14[16];
  sub_1AC68CEF8(*(void **)v14, v16, v17);
  v18 = *(void **)v13;
  v19 = *((_QWORD *)v13 + 1);
  v20 = v13[16];
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = v16;
  v13[16] = v17;
  sub_1AC68A814(v18, v19, v20);
  v21 = a3[6];
  v22 = *(void **)&a2[v21];
  v23 = *(void **)&a1[v21];
  *(_QWORD *)&a1[v21] = v22;
  v24 = v22;

  v25 = a3[7];
  v26 = *(void **)&a2[v25];
  v27 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = v26;
  v28 = v26;

  a1[a3[8]] = a2[a3[8]];
  v29 = a3[9];
  v30 = (uint64_t)&a1[v29];
  v31 = &a2[v29];
  v32 = a1[v29 + 16];
  v33 = a2[v29 + 16];
  if (v32 == 255)
  {
    if (v33 == 255)
    {
      v35 = *(_OWORD *)v31;
      *(_BYTE *)(v30 + 16) = v31[16];
      *(_OWORD *)v30 = v35;
    }
    else
    {
      v42 = v33 & 1;
      v43 = *(void **)v31;
      v44 = *((_QWORD *)v31 + 1);
      sub_1AC68CEF8(v43, v44, v33 & 1);
      *(_QWORD *)v30 = v43;
      *(_QWORD *)(v30 + 8) = v44;
      *(_BYTE *)(v30 + 16) = v42;
    }
  }
  else if (v33 == 255)
  {
    sub_1AC6D4078(v30);
    v34 = v31[16];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *(_BYTE *)(v30 + 16) = v34;
  }
  else
  {
    v36 = v33 & 1;
    v37 = *(void **)v31;
    v38 = *((_QWORD *)v31 + 1);
    sub_1AC68CEF8(v37, v38, v33 & 1);
    v39 = *(void **)v30;
    v40 = *(_QWORD *)(v30 + 8);
    v41 = *(_BYTE *)(v30 + 16);
    *(_QWORD *)v30 = v37;
    *(_QWORD *)(v30 + 8) = v38;
    *(_BYTE *)(v30 + 16) = v36;
    sub_1AC68A814(v39, v40, v41);
  }
  v45 = a3[10];
  v46 = (uint64_t)&a1[v45];
  v47 = &a2[v45];
  v48 = a1[v45 + 16];
  v49 = a2[v45 + 16];
  if (v48 == 255)
  {
    if (v49 == 255)
    {
      v51 = *(_OWORD *)v47;
      *(_BYTE *)(v46 + 16) = v47[16];
      *(_OWORD *)v46 = v51;
    }
    else
    {
      v58 = v49 & 1;
      v59 = *(void **)v47;
      v60 = *((_QWORD *)v47 + 1);
      sub_1AC68CEF8(v59, v60, v49 & 1);
      *(_QWORD *)v46 = v59;
      *(_QWORD *)(v46 + 8) = v60;
      *(_BYTE *)(v46 + 16) = v58;
    }
  }
  else if (v49 == 255)
  {
    sub_1AC6D4078(v46);
    v50 = v47[16];
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *(_BYTE *)(v46 + 16) = v50;
  }
  else
  {
    v52 = v49 & 1;
    v53 = *(void **)v47;
    v54 = *((_QWORD *)v47 + 1);
    sub_1AC68CEF8(v53, v54, v49 & 1);
    v55 = *(void **)v46;
    v56 = *(_QWORD *)(v46 + 8);
    v57 = *(_BYTE *)(v46 + 16);
    *(_QWORD *)v46 = v53;
    *(_QWORD *)(v46 + 8) = v54;
    *(_BYTE *)(v46 + 16) = v52;
    sub_1AC68A814(v55, v56, v57);
  }
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t sub_1AC6D4078(uint64_t a1)
{
  _s14ProgrammedTextOwxx(a1);
  return a1;
}

char *_s15TitledParagraphVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  v14 = a3[9];
  v15 = a3[10];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v18 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)v16 = v18;
  v19 = &a1[v15];
  v20 = &a2[v15];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *_s15TitledParagraphVwta(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  void *v35;
  uint64_t v36;

  v6 = sub_1AC725EF0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[16];
  v16 = *(void **)v13;
  v17 = *((_QWORD *)v13 + 1);
  v18 = v13[16];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v15;
  sub_1AC68A814(v16, v17, v18);
  v19 = a3[6];
  v20 = *(void **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];

  v21 = a3[7];
  v22 = *(void **)&a1[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];

  v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v24 = (uint64_t)&a1[v23];
  v25 = &a2[v23];
  v26 = a1[v23 + 16];
  if (v26 == 255)
  {
LABEL_10:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *(_BYTE *)(v24 + 16) = v25[16];
    goto LABEL_12;
  }
  v27 = v25[16];
  if (v27 == 255)
  {
    sub_1AC6D4078(v24);
    goto LABEL_10;
  }
  v28 = *(void **)v24;
  v29 = *(_QWORD *)(v24 + 8);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = v27 & 1;
  sub_1AC68A814(v28, v29, v26 & 1);
LABEL_12:
  v30 = a3[10];
  v31 = (uint64_t)&a1[v30];
  v32 = &a2[v30];
  v33 = a1[v30 + 16];
  if (v33 != 255)
  {
    v34 = v32[16];
    if (v34 != 255)
    {
      v35 = *(void **)v31;
      v36 = *(_QWORD *)(v31 + 8);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *(_BYTE *)(v31 + 16) = v34 & 1;
      sub_1AC68A814(v35, v36, v33 & 1);
      goto LABEL_17;
    }
    sub_1AC6D4078(v31);
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_BYTE *)(v31 + 16) = v32[16];
LABEL_17:
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t _s15TitledParagraphVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6D43F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s15TitledParagraphVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6D4484(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8AB88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_1AC6D4500()
{
  unint64_t v0;

  sub_1AC6C1E50();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t _s15TitledParagraphV5StyleOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6D45E4 + 4 * byte_1AC72C9CC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6D4618 + 4 * byte_1AC72C9C7[v4]))();
}

uint64_t sub_1AC6D4618(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D4620(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6D4628);
  return result;
}

uint64_t sub_1AC6D4634(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6D463CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6D4640(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D4648(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Models.TitledParagraph.Style()
{
  return &type metadata for Models.TitledParagraph.Style;
}

uint64_t _s15TitledParagraphV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1AC6D46B0 + 4 * byte_1AC72C9D6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1AC6D46E4 + 4 * byte_1AC72C9D1[v4]))();
}

uint64_t sub_1AC6D46E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D46EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6D46F4);
  return result;
}

uint64_t sub_1AC6D4700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6D4708);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1AC6D470C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D4714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15TitledParagraphV10CodingKeysOMa()
{
  return &_s15TitledParagraphV10CodingKeysON;
}

unint64_t sub_1AC6D4734()
{
  unint64_t result;

  result = qword_1EEC8B1B0;
  if (!qword_1EEC8B1B0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72CCAC, &_s15TitledParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B1B0);
  }
  return result;
}

unint64_t sub_1AC6D477C()
{
  unint64_t result;

  result = qword_1EEC8B1B8;
  if (!qword_1EEC8B1B8)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72CC1C, &_s15TitledParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B1B8);
  }
  return result;
}

unint64_t sub_1AC6D47C4()
{
  unint64_t result;

  result = qword_1EEC8B1C0;
  if (!qword_1EEC8B1C0)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72CC44, &_s15TitledParagraphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B1C0);
  }
  return result;
}

uint64_t sub_1AC6D4808(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x537972616D697270 && a2 == 0xEF656C7469746275 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AC731300 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x70616C6C6F437369 && a2 == 0xEB00000000646573 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001AC730CB0 || (sub_1AC726A78() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AC730CD0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1AC726A78();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

JUMeasurements __swiftcall CustomLayout.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  JUMeasurements result;

  v4 = v3;
  v5 = v2;
  height = toFit.height;
  width = toFit.width;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v26 - v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 40))(v5, v4, v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (*(double (**)(Class, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 8))(with.super.isa, AssociatedTypeWitness, AssociatedConformanceWitness, width, height);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  v22 = v15;
  v23 = v17;
  v24 = v19;
  v25 = v21;
  result.var3 = v25;
  result.var2 = v24;
  result.var1 = v23;
  result.var0 = v22;
  return result;
}

Swift::Void __swiftcall CustomLayout.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  double y;
  double x;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v4 = v3;
  v5 = v2;
  height = at.size.height;
  width = at.size.width;
  y = at.origin.y;
  x = at.origin.x;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v17 - v14;
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 40))(v5, v4, v13);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(Class, uint64_t, uint64_t, double, double, double, double))(AssociatedConformanceWitness + 16))(with.super.isa, AssociatedTypeWitness, AssociatedConformanceWitness, x, y, width, height);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t CustomLayout._eraseToAnyForTesting(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15[2];
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 40))(a2, a3, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B1C8);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v15, (uint64_t)v17);
    v12 = v18;
    v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_1AC6D4F14((uint64_t)v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
    v17[0] = 0;
    v17[1] = 0xE000000000000000;
    sub_1AC726868();
    sub_1AC726A54();
    sub_1AC7262C8();
    result = sub_1AC726910();
    __break(1u);
  }
  return result;
}

uint64_t sub_1AC6D4F14(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B1D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of CustomLayout.layout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

double sub_1AC6D4F5C(double a1, double a2, double a3)
{
  return a2 * a3 + (1.0 - a3) * a1;
}

float sub_1AC6D4F74(float a1, float a2, double a3)
{
  float v3;
  float v4;

  v3 = 1.0 - a3;
  v4 = a3;
  return (float)(v4 * a2) + (float)(v3 * a1);
}

uint64_t static BinaryFloatingPoint<>.interpolateLinearly(between:and:forInput:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v17 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v17 - v13;
  sub_1AC726160();
  sub_1AC726568();
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, a4);
  *(double *)&v17[1] = a2;
  sub_1AC6D5120();
  sub_1AC72616C();
  sub_1AC726568();
  v15(v8, a4);
  sub_1AC72691C();
  v15(v11, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

unint64_t sub_1AC6D5120()
{
  unint64_t result;

  result = qword_1EEC8B1D8;
  if (!qword_1EEC8B1D8)
  {
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEF048], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEC8B1D8);
  }
  return result;
}

void sub_1AC6D5164(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  *a3 = sub_1AC6D4F74(*a1, *a2, a4);
}

void sub_1AC6D5194(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  *a3 = sub_1AC6D4F5C(*a1, *a2, a4);
}

double sub_1AC6D51C4@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  double v5;
  double v6;
  double result;

  v5 = *a2;
  v6 = (1.0 - a4) * *a1;
  result = v6 + v5 * nullsub_1();
  *a3 = result;
  return result;
}

id sub_1AC6D5254()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  return *v1;
}

void sub_1AC6D52F4(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id LanguageAwareTextStorage.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  char *v4;
  char *v5;
  id v6;
  id v7;
  int v8;
  id v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v4[OBJC_IVAR___JULanguageAwareTextStorage_textStorage] = a1;
  v5 = v4;
  v6 = a1;
  v7 = objc_msgSend(v6, sel_delegate);
  *(_QWORD *)&v5[OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate] = v7;
  swift_beginAccess();
  v8 = byte_1EEC8B791;
  objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
  v9 = v6;
  v10 = sub_1AC7143A8(v9, v8);

  *(_QWORD *)&v5[OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString] = v10;
  v13.receiver = v5;
  v13.super_class = v2;
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v9, sel_setDelegate_, v11);

  return v11;
}

id LanguageAwareTextStorage.init(_:)(void *a1)
{
  char *v1;
  void *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v2 = a1;
  *(_QWORD *)&v1[OBJC_IVAR___JULanguageAwareTextStorage_textStorage] = a1;
  v3 = v1;
  v4 = v2;
  v5 = objc_msgSend(v4, sel_delegate);
  *(_QWORD *)&v3[OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate] = v5;
  swift_beginAccess();
  LODWORD(v2) = byte_1EEC8B791;
  objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
  v6 = v4;
  v7 = sub_1AC7143A8(v6, (int)v2);

  *(_QWORD *)&v3[OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString] = v7;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for LanguageAwareTextStorage();
  v8 = objc_msgSendSuper2(&v10, sel_init);
  objc_msgSend(v6, sel_setDelegate_, v8);

  return v8;
}

id sub_1AC6D5598(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  id v11;

  v6 = *(void **)(v5 + OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate);
  if (v6)
  {
    v11 = result;
    result = objc_msgSend(v6, sel_respondsToSelector_, sel_textStorage_willProcessEditing_range_changeInLength_);
    if ((result & 1) != 0)
      return objc_msgSend(v6, sel_textStorage_willProcessEditing_range_changeInLength_, v11, a2, a3, a4, a5);
  }
  return result;
}

void sub_1AC6D56E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  int v12;
  id v13;
  id v14;
  void *v15;
  void *v16;

  v6 = v5;
  v10 = a2;
  if ((a2 & 2) != 0)
  {
    swift_beginAccess();
    v12 = byte_1EEC8B791;
    objc_allocWithZone((Class)type metadata accessor for LanguageAwareString());
    v13 = a1;
    v14 = sub_1AC7143A8(v13, v12);

    v15 = *(void **)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString);
    *(_QWORD *)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString) = v14;

    v10 |= 1uLL;
  }
  v16 = *(void **)(v6 + OBJC_IVAR___JULanguageAwareTextStorage_originalTextStorageDelegate);
  if (v16)
  {
    if ((objc_msgSend(v16, sel_respondsToSelector_, sel_textStorage_didProcessEditing_range_changeInLength_) & 1) != 0)objc_msgSend(v16, sel_textStorage_didProcessEditing_range_changeInLength_, a1, v10, a3, a4, a5);
  }
}

id sub_1AC6D5868()
{
  uint64_t v0;

  return objc_retain(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString)
                           + OBJC_IVAR___JULanguageAwareString_knownBaseWritingDirections));
}

uint64_t sub_1AC6D58A0(uint64_t a1, void *a2, void *a3, char a4, double a5)
{
  uint64_t v5;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *(id *)(v5 + OBJC_IVAR___JULanguageAwareTextStorage_languageAwareString);
  sub_1AC71368C(a1, a2, a3, a4, a5);
  v13 = v12;

  return v13;
}

id LanguageAwareTextStorage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LanguageAwareTextStorage.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LanguageAwareTextStorage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LanguageAwareTextStorage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LanguageAwareTextStorage()
{
  return objc_opt_self();
}

id sub_1AC6D5AB8@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR___JULanguageAwareTextStorage_textStorage);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t method lookup function for LanguageAwareTextStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage(_:willProcessEditing:range:changeInLength:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.textStorage(_:didProcessEditing:range:changeInLength:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.writingDirectionsQuantities()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LanguageAwareTextStorage.writingDirectionOfLine(_:maximumLinesShown:withWidth:lineBreakMode:cacheLayoutInfo:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t sub_1AC6D5BAC(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  result = (uint64_t)objc_msgSend(v1, sel_length);
  v4 = result;
  if (result < 1)
  {
    if (!result)
      return (uint64_t)objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
    v5 = 0;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      result = (uint64_t)objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v5));
      if ((result & 1) == 0)
        break;
      if (v4 == ++v5)
        return (uint64_t)objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
    }
    if (v4 == v5)
      return (uint64_t)objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
  }
  v6 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  while (v6 >= v5)
  {
    result = (uint64_t)objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v6));
    if (!(_DWORD)result)
      break;
    if (__OFSUB__(v6--, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
  }
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
    goto LABEL_20;
  if (!__OFSUB__(v8, 1))
  {
    objc_msgSend(v1, sel_deleteCharactersInRange_, v6 + 1, v8 - 1);
    v4 = v5;
    return (uint64_t)objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
  }
LABEL_21:
  __break(1u);
  return result;
}

id sub_1AC6D5CE4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t)objc_msgSend(v1, sel_length);
  v4 = v3;
  if (v3 < 1)
  {
    if (v3)
    {
      v5 = 0;
LABEL_9:
      v4 = v5;
    }
  }
  else
  {
    v5 = 0;
    while ((objc_msgSend(a1, sel_characterIsMember_, objc_msgSend(v1, sel_characterAtIndex_, v5)) & 1) != 0)
    {
      if (v4 == ++v5)
        return objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
    }
    if (v4 != v5)
      goto LABEL_9;
  }
  return objc_msgSend(v1, sel_deleteCharactersInRange_, 0, v4);
}

uint64_t dispatch thunk of MetricsConfigurable.metrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1AC6D5DA0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1AC6900D4((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1AC69E950(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_1AC725E78();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1AC6916CC(a1, (uint64_t *)&unk_1ED0BE0D0);
    sub_1AC6AB1D8(a2, v9);
    v7 = sub_1AC725E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_1AC6916CC((uint64_t)v9, (uint64_t *)&unk_1ED0BE0D0);
  }
}

uint64_t sub_1AC6D5E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  __int128 v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1AC68AAA4((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_1AC69EC24(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AC6916CC(a1, &qword_1EEC8B220);
    sub_1AC6AB2D4(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_1AC6916CC((uint64_t)v9, &qword_1EEC8B220);
  }
}

uint64_t sub_1AC6D5F58(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = sub_1AC726784();
    v5 = v4;
    v6 = sub_1AC7267D8();
    v8 = MEMORY[0x1AF43FD50](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      sub_1AC6D7DE0(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_1AC6D6EF0(v3, v5, v2 != 0, a1);
    v9 = v13;
    sub_1AC6D7DE0(v3, v5, v2 != 0);
    return v9;
  }
  result = sub_1AC6D7138(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static DSPackageDataKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DSPackageDataKind.hash(into:)()
{
  return sub_1AC726B08();
}

BOOL static DSTriggerMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DSTriggerMode.hash(into:)()
{
  return sub_1AC726B08();
}

uint64_t DSTriggerMode.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

uint64_t PostCollectionAction.execute(_:)(uint64_t a1)
{
  uint64_t (**v1)(uint64_t);
  uint64_t (*v3)(uint64_t);
  char v4;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_0;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;

  v3 = *v1;
  if (*v1)
  {
    swift_retain();
    v4 = v3(a1);
    sub_1AC68AD94((uint64_t)v3);
    return v4 & 1;
  }
  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v7 = objc_msgSend(v6, sel_connectedScenes);

  sub_1AC6AA874();
  sub_1AC69C1E4();
  v8 = sub_1AC7264FC();

  v9 = (void *)sub_1AC6D5F58(v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    objc_opt_self();
    v10 = (void *)swift_dynamicCastObjCClass();
    if (v10)
    {
      v11 = objc_msgSend(v10, sel_keyWindow);
      if (v11)
      {
        v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B1F8);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_1AC727FC0;
        v14 = sub_1AC7258B4();
        *(_QWORD *)(v13 + 56) = v14;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v13 + 32));
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_0, a1, v14);
        v16 = objc_allocWithZone(MEMORY[0x1E0CEA2D8]);
        v17 = (void *)sub_1AC726394();
        swift_bridgeObjectRelease();
        v18 = objc_msgSend(v16, sel_initWithActivityItems_applicationActivities_, v17, 0);

        v19 = objc_msgSend(v12, sel_rootViewController);
        if (v19)
        {
          v20 = v19;
          v21 = 1;
          objc_msgSend(v19, sel_presentViewController_animated_completion_, v18, 1, 0);

        }
        else
        {

          return 1;
        }
        return v21;
      }
    }

  }
  return 0;
}

BOOL DSCore.register(infoProvider:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return sub_1AC6D7400((uint64_t)v4, v1, v2, v3);
}

Swift::Bool __swiftcall DSCore.trigger()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *boxed_opaque_existential_0;
  char v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _QWORD v93[3];
  char v94;

  v1 = v0;
  v2 = 0;
  v3 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v3);
  v75 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1AC72610C();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v76 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1AC7258B4();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v71 = (char *)&v70 - v8;
  v9 = v0 + 7;
  v10 = v0[10];
  v11 = v0[11];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 7), v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  v12 = v0[10];
  v13 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  v15 = *(_QWORD **)(v14 + 16);
  if (v15)
  {
    v83 = 0;
    v16 = 0;
    v84 = v0 + 2;
    v82 = (uint64_t *)v14;
    v17 = (unint64_t *)(v14 + 40);
    v85 = v15;
    do
    {
      v18 = *(v17 - 1);
      v19 = *v17;
      v20 = (_QWORD *)((char *)v16 + 1);
      v94 = 1;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 0xE000000000000000;
      sub_1AC69FEFC(v18, v19);
      sub_1AC726868();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v92 = 0x68736E6565726373;
      *((_QWORD *)&v92 + 1) = 0xEB000000005B746FLL;
      v88[0] = v16;
      sub_1AC726A30();
      sub_1AC7262C8();
      swift_bridgeObjectRelease();
      sub_1AC7262C8();
      v21 = v1[10];
      v22 = v1[11];
      __swift_project_boxed_opaque_existential_1(v9, v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
      sub_1AC7262C8();
      swift_bridgeObjectRelease();
      v24 = *((_QWORD *)&v92 + 1);
      v23 = v92;
      v25 = v1[5];
      v26 = v1[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v84, v25);
      (*(void (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v18, v19, &v94, v23, v24, v25, v26);
      sub_1AC69FEB8(v18, v19);
      swift_bridgeObjectRelease();
      v17 += 2;
      v16 = v20;
    }
    while (v85 != v20);
    swift_bridgeObjectRelease();
    v2 = v83;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = v1[1];
  v28 = *(_QWORD *)(v27 + 64);
  v79 = v27 + 64;
  v29 = 1 << *(_BYTE *)(v27 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v80 = (unint64_t)(v29 + 63) >> 6;
  v83 = v93;
  v82 = &v89;
  v85 = v1;
  v81 = v1 + 2;
  v84 = (_QWORD *)v27;
  swift_bridgeObjectRetain();
  v32 = 0;
  if (!v31)
    goto LABEL_10;
LABEL_9:
  v33 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  for (i = v33 | (v32 << 6); ; i = __clz(__rbit64(v36)) + (v32 << 6))
  {
    v39 = v84[7];
    v40 = (_QWORD *)(v84[6] + 16 * i);
    v41 = v40[1];
    *(_QWORD *)&v92 = *v40;
    v42 = v92;
    *((_QWORD *)&v92 + 1) = v41;
    v43 = (uint64_t)v83;
    sub_1AC68E218(v39 + 40 * i, (uint64_t)v83);
    v88[0] = v42;
    v88[1] = v41;
    v44 = (__int128 *)v43;
    v45 = v82;
    sub_1AC68AAA4(v44, (uint64_t)v82);
    v46 = v90;
    v47 = v91;
    __swift_project_boxed_opaque_existential_1(v45, v90);
    v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 16);
    swift_bridgeObjectRetain_n();
    v49 = v48(v46, v47);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_1AC6916CC((uint64_t)v88, &qword_1EEC8B200);
      goto LABEL_31;
    }
    v51 = v49;
    v52 = v50;
    v94 = 0;
    v54 = v85[5];
    v53 = v85[6];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v81, v54);
    (*(void (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, &v94, v42, v41, v54, v53);
    sub_1AC69FEB8(v51, v52);
    swift_bridgeObjectRelease();
    sub_1AC6916CC((uint64_t)v88, &qword_1EEC8B200);
    if (v31)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v32 >= v80)
      break;
    v36 = *(_QWORD *)(v79 + 8 * v32);
    v37 = v85;
    if (!v36)
    {
      v38 = v32 + 1;
      if (v32 + 1 >= v80)
        goto LABEL_30;
      v36 = *(_QWORD *)(v79 + 8 * v38);
      if (!v36)
      {
        v38 = v32 + 2;
        if (v32 + 2 >= v80)
          goto LABEL_30;
        v36 = *(_QWORD *)(v79 + 8 * v38);
        if (!v36)
        {
          v38 = v32 + 3;
          if (v32 + 3 >= v80)
            goto LABEL_30;
          v36 = *(_QWORD *)(v79 + 8 * v38);
          if (!v36)
          {
            while (1)
            {
              v32 = v38 + 1;
              if (__OFADD__(v38, 1))
                break;
              if (v32 >= v80)
                goto LABEL_30;
              v36 = *(_QWORD *)(v79 + 8 * v32);
              ++v38;
              if (v36)
                goto LABEL_20;
            }
LABEL_36:
            __break(1u);
LABEL_37:
            swift_once();
LABEL_32:
            v58 = v78;
            v59 = __swift_project_value_buffer(v78, (uint64_t)qword_1EEC95CB8);
            v60 = v77;
            v61 = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v59, v58);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
            sub_1AC725D10();
            *(_OWORD *)(swift_allocObject() + 16) = xmmword_1AC727FC0;
            sub_1AC725CD4();
            sub_1AC725CC8();
            swift_getErrorValue();
            v63 = v86;
            v62 = v87;
            v93[1] = v87;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v92);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(boxed_opaque_existential_0, v63, v62);
            sub_1AC725CA4();
            sub_1AC6916CC((uint64_t)&v92, (uint64_t *)&unk_1ED0BE0D0);
            sub_1AC725CC8();
            sub_1AC725CEC();
            sub_1AC72601C();
            swift_bridgeObjectRelease();

            (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
            v65 = 0;
            return v65 & 1;
          }
        }
      }
      v32 = v38;
    }
LABEL_20:
    v31 = (v36 - 1) & v36;
  }
  v37 = v85;
LABEL_30:
  v55 = v74;
  swift_release();
  v56 = v37[5];
  v57 = v37[6];
  __swift_project_boxed_opaque_existential_1(v81, v56);
  (*(void (**)(uint64_t, uint64_t))(v57 + 24))(v56, v57);
  if (v2)
  {
LABEL_31:
    if (qword_1EEC8A210 != -1)
      goto LABEL_37;
    goto LABEL_32;
  }
  v67 = v72;
  v68 = (uint64_t)v71;
  v69 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v55, v73);
  v92 = *((_OWORD *)v37 + 6);
  v65 = PostCollectionAction.execute(_:)(v68);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
  return v65 & 1;
}

uint64_t static DSCore.deepshot(in:using:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v6;
  unint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *a2;
  if ((*a1 & 1) != 0)
  {
    v14 = *a2;
    return sub_1AC6D6D28(&v14, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 88) = &off_1E5BF8828;
    v6 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a3 + 56) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a3 + 64) = 6778480;
    *(_QWORD *)(a3 + 72) = 0xE300000000000000;
    *(_QWORD *)(a3 + 80) = &type metadata for DSScreenshotCapturer;
    v7 = sub_1AC6A90B0(v6);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
    *(_QWORD *)(a3 + 40) = &type metadata for DSPNGPackager;
    *(_QWORD *)(a3 + 48) = &off_1E5BF6740;
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = 0x616B636150474E50;
    v9[3] = 0xEB00000000726567;
    v10 = MEMORY[0x1E0DEE9E0];
    v9[4] = v7;
    v9[5] = v8;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v9;
    *(_BYTE *)a3 = v4;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    sub_1AC6D71C0(0xD000000000000022, 0x80000001AC731520, a3);
    if (qword_1EEC8A1E0 != -1)
      swift_once();
    v11 = qword_1EEC8AD30;
    v12 = *(_QWORD *)algn_1EEC8AD38;
    v13 = qword_1EEC8AD40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AC6D72CC(v11, v12, v13, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1AC6D6D28@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  int *v5;
  uint64_t *boxed_opaque_existential_0;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  *(_QWORD *)(a2 + 88) = &off_1E5BF8828;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 56) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 64) = 6778480;
  *(_QWORD *)(a2 + 72) = 0xE300000000000000;
  *(_QWORD *)(a2 + 80) = &type metadata for DSScreenshotCapturer;
  v5 = (int *)type metadata accessor for DSZipPackager();
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = &off_1E5BF6880;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(a2 + 16));
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = objc_msgSend(v7, sel_temporaryDirectory);

  sub_1AC725890();
  v9 = v5[5];
  *(uint64_t *)((char *)boxed_opaque_existential_0 + v9) = sub_1AC6A9530(v4);
  v10 = v5[6];
  *(uint64_t *)((char *)boxed_opaque_existential_0 + v10) = sub_1AC6A9530(v4);
  v11 = (char *)boxed_opaque_existential_0 + v5[7];
  strcpy(v11, "DSZipPackager");
  *((_WORD *)v11 + 7) = -4864;
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DEE9E0];
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  sub_1AC6D71C0(0xD000000000000022, 0x80000001AC731520, a2);
  if (qword_1EEC8A1E0 != -1)
    swift_once();
  v12 = qword_1EEC8AD30;
  v13 = *(_QWORD *)algn_1EEC8AD38;
  v14 = qword_1EEC8AD40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AC6D72CC(v12, v13, v14, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1AC6D6EF0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1AC7267A8() == *(_DWORD *)(a4 + 36))
      {
        sub_1AC7267B4();
        sub_1AC6AA874();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_1AC726694();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_1AC7266A0();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_1AC7266A0();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1AF43FD74](a1, a2, v7);
  sub_1AC6AA874();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1AC6D7138(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1AC6D71C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;

  v17 = &type metadata for DSAccessibilityDiagnosticCollector;
  v18 = &protocol witness table for DSAccessibilityDiagnosticCollector;
  v15 = a1;
  v16 = a2;
  v4 = *(_QWORD *)(a3 + 8);
  if (!*(_QWORD *)(v4 + 16))
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRetain();
LABEL_6:
    sub_1AC6916CC((uint64_t)&v12, &qword_1EEC8B220);
    v9 = v15;
    v10 = v16;
    sub_1AC68E218((uint64_t)&v15, (uint64_t)&v12);
    swift_bridgeObjectRetain();
    sub_1AC6D5E84((uint64_t)&v12, v9, v10);
    v8 = 1;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1AC6B4E9C(a1, a2);
  if ((v7 & 1) == 0)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    goto LABEL_6;
  }
  sub_1AC68E218(*(_QWORD *)(v4 + 56) + 40 * v6, (uint64_t)&v12);
  sub_1AC6916CC((uint64_t)&v12, &qword_1EEC8B220);
  v8 = 0;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  return v8;
}

uint64_t sub_1AC6D72CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;

  v19 = &type metadata for DSLocalizationDiagnosticsCollector;
  v20 = &protocol witness table for DSLocalizationDiagnosticsCollector;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v5 = *(_QWORD *)(a4 + 8);
  if (!*(_QWORD *)(v5 + 16))
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v7 = sub_1AC6B4E9C(a2, a3);
  if ((v8 & 1) == 0)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1AC68E218(*(_QWORD *)(v5 + 56) + 40 * v7, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_7:
    sub_1AC6916CC((uint64_t)&v13, &qword_1EEC8B220);
    v10 = v17;
    v11 = v18;
    sub_1AC68E218((uint64_t)&v16, (uint64_t)&v13);
    swift_bridgeObjectRetain();
    sub_1AC6D5E84((uint64_t)&v13, v10, v11);
    v9 = 1;
    goto LABEL_8;
  }
  sub_1AC6916CC((uint64_t)&v13, &qword_1EEC8B220);
  v9 = 0;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  return v9;
}

BOOL sub_1AC6D7400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23[5];

  v23[3] = a3;
  v23[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  v10 = v9(a3, a4);
  v12 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(v12 + 16) && (v13 = sub_1AC6B4E9C(v10, v11), (v14 & 1) != 0))
  {
    sub_1AC68E218(*(_QWORD *)(v12 + 56) + 40 * v13, (uint64_t)&v20);
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease();
  v15 = *((_QWORD *)&v21 + 1);
  sub_1AC6916CC((uint64_t)&v20, &qword_1EEC8B220);
  if (!v15)
  {
    v16 = v9(a3, a4);
    v18 = v17;
    sub_1AC68E218((uint64_t)v23, (uint64_t)&v20);
    sub_1AC6D5E84((uint64_t)&v20, v16, v18);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v15 == 0;
}

uint64_t sub_1AC6D752C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t sub_1AC6D7564()
{
  unint64_t result;

  result = qword_1EEC8B208;
  if (!qword_1EEC8B208)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSPackageDataKind, &type metadata for DSPackageDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEC8B208);
  }
  return result;
}

unint64_t sub_1AC6D75AC()
{
  unint64_t result;

  result = qword_1EEC8B210;
  if (!qword_1EEC8B210)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DSTriggerMode, &type metadata for DSTriggerMode);
    atomic_store(result, (unint64_t *)&qword_1EEC8B210);
  }
  return result;
}

unint64_t sub_1AC6D75F4()
{
  unint64_t result;

  result = qword_1EEC8B218;
  if (!qword_1EEC8B218)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for DeepshotPackageFormat, &type metadata for DeepshotPackageFormat);
    atomic_store(result, (unint64_t *)&qword_1EEC8B218);
  }
  return result;
}

uint64_t dispatch thunk of DSDiagnosticsCollector.getDiagnosticInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for DSPackageDataKind()
{
  return &type metadata for DSPackageDataKind;
}

uint64_t dispatch thunk of DSPackager.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DSPackager.add(_:of:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of DSPackager.createPackage()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DSPackager.clear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DSScreenCapturer.screenCaptures.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DSScreenCapturer.capture()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t storeEnumTagSinglePayload for DSTriggerMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AC6D76F4 + 4 * byte_1AC72CDF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AC6D7728 + 4 * byte_1AC72CDF0[v4]))();
}

uint64_t sub_1AC6D7728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D7730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6D7738);
  return result;
}

uint64_t sub_1AC6D7744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6D774CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AC6D7750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D7758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSTriggerMode()
{
  return &type metadata for DSTriggerMode;
}

_QWORD *destroy for PostCollectionAction(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

uint64_t _s5JetUI20PostCollectionActionOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for PostCollectionAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for PostCollectionAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostCollectionAction(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PostCollectionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1AC6D798C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1AC6D79A4(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PostCollectionAction()
{
  return &type metadata for PostCollectionAction;
}

uint64_t destroy for DSCore(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  result = __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  if (*(_QWORD *)(a1 + 96))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for DSCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 56, a2 + 56);
  v9 = *(_QWORD *)(a2 + 96);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for DSCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  v4 = *(_QWORD *)(a2 + 96);
  if (!*(_QWORD *)(a1 + 96))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v4;
      *(_QWORD *)(a1 + 104) = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DSCore(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  v5 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  if (!v6)
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v5;
      *(_QWORD *)(a1 + 104) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DSCore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DSCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DSCore()
{
  return &type metadata for DSCore;
}

uint64_t _s5JetUI17DSPackageDataKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6D7D60 + 4 * byte_1AC72CDFF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6D7D94 + 4 * byte_1AC72CDFA[v4]))();
}

uint64_t sub_1AC6D7D94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D7D9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6D7DA4);
  return result;
}

uint64_t sub_1AC6D7DB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6D7DB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6D7DBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6D7DC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeepshotPackageFormat()
{
  return &type metadata for DeepshotPackageFormat;
}

uint64_t sub_1AC6D7DE0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t ZStack.add(_:with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v5 = a1[3];
  v6 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  Measurable.placeable.getter(v5, v6, v8);
  ZStack.add(_:with:)((uint64_t)v8, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t ZStack.adding(_:with:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v5 = v4;
  v9 = a1[3];
  v10 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Measurable.placeable.getter(v9, v10, v12);
  sub_1AC6B8474(v5, a4);
  ZStack.add(_:with:)((uint64_t)v12, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t ZStack.insert(_:at:with:)(_QWORD *a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v7 = a1[3];
  v8 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  Measurable.placeable.getter(v7, v8, v10);
  ZStack.insert(_:at:with:)((uint64_t)v10, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t ZStack.inserting(_:at:with:)@<X0>(_QWORD *a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v6 = v5;
  v11 = a1[3];
  v12 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  Measurable.placeable.getter(v11, v12, v14);
  sub_1AC6B8474(v6, a5);
  ZStack.insert(_:at:with:)((uint64_t)v14, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t ImageAppearance.Scaling.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ImageAppearance.Scaling.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static ImageAppearance.Scaling.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ImageAppearance.Scaling.fill.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ImageAppearance.Scaling.aspectFit.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

double ImageAppearance.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1AC72D020;
  return result;
}

id ImageAppearance.symbolConfiguration.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void ImageAppearance.symbolConfiguration.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

double (*ImageAppearance.symbolConfiguration.modify())(void)
{
  return nullsub_1;
}

id ImageAppearance.withSymbolConfiguration(_:)@<X0>(id a1@<X0>, id *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v3 = *(void **)(v2 + 8);
  *a2 = a1;
  a2[1] = v3;
  return a1;
}

void ImageAppearance.scaling.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *ImageAppearance.scaling.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

double (*ImageAppearance.scaling.modify())(void)
{
  return nullsub_1;
}

id ImageAppearance.withScaling(_:)@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void **v2;
  void *v3;
  void *v4;

  v3 = *a1;
  v4 = *v2;
  *a2 = *v2;
  a2[1] = v3;
  return v4;
}

BOOL _s5JetUI15ImageAppearanceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  char v8;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      sub_1AC6D8320();
      v6 = v4;
      v7 = v2;
      v8 = sub_1AC7266A0();

      if ((v8 & 1) != 0)
        return v3 == v5;
    }
  }
  else if (!v4)
  {
    return v3 == v5;
  }
  return 0;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageAppearance(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ImageAppearance(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ImageAppearance(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageAppearance(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageAppearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageAppearance()
{
  return &type metadata for ImageAppearance;
}

ValueMetadata *type metadata accessor for ImageAppearance.Scaling()
{
  return &type metadata for ImageAppearance.Scaling;
}

unint64_t sub_1AC6D8320()
{
  unint64_t result;

  result = qword_1EEC8B228;
  if (!qword_1EEC8B228)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8B228);
  }
  return result;
}

double AppStore.CenteredThreeLineTextLayout.init(primaryText:secondaryText:secondarySpace:numberOfLines:)@<D0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  _OWORD v16[3];
  _OWORD v17[2];
  __int128 v18;

  sub_1AC68AAA4(a1, (uint64_t)v15);
  sub_1AC68AAA4(a2, (uint64_t)v16 + 8);
  sub_1AC68AAA4(a3, (uint64_t)v17);
  *((_QWORD *)&v18 + 1) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD440);
  v9 = (_OWORD *)swift_allocObject();
  v10 = v17[0];
  v9[5] = v16[2];
  v9[6] = v10;
  v11 = v18;
  v9[7] = v17[1];
  v9[8] = v11;
  v12 = v15[1];
  v9[1] = v15[0];
  v9[2] = v12;
  result = *(double *)v16;
  v14 = v16[1];
  v9[3] = v16[0];
  v9[4] = v14;
  *a5 = v9;
  return result;
}

uint64_t AppStore.CenteredThreeLineTextLayout.primaryText.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.primaryText.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[8];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6D8540(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6D8574((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD440);
    v5 = (_OWORD *)swift_allocObject();
    v6 = v11[5];
    v5[5] = v11[4];
    v5[6] = v6;
    v7 = v11[7];
    v5[7] = v11[6];
    v5[8] = v7;
    v8 = v11[1];
    v5[1] = v11[0];
    v5[2] = v8;
    v9 = v11[3];
    v5[3] = v11[2];
    v5[4] = v9;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AC6D8540(uint64_t a1, uint64_t a2)
{
  _s27CenteredThreeLineTextLayoutV7StorageVwcp(a2, a1);
  return a2;
}

uint64_t sub_1AC6D8574(uint64_t a1, uint64_t a2)
{
  _s27CenteredThreeLineTextLayoutV7StorageVwta(a2, a1);
  return a2;
}

void (*AppStore.CenteredThreeLineTextLayout.primaryText.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v3);
  return sub_1AC6D8614;
}

void sub_1AC6D8614(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.CenteredThreeLineTextLayout.primaryText.setter);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 56, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondaryText.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  _OWORD v12[6];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6D8540(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12 + 1, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6D8574((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD440);
    v5 = (_OWORD *)swift_allocObject();
    v6 = v12[3];
    v5[5] = v12[2];
    v5[6] = v6;
    v7 = v12[5];
    v5[7] = v12[4];
    v5[8] = v7;
    v8 = v11[1];
    v5[1] = v11[0];
    v5[2] = v8;
    v9 = v12[1];
    v5[3] = v12[0];
    v5[4] = v9;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.CenteredThreeLineTextLayout.secondaryText.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 56, (uint64_t)v3);
  return sub_1AC6D87C4;
}

void sub_1AC6D87C4(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.CenteredThreeLineTextLayout.secondaryText.setter);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondarySpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 96, a1);
}

uint64_t AppStore.CenteredThreeLineTextLayout.secondarySpace.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[5];
  _OWORD v12[3];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6D8540(v3, (uint64_t)v11);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6D8574((uint64_t)v11, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD440);
    v5 = (_OWORD *)swift_allocObject();
    v6 = v12[0];
    v5[5] = v11[4];
    v5[6] = v6;
    v7 = v12[2];
    v5[7] = v12[1];
    v5[8] = v7;
    v8 = v11[1];
    v5[1] = v11[0];
    v5[2] = v8;
    v9 = v11[3];
    v5[3] = v11[2];
    v5[4] = v9;
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.CenteredThreeLineTextLayout.secondarySpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 96, (uint64_t)v3);
  return sub_1AC6D8974;
}

void sub_1AC6D8974(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.CenteredThreeLineTextLayout.secondarySpace.setter);
}

uint64_t AppStore.CenteredThreeLineTextLayout.numberOfLines.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 136);
}

uint64_t AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[7];
  __int128 v12;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6D8540(v3, (uint64_t)v11);
  *((_QWORD *)&v12 + 1) = a1;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6D8574((uint64_t)v11, v4);
    return swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD440);
    v6 = (_OWORD *)swift_allocObject();
    v7 = v11[5];
    v6[5] = v11[4];
    v6[6] = v7;
    v8 = v12;
    v6[7] = v11[6];
    v6[8] = v8;
    v9 = v11[1];
    v6[1] = v11[0];
    v6[2] = v9;
    v10 = v11[3];
    v6[3] = v11[2];
    v6[4] = v10;
    result = swift_release();
    *v1 = v6;
  }
  return result;
}

void (*AppStore.CenteredThreeLineTextLayout.numberOfLines.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_beginAccess();
  v3[3] = *(_QWORD *)(v4 + 136);
  return sub_1AC6D8B00;
}

void sub_1AC6D8B00(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(*(_QWORD *)(*(_QWORD *)a1 + 24));
  free(v1);
}

double AppStore.CenteredThreeLineTextLayout.placeChildren(relativeTo:in:)@<D0>(void *a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  CGFloat v66;
  CGFloat v67;
  double Height;
  double MinY;
  double v70;
  id v71;
  double v72;
  double v73;
  double v74;
  CGFloat v75;
  CGFloat v76;
  double MinX;
  CGFloat Width;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, double, double, double, double);
  double v82;
  CGFloat v83;
  double v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  CGFloat v92;
  double v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  double MaxY;
  CGFloat v98;
  double result;
  uint64_t v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  double v104;
  double v105;
  double v106;
  double v107;
  CGFloat v108;
  double v109;
  CGFloat v110;
  CGFloat v111;
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[3];
  uint64_t v116;
  uint64_t v117;
  JUMeasurements v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;

  v111 = a6;
  v110 = a4;
  *(double *)&v11 = COERCE_DOUBLE(sub_1AC726A48());
  v107 = *(double *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v6;
  v15 = *v6 + 16;
  swift_beginAccess();
  sub_1AC68E218(v15, (uint64_t)v115);
  v16 = v116;
  v17 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  }
  else
  {
    sub_1AC68E218(v14 + 56, (uint64_t)v112);
    v18 = v113;
    v19 = v114;
    __swift_project_boxed_opaque_existential_1(v112, v113);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
    if ((v20 & 1) == 0)
    {
      v105 = *(double *)&v11;
      sub_1AC68E218(v15, (uint64_t)v115);
      v39 = v116;
      v40 = v117;
      __swift_project_boxed_opaque_existential_1(v115, v116);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v40 + 24))(*(_QWORD *)(v14 + 136), v39, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      sub_1AC68E218(v15, (uint64_t)v115);
      v41 = v116;
      v42 = v117;
      __swift_project_boxed_opaque_existential_1(v115, v116);
      v43 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8) + 8))(a1, v41, a5, v111);
      v45 = v44;
      v47 = v46;
      v49 = v48;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      sub_1AC68E218(v15, (uint64_t)v115);
      __swift_project_boxed_opaque_existential_1(v115, v116);
      v118.var0 = v43;
      v109 = v45;
      v118.var1 = v45;
      v106 = v47;
      v118.var2 = v47;
      v108 = v49;
      v118.var3 = v49;
      v50 = LayoutTextView.estimatedNumberOfLines(from:)(v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      sub_1AC68E218(v14 + 56, (uint64_t)v115);
      v51 = v116;
      v52 = v117;
      __swift_project_boxed_opaque_existential_1(v115, v116);
      if (v50 <= 1)
        v53 = *(_QWORD *)(v14 + 136);
      else
        v53 = 1;
      *(double *)&v11 = v105;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 24))(v53, v51, v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      sub_1AC68E218(v14 + 56, (uint64_t)v115);
      v54 = v116;
      v55 = v117;
      __swift_project_boxed_opaque_existential_1(v115, v116);
      v56.n128_f64[0] = a5;
      v57.n128_f64[0] = v111;
      v35 = (*(double (**)(void *, uint64_t, __n128, __n128))(*(_QWORD *)(*(_QWORD *)(v55 + 8) + 8) + 8))(a1, v54, v56, v57);
      goto LABEL_9;
    }
  }
  sub_1AC68E218(v15, (uint64_t)v115);
  v21 = v116;
  v22 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24))(1, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  sub_1AC68E218(v14 + 56, (uint64_t)v115);
  v23 = v116;
  v24 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24))(1, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  sub_1AC68E218(v15, (uint64_t)v115);
  v25 = v116;
  v26 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  v27 = *(_QWORD *)&v111;
  (*(void (**)(void *, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 8) + 8))(a1, v25, a5, v111);
  v109 = v28;
  v106 = v29;
  v108 = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  sub_1AC68E218(v14 + 56, (uint64_t)v115);
  v31 = v116;
  v32 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  v33.n128_f64[0] = a5;
  v34.n128_u64[0] = v27;
  v35 = (*(double (**)(void *, uint64_t, __n128, __n128))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8) + 8))(a1, v31, v33, v34);
LABEL_9:
  v58 = v35;
  v59 = v36;
  v60 = v37;
  v61 = v38;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  sub_1AC68E218(v14 + 96, (uint64_t)v115);
  v62 = v116;
  v63 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  v64 = v59;
  v105 = v61;
  v65 = AnyDimension.topMargin(from:in:)((uint64_t)a1, v62, v63, v58, v59, v60);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  v119.origin.x = a3;
  v66 = v110;
  v119.origin.y = v110;
  v119.size.width = a5;
  v67 = v111;
  v119.size.height = v111;
  Height = CGRectGetHeight(v119);
  v120.origin.x = a3;
  v120.origin.y = v66;
  v120.size.width = a5;
  v120.size.height = v67;
  MinY = CGRectGetMinY(v120);
  v70 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)&v107 + 104))(v13, *MEMORY[0x1E0DED508], v11);
  v71 = objc_msgSend(a1, sel_traitCollection);
  objc_msgSend(v71, sel_displayScale);
  if (v72 <= 0.0)
    v72 = ForJetUIOnly_MainScreenScale();
  v103 = v65;
  v104 = v64;
  v73 = sub_1AC68EE10((uint64_t)v13, v72, (Height - (v64 + v109 - v108 + v65)) * 0.5);

  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v70 + 8))(v13, v11);
  v74 = MinY + v73;
  v121.origin.x = a3;
  v75 = v110;
  v121.origin.y = v110;
  v121.size.width = a5;
  v76 = v111;
  v121.size.height = v111;
  MinX = CGRectGetMinX(v121);
  v122.origin.x = a3;
  v122.origin.y = v75;
  v122.size.width = a5;
  v122.size.height = v76;
  Width = CGRectGetWidth(v122);
  sub_1AC68E218(v15, (uint64_t)v115);
  v80 = v116;
  v79 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  v81 = *(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)(v79 + 8) + 24);
  v82 = v74;
  v83 = v74;
  v102 = v74;
  v84 = Width;
  v85 = Width;
  v101 = Width;
  v86 = v109;
  v81(v80, MinX, v82, v84, v109);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  v123.origin.x = a3;
  v123.origin.y = v75;
  v123.size.width = a5;
  v123.size.height = v76;
  v107 = CGRectGetMinX(v123);
  v124.origin.x = MinX;
  v124.origin.y = v83;
  v124.size.width = v85;
  v124.size.height = v86;
  v87 = v103 + CGRectGetMaxY(v124) - v108;
  v103 = v87;
  v125.origin.x = a3;
  v125.origin.y = v75;
  v125.size.width = a5;
  v125.size.height = v76;
  v88 = CGRectGetWidth(v125);
  v108 = v88;
  sub_1AC68E218(v14 + 56, (uint64_t)v115);
  v90 = v116;
  v89 = v117;
  __swift_project_boxed_opaque_existential_1(v115, v116);
  v91 = v88;
  v92 = v104;
  (*(void (**)(uint64_t, double, CGFloat, double, double))(*(_QWORD *)(v89 + 8) + 24))(v90, v107, v87, v91, v104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  v126.origin.x = MinX;
  v126.origin.y = v102;
  v126.size.width = v101;
  v126.size.height = v86;
  v93 = CGRectGetMinY(v126);
  v127.origin.x = a3;
  v127.origin.y = v75;
  v127.size.width = a5;
  v127.size.height = v76;
  v109 = v106 + v93 - CGRectGetMinY(v127);
  v128.origin.x = a3;
  v128.origin.y = v75;
  v128.size.width = a5;
  v128.size.height = v76;
  v94 = CGRectGetMinX(v128);
  v129.origin.x = a3;
  v129.origin.y = v75;
  v129.size.width = a5;
  v129.size.height = v76;
  v95 = CGRectGetMinY(v129);
  v130.origin.x = a3;
  v130.origin.y = v75;
  v130.size.width = a5;
  v130.size.height = v76;
  v96 = CGRectGetWidth(v130);
  v131.origin.x = v107;
  v131.origin.y = v103;
  v131.size.width = v108;
  v131.size.height = v92;
  MaxY = CGRectGetMaxY(v131);
  v132.origin.x = a3;
  v132.origin.y = v75;
  v132.size.width = a5;
  v132.size.height = v76;
  v98 = CGRectGetMinY(v132);
  *a2 = v94;
  a2[1] = v95;
  a2[2] = v96;
  a2[3] = MaxY - v98;
  result = v105;
  a2[4] = v109;
  a2[5] = result;
  return result;
}

uint64_t sub_1AC6D9314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a2);
}

uint64_t sub_1AC6D9360(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.primaryText.setter(v2);
}

uint64_t sub_1AC6D9394@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 56, a2);
}

uint64_t sub_1AC6D93DC(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.secondaryText.setter(v2);
}

uint64_t sub_1AC6D9410@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 96, a2);
}

uint64_t sub_1AC6D9458(uint64_t a1)
{
  uint64_t v2[5];

  sub_1AC68E218(a1, (uint64_t)v2);
  return AppStore.CenteredThreeLineTextLayout.secondarySpace.setter(v2);
}

uint64_t sub_1AC6D948C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 136);
  return result;
}

uint64_t sub_1AC6D94D0(uint64_t *a1)
{
  return AppStore.CenteredThreeLineTextLayout.numberOfLines.setter(*a1);
}

ValueMetadata *type metadata accessor for AppStore.CenteredThreeLineTextLayout()
{
  return &type metadata for AppStore.CenteredThreeLineTextLayout;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t *_s27CenteredThreeLineTextLayoutV7StorageVwca(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  a1[15] = a2[15];
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  return a1;
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s27CenteredThreeLineTextLayoutV7StorageVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s27CenteredThreeLineTextLayoutV7StorageVMa()
{
  return &_s27CenteredThreeLineTextLayoutV7StorageVN;
}

BOOL static FlankedVerticalLayout.Alignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FlankedVerticalLayout.Alignment.hash(into:)()
{
  return sub_1AC726B08();
}

uint64_t FlankedVerticalLayout.Alignment.hashValue.getter()
{
  sub_1AC726AFC();
  sub_1AC726B08();
  return sub_1AC726B2C();
}

uint64_t FlankedVerticalLayout.init(sublayout:topView:topViewAlignment:topMargin:bottomView:bottomViewAlignment:bottomMargin:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X8>)
{
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v13 = *a3;
  v14 = *a6;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  v15 = a8 + 48;
  *(_QWORD *)(a8 + 80) = 0;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_QWORD *)(a8 + 160) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  v16 = a8 + 128;
  sub_1AC68AAA4(a1, a8 + 8);
  sub_1AC6D9850(a2, v15);
  *(_BYTE *)a8 = v13;
  sub_1AC68AAA4(a4, a8 + 88);
  sub_1AC6D9850(a5, v16);
  *(_BYTE *)(a8 + 1) = v14;
  return sub_1AC68AAA4(a7, a8 + 168);
}

uint64_t sub_1AC6D9850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void FlankedVerticalLayout.topViewAlignment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void FlankedVerticalLayout.bottomViewAlignment.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t FlankedVerticalLayout.sublayout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 8, a1);
}

uint64_t FlankedVerticalLayout.sublayout.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

double (*FlankedVerticalLayout.sublayout.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.topView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6D9918(v1 + 48, a1);
}

uint64_t sub_1AC6D9918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FlankedVerticalLayout.topView.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6D9850(a1, v1 + 48);
}

double (*FlankedVerticalLayout.topView.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.topMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 88, a1);
}

uint64_t FlankedVerticalLayout.topMargin.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 88;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

double (*FlankedVerticalLayout.topMargin.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.bottomView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6D9918(v1 + 128, a1);
}

uint64_t FlankedVerticalLayout.bottomView.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6D9850(a1, v1 + 128);
}

double (*FlankedVerticalLayout.bottomView.modify())(void)
{
  return nullsub_1;
}

uint64_t FlankedVerticalLayout.bottomMargin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 168, a1);
}

uint64_t FlankedVerticalLayout.bottomMargin.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 168;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

double (*FlankedVerticalLayout.bottomMargin.modify())(void)
{
  return nullsub_1;
}

void FlankedVerticalLayout.placeChildren(relativeTo:in:)(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double v34;
  id v35;
  double v36;
  double MinX;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  CGFloat tx;
  CGFloat ty;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  int v67;
  double v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  double v73;
  uint64_t v74;
  id v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  CGFloat v85;
  CGFloat v86;
  double v87;
  CGFloat MaxX;
  CGFloat v89;
  CGFloat v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  CGFloat Height;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  double v103;
  CGFloat MinY;
  CGFloat v105;
  double v106;
  double v107;
  uint64_t v108;
  CGAffineTransform v109;
  CGAffineTransform v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;

  v7 = v6;
  v14 = sub_1AC726A48();
  v108 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)&v106 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v100 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v100 - v20;
  sub_1AC6D9918((uint64_t)(v6 + 48), (uint64_t)&v110);
  if (*(_QWORD *)&v110.d)
  {
    v22 = v14;
    sub_1AC68AAA4((__int128 *)&v110, (uint64_t)v111);
    v23 = v112;
    v24 = v113;
    __swift_project_boxed_opaque_existential_1(v111, v112);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24) & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      v25 = a6;
      v107 = a4;
      v14 = v22;
    }
    else
    {
      v27 = v112;
      v26 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      v28 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(v26 + 8) + 8))(a1, v27, a5, a6);
      v105 = v29;
      v30 = a3;
      v31 = a4;
      v32 = a5;
      v33 = a6;
      if (*v6)
      {
        if (*v6 == 1)
        {
          v34 = CGRectGetMidX(*(CGRect *)&v30) + v28 * -0.5;
          (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v21, *MEMORY[0x1E0DED508], v22);
          v35 = objc_msgSend(a1, sel_traitCollection);
          objc_msgSend(v35, sel_displayScale);
          if (v36 <= 0.0)
            v36 = ForJetUIOnly_MainScreenScale();
          MinX = sub_1AC68EE10((uint64_t)v21, v36, v34);

          (*(void (**)(char *, uint64_t))(v108 + 8))(v21, v22);
        }
        else
        {
          MinX = CGRectGetWidth(*(CGRect *)&v30) - v28;
        }
      }
      else
      {
        MinX = CGRectGetMinX(*(CGRect *)&v30);
      }
      v114.origin.x = a3;
      v114.origin.y = a4;
      v114.size.width = a5;
      v114.size.height = a6;
      MinY = CGRectGetMinY(v114);
      v38 = v112;
      v39 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      v40 = objc_msgSend(a1, sel_traitCollection);
      v41 = objc_msgSend(v40, sel_layoutDirection);

      v103 = a3;
      if (v41 == (id)1)
      {
        CGAffineTransformMakeScale(&v110, -1.0, 1.0);
        v102 = *(_OWORD *)&v110.a;
        v101 = *(_OWORD *)&v110.c;
        v107 = v28;
        tx = v110.tx;
        ty = v110.ty;
        v115.origin.x = a3;
        v115.origin.y = a4;
        v115.size.width = a5;
        v115.size.height = a6;
        v47 = CGRectGetMinX(v115);
        v116.origin.x = a3;
        v116.origin.y = a4;
        v116.size.width = a5;
        v116.size.height = a6;
        v48 = -(v47 + CGRectGetMaxX(v116));
        *(_OWORD *)&v110.a = v102;
        *(_OWORD *)&v110.c = v101;
        v110.tx = tx;
        v110.ty = ty;
        v49 = v107;
        CGAffineTransformTranslate(&v109, &v110, v48, 0.0);
        v110 = v109;
        v117.origin.x = MinX;
        v117.origin.y = MinY;
        v28 = v49;
        v117.size.width = v49;
        v117.size.height = v105;
        *(CGRect *)((char *)&v42 - 8) = CGRectApplyAffineTransform(v117, &v110);
        v50 = MinX;
        MinX = v51;
      }
      else
      {
        v50 = MinX;
        v42.n128_f64[0] = MinY;
        v43.n128_f64[0] = v28;
        v44.n128_f64[0] = v105;
      }
      v14 = v22;
      v52 = a4;
      (*(void (**)(uint64_t, uint64_t, double, __n128, __n128, __n128))(v39 + 24))(v38, v39, MinX, v42, v43, v44);
      v53 = *((_QWORD *)v7 + 14);
      v54 = *((_QWORD *)v7 + 15);
      __swift_project_boxed_opaque_existential_1((_QWORD *)v7 + 11, v53);
      sub_1AC68E57C((uint64_t)v18);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v18, v53, v54);
      v56 = v55;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v18, v22);
      v118.origin.x = v50;
      v57 = MinY;
      v118.origin.y = MinY;
      v58 = v28;
      v118.size.width = v28;
      v59 = v105;
      v118.size.height = v105;
      v107 = v56 + CGRectGetHeight(v118) + v52;
      v119.origin.x = v50;
      v119.origin.y = v57;
      v119.size.width = v58;
      v119.size.height = v59;
      v25 = a6 - (v56 + CGRectGetHeight(v119));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      a4 = v52;
      a3 = v103;
    }
  }
  else
  {
    sub_1AC6DA314((uint64_t)&v110);
    v25 = a6;
    v107 = a4;
  }
  sub_1AC6D9918((uint64_t)(v7 + 128), (uint64_t)&v110);
  if (*(_QWORD *)&v110.d)
  {
    sub_1AC68AAA4((__int128 *)&v110, (uint64_t)v111);
    v60 = v112;
    v61 = v113;
    __swift_project_boxed_opaque_existential_1(v111, v112);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61) & 1) == 0)
    {
      v62 = v112;
      v63 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      v64 = (*(double (**)(void *, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(v63 + 8) + 8))(a1, v62, a5, a6);
      v66 = v65;
      v67 = v7[1];
      MinY = v64;
      if (v67)
      {
        v68 = v64;
        v69 = a3;
        v70 = a4;
        v71 = a5;
        v72 = a6;
        if (v67 == 1)
        {
          v73 = CGRectGetMidX(*(CGRect *)&v69) + v68 * -0.5;
          v74 = *(_QWORD *)&v106;
          (*(void (**)(double, _QWORD, uint64_t))(v108 + 104))(COERCE_DOUBLE(*(_QWORD *)&v106), *MEMORY[0x1E0DED508], v14);
          v75 = objc_msgSend(a1, sel_traitCollection);
          objc_msgSend(v75, sel_displayScale);
          if (v76 <= 0.0)
            v76 = ForJetUIOnly_MainScreenScale();
          v77 = sub_1AC68EE10(v74, v76, v73);

          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v74, v14);
        }
        else
        {
          v77 = CGRectGetWidth(*(CGRect *)&v69) - v68;
        }
      }
      else
      {
        v120.origin.x = a3;
        v120.origin.y = a4;
        v120.size.width = a5;
        v120.size.height = a6;
        v77 = CGRectGetMinX(v120);
      }
      v121.origin.x = a3;
      v121.origin.y = a4;
      v121.size.width = a5;
      v121.size.height = a6;
      v106 = CGRectGetMaxY(v121) - v66;
      v78 = v112;
      v79 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      v80 = objc_msgSend(a1, sel_traitCollection);
      v81 = objc_msgSend(v80, sel_layoutDirection);

      v105 = v66;
      if (v81 == (id)1)
      {
        CGAffineTransformMakeScale(&v110, -1.0, 1.0);
        v101 = *(_OWORD *)&v110.a;
        v100 = *(_OWORD *)&v110.c;
        *(double *)&v102 = v25;
        v86 = v110.tx;
        v85 = v110.ty;
        v122.origin.x = a3;
        v122.origin.y = a4;
        v122.size.width = a5;
        v122.size.height = a6;
        v87 = CGRectGetMinX(v122);
        v123.origin.x = a3;
        v123.origin.y = a4;
        v123.size.width = a5;
        v123.size.height = a6;
        MaxX = CGRectGetMaxX(v123);
        *(_OWORD *)&v110.a = v101;
        *(_OWORD *)&v110.c = v100;
        v110.tx = v86;
        v110.ty = v85;
        v25 = *(double *)&v102;
        CGAffineTransformTranslate(&v109, &v110, -(v87 + MaxX), 0.0);
        v110 = v109;
        v124.origin.x = v77;
        v124.origin.y = v106;
        v89 = MinY;
        v124.size.width = MinY;
        v124.size.height = v105;
        *(CGRect *)((char *)&v82 - 8) = CGRectApplyAffineTransform(v124, &v110);
        v90 = v77;
        v77 = v91;
      }
      else
      {
        v90 = v77;
        v82.n128_f64[0] = v106;
        v84.n128_f64[0] = v66;
        v89 = MinY;
        v83.n128_f64[0] = MinY;
      }
      (*(void (**)(uint64_t, uint64_t, double, __n128, __n128, __n128))(v79 + 24))(v78, v79, v77, v82, v83, v84);
      v92 = *((_QWORD *)v7 + 24);
      v93 = *((_QWORD *)v7 + 25);
      __swift_project_boxed_opaque_existential_1((_QWORD *)v7 + 21, v92);
      sub_1AC68E57C((uint64_t)v18);
      AnyDimension.value(in:rounded:)((uint64_t)a1, (uint64_t)v18, v92, v93);
      v95 = v94;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v18, v14);
      v125.origin.x = v90;
      v125.origin.y = v106;
      v125.size.width = v89;
      v125.size.height = v105;
      v25 = v25 - (v95 + CGRectGetHeight(v125));
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
  }
  else
  {
    sub_1AC6DA314((uint64_t)&v110);
  }
  v96 = v7 + 8;
  v98 = *((_QWORD *)v7 + 4);
  v97 = *((_QWORD *)v7 + 5);
  __swift_project_boxed_opaque_existential_1(v96, v98);
  (*(void (**)(CGAffineTransform *__return_ptr, void *, uint64_t, uint64_t, CGFloat, double, CGFloat, double))(v97 + 8))(&v110, a1, v98, v97, a3, v107, a5, v25);
  v126.origin.x = a3;
  v126.origin.y = a4;
  v126.size.width = a5;
  v126.size.height = a6;
  Height = CGRectGetHeight(v126);
  *(CGFloat *)a2 = a3;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(CGFloat *)(a2 + 32) = Height;
  *(_QWORD *)(a2 + 40) = 0;
}

uint64_t sub_1AC6DA314(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDBC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AC6DA35C()
{
  unint64_t result;

  result = qword_1EEC8B230;
  if (!qword_1EEC8B230)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for FlankedVerticalLayout.Alignment, &type metadata for FlankedVerticalLayout.Alignment);
    atomic_store(result, (unint64_t *)&qword_1EEC8B230);
  }
  return result;
}

uint64_t destroy for FlankedVerticalLayout(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  if (*(_QWORD *)(a1 + 152))
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 168);
}

uint64_t initializeWithCopy for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, a2 + 88);
  v11 = (_OWORD *)(a1 + 128);
  v12 = (_OWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 152);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v11, v12);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 144);
    *v11 = *v12;
    *(_OWORD *)(a1 + 144) = v15;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 168, a2 + 168);
  return a1;
}

uint64_t assignWithCopy for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  v7 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 152) = v7;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
      goto LABEL_15;
    }
LABEL_14:
    v8 = *(_OWORD *)(a2 + 128);
    v9 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 144) = v9;
    goto LABEL_15;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
LABEL_15:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for FlankedVerticalLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 152))
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  __swift_destroy_boxed_opaque_existential_1(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlankedVerticalLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FlankedVerticalLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlankedVerticalLayout()
{
  return &type metadata for FlankedVerticalLayout;
}

uint64_t storeEnumTagSinglePayload for FlankedVerticalLayout.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AC6DA844 + 4 * byte_1AC72D145[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AC6DA878 + 4 * asc_1AC72D140[v4]))();
}

uint64_t sub_1AC6DA878(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DA880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6DA888);
  return result;
}

uint64_t sub_1AC6DA894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6DA89CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AC6DA8A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DA8A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlankedVerticalLayout.Alignment()
{
  return &type metadata for FlankedVerticalLayout.Alignment;
}

id sub_1AC6DA8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_1AC725968();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED0BD770 != -1)
    swift_once();
  sub_1AC72664C();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
  objc_msgSend(v4, sel_setAlignment_, 4);
  sub_1AC72592C();
  v5 = sub_1AC725944();
  swift_bridgeObjectRelease();
  v6 = 1;
  if (v5 != 2)
    v6 = -1;
  if (v5 == 1)
    v7 = 0;
  else
    v7 = v6;
  objc_msgSend(v4, sel_setBaseWritingDirection_, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

id sub_1AC6DA9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_1AC725968();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED0BD770 != -1)
    swift_once();
  sub_1AC72664C();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
  objc_msgSend(v4, sel_setFirstLineHeadIndent_, 0.0);
  objc_msgSend(v4, sel_setHeadIndent_, 40.0);
  sub_1AC6DABC4();
  v5 = (void *)sub_1AC726394();
  objc_msgSend(v4, sel_setTabStops_, v5);

  objc_msgSend(v4, sel_setDefaultTabInterval_, 40.0);
  objc_msgSend(v4, sel_setParagraphSpacing_, 18.0);
  objc_msgSend(v4, sel_setAlignment_, 4);
  sub_1AC72592C();
  v6 = sub_1AC725944();
  swift_bridgeObjectRelease();
  v7 = 1;
  if (v6 != 2)
    v7 = -1;
  if (v6 == 1)
    v8 = 0;
  else
    v8 = v7;
  objc_msgSend(v4, sel_setBaseWritingDirection_, v8);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t sub_1AC6DABC4()
{
  unint64_t result;

  result = qword_1EEC8B238;
  if (!qword_1EEC8B238)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEC8B238);
  }
  return result;
}

JUMeasurements __swiftcall UILabel.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  void *v2;
  CGFloat height;
  CGFloat width;
  unint64_t v5;
  unint64_t v6;
  CGSize v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  JUMeasurements result;

  height = toFit.height;
  width = toFit.width;
  objc_msgSend(v2, sel_sizeThatFits_);
  v7 = constrainWidth(of:toFit:)((CGSize)__PAIR128__(v6, v5), (CGSize)__PAIR128__(*(unint64_t *)&height, *(unint64_t *)&width));
  objc_msgSend(v2, sel__firstBaselineOffsetFromTop);
  v9 = v8;
  objc_msgSend(v2, sel__baselineOffsetFromBottom);
  v11 = v10;
  v12 = v7.width;
  v13 = v7.height;
  v14 = v9;
  result.var3 = v11;
  result.var2 = v14;
  result.var1 = v13;
  result.var0 = v12;
  return result;
}

uint64_t VerticalSplitLayout.init(prioritySublayout:otherSublayout:priorityPosition:spacing:useLastBaseline:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v10;
  uint64_t result;

  v10 = *a3;
  sub_1AC6DACE4(a1, (_OWORD *)a6);
  sub_1AC6DACE4(a2, (_OWORD *)(a6 + 48));
  *(_BYTE *)(a6 + 96) = v10;
  result = sub_1AC68AAA4(a4, a6 + 104);
  *(_BYTE *)(a6 + 144) = a5;
  return result;
}

_OWORD *sub_1AC6DACE4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t VerticalSplitLayout.prioritySublayout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6DAD08(v1, a1);
}

uint64_t sub_1AC6DAD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *VerticalSplitLayout.prioritySublayout.setter(__int128 *a1)
{
  _OWORD *v1;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  return sub_1AC6DACE4(a1, v1);
}

double (*VerticalSplitLayout.prioritySublayout.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.otherSublayout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC6DAD08(v1 + 48, a1);
}

_OWORD *VerticalSplitLayout.otherSublayout.setter(__int128 *a1)
{
  uint64_t v1;
  _OWORD *v3;

  v3 = (_OWORD *)(v1 + 48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return sub_1AC6DACE4(a1, v3);
}

double (*VerticalSplitLayout.otherSublayout.modify())(void)
{
  return nullsub_1;
}

JetUI::VerticalSplitLayout::Position_optional __swiftcall VerticalSplitLayout.Position.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (JetUI::VerticalSplitLayout::Position_optional)rawValue;
}

uint64_t VerticalSplitLayout.Position.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *sub_1AC6DADF8@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1AC6DAE18(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void VerticalSplitLayout.priorityPosition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *VerticalSplitLayout.priorityPosition.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

double (*VerticalSplitLayout.priorityPosition.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1AC68E218(v1 + 104, a1);
}

uint64_t VerticalSplitLayout.spacing.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 104;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_1AC68AAA4(a1, v3);
}

double (*VerticalSplitLayout.spacing.modify())(void)
{
  return nullsub_1;
}

uint64_t VerticalSplitLayout.useLastBaseline.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t VerticalSplitLayout.useLastBaseline.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 144) = result;
  return result;
}

double (*VerticalSplitLayout.useLastBaseline.modify())(void)
{
  return nullsub_1;
}

void VerticalSplitLayout.placeChildren(relativeTo:in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double Width;
  char v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  double MinY;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  double Height;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  CGFloat v51;
  CGFloat v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double MinX;
  CGFloat v59;
  _QWORD v60[6];
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;

  v7 = v6;
  v14 = sub_1AC726A48();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(v6 + 104);
  v19 = *(_QWORD *)(v6 + 128);
  v20 = *(_QWORD *)(v7 + 136);
  __swift_project_boxed_opaque_existential_1(v18, v19);
  sub_1AC68E57C((uint64_t)v17);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v17, v19, v20);
  v56 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v22 = *(_QWORD *)(v7 + 24);
  v23 = *(_QWORD *)(v7 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v7, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, CGFloat, CGFloat))(v23 + 8))(a1, v22, v23, a5, a6);
  v25 = v24;
  v61.origin.x = a3;
  v61.origin.y = a4;
  v61.size.width = a5;
  v61.size.height = a6;
  MinX = CGRectGetMinX(v61);
  v62.origin.x = a3;
  v62.origin.y = a4;
  v62.size.width = a5;
  v62.size.height = a6;
  Width = CGRectGetWidth(v62);
  v27 = *(_BYTE *)(v7 + 96);
  v59 = a5;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  if ((v27 & 1) != 0)
    MinY = CGRectGetMaxY(*(CGRect *)&v28) - v25;
  else
    MinY = CGRectGetMinY(*(CGRect *)&v28);
  v57 = MinY;
  v33 = a3;
  v34 = *(_QWORD *)(v7 + 24);
  v35 = *(_QWORD *)(v7 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v7, v34);
  v36 = v57;
  v37 = MinX;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, double, double))(v35 + 8))(v60, a1, v34, v35, MinX, v57, Width, v25);
  v38 = Width;
  v39 = *(double *)&v60[3];
  v53 = *(double *)&v60[5];
  v63.origin.x = v33;
  v63.origin.y = a4;
  v40 = v59;
  v63.size.width = v59;
  v63.size.height = a6;
  v55 = CGRectGetMinX(v63);
  v64.origin.x = v33;
  v64.origin.y = a4;
  v64.size.width = v40;
  v64.size.height = a6;
  v54 = CGRectGetWidth(v64);
  v65.origin.x = v33;
  v65.origin.y = a4;
  v65.size.width = v40;
  v65.size.height = a6;
  Height = CGRectGetHeight(v65);
  v66.origin.x = v37;
  v66.origin.y = v36;
  v52 = v38;
  v66.size.width = v38;
  v42 = v39;
  v66.size.height = v39;
  v43 = Height - CGRectGetHeight(v66) - v56;
  if ((v27 & 1) != 0)
  {
    v67.origin.x = v33;
    v67.origin.y = a4;
    v44 = v59;
    v67.size.width = v59;
    v67.size.height = a6;
    v45 = CGRectGetMinY(v67);
  }
  else
  {
    v46 = v56;
    v68.origin.y = v57;
    v68.origin.x = MinX;
    v68.size.width = v52;
    v68.size.height = v42;
    v47 = v46 + CGRectGetMaxY(v68);
    if ((*(_BYTE *)(v7 + 144) & 1) != 0)
    {
      v43 = v53 + v43;
      v45 = v47 - v53;
    }
    else
    {
      v45 = v47;
    }
    v44 = v59;
  }
  v48 = (_QWORD *)(v7 + 48);
  v50 = *(_QWORD *)(v7 + 72);
  v49 = *(_QWORD *)(v7 + 80);
  __swift_project_boxed_opaque_existential_1(v48, v50);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, double, double, double, double))(v49 + 8))(v60, a1, v50, v49, v55, v45, v54, v43);
  v69.origin.x = v33;
  v69.origin.y = a4;
  v69.size.width = v44;
  v69.size.height = a6;
  v51 = CGRectGetHeight(v69);
  *(CGFloat *)a2 = v33;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = v44;
  *(CGFloat *)(a2 + 24) = a6;
  *(CGFloat *)(a2 + 32) = v51;
  *(_QWORD *)(a2 + 40) = 0;
}

unint64_t sub_1AC6DB1DC()
{
  unint64_t result;

  result = qword_1EEC8B240;
  if (!qword_1EEC8B240)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for VerticalSplitLayout.Position, &type metadata for VerticalSplitLayout.Position);
    atomic_store(result, (unint64_t *)&qword_1EEC8B240);
  }
  return result;
}

uint64_t destroy for VerticalSplitLayout(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 104);
}

uint64_t initializeWithCopy for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  (**(void (***)(void))(v5 - 8))();
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = v6;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 104, a2 + 104);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t assignWithCopy for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_2((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_2((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for VerticalSplitLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerticalSplitLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalSplitLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalSplitLayout()
{
  return &type metadata for VerticalSplitLayout;
}

uint64_t storeEnumTagSinglePayload for VerticalSplitLayout.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6DB670 + 4 * byte_1AC72D245[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6DB6A4 + 4 * byte_1AC72D240[v4]))();
}

uint64_t sub_1AC6DB6A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DB6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6DB6B4);
  return result;
}

uint64_t sub_1AC6DB6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6DB6C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6DB6CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DB6D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalSplitLayout.Position()
{
  return &type metadata for VerticalSplitLayout.Position;
}

uint64_t Models.ProgrammedText.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  BOOL v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41[10];
  char v42;
  uint64_t v43;

  v40 = a3;
  v43 = a2;
  v4 = sub_1AC725C74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - v9;
  sub_1AC725C80();
  v11 = sub_1AC725C68();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  if (!v13)
  {
    v20 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v22 = v21;
    *v21 = 0x646E696B24;
    v21[1] = 0xE500000000000000;
LABEL_11:
    v21[2] = (uint64_t)&type metadata for Models.ProgrammedText;
    v23 = (unsigned int *)MEMORY[0x1E0D414E8];
    goto LABEL_12;
  }
  sub_1AC725C80();
  v15 = (id)sub_1AC725C68();
  v17 = v16;
  v14(v7, v4);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    v20 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v22 = v21;
    *v21 = 1954047348;
    v21[1] = 0xE400000000000000;
    goto LABEL_11;
  }
  v18 = v11 == 0x6E69616C70 && v13 == 0xE500000000000000;
  if (!v18 && (sub_1AC726A78() & 1) == 0)
  {
    v27 = v11 == 1751345522 && v13 == 0xE400000000000000;
    if (v27 || (sub_1AC726A78() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v28 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 15.0);
      v29 = sub_1AC6DA8C4();
      v30 = sub_1AC6DA9F8();
      v31 = sub_1AC6DA9F8();

      v41[0] = 10;
      v41[1] = 0xE100000000000000;
      v41[2] = (uint64_t)v28;
      v41[3] = (uint64_t)v29;
      v41[4] = 161644770;
      v41[5] = 0xA400000000000000;
      v41[6] = v30;
      v41[7] = 606245;
      v41[8] = 0xE300000000000000;
      v41[9] = v31;
      v42 = 0;
      v32 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
      v33 = sub_1AC71D9DC((uint64_t)v15, v17, v41);
      objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
      v34 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
      v35 = objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
      if (qword_1EEC8A278 != -1)
        swift_once();
      sub_1AC6D5BAC((void *)qword_1EEC8B988);

      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, *(_QWORD *)&v33[v34]);
      v17 = 0;
      v19 = 1;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    v20 = sub_1AC726118();
    sub_1AC6AE968();
    swift_allocError();
    v22 = v38;
    *v38 = v11;
    v38[1] = v13;
    v38[2] = (uint64_t)&type metadata for Models.ProgrammedText;
    v23 = (unsigned int *)MEMORY[0x1E0D414D8];
LABEL_12:
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *v23, v20);
    v24 = v43;
    swift_willThrow();
    v25 = sub_1AC725D58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(a1, v4);
  }
  swift_bridgeObjectRelease();
  v19 = 0;
LABEL_21:
  v36 = sub_1AC725D58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v43, v36);
  result = ((uint64_t (*)(uint64_t, uint64_t))v14)(a1, v4);
  v37 = v40;
  *v40 = v15;
  v37[1] = v17;
  *((_BYTE *)v37 + 16) = v19;
  return result;
}

void Models.ProgrammedText.mediaType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void *Models.ProgrammedText.text.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v3 = objc_msgSend(v1, sel_string);
    v4 = sub_1AC72622C();

    sub_1AC68A814(v1, v2, 1);
    return (void *)v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t Models.ProgrammedText.MediaType.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t Models.ProgrammedText.MediaType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x616C702F74786574;
}

uint64_t sub_1AC6DBC94(char *a1, char *a2)
{
  return sub_1AC70B6B0(*a1, *a2);
}

uint64_t sub_1AC6DBCA0()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6DBD28()
{
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6DBD8C()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6DBE10@<X0>(char *a1@<X8>)
{
  return Models.ProgrammedText.MediaType.init(rawValue:)(a1);
}

void sub_1AC6DBE1C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x616C702F74786574;
  if (*v1)
    v2 = 0xD000000000000015;
  v3 = 0x80000001AC7301E0;
  if (!*v1)
    v3 = 0xEA00000000006E69;
  *a1 = v2;
  a1[1] = v3;
}

id Models.ProgrammedText.attributedText.getter()
{
  uint64_t v0;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return *(id *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v6 = *(id *)v0;
  v3 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_1AC726208();
  sub_1AC68A814(v6, v2, 0);
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return v5;
}

uint64_t sub_1AC6DBF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Models.ProgrammedText.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_1AC6DBF20(char *a1, char *a2)
{
  return sub_1AC70B75C(*a1, *a2);
}

uint64_t sub_1AC6DBF2C()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6DBFA0()
{
  sub_1AC7262A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6DBFF0()
{
  sub_1AC726AFC();
  sub_1AC7262A4();
  swift_bridgeObjectRelease();
  return sub_1AC726B2C();
}

uint64_t sub_1AC6DC060@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1AC6DC0BC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1954047348;
  if (!*v1)
    v2 = 0x646E696B24;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1AC6DC0F0()
{
  _BYTE *v0;

  if (*v0)
    return 1954047348;
  else
    return 0x646E696B24;
}

uint64_t sub_1AC6DC120@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AC726994();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1AC6DC180(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1AC6DC18C()
{
  sub_1AC6DC610();
  return sub_1AC726BB0();
}

uint64_t sub_1AC6DC1B4()
{
  sub_1AC6DC610();
  return sub_1AC726BBC();
}

uint64_t Models.ProgrammedText.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  BOOL v18;
  id v19;
  id v20;
  id v21;
  char *v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B248);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC6DC610();
  sub_1AC726B50();
  if (!v2)
  {
    v9 = a2;
    LOBYTE(v29) = 0;
    v10 = sub_1AC7269AC();
    v12 = v11;
    LOBYTE(v29) = 1;
    v13 = (id)sub_1AC7269AC();
    v15 = v14;
    v28 = v13;
    v16 = v10 == 0x6E69616C70 && v12 == 0xE500000000000000;
    if (v16 || (sub_1AC726A78() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      v17 = 0;
    }
    else
    {
      v18 = v10 == 1751345522 && v12 == 0xE400000000000000;
      if (!v18 && (sub_1AC726A78() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v40 = 0;
        v29 = 0;
        v30 = 0xE000000000000000;
        sub_1AC726868();
        swift_bridgeObjectRelease();
        v29 = v10;
        v30 = v12;
        sub_1AC7262C8();
        sub_1AC7268A4();
        swift_allocError();
        sub_1AC6DC654();
        sub_1AC726898();
        swift_bridgeObjectRelease();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      swift_bridgeObjectRelease();
      v19 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 15.0);
      v20 = sub_1AC6DA8C4();
      v26 = sub_1AC6DA9F8();
      v27 = sub_1AC6DA9F8();

      v29 = 10;
      v30 = 0xE100000000000000;
      v31 = v19;
      v32 = v20;
      v33 = 161644770;
      v34 = 0xA400000000000000;
      v35 = v26;
      v36 = 606245;
      v37 = 0xE300000000000000;
      v38 = v27;
      v39 = 0;
      v21 = objc_allocWithZone((Class)type metadata accessor for NQMLStringGenerator());
      v22 = sub_1AC71D9DC((uint64_t)v28, v15, &v29);
      objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_parser], sel_parse);
      v23 = OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator;
      v24 = objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC5JetUIP33_F1C4EBA6165AEBFE43471B55508F17DF19NQMLStringGenerator_accumulator], sel_mutableString);
      if (qword_1EEC8A278 != -1)
        swift_once();
      sub_1AC6D5BAC((void *)qword_1EEC8B988);

      v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, *(_QWORD *)&v22[v23]);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v15 = 0;
      v17 = 1;
    }
    *(_QWORD *)v9 = v28;
    *(_QWORD *)(v9 + 8) = v15;
    *(_BYTE *)(v9 + 16) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AC6DC5FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Models.ProgrammedText.init(from:)(a1, a2);
}

unint64_t sub_1AC6DC610()
{
  unint64_t result;

  result = qword_1EEC8B250;
  if (!qword_1EEC8B250)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72D57C, &_s14ProgrammedTextO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B250);
  }
  return result;
}

unint64_t sub_1AC6DC654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8B258;
  if (!qword_1EEC8B258)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8B248);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DED060], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8B258);
  }
  return result;
}

unint64_t sub_1AC6DC6A4()
{
  unint64_t result;

  result = qword_1EEC8B260;
  if (!qword_1EEC8B260)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.ProgrammedText.MediaType, &type metadata for Models.ProgrammedText.MediaType);
    atomic_store(result, (unint64_t *)&qword_1EEC8B260);
  }
  return result;
}

void _s14ProgrammedTextOwxx(uint64_t a1)
{
  sub_1AC68A814(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s14ProgrammedTextOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AC68CEF8(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ProgrammedTextOwca(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AC68CEF8(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AC68A814(v6, v7, v8);
  return a1;
}

uint64_t _s14ProgrammedTextOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AC68A814(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Models.ProgrammedText()
{
  return &type metadata for Models.ProgrammedText;
}

ValueMetadata *type metadata accessor for Models.ProgrammedText.MediaType()
{
  return &type metadata for Models.ProgrammedText.MediaType;
}

uint64_t _s14ProgrammedTextO9MediaTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AC6DC84C + 4 * byte_1AC72D34D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AC6DC880 + 4 * byte_1AC72D348[v4]))();
}

uint64_t sub_1AC6DC880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DC888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AC6DC890);
  return result;
}

uint64_t sub_1AC6DC89C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AC6DC8A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AC6DC8A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AC6DC8B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14ProgrammedTextO10CodingKeysOMa()
{
  return &_s14ProgrammedTextO10CodingKeysON;
}

unint64_t sub_1AC6DC8D0()
{
  unint64_t result;

  result = qword_1EEC8B268;
  if (!qword_1EEC8B268)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72D554, &_s14ProgrammedTextO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B268);
  }
  return result;
}

unint64_t sub_1AC6DC918()
{
  unint64_t result;

  result = qword_1EEC8B270;
  if (!qword_1EEC8B270)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72D48C, &_s14ProgrammedTextO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B270);
  }
  return result;
}

unint64_t sub_1AC6DC960()
{
  unint64_t result;

  result = qword_1EEC8B278;
  if (!qword_1EEC8B278)
  {
    result = MEMORY[0x1AF440830](&unk_1AC72D4B4, &_s14ProgrammedTextO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEC8B278);
  }
  return result;
}

void Baselines.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double Baselines.last.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

BOOL static Baselines.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void static Baselines.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Baselines.first.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*Baselines.first.modify())(void)
{
  return nullsub_1;
}

void Baselines.last.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double (*Baselines.last.modify())(void)
{
  return nullsub_1;
}

BOOL sub_1AC6DCA18(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Void __swiftcall CGSize.subtract(insets:)(UIEdgeInsets insets)
{
  double *v1;
  double v2;

  v2 = v1[1] - (insets.top + insets.bottom);
  *v1 = *v1 - (insets.left + insets.right);
  v1[1] = v2;
}

CGSize __swiftcall CGSize.adding(outsets:)(UIEdgeInsets outsets)
{
  double v1;
  double v2;
  CGFloat v3;
  double v4;
  double v5;
  CGSize result;

  v3 = outsets.left + outsets.right + v1;
  v4 = outsets.top + outsets.bottom + v2;
  v5 = v3;
  result.height = v4;
  result.width = v5;
  return result;
}

id UIView.measurements(fitting:in:)()
{
  void *v0;

  return objc_msgSend(v0, sel_sizeThatFits_);
}

double UILabel.measurements(fitting:in:)(double a1, double a2)
{
  void *v2;
  unint64_t v5;
  unint64_t v6;
  double v7;

  objc_msgSend(v2, sel_sizeThatFits_);
  *(_QWORD *)&v7 = *(_OWORD *)&constrainWidth(of:toFit:)((CGSize)__PAIR128__(v6, v5), (CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  objc_msgSend(v2, sel__firstBaselineOffsetFromTop);
  objc_msgSend(v2, sel__baselineOffsetFromBottom);
  return v7;
}

double sub_1AC6DCB24(void *a1, double a2)
{
  id v4;
  double v5;

  swift_unknownObjectRetain();
  v4 = a1;
  v5 = _sSo8UIButtonC5JetUIE12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(a2);
  swift_unknownObjectRelease();

  return v5;
}

double _sSo8UIButtonC5JetUIE12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(double a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  CGFloat v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  _BOOL4 v12;
  _BOOL4 v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat Height;
  double v34;
  CGRect v36;
  CGRect v37;

  objc_msgSend(v1, sel_sizeThatFits_);
  v3 = v2;
  v5 = v4;
  objc_msgSend(v1, sel_bounds);
  v9 = v8;
  v11 = v10;
  v12 = v6 == 0.0;
  v13 = v7 == 0.0;
  if (!v12 || !v13)
    v5 = v7;
  v34 = v3;
  if (v12 && v13)
    v14 = v3;
  else
    v14 = v6;
  objc_msgSend(v1, sel_contentRectForBounds_);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v36.origin.x = v9;
  v36.origin.y = v11;
  v36.size.width = v14;
  v36.size.height = v5;
  Height = CGRectGetHeight(v36);
  v37.origin.x = v16;
  v37.origin.y = v18;
  v37.size.width = v20;
  v37.size.height = v22;
  CGRectGetMaxY(v37);
  v23 = objc_msgSend(v1, sel_titleLabel);
  if (v23)
  {
    v24 = v23;
    objc_msgSend(v23, sel__baselineOffsetFromBottom);

  }
  objc_msgSend(v1, sel_contentEdgeInsets, *(_QWORD *)&Height);
  objc_msgSend(v1, sel_titleEdgeInsets);
  objc_msgSend(v1, sel_contentEdgeInsets);
  objc_msgSend(v1, sel_titleEdgeInsets);
  v25 = objc_msgSend(v1, sel_titleLabel);
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v25, sel__firstBaselineOffsetFromTop);

  }
  v27 = v20;
  v28 = v22;
  if (v34 <= a1)
    v29 = v34;
  else
    v29 = a1;
  v31 = v18;
  v30 = v16;
  CGRectGetMinY(*(CGRect *)(&v27 - 2));
  return v29;
}

uint64_t sub_1AC6DCDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[5];
  __int128 v5[2];

  sub_1AC6DCEB8(v0 + 16, v0 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext);
  sub_1AC68E218(v0 + 16, (uint64_t)v5);
  v1 = swift_allocObject();
  sub_1AC68AAA4(v5, v1 + 16);
  sub_1AC68E218(v0 + 16, (uint64_t)v5);
  v2 = swift_allocObject();
  sub_1AC68AAA4(v5, v2 + 16);
  v4[3] = sub_1AC725F08();
  v4[4] = MEMORY[0x1E0D40248];
  __swift_allocate_boxed_opaque_existential_0(v4);
  sub_1AC725EFC();
  sub_1AC7260C4();
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t sub_1AC6DCEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a2;
  v23 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EEC8ABA8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1AC725F74();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AC725EC0();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - v10;
  sub_1AC725E9C();
  v12 = sub_1AC725EA8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - v14;
  sub_1AC6B35A0(v21, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1AC6916CC((uint64_t)v4, qword_1EEC8ABA8);
    v16 = (unsigned int *)MEMORY[0x1E0D3FEC8];
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v17(v8, v4, v5);
    v17(v15, v8, v5);
    v16 = (unsigned int *)MEMORY[0x1E0D3FEC0];
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *v16, v12);
  v18 = sub_1AC725EB4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  return v18;
}

uint64_t sub_1AC6DD0BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v14[4];
  _QWORD v15[4];

  v3 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1AC725DE8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D3F980], v4);
  v8 = sub_1AC725DDC();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    sub_1AC7260DC();
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
    sub_1AC725D10();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1AC729820;
    sub_1AC725CD4();
    sub_1AC725CC8();
    v10 = a2[3];
    v11 = __swift_project_boxed_opaque_existential_1(a2, v10);
    v14[3] = v10;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v14);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_0, v11, v10);
    sub_1AC725CBC();
    sub_1AC6916CC((uint64_t)v14, (uint64_t *)&unk_1ED0BE0D0);
    sub_1AC725CC8();
    sub_1AC725CEC();
    sub_1AC725C8C();
    sub_1AC72601C();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return result;
}

uint64_t sub_1AC6DD300(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11;
  _QWORD v12[4];

  v3 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v3);
  sub_1AC7260DC();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
  sub_1AC725D10();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1AC727FC0;
  sub_1AC725CD4();
  sub_1AC725CC8();
  v4 = a2[3];
  v5 = __swift_project_boxed_opaque_existential_1(a2, v4);
  v11 = v4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v10);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_0, v5, v4);
  sub_1AC725CBC();
  sub_1AC6916CC((uint64_t)v10, (uint64_t *)&unk_1ED0BE0D0);
  sub_1AC725CC8();
  swift_getErrorValue();
  v11 = v9;
  v7 = __swift_allocate_boxed_opaque_existential_0(v10);
  (*(void (**)(uint64_t *))(*(_QWORD *)(v9 - 8) + 16))(v7);
  sub_1AC725CA4();
  sub_1AC6916CC((uint64_t)v10, (uint64_t *)&unk_1ED0BE0D0);
  sub_1AC725CC8();
  sub_1AC725CEC();
  sub_1AC72601C();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_1AC6DD52C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_1AC6916CC(v0 + OBJC_IVAR____TtC5JetUI17JUActionPerformer_metricsContext, qword_1EEC8ABA8);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AC6DD57C()
{
  return type metadata accessor for JUActionPerformer();
}

uint64_t type metadata accessor for JUActionPerformer()
{
  uint64_t result;

  result = qword_1EEC8B290;
  if (!qword_1EEC8B290)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1AC6DD5C0()
{
  unint64_t v0;

  sub_1AC6DD644();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1AC6DD644()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEC8B2A0)
  {
    sub_1AC725F74();
    v0 = sub_1AC7266C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEC8B2A0);
  }
}

uint64_t sub_1AC6DD698()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1AC6DD6BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6DD0BC(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_1AC6DD6C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6DD300(a1, (_QWORD *)(v1 + 16));
}

uint64_t static DiffableData.makeSnapshot<A, B>(fromSections:withItemsAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t (*v46)(char *, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD v56[4];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];
  uint64_t AssociatedTypeWitness;

  v70 = a4;
  v71 = a5;
  v81 = a3;
  v82 = a2;
  v6 = *a2;
  v7 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1AC72610C();
  v80 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v67 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(v6 + *MEMORY[0x1E0DEE2A8]);
  v11 = *v10;
  v12 = sub_1AC725DB8();
  v65 = sub_1AC7266C4();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v63 = (char *)v56 - v13;
  v14 = *(_QWORD *)(v11 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v16);
  v62 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v83 = (char *)v56 - v18;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v56 - v20;
  v22 = v10[1];
  v61 = *(_QWORD *)(v22 + 16);
  v23 = sub_1AC725DB8();
  v24 = MEMORY[0x1E0D3F890];
  v25 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v12);
  v26 = MEMORY[0x1AF440830](v24, v23);
  v66 = v12;
  v60 = v23;
  v59 = v25;
  v58 = v26;
  sub_1AC725A94();
  v27 = swift_bridgeObjectRetain();
  v85 = a1;
  v28 = v11;
  if (!MEMORY[0x1AF43F9FC](v27, v11))
    return swift_bridgeObjectRelease();
  v77 = v22;
  v56[0] = v15;
  v29 = 0;
  v76 = 0;
  v57 = xmmword_1AC729820;
  v56[3] = 0x80000001AC731630;
  v56[2] = 0x80000001AC731650;
  v56[1] = 0x80000001AC731670;
  v78 = v21;
  v79 = v14;
  v30 = v83;
  while (1)
  {
    v45 = sub_1AC726400();
    sub_1AC7263C4();
    if ((v45 & 1) == 0)
      break;
    v46 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v14 + 16);
    result = v46(v21, v85+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v29, v28);
    v48 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_17;
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v30, v21, v28);
    swift_getAtKeyPath();
    v49 = v86[0];
    v50 = v77;
    v51 = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v77);
    v52 = sub_1AC7265B0();
    v84 = v48;
    if ((v52 & 1) != 0)
    {
      v40 = v28;
      swift_bridgeObjectRelease();
      if (qword_1EEC8A210 != -1)
        swift_once();
      v53 = v68;
      v54 = __swift_project_value_buffer(v68, (uint64_t)qword_1EEC95CB8);
      v55 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v67, v54, v53);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
      sub_1AC725D10();
      *(_OWORD *)(swift_allocObject() + 16) = v57;
      sub_1AC725CD4();
      sub_1AC725CC8();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0(v86);
      sub_1AC726874();
      sub_1AC725C98();
      sub_1AC690CC0((uint64_t)v86);
      sub_1AC725CC8();
      sub_1AC725CEC();
      sub_1AC725C8C();
      sub_1AC726028();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v55, v53);
    }
    else
    {
      v31 = v66;
      sub_1AC726A3C();
      v75 = *(_QWORD *)(v31 - 8);
      swift_allocObject();
      v32 = sub_1AC7263B8();
      v74 = v51;
      v46(v62, (unint64_t)v30, v28);
      v33 = v81;
      sub_1AC725DAC();
      v86[0] = v32;
      v34 = sub_1AC72646C();
      nullsub_1(v34);
      v35 = v60;
      v86[0] = v31;
      v86[1] = v60;
      v86[2] = v59;
      AssociatedTypeWitness = v58;
      v73 = sub_1AC725AA0();
      sub_1AC725A4C();
      v36 = swift_bridgeObjectRelease();
      v72 = v56;
      v86[0] = v49;
      MEMORY[0x1E0C80A78](v36);
      v37 = v61;
      v56[-4] = v28;
      v56[-3] = v37;
      v38 = v70;
      v56[-2] = v33;
      v56[-1] = v38;
      v39 = v50;
      v40 = v28;
      v41 = v76;
      sub_1AC6DDF18((void (*)(char *, char *))sub_1AC6DEEA4, (uint64_t)&v56[-6], v39, v35, MEMORY[0x1E0DEDCE8], v74, MEMORY[0x1E0DEDD18], v42);
      v76 = v41;
      swift_bridgeObjectRelease();
      v43 = v63;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v63, 1, 1, v31);
      sub_1AC725A34();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v65);
    }
    v14 = v79;
    v30 = v83;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v83, v40);
    v44 = MEMORY[0x1AF43F9FC](v85, v40);
    ++v29;
    v28 = v40;
    v21 = v78;
    if (v84 == v44)
      return swift_bridgeObjectRelease();
  }
  result = sub_1AC726880();
  if (v56[0] != 8)
    goto LABEL_18;
  v86[0] = result;
  v46 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v14 + 16);
  v46(v21, (unint64_t)v86, v28);
  result = swift_unknownObjectRelease();
  v48 = v29 + 1;
  if (!__OFADD__(v29, 1))
    goto LABEL_7;
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AC6DDE88(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return sub_1AC725DAC();
}

uint64_t sub_1AC6DDF18(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v29 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_1AC72658C();
  if (!v20)
    return sub_1AC7263E8();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_1AC726154();
  v34 = sub_1AC7268F8();
  sub_1AC7268D4();
  v37 = v8;
  result = sub_1AC726580();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_1AC7265C8();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v13);
      v24(v43, 0);
      v28 = v42;
      v38(v13, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
      sub_1AC7268E0();
      result = sub_1AC726598();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static DiffableData.makeSnapshot<A>(fromShelves:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t (*v34)(char *, unint64_t, uint64_t);
  uint64_t result;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[4];
  __int128 v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76[32];
  uint64_t v77[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v79;

  v73 = a3;
  v7 = sub_1AC725CE0();
  MEMORY[0x1E0C80A78](v7);
  v54 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1AC72610C();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v63 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1AC725DB8();
  v60 = sub_1AC7266C4();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v58 = (char *)v52 - v15;
  v16 = *(_QWORD *)(a2 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v18);
  v57 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v72 = (char *)v52 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v75 = (char *)v52 - v23;
  v24 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v14, v22);
  v25 = sub_1AC6DEEC4();
  v70 = v14;
  v71 = a4;
  v26 = a1;
  v56 = v24;
  v55 = v25;
  sub_1AC725A94();
  v27 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1AF43F9FC](v27, a2))
    return swift_bridgeObjectRelease();
  v52[0] = v17;
  v28 = 0;
  v53 = xmmword_1AC729820;
  v52[3] = 0x80000001AC7316B0;
  v52[2] = 0x80000001AC731650;
  v52[1] = 0x80000001AC7316D0;
  v62 = a2;
  v66 = v16;
  v67 = a1;
  v29 = v72;
  while (1)
  {
    v32 = sub_1AC726400();
    sub_1AC7263C4();
    if ((v32 & 1) != 0)
    {
      v33 = v26
          + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
          + *(_QWORD *)(v16 + 72) * v28;
      v34 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v16 + 16);
      result = v34(v75, v33, a2);
    }
    else
    {
      result = sub_1AC726880();
      if (v52[0] != 8)
        goto LABEL_26;
      v77[0] = result;
      v34 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v16 + 16);
      v34(v75, (unint64_t)v77, a2);
      result = swift_unknownObjectRelease();
    }
    v36 = __OFADD__(v28, 1);
    v37 = v28 + 1;
    if (v36)
      break;
    v74 = v37;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v29, v75, a2);
    v38 = *(_QWORD *)(sub_1AC725D1C() + 16);
    swift_bridgeObjectRelease();
    if (v38)
    {
      v39 = v70;
      sub_1AC726A3C();
      v69 = *(_QWORD *)(v39 - 8);
      swift_allocObject();
      v40 = sub_1AC7263B8();
      v34(v57, (unint64_t)v72, a2);
      v29 = v72;
      sub_1AC725DAC();
      v77[0] = v40;
      v41 = sub_1AC72646C();
      nullsub_1(v41);
      v77[0] = v39;
      v77[1] = v10;
      v77[2] = v56;
      AssociatedTypeWitness = v55;
      v68 = sub_1AC725AA0();
      sub_1AC725A4C();
      swift_bridgeObjectRelease();
      v42 = sub_1AC725D1C();
      v43 = *(_QWORD *)(v42 + 16);
      if (v43)
      {
        v79 = MEMORY[0x1E0DEE9D8];
        sub_1AC6DEF10(0, v43, 0);
        v61 = v42;
        v44 = v42 + 32;
        v45 = v79;
        do
        {
          sub_1AC68E218(v44, (uint64_t)v77);
          sub_1AC68E218((uint64_t)v77, (uint64_t)v76);
          sub_1AC725DA0();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1AC6DEF10(0, *(_QWORD *)(v45 + 16) + 1, 1);
            v45 = v79;
          }
          v47 = *(_QWORD *)(v45 + 16);
          v46 = *(_QWORD *)(v45 + 24);
          if (v47 >= v46 >> 1)
          {
            sub_1AC6DEF10(v46 > 1, v47 + 1, 1);
            v45 = v79;
          }
          *(_QWORD *)(v45 + 16) = v47 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v45+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v47, v13, v10);
          v44 += 40;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease();
        a2 = v62;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v30 = v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v58, 1, 1, v70);
      sub_1AC725A34();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v60);
    }
    else
    {
      if (qword_1EEC8A210 != -1)
        swift_once();
      v48 = v65;
      v49 = __swift_project_value_buffer(v65, (uint64_t)qword_1EEC95CB8);
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v49, v48);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8A5E0);
      v69 = *(_QWORD *)(*(_QWORD *)(sub_1AC725D10() - 8) + 72);
      *(_OWORD *)(swift_allocObject() + 16) = v53;
      sub_1AC725CD4();
      sub_1AC725CC8();
      a2 = v62;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0(v77);
      sub_1AC726874();
      sub_1AC725C98();
      sub_1AC690CC0((uint64_t)v77);
      sub_1AC725CC8();
      sub_1AC725CEC();
      sub_1AC725C8C();
      v50 = v65;
      v51 = v63;
      sub_1AC726028();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v50);
    }
    v16 = v66;
    v26 = v67;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v29, a2);
    v31 = MEMORY[0x1AF43F9FC](v26, a2);
    v28 = v74;
    if (v74 == v31)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t static DiffableData.joinSnapshots<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_1AC725DB8();
  v9 = sub_1AC725DB8();
  v10 = MEMORY[0x1E0D3F890];
  v21 = v9;
  v22 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v8);
  v23 = MEMORY[0x1AF440830](v10, v9);
  v11 = sub_1AC725AA0();
  v12 = MEMORY[0x1E0C80A78](v11);
  v20 = a2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v13 + 16))(&v17[-v14], a1, v11, v12);
  v18 = a3;
  v19 = a4;
  v15 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF38], v15);
  return sub_1AC726364();
}

uint64_t sub_1AC6DEB64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  char *v40;

  v36 = a1;
  v3 = sub_1AC725DB8();
  v4 = sub_1AC7266C4();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v5;
  v6 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v7);
  v32 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v8;
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v28 - v10;
  v11 = sub_1AC725DB8();
  v12 = MEMORY[0x1E0D3F890];
  v13 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v3);
  v14 = MEMORY[0x1AF440830](v12, v11);
  v39[0] = v3;
  v39[1] = v11;
  v39[2] = v13;
  v39[3] = v14;
  v31 = sub_1AC725AA0();
  v37 = a2;
  v15 = sub_1AC725A88();
  if (!MEMORY[0x1AF43F9FC](v15, v3))
    return swift_bridgeObjectRelease();
  v16 = 0;
  v30 = v15;
  v17 = v33;
  while (1)
  {
    v18 = sub_1AC726400();
    sub_1AC7263C4();
    if ((v18 & 1) != 0)
    {
      v19 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      v19(v40, v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, v3);
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_1AC726880();
    if (v29 != 8)
      break;
    v39[0] = result;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v19(v40, (unint64_t)v39, v3);
    swift_unknownObjectRelease();
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    v38 = v20;
    v21 = v32;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v40, v3);
    sub_1AC726A3C();
    swift_allocObject();
    v22 = sub_1AC7263B8();
    v19(v23, (unint64_t)v21, v3);
    v39[0] = v22;
    v24 = sub_1AC72646C();
    nullsub_1(v24);
    sub_1AC725A4C();
    swift_bridgeObjectRelease();
    sub_1AC725A70();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v17, 1, 1, v3);
    sub_1AC725A34();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
    v25 = v21;
    v15 = v30;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v3);
    v26 = MEMORY[0x1AF43F9FC](v15, v3);
    ++v16;
    if (v38 == v26)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1AC6DEEA4(uint64_t a1)
{
  return sub_1AC6DDE88(a1);
}

unint64_t sub_1AC6DEEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0BE018;
  if (!qword_1ED0BE018)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0BE018);
  }
  return result;
}

size_t sub_1AC6DEF10(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1AC6DEF54(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1AC6DEF2C(uint64_t a1, uint64_t a2)
{
  return sub_1AC6DEB64(a1, a2);
}

ValueMetadata *type metadata accessor for DiffableData()
{
  return &type metadata for DiffableData;
}

size_t sub_1AC6DEF54(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE060);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_1AC6DF0D0(uint64_t a1)
{
  return sub_1AC697390(a1, qword_1EEC8B2A8, MEMORY[0x1E0DDB3A0]);
}

uint64_t static JULoadingViewController.PresentationContext.inline.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1AC68B694(&qword_1EEC8A1A8, (uint64_t)qword_1EEC8B2A8, a1);
}

id JULoadingViewController.__allocating_init(label:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7 = qword_1EEC8A1A8;
  v8 = v5;
  if (v7 != -1)
    swift_once();
  v9 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  v10 = __swift_project_value_buffer(v9, (uint64_t)qword_1EEC8B2A8);
  sub_1AC68BB50(v10, (uint64_t)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;

  v12.receiver = v8;
  v12.super_class = v2;
  return objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
}

id JULoadingViewController.init(label:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7 = qword_1EEC8A1A8;
  v8 = v2;
  if (v7 != -1)
    swift_once();
  v9 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  v10 = __swift_project_value_buffer(v9, (uint64_t)qword_1EEC8B2A8);
  sub_1AC68BB50(v10, (uint64_t)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;

  v12.receiver = v8;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
}

id JULoadingViewController.__allocating_init(label:presentationContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  id v9;
  objc_super v11;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  sub_1AC68BB50(a3, (uint64_t)&v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v7[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v11.receiver = v7;
  v11.super_class = v3;
  v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, 0, 0);
  sub_1AC68BB14(a3);
  return v9;
}

id JULoadingViewController.init(label:presentationContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = &v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  sub_1AC68BB50(a3, (uint64_t)&v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v11.receiver = v3;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, 0, 0);
  sub_1AC68BB14(a3);
  return v9;
}

id JULoadingViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void JULoadingViewController.init(coder:)()
{
  sub_1AC726910();
  __break(1u);
}

Swift::Void __swiftcall JULoadingViewController.encode(with:)(NSCoder with)
{
  sub_1AC726910();
  __break(1u);
}

id JULoadingViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void JULoadingViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id JULoadingViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static ObjCFunctions.makeLoadingViewController(withLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  objc_super v14;

  v4 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = qword_1ED0BDCA0;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED0BDD20);
  sub_1AC68BB50(v8, (uint64_t)v6);
  v9 = (objc_class *)type metadata accessor for JULoadingViewController(0);
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_label];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  sub_1AC68BB50((uint64_t)v6, (uint64_t)&v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_presentationContext]);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5JetUI23JULoadingViewController_pageRenderMetrics] = 0;
  v14.receiver = v10;
  v14.super_class = v9;
  v12 = objc_msgSendSuper2(&v14, sel_initWithNibName_bundle_, 0, 0);
  sub_1AC68BB14((uint64_t)v6);
  return v12;
}

uint64_t sub_1AC6DF7A8()
{
  return type metadata accessor for JULoadingViewController(0);
}

uint64_t method lookup function for JULoadingViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of JULoadingViewController.__allocating_init(label:presentationContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t initializeBufferWithCopyOfBuffer for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for JULoadingViewController.PresentationContext(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AC725A1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for JULoadingViewController.PresentationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for JULoadingViewController.PresentationContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6DF958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for JULoadingViewController.PresentationContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6DF9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AC725A1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t Resize.init(_:width:height:firstBaseline:lastBaseline:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v15[3];
  __int128 v16[3];
  __int128 v17[3];
  __int128 v18[3];
  __int128 v19[2];

  v12 = a1[3];
  v13 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  Measurable.placeable.getter(v12, v13, v19);
  sub_1AC695D34(a2, (uint64_t)v18);
  sub_1AC695D34(a3, (uint64_t)v17);
  sub_1AC695D34(a4, (uint64_t)v16);
  sub_1AC695D34(a5, (uint64_t)v15);
  Resize.init(_:width:height:firstBaseline:lastBaseline:)(v19, v18, v17, v16, v15, a6);
  sub_1AC69634C(a5);
  sub_1AC69634C(a4);
  sub_1AC69634C(a3);
  sub_1AC69634C(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t JUPlaceable.placeable.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  __int128 v5;

  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(&v5, (uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    type metadata accessor for _PlaceableAsJUPlaceable();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      return sub_1AC68E218(v4 + OBJC_IVAR____TtC5JetUI23_PlaceableAsJUPlaceable_base, (uint64_t)a1);
    }
    else
    {
      a1[3] = &type metadata for _JUPlaceableAsPlacable;
      a1[4] = &protocol witness table for _JUPlaceableAsPlacable;
      *a1 = v1;
      return swift_unknownObjectRetain();
    }
  }
}

uint64_t _JUPlaceableAsPlacable.base.getter()
{
  return swift_unknownObjectRetain();
}

JUMeasurements __swiftcall _JUPlaceableAsPlacable.measure(toFit:with:)(CGSize toFit, UITraitCollection with)
{
  id *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  JUMeasurements result;

  objc_msgSend(*v2, sel_measureToFit_withTraitCollection_, with.super.isa, toFit.width, toFit.height);
  result.var3 = v6;
  result.var2 = v5;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

Swift::Void __swiftcall _JUPlaceableAsPlacable.place(at:with:)(__C::CGRect at, UITraitCollection with)
{
  id *v2;

  objc_msgSend(*v2, sel_placeAtRect_withTraitCollection_, with.super.isa, at.origin.x, at.origin.y, at.size.width, at.size.height);
}

uint64_t _JUPlaceableAsPlacable.description.getter()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B620);
  return sub_1AC726268();
}

id sub_1AC6DFD60(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_measureToFit_withTraitCollection_, a1);
}

id sub_1AC6DFD74(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_placeAtRect_withTraitCollection_, a1);
}

uint64_t sub_1AC6DFD88()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B620);
  return sub_1AC726268();
}

ValueMetadata *type metadata accessor for _JUPlaceableAsPlacable()
{
  return &type metadata for _JUPlaceableAsPlacable;
}

double *StaticMeasurable.init(_:)@<X0>(double **a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD610);
  result = (double *)swift_allocObject();
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  *a1 = result;
  return result;
}

double StaticMeasurable.measurements.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

double StaticMeasurable.measurements(fitting:in:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

double sub_1AC6DFEB4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 16);
}

ValueMetadata *type metadata accessor for StaticMeasurable()
{
  return &type metadata for StaticMeasurable;
}

uint64_t sub_1AC6DFF04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC6A3178(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
    v3 = result;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)sub_1AC6A3178((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    v3 = result;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  *(_QWORD *)(v3 + 8 * v6 + 32) = a1;
  *v1 = v3;
  return result;
}

uint64_t sub_1AC6DFFA0(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC6A3080(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
    v3 = result;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)sub_1AC6A3080((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    v3 = result;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  *(_DWORD *)(v3 + 4 * v6 + 32) = a1;
  *v1 = v3;
  return result;
}

uint64_t sub_1AC6E003C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AC6A2F88(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
    v5 = result;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)sub_1AC6A2F88((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    v5 = result;
  }
  *(_QWORD *)(v5 + 16) = v8 + 1;
  v9 = v5 + 16 * v8;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  *v2 = v5;
  return result;
}

uint64_t sub_1AC6E00DC()
{
  _QWORD *v0;

  MEMORY[0x1AF43F93C]();
  if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1AC7263D0();
  sub_1AC72640C();
  return sub_1AC7263AC();
}

uint64_t sub_1AC6E013C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)sub_1AC71EDD4(v1);
    v1 = result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
LABEL_4:
    v4 = v3 - 1;
    result = *(unsigned int *)(v1 + 4 * v4 + 32);
    *(_QWORD *)(v1 + 16) = v4;
    *v0 = v1;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1AC6E01A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1AC726310();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1AF43F894](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unint64_t sub_1AC6E021C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    sub_1AC6E02F8(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = sub_1AC72685C();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        sub_1AC7268B0();
      v5 = sub_1AC7268BC();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_1AC6E02F8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1AC6E0394(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1AC6E0400(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1AC6E0394(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1AC6E01A4(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1AC6E0400(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_1AC7268B0();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return sub_1AC726850();
  }
  return result;
}

id sub_1AC6E0510(void *a1, uint64_t a2, uint64_t a3, id a4, id a5, void *a6)
{
  void *v8;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (a5)
    return objc_msgSend(a5, sel_juParagraphStyleWithBaseWritingDirection_, a4);
  v18[0] = 0;
  v18[1] = 0;
  v12 = objc_msgSend(a1, sel_juParagraphStyleAtIndex_effectiveRange_, a2, v18);
  if (!v12)
    return a6;
  v8 = v12;
  v13 = sub_1AC7266B8();
  if ((v15 & 1) != 0
    || v13 != a2
    || v14 != a3
    || objc_msgSend(v8, sel_baseWritingDirection) != a4
    && (a4 != (id)-1 || objc_msgSend(v8, sel_baseWritingDirection) == (id)-1))
  {
    v16 = objc_msgSend(v8, sel_juParagraphStyleWithBaseWritingDirection_, a4);

    return v16;
  }
  return v8;
}

void sub_1AC6E066C(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  UniChar *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _BOOL4 v70;
  _BOOL4 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  int v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  char *v95;
  char *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  char v103;
  char v104;
  char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  int v116;
  void *v117;
  int v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  id v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __CFString *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  UniChar *v161;
  uint64_t v162;
  uint64_t v163;
  CFRange v164;

  v141 = a4;
  v135 = sub_1AC726B74();
  v9 = *(_QWORD *)(v135 - 8);
  MEMORY[0x1E0C80A78](v135);
  v11 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_1AC726B98();
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  v134 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = MEMORY[0x1E0C80A78](v13).n128_u64[0];
  v133 = (char *)&v112 - v15;
  if (a1)
  {
    v16 = objc_msgSend(a1, sel_mutableString, v14);
  }
  else
  {
    if (!a2)
    {
      if (qword_1EEC8A200 != -1)
        goto LABEL_296;
      goto LABEL_265;
    }
    v16 = a2;
  }
  v17 = (uint64_t)v16;
  v18 = (uint64_t)objc_msgSend(v16, sel_length);
  if (v18 < 1)
  {
    if (qword_1EEC8A200 == -1)
    {
LABEL_263:
      v105 = (char *)(id)qword_1EEC8AEC0;

      goto LABEL_266;
    }
LABEL_289:
    swift_once();
    goto LABEL_263;
  }
  v19 = v18;
  v131 = v11;
  v132 = v9;
  v115 = a3;
  v124 = a5;
  v117 = a1;
  v123 = (id)v17;
  v149 = v19;
  sub_1AC702408(v123, 0, v19, &v156);
  v17 = sub_1AC7257DC();
  v144 = sub_1AC7257DC();
  v20 = 0;
  v140 = 0;
  v142 = 0;
  v146 = 0;
  v126 = 0;
  v128 = 0;
  v127 = 0;
  v148 = 0;
  v138 = 0;
  v125 = 0;
  v116 = (a1 == 0) | v141;
  v154 = MEMORY[0x1E0DEE9D8];
  v155 = MEMORY[0x1E0DEE9D8];
  v153 = MEMORY[0x1E0DEE9D8];
  v151 = MEMORY[0x1E0DEE9D8];
  v152 = 0;
  v130 = *MEMORY[0x1E0DEE388];
  v113 = *MEMORY[0x1E0DC1258];
  v114 = *MEMORY[0x1E0DC1178];
  v112 = xmmword_1AC727FB0;
  v21 = v17;
  v143 = v17;
  v147 = v17;
LABEL_7:
  v120 = 0;
  v122 = 0;
  v121 = 0;
  v22 = 0;
  a5 = 0;
  v119 = v20;
  v23 = v20;
LABEL_8:
  v118 = v22;
  v129 = v23;
LABEL_9:
  v139 = 0;
  v24 = 0;
  LODWORD(v25) = -1;
  v145 = -1;
  while (2)
  {
    if (v23 < 0 || (v26 = v158, v23 >= v158))
    {
      v28 = v21;
      v27 = 0;
    }
    else
    {
      LODWORD(v25) = v159;
      if (v159)
      {
        if (__OFADD__(v23, v157))
          goto LABEL_271;
        v27 = *(unsigned __int16 *)(v159 + 2 * (v23 + v157));
      }
      else
      {
        LODWORD(v25) = v160;
        if (v160)
        {
          if (__OFADD__(v23, v157))
            goto LABEL_275;
          LODWORD(v25) = *(char *)(v160 + v23 + v157);
          if ((v25 & 0x80000000) != 0)
            goto LABEL_276;
          v27 = *(unsigned __int8 *)(v160 + v23 + v157);
        }
        else
        {
          if (v23 >= v163 || (v51 = v162, v23 < v162))
          {
            v60 = 4;
            if (v23 > 4)
              v60 = v23;
            v51 = v60 - 4;
            v162 = v60 - 4;
            v30 = __OFADD__(v60, 2044);
            v61 = v60 + 2044;
            if (v30)
              goto LABEL_286;
            if (v158 < v61)
              v61 = v158;
            v163 = v61;
            if (__OFADD__(v157, v51))
              goto LABEL_287;
            if (__OFSUB__(v61, v51))
              goto LABEL_288;
            v52 = v161;
            v164.location = v157 + v51;
            v164.length = v61 - v51;
            CFStringGetCharacters(v156, v164, v161);
          }
          else
          {
            v52 = v161;
          }
          if (!v52)
            goto LABEL_308;
          v25 = v23 - v51;
          if (__OFSUB__(v23, v51))
            goto LABEL_277;
          v27 = v52[v25];
        }
      }
      v28 = v21;
      if ((unsigned __int16)((unsigned __int16)(v27 + 9216) >> 10) >= 0x3Fu)
      {
        if (v23 >= v26 - 1
          || (sub_1AC7022F8(v23 + 1), (unsigned __int16)((unsigned __int16)(v62 + 0x2000) >> 10) < 0x3Fu))
        {
LABEL_115:
          LODWORD(v25) = 0;
          ++v23;
          v32 = 1;
          v33 = 1;
          v34 = 1;
          v30 = __OFADD__(a5++, 1);
          if (v30)
            goto LABEL_267;
          goto LABEL_187;
        }
        LODWORD(v25) = ((unsigned __int16)(v27 + 10240) << 10) + (unsigned __int16)(v62 + 9216);
        v27 = v25 + 0x10000;
        v29 = 2;
        v30 = __OFADD__(v23, 2);
        v23 += 2;
        if (v30)
          goto LABEL_268;
        goto LABEL_19;
      }
      LODWORD(v25) = v27 >> 11;
      if (v27 >> 11 == 27)
        goto LABEL_115;
    }
    v29 = 1;
    v30 = __OFADD__(v23++, 1);
    if (v30)
      goto LABEL_268;
LABEL_19:
    v31 = JUGetBidiClass(v27);
    LODWORD(v25) = 0;
    v32 = 1;
    v33 = 1;
    v34 = 1;
    switch(v31)
    {
      case 8:
        sub_1AC6DFFA0(v27);
        LODWORD(v25) = 0;
        v17 = 1;
        switch(v27)
        {
          case 0x202Au:
          case 0x202Du:
            goto LABEL_78;
          case 0x202Bu:
          case 0x202Eu:
            goto LABEL_77;
          default:
            goto LABEL_84;
        }
        goto LABEL_84;
      case 9:
        v25 = *(_QWORD *)(v151 + 16);
        if (!v25)
          goto LABEL_83;
        v37 = *(_DWORD *)(v151 + 4 * v25 + 28);
        LODWORD(v25) = 0;
        v17 = 1;
        v53 = v37 - 8234;
        if (v53 <= 4 && v53 != 2)
        {
LABEL_73:
          sub_1AC6E013C();
          v25 = *(_QWORD *)(v151 + 16);
          if (v25)
          {
            v54 = *(_DWORD *)(v151 + 4 * v25 + 28);
            LODWORD(v25) = 0;
            v17 = 1;
            v55 = (v54 - 8234);
            if (v55 <= 0x3E)
            {
              if (((1 << v55) & 0x1000000000000009) != 0)
              {
LABEL_78:
                v140 = 0;
                v142 = 0;
                LODWORD(v25) = v146 ^ 1;
                v146 = 1;
              }
              else if (((1 << v55) & 0x2000000000000012) != 0)
              {
LABEL_77:
                v140 = 0;
                v146 = 0;
                LODWORD(v25) = v142 ^ 1;
                v142 = 1;
              }
              else if (v55 == 62)
              {
                v142 = 0;
                v146 = 0;
                LODWORD(v25) = v140 ^ 1;
                v140 = 1;
              }
            }
          }
          else
          {
            LODWORD(v25) = 1;
LABEL_83:
            v17 = 1;
          }
        }
        goto LABEL_84;
      case 10:
        sub_1AC6DFFA0(v27);
        switch(v27)
        {
          case 0x2068u:
            v142 = 0;
            v146 = 0;
            LODWORD(v25) = v140 ^ 1;
            v140 = 1;
            break;
          case 0x2067u:
            v140 = 0;
            v146 = 0;
            LODWORD(v25) = v142 ^ 1;
            v142 = 1;
            break;
          case 0x2066u:
            v140 = 0;
            v142 = 0;
            LODWORD(v25) = v146 ^ 1;
            v146 = 1;
            break;
          default:
            LODWORD(v25) = 0;
            break;
        }
        goto LABEL_83;
      case 11:
        v35 = *(_QWORD *)(v151 + 16);
        if (v35)
          v36 = *(_DWORD *)(v151 + 4 * v35 + 28);
        else
          v36 = 0;
        LODWORD(v25) = 0;
        v17 = 1;
        if (!v35 || (v36 - 8297) < 0xFFFFFFFD)
          goto LABEL_84;
        goto LABEL_73;
      case 12:
        goto LABEL_46;
      case 13:
        goto LABEL_186;
      case 14:
        if (v27 > 0x7F)
        {
          v78 = (v27 & 0x3F) << 8;
          if (v27 >= 0x800)
          {
            v79 = (v78 | (v27 >> 6) & 0x3F) << 8;
            v80 = (((v79 | (v27 >> 12) & 0x3F) << 8) | (v27 >> 18)) - 2122219023;
            v45 = (v79 | (v27 >> 12)) + 8487393;
            if (HIWORD(v27))
              v45 = v80;
          }
          else
          {
            v45 = (v78 | (v27 >> 6)) + 33217;
          }
        }
        else
        {
          v45 = v27 + 1;
        }
        v150[0] = (v45 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v45) >> 3))));
        v46 = MEMORY[0x1AF43F84C](v150);
        v48 = sub_1AC6E021C(v46, v47);
        if ((v48 & 0x100000000) != 0)
          goto LABEL_307;
        v49 = v48;
        swift_bridgeObjectRelease();
        if ((v49 - 14) > 0xFFFFFFFB || (v49 - 8232) < 2 || v49 == 133)
        {
LABEL_46:
          if (v27 == 8232)
          {
            v25 = v152;
            if (!v152)
              v25 = MEMORY[0x1E0DEE9D8];
            v152 = v25;
            if (__OFSUB__(v23, v29))
              goto LABEL_274;
            sub_1AC6DFF04(v23 - v29);
            goto LABEL_55;
          }
          LODWORD(v25) = 1;
          if (v149 > v23 && v27 == 13)
          {
            sub_1AC702224(v23);
            if ((v50 & 0x1FFFFFFFFLL) == 0xA)
            {
              ++v29;
              ++v23;
            }
LABEL_55:
            LODWORD(v25) = 1;
            goto LABEL_56;
          }
        }
        else
        {
          LODWORD(v25) = 0;
        }
        goto LABEL_56;
      case 15:
        v38 = v133;
        sub_1AC726BA4();
        v39 = v131;
        sub_1AC726B8C();
        (*(void (**)(char *, uint64_t))(v136 + 8))(v38, v137);
        v40 = v132;
        v41 = v135;
        v42 = (*(uint64_t (**)(char *, uint64_t))(v132 + 88))(v39, v135);
        if (v42 == v130)
        {
          LODWORD(v25) = 0;
          if (v24)
          {
LABEL_56:
            v32 = 1;
LABEL_57:
            v33 = 1;
LABEL_58:
            v34 = 1;
            v30 = __OFADD__(a5, v29);
            a5 += v29;
            if (v30)
              goto LABEL_267;
            goto LABEL_187;
          }
          v17 = 0;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
LABEL_62:
          LODWORD(v25) = 0;
          v17 = 0;
        }
LABEL_84:
        v30 = __OFADD__(v24, v29);
        v24 += v29;
        if (v30)
          goto LABEL_269;
        if ((*(_QWORD *)(v151 + 16) != 0) | v25 & 1)
        {
          if ((v146 & 1) != 0)
          {
            v56 = sub_1AC70B4A8(0, v145);
            v145 = 0;
            LODWORD(v25) = 0;
            v32 = 0;
            v139 = !v56;
            v146 = 1;
          }
          else
          {
            if ((v142 & 1) != 0)
            {
              v142 = 1;
              v57 = sub_1AC70B4A8(1, v145);
              v146 = 0;
              LODWORD(v25) = 0;
              v32 = 0;
              v139 = !v57;
              v58 = 1;
            }
            else
            {
              if ((v140 & 1) == 0)
              {
                v140 = 0;
                v142 = 0;
                v146 = 0;
LABEL_184:
                LODWORD(v25) = 0;
                v32 = 0;
                goto LABEL_185;
              }
              v59 = sub_1AC70B4A8(-1, v145);
              v142 = 0;
              v146 = 0;
              LODWORD(v25) = 0;
              v32 = 0;
              v139 = !v59;
              v140 = 1;
              v58 = -1;
            }
            v145 = v58;
          }
LABEL_185:
          v33 = v17;
          v34 = v17;
LABEL_186:
          v30 = __OFADD__(a5, v29);
          a5 += v29;
          if (v30)
          {
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
            goto LABEL_278;
          }
          goto LABEL_187;
        }
        break;
      default:
        v43 = v134;
        sub_1AC726BA4();
        v44 = sub_1AC726B80();
        (*(void (**)(char *, uint64_t))(v136 + 8))(v43, v137);
        if ((v44 & 1) == 0)
          goto LABEL_62;
        v17 = v145;
        if (v24)
        {
          v30 = __OFSUB__(v23, v29);
          v23 -= v29;
          if (v30)
            goto LABEL_285;
          LODWORD(v25) = 0;
          v29 = 0;
          goto LABEL_56;
        }
        if (v31 == 1)
        {
          if (sub_1AC70B4A8(-1, v145))
          {
            v145 = 0;
            LODWORD(v25) = 0;
          }
          else
          {
            v77 = sub_1AC70B4A8(0, v17);
            LODWORD(v25) = 0;
            v139 |= !v77;
          }
          v32 = 1;
          v24 = v29;
          v33 = 1;
        }
        else
        {
          if (v31 != 4 && v31 != 2)
          {
            LODWORD(v25) = 0;
            v32 = 1;
            v24 = v29;
            goto LABEL_57;
          }
          if (sub_1AC70B4A8(-1, v145))
          {
            LODWORD(v25) = 0;
            v32 = 1;
            v24 = v29;
            v145 = 1;
            goto LABEL_57;
          }
          v33 = 1;
          v72 = sub_1AC70B4A8(1, v17);
          LODWORD(v25) = 0;
          v139 |= !v72;
          v24 = v29;
          v32 = 1;
        }
        goto LABEL_58;
    }
    LODWORD(v25) = 0;
    v32 = 0;
    v33 = 1;
    v34 = 1;
    switch(v31)
    {
      case 0:
      case 15:
      case 16:
        goto LABEL_186;
      case 1:
        v63 = v145;
        if (sub_1AC70B4A8(-1, v145))
        {
          v145 = 0;
          LODWORD(v25) = 0;
          v32 = 0;
        }
        else
        {
          v70 = sub_1AC70B4A8(0, v63);
          LODWORD(v25) = 0;
          v32 = 0;
          v139 |= !v70;
        }
        v33 = 1;
        v34 = 1;
        v30 = __OFADD__(a5, v29);
        a5 += v29;
        if (!v30)
          goto LABEL_187;
        goto LABEL_267;
      case 2:
        v64 = v145;
        if (sub_1AC70B4A8(-1, v145))
        {
          LODWORD(v25) = 0;
          v32 = 0;
          v33 = 1;
          v145 = 1;
          goto LABEL_58;
        }
        v34 = 1;
        v71 = sub_1AC70B4A8(1, v64);
        LODWORD(v25) = 0;
        v32 = 0;
        v139 |= !v71;
        v33 = 1;
        v30 = __OFADD__(a5, v29);
        a5 += v29;
        if (v30)
          goto LABEL_267;
        goto LABEL_187;
      case 3:
      case 4:
        if (sub_1AC7257DC() != v28)
          goto LABEL_92;
        if (sub_1AC7257DC() == v147)
        {
          v28 = v23 - v29;
          if (__OFSUB__(v23, v29))
            goto LABEL_291;
LABEL_92:
          v34 = v17;
        }
        else
        {
          v148 = v138 + v29;
          if (__OFADD__(v138, v29))
            goto LABEL_294;
          v34 = 1;
          v28 = v147;
        }
        v65 = v148 + v29;
        if (__OFADD__(v148, v29))
        {
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
          goto LABEL_289;
        }
        v148 += v29;
        v66 = v65 + v28;
        v30 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v30)
          goto LABEL_284;
        v144 = v67;
        v68 = v145;
        if (sub_1AC70B4A8(-1, v145))
        {
          v69 = sub_1AC70B4A8(4, v31);
          LODWORD(v25) = 0;
          v32 = 0;
          if (v69)
            v68 = 1;
          v145 = v68;
        }
        else
        {
          LODWORD(v25) = 0;
          v32 = 0;
        }
LABEL_180:
        v33 = v17;
        v30 = __OFADD__(a5, v29);
        a5 += v29;
        if (v30)
          goto LABEL_267;
LABEL_187:
        v73 = v23 == v149;
        if (v23 == v149)
          v74 = 1;
        else
          v74 = v34;
        if (v23 == v149)
          v75 = 1;
        else
          v75 = v25;
        if (v23 == v149)
          v76 = 1;
        else
          v76 = v32;
        if (v23 == v149)
          v17 = 1;
        else
          v17 = v33;
        v21 = v28;
        if (v74 == 1)
        {
          if (sub_1AC7257DC() == v147)
          {
            LODWORD(v25) = v75;
            v32 = v76;
            v33 = v17;
            goto LABEL_202;
          }
          if ((v17 & 1) != 0)
          {
            v138 = 0;
            v147 = v143;
            goto LABEL_206;
          }
          v138 = 0;
          LODWORD(v25) = v143;
          v147 = v143;
          if ((v76 & 1) != 0)
          {
            v73 = 0;
            v147 = v143;
            goto LABEL_225;
          }
          continue;
        }
LABEL_202:
        v75 = v25;
        v76 = v32;
        if (!v33)
          goto LABEL_10;
LABEL_206:
        if (sub_1AC7257DC() == v28)
        {
LABEL_10:
          if (v76)
            goto LABEL_225;
          goto LABEL_11;
        }
        v25 = v28 + v148 - 1;
        if (__OFSUB__(v28 + v148, 1))
          goto LABEL_270;
        if (v144 < v25)
        {
          v25 = v144 - v28;
          if (__OFSUB__(v144, v28))
            goto LABEL_272;
          v30 = __OFADD__(v25++, 1);
          v148 = v25;
          if (v30)
            goto LABEL_273;
        }
        if ((v141 & 1) != 0)
        {
          v17 = (uint64_t)&v155;
          sub_1AC6E003C(v28, v148);
        }
        v144 = sub_1AC7257DC();
        if ((v76 & 1) == 0)
        {
          v148 = 0;
          v21 = v143;
LABEL_11:
          LODWORD(v25) = v149;
          if (v23 == v149)
            goto LABEL_279;
          continue;
        }
        v148 = 0;
        v21 = v143;
LABEL_225:
        v17 = v145;
        if (v145 != 1)
        {
          if (v145)
          {
            if (v24 < 1)
              goto LABEL_238;
            v81 = __CFADD__(v120++, 1);
            if (!v81)
              goto LABEL_235;
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            v150[0] = 0;
            v150[1] = 0xE000000000000000;
            sub_1AC726868();
            sub_1AC726A60();
            sub_1AC6ACDF0();
            sub_1AC726A60();
            sub_1AC726910();
            __break(1u);
            JUMPOUT(0x1AC6E1C38);
          }
          v81 = __CFADD__(v121++, 1);
          if (v81)
          {
            __break(1u);
            goto LABEL_290;
          }
LABEL_231:
          if (v24 < 1)
            goto LABEL_238;
LABEL_235:
          if ((v141 & 1) != 0)
          {
            sub_1AC69C244(0, &qword_1EEC8B2C8);
            v82 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_valueWithRange_direction_hasMixedDirectionality_, v129, v24, v17, v139 & 1);
            v17 = (uint64_t)&v154;
            sub_1AC6E00DC();
          }
          if ((v139 & 1) == 0)
          {
LABEL_238:
            if (v75)
              goto LABEL_247;
            v129 = v23;
            if (v73)
              goto LABEL_279;
            goto LABEL_9;
          }
          v83 = v117;
          if (v117)
          {
            v84 = nullsub_1(v145);
            sub_1AC69C244(0, (unint64_t *)&unk_1EEC8BAA0);
            v85 = v83;
            v86 = v21;
            v87 = sub_1AC71D360(v84);
            __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
            v88 = swift_allocObject();
            *(_OWORD *)(v88 + 16) = v112;
            *(_QWORD *)(v88 + 32) = v87;
            v150[0] = v88;
            sub_1AC7263AC();
            v17 = v150[0];
            v145 = (uint64_t)v87;
            v89 = (void *)sub_1AC726394();
            swift_bridgeObjectRelease();
            objc_msgSend(v85, sel_addAttribute_value_range_, v113, v89, v129, v24);

            v21 = v86;
          }
          if ((v75 & 1) != 0)
          {
            v118 = 1;
            v125 = 1;
LABEL_247:
            v90 = v120;
            v91 = v121;
            v92 = v122;
            if (__CFADD__(v127, v121))
              goto LABEL_304;
            v93 = v128 + v122;
            if (__CFADD__(v128, v122))
              goto LABEL_305;
            v81 = __CFADD__(v126, v120);
            v126 = &v120[(_QWORD)v126];
            if (v81)
              goto LABEL_306;
            v127 += v121;
            v94 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
            v95 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v90, v91, v92);
            v96 = v95;
            if ((v95[OBJC_IVAR___JUWritingDirectionsCounts_isRTLEnough] & 1) != 0)
              v97 = 1;
            else
              v97 = v95[OBJC_IVAR___JUWritingDirectionsCounts_hasStronglyTypedCounts] - 1;
            v128 = v93;
            if ((v116 & 1) != 0
              && (sub_1AC69C244(0, &qword_1EEC8B2C8),
                  v98 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_valueWithRange_direction_hasMixedDirectionality_, v119, a5, v97, v118 & 1), v17 = (uint64_t)&v153, sub_1AC6E00DC(), !v117))
            {

              v20 = v23;
              if (v73)
              {
LABEL_279:
                swift_bridgeObjectRelease();
                if (v161)
                  MEMORY[0x1AF4408FC](v161, -1, -1);
                v111 = objc_allocWithZone((Class)type metadata accessor for WritingDirectionsCounts());
                v105 = WritingDirectionsCounts.init(natural:leftToRight:rightToLeft:)(v126, v127, v128);

                v109 = v154;
                v108 = v155;
                v107 = v152;
                v110 = v153;
                a5 = v124;
                v106 = v125;
                goto LABEL_282;
              }
            }
            else
            {
              v99 = v21;
              v100 = (id)sub_1AC714234(v97);
              v101 = v117;
              v102 = v119;
              v17 = (uint64_t)sub_1AC6E0510(v117, v119, a5, (id)v97, v115, v100);
              v104 = v103;

              if ((v104 & 1) != 0)
              {
                objc_msgSend(v101, sel_addAttribute_value_range_, v114, v17, v102, a5);

              }
              else
              {

              }
              v20 = v23;
              v21 = v99;
              if (v73)
                goto LABEL_279;
            }
            goto LABEL_7;
          }
          v22 = 1;
          LODWORD(v25) = 1;
          v125 = 1;
          if (v73)
          {
LABEL_278:
            v125 = v25;
            goto LABEL_279;
          }
          goto LABEL_8;
        }
        v81 = __CFADD__(v122++, 1);
        if (!v81)
          goto LABEL_231;
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        swift_once();
LABEL_265:
        v105 = (char *)(id)qword_1EEC8AEC0;
LABEL_266:
        v106 = 0;
        v107 = 0;
        v108 = MEMORY[0x1E0DEE9D8];
        v109 = MEMORY[0x1E0DEE9D8];
        v110 = MEMORY[0x1E0DEE9D8];
LABEL_282:
        *(_QWORD *)a5 = v108;
        *(_QWORD *)(a5 + 8) = v109;
        *(_QWORD *)(a5 + 16) = v110;
        *(_QWORD *)(a5 + 24) = v105;
        *(_BYTE *)(a5 + 32) = v106 & 1;
        *(_QWORD *)(a5 + 40) = v107;
        return;
      case 5:
        if (sub_1AC7257DC() == v28)
        {
          if (sub_1AC7257DC() != v147)
          {
            LODWORD(v25) = 0;
            v32 = 0;
            v34 = 1;
            goto LABEL_180;
          }
          v147 = v23 - v29;
          if (__OFSUB__(v23, v29))
            goto LABEL_299;
          v30 = __OFADD__(v138, v29);
          v138 += v29;
          if (v30)
            goto LABEL_303;
        }
        else
        {
          v30 = __OFADD__(v148, v29);
          v148 += v29;
          if (v30)
            goto LABEL_292;
        }
        goto LABEL_184;
      case 6:
        if (sub_1AC7257DC() == v28)
        {
          if (sub_1AC7257DC() == v147)
          {
            v147 = v23 - v29;
            if (__OFSUB__(v23, v29))
              goto LABEL_298;
            v30 = __OFADD__(v138, v29);
            v138 += v29;
            if (v30)
              goto LABEL_302;
          }
          else
          {
            v30 = __OFADD__(v138, v29);
            v138 += v29;
            if (v30)
              goto LABEL_301;
          }
        }
        else
        {
          v30 = __OFADD__(v148, v29);
          v148 += v29;
          if (v30)
            goto LABEL_293;
        }
        goto LABEL_184;
      case 7:
        if (sub_1AC7257DC() == v28)
        {
          if (sub_1AC7257DC() != v147)
          {
            v30 = __OFADD__(v138, v29);
            v138 += v29;
            if (v30)
              goto LABEL_300;
          }
        }
        else
        {
          v30 = __OFADD__(v148, v29);
          v148 += v29;
          if (v30)
            goto LABEL_295;
        }
        goto LABEL_184;
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_184;
      default:
        goto LABEL_309;
    }
  }
}

uint64_t DiffableDataStatePresenter.lens(for:)(uint64_t a1)
{
  return sub_1AC6E1CD8(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Item, MEMORY[0x1E0D415C0]);
}

{
  return sub_1AC6E1CD8(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Section, MEMORY[0x1E0D415C0]);
}

uint64_t DiffableDataStatePresenter.writableLens(for:)(uint64_t a1)
{
  return sub_1AC6E1CD8(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Item, MEMORY[0x1E0D40260]);
}

{
  return sub_1AC6E1CD8(a1, (uint64_t)&associated type descriptor for DiffableDataPresenter.Section, MEMORY[0x1E0D40260]);
}

uint64_t sub_1AC6E1CD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *, _QWORD, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC6E2AA4();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(_QWORD *)(*(_QWORD *)v3 + 120), v5);
  v12 = sub_1AC6E4958(&qword_1ED0BE028, (uint64_t *)&unk_1ED0BE030, MEMORY[0x1E0D3F9D0]);
  return a3(v11, v8, MEMORY[0x1E0DEDCE8], v5, v12);
}

uint64_t DiffableDataStatePresenter.__allocating_init<A>(dataPresenter:stateStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  swift_allocObject();
  v8 = sub_1AC6E3FF8(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t DiffableDataStatePresenter.init<A>(dataPresenter:stateStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_1AC6E3FF8(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1AC6E1ED8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a1;
  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  swift_getAssociatedTypeWitness();
  v4 = sub_1AC725DB8();
  v36 = v3;
  swift_getAssociatedTypeWitness();
  v5 = sub_1AC725DB8();
  v6 = MEMORY[0x1E0D3F890];
  v39 = v4;
  v40 = v5;
  v43 = v4;
  v44 = v5;
  v45 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v4);
  v46 = MEMORY[0x1AF440830](v6, v5);
  v7 = sub_1AC725AA0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v32 - v9;
  v11 = sub_1AC725BC0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)v1[2];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, *MEMORY[0x1E0DEF740], v11, v13);
  v17 = v16;
  LOBYTE(v16) = sub_1AC725BCC();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    v35 = v2;
    v19 = swift_bridgeObjectRetain();
    v20 = sub_1AC6E4B10(v19);
    v38 = v20;
    swift_bridgeObjectRelease();
    v21 = v1;
    v22 = (char *)v1 + *(_QWORD *)(*v1 + 104);
    swift_beginAccess();
    v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v23(v10, v22, v7);
    v24 = sub_1AC725A88();
    v25 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v26 = v25(v10, v7);
    v37 = &v32;
    v42 = v24;
    MEMORY[0x1E0C80A78](v26);
    *(&v32 - 2) = v20;
    *(&v32 - 1) = (uint64_t)v1;
    v27 = sub_1AC72646C();
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF60], v27);
    v41 = sub_1AC7268C8();
    v33 = v23;
    v34 = v22;
    v23(v10, v22, v7);
    v28 = sub_1AC725A7C();
    v37 = (uint64_t *)v25;
    v29 = v25(v10, v7);
    v42 = v28;
    MEMORY[0x1E0C80A78](v29);
    *(&v32 - 2) = v38;
    *(&v32 - 1) = (uint64_t)v21;
    v39 = (uint64_t)v21;
    v30 = sub_1AC72646C();
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF60], v30);
    v31 = sub_1AC7268C8();
    swift_bridgeObjectRelease();
    v42 = v41;
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v27);
    LOBYTE(v28) = sub_1AC7265B0();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0 && (v42 = v31, MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v30), (sub_1AC7265B0() & 1) != 0))
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v33(v10, v34, v7);
      sub_1AC725A40();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(v35 + 32))(v36);
      sub_1AC725BD8();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v37)(v10, v7);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AC6E22EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  __n128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  __n128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = v1;
  v73 = a1;
  v4 = *(_QWORD **)(*v1 + 80);
  v3 = *(_QWORD **)(*v1 + 88);
  swift_getAssociatedTypeWitness();
  v5 = sub_1AC725DB8();
  v70 = sub_1AC726970();
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v66 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v68 = (char *)&v56 - v8;
  v71 = v4;
  v72 = v3;
  swift_getAssociatedTypeWitness();
  v9 = sub_1AC725DB8();
  v10 = MEMORY[0x1E0D3F890];
  v11 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v9);
  v12 = MEMORY[0x1AF440830](v10, v5);
  v76 = v9;
  v77 = v5;
  v69 = v5;
  v63 = v11;
  v78 = v11;
  v79 = v12;
  v65 = v12;
  v13 = sub_1AC725AA0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v56 - v15;
  v64 = v9;
  v17 = sub_1AC726970();
  v61 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v62 = (char *)&v56 - v21;
  v22 = sub_1AC725BC0();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (_QWORD **)((char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = (void *)v2[2];
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v23 + 104))(v26, *MEMORY[0x1E0DEF740], v22, v24);
  v28 = v27;
  LOBYTE(v27) = sub_1AC725BCC();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v26, v22);
  if ((v27 & 1) != 0)
  {
    v74 = sub_1AC725A88();
    v30 = *(_QWORD *)(*v2 + 104);
    v56 = v2;
    v31 = (char *)v2 + v30;
    swift_beginAccess();
    v58 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v58(v16, v31, v13);
    v32 = sub_1AC725A88();
    v60 = v14;
    v57 = *(void (**)(char *, uint64_t))(v14 + 8);
    v57(v16, v13);
    v75 = v32;
    v33 = v64;
    v34 = sub_1AC72646C();
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF20], v34);
    MEMORY[0x1AF440830](MEMORY[0x1E0D3F898], v33);
    v59 = v34;
    sub_1AC7261E4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v62;
    sub_1AC72697C();
    v36 = *(uint64_t (**)(char *, uint64_t))(v61 + 8);
    v37 = v36(v19, v17);
    v38 = MEMORY[0x1E0C80A78](v37);
    v39 = v72;
    *(&v56 - 2) = v71;
    *(&v56 - 1) = v39;
    MEMORY[0x1AF440830](MEMORY[0x1E0DECE08], v17, v38);
    v63 = sub_1AC72634C();
    v36(v35, v17);
    v74 = sub_1AC725A7C();
    v64 = (uint64_t)v31;
    v58(v16, v31, v13);
    v40 = sub_1AC725A7C();
    v57(v16, v13);
    v75 = v40;
    v41 = v69;
    v42 = sub_1AC72646C();
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF20], v42);
    MEMORY[0x1AF440830](MEMORY[0x1E0D3F898], v41);
    v43 = v66;
    sub_1AC7261E4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = v68;
    v45 = v70;
    sub_1AC72697C();
    v46 = *(uint64_t (**)(char *, uint64_t))(v67 + 8);
    v47 = v46(v43, v45);
    v48 = MEMORY[0x1E0C80A78](v47);
    v49 = v72;
    *(&v56 - 2) = v71;
    *(&v56 - 1) = v49;
    MEMORY[0x1AF440830](MEMORY[0x1E0DECE08], v45, v48);
    v50 = sub_1AC72634C();
    v51 = v63;
    v46(v44, v45);
    v74 = v51;
    MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v59);
    v52 = sub_1AC7265B0();
    v53 = v73;
    if ((v52 & 1) != 0
      && (v74 = v50, MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v42), v52 = sub_1AC7265B0(), (v52 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      MEMORY[0x1E0C80A78](v52);
      *(&v56 - 4) = (_QWORD *)v51;
      *(&v56 - 3) = v54;
      *(&v56 - 2) = (_QWORD *)v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
      sub_1AC725E00();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v55 = v64;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24))(v55, v53, v13);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DiffableDataStatePresenter.dataPresenter.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t DiffableDataStatePresenter.stateStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1AC6E29E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC6E2AA4();
  v7 = sub_1AC6BDA08((uint64_t)v6, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1AC6E2AA4()
{
  swift_getAssociatedTypeWitness();
  sub_1AC725DB8();
  sub_1AC725D88();
  return sub_1AC726124();
}

uint64_t sub_1AC6E2B1C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata3;
  char *v14;
  char v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  swift_getAssociatedTypeWitness();
  sub_1AC725DB8();
  v4 = sub_1AC726964();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - v6;
  v8 = swift_checkMetadataState();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v19 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, v4, v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_6:
    v17 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v17, 1, v8);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BDD10);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v14 = &v7[*(int *)(TupleTypeMetadata3 + 48)];
  v15 = v7[*(int *)(TupleTypeMetadata3 + 64) + 8];
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(v12, v14, v8);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_6;
  }
  v16(a2, v12, v8);
  v17 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v17, 1, v8);
}

uint64_t sub_1AC6E2CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a3;
  swift_getAssociatedTypeWitness();
  v5 = sub_1AC725DB8();
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v6;
  MEMORY[0x1E0C80A78](v7);
  v36 = (char *)&v31 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v12 = sub_1AC725DB8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v40 = (char *)&v31 - v17;
  v18 = swift_bridgeObjectRetain();
  v19 = MEMORY[0x1AF43F9FC](v18, v12);
  v41 = a2;
  if (v19)
  {
    v31 = v14;
    v20 = 0;
    v34 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 120);
    do
    {
      v21 = sub_1AC726400();
      sub_1AC7263C4();
      if ((v21 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v40, a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v20, v12);
        v22 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_1AC726880();
        if (v31 != 8)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          return result;
        }
        v42 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 16))(v40, &v42, v12);
        swift_unknownObjectRelease();
        v22 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_10:
          __break(1u);
          break;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v40, v12);
      sub_1AC6E2AA4();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
      sub_1AC725DF4();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      ++v20;
    }
    while (v22 != MEMORY[0x1AF43F9FC](a1, v12));
  }
  swift_bridgeObjectRelease();
  v24 = v33;
  v25 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1AF43F9FC](v25, v5))
    return swift_bridgeObjectRelease();
  v26 = 0;
  v27 = v37;
  v28 = v35;
  while (1)
  {
    v29 = sub_1AC726400();
    sub_1AC7263C4();
    if ((v29 & 1) == 0)
      break;
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v36, v24+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v26, v5);
    v30 = v26 + 1;
    if (__OFADD__(v26, 1))
      goto LABEL_20;
LABEL_15:
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v28, v36, v5);
    sub_1AC6E2AA4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
    sub_1AC725DF4();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v5);
    ++v26;
    if (v30 == MEMORY[0x1AF43F9FC](v24, v5))
      return swift_bridgeObjectRelease();
  }
  result = sub_1AC726880();
  if (v32 != 8)
    goto LABEL_23;
  v42 = result;
  (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 16))(v36, &v42, v5);
  swift_unknownObjectRelease();
  v30 = v26 + 1;
  if (!__OFADD__(v26, 1))
    goto LABEL_15;
LABEL_20:
  __break(1u);
  return swift_bridgeObjectRelease();
}

id *DiffableDataStatePresenter.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = (char *)v0 + *((_QWORD *)*v0 + 13);
  swift_getAssociatedTypeWitness();
  v2 = sub_1AC725DB8();
  swift_getAssociatedTypeWitness();
  v3 = sub_1AC725DB8();
  v4 = MEMORY[0x1E0D3F890];
  MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v2);
  MEMORY[0x1AF440830](v4, v3);
  v5 = sub_1AC725AA0();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v1, v5);
  swift_unknownObjectRelease();
  v6 = (char *)v0 + *((_QWORD *)*v0 + 15);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return v0;
}

uint64_t DiffableDataStatePresenter.__deallocating_deinit()
{
  DiffableDataStatePresenter.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1AC6E32C8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = sub_1AC7261C0();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v3;
    v27 = a1;
    v28 = ~v12;
    v29 = v7;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v18 = v14;
      v19 = v17;
      v17(v9, *(_QWORD *)(v14 + 48) + v16 * v13, v6);
      sub_1AC6BE2F8(&qword_1EEC8AD28, MEMORY[0x1E0DEC1A8], MEMORY[0x1E0D41600]);
      v20 = sub_1AC7261FC();
      v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v9, v6);
      if ((v20 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v18;
      v17 = v19;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v22 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v21(v30, v6);
    v19(v27, *(_QWORD *)(*v26 + 48) + v16 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v22 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v17(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    sub_1AC6E3898((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1AC6E3528()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B2D0);
  v6 = sub_1AC726820();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]);
      result = sub_1AC7261C0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1AC6E3898(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1AC6E3528();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1AC6E3AA0();
      goto LABEL_12;
    }
    sub_1AC6E3CCC();
  }
  v13 = *v3;
  sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]);
  v14 = sub_1AC7261C0();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v10, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_1AC6BE2F8(&qword_1EEC8AD28, MEMORY[0x1E0DEC1A8], MEMORY[0x1E0D41600]);
      v19 = sub_1AC7261FC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6, v8);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1AC726AA8();
  __break(1u);
  return result;
}

void *sub_1AC6E3AA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B2D0);
  v6 = *v0;
  v7 = sub_1AC726814();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_27:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_25;
      v21 = *(_QWORD *)(v10 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_25;
        v21 = *(_QWORD *)(v10 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_24:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_25:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1AC6E3CCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B2D0);
  v7 = sub_1AC726820();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]);
    result = sub_1AC7261C0();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1AC6E3FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, __n128);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;

  v5 = v4;
  v77 = a2;
  v78 = a4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v75 = *(_QWORD *)v4;
  v76 = a1;
  swift_getAssociatedTypeWitness();
  v9 = sub_1AC725DB8();
  v73 = v7;
  swift_getAssociatedTypeWitness();
  v10 = sub_1AC725DB8();
  v11 = MEMORY[0x1E0D3F890];
  v12 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v9);
  v65 = v10;
  v66 = v9;
  v79[0] = v9;
  v79[1] = v10;
  v63 = MEMORY[0x1AF440830](v11, v10);
  v64 = v12;
  v79[2] = v12;
  v80 = v63;
  v13 = sub_1AC725AA0();
  v14 = sub_1AC725ECC();
  v71 = *(_QWORD *)(v14 - 8);
  v72 = v14;
  MEMORY[0x1E0C80A78](v14);
  v70 = (char *)&v51 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE048);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED0BE030);
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v60 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v13;
  v19 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v20);
  v59 = (char *)&v51 - v21;
  v57 = sub_1AC726628();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v58 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1AC72661C();
  MEMORY[0x1E0C80A78](v23);
  v24 = sub_1AC725BB4();
  MEMORY[0x1E0C80A78](v24);
  v25 = *(_QWORD *)(a3 - 8);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  v55(v29, v77, a3, v27);
  LOBYTE(v13) = sub_1AC725D28();
  result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v29, a3);
  if ((v13 & 1) != 0)
  {
    v31 = sub_1AC690B38();
    v52 = v19;
    v32 = v31;
    sub_1AC725BA8();
    v79[0] = MEMORY[0x1E0DEE9D8];
    sub_1AC6E4830();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE0A8);
    v54 = v8;
    sub_1AC6E4958(&qword_1ED0BE0B0, &qword_1ED0BE0A8, MEMORY[0x1E0DEAF38]);
    sub_1AC72676C();
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v58, *MEMORY[0x1E0DEF8D0], v57);
    v53 = v32;
    *((_QWORD *)v5 + 2) = sub_1AC726664();
    v33 = v59;
    sub_1AC725A94();
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v5[*(_QWORD *)(*(_QWORD *)v5 + 104)], v33, v74);
    v34 = v77;
    *(_QWORD *)&v5[*(_QWORD *)(*(_QWORD *)v5 + 112)] = v76;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v29, v34, a3);
    swift_unknownObjectRetain();
    v35 = v60;
    v36 = v78;
    sub_1AC725E18();
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(&v5[*(_QWORD *)(*(_QWORD *)v5 + 120)], v35, v62);
    sub_1AC725D34();
    v37 = (void *)*((_QWORD *)v5 + 2);
    v80 = v32;
    v81 = MEMORY[0x1E0D416D8];
    v79[0] = v37;
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = a3;
    *(_QWORD *)(v38 + 24) = v36;
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = a3;
    v39[3] = v36;
    v39[4] = sub_1AC6E4888;
    v39[5] = v38;
    v40 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE010);
    v41 = MEMORY[0x1E0D3F3D8];
    sub_1AC6E4958(&qword_1ED0BE008, &qword_1ED0BE010, MEMORY[0x1E0D3F3D8]);
    v42 = v67;
    sub_1AC725DD0();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v69);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    v43 = v73;
    v44 = v54;
    (*(void (**)(uint64_t))(v54 + 32))(v73);
    v45 = (void *)*((_QWORD *)v5 + 2);
    v80 = v53;
    v81 = MEMORY[0x1E0D416D8];
    v79[0] = v45;
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = a3;
    *(_QWORD *)(v46 + 24) = v36;
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = a3;
    v47[3] = v36;
    v47[4] = sub_1AC6E49A8;
    v47[5] = v46;
    v48 = sub_1AC725BF0();
    v49 = v45;
    MEMORY[0x1AF440830](v41, v48);
    v50 = v70;
    sub_1AC725DD0();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v72);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    (*(void (**)(uint64_t, uint64_t))(v44 + 40))(v43, v44);
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AC6E46D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  swift_getAssociatedTypeWitness();
  v0 = sub_1AC725DB8();
  swift_getAssociatedTypeWitness();
  v1 = sub_1AC725DB8();
  v2 = MEMORY[0x1E0D3F890];
  MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v0);
  MEMORY[0x1AF440830](v2, v1);
  sub_1AC725AA0();
  if (v3 <= 0x3F)
  {
    sub_1AC6B6054();
    if (v4 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for DiffableDataStatePresenter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiffableDataStatePresenter);
}

uint64_t method lookup function for DiffableDataStatePresenter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiffableDataStatePresenter.__allocating_init<A>(dataPresenter:stateStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

unint64_t sub_1AC6E4830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0BE0B8;
  if (!qword_1ED0BE0B8)
  {
    v1 = sub_1AC72661C();
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0BE0B8);
  }
  return result;
}

uint64_t sub_1AC6E4878()
{
  return swift_deallocObject();
}

uint64_t (*sub_1AC6E4888(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 32) = a1;
  swift_retain();
  return sub_1AC6E4AF0;
}

uint64_t sub_1AC6E48E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*sub_1AC6E490C())(_QWORD *a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(void))(v0 + 32))();
  v3 = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  return sub_1AC6E4ACC;
}

uint64_t sub_1AC6E4958(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF440830](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AC6E4998()
{
  return swift_deallocObject();
}

uint64_t (*sub_1AC6E49A8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 32) = a1;
  swift_retain();
  return sub_1AC6E4A2C;
}

uint64_t sub_1AC6E4A08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6E4A2C(uint64_t a1)
{
  return sub_1AC6E22EC(a1);
}

uint64_t sub_1AC6E4A4C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1AC6E2B1C(a1, a2);
}

uint64_t sub_1AC6E4A6C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1AC6E2B1C(a1, a2);
}

uint64_t sub_1AC6E4A8C()
{
  uint64_t *v0;

  return sub_1AC6E2CD8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1AC6E4AA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6E4ACC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1AC6E4AF0(uint64_t a1)
{
  return sub_1AC6E1ED8(a1);
}

uint64_t sub_1AC6E4B10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE058);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_1AC6BE2F8(&qword_1EEC8AD20, MEMORY[0x1E0DEC1A0], MEMORY[0x1E0D415F8]);
  result = sub_1AC726508();
  v15 = result;
  if (v9)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v13(v5, v11, v2);
      sub_1AC6E32C8((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_1AC6E4C3C(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6E29E8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1AC6E4C60(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6E29E8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

double static Dimensions.cumulativeLanguageAwareOutsets(of:compatibleWith:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;

  v3 = *MEMORY[0x1E0DC49E8];
  v2 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v5 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v4 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v9 = v8[3];
      v10 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v9);
      v3 = v3 + (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, v9, v10);
      v2 = v2 + v11;
      v5 = v5 + v12;
      v4 = v4 + v13;
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  return v3;
}

void AnyDimension.value(for:roundingRule:)()
{
  sub_1AC726910();
  __break(1u);
}

ValueMetadata *type metadata accessor for Dimensions()
{
  return &type metadata for Dimensions;
}

uint64_t dispatch thunk of AnyDimension.rawValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AnyDimension.languageAwareOutsets(compatibleWith:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t static LabelPlaceholder.Options.languageAware.getter()
{
  return 1;
}

void LabelPlaceholder.init(_:with:where:)(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  id v10;
  __int128 v11;
  __int128 v12;

  v6 = *a2;
  v7 = *(_OWORD *)(a2 + 1);
  v8 = *(_OWORD *)(a2 + 3);
  if (a1)
  {
    v11 = *(_OWORD *)(a2 + 3);
    v12 = *(_OWORD *)(a2 + 1);
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, a1);

    v8 = v11;
    v7 = v12;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  *(_QWORD *)(a4 + 24) = v6;
  *(_OWORD *)(a4 + 32) = v7;
  *(_OWORD *)(a4 + 48) = v8;
  *(_BYTE *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = a3;
}

uint64_t LabelPlaceholder.isTextEmpty.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    return !v1 || objc_msgSend((id)v1, sel_length) == 0;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v1 & 0xFFFFFFFFFFFFLL;
    v5 = v4 == 0;
    return !v3 || v5;
  }
}

Swift::Bool __swiftcall LabelPlaceholder.willTextTruncate(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  uint64_t v2;
  double height;
  double width;
  Class isa;
  unint64_t v7;
  JUMeasurements v9;

  height = fitting.height;
  width = fitting.width;
  if (fitting.width == 0.0 && fitting.height == 0.0)
  {
    __break(1u);
    return (Swift::Bool)with.super.isa;
  }
  isa = with.super.isa;
  with.super.isa = *(Class *)v2;
  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    if (!with.super.isa)
      return (Swift::Bool)with.super.isa;
    with.super.isa = (Class)-[objc_class length](with.super.isa, sel_length, 0.0, 0.0);
    if (!with.super.isa)
      return (Swift::Bool)with.super.isa;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v2 + 8);
  if (!v7)
  {
    LOBYTE(with.super.isa) = 0;
    return (Swift::Bool)with.super.isa;
  }
  if ((v7 & 0x2000000000000000) != 0)
    with.super.isa = (Class)(HIBYTE(v7) & 0xF);
  else
    with.super.isa = (Class)((unint64_t)with.super.isa & 0xFFFFFFFFFFFFLL);
  if (with.super.isa)
  {
LABEL_14:
    LOBYTE(with.super.isa) = 1;
    if (width > 0.0 && height > 0.0)
    {
      v9 = LabelPlaceholder.measure(toFit:with:)((CGSize)__PAIR128__(0x7FEFFFFFFFFFFFFFLL, *(unint64_t *)&width), (UITraitCollection)isa);
      LOBYTE(with.super.isa) = ceil(height) < ceil(v9.var1);
    }
  }
  return (Swift::Bool)with.super.isa;
}

void sub_1AC6E4F98(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;

  if (a1)
  {
    if ((a4 & 1) != 0)
    {
      if (a2)
      {
        sub_1AC68CEF8(a2, a3, 1);
        v11 = a1;
        sub_1AC68CEF8(a2, a3, 1);
        v12 = objc_msgSend(a2, sel_string);
        v13 = sub_1AC72622C();
        v15 = v14;

        aBlock = v13;
        v29 = v15;
        if (qword_1ED0BE2A8 != -1)
          swift_once();
        v16 = sub_1AC725854();
        __swift_project_value_buffer(v16, (uint64_t)qword_1ED0BE180);
        sub_1AC68F334();
        sub_1AC726700();
        v18 = v17;
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          v19 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
          v35 = *MEMORY[0x1E0DC49E8];
          v36 = v19;
          v34 = 0;
          v20 = objc_msgSend(a2, sel_length);
          v21 = *MEMORY[0x1E0DC1138];
          v22 = swift_allocObject();
          *(_QWORD *)(v22 + 16) = &v35;
          *(_QWORD *)(v22 + 24) = &v34;
          v23 = swift_allocObject();
          *(_QWORD *)(v23 + 16) = sub_1AC69E660;
          *(_QWORD *)(v23 + 24) = v22;
          v32 = sub_1AC690B08;
          v33 = v23;
          aBlock = MEMORY[0x1E0C809B0];
          v29 = 1107296256;
          v30 = sub_1AC69CE30;
          v31 = &block_descriptor_4;
          v24 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(a2, sel_enumerateAttribute_inRange_options_usingBlock_, v21, 0, v20, 0x100000, v24);
          _Block_release(v24);
          LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v20 & 1) != 0)
          {
            __break(1u);
            return;
          }
          if (v34 != 1)
          {
            *(_QWORD *)&v35 = UIFont.languageAwareOutsets.getter();
            *((_QWORD *)&v35 + 1) = v25;
            *(_QWORD *)&v36 = v26;
            *((_QWORD *)&v36 + 1) = v27;
          }
          swift_release();
        }
        sub_1AC68A814(a2, a3, 1);
        sub_1AC68A814(a2, a3, 1);

      }
    }
    else if (a3)
    {
      aBlock = (uint64_t)a2;
      v29 = a3;
      v7 = qword_1ED0BE2A8;
      v8 = a1;
      if (v7 != -1)
        swift_once();
      v9 = sub_1AC725854();
      __swift_project_value_buffer(v9, (uint64_t)qword_1ED0BE180);
      sub_1AC68F334();
      sub_1AC726700();
      if ((v10 & 1) == 0)
        UIFont.languageAwareOutsets.getter();

    }
  }
}

uint64_t LabelPlaceholder.Options.description.getter(char a1)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;

  if ((a1 & 1) != 0)
  {
    v1 = sub_1AC6A2514(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v3 = *((_QWORD *)v1 + 2);
    v2 = *((_QWORD *)v1 + 3);
    if (v3 >= v2 >> 1)
      v1 = sub_1AC6A2514((char *)(v2 > 1), v3 + 1, 1, v1);
    *((_QWORD *)v1 + 2) = v3 + 1;
    v4 = &v1[16 * v3];
    strcpy(v4 + 32, ".languageAware");
    v4[47] = -18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B2D8);
  sub_1AC6E5AF8();
  sub_1AC7261F0();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return 91;
}

uint64_t sub_1AC6E5480()
{
  _QWORD *v0;

  return LabelPlaceholder.Options.description.getter(*v0);
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  __n128 result;
  __int128 v7;

  v5 = *a3;
  *(_OWORD *)(a5 + 40) = a3[1];
  result = (__n128)a3[2];
  v7 = a3[3];
  *(__n128 *)(a5 + 56) = result;
  *(_OWORD *)(a5 + 72) = v7;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 88) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a5 + 24) = v5;
  *(_BYTE *)(a5 + 96) = 1;
  *(_QWORD *)(a5 + 104) = a4;
  return result;
}

__n128 LabelPlaceholder.init(_:with:where:)@<Q0>(void *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  if (a1)
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, a1);

  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  *(_OWORD *)(a4 + 40) = a2[1];
  result = (__n128)a2[2];
  v11 = a2[3];
  *(__n128 *)(a4 + 56) = result;
  *(_OWORD *)(a4 + 72) = v11;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  *(_QWORD *)(a4 + 88) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a4 + 24) = v9;
  *(_BYTE *)(a4 + 96) = 1;
  *(_QWORD *)(a4 + 104) = a3;
  return result;
}

uint64_t LabelPlaceholder.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;

  v1 = v0;
  v3 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    if (v3)
    {
      sub_1AC68CEF8(v3, v2, 1);
      v4 = v3;
      sub_1AC726868();
      swift_bridgeObjectRelease();
      *(_QWORD *)v39 = 0xD000000000000010;
      *(_QWORD *)&v39[8] = 0x80000001AC7319B0;
      v5 = objc_msgSend(v4, sel_description);
      sub_1AC72622C();

      sub_1AC7262C8();
      swift_bridgeObjectRelease();
      v6 = *(_OWORD *)v39;
      v7 = sub_1AC6A2514(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v9 = *((_QWORD *)v7 + 2);
      v8 = *((_QWORD *)v7 + 3);
      if (v9 >= v8 >> 1)
        v7 = sub_1AC6A2514((char *)(v8 > 1), v9 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v9 + 1;
      *(_OWORD *)&v7[16 * v9 + 32] = v6;
      sub_1AC68A814(v3, v2, 1);
      sub_1AC68A814(v3, v2, 1);
      goto LABEL_17;
    }
    v7 = sub_1AC6A2514(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v14 = *((_QWORD *)v7 + 2);
    v13 = *((_QWORD *)v7 + 3);
    if (v14 >= v13 >> 1)
      v7 = sub_1AC6A2514((char *)(v13 > 1), v14 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v14 + 1;
    v15 = &v7[16 * v14];
    v16 = 0xD000000000000013;
    v17 = 0x80000001AC731930;
LABEL_16:
    *((_QWORD *)v15 + 4) = v16;
    *((_QWORD *)v15 + 5) = v17;
    goto LABEL_17;
  }
  if (!v2)
  {
    v7 = sub_1AC6A2514(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v19 = *((_QWORD *)v7 + 2);
    v18 = *((_QWORD *)v7 + 3);
    if (v19 >= v18 >> 1)
      v7 = sub_1AC6A2514((char *)(v18 > 1), v19 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v19 + 1;
    v15 = &v7[16 * v19];
    v16 = 0x696E203A74786574;
    v17 = 0xE90000000000006CLL;
    goto LABEL_16;
  }
  *(_QWORD *)v39 = 0x203A74786574;
  *(_QWORD *)&v39[8] = 0xE600000000000000;
  sub_1AC68CEF8(v3, v2, 0);
  sub_1AC7262C8();
  sub_1AC68A814(v3, v2, 0);
  v10 = *(_OWORD *)v39;
  v7 = sub_1AC6A2514(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v12 = *((_QWORD *)v7 + 2);
  v11 = *((_QWORD *)v7 + 3);
  if (v12 >= v11 >> 1)
    v7 = sub_1AC6A2514((char *)(v11 > 1), v12 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v12 + 1;
  *(_OWORD *)&v7[16 * v12 + 32] = v10;
LABEL_17:
  sub_1AC690B74(v1 + 24, (uint64_t)v39);
  if ((v43 & 1) != 0)
  {
    v36 = v40;
    v37 = v41;
    v38 = v42;
    *(_OWORD *)v35 = *(_OWORD *)v39;
    *(_OWORD *)&v35[16] = *(_OWORD *)&v39[16];
    sub_1AC726868();
    sub_1AC7262C8();
    sub_1AC726904();
    v21 = *((_QWORD *)v7 + 2);
    v20 = *((_QWORD *)v7 + 3);
    if (v21 >= v20 >> 1)
      v7 = sub_1AC6A2514((char *)(v20 > 1), v21 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v21 + 1;
    v22 = &v7[16 * v21];
    *((_QWORD *)v22 + 4) = 0;
    *((_QWORD *)v22 + 5) = 0xE000000000000000;
    sub_1AC6B9A50((uint64_t)v35);
    v23 = *(_QWORD *)(v1 + 104);
    if (!v23)
      goto LABEL_28;
LABEL_25:
    strcpy(v39, "options: ");
    *(_WORD *)&v39[10] = 0;
    *(_DWORD *)&v39[12] = -385875968;
    LabelPlaceholder.Options.description.getter(v23);
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    v29 = *(_OWORD *)v39;
    v31 = *((_QWORD *)v7 + 2);
    v30 = *((_QWORD *)v7 + 3);
    if (v31 >= v30 >> 1)
      v7 = sub_1AC6A2514((char *)(v30 > 1), v31 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v31 + 1;
    *(_OWORD *)&v7[16 * v31 + 32] = v29;
    goto LABEL_28;
  }
  v24 = *(void **)v39;
  v33 = *(_OWORD *)&v39[8];
  v25 = *(_QWORD *)&v39[24];
  v26 = v40;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)&v35[8] = 0xE000000000000000;
  sub_1AC726868();
  v34 = *(_OWORD *)v35;
  sub_1AC7262C8();
  *(_QWORD *)v35 = v24;
  *(_OWORD *)&v35[8] = v33;
  *(_QWORD *)&v35[24] = v25;
  *(_QWORD *)&v36 = v26;
  sub_1AC726904();
  v28 = *((_QWORD *)v7 + 2);
  v27 = *((_QWORD *)v7 + 3);
  if (v28 >= v27 >> 1)
    v7 = sub_1AC6A2514((char *)(v27 > 1), v28 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v28 + 1;
  *(_OWORD *)&v7[16 * v28 + 32] = v34;

  v23 = *(_QWORD *)(v1 + 104);
  if (v23)
    goto LABEL_25;
LABEL_28:
  *(_QWORD *)v39 = 0xD000000000000011;
  *(_QWORD *)&v39[8] = 0x80000001AC731970;
  *(_QWORD *)v35 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B2D8);
  sub_1AC6E5AF8();
  sub_1AC7261F0();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return *(_QWORD *)v39;
}

unint64_t sub_1AC6E5AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8B2E0;
  if (!qword_1EEC8B2E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8B2D8);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8B2E0);
  }
  return result;
}

unint64_t sub_1AC6E5B48()
{
  unint64_t result;

  result = qword_1EEC8B2E8;
  if (!qword_1EEC8B2E8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for LabelPlaceholder.Options, &type metadata for LabelPlaceholder.Options);
    atomic_store(result, (unint64_t *)&qword_1EEC8B2E8);
  }
  return result;
}

unint64_t sub_1AC6E5B90()
{
  unint64_t result;

  result = qword_1EEC8B2F0;
  if (!qword_1EEC8B2F0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for LabelPlaceholder.Options, &type metadata for LabelPlaceholder.Options);
    atomic_store(result, (unint64_t *)&qword_1EEC8B2F0);
  }
  return result;
}

unint64_t sub_1AC6E5BD8()
{
  unint64_t result;

  result = qword_1EEC8B2F8;
  if (!qword_1EEC8B2F8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for LabelPlaceholder.Options, &type metadata for LabelPlaceholder.Options);
    atomic_store(result, (unint64_t *)&qword_1EEC8B2F8);
  }
  return result;
}

unint64_t sub_1AC6E5C20()
{
  unint64_t result;

  result = qword_1EEC8B300[0];
  if (!qword_1EEC8B300[0])
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for LabelPlaceholder.Options, &type metadata for LabelPlaceholder.Options);
    atomic_store(result, qword_1EEC8B300);
  }
  return result;
}

uint64_t assignWithCopy for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1AC68CEF8(*(void **)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1AC68A814(v7, v8, v9);
  if (a1 != a2)
  {
    sub_1AC6E5D68(a1 + 24);
    if ((*(_BYTE *)(a2 + 96) & 1) != 0)
    {
      v10 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, a2 + 24);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = 1;
    }
    else
    {
      v11 = *(void **)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 96) = 0;
      v12 = v11;
    }
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t sub_1AC6E5D68(uint64_t a1)
{
  destroy for LabelPlaceholder.Appearance(a1);
  return a1;
}

uint64_t assignWithTake for LabelPlaceholder(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_1AC68A814(v5, v6, v7);
  if (a1 != a2)
  {
    sub_1AC6E5D68(a1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.Options()
{
  return &type metadata for LabelPlaceholder.Options;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.TextContent()
{
  return &type metadata for LabelPlaceholder.TextContent;
}

void destroy for LabelPlaceholder.Appearance(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 72);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    __swift_destroy_boxed_opaque_existential_1(a1);
  else

}

uint64_t assignWithCopy for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    else

    v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = 1;
    }
    else
    {
      v7 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 72) = 0;
      v8 = v7;
    }
  }
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LabelPlaceholder.Appearance(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    else

    v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 72) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelPlaceholder.Appearance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LabelPlaceholder.Appearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AC6E60B8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1AC6E60D4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LabelPlaceholder.Appearance()
{
  return &type metadata for LabelPlaceholder.Appearance;
}

uint64_t sub_1AC6E6110()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6E6120()
{
  return swift_deallocObject();
}

double MeasurementRange.constrain(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double result)
{
  double v5;
  BOOL v6;

  v5 = *(double *)&a1;
  v6 = (a2 & 1) == 0 && *(double *)&a1 > result;
  if (!v6)
    v5 = result;
  if (*(double *)&a3 < result)
    result = *(double *)&a3;
  if ((a4 & 1) != 0)
    result = v5;
  if (v6)
    return v5;
  return result;
}

uint64_t static MeasurementRange.infinite.getter()
{
  return 0;
}

uint64_t MeasurementRange.minimum.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

double (*MeasurementRange.minimum.modify())(void)
{
  return nullsub_1;
}

uint64_t MeasurementRange.maximum.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t MeasurementRange.maximum.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

double (*MeasurementRange.maximum.modify())(void)
{
  return nullsub_1;
}

uint64_t MeasurementRange.contains(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5)
{
  if ((a2 & 1) != 0 || *(double *)&a1 <= a5)
    return a4 & 1 | (*(double *)&a3 >= a5);
  else
    return 0;
}

uint64_t MeasurementRange.description.getter(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5;

  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      v5 = sub_1AC7264D8();
      sub_1AC7262C8();
      return v5;
    }
    v5 = sub_1AC7264D8();
    sub_1AC7262C8();
LABEL_6:
    sub_1AC7264D8();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    return v5;
  }
  if ((a4 & 1) == 0)
  {
    v5 = 3026478;
    goto LABEL_6;
  }
  return 0x6574696E69666E69;
}

uint64_t static MeasurementRange.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0 || *(double *)&a1 != *(double *)&a5)
  {
    return 0;
  }
  if ((a4 & 1) != 0)
  {
    if ((a8 & 1) != 0)
      return 1;
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1AC6E634C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 24))
      return 1;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t sub_1AC6E63B4()
{
  uint64_t v0;

  return MeasurementRange.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t ... prefix(_:)()
{
  return 0;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MeasurementRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MeasurementRange(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementRange()
{
  return &type metadata for MeasurementRange;
}

void UILabel.textAppearance.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(id *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v1, sel_setFont_);
  objc_msgSend(v1, sel_setTextAlignment_, v2);
  objc_msgSend(v1, sel_setLineBreakMode_, v3);
  objc_msgSend(v1, sel_setNumberOfLines_, v4);
  objc_msgSend(v1, sel_setLineSpacing_, v5);

}

id UILabel.init(with:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setFont_, v1);
  objc_msgSend(v6, sel_setTextAlignment_, v2);
  objc_msgSend(v6, sel_setLineBreakMode_, v4);
  objc_msgSend(v6, sel_setNumberOfLines_, v3);
  objc_msgSend(v6, sel_setLineSpacing_, v5);

  return v6;
}

id UILabel.textAppearance.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id result;
  id v5;
  id v6;
  id v7;
  id v8;

  v3 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
  result = objc_msgSend(v1, sel_font);
  if (result)
  {
    v5 = result;

    v6 = objc_msgSend(v1, sel_textAlignment);
    v7 = objc_msgSend(v1, sel_lineBreakMode);
    v8 = objc_msgSend(v1, sel_numberOfLines);
    result = objc_msgSend(v1, sel_lineSpacing);
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v7;
    a1[3] = v8;
    a1[4] = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AC6E6708(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *a2;
  v7 = *(id *)a1;
  objc_msgSend(v6, sel_setFont_, v7);
  objc_msgSend(v6, sel_setTextAlignment_, v2);
  objc_msgSend(v6, sel_setLineBreakMode_, v3);
  objc_msgSend(v6, sel_setNumberOfLines_, v4);
  objc_msgSend(v6, sel_setLineSpacing_, v5);

}

void (*UILabel.textAppearance.modify(_QWORD *a1))(void ***a1, char a2)
{
  void *v1;
  _QWORD *v3;
  id v4;
  void (*result)(void ***, char);
  void (*v6)(void ***, char);
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], 0);
  result = (void (*)(void ***, char))objc_msgSend(v1, sel_font);
  if (result)
  {
    v6 = result;

    v7 = objc_msgSend(v1, sel_textAlignment);
    v8 = objc_msgSend(v1, sel_lineBreakMode);
    v9 = objc_msgSend(v1, sel_numberOfLines);
    v10 = objc_msgSend(v1, sel_lineSpacing);
    *v3 = v6;
    v3[1] = v7;
    v3[2] = v8;
    v3[3] = v9;
    v3[4] = v10;
    return sub_1AC6E68B8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1AC6E68B8(void ***a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  if ((a2 & 1) != 0)
  {
    v9 = v3;
    objc_msgSend(v8, sel_setFont_, v9);
    objc_msgSend(v8, sel_setTextAlignment_, v4);
    objc_msgSend(v8, sel_setLineBreakMode_, v6);
    objc_msgSend(v8, sel_setNumberOfLines_, v5);
    objc_msgSend(v8, sel_setLineSpacing_, v7);

    v3 = *v2;
  }
  else
  {
    objc_msgSend((*a1)[5], sel_setFont_, v3);
    objc_msgSend(v8, sel_setTextAlignment_, v4);
    objc_msgSend(v8, sel_setLineBreakMode_, v6);
    objc_msgSend(v8, sel_setNumberOfLines_, v5);
    objc_msgSend(v8, sel_setLineSpacing_, v7);
  }

  free(v2);
}

double sub_1AC6E69E0@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  UILabel.textAppearance.getter(&v3);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

ValueMetadata *type metadata accessor for MetricsVisualizer()
{
  return &type metadata for MetricsVisualizer;
}

uint64_t sub_1AC6E6A40()
{
  uint64_t v0;

  v0 = sub_1AC7260E8();
  __swift_allocate_value_buffer(v0, qword_1EEC95CA0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEC95CA0);
  return sub_1AC7260F4();
}

uint64_t sub_1AC6E6AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_1AC7260E8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1AC72610C();
  __swift_allocate_value_buffer(v4, qword_1EEC95CB8);
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEC95CB8);
  if (qword_1EEC8A208 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1EEC95CA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_1AC726100();
}

uint64_t sub_1AC6E6B9C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

double sub_1AC6E6BC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v3 = *(_QWORD *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*v0 + 16), v2);
  return (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3) - *(double *)(v1 + 64);
}

uint64_t sub_1AC6E6C28(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *v4;
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(_QWORD *)(v9 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v9 + 16), v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v11 + 24))(v10, v11, *(double *)(v9 + 64) + a1, *(double *)(v9 + 56) + a2, a3 - (*(double *)(v9 + 64) + *(double *)(v9 + 80)), a4 - (*(double *)(v9 + 56) + *(double *)(v9 + 72)));
}

void (*sub_1AC6E6CB0(double **a1))(double **a1)
{
  double *v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  v4 = *(_QWORD *)v1;
  v3[4] = *v1;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + 16), v5);
  v7 = (*(double (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  v8 = *(double *)(v4 + 56);
  v9 = *(double *)(v4 + 64);
  v12 = v11 + v9 + *(double *)(v4 + 80);
  v14 = v13 + v8 + *(double *)(v4 + 72);
  *v3 = v7 - v9;
  v3[1] = v10 - v8;
  v3[2] = v12;
  v3[3] = v14;
  return sub_1AC6E6D4C;
}

void sub_1AC6E6D4C(double **a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = *((_QWORD *)*a1 + 4);
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 16), v7);
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v8 + 24))(v7, v8, v3 + *(double *)(v2 + 64), v4 + *(double *)(v2 + 56), v5 - (*(double *)(v2 + 64) + *(double *)(v2 + 80)), v6 - (*(double *)(v2 + 56) + *(double *)(v2 + 72)));
  free(v1);
}

uint64_t sub_1AC6E6DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2) & 1;
}

uint64_t sub_1AC6E6E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v3, v4);
}

uint64_t (*sub_1AC6E6E70(uint64_t a1))(unsigned __int8 *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)*v1;
  *(_QWORD *)a1 = *v1;
  v4 = v3[5];
  v5 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v4);
  *(_BYTE *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5) & 1;
  return sub_1AC6E6ED4;
}

uint64_t sub_1AC6E6ED4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[8];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)a1 + 16), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, v2, v3);
}

uint64_t sub_1AC6E6F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2) & 1;
}

double sub_1AC6E6F74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v3 = *(_QWORD *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*v0 + 16), v2);
  return (*(double (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3) - *(double *)(v1 + 64);
}

double sub_1AC6E6FDC(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(double *)(*(_QWORD *)v3 + 64) + *(double *)(*(_QWORD *)v3 + 80);
  v6 = a2 - v5;
  v7 = a3 - (*(double *)(*(_QWORD *)v3 + 56) + *(double *)(*(_QWORD *)v3 + 72));
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v3 + 16), v8);
  return v5 + (*(double (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(v9 + 8) + 8))(a1, v8, v6, v7);
}

double *LayoutView.withLayoutMargins(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double **a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double *result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for InsetLayoutView();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  result = sub_1AC6E7170((uint64_t)v17, a4, a5, a6, a7, v18, a1, a2);
  a3[3] = (double *)v18;
  a3[4] = (double *)&off_1E5BF7338;
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for InsetLayoutView()
{
  return objc_opt_self();
}

double *sub_1AC6E7170(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_0;
  double *v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a7;
  v19 = a8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_0, a1, a7);
  v15 = (double *)swift_allocObject();
  sub_1AC68AAA4(&v17, (uint64_t)(v15 + 2));
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  v15[10] = a5;
  return v15;
}

id UIImageView.init(with:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, sel_setContentMode_, v2);
  objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v1);

  return v3;
}

void UIImageView.imageAppearance.setter(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = *(id *)a1;
  objc_msgSend(v1, sel_setContentMode_, *(_QWORD *)(a1 + 8));
  objc_msgSend(v1, sel_setPreferredSymbolConfiguration_, v2);

}

id UIImageView.imageAppearance.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id result;

  v3 = objc_msgSend(v1, sel_contentMode);
  result = objc_msgSend(v1, sel_preferredSymbolConfiguration);
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1AC6E7330(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = *(id *)a1;
  objc_msgSend(v3, sel_setContentMode_, v2);
  objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);

}

void (*UIImageView.imageAppearance.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v3;

  a1[2] = v1;
  v3 = objc_msgSend(v1, sel_contentMode);
  *a1 = objc_msgSend(v1, sel_preferredSymbolConfiguration);
  a1[1] = v3;
  return sub_1AC6E73F0;
}

void sub_1AC6E73F0(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    v4 = *(id *)a1;
    objc_msgSend(v3, sel_setContentMode_, v2);
    objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);

  }
  else
  {
    v4 = *(id *)a1;
    objc_msgSend(*(id *)(a1 + 16), sel_setContentMode_, v2);
    objc_msgSend(v3, sel_setPreferredSymbolConfiguration_, v4);
  }

}

id sub_1AC6E7488@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id result;

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_contentMode);
  result = objc_msgSend(v3, sel_preferredSymbolConfiguration);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t HorizontalSpaceMeasurable.init(_:multiplier:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
  v6 = swift_allocObject();
  result = sub_1AC68AAA4(a1, v6 + 16);
  *(_QWORD *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t HorizontalSpaceMeasurable.horizontalSpace.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

double HorizontalSpaceMeasurable.multiplier.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double HorizontalSpaceMeasurable.measurements(fitting:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  double v19;
  double v21;
  double v22;
  void (*v23)(_BYTE *, uint64_t);
  _BYTE v24[24];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = sub_1AC726A48();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v9 = &v24[-v8];
  v10 = *(double *)(v1 + 8);
  v11 = *(_QWORD *)v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v11, (uint64_t)v25);
  v12 = v26;
  v13 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  v14 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v15 = v10 * v14;
  if (qword_1ED0BE338 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED0BE2C8);
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v17(v9, v16, v3);
  *(double *)v25 = v15;
  v17(v6, (uint64_t)v9, v3);
  v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 88))(v6, v3);
  if (v18 == *MEMORY[0x1E0DED4F0])
  {
    v19 = round(v15);
LABEL_13:
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
    return v19;
  }
  if (v18 == *MEMORY[0x1E0DED4E8])
  {
    v19 = rint(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E0DED500])
  {
    v19 = ceil(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E0DED508])
  {
    v19 = floor(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E0DED4D8])
  {
    v19 = trunc(v15);
    goto LABEL_13;
  }
  if (v18 == *MEMORY[0x1E0DED4E0])
  {
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
    v21 = ceil(v15);
    v22 = floor(v15);
    if (v15 < 0.0)
      return v22;
    else
      return v21;
  }
  else
  {
    sub_1AC7264E4();
    v23 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
    v23(v9, v3);
    v23(v6, v3);
    return *(double *)v25;
  }
}

double sub_1AC6E7828(uint64_t a1)
{
  return HorizontalSpaceMeasurable.measurements(fitting:in:)(a1);
}

ValueMetadata *type metadata accessor for HorizontalSpaceMeasurable()
{
  return &type metadata for HorizontalSpaceMeasurable;
}

uint64_t type metadata accessor for Indirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Indirect);
}

uint64_t sub_1AC6E785C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, a2);
  return sub_1AC726268();
}

uint64_t sub_1AC6E78F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0x7463657269646E49;
  v11 = 0xE900000000000028;
  v7 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, a2);
  sub_1AC726268();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return v10;
}

uint64_t sub_1AC6E79CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1AC6E785C(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1AC6E79DC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1AC6E78F4(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1AC6E79EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1AF440830](&unk_1AC72DD34, a1, &v4);
}

uint64_t sub_1AC6E7A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[24];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v18[-v9];
  v12 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 88);
  swift_beginAccess();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, a3);
  v14 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 88);
  swift_beginAccess();
  v13(v7, v14, a3);
  v15 = sub_1AC7261FC();
  v16 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v16(v7, a3);
  v16(v10, a3);
  return v15 & 1;
}

uint64_t sub_1AC6E7B4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1AC6E7A24(*a1, *a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1AC6E7B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v7 + *(_QWORD *)(*(_QWORD *)v7 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, a3);
  sub_1AC7261CC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t sub_1AC6E7C20(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  sub_1AC726AFC();
  sub_1AC6E7B60((uint64_t)v5, a1, a2);
  return sub_1AC726B2C();
}

uint64_t sub_1AC6E7C7C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1AC6E7C20(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1AC6E7C90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1AC6E7B60(a1, *v2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_1AC6E7CA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_1AC726AFC();
  sub_1AC6E7B60((uint64_t)v5, *v2, *(_QWORD *)(a2 + 16));
  return sub_1AC726B2C();
}

uint64_t AnyPlacementSequence.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_0;

  a5[3] = type metadata accessor for _ConcretePlacementSequenceBox(0, a2, a3, a4);
  a5[4] = (uint64_t)&off_1E5BF99F0;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_0, a1, a2);
}

uint64_t type metadata accessor for _ConcretePlacementSequenceBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConcretePlacementSequenceBox);
}

uint64_t sub_1AC6E7D5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1AC6E7D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  __n128 v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v1, v2, v7);
  sub_1AC726340();
  swift_getAssociatedConformanceWitness();
  return sub_1AC726808();
}

uint64_t AnyPlacementSequence.base.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyPlacementSequence.union.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t AnyPlacementSequence.makeIterator()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t AnyPlacementSequence.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  return sub_1AC726268();
}

uint64_t sub_1AC6E7FC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

unint64_t sub_1AC6E8014(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6E8038();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6E8038()
{
  unint64_t result;

  result = qword_1EEC8B388;
  if (!qword_1EEC8B388)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for AnyPlacementSequence, &type metadata for AnyPlacementSequence);
    atomic_store(result, (unint64_t *)&qword_1EEC8B388);
  }
  return result;
}

uint64_t sub_1AC6E807C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  return sub_1AC726268();
}

unint64_t sub_1AC6E80E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC8B390;
  if (!qword_1EEC8B390)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEC8B398);
    result = MEMORY[0x1AF440830](MEMORY[0x1E0DEC1E8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC8B390);
  }
  return result;
}

uint64_t sub_1AC6E8130@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = (uint64_t)v1;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  result = sub_1AC6CCF24(v2);
  *a1 = v6;
  return result;
}

uint64_t sub_1AC6E8194()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AC7100D0(v0);
  sub_1AC6CCF24(v0);
  return v1;
}

uint64_t sub_1AC6E81C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1AC6E81D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for AnyPlacementSequence()
{
  return &type metadata for AnyPlacementSequence;
}

uint64_t sub_1AC6E81E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1AC6E8298 + 4 * byte_1AC72DD70[(v7 - 1)]))();
}

void sub_1AC6E82E8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t TallLocaleMeasurable.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BDD40);
  v4 = swift_allocObject();
  result = sub_1AC68AAA4(a1, v4 + 16);
  *a2 = v4;
  return result;
}

uint64_t TallLocaleMeasurable.dimension.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t _s5JetUI20TallLocaleMeasurableV12measurements7fitting2inSo14JUMeasurementsVSo6CGSizeV_So18UITraitEnvironment_ptF_0(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  _QWORD v13[6];

  v3 = sub_1AC725968();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v7 = *v1;
  if (qword_1ED0BD770 != -1)
    swift_once();
  sub_1AC72664C();
  v8 = Locale.hasExtraTallWritingSystem.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    swift_beginAccess();
    sub_1AC68E218(v7 + 16, (uint64_t)v13);
    v10 = v13[4];
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v11 = objc_msgSend(a1, sel_traitCollection);
    (*(void (**)(void))(v10 + 16))();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

ValueMetadata *type metadata accessor for TallLocaleMeasurable()
{
  return &type metadata for TallLocaleMeasurable;
}

uint64_t sub_1AC6E86E8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE198);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LayoutTextView.numberOfLines.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LayoutTextView.lineBreakMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutTextView.font.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LayoutTextView.font.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of LayoutTextView.languageAwareOutsets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LayoutTextView.textLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

id static UITraitCollection.withSystemPreferredContentSizeCategory.getter()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_system);
  v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);

  v2 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, v1);
  return v2;
}

id Placeable<>.place(at:with:)()
{
  return sub_1AC69627C();
}

id static ObjCFunctions.traitCollection(for:)(void *a1)
{
  return objc_msgSend(a1, sel_traitCollection);
}

BOOL UITraitCollection.isSizeClassRegular.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_userInterfaceIdiom) == (id)1 && objc_msgSend(v0, sel_horizontalSizeClass) == (id)2;
}

uint64_t Measurable.measuredSize(fitting:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

CGSize __swiftcall Measurable.measuredSize(fitting:with:)(CGSize fitting, UITraitCollection with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  uint64_t v9;
  objc_class *v10;
  void *v11;
  id v12;
  objc_class *v13;
  char *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGSize result;
  objc_super v22;

  v4 = v3;
  v5 = v2;
  height = fitting.height;
  width = fitting.width;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED0BDE00);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AC727FB0;
  *(UITraitCollection *)(v9 + 32) = with;
  sub_1AC69232C();
  v10 = with.super.isa;
  v11 = (void *)sub_1AC726394();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithTraitsFromCollections_, v11);

  v13 = (objc_class *)type metadata accessor for TraitEnvironmentPlaceholder();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC5JetUI27TraitEnvironmentPlaceholder_traitCollection] = v12;
  v22.receiver = v14;
  v22.super_class = v13;
  v15 = objc_msgSendSuper2(&v22, sel_init);
  v16 = (*(double (**)(id, uint64_t, uint64_t, double, double))(v4 + 8))(v15, v5, v4, width, height);
  v18 = v17;

  v19 = v16;
  v20 = v18;
  result.height = v20;
  result.width = v19;
  return result;
}

__n128 AspectFitMeasurable.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void AspectFitMeasurable.init(_:_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

__n128 AspectFitMeasurable.aspectRatio.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AspectFitMeasurable.aspectRatio.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

double (*AspectFitMeasurable.aspectRatio.modify())(void)
{
  return nullsub_1;
}

double AspectFitMeasurable.measurements(fitting:in:)(void *a1, double a2, double a3)
{
  double *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  double v18;
  BOOL v19;
  double v20;
  double v21;
  id v22;
  double v23;
  double v24;
  double v25;
  id v26;
  double v27;
  uint64_t v29;

  v7 = sub_1AC726A48();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - v12;
  v14 = *v3;
  v15 = v3[1];
  if (*v3 == v15)
  {
    if (a3 < a2)
      return a3;
  }
  else
  {
    v16 = *MEMORY[0x1E0DED500];
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    if (v15 >= v14)
    {
      v24 = v14 / v15;
      if (v15 == 0.0)
        v24 = 0.0;
      v25 = v24 * a3;
      v17(v10, v16, v7);
      v26 = objc_msgSend(a1, sel_traitCollection);
      objc_msgSend(v26, sel_displayScale);
      if (v27 <= 0.0)
        v27 = ForJetUIOnly_MainScreenScale();
      a2 = sub_1AC68EE10((uint64_t)v10, v27, v25);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      v18 = v15 / v14;
      v19 = v14 == 0.0;
      v20 = 0.0;
      if (!v19)
        v20 = v18;
      v21 = v20 * a2;
      v17((char *)&v29 - v12, v16, v7);
      v22 = objc_msgSend(a1, sel_traitCollection);
      objc_msgSend(v22, sel_displayScale);
      if (v23 <= 0.0)
        v23 = ForJetUIOnly_MainScreenScale();
      sub_1AC68EE10((uint64_t)v13, v23, v21);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  return a2;
}

double sub_1AC6E8BE0(void *a1, double a2, double a3)
{
  return AspectFitMeasurable.measurements(fitting:in:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for AspectFitMeasurable()
{
  return &type metadata for AspectFitMeasurable;
}

ValueMetadata *type metadata accessor for PlatformUI()
{
  return &type metadata for PlatformUI;
}

uint64_t Models.VideoControls.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Models.VideoControls.prominentPlay.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Models.VideoControls.fullScreenToggle.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Models.VideoControls.inlinePlayPause.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Models.VideoControls.muteUnmute.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Models.VideoControls.scrubber.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void sub_1AC6E8C5C()
{
  qword_1EEC8B3A0 = 31;
}

_QWORD *static Models.VideoControls.all.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1AC6E8D18(&qword_1EEC8A220, &qword_1EEC8B3A0, a1);
}

void sub_1AC6E8CC8()
{
  qword_1EEC8B3A8 = 14;
}

_QWORD *static Models.VideoControls.inline.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1AC6E8D18(&qword_1EEC8A228, &qword_1EEC8B3A8, a1);
}

_QWORD *sub_1AC6E8D18@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

void static Models.VideoControls.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Models.VideoControls.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Models.VideoControls.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;

  v25 = a2;
  v26 = a3;
  v4 = sub_1AC725C74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v25 - v18;
  sub_1AC725C80();
  v20 = sub_1AC725C38();
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v19, v4);
  LODWORD(v19) = v20 & 1;
  sub_1AC725C80();
  v22 = sub_1AC725C38();
  v21(v16, v4);
  sub_1AC725C80();
  LOBYTE(v16) = sub_1AC725C38();
  v21(v13, v4);
  LODWORD(v19) = v19 & 0xFFFFFFF9 | (2 * (v22 & 1)) & 0xFB | (4 * (v16 & 1));
  sub_1AC725C80();
  LOBYTE(v16) = sub_1AC725C38();
  v21(v10, v4);
  LODWORD(v19) = v19 & 0xFFFFFFF7 | (8 * (v16 & 1));
  sub_1AC725C80();
  LOBYTE(v16) = sub_1AC725C38();
  v21(v7, v4);
  v23 = sub_1AC725D58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v25, v23);
  result = ((uint64_t (*)(uint64_t, uint64_t))v21)(a1, v4);
  *v26 = v19 & 0xFFFFFFEF | (16 * (v16 & 1));
  return result;
}

BOOL Models.VideoControls.containsInlineControls.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (qword_1EEC8A228 != -1)
    swift_once();
  return (qword_1EEC8B3A8 & v1) != 0;
}

uint64_t sub_1AC6E9034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Models.VideoControls.init(deserializing:using:)(a1, a2, a3);
}

uint64_t Models.VideoControls.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;

  v5 = sub_1AC725D58();
  v24 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - v9;
  v23 = sub_1AC725C74();
  v26 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - v14;
  sub_1AC68E218((uint64_t)a1, (uint64_t)v25);
  sub_1AC725C44();
  if (!v2)
  {
    v21 = a2;
    v22 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v16 = v22;
    sub_1AC726B44();
    sub_1AC725D4C();
    v17 = v23;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v12, v15, v23);
    v18 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v7, v10, v16);
    Models.VideoControls.init(deserializing:using:)((uint64_t)v12, (uint64_t)v7, v25);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v17);
    *v21 = v25[0];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Models.VideoControls.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  char v7;
  char v8;
  _BYTE v9[24];
  uint64_t v10;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AC726B5C();
  sub_1AC6A9420(MEMORY[0x1E0DEE9D8]);
  if ((v2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1AC69EACC(1, 0x6E656E696D6F7270, 0xED000079616C5074, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1AC69EACC(1, 0xD000000000000010, 0x80000001AC731A20, v6);
  swift_bridgeObjectRelease();
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1AC69EACC(1, 0x756D6E556574756DLL, 0xEA00000000006574, v8);
    swift_bridgeObjectRelease();
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_10:
  v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_1AC69EACC(1, 0x6C50656E696C6E69, 0xEF65737561507961, v7);
  swift_bridgeObjectRelease();
  if ((v2 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v2 & 0x10) != 0)
  {
LABEL_6:
    v3 = swift_isUniquelyReferenced_nonNull_native();
    sub_1AC69EACC(1, 0x7265626275726373, 0xE800000000000000, v3);
    swift_bridgeObjectRelease();
  }
LABEL_7:
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B048);
  sub_1AC6D0CE0();
  sub_1AC726A90();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1AC6E9488@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Models.VideoControls.init(from:)(a1, a2);
}

uint64_t sub_1AC6E949C(_QWORD *a1)
{
  return Models.VideoControls.encode(to:)(a1);
}

unint64_t sub_1AC6E94B4()
{
  unint64_t result;

  result = qword_1EEC8B3B0;
  if (!qword_1EEC8B3B0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B3B0);
  }
  return result;
}

unint64_t sub_1AC6E94FC()
{
  unint64_t result;

  result = qword_1EEC8B3B8;
  if (!qword_1EEC8B3B8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B3B8);
  }
  return result;
}

unint64_t sub_1AC6E9544()
{
  unint64_t result;

  result = qword_1EEC8B3C0;
  if (!qword_1EEC8B3C0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B3C0);
  }
  return result;
}

unint64_t sub_1AC6E958C()
{
  unint64_t result;

  result = qword_1EEC8B3C8;
  if (!qword_1EEC8B3C8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Models.VideoControls, &type metadata for Models.VideoControls);
    atomic_store(result, (unint64_t *)&qword_1EEC8B3C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Models.VideoControls()
{
  return &type metadata for Models.VideoControls;
}

uint64_t *sub_1AC6E95E0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AC7258B4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1AC6E9698(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6E96F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AC6E9784(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AC6E9838(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1AC6E98A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1AC7258B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AC6E993C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6E9948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1AC7258B4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1AC6E99C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AC6E99D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1AC7258B4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DSZipPackager()
{
  uint64_t result;

  result = qword_1EEC8B3D0;
  if (!qword_1EEC8B3D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1AC6E9A84()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AC7258B4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1AC6E9B04(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v6 = v5;
  v11 = *a3;
  v12 = type metadata accessor for DSZipPackager();
  if ((v11 & 1) != 0)
    v13 = *(int *)(v12 + 20);
  else
    v13 = *(int *)(v12 + 24);
  if (*(_QWORD *)(*(_QWORD *)(v6 + v13) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1AC6B4E9C(a4, a5);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return 0;
  }
  swift_bridgeObjectRetain();
  sub_1AC69FEFC(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + v13);
  *(_QWORD *)(v6 + v13) = 0x8000000000000000;
  sub_1AC69ED58(a1, a2, a4, a5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + v13) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

void sub_1AC6E9C0C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  unsigned int v27;
  void *v28;
  id v29;
  unsigned int v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  unsigned int v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t i;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  unint64_t j;
  unint64_t v63;
  int64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  char *v70;
  void *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  _QWORD v81[2];
  char *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t aBlock;
  unint64_t v94;
  uint64_t (*v95)(uint64_t);
  void *v96;
  uint64_t (*v97)();
  uint64_t v98;
  uint64_t v99;

  v81[0] = a1;
  v99 = *MEMORY[0x1E0C80C00];
  v2 = sub_1AC7258B4();
  v3 = *(_QWORD *)(v2 - 8);
  v90 = v2;
  v91 = v3;
  MEMORY[0x1E0C80A78](v2);
  v82 = (char *)v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v89 = (char *)v81 - v6;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v81 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v81 - v11;
  v81[1] = v13;
  MEMORY[0x1E0C80A78](v14);
  v86 = (char *)v81 - v15;
  sub_1AC725884();
  v85 = v1;
  sub_1AC725884();
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel_defaultManager);
  sub_1AC72589C();
  v18 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_fileExistsAtPath_, v18);

  v92 = v12;
  v84 = v17;
  if (v19)
  {
    sub_1AC72589C();
    v20 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    aBlock = 0;
    v21 = objc_msgSend(v17, sel_removeItemAtPath_error_, v20, &aBlock);

    if (v21)
    {
      v22 = (id)aBlock;
    }
    else
    {
      v23 = (id)aBlock;
      v24 = (void *)sub_1AC725860();

      swift_willThrow();
    }
  }
  v25 = objc_msgSend(v16, sel_defaultManager, v81[0]);
  sub_1AC72589C();
  v26 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v25, sel_fileExistsAtPath_, v26);

  if (v27)
  {
    sub_1AC72589C();
    v28 = (void *)sub_1AC726208();
    swift_bridgeObjectRelease();
    aBlock = 0;
    v29 = v84;
    v30 = objc_msgSend(v84, (SEL)&selRef_subviews + 3, v28, &aBlock);

    if (v30)
    {
      v31 = (id)aBlock;
    }
    else
    {
      v32 = (id)aBlock;
      v33 = (void *)sub_1AC725860();

      swift_willThrow();
    }
  }
  else
  {
    v29 = v84;
  }
  v34 = (void *)sub_1AC725878();
  aBlock = 0;
  v35 = objc_msgSend(v29, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v34, 1, 0, &aBlock);

  if (v35)
  {
    v36 = (id)aBlock;
  }
  else
  {
    v37 = (id)aBlock;
    v38 = (void *)sub_1AC725860();

    swift_willThrow();
  }
  v83 = type metadata accessor for DSZipPackager();
  v39 = *(_QWORD *)(v85 + *(int *)(v83 + 20));
  v40 = *(_QWORD *)(v39 + 64);
  v87 = v39 + 64;
  v41 = 1 << *(_BYTE *)(v39 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v43 = v42 & v40;
  v88 = (unint64_t)(v41 + 63) >> 6;
  swift_bridgeObjectRetain();
  v44 = 0;
  if (v43)
    goto LABEL_19;
  while (1)
  {
    v47 = __OFADD__(v44++, 1);
    if (v47)
    {
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if (v44 >= v88)
      break;
    v48 = *(_QWORD *)(v87 + 8 * v44);
    v49 = v90;
    if (!v48)
    {
      v50 = v44 + 1;
      if (v44 + 1 >= v88)
        goto LABEL_37;
      v48 = *(_QWORD *)(v87 + 8 * v50);
      if (!v48)
      {
        v50 = v44 + 2;
        if (v44 + 2 >= v88)
          goto LABEL_37;
        v48 = *(_QWORD *)(v87 + 8 * v50);
        if (!v48)
        {
          v50 = v44 + 3;
          if (v44 + 3 >= v88)
            goto LABEL_37;
          v48 = *(_QWORD *)(v87 + 8 * v50);
          if (!v48)
          {
            while (1)
            {
              v44 = v50 + 1;
              if (__OFADD__(v50, 1))
                break;
              if (v44 >= v88)
                goto LABEL_37;
              v48 = *(_QWORD *)(v87 + 8 * v44);
              ++v50;
              if (v48)
                goto LABEL_30;
            }
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
        }
      }
      v44 = v50;
    }
LABEL_30:
    v43 = (v48 - 1) & v48;
    for (i = __clz(__rbit64(v48)) + (v44 << 6); ; i = v45 | (v44 << 6))
    {
      v51 = (uint64_t *)(*(_QWORD *)(v39 + 56) + 16 * i);
      v53 = *v51;
      v52 = v51[1];
      aBlock = 0x5F73676F6CLL;
      v94 = 0xE500000000000000;
      swift_bridgeObjectRetain();
      sub_1AC69FEFC(v53, v52);
      sub_1AC7262C8();
      swift_bridgeObjectRelease();
      sub_1AC725884();
      swift_bridgeObjectRelease();
      sub_1AC7258E4();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v9, v90);
      sub_1AC69FEB8(v53, v52);
      if (!v43)
        break;
LABEL_19:
      v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
    }
  }
  v49 = v90;
LABEL_37:
  v54 = v83;
  swift_release();
  v55 = *(_QWORD *)(v85 + *(int *)(v54 + 24));
  v56 = *(_QWORD *)(v55 + 64);
  v87 = v55 + 64;
  v57 = 1 << *(_BYTE *)(v55 + 32);
  v58 = -1;
  if (v57 < 64)
    v58 = ~(-1 << v57);
  v59 = v58 & v56;
  v88 = (unint64_t)(v57 + 63) >> 6;
  swift_bridgeObjectRetain();
  v60 = 0;
  if (v59)
    goto LABEL_42;
  while (1)
  {
    v47 = __OFADD__(v60++, 1);
    if (v47)
      goto LABEL_62;
    if (v60 >= v88)
      goto LABEL_59;
    v63 = *(_QWORD *)(v87 + 8 * v60);
    if (!v63)
      break;
LABEL_53:
    v59 = (v63 - 1) & v63;
    for (j = __clz(__rbit64(v63)) + (v60 << 6); ; j = v61 | (v60 << 6))
    {
      v65 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 16 * j);
      v67 = *v65;
      v66 = v65[1];
      aBlock = 0x7365727574706163;
      v94 = 0xE800000000000000;
      swift_bridgeObjectRetain();
      sub_1AC69FEFC(v67, v66);
      sub_1AC7262C8();
      swift_bridgeObjectRelease();
      v68 = v89;
      sub_1AC725884();
      swift_bridgeObjectRelease();
      sub_1AC7258E4();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v68, v49);
      sub_1AC69FEB8(v67, v66);
      if (!v59)
        break;
LABEL_42:
      v61 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
    }
  }
  v64 = v60 + 1;
  if (v60 + 1 >= v88)
    goto LABEL_59;
  v63 = *(_QWORD *)(v87 + 8 * v64);
  if (v63)
    goto LABEL_52;
  v64 = v60 + 2;
  if (v60 + 2 >= v88)
    goto LABEL_59;
  v63 = *(_QWORD *)(v87 + 8 * v64);
  if (v63)
  {
LABEL_52:
    v60 = v64;
    goto LABEL_53;
  }
  v64 = v60 + 3;
  if (v60 + 3 < v88)
  {
    v63 = *(_QWORD *)(v87 + 8 * v64);
    if (!v63)
    {
      while (1)
      {
        v60 = v64 + 1;
        if (__OFADD__(v64, 1))
          break;
        if (v60 >= v88)
          goto LABEL_59;
        v63 = *(_QWORD *)(v87 + 8 * v60);
        ++v64;
        if (v63)
          goto LABEL_53;
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
    }
    goto LABEL_52;
  }
LABEL_59:
  swift_release();
  v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
  v70 = v92;
  v71 = (void *)sub_1AC725878();
  v72 = v91;
  v73 = v82;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v82, v86, v49);
  v74 = (*(unsigned __int8 *)(v72 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  v75 = swift_allocObject();
  v76 = v84;
  *(_QWORD *)(v75 + 16) = v84;
  v89 = *(char **)(v72 + 32);
  ((void (*)(unint64_t, char *, uint64_t))v89)(v75 + v74, v73, v49);
  v77 = swift_allocObject();
  *(_QWORD *)(v77 + 16) = sub_1AC6EA91C;
  *(_QWORD *)(v77 + 24) = v75;
  v97 = sub_1AC690AE8;
  v98 = v77;
  aBlock = MEMORY[0x1E0C809B0];
  v94 = 1107296256;
  v95 = sub_1AC6EA6C4;
  v96 = &block_descriptor_5;
  v78 = _Block_copy(&aBlock);
  v79 = v76;
  swift_retain();
  swift_release();
  aBlock = 0;
  objc_msgSend(v69, sel_coordinateReadingItemAtURL_options_error_byAccessor_, v71, 8, &aBlock, v78);
  _Block_release(v78);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v49);
  v80 = (id)aBlock;
  LOBYTE(v69) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v69 & 1) != 0)
    goto LABEL_65;
  ((void (*)(_QWORD, char *, uint64_t))v89)(v81[0], v86, v49);
  swift_release();

}

void sub_1AC6EA5C4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = (void *)sub_1AC725878();
  v4 = (void *)sub_1AC725878();
  v9[0] = 0;
  v5 = objc_msgSend(a2, sel_moveItemAtURL_toURL_error_, v3, v4, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    v8 = (void *)sub_1AC725860();

    swift_willThrow();
  }
}

uint64_t sub_1AC6EA6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = sub_1AC7258B4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  sub_1AC725890();
  v6(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1AC6EA758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

void sub_1AC6EA790(uint64_t a1@<X8>)
{
  sub_1AC6E9C0C(a1);
}

uint64_t sub_1AC6EA7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = sub_1AC7258B4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = objc_msgSend(v7, sel_temporaryDirectory);

  sub_1AC725890();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1, v6, v3);
  v9 = sub_1AC6A9530(MEMORY[0x1E0DEE9D8]);
  v10 = *(int *)(a1 + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = v9;
  return result;
}

uint64_t sub_1AC6EA8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1AC7258B4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1AC6EA91C(uint64_t a1)
{
  uint64_t v1;

  sub_1AC7258B4();
  sub_1AC6EA5C4(a1, *(void **)(v1 + 16));
}

uint64_t sub_1AC6EA95C()
{
  return swift_deallocObject();
}

uint64_t CollectionContentReloadableCell.applyMatchedReloadTriggers(_:)()
{
  return 0;
}

uint64_t dispatch thunk of CollectionContentReloadableCell.automaticReloadTriggers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CollectionContentReloadableCell.applyMatchedReloadTriggers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t LineHeightDimension.init(with:multipliedBy:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE170);
  v6 = swift_allocObject();
  result = sub_1AC68AAA4(a1, v6 + 16);
  *(_QWORD *)a2 = v6;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t LineHeightDimension.init(multiplier:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;

  v13 = &type metadata for FontSource;
  v14 = &protocol witness table for FontSource;
  v6 = swift_allocObject();
  *(_QWORD *)&v12 = v6;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 48) = v7;
  *(_BYTE *)(v6 + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE170);
  v10 = swift_allocObject();
  result = sub_1AC68AAA4(&v12, v10 + 16);
  *(_QWORD *)a2 = v10;
  *(double *)(a2 + 8) = a3;
  return result;
}

uint64_t sub_1AC6EAA90()
{
  uint64_t v0;

  sub_1AC68D860(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t LineHeightDimension.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  unint64_t v5;

  v1 = *v0;
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1AC726868();
  v4 = 0;
  v5 = 0xE000000000000000;
  sub_1AC7262C8();
  swift_beginAccess();
  sub_1AC68E218(v1 + 16, (uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE178);
  sub_1AC726904();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  sub_1AC7262C8();
  sub_1AC7264D8();
  sub_1AC7262C8();
  swift_bridgeObjectRelease();
  sub_1AC7262C8();
  return v4;
}

double LineHeightDimension.rawValue(in:)(void *a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  _QWORD v11[5];

  v3 = *(double *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v11);
  v5 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v6 = objc_msgSend(a1, sel_traitCollection);
  v7 = (void *)(*(uint64_t (**)(void))(v5 + 8))();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  objc_msgSend(v7, sel_lineHeight);
  v9 = v8;

  return v3 * v9;
}

UIEdgeInsets __swiftcall LineHeightDimension.languageAwareOutsets(compatibleWith:)(UITraitCollection compatibleWith)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  UIEdgeInsets result;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v3, (uint64_t)v18);
  v4 = v19;
  v5 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v6 = (void *)(*(uint64_t (**)(Class, uint64_t, uint64_t))(v5 + 8))(compatibleWith.super.isa, v4, v5);
  v7 = UIFont.languageAwareOutsets.getter();
  v9 = v8;
  v11 = v10;
  v13 = v12;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  v14 = v7;
  v15 = v9;
  v16 = v11;
  v17 = v13;
  result.right = v17;
  result.bottom = v16;
  result.left = v15;
  result.top = v14;
  return result;
}

double sub_1AC6EAD5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v3, (uint64_t)v9);
  v4 = v10;
  v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, v4, v5);
  v7 = UIFont.languageAwareOutsets.getter();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v7;
}

double LineHeightDimension.multiplier.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t LineHeightDimension.source.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v3, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE178);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v5 = v10;
    v6 = v11;
    v7 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = v6;
  }
  else
  {
    *(_QWORD *)&v9[0] = 0;
    *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1AC726868();
    v12 = v9[0];
    *(_QWORD *)&v9[0] = 0;
    *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
    sub_1AC726868();
    v8 = v9[0];
    sub_1AC7262C8();
    sub_1AC68E218(v3, (uint64_t)v9);
    sub_1AC726904();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    sub_1AC7262C8();
    sub_1AC7264D8();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    sub_1AC7262C8();
    swift_bridgeObjectRelease();
    v12 = v8;
    sub_1AC7262C8();
    result = sub_1AC726910();
    __break(1u);
  }
  return result;
}

uint64_t _s5JetUI19LineHeightDimensionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[5];
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (*(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    LineHeightDimension.source.getter((uint64_t)&v26);
    v14 = v27;
    v15 = v26;
    v2 = v29;
    v13 = v28;
    v3 = v30;
    v4 = v31;
    v24[0] = v26;
    v24[1] = v27;
    v24[2] = v28;
    v24[3] = v29;
    v24[4] = v30;
    v25 = v31;
    LineHeightDimension.source.getter((uint64_t)&v18);
    v5 = v18;
    v6 = v19;
    v8 = v20;
    v7 = v21;
    v9 = v22;
    v10 = v23;
    v16[0] = v18;
    v16[1] = v19;
    v16[2] = v20;
    v16[3] = v21;
    v16[4] = v22;
    v17 = v23;
    v11 = _s5JetUI10FontSourceO2eeoiySbAC_ACtFZ_0((uint64_t)v24, (uint64_t)v16);
    sub_1AC68D860(v5, v6, v8, v7, v9, v10);
    sub_1AC68D860(v15, v14, v13, v2, v3, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

ValueMetadata *type metadata accessor for LineHeightDimension()
{
  return &type metadata for LineHeightDimension;
}

uint64_t sub_1AC6EB154()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  swift_checkMetadataState();
  sub_1AC726874();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1AC7261FC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t sub_1AC6EB27C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  swift_checkMetadataState();
  sub_1AC726874();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1AC7261FC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

void sub_1AC6EB3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v5);
  v7 = MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v7);
  v10 = (char *)&loc_1AC6EB4A4 + dword_1AC6EB634[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1AC6EB4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v0);
  *(_QWORD *)(v6 - 176) = v2;
  v7 = sub_1AC72646C();
  v8 = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v7);
  *(_QWORD *)(v6 - 128) = v7;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = v1;
  *(_QWORD *)(v6 - 104) = v3;
  sub_1AC7265A4();
  if ((*(_BYTE *)(v6 - 160) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v0);
    return 0;
  }
  else
  {
    v9 = *(_QWORD *)(v6 - 168);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v0);
  }
  return v9;
}

uint64_t ShelvesPresenter.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  ShelvesPresenter.init()();
  return v0;
}

uint64_t ShelvesPresenter.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v1 = v0;
  v2 = sub_1AC72661C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v2);
  v4 = sub_1AC725BB4();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1AC726628();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC690B38();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF8D8], v5);
  sub_1AC725BA8();
  v15[0] = MEMORY[0x1E0DEE9D8];
  sub_1AC688D20((unint64_t *)&qword_1ED0BE0B8, v3, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE0A8);
  sub_1AC6E4958(&qword_1ED0BE0B0, &qword_1ED0BE0A8, MEMORY[0x1E0DEAF38]);
  sub_1AC72676C();
  *(_QWORD *)(v0 + 16) = sub_1AC726664();
  *(_QWORD *)(v0 + 24) = sub_1AC7263E8();
  v9 = sub_1AC725DB8();
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v11 = MEMORY[0x1E0D3F890];
  v12 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v9);
  v13 = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v11);
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = v12;
  v15[3] = v13;
  sub_1AC725AA0();
  sub_1AC725BF0();
  *(_QWORD *)(v1 + 32) = sub_1AC725BE4();
  return v1;
}

uint64_t ShelvesPresenter.onApplySnapshot.getter()
{
  sub_1AC6EEBB0();
  return swift_retain();
}

uint64_t sub_1AC6EB8E8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3 + 24;
  swift_beginAccess();
  a1(v4);
  swift_endAccess();
  return sub_1AC6EB94C();
}

uint64_t sub_1AC6EB94C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = sub_1AC725DB8();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v5 = MEMORY[0x1E0D3F890];
  v20[0] = v3;
  v20[1] = v4;
  v20[2] = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v3);
  v20[3] = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v5);
  v6 = sub_1AC725AA0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v20 - v8;
  v10 = sub_1AC725BC0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (_QWORD *)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (void *)v0[2];
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v11 + 104))(v14, *MEMORY[0x1E0DEF740], v10, v12);
  v16 = v15;
  LOBYTE(v15) = sub_1AC725BCC();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    swift_beginAccess();
    v18 = *(_QWORD *)(v1 + 88);
    v19 = swift_bridgeObjectRetain();
    static DiffableData.makeSnapshot<A>(fromShelves:)(v19, v2, v18, (uint64_t)v9);
    swift_bridgeObjectRelease();
    sub_1AC725BD8();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AC6EBB00(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

Swift::Void __swiftcall ShelvesPresenter.reapplySnapshot()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v12[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1AC725B9C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AC725BB4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(_QWORD *)(v1 + 16);
  aBlock[4] = sub_1AC6EEBB8;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AC6EBB00;
  aBlock[3] = &block_descriptor_6;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1AC725BA8();
  v12[1] = MEMORY[0x1E0DEE9D8];
  sub_1AC688D20(&qword_1ED0BE090, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE098);
  sub_1AC6E4958(&qword_1ED0BE0A0, &qword_1ED0BE098, MEMORY[0x1E0DEAF38]);
  sub_1AC72676C();
  MEMORY[0x1AF43FC0C](0, v10, v6, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

uint64_t ShelvesPresenter.setContents<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6ECFA4(a1, a2, a3, (uint64_t)&unk_1E5BFFA98, (uint64_t)sub_1AC6EEBC0);
}

uint64_t sub_1AC6EBD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC72646C();
  sub_1AC726460();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a4);
  return sub_1AC726424();
}

uint64_t ShelvesPresenter.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a4;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v10 = *(_QWORD *)(v9 + 88);
  v23 = *(_QWORD *)(v9 + 80);
  v24 = v10;
  v12 = type metadata accessor for ShelvesPresenter.InsertionPoint(0, v23, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v23 - v16, a2, v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = (v14 + *(unsigned __int8 *)(v7 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = v23;
  *((_QWORD *)v20 + 3) = a3;
  v21 = v25;
  *((_QWORD *)v20 + 4) = v24;
  *((_QWORD *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v18], v17, v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v19], (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1AC6EDD94((uint64_t)sub_1AC6EECD8, (uint64_t)v20, (uint64_t)&unk_1E5BFFC28, (uint64_t)sub_1AC6FBD94, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1AC6EBF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v14 = type metadata accessor for ShelvesPresenter.InsertionPoint(0, v12, v13, v12);
  sub_1AC6EB3A8(v11, v14);
  v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, a5);
  v19[1] = v16;
  v17 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF58], v17);
  return sub_1AC7265E0();
}

uint64_t ShelvesPresenter.replace<A>(_:handlingProblemsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v6 = v5;
  v30 = a5;
  v31 = a2;
  v32 = a3;
  v9 = *v5;
  v34 = sub_1AC725B9C();
  v37 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1AC725BB4();
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a4 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v6[2];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v19, a1, a4, v18);
  v20 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = *(_QWORD *)(v9 + 80);
  *((_QWORD *)v22 + 3) = a4;
  v23 = v30;
  *((_QWORD *)v22 + 4) = *(_QWORD *)(v9 + 88);
  *((_QWORD *)v22 + 5) = v23;
  *((_QWORD *)v22 + 6) = v6;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v22[v20], v19, a4);
  v24 = &v22[v21];
  v25 = v32;
  *(_QWORD *)v24 = v31;
  *((_QWORD *)v24 + 1) = v25;
  aBlock[4] = sub_1AC6EEDEC;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AC6EBB00;
  aBlock[3] = &block_descriptor_9;
  v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1AC725BA8();
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1AC688D20(&qword_1ED0BE090, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE098);
  sub_1AC6E4958(&qword_1ED0BE0A0, &qword_1ED0BE098, MEMORY[0x1E0DEAF38]);
  v27 = v34;
  sub_1AC72676C();
  MEMORY[0x1AF43FC0C](0, v14, v11, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  return swift_release();
}

uint64_t sub_1AC6EC2F8(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t AssociatedConformanceWitness;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char isClassOrObjCExistentialType;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;

  v100 = a4;
  v99 = a3;
  v111 = a2;
  v93 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v106 = type metadata accessor for ShelvesPresenter.InsertionPoint(0, v9, v8, a4);
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v96 = (char *)&v86 - v10;
  v11 = sub_1AC725DB8();
  v98 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v97 = (char *)&v86 - v15;
  v17 = type metadata accessor for ShelvesPresenter.ReplaceSolution(0, v9, v8, v16);
  MEMORY[0x1E0C80A78](v17);
  v104 = (char *)&v86 - v18;
  v91 = v8;
  v19 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v112 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v113 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v86 - v21;
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v24);
  v103 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v86 - v27;
  v29 = sub_1AC7266C4();
  MEMORY[0x1E0C80A78](v29);
  v114 = (char *)&v86 - v30;
  v109 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v31);
  v108 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = a6;
  v110 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a6 + 8);
  v92 = a5;
  v116 = swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v115 = (char *)&v86 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v35 = MEMORY[0x1E0D3F890];
  v36 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v11);
  v37 = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v35);
  v122 = v11;
  v123 = v34;
  v124 = v36;
  v125 = v37;
  v87 = sub_1AC725AA0();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v89 = (uint64_t)&v86 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v94 = (uint64_t)&v86 - v40;
  v41 = sub_1AC7263E8();
  v42 = MEMORY[0x1AF43FA08](v41, v11);
  v102 = v11;
  v101 = v36;
  if (v42)
    v43 = sub_1AC6FBA38(v41, v11, v36);
  else
    v43 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  v121 = v43;
  v117 = (uint64_t *)(v93 + 24);
  swift_beginAccess();
  v44 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v44, v9, v91, v94);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v108, v111, v92);
  sub_1AC726340();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v46 = v114;
  v111 = AssociatedConformanceWitness;
  sub_1AC7266F4();
  v110 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v110(v46, 1, v9) != 1)
  {
    v107 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v109 = v19;
    v108 = v22;
    v95 = v13;
    v107(v28, v46, v9);
    while (1)
    {
      v64 = v117;
      v118 = *v117;
      swift_bridgeObjectRetain();
      sub_1AC726874();
      v65 = sub_1AC72646C();
      v66 = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v65);
      v124 = v65;
      v125 = v66;
      v126 = v19;
      v127 = v22;
      sub_1AC7265A4();
      v67 = v113;
      v68 = *(void (**)(char *, uint64_t))(v112 + 8);
      v68(v22, v113);
      swift_bridgeObjectRelease();
      if (v120 == 1)
      {
        v69 = v23;
        sub_1AC726874();
        v70 = v104;
        v99(v22);
        v68(v22, v67);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v70, 1, v106) != 1)
        {
          v71 = v105;
          v72 = v96;
          v73 = v106;
          (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v96, v104, v106);
          v74 = swift_bridgeObjectRetain();
          sub_1AC6EB3A8(v74, v73);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v103, v28, v9);
          swift_beginAccess();
          sub_1AC72643C();
          swift_endAccess();
          v75 = *(void (**)(char *, uint64_t))(v71 + 8);
          v23 = v69;
          v75(v72, v73);
        }
      }
      else
      {
        v56 = v119;
        swift_beginAccess();
        sub_1AC7263DC();
        v57 = *v64;
        sub_1AC6EEB60(v56, *v64);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v59 = v57 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v59 = v57;
        (*(void (**)(unint64_t, char *, uint64_t))(v23 + 24))(v59+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v56, v28, v9);
        swift_endAccess();
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v103, v28, v9);
        sub_1AC725DAC();
        v60 = v102;
        sub_1AC726550();
        v61 = v97;
        sub_1AC726520();
        (*(void (**)(char *, uint64_t))(v98 + 8))(v61, v60);
      }
      (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v9);
      v62 = v114;
      sub_1AC7266F4();
      v63 = v110(v62, 1, v9);
      v19 = v109;
      v22 = v108;
      if (v63 == 1)
        break;
      v107(v28, v62, v9);
    }
  }
  (*(void (**)(char *, uint64_t))(v88 + 8))(v115, v116);
  v47 = swift_bridgeObjectRetain();
  v48 = v89;
  v49 = v91;
  static DiffableData.makeSnapshot<A>(fromShelves:)(v47, v9, v91, v89);
  v50 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v50);
  v51 = v92;
  *(&v86 - 6) = v9;
  *(&v86 - 5) = v51;
  v52 = v90;
  *(&v86 - 4) = v49;
  *(&v86 - 3) = v52;
  *(&v86 - 2) = v94;
  *(&v86 - 1) = v48;
  swift_bridgeObjectRetain();
  v53 = sub_1AC726514();
  swift_bridgeObjectRelease();
  v121 = v53;
  swift_bridgeObjectRetain();
  v54 = sub_1AC72652C();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
  {
    v76 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v77 = objc_msgSend(v76, sel_bundleIdentifier);

    if (v77)
    {
      v78 = sub_1AC72622C();
      v80 = v79;

      if (v78 == 0x6C7070612E6D6F63 && v80 == 0xEF636973754D2E65)
      {
        swift_bridgeObjectRelease();
LABEL_21:
        sub_1AC725BD8();
        goto LABEL_22;
      }
      v81 = sub_1AC726A78();
      swift_bridgeObjectRelease();
      if ((v81 & 1) != 0)
        goto LABEL_21;
    }
LABEL_22:
    v122 = v53;
    v82 = sub_1AC726550();
    MEMORY[0x1AF440830](MEMORY[0x1E0DEB3D0], v82);
    sub_1AC726478();
    v55 = v87;
    sub_1AC725A64();
    goto LABEL_23;
  }
  v55 = v87;
LABEL_23:
  v83 = v86;
  swift_bridgeObjectRelease();
  sub_1AC725BD8();
  v84 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v84(v94, v55);
  return ((uint64_t (*)(uint64_t, uint64_t))v84)(v48, v55);
}

BOOL sub_1AC6ECE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  char v17;
  _BOOL8 v18;
  _QWORD v20[4];
  uint64_t v21;

  v21 = a3;
  v4 = sub_1AC725DB8();
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v6 = MEMORY[0x1E0D3F890];
  v20[0] = v4;
  v20[1] = v5;
  v20[2] = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v4);
  v20[3] = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v6);
  v7 = sub_1AC725AA0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - v9;
  v11 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v20 - v13;
  sub_1AC725A58();
  v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v4);
  if ((v16 & 1) != 0)
  {
    v18 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v21, v7);
    sub_1AC725A58();
    v18 = (v17 & 1) == 0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v4);
  return v18;
}

uint64_t ShelvesPresenter.remove<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6ECFA4(a1, a2, a3, (uint64_t)&unk_1E5BFFB10, (uint64_t)sub_1AC6EEE80);
}

uint64_t sub_1AC6ECFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  uint64_t v16;

  v9 = *v5;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = *(_QWORD *)(v9 + 80);
  *((_QWORD *)v14 + 3) = a2;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(v9 + 88);
  *((_QWORD *)v14 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v14[v13], (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  sub_1AC6EDD94(a5, (uint64_t)v14, (uint64_t)&unk_1E5BFFC28, (uint64_t)sub_1AC6FBD94, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1AC6ED0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *, __n128))(v12 + 16))(&v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v10);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = sub_1AC72655C();
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = v13;
  v14 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF28], v14);
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF58], v14);
  sub_1AC7265F8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6ED200()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  sub_1AC726874();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1AC726544();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t ShelvesPresenter.reload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6ED738(a1, a2, a3, (uint64_t)&unk_1E5BFFB38, (uint64_t)sub_1AC6EEEB4, (uint64_t)&block_descriptor_18);
}

uint64_t sub_1AC6ED314(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v27 = a2;
  v28 = a4;
  v6 = *a1;
  v26 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 80);
  v10 = sub_1AC725DB8();
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v12 = MEMORY[0x1E0D3F890];
  v13 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v10);
  v14 = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v12);
  v36 = v10;
  v37 = v11;
  v38 = v13;
  v39 = v14;
  v15 = sub_1AC725AA0();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v25 - v16;
  swift_beginAccess();
  v25[1] = a1;
  v18 = *(_QWORD *)(v6 + 88);
  v19 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v19, v9, v18, (uint64_t)v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, v27, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v20 = v28;
  v21 = sub_1AC72655C();
  v35 = sub_1AC725A88();
  v30 = v9;
  v31 = a3;
  v32 = v18;
  v33 = v20;
  v34 = v21;
  v22 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF60], v22);
  v23 = sub_1AC7268C8();
  swift_bridgeObjectRelease();
  v35 = v23;
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v22);
  if ((sub_1AC7265B0() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v15);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AC725A64();
    swift_bridgeObjectRelease();
    sub_1AC725BD8();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, v15);
  }
}

uint64_t sub_1AC6ED5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v14 - v6;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC725DB8();
  sub_1AC725D94();
  sub_1AC726874();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  swift_getAssociatedConformanceWitness();
  v12 = sub_1AC726544();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t ShelvesPresenter.reloadItems<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AC6ED738(a1, a2, a3, (uint64_t)&unk_1E5BFFB60, (uint64_t)sub_1AC6EEF30, (uint64_t)&block_descriptor_24);
}

uint64_t sub_1AC6ED738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v28 = a5;
  v29 = a6;
  v26 = a4;
  v27 = a3;
  v7 = v6;
  v10 = *v6;
  v31 = sub_1AC725B9C();
  v34 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1AC725BB4();
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v19 = MEMORY[0x1E0C80A78](v18);
  v30 = v7[2];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v19);
  v20 = (*(unsigned __int8 *)(v16 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = *(_QWORD *)(v10 + 80);
  *((_QWORD *)v21 + 3) = a2;
  v22 = v27;
  *((_QWORD *)v21 + 4) = *(_QWORD *)(v10 + 88);
  *((_QWORD *)v21 + 5) = v22;
  *((_QWORD *)v21 + 6) = v7;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v21[v20], (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  aBlock[4] = v28;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AC6EBB00;
  aBlock[3] = v29;
  v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1AC725BA8();
  v35 = MEMORY[0x1E0DEE9D8];
  sub_1AC688D20(&qword_1ED0BE090, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE098);
  sub_1AC6E4958(&qword_1ED0BE0A0, &qword_1ED0BE098, MEMORY[0x1E0DEAF38]);
  v24 = v31;
  sub_1AC72676C();
  MEMORY[0x1AF43FC0C](0, v15, v12, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
  return swift_release();
}

uint64_t sub_1AC6ED9AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a2;
  v26 = a4;
  v5 = *a1;
  v24 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 80);
  v9 = sub_1AC725DB8();
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED0BE020);
  v11 = MEMORY[0x1E0D3F890];
  v12 = MEMORY[0x1AF440830](MEMORY[0x1E0D3F890], v9);
  v13 = sub_1AC6E4958((unint64_t *)&qword_1ED0BE018, &qword_1ED0BE020, v11);
  v27 = v9;
  v28 = v10;
  v29 = v12;
  v30 = v13;
  v14 = sub_1AC725AA0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - v16;
  swift_beginAccess();
  v18 = *(_QWORD *)(v5 + 88);
  v19 = swift_bridgeObjectRetain();
  static DiffableData.makeSnapshot<A>(fromShelves:)(v19, v8, v18, (uint64_t)v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, v25, a3);
  v20 = sub_1AC72655C();
  v21 = sub_1AC725A7C();
  v22 = sub_1AC6FB6C8(v21, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v22 + 16))
  {
    sub_1AC725A40();
    swift_bridgeObjectRelease();
    sub_1AC725BD8();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return swift_bridgeObjectRelease();
  }
}

uint64_t ShelvesPresenter.updateEachShelf(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v2;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = *(_QWORD *)(v5 + 80);
  v6[3] = *(_QWORD *)(v5 + 88);
  v6[4] = a1;
  v6[5] = a2;
  swift_retain();
  sub_1AC6EDD94((uint64_t)sub_1AC6EEF84, (uint64_t)v6, (uint64_t)&unk_1E5BFFC28, (uint64_t)sub_1AC6FBD94, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1AC6EDC54(uint64_t *a1, uint64_t (*a2)(unint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isClassOrObjCExistentialType;
  uint64_t v13;
  int64_t v14;
  int64_t v15;

  v7 = sub_1AC72646C();
  MEMORY[0x1AF440830](MEMORY[0x1E0DEAF48], v7);
  result = sub_1AC726574();
  v9 = v14;
  if (v14 == v15)
    return result;
  if (v15 < v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v14 >= v15)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  do
  {
    v10 = v9 + 1;
    sub_1AC7263DC();
    v11 = *a1;
    sub_1AC6EEB60(v9, *a1);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    v13 = v11 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v13 = v11;
    result = a2(v13+ ((*(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * v9++);
  }
  while (v15 != v10);
  return result;
}

uint64_t ShelvesPresenter.withUnsafeShelves(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1AC6EDD94(a1, a2, (uint64_t)&unk_1E5BFFBB0, (uint64_t)sub_1AC6EEF94, (uint64_t)&block_descriptor_33);
}

uint64_t sub_1AC6EDD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v8 = v5;
  v11 = sub_1AC725B9C();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1AC725BB4();
  v14 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v8 + 16);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v8;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AC6EBB00;
  aBlock[3] = a5;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1AC725BA8();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1AC688D20(&qword_1ED0BE090, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE098);
  sub_1AC6E4958(&qword_1ED0BE0A0, &qword_1ED0BE098, MEMORY[0x1E0DEAF38]);
  sub_1AC72676C();
  MEMORY[0x1AF43FC0C](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_1AC6EDF90(void (*a1)(uint64_t))
{
  uint64_t v2;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  a1(v2);
  return swift_bridgeObjectRelease();
}

uint64_t ShelvesPresenter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ShelvesPresenter.__deallocating_deinit()
{
  ShelvesPresenter.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1AC6EE03C()
{
  sub_1AC6EEBB0();
  return swift_retain();
}

uint64_t ShelvesPresenter<>.merge<A>(contentsOf:handlingProblemsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a6;
  v22 = a2;
  v10 = *v6;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v14, v13);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = *(_QWORD *)(v10 + 80);
  *((_QWORD *)v17 + 3) = a4;
  *((_QWORD *)v17 + 4) = a5;
  v18 = v21;
  *((_QWORD *)v17 + 5) = *(_QWORD *)(v10 + 88);
  *((_QWORD *)v17 + 6) = v18;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v14, a4);
  v19 = &v17[v16];
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = a3;
  swift_retain();
  sub_1AC6EDD94((uint64_t)sub_1AC6EF010, (uint64_t)v17, (uint64_t)&unk_1E5BFFC28, (uint64_t)sub_1AC6FBD94, (uint64_t)&block_descriptor_42);
  return swift_release();
}

uint64_t sub_1AC6EE188(uint64_t *a1, char *a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t AssociatedConformanceWitness;
  char *v47;
  uint64_t *v48;
  uint64_t result;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char isClassOrObjCExistentialType;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t AssociatedTypeWitness;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;

  v95 = a4;
  v94 = a3;
  v113 = a2;
  v93 = type metadata accessor for ShelvesPresenter.InsertionPoint(0, a5, a8, a4);
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v88 = (char *)&v85 - v13;
  v14 = type metadata accessor for ShelvesPresenter<>.MergeSolution(0, a5, a7, a8);
  MEMORY[0x1E0C80A78](v14);
  v97 = (char *)&v85 - v15;
  v96 = a7;
  v16 = type metadata accessor for ShelvesPresenter<>.MergeProblem(0, a5, a7, a8);
  v116 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v103 = (char *)&v85 - v17;
  v98 = *(_QWORD *)(a8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v107 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v105 = (char *)&v85 - v18;
  v117 = v16;
  v106 = sub_1AC7266C4();
  v19 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v104 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v91 = (char *)&v85 - v22;
  MEMORY[0x1E0C80A78](v23);
  v112 = (char *)&v85 - v24;
  v115 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v25);
  v87 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v90 = (char *)&v85 - v28;
  MEMORY[0x1E0C80A78](v29);
  v89 = (char *)&v85 - v30;
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v85 - v32;
  v34 = sub_1AC7266C4();
  MEMORY[0x1E0C80A78](v34);
  v111 = (char *)&v85 - v35;
  v36 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = swift_getAssociatedTypeWitness();
  v86 = *(_QWORD *)(v40 - 8);
  v41 = MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v85 - v42;
  v85 = a1;
  v121 = *a1;
  (*(void (**)(char *, char *, uint64_t, __n128))(v36 + 16))(v39, v113, a6, v41);
  swift_bridgeObjectRetain();
  v44 = v112;
  sub_1AC726340();
  v45 = v98;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v109 = v43;
  v110 = v40;
  v47 = v111;
  v102 = AssociatedConformanceWitness;
  sub_1AC7266F4();
  v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48);
  if (v101(v47, 1, a5) == 1)
  {
LABEL_2:
    v48 = v85;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v109, v110);
    *v48 = v121;
    return result;
  }
  v100 = 0;
  v99 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
  v113 = v33;
  v114 = v19;
  v99(v33, v47, a5);
  while (1)
  {
    v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56);
    v53(v44, 1, 1, v117);
    v118 = v121;
    swift_bridgeObjectRetain();
    v54 = v105;
    sub_1AC726874();
    v55 = sub_1AC72646C();
    v56 = MEMORY[0x1AF440830](MEMORY[0x1E0DEAF50], v55);
    v122 = v55;
    v123 = v56;
    v124 = v45;
    v125 = v54;
    sub_1AC7265A4();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v54, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v120 == 1)
    {
      v57 = v91;
      sub_1AC726874();
      v58 = v114;
      v59 = v106;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v44, v106);
      v60 = v117;
      swift_storeEnumTagMultiPayload();
      v53(v57, 0, 1, v60);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v44, v57, v59);
    }
    else
    {
      v61 = v119;
      v62 = v89;
      sub_1AC726490();
      v63 = v90;
      v64 = v62;
      v65 = v100;
      sub_1AC725E6C();
      v58 = v114;
      if (v65)
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v62, a5);
        v44 = v112;
        v59 = v106;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v112, v106);
        *(_QWORD *)v44 = v65;
        v66 = v117;
        swift_storeEnumTagMultiPayload();
        v53(v44, 0, 1, v66);
        v100 = 0;
        v45 = v98;
      }
      else
      {
        v100 = 0;
        sub_1AC7263DC();
        v67 = v121;
        sub_1AC6EEB60(v61, v121);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v69 = v67 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0)
          v69 = v67;
        v70 = v115;
        (*(void (**)(unint64_t, char *, uint64_t))(v115 + 24))(v69+ ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80))+ *(_QWORD *)(v115 + 72) * v61, v63, a5);
        v71 = *(void (**)(char *, uint64_t))(v70 + 8);
        v71(v63, a5);
        v71(v64, a5);
        v45 = v98;
        v59 = v106;
        v44 = v112;
      }
    }
    v72 = v104;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v104, v44, v59);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v72, 1, v117) == 1)
    {
      v50 = *(void (**)(char *, uint64_t))(v58 + 8);
      v50(v44, v59);
      v51 = v113;
      (*(void (**)(char *, uint64_t))(v115 + 8))(v113, a5);
      v50(v72, v59);
      goto LABEL_5;
    }
    v73 = v103;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v103, v72, v117);
    v74 = v97;
    v94(v73);
    v75 = v92;
    v76 = v74;
    v77 = v93;
    v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v76, 2, v93);
    v51 = v113;
    if (v78)
      break;
    v79 = v88;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v88, v97, v77);
    v80 = swift_bridgeObjectRetain();
    sub_1AC6EB3A8(v80, v77);
    swift_bridgeObjectRelease();
    v81 = v115;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v87, v113, a5);
    v45 = v98;
    sub_1AC72643C();
    v82 = v79;
    v83 = v116;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v82, v77);
    v84 = *(void (**)(char *, uint64_t))(v83 + 8);
    v51 = v113;
    v84(v103, v117);
    v44 = v112;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v59);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v51, a5);
LABEL_5:
    v52 = v111;
    sub_1AC7266F4();
    if (v101(v52, 1, a5) == 1)
      goto LABEL_2;
    v99(v51, v52, a5);
  }
  if (v78 == 2)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v103, v117);
    v44 = v112;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v59);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v51, a5);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t))(v116 + 8))(v103, v117);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v59);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v51, a5);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v109, v110);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AC6EEB60(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1AC6EEBB0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1AC6EEBC0(uint64_t a1)
{
  return sub_1AC6EEE8C(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1AC6EBD14);
}

uint64_t type metadata accessor for ShelvesPresenter.InsertionPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShelvesPresenter.InsertionPoint);
}

uint64_t sub_1AC6EEBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  v5 = v4[3];
  v6 = *(_QWORD *)(type metadata accessor for ShelvesPresenter.InsertionPoint(0, v4[2], v4[4], a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  if (swift_getEnumCaseMultiPayload() <= 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((char *)v4 + v7, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))((char *)v4 + ((v7 + v12 + v9) & ~v9), v5);
  return swift_deallocObject();
}

uint64_t sub_1AC6EECD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = v4[2];
  v7 = v4[3];
  v8 = *(_QWORD *)(type metadata accessor for ShelvesPresenter.InsertionPoint(0, v6, v4[4], a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  return sub_1AC6EBF58(a1, (uint64_t)v4 + v9, (uint64_t)v4 + ((v9 + *(_QWORD *)(v8 + 64) + v10) & ~v10), v6, v7);
}

uint64_t sub_1AC6EED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6EEDEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (char *)v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1AC6EC2F8(v0[6], (uint64_t)v0 + v3, *(void (**)(char *))v4, *((_QWORD *)v4 + 1), v1, v0[5]);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_1AC6EEE80(uint64_t a1)
{
  return sub_1AC6EEE8C(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1AC6ED0A4);
}

uint64_t sub_1AC6EEE8C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) - 8) + 80);
  return a2(a1, v2 + ((v3 + 48) & ~v3), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1AC6EEEB4()
{
  return sub_1AC6EEF3C((uint64_t (*)(_QWORD, uint64_t))sub_1AC6ED314);
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1AC6EEF30()
{
  return sub_1AC6EEF3C((uint64_t (*)(_QWORD, uint64_t))sub_1AC6ED9AC);
}

uint64_t sub_1AC6EEF3C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 48), v1 + ((v2 + 56) & ~v2));
}

uint64_t sub_1AC6EEF60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6EEF84(uint64_t *a1)
{
  uint64_t v1;

  return sub_1AC6EDC54(a1, *(uint64_t (**)(unint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1AC6EEF94()
{
  uint64_t v0;

  return sub_1AC6EDF90(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1AC6EEFA0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6EF010(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;

  v2 = v1[3];
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1AC6EE188(a1, (char *)v1 + v4, *(void (**)(char *))v5, *((_QWORD *)v5 + 1), v1[2], v2, v1[4], v1[5]);
}

uint64_t sub_1AC6EF068(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1AF440830](&protocol conformance descriptor for ShelvesPresenter<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AC6EF094()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ShelvesPresenter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShelvesPresenter);
}

uint64_t method lookup function for ShelvesPresenter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShelvesPresenter.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1AC6EF114()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1AC6EF190(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_5;
  v7 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v8 = 2;
  if (v7 > 0xFFFD)
    v8 = 4;
  if (v7 <= 0xFD)
LABEL_5:
    v8 = 1;
  v9 = v8 + v6;
  v10 = *(_DWORD *)(v5 + 80);
  if (v10 > 7 || v9 > 0x18 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
    return a1;
  }
  if (v6 > 3)
    goto LABEL_15;
  v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v15 > 0xFFFD)
  {
    v14 = *(_DWORD *)((char *)a2 + v6);
  }
  else
  {
    if (v15 <= 0xFD)
    {
LABEL_15:
      v14 = *((unsigned __int8 *)a2 + v6);
      goto LABEL_20;
    }
    v14 = *(unsigned __int16 *)((char *)a2 + v6);
  }
LABEL_20:
  if (v14 >= 2)
  {
    if (v6 <= 3)
      v16 = v6;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_31;
    v18 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v18 > 0xFFFD)
    {
      *(_DWORD *)((char *)a1 + v6) = 1;
      return a1;
    }
    if (v18 <= 0xFD)
LABEL_31:
      *((_BYTE *)a1 + v6) = 1;
    else
      *(_WORD *)((char *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v17 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v17 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 0;
        return a1;
      }
      if (v17 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 0;
        return a1;
      }
    }
    *((_BYTE *)a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6EF430(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 > 3)
    goto LABEL_2;
  v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFD)
  {
    v5 = *(_DWORD *)(a1 + v4);
  }
  else
  {
    if (v6 <= 0xFD)
    {
LABEL_2:
      v5 = *(unsigned __int8 *)(a1 + v4);
      goto LABEL_7;
    }
    v5 = *(unsigned __int16 *)(a1 + v4);
  }
LABEL_7:
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    __asm { BR              X14 }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1AC6EF544(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_2;
  v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    v7 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_2:
      v7 = *(unsigned __int8 *)(a2 + v6);
      goto LABEL_7;
    }
    v7 = *(unsigned __int16 *)(a2 + v6);
  }
LABEL_7:
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_18;
    v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v11 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v6) = 1;
      return a1;
    }
    if (v11 <= 0xFD)
LABEL_18:
      *(_BYTE *)(a1 + v6) = 1;
    else
      *(_WORD *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v10 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v10 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v6) = 0;
        return a1;
      }
      if (v10 > 0xFD)
      {
        *(_WORD *)(a1 + v6) = 0;
        return a1;
      }
    }
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6EF758(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_3;
  v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    v7 = *(_DWORD *)(a1 + v6);
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_3:
      v7 = *(unsigned __int8 *)(a1 + v6);
      goto LABEL_8;
    }
    v7 = *(unsigned __int16 *)(a1 + v6);
  }
LABEL_8:
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_14;
  v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v11 > 0xFFFD)
  {
    v10 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_14:
      v10 = *(unsigned __int8 *)(a2 + v6);
      goto LABEL_19;
    }
    v10 = *(unsigned __int16 *)(a2 + v6);
  }
LABEL_19:
  if (v10 >= 2)
  {
    if (v6 <= 3)
      v12 = v6;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_30;
    v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v14 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v6) = 1;
      return a1;
    }
    if (v14 <= 0xFD)
LABEL_30:
      *(_BYTE *)(a1 + v6) = 1;
    else
      *(_WORD *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v13 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v13 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v6) = 0;
        return a1;
      }
      if (v13 > 0xFD)
      {
        *(_WORD *)(a1 + v6) = 0;
        return a1;
      }
    }
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6EFA4C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_2;
  v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    v7 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_2:
      v7 = *(unsigned __int8 *)(a2 + v6);
      goto LABEL_7;
    }
    v7 = *(unsigned __int16 *)(a2 + v6);
  }
LABEL_7:
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_18;
    v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v11 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v6) = 1;
      return a1;
    }
    if (v11 <= 0xFD)
LABEL_18:
      *(_BYTE *)(a1 + v6) = 1;
    else
      *(_WORD *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v10 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v10 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v6) = 0;
        return a1;
      }
      if (v10 > 0xFD)
      {
        *(_WORD *)(a1 + v6) = 0;
        return a1;
      }
    }
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6EFC60(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_3;
  v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v8 > 0xFFFD)
  {
    v7 = *(_DWORD *)(a1 + v6);
  }
  else
  {
    if (v8 <= 0xFD)
    {
LABEL_3:
      v7 = *(unsigned __int8 *)(a1 + v6);
      goto LABEL_8;
    }
    v7 = *(unsigned __int16 *)(a1 + v6);
  }
LABEL_8:
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_14;
  v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v11 > 0xFFFD)
  {
    v10 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_14:
      v10 = *(unsigned __int8 *)(a2 + v6);
      goto LABEL_19;
    }
    v10 = *(unsigned __int16 *)(a2 + v6);
  }
LABEL_19:
  if (v10 >= 2)
  {
    if (v6 <= 3)
      v12 = v6;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_30;
    v14 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v14 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v6) = 1;
      return a1;
    }
    if (v14 <= 0xFD)
LABEL_30:
      *(_BYTE *)(a1 + v6) = 1;
    else
      *(_WORD *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v13 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v13 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v6) = 0;
        return a1;
      }
      if (v13 > 0xFD)
      {
        *(_WORD *)(a1 + v6) = 0;
        return a1;
      }
    }
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6EFF54(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > 3)
  {
    v5 = 3;
LABEL_5:
    v7 = 8;
    goto LABEL_6;
  }
  v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFD)
    goto LABEL_9;
  v5 = v6 + 2;
  if (v6 <= 0xFD)
    goto LABEL_5;
  v7 = 16;
LABEL_6:
  v8 = (1 << v7) - v5;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_13;
LABEL_10:
    v9 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    v10 = 2;
    if (v9 > 0xFFFD)
      v10 = 4;
    if (v9 > 0xFD)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_9:
  v8 = 0x7FFFFFFF;
  if (v4 <= 3)
    goto LABEL_10;
LABEL_13:
  v10 = 1;
LABEL_14:
  if (!a2)
    return 0;
  if (a2 <= v8)
    goto LABEL_32;
  v11 = v10 + v4;
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v14 < 2)
    {
LABEL_32:
      if (v8)
      {
        if (v4 <= 3)
        {
          v22 = ((1 << (8 * v4)) + 1) >> (8 * v4);
          if (v22 > 0xFFFD)
          {
            v17 = *(_DWORD *)(a1 + v4);
            v18 = ~v17;
LABEL_42:
            v25 = 0x7FFFFFFF;
LABEL_43:
            if (v25 > v18)
              return -v17;
            else
              return 0;
          }
          v20 = v22 + 2;
          if (v22 > 0xFD)
          {
            v24 = *(unsigned __int16 *)(a1 + v4);
            v17 = v24 | 0xFFFF0000;
            v18 = v24 ^ 0xFFFF;
            v19 = 16;
          }
          else
          {
            v23 = *(unsigned __int8 *)(a1 + v4);
            v17 = v23 | 0xFFFFFF00;
            v18 = v23 ^ 0xFF;
            v19 = 8;
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(a1 + v4);
          v17 = v16 | 0xFFFFFF00;
          v18 = v16 ^ 0xFF;
          v19 = 8;
          v20 = 3;
        }
        v25 = (1 << v19) - v20;
        if ((v25 & 0x80000000) == 0)
          goto LABEL_43;
        goto LABEL_42;
      }
      return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_32;
LABEL_25:
  v15 = (v13 - 1) << v12;
  if (v11 > 3)
    v15 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v8 + v15 + 1;
}

void sub_1AC6F01C0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v11 = ((1 << v7) + 1) >> v7;
    if (v11 > 0xFFFD)
      goto LABEL_10;
    v8 = v11 + 2;
    if (v11 > 0xFD)
    {
      v9 = 16;
LABEL_4:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
      {
        if (v6 > 3)
          goto LABEL_14;
LABEL_11:
        v12 = ((1 << v7) + 1) >> v7;
        v13 = 2;
        if (v12 > 0xFFFD)
          v13 = 4;
        if (v12 > 0xFD)
        {
LABEL_15:
          v14 = v13 + v6;
          if (a3 <= v10)
          {
            v15 = 0u;
          }
          else if (v14 <= 3)
          {
            v17 = ((a3 - v10 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
            if (HIWORD(v17))
            {
              v15 = 4u;
            }
            else if (v17 >= 0x100)
            {
              v15 = 2;
            }
            else
            {
              v15 = v17 > 1;
            }
          }
          else
          {
            v15 = 1u;
          }
          if (v10 < a2)
          {
            v16 = ~v10 + a2;
            if (v14 < 4)
            {
              if ((_DWORD)v14)
              {
                v18 = v16 & ~(-1 << (8 * v14));
                bzero(a1, v14);
                if ((_DWORD)v14 == 3)
                {
                  *(_WORD *)a1 = v18;
                  a1[2] = BYTE2(v18);
                }
                else if ((_DWORD)v14 == 2)
                {
                  *(_WORD *)a1 = v18;
                }
                else
                {
                  *a1 = v18;
                }
              }
            }
            else
            {
              bzero(a1, v14);
              *(_DWORD *)a1 = v16;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_14:
        v13 = 1;
        goto LABEL_15;
      }
LABEL_10:
      v10 = 0x7FFFFFFF;
      if (v6 > 3)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v8 = 3;
  }
  v9 = 8;
  goto LABEL_4;
}

uint64_t sub_1AC6F0458(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 > 3)
    goto LABEL_2;
  v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFD)
  {
    result = *(unsigned int *)(a1 + v2);
  }
  else
  {
    if (v4 <= 0xFD)
    {
LABEL_2:
      result = *(unsigned __int8 *)(a1 + v2);
      goto LABEL_7;
    }
    result = *(unsigned __int16 *)(a1 + v2);
  }
LABEL_7:
  if (result >= 2)
  {
    if (v2 <= 3)
      v5 = v2;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1AC6F054C(_BYTE *a1, unsigned int a2)
{
  uint64_t result;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (a2 > 1)
  {
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v8 = (v6 >> (8 * v5)) + 2;
      v9 = (int *)&a1[v5];
      v10 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v10 > 0xFFFD)
      {
        *v9 = v8;
      }
      else if (v10 > 0xFD)
      {
        *(_WORD *)v9 = v8;
      }
      else
      {
        *(_BYTE *)v9 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
    }
    if (v5 <= 3)
      v11 = v5;
    else
      v11 = 4;
    bzero(a1, v5);
    __asm { BR              X10 }
  }
  if (v5 > 3)
    goto LABEL_3;
  v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v7 > 0xFFFD)
  {
    *(_DWORD *)&a1[v5] = a2;
  }
  else
  {
    if (v7 <= 0xFD)
    {
LABEL_3:
      a1[v5] = a2;
      return result;
    }
    *(_WORD *)&a1[v5] = a2;
  }
  return result;
}

uint64_t sub_1AC6F06B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ShelvesPresenter.InsertionPoint(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1AC6F0708(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
    goto LABEL_5;
  v7 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v8 = 2;
  if (v7 > 0xFFFD)
    v8 = 4;
  if (v7 <= 0xFD)
LABEL_5:
    v8 = 1;
  v9 = v8 + v6;
  v10 = *(_DWORD *)(v5 + 80);
  if (v10 > 7 || v9 > 0x18 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
    return a1;
  }
  if (v6 > 3)
  {
    v14 = 8;
    v15 = 3;
    goto LABEL_20;
  }
  v16 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v16 <= 0xFFFD)
  {
    v15 = v16 + 2;
    if (v16 >= 0xFE)
      v14 = 16;
    else
      v14 = 8;
LABEL_20:
    v17 = (1 << v14) - v15;
    if ((v17 & 0x80000000) == 0)
      goto LABEL_22;
  }
  v17 = 0x7FFFFFFF;
LABEL_22:
  if (v6 > 3)
  {
    v18 = 3;
LABEL_26:
    v20 = 8;
    goto LABEL_27;
  }
  v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v19 > 0xFFFD)
    goto LABEL_30;
  v18 = v19 + 2;
  if (v19 <= 0xFD)
    goto LABEL_26;
  v20 = 16;
LABEL_27:
  v21 = (1 << v20) - v18;
  if ((v21 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_34;
LABEL_31:
    v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v23 = 2;
    if (v22 > 0xFFFD)
      v23 = 4;
    if (v22 > 0xFD)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_30:
  v21 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_31;
LABEL_34:
  v23 = 1;
LABEL_35:
  if (!v17)
    goto LABEL_68;
  v24 = v17 - v21;
  if (v17 <= v21)
    goto LABEL_53;
  v25 = v23 + v6;
  v26 = 8 * (v23 + v6);
  if (v25 <= 3)
  {
    v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      v27 = *(_DWORD *)((char *)a2 + v25);
      if (!v27)
        goto LABEL_53;
      goto LABEL_46;
    }
    if (v28 > 0xFF)
    {
      v27 = *(unsigned __int16 *)((char *)a2 + v25);
      if (!*(_WORD *)((char *)a2 + v25))
        goto LABEL_53;
      goto LABEL_46;
    }
    if (v28 < 2)
    {
LABEL_53:
      if (!v21)
        goto LABEL_68;
      if (v6 <= 3)
      {
        v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v35 > 0xFFFD)
        {
          v31 = *(_DWORD *)((char *)a2 + v6);
          v32 = ~v31;
          goto LABEL_64;
        }
        v34 = v35 + 2;
        if (v35 > 0xFD)
        {
          v37 = *(unsigned __int16 *)((char *)a2 + v6);
          v31 = v37 | 0xFFFF0000;
          v32 = v37 ^ 0xFFFF;
          v33 = 16;
        }
        else
        {
          v36 = *((unsigned __int8 *)a2 + v6);
          v31 = v36 | 0xFFFFFF00;
          v32 = v36 ^ 0xFF;
          v33 = 8;
        }
      }
      else
      {
        v30 = *((unsigned __int8 *)a2 + v6);
        v31 = v30 | 0xFFFFFF00;
        v32 = v30 ^ 0xFF;
        v33 = 8;
        v34 = 3;
      }
      v38 = (1 << v33) - v34;
      if ((v38 & 0x80000000) == 0)
      {
        if (v38 <= v32)
          goto LABEL_68;
LABEL_65:
        if (!v31)
          goto LABEL_68;
LABEL_84:
        if (v6 > 3)
          goto LABEL_88;
        v43 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        v44 = 2;
        if (v43 > 0xFFFD)
          v44 = 4;
        if (v43 <= 0xFD)
LABEL_88:
          v44 = 1;
        memcpy(a1, a2, v44 + v6);
        return a1;
      }
LABEL_64:
      if (v32 >= 0x7FFFFFFF)
        goto LABEL_68;
      goto LABEL_65;
    }
  }
  v27 = *((unsigned __int8 *)a2 + v25);
  if (!*((_BYTE *)a2 + v25))
    goto LABEL_53;
LABEL_46:
  v29 = (v27 - 1) << v26;
  if (v25 > 3)
    v29 = 0;
  if ((_DWORD)v25)
  {
    if (v25 > 3)
      LODWORD(v25) = 4;
    __asm { BR              X13 }
  }
  if (v21 + v29 != -1)
    goto LABEL_84;
LABEL_68:
  if (v6 > 3)
  {
LABEL_69:
    v39 = *((unsigned __int8 *)a2 + v6);
    goto LABEL_74;
  }
  v40 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v40 > 0xFFFD)
  {
    v39 = *(_DWORD *)((char *)a2 + v6);
  }
  else
  {
    if (v40 <= 0xFD)
      goto LABEL_69;
    v39 = *(unsigned __int16 *)((char *)a2 + v6);
  }
LABEL_74:
  if (v39 >= 2)
  {
    if (v6 <= 3)
      v41 = v6;
    else
      v41 = 4;
    __asm { BR              X13 }
  }
  if (v39 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v45 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v45 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 1;
        return a1;
      }
      if (v45 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 1;
        return a1;
      }
    }
    *((_BYTE *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v42 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v42 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 0;
        return a1;
      }
      if (v42 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 0;
        return a1;
      }
    }
    *((_BYTE *)a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1AC6F0C4C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  result = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(result - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 > 3)
  {
    v5 = 8;
    v6 = 3;
    goto LABEL_7;
  }
  v7 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v7 <= 0xFFFD)
  {
    v6 = v7 + 2;
    if (v7 >= 0xFE)
      v5 = 16;
    else
      v5 = 8;
LABEL_7:
    v8 = (1 << v5) - v6;
    if ((v8 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v8 = 0x7FFFFFFF;
LABEL_9:
  if (v4 > 3)
  {
    v9 = 3;
LABEL_13:
    v11 = 8;
    goto LABEL_14;
  }
  v10 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v10 > 0xFFFD)
    goto LABEL_17;
  v9 = v10 + 2;
  if (v10 <= 0xFD)
    goto LABEL_13;
  v11 = 16;
LABEL_14:
  v12 = (1 << v11) - v9;
  if ((v12 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_21;
LABEL_18:
    v13 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    v14 = 2;
    if (v13 > 0xFFFD)
      v14 = 4;
    if (v13 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v12 = 0x7FFFFFFF;
  if (v4 <= 3)
    goto LABEL_18;
LABEL_21:
  v14 = 1;
LABEL_22:
  if (!v8)
    goto LABEL_55;
  v15 = v8 - v12;
  if (v8 <= v12)
    goto LABEL_40;
  v16 = v14 + v4;
  v17 = 8 * (v14 + v4);
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v19 < 2)
    {
LABEL_40:
      if (!v12)
        goto LABEL_55;
      if (v4 <= 3)
      {
        v26 = ((1 << (8 * v4)) + 1) >> (8 * v4);
        if (v26 > 0xFFFD)
        {
          v22 = *(_DWORD *)(a1 + v4);
          v23 = ~v22;
LABEL_51:
          if (v23 < 0x7FFFFFFF)
            goto LABEL_52;
LABEL_55:
          if (v4 > 3)
            goto LABEL_56;
          v31 = ((1 << (8 * v4)) + 1) >> (8 * v4);
          if (v31 > 0xFFFD)
          {
            v30 = *(_DWORD *)(a1 + v4);
            goto LABEL_61;
          }
          if (v31 <= 0xFD)
LABEL_56:
            v30 = *(unsigned __int8 *)(a1 + v4);
          else
            v30 = *(unsigned __int16 *)(a1 + v4);
LABEL_61:
          if (v30 >= 2)
          {
            if (v4 <= 3)
              v32 = v4;
            else
              v32 = 4;
            __asm { BR              X14 }
          }
          return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, result);
        }
        v25 = v26 + 2;
        if (v26 > 0xFD)
        {
          v28 = *(unsigned __int16 *)(a1 + v4);
          v22 = v28 | 0xFFFF0000;
          v23 = v28 ^ 0xFFFF;
          v24 = 16;
        }
        else
        {
          v27 = *(unsigned __int8 *)(a1 + v4);
          v22 = v27 | 0xFFFFFF00;
          v23 = v27 ^ 0xFF;
          v24 = 8;
        }
      }
      else
      {
        v21 = *(unsigned __int8 *)(a1 + v4);
        v22 = v21 | 0xFFFFFF00;
        v23 = v21 ^ 0xFF;
        v24 = 8;
        v25 = 3;
      }
      v29 = (1 << v24) - v25;
      if ((v29 & 0x80000000) == 0)
      {
        if (v29 <= v23)
          goto LABEL_55;
LABEL_52:
        if (v22)
          return result;
        goto LABEL_55;
      }
      goto LABEL_51;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_40;
LABEL_33:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 > 3)
      LODWORD(v16) = 4;
    __asm { BR              X14 }
  }
  if (v12 + v20 == -1)
    goto LABEL_55;
  return result;
}

char *sub_1AC6F1038(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
  {
    v7 = 8;
    v8 = 3;
    goto LABEL_7;
  }
  v9 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v9 <= 0xFFFD)
  {
    v8 = v9 + 2;
    if (v9 >= 0xFE)
      v7 = 16;
    else
      v7 = 8;
LABEL_7:
    v10 = (1 << v7) - v8;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v10 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    v11 = 3;
LABEL_13:
    v13 = 8;
    goto LABEL_14;
  }
  v12 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v12 > 0xFFFD)
    goto LABEL_17;
  v11 = v12 + 2;
  if (v12 <= 0xFD)
    goto LABEL_13;
  v13 = 16;
LABEL_14:
  v14 = (1 << v13) - v11;
  if ((v14 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_21;
LABEL_18:
    v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v16 = 2;
    if (v15 > 0xFFFD)
      v16 = 4;
    if (v15 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v14 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_18;
LABEL_21:
  v16 = 1;
LABEL_22:
  if (!v10)
    goto LABEL_55;
  v17 = v10 - v14;
  if (v10 <= v14)
    goto LABEL_40;
  v18 = v16 + v6;
  v19 = 8 * (v16 + v6);
  if (v18 <= 3)
  {
    v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      v20 = *(_DWORD *)&a2[v18];
      if (!v20)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v21 > 0xFF)
    {
      v20 = *(unsigned __int16 *)&a2[v18];
      if (!*(_WORD *)&a2[v18])
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v21 < 2)
    {
LABEL_40:
      if (!v14)
        goto LABEL_55;
      if (v6 <= 3)
      {
        v28 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v28 > 0xFFFD)
        {
          v24 = *(_DWORD *)&a2[v6];
          v25 = ~v24;
          goto LABEL_51;
        }
        v27 = v28 + 2;
        if (v28 > 0xFD)
        {
          v30 = *(unsigned __int16 *)&a2[v6];
          v24 = v30 | 0xFFFF0000;
          v25 = v30 ^ 0xFFFF;
          v26 = 16;
        }
        else
        {
          v29 = a2[v6];
          v24 = v29 | 0xFFFFFF00;
          v25 = v29 ^ 0xFF;
          v26 = 8;
        }
      }
      else
      {
        v23 = a2[v6];
        v24 = v23 | 0xFFFFFF00;
        v25 = v23 ^ 0xFF;
        v26 = 8;
        v27 = 3;
      }
      v31 = (1 << v26) - v27;
      if ((v31 & 0x80000000) == 0)
      {
        if (v31 <= v25)
          goto LABEL_55;
LABEL_52:
        if (!v24)
          goto LABEL_55;
LABEL_71:
        if (v6 > 3)
          goto LABEL_75;
        v36 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        v37 = 2;
        if (v36 > 0xFFFD)
          v37 = 4;
        if (v36 <= 0xFD)
LABEL_75:
          v37 = 1;
        memcpy(a1, a2, v37 + v6);
        return a1;
      }
LABEL_51:
      if (v25 >= 0x7FFFFFFF)
        goto LABEL_55;
      goto LABEL_52;
    }
  }
  v20 = a2[v18];
  if (!a2[v18])
    goto LABEL_40;
LABEL_33:
  v22 = (v20 - 1) << v19;
  if (v18 > 3)
    v22 = 0;
  if ((_DWORD)v18)
  {
    if (v18 > 3)
      LODWORD(v18) = 4;
    __asm { BR              X13 }
  }
  if (v14 + v22 != -1)
    goto LABEL_71;
LABEL_55:
  if (v6 > 3)
  {
LABEL_56:
    v32 = a2[v6];
    goto LABEL_61;
  }
  v33 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v33 > 0xFFFD)
  {
    v32 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v33 <= 0xFD)
      goto LABEL_56;
    v32 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_61:
  if (v32 >= 2)
  {
    if (v6 <= 3)
      v34 = v6;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  if (v32 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v38 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v38 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        return a1;
      }
      if (v38 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        return a1;
      }
    }
    a1[v6] = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v35 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v35 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

char *sub_1AC6F151C(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  int v53;
  unsigned int v54;
  int v55;
  char v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
  {
    v8 = 8;
    v9 = 3;
    goto LABEL_7;
  }
  v10 = ((1 << v7) + 1) >> v7;
  if (v10 <= 0xFFFD)
  {
    v9 = v10 + 2;
    if (v10 >= 0xFE)
      v8 = 16;
    else
      v8 = 8;
LABEL_7:
    v11 = (1 << v8) - v9;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v11 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    v12 = 3;
LABEL_13:
    v14 = 8;
    goto LABEL_14;
  }
  v13 = ((1 << v7) + 1) >> v7;
  if (v13 > 0xFFFD)
    goto LABEL_17;
  v12 = v13 + 2;
  if (v13 <= 0xFD)
    goto LABEL_13;
  v14 = 16;
LABEL_14:
  v15 = (1 << v14) - v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_21;
LABEL_18:
    v16 = ((1 << v7) + 1) >> v7;
    v17 = 2;
    if (v16 > 0xFFFD)
      v17 = 4;
    if (v16 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v15 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_18;
LABEL_21:
  v17 = 1;
LABEL_22:
  if (!v11)
    goto LABEL_53;
  v18 = v11 - v15;
  if (v11 <= v15)
    goto LABEL_40;
  v19 = v17 + v6;
  v20 = 8 * (v17 + v6);
  if (v19 <= 3)
  {
    v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      v21 = *(_DWORD *)&a1[v19];
      if (!v21)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v22 > 0xFF)
    {
      v21 = *(unsigned __int16 *)&a1[v19];
      if (!*(_WORD *)&a1[v19])
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v22 < 2)
    {
LABEL_40:
      if (!v15)
        goto LABEL_53;
      if (v6 <= 3)
      {
        v29 = ((1 << v7) + 1) >> v7;
        if (v29 > 0xFFFD)
        {
          v25 = *(_DWORD *)&a1[v6];
          v26 = ~v25;
          goto LABEL_51;
        }
        v28 = v29 + 2;
        if (v29 > 0xFD)
        {
          v31 = *(unsigned __int16 *)&a1[v6];
          v25 = v31 | 0xFFFF0000;
          v26 = v31 ^ 0xFFFF;
          v27 = 16;
        }
        else
        {
          v30 = a1[v6];
          v25 = v30 | 0xFFFFFF00;
          v26 = v30 ^ 0xFF;
          v27 = 8;
        }
      }
      else
      {
        v24 = a1[v6];
        v25 = v24 | 0xFFFFFF00;
        v26 = v24 ^ 0xFF;
        v27 = 8;
        v28 = 3;
      }
      v32 = (1 << v27) - v28;
      if ((v32 & 0x80000000) == 0)
      {
        if (v32 <= v26)
          goto LABEL_53;
        goto LABEL_52;
      }
LABEL_51:
      if (v26 >= 0x7FFFFFFF)
        goto LABEL_53;
LABEL_52:
      if (!v25)
        goto LABEL_53;
LABEL_100:
      if (v6 <= 3)
      {
        v58 = ((1 << v7) + 1) >> v7;
        if (v58 > 0xFFFD)
        {
LABEL_107:
          v59 = 0x7FFFFFFF;
LABEL_108:
          if (v6 <= 3)
          {
            v61 = ((1 << v7) + 1) >> v7;
            if (v61 > 0xFFFD)
              goto LABEL_116;
            v60 = v61 + 2;
            if (v61 > 0xFD)
            {
              v62 = 16;
LABEL_113:
              v63 = (1 << v62) - v60;
              if ((v63 & 0x80000000) == 0)
              {
                if (v6 > 3)
                  goto LABEL_120;
LABEL_117:
                v64 = ((1 << v7) + 1) >> v7;
                v65 = 2;
                if (v64 > 0xFFFD)
                  v65 = 4;
                if (v64 > 0xFD)
                {
LABEL_121:
                  if (!v59)
                    goto LABEL_206;
                  v66 = v59 - v63;
                  if (v59 <= v63)
                    goto LABEL_192;
                  v67 = v65 + v6;
                  v68 = 8 * (v65 + v6);
                  if (v67 > 3)
                    goto LABEL_124;
                  v70 = ((v66 + ~(-1 << v68)) >> v68) + 1;
                  if (HIWORD(v70))
                  {
                    v69 = *(_DWORD *)&a2[v67];
                  }
                  else
                  {
                    if (v70 <= 0xFF)
                    {
                      if (v70 < 2)
                        goto LABEL_192;
LABEL_124:
                      v69 = a2[v67];
                      goto LABEL_185;
                    }
                    v69 = *(unsigned __int16 *)&a2[v67];
                  }
LABEL_185:
                  if (v69)
                  {
                    v83 = (v69 - 1) << v68;
                    if (v67 > 3)
                      v83 = 0;
                    if ((_DWORD)v67)
                    {
                      if (v67 > 3)
                        LODWORD(v67) = 4;
                      __asm { BR              X12 }
                    }
                    if (v63 + v83 != -1)
                      goto LABEL_222;
                    goto LABEL_206;
                  }
LABEL_192:
                  if (!v63)
                    goto LABEL_206;
                  if (v6 <= 3)
                  {
                    v89 = ((1 << v7) + 1) >> v7;
                    if (v89 > 0xFFFD)
                    {
                      v85 = *(_DWORD *)&a2[v6];
                      v86 = ~v85;
                      goto LABEL_201;
                    }
                    v88 = v89 + 2;
                    if (v89 > 0xFD)
                    {
                      v91 = *(unsigned __int16 *)&a2[v6];
                      v85 = v91 | 0xFFFF0000;
                      v86 = v91 ^ 0xFFFF;
                      v87 = 16;
                    }
                    else
                    {
                      v90 = a2[v6];
                      v85 = v90 | 0xFFFFFF00;
                      v86 = v90 ^ 0xFF;
                      v87 = 8;
                    }
                  }
                  else
                  {
                    v84 = a2[v6];
                    v85 = v84 | 0xFFFFFF00;
                    v86 = v84 ^ 0xFF;
                    v87 = 8;
                    v88 = 3;
                  }
                  v92 = (1 << v87) - v88;
                  if ((v92 & 0x80000000) == 0)
                  {
LABEL_202:
                    if (v92 > v86 && v85)
                    {
LABEL_222:
                      if (v6 > 3)
                        goto LABEL_226;
                      v97 = ((1 << v7) + 1) >> v7;
                      v98 = 2;
                      if (v97 > 0xFFFD)
                        v98 = 4;
                      if (v97 <= 0xFD)
LABEL_226:
                        v98 = 1;
                      memcpy(a1, a2, v98 + v6);
                      return a1;
                    }
LABEL_206:
                    if (v6 > 3)
                    {
LABEL_207:
                      v93 = a2[v6];
                      goto LABEL_212;
                    }
                    v94 = ((1 << v7) + 1) >> v7;
                    if (v94 > 0xFFFD)
                    {
                      v93 = *(_DWORD *)&a2[v6];
                    }
                    else
                    {
                      if (v94 <= 0xFD)
                        goto LABEL_207;
                      v93 = *(unsigned __int16 *)&a2[v6];
                    }
LABEL_212:
                    if (v93 >= 2)
                    {
                      if (v6 <= 3)
                        v95 = v6;
                      else
                        v95 = 4;
                      __asm { BR              X12 }
                    }
                    if (v93 != 1)
                    {
                      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                      if (v6 <= 3)
                      {
                        v96 = ((1 << v7) + 1) >> v7;
                        if (v96 > 0xFFFD)
                          goto LABEL_232;
                        if (v96 > 0xFD)
                          goto LABEL_234;
                      }
LABEL_221:
                      a1[v6] = 0;
                      return a1;
                    }
                    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                    if (v6 > 3)
                      goto LABEL_231;
                    v99 = ((1 << v7) + 1) >> v7;
                    if (v99 <= 0xFFFD)
                    {
                      if (v99 > 0xFD)
                      {
LABEL_235:
                        *(_WORD *)&a1[v6] = 1;
                        return a1;
                      }
LABEL_231:
                      a1[v6] = 1;
                      return a1;
                    }
LABEL_233:
                    *(_DWORD *)&a1[v6] = 1;
                    return a1;
                  }
LABEL_201:
                  v92 = 0x7FFFFFFF;
                  goto LABEL_202;
                }
LABEL_120:
                v65 = 1;
                goto LABEL_121;
              }
LABEL_116:
              v63 = 0x7FFFFFFF;
              if (v6 > 3)
                goto LABEL_120;
              goto LABEL_117;
            }
          }
          else
          {
            v60 = 3;
          }
          v62 = 8;
          goto LABEL_113;
        }
        v57 = v58 + 2;
        if (v58 >= 0xFE)
          v56 = 16;
        else
          v56 = 8;
      }
      else
      {
        v56 = 8;
        v57 = 3;
      }
      v59 = (1 << v56) - v57;
      if ((v59 & 0x80000000) == 0)
        goto LABEL_108;
      goto LABEL_107;
    }
  }
  v21 = a1[v19];
  if (!a1[v19])
    goto LABEL_40;
LABEL_33:
  v23 = (v21 - 1) << v20;
  if (v19 > 3)
    v23 = 0;
  if ((_DWORD)v19)
  {
    if (v19 > 3)
      LODWORD(v19) = 4;
    __asm { BR              X12 }
  }
  if (v15 + v23 != -1)
    goto LABEL_100;
LABEL_53:
  if (v6 > 3)
  {
    v33 = 8;
    v34 = 3;
    goto LABEL_59;
  }
  v35 = ((1 << v7) + 1) >> v7;
  if (v35 <= 0xFFFD)
  {
    v34 = v35 + 2;
    if (v35 >= 0xFE)
      v33 = 16;
    else
      v33 = 8;
LABEL_59:
    v36 = (1 << v33) - v34;
    if ((v36 & 0x80000000) == 0)
      goto LABEL_61;
  }
  v36 = 0x7FFFFFFF;
LABEL_61:
  if (v6 > 3)
  {
    v37 = 3;
LABEL_65:
    v39 = 8;
    goto LABEL_66;
  }
  v38 = ((1 << v7) + 1) >> v7;
  if (v38 > 0xFFFD)
    goto LABEL_69;
  v37 = v38 + 2;
  if (v38 <= 0xFD)
    goto LABEL_65;
  v39 = 16;
LABEL_66:
  v40 = (1 << v39) - v37;
  if ((v40 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_73;
LABEL_70:
    v41 = ((1 << v7) + 1) >> v7;
    v42 = 2;
    if (v41 > 0xFFFD)
      v42 = 4;
    if (v41 > 0xFD)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_69:
  v40 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_70;
LABEL_73:
  v42 = 1;
LABEL_74:
  if (!v36)
    goto LABEL_135;
  v43 = v36 - v40;
  if (v36 <= v40)
    goto LABEL_92;
  v44 = v42 + v6;
  v45 = 8 * (v42 + v6);
  if (v44 <= 3)
  {
    v47 = ((v43 + ~(-1 << v45)) >> v45) + 1;
    if (HIWORD(v47))
    {
      v46 = *(_DWORD *)&a2[v44];
      if (!v46)
        goto LABEL_92;
      goto LABEL_85;
    }
    if (v47 > 0xFF)
    {
      v46 = *(unsigned __int16 *)&a2[v44];
      if (!*(_WORD *)&a2[v44])
        goto LABEL_92;
      goto LABEL_85;
    }
    if (v47 < 2)
    {
LABEL_92:
      if (!v40)
        goto LABEL_135;
      if (v6 <= 3)
      {
        v54 = ((1 << v7) + 1) >> v7;
        if (v54 > 0xFFFD)
        {
          v50 = *(_DWORD *)&a2[v6];
          v51 = ~v50;
          goto LABEL_133;
        }
        v53 = v54 + 2;
        if (v54 > 0xFD)
        {
          v71 = *(unsigned __int16 *)&a2[v6];
          v50 = v71 | 0xFFFF0000;
          v51 = v71 ^ 0xFFFF;
          v52 = 16;
        }
        else
        {
          v55 = a2[v6];
          v50 = v55 | 0xFFFFFF00;
          v51 = v55 ^ 0xFF;
          v52 = 8;
        }
      }
      else
      {
        v49 = a2[v6];
        v50 = v49 | 0xFFFFFF00;
        v51 = v49 ^ 0xFF;
        v52 = 8;
        v53 = 3;
      }
      v72 = (1 << v52) - v53;
      if ((v72 & 0x80000000) == 0)
      {
        if (v72 <= v51)
          goto LABEL_135;
        goto LABEL_134;
      }
LABEL_133:
      if (v51 >= 0x7FFFFFFF)
        goto LABEL_135;
LABEL_134:
      if (!v50)
        goto LABEL_135;
      goto LABEL_171;
    }
  }
  v46 = a2[v44];
  if (!a2[v44])
    goto LABEL_92;
LABEL_85:
  v48 = (v46 - 1) << v45;
  if (v44 > 3)
    v48 = 0;
  if ((_DWORD)v44)
  {
    if (v44 > 3)
      LODWORD(v44) = 4;
    __asm { BR              X12 }
  }
  if (v40 + v48 != -1)
  {
LABEL_171:
    if (v6 > 3)
      goto LABEL_172;
    v81 = ((1 << v7) + 1) >> v7;
    if (v81 > 0xFFFD)
    {
      v80 = *(_DWORD *)&a1[v6];
      goto LABEL_177;
    }
    if (v81 <= 0xFD)
LABEL_172:
      v80 = a1[v6];
    else
      v80 = *(unsigned __int16 *)&a1[v6];
LABEL_177:
    if (v80 >= 2)
    {
      if (v6 <= 3)
        v82 = v6;
      else
        v82 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    goto LABEL_222;
  }
LABEL_135:
  if (a1 != a2)
  {
    if (v6 <= 3)
    {
      v73 = ((1 << v7) + 1) >> v7;
      if (v73 > 0xFFFD)
      {
        if (*(_DWORD *)&a1[v6] < 2u)
        {
LABEL_148:
          (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
          if (v6 <= 3)
          {
            v75 = ((1 << v7) + 1) >> v7;
            if (v75 > 0xFFFD)
            {
              v76 = *(_DWORD *)&a2[v6];
              if (v76 < 2)
              {
LABEL_160:
                if (v76 != 1)
                {
                  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                  if (v6 <= 3)
                  {
                    v78 = ((1 << v7) + 1) >> v7;
                    if (v78 <= 0xFFFD)
                    {
                      if (v78 <= 0xFD)
                        goto LABEL_221;
LABEL_234:
                      *(_WORD *)&a1[v6] = 0;
                      return a1;
                    }
LABEL_232:
                    *(_DWORD *)&a1[v6] = 0;
                    return a1;
                  }
                  goto LABEL_221;
                }
                (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                if (v6 > 3)
                  goto LABEL_231;
                v79 = ((1 << v7) + 1) >> v7;
                if (v79 <= 0xFFFD)
                {
                  if (v79 > 0xFD)
                    goto LABEL_235;
                  goto LABEL_231;
                }
                goto LABEL_233;
              }
LABEL_156:
              if (v6 <= 3)
                v77 = v6;
              else
                v77 = 4;
              __asm { BR              X12 }
            }
            if (v75 > 0xFD)
            {
              v76 = *(unsigned __int16 *)&a2[v6];
              if (v76 < 2)
                goto LABEL_160;
              goto LABEL_156;
            }
          }
          v76 = a2[v6];
          if (v76 < 2)
            goto LABEL_160;
          goto LABEL_156;
        }
LABEL_144:
        if (v6 <= 3)
          v74 = v6;
        else
          v74 = 4;
        __asm { BR              X12 }
      }
      if (v73 > 0xFD)
      {
        if (*(unsigned __int16 *)&a1[v6] < 2u)
          goto LABEL_148;
        goto LABEL_144;
      }
    }
    if (a1[v6] < 2u)
      goto LABEL_148;
    goto LABEL_144;
  }
  return a1;
}

char *sub_1AC6F222C(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
  {
    v7 = 8;
    v8 = 3;
    goto LABEL_7;
  }
  v9 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v9 <= 0xFFFD)
  {
    v8 = v9 + 2;
    if (v9 >= 0xFE)
      v7 = 16;
    else
      v7 = 8;
LABEL_7:
    v10 = (1 << v7) - v8;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v10 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    v11 = 3;
LABEL_13:
    v13 = 8;
    goto LABEL_14;
  }
  v12 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v12 > 0xFFFD)
    goto LABEL_17;
  v11 = v12 + 2;
  if (v12 <= 0xFD)
    goto LABEL_13;
  v13 = 16;
LABEL_14:
  v14 = (1 << v13) - v11;
  if ((v14 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_21;
LABEL_18:
    v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v16 = 2;
    if (v15 > 0xFFFD)
      v16 = 4;
    if (v15 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v14 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_18;
LABEL_21:
  v16 = 1;
LABEL_22:
  if (!v10)
    goto LABEL_55;
  v17 = v10 - v14;
  if (v10 <= v14)
    goto LABEL_40;
  v18 = v16 + v6;
  v19 = 8 * (v16 + v6);
  if (v18 <= 3)
  {
    v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      v20 = *(_DWORD *)&a2[v18];
      if (!v20)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v21 > 0xFF)
    {
      v20 = *(unsigned __int16 *)&a2[v18];
      if (!*(_WORD *)&a2[v18])
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v21 < 2)
    {
LABEL_40:
      if (!v14)
        goto LABEL_55;
      if (v6 <= 3)
      {
        v28 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v28 > 0xFFFD)
        {
          v24 = *(_DWORD *)&a2[v6];
          v25 = ~v24;
          goto LABEL_51;
        }
        v27 = v28 + 2;
        if (v28 > 0xFD)
        {
          v30 = *(unsigned __int16 *)&a2[v6];
          v24 = v30 | 0xFFFF0000;
          v25 = v30 ^ 0xFFFF;
          v26 = 16;
        }
        else
        {
          v29 = a2[v6];
          v24 = v29 | 0xFFFFFF00;
          v25 = v29 ^ 0xFF;
          v26 = 8;
        }
      }
      else
      {
        v23 = a2[v6];
        v24 = v23 | 0xFFFFFF00;
        v25 = v23 ^ 0xFF;
        v26 = 8;
        v27 = 3;
      }
      v31 = (1 << v26) - v27;
      if ((v31 & 0x80000000) == 0)
      {
        if (v31 <= v25)
          goto LABEL_55;
LABEL_52:
        if (!v24)
          goto LABEL_55;
LABEL_71:
        if (v6 > 3)
          goto LABEL_75;
        v36 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        v37 = 2;
        if (v36 > 0xFFFD)
          v37 = 4;
        if (v36 <= 0xFD)
LABEL_75:
          v37 = 1;
        memcpy(a1, a2, v37 + v6);
        return a1;
      }
LABEL_51:
      if (v25 >= 0x7FFFFFFF)
        goto LABEL_55;
      goto LABEL_52;
    }
  }
  v20 = a2[v18];
  if (!a2[v18])
    goto LABEL_40;
LABEL_33:
  v22 = (v20 - 1) << v19;
  if (v18 > 3)
    v22 = 0;
  if ((_DWORD)v18)
  {
    if (v18 > 3)
      LODWORD(v18) = 4;
    __asm { BR              X13 }
  }
  if (v14 + v22 != -1)
    goto LABEL_71;
LABEL_55:
  if (v6 > 3)
  {
LABEL_56:
    v32 = a2[v6];
    goto LABEL_61;
  }
  v33 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v33 > 0xFFFD)
  {
    v32 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v33 <= 0xFD)
      goto LABEL_56;
    v32 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_61:
  if (v32 >= 2)
  {
    if (v6 <= 3)
      v34 = v6;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  if (v32 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v38 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v38 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        return a1;
      }
      if (v38 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        return a1;
      }
    }
    a1[v6] = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v35 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 0;
        return a1;
      }
      if (v35 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 0;
        return a1;
      }
    }
    a1[v6] = 0;
  }
  return a1;
}

char *sub_1AC6F2710(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  int v53;
  unsigned int v54;
  int v55;
  char v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
  {
    v8 = 8;
    v9 = 3;
    goto LABEL_7;
  }
  v10 = ((1 << v7) + 1) >> v7;
  if (v10 <= 0xFFFD)
  {
    v9 = v10 + 2;
    if (v10 >= 0xFE)
      v8 = 16;
    else
      v8 = 8;
LABEL_7:
    v11 = (1 << v8) - v9;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v11 = 0x7FFFFFFF;
LABEL_9:
  if (v6 > 3)
  {
    v12 = 3;
LABEL_13:
    v14 = 8;
    goto LABEL_14;
  }
  v13 = ((1 << v7) + 1) >> v7;
  if (v13 > 0xFFFD)
    goto LABEL_17;
  v12 = v13 + 2;
  if (v13 <= 0xFD)
    goto LABEL_13;
  v14 = 16;
LABEL_14:
  v15 = (1 << v14) - v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_21;
LABEL_18:
    v16 = ((1 << v7) + 1) >> v7;
    v17 = 2;
    if (v16 > 0xFFFD)
      v17 = 4;
    if (v16 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v15 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_18;
LABEL_21:
  v17 = 1;
LABEL_22:
  if (!v11)
    goto LABEL_53;
  v18 = v11 - v15;
  if (v11 <= v15)
    goto LABEL_40;
  v19 = v17 + v6;
  v20 = 8 * (v17 + v6);
  if (v19 <= 3)
  {
    v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      v21 = *(_DWORD *)&a1[v19];
      if (!v21)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v22 > 0xFF)
    {
      v21 = *(unsigned __int16 *)&a1[v19];
      if (!*(_WORD *)&a1[v19])
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v22 < 2)
    {
LABEL_40:
      if (!v15)
        goto LABEL_53;
      if (v6 <= 3)
      {
        v29 = ((1 << v7) + 1) >> v7;
        if (v29 > 0xFFFD)
        {
          v25 = *(_DWORD *)&a1[v6];
          v26 = ~v25;
          goto LABEL_51;
        }
        v28 = v29 + 2;
        if (v29 > 0xFD)
        {
          v31 = *(unsigned __int16 *)&a1[v6];
          v25 = v31 | 0xFFFF0000;
          v26 = v31 ^ 0xFFFF;
          v27 = 16;
        }
        else
        {
          v30 = a1[v6];
          v25 = v30 | 0xFFFFFF00;
          v26 = v30 ^ 0xFF;
          v27 = 8;
        }
      }
      else
      {
        v24 = a1[v6];
        v25 = v24 | 0xFFFFFF00;
        v26 = v24 ^ 0xFF;
        v27 = 8;
        v28 = 3;
      }
      v32 = (1 << v27) - v28;
      if ((v32 & 0x80000000) == 0)
      {
        if (v32 <= v26)
          goto LABEL_53;
        goto LABEL_52;
      }
LABEL_51:
      if (v26 >= 0x7FFFFFFF)
        goto LABEL_53;
LABEL_52:
      if (!v25)
        goto LABEL_53;
LABEL_100:
      if (v6 <= 3)
      {
        v58 = ((1 << v7) + 1) >> v7;
        if (v58 > 0xFFFD)
        {
LABEL_107:
          v59 = 0x7FFFFFFF;
LABEL_108:
          if (v6 <= 3)
          {
            v61 = ((1 << v7) + 1) >> v7;
            if (v61 > 0xFFFD)
              goto LABEL_116;
            v60 = v61 + 2;
            if (v61 > 0xFD)
            {
              v62 = 16;
LABEL_113:
              v63 = (1 << v62) - v60;
              if ((v63 & 0x80000000) == 0)
              {
                if (v6 > 3)
                  goto LABEL_120;
LABEL_117:
                v64 = ((1 << v7) + 1) >> v7;
                v65 = 2;
                if (v64 > 0xFFFD)
                  v65 = 4;
                if (v64 > 0xFD)
                {
LABEL_121:
                  if (!v59)
                    goto LABEL_206;
                  v66 = v59 - v63;
                  if (v59 <= v63)
                    goto LABEL_192;
                  v67 = v65 + v6;
                  v68 = 8 * (v65 + v6);
                  if (v67 > 3)
                    goto LABEL_124;
                  v70 = ((v66 + ~(-1 << v68)) >> v68) + 1;
                  if (HIWORD(v70))
                  {
                    v69 = *(_DWORD *)&a2[v67];
                  }
                  else
                  {
                    if (v70 <= 0xFF)
                    {
                      if (v70 < 2)
                        goto LABEL_192;
LABEL_124:
                      v69 = a2[v67];
                      goto LABEL_185;
                    }
                    v69 = *(unsigned __int16 *)&a2[v67];
                  }
LABEL_185:
                  if (v69)
                  {
                    v83 = (v69 - 1) << v68;
                    if (v67 > 3)
                      v83 = 0;
                    if ((_DWORD)v67)
                    {
                      if (v67 > 3)
                        LODWORD(v67) = 4;
                      __asm { BR              X12 }
                    }
                    if (v63 + v83 != -1)
                      goto LABEL_222;
                    goto LABEL_206;
                  }
LABEL_192:
                  if (!v63)
                    goto LABEL_206;
                  if (v6 <= 3)
                  {
                    v89 = ((1 << v7) + 1) >> v7;
                    if (v89 > 0xFFFD)
                    {
                      v85 = *(_DWORD *)&a2[v6];
                      v86 = ~v85;
                      goto LABEL_201;
                    }
                    v88 = v89 + 2;
                    if (v89 > 0xFD)
                    {
                      v91 = *(unsigned __int16 *)&a2[v6];
                      v85 = v91 | 0xFFFF0000;
                      v86 = v91 ^ 0xFFFF;
                      v87 = 16;
                    }
                    else
                    {
                      v90 = a2[v6];
                      v85 = v90 | 0xFFFFFF00;
                      v86 = v90 ^ 0xFF;
                      v87 = 8;
                    }
                  }
                  else
                  {
                    v84 = a2[v6];
                    v85 = v84 | 0xFFFFFF00;
                    v86 = v84 ^ 0xFF;
                    v87 = 8;
                    v88 = 3;
                  }
                  v92 = (1 << v87) - v88;
                  if ((v92 & 0x80000000) == 0)
                  {
LABEL_202:
                    if (v92 > v86 && v85)
                    {
LABEL_222:
                      if (v6 > 3)
                        goto LABEL_226;
                      v97 = ((1 << v7) + 1) >> v7;
                      v98 = 2;
                      if (v97 > 0xFFFD)
                        v98 = 4;
                      if (v97 <= 0xFD)
LABEL_226:
                        v98 = 1;
                      memcpy(a1, a2, v98 + v6);
                      return a1;
                    }
LABEL_206:
                    if (v6 > 3)
                    {
LABEL_207:
                      v93 = a2[v6];
                      goto LABEL_212;
                    }
                    v94 = ((1 << v7) + 1) >> v7;
                    if (v94 > 0xFFFD)
                    {
                      v93 = *(_DWORD *)&a2[v6];
                    }
                    else
                    {
                      if (v94 <= 0xFD)
                        goto LABEL_207;
                      v93 = *(unsigned __int16 *)&a2[v6];
                    }
LABEL_212:
                    if (v93 >= 2)
                    {
                      if (v6 <= 3)
                        v95 = v6;
                      else
                        v95 = 4;
                      __asm { BR              X12 }
                    }
                    if (v93 != 1)
                    {
                      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                      if (v6 <= 3)
                      {
                        v96 = ((1 << v7) + 1) >> v7;
                        if (v96 > 0xFFFD)
                          goto LABEL_232;
                        if (v96 > 0xFD)
                          goto LABEL_234;
                      }
LABEL_221:
                      a1[v6] = 0;
                      return a1;
                    }
                    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                    if (v6 > 3)
                      goto LABEL_231;
                    v99 = ((1 << v7) + 1) >> v7;
                    if (v99 <= 0xFFFD)
                    {
                      if (v99 > 0xFD)
                      {
LABEL_235:
                        *(_WORD *)&a1[v6] = 1;
                        return a1;
                      }
LABEL_231:
                      a1[v6] = 1;
                      return a1;
                    }
LABEL_233:
                    *(_DWORD *)&a1[v6] = 1;
                    return a1;
                  }
LABEL_201:
                  v92 = 0x7FFFFFFF;
                  goto LABEL_202;
                }
LABEL_120:
                v65 = 1;
                goto LABEL_121;
              }
LABEL_116:
              v63 = 0x7FFFFFFF;
              if (v6 > 3)
                goto LABEL_120;
              goto LABEL_117;
            }
          }
          else
          {
            v60 = 3;
          }
          v62 = 8;
          goto LABEL_113;
        }
        v57 = v58 + 2;
        if (v58 >= 0xFE)
          v56 = 16;
        else
          v56 = 8;
      }
      else
      {
        v56 = 8;
        v57 = 3;
      }
      v59 = (1 << v56) - v57;
      if ((v59 & 0x80000000) == 0)
        goto LABEL_108;
      goto LABEL_107;
    }
  }
  v21 = a1[v19];
  if (!a1[v19])
    goto LABEL_40;
LABEL_33:
  v23 = (v21 - 1) << v20;
  if (v19 > 3)
    v23 = 0;
  if ((_DWORD)v19)
  {
    if (v19 > 3)
      LODWORD(v19) = 4;
    __asm { BR              X12 }
  }
  if (v15 + v23 != -1)
    goto LABEL_100;
LABEL_53:
  if (v6 > 3)
  {
    v33 = 8;
    v34 = 3;
    goto LABEL_59;
  }
  v35 = ((1 << v7) + 1) >> v7;
  if (v35 <= 0xFFFD)
  {
    v34 = v35 + 2;
    if (v35 >= 0xFE)
      v33 = 16;
    else
      v33 = 8;
LABEL_59:
    v36 = (1 << v33) - v34;
    if ((v36 & 0x80000000) == 0)
      goto LABEL_61;
  }
  v36 = 0x7FFFFFFF;
LABEL_61:
  if (v6 > 3)
  {
    v37 = 3;
LABEL_65:
    v39 = 8;
    goto LABEL_66;
  }
  v38 = ((1 << v7) + 1) >> v7;
  if (v38 > 0xFFFD)
    goto LABEL_69;
  v37 = v38 + 2;
  if (v38 <= 0xFD)
    goto LABEL_65;
  v39 = 16;
LABEL_66:
  v40 = (1 << v39) - v37;
  if ((v40 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_73;
LABEL_70:
    v41 = ((1 << v7) + 1) >> v7;
    v42 = 2;
    if (v41 > 0xFFFD)
      v42 = 4;
    if (v41 > 0xFD)
      goto LABEL_74;
    goto LABEL_73;
  }
LABEL_69:
  v40 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_70;
LABEL_73:
  v42 = 1;
LABEL_74:
  if (!v36)
    goto LABEL_135;
  v43 = v36 - v40;
  if (v36 <= v40)
    goto LABEL_92;
  v44 = v42 + v6;
  v45 = 8 * (v42 + v6);
  if (v44 <= 3)
  {
    v47 = ((v43 + ~(-1 << v45)) >> v45) + 1;
    if (HIWORD(v47))
    {
      v46 = *(_DWORD *)&a2[v44];
      if (!v46)
        goto LABEL_92;
      goto LABEL_85;
    }
    if (v47 > 0xFF)
    {
      v46 = *(unsigned __int16 *)&a2[v44];
      if (!*(_WORD *)&a2[v44])
        goto LABEL_92;
      goto LABEL_85;
    }
    if (v47 < 2)
    {
LABEL_92:
      if (!v40)
        goto LABEL_135;
      if (v6 <= 3)
      {
        v54 = ((1 << v7) + 1) >> v7;
        if (v54 > 0xFFFD)
        {
          v50 = *(_DWORD *)&a2[v6];
          v51 = ~v50;
          goto LABEL_133;
        }
        v53 = v54 + 2;
        if (v54 > 0xFD)
        {
          v71 = *(unsigned __int16 *)&a2[v6];
          v50 = v71 | 0xFFFF0000;
          v51 = v71 ^ 0xFFFF;
          v52 = 16;
        }
        else
        {
          v55 = a2[v6];
          v50 = v55 | 0xFFFFFF00;
          v51 = v55 ^ 0xFF;
          v52 = 8;
        }
      }
      else
      {
        v49 = a2[v6];
        v50 = v49 | 0xFFFFFF00;
        v51 = v49 ^ 0xFF;
        v52 = 8;
        v53 = 3;
      }
      v72 = (1 << v52) - v53;
      if ((v72 & 0x80000000) == 0)
      {
        if (v72 <= v51)
          goto LABEL_135;
        goto LABEL_134;
      }
LABEL_133:
      if (v51 >= 0x7FFFFFFF)
        goto LABEL_135;
LABEL_134:
      if (!v50)
        goto LABEL_135;
      goto LABEL_171;
    }
  }
  v46 = a2[v44];
  if (!a2[v44])
    goto LABEL_92;
LABEL_85:
  v48 = (v46 - 1) << v45;
  if (v44 > 3)
    v48 = 0;
  if ((_DWORD)v44)
  {
    if (v44 > 3)
      LODWORD(v44) = 4;
    __asm { BR              X12 }
  }
  if (v40 + v48 != -1)
  {
LABEL_171:
    if (v6 > 3)
      goto LABEL_172;
    v81 = ((1 << v7) + 1) >> v7;
    if (v81 > 0xFFFD)
    {
      v80 = *(_DWORD *)&a1[v6];
      goto LABEL_177;
    }
    if (v81 <= 0xFD)
LABEL_172:
      v80 = a1[v6];
    else
      v80 = *(unsigned __int16 *)&a1[v6];
LABEL_177:
    if (v80 >= 2)
    {
      if (v6 <= 3)
        v82 = v6;
      else
        v82 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    goto LABEL_222;
  }
LABEL_135:
  if (a1 != a2)
  {
    if (v6 <= 3)
    {
      v73 = ((1 << v7) + 1) >> v7;
      if (v73 > 0xFFFD)
      {
        if (*(_DWORD *)&a1[v6] < 2u)
        {
LABEL_148:
          (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
          if (v6 <= 3)
          {
            v75 = ((1 << v7) + 1) >> v7;
            if (v75 > 0xFFFD)
            {
              v76 = *(_DWORD *)&a2[v6];
              if (v76 < 2)
              {
LABEL_160:
                if (v76 != 1)
                {
                  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                  if (v6 <= 3)
                  {
                    v78 = ((1 << v7) + 1) >> v7;
                    if (v78 <= 0xFFFD)
                    {
                      if (v78 <= 0xFD)
                        goto LABEL_221;
LABEL_234:
                      *(_WORD *)&a1[v6] = 0;
                      return a1;
                    }
LABEL_232:
                    *(_DWORD *)&a1[v6] = 0;
                    return a1;
                  }
                  goto LABEL_221;
                }
                (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                if (v6 > 3)
                  goto LABEL_231;
                v79 = ((1 << v7) + 1) >> v7;
                if (v79 <= 0xFFFD)
                {
                  if (v79 > 0xFD)
                    goto LABEL_235;
                  goto LABEL_231;
                }
                goto LABEL_233;
              }
LABEL_156:
              if (v6 <= 3)
                v77 = v6;
              else
                v77 = 4;
              __asm { BR              X12 }
            }
            if (v75 > 0xFD)
            {
              v76 = *(unsigned __int16 *)&a2[v6];
              if (v76 < 2)
                goto LABEL_160;
              goto LABEL_156;
            }
          }
          v76 = a2[v6];
          if (v76 < 2)
            goto LABEL_160;
          goto LABEL_156;
        }
LABEL_144:
        if (v6 <= 3)
          v74 = v6;
        else
          v74 = 4;
        __asm { BR              X12 }
      }
      if (v73 > 0xFD)
      {
        if (*(unsigned __int16 *)&a1[v6] < 2u)
          goto LABEL_148;
        goto LABEL_144;
      }
    }
    if (a1[v6] < 2u)
      goto LABEL_148;
    goto LABEL_144;
  }
  return a1;
}

uint64_t sub_1AC6F3420(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  int v30;
  unsigned int v31;
  uint64_t result;
  int v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > 3)
  {
    v5 = 3;
LABEL_5:
    v7 = 8;
    goto LABEL_6;
  }
  v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFD)
    goto LABEL_11;
  v5 = v6 + 2;
  if (v6 <= 0xFD)
    goto LABEL_5;
  v7 = 16;
LABEL_6:
  v8 = (1 << v7) - v5;
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_15;
LABEL_12:
    v10 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    v11 = 2;
    if (v10 > 0xFFFD)
      v11 = 4;
    if (v10 > 0xFD)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_11:
  v9 = 2147483646;
  if (v4 <= 3)
    goto LABEL_12;
LABEL_15:
  v11 = 1;
LABEL_16:
  if (!a2)
    return 0;
  if (a2 > v9)
  {
    v12 = v11 + v4;
    v13 = 8 * v12;
    if (v12 > 3)
      goto LABEL_19;
    v15 = ((a2 - v9 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v15 >= 2)
    {
LABEL_19:
      v14 = *(unsigned __int8 *)(a1 + v12);
      if (!*(_BYTE *)(a1 + v12))
        goto LABEL_34;
LABEL_27:
      v16 = (v14 - 1) << v13;
      if (v12 > 3)
        v16 = 0;
      if ((_DWORD)v12)
      {
        if (v12 > 3)
          LODWORD(v12) = 4;
        __asm { BR              X12 }
      }
      return v9 + v16 + 1;
    }
  }
LABEL_34:
  if (!v9)
    return 0;
  if (v4 > 3)
  {
    v17 = 3;
LABEL_37:
    v18 = 8;
    goto LABEL_38;
  }
  v23 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v23 > 0xFFFD)
  {
LABEL_48:
    v19 = 0x7FFFFFFF;
    if (v4 > 3)
      goto LABEL_40;
    goto LABEL_49;
  }
  v17 = v23 + 2;
  if (v23 <= 0xFD)
    goto LABEL_37;
  v18 = 16;
LABEL_38:
  v19 = (1 << v18) - v17;
  if ((v19 & 0x80000000) != 0)
    goto LABEL_48;
  if (v4 > 3)
  {
LABEL_40:
    v20 = 3;
LABEL_41:
    v21 = 8;
    goto LABEL_42;
  }
LABEL_49:
  v24 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v24 > 0xFFFD)
    goto LABEL_52;
  v20 = v24 + 2;
  if (v24 <= 0xFD)
    goto LABEL_41;
  v21 = 16;
LABEL_42:
  v22 = (1 << v21) - v20;
  if ((v22 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_56;
    goto LABEL_53;
  }
LABEL_52:
  v22 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_56:
    v26 = 1;
    goto LABEL_57;
  }
LABEL_53:
  v25 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  v26 = 2;
  if (v25 > 0xFFFD)
    v26 = 4;
  if (v25 <= 0xFD)
    goto LABEL_56;
LABEL_57:
  if (!v19)
    return 0;
  v27 = v19 - v22;
  if (v19 <= v22)
    goto LABEL_75;
  v28 = v26 + v4;
  v29 = 8 * (v26 + v4);
  if (v28 > 3)
    goto LABEL_60;
  v31 = ((v27 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    v30 = *(_DWORD *)(a1 + v28);
  }
  else
  {
    if (v31 <= 0xFF)
    {
      if (v31 < 2)
        goto LABEL_75;
LABEL_60:
      v30 = *(unsigned __int8 *)(a1 + v28);
      goto LABEL_68;
    }
    v30 = *(unsigned __int16 *)(a1 + v28);
  }
LABEL_68:
  if (v30)
  {
    v33 = (v30 - 1) << v29;
    if (v28 > 3)
      v33 = 0;
    if ((_DWORD)v28)
    {
      if (v28 > 3)
        LODWORD(v28) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_120;
  }
LABEL_75:
  if (!v22)
    return 0;
  if (v4 > 3)
  {
    v34 = 3;
    goto LABEL_80;
  }
  v35 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v35 <= 0xFFFD)
  {
    v34 = v35 + 2;
    if (v35 > 0xFD)
    {
      v36 = 16;
LABEL_81:
      v37 = (1 << v36) - v34;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_83;
      goto LABEL_82;
    }
LABEL_80:
    v36 = 8;
    goto LABEL_81;
  }
LABEL_82:
  v37 = 0x7FFFFFFF;
LABEL_83:
  if (v4 > 3)
  {
    v38 = 3;
LABEL_87:
    v40 = 8;
    goto LABEL_88;
  }
  v39 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v39 > 0xFFFD)
  {
LABEL_89:
    v22 = 0x7FFFFFFF;
    goto LABEL_90;
  }
  v38 = v39 + 2;
  if (v39 <= 0xFD)
    goto LABEL_87;
  v40 = 16;
LABEL_88:
  v22 = (1 << v40) - v38;
  if ((v22 & 0x80000000) != 0)
    goto LABEL_89;
LABEL_90:
  if (v4 > 3)
    goto LABEL_94;
  v41 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  v42 = 2;
  if (v41 > 0xFFFD)
    v42 = 4;
  if (v41 <= 0xFD)
LABEL_94:
    v42 = 1;
  if (!v37)
    return 0;
  v43 = v37 - v22;
  if (v37 <= v22)
    goto LABEL_114;
  v28 = v42 + v4;
  v44 = 8 * (v42 + v4);
  if (v28 > 3)
    goto LABEL_98;
  v46 = ((v43 + ~(-1 << v44)) >> v44) + 1;
  if (HIWORD(v46))
  {
    v45 = *(_DWORD *)(a1 + v28);
  }
  else
  {
    if (v46 <= 0xFF)
    {
      if (v46 < 2)
        goto LABEL_114;
LABEL_98:
      v45 = *(unsigned __int8 *)(a1 + v28);
      goto LABEL_107;
    }
    v45 = *(unsigned __int16 *)(a1 + v28);
  }
LABEL_107:
  if (v45)
  {
    v33 = (v45 - 1) << v44;
    if (v28 > 3)
      v33 = 0;
    if ((_DWORD)v28)
    {
      if (v28 > 3)
        LODWORD(v28) = 4;
      __asm { BR              X12 }
    }
LABEL_120:
    v54 = v22 + (v28 | v33) + 1;
    result = v54 - 1;
    if (v54 > 1)
      return result;
    return 0;
  }
LABEL_114:
  if (!v22)
    return 0;
  if (v4 <= 3)
  {
    v52 = ((1 << (8 * v4)) + 1) >> (8 * v4);
    if (v52 > 0xFFFD)
    {
      v48 = *(_DWORD *)(a1 + v4);
      v49 = ~v48;
LABEL_125:
      v56 = 0x7FFFFFFF;
      goto LABEL_126;
    }
    v51 = v52 + 2;
    if (v52 > 0xFD)
    {
      v55 = *(unsigned __int16 *)(a1 + v4);
      v48 = v55 | 0xFFFF0000;
      v49 = v55 ^ 0xFFFF;
      v50 = 16;
    }
    else
    {
      v53 = *(unsigned __int8 *)(a1 + v4);
      v48 = v53 | 0xFFFFFF00;
      v49 = v53 ^ 0xFF;
      v50 = 8;
    }
  }
  else
  {
    v47 = *(unsigned __int8 *)(a1 + v4);
    v48 = v47 | 0xFFFFFF00;
    v49 = v47 ^ 0xFF;
    v50 = 8;
    v51 = 3;
  }
  v56 = (1 << v50) - v51;
  if ((v56 & 0x80000000) != 0)
    goto LABEL_125;
LABEL_126:
  if (v56 <= v49)
    return 0;
  v57 = -v48;
  result = v57 - 1;
  if (v57 <= 1)
    return 0;
  return result;
}

void sub_1AC6F3A48(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v12 = ((1 << v7) + 1) >> v7;
    if (v12 > 0xFFFD)
      goto LABEL_12;
    v8 = v12 + 2;
    if (v12 > 0xFD)
    {
      v9 = 16;
LABEL_4:
      v10 = (1 << v9) - v8;
      v11 = v10 - 1;
      if (!v10)
        v11 = 0;
      if ((v10 & 0x80000000) == 0)
      {
        if (v6 > 3)
          goto LABEL_16;
LABEL_13:
        v13 = ((1 << v7) + 1) >> v7;
        v14 = 2;
        if (v13 > 0xFFFD)
          v14 = 4;
        if (v13 > 0xFD)
        {
LABEL_17:
          v15 = v14 + v6;
          if (a3 <= v11)
          {
            v16 = 0u;
          }
          else if (v15 <= 3)
          {
            v18 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
            if (HIWORD(v18))
            {
              v16 = 4u;
            }
            else if (v18 >= 0x100)
            {
              v16 = 2;
            }
            else
            {
              v16 = v18 > 1;
            }
          }
          else
          {
            v16 = 1u;
          }
          if (v11 < a2)
          {
            v17 = ~v11 + a2;
            if (v15 < 4)
            {
              if ((_DWORD)v15)
              {
                v19 = v17 & ~(-1 << (8 * v15));
                bzero(a1, v15);
                if ((_DWORD)v15 == 3)
                {
                  *(_WORD *)a1 = v19;
                  a1[2] = BYTE2(v19);
                }
                else if ((_DWORD)v15 == 2)
                {
                  *(_WORD *)a1 = v19;
                }
                else
                {
                  *a1 = v19;
                }
              }
            }
            else
            {
              bzero(a1, v15);
              *(_DWORD *)a1 = v17;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_16:
        v14 = 1;
        goto LABEL_17;
      }
LABEL_12:
      v11 = 2147483646;
      if (v6 > 3)
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = 3;
  }
  v9 = 8;
  goto LABEL_4;
}

void sub_1AC6F3FF4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1AC6F3E64);
}

void sub_1AC6F40B4(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v2 + v4) = 0;
  v5 = ~v3;
  if (a1 > 3)
    goto LABEL_2;
  v6 = ((1 << v1) + 1) >> v1;
  if (v6 > 0xFFFD)
  {
    *(_DWORD *)(v2 + a1) = v5;
  }
  else
  {
    if (v6 <= 0xFD)
    {
LABEL_2:
      *(_BYTE *)(v2 + a1) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v2 + a1) = v5;
  }
LABEL_7:
  JUMPOUT(0x1AC6F4154);
}

void sub_1AC6F4140()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1AC6F4148()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

uint64_t sub_1AC6F416C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  int v23;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 > 3)
  {
    v3 = 8;
    v4 = 3;
    goto LABEL_7;
  }
  v5 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v5 <= 0xFFFD)
  {
    v4 = v5 + 2;
    if (v5 >= 0xFE)
      v3 = 16;
    else
      v3 = 8;
LABEL_7:
    v6 = (1 << v3) - v4;
    if ((v6 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v6 = 0x7FFFFFFF;
LABEL_9:
  if (v2 > 3)
  {
    v7 = 3;
LABEL_13:
    v9 = 8;
    goto LABEL_14;
  }
  v8 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v8 > 0xFFFD)
    goto LABEL_17;
  v7 = v8 + 2;
  if (v8 <= 0xFD)
    goto LABEL_13;
  v9 = 16;
LABEL_14:
  v10 = (1 << v9) - v7;
  if ((v10 & 0x80000000) == 0)
  {
    if (v2 > 3)
      goto LABEL_21;
LABEL_18:
    v11 = ((1 << (8 * v2)) + 1) >> (8 * v2);
    v12 = 2;
    if (v11 > 0xFFFD)
      v12 = 4;
    if (v11 > 0xFD)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_17:
  v10 = 0x7FFFFFFF;
  if (v2 <= 3)
    goto LABEL_18;
LABEL_21:
  v12 = 1;
LABEL_22:
  if (!v6)
    return 0;
  v13 = v6 - v10;
  if (v6 <= v10)
    goto LABEL_40;
  v14 = v12 + v2;
  v15 = 8 * (v12 + v2);
  if (v14 <= 3)
  {
    v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v17 < 2)
    {
LABEL_40:
      if (v10)
      {
        if (v2 <= 3)
        {
          v25 = ((1 << (8 * v2)) + 1) >> (8 * v2);
          if (v25 > 0xFFFD)
          {
            v20 = *(_DWORD *)(a1 + v2);
            v21 = ~v20;
LABEL_50:
            v28 = 0x7FFFFFFF;
LABEL_51:
            if (v28 > v21)
              return -v20;
            else
              return 0;
          }
          v23 = v25 + 2;
          if (v25 > 0xFD)
          {
            v27 = *(unsigned __int16 *)(a1 + v2);
            v20 = v27 | 0xFFFF0000;
            v21 = v27 ^ 0xFFFF;
            v22 = 16;
          }
          else
          {
            v26 = *(unsigned __int8 *)(a1 + v2);
            v20 = v26 | 0xFFFFFF00;
            v21 = v26 ^ 0xFF;
            v22 = 8;
          }
        }
        else
        {
          v19 = *(unsigned __int8 *)(a1 + v2);
          v20 = v19 | 0xFFFFFF00;
          v21 = v19 ^ 0xFF;
          v22 = 8;
          v23 = 3;
        }
        v28 = (1 << v22) - v23;
        if ((v28 & 0x80000000) == 0)
          goto LABEL_51;
        goto LABEL_50;
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_40;
LABEL_33:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_1AC6F445C(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = 8 * v4;
  if (v4 > 3)
  {
    v6 = 3;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v9 = ((1 << v5) + 1) >> v5;
  if (v9 > 0xFFFD)
    goto LABEL_10;
  v6 = v9 + 2;
  if (v9 <= 0xFD)
    goto LABEL_3;
  v7 = 16;
LABEL_4:
  v8 = (1 << v7) - v6;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_14;
    goto LABEL_11;
  }
LABEL_10:
  v8 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
LABEL_11:
  v10 = ((1 << v5) + 1) >> v5;
  v11 = 2;
  if (v10 > 0xFFFD)
    v11 = 4;
  if (v10 <= 0xFD)
    goto LABEL_14;
LABEL_15:
  v12 = v11 + v4;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (!a2)
        return;
    }
    else
    {
      a1[v12] = 0;
      if (!a2)
        return;
    }
    if (v4 <= 3)
    {
      v19 = ((1 << v5) + 1) >> v5;
      if (v19 > 0xFFFD)
        goto LABEL_36;
      v16 = v19 + 2;
      if (v19 > 0xFD)
      {
        v17 = 16;
LABEL_31:
        v18 = (1 << v17) - v16;
        if ((v18 & 0x80000000) == 0)
        {
LABEL_37:
          if (v4 <= 3)
          {
            v23 = ((1 << v5) + 1) >> v5;
            if (v23 > 0xFFFD)
              goto LABEL_46;
            v20 = v23 + 2;
            if (v23 > 0xFD)
            {
              v21 = 16;
LABEL_40:
              v22 = (1 << v21) - v20;
              if ((v22 & 0x80000000) == 0)
              {
                if (v4 > 3)
                  goto LABEL_50;
LABEL_47:
                v24 = ((1 << v5) + 1) >> v5;
                v25 = 2;
                if (v24 > 0xFFFD)
                  v25 = 4;
                if (v24 > 0xFD)
                {
LABEL_51:
                  v26 = v25 + v4;
                  v27 = v18 >= v22;
                  v28 = v18 - v22;
                  if (v28 != 0 && v27)
                  {
                    if (v26 <= 3)
                    {
                      v31 = ((v28 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
                      if (HIWORD(v31))
                      {
                        v29 = 4u;
                      }
                      else if (v31 >= 0x100)
                      {
                        v29 = 2;
                      }
                      else
                      {
                        v29 = v31 > 1;
                      }
                    }
                    else
                    {
                      v29 = 1u;
                    }
                  }
                  else
                  {
                    v29 = 0u;
                  }
                  if (v22 < a2)
                  {
                    v30 = ~v22 + a2;
                    if (v26 < 4)
                    {
                      if ((_DWORD)v26)
                      {
                        v32 = v30 & ~(-1 << (8 * v26));
                        bzero(a1, v26);
                        if ((_DWORD)v26 == 3)
                        {
                          *(_WORD *)a1 = v32;
                          a1[2] = BYTE2(v32);
                        }
                        else if ((_DWORD)v26 == 2)
                        {
                          *(_WORD *)a1 = v32;
                        }
                        else
                        {
                          *a1 = v32;
                        }
                      }
                    }
                    else
                    {
                      bzero(a1, v26);
                      *(_DWORD *)a1 = v30;
                    }
                    __asm { BR              X10 }
                  }
                  __asm { BR              X12 }
                }
LABEL_50:
                v25 = 1;
                goto LABEL_51;
              }
LABEL_46:
              v22 = 0x7FFFFFFF;
              if (v4 > 3)
                goto LABEL_50;
              goto LABEL_47;
            }
          }
          else
          {
            v20 = 3;
          }
          v21 = 8;
          goto LABEL_40;
        }
LABEL_36:
        v18 = 0x7FFFFFFF;
        goto LABEL_37;
      }
    }
    else
    {
      v16 = 3;
    }
    v17 = 8;
    goto LABEL_31;
  }
  v13 = ~v8 + a2;
  if (v12 >= 4)
  {
    bzero(a1, v12);
    *(_DWORD *)a1 = v13;
    LOBYTE(v14) = 1;
    if (v8)
      return;
    goto LABEL_69;
  }
  v14 = (v13 >> (8 * v12)) + 1;
  if (!(_DWORD)v12)
  {
LABEL_68:
    if (v8)
      return;
    goto LABEL_69;
  }
  v15 = v13 & ~(-1 << (8 * v12));
  bzero(a1, v12);
  if ((_DWORD)v12 == 3)
  {
    *(_WORD *)a1 = v15;
    a1[2] = BYTE2(v15);
    goto LABEL_68;
  }
  if ((_DWORD)v12 == 2)
  {
    *(_WORD *)a1 = v15;
    if (v8)
      return;
    goto LABEL_69;
  }
  *a1 = v15;
  if (!v8)
LABEL_69:
    a1[v12] = v14;
}

uint64_t type metadata accessor for ShelvesPresenter.ReplaceSolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShelvesPresenter.ReplaceSolution);
}

uint64_t sub_1AC6F48BC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_1AC6F4944(char *a1, char **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      v13 = v12;
      *(_QWORD *)a1 = v12;
      a1[v6] = 1;
    }
    else
    {
      (*(void (**)(char *, char **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
    }
  }
  return a1;
}

void sub_1AC6F4A94(id *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *((unsigned __int8 *)a1 + v4);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 == 1)

  else
    (*(void (**)(id *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

_QWORD *sub_1AC6F4B80(_QWORD *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    v9 = *a2;
    v10 = v9;
    *a1 = v9;
    v11 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, void **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v11 = 0;
  }
  *((_BYTE *)a1 + v6) = v11;
  return a1;
}

id *sub_1AC6F4C90(id *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  id v12;
  char v13;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 2)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 2)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      v12 = v11;
      *a1 = v11;
      v13 = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v13 = 0;
    }
    *((_BYTE *)a1 + v6) = v13;
  }
  return a1;
}

_QWORD *sub_1AC6F4E48(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    *a1 = *a2;
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

id *sub_1AC6F4F50(id *a1, id *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 2)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 2)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      *a1 = *a2;
      v11 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v11 = 0;
    }
    *((_BYTE *)a1 + v6) = v11;
  }
  return a1;
}

uint64_t sub_1AC6F5100(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = 8;
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > 8uLL)
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 2)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 255);
}

void sub_1AC6F524C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v9 = a2 - 255;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_1AC6F541C(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  result = *(unsigned __int8 *)(a1 + v2);
  if (result >= 2)
  {
    if (v2 <= 3)
      v4 = v2;
    else
      v4 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1AC6F54E4(_BYTE *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (a2 > 1)
  {
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for ShelvesPresenter<>.MergeProblem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShelvesPresenter<>.MergeProblem);
}

uint64_t sub_1AC6F55DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ShelvesPresenter.InsertionPoint(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

_QWORD *sub_1AC6F5638(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL8 v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  char v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  size_t v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL8 v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
  {
    v8 = 3;
    goto LABEL_3;
  }
  v11 = ((1 << v7) + 1) >> v7;
  if (v11 <= 0xFFFD)
  {
    v8 = v11 + 2;
    if (v11 > 0xFD)
    {
      v9 = 16;
LABEL_4:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_3:
    v9 = 8;
    goto LABEL_4;
  }
LABEL_9:
  v10 = 0x7FFFFFFF;
LABEL_10:
  v12 = 1;
  if (v6 > 3)
  {
    v13 = 1;
    goto LABEL_19;
  }
  v14 = ((1 << v7) + 1) >> v7;
  if (v14 > 0xFFFD)
  {
    v12 = 4;
  }
  else
  {
    if (v14 < 0xFE)
    {
      v12 = 1;
      v13 = 1;
      goto LABEL_19;
    }
    v12 = 2;
  }
  v22 = v14 > 0xFFFD;
  v13 = 2;
  if (v22)
    v13 = 4;
LABEL_19:
  v15 = v6 + v12;
  if (v10 <= 1)
  {
    v16 = v13 + v6;
    if (v16 <= 3)
    {
      v18 = (~(-1 << (8 * v16)) - v10 + 2) >> (8 * v16);
      if (v18 > 0xFFFE)
      {
        v17 = 4;
      }
      else
      {
        v19 = v18 != 0;
        v20 = v18 >= 0xFF;
        v17 = 2;
        if (!v20)
          v17 = v19;
      }
    }
    else
    {
      v17 = 1;
    }
    v15 += v17;
  }
  v21 = *(_DWORD *)(v5 + 80);
  v22 = v21 > 7 || v15 > 0x18;
  if (v22 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v21 + 16) & ~v21));
    swift_retain();
    return a1;
  }
  if (v6 > 3)
  {
    v25 = 3;
LABEL_38:
    v26 = 8;
    goto LABEL_39;
  }
  v28 = ((1 << v7) + 1) >> v7;
  if (v28 > 0xFFFD)
    goto LABEL_45;
  v25 = v28 + 2;
  if (v28 <= 0xFD)
    goto LABEL_38;
  v26 = 16;
LABEL_39:
  v27 = (1 << v26) - v25;
  if ((v27 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_49;
LABEL_46:
    v29 = ((1 << v7) + 1) >> v7;
    v30 = 2;
    if (v29 > 0xFFFD)
      v30 = 4;
    if (v29 > 0xFD)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_45:
  v27 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_46;
LABEL_49:
  v30 = 1;
LABEL_50:
  if (v27 > 1)
    goto LABEL_67;
  v31 = v30 + v6;
  v32 = 8 * v31;
  if (v31 > 3)
    goto LABEL_52;
  v34 = (~(-1 << v32) - v27 + 2) >> v32;
  if (v34 > 0xFFFE)
  {
    v33 = *(_DWORD *)((char *)a2 + v31);
    if (!v33)
      goto LABEL_66;
    goto LABEL_59;
  }
  if (v34 > 0xFE)
  {
    v33 = *(unsigned __int16 *)((char *)a2 + v31);
    if (!*(_WORD *)((char *)a2 + v31))
      goto LABEL_66;
    goto LABEL_59;
  }
  if (v34)
  {
LABEL_52:
    v33 = *((unsigned __int8 *)a2 + v31);
    if (!*((_BYTE *)a2 + v31))
      goto LABEL_66;
LABEL_59:
    v35 = (v33 - 1) << v32;
    if (v31 > 3)
      v35 = 0;
    if ((_DWORD)v31)
    {
      if (v31 > 3)
        LODWORD(v31) = 4;
      __asm { BR              X13 }
    }
LABEL_105:
    if (v27 + (v31 | v35) == -1)
      goto LABEL_146;
LABEL_106:
    if (v6 <= 3)
    {
      v50 = ((1 << v7) + 1) >> v7;
      if (v50 > 0xFFFD)
      {
LABEL_112:
        v52 = 0x7FFFFFFF;
LABEL_113:
        v53 = 1;
        if (v6 > 3)
        {
          v54 = 1;
LABEL_123:
          v56 = v6 + v53;
          if (v52 <= 1)
          {
            if ((v54 + v6) <= 3)
            {
              v58 = (~(-1 << (8 * (v54 + v6))) - v52 + 2) >> (8 * (v54 + v6));
              if (v58 > 0xFFFE)
              {
                v57 = 4;
              }
              else
              {
                v59 = v58 != 0;
                v20 = v58 >= 0xFF;
                v57 = 2;
                if (!v20)
                  v57 = v59;
              }
            }
            else
            {
              v57 = 1;
            }
            v56 += v57;
          }
          memcpy(a1, a2, v56);
          return a1;
        }
        v55 = ((1 << v7) + 1) >> v7;
        if (v55 > 0xFFFD)
        {
          v53 = 4;
        }
        else
        {
          if (v55 < 0xFE)
          {
            v53 = 1;
            v54 = 1;
            goto LABEL_123;
          }
          v53 = 2;
        }
        v22 = v55 > 0xFFFD;
        v54 = 2;
        if (v22)
          v54 = 4;
        goto LABEL_123;
      }
      v49 = v50 + 2;
      if (v50 > 0xFD)
      {
        v51 = 16;
LABEL_111:
        v52 = (1 << v51) - v49;
        if ((v52 & 0x80000000) == 0)
          goto LABEL_113;
        goto LABEL_112;
      }
    }
    else
    {
      v49 = 3;
    }
    v51 = 8;
    goto LABEL_111;
  }
LABEL_66:
  if (!v27)
    goto LABEL_146;
LABEL_67:
  if (v6 > 3)
  {
    v36 = 3;
    goto LABEL_71;
  }
  v37 = ((1 << v7) + 1) >> v7;
  if (v37 <= 0xFFFD)
  {
    v36 = v37 + 2;
    if (v37 > 0xFD)
    {
      v38 = 16;
LABEL_72:
      v39 = (1 << v38) - v36;
      if ((v39 & 0x80000000) == 0)
        goto LABEL_74;
      goto LABEL_73;
    }
LABEL_71:
    v38 = 8;
    goto LABEL_72;
  }
LABEL_73:
  v39 = 0x7FFFFFFF;
LABEL_74:
  if (v6 > 3)
  {
    v40 = 3;
LABEL_78:
    v42 = 8;
    goto LABEL_79;
  }
  v41 = ((1 << v7) + 1) >> v7;
  if (v41 > 0xFFFD)
    goto LABEL_82;
  v40 = v41 + 2;
  if (v41 <= 0xFD)
    goto LABEL_78;
  v42 = 16;
LABEL_79:
  v27 = (1 << v42) - v40;
  if ((v27 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_86;
    goto LABEL_83;
  }
LABEL_82:
  v27 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_86:
    v44 = 1;
    goto LABEL_87;
  }
LABEL_83:
  v43 = ((1 << v7) + 1) >> v7;
  v44 = 2;
  if (v43 > 0xFFFD)
    v44 = 4;
  if (v43 <= 0xFD)
    goto LABEL_86;
LABEL_87:
  if (!v39)
    goto LABEL_146;
  v45 = v39 - v27;
  if (v39 <= v27)
    goto LABEL_134;
  v31 = v44 + v6;
  v46 = 8 * (v44 + v6);
  if (v31 > 3)
    goto LABEL_90;
  v48 = ((v45 + ~(-1 << v46)) >> v46) + 1;
  if (HIWORD(v48))
  {
    v47 = *(_DWORD *)((char *)a2 + v31);
    if (!v47)
      goto LABEL_134;
LABEL_99:
    v35 = (v47 - 1) << v46;
    if (v31 > 3)
      v35 = 0;
    if ((_DWORD)v31)
    {
      if (v31 > 3)
        LODWORD(v31) = 4;
      __asm { BR              X13 }
    }
    goto LABEL_105;
  }
  if (v48 > 0xFF)
  {
    v47 = *(unsigned __int16 *)((char *)a2 + v31);
    if (!*(_WORD *)((char *)a2 + v31))
      goto LABEL_134;
    goto LABEL_99;
  }
  if (v48 >= 2)
  {
LABEL_90:
    v47 = *((unsigned __int8 *)a2 + v31);
    if (!*((_BYTE *)a2 + v31))
      goto LABEL_134;
    goto LABEL_99;
  }
LABEL_134:
  if (!v27)
    goto LABEL_146;
  if (v6 <= 3)
  {
    v65 = ((1 << v7) + 1) >> v7;
    if (v65 > 0xFFFD)
    {
      v61 = *(_DWORD *)((char *)a2 + v6);
      v62 = ~v61;
LABEL_143:
      v68 = 0x7FFFFFFF;
      goto LABEL_144;
    }
    v64 = v65 + 2;
    if (v65 > 0xFD)
    {
      v67 = *(unsigned __int16 *)((char *)a2 + v6);
      v61 = v67 | 0xFFFF0000;
      v62 = v67 ^ 0xFFFF;
      v63 = 16;
    }
    else
    {
      v66 = *((unsigned __int8 *)a2 + v6);
      v61 = v66 | 0xFFFFFF00;
      v62 = v66 ^ 0xFF;
      v63 = 8;
    }
  }
  else
  {
    v60 = *((unsigned __int8 *)a2 + v6);
    v61 = v60 | 0xFFFFFF00;
    v62 = v60 ^ 0xFF;
    v63 = 8;
    v64 = 3;
  }
  v68 = (1 << v63) - v64;
  if ((v68 & 0x80000000) != 0)
    goto LABEL_143;
LABEL_144:
  if (v68 > v62 && v61)
    goto LABEL_106;
LABEL_146:
  if (v6 > 3)
    goto LABEL_149;
  v69 = ((1 << v7) + 1) >> v7;
  if (v69 <= 0xFFFD)
  {
    if (v69 > 0xFD)
    {
      v70 = *(unsigned __int16 *)((char *)a2 + v6);
      if (v70 < 2)
        goto LABEL_158;
      goto LABEL_154;
    }
LABEL_149:
    v70 = *((unsigned __int8 *)a2 + v6);
    if (v70 < 2)
      goto LABEL_158;
LABEL_154:
    if (v6 <= 3)
      v71 = v6;
    else
      v71 = 4;
    __asm { BR              X13 }
  }
  v70 = *(_DWORD *)((char *)a2 + v6);
  if (v70 >= 2)
    goto LABEL_154;
LABEL_158:
  if (v70 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v75 = ((1 << v7) + 1) >> v7;
      if (v75 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v6) = 1;
        goto LABEL_181;
      }
      if (v75 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v6) = 1;
        goto LABEL_174;
      }
    }
    *((_BYTE *)a1 + v6) = 1;
    if (v6 <= 3)
      goto LABEL_161;
    goto LABEL_166;
  }
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_160;
  v75 = ((1 << v7) + 1) >> v7;
  if (v75 > 0xFFFD)
  {
    *(_DWORD *)((char *)a1 + v6) = 0;
    goto LABEL_181;
  }
  if (v75 <= 0xFD)
  {
LABEL_160:
    *((_BYTE *)a1 + v6) = 0;
    if (v6 <= 3)
    {
LABEL_161:
      v72 = ((1 << v7) + 1) >> v7;
      if (v72 > 0xFFFD)
        goto LABEL_181;
      v73 = v72 + 2;
      if (v72 > 0xFD)
        goto LABEL_175;
LABEL_167:
      v74 = 8;
      goto LABEL_176;
    }
LABEL_166:
    v73 = 3;
    goto LABEL_167;
  }
  *(_WORD *)((char *)a1 + v6) = 0;
LABEL_174:
  v73 = v75 + 2;
LABEL_175:
  v74 = 16;
LABEL_176:
  v76 = (1 << v74) - v73;
  if ((v76 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_185;
    goto LABEL_182;
  }
LABEL_181:
  v76 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_185:
    v78 = 1;
    goto LABEL_186;
  }
LABEL_182:
  v77 = ((1 << v7) + 1) >> v7;
  v78 = 2;
  if (v77 > 0xFFFD)
    v78 = 4;
  if (v77 <= 0xFD)
    goto LABEL_185;
LABEL_186:
  if (v76 <= 1)
  {
    v79 = v78 + v6;
    if (v79 <= 3)
    {
      v80 = (~(-1 << (8 * v79)) - v76 + 2) >> (8 * v79);
      if (v80 > 0xFFFE)
      {
        *(_DWORD *)((char *)a1 + v79) = 0;
        return a1;
      }
      if (v80 > 0xFE)
      {
        *(_WORD *)((char *)a1 + v79) = 0;
        return a1;
      }
      if (!v80)
        return a1;
    }
    *((_BYTE *)a1 + v79) = 0;
  }
  return a1;
}

uint64_t sub_1AC6F5FA8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  result = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(result - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = 8 * v4;
  if (v4 > 3)
  {
    v6 = 3;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v9 = ((1 << v5) + 1) >> v5;
  if (v9 > 0xFFFD)
    goto LABEL_10;
  v6 = v9 + 2;
  if (v9 <= 0xFD)
    goto LABEL_3;
  v7 = 16;
LABEL_4:
  v8 = (1 << v7) - v6;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_14;
LABEL_11:
    v10 = ((1 << v5) + 1) >> v5;
    v11 = 2;
    if (v10 > 0xFFFD)
      v11 = 4;
    if (v10 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v8 = 0x7FFFFFFF;
  if (v4 <= 3)
    goto LABEL_11;
LABEL_14:
  v11 = 1;
LABEL_15:
  if (v8 > 1)
    goto LABEL_32;
  v12 = v11 + v4;
  v13 = 8 * v12;
  if (v12 > 3)
    goto LABEL_17;
  v15 = (~(-1 << v13) - v8 + 2) >> v13;
  if (v15 > 0xFFFE)
  {
    v14 = *(_DWORD *)(a1 + v12);
    if (!v14)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v15 > 0xFE)
  {
    v14 = *(unsigned __int16 *)(a1 + v12);
    if (!*(_WORD *)(a1 + v12))
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v15)
  {
LABEL_17:
    v14 = *(unsigned __int8 *)(a1 + v12);
    if (!*(_BYTE *)(a1 + v12))
      goto LABEL_31;
LABEL_24:
    v16 = (v14 - 1) << v13;
    if (v12 > 3)
      v16 = 0;
    if ((_DWORD)v12)
    {
      if (v12 > 3)
        LODWORD(v12) = 4;
      __asm { BR              X15 }
    }
LABEL_70:
    if (v8 + (v12 | v16) != -1)
      return result;
    goto LABEL_86;
  }
LABEL_31:
  if (!v8)
    goto LABEL_86;
LABEL_32:
  if (v4 > 3)
  {
    v17 = 3;
    goto LABEL_36;
  }
  v18 = ((1 << v5) + 1) >> v5;
  if (v18 <= 0xFFFD)
  {
    v17 = v18 + 2;
    if (v18 > 0xFD)
    {
      v19 = 16;
LABEL_37:
      v20 = (1 << v19) - v17;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_36:
    v19 = 8;
    goto LABEL_37;
  }
LABEL_38:
  v20 = 0x7FFFFFFF;
LABEL_39:
  if (v4 > 3)
  {
    v21 = 3;
LABEL_43:
    v23 = 8;
    goto LABEL_44;
  }
  v22 = ((1 << v5) + 1) >> v5;
  if (v22 > 0xFFFD)
    goto LABEL_47;
  v21 = v22 + 2;
  if (v22 <= 0xFD)
    goto LABEL_43;
  v23 = 16;
LABEL_44:
  v8 = (1 << v23) - v21;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_47:
  v8 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_51:
    v25 = 1;
    goto LABEL_52;
  }
LABEL_48:
  v24 = ((1 << v5) + 1) >> v5;
  v25 = 2;
  if (v24 > 0xFFFD)
    v25 = 4;
  if (v24 <= 0xFD)
    goto LABEL_51;
LABEL_52:
  if (!v20)
    goto LABEL_86;
  v26 = v20 - v8;
  if (v20 <= v8)
    goto LABEL_73;
  v12 = v25 + v4;
  v27 = 8 * (v25 + v4);
  if (v12 > 3)
    goto LABEL_55;
  v29 = ((v26 + ~(-1 << v27)) >> v27) + 1;
  if (HIWORD(v29))
  {
    v28 = *(_DWORD *)(a1 + v12);
    if (!v28)
      goto LABEL_73;
LABEL_64:
    v16 = (v28 - 1) << v27;
    if (v12 > 3)
      v16 = 0;
    if ((_DWORD)v12)
    {
      if (v12 > 3)
        LODWORD(v12) = 4;
      __asm { BR              X15 }
    }
    goto LABEL_70;
  }
  if (v29 > 0xFF)
  {
    v28 = *(unsigned __int16 *)(a1 + v12);
    if (!*(_WORD *)(a1 + v12))
      goto LABEL_73;
    goto LABEL_64;
  }
  if (v29 >= 2)
  {
LABEL_55:
    v28 = *(unsigned __int8 *)(a1 + v12);
    if (!*(_BYTE *)(a1 + v12))
      goto LABEL_73;
    goto LABEL_64;
  }
LABEL_73:
  if (!v8)
    goto LABEL_86;
  if (v4 > 3)
  {
    v30 = *(unsigned __int8 *)(a1 + v4);
    v31 = v30 | 0xFFFFFF00;
    v32 = v30 ^ 0xFF;
    v33 = 8;
    v34 = 3;
    goto LABEL_81;
  }
  v35 = ((1 << v5) + 1) >> v5;
  if (v35 <= 0xFFFD)
  {
    v34 = v35 + 2;
    if (v35 > 0xFD)
    {
      v37 = *(unsigned __int16 *)(a1 + v4);
      v31 = v37 | 0xFFFF0000;
      v32 = v37 ^ 0xFFFF;
      v33 = 16;
    }
    else
    {
      v36 = *(unsigned __int8 *)(a1 + v4);
      v31 = v36 | 0xFFFFFF00;
      v32 = v36 ^ 0xFF;
      v33 = 8;
    }
LABEL_81:
    v38 = (1 << v33) - v34;
    if ((v38 & 0x80000000) == 0)
    {
      if (v38 <= v32)
        goto LABEL_86;
LABEL_85:
      if (v31)
        return result;
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  v31 = *(_DWORD *)(a1 + v4);
  v32 = ~v31;
LABEL_84:
  if (v32 < 0x7FFFFFFF)
    goto LABEL_85;
LABEL_86:
  if (v4 > 3)
    goto LABEL_89;
  v39 = ((1 << v5) + 1) >> v5;
  if (v39 > 0xFFFD)
  {
    if (*(_DWORD *)(a1 + v4) < 2u)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, result);
    goto LABEL_94;
  }
  if (v39 <= 0xFD)
  {
LABEL_89:
    if (*(unsigned __int8 *)(a1 + v4) < 2u)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, result);
LABEL_94:
    if (v4 <= 3)
      v40 = v4;
    else
      v40 = 4;
    __asm { BR              X15 }
  }
  if (*(unsigned __int16 *)(a1 + v4) >= 2u)
    goto LABEL_94;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, result);
}

char *sub_1AC6F64D4(char *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  size_t v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL8 v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
  {
    v8 = 3;
LABEL_3:
    v9 = 8;
    goto LABEL_4;
  }
  v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFD)
    goto LABEL_10;
  v8 = v11 + 2;
  if (v11 <= 0xFD)
    goto LABEL_3;
  v9 = 16;
LABEL_4:
  v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_14;
LABEL_11:
    v12 = ((1 << v7) + 1) >> v7;
    v13 = 2;
    if (v12 > 0xFFFD)
      v13 = 4;
    if (v12 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v10 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_11;
LABEL_14:
  v13 = 1;
LABEL_15:
  if (v10 > 1)
    goto LABEL_32;
  v14 = v13 + v6;
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_17;
  v17 = (~(-1 << v15) - v10 + 2) >> v15;
  if (v17 > 0xFFFE)
  {
    v16 = *(_DWORD *)&a2[v14];
    if (!v16)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v17 > 0xFE)
  {
    v16 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14])
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v17)
  {
LABEL_17:
    v16 = a2[v14];
    if (!a2[v14])
      goto LABEL_31;
LABEL_24:
    v18 = (v16 - 1) << v15;
    if (v14 > 3)
      v18 = 0;
    if ((_DWORD)v14)
    {
      if (v14 > 3)
        LODWORD(v14) = 4;
      __asm { BR              X13 }
    }
LABEL_70:
    if (v10 + (v14 | v18) == -1)
      goto LABEL_112;
    goto LABEL_71;
  }
LABEL_31:
  if (!v10)
    goto LABEL_112;
LABEL_32:
  if (v6 > 3)
  {
    v19 = 3;
    goto LABEL_36;
  }
  v20 = ((1 << v7) + 1) >> v7;
  if (v20 <= 0xFFFD)
  {
    v19 = v20 + 2;
    if (v20 > 0xFD)
    {
      v21 = 16;
LABEL_37:
      v22 = (1 << v21) - v19;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_36:
    v21 = 8;
    goto LABEL_37;
  }
LABEL_38:
  v22 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    v23 = 3;
LABEL_43:
    v25 = 8;
    goto LABEL_44;
  }
  v24 = ((1 << v7) + 1) >> v7;
  if (v24 > 0xFFFD)
    goto LABEL_47;
  v23 = v24 + 2;
  if (v24 <= 0xFD)
    goto LABEL_43;
  v25 = 16;
LABEL_44:
  v10 = (1 << v25) - v23;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_47:
  v10 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    v27 = 1;
    goto LABEL_52;
  }
LABEL_48:
  v26 = ((1 << v7) + 1) >> v7;
  v27 = 2;
  if (v26 > 0xFFFD)
    v27 = 4;
  if (v26 <= 0xFD)
    goto LABEL_51;
LABEL_52:
  if (!v22)
    goto LABEL_112;
  v28 = v22 - v10;
  if (v22 <= v10)
    goto LABEL_99;
  v14 = v27 + v6;
  v29 = 8 * (v27 + v6);
  if (v14 > 3)
    goto LABEL_55;
  v31 = ((v28 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    v30 = *(_DWORD *)&a2[v14];
    if (!v30)
      goto LABEL_99;
LABEL_64:
    v18 = (v30 - 1) << v29;
    if (v14 > 3)
      v18 = 0;
    if ((_DWORD)v14)
    {
      if (v14 > 3)
        LODWORD(v14) = 4;
      __asm { BR              X13 }
    }
    goto LABEL_70;
  }
  if (v31 > 0xFF)
  {
    v30 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14])
      goto LABEL_99;
    goto LABEL_64;
  }
  if (v31 >= 2)
  {
LABEL_55:
    v30 = a2[v14];
    if (!a2[v14])
      goto LABEL_99;
    goto LABEL_64;
  }
LABEL_99:
  if (!v10)
    goto LABEL_112;
  if (v6 <= 3)
  {
    v50 = ((1 << v7) + 1) >> v7;
    if (v50 > 0xFFFD)
    {
      v46 = *(_DWORD *)&a2[v6];
      v47 = ~v46;
      goto LABEL_110;
    }
    v49 = v50 + 2;
    if (v50 > 0xFD)
    {
      v52 = *(unsigned __int16 *)&a2[v6];
      v46 = v52 | 0xFFFF0000;
      v47 = v52 ^ 0xFFFF;
      v48 = 16;
    }
    else
    {
      v51 = a2[v6];
      v46 = v51 | 0xFFFFFF00;
      v47 = v51 ^ 0xFF;
      v48 = 8;
    }
  }
  else
  {
    v45 = a2[v6];
    v46 = v45 | 0xFFFFFF00;
    v47 = v45 ^ 0xFF;
    v48 = 8;
    v49 = 3;
  }
  v53 = (1 << v48) - v49;
  if ((v53 & 0x80000000) != 0)
  {
LABEL_110:
    if (v47 >= 0x7FFFFFFF)
      goto LABEL_112;
LABEL_111:
    if (!v46)
      goto LABEL_112;
LABEL_71:
    if (v6 <= 3)
    {
      v33 = ((1 << v7) + 1) >> v7;
      if (v33 > 0xFFFD)
      {
LABEL_77:
        v35 = 0x7FFFFFFF;
LABEL_78:
        v36 = 1;
        if (v6 > 3)
        {
          v37 = 1;
LABEL_88:
          v40 = v6 + v36;
          if (v35 <= 1)
          {
            if ((v37 + v6) <= 3)
            {
              v42 = (~(-1 << (8 * (v37 + v6))) - v35 + 2) >> (8 * (v37 + v6));
              if (v42 > 0xFFFE)
              {
                v41 = 4;
              }
              else
              {
                v43 = v42 != 0;
                v44 = v42 >= 0xFF;
                v41 = 2;
                if (!v44)
                  v41 = v43;
              }
            }
            else
            {
              v41 = 1;
            }
            v40 += v41;
          }
          memcpy(a1, a2, v40);
          return a1;
        }
        v38 = ((1 << v7) + 1) >> v7;
        if (v38 > 0xFFFD)
        {
          v36 = 4;
        }
        else
        {
          if (v38 < 0xFE)
          {
            v36 = 1;
            v37 = 1;
            goto LABEL_88;
          }
          v36 = 2;
        }
        v39 = v38 > 0xFFFD;
        v37 = 2;
        if (v39)
          v37 = 4;
        goto LABEL_88;
      }
      v32 = v33 + 2;
      if (v33 > 0xFD)
      {
        v34 = 16;
LABEL_76:
        v35 = (1 << v34) - v32;
        if ((v35 & 0x80000000) == 0)
          goto LABEL_78;
        goto LABEL_77;
      }
    }
    else
    {
      v32 = 3;
    }
    v34 = 8;
    goto LABEL_76;
  }
  if (v53 > v47)
    goto LABEL_111;
LABEL_112:
  if (v6 > 3)
    goto LABEL_115;
  v54 = ((1 << v7) + 1) >> v7;
  if (v54 <= 0xFFFD)
  {
    if (v54 > 0xFD)
    {
      v55 = *(unsigned __int16 *)&a2[v6];
      if (v55 < 2)
        goto LABEL_124;
      goto LABEL_120;
    }
LABEL_115:
    v55 = a2[v6];
    if (v55 < 2)
      goto LABEL_124;
LABEL_120:
    if (v6 <= 3)
      v56 = v6;
    else
      v56 = 4;
    __asm { BR              X13 }
  }
  v55 = *(_DWORD *)&a2[v6];
  if (v55 >= 2)
    goto LABEL_120;
LABEL_124:
  if (v55 == 1)
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v60 = ((1 << v7) + 1) >> v7;
      if (v60 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        goto LABEL_147;
      }
      if (v60 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        goto LABEL_140;
      }
    }
    a1[v6] = 1;
    if (v6 <= 3)
      goto LABEL_127;
    goto LABEL_132;
  }
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_126;
  v60 = ((1 << v7) + 1) >> v7;
  if (v60 > 0xFFFD)
  {
    *(_DWORD *)&a1[v6] = 0;
    goto LABEL_147;
  }
  if (v60 <= 0xFD)
  {
LABEL_126:
    a1[v6] = 0;
    if (v6 <= 3)
    {
LABEL_127:
      v57 = ((1 << v7) + 1) >> v7;
      if (v57 > 0xFFFD)
        goto LABEL_147;
      v58 = v57 + 2;
      if (v57 > 0xFD)
        goto LABEL_141;
LABEL_133:
      v59 = 8;
      goto LABEL_142;
    }
LABEL_132:
    v58 = 3;
    goto LABEL_133;
  }
  *(_WORD *)&a1[v6] = 0;
LABEL_140:
  v58 = v60 + 2;
LABEL_141:
  v59 = 16;
LABEL_142:
  v61 = (1 << v59) - v58;
  if ((v61 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_151;
    goto LABEL_148;
  }
LABEL_147:
  v61 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_151:
    v63 = 1;
    goto LABEL_152;
  }
LABEL_148:
  v62 = ((1 << v7) + 1) >> v7;
  v63 = 2;
  if (v62 > 0xFFFD)
    v63 = 4;
  if (v62 <= 0xFD)
    goto LABEL_151;
LABEL_152:
  if (v61 <= 1)
  {
    v64 = v63 + v6;
    if (v64 <= 3)
    {
      v65 = (~(-1 << (8 * v64)) - v61 + 2) >> (8 * v64);
      if (v65 > 0xFFFE)
      {
        *(_DWORD *)&a1[v64] = 0;
        return a1;
      }
      if (v65 > 0xFE)
      {
        *(_WORD *)&a1[v64] = 0;
        return a1;
      }
      if (!v65)
        return a1;
    }
    a1[v64] = 0;
  }
  return a1;
}

char *sub_1AC6F6D14(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  char v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  char v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  BOOL v120;
  size_t v121;
  uint64_t v122;
  unsigned int v123;
  _BOOL8 v124;
  BOOL v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
  {
    v7 = 3;
LABEL_3:
    v8 = 8;
    goto LABEL_4;
  }
  v10 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v10 > 0xFFFD)
    goto LABEL_10;
  v7 = v10 + 2;
  if (v10 <= 0xFD)
    goto LABEL_3;
  v8 = 16;
LABEL_4:
  v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_14;
LABEL_11:
    v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v12 = 2;
    if (v11 > 0xFFFD)
      v12 = 4;
    if (v11 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v9 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_11;
LABEL_14:
  v12 = 1;
LABEL_15:
  if (v9 > 1)
    goto LABEL_32;
  v13 = v12 + v6;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_17;
  v16 = (~(-1 << v14) - v9 + 2) >> v14;
  if (v16 > 0xFFFE)
  {
    v15 = *(_DWORD *)&a1[v13];
    if (!v15)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v16 > 0xFE)
  {
    v15 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13])
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_17:
    v15 = a1[v13];
    if (!a1[v13])
      goto LABEL_31;
LABEL_24:
    v17 = (v15 - 1) << v14;
    if (v13 > 3)
      v17 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X12 }
    }
LABEL_70:
    if (v9 + (v13 | v17) == -1)
      goto LABEL_113;
    goto LABEL_71;
  }
LABEL_31:
  if (!v9)
    goto LABEL_113;
LABEL_32:
  if (v6 > 3)
  {
    v18 = 3;
    goto LABEL_36;
  }
  v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v19 <= 0xFFFD)
  {
    v18 = v19 + 2;
    if (v19 > 0xFD)
    {
      v20 = 16;
LABEL_37:
      v21 = (1 << v20) - v18;
      if ((v21 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_36:
    v20 = 8;
    goto LABEL_37;
  }
LABEL_38:
  v21 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    v22 = 3;
LABEL_43:
    v24 = 8;
    goto LABEL_44;
  }
  v23 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v23 > 0xFFFD)
    goto LABEL_47;
  v22 = v23 + 2;
  if (v23 <= 0xFD)
    goto LABEL_43;
  v24 = 16;
LABEL_44:
  v9 = (1 << v24) - v22;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_47:
  v9 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    v26 = 1;
    goto LABEL_52;
  }
LABEL_48:
  v25 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v26 = 2;
  if (v25 > 0xFFFD)
    v26 = 4;
  if (v25 <= 0xFD)
    goto LABEL_51;
LABEL_52:
  if (!v21)
    goto LABEL_113;
  v27 = v21 - v9;
  if (v21 <= v9)
    goto LABEL_101;
  v13 = v26 + v6;
  v28 = 8 * (v26 + v6);
  if (v13 > 3)
    goto LABEL_55;
  v30 = ((v27 + ~(-1 << v28)) >> v28) + 1;
  if (HIWORD(v30))
  {
    v29 = *(_DWORD *)&a1[v13];
    if (!v29)
      goto LABEL_101;
LABEL_64:
    v17 = (v29 - 1) << v28;
    if (v13 > 3)
      v17 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_70;
  }
  if (v30 > 0xFF)
  {
    v29 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13])
      goto LABEL_101;
    goto LABEL_64;
  }
  if (v30 >= 2)
  {
LABEL_55:
    v29 = a1[v13];
    if (!a1[v13])
      goto LABEL_101;
    goto LABEL_64;
  }
LABEL_101:
  if (!v9)
    goto LABEL_113;
  if (v6 <= 3)
  {
    v48 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v48 > 0xFFFD)
    {
      v43 = *(_DWORD *)&a1[v6];
      v44 = ~v43;
LABEL_111:
      if (v44 >= 0x7FFFFFFF)
        goto LABEL_113;
LABEL_112:
      if (!v43)
        goto LABEL_113;
LABEL_71:
      if (v6 <= 3)
      {
        v34 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v34 > 0xFFFD)
          goto LABEL_80;
        v31 = v34 + 2;
        if (v34 > 0xFD)
        {
          v32 = 16;
LABEL_74:
          v33 = (1 << v32) - v31;
          if ((v33 & 0x80000000) == 0)
          {
            if (v6 > 3)
              goto LABEL_84;
LABEL_81:
            v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
            v36 = 2;
            if (v35 > 0xFFFD)
              v36 = 4;
            if (v35 > 0xFD)
            {
LABEL_85:
              if (v33 > 1)
                goto LABEL_199;
              v37 = v36 + v6;
              v38 = 8 * v37;
              if (v37 <= 3)
              {
                v40 = (~(-1 << v38) - v33 + 2) >> v38;
                if (v40 > 0xFFFE)
                {
                  v39 = *(_DWORD *)&a2[v37];
                  if (!v39)
                    goto LABEL_198;
                  goto LABEL_94;
                }
                if (v40 > 0xFE)
                {
                  v39 = *(unsigned __int16 *)&a2[v37];
                  if (!*(_WORD *)&a2[v37])
                    goto LABEL_198;
                  goto LABEL_94;
                }
                if (!v40)
                {
LABEL_198:
                  if (!v33)
                    goto LABEL_331;
LABEL_199:
                  if (v6 <= 3)
                  {
                    v78 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                    if (v78 > 0xFFFD)
                    {
LABEL_205:
                      v80 = 0x7FFFFFFF;
LABEL_206:
                      if (v6 <= 3)
                      {
                        v82 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                        if (v82 > 0xFFFD)
                          goto LABEL_214;
                        v81 = v82 + 2;
                        if (v82 > 0xFD)
                        {
                          v83 = 16;
LABEL_211:
                          v33 = (1 << v83) - v81;
                          if ((v33 & 0x80000000) == 0)
                          {
                            if (v6 > 3)
                              goto LABEL_218;
LABEL_215:
                            v84 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                            v85 = 2;
                            if (v84 > 0xFFFD)
                              v85 = 4;
                            if (v84 > 0xFD)
                            {
LABEL_219:
                              if (!v80)
                                goto LABEL_331;
                              v86 = v80 - v33;
                              if (v80 <= v33)
                                goto LABEL_290;
                              v37 = v85 + v6;
                              v87 = 8 * (v85 + v6);
                              if (v37 > 3)
                                goto LABEL_222;
                              v89 = ((v86 + ~(-1 << v87)) >> v87) + 1;
                              if (HIWORD(v89))
                              {
                                v88 = *(_DWORD *)&a2[v37];
                              }
                              else
                              {
                                if (v89 <= 0xFF)
                                {
                                  if (v89 < 2)
                                    goto LABEL_290;
LABEL_222:
                                  v88 = a2[v37];
                                  goto LABEL_283;
                                }
                                v88 = *(unsigned __int16 *)&a2[v37];
                              }
LABEL_283:
                              if (v88)
                              {
                                v41 = (v88 - 1) << v87;
                                if (v37 > 3)
                                  v41 = 0;
                                if ((_DWORD)v37)
                                {
                                  if (v37 > 3)
                                    LODWORD(v37) = 4;
                                  __asm { BR              X12 }
                                }
                                goto LABEL_296;
                              }
LABEL_290:
                              if (!v33)
                                goto LABEL_331;
                              if (v6 <= 3)
                              {
                                v111 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                if (v111 > 0xFFFD)
                                {
                                  v107 = *(_DWORD *)&a2[v6];
                                  v108 = ~v107;
                                  goto LABEL_328;
                                }
                                v110 = v111 + 2;
                                if (v111 > 0xFD)
                                {
                                  v126 = *(unsigned __int16 *)&a2[v6];
                                  v107 = v126 | 0xFFFF0000;
                                  v108 = v126 ^ 0xFFFF;
                                  v109 = 16;
                                }
                                else
                                {
                                  v112 = a2[v6];
                                  v107 = v112 | 0xFFFFFF00;
                                  v108 = v112 ^ 0xFF;
                                  v109 = 8;
                                }
                              }
                              else
                              {
                                v106 = a2[v6];
                                v107 = v106 | 0xFFFFFF00;
                                v108 = v106 ^ 0xFF;
                                v109 = 8;
                                v110 = 3;
                              }
                              v127 = (1 << v109) - v110;
                              if ((v127 & 0x80000000) == 0)
                              {
LABEL_329:
                                if (v127 > v108 && v107)
                                {
LABEL_297:
                                  if (v6 <= 3)
                                  {
                                    v116 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                    if (v116 > 0xFFFD)
                                    {
LABEL_305:
                                      v115 = 0x7FFFFFFF;
LABEL_306:
                                      v117 = 1;
                                      if (v6 > 3)
                                      {
                                        v118 = 1;
LABEL_315:
                                        v121 = v6 + v117;
                                        if (v115 <= 1)
                                        {
                                          if ((v118 + v6) <= 3)
                                          {
                                            v123 = (~(-1 << (8 * (v118 + v6))) - v115 + 2) >> (8 * (v118 + v6));
                                            if (v123 > 0xFFFE)
                                            {
                                              v122 = 4;
                                            }
                                            else
                                            {
                                              v124 = v123 != 0;
                                              v125 = v123 >= 0xFF;
                                              v122 = 2;
                                              if (!v125)
                                                v122 = v124;
                                            }
                                          }
                                          else
                                          {
                                            v122 = 1;
                                          }
                                          v121 += v122;
                                        }
                                        memcpy(a1, a2, v121);
                                        return a1;
                                      }
                                      v119 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                      if (v119 > 0xFFFD)
                                      {
                                        v117 = 4;
                                      }
                                      else
                                      {
                                        if (v119 < 0xFE)
                                        {
                                          v117 = 1;
                                          v118 = 1;
                                          goto LABEL_315;
                                        }
                                        v117 = 2;
                                      }
                                      v120 = v119 > 0xFFFD;
                                      v118 = 2;
                                      if (v120)
                                        v118 = 4;
                                      goto LABEL_315;
                                    }
                                    v113 = v116 + 2;
                                    if (v116 > 0xFD)
                                    {
                                      v114 = 16;
LABEL_300:
                                      v115 = (1 << v114) - v113;
                                      if ((v115 & 0x80000000) == 0)
                                        goto LABEL_306;
                                      goto LABEL_305;
                                    }
                                  }
                                  else
                                  {
                                    v113 = 3;
                                  }
                                  v114 = 8;
                                  goto LABEL_300;
                                }
LABEL_331:
                                if (v6 <= 3)
                                {
                                  v128 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                  if (v128 > 0xFFFD)
                                  {
                                    v129 = *(_DWORD *)&a2[v6];
                                    if (v129 < 2)
                                    {
LABEL_343:
                                      if (v129 == 1)
                                      {
                                        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                                        if (v6 <= 3)
                                        {
                                          v133 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          if (v133 > 0xFFFD)
                                          {
                                            *(_DWORD *)&a1[v6] = 1;
                                            goto LABEL_366;
                                          }
                                          if (v133 > 0xFD)
                                          {
                                            *(_WORD *)&a1[v6] = 1;
                                            goto LABEL_359;
                                          }
                                        }
                                        a1[v6] = 1;
                                        if (v6 > 3)
                                          goto LABEL_346;
                                      }
                                      else
                                      {
                                        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
                                        if (v6 <= 3)
                                        {
                                          v133 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          if (v133 > 0xFFFD)
                                          {
                                            *(_DWORD *)&a1[v6] = 0;
                                            goto LABEL_366;
                                          }
                                          if (v133 > 0xFD)
                                          {
                                            *(_WORD *)&a1[v6] = 0;
LABEL_359:
                                            v131 = v133 + 2;
LABEL_360:
                                            v132 = 16;
LABEL_361:
                                            v135 = (1 << v132) - v131;
                                            if ((v135 & 0x80000000) == 0)
                                            {
                                              if (v6 > 3)
                                                goto LABEL_370;
LABEL_367:
                                              v136 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                              v137 = 2;
                                              if (v136 > 0xFFFD)
                                                v137 = 4;
                                              if (v136 > 0xFD)
                                              {
LABEL_371:
                                                if (v135 <= 1)
                                                {
                                                  v138 = v137 + v6;
                                                  if (v138 <= 3)
                                                  {
                                                    v139 = (~(-1 << (8 * v138)) - v135 + 2) >> (8 * v138);
                                                    if (v139 > 0xFFFE)
                                                    {
                                                      *(_DWORD *)&a1[v138] = 0;
                                                      return a1;
                                                    }
                                                    if (v139 > 0xFE)
                                                    {
                                                      *(_WORD *)&a1[v138] = 0;
                                                      return a1;
                                                    }
                                                    if (!v139)
                                                      return a1;
                                                  }
                                                  a1[v138] = 0;
                                                }
                                                return a1;
                                              }
LABEL_370:
                                              v137 = 1;
                                              goto LABEL_371;
                                            }
LABEL_366:
                                            v135 = 0x7FFFFFFF;
                                            if (v6 > 3)
                                              goto LABEL_370;
                                            goto LABEL_367;
                                          }
                                        }
                                        a1[v6] = 0;
                                        if (v6 > 3)
                                        {
LABEL_346:
                                          v131 = 3;
                                          goto LABEL_347;
                                        }
                                      }
                                      v134 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                      if (v134 > 0xFFFD)
                                        goto LABEL_366;
                                      v131 = v134 + 2;
                                      if (v134 > 0xFD)
                                        goto LABEL_360;
LABEL_347:
                                      v132 = 8;
                                      goto LABEL_361;
                                    }
LABEL_339:
                                    if (v6 <= 3)
                                      v130 = v6;
                                    else
                                      v130 = 4;
                                    __asm { BR              X12 }
                                  }
                                  if (v128 > 0xFD)
                                  {
                                    v129 = *(unsigned __int16 *)&a2[v6];
                                    if (v129 < 2)
                                      goto LABEL_343;
                                    goto LABEL_339;
                                  }
                                }
                                v129 = a2[v6];
                                if (v129 < 2)
                                  goto LABEL_343;
                                goto LABEL_339;
                              }
LABEL_328:
                              v127 = 0x7FFFFFFF;
                              goto LABEL_329;
                            }
LABEL_218:
                            v85 = 1;
                            goto LABEL_219;
                          }
LABEL_214:
                          v33 = 0x7FFFFFFF;
                          if (v6 > 3)
                            goto LABEL_218;
                          goto LABEL_215;
                        }
                      }
                      else
                      {
                        v81 = 3;
                      }
                      v83 = 8;
                      goto LABEL_211;
                    }
                    v77 = v78 + 2;
                    if (v78 > 0xFD)
                    {
                      v79 = 16;
LABEL_204:
                      v80 = (1 << v79) - v77;
                      if ((v80 & 0x80000000) == 0)
                        goto LABEL_206;
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    v77 = 3;
                  }
                  v79 = 8;
                  goto LABEL_204;
                }
              }
              v39 = a2[v37];
              if (!a2[v37])
                goto LABEL_198;
LABEL_94:
              v41 = (v39 - 1) << v38;
              if (v37 > 3)
                v41 = 0;
              if ((_DWORD)v37)
              {
                if (v37 > 3)
                  LODWORD(v37) = 4;
                __asm { BR              X12 }
              }
LABEL_296:
              if (v33 + (v37 | v41) != -1)
                goto LABEL_297;
              goto LABEL_331;
            }
LABEL_84:
            v36 = 1;
            goto LABEL_85;
          }
LABEL_80:
          v33 = 0x7FFFFFFF;
          if (v6 > 3)
            goto LABEL_84;
          goto LABEL_81;
        }
      }
      else
      {
        v31 = 3;
      }
      v32 = 8;
      goto LABEL_74;
    }
    v46 = v48 + 2;
    if (v48 > 0xFD)
    {
      v76 = *(unsigned __int16 *)&a1[v6];
      v43 = v76 | 0xFFFF0000;
      v44 = v76 ^ 0xFFFF;
      v45 = 16;
    }
    else
    {
      v49 = a1[v6];
      v43 = v49 | 0xFFFFFF00;
      v44 = v49 ^ 0xFF;
      v45 = 8;
    }
  }
  else
  {
    v42 = a1[v6];
    v43 = v42 | 0xFFFFFF00;
    v44 = v42 ^ 0xFF;
    v45 = 8;
    v46 = 3;
  }
  v47 = (1 << v45) - v46;
  if ((v47 & 0x80000000) != 0)
    goto LABEL_111;
  if (v47 > v44)
    goto LABEL_112;
LABEL_113:
  if (v6 > 3)
  {
    v50 = 3;
LABEL_117:
    v52 = 8;
    goto LABEL_118;
  }
  v51 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v51 > 0xFFFD)
    goto LABEL_121;
  v50 = v51 + 2;
  if (v51 <= 0xFD)
    goto LABEL_117;
  v52 = 16;
LABEL_118:
  v53 = (1 << v52) - v50;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_125;
LABEL_122:
    v54 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v55 = 2;
    if (v54 > 0xFFFD)
      v55 = 4;
    if (v54 > 0xFD)
      goto LABEL_126;
    goto LABEL_125;
  }
LABEL_121:
  v53 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_122;
LABEL_125:
  v55 = 1;
LABEL_126:
  if (v53 > 1)
    goto LABEL_144;
  v56 = v55 + v6;
  v57 = 8 * v56;
  if (v56 > 3)
    goto LABEL_128;
  v59 = (~(-1 << v57) - v53 + 2) >> v57;
  if (v59 > 0xFFFE)
  {
    v58 = *(_DWORD *)&a2[v56];
    if (!v58)
      goto LABEL_143;
    goto LABEL_136;
  }
  if (v59 > 0xFE)
  {
    v58 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56])
      goto LABEL_143;
    goto LABEL_136;
  }
  if (v59)
  {
LABEL_128:
    v58 = a2[v56];
    if (!a2[v56])
      goto LABEL_143;
LABEL_136:
    v60 = (v58 - 1) << v57;
    if (v56 > 3)
      v60 = 0;
    if ((_DWORD)v56)
    {
      if (v56 > 3)
        LODWORD(v56) = 4;
      __asm { BR              X12 }
    }
LABEL_182:
    if (v53 + (v56 | v60) == -1)
      goto LABEL_242;
    if (v6 > 3)
      goto LABEL_186;
LABEL_183:
    v74 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v74 > 0xFFFD)
    {
      if (*(_DWORD *)&a1[v6] < 2u)
        goto LABEL_196;
      goto LABEL_191;
    }
    if (v74 > 0xFD)
    {
      if (*(unsigned __int16 *)&a1[v6] < 2u)
      {
LABEL_196:
        (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        goto LABEL_297;
      }
    }
    else
    {
LABEL_186:
      if (a1[v6] < 2u)
        goto LABEL_196;
    }
LABEL_191:
    if (v6 <= 3)
      v75 = v6;
    else
      v75 = 4;
    __asm { BR              X12 }
  }
LABEL_143:
  if (!v53)
    goto LABEL_242;
LABEL_144:
  if (v6 > 3)
  {
    v61 = 3;
    goto LABEL_148;
  }
  v62 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v62 <= 0xFFFD)
  {
    v61 = v62 + 2;
    if (v62 > 0xFD)
    {
      v63 = 16;
LABEL_149:
      v64 = (1 << v63) - v61;
      if ((v64 & 0x80000000) == 0)
        goto LABEL_151;
      goto LABEL_150;
    }
LABEL_148:
    v63 = 8;
    goto LABEL_149;
  }
LABEL_150:
  v64 = 0x7FFFFFFF;
LABEL_151:
  if (v6 > 3)
  {
    v65 = 3;
LABEL_155:
    v67 = 8;
    goto LABEL_156;
  }
  v66 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v66 > 0xFFFD)
    goto LABEL_159;
  v65 = v66 + 2;
  if (v66 <= 0xFD)
    goto LABEL_155;
  v67 = 16;
LABEL_156:
  v53 = (1 << v67) - v65;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_163;
    goto LABEL_160;
  }
LABEL_159:
  v53 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_163:
    v69 = 1;
    goto LABEL_164;
  }
LABEL_160:
  v68 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v69 = 2;
  if (v68 > 0xFFFD)
    v69 = 4;
  if (v68 <= 0xFD)
    goto LABEL_163;
LABEL_164:
  if (!v64)
    goto LABEL_242;
  v70 = v64 - v53;
  if (v64 <= v53)
    goto LABEL_230;
  v56 = v69 + v6;
  v71 = 8 * (v69 + v6);
  if (v56 > 3)
    goto LABEL_167;
  v73 = ((v70 + ~(-1 << v71)) >> v71) + 1;
  if (HIWORD(v73))
  {
    v72 = *(_DWORD *)&a2[v56];
    if (!v72)
      goto LABEL_230;
LABEL_176:
    v60 = (v72 - 1) << v71;
    if (v56 > 3)
      v60 = 0;
    if ((_DWORD)v56)
    {
      if (v56 > 3)
        LODWORD(v56) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_182;
  }
  if (v73 > 0xFF)
  {
    v72 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56])
      goto LABEL_230;
    goto LABEL_176;
  }
  if (v73 >= 2)
  {
LABEL_167:
    v72 = a2[v56];
    if (!a2[v56])
      goto LABEL_230;
    goto LABEL_176;
  }
LABEL_230:
  if (!v53)
    goto LABEL_242;
  if (v6 <= 3)
  {
    v96 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v96 > 0xFFFD)
    {
      v91 = *(_DWORD *)&a2[v6];
      v92 = ~v91;
LABEL_240:
      if (v92 >= 0x7FFFFFFF)
        goto LABEL_242;
LABEL_241:
      if (!v91)
        goto LABEL_242;
      goto LABEL_183;
    }
    v94 = v96 + 2;
    if (v96 > 0xFD)
    {
      v105 = *(unsigned __int16 *)&a2[v6];
      v91 = v105 | 0xFFFF0000;
      v92 = v105 ^ 0xFFFF;
      v93 = 16;
    }
    else
    {
      v97 = a2[v6];
      v91 = v97 | 0xFFFFFF00;
      v92 = v97 ^ 0xFF;
      v93 = 8;
    }
  }
  else
  {
    v90 = a2[v6];
    v91 = v90 | 0xFFFFFF00;
    v92 = v90 ^ 0xFF;
    v93 = 8;
    v94 = 3;
  }
  v95 = (1 << v93) - v94;
  if ((v95 & 0x80000000) != 0)
    goto LABEL_240;
  if (v95 > v92)
    goto LABEL_241;
LABEL_242:
  if (a1 == a2)
    return a1;
  if (v6 > 3)
  {
LABEL_244:
    if (a1[v6] >= 2u)
      goto LABEL_251;
    goto LABEL_255;
  }
  v98 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v98 <= 0xFFFD)
  {
    if (v98 > 0xFD)
    {
      if (*(unsigned __int16 *)&a1[v6] >= 2u)
      {
LABEL_251:
        if (v6 <= 3)
          v99 = v6;
        else
          v99 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_255;
    }
    goto LABEL_244;
  }
  if (*(_DWORD *)&a1[v6] >= 2u)
    goto LABEL_251;
LABEL_255:
  (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_256;
  v101 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v101 > 0xFFFD)
  {
    v100 = *(_DWORD *)&a2[v6];
    if (v100 >= 2)
      goto LABEL_263;
    goto LABEL_267;
  }
  if (v101 <= 0xFD)
  {
LABEL_256:
    v100 = a2[v6];
    if (v100 >= 2)
      goto LABEL_263;
  }
  else
  {
    v100 = *(unsigned __int16 *)&a2[v6];
    if (v100 >= 2)
    {
LABEL_263:
      if (v6 <= 3)
        v102 = v6;
      else
        v102 = 4;
      __asm { BR              X12 }
    }
  }
LABEL_267:
  if (v100 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_274;
    v104 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v104 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v104 <= 0xFD)
LABEL_274:
      a1[v6] = 1;
    else
      *(_WORD *)&a1[v6] = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_269;
    v103 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v103 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 0;
      return a1;
    }
    if (v103 <= 0xFD)
LABEL_269:
      a1[v6] = 0;
    else
      *(_WORD *)&a1[v6] = 0;
  }
  return a1;
}

char *sub_1AC6F8178(char *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  size_t v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL8 v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 8 * v6;
  if (v6 > 3)
  {
    v8 = 3;
LABEL_3:
    v9 = 8;
    goto LABEL_4;
  }
  v11 = ((1 << v7) + 1) >> v7;
  if (v11 > 0xFFFD)
    goto LABEL_10;
  v8 = v11 + 2;
  if (v11 <= 0xFD)
    goto LABEL_3;
  v9 = 16;
LABEL_4:
  v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_14;
LABEL_11:
    v12 = ((1 << v7) + 1) >> v7;
    v13 = 2;
    if (v12 > 0xFFFD)
      v13 = 4;
    if (v12 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v10 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_11;
LABEL_14:
  v13 = 1;
LABEL_15:
  if (v10 > 1)
    goto LABEL_32;
  v14 = v13 + v6;
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_17;
  v17 = (~(-1 << v15) - v10 + 2) >> v15;
  if (v17 > 0xFFFE)
  {
    v16 = *(_DWORD *)&a2[v14];
    if (!v16)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v17 > 0xFE)
  {
    v16 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14])
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v17)
  {
LABEL_17:
    v16 = a2[v14];
    if (!a2[v14])
      goto LABEL_31;
LABEL_24:
    v18 = (v16 - 1) << v15;
    if (v14 > 3)
      v18 = 0;
    if ((_DWORD)v14)
    {
      if (v14 > 3)
        LODWORD(v14) = 4;
      __asm { BR              X13 }
    }
LABEL_70:
    if (v10 + (v14 | v18) == -1)
      goto LABEL_112;
    goto LABEL_71;
  }
LABEL_31:
  if (!v10)
    goto LABEL_112;
LABEL_32:
  if (v6 > 3)
  {
    v19 = 3;
    goto LABEL_36;
  }
  v20 = ((1 << v7) + 1) >> v7;
  if (v20 <= 0xFFFD)
  {
    v19 = v20 + 2;
    if (v20 > 0xFD)
    {
      v21 = 16;
LABEL_37:
      v22 = (1 << v21) - v19;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_36:
    v21 = 8;
    goto LABEL_37;
  }
LABEL_38:
  v22 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    v23 = 3;
LABEL_43:
    v25 = 8;
    goto LABEL_44;
  }
  v24 = ((1 << v7) + 1) >> v7;
  if (v24 > 0xFFFD)
    goto LABEL_47;
  v23 = v24 + 2;
  if (v24 <= 0xFD)
    goto LABEL_43;
  v25 = 16;
LABEL_44:
  v10 = (1 << v25) - v23;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_47:
  v10 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    v27 = 1;
    goto LABEL_52;
  }
LABEL_48:
  v26 = ((1 << v7) + 1) >> v7;
  v27 = 2;
  if (v26 > 0xFFFD)
    v27 = 4;
  if (v26 <= 0xFD)
    goto LABEL_51;
LABEL_52:
  if (!v22)
    goto LABEL_112;
  v28 = v22 - v10;
  if (v22 <= v10)
    goto LABEL_99;
  v14 = v27 + v6;
  v29 = 8 * (v27 + v6);
  if (v14 > 3)
    goto LABEL_55;
  v31 = ((v28 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    v30 = *(_DWORD *)&a2[v14];
    if (!v30)
      goto LABEL_99;
LABEL_64:
    v18 = (v30 - 1) << v29;
    if (v14 > 3)
      v18 = 0;
    if ((_DWORD)v14)
    {
      if (v14 > 3)
        LODWORD(v14) = 4;
      __asm { BR              X13 }
    }
    goto LABEL_70;
  }
  if (v31 > 0xFF)
  {
    v30 = *(unsigned __int16 *)&a2[v14];
    if (!*(_WORD *)&a2[v14])
      goto LABEL_99;
    goto LABEL_64;
  }
  if (v31 >= 2)
  {
LABEL_55:
    v30 = a2[v14];
    if (!a2[v14])
      goto LABEL_99;
    goto LABEL_64;
  }
LABEL_99:
  if (!v10)
    goto LABEL_112;
  if (v6 <= 3)
  {
    v50 = ((1 << v7) + 1) >> v7;
    if (v50 > 0xFFFD)
    {
      v46 = *(_DWORD *)&a2[v6];
      v47 = ~v46;
      goto LABEL_110;
    }
    v49 = v50 + 2;
    if (v50 > 0xFD)
    {
      v52 = *(unsigned __int16 *)&a2[v6];
      v46 = v52 | 0xFFFF0000;
      v47 = v52 ^ 0xFFFF;
      v48 = 16;
    }
    else
    {
      v51 = a2[v6];
      v46 = v51 | 0xFFFFFF00;
      v47 = v51 ^ 0xFF;
      v48 = 8;
    }
  }
  else
  {
    v45 = a2[v6];
    v46 = v45 | 0xFFFFFF00;
    v47 = v45 ^ 0xFF;
    v48 = 8;
    v49 = 3;
  }
  v53 = (1 << v48) - v49;
  if ((v53 & 0x80000000) != 0)
  {
LABEL_110:
    if (v47 >= 0x7FFFFFFF)
      goto LABEL_112;
LABEL_111:
    if (!v46)
      goto LABEL_112;
LABEL_71:
    if (v6 <= 3)
    {
      v33 = ((1 << v7) + 1) >> v7;
      if (v33 > 0xFFFD)
      {
LABEL_77:
        v35 = 0x7FFFFFFF;
LABEL_78:
        v36 = 1;
        if (v6 > 3)
        {
          v37 = 1;
LABEL_88:
          v40 = v6 + v36;
          if (v35 <= 1)
          {
            if ((v37 + v6) <= 3)
            {
              v42 = (~(-1 << (8 * (v37 + v6))) - v35 + 2) >> (8 * (v37 + v6));
              if (v42 > 0xFFFE)
              {
                v41 = 4;
              }
              else
              {
                v43 = v42 != 0;
                v44 = v42 >= 0xFF;
                v41 = 2;
                if (!v44)
                  v41 = v43;
              }
            }
            else
            {
              v41 = 1;
            }
            v40 += v41;
          }
          memcpy(a1, a2, v40);
          return a1;
        }
        v38 = ((1 << v7) + 1) >> v7;
        if (v38 > 0xFFFD)
        {
          v36 = 4;
        }
        else
        {
          if (v38 < 0xFE)
          {
            v36 = 1;
            v37 = 1;
            goto LABEL_88;
          }
          v36 = 2;
        }
        v39 = v38 > 0xFFFD;
        v37 = 2;
        if (v39)
          v37 = 4;
        goto LABEL_88;
      }
      v32 = v33 + 2;
      if (v33 > 0xFD)
      {
        v34 = 16;
LABEL_76:
        v35 = (1 << v34) - v32;
        if ((v35 & 0x80000000) == 0)
          goto LABEL_78;
        goto LABEL_77;
      }
    }
    else
    {
      v32 = 3;
    }
    v34 = 8;
    goto LABEL_76;
  }
  if (v53 > v47)
    goto LABEL_111;
LABEL_112:
  if (v6 > 3)
    goto LABEL_115;
  v54 = ((1 << v7) + 1) >> v7;
  if (v54 <= 0xFFFD)
  {
    if (v54 > 0xFD)
    {
      v55 = *(unsigned __int16 *)&a2[v6];
      if (v55 < 2)
        goto LABEL_124;
      goto LABEL_120;
    }
LABEL_115:
    v55 = a2[v6];
    if (v55 < 2)
      goto LABEL_124;
LABEL_120:
    if (v6 <= 3)
      v56 = v6;
    else
      v56 = 4;
    __asm { BR              X13 }
  }
  v55 = *(_DWORD *)&a2[v6];
  if (v55 >= 2)
    goto LABEL_120;
LABEL_124:
  if (v55 == 1)
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 <= 3)
    {
      v60 = ((1 << v7) + 1) >> v7;
      if (v60 > 0xFFFD)
      {
        *(_DWORD *)&a1[v6] = 1;
        goto LABEL_147;
      }
      if (v60 > 0xFD)
      {
        *(_WORD *)&a1[v6] = 1;
        goto LABEL_140;
      }
    }
    a1[v6] = 1;
    if (v6 <= 3)
      goto LABEL_127;
    goto LABEL_132;
  }
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_126;
  v60 = ((1 << v7) + 1) >> v7;
  if (v60 > 0xFFFD)
  {
    *(_DWORD *)&a1[v6] = 0;
    goto LABEL_147;
  }
  if (v60 <= 0xFD)
  {
LABEL_126:
    a1[v6] = 0;
    if (v6 <= 3)
    {
LABEL_127:
      v57 = ((1 << v7) + 1) >> v7;
      if (v57 > 0xFFFD)
        goto LABEL_147;
      v58 = v57 + 2;
      if (v57 > 0xFD)
        goto LABEL_141;
LABEL_133:
      v59 = 8;
      goto LABEL_142;
    }
LABEL_132:
    v58 = 3;
    goto LABEL_133;
  }
  *(_WORD *)&a1[v6] = 0;
LABEL_140:
  v58 = v60 + 2;
LABEL_141:
  v59 = 16;
LABEL_142:
  v61 = (1 << v59) - v58;
  if ((v61 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_151;
    goto LABEL_148;
  }
LABEL_147:
  v61 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_151:
    v63 = 1;
    goto LABEL_152;
  }
LABEL_148:
  v62 = ((1 << v7) + 1) >> v7;
  v63 = 2;
  if (v62 > 0xFFFD)
    v63 = 4;
  if (v62 <= 0xFD)
    goto LABEL_151;
LABEL_152:
  if (v61 <= 1)
  {
    v64 = v63 + v6;
    if (v64 <= 3)
    {
      v65 = (~(-1 << (8 * v64)) - v61 + 2) >> (8 * v64);
      if (v65 > 0xFFFE)
      {
        *(_DWORD *)&a1[v64] = 0;
        return a1;
      }
      if (v65 > 0xFE)
      {
        *(_WORD *)&a1[v64] = 0;
        return a1;
      }
      if (!v65)
        return a1;
    }
    a1[v64] = 0;
  }
  return a1;
}

char *sub_1AC6F89B8(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  char v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  char v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  BOOL v120;
  size_t v121;
  uint64_t v122;
  unsigned int v123;
  _BOOL8 v124;
  BOOL v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 > 3)
  {
    v7 = 3;
LABEL_3:
    v8 = 8;
    goto LABEL_4;
  }
  v10 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v10 > 0xFFFD)
    goto LABEL_10;
  v7 = v10 + 2;
  if (v10 <= 0xFD)
    goto LABEL_3;
  v8 = 16;
LABEL_4:
  v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_14;
LABEL_11:
    v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v12 = 2;
    if (v11 > 0xFFFD)
      v12 = 4;
    if (v11 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v9 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_11;
LABEL_14:
  v12 = 1;
LABEL_15:
  if (v9 > 1)
    goto LABEL_32;
  v13 = v12 + v6;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_17;
  v16 = (~(-1 << v14) - v9 + 2) >> v14;
  if (v16 > 0xFFFE)
  {
    v15 = *(_DWORD *)&a1[v13];
    if (!v15)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v16 > 0xFE)
  {
    v15 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13])
      goto LABEL_31;
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_17:
    v15 = a1[v13];
    if (!a1[v13])
      goto LABEL_31;
LABEL_24:
    v17 = (v15 - 1) << v14;
    if (v13 > 3)
      v17 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X12 }
    }
LABEL_70:
    if (v9 + (v13 | v17) == -1)
      goto LABEL_113;
    goto LABEL_71;
  }
LABEL_31:
  if (!v9)
    goto LABEL_113;
LABEL_32:
  if (v6 > 3)
  {
    v18 = 3;
    goto LABEL_36;
  }
  v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v19 <= 0xFFFD)
  {
    v18 = v19 + 2;
    if (v19 > 0xFD)
    {
      v20 = 16;
LABEL_37:
      v21 = (1 << v20) - v18;
      if ((v21 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_36:
    v20 = 8;
    goto LABEL_37;
  }
LABEL_38:
  v21 = 0x7FFFFFFF;
LABEL_39:
  if (v6 > 3)
  {
    v22 = 3;
LABEL_43:
    v24 = 8;
    goto LABEL_44;
  }
  v23 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v23 > 0xFFFD)
    goto LABEL_47;
  v22 = v23 + 2;
  if (v23 <= 0xFD)
    goto LABEL_43;
  v24 = 16;
LABEL_44:
  v9 = (1 << v24) - v22;
  if ((v9 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_47:
  v9 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_51:
    v26 = 1;
    goto LABEL_52;
  }
LABEL_48:
  v25 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v26 = 2;
  if (v25 > 0xFFFD)
    v26 = 4;
  if (v25 <= 0xFD)
    goto LABEL_51;
LABEL_52:
  if (!v21)
    goto LABEL_113;
  v27 = v21 - v9;
  if (v21 <= v9)
    goto LABEL_101;
  v13 = v26 + v6;
  v28 = 8 * (v26 + v6);
  if (v13 > 3)
    goto LABEL_55;
  v30 = ((v27 + ~(-1 << v28)) >> v28) + 1;
  if (HIWORD(v30))
  {
    v29 = *(_DWORD *)&a1[v13];
    if (!v29)
      goto LABEL_101;
LABEL_64:
    v17 = (v29 - 1) << v28;
    if (v13 > 3)
      v17 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_70;
  }
  if (v30 > 0xFF)
  {
    v29 = *(unsigned __int16 *)&a1[v13];
    if (!*(_WORD *)&a1[v13])
      goto LABEL_101;
    goto LABEL_64;
  }
  if (v30 >= 2)
  {
LABEL_55:
    v29 = a1[v13];
    if (!a1[v13])
      goto LABEL_101;
    goto LABEL_64;
  }
LABEL_101:
  if (!v9)
    goto LABEL_113;
  if (v6 <= 3)
  {
    v48 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v48 > 0xFFFD)
    {
      v43 = *(_DWORD *)&a1[v6];
      v44 = ~v43;
LABEL_111:
      if (v44 >= 0x7FFFFFFF)
        goto LABEL_113;
LABEL_112:
      if (!v43)
        goto LABEL_113;
LABEL_71:
      if (v6 <= 3)
      {
        v34 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v34 > 0xFFFD)
          goto LABEL_80;
        v31 = v34 + 2;
        if (v34 > 0xFD)
        {
          v32 = 16;
LABEL_74:
          v33 = (1 << v32) - v31;
          if ((v33 & 0x80000000) == 0)
          {
            if (v6 > 3)
              goto LABEL_84;
LABEL_81:
            v35 = ((1 << (8 * v6)) + 1) >> (8 * v6);
            v36 = 2;
            if (v35 > 0xFFFD)
              v36 = 4;
            if (v35 > 0xFD)
            {
LABEL_85:
              if (v33 > 1)
                goto LABEL_199;
              v37 = v36 + v6;
              v38 = 8 * v37;
              if (v37 <= 3)
              {
                v40 = (~(-1 << v38) - v33 + 2) >> v38;
                if (v40 > 0xFFFE)
                {
                  v39 = *(_DWORD *)&a2[v37];
                  if (!v39)
                    goto LABEL_198;
                  goto LABEL_94;
                }
                if (v40 > 0xFE)
                {
                  v39 = *(unsigned __int16 *)&a2[v37];
                  if (!*(_WORD *)&a2[v37])
                    goto LABEL_198;
                  goto LABEL_94;
                }
                if (!v40)
                {
LABEL_198:
                  if (!v33)
                    goto LABEL_331;
LABEL_199:
                  if (v6 <= 3)
                  {
                    v78 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                    if (v78 > 0xFFFD)
                    {
LABEL_205:
                      v80 = 0x7FFFFFFF;
LABEL_206:
                      if (v6 <= 3)
                      {
                        v82 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                        if (v82 > 0xFFFD)
                          goto LABEL_214;
                        v81 = v82 + 2;
                        if (v82 > 0xFD)
                        {
                          v83 = 16;
LABEL_211:
                          v33 = (1 << v83) - v81;
                          if ((v33 & 0x80000000) == 0)
                          {
                            if (v6 > 3)
                              goto LABEL_218;
LABEL_215:
                            v84 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                            v85 = 2;
                            if (v84 > 0xFFFD)
                              v85 = 4;
                            if (v84 > 0xFD)
                            {
LABEL_219:
                              if (!v80)
                                goto LABEL_331;
                              v86 = v80 - v33;
                              if (v80 <= v33)
                                goto LABEL_290;
                              v37 = v85 + v6;
                              v87 = 8 * (v85 + v6);
                              if (v37 > 3)
                                goto LABEL_222;
                              v89 = ((v86 + ~(-1 << v87)) >> v87) + 1;
                              if (HIWORD(v89))
                              {
                                v88 = *(_DWORD *)&a2[v37];
                              }
                              else
                              {
                                if (v89 <= 0xFF)
                                {
                                  if (v89 < 2)
                                    goto LABEL_290;
LABEL_222:
                                  v88 = a2[v37];
                                  goto LABEL_283;
                                }
                                v88 = *(unsigned __int16 *)&a2[v37];
                              }
LABEL_283:
                              if (v88)
                              {
                                v41 = (v88 - 1) << v87;
                                if (v37 > 3)
                                  v41 = 0;
                                if ((_DWORD)v37)
                                {
                                  if (v37 > 3)
                                    LODWORD(v37) = 4;
                                  __asm { BR              X12 }
                                }
                                goto LABEL_296;
                              }
LABEL_290:
                              if (!v33)
                                goto LABEL_331;
                              if (v6 <= 3)
                              {
                                v111 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                if (v111 > 0xFFFD)
                                {
                                  v107 = *(_DWORD *)&a2[v6];
                                  v108 = ~v107;
                                  goto LABEL_328;
                                }
                                v110 = v111 + 2;
                                if (v111 > 0xFD)
                                {
                                  v126 = *(unsigned __int16 *)&a2[v6];
                                  v107 = v126 | 0xFFFF0000;
                                  v108 = v126 ^ 0xFFFF;
                                  v109 = 16;
                                }
                                else
                                {
                                  v112 = a2[v6];
                                  v107 = v112 | 0xFFFFFF00;
                                  v108 = v112 ^ 0xFF;
                                  v109 = 8;
                                }
                              }
                              else
                              {
                                v106 = a2[v6];
                                v107 = v106 | 0xFFFFFF00;
                                v108 = v106 ^ 0xFF;
                                v109 = 8;
                                v110 = 3;
                              }
                              v127 = (1 << v109) - v110;
                              if ((v127 & 0x80000000) == 0)
                              {
LABEL_329:
                                if (v127 > v108 && v107)
                                {
LABEL_297:
                                  if (v6 <= 3)
                                  {
                                    v116 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                    if (v116 > 0xFFFD)
                                    {
LABEL_305:
                                      v115 = 0x7FFFFFFF;
LABEL_306:
                                      v117 = 1;
                                      if (v6 > 3)
                                      {
                                        v118 = 1;
LABEL_315:
                                        v121 = v6 + v117;
                                        if (v115 <= 1)
                                        {
                                          if ((v118 + v6) <= 3)
                                          {
                                            v123 = (~(-1 << (8 * (v118 + v6))) - v115 + 2) >> (8 * (v118 + v6));
                                            if (v123 > 0xFFFE)
                                            {
                                              v122 = 4;
                                            }
                                            else
                                            {
                                              v124 = v123 != 0;
                                              v125 = v123 >= 0xFF;
                                              v122 = 2;
                                              if (!v125)
                                                v122 = v124;
                                            }
                                          }
                                          else
                                          {
                                            v122 = 1;
                                          }
                                          v121 += v122;
                                        }
                                        memcpy(a1, a2, v121);
                                        return a1;
                                      }
                                      v119 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                      if (v119 > 0xFFFD)
                                      {
                                        v117 = 4;
                                      }
                                      else
                                      {
                                        if (v119 < 0xFE)
                                        {
                                          v117 = 1;
                                          v118 = 1;
                                          goto LABEL_315;
                                        }
                                        v117 = 2;
                                      }
                                      v120 = v119 > 0xFFFD;
                                      v118 = 2;
                                      if (v120)
                                        v118 = 4;
                                      goto LABEL_315;
                                    }
                                    v113 = v116 + 2;
                                    if (v116 > 0xFD)
                                    {
                                      v114 = 16;
LABEL_300:
                                      v115 = (1 << v114) - v113;
                                      if ((v115 & 0x80000000) == 0)
                                        goto LABEL_306;
                                      goto LABEL_305;
                                    }
                                  }
                                  else
                                  {
                                    v113 = 3;
                                  }
                                  v114 = 8;
                                  goto LABEL_300;
                                }
LABEL_331:
                                if (v6 <= 3)
                                {
                                  v128 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                  if (v128 > 0xFFFD)
                                  {
                                    v129 = *(_DWORD *)&a2[v6];
                                    if (v129 < 2)
                                    {
LABEL_343:
                                      if (v129 == 1)
                                      {
                                        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                                        if (v6 <= 3)
                                        {
                                          v133 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          if (v133 > 0xFFFD)
                                          {
                                            *(_DWORD *)&a1[v6] = 1;
                                            goto LABEL_366;
                                          }
                                          if (v133 > 0xFD)
                                          {
                                            *(_WORD *)&a1[v6] = 1;
                                            goto LABEL_359;
                                          }
                                        }
                                        a1[v6] = 1;
                                        if (v6 > 3)
                                          goto LABEL_346;
                                      }
                                      else
                                      {
                                        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
                                        if (v6 <= 3)
                                        {
                                          v133 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                          if (v133 > 0xFFFD)
                                          {
                                            *(_DWORD *)&a1[v6] = 0;
                                            goto LABEL_366;
                                          }
                                          if (v133 > 0xFD)
                                          {
                                            *(_WORD *)&a1[v6] = 0;
LABEL_359:
                                            v131 = v133 + 2;
LABEL_360:
                                            v132 = 16;
LABEL_361:
                                            v135 = (1 << v132) - v131;
                                            if ((v135 & 0x80000000) == 0)
                                            {
                                              if (v6 > 3)
                                                goto LABEL_370;
LABEL_367:
                                              v136 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                              v137 = 2;
                                              if (v136 > 0xFFFD)
                                                v137 = 4;
                                              if (v136 > 0xFD)
                                              {
LABEL_371:
                                                if (v135 <= 1)
                                                {
                                                  v138 = v137 + v6;
                                                  if (v138 <= 3)
                                                  {
                                                    v139 = (~(-1 << (8 * v138)) - v135 + 2) >> (8 * v138);
                                                    if (v139 > 0xFFFE)
                                                    {
                                                      *(_DWORD *)&a1[v138] = 0;
                                                      return a1;
                                                    }
                                                    if (v139 > 0xFE)
                                                    {
                                                      *(_WORD *)&a1[v138] = 0;
                                                      return a1;
                                                    }
                                                    if (!v139)
                                                      return a1;
                                                  }
                                                  a1[v138] = 0;
                                                }
                                                return a1;
                                              }
LABEL_370:
                                              v137 = 1;
                                              goto LABEL_371;
                                            }
LABEL_366:
                                            v135 = 0x7FFFFFFF;
                                            if (v6 > 3)
                                              goto LABEL_370;
                                            goto LABEL_367;
                                          }
                                        }
                                        a1[v6] = 0;
                                        if (v6 > 3)
                                        {
LABEL_346:
                                          v131 = 3;
                                          goto LABEL_347;
                                        }
                                      }
                                      v134 = ((1 << (8 * v6)) + 1) >> (8 * v6);
                                      if (v134 > 0xFFFD)
                                        goto LABEL_366;
                                      v131 = v134 + 2;
                                      if (v134 > 0xFD)
                                        goto LABEL_360;
LABEL_347:
                                      v132 = 8;
                                      goto LABEL_361;
                                    }
LABEL_339:
                                    if (v6 <= 3)
                                      v130 = v6;
                                    else
                                      v130 = 4;
                                    __asm { BR              X12 }
                                  }
                                  if (v128 > 0xFD)
                                  {
                                    v129 = *(unsigned __int16 *)&a2[v6];
                                    if (v129 < 2)
                                      goto LABEL_343;
                                    goto LABEL_339;
                                  }
                                }
                                v129 = a2[v6];
                                if (v129 < 2)
                                  goto LABEL_343;
                                goto LABEL_339;
                              }
LABEL_328:
                              v127 = 0x7FFFFFFF;
                              goto LABEL_329;
                            }
LABEL_218:
                            v85 = 1;
                            goto LABEL_219;
                          }
LABEL_214:
                          v33 = 0x7FFFFFFF;
                          if (v6 > 3)
                            goto LABEL_218;
                          goto LABEL_215;
                        }
                      }
                      else
                      {
                        v81 = 3;
                      }
                      v83 = 8;
                      goto LABEL_211;
                    }
                    v77 = v78 + 2;
                    if (v78 > 0xFD)
                    {
                      v79 = 16;
LABEL_204:
                      v80 = (1 << v79) - v77;
                      if ((v80 & 0x80000000) == 0)
                        goto LABEL_206;
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    v77 = 3;
                  }
                  v79 = 8;
                  goto LABEL_204;
                }
              }
              v39 = a2[v37];
              if (!a2[v37])
                goto LABEL_198;
LABEL_94:
              v41 = (v39 - 1) << v38;
              if (v37 > 3)
                v41 = 0;
              if ((_DWORD)v37)
              {
                if (v37 > 3)
                  LODWORD(v37) = 4;
                __asm { BR              X12 }
              }
LABEL_296:
              if (v33 + (v37 | v41) != -1)
                goto LABEL_297;
              goto LABEL_331;
            }
LABEL_84:
            v36 = 1;
            goto LABEL_85;
          }
LABEL_80:
          v33 = 0x7FFFFFFF;
          if (v6 > 3)
            goto LABEL_84;
          goto LABEL_81;
        }
      }
      else
      {
        v31 = 3;
      }
      v32 = 8;
      goto LABEL_74;
    }
    v46 = v48 + 2;
    if (v48 > 0xFD)
    {
      v76 = *(unsigned __int16 *)&a1[v6];
      v43 = v76 | 0xFFFF0000;
      v44 = v76 ^ 0xFFFF;
      v45 = 16;
    }
    else
    {
      v49 = a1[v6];
      v43 = v49 | 0xFFFFFF00;
      v44 = v49 ^ 0xFF;
      v45 = 8;
    }
  }
  else
  {
    v42 = a1[v6];
    v43 = v42 | 0xFFFFFF00;
    v44 = v42 ^ 0xFF;
    v45 = 8;
    v46 = 3;
  }
  v47 = (1 << v45) - v46;
  if ((v47 & 0x80000000) != 0)
    goto LABEL_111;
  if (v47 > v44)
    goto LABEL_112;
LABEL_113:
  if (v6 > 3)
  {
    v50 = 3;
LABEL_117:
    v52 = 8;
    goto LABEL_118;
  }
  v51 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v51 > 0xFFFD)
    goto LABEL_121;
  v50 = v51 + 2;
  if (v51 <= 0xFD)
    goto LABEL_117;
  v52 = 16;
LABEL_118:
  v53 = (1 << v52) - v50;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_125;
LABEL_122:
    v54 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    v55 = 2;
    if (v54 > 0xFFFD)
      v55 = 4;
    if (v54 > 0xFD)
      goto LABEL_126;
    goto LABEL_125;
  }
LABEL_121:
  v53 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_122;
LABEL_125:
  v55 = 1;
LABEL_126:
  if (v53 > 1)
    goto LABEL_144;
  v56 = v55 + v6;
  v57 = 8 * v56;
  if (v56 > 3)
    goto LABEL_128;
  v59 = (~(-1 << v57) - v53 + 2) >> v57;
  if (v59 > 0xFFFE)
  {
    v58 = *(_DWORD *)&a2[v56];
    if (!v58)
      goto LABEL_143;
    goto LABEL_136;
  }
  if (v59 > 0xFE)
  {
    v58 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56])
      goto LABEL_143;
    goto LABEL_136;
  }
  if (v59)
  {
LABEL_128:
    v58 = a2[v56];
    if (!a2[v56])
      goto LABEL_143;
LABEL_136:
    v60 = (v58 - 1) << v57;
    if (v56 > 3)
      v60 = 0;
    if ((_DWORD)v56)
    {
      if (v56 > 3)
        LODWORD(v56) = 4;
      __asm { BR              X12 }
    }
LABEL_182:
    if (v53 + (v56 | v60) == -1)
      goto LABEL_242;
    if (v6 > 3)
      goto LABEL_186;
LABEL_183:
    v74 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v74 > 0xFFFD)
    {
      if (*(_DWORD *)&a1[v6] < 2u)
        goto LABEL_196;
      goto LABEL_191;
    }
    if (v74 > 0xFD)
    {
      if (*(unsigned __int16 *)&a1[v6] < 2u)
      {
LABEL_196:
        (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        goto LABEL_297;
      }
    }
    else
    {
LABEL_186:
      if (a1[v6] < 2u)
        goto LABEL_196;
    }
LABEL_191:
    if (v6 <= 3)
      v75 = v6;
    else
      v75 = 4;
    __asm { BR              X12 }
  }
LABEL_143:
  if (!v53)
    goto LABEL_242;
LABEL_144:
  if (v6 > 3)
  {
    v61 = 3;
    goto LABEL_148;
  }
  v62 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v62 <= 0xFFFD)
  {
    v61 = v62 + 2;
    if (v62 > 0xFD)
    {
      v63 = 16;
LABEL_149:
      v64 = (1 << v63) - v61;
      if ((v64 & 0x80000000) == 0)
        goto LABEL_151;
      goto LABEL_150;
    }
LABEL_148:
    v63 = 8;
    goto LABEL_149;
  }
LABEL_150:
  v64 = 0x7FFFFFFF;
LABEL_151:
  if (v6 > 3)
  {
    v65 = 3;
LABEL_155:
    v67 = 8;
    goto LABEL_156;
  }
  v66 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v66 > 0xFFFD)
    goto LABEL_159;
  v65 = v66 + 2;
  if (v66 <= 0xFD)
    goto LABEL_155;
  v67 = 16;
LABEL_156:
  v53 = (1 << v67) - v65;
  if ((v53 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_163;
    goto LABEL_160;
  }
LABEL_159:
  v53 = 0x7FFFFFFF;
  if (v6 > 3)
  {
LABEL_163:
    v69 = 1;
    goto LABEL_164;
  }
LABEL_160:
  v68 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  v69 = 2;
  if (v68 > 0xFFFD)
    v69 = 4;
  if (v68 <= 0xFD)
    goto LABEL_163;
LABEL_164:
  if (!v64)
    goto LABEL_242;
  v70 = v64 - v53;
  if (v64 <= v53)
    goto LABEL_230;
  v56 = v69 + v6;
  v71 = 8 * (v69 + v6);
  if (v56 > 3)
    goto LABEL_167;
  v73 = ((v70 + ~(-1 << v71)) >> v71) + 1;
  if (HIWORD(v73))
  {
    v72 = *(_DWORD *)&a2[v56];
    if (!v72)
      goto LABEL_230;
LABEL_176:
    v60 = (v72 - 1) << v71;
    if (v56 > 3)
      v60 = 0;
    if ((_DWORD)v56)
    {
      if (v56 > 3)
        LODWORD(v56) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_182;
  }
  if (v73 > 0xFF)
  {
    v72 = *(unsigned __int16 *)&a2[v56];
    if (!*(_WORD *)&a2[v56])
      goto LABEL_230;
    goto LABEL_176;
  }
  if (v73 >= 2)
  {
LABEL_167:
    v72 = a2[v56];
    if (!a2[v56])
      goto LABEL_230;
    goto LABEL_176;
  }
LABEL_230:
  if (!v53)
    goto LABEL_242;
  if (v6 <= 3)
  {
    v96 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v96 > 0xFFFD)
    {
      v91 = *(_DWORD *)&a2[v6];
      v92 = ~v91;
LABEL_240:
      if (v92 >= 0x7FFFFFFF)
        goto LABEL_242;
LABEL_241:
      if (!v91)
        goto LABEL_242;
      goto LABEL_183;
    }
    v94 = v96 + 2;
    if (v96 > 0xFD)
    {
      v105 = *(unsigned __int16 *)&a2[v6];
      v91 = v105 | 0xFFFF0000;
      v92 = v105 ^ 0xFFFF;
      v93 = 16;
    }
    else
    {
      v97 = a2[v6];
      v91 = v97 | 0xFFFFFF00;
      v92 = v97 ^ 0xFF;
      v93 = 8;
    }
  }
  else
  {
    v90 = a2[v6];
    v91 = v90 | 0xFFFFFF00;
    v92 = v90 ^ 0xFF;
    v93 = 8;
    v94 = 3;
  }
  v95 = (1 << v93) - v94;
  if ((v95 & 0x80000000) != 0)
    goto LABEL_240;
  if (v95 > v92)
    goto LABEL_241;
LABEL_242:
  if (a1 == a2)
    return a1;
  if (v6 > 3)
  {
LABEL_244:
    if (a1[v6] >= 2u)
      goto LABEL_251;
    goto LABEL_255;
  }
  v98 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v98 <= 0xFFFD)
  {
    if (v98 > 0xFD)
    {
      if (*(unsigned __int16 *)&a1[v6] >= 2u)
      {
LABEL_251:
        if (v6 <= 3)
          v99 = v6;
        else
          v99 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_255;
    }
    goto LABEL_244;
  }
  if (*(_DWORD *)&a1[v6] >= 2u)
    goto LABEL_251;
LABEL_255:
  (*(void (**)(char *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  if (v6 > 3)
    goto LABEL_256;
  v101 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v101 > 0xFFFD)
  {
    v100 = *(_DWORD *)&a2[v6];
    if (v100 >= 2)
      goto LABEL_263;
    goto LABEL_267;
  }
  if (v101 <= 0xFD)
  {
LABEL_256:
    v100 = a2[v6];
    if (v100 >= 2)
      goto LABEL_263;
  }
  else
  {
    v100 = *(unsigned __int16 *)&a2[v6];
    if (v100 >= 2)
    {
LABEL_263:
      if (v6 <= 3)
        v102 = v6;
      else
        v102 = 4;
      __asm { BR              X12 }
    }
  }
LABEL_267:
  if (v100 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_274;
    v104 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v104 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 1;
      return a1;
    }
    if (v104 <= 0xFD)
LABEL_274:
      a1[v6] = 1;
    else
      *(_WORD *)&a1[v6] = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v6 > 3)
      goto LABEL_269;
    v103 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v103 > 0xFFFD)
    {
      *(_DWORD *)&a1[v6] = 0;
      return a1;
    }
    if (v103 <= 0xFD)
LABEL_269:
      a1[v6] = 0;
    else
      *(_WORD *)&a1[v6] = 0;
  }
  return a1;
}

uint64_t sub_1AC6F9E1C(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _BOOL8 v22;
  BOOL v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  char v29;
  unsigned int v30;
  int v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  unsigned int v42;
  uint64_t result;
  int v44;
  int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;

  v4 = 2147483645;
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= 3)
  {
    v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v7 > 0xFFFD)
      goto LABEL_9;
    v6 = v7 + 2;
    if (v7 > 0xFD)
    {
      v8 = 16;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 3;
  }
  v8 = 8;
LABEL_6:
  v9 = (1 << v8) - v6;
  if ((v9 & 0x80000000) == 0)
  {
    v4 = v9 - 2;
    if (v9 < 2)
      v4 = 0;
  }
LABEL_9:
  if (v5 > 3)
  {
    v10 = 3;
    goto LABEL_13;
  }
  v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v11 <= 0xFFFD)
  {
    v10 = v11 + 2;
    if (v11 > 0xFD)
    {
      v12 = 16;
LABEL_14:
      v13 = (1 << v12) - v10;
      if ((v13 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
LABEL_13:
    v12 = 8;
    goto LABEL_14;
  }
LABEL_15:
  v13 = 0x7FFFFFFF;
LABEL_16:
  v14 = 1;
  if (v5 <= 3)
  {
    v16 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v16 > 0xFFFD)
    {
      v14 = 4;
    }
    else
    {
      if (v16 < 0xFE)
      {
        v14 = 1;
        v15 = 1;
        goto LABEL_27;
      }
      v14 = 2;
    }
    v17 = v16 > 0xFFFD;
    v15 = 2;
    if (v17)
      v15 = 4;
    goto LABEL_27;
  }
  v15 = 1;
LABEL_27:
  v18 = v5 + v14;
  if (v13 <= 1)
  {
    v19 = v15 + v5;
    if (v19 <= 3)
    {
      v21 = (~(-1 << (8 * v19)) - v13 + 2) >> (8 * v19);
      if (v21 > 0xFFFE)
      {
        v20 = 4;
      }
      else
      {
        v22 = v21 != 0;
        v23 = v21 >= 0xFF;
        v20 = 2;
        if (!v23)
          v20 = v22;
      }
    }
    else
    {
      v20 = 1;
    }
    v18 += v20;
  }
  if (!a2)
    return 0;
  if (a2 > v4)
  {
    v24 = 8 * v18;
    if (v18 > 3)
      goto LABEL_39;
    v26 = ((a2 - v4 + ~(-1 << v24)) >> v24) + 1;
    if (HIWORD(v26))
    {
      v25 = *(_DWORD *)(a1 + v18);
      if (!v25)
        goto LABEL_53;
      goto LABEL_46;
    }
    if (v26 > 0xFF)
    {
      v25 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_53;
      goto LABEL_46;
    }
    if (v26 >= 2)
    {
LABEL_39:
      v25 = *(unsigned __int8 *)(a1 + v18);
      if (!*(_BYTE *)(a1 + v18))
        goto LABEL_53;
LABEL_46:
      v27 = (v25 - 1) << v24;
      if (v18 > 3)
        v27 = 0;
      if ((_DWORD)v18)
      {
        if (v18 > 3)
          LODWORD(v18) = 4;
        __asm { BR              X11 }
      }
      return v4 + v27 + 1;
    }
  }
LABEL_53:
  if (!v4)
    return 0;
  if (v5 > 3)
  {
    v28 = 3;
LABEL_56:
    v29 = 8;
    goto LABEL_57;
  }
  v34 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v34 > 0xFFFD)
  {
LABEL_67:
    v30 = 0x7FFFFFFF;
    if (v5 > 3)
      goto LABEL_59;
    goto LABEL_68;
  }
  v28 = v34 + 2;
  if (v34 <= 0xFD)
    goto LABEL_56;
  v29 = 16;
LABEL_57:
  v30 = (1 << v29) - v28;
  if ((v30 & 0x80000000) != 0)
    goto LABEL_67;
  if (v5 > 3)
  {
LABEL_59:
    v31 = 3;
LABEL_60:
    v32 = 8;
    goto LABEL_61;
  }
LABEL_68:
  v35 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v35 > 0xFFFD)
    goto LABEL_71;
  v31 = v35 + 2;
  if (v35 <= 0xFD)
    goto LABEL_60;
  v32 = 16;
LABEL_61:
  v33 = (1 << v32) - v31;
  if ((v33 & 0x80000000) == 0)
  {
    if (v5 > 3)
      goto LABEL_75;
    goto LABEL_72;
  }
LABEL_71:
  v33 = 0x7FFFFFFF;
  if (v5 > 3)
  {
LABEL_75:
    v37 = 1;
    goto LABEL_76;
  }
LABEL_72:
  v36 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  v37 = 2;
  if (v36 > 0xFFFD)
    v37 = 4;
  if (v36 <= 0xFD)
    goto LABEL_75;
LABEL_76:
  if (!v30)
    return 0;
  v38 = v30 - v33;
  if (v30 <= v33)
    goto LABEL_94;
  v39 = v37 + v5;
  v40 = 8 * (v37 + v5);
  if (v39 > 3)
    goto LABEL_79;
  v42 = ((v38 + ~(-1 << v40)) >> v40) + 1;
  if (HIWORD(v42))
  {
    v41 = *(_DWORD *)(a1 + v39);
  }
  else
  {
    if (v42 <= 0xFF)
    {
      if (v42 < 2)
        goto LABEL_94;
LABEL_79:
      v41 = *(unsigned __int8 *)(a1 + v39);
      goto LABEL_87;
    }
    v41 = *(unsigned __int16 *)(a1 + v39);
  }
LABEL_87:
  if (v41)
  {
    v44 = (v41 - 1) << v40;
    if (v39 > 3)
      v44 = 0;
    if ((_DWORD)v39)
    {
      if (v39 > 3)
        LODWORD(v39) = 4;
      __asm { BR              X12 }
    }
    goto LABEL_139;
  }
LABEL_94:
  if (!v33)
    return 0;
  if (v5 > 3)
  {
    v45 = 3;
    goto LABEL_99;
  }
  v46 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v46 <= 0xFFFD)
  {
    v45 = v46 + 2;
    if (v46 > 0xFD)
    {
      v47 = 16;
LABEL_100:
      v48 = (1 << v47) - v45;
      if ((v48 & 0x80000000) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
LABEL_99:
    v47 = 8;
    goto LABEL_100;
  }
LABEL_101:
  v48 = 0x7FFFFFFF;
LABEL_102:
  if (v5 > 3)
  {
    v49 = 3;
LABEL_106:
    v51 = 8;
    goto LABEL_107;
  }
  v50 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v50 > 0xFFFD)
  {
LABEL_108:
    v33 = 0x7FFFFFFF;
    goto LABEL_109;
  }
  v49 = v50 + 2;
  if (v50 <= 0xFD)
    goto LABEL_106;
  v51 = 16;
LABEL_107:
  v33 = (1 << v51) - v49;
  if ((v33 & 0x80000000) != 0)
    goto LABEL_108;
LABEL_109:
  if (v5 > 3)
    goto LABEL_113;
  v52 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  v53 = 2;
  if (v52 > 0xFFFD)
    v53 = 4;
  if (v52 <= 0xFD)
LABEL_113:
    v53 = 1;
  if (!v48)
    return 0;
  v54 = v48 - v33;
  if (v48 <= v33)
    goto LABEL_133;
  v39 = v53 + v5;
  v55 = 8 * (v53 + v5);
  if (v39 > 3)
    goto LABEL_117;
  v57 = ((v54 + ~(-1 << v55)) >> v55) + 1;
  if (HIWORD(v57))
  {
    v56 = *(_DWORD *)(a1 + v39);
  }
  else
  {
    if (v57 <= 0xFF)
    {
      if (v57 < 2)
        goto LABEL_133;
LABEL_117:
      v56 = *(unsigned __int8 *)(a1 + v39);
      goto LABEL_126;
    }
    v56 = *(unsigned __int16 *)(a1 + v39);
  }
LABEL_126:
  if (v56)
  {
    v44 = (v56 - 1) << v55;
    if (v39 > 3)
      v44 = 0;
    if ((_DWORD)v39)
    {
      if (v39 > 3)
        LODWORD(v39) = 4;
      __asm { BR              X12 }
    }
LABEL_139:
    v65 = v33 + (v39 | v44) + 1;
    result = v65 - 2;
    if (v65 > 2)
      return result;
    return 0;
  }
LABEL_133:
  if (!v33)
    return 0;
  if (v5 <= 3)
  {
    v63 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v63 > 0xFFFD)
    {
      v59 = *(_DWORD *)(a1 + v5);
      v60 = ~v59;
LABEL_144:
      v67 = 0x7FFFFFFF;
      goto LABEL_145;
    }
    v62 = v63 + 2;
    if (v63 > 0xFD)
    {
      v66 = *(unsigned __int16 *)(a1 + v5);
      v59 = v66 | 0xFFFF0000;
      v60 = v66 ^ 0xFFFF;
      v61 = 16;
    }
    else
    {
      v64 = *(unsigned __int8 *)(a1 + v5);
      v59 = v64 | 0xFFFFFF00;
      v60 = v64 ^ 0xFF;
      v61 = 8;
    }
  }
  else
  {
    v58 = *(unsigned __int8 *)(a1 + v5);
    v59 = v58 | 0xFFFFFF00;
    v60 = v58 ^ 0xFF;
    v61 = 8;
    v62 = 3;
  }
  v67 = (1 << v61) - v62;
  if ((v67 & 0x80000000) != 0)
    goto LABEL_144;
LABEL_145:
  if (v67 <= v60)
    return 0;
  v68 = -v59;
  result = v68 - 2;
  if (v68 <= 2)
    return 0;
  return result;
}

void sub_1AC6FA530(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  size_t v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL8 v24;
  BOOL v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;

  v6 = 2147483645;
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v12 = ((1 << v8) + 1) >> v8;
    if (v12 > 0xFFFD)
      goto LABEL_10;
    v9 = v12 + 2;
    if (v12 > 0xFD)
    {
      v10 = 16;
      goto LABEL_4;
    }
  }
  else
  {
    v9 = 3;
  }
  v10 = 8;
LABEL_4:
  v11 = (1 << v10) - v9;
  if ((v11 & 0x80000000) == 0)
  {
    v6 = v11 - 2;
    if (v11 < 2)
      v6 = 0;
  }
LABEL_10:
  if (v7 <= 3)
  {
    v16 = ((1 << v8) + 1) >> v8;
    if (v16 > 0xFFFD)
    {
LABEL_18:
      v15 = 0x7FFFFFFF;
LABEL_19:
      v17 = 1;
      if (v7 > 3)
      {
        v18 = 1;
        goto LABEL_28;
      }
      v19 = ((1 << v8) + 1) >> v8;
      if (v19 > 0xFFFD)
      {
        v17 = 4;
      }
      else
      {
        if (v19 < 0xFE)
        {
          v17 = 1;
          v18 = 1;
          goto LABEL_28;
        }
        v17 = 2;
      }
      v20 = v19 > 0xFFFD;
      v18 = 2;
      if (v20)
        v18 = 4;
LABEL_28:
      v21 = v7 + v17;
      if (v15 <= 1)
      {
        if ((v18 + v7) <= 3)
        {
          v23 = (~(-1 << (8 * (v18 + v7))) - v15 + 2) >> (8 * (v18 + v7));
          if (v23 > 0xFFFE)
          {
            v22 = 4;
          }
          else
          {
            v24 = v23 != 0;
            v25 = v23 >= 0xFF;
            v22 = 2;
            if (!v25)
              v22 = v24;
          }
        }
        else
        {
          v22 = 1;
        }
        v21 += v22;
      }
      if (a3 <= v6)
      {
        v26 = 0u;
      }
      else if (v21 <= 3)
      {
        v28 = ((a3 - v6 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
        if (HIWORD(v28))
        {
          v26 = 4u;
        }
        else if (v28 >= 0x100)
        {
          v26 = 2;
        }
        else
        {
          v26 = v28 > 1;
        }
      }
      else
      {
        v26 = 1u;
      }
      if (v6 < a2)
      {
        v27 = ~v6 + a2;
        if (v21 < 4)
        {
          if ((_DWORD)v21)
          {
            v29 = v27 & ~(-1 << (8 * v21));
            bzero(a1, v21);
            if ((_DWORD)v21 == 3)
            {
              *(_WORD *)a1 = v29;
              a1[2] = BYTE2(v29);
            }
            else if ((_DWORD)v21 == 2)
            {
              *(_WORD *)a1 = v29;
            }
            else
            {
              *a1 = v29;
            }
          }
        }
        else
        {
          bzero(a1, v21);
          *(_DWORD *)a1 = v27;
        }
        __asm { BR              X10 }
      }
      __asm { BR              X12 }
    }
    v13 = v16 + 2;
    if (v16 > 0xFD)
    {
      v14 = 16;
LABEL_13:
      v15 = (1 << v14) - v13;
      if ((v15 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    v13 = 3;
  }
  v14 = 8;
  goto LABEL_13;
}

void sub_1AC6FAA2C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1AC6FAA34()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1AC6FAA3C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

void sub_1AC6FABE0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1AC6FAA4CLL);
}

void sub_1AC6FACA0(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v2 + v4) = 0;
  v5 = -2 - v3;
  if (a1 > 3)
    goto LABEL_2;
  v6 = ((1 << v1) + 1) >> v1;
  if (v6 > 0xFFFD)
  {
    *(_DWORD *)(v2 + a1) = v5;
  }
  else
  {
    if (v6 <= 0xFD)
    {
LABEL_2:
      *(_BYTE *)(v2 + a1) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v2 + a1) = v5;
  }
LABEL_7:
  JUMPOUT(0x1AC6FAD44);
}

void sub_1AC6FAD30()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1AC6FAD38()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

uint64_t sub_1AC6FAD5C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = 8 * v2;
  if (v2 > 3)
  {
    v4 = 3;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v7 = ((1 << v3) + 1) >> v3;
  if (v7 > 0xFFFD)
    goto LABEL_10;
  v4 = v7 + 2;
  if (v7 <= 0xFD)
    goto LABEL_3;
  v5 = 16;
LABEL_4:
  v6 = (1 << v5) - v4;
  if ((v6 & 0x80000000) == 0)
  {
    if (v2 > 3)
      goto LABEL_14;
LABEL_11:
    v8 = ((1 << v3) + 1) >> v3;
    v9 = 2;
    if (v8 > 0xFFFD)
      v9 = 4;
    if (v8 > 0xFD)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_10:
  v6 = 0x7FFFFFFF;
  if (v2 <= 3)
    goto LABEL_11;
LABEL_14:
  v9 = 1;
LABEL_15:
  if (v6 > 1)
    goto LABEL_33;
  v10 = v9 + v2;
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_17;
  v13 = (~(-1 << v11) - v6 + 2) >> v11;
  if (v13 > 0xFFFE)
  {
    v12 = *(_DWORD *)(a1 + v10);
    if (!v12)
      goto LABEL_32;
    goto LABEL_24;
  }
  if (v13 > 0xFE)
  {
    v12 = *(unsigned __int16 *)(a1 + v10);
    if (!*(_WORD *)(a1 + v10))
      goto LABEL_32;
    goto LABEL_24;
  }
  if (v13)
  {
LABEL_17:
    v12 = *(unsigned __int8 *)(a1 + v10);
    if (!*(_BYTE *)(a1 + v10))
      goto LABEL_32;
LABEL_24:
    v14 = (v12 - 1) << v11;
    if (v10 > 3)
      v14 = 0;
    if ((_DWORD)v10)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    return v6 + v14 + 1;
  }
LABEL_32:
  if (!v6)
    return 0;
LABEL_33:
  if (v2 > 3)
  {
    v16 = 3;
    goto LABEL_37;
  }
  v17 = ((1 << v3) + 1) >> v3;
  if (v17 <= 0xFFFD)
  {
    v16 = v17 + 2;
    if (v17 > 0xFD)
    {
      v18 = 16;
LABEL_38:
      v19 = (1 << v18) - v16;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
LABEL_37:
    v18 = 8;
    goto LABEL_38;
  }
LABEL_39:
  v19 = 0x7FFFFFFF;
LABEL_40:
  if (v2 > 3)
  {
    v20 = 3;
LABEL_44:
    v22 = 8;
    goto LABEL_45;
  }
  v21 = ((1 << v3) + 1) >> v3;
  if (v21 > 0xFFFD)
    goto LABEL_48;
  v20 = v21 + 2;
  if (v21 <= 0xFD)
    goto LABEL_44;
  v22 = 16;
LABEL_45:
  v6 = (1 << v22) - v20;
  if ((v6 & 0x80000000) == 0)
  {
    if (v2 > 3)
      goto LABEL_52;
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0x7FFFFFFF;
  if (v2 > 3)
  {
LABEL_52:
    v24 = 1;
    goto LABEL_53;
  }
LABEL_49:
  v23 = ((1 << v3) + 1) >> v3;
  v24 = 2;
  if (v23 > 0xFFFD)
    v24 = 4;
  if (v23 <= 0xFD)
    goto LABEL_52;
LABEL_53:
  if (!v19)
    return 0;
  v25 = v19 - v6;
  if (v19 <= v6)
    goto LABEL_74;
  v26 = v24 + v2;
  v27 = 8 * (v24 + v2);
  if (v26 > 3)
  {
LABEL_56:
    v28 = *(unsigned __int8 *)(a1 + v26);
    if (!*(_BYTE *)(a1 + v26))
      goto LABEL_74;
    goto LABEL_65;
  }
  v29 = ((v25 + ~(-1 << v27)) >> v27) + 1;
  if (HIWORD(v29))
  {
    v28 = *(_DWORD *)(a1 + v26);
    if (!v28)
      goto LABEL_74;
LABEL_65:
    v14 = (v28 - 1) << v27;
    if (v26 > 3)
      v14 = 0;
    if ((_DWORD)v26)
    {
      if (v26 <= 3)
        v30 = v26;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    return v6 + v14 + 1;
  }
  if (v29 > 0xFF)
  {
    v28 = *(unsigned __int16 *)(a1 + v26);
    if (!*(_WORD *)(a1 + v26))
      goto LABEL_74;
    goto LABEL_65;
  }
  if (v29 >= 2)
    goto LABEL_56;
LABEL_74:
  if (!v6)
    return 0;
  if (v2 > 3)
  {
    v32 = *(unsigned __int8 *)(a1 + v2);
    v33 = v32 | 0xFFFFFF00;
    v34 = v32 ^ 0xFF;
    v35 = 8;
    v36 = 3;
    goto LABEL_83;
  }
  v37 = ((1 << v3) + 1) >> v3;
  if (v37 <= 0xFFFD)
  {
    v36 = v37 + 2;
    if (v37 > 0xFD)
    {
      v39 = *(unsigned __int16 *)(a1 + v2);
      v33 = v39 | 0xFFFF0000;
      v34 = v39 ^ 0xFFFF;
      v35 = 16;
    }
    else
    {
      v38 = *(unsigned __int8 *)(a1 + v2);
      v33 = v38 | 0xFFFFFF00;
      v34 = v38 ^ 0xFF;
      v35 = 8;
    }
LABEL_83:
    v40 = (1 << v35) - v36;
    if ((v40 & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  v33 = *(_DWORD *)(a1 + v2);
  v34 = ~v33;
LABEL_84:
  v40 = 0x7FFFFFFF;
LABEL_85:
  if (v40 > v34)
    return -v33;
  else
    return 0;
}

void sub_1AC6FB18C(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = 8 * v4;
  if (v4 <= 3)
  {
    v9 = ((1 << v5) + 1) >> v5;
    if (v9 > 0xFFFD)
      goto LABEL_10;
    v6 = v9 + 2;
    if (v9 > 0xFD)
    {
      v7 = 16;
LABEL_4:
      v8 = (1 << v7) - v6;
      if ((v8 & 0x80000000) == 0)
      {
        if (v4 > 3)
          goto LABEL_14;
LABEL_11:
        v10 = ((1 << v5) + 1) >> v5;
        v11 = 2;
        if (v10 > 0xFFFD)
          v11 = 4;
        if (v10 > 0xFD)
        {
LABEL_15:
          v12 = v11 + v4;
          if (v8 > 1)
          {
            v13 = 0u;
          }
          else if (v12 <= 3)
          {
            v15 = (~(-1 << (8 * v12)) - v8 + 2) >> (8 * v12);
            if (v15 > 0xFFFE)
            {
              v13 = 4u;
            }
            else if (v15 >= 0xFF)
            {
              v13 = 2;
            }
            else
            {
              v13 = v15 != 0;
            }
          }
          else
          {
            v13 = 1u;
          }
          if (v8 < a2)
          {
            v14 = ~v8 + a2;
            if (v12 < 4)
            {
              if ((_DWORD)v12)
              {
                v16 = v14 & ~(-1 << (8 * v12));
                bzero(a1, v12);
                if ((_DWORD)v12 == 3)
                {
                  *(_WORD *)a1 = v16;
                  a1[2] = BYTE2(v16);
                }
                else if ((_DWORD)v12 == 2)
                {
                  *(_WORD *)a1 = v16;
                }
                else
                {
                  *a1 = v16;
                }
              }
            }
            else
            {
              bzero(a1, v12);
              *(_DWORD *)a1 = v14;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_14:
        v11 = 1;
        goto LABEL_15;
      }
LABEL_10:
      v8 = 0x7FFFFFFF;
      if (v4 > 3)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v6 = 3;
  }
  v7 = 8;
  goto LABEL_4;
}

uint64_t type metadata accessor for ShelvesPresenter<>.MergeSolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShelvesPresenter<>.MergeSolution);
}

uint64_t sub_1AC6FB688()
{
  return sub_1AC6EB27C() & 1;
}

uint64_t sub_1AC6FB6A8()
{
  return sub_1AC6EB154() & 1;
}

uint64_t sub_1AC6FB6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  unint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  _BYTE v38[48];
  uint64_t v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BE020);
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v27 - v10;
  result = MEMORY[0x1E0DEE9D8];
  v39 = MEMORY[0x1E0DEE9D8];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v36 = *(_QWORD *)(v8 + 72);
    v27[1] = v2;
    v28 = v14;
    v34 = a1 + v14;
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v32 = v8;
    v33 = v15;
    v16 = a2 + 56;
    v30 = MEMORY[0x1E0DEE9D8];
    v15(v11, v34, v5, v9);
    while (1)
    {
      sub_1AC725D88();
      if (*(_QWORD *)(a2 + 16)
        && (v18 = sub_1AC7267F0(),
            v19 = -1 << *(_BYTE *)(a2 + 32),
            v20 = v18 & ~v19,
            ((*(_QWORD *)(v16 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        v21 = ~v19;
        while (1)
        {
          sub_1AC6FB960(*(_QWORD *)(a2 + 48) + 40 * v20, (uint64_t)v37);
          v22 = MEMORY[0x1AF43FDB0](v37, v38);
          sub_1AC6FB99C((uint64_t)v37);
          if ((v22 & 1) != 0)
            break;
          v20 = (v20 + 1) & v21;
          if (((*(_QWORD *)(v16 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
            goto LABEL_3;
        }
        sub_1AC6FB99C((uint64_t)v38);
        v29 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
        v29(v31, v11, v5);
        v23 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1AC6DEF10(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v24 = v39;
        v26 = *(_QWORD *)(v39 + 16);
        v25 = *(_QWORD *)(v39 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_1AC6DEF10(v25 > 1, v26 + 1, 1);
          v24 = v39;
        }
        *(_QWORD *)(v24 + 16) = v26 + 1;
        v30 = v24;
        v29((char *)(v24 + v28 + v26 * v36), v31, v5);
      }
      else
      {
LABEL_3:
        sub_1AC6FB99C((uint64_t)v38);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v5);
      }
      if (++v13 == v35)
        return v39;
      v33(v11, v34 + v36 * v13, v5, v17);
    }
  }
  return result;
}

uint64_t sub_1AC6FB960(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1AC6FB99C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1AC6FB9D0(uint64_t a1)
{
  return sub_1AC6FBA10(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6ED5D0) & 1;
}

uint64_t sub_1AC6FB9F0(uint64_t a1)
{
  return sub_1AC6FBA10(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AC6ED200) & 1;
}

uint64_t sub_1AC6FBA10(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]) & 1;
}

uint64_t sub_1AC6FBA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v44 = (char *)&v37 - v9;
  v37 = v10;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x1AF43F9CC](v12))
  {
    sub_1AC726838();
    v15 = sub_1AC72682C();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E8];
  }
  v40 = MEMORY[0x1AF43FA08](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    v17 = sub_1AC726400();
    sub_1AC7263C4();
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = sub_1AC726880();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = sub_1AC7261C0();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v7, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = sub_1AC7261FC();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v7, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

BOOL sub_1AC6FBD40(uint64_t a1)
{
  uint64_t v1;

  return sub_1AC6ECE04(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t objectdestroy_29Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AC6FBD94()
{
  uint64_t v0;

  return sub_1AC6EB8E8(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t dispatch thunk of CustomTextStyle.font(compatibleWith:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

double AnyDimension.estimatedTopMargin(for:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;

  v8 = sub_1AC726A48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC68E57C((uint64_t)v11);
  AnyDimension.value(in:rounded:)(a2, (uint64_t)v11, a3, a4);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(a1, sel_lineHeight);
  v15 = v14;
  objc_msgSend(a1, sel_descender);
  return v13 - (v15 + v16);
}

double AnyDimension.estimatedBottomMargin(for:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v16;

  v8 = sub_1AC726A48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC68E57C((uint64_t)v11);
  AnyDimension.value(in:rounded:)(a2, (uint64_t)v11, a3, a4);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(a1, sel_descender);
  return v13 + v14;
}

Swift::Void __swiftcall JUCustomView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  objc_super v1;

  v1.super_class = (Class)JUCustomView;
  objc_msgSendSuper2(&v1, sel_traitCollectionDidChange_, a1.value.super.isa);
}

uint64_t Resize.Placements.union.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[272];

  sub_1AC695324(v1, (uint64_t)v15);
  Resize.Placements.next()((uint64_t)v9);
  result = sub_1AC695048((uint64_t)v15);
  if (v10)
  {
    v7 = v12;
    v8 = v11;
    v4 = v13;
    v5 = v14;
    result = sub_1AC6929AC((uint64_t)v9);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  else
  {
    if (qword_1EEC89658 != -1)
      result = swift_once();
    v6 = xmmword_1EEC8A840;
    *(_OWORD *)a1 = xmmword_1EEC8A830;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = xmmword_1EEC8A850;
  }
  return result;
}

void *sub_1AC6FC090@<X0>(void *a1@<X8>)
{
  const void *v1;

  return memcpy(a1, v1, 0x110uLL);
}

uint64_t sub_1AC6FC0A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AC7104AC(v0);
  sub_1AC695048(v0);
  return v1;
}

unint64_t sub_1AC6FC0D4()
{
  return 0xD00000000000003FLL;
}

JetUI::_LayoutAlignment __swiftcall Resize._layoutAlignment(with:)(UITraitCollection with)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  JetUI::_LayoutAlignment v8;
  __int128 v9[2];
  uint64_t v10;
  _BYTE v11[40];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = v1;
  sub_1AC68E218(v3, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED0BD538);
  if (swift_dynamicCast())
  {
    sub_1AC68AAA4(v9, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(Class, uint64_t, uint64_t))(v7 + 8))(with.super.isa, v6, v7);
    return (JetUI::_LayoutAlignment)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v8 = (JetUI::_LayoutAlignment)sub_1AC6916CC((uint64_t)v9, &qword_1ED0BD540);
    *v5 = 0;
  }
  return v8;
}

unint64_t sub_1AC6FC1D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1AC6FC1F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AC6FC1F4()
{
  unint64_t result;

  result = qword_1EEC8B5E0;
  if (!qword_1EEC8B5E0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Resize.Placements, &type metadata for Resize.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B5E0);
  }
  return result;
}

unint64_t sub_1AC6FC23C()
{
  unint64_t result;

  result = qword_1EEC8B5E8;
  if (!qword_1EEC8B5E8)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Resize.Placements, &type metadata for Resize.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B5E8);
  }
  return result;
}

unint64_t sub_1AC6FC284()
{
  unint64_t result;

  result = qword_1EEC8B5F0;
  if (!qword_1EEC8B5F0)
  {
    result = MEMORY[0x1AF440830](&protocol conformance descriptor for Resize.Placements, &type metadata for Resize.Placements);
    atomic_store(result, (unint64_t *)&qword_1EEC8B5F0);
  }
  return result;
}

uint64_t assignWithCopy for Resize(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  if (a1 != a2)
  {
    sub_1AC69634C(a1 + 40);
    if (*(_BYTE *)(a2 + 80) == 1)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      *(_BYTE *)(a1 + 80) = 1;
      swift_retain();
    }
    else
    {
      v4 = (__int128 *)(a2 + 40);
      if (*(_BYTE *)(a2 + 80))
      {
        v7 = *v4;
        v8 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
        *(_OWORD *)(a1 + 40) = v7;
        *(_OWORD *)(a1 + 56) = v8;
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v5;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1 + 40, v4);
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    sub_1AC69634C(a1 + 88);
    if (*(_BYTE *)(a2 + 128) == 1)
    {
      v11 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v11;
      *(_BYTE *)(a1 + 128) = 1;
      swift_retain();
    }
    else
    {
      v9 = (__int128 *)(a2 + 88);
      if (*(_BYTE *)(a2 + 128))
      {
        v12 = *v9;
        v13 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
        *(_OWORD *)(a1 + 88) = v12;
        *(_OWORD *)(a1 + 104) = v13;
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 112) = v10;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1 + 88, v9);
        *(_BYTE *)(a1 + 128) = 0;
      }
    }
    sub_1AC69634C(a1 + 136);
    if (*(_BYTE *)(a2 + 176) == 1)
    {
      v16 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v16;
      *(_BYTE *)(a1 + 176) = 1;
      swift_retain();
    }
    else
    {
      v14 = (__int128 *)(a2 + 136);
      if (*(_BYTE *)(a2 + 176))
      {
        v17 = *v14;
        v18 = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
        *(_OWORD *)(a1 + 136) = v17;
        *(_OWORD *)(a1 + 152) = v18;
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 160) = v15;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        (**(void (***)(uint64_t, __int128 *))(v15 - 8))(a1 + 136, v14);
        *(_BYTE *)(a1 + 176) = 0;
      }
    }
    sub_1AC69634C(a1 + 184);
    if (*(_BYTE *)(a2 + 224) == 1)
    {
      v21 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v21;
      *(_BYTE *)(a1 + 224) = 1;
      swift_retain();
    }
    else
    {
      v19 = (__int128 *)(a2 + 184);
      if (*(_BYTE *)(a2 + 224))
      {
        v22 = *v19;
        v23 = *(_OWORD *)(a2 + 200);
        *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
        *(_OWORD *)(a1 + 184) = v22;
        *(_OWORD *)(a1 + 200) = v23;
      }
      else
      {
        v20 = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 208) = v20;
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        (**(void (***)(uint64_t, __int128 *))(v20 - 8))(a1 + 184, v19);
        *(_BYTE *)(a1 + 224) = 0;
      }
    }
  }
  return a1;
}

__n128 __swift_memcpy225_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for Resize(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    sub_1AC69634C(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    sub_1AC69634C(a1 + 88);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    sub_1AC69634C(a1 + 136);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    sub_1AC69634C(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Resize(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 225))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Resize(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 224) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 225) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 225) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t assignWithCopy for Resize.Rule(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain();
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for Resize.Rule(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Resize.Rule(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Resize.Rule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AC6FC8AC(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t assignWithCopy for Resize.Placements(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  if (a1 != a2)
  {
    sub_1AC69634C(a1 + 40);
    if (*(_BYTE *)(a2 + 80) == 1)
    {
      v9 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v9;
      *(_BYTE *)(a1 + 80) = 1;
      swift_retain();
    }
    else
    {
      v7 = (__int128 *)(a2 + 40);
      if (*(_BYTE *)(a2 + 80))
      {
        v10 = *v7;
        v11 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
        *(_OWORD *)(a1 + 40) = v10;
        *(_OWORD *)(a1 + 56) = v11;
      }
      else
      {
        v8 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v8;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1 + 40, v7);
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    sub_1AC69634C(a1 + 88);
    if (*(_BYTE *)(a2 + 128) == 1)
    {
      v14 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v14;
      *(_BYTE *)(a1 + 128) = 1;
      swift_retain();
    }
    else
    {
      v12 = (__int128 *)(a2 + 88);
      if (*(_BYTE *)(a2 + 128))
      {
        v15 = *v12;
        v16 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
        *(_OWORD *)(a1 + 88) = v15;
        *(_OWORD *)(a1 + 104) = v16;
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 112) = v13;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        (**(void (***)(uint64_t, __int128 *))(v13 - 8))(a1 + 88, v12);
        *(_BYTE *)(a1 + 128) = 0;
      }
    }
    sub_1AC69634C(a1 + 136);
    if (*(_BYTE *)(a2 + 176) == 1)
    {
      v19 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v19;
      *(_BYTE *)(a1 + 176) = 1;
      swift_retain();
    }
    else
    {
      v17 = (__int128 *)(a2 + 136);
      if (*(_BYTE *)(a2 + 176))
      {
        v20 = *v17;
        v21 = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
        *(_OWORD *)(a1 + 136) = v20;
        *(_OWORD *)(a1 + 152) = v21;
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 160) = v18;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        (**(void (***)(uint64_t, __int128 *))(v18 - 8))(a1 + 136, v17);
        *(_BYTE *)(a1 + 176) = 0;
      }
    }
    sub_1AC69634C(a1 + 184);
    if (*(_BYTE *)(a2 + 224) == 1)
    {
      v24 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v24;
      *(_BYTE *)(a1 + 224) = 1;
      swift_retain();
    }
    else
    {
      v22 = (__int128 *)(a2 + 184);
      if (*(_BYTE *)(a2 + 224))
      {
        v25 = *v22;
        v26 = *(_OWORD *)(a2 + 200);
        *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
        *(_OWORD *)(a1 + 184) = v25;
        *(_OWORD *)(a1 + 200) = v26;
      }
      else
      {
        v23 = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 208) = v23;
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        (**(void (***)(uint64_t, __int128 *))(v23 - 8))(a1 + 184, v22);
        *(_BYTE *)(a1 + 224) = 0;
      }
    }
  }
  v27 = *(_QWORD *)(a2 + 256);
  if (!*(_QWORD *)(a1 + 256))
  {
    if (v27)
    {
      *(_QWORD *)(a1 + 256) = v27;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 232, a2 + 232);
      return a1;
    }
LABEL_28:
    v28 = *(_OWORD *)(a2 + 232);
    v29 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 232) = v28;
    *(_OWORD *)(a1 + 248) = v29;
    return a1;
  }
  if (!v27)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 232);
    goto LABEL_28;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 232), (uint64_t *)(a2 + 232));
  return a1;
}

void *__swift_memcpy272_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for Resize.Placements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  if (a1 != a2)
  {
    sub_1AC69634C(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    sub_1AC69634C(a1 + 88);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    sub_1AC69634C(a1 + 136);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    sub_1AC69634C(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  }
  if (*(_QWORD *)(a1 + 256))
    __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  v6 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

uint64_t getEnumTagSinglePayload for Resize.Placements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Resize.Placements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Resize.Placements()
{
  return &type metadata for Resize.Placements;
}

void UIAccessibilityIdentification.setAutomationSemantics(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;

  v1 = v0;
  v2 = sub_1AC725E30();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AC725F44();
  sub_1AC725E24();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v6 = (void *)sub_1AC726208();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v6);

}

void NSTextStorage.juWritingDirectionOfLine(_:layoutManager:textContainer:)(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v8;
  id v9;
  _QWORD *v10;
  id v11;
  unint64_t v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD aBlock[5];
  _QWORD *v37;

  v4 = (uint64_t)v3;
  v5 = a3;
  v6 = a2;
  if (!a2)
  {
    v11 = objc_msgSend(v3, sel_layoutManagers);
    sub_1AC69C244(0, &qword_1EEC8B5F8);
    v12 = sub_1AC7263A0();

    if (v12 >> 62)
      goto LABEL_24;
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_25;
    goto LABEL_6;
  }
  v8 = a2;
  if (!a3)
    goto LABEL_10;
LABEL_3:
  v9 = v6;
  v10 = v5;
  while (1)
  {
    v18 = v5;
    v34 = v10;
    objc_msgSend(v8, sel_ensureLayoutForTextContainer_, v10);
    v19 = objc_msgSend((id)v4, sel_juFullRange);
    v35 = objc_msgSend(v8, sel_glyphRangeForCharacterRange_actualCharacterRange_, v19, v20, 0);
    v22 = v21;
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = 0;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = sub_1AC7257DC();
    v24 = (_QWORD *)(v23 + 16);
    *(_QWORD *)(v23 + 24) = 0;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_BYTE *)(v4 + 32) = 1;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v5;
    v25[3] = a1;
    v25[4] = v23;
    v25[5] = v8;
    v25[6] = v4;
    aBlock[4] = sub_1AC6FD418;
    v37 = v25;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1AC6FD444;
    aBlock[3] = &block_descriptor_7;
    v26 = _Block_copy(aBlock);
    v6 = v37;
    swift_retain();
    swift_retain();
    v27 = v8;
    swift_retain();
    swift_release();
    objc_msgSend(v27, sel_enumerateLineFragmentsForGlyphRange_usingBlock_, v35, v22, v26);
    _Block_release(v26);
    if (a1 == -1)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(v4 + 32) & 1) == 0)
      {
        v28 = objc_msgSend(v27, sel_characterRangeForGlyphRange_actualGlyphRange_, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0);
        v30 = v29;
        swift_beginAccess();
        *(_QWORD *)(v23 + 16) = v28;
        *(_QWORD *)(v23 + 24) = v30;
      }
    }
    v12 = sub_1AC7257DC();
    swift_beginAccess();
    if (v12 == *v24)
    {
      swift_release();
      swift_release();
      swift_release();

      return;
    }
    v31 = *(_QWORD *)(v23 + 24) + *v24;
    if (!__OFSUB__(v31, 1))
    {
      NSAttributedString.juStrongBaseWritingDirectionOfParagraph(atOrBefore:)(v31 - 1);
      swift_release();
      swift_release();
      swift_release();

      return;
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    v32 = sub_1AC726928();
    swift_bridgeObjectRelease();
    if (!v32)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_26;
    }
LABEL_6:
    if ((v12 & 0xC000000000000001) == 0)
      break;
LABEL_26:
    v13 = (id)MEMORY[0x1AF43FE40](0, v12);
LABEL_9:
    v8 = v13;
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
LABEL_10:
    v14 = v6;
    v15 = objc_msgSend(v8, sel_textContainers);
    sub_1AC69C244(0, &qword_1EEC8B600);
    v16 = sub_1AC7263A0();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v33 = sub_1AC726928();
      swift_bridgeObjectRelease();
      if (!v33)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_29:
        v17 = (_QWORD *)MEMORY[0x1AF43FE40](0, v16);
        goto LABEL_15;
      }
    }
    else if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_28;
    }
    if ((v16 & 0xC000000000000001) != 0)
      goto LABEL_29;
    if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_31;
    v17 = *(id *)(v16 + 32);
LABEL_15:
    v10 = v17;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v12 + 32);
    goto LABEL_9;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_1AC6FD284()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6FD294()
{
  return swift_deallocObject();
}

uint64_t sub_1AC6FD2A4()
{
  return swift_deallocObject();
}

void sub_1AC6FD2B4(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  CGRect v28;

  v28.size.height = a8;
  v28.size.width = a7;
  v28.origin.y = a6;
  v28.origin.x = a5;
  if (CGRectGetHeight(v28) != 0.0)
  {
    v24 = (_QWORD *)(a13 + 16);
    swift_beginAccess();
    if (*v24 == a14)
    {
      v25 = objc_msgSend(a16, sel_characterRangeForGlyphRange_actualGlyphRange_, a10, a11, 0);
      v27 = v26;
      swift_beginAccess();
      *(_QWORD *)(a15 + 16) = v25;
      *(_QWORD *)(a15 + 24) = v27;
      *a12 = 1;
    }
    else
    {
      swift_beginAccess();
      if (__OFADD__(*v24, 1))
      {
        __break(1u);
      }
      else
      {
        ++*v24;
        swift_beginAccess();
        *(_QWORD *)(a17 + 16) = a10;
        *(_QWORD *)(a17 + 24) = a11;
        *(_BYTE *)(a17 + 32) = 0;
      }
    }
  }
}

uint64_t sub_1AC6FD3DC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_1AC6FD418(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v12;

  sub_1AC6FD2B4(a5, a6, a7, a8, a9, a10, a11, a12, a1, a2, a3, a4, *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(void **)(v12 + 40), *(_QWORD *)(v12 + 48));
}

void sub_1AC6FD444(uint64_t a1, void *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  void (*v19)(double, double, double, double, double, double, double, double);
  id v20;

  v19 = *(void (**)(double, double, double, double, double, double, double, double))(a1 + 32);
  swift_retain();
  v20 = a2;
  v19(a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();

}

uint64_t sub_1AC6FD518(void *a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = a5;
  v11 = a1;
  NSTextStorage.juWritingDirectionOfLine(_:layoutManager:textContainer:)(a3, a4, a5);
  v13 = v12;

  return v13;
}

void *AppStore.FourLineTextLayout.init(primaryText:middleStationaryText:secondaryText:primaryFirstLineSpace:primarySecondLineSpace:middleStationaryLineSpace:secondaryFirstLineSpace:secondarySecondLineSpace:numberOfLines:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  void *result;
  _QWORD v20[42];

  sub_1AC68AAA4(a1, (uint64_t)v20);
  sub_1AC6FD688(a2, (uint64_t)&v20[5]);
  sub_1AC68AAA4(a3, (uint64_t)&v20[10]);
  sub_1AC68AAA4(a4, (uint64_t)&v20[15]);
  sub_1AC68AAA4(a5, (uint64_t)&v20[20]);
  sub_1AC68AAA4(a6, (uint64_t)&v20[25]);
  sub_1AC68AAA4(a7, (uint64_t)&v20[30]);
  sub_1AC68AAA4(a8, (uint64_t)&v20[35]);
  v20[40] = a10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
  v18 = swift_allocObject();
  result = memcpy((void *)(v18 + 16), v20, 0x148uLL);
  *a9 = v18;
  return result;
}

uint64_t sub_1AC6FD688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.FourLineTextLayout.primaryText.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 16;
  swift_beginAccess();
  return sub_1AC68E218(v3, a1);
}

uint64_t AppStore.FourLineTextLayout.primaryText.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(__src, a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1AC6FD7FC(uint64_t a1, uint64_t a2)
{
  _s18FourLineTextLayoutV7StorageVwcp(a2, a1);
  return a2;
}

uint64_t sub_1AC6FD830(uint64_t a1, uint64_t a2)
{
  _s18FourLineTextLayoutV7StorageVwta(a2, a1);
  return a2;
}

void (*AppStore.FourLineTextLayout.primaryText.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1 + 16;
  swift_beginAccess();
  sub_1AC68E218(v4, (uint64_t)v3);
  return sub_1AC6FD8D0;
}

void sub_1AC6FD8D0(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.primaryText.setter);
}

uint64_t AppStore.FourLineTextLayout.middleStationaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC6FD924(v3 + 56, a1);
}

uint64_t sub_1AC6FD924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AppStore.FourLineTextLayout.middleStationaryText.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE __src[328];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  sub_1AC6FDA58(a1, (uint64_t)&__src[40]);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return sub_1AC6FDAA0(a1);
}

uint64_t sub_1AC6FDA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AC6FDAA0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC8B608);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*AppStore.FourLineTextLayout.middleStationaryText.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC6FD924(v4 + 56, (uint64_t)v3);
  return sub_1AC6FDB48;
}

void sub_1AC6FDB48(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_1AC6FD924(*a1, (uint64_t)v2 + 40);
    AppStore.FourLineTextLayout.middleStationaryText.setter((uint64_t)v2 + 40);
    sub_1AC6FDAA0((uint64_t)v2);
  }
  else
  {
    AppStore.FourLineTextLayout.middleStationaryText.setter(*a1);
  }
  free(v2);
}

uint64_t AppStore.FourLineTextLayout.secondaryText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 96, a1);
}

uint64_t AppStore.FourLineTextLayout.secondaryText.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(&__src[10], a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.FourLineTextLayout.secondaryText.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 96, (uint64_t)v3);
  return sub_1AC6FDD44;
}

void sub_1AC6FDD44(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.secondaryText.setter);
}

uint64_t AppStore.FourLineTextLayout.primaryFirstLineSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 136, a1);
}

uint64_t AppStore.FourLineTextLayout.primaryFirstLineSpace.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(&__src[15], a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.FourLineTextLayout.primaryFirstLineSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 136, (uint64_t)v3);
  return sub_1AC6FDEEC;
}

void sub_1AC6FDEEC(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.primaryFirstLineSpace.setter);
}

uint64_t AppStore.FourLineTextLayout.primarySecondLineSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 176, a1);
}

uint64_t AppStore.FourLineTextLayout.primarySecondLineSpace.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(&__src[20], a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.FourLineTextLayout.primarySecondLineSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 176, (uint64_t)v3);
  return sub_1AC6FE094;
}

void sub_1AC6FE094(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.primarySecondLineSpace.setter);
}

uint64_t AppStore.FourLineTextLayout.middleStationaryLineSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 216, a1);
}

uint64_t AppStore.FourLineTextLayout.middleStationaryLineSpace.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(&__src[25], a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.FourLineTextLayout.middleStationaryLineSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 216, (uint64_t)v3);
  return sub_1AC6FE23C;
}

void sub_1AC6FE23C(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.middleStationaryLineSpace.setter);
}

void (*AppStore.FourLineTextLayout.secondaryFirstLineSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 256, (uint64_t)v3);
  return sub_1AC6FE2B8;
}

void sub_1AC6FE2B8(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.secondaryFirstLineSpace.setter);
}

uint64_t _s5JetUI8AppStoreO18FourLineTextLayoutV014secondaryFirstF5SpaceAA12AnyDimension_pvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  return sub_1AC68E218(v3 + 256, a1);
}

uint64_t _s5JetUI8AppStoreO18FourLineTextLayoutV014secondaryFirstF5SpaceAA12AnyDimension_pvs_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __swift_assign_boxed_opaque_existential_1(&__src[30], a1);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x148uLL);
    swift_release();
    *v1 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*AppStore.FourLineTextLayout.secondarySecondLineSpace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = *v1;
  swift_beginAccess();
  sub_1AC68E218(v4 + 256, (uint64_t)v3);
  return sub_1AC6FE468;
}

void sub_1AC6FE468(uint64_t *a1, char a2)
{
  sub_1AC6A65C4(a1, a2, (void (*)(char *))AppStore.FourLineTextLayout.secondarySecondLineSpace.setter);
}

uint64_t AppStore.FourLineTextLayout.numberOfLines.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 336);
}

uint64_t AppStore.FourLineTextLayout.numberOfLines.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD __src[41];

  v3 = *v1 + 16;
  swift_beginAccess();
  sub_1AC6FD7FC(v3, (uint64_t)__src);
  __src[40] = a1;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v4 = *v1 + 16;
    swift_beginAccess();
    sub_1AC6FD830((uint64_t)__src, v4);
    return swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEC8B610);
    v6 = swift_allocObject();
    memcpy((void *)(v6 + 16), __src, 0x148uLL);
    result = swift_release();
    *v1 = v6;
  }
  return result;
}

void (*AppStore.FourLineTextLayout.numberOfLines.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_beginAccess();
  v3[3] = *(_QWORD *)(v4 + 336);
  return sub_1AC6FE5E4;
}

void sub_1AC6FE5E4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  AppStore.FourLineTextLayout.numberOfLines.setter(*(_QWORD *)(*(_QWORD *)a1 + 24));
  free(v1);
}

double AppStore.FourLineTextLayout.measurements(fitting:in:)(uint64_t a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v5 = sub_1AC726A48();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  swift_beginAccess();
  sub_1AC68E218(v9 + 136, (uint64_t)v26);
  v10 = v27;
  v11 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  sub_1AC68E57C((uint64_t)v8);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v8, v10, v11);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  sub_1AC68E218(v9 + 176, (uint64_t)v23);
  v13 = v24;
  v14 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1AC68E57C((uint64_t)v8);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v8, v13, v14);
  v12(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  sub_1AC68E218(v9 + 256, (uint64_t)v26);
  v15 = v27;
  v16 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  sub_1AC68E57C((uint64_t)v8);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v8, v15, v16);
  v12(v8, v5);
  sub_1AC68E218(v9 + 256, (uint64_t)v23);
  v17 = v24;
  v18 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  sub_1AC68E57C((uint64_t)v8);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v8, v17, v18);
  v12(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  sub_1AC68E218(v9 + 136, (uint64_t)v26);
  v19 = v27;
  v20 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  sub_1AC68E57C((uint64_t)v8);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v8, v19, v20);
  v12(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return a2;
}

double AppStore.FourLineTextLayout.placeChildren(relativeTo:in:)@<D0>(uint64_t a1@<X0>, CGFloat *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t *v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  CGFloat v58;
  CGFloat v59;
  double MinX;
  CGFloat v61;
  double Width;
  uint64_t v63;
  uint64_t v64;
  double MaxY;
  uint64_t v66;
  uint64_t v67;
  CGFloat *v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, double, double);
  CGFloat v73;
  CGFloat v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  CGFloat v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  CGFloat v86;
  CGFloat v87;
  double v88;
  CGFloat v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  CGFloat v94;
  double MinY;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  double v99;
  CGFloat v100;
  double result;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  Swift::Int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  CGFloat v123;
  double v124;
  CGFloat v125;
  CGFloat v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  double v130;
  double v131;
  CGFloat *v132;
  double v133;
  CGFloat v134;
  CGFloat v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[3];
  uint64_t v140;
  uint64_t v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  JUMeasurements v158;

  v135 = a6;
  v134 = a5;
  v11 = sub_1AC726A48();
  v12 = *(double *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v16 = *v6 + 16;
  swift_beginAccess();
  sub_1AC68E218(v16, (uint64_t)v139);
  v17 = v140;
  v18 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v18);
  v132 = a2;
  if ((v19 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    goto LABEL_8;
  }
  sub_1AC6FD924(v15 + 56, (uint64_t)&v136);
  v20 = v137;
  if (v137)
  {
    v21 = v138;
    __swift_project_boxed_opaque_existential_1(&v136, v137);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88))(v20, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v136);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    if ((v22 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    sub_1AC6FDAA0((uint64_t)&v136);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  }
  sub_1AC68E218(v15 + 96, (uint64_t)v139);
  v127 = v12;
  v23 = v140;
  v24 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 88);
  v26 = v24;
  v12 = v127;
  v27 = v25(v23, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  if ((v27 & 1) != 0)
  {
LABEL_8:
    sub_1AC68E218(v16, (uint64_t)v139);
    v28 = v140;
    v29 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 24))(1, v28, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    sub_1AC68E218(v15 + 96, (uint64_t)v139);
    v30 = v140;
    v31 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 24))(1, v30, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    sub_1AC68E218(v16, (uint64_t)v139);
    v32 = v140;
    v33 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    v34 = v134;
    v35 = v135;
    (*(void (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8) + 8))(a1, v32, v134, v135);
    v37 = v36;
    v133 = v38;
    v129 = v39;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    sub_1AC68E218(v15 + 96, (uint64_t)v139);
    v40 = v140;
    v41 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 8))(a1, v40, v34, v35);
    v130 = v42;
    v128 = v43;
    v131 = v44;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    goto LABEL_9;
  }
  *(_QWORD *)&v131 = v15 + 56;
  sub_1AC68E218(v16, (uint64_t)v139);
  v102 = v140;
  v103 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v103 + 24))(*(_QWORD *)(v15 + 336), v102, v103);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v16, (uint64_t)v139);
  v105 = v140;
  v104 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v106 = (*(double (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(*(_QWORD *)(v104 + 8) + 8) + 8))(a1, v105, v134, v135);
  v37 = v107;
  v109 = v108;
  v111 = v110;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v16, (uint64_t)v139);
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v158.var0 = v106;
  v158.var1 = v37;
  v133 = v109;
  v158.var2 = v109;
  v158.var3 = v111;
  v112 = LayoutTextView.estimatedNumberOfLines(from:)(v158);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v15 + 96, (uint64_t)v139);
  v113 = v140;
  v114 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v129 = v111;
  if (v112 >= 2 && (sub_1AC6FD924(*(uint64_t *)&v131, (uint64_t)&v136), v115 = v137, sub_1AC6FDAA0((uint64_t)&v136), v115))
    v116 = 1;
  else
    v116 = *(_QWORD *)(v15 + 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 24))(v116, v113, v114);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v15 + 96, (uint64_t)v139);
  v117 = v140;
  v118 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  (*(void (**)(uint64_t, uint64_t, CGFloat, CGFloat))(*(_QWORD *)(*(_QWORD *)(v118 + 8) + 8) + 8))(a1, v117, v134, v135);
  v130 = v119;
  v128 = v120;
  v131 = v121;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  v12 = v127;
LABEL_9:
  sub_1AC6FD924(v15 + 56, (uint64_t)v139);
  v45 = v140;
  if (v140)
  {
    v46 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24))(1, v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  }
  else
  {
    sub_1AC6FDAA0((uint64_t)v139);
  }
  sub_1AC68E218(v15 + 136, (uint64_t)v139);
  v47 = v140;
  v48 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  sub_1AC68E57C((uint64_t)v14);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v14, v47, v48);
  v50 = v49;
  v51 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v12 + 8);
  v51(v14, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v15 + 216, (uint64_t)v139);
  v52 = v140;
  v53 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  sub_1AC68E57C((uint64_t)v14);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v14, v52, v53);
  v123 = v54;
  v51(v14, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  sub_1AC68E218(v15 + 256, (uint64_t)v139);
  v55 = v140;
  v56 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  sub_1AC68E57C((uint64_t)v14);
  AnyDimension.value(in:rounded:)(a1, (uint64_t)v14, v55, v56);
  v124 = v57;
  v51(v14, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  v142.origin.x = a3;
  v142.origin.y = a4;
  v58 = v134;
  v142.size.width = v134;
  v59 = v135;
  v142.size.height = v135;
  MinX = CGRectGetMinX(v142);
  v143.origin.x = a3;
  v143.origin.y = a4;
  v143.size.width = v58;
  v143.size.height = v59;
  v61 = v50 - v133 + CGRectGetMinY(v143);
  v144.origin.x = a3;
  v144.origin.y = a4;
  v144.size.width = v58;
  v144.size.height = v59;
  Width = CGRectGetWidth(v144);
  sub_1AC68E218(v16, (uint64_t)v139);
  v64 = v140;
  v63 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  (*(void (**)(uint64_t, double, CGFloat, double, double))(*(_QWORD *)(v63 + 8) + 24))(v64, MinX, v61, Width, v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  v127 = MinX;
  v145.origin.x = MinX;
  v126 = v61;
  v145.origin.y = v61;
  v125 = Width;
  v145.size.width = Width;
  v145.size.height = v37;
  MaxY = CGRectGetMaxY(v145);
  sub_1AC6FD924(v15 + 56, (uint64_t)v139);
  v66 = v140;
  if (v140)
  {
    v67 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 24))(1, v66, v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  }
  else
  {
    sub_1AC6FDAA0((uint64_t)v139);
  }
  v68 = v132;
  v69 = MaxY - v129;
  sub_1AC6FD924(v15 + 56, (uint64_t)&v136);
  if (v137)
  {
    sub_1AC68AAA4(&v136, (uint64_t)v139);
    v70 = v140;
    v71 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    v72 = *(void (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)(*(_QWORD *)(v71 + 8) + 8) + 8);
    v129 = v37;
    v73 = v134;
    v74 = v135;
    v72(a1, v70, v134, v135);
    v76 = v75;
    v78 = v77;
    v122 = v79;
    v146.origin.x = a3;
    v146.origin.y = a4;
    v146.size.width = v73;
    v146.size.height = v74;
    v80 = a4;
    v81 = CGRectGetMinX(v146);
    v82 = v69 + v123 - v78;
    v147.origin.x = a3;
    v147.origin.y = v80;
    v147.size.width = v73;
    v37 = v129;
    v147.size.height = v74;
    v83 = CGRectGetWidth(v147);
    v85 = v140;
    v84 = v141;
    __swift_project_boxed_opaque_existential_1(v139, v140);
    (*(void (**)(uint64_t, double, CGFloat, double, double))(*(_QWORD *)(v84 + 8) + 24))(v85, v81, v82, v83, v76);
    v148.origin.x = v81;
    a4 = v80;
    v148.origin.y = v82;
    v148.size.width = v83;
    v148.size.height = v76;
    v69 = CGRectGetMaxY(v148) - v122;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  }
  else
  {
    sub_1AC6FDAA0((uint64_t)&v136);
  }
  v149.origin.x = a3;
  v149.origin.y = a4;
  v86 = v134;
  v149.size.width = v134;
  v87 = v135;
  v149.size.height = v135;
  v88 = CGRectGetMinX(v149);
  v123 = v88;
  v89 = v124 - v128 + v69;
  v128 = v89;
  v150.origin.x = a3;
  v150.origin.y = a4;
  v150.size.width = v86;
  v150.size.height = v87;
  v90 = CGRectGetWidth(v150);
  v129 = v90;
  sub_1AC68E218(v15 + 96, (uint64_t)v139);
  v92 = v140;
  v91 = v141;
  __swift_project_boxed_opaque_existential_1(v139, v140);
  v93 = v88;
  v94 = v130;
  (*(void (**)(uint64_t, double, CGFloat, double, double))(*(_QWORD *)(v91 + 8) + 24))(v92, v93, v89, v90, v130);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  v151.origin.x = v127;
  v151.origin.y = v126;
  v151.size.width = v125;
  v151.size.height = v37;
  MinY = CGRectGetMinY(v151);
  v152.origin.x = a3;
  v152.origin.y = a4;
  v152.size.width = v86;
  v152.size.height = v87;
  v133 = v133 + MinY - CGRectGetMinY(v152);
  v153.origin.x = a3;
  v153.origin.y = a4;
  v153.size.width = v86;
  v153.size.height = v87;
  v96 = CGRectGetMinX(v153);
  v154.origin.x = a3;
  v154.origin.y = a4;
  v154.size.width = v86;
  v154.size.height = v87;
  v97 = CGRectGetMinY(v154);
  v155.origin.x = a3;
  v155.origin.y = a4;
  v155.size.width = v86;
  v155.size.height = v87;
  v98 = CGRectGetWidth(v155);
  v156.origin.x = v123;
  v156.origin.y = v128;
  v156.size.width = v129;
  v156.size.height = v94;
  v99 = CGRectGetMaxY(v156);
  v157.origin.x = a3;
  v157.origin.y = a4;
  v157.size.width = v86;
  v157.size.height = v87;
  v100 = CGRectGetMinY(v157);
  *v68 = v96;
  v68[1] = v97;
  v68[2] = v98;
  v68[3] = v99 - v100;
  result = v131;
  v68[4] = v133;
  v68[5] = result;
  return result;
}

