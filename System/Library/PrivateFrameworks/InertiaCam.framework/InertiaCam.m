void sub_1D4D50FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4D51040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4D510CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4D51134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float64x2_t *sub_1D4D51194(float64x2_t *result, float64x2_t *a2, int a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;

  v5 = a2->f64[1];
  if ((float)a3 < (float)a4)
    v6 = (float)a4;
  else
    v6 = (float)a3;
  v7 = 1.0 / v6;
  v8 = v6 + v6;
  v4 = a2->f64[0];
  v9 = (float)((float)(v5 * 0.0) + (float)(v7 * v4)) - (float)((float)a3 / v8);
  v10 = (float)((float)(v7 * v5) + (float)(v9 * 0.0)) - (float)((float)a4 / v8);
  v11 = (float)((float)(v10 * 0.0) + (float)(v9 * 0.0)) + 1.0;
  v12 = v10 / v11;
  v13 = (float)(v9 / v11);
  v14 = (double)a3;
  v15 = v12;
  if ((double)a3 < (double)a4)
    v14 = (double)a4;
  v16 = vdivq_f64(a2[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
  result->f64[0] = v13;
  result->f64[1] = v15;
  result[1] = v16;
  return result;
}

id CreateCorrectionHomographiesWithNewImageCoordinates(void *a1, _QWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  ICCreateCorrectionHomographiesWithNewImageCoordinates(a1, a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id ICCreateCorrectionHomographiesWithNewImageCoordinates(void *a1, _QWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v9;
  unint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  uint64_t v16;
  float64x2_t v17;
  id v18;
  const __CFDictionary *v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  double v38;
  double v39;
  double v40;
  double v41;
  int8x16_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  CMTime *v47;
  uint64_t v48;
  double v49;
  double *p_value;
  double v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  double v57;
  double *v58;
  double v59;
  uint64_t v60;
  float64x2_t v61;
  void *v62;
  void *v63;
  CFDictionaryRef v64;
  CFDictionaryRef v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  id obj;
  const __CFAllocator *allocator;
  uint64_t v78;
  void *v79;
  void *v80;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  uint64_t v84;
  float64x2_t v86;
  const __CFDictionary *v87;
  void *v88;
  void *v89;
  CMTime time;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  CGRect v95;
  CGRect rect;
  uint64_t v97;
  const __CFString *v98;
  _OWORD v99[4];
  uint64_t v100;
  _QWORD v101[9];
  CMTimeValue v102;
  CMTimeScale v103;
  _BYTE v104[128];
  uint64_t v105;
  const __CFString *v106;
  uint64_t v107;
  const __CFString *v108;
  uint64_t v109;
  const __CFString *v110;
  uint64_t v111;
  const __CFString *v112;
  uint64_t v113;
  const __CFString *v114;
  CGSize size;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _OWORD v120[4];
  uint64_t v121;
  CMTime v122;
  double v123;
  double v124;
  double v125;
  int8x16_t v126;
  double v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  CGRect v134;
  CGRect v135;

  v133 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = 0x1E0C99000uLL;
  v88 = v9;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 0);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", IC_A_INPUT_IMAGE_BOUNDS);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v87 = v11;
  if (!v11)
  {
    if (a2)
    {
      v113 = *MEMORY[0x1E0CB2938];
      v114 = CFSTR("Missing bounds rect in corrections\n");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v114, &v113, 1);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2, v67);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_55;
  }
  if (!CGRectMakeWithDictionaryRepresentation(v11, &rect))
  {
    if (a2)
    {
      v111 = *MEMORY[0x1E0CB2938];
      v112 = CFSTR("bad bounds rect in corrections\n");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v112, &v111, 1);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2, v68);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_55;
  }
  objc_msgSend(v9, "objectForKeyedSubscript:", IC_A_CROP_RECT);
  v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!CGRectMakeWithDictionaryRepresentation(v12, &v95))
  {
    if (a2)
    {
      v109 = *MEMORY[0x1E0CB2938];
      v110 = CFSTR("bad crop rect in corrections\n");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v110, &v109, 1);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2, v69);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_54;
  }

  objc_msgSend(v9, "objectForKeyedSubscript:", IC_A_SOURCE_SIZE);
  v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!CGSizeMakeWithDictionaryRepresentation(v12, &size))
  {
    if (a2)
    {
      v107 = *MEMORY[0x1E0CB2938];
      v108 = CFSTR("Missing source size in corrections\n");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v108, &v107, 1);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2, v70);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
LABEL_54:

LABEL_55:
    v66 = 0;
    goto LABEL_56;
  }
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(size);
  objc_msgSend(v89, "setObject:forKeyedSubscript:", DictionaryRepresentation, IC_A_SOURCE_SIZE);

  v134.origin.x = a3;
  v134.origin.y = a4;
  v134.size.height = a6;
  v134.size.width = a5;
  v14 = CGRectCreateDictionaryRepresentation(v134);
  objc_msgSend(v89, "setObject:forKeyedSubscript:", v14, IC_A_INPUT_IMAGE_BOUNDS);

  v135.origin.x = a3 + a5 / rect.size.width * (v95.origin.x - rect.origin.x);
  v135.origin.y = a4 + a6 / rect.size.height * (v95.origin.y - rect.origin.y);
  v135.size.width = a5 / rect.size.width * v95.size.width;
  v135.size.height = a6 / rect.size.height * v95.size.height;
  v15 = CGRectCreateDictionaryRepresentation(v135);
  objc_msgSend(v89, "setObject:forKeyedSubscript:", v15, IC_A_CROP_RECT);

  objc_msgSend(v9, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (v73)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    obj = v73;
    v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v104, 16);
    if (v16)
    {
      v78 = *(_QWORD *)v92;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v17.f64[0] = a5;
      v17.f64[1] = a6;
      v86 = v17;
      v74 = a2;
LABEL_8:
      v84 = 0;
      v75 = v16;
      while (1)
      {
        if (*(_QWORD *)v92 != v78)
          objc_enumerationMutation(obj);
        v18 = *(id *)(*((_QWORD *)&v91 + 1) + 8 * v84);
        objc_msgSend(v18, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_RAWTIME);
        v19 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        CMTimeMakeFromDictionary(&v122, v19);
        *(_QWORD *)&v120[0] = v122.value;
        flags = v122.flags;
        DWORD2(v120[0]) = v122.timescale;
        epoch = v122.epoch;

        if ((flags & 1) == 0)
          break;
        v102 = *(_QWORD *)&v120[0];
        v103 = DWORD2(v120[0]);
        objc_msgSend(v18, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_HOMOGRAPHY);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v20, "count") != 9)
        {

          goto LABEL_61;
        }
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v21 = v20;
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v128, &size, 16);
        if (v22)
        {
          v23 = 0;
          v24 = *(_QWORD *)v129;
          do
          {
            v25 = 0;
            v26 = v23;
            v27 = &v101[v23];
            do
            {
              if (*(_QWORD *)v129 != v24)
                objc_enumerationMutation(v21);
              objc_msgSend(*(id *)(*((_QWORD *)&v128 + 1) + 8 * v25), "doubleValue", v73);
              v27[v25++] = v28;
            }
            while (v22 != v25);
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v128, &size, 16);
            v23 = v26 + v25;
          }
          while (v22);

          a2 = v74;
          v16 = v75;
          v10 = 0x1E0C99000;

        }
        else
        {

        }
        _D1 = rect.origin.x;
        _D4 = rect.origin.y;
        _Q0 = vdivq_f64(v86, (float64x2_t)rect.size);
        __asm
        {
          FMLS            D2, D1, V0.D[0]
          FMLS            D3, D4, V0.D[1]
        }
        v128 = *(unint64_t *)&_Q0.f64[0];
        v129 = *(unint64_t *)&_D2;
        *(float64_t *)&v130 = _Q0.f64[1];
        *((double *)&v130 + 1) = _D3;
        v131 = 0uLL;
        v132 = 0x3FF0000000000000;
        v38 = _Q0.f64[1] - _D3 * 0.0;
        v39 = _D2 * 0.0;
        *(double *)&v122.value = v38;
        *(double *)&v122.timescale = _D2 * 0.0;
        v40 = _D3 * 0.0 - _Q0.f64[1] * _D2;
        *(double *)&v122.epoch = v40;
        v41 = vmlad_n_f64(_D2 * 0.0 * 0.0, v38, _Q0.f64[0]) + v40 * 0.0;
        if (v41 >= 2.22044605e-16 || v41 <= -2.22044605e-16)
        {
          *(double *)&v122.value = v38 / v41;
          *(double *)&v122.timescale = v39 / v41;
          *(double *)&v122.epoch = v40 / v41;
          v123 = _D3 * 0.0 / v41;
          v124 = (_Q0.f64[0] - v39) / v41;
          v125 = (_D2 * 0.0 - _Q0.f64[0] * _D3) / v41;
          v43 = (int8x16_t)vdivq_f64(vsubq_f64((float64x2_t)0, vmulq_f64(_Q0, (float64x2_t)0)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0));
          v126 = vextq_s8(v43, v43, 8uLL);
          v127 = _Q0.f64[0] * _Q0.f64[1] / v41;
        }
        v44 = 0;
        v45 = v101;
        do
        {
          v46 = 0;
          v47 = &v122;
          do
          {
            v48 = 0;
            v49 = 0.0;
            p_value = (double *)&v47->value;
            do
            {
              v51 = *p_value;
              p_value += 3;
              v49 = v49 + *(double *)&v45[v48++] * v51;
            }
            while (v48 != 3);
            *(&size.width + 3 * v44 + v46++) = v49;
            v47 = (CMTime *)((char *)v47 + 8);
          }
          while (v46 != 3);
          ++v44;
          v45 += 3;
        }
        while (v44 != 3);
        v52 = 0;
        v120[2] = v117;
        v120[3] = v118;
        v121 = v119;
        v120[0] = size;
        v120[1] = v116;
        v53 = &v128;
        do
        {
          v54 = 0;
          v55 = v120;
          do
          {
            v56 = 0;
            v57 = 0.0;
            v58 = (double *)v55;
            do
            {
              v59 = *v58;
              v58 += 3;
              v57 = v57 + *(double *)((char *)v53 + v56) * v59;
              v56 += 8;
            }
            while (v56 != 24);
            *(&size.width + 3 * v52 + v54++) = v57;
            v55 = (_OWORD *)((char *)v55 + 8);
          }
          while (v54 != 3);
          ++v52;
          v53 = (__int128 *)((char *)v53 + 24);
        }
        while (v52 != 3);
        v60 = 0;
        v100 = v119;
        v99[2] = v117;
        v99[3] = v118;
        v99[0] = size;
        v99[1] = v116;
        v61 = (float64x2_t)vdupq_lane_s64(v119, 0);
        do
        {
          v99[v60] = vdivq_f64((float64x2_t)v99[v60], v61);
          ++v60;
        }
        while (v60 != 4);
        v100 = 0x3FF0000000000000;
        objc_msgSend(*(id *)(v10 + 3592), "dictionaryWithCapacity:", 0);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D4D51DEC((uint64_t)v99);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v63, IC_A_FRAMETRANSFORM_HOMOGRAPHY);

        time.value = v102;
        time.timescale = v103;
        time.flags = flags;
        time.epoch = epoch;
        v64 = CMTimeCopyAsDictionary(&time, allocator);
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v64, IC_A_FRAMETRANSFORM_RAWTIME);

        objc_msgSend(v79, "addObject:", v62);
        if (++v84 == v16)
        {
          v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v104, 16);
          if (v16)
            goto LABEL_8;
          goto LABEL_44;
        }
      }

LABEL_61:
      if (a2)
      {
        v97 = *MEMORY[0x1E0CB2938];
        v98 = CFSTR("bad frame instruction\n");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2, v72);
        *a2 = (id)objc_claimAutoreleasedReturnValue();

      }
      v66 = 0;
      goto LABEL_64;
    }
LABEL_44:

    objc_msgSend(v89, "setObject:forKeyedSubscript:", v79, IC_A_FRAMEINSTRUCTIONS);
    v65 = CGRectCreateDictionaryRepresentation(rect);
    objc_msgSend(v89, "setObject:forKeyedSubscript:", v65, IC_A_CONVERTED_FROM_BOUNDS);

    v66 = v89;
LABEL_64:

  }
  else if (a2)
  {
    v105 = *MEMORY[0x1E0CB2938];
    v106 = CFSTR("Missing frame instructions\n");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v106, &v105, 1, 0);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 2);
    v66 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v66 = 0;
  }

LABEL_56:
  return v66;
}

void sub_1D4D51C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{

  _Unwind_Resume(a1);
}

id sub_1D4D51DEC(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 9);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 72; i += 8)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + i));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v4);

  }
  return v2;
}

void sub_1D4D51E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ICGetIdentityHomographies(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v6;
  void *v7;
  const __CFAllocator *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  CFDictionaryRef v15;
  CMTime time;
  _QWORD v18[10];

  v18[9] = *MEMORY[0x1E0C80C00];
  if (sub_1D4D5207C(a1))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = 0x3FF0000000000000;
    memset(&v18[1], 0, 24);
    v18[4] = 0x3FF0000000000000;
    memset(&v18[5], 0, 24);
    v18[8] = 0x3FF0000000000000;
    sub_1D4D51DEC((uint64_t)v18);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2 <= a3)
    {
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9 = a3 + 1;
      v10 = 304 * a2 + 112;
      do
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        v13 = *(_QWORD *)(a1 + 24);
        if (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a1 + 32) - v13) >> 4) <= a2)
          sub_1D4D5DDC8();
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v7, CFSTR("homography"));
        v14 = *(_OWORD *)(v13 + v10);
        time.epoch = *(_QWORD *)(v13 + v10 + 16);
        *(_OWORD *)&time.value = v14;
        v15 = CMTimeCopyAsDictionary(&time, v8);
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("rawTime"));

        objc_msgSend(v6, "addObject:", v12);
        ++a2;
        v10 += 304;
      }
      while (v9 != a2);
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_1D4D5203C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5207C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  CMTimeEpoch v4;
  CMTime v5;
  CMTime time1;
  CMTime v7;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    v2 = *(_QWORD *)(result + 32);
    if (v1 != v2)
    {
      v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
      v3 = "Error: ICResult contains out-of-order presentation times.";
      while (1)
      {
        time1 = v7;
        v4 = *(_QWORD *)(v1 + 128);
        *(_OWORD *)&v5.value = *(_OWORD *)(v1 + 112);
        v5.epoch = v4;
        if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0)
          break;
        if ((*(_DWORD *)(v1 + 124) & 0x1D) != 1)
        {
          v3 = "Error: ICResult contains homographies with invalid times.";
          break;
        }
        v7 = *(CMTime *)(v1 + 112);
        v1 += 304;
        if (v1 == v2)
          return 1;
      }
      puts(v3);
    }
    return 0;
  }
  return result;
}

id ICGetCoordinateShiftedHomographies(uint64_t a1, unint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v9;
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  double v25;
  double *v26;
  double v27;
  uint64_t v28;
  float64x2_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  CFDictionaryRef v34;
  id v37;
  CMTime time;
  _OWORD v39[4];
  uint64_t v40;
  _OWORD v41[4];
  uint64_t v42;
  _QWORD v43[9];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (sub_1D4D5207C(a1))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v37 = (id)objc_claimAutoreleasedReturnValue();
    v43[0] = 0x3FF0000000000000;
    memset(&v43[1], 0, 24);
    v43[4] = 0xBFF0000000000000;
    *(double *)&v43[5] = a5;
    v43[6] = 0;
    v43[7] = 0;
    v43[8] = 0x3FF0000000000000;
    if (a2 <= a3)
    {
      v9 = 304 * a2;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v11 = *(_QWORD *)(a1 + 24);
        if (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a1 + 32) - v11) >> 4) <= a2)
          sub_1D4D5DDC8();
        v12 = 0;
        v13 = v11 + v9;
        do
        {
          v14 = 0;
          v15 = (double *)v43;
          do
          {
            v16 = 0;
            v17 = 0.0;
            v18 = v15;
            do
            {
              v19 = *v18;
              v18 += 3;
              v17 = v17 + *(double *)(v13 + v16) * v19;
              v16 += 8;
            }
            while (v16 != 24);
            *((double *)&v44 + 3 * v12 + v14++) = v17;
            ++v15;
          }
          while (v14 != 3);
          ++v12;
          v13 += 24;
        }
        while (v12 != 3);
        v20 = 0;
        v39[2] = v46;
        v39[3] = v47;
        v40 = v48;
        v39[0] = v44;
        v39[1] = v45;
        v21 = v43;
        do
        {
          v22 = 0;
          v23 = v39;
          do
          {
            v24 = 0;
            v25 = 0.0;
            v26 = (double *)v23;
            do
            {
              v27 = *v26;
              v26 += 3;
              v25 = v25 + *(double *)&v21[v24++] * v27;
            }
            while (v24 != 3);
            *((double *)&v44 + 3 * v20 + v22++) = v25;
            v23 = (_OWORD *)((char *)v23 + 8);
          }
          while (v22 != 3);
          ++v20;
          v21 += 3;
        }
        while (v20 != 3);
        v28 = 0;
        v42 = v48;
        v41[2] = v46;
        v41[3] = v47;
        v41[0] = v44;
        v41[1] = v45;
        v29 = (float64x2_t)vdupq_lane_s64(v48, 0);
        do
        {
          v41[v28] = vdivq_f64((float64x2_t)v41[v28], v29);
          ++v28;
        }
        while (v28 != 4);
        v42 = 0x3FF0000000000000;
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D4D51DEC((uint64_t)v41);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, CFSTR("homography"));

        v32 = v11 + 304 * a2;
        v33 = *(_OWORD *)(v32 + 112);
        time.epoch = *(_QWORD *)(v32 + 128);
        *(_OWORD *)&time.value = v33;
        v34 = CMTimeCopyAsDictionary(&time, v10);
        objc_msgSend(v30, "setObject:forKeyedSubscript:", v34, CFSTR("rawTime"));

        objc_msgSend(v37, "addObject:", v30);
        v9 += 304;
      }
      while (a2++ < a3);
    }
  }
  else
  {
    v37 = 0;
  }
  return v37;
}

void sub_1D4D52458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id sub_1D4D5249C(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v4;
  int v6;
  int v7;
  int v8;
  float v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  double v42;
  double v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  double v49;
  void *v50;
  unint64_t v51;
  unsigned int v52;
  double v53;
  void *v54;
  id v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  __int128 v67[4];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = a1[1] - *a1;
  if (v4)
  {
    v6 = 678152731 * (v4 >> 4) - 1;
    if (a4 == -1)
      v7 = v6;
    else
      v7 = a4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v58 = (id)objc_claimAutoreleasedReturnValue();
    if (v7 >= a3)
    {
      if (SHIDWORD(a2) <= (int)a2)
        v8 = a2;
      else
        v8 = HIDWORD(a2);
      v9 = (float)v8;
      v10 = 304 * a3;
      v11 = v7 - a3 + 1;
      do
      {
        sub_1D4D7566C((uint64_t)&v59);
        v12 = *a1;
        sub_1D4D52CF0((uint64_t)v67, (double *)(*a1 + v10), a2, SHIDWORD(a2));
        sub_1D4D75334((uint64_t)&v59, v67);
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)*(uint64_t *)(v12 + v10 + 112) / (double)*(int *)(v12 + v10 + 120));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, CFSTR("time"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v61);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v15, CFSTR("h_geom_rotation"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v62);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v16, CFSTR("h_geom_scale"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v63);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v17, CFSTR("h_geom_diff_scale"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v64);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v18, CFSTR("h_geom_shear"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v59);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v19, CFSTR("h_geom_trans_x"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v60);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v20, CFSTR("h_geom_trans_y"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v65);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v21, CFSTR("h_geom_keystone1"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v66);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v22, CFSTR("h_geom_keystone2"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(v12 + v10 + 168));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v23, CFSTR("confidence"));

        if (*(_BYTE *)(v12 + v10 + 73))
          v24 = 1.0;
        else
          v24 = 0.0;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v25, CFSTR("interpolated"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(v12 + v10 + 192));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v26, CFSTR("inlierArea"));

        LODWORD(v27) = *(_DWORD *)(v12 + v10 + 196);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v28, CFSTR("feature_matches"));

        LODWORD(v29) = *(_DWORD *)(v12 + v10 + 212);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v30, CFSTR("max_features"));

        LODWORD(v31) = *(_DWORD *)(v12 + v10 + 200);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v32, CFSTR("feature_inliers"));

        LODWORD(v33) = *(_DWORD *)(v12 + v10 + 204);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v34, CFSTR("feature_priors"));

        LODWORD(v35) = *(_DWORD *)(v12 + v10 + 208);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v36, CFSTR("feature_currentPriors"));

        LODWORD(v37) = *(_DWORD *)(v12 + v10 + 204);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v38, CFSTR("feature_priors"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)(*(float *)(v12 + v10 + 216) / v9));
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v39, CFSTR("inliers_meanTravel"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)(*(float *)(v12 + v10 + 220) / v9));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v40, CFSTR("inliers_medianTravel"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)(*(float *)(v12 + v10 + 224) / v9));
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v41, CFSTR("inliers_maxTravel"));

        v42 = v60;
        v43 = v66;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v65 / (v59 + 0.0001));
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v44, CFSTR("h_geom_synth_keyRatio_x"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v43 / (v42 + 0.0001));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v45, CFSTR("h_geom_synth_keyRatio_y"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v64 / (fabs(v59) + fabs(v60) + 0.0001));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v46, CFSTR("h_geom_synth_shearRatio"));

        v48 = *(_DWORD *)(v12 + v10 + 204);
        if (v48)
        {
          LODWORD(v47) = *(_DWORD *)(v12 + v10 + 208);
          v49 = (double)v47 / (double)v48;
        }
        else
        {
          v49 = 0.0;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v50, CFSTR("synth_feature_cpratio"));

        v52 = *(_DWORD *)(v12 + v10 + 196);
        if (v52)
        {
          LODWORD(v51) = *(_DWORD *)(v12 + v10 + 200);
          v53 = (double)v51 / (double)v52;
        }
        else
        {
          v53 = 0.0;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v54, CFSTR("synth_feature_inlierRatio"));

        objc_msgSend(v58, "addObject:", v13);
        v10 += 304;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v58 = 0;
  }
  return v58;
}

void sub_1D4D52B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D52CF0(uint64_t result, double *a2, int a3, int a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  double *v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  double *v23;
  double v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  const double *v28;
  float64x2_t v29;
  _QWORD v30[9];
  double v31[9];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v4 = 0;
  v5 = (double)a3;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = (double)a4;
  if ((double)a3 < (double)a4)
    v7 = (double)a4;
  else
    v7 = (double)a3;
  v31[0] = 1.0 / v7;
  v31[1] = 0.0;
  v31[2] = -v5 / (v7 + v7);
  v31[3] = 0.0;
  v31[4] = 1.0 / v7;
  v31[5] = -v6 / (v7 + v7);
  v31[6] = 0.0;
  v31[7] = 0.0;
  v31[8] = 1.0;
  *(double *)v30 = v7;
  v30[1] = 0;
  *(double *)&v30[2] = v5 * 0.5;
  v30[3] = 0;
  *(double *)&v30[4] = v7;
  *(double *)&v30[5] = v6 * 0.5;
  v30[6] = 0;
  v30[7] = 0;
  v30[8] = 0x3FF0000000000000;
  v8 = v31;
  do
  {
    v9 = 0;
    v10 = a2;
    do
    {
      v11 = 0;
      v12 = 0.0;
      v13 = v10;
      do
      {
        v14 = *v13;
        v13 += 3;
        v12 = v12 + v8[v11++] * v14;
      }
      while (v11 != 3);
      *((double *)&v32 + 3 * v4 + v9++) = v12;
      ++v10;
    }
    while (v9 != 3);
    ++v4;
    v8 += 3;
  }
  while (v4 != 3);
  v15 = 0;
  v16 = v35;
  *(_OWORD *)(result + 32) = v34;
  *(_OWORD *)(result + 48) = v16;
  *(_QWORD *)(result + 64) = v36;
  v17 = v33;
  *(_OWORD *)result = v32;
  *(_OWORD *)(result + 16) = v17;
  v18 = result;
  do
  {
    v19 = 0;
    v20 = (double *)v30;
    do
    {
      v21 = 0;
      v22 = 0.0;
      v23 = v20;
      do
      {
        v24 = *v23;
        v23 += 3;
        v22 = v22 + *(double *)(v18 + v21) * v24;
        v21 += 8;
      }
      while (v21 != 24);
      *((double *)&v32 + 3 * v15 + v19++) = v22;
      ++v20;
    }
    while (v19 != 3);
    ++v15;
    v18 += 24;
  }
  while (v15 != 3);
  v25 = 0;
  v26 = v35;
  *(_OWORD *)(result + 32) = v34;
  *(_OWORD *)(result + 48) = v26;
  *(_QWORD *)(result + 64) = v36;
  v27 = v33;
  *(_OWORD *)result = v32;
  *(_OWORD *)(result + 16) = v27;
  v28 = (const double *)(result + 64);
  v29 = vld1q_dup_f64(v28);
  do
  {
    *(float64x2_t *)(result + v25) = vdivq_f64(*(float64x2_t *)(result + v25), v29);
    v25 += 16;
  }
  while (v25 != 64);
  *(_QWORD *)(result + 64) = 0x3FF0000000000000;
  return result;
}

id ICGetResultHomographies(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
    {
      a1 = 0;
    }
    else
    {
      sub_1D4D52F18((uint64_t *)(a1 + 24), a2, *(float64_t *)(a1 + 56), *(float64_t *)(a1 + 64), *(CGFloat *)(a1 + 72), *(CGFloat *)(a1 + 80), (double)*(int *)(a1 + 48), (double)*(int *)(a1 + 52));
      a1 = objc_claimAutoreleasedReturnValue();
    }
  }
  return (id)a1;
}

id sub_1D4D52F18(uint64_t *a1, int a2, float64_t a3, float64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  const __CFAllocator *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  CFDictionaryRef v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  double v32;
  void *v33;
  double v34;
  void *v35;
  double v36;
  void *v37;
  double v38;
  void *v39;
  double v40;
  void *v41;
  double v42;
  void *v43;
  double v44;
  void *v45;
  double v46;
  void *v47;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v49;
  CFDictionaryRef v50;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[2];
  CGPoint v56;
  CGFloat v57;
  CGFloat v58;
  CMTime time;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  CGSize v65;
  CGRect v66;
  CGRect v67;

  v56.x = a3;
  v56.y = a4;
  v57 = a5;
  v58 = a6;
  v54 = 0;
  v55[0] = 0;
  v55[1] = 0;
  v12 = a1 + 1;
  sub_1D4D61DA4(&v54, *a1, a1[1], 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  v13 = v54;
  if (v55[0] != v54)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      sub_1D4D52CF0(v13 + v14, (double *)(*a1 + v14), (int)a7, (int)a8);
      ++v15;
      v13 = v54;
      v14 += 304;
    }
    while (0x86BCA1AF286BCA1BLL * ((v55[0] - v54) >> 4) > v15);
  }
  if (a2)
    v16 = &v54;
  else
    v16 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = a2;
  if (a2)
    v17 = v55;
  else
    v17 = v12;
  if (*v17 != *v16)
  {
    v18 = 0;
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = 112;
    do
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *v16;
      sub_1D4D51DEC(*v16 + v20 - 112);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, IC_A_FRAMETRANSFORM_HOMOGRAPHY);

      v24 = *(_OWORD *)(v22 + v20);
      time.epoch = *(_QWORD *)(v22 + v20 + 16);
      *(_OWORD *)&time.value = v24;
      v25 = CMTimeCopyAsDictionary(&time, v19);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v25, IC_A_FRAMETRANSFORM_RAWTIME);

      objc_msgSend(v53, "addObject:", v21);
      ++v18;
      v20 += 304;
    }
    while (v18 < 0x86BCA1AF286BCA1BLL * ((*v17 - *v16) >> 4));
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0, sub_1D4D7566C((uint64_t)&time).n128_f64[0]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v54;
  if (v55[0] != v54)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      sub_1D4D75334((uint64_t)&time, (__int128 *)(v28 + v29));
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 0);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      HIDWORD(v32) = HIDWORD(time.epoch);
      *(float *)&v32 = *(double *)&time.epoch;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v33, CFSTR("h_geom_rotation"));

      HIDWORD(v34) = HIDWORD(v60);
      *(float *)&v34 = v60;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v35, CFSTR("h_geom_scale"));

      HIDWORD(v36) = HIDWORD(v61);
      *(float *)&v36 = v61;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v37, CFSTR("h_geom_diff_scale"));

      HIDWORD(v38) = HIDWORD(v62);
      *(float *)&v38 = v62;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v39, CFSTR("h_geom_shear"));

      HIDWORD(v40) = HIDWORD(time.value);
      *(float *)&v40 = *(double *)&time.value;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v41, CFSTR("h_geom_trans_x"));

      HIDWORD(v42) = time.flags;
      *(float *)&v42 = *(double *)&time.timescale;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v43, CFSTR("h_geom_trans_y"));

      HIDWORD(v44) = HIDWORD(v63);
      *(float *)&v44 = v63;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v45, CFSTR("h_geom_keystone1"));

      HIDWORD(v46) = HIDWORD(v64);
      *(float *)&v46 = v64;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v47, CFSTR("h_geom_keystone2"));

      objc_msgSend(v27, "addObject:", v31);
      ++v30;
      v28 = v54;
      v29 += 304;
    }
    while (0x86BCA1AF286BCA1BLL * ((v55[0] - v54) >> 4) > v30);
  }
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v27, CFSTR("Decompositions"));

  objc_msgSend(v26, "setObject:forKeyedSubscript:", v53, IC_A_FRAMEINSTRUCTIONS);
  time.value = 0;
  *(_QWORD *)&time.timescale = 0;
  *(CGFloat *)&time.epoch = a7;
  v60 = a8;
  if (v52)
  {
    sub_1D4D51194((float64x2_t *)&time, (float64x2_t *)&time, (int)a7, (int)a8);
    sub_1D4D51194((float64x2_t *)&v56, (float64x2_t *)&v56, (int)a7, (int)a8);
  }
  v66.origin = v56;
  v66.size.width = v57;
  v66.size.height = v58;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v66);
  objc_msgSend(v26, "setObject:forKeyedSubscript:", DictionaryRepresentation, IC_A_CROP_RECT);

  v65.width = a7;
  v65.height = a8;
  v49 = CGSizeCreateDictionaryRepresentation(v65);
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v49, IC_A_SOURCE_SIZE);

  *(_QWORD *)&v67.origin.x = time.value;
  v67.origin.y = *(CGFloat *)&time.timescale;
  *(_QWORD *)&v67.size.width = time.epoch;
  v67.size.height = v60;
  v50 = CGRectCreateDictionaryRepresentation(v67);
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v50, IC_A_INPUT_IMAGE_BOUNDS);

  time.value = (CMTimeValue)&v54;
  sub_1D4D61D18((void ***)&time);
  return v26;
}

void sub_1D4D53458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  void *v12;
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 112) = &a12;
  sub_1D4D61D18((void ***)(v14 - 112));
  _Unwind_Resume(a1);
}

float ICGetResultConfidence(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 92);
  else
    return 0.0;
}

float ICGetAnalysisConfidence(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 88);
  else
    return 0.0;
}

float ICGetAnomalyScore(uint64_t a1)
{
  float result;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  result = 0.0;
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v2 = (uint64_t *)(a1 + 24);
    if (v3 != v4)
      return sub_1D4D7CC00(v2);
  }
  return result;
}

id *ICGetResultStats(id *a1)
{
  if (a1)
    a1 = (id *)a1[2];
  return a1;
}

uint64_t ICDestroyResult(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id ICGetResultOptionalData(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  __CFDictionary *v10;
  double v11;

  v3 = a2;
  if (v3 && (sub_1D4D5207C(a1) & 1) != 0)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_D_PER_FRAME_FEATURES);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "BOOLValue");

    if (v6)
    {
      sub_1D4D5249C((uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), 0, -1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, IC_D_PER_FRAME_FEATURES);

    }
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_D_HOMOGRAPHY_METRICS);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "BOOLValue");

    if (v9)
    {
      v10 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
      *(float *)&v11 = sub_1D4DAD534((uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), v10);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, IC_D_HOMOGRAPHY_METRICS, v11);

    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1D4D536B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ICGetResultFramePresentationTimes(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  const __CFAllocator *v5;
  __int128 v6;
  CFDictionaryRef v7;
  CMTime v9;

  if (sub_1D4D5207C(a1))
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    if (v3 != v4)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v6 = *(_OWORD *)(v3 + 112);
        v9.epoch = *(_QWORD *)(v3 + 128);
        *(_OWORD *)&v9.value = v6;
        v7 = CMTimeCopyAsDictionary(&v9, v5);
        objc_msgSend(v2, "addObject:", v7);

        v3 += 304;
      }
      while (v3 != v4);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1D4D5379C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ICChangeCorrectionsForDimensions(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  double v16;
  double *v17;
  double v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double *v25;
  double v26;
  uint64_t v27;
  float64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[9];
  _QWORD v37[9];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(result + 32);
  if (v3 != v4)
  {
    v5 = (double)*(int *)(result + 48);
    v6 = (double)*(int *)(result + 52);
    v7 = a2 / v5;
    v8 = a3 / v6;
    v9 = v5 / a2;
    v10 = v6 / a3;
    do
    {
      v11 = 0;
      memset(&v37[1], 0, 24);
      *(double *)v37 = v7;
      *(double *)&v37[4] = v8;
      memset(&v37[5], 0, 24);
      v37[8] = 0x3FF0000000000000;
      memset(&v36[1], 0, 24);
      *(double *)v36 = v9;
      *(double *)&v36[4] = v10;
      memset(&v36[5], 0, 24);
      v12 = v37;
      v36[8] = 0x3FF0000000000000;
      do
      {
        v13 = 0;
        v14 = (double *)v3;
        do
        {
          v15 = 0;
          v16 = 0.0;
          v17 = v14;
          do
          {
            v18 = *v17;
            v17 += 3;
            v16 = v16 + *(double *)&v12[v15++] * v18;
          }
          while (v15 != 3);
          *((double *)&v38 + 3 * v11 + v13++) = v16;
          ++v14;
        }
        while (v13 != 3);
        ++v11;
        v12 += 3;
      }
      while (v11 != 3);
      v19 = 0;
      v33 = v40;
      v34 = v41;
      v35 = v42;
      v31 = v38;
      v32 = v39;
      v20 = &v31;
      do
      {
        v21 = 0;
        v22 = (double *)v36;
        do
        {
          v23 = 0;
          v24 = 0.0;
          v25 = v22;
          do
          {
            v26 = *v25;
            v25 += 3;
            v24 = v24 + *(double *)((char *)v20 + v23) * v26;
            v23 += 8;
          }
          while (v23 != 24);
          *((double *)&v38 + 3 * v19 + v21++) = v24;
          ++v22;
        }
        while (v21 != 3);
        ++v19;
        v20 = (__int128 *)((char *)v20 + 24);
      }
      while (v19 != 3);
      v27 = 0;
      v35 = v42;
      v33 = v40;
      v34 = v41;
      v31 = v38;
      v32 = v39;
      v28 = (float64x2_t)vdupq_lane_s64(v42, 0);
      do
      {
        *(__int128 *)((char *)&v31 + v27) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v31 + v27), v28);
        v27 += 16;
      }
      while (v27 != 64);
      v29 = v34;
      *(_OWORD *)(v3 + 32) = v33;
      *(_OWORD *)(v3 + 48) = v29;
      *(_QWORD *)(v3 + 64) = 0x3FF0000000000000;
      v30 = v32;
      *(_OWORD *)v3 = v31;
      *(_OWORD *)(v3 + 16) = v30;
      v3 += 304;
    }
    while (v3 != v4);
    *(_DWORD *)(result + 48) = (int)a2;
    *(_DWORD *)(result + 52) = (int)a3;
  }
  return result;
}

uint64_t ICGetCorrectionResultCropData(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;

  result = sub_1D4D5207C(a1);
  if ((_DWORD)result)
  {
    if (a2)
    {
      v5 = *(_OWORD *)(a1 + 72);
      *a2 = *(_OWORD *)(a1 + 56);
      a2[1] = v5;
    }
    return *(_BYTE *)(a1 + 232) != 0;
  }
  return result;
}

void ICStoreAnalyticsViaDodML(uint64_t a1, double *a2, double *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  double v12;
  void *v13;
  id v14;
  double v15;
  void *v16;
  id v17;
  double v18;
  void *v19;
  id v20;
  double v21;
  void *v22;
  id v23;
  double v24;
  void *v25;
  id v26;
  double v27;
  void *v28;
  id v29;
  double v30;
  void *v31;
  id v32;
  double v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  double v38;
  void *v39;
  id v40;
  double v41;
  uint64_t v42;
  id v43;
  double v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *context;
  id v55;
  _QWORD v56[2];
  _QWORD v57[8];

  v57[6] = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (a1 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
  {
    context = (void *)MEMORY[0x1D8268CC4]();
    v8 = (void *)objc_msgSend(objc_alloc(off_1ED988268()), "initWithBundleIdentifier:", CFSTR("com.apple.acg.powerspectrum"));
    v9 = v8;
    if (!v8 || (v53 = v8, v10 = objc_msgSend(v8, "shouldMakeRecord"), v9 = v53, (v10 & 1) == 0))
    {
LABEL_30:

      objc_autoreleasePoolPop(context);
      goto LABEL_31;
    }
    if (a2)
    {
      v11 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v12 = *a2;
      *(float *)&v12 = *a2;
      v13 = (void *)objc_msgSend(v11, "initWithFloat:", v12);
      v57[0] = v13;
      v14 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v15 = a2[1];
      *(float *)&v15 = v15;
      v16 = (void *)objc_msgSend(v14, "initWithFloat:", v15);
      v57[1] = v16;
      v17 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v18 = a2[2];
      *(float *)&v18 = v18;
      v19 = (void *)objc_msgSend(v17, "initWithFloat:", v18);
      v57[2] = v19;
      v20 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v21 = a2[3];
      *(float *)&v21 = v21;
      v22 = (void *)objc_msgSend(v20, "initWithFloat:", v21);
      v57[3] = v22;
      v23 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v24 = a2[4];
      *(float *)&v24 = v24;
      v25 = (void *)objc_msgSend(v23, "initWithFloat:", v24);
      v57[4] = v25;
      v26 = objc_alloc(MEMORY[0x1E0CB37E8]);
      v27 = a2[5];
      *(float *)&v27 = v27;
      v28 = (void *)objc_msgSend(v26, "initWithFloat:", v27);
      v57[5] = v28;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 6);
      v51 = (void *)objc_claimAutoreleasedReturnValue();

      if (a3)
      {
LABEL_7:
        v29 = objc_alloc(MEMORY[0x1E0CB37E8]);
        v30 = *a3;
        *(float *)&v30 = *a3;
        v31 = (void *)objc_msgSend(v29, "initWithFloat:", v30);
        v56[0] = v31;
        v32 = objc_alloc(MEMORY[0x1E0CB37E8]);
        v33 = a3[1];
        *(float *)&v33 = v33;
        v34 = (void *)objc_msgSend(v32, "initWithFloat:", v33);
        v56[1] = v34;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 2);
        v50 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_10:
        v52 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        if (v50)
          objc_msgSend(v52, "setObject:forKeyedSubscript:", v50, CFSTR("dimensions"));
        if (v51)
          objc_msgSend(v52, "setObject:forKeyedSubscript:", v51, CFSTR("preferredTransform"));
        if (v7)
          objc_msgSend(v52, "setObject:forKeyedSubscript:", v7, CFSTR("sourceType"));
        v48 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v49 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
        {
LABEL_24:
          v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          objc_msgSend(v40, "setObject:forKeyedSubscript:", v49, CFSTR("times"));
          objc_msgSend(v40, "setObject:forKeyedSubscript:", v48, CFSTR("homographies"));
          if (objc_msgSend(v52, "count"))
            objc_msgSend(v40, "setObject:forKeyedSubscript:", v52, CFSTR("info"));
          v55 = 0;
          objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v40, 0, &v55, v48);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = v55;
          if (v46)
            objc_msgSend(v53, "saveRecordWithData:recordInfo:completion:", v46, MEMORY[0x1E0C9AA70], &unk_1E988B190);

        }
        else
        {
          v35 = 0;
          v36 = 0;
LABEL_18:
          v37 = objc_alloc(MEMORY[0x1E0CB37E8]);
          *(float *)&v38 = (float)*(uint64_t *)(*(_QWORD *)(a1 + 24) + 304 * v36 + 112)
                         / (float)*(int *)(*(_QWORD *)(a1 + 24) + 304 * v36 + 120);
          v39 = (void *)objc_msgSend(v37, "initWithFloat:", v38);
          objc_msgSend(v49, "addObject:", v39);

          v40 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v41 = fabs(*(double *)(*(_QWORD *)(a1 + 24) + 304 * v36 + 64));
          if (v41 != INFINITY && v41 >= 1.0e-10)
          {
            v42 = 0;
            while (fabs(*(double *)(*(_QWORD *)(a1 + 24) + v35 + v42)) != INFINITY)
            {
              v43 = objc_alloc(MEMORY[0x1E0CB37E8]);
              v44 = *(double *)(*(_QWORD *)(a1 + 24) + v35 + v42) / *(double *)(*(_QWORD *)(a1 + 24) + 304 * v36 + 64);
              *(float *)&v44 = v44;
              v45 = (void *)objc_msgSend(v43, "initWithFloat:", v44);
              objc_msgSend(v40, "addObject:", v45);

              v42 += 8;
              if (v42 == 64)
              {
                objc_msgSend(v48, "addObject:", v40);

                ++v36;
                v35 += 304;
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) > v36)
                  goto LABEL_18;
                goto LABEL_24;
              }
            }
          }
        }

        v9 = v53;
        goto LABEL_30;
      }
    }
    else
    {
      v51 = 0;
      if (a3)
        goto LABEL_7;
    }
    v50 = 0;
    goto LABEL_10;
  }
LABEL_31:

}

void sub_1D4D53EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t ICAnalyzeInputMotion(void *a1, void *a2, void *a3, _DWORD *a4)
{
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  os_signpost_id_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_signpost_id_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  opaqueCMSampleBuffer *v32;
  __CVBuffer *ImageBuffer;
  int v34;
  id v35;
  int v36;
  id v37;
  char v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  os_signpost_id_t v42;
  NSObject *v44;
  void *v45;
  void *v46;
  _DWORD *v47;
  id v48;
  id v49;
  id v50;
  _OWORD v51[3];
  CMTime v52;
  id v53;
  __n128 v54;
  CMTimeEpoch epoch;
  CMSampleTimingInfo v56;
  id v57;
  _OWORD v58[3];
  CMTime v59;
  id v60;
  CMTime time2;
  CMTime time1;
  CMTime presentationTimeStamp;
  __int128 v64;
  _BYTE v65[32];
  __int128 v66[3];
  _BYTE v67[48];
  uint8_t buf[16];
  __int128 v69;
  __int128 v70;
  void *__p;
  void *v72;
  os_signpost_id_t v73;
  _QWORD v74[4];

  v74[2] = *MEMORY[0x1E0C80C00];
  v49 = a1;
  v50 = a2;
  v48 = a3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v7 = (id)qword_1ED988290;
  v8 = os_signpost_id_generate(v7);
  v73 = v8;
  v47 = a4;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v9 = (id)qword_1ED988290;
  v10 = v9;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ICAnalyzeInputMotion", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if (v49)
  {
    sub_1D4D54874(v48, (uint64_t)buf);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 875704422);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v74[0] = v11;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 875704438);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v74[1] = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 2);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    v66[0] = *(_OWORD *)buf;
    v66[1] = v69;
    v66[2] = v70;
    sub_1D4D819E4(v49, v66, v46, (uint64_t)v67);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v47;
    if (!v13)
    {
      if (v47)
        *v47 = 10;
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v21 = (id)qword_1ED988290;
      v22 = v21;
      v23 = v73;
      if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
      {
        LOWORD(v56.duration.value) = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v22, OS_SIGNPOST_EVENT, v23, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", (uint8_t *)&v56, 2u);
      }
      v20 = 0;
      goto LABEL_64;
    }
    objc_msgSend(v49, "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
    v44 = objc_claimAutoreleasedReturnValue();
    -[NSObject objectAtIndex:](v44, "objectAtIndex:", 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    v45 = v15;
    if (!v15)
    {
      if (v47)
        *v47 = 10;
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v40 = (id)qword_1ED988290;
      v41 = v40;
      v42 = v73;
      if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v40))
      {
        LOWORD(v56.duration.value) = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v41, OS_SIGNPOST_EVENT, v42, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", (uint8_t *)&v56, 2u);
      }

      v20 = 0;
      goto LABEL_63;
    }
    if ((buf[12] & 1) == 0
      || (BYTE4(v70) & 1) == 0
      || *((_QWORD *)&v70 + 1)
      || (*((_QWORD *)&v69 + 1) & 0x8000000000000000) != 0)
    {
      objc_msgSend(v15, "timeRange");
      v64 = *(_OWORD *)&v56.duration.value;
      *(_OWORD *)v65 = *(_OWORD *)&v56.duration.epoch;
      *(_OWORD *)&v65[16] = *(_OWORD *)&v56.presentationTimeStamp.timescale;
    }
    else
    {
      objc_msgSend(v13, "timeRange");
      v64 = *(_OWORD *)&v56.duration.value;
      *(_OWORD *)v65 = *(_OWORD *)&v56.duration.epoch;
      *(_OWORD *)&v65[16] = *(_OWORD *)&v56.presentationTimeStamp.timescale;
      objc_msgSend(v16, "timeRange");
      presentationTimeStamp = v56.presentationTimeStamp;
      time1 = *(CMTime *)&v65[8];
      time2 = v56.presentationTimeStamp;
      if (CMTimeCompare(&time1, &time2) >= 1)
        *(CMTime *)&v65[8] = presentationTimeStamp;
    }
    v60 = 0;
    v24 = ICAnalysisInit(v48, &v60);
    v25 = v60;
    v26 = v25;
    if (v24)
    {
      v27 = objc_opt_respondsToSelector();
      v28 = v27;
      if ((v27 & 1) != 0)
      {
        v59.epoch = *(_QWORD *)v65;
        v58[0] = v64;
        v58[1] = *(_OWORD *)v65;
        v58[2] = *(_OWORD *)&v65[16];
        *(_OWORD *)&v59.value = v64;
        sub_1D4D55358(&v59, (uint64_t)v58);
        v27 = objc_msgSend(v50, "ICReportProgress:");
      }
      v20 = 0;
      do
      {
        v29 = (void *)MEMORY[0x1D8268CC4](v27);
        if (objc_msgSend(v13, "status") == 1
          && (objc_msgSend(v13, "outputs"),
              v30 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v30, "objectAtIndex:", 0),
              v31 = (void *)objc_claimAutoreleasedReturnValue(),
              v30,
              v32 = (opaqueCMSampleBuffer *)objc_msgSend(v31, "copyNextSampleBuffer"),
              v31,
              v32))
        {
          CMSampleBufferGetSampleTimingInfo(v32, 0, &v56);
          ImageBuffer = CMSampleBufferGetImageBuffer(v32);
          v54 = *(__n128 *)&v56.presentationTimeStamp.value;
          epoch = v56.presentationTimeStamp.epoch;
          v53 = v26;
          v34 = ICAnalysisAddFrame(v24, ImageBuffer, &v54, v50, &v53);
          v35 = v53;

          v26 = v35;
          if ((v28 & 1) != 0)
          {
            v52 = v56.presentationTimeStamp;
            v51[0] = v64;
            v51[1] = *(_OWORD *)v65;
            v51[2] = *(_OWORD *)&v65[16];
            sub_1D4D55358(&v52, (uint64_t)v51);
            objc_msgSend(v50, "ICReportProgress:");
          }
          CFRelease(v32);
          v36 = 0;
        }
        else
        {
          v57 = v26;
          v20 = ICAnalysisStopAndGetResult(v24, &v57);
          v37 = v57;

          v34 = v20 != 0;
          v36 = 1;
          v26 = v37;
        }
        objc_autoreleasePoolPop(v29);
      }
      while ((v36 | v34 ^ 1) != 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v14 = v47;
      if (v47)
        v38 = v34;
      else
        v38 = 1;
      if ((v38 & 1) != 0)
        goto LABEL_62;
      v39 = objc_msgSend(v26, "code");
    }
    else
    {
      if (!v47)
      {
        v20 = 0;
        goto LABEL_62;
      }
      v39 = objc_msgSend(v25, "code");
      v20 = 0;
    }
    *v14 = v39;
LABEL_62:

LABEL_63:
    v22 = v44;
LABEL_64:

    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    goto LABEL_66;
  }
  puts("No input video, can't analyze.");
  if (v47)
    *v47 = 10;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v17 = (id)qword_1ED988290;
  v18 = v17;
  v19 = v73;
  if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v18, OS_SIGNPOST_EVENT, v19, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", buf, 2u);
  }

  v20 = 0;
LABEL_66:
  sub_1D4D560C0(&v73);

  return v20;
}

void sub_1D4D54740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  uint64_t v17;
  void *v19;

  v19 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v19;
    operator delete(v19);
  }
  sub_1D4D560C0((os_signpost_id_t *)(v17 - 120));

  _Unwind_Resume(a1);
}

id sub_1D4D5482C()
{
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  return (id)qword_1ED988290;
}

void sub_1D4D54874(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  void *v11;
  void *v12;
  unint64_t v13;
  char **v14;
  void *v15;
  void *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  CMTime duration;
  CMTime start;
  CMTimeRange v48;
  CMTime v49;
  CMTime v50;

  v3 = a1;
  sub_1D4D5DF1C(a2);
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_TRIM_START_TIME);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_TRIM_DURATION);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
        memset(&v50, 0, sizeof(v50));
        objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_TRIM_START_TIME);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v6;
        if (v6)
          objc_msgSend(v6, "CMTimeValue");
        else
          memset(&v50, 0, sizeof(v50));

        memset(&v49, 0, sizeof(v49));
        objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_TRIM_DURATION);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (v8)
          objc_msgSend(v8, "CMTimeValue");
        else
          memset(&v49, 0, sizeof(v49));

        start = v50;
        duration = v49;
        CMTimeRangeMake(&v48, &start, &duration);
        v10 = *(_OWORD *)&v48.start.epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v48.start.value;
        *(_OWORD *)(a2 + 16) = v10;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v48.duration.timescale;
      }
    }
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_LOOP_CLOSURE_PTS);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_LOOP_CLOSURE_PTS);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 0;
      v14 = (char **)(a2 + 48);
      while (objc_msgSend(v12, "count") > v13)
      {
        objc_msgSend(v12, "objectAtIndexedSubscript:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (v15)
          objc_msgSend(v15, "CMTimeRangeValue");
        else
          memset(&v48, 0, sizeof(v48));
        v17 = *(_OWORD **)(a2 + 56);
        v18 = *(_QWORD *)(a2 + 64);
        if ((unint64_t)v17 >= v18)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - *v14) >> 4);
          v23 = v22 + 1;
          if (v22 + 1 > 0x555555555555555)
            sub_1D4D5DFA8();
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)*v14) >> 4);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x2AAAAAAAAAAAAAALL)
            v25 = 0x555555555555555;
          else
            v25 = v23;
          if (v25)
            v26 = (char *)sub_1D4D5E030(a2 + 64, v25);
          else
            v26 = 0;
          v27 = &v26[48 * v22];
          v28 = *(_OWORD *)&v48.start.value;
          v29 = *(_OWORD *)&v48.duration.timescale;
          *((_OWORD *)v27 + 1) = *(_OWORD *)&v48.start.epoch;
          *((_OWORD *)v27 + 2) = v29;
          *(_OWORD *)v27 = v28;
          v31 = *(char **)(a2 + 48);
          v30 = *(char **)(a2 + 56);
          v32 = v27;
          if (v30 != v31)
          {
            do
            {
              v33 = *((_OWORD *)v30 - 3);
              v34 = *((_OWORD *)v30 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
              *((_OWORD *)v32 - 1) = v34;
              *((_OWORD *)v32 - 3) = v33;
              v32 -= 48;
              v30 -= 48;
            }
            while (v30 != v31);
            v30 = *v14;
          }
          v21 = v27 + 48;
          *(_QWORD *)(a2 + 48) = v32;
          *(_QWORD *)(a2 + 56) = v27 + 48;
          *(_QWORD *)(a2 + 64) = &v26[48 * v25];
          if (v30)
            operator delete(v30);
        }
        else
        {
          v19 = *(_OWORD *)&v48.start.value;
          v20 = *(_OWORD *)&v48.duration.timescale;
          v17[1] = *(_OWORD *)&v48.start.epoch;
          v17[2] = v20;
          *v17 = v19;
          v21 = v17 + 3;
        }
        *(_QWORD *)(a2 + 56) = v21;

        ++v13;
      }

    }
    objc_msgSend(v3, "objectForKeyedSubscript:", qword_1EFEC9A30);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", qword_1EFEC9A30);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "getValue:size:", a2 + 84, 56);

    }
    objc_msgSend(v3, "objectForKeyedSubscript:", qword_1EFEC9A38);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (v37)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", qword_1EFEC9A38);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "floatValue");
      *(_DWORD *)(a2 + 76) = v39;

    }
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_PREROLL_FRAME_COUNT);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (v40)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_PREROLL_FRAME_COUNT);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v41, "intValue");

      if ((v42 & 0x80000000) == 0)
        *(_DWORD *)(a2 + 80) = v42 + 1;
    }
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_COLLECT_FEATURE_POINTS);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 72) = objc_msgSend(v43, "BOOLValue");

    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_DISABLE_GPU_STABILIZATION);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 73) = objc_msgSend(v44, "BOOLValue");

    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_OPTIMIZE_FOR_MEMORY);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 74) = objc_msgSend(v45, "BOOLValue");

  }
}

void sub_1D4D54CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)(v10 + 48);
  if (v13)
  {
    *(_QWORD *)(v10 + 56) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t ICAnalysisInit(void *a1, _QWORD *a2)
{
  id v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint8_t v32[16];
  CMTime rhs;
  CMTime lhs;
  CMTime v35;
  __int128 v36;
  uint64_t v37;
  id to;
  id location;
  uint8_t buf[48];
  void *__p;
  _BYTE *v42;
  char v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  int v46;
  int v47;
  int v48;
  os_signpost_id_t v49;
  uint64_t v50;
  const __CFString *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t (**v54)();
  id v55;
  uint64_t (***v56)();
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v4 = (id)qword_1ED988290;
  v5 = os_signpost_id_generate(v4);
  v49 = v5;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v6 = (id)qword_1ED988290;
  v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ICAnalysisInit", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  sub_1D4D54874(v3, (uint64_t)buf);
  objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_RESULT_DELEGATE);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, v8);

  objc_copyWeak(&to, &location);
  v56 = 0;
  v54 = &off_1E988B020;
  objc_moveWeak(&v55, &to);
  v56 = &v54;
  objc_destroyWeak(&to);
  v9 = operator new();
  v10 = v44;
  v11 = v45;
  v12 = (uint64_t)v56;
  if (!v56)
    goto LABEL_11;
  if (v56 != &v54)
  {
    v12 = (*v56)[2]();
LABEL_11:
    v53 = (_BYTE *)v12;
    goto LABEL_13;
  }
  v53 = v52;
  ((void (*)(uint64_t, uint64_t))v54[3])((uint64_t)&v54, (uint64_t)v52);
LABEL_13:
  sub_1D4D875A0(v9, 0, 0, 0, 0xFFFFFFFFLL, v10 == 0, v11 != 0, (uint64_t)v52, v47);
  v13 = v53;
  if (v53 == v52)
  {
    v14 = 4;
    v13 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_18:
  *(_BYTE *)(v9 + 124) = v43;
  sub_1D4D87788(v9, (uint64_t)&v48);
  *(_DWORD *)(v9 + 64) = v46;
  v15 = (char *)__p;
  if (v42 != __p)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = &v15[v16];
      v19 = *(_OWORD *)v18;
      v37 = *((_QWORD *)v18 + 2);
      v36 = v19;
      v20 = *(_OWORD *)(v18 + 24);
      lhs.epoch = *((_QWORD *)v18 + 5);
      *(_OWORD *)&lhs.value = v20;
      v21 = *(_OWORD *)v18;
      rhs.epoch = *((_QWORD *)v18 + 2);
      *(_OWORD *)&rhs.value = v21;
      CMTimeAdd(&v35, &lhs, &rhs);
      sub_1D4D87890((_QWORD *)v9, (uint64_t)&v36, (uint64_t)&v35);
      ++v17;
      v15 = (char *)__p;
      v16 += 48;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v42 - (_BYTE *)__p) >> 4));
  }
  v22 = operator new();
  *(_OWORD *)(v22 + 208) = 0u;
  *(_OWORD *)(v22 + 224) = 0u;
  *(_OWORD *)(v22 + 176) = 0u;
  *(_OWORD *)(v22 + 192) = 0u;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_QWORD *)v22 = &off_1E988ABC8;
  *(_QWORD *)(v22 + 232) = 0;
  v23 = (uint64_t *)(v22 + 232);
  *(_QWORD *)(v22 + 240) = 0;
  if (sub_1D4D88CF8(v9))
  {
    v50 = *MEMORY[0x1E0CB2938];
    v51 = CFSTR("Error while beginning analysis");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), -1, v24);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v25 = (id)qword_1ED988290;
    v26 = v25;
    v27 = v49;
    if (v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
    {
      *(_WORD *)v32 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v26, OS_SIGNPOST_EVENT, v27, "ICAnalysisInit", "ANALYSIS_INIT_FAILED", v32, 2u);
    }

    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v22 = 0;
  }
  else
  {
    v28 = *v23;
    *v23 = v9;
    v9 = v28;
    if (!v28)
      goto LABEL_32;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_32:
  v29 = v56;
  if (v56 == &v54)
  {
    v30 = 4;
    v29 = &v54;
  }
  else
  {
    if (!v56)
      goto LABEL_37;
    v30 = 5;
  }
  (*v29)[v30]();
LABEL_37:
  objc_destroyWeak(&location);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  sub_1D4D56840(&v49);

  return v22;
}

void sub_1D4D55244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v42 = *(_QWORD **)(v40 - 96);
  if (v42 == (_QWORD *)(v40 - 120))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 120);
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_6:
  objc_destroyWeak(&location);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1D4D56840((os_signpost_id_t *)(v40 - 176));

  _Unwind_Resume(a1);
}

void sub_1D4D55358(CMTime *a1, uint64_t a2)
{
  CMTime v3;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  lhs = *a1;
  rhs = *(CMTime *)a2;
  CMTimeSubtract(&v7, &lhs, &rhs);
  time = v7;
  CMTimeGetSeconds(&time);
  v3 = *(CMTime *)(a2 + 24);
  CMTimeGetSeconds(&v3);
}

uint64_t ICAnalysisStopAndGetResult(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  float v35;
  StabilizationSuccessClassifier *v36;
  void *v37;
  int v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  NSObject *v45;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  os_signpost_id_t v54;
  uint8_t buf[16];
  uint64_t v56;
  float64x2_t v57;
  uint8_t *v58;
  uint64_t v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v4 = (id)qword_1ED988290;
  v5 = os_signpost_id_generate(v4);
  v54 = v5;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v6 = (id)qword_1ED988290;
  v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ICAnalysisStopAndGetResult", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if (!a1)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v39 = (id)qword_1ED988290;
    v40 = v39;
    if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v39))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v40, OS_SIGNPOST_EVENT, v54, "ICAnalysisStopAndGetResult", "IC_ERROR_BAD_INPUT", buf, 2u);
    }
    goto LABEL_46;
  }
  v8 = *(_QWORD *)(a1 + 232);
  if (!v8)
  {
    v59 = *MEMORY[0x1E0CB2938];
    v60[0] = CFSTR("Analysis is already complete");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, &v59, 1);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), -1, v43);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v44 = (id)qword_1ED988290;
    v45 = v44;
    if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v45, OS_SIGNPOST_EVENT, v54, "ICAnalysisStopAndGetResult", "IC_ERROR_UNSPECIFIED", buf, 2u);
    }

    goto LABEL_63;
  }
  if ((sub_1D4D88BA8(*(_QWORD *)(a1 + 232), 0, 1) & 1) == 0)
    sub_1D4D88CFC(v8);
  while (1)
  {
    v9 = atomic_load((unsigned __int8 *)(v8 + 136));
    if ((v9 & 1) == 0)
      break;
    usleep(0x3E8u);
  }
  v52 = vcvt_f32_s32(*(int32x2_t *)(a1 + 48));
  v57 = vcvtq_f64_f32(v52);
  v10 = operator new();
  v11 = v10;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_QWORD *)v10 = &off_1E988AAD8;
  v12 = (int)v52.f32[0];
  v13 = (int)v52.f32[1];
  *(_BYTE *)(v10 + 8) = 1;
  *(_DWORD *)(v10 + 48) = v12;
  *(_DWORD *)(v10 + 52) = v13;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(double *)(v10 + 72) = (double)(int)v12;
  *(double *)(v10 + 80) = (double)(int)v13;
  v14 = *(uint64_t **)(v8 + 56);
  if (!v14 || (v15 = *v14, v16 = v14[1], *v14 == v16))
  {
    v41 = sub_1D4D62080((_QWORD *)v10);
    MEMORY[0x1D826897C](v41, 0x10B1C40BB494BFCLL);
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 1, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v42 = (id)qword_1ED988290;
    v40 = v42;
    if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v40, OS_SIGNPOST_EVENT, v54, "ICAnalysisStopAndGetResult", "IC_ERROR_ANALYSIS_MALFORMED", buf, 2u);
    }
LABEL_46:

LABEL_63:
    v11 = 0;
    goto LABEL_64;
  }
  memset(buf, 0, sizeof(buf));
  v56 = 0;
  sub_1D4D61DA4(buf, v15, v16, 0x86BCA1AF286BCA1BLL * ((v16 - v15) >> 4));
  sub_1D4D62020((uint64_t *)(v11 + 24));
  *(_OWORD *)(v11 + 24) = *(_OWORD *)buf;
  *(_QWORD *)(v11 + 40) = v56;
  v56 = 0;
  memset(buf, 0, sizeof(buf));
  v58 = buf;
  sub_1D4D61D18((void ***)&v58);
  v53 = v12 | (v13 << 32);
  sub_1D4D897B0((_QWORD *)(v11 + 24), v53);
  v17 = (_QWORD *)operator new();
  *v17 = 0;
  v17[1] = 0;
  v17[2] = 0;
  *(_QWORD *)(v11 + 232) = v17;
  v18 = *(_QWORD *)(v8 + 488);
  if (*(_QWORD *)(v8 + 496) != v18)
  {
    v19 = 0;
    do
    {
      v20 = *(void ***)(v11 + 232);
      v21 = sub_1D4D5E09C(*(_QWORD *)(v18 + 8 * v19));
      v22 = (unint64_t)v20[2];
      v23 = (uint64_t *)v20[1];
      if ((unint64_t)v23 >= v22)
      {
        v25 = ((char *)v23 - (_BYTE *)*v20) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          sub_1D4D5DFA8();
        v26 = v22 - (_QWORD)*v20;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)sub_1D4D5E2CC((uint64_t)(v20 + 2), v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v21;
        v24 = v30 + 1;
        v32 = (char *)*v20;
        v31 = (char *)v20[1];
        if (v31 != *v20)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v30 = v33;
          }
          while (v31 != v32);
          v31 = (char *)*v20;
        }
        *v20 = v30;
        v20[1] = v24;
        v20[2] = &v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      v20[1] = v24;
      ++v19;
      v18 = *(_QWORD *)(v8 + 488);
    }
    while (v19 < (*(_QWORD *)(v8 + 496) - v18) >> 3);
  }
  v34 = sub_1D4D8FBD4((uint64_t *)(v11 + 24), *(_QWORD *)(v11 + 48)) == 0.0;
  v35 = 0.0;
  if (!v34)
    v35 = 1.0;
  *(float *)(v11 + 92) = v35;
  v36 = objc_alloc_init(StabilizationSuccessClassifier);
  *(_DWORD *)buf = 0;
  -[StabilizationSuccessClassifier classifySequentialAnalysisSuccess:movieSize:precalcedFeatures:result:](v36, "classifySequentialAnalysisSuccess:movieSize:precalcedFeatures:result:", v11 + 24, v53, 0, buf);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    NSLog(CFSTR("error in analysis classifier\n"));
    *(_DWORD *)buf = 0;
    v38 = 0;
  }
  else
  {
    v38 = *(_DWORD *)buf;
  }
  *(_DWORD *)(v11 + 88) = v38;

  v47 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v57, "{CGSize=dd}");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "setObject:forKeyedSubscript:", v48, IC_A_STAT_MOVIE_DIMENSIONS);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 678152731 * ((*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 4));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "setObject:forKeyedSubscript:", v49, IC_A_STAT_FRAME_COUNT);

  v50 = *(void **)(v11 + 16);
  *(_QWORD *)(v11 + 16) = v47;

  v51 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
LABEL_64:
  sub_1D4D569C8(&v54);
  return v11;
}

void sub_1D4D55B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1D4D569C8((os_signpost_id_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ICAnalysisAddFrame(uint64_t a1, __CVBuffer *a2, __n128 *a3, void *a4, _QWORD *a5)
{
  id v9;
  NSObject *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t width;
  uint64_t height;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  os_signpost_id_t v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  __n128 v29;
  unint64_t v30;
  os_signpost_id_t v31;
  uint8_t buf[8];
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  _QWORD v36[2];
  CGRect CleanRect;

  v36[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v10 = (id)qword_1ED988290;
  v11 = os_signpost_id_generate(v10);
  v31 = v11;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v12 = (id)qword_1ED988290;
  v13 = v12;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "ICAnalysisAddFrame", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if (a1 && a2 && (a3->n128_u8[12] & 1) != 0)
  {
    v18 = *(_QWORD *)(a1 + 232);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 240);
      if (!v19)
      {
        CleanRect = CVImageBufferGetCleanRect(a2);
        width = (int)CleanRect.size.width;
        height = (int)CleanRect.size.height;
        *(_QWORD *)(v18 + 32) = width | (height << 32);
        *(_DWORD *)(a1 + 48) = width;
        *(_DWORD *)(a1 + 52) = height;
        v19 = *(_QWORD *)(a1 + 240);
      }
      v29 = *a3;
      v30 = a3[1].n128_u64[0];
      if (!sub_1D4D83664(a2, &v29, v19, v18, v9))
      {
        ++*(_QWORD *)(a1 + 240);
        v16 = 1;
        goto LABEL_20;
      }
      v33 = *MEMORY[0x1E0CB2938];
      v34 = CFSTR("Error or cancelation while adding frame to be analyzed");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), -1, v22);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v23 = (id)qword_1ED988290;
      v24 = v23;
      v25 = v31;
      if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v24, OS_SIGNPOST_EVENT, v25, "ICAnalysisAddFrame", "ANALYSIS_FAILED", buf, 2u);
      }

    }
    else
    {
      v35 = *MEMORY[0x1E0CB2938];
      v36[0] = CFSTR("Analysis is already complete");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), -1, v26);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v27 = (id)qword_1ED988290;
      v28 = v27;
      if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v28, OS_SIGNPOST_EVENT, v31, "ICAnalysisAddFrame", "IC_ERROR_UNSPECIFIED", buf, 2u);
      }

    }
  }
  else
  {
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, 0);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v14 = (id)qword_1ED988290;
    v15 = v14;
    if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v15, OS_SIGNPOST_EVENT, v31, "ICAnalysisAddFrame", "IC_ERROR_BAD_INPUT", buf, 2u);
    }

  }
  v16 = 0;
LABEL_20:
  sub_1D4D56904(&v31);

  return v16;
}

void sub_1D4D56078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);

  sub_1D4D56904((os_signpost_id_t *)va);
  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1D4D560C0(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalyzeInputMotion", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICSynthesizeAnalysis(void *a1, _DWORD *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64x2_t v7;

  v3 = a1;
  v4 = operator new();
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)v4 = &off_1E988AAD8;
  if ((sub_1D4D562A0(v3, v4) & 1) != 0)
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_QWORD *)(v4 + 232) = v5;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    v6 = *(_QWORD *)(v4 + 48);
    v7.i64[0] = (int)v6;
    v7.i64[1] = SHIDWORD(v6);
    *(float64x2_t *)(v4 + 72) = vcvtq_f64_s64(v7);
    if (a2)
      *a2 = 0;
  }
  else
  {
    if (a2)
      *a2 = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
  }

  return v4;
}

void sub_1D4D56278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D562A0(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double y;
  double width;
  double height;
  double v10;
  double v11;
  double x;
  uint64_t v13;
  void *v14;
  __int128 v15;
  id v16;
  void *v17;
  void *v18;
  void **v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  char v38;
  CGRect v39;
  CGSize size;
  CGRect v41;
  CGRect *v42;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_SOURCE_SIZE);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (size.width = 0.0, size.height = 0.0, !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v5, &size)))
    {
      v13 = 0;
LABEL_21:

      goto LABEL_22;
    }
    sub_1D4D577C4(v4, (uint64_t)&v36);
    v34 = 0uLL;
    v35 = 0;
    if (v38)
    {
      if (!v37)
      {
        v13 = 0;
LABEL_20:
        *(_QWORD *)&v41.origin.x = &v34;
        sub_1D4D61D18((void ***)&v41);
        goto LABEL_21;
      }
      memset(&v41, 0, 24);
      objc_msgSend(v4, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D4D58A00((uint64_t *)&v34, v6, v36, v37, 0, 0, (uint64_t *)&v41);

      if (CGRectIsNull(v39))
      {
        y = 0.0;
        width = size.width;
        height = size.height;
        v10 = size.height;
        v11 = size.width;
        x = 0.0;
      }
      else
      {
        x = v39.origin.x;
        y = v39.origin.y;
        v11 = v39.size.width;
        v10 = v39.size.height;
        width = size.width;
        height = size.height;
      }
      sub_1D4D742A4(a2 + 96, &v41, 0, width, height, x, y, v11, v10);
      v42 = &v41;
      sub_1D4D61D18((void ***)&v42);
    }
    else
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D4D58A00((uint64_t *)&v34, v14, v36, v37, 0, 0, 0);

    }
    v15 = v34;
    v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &size, "{CGSize=dd}");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, IC_A_STAT_MOVIE_DIMENSIONS);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v15 + 1) - v15) >> 4));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, IC_A_STAT_FRAME_COUNT);

    *(_BYTE *)(a2 + 8) = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a2 + 88) = _D0;
    *(int32x2_t *)(a2 + 48) = vmovn_s64(vcvtq_s64_f64((float64x2_t)size));
    sub_1D4D62020((uint64_t *)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v34;
    *(_QWORD *)(a2 + 40) = v35;
    v35 = 0;
    v34 = 0uLL;
    v24 = (void **)(a2 + 16);
    objc_storeStrong((id *)(a2 + 16), v16);
    if (!CGRectIsNull(v39))
    {
      v25 = v39.origin.x;
      v26 = v39.origin.y;
      v27 = v39.size.width;
      v28 = v39.size.height;
      v41 = v39;
      v29 = *(_QWORD *)(a2 + 24);
      if (v29 != *(_QWORD *)(a2 + 32))
      {
        do
        {
          sub_1D4D593A8(v29, v29, v25, v26);
          v29 += 304;
        }
        while (v29 != *(_QWORD *)(a2 + 32));
        *(_DWORD *)(a2 + 48) = (int)v27;
        *(_DWORD *)(a2 + 52) = (int)v28;
        if (*(_QWORD *)(a2 + 16))
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v41.size, "{CGSize=dd}");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, IC_A_STAT_MOVIE_DIMENSIONS);

          v32 = *v24;
          *v24 = v30;

        }
      }
    }

    v13 = 1;
    goto LABEL_20;
  }
  v13 = 0;
LABEL_22:

  return v13;
}

void sub_1D4D56620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  a23 = (void **)&a9;
  sub_1D4D61D18(&a23);

  _Unwind_Resume(a1);
}

uint64_t ICSynthesizeCorrections(void *a1, _DWORD *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  CGSize size;
  CGRect v8;

  v3 = a1;
  v4 = operator new();
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)v4 = &off_1E988ABE8;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  if ((sub_1D4D562A0(v3, v4) & 1) == 0)
  {
    if (a2)
      *a2 = 2;
    goto LABEL_12;
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_CROP_RECT);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (memset(&v8, 0, sizeof(v8)), !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v5, &v8)))
  {
    if (a2)
      *a2 = 2;

LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_13;
  }
  size = v8.size;
  *(CGPoint *)(v4 + 56) = v8.origin;
  *(CGSize *)(v4 + 72) = size;
  *(_BYTE *)(v4 + 232) = 1;
  if (a2)
    *a2 = 0;

LABEL_13:
  return v4;
}

void sub_1D4D56804(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1D4D56840(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisInit", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

os_signpost_id_t *sub_1D4D56904(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisAddFrame", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

os_signpost_id_t *sub_1D4D569C8(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisStopAndGetResult", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICLiveAnalysisApplyFrameCorrection(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  double *v23;
  double v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  const double *v28;
  float64x2_t v29;
  id v30;
  uint64_t v31;
  _OWORD v33[4];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!sub_1D4D5207C(a1))
    return 0;
  v16 = 0;
  v17 = (_OWORD *)(a1 + 256);
  v18 = a1 + 256;
  do
  {
    v19 = 0;
    v20 = a3;
    do
    {
      v21 = 0;
      v22 = 0.0;
      v23 = v20;
      do
      {
        v24 = *v23;
        v23 += 3;
        v22 = v22 + *(double *)(v18 + v21) * v24;
        v21 += 8;
      }
      while (v21 != 24);
      *((double *)v33 + 3 * v16 + v19++) = v22;
      ++v20;
    }
    while (v19 != 3);
    ++v16;
    v18 += 24;
  }
  while (v16 != 3);
  v25 = 0;
  v26 = v33[3];
  *(_OWORD *)(a1 + 288) = v33[2];
  *(_OWORD *)(a1 + 304) = v26;
  *(_QWORD *)(a1 + 320) = v34;
  v27 = v33[1];
  *v17 = v33[0];
  *(_OWORD *)(a1 + 272) = v27;
  v28 = (const double *)(a1 + 320);
  v29 = vld1q_dup_f64(v28);
  do
  {
    v17[v25] = vdivq_f64((float64x2_t)v17[v25], v29);
    ++v25;
  }
  while (v25 != 4);
  *(_QWORD *)(a1 + 320) = 0x3FF0000000000000;
  v30 = *(id *)(a1 + 248);
  objc_msgSend(v30, "setHomographyMatrix:", v17);
  v31 = objc_msgSend(v30, "ResampleCVPixels:clipToRect:outputSize:pixelBufferPool:", a2, a4, a5, a6, a7, a8, a7, a8);

  return v31;
}

void sub_1D4D56C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double *ICGetCorrectionsResultOptionalData(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    if (objc_msgSend((id)IC_D_L1_CONSTRAINT_VIOLATIONS, "isEqualToString:", v3))
    {
      v5 = *(double **)(a1 + 240);
      if (v5)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 3);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = *((_QWORD *)v5 + 1);
        if (*((_QWORD *)v5 + 2) != v7)
        {
          v8 = 0;
          v9 = 1;
          do
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(v7 + 8 * v8));
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObject:", v10);

            v8 = v9;
            v7 = *((_QWORD *)v5 + 1);
            ++v9;
          }
          while (v8 < (*((_QWORD *)v5 + 2) - v7) >> 3);
        }
        v18 = IC_D_L1_CROP_CONSTRAINT_VIOLATION;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v5);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = IC_D_L1_SALIENCY_CONSTRAINT_VIOLATION;
        v23 = v11;
        v24 = v6;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v18, 2);
        v5 = (double *)objc_claimAutoreleasedReturnValue();

      }
    }
    else if (objc_msgSend((id)IC_D_L1_SMOOTHNESS_METRICS, "isEqualToString:", v4))
    {
      v5 = *(double **)(a1 + 248);
      if (v5)
      {
        v18 = IC_D_L1_OBJECTIVE;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v5);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v12;
        v19 = IC_D_L1_CORRECTION_MAGNITUDE;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5[1]);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = v13;
        v20 = IC_D_L1_FIRST_DERIV;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5[4]);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v14;
        v21 = IC_D_L1_SECOND_DERIV;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5[5]);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v15;
        v22 = IC_D_L1_THIRD_DERIV;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5[6]);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = v16;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v18, 5);
        v5 = (double *)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

void sub_1D4D56EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t ICCalcCinematicL1Init(void *a1, void *a2, void *a3, _DWORD *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  float v22;
  NSObject *v23;
  NSObject *v24;
  os_signpost_id_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  NSObject *v31;
  os_signpost_id_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _DWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  id to;
  id location;
  int v49;
  os_signpost_id_t v50;
  id from;
  _BYTE v52[24];
  _BYTE *v53;
  uint8_t buf[16];
  __int128 v55;
  uint64_t v56;
  unsigned __int8 v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint8_t v60[8];
  id v61[2];
  uint8_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v10 = (id)qword_1ED988290;
  v11 = os_signpost_id_generate(v10);
  v50 = v11;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v12 = (id)qword_1ED988290;
  v13 = v12;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "ICCalcCinematicL1_Init", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  v14 = operator new();
  bzero((void *)v14, 0x250uLL);
  sub_1D4D62414(v14);
  sub_1D4D577C4(v7, (uint64_t)buf);
  v15 = v55;
  *(_OWORD *)(v14 + 232) = *(_OWORD *)buf;
  *(_OWORD *)(v14 + 248) = v15;
  *(_QWORD *)(v14 + 264) = v56;
  objc_msgSend(v7, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D4D57944(v16, v14 + 272);

  v49 = 0;
  v17 = ICSynthesizeAnalysis(v7, &v49);
  v18 = *(_QWORD *)(v14 + 344);
  *(_QWORD *)(v14 + 344) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v49)
  {
    if (!*(_QWORD *)(v14 + 344))
    {
      if (a4)
        *a4 = 1;
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v26 = (id)qword_1ED988290;
      v20 = v26;
      v21 = v50;
      if (v50 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v26))
        goto LABEL_36;
      *(_WORD *)buf = 0;
      goto LABEL_18;
    }
    sub_1D4D57AC4(v9, (uint64_t)buf);
    v22 = *(float *)buf;
    if (*(float *)buf == 0.0)
    {
      if (a4)
        *a4 = 4;
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v23 = (id)qword_1ED988290;
      v24 = v23;
      v25 = v50;
      if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
      {
        *(_WORD *)v60 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v24, OS_SIGNPOST_EVENT, v25, "ICCalcCinematicL1_Init", "IC_ERROR_CROP_FRACTION_INVALID", v60, 2u);
      }
LABEL_53:

      v27 = 0;
      v28 = v14;
      goto LABEL_54;
    }
    if (*(float *)buf < 0.0)
    {
      *(_DWORD *)buf = 1036831949;
      v22 = 0.1;
    }
    *(_DWORD *)(v14 + 448) = DWORD2(v55);
    *(_BYTE *)(v14 + 452) = BYTE4(v55) ^ 1;
    *(_BYTE *)(v14 + 480) = BYTE5(v56) ^ 1;
    if (v22 != -1.0)
      *(float *)(v14 + 472) = 1.0 - v22;
    if (*(float *)&buf[4] != -1.0)
      *(_DWORD *)(v14 + 484) = *(_DWORD *)&buf[4];
    v30 = sub_1D4D91BAC(v14 + 352, v9, *(_QWORD *)(*(_QWORD *)(v14 + 344) + 48), 0x86BCA1AF286BCA1BLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v14 + 344) + 32) - *(_QWORD *)(*(_QWORD *)(v14 + 344) + 24)) >> 4));
    if (v30)
    {
      if (a4)
        *a4 = v30;
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v31 = (id)qword_1ED988290;
      v24 = v31;
      v32 = v50;
      if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v31))
      {
        *(_WORD *)v60 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v24, OS_SIGNPOST_EVENT, v32, "ICCalcCinematicL1_Init", "IC_ERROR_BAD_INPUT", v60, 2u);
      }
      goto LABEL_53;
    }
    objc_initWeak(&location, v8);
    objc_copyWeak(&to, &location);
    objc_moveWeak(&from, &to);
    v62 = 0;
    *(_QWORD *)v60 = &off_1E988A320;
    objc_moveWeak(v61, &from);
    v62 = v60;
    objc_destroyWeak(&from);
    sub_1D4D62854(v60, (_QWORD *)(v14 + 488));
    v35 = v62;
    if (v62 == v60)
    {
      v36 = 4;
      v35 = v60;
    }
    else
    {
      if (!v62)
        goto LABEL_66;
      v36 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_66:
    objc_destroyWeak(&to);
    objc_copyWeak(&to, &location);
    objc_moveWeak(&from, &to);
    v62 = 0;
    *(_QWORD *)v60 = &off_1E988A378;
    objc_moveWeak(v61, &from);
    v62 = v60;
    objc_destroyWeak(&from);
    sub_1D4D62B68(v60, (_QWORD *)(v14 + 520));
    v37 = v62;
    if (v62 == v60)
    {
      v38 = 4;
      v37 = v60;
    }
    else
    {
      if (!v62)
      {
LABEL_71:
        objc_destroyWeak(&to);
        LODWORD(from) = 0;
        sub_1D4D92890(v14 + 448, *(_QWORD *)(*(_QWORD *)(v14 + 344) + 48), v14 + 488, SHIDWORD(v55), v56, BYTE6(v56), HIBYTE(v56), v57, (uint64_t *)v60, *(float *)buf, &from);
        v39 = *(_QWORD *)v60;
        *(_QWORD *)v60 = 0;
        v40 = *(_QWORD *)(v14 + 584);
        *(_QWORD *)(v14 + 584) = v39;
        if (v40)
        {
          sub_1D4D62CDC(v14 + 584, v40);
          v41 = *(_QWORD *)v60;
          *(_QWORD *)v60 = 0;
          if (v41)
            sub_1D4D62CDC((uint64_t)v60, v41);
        }
        sub_1D4D57F34((_QWORD *)(v14 + 552), (uint64_t)v58);
        v42 = *(_QWORD **)(v14 + 344);
        if (v42[3] == v42[4])
          goto LABEL_80;
        v43 = *(_DWORD **)(v14 + 584);
        v44 = v42[6];
        sub_1D4D62E6C((uint64_t)v52, v14 + 552);
        sub_1D4D92A9C(v14 + 448, v43, v42 + 3, (uint64_t)(v42 + 12), v44, (uint64_t *)(v14 + 352), (uint64_t)v52, (int *)&from);
        v45 = v53;
        if (v53 == v52)
        {
          v46 = 4;
          v45 = v52;
        }
        else
        {
          if (!v53)
          {
LABEL_80:
            objc_destroyWeak(&location);
            v28 = 0;
            v27 = v14;
LABEL_54:
            v33 = v59;
            if (v59 == v58)
            {
              v34 = 4;
              v33 = v58;
            }
            else
            {
              if (!v59)
                goto LABEL_59;
              v34 = 5;
            }
            (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_59:
            if (!v28)
              goto LABEL_38;
            goto LABEL_37;
          }
          v46 = 5;
        }
        (*(void (**)(void))(*v45 + 8 * v46))();
        goto LABEL_80;
      }
      v38 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
    goto LABEL_71;
  }
  if (a4)
    *a4 = v49;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v19 = (id)qword_1ED988290;
  v20 = v19;
  v21 = v50;
  if (v50 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v19))
    goto LABEL_36;
  *(_WORD *)buf = 0;
LABEL_18:
  _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v20, OS_SIGNPOST_EVENT, v21, "ICCalcCinematicL1_Init", "IC_ERROR_ANALYSIS_MALFORMED", buf, 2u);
LABEL_36:

  v27 = 0;
  v28 = v14;
LABEL_37:
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_38:
  sub_1D4D57FCC(&v50);

  return v27;
}

void sub_1D4D576C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, uint64_t a14, os_signpost_id_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v36 = a20;
  if (a20 == v34)
  {
    v37 = 4;
    v36 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  objc_destroyWeak(&location);
  v38 = a30;
  if (a30 == &a27)
  {
    v39 = 4;
    v38 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  sub_1D4D57FCC(&a15);

  _Unwind_Resume(a1);
}

void sub_1D4D577C4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  _OWORD *v4;
  __int128 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFDictionary *v12;
  uint64_t v13;
  __int128 v14;
  id v15;

  v3 = a1;
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 0;
  v4 = (_OWORD *)MEMORY[0x1E0C9D628];
  v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(a2 + 8) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(a2 + 24) = v5;
  v15 = v3;
  objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_HOMOGRAPHIES_INVERTED);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
    *(_BYTE *)a2 = objc_msgSend(v6, "BOOLValue");
  objc_msgSend(v15, "objectForKeyedSubscript:", IC_A_HOMOGRAPHIES_MAP_TO_REFERENCE);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
    *(_BYTE *)(a2 + 1) = objc_msgSend(v8, "BOOLValue");
  objc_msgSend(v15, "objectForKeyedSubscript:", IC_A_CALC_4DOF_POSES);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    *(_BYTE *)(a2 + 2) = objc_msgSend(v10, "BOOLValue");
  objc_msgSend(v15, "objectForKeyedSubscript:", IC_A_REQUESTED_CROP_RECT);
  v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v13 = a2 + 8;
    if (!CGRectMakeWithDictionaryRepresentation(v12, (CGRect *)v13))
    {
      v14 = v4[1];
      *(_OWORD *)v13 = *v4;
      *(_OWORD *)(v13 + 16) = v14;
    }
  }

}

void sub_1D4D578F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D57944(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v5 = objc_msgSend(v3, "count");
    if (v5)
    {
      objc_msgSend(v4, "objectAtIndexedSubscript:", v5 - 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v6, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_HOMOGRAPHY);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v7, "count") == 9)
        {
          v8 = 0;
          while (1)
          {
            objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              break;
            objc_msgSend(v9, "doubleValue");
            *(_QWORD *)(a2 + 8 * v8) = v10;

            if (++v8 == 9)
            {
              a2 = 1;
              goto LABEL_14;
            }
          }

        }
        a2 = 0;
LABEL_14:

      }
      else
      {
        a2 = 0;
      }

    }
    else
    {
      a2 = 0;
    }
  }

  return a2;
}

void sub_1D4D57A84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4D57AC4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t (***v29)();
  uint64_t v30;
  id v31;
  id location;
  id to;
  uint64_t (**v34)();
  id v35;
  uint64_t (***v36)();
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)a2 = _D0;
  *(_QWORD *)(a2 + 8) = -1;
  *(_DWORD *)(a2 + 16) = -1;
  *(_BYTE *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 24) = -4294967255;
  *(_QWORD *)(a2 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_C_CROP_FRACTION);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "floatValue");
      *(_DWORD *)a2 = v12;
    }
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_CROP_ASPECT_RATIO);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(v13, "floatValue");
      *(_DWORD *)(a2 + 4) = v14;
    }
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_FIRST_INDEX);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      *(_DWORD *)(a2 + 8) = objc_msgSend(v15, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_LAST_INDEX);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
      *(_DWORD *)(a2 + 12) = objc_msgSend(v16, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_REF_INDEX);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
      *(_DWORD *)(a2 + 16) = objc_msgSend(v17, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_KERNEL_LENGTH);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
      *(_DWORD *)(a2 + 24) = objc_msgSend(v18, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_L1_WINDOW_LENGTH);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
      *(_DWORD *)(a2 + 28) = objc_msgSend(v19, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_L1_WINDOW_STRIDE);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
      *(_DWORD *)(a2 + 32) = objc_msgSend(v20, "intValue");
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_DISABLE_GAUSSIAN);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 20) = objc_msgSend(v21, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_DISABLE_CROP);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 36) = objc_msgSend(v22, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_FREE_ASPECT_RATIO);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 37) = objc_msgSend(v23, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_L1_USE_4DOF_POSES);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 38) = objc_msgSend(v24, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_L1_DISABLE_SIDELENGTH_CONSTRAINT);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 39) = objc_msgSend(v25, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_C_L1_DISABLE_AREA_CONSTRAINT);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(a2 + 40) = objc_msgSend(v26, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", IC_A_RESULT_DELEGATE);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v27)
      goto LABEL_25;
    objc_msgSend(v4, "objectForKeyedSubscript:", IC_A_RESULT_DELEGATE);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, v28);

    objc_copyWeak(&v31, &location);
    objc_moveWeak(&to, &v31);
    v36 = 0;
    v34 = &off_1E988A480;
    objc_moveWeak(&v35, &to);
    v36 = &v34;
    objc_destroyWeak(&to);
    sub_1D4D5F2D8(&v34, (_QWORD *)(a2 + 48));
    v29 = v36;
    if (v36 == &v34)
    {
      v30 = 4;
      v29 = &v34;
    }
    else
    {
      if (!v36)
      {
LABEL_24:
        objc_destroyWeak(&v31);
        objc_destroyWeak(&location);
LABEL_25:

        goto LABEL_26;
      }
      v30 = 5;
    }
    (*v29)[v30]();
    goto LABEL_24;
  }
LABEL_26:

}

void sub_1D4D57EB0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == (_QWORD *)(v2 + 48))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D57F34(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1D4D62E6C((uint64_t)v6, a2);
  sub_1D4D5F2D8(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

os_signpost_id_t *sub_1D4D57FCC(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_Init", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1AddData(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL IsNull;
  double v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_id_t v30;
  unint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  os_signpost_id_t v37;
  NSObject *v38;
  NSObject *v39;
  id v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  os_signpost_id_t v49;
  NSObject *v50;
  os_signpost_id_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint8_t v56[8];
  void **v57[3];
  uint8_t v58[8];
  _QWORD *v59[3];
  void *v60;
  void *v61;
  void *__p;
  void *v63;
  uint8_t buf[8];
  uint64_t v65;
  uint64_t v66;
  _QWORD **v67;
  _QWORD *v68[2];
  void *v69[2];
  void *v70[2];
  __int128 v71;
  os_signpost_id_t v72;
  void ***v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v7 = (id)qword_1ED988290;
  v8 = os_signpost_id_generate(v7);
  v72 = v8;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v9 = (id)qword_1ED988290;
  v10 = v9;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ICCalcCinematicL1_AddData", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if (a1)
  {
    if (!v5)
    {
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v29 = (id)qword_1ED988290;
      v26 = v29;
      v30 = v72;
      if (v72 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v29))
        goto LABEL_52;
      *(_WORD *)buf = 0;
      goto LABEL_51;
    }
    v55 = v6;
    v11 = *(_QWORD *)(a1 + 344);
    v12 = (uint64_t *)(v11 + 24);
    v13 = *(_QWORD *)(v11 + 24);
    v14 = *(_QWORD *)(v11 + 32);
    if (*(_BYTE *)(a1 + 234))
    {
      v15 = *(unsigned __int8 *)(a1 + 233);
      *(_QWORD *)buf = 0;
      v65 = 0;
      v66 = 0;
      v16 = !sub_1D4D58A00(v12, v5, *(unsigned __int8 *)(a1 + 232), v15, (double *)(a1 + 272), 0, (uint64_t *)buf);
      if (!v15)
        LOBYTE(v16) = 1;
      if (!v16)
      {
        v54 = v5;
        v17 = *(_QWORD *)(a1 + 344);
        v19 = *(_DWORD *)(v17 + 48);
        v18 = *(_DWORD *)(v17 + 52);
        IsNull = CGRectIsNull(*(CGRect *)(a1 + 240));
        v21 = 0.0;
        v22 = (double)v18;
        v23 = (double)v19;
        v24 = 0.0;
        if (!IsNull)
        {
          v24 = *(double *)(a1 + 240);
          v21 = *(double *)(a1 + 248);
          v23 = *(double *)(a1 + 256);
          v22 = *(double *)(a1 + 264);
        }
        sub_1D4D742A4(*(_QWORD *)(a1 + 344) + 96, buf, a1 + 272, (double)v19, (double)v18, v24, v21, v23, v22);
        *(_QWORD *)v58 = buf;
        sub_1D4D61D18((void ***)v58);
        v5 = v54;
        goto LABEL_29;
      }
      *(_QWORD *)v58 = buf;
      sub_1D4D61D18((void ***)v58);
    }
    else if (sub_1D4D58A00(v12, v5, *(unsigned __int8 *)(a1 + 232), *(unsigned __int8 *)(a1 + 233), (double *)(a1 + 272), 0, 0))
    {
LABEL_29:
      if ((sub_1D4D57944(v5, a1 + 272) & 1) != 0)
      {
        v52 = *(_QWORD *)(v11 + 24);
        v53 = *(_QWORD *)(v11 + 32);
        v31 = 0x86BCA1AF286BCA1BLL * ((v14 - v13) >> 4);
        if (!CGRectIsNull(*(CGRect *)(a1 + 240)))
        {
          for (i = *(_QWORD *)(v11 + 24) + 304 * v31; i != *(_QWORD *)(v11 + 32); i += 304)
            sub_1D4D593A8(i, i, *(double *)(a1 + 240), *(double *)(a1 + 248));
        }
        v6 = v55;
        v26 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", *(_QWORD *)(*(_QWORD *)(a1 + 344) + 16));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 678152731* ((*(_QWORD *)(*(_QWORD *)(a1 + 344) + 32) - *(_QWORD *)(*(_QWORD *)(a1 + 344) + 24)) >> 4));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v33, IC_A_STAT_FRAME_COUNT);

        objc_storeStrong((id *)(*(_QWORD *)(a1 + 344) + 16), v26);
        v34 = 0x86BCA1AF286BCA1BLL * ((v53 - v52) >> 4) - v31;
        *(_QWORD *)buf = 0;
        v65 = 0;
        v68[0] = 0;
        v68[1] = 0;
        v66 = 0;
        v67 = v68;
        *(_OWORD *)v69 = 0u;
        *(_OWORD *)v70 = 0u;
        v71 = 0u;
        v28 = sub_1D4D91BAC((uint64_t)buf, v55, *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48), v34);
        if ((_DWORD)v28)
        {
          if (qword_1ED988288 != -1)
            dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
          v35 = (id)qword_1ED988290;
          v36 = v35;
          v37 = v72;
          if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
          {
            *(_WORD *)v58 = 0;
            _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v36, OS_SIGNPOST_EVENT, v37, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", v58, 2u);
          }

LABEL_75:
          if (v70[1])
          {
            *(void **)&v71 = v70[1];
            operator delete(v70[1]);
          }
          if (v69[0])
          {
            v69[1] = v69[0];
            operator delete(v69[0]);
          }
          sub_1D4D61048((uint64_t)&v67, v68[0]);
          *(_QWORD *)v58 = buf;
          sub_1D4D60C20((void ***)v58);
          goto LABEL_53;
        }
        sub_1D4D92780(a1 + 352, (uint64_t)buf, 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
        sub_1D4D9277C(v58, a1 + 352, v31, v34);
        v41 = v5;
        sub_1D4D595E4(v12, v31, v34, v57);
        LODWORD(v73) = 0;
        v42 = *(_DWORD **)(a1 + 584);
        v43 = *(_QWORD *)(a1 + 344);
        v44 = *(_QWORD *)(v43 + 48);
        sub_1D4D62E6C((uint64_t)v74, a1 + 552);
        sub_1D4D92A9C(a1 + 448, v42, v57, v43 + 96, v44, (uint64_t *)v58, (uint64_t)v74, (int *)&v73);
        v45 = v75;
        if (v75 == v74)
        {
          v46 = 4;
          v45 = v74;
          v6 = v55;
        }
        else
        {
          v6 = v55;
          if (!v75)
          {
LABEL_59:
            v28 = v73;
            if ((_DWORD)v73)
            {
              if ((_DWORD)v73 == 3)
              {
                sub_1D4D5482C();
                v47 = objc_claimAutoreleasedReturnValue();
                v48 = v47;
                v49 = v72;
                if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
                {
                  *(_WORD *)v56 = 0;
                  _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v48, OS_SIGNPOST_EVENT, v49, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", v56, 2u);
                }
                v28 = 10;
              }
              else
              {
                sub_1D4D5482C();
                v50 = objc_claimAutoreleasedReturnValue();
                v48 = v50;
                v51 = v72;
                if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
                {
                  *(_WORD *)v56 = 0;
                  _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v48, OS_SIGNPOST_EVENT, v51, "ICCalcCinematicL1_AddData", "IC_ERROR_CALCULATING_CORRECTIONS", v56, 2u);
                }
                v28 = 9;
              }

            }
            v73 = v57;
            sub_1D4D61D18((void ***)&v73);
            if (__p)
            {
              v63 = __p;
              operator delete(__p);
            }
            if (v60)
            {
              v61 = v60;
              operator delete(v60);
            }
            sub_1D4D61048((uint64_t)v59, v59[1]);
            v57[0] = (void **)v58;
            sub_1D4D60C20(v57);
            v5 = v41;
            goto LABEL_75;
          }
          v46 = 5;
        }
        (*(void (**)(void))(*v45 + 8 * v46))();
        goto LABEL_59;
      }
      if (qword_1ED988288 != -1)
        dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
      v6 = v55;
      v39 = (id)qword_1ED988290;
      v26 = v39;
      v30 = v72;
      if (v72 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v39))
      {
LABEL_52:
        v28 = 10;
        goto LABEL_53;
      }
      *(_WORD *)buf = 0;
LABEL_51:
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v26, OS_SIGNPOST_EVENT, v30, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", buf, 2u);
      goto LABEL_52;
    }
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v6 = v55;
    v38 = (id)qword_1ED988290;
    v26 = v38;
    v30 = v72;
    if (v72 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v38))
      goto LABEL_52;
    *(_WORD *)buf = 0;
    goto LABEL_51;
  }
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v25 = (id)qword_1ED988290;
  v26 = v25;
  v27 = v72;
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v26, OS_SIGNPOST_EVENT, v27, "ICCalcCinematicL1_AddData", "IC_ERROR_CINEMATIC_SESSION_MALFORMED", buf, 2u);
  }
  v28 = 3;
LABEL_53:

  sub_1D4D596B8(&v72);
  return v28;
}

void sub_1D4D58910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;

  v34 = *(_QWORD **)(v32 - 104);
  if (v34 == v29)
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 128);
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_6:
  *(_QWORD *)(v32 - 136) = &a14;
  sub_1D4D61D18((void ***)(v32 - 136));
  sub_1D4D59658((uint64_t)&a17);
  sub_1D4D59658((uint64_t)&a29);

  sub_1D4D596B8((os_signpost_id_t *)(v32 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_1D4D58A00(uint64_t *a1, void *a2, int a3, int a4, double *a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const __CFDictionary *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  double v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  double *v90;
  uint64_t v91;
  double v92;
  double *v93;
  double v94;
  id v99;
  __int128 v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  _BYTE v111[32];
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  double v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v99 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (v10 = objc_msgSend(v99, "count")) != 0)
  {
    v115 = 0uLL;
    *(_QWORD *)&v116 = 0;
    sub_1D4D5F44C((uint64_t *)&v115, v10);
    v11 = 0;
    LODWORD(v102) = 0;
    while (1)
    {
      objc_msgSend(v99, "objectAtIndexedSubscript:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v100 = 0uLL;
        v101 = 0;
        goto LABEL_18;
      }
      objc_msgSend(v12, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_HOMOGRAPHY);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(v13, "count") != 9)
        break;
      v14 = 0;
      v124 = 0;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      do
      {
        objc_msgSend(v13, "objectAtIndexedSubscript:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v100 = 0uLL;
          v101 = 0;

          goto LABEL_18;
        }
        objc_msgSend(v15, "doubleValue");
        *((_QWORD *)&v120 + v14) = v16;

        ++v14;
      }
      while (v14 != 9);
      memset(v111, 0, 24);
      objc_msgSend(v12, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_RAWTIME);
      v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CMTimeMakeFromDictionary((CMTime *)v111, v17);

      if ((v111[12] & 1) == 0)
        break;
      v18 = *((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1) >= (unint64_t)v116)
      {
        v19 = sub_1D4D5F800((uint64_t *)&v115, (int *)&v102, (uint64_t)&v120);
      }
      else
      {
        sub_1D4D5F924(*((uint64_t *)&v115 + 1), SLODWORD(v102), (uint64_t)&v120);
        v19 = v18 + 304;
      }
      *((_QWORD *)&v115 + 1) = v19;
      *(_DWORD *)(v19 - 136) = 1065353216;
      *(_BYTE *)(v19 - 232) = 1;
      *(_BYTE *)(v19 - 4) = 1;
      v20 = *(_OWORD *)v111;
      *(_QWORD *)(v19 - 176) = *(_QWORD *)&v111[16];
      *(_OWORD *)(v19 - 192) = v20;

      v11 = SLODWORD(v102) + 1;
      ++LODWORD(v102);
      if (v10 <= v11)
      {
        v100 = v115;
        v101 = v116;
        v115 = 0uLL;
        *(_QWORD *)&v116 = 0;
        goto LABEL_19;
      }
    }
    v100 = 0uLL;
    v101 = 0;

LABEL_18:
LABEL_19:
    *(_QWORD *)&v120 = &v115;
    sub_1D4D61D18((void ***)&v120);
  }
  else
  {
    v100 = 0uLL;
    v101 = 0;
  }

  v21 = v100;
  if (*((_QWORD *)&v100 + 1) == (_QWORD)v100)
    goto LABEL_85;
  if (a7 && &v100 != (__int128 *)a7)
    sub_1D4D61E7C(a7, v100, *((uint64_t *)&v100 + 1), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v100 + 1) - v100) >> 4));
  v22 = *a1;
  v23 = a1[1];
  v24 = (v23 - *a1) / 304;
  v25 = v23 == *a1;
  if (v23 == *a1)
  {
    sub_1D4D62020(a1);
    v27 = *(double *)&v100;
    *(_OWORD *)a1 = v100;
    a1[2] = v101;
    v101 = 0;
    v100 = 0uLL;
    if (!a6)
      goto LABEL_33;
    goto LABEL_31;
  }
  v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v100 + 1) - v100) >> 4);
  sub_1D4D5FA14(a1, a1[1], v100, *((uint64_t *)&v100 + 1), v26);
  if (v24 < v26 + v24)
  {
    v33 = (_QWORD *)(*a1 + 304 * v24 + 104);
    v34 = v24;
    do
    {
      *v33 = v34++;
      v33 += 38;
      --v26;
    }
    while (v26);
  }
  if (a6)
  {
LABEL_31:
    v35 = 0;
    v36 = *a1;
    do
    {
      v27 = *(double *)(v36 + v35);
      *(double *)(a6 + v35) = v27;
      v35 += 8;
    }
    while (v35 != 72);
  }
LABEL_33:
  if ((a3 & 1) != 0 || a4)
  {
    if (!a3 || (a4 & 1) != 0)
    {
      if (a4)
      {
        if (v23 == v22)
        {
          v115 = 0x3FF0000000000000uLL;
          v116 = 0uLL;
          v117 = 0x3FF0000000000000uLL;
          v118 = 0uLL;
          v119 = 1.0;
        }
        else
        {
          if (!a5)
            goto LABEL_85;
          v54 = *((_OWORD *)a5 + 3);
          v117 = *((_OWORD *)a5 + 2);
          v118 = v54;
          v119 = a5[8];
          v55 = *((_OWORD *)a5 + 1);
          v115 = *(_OWORD *)a5;
          v116 = v55;
        }
        v56 = *a1;
        if (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v24)
        {
          v57 = 304 * v24;
          do
          {
            v58 = (double *)(v56 + 304 * v24);
            if (v25)
            {
              v116 = *((_OWORD *)v58 + 1);
              v117 = *((_OWORD *)v58 + 2);
              v118 = *((_OWORD *)v58 + 3);
              v119 = v58[8];
              v115 = *(_OWORD *)v58;
              *v58 = 1.0;
              v58[1] = 0.0;
              v58[2] = 0.0;
              v58[3] = 0.0;
              v58[4] = 1.0;
              v58[5] = 0.0;
              v58[6] = 0.0;
              v58[7] = 0.0;
              v58[8] = 1.0;
            }
            else
            {
              if (a3)
              {
                v59 = v58[7];
                v60 = v58[8];
                v61 = v58[4];
                v62 = v58[5];
                v63 = v61 * v60 - v59 * v62;
                v102 = v63;
                v64 = v58[1];
                v65 = v58[2];
                v66 = v59 * v65 - v64 * v60;
                v67 = v64 * v62 - v61 * v65;
                v103 = v66;
                v104 = v67;
                v68 = *v58;
                v69 = v58[3];
                v70 = v58[6];
                v71 = v66 * v69 + *v58 * v63 + v70 * v67;
                if (v71 >= 2.22044605e-16 || v71 <= -2.22044605e-16)
                {
                  v102 = v63 / v71;
                  v103 = v66 / v71;
                  v104 = v67 / v71;
                  v105 = (v70 * v62 - v69 * v60) / v71;
                  v106 = (v68 * v60 - v70 * v65) / v71;
                  v107 = (v69 * v65 - v68 * v62) / v71;
                  v108 = (v69 * v59 - v70 * v61) / v71;
                  v109 = (v70 * v64 - v68 * v59) / v71;
                  v110 = (v68 * v61 - v69 * v64) / v71;
                }
                v73 = 0;
                v74 = &v115;
                do
                {
                  v75 = 0;
                  v76 = &v102;
                  do
                  {
                    v77 = 0;
                    v78 = 0.0;
                    v79 = v76;
                    do
                    {
                      v80 = *v79;
                      v79 += 3;
                      v78 = v78 + *(double *)((char *)v74 + v77) * v80;
                      v77 += 8;
                    }
                    while (v77 != 24);
                    *((double *)&v120 + 3 * v73 + v75++) = v78;
                    ++v76;
                  }
                  while (v75 != 3);
                  ++v73;
                  v74 = (__int128 *)((char *)v74 + 24);
                }
                while (v73 != 3);
              }
              else
              {
                v81 = *(double *)&v117 * v119 - *((double *)&v118 + 1) * *((double *)&v117 + 1);
                v82 = *((double *)&v118 + 1) * *(double *)&v116 - *((double *)&v115 + 1) * v119;
                v102 = v81;
                v103 = v82;
                v83 = *((double *)&v115 + 1) * *((double *)&v117 + 1) - *(double *)&v117 * *(double *)&v116;
                v104 = v83;
                v84 = v82 * *((double *)&v116 + 1) + *(double *)&v115 * v81 + *(double *)&v118 * v83;
                if (v84 >= 2.22044605e-16 || v84 <= -2.22044605e-16)
                {
                  v102 = v81 / v84;
                  v103 = v82 / v84;
                  v104 = v83 / v84;
                  v105 = (*(double *)&v118 * *((double *)&v117 + 1) - *((double *)&v116 + 1) * v119) / v84;
                  v106 = (*(double *)&v115 * v119 - *(double *)&v118 * *(double *)&v116) / v84;
                  v107 = (*((double *)&v116 + 1) * *(double *)&v116 - *(double *)&v115 * *((double *)&v117 + 1)) / v84;
                  v108 = (*((double *)&v116 + 1) * *((double *)&v118 + 1) - *(double *)&v118 * *(double *)&v117) / v84;
                  v109 = (*(double *)&v118 * *((double *)&v115 + 1) - *(double *)&v115 * *((double *)&v118 + 1)) / v84;
                  v110 = (*(double *)&v115 * *(double *)&v117 - *((double *)&v116 + 1) * *((double *)&v115 + 1)) / v84;
                }
                v86 = 0;
                v87 = v56 + v57;
                v88 = &v102;
                do
                {
                  v89 = 0;
                  v90 = (double *)v87;
                  do
                  {
                    v91 = 0;
                    v92 = 0.0;
                    v93 = v90;
                    do
                    {
                      v94 = *v93;
                      v93 += 3;
                      v92 = v92 + v88[v91++] * v94;
                    }
                    while (v91 != 3);
                    *((double *)&v120 + 3 * v86 + v89++) = v92;
                    ++v90;
                  }
                  while (v89 != 3);
                  ++v86;
                  v88 += 3;
                }
                while (v86 != 3);
              }
              v112 = v122;
              v113 = v123;
              v114 = v124;
              *(_OWORD *)v111 = v120;
              *(_OWORD *)&v111[16] = v121;
              v116 = *((_OWORD *)v58 + 1);
              v117 = *((_OWORD *)v58 + 2);
              v118 = *((_OWORD *)v58 + 3);
              v119 = v58[8];
              v115 = *(_OWORD *)v58;
              *((_OWORD *)v58 + 1) = v121;
              *((_OWORD *)v58 + 2) = v112;
              *((_OWORD *)v58 + 3) = v113;
              *((_QWORD *)v58 + 8) = v114;
              *(_OWORD *)v58 = *(_OWORD *)v111;
            }
            v25 = 0;
            ++v24;
            v56 = *a1;
            v57 += 304;
          }
          while (v24 < 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
        }
      }
    }
    else
    {
      v37 = *a1;
      if (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v24)
      {
        v38 = 304 * v24;
        do
        {
          v39 = (double *)(v37 + v38);
          v40 = *(double *)(v37 + v38 + 56);
          v41 = *(double *)(v37 + v38 + 64);
          v42 = *(double *)(v37 + v38 + 32);
          v43 = *(double *)(v37 + v38 + 40);
          v44 = *(double *)(v37 + v38 + 48);
          v45 = v42 * v41 - v40 * v43;
          v46 = *(double *)(v37 + v38);
          v47 = *(double *)(v37 + v38 + 8);
          v49 = *(double *)(v37 + v38 + 16);
          v48 = *(double *)(v37 + v38 + 24);
          v50 = v40 * v49 - v47 * v41;
          v51 = v47 * v43 - v42 * v49;
          v52 = v50 * v48 + v46 * v45 + v44 * v51;
          if (v52 >= 2.22044605e-16 || v52 <= -2.22044605e-16)
          {
            v45 = v45 / v52;
            v50 = v50 / v52;
            v51 = v51 / v52;
            v28 = (v44 * v43 - v48 * v41) / v52;
            v27 = (v48 * v40 - v44 * v42) / v52;
            v29 = (v46 * v41 - v44 * v49) / v52;
            v30 = (v48 * v49 - v46 * v43) / v52;
            v31 = (v44 * v47 - v46 * v40) / v52;
            v32 = (v46 * v42 - v48 * v47) / v52;
          }
          *(double *)(v37 + v38) = v45;
          v39[1] = v50;
          v39[2] = v51;
          v39[3] = v28;
          v39[4] = v29;
          v39[5] = v30;
          v39[6] = v27;
          v39[7] = v31;
          v39[8] = v32;
          ++v24;
          v37 = *a1;
          v38 += 304;
        }
        while (v24 < 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
      }
    }
  }
LABEL_85:
  *(_QWORD *)&v120 = &v100;
  sub_1D4D61D18((void ***)&v120);

  return *((_QWORD *)&v21 + 1) != (_QWORD)v21;
}

void sub_1D4D59300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 176) = &a35;
  sub_1D4D61D18((void ***)(v37 - 176));

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D593A8(uint64_t result, uint64_t a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float64x2_t v10;
  uint64_t i;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  double v23;
  double *v24;
  double v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  const double *v29;
  float64x2_t v30;
  _OWORD v31[4];
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64_t v39;
  float64x2_t v40;
  __int128 v41;
  double v42;
  __int128 v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v41 = xmmword_1D4DB16B0;
  v4 = -a3;
  v43 = xmmword_1D4DB16C0;
  v42 = -a3;
  v44 = -a4;
  v45 = 0;
  v46 = 0;
  v47 = 0x3FF0000000000000;
  v5 = a4 * 0.0 + 1.0;
  v6 = a3 * -0.0;
  v33 = v5;
  v34 = a3 * -0.0;
  v7 = a3 + a4 * -0.0;
  v35 = v7;
  v8 = v5 + a3 * -0.0 * 0.0 + v7 * 0.0;
  if (v8 >= 2.22044605e-16 || v8 <= -2.22044605e-16)
  {
    v33 = v5 / v8;
    v34 = v6 / v8;
    v35 = v7 / v8;
    v36 = a4 * -0.0 / v8;
    v10 = vdivq_f64((float64x2_t)xmmword_1D4DB16C0, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
    v37 = (1.0 - v6) / v8;
    v38 = (a4 + v4 * 0.0) / v8;
    v39 = v10.f64[0];
    v40 = v10;
  }
  for (i = 0; i != 3; ++i)
  {
    v12 = 0;
    v13 = &v33;
    do
    {
      v14 = 0;
      v15 = 0.0;
      v16 = v13;
      do
      {
        v17 = *v16;
        v16 += 3;
        v15 = v15 + *(double *)(result + v14) * v17;
        v14 += 8;
      }
      while (v14 != 24);
      *((double *)&v48 + 3 * i + v12++) = v15;
      ++v13;
    }
    while (v12 != 3);
    result += 24;
  }
  v18 = 0;
  v31[2] = v50;
  v31[3] = v51;
  v32 = v52;
  v31[0] = v48;
  v31[1] = v49;
  v19 = &v41;
  do
  {
    v20 = 0;
    v21 = v31;
    do
    {
      v22 = 0;
      v23 = 0.0;
      v24 = (double *)v21;
      do
      {
        v25 = *v24;
        v24 += 3;
        v23 = v23 + *(double *)((char *)v19 + v22) * v25;
        v22 += 8;
      }
      while (v22 != 24);
      *((double *)&v48 + 3 * v18 + v20++) = v23;
      v21 = (_OWORD *)((char *)v21 + 8);
    }
    while (v20 != 3);
    ++v18;
    v19 = (__int128 *)((char *)v19 + 24);
  }
  while (v18 != 3);
  v26 = 0;
  v27 = v51;
  *(_OWORD *)(a2 + 32) = v50;
  *(_OWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 64) = v52;
  v28 = v49;
  *(_OWORD *)a2 = v48;
  *(_OWORD *)(a2 + 16) = v28;
  v29 = (const double *)(a2 + 64);
  v30 = vld1q_dup_f64(v29);
  do
  {
    *(float64x2_t *)(a2 + v26) = vdivq_f64(*(float64x2_t *)(a2 + v26), v30);
    v26 += 16;
  }
  while (v26 != 64);
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t *sub_1D4D595E4@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = 678152731 * ((unint64_t)(v5 - v4) >> 4), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D62ED0(a4, v4 + 304 * a2, v4 + 304 * a2 + 304 * v8, v8);
  }
  return result;
}

uint64_t sub_1D4D59658(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  sub_1D4D61048(a1 + 24, *(_QWORD **)(a1 + 32));
  v5 = (void **)a1;
  sub_1D4D60C20(&v5);
  return a1;
}

os_signpost_id_t *sub_1D4D596B8(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_AddData", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1StopAndGetResult(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_signpost_id_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  os_signpost_id_t v29;
  uint8_t buf[36];
  char v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v6 = (id)qword_1ED988290;
  v7 = os_signpost_id_generate(v6);
  v29 = v7;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v8 = (id)qword_1ED988290;
  v9 = v8;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "ICCalcCinematicL1_StopAndGetResult", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if (a1)
  {
    v10 = *(_QWORD *)(a1 + 344);
    v28 = 0;
    v11 = *(_QWORD *)(a1 + 584);
    sub_1D4D62E6C((uint64_t)v34, a1 + 552);
    sub_1D4D947C4(a1 + 448, v11, (uint64_t *)(v10 + 24), (double *)(v10 + 96), a1 + 352, (uint64_t)v34, &v28, &v27);
    v12 = v35;
    if (v35 == v34)
    {
      v13 = 4;
      v12 = v34;
    }
    else
    {
      if (!v35)
      {
LABEL_22:
        if (!v27 || v28)
        {
          if (a3)
            *a3 = 9;
          if (qword_1ED988288 != -1)
            dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
          v22 = (id)qword_1ED988290;
          v23 = v22;
          v24 = v29;
          if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v23, OS_SIGNPOST_EVENT, v24, "ICCalcCinematicL1_StopAndGetResult", "IC_ERROR_CALCULATING_CORRECTIONS", buf, 2u);
          }

          v16 = 0;
          goto LABEL_41;
        }
        *(_QWORD *)(v27 + 48) = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48);
        sub_1D4D57AC4(v5, (uint64_t)buf);
        if (v31)
        {
          v17 = v27;
          *(_QWORD *)(v27 + 56) = 0;
          *(_QWORD *)(v17 + 64) = 0;
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48);
          v19.i64[0] = (int)v18;
          v19.i64[1] = SHIDWORD(v18);
          *(float64x2_t *)(v17 + 72) = vcvtq_f64_s64(v19);
          *(_BYTE *)(v17 + 232) = 1;
        }
        if (a3)
          *a3 = 0;
        v16 = v27;
        v27 = 0;
        v20 = v33;
        if (v33 == v32)
        {
          v21 = 4;
          v20 = v32;
        }
        else
        {
          if (!v33)
            goto LABEL_41;
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_41:
        v25 = v27;
        v27 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        goto LABEL_43;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
    goto LABEL_22;
  }
  if (a3)
    *a3 = 3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v14 = (id)qword_1ED988290;
  v15 = v14;
  if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v15, OS_SIGNPOST_EVENT, v29, "ICCalcCinematicL1_StopAndGetResult", "IC_ERROR_CINEMATIC_SESSION_MALFORMED", buf, 2u);
  }

  v16 = 0;
LABEL_43:
  sub_1D4D59B90(&v29);

  return v16;
}

void sub_1D4D59B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  if (a3)
    (*(void (**)(void))(*(_QWORD *)a3 + 8))();
  sub_1D4D59B90((os_signpost_id_t *)va);

  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1D4D59B90(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_StopAndGetResult", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1Corrections(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t *v22;
  void *v23;
  BOOL v24;
  void *v25;
  id v26;
  void *v27;
  int v28;
  void *v29;
  BOOL v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CMTime *p_time1;
  uint64_t v41;
  double v42;
  double *p_value;
  double v44;
  uint64_t v45;
  CMTime *v46;
  uint64_t v47;
  CGRect *v48;
  uint64_t v49;
  double v50;
  double *p_x;
  double v52;
  uint64_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t *v62;
  CGPoint *v63;
  CGPoint v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  CGPoint *v68;
  CGFloat x;
  CGFloat v70;
  uint64_t *v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CGFloat v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  os_signpost_id_t v81;
  __int128 *v82;
  CGFloat v83;
  uint64_t v84;
  int v85;
  NSObject *v86;
  NSObject *v87;
  os_signpost_id_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  _QWORD *v102;
  double *v103;
  NSObject *v104;
  NSObject *v105;
  os_signpost_id_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  CGFloat v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _DWORD *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  NSObject *v120;
  os_signpost_id_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_signpost_id_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int64x2_t v129;
  NSObject *v130;
  NSObject *v131;
  os_signpost_id_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  const __CFDictionary *dict;
  void *v137;
  int v138;
  NSObject *v139;
  id val;
  id v141;
  uint8_t v142[16];
  uint8_t v143[8];
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  __int128 v150;
  os_signpost_id_t v151;
  id location;
  CGRect rect;
  _OWORD v154[2];
  _BYTE v155[24];
  _BYTE *v156;
  _BYTE v157[24];
  _BYTE *v158;
  CMTime time1;
  uint64_t v160;
  _QWORD *v161;
  CGFloat height;
  void *v163;
  void *v164;
  uint64_t v165;
  void *__p;
  void *v167;
  CGRect buf;
  __int128 v169;
  void *v170[2];
  void *v171[2];
  __int128 v172;
  float v173;
  float v174;
  unsigned int v175;
  int v176;
  char v177;
  int v178;
  int v179;
  int v180;
  char v181;
  char v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  _QWORD v186[3];
  _QWORD *v187;
  CGRect v188;
  __int128 v189;
  __int128 v190;
  void *v191;
  CGRect time2;
  __int128 v193;
  __int128 v194;
  void *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  val = a2;
  v141 = a3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v7 = (id)qword_1ED988290;
  v8 = os_signpost_id_generate(v7);
  v151 = v8;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v9 = (id)qword_1ED988290;
  v10 = v9;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(buf.origin.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ICCalcCinematicL1Corrections", (const char *)&unk_1D4DBA386, (uint8_t *)&buf, 2u);
  }

  if ((sub_1D4D5207C(a1) & 1) == 0)
  {
    if (a4)
      *a4 = 1;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v14 = (id)qword_1ED988290;
    v15 = v14;
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      LOWORD(buf.origin.x) = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v15, OS_SIGNPOST_EVENT, v151, "ICCalcCinematicL1Corrections", "IC_ERROR_ANALYSIS_MALFORMED", (uint8_t *)&buf, 2u);
    }

    v13 = 0;
    goto LABEL_191;
  }
  sub_1D4D57AC4(v141, (uint64_t)&v173);
  if (v173 == 0.0)
  {
    if (a4)
      *a4 = 4;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v11 = (id)qword_1ED988290;
    v12 = v11;
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      LOWORD(buf.origin.x) = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v12, OS_SIGNPOST_EVENT, v151, "ICCalcCinematicL1Corrections", "IC_ERROR_CROP_FRACTION_INVALID", (uint8_t *)&buf, 2u);
    }
    v13 = 0;
    goto LABEL_186;
  }
  if (v173 < 0.0)
    v173 = 0.1;
  if ((v175 & 0x80000000) != 0)
    v175 = 0;
  ICGetResultStats((id *)a1);
  v139 = objc_claimAutoreleasedReturnValue();
  -[NSObject objectForKeyedSubscript:](v139, "objectForKeyedSubscript:", IC_A_STAT_FRAME_COUNT);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "intValue");

  v18 = v176;
  if (v176 == -1 || v176 >= v17)
  {
    v18 = v17 - 1;
    v176 = v17 - 1;
  }
  v19 = v18 + 1;
  if (v175)
    v20 = 0;
  else
    v20 = v19 == v17;
  v21 = !v20;
  v138 = v21;
  v22 = (uint64_t *)&v150;
  v150 = 0uLL;
  v149 = (uint64_t *)&v150;
  objc_msgSend(v141, "objectForKeyedSubscript:", IC_C_L1_PATH_CONSTRAINTS);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 == 0;

  if (v24)
    goto LABEL_99;
  objc_msgSend(v141, "objectForKeyedSubscript:", IC_C_L1_PATH_CONSTRAINTS);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v146 = 0;
  v147 = 0;
  v148 = 0;
  sub_1D4D61DA4(&v146, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
  v26 = v25;
  objc_msgSend(v26, "objectForKeyedSubscript:", IC_A_HOMOGRAPHIES_INVERTED);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v137 = v27;
  if (v27)
    v28 = objc_msgSend(v27, "BOOLValue");
  else
    v28 = 0;
  memset(v154, 0, 24);
  objc_msgSend(v26, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = sub_1D4D58A00((uint64_t *)v154, v29, v28, 0, 0, 0, 0);

  if (!v30)
  {
    v60 = 0;
    goto LABEL_98;
  }
  objc_msgSend(v26, "objectForKeyedSubscript:", IC_A_FLIP_Y_COORDS);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v31;
  if (v31 && objc_msgSend(v31, "BOOLValue"))
  {
    objc_msgSend(v26, "objectForKeyedSubscript:", IC_A_INPUT_IMAGE_BOUNDS);
    dict = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      NSLog(CFSTR("error: flipping of Y coordinates requires a bounding rect\n"));
      goto LABEL_96;
    }
    memset(&rect, 0, sizeof(rect));
    if (!CGRectMakeWithDictionaryRepresentation(dict, &rect))
    {
      NSLog(CFSTR("error: image bounds dict invalid\n"));
      goto LABEL_96;
    }
    time1.value = 0x3FF0000000000000;
    *(_QWORD *)&time1.timescale = 0;
    time1.epoch = 0;
    v160 = 0;
    v161 = (_QWORD *)0xBFF0000000000000;
    height = rect.size.height;
    v163 = 0;
    v164 = 0;
    v165 = 0x3FF0000000000000;
    v33 = *(_QWORD *)&v154[0];
    if (*((_QWORD *)&v154[0] + 1) != *(_QWORD *)&v154[0])
    {
      v34 = 0;
      v35 = (*((_QWORD *)&v154[0] + 1) - *(_QWORD *)&v154[0]) / 304;
      if (v35 <= 1)
        v35 = 1;
      v36 = *(_QWORD *)&v154[0];
      do
      {
        v37 = 0;
        v38 = v36;
        do
        {
          v39 = 0;
          p_time1 = &time1;
          do
          {
            v41 = 0;
            v42 = 0.0;
            p_value = (double *)&p_time1->value;
            do
            {
              v44 = *p_value;
              p_value += 3;
              v42 = v42 + *(double *)(v38 + v41) * v44;
              v41 += 8;
            }
            while (v41 != 24);
            *(&buf.origin.x + 3 * v37 + v39++) = v42;
            p_time1 = (CMTime *)((char *)p_time1 + 8);
          }
          while (v39 != 3);
          ++v37;
          v38 += 24;
        }
        while (v37 != 3);
        v45 = 0;
        v189 = v169;
        v190 = *(_OWORD *)v170;
        v191 = v171[0];
        v188 = buf;
        v46 = &time1;
        do
        {
          v47 = 0;
          v48 = &v188;
          do
          {
            v49 = 0;
            v50 = 0.0;
            p_x = &v48->origin.x;
            do
            {
              v52 = *p_x;
              p_x += 3;
              v50 = v50 + *(double *)((char *)&v46->value + v49) * v52;
              v49 += 8;
            }
            while (v49 != 24);
            *(&buf.origin.x + 3 * v45 + v47++) = v50;
            v48 = (CGRect *)((char *)v48 + 8);
          }
          while (v47 != 3);
          ++v45;
          ++v46;
        }
        while (v45 != 3);
        v53 = 0;
        v195 = v171[0];
        v193 = v169;
        v194 = *(_OWORD *)v170;
        time2 = buf;
        v54 = (float64x2_t)vdupq_lane_s64((uint64_t)v171[0], 0);
        do
        {
          *(float64x2_t *)((char *)&time2.origin + v53) = vdivq_f64(*(float64x2_t *)((char *)&time2.origin + v53), v54);
          v53 += 16;
        }
        while (v53 != 64);
        v55 = v33 + 304 * v34;
        *(CGSize *)(v55 + 16) = time2.size;
        *(_OWORD *)(v55 + 32) = v193;
        *(_OWORD *)(v55 + 48) = v194;
        *(_QWORD *)(v55 + 64) = 0x3FF0000000000000;
        *(CGPoint *)v55 = time2.origin;
        ++v34;
        v36 += 304;
      }
      while (v34 != v35);
    }

  }
  objc_msgSend(v26, "objectForKeyedSubscript:", IC_A_REQUESTED_CROP_RECT);
  dict = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v59 = *((_QWORD *)&v154[0] + 1);
    v56 = *(_QWORD *)&v154[0];
    goto LABEL_76;
  }
  memset(&buf, 0, sizeof(buf));
  if (CGRectMakeWithDictionaryRepresentation(dict, &buf))
  {
    v56 = *((_QWORD *)&v154[0] + 1);
    if (*((_QWORD *)&v154[0] + 1) == *(_QWORD *)&v154[0])
    {
      v59 = *((_QWORD *)&v154[0] + 1);
    }
    else
    {
      v57 = 0;
      v58 = 0;
      v56 = *(_QWORD *)&v154[0];
      do
      {
        sub_1D4D593A8(v56 + v57, v56 + v57, buf.origin.x, buf.origin.y);
        ++v58;
        v59 = *((_QWORD *)&v154[0] + 1);
        v56 = *(_QWORD *)&v154[0];
        v57 += 304;
      }
      while (v58 < 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v154[0] + 1) - *(_QWORD *)&v154[0]) >> 4));
      v22 = (uint64_t *)&v150;
    }
LABEL_76:
    if (v59 == v56)
    {
      v60 = 1;
    }
    else
    {
      v134 = v32;
      v135 = 0;
      v61 = 0;
      while (1)
      {
        v62 = v22;
        v63 = (CGPoint *)(v56 + 304 * v61);
        v64 = v63[7];
        buf.size.width = v63[8].x;
        buf.origin = v64;
        v65 = v146;
        if (v147 == v146)
          break;
        v66 = 0;
        v67 = 112;
        while (1)
        {
          *(CGPoint *)&time1.value = buf.origin;
          time1.epoch = *(_QWORD *)&buf.size.width;
          v68 = (CGPoint *)(v65 + v67);
          x = v68[1].x;
          time2.origin = *v68;
          time2.size.width = x;
          if (!CMTimeCompare(&time1, (CMTime *)&time2))
            break;
          ++v66;
          v65 = v146;
          v67 += 304;
          if (v66 >= 0x86BCA1AF286BCA1BLL * ((v147 - v146) >> 4))
            goto LABEL_90;
        }
        if ((v66 & 0x80000000) != 0)
          break;
        sub_1D4D604C8(&v188, 9uLL);
        *(_QWORD *)&v70 = v66;
        location = (id)v66;
        *(_QWORD *)&rect.origin.x = &location;
        v71 = sub_1D4D6057C(&v149, (unint64_t *)&location, (uint64_t)&unk_1D4DB1844, (uint64_t **)&rect);
        v72 = (void *)v71[5];
        if (v72)
        {
          v71[6] = (uint64_t)v72;
          operator delete(v72);
          v71[5] = 0;
          v71[6] = 0;
          v71[7] = 0;
        }
        *(CGPoint *)(v71 + 5) = v188.origin;
        v71[7] = *(_QWORD *)&v188.size.width;
        rect.origin.x = v70;
        *(_QWORD *)&v188.origin.x = &rect;
        v73 = sub_1D4D6057C(&v149, (unint64_t *)&rect, (uint64_t)&unk_1D4DB1844, (uint64_t **)&v188);
        v74 = 0;
        v75 = v73[5];
        v56 = *(_QWORD *)&v154[0];
        v76 = *(_QWORD *)&v154[0] + v135;
        v22 = v62;
        do
        {
          *(_QWORD *)(v75 + v74) = *(_QWORD *)(v76 + v74);
          v74 += 8;
        }
        while (v74 != 72);
        ++v61;
        v135 += 304;
        v60 = 1;
        if (v61 >= 0x86BCA1AF286BCA1BLL * ((*((_QWORD *)&v154[0] + 1) - v56) >> 4))
          goto LABEL_91;
      }
LABEL_90:
      v60 = 0;
      v22 = v62;
LABEL_91:
      v32 = v134;
    }
    goto LABEL_97;
  }
  NSLog(CFSTR("error: crop rect dict is invalid\n"));
LABEL_96:
  v60 = 0;
LABEL_97:

LABEL_98:
  *(_QWORD *)&buf.origin.x = v154;
  sub_1D4D61D18((void ***)&buf);

  *(_QWORD *)&buf.origin.x = &v146;
  sub_1D4D61D18((void ***)&buf);

  if ((v60 & 1) == 0)
  {
    if (a4)
      *a4 = 8;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v79 = (id)qword_1ED988290;
    v80 = v79;
    v81 = v151;
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v79))
    {
      LOWORD(buf.origin.x) = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v80, OS_SIGNPOST_EVENT, v81, "ICCalcCinematicL1Corrections", "IC_ERROR_PATH_CONSTRAINTS_INVALID", (uint8_t *)&buf, 2u);
    }

    v13 = 0;
    goto LABEL_185;
  }
LABEL_99:
  sub_1D4D8E9FC((uint64_t)&v188);
  LODWORD(v188.origin.x) = v178;
  BYTE4(v188.origin.x) = v177 ^ 1;
  LOBYTE(v189) = v182 ^ 1;
  if (v173 != -1.0)
    *(float *)&v188.size.height = 1.0 - v173;
  if (v174 != -1.0)
    *((float *)&v189 + 1) = v174;
  objc_initWeak(&location, val);
  time2.size.height = 0.0;
  *((_QWORD *)&v194 + 1) = 0;
  objc_copyWeak((id *)&rect, &location);
  objc_moveWeak((id *)&time1, (id *)&rect);
  buf.size.height = 0.0;
  *(_QWORD *)&buf.origin.x = &off_1E988A3D0;
  objc_moveWeak((id *)&buf.origin.y, (id *)&time1);
  *(_QWORD *)&buf.size.height = &buf;
  objc_destroyWeak((id *)&time1);
  sub_1D4D62854(&buf, &time2);
  v77 = buf.size.height;
  if (*(CGRect **)&buf.size.height == &buf)
  {
    v78 = 4;
    v77 = COERCE_DOUBLE(&buf);
  }
  else
  {
    if (!*(_QWORD *)&buf.size.height)
      goto LABEL_116;
    v78 = 5;
  }
  (*(void (**)(void))(**(_QWORD **)&v77 + 8 * v78))();
LABEL_116:
  objc_destroyWeak((id *)&rect);
  objc_copyWeak((id *)&rect, &location);
  objc_moveWeak((id *)&time1, (id *)&rect);
  buf.size.height = 0.0;
  *(_QWORD *)&buf.origin.x = &off_1E988A428;
  objc_moveWeak((id *)&buf.origin.y, (id *)&time1);
  *(_QWORD *)&buf.size.height = &buf;
  objc_destroyWeak((id *)&time1);
  v82 = &v193;
  sub_1D4D62B68(&buf, &v193);
  v83 = buf.size.height;
  if (*(CGRect **)&buf.size.height == &buf)
  {
    v84 = 4;
    v83 = COERCE_DOUBLE(&buf);
  }
  else
  {
    if (!*(_QWORD *)&buf.size.height)
      goto LABEL_121;
    v84 = 5;
  }
  (*(void (**)(void))(**(_QWORD **)&v83 + 8 * v84))();
LABEL_121:
  objc_destroyWeak((id *)&rect);
  memset(&buf, 0, 24);
  v169 = 0uLL;
  *(_QWORD *)&buf.size.height = &v169;
  *(_OWORD *)v170 = 0u;
  *(_OWORD *)v171 = 0u;
  v172 = 0u;
  sub_1D4D61048((uint64_t)&buf.size.height, 0);
  *(_QWORD *)&buf.size.height = v149;
  v169 = v150;
  if (*((_QWORD *)&v150 + 1))
  {
    *(_QWORD *)(v150 + 16) = &v169;
    v149 = v22;
    *v22 = 0;
    v22[1] = 0;
  }
  else
  {
    *(_QWORD *)&buf.size.height = &v169;
  }
  v85 = sub_1D4D91BAC((uint64_t)&buf, v141, *(_QWORD *)(a1 + 48), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
  if (v85)
  {
    if (a4)
      *a4 = v85;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v86 = (id)qword_1ED988290;
    v87 = v86;
    v88 = v151;
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v86))
    {
      LOWORD(time1.value) = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v87, OS_SIGNPOST_EVENT, v88, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", (uint8_t *)&time1, 2u);
    }

    v13 = 0;
    goto LABEL_170;
  }
  if (!v138)
  {
    sub_1D4D60874(&time1, (uint64_t)&buf);
    memset(&rect, 0, 24);
    sub_1D4D61DA4(&rect, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
    v145 = 0;
LABEL_150:
    v103 = (double *)(a1 + 96);
    goto LABEL_151;
  }
  sub_1D4D9277C(&time1, &buf, v175, v176 - v175 + 1);
  sub_1D4D595E4((uint64_t *)(a1 + 24), v175, v176 - v175 + 1, &rect);
  v145 = 0;
  if (sub_1D4D5B2D0((_QWORD *)(a1 + 96)))
  {
    v89 = operator new();
    *(_QWORD *)(v89 + 128) = 0;
    *(_OWORD *)(v89 + 96) = 0u;
    *(_OWORD *)(v89 + 112) = 0u;
    *(_OWORD *)(v89 + 64) = 0u;
    *(_OWORD *)(v89 + 80) = 0u;
    *(_OWORD *)(v89 + 32) = 0u;
    *(_OWORD *)(v89 + 48) = 0u;
    *(_OWORD *)v89 = 0u;
    *(_OWORD *)(v89 + 16) = 0u;
    *(_QWORD *)&v154[0] = 0;
    v90 = v145;
    v145 = v89;
    if (v90)
    {
      sub_1D4D633C0((uint64_t)&v145, v90);
      v91 = *(_QWORD *)&v154[0];
      *(_QWORD *)&v154[0] = 0;
      if (v91)
        sub_1D4D633C0((uint64_t)v154, v91);
    }
    *(_OWORD *)(v145 + 120) = *(_OWORD *)(a1 + 216);
    sub_1D4D5B368((uint64_t *)(a1 + 96), v175, v176 - v175 + 1, v154);
    v92 = (_QWORD *)v145;
    v93 = *(void **)v145;
    if (*(_QWORD *)v145)
    {
      *(_QWORD *)(v145 + 8) = v93;
      operator delete(v93);
      *v92 = 0;
      v92[1] = 0;
      v92[2] = 0;
    }
    *(_OWORD *)v92 = v154[0];
    v92[2] = *(_QWORD *)&v154[1];
    sub_1D4D5B3DC((uint64_t *)(a1 + 120), v175, v176 - v175 + 1, v154);
    v94 = v145;
    v96 = (_QWORD *)(v145 + 24);
    v95 = *(void **)(v145 + 24);
    if (v95)
    {
      *(_QWORD *)(v145 + 32) = v95;
      operator delete(v95);
      *v96 = 0;
      v96[1] = 0;
      v96[2] = 0;
    }
    *(_OWORD *)(v94 + 24) = v154[0];
    *(_QWORD *)(v94 + 40) = *(_QWORD *)&v154[1];
    sub_1D4D5B3DC((uint64_t *)(a1 + 168), v175, v176 - v175 + 1, v154);
    v97 = v145;
    v99 = (_QWORD *)(v145 + 72);
    v98 = *(void **)(v145 + 72);
    if (v98)
    {
      *(_QWORD *)(v145 + 80) = v98;
      operator delete(v98);
      *v99 = 0;
      v99[1] = 0;
      v99[2] = 0;
    }
    *(_OWORD *)(v97 + 72) = v154[0];
    *(_QWORD *)(v97 + 88) = *(_QWORD *)&v154[1];
    sub_1D4D5B450((_QWORD *)(a1 + 192), v175, v176 - v175 + 1, v154);
    v100 = v145;
    v102 = (_QWORD *)(v145 + 96);
    v101 = *(void **)(v145 + 96);
    if (v101)
    {
      operator delete(v101);
      *v102 = 0;
      v102[1] = 0;
      v102[2] = 0;
    }
    *(_QWORD *)(v100 + 96) = *(_QWORD *)&v154[0];
    *(_OWORD *)(v100 + 104) = *(_OWORD *)((char *)v154 + 8);
  }
  v103 = (double *)v145;
  if (!v145)
    goto LABEL_150;
LABEL_151:
  v144 = 0;
  sub_1D4D92890((uint64_t)&v188, *(_QWORD *)(a1 + 48), (uint64_t)&time2, v179, v180, v183, v184, v185, (uint64_t *)v154, v173, &v144);
  if (v144)
  {
    if (a4)
      *a4 = 10;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v104 = (id)qword_1ED988290;
    v105 = v104;
    v106 = v151;
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v104))
    {
      *(_WORD *)v143 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v105, OS_SIGNPOST_EVENT, v106, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", v143, 2u);
    }
LABEL_159:

    goto LABEL_160;
  }
  v115 = *(_DWORD **)&v154[0];
  v116 = *(_QWORD *)(a1 + 48);
  v117 = (uint64_t)v187;
  if (!v187)
    goto LABEL_195;
  if (v187 != v186)
  {
    v117 = (*(uint64_t (**)(void))(*v187 + 16))();
LABEL_195:
    v158 = (_BYTE *)v117;
    goto LABEL_197;
  }
  v158 = v157;
  (*(void (**)(_QWORD *, _BYTE *))(v186[0] + 24))(v186, v157);
LABEL_197:
  sub_1D4D92A9C((uint64_t)&v188, v115, &rect, (uint64_t)v103, v116, &time1.value, (uint64_t)v157, &v144);
  v118 = v158;
  if (v158 == v157)
  {
    v119 = 4;
    v118 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_202;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_202:
  if (v144)
  {
    if (v144 == 3)
    {
      if (a4)
        *a4 = 10;
      sub_1D4D5482C();
      v120 = objc_claimAutoreleasedReturnValue();
      v105 = v120;
      v121 = v151;
      if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v120))
      {
        *(_WORD *)v143 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v105, OS_SIGNPOST_EVENT, v121, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", v143, 2u);
      }
    }
    else
    {
      if (a4)
        *a4 = 9;
      sub_1D4D5482C();
      v124 = objc_claimAutoreleasedReturnValue();
      v105 = v124;
      v125 = v151;
      if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v124))
      {
        *(_WORD *)v143 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v105, OS_SIGNPOST_EVENT, v125, "ICCalcCinematicL1Corrections", "IC_ERROR_CALCULATING_CORRECTIONS", v143, 2u);
      }
    }
    goto LABEL_159;
  }
  v122 = *(_QWORD *)&v154[0];
  v123 = (uint64_t)v187;
  if (!v187)
    goto LABEL_213;
  if (v187 != v186)
  {
    v123 = (*(uint64_t (**)(void))(*v187 + 16))();
LABEL_213:
    v156 = (_BYTE *)v123;
    goto LABEL_222;
  }
  v156 = v155;
  (*(void (**)(_QWORD *, _BYTE *))(v186[0] + 24))(v186, v155);
LABEL_222:
  sub_1D4D947C4((uint64_t)&v188, v122, (uint64_t *)&rect, v103, (uint64_t)&time1, (uint64_t)v155, &v144, (uint64_t *)v143);
  v126 = v156;
  if (v156 == v155)
  {
    v127 = 4;
    v126 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_227;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_227:
  v13 = *(_QWORD *)v143;
  if (*(_QWORD *)v143 && !v144)
  {
    *(_QWORD *)(*(_QWORD *)v143 + 48) = *(_QWORD *)(a1 + 48);
    if (v181)
    {
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      v128 = *(_QWORD *)(a1 + 48);
      v129.i64[0] = (int)v128;
      v129.i64[1] = SHIDWORD(v128);
      *(float64x2_t *)(v13 + 72) = vcvtq_f64_s64(v129);
      *(_BYTE *)(v13 + 232) = 1;
    }
    if (a4)
      *a4 = 0;
    goto LABEL_161;
  }
  if (a4)
    *a4 = 9;
  sub_1D4D5482C();
  v130 = objc_claimAutoreleasedReturnValue();
  v131 = v130;
  v132 = v151;
  if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v130))
  {
    *(_WORD *)v142 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v131, OS_SIGNPOST_EVENT, v132, "ICCalcCinematicL1Corrections", "IC_ERROR_CALCULATING_CORRECTIONS", v142, 2u);
  }

  v133 = *(_QWORD *)v143;
  *(_QWORD *)v143 = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
LABEL_160:
  v13 = 0;
LABEL_161:
  v107 = *(_QWORD *)&v154[0];
  *(_QWORD *)&v154[0] = 0;
  if (v107)
    sub_1D4D62CDC((uint64_t)v154, v107);
  v108 = v145;
  v145 = 0;
  if (v108)
    sub_1D4D633C0((uint64_t)&v145, v108);
  *(_QWORD *)&v154[0] = &rect;
  sub_1D4D61D18((void ***)v154);
  if (__p)
  {
    v167 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  sub_1D4D61048((uint64_t)&v160, v161);
  *(_QWORD *)&rect.origin.x = &time1;
  sub_1D4D60C20((void ***)&rect);
LABEL_170:
  if (v171[1])
  {
    *(void **)&v172 = v171[1];
    operator delete(v171[1]);
  }
  if (v170[0])
  {
    v170[1] = v170[0];
    operator delete(v170[0]);
  }
  sub_1D4D61048((uint64_t)&buf.size.height, (_QWORD *)v169);
  time1.value = (CMTimeValue)&buf;
  sub_1D4D60C20((void ***)&time1);
  if (*((__int128 **)&v194 + 1) == &v193)
  {
    v109 = 4;
  }
  else
  {
    if (!*((_QWORD *)&v194 + 1))
      goto LABEL_179;
    v109 = 5;
    v82 = (__int128 *)*((_QWORD *)&v194 + 1);
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v82 + 8 * v109))(v82);
LABEL_179:
  v110 = time2.size.height;
  if (*(CGRect **)&time2.size.height == &time2)
  {
    v111 = 4;
    v110 = COERCE_DOUBLE(&time2);
    goto LABEL_183;
  }
  if (*(_QWORD *)&time2.size.height)
  {
    v111 = 5;
LABEL_183:
    (*(void (**)(void))(**(_QWORD **)&v110 + 8 * v111))();
  }
  objc_destroyWeak(&location);
  nullsub_2(&v188);
LABEL_185:
  sub_1D4D61048((uint64_t)&v149, (_QWORD *)v150);
  v12 = v139;
LABEL_186:

  v112 = v187;
  if (v187 == v186)
  {
    v113 = 4;
    v112 = v186;
    goto LABEL_190;
  }
  if (v187)
  {
    v113 = 5;
LABEL_190:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
LABEL_191:
  sub_1D4D5B55C(&v151);

  return v13;
}

void sub_1D4D5B074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,os_signpost_id_t a33,id location,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;

  v65 = a39;
  a39 = 0;
  if (v65)
    sub_1D4D62CDC((uint64_t)&a39, v65);
  v66 = a26;
  a26 = 0;
  if (v66)
    sub_1D4D633C0((uint64_t)&a26, v66);
  a39 = (uint64_t)&a35;
  sub_1D4D61D18((void ***)&a39);
  sub_1D4D59658((uint64_t)&a51);
  sub_1D4D59658((uint64_t)&a63);
  sub_1D4D5B4E0((_QWORD *)(v63 - 176));
  objc_destroyWeak(&location);
  nullsub_2(v63 - 256);
  sub_1D4D61048((uint64_t)&a30, (_QWORD *)a31);

  v67 = (unint64_t *)STACK[0x258];
  if ((unint64_t *)STACK[0x258] == &STACK[0x240])
  {
    v68 = 4;
    v67 = &STACK[0x240];
  }
  else
  {
    if (!v67)
      goto LABEL_10;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_10:
  sub_1D4D5B55C(&a33);

  _Unwind_Resume(a1);
}

BOOL sub_1D4D5B2D0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = 0xAAAAAAAAAAAAAAABLL * ((v1 - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[4] - a1[3]) >> 3) != v2
    || 0x8E38E38E38E38E39 * ((uint64_t)(a1[10] - a1[9]) >> 3) != v2
    || a1[13] != v2)
  {
    return 0;
  }
  return a1[7] == a1[6] || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[7] - a1[6]) >> 3) == v2;
}

uint64_t *sub_1D4D5B368@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = -1431655765 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D63444(a4, (const void *)(v4 + 24 * a2), v4 + 24 * a2 + 24 * v8, v8);
  }
  return result;
}

uint64_t *sub_1D4D5B3DC@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = 954437177 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D634BC(a4, (const void *)(v4 + 72 * a2), v4 + 72 * a2 + 72 * v8, v8);
  }
  return result;
}

void sub_1D4D5B450(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = a1[1];
  if (v4 && (a2 & 0x80000000) == 0 && (int)v4 > a2 && a3 > -2)
  {
    if (a3 == -1)
      v5 = v4 - a2;
    else
      v5 = a3;
    if (v5 + a2 <= (int)v4)
      v6 = v5;
    else
      v6 = v4 - a2;
    v7 = a2;
    v8 = (_QWORD *)(*a1 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8));
    v9 = v7 & 0x3F;
    v10 = v9 + v6;
    v11 = v10 - 63;
    if (v10 < 63)
      v11 = v9 + v6;
    v12 = v11 >> 6;
    if (v6 >= 0)
      v13 = (unint64_t)v10 >> 6;
    else
      v13 = v12;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_1D4D63534(a4, v8, v9, &v8[v13], v10 & 0x3F, (v10 & 0x3F) - v9 + (v13 << 6));
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

_QWORD *sub_1D4D5B4E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

os_signpost_id_t *sub_1D4D5B55C(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1Corrections", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICCorrectionCopyAndExtend(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  id v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  const char *v28;
  NSObject *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint8_t buf[16];
  unint64_t v38;
  os_signpost_id_t v39;
  uint8_t *v40;

  v7 = a3;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v8 = (id)qword_1ED988290;
  v9 = os_signpost_id_generate(v8);
  v39 = v9;
  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v10 = (id)qword_1ED988290;
  v11 = v10;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ICCorrectionUpdateWithSourceSize", (const char *)&unk_1D4DBA386, buf, 2u);
  }

  if ((sub_1D4D5207C(a1) & 1) == 0)
  {
    if (a4)
      *a4 = 1;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v25 = (id)qword_1ED988290;
    v26 = v25;
    v27 = v39;
    if (v39 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v25))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v28 = "IC_ERROR_ANALYSIS_MALFORMED";
    goto LABEL_33;
  }
  if ((sub_1D4D5207C(a2) & 1) == 0)
  {
    if (a4)
      *a4 = 2;
    if (qword_1ED988288 != -1)
      dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
    v29 = (id)qword_1ED988290;
    v26 = v29;
    v27 = v39;
    if (v39 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v29))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v28 = "IC_ERROR_CORRECTIONS_MALFORMED";
LABEL_33:
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v26, OS_SIGNPOST_EVENT, v27, "ICCorrectionUpdateWithSourceSize", v28, buf, 2u);
LABEL_34:

    v12 = 0;
    goto LABEL_45;
  }
  v12 = operator new();
  sub_1D4D61270(v12, a2);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(v13 + 104);
  v16 = (v14 - v13) >> 4;
  v17 = 678152731 * v16;
  v19 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  memset(buf, 0, sizeof(buf));
  v38 = 0;
  if (v15 < 1)
  {
    v20 = 0;
    v24 = 0x86BCA1AF286BCA1BLL * v16;
  }
  else
  {
    v20 = 0;
    for (i = 0; i != v15; ++i)
    {
      v22 = *(_QWORD *)(a1 + 24) + 304 * i;
      if (v20 >= v38)
      {
        v20 = sub_1D4D63698((uint64_t *)buf, v22);
      }
      else
      {
        sub_1D4D635B4((uint64_t)buf, v22);
        v20 += 304;
      }
      v23 = 0;
      *(_QWORD *)&buf[8] = v20;
      v13 = *(_QWORD *)(a2 + 24);
      do
      {
        *(_QWORD *)(v20 + v23 - 304) = *(_QWORD *)(v13 + v23);
        v23 += 8;
      }
      while (v23 != 72);
    }
    v14 = *(_QWORD *)(a2 + 32);
    v24 = 0x86BCA1AF286BCA1BLL * ((v14 - v13) >> 4);
  }
  sub_1D4D63854((uint64_t *)buf, v20, v13, v14, v24);
  v30 = 0x86BCA1AF286BCA1BLL * ((v18 - v19) >> 4);
  if (v30 > v17 + (int)v15)
  {
    v31 = v17 + (int)v15;
    v32 = *(_QWORD *)&buf[8];
    do
    {
      v33 = *(_QWORD *)(a1 + 24) + 304 * v31;
      if (v32 >= v38)
      {
        v32 = sub_1D4D63698((uint64_t *)buf, v33);
      }
      else
      {
        sub_1D4D635B4((uint64_t)buf, v33);
        v32 += 304;
      }
      *(_QWORD *)&buf[8] = v32;
      v34 = *(_QWORD *)(a2 + 32);
      for (j = -304; j != -232; j += 8)
        *(_QWORD *)(v32 + j) = *(_QWORD *)(v34 + j);
      ++v31;
    }
    while (v30 > v31);
  }
  sub_1D4D62020((uint64_t *)(v12 + 24));
  *(_OWORD *)(v12 + 24) = *(_OWORD *)buf;
  *(_QWORD *)(v12 + 40) = v38;
  v38 = 0;
  memset(buf, 0, sizeof(buf));
  v40 = buf;
  sub_1D4D61D18((void ***)&v40);
LABEL_45:
  sub_1D4D5BAC0(&v39);

  return v12;
}

void sub_1D4D5BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, os_signpost_id_t a15, void **a16)
{
  uint64_t v16;

  a16 = (void **)&a11;
  sub_1D4D61D18(&a16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_1D4D5BAC0(&a15);

  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1D4D5BAC0(os_signpost_id_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v6[16];

  if (qword_1ED988288 != -1)
    dispatch_once(&qword_1ED988288, &unk_1E988B2B8);
  v2 = (id)qword_1ED988290;
  v3 = v2;
  v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4D4F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCorrectionUpdateWithSourceSize", (const char *)&unk_1D4DBA386, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcSmoothingCorrections(uint64_t a1, void *a2, int *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void **v14;
  unsigned int v15;
  char v16;
  float v17;
  char v18;
  float v19;
  float v20;
  float v21;
  char v22;
  unsigned int v23;
  char v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if ((sub_1D4D5207C(a1) & 1) != 0)
  {
    v6 = operator new();
    *(_OWORD *)(v6 + 208) = 0u;
    *(_OWORD *)(v6 + 224) = 0u;
    *(_OWORD *)(v6 + 176) = 0u;
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)v6 = 0u;
    *(_QWORD *)v6 = &off_1E988ABE8;
    *(_QWORD *)(v6 + 248) = 0;
    *(_QWORD *)(v6 + 256) = 0;
    *(_QWORD *)(v6 + 240) = 0;
    sub_1D4D57AC4(v5, (uint64_t)&v20);
    sub_1D4D8E9FC((uint64_t)&v15);
    v15 = v23;
    v16 = v22 ^ 1;
    v18 = v25 ^ 1;
    if (v20 != -1.0)
      v17 = 1.0 - v20;
    if (v21 != -1.0)
      v19 = v21;
    v7 = sub_1D4D94730(&v15, (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), v6 + 56, (BOOL *)(v6 + 232));
    v14 = (void **)v7;
    if (v7)
    {
      sub_1D4D62020((uint64_t *)(v6 + 24));
      *(_OWORD *)(v6 + 24) = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 40) = v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      sub_1D4D63B50(&v14, 0);
      v8 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v6 + 48) = v8;
      if (v24)
      {
        *(_QWORD *)(v6 + 56) = 0;
        *(_QWORD *)(v6 + 64) = 0;
        *(double *)(v6 + 72) = (double)(int)v8;
        *(double *)(v6 + 80) = (double)SHIDWORD(v8);
        *(_BYTE *)(v6 + 232) = 1;
      }
      v9 = 0;
      if (a3)
      {
        v10 = 0;
LABEL_15:
        *a3 = v10;
      }
    }
    else
    {
      if (a3)
      {
        v10 = 9;
        v9 = v6;
        v6 = 0;
        goto LABEL_15;
      }
      v9 = v6;
      v6 = 0;
    }
    sub_1D4D63B50(&v14, 0);
    nullsub_2(&v15);
    v11 = v27;
    if (v27 == v26)
    {
      v12 = 4;
      v11 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_21;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_23;
  }
  v6 = 0;
  if (a3)
    *a3 = 1;
LABEL_23:

  return v6;
}

void sub_1D4D5BDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25)
{
  void *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;

  nullsub_2(&a11);
  v28 = a25;
  if (a25 == &a22)
  {
    v29 = 4;
    v28 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);

  _Unwind_Resume(a1);
}

uint64_t ICCalcCanDoTripod(uint64_t a1, void *a2, _DWORD *a3, _OWORD *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  double v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;
  char v22;
  float v23;
  char v24;
  float v25;
  char v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  char v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if ((sub_1D4D5207C(a1) & 1) != 0)
  {
    sub_1D4D57AC4(v9, (uint64_t)&v27);
    if (v29 == -1)
      v29 = 0;
    if (v30 == -1)
    {
      ICGetResultStats((id *)a1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectForKeyedSubscript:", IC_A_STAT_FRAME_COUNT);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "intValue");

      v30 = v12 - 1;
    }
    if (v31 == -1)
    {
      v13 = v30 + v29;
      if (v30 + v29 < 0 != __OFADD__(v30, v29))
        ++v13;
      v31 = v13 >> 1;
    }
    v26 = 0;
    sub_1D4D5C180(v9, &v26);
    sub_1D4D8E9FC((uint64_t)&v21);
    v21 = v33;
    v22 = v32 ^ 1;
    v24 = v34 ^ 1;
    if (v27 != -1.0)
      v23 = 1.0 - v27;
    if (v28 != -1.0)
      v25 = v28;
    if (a5)
      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", *a5);
    else
      v14 = 0;
    if (v26)
    {
      *(float *)&v16 = sub_1D4D95190((uint64_t)&v21, (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), v31, v29, v30, 0);
      if (v14)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v17, IC_D_CALC_TRIPOD_CONFIDENCE);

      }
    }
    v15 = sub_1D4D9521C((float *)&v21, (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), *(uint64_t **)(a1 + 232), v31, v29, v30, a4);
    if (a5)
      *a5 = objc_retainAutorelease(v14);

    nullsub_2(&v21);
    v18 = v36;
    if (v36 == v35)
    {
      v19 = 4;
      v18 = v35;
      goto LABEL_28;
    }
    if (v36)
    {
      v19 = 5;
LABEL_28:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  else
  {
    v15 = 0;
    if (a3)
      *a3 = 1;
  }

  return v15;
}

void sub_1D4D5C0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v29;
  uint64_t v30;

  v29 = a25;
  if (a25 == &a22)
  {
    v30 = 4;
    v29 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1D4D5C180(void *a1, _BYTE *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a1;
  *a2 = 0;
  v6 = v3;
  objc_msgSend(v3, "objectForKeyedSubscript:", IC_D_CALC_TRIPOD_CONFIDENCE);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", IC_D_CALC_TRIPOD_CONFIDENCE);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *a2 = objc_msgSend(v5, "BOOLValue");

  }
}

void sub_1D4D5C1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ICCalcTripodCorrections(uint64_t a1, void *a2, int *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  uint64_t *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  int v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  id v26;
  void **v27;
  int v28;
  char v29;
  float v30;
  char v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  int v37;
  int v38;
  int v39;
  char v40;
  int v41;
  char v42;
  char v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if ((sub_1D4D5207C(a1) & 1) != 0)
  {
    v6 = operator new();
    *(_OWORD *)(v6 + 208) = 0u;
    *(_OWORD *)(v6 + 224) = 0u;
    *(_OWORD *)(v6 + 176) = 0u;
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)v6 = 0u;
    *(_QWORD *)v6 = &off_1E988ABE8;
    *(_QWORD *)(v6 + 248) = 0;
    *(_QWORD *)(v6 + 256) = 0;
    *(_QWORD *)(v6 + 240) = 0;
    sub_1D4D57AC4(v5, (uint64_t)&v35);
    if (v37 == -1)
      v37 = 0;
    if (v38 == -1)
    {
      ICGetResultStats((id *)a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", IC_A_STAT_FRAME_COUNT);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "intValue");

      v38 = v9 - 1;
    }
    if (v39 == -1)
    {
      if (v38 - v37 + 1 >= 0)
        v10 = v38 - v37 + 1;
      else
        v10 = v38 - v37 + 2;
      v39 = v37 + (v10 >> 1);
    }
    sub_1D4D8E9FC((uint64_t)&v28);
    v28 = v41;
    v29 = v40 ^ 1;
    v31 = v43 ^ 1;
    if (v35 != -1.0)
      v30 = 1.0 - v35;
    if (v36 != -1.0)
      v32 = v36;
    v11 = sub_1D4D9508C((float *)&v28, (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 48), *(uint64_t **)(a1 + 232), v39, v37, v38, v6 + 56, (BOOL *)(v6 + 232));
    v27 = (void **)v11;
    if (v11)
    {
      sub_1D4D62020((uint64_t *)(v6 + 24));
      *(_OWORD *)(v6 + 24) = *(_OWORD *)v11;
      *(_QWORD *)(v6 + 40) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      sub_1D4D63B50(&v27, 0);
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(a1 + 48);
      v33 = IC_D_CALC_TRIPOD_CONFIDENCE;
      v34 = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 0;
      ICCalcCanDoTripod(a1, v12, 0, 0, &v26);
      v13 = v26;
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "objectForKeyedSubscript:", IC_D_CALC_TRIPOD_CONFIDENCE);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15 == 0;

        if (!v16)
        {
          objc_msgSend(v14, "objectForKeyedSubscript:", IC_D_CALC_TRIPOD_CONFIDENCE);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "floatValue");
          *(_DWORD *)(v6 + 92) = v18;

        }
      }

      if (v42)
      {
        *(_QWORD *)(v6 + 56) = 0;
        *(_QWORD *)(v6 + 64) = 0;
        v19 = *(_QWORD *)(a1 + 48);
        v20.i64[0] = (int)v19;
        v20.i64[1] = SHIDWORD(v19);
        *(float64x2_t *)(v6 + 72) = vcvtq_f64_s64(v20);
        *(_BYTE *)(v6 + 232) = 1;
      }
      v21 = 0;
      if (a3)
      {
        v22 = 0;
LABEL_27:
        *a3 = v22;
      }
    }
    else
    {
      if (a3)
      {
        v22 = 9;
        v21 = v6;
        v6 = 0;
        goto LABEL_27;
      }
      v21 = v6;
      v6 = 0;
    }
    sub_1D4D63B50(&v27, 0);
    nullsub_2(&v28);
    v23 = v45;
    if (v45 == v44)
    {
      v24 = 4;
      v23 = v44;
    }
    else
    {
      if (!v45)
        goto LABEL_33;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_35;
  }
  v6 = 0;
  if (a3)
    *a3 = 1;
LABEL_35:

  return v6;
}

void sub_1D4D5C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29)
{
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t *v35;
  uint64_t v36;

  sub_1D4D63B50(&a12, 0);
  nullsub_2(&a13);
  v35 = a29;
  if (a29 == &a26)
  {
    v36 = 4;
    v35 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);

  _Unwind_Resume(a1);
}

uint64_t ICCalcPassThruCorrections(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64x2_t v11;
  int v12;

  if ((sub_1D4D5207C((uint64_t)a1) & 1) != 0)
  {
    v4 = operator new();
    v5 = v4;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_QWORD *)v4 = &off_1E988ABE8;
    *(_QWORD *)(v4 + 248) = 0;
    *(_QWORD *)(v4 + 256) = 0;
    *(_QWORD *)(v4 + 240) = 0;
    if ((uint64_t *)v4 != a1)
    {
      sub_1D4D61E7C((uint64_t *)(v4 + 24), a1[3], a1[4], 0x86BCA1AF286BCA1BLL * ((a1[4] - a1[3]) >> 4));
      v6 = *(_QWORD *)(v5 + 24);
      if (*(_QWORD *)(v5 + 32) != v6)
      {
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = (_QWORD *)(v6 + v7);
          v9[2] = 0;
          v9[3] = 0;
          *v9 = 0x3FF0000000000000;
          v9[1] = 0;
          v9[4] = 0x3FF0000000000000;
          v9[5] = 0;
          v9[6] = 0;
          v9[7] = 0;
          v9[8] = 0x3FF0000000000000;
          ++v8;
          v6 = *(_QWORD *)(v5 + 24);
          v7 += 304;
        }
        while (v8 < 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(v5 + 32) - v6) >> 4));
      }
    }
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = 0;
    v10 = a1[6];
    v11.i64[0] = (int)v10;
    v11.i64[1] = SHIDWORD(v10);
    *(float64x2_t *)(v5 + 72) = vcvtq_f64_s64(v11);
    *(_QWORD *)(v5 + 48) = v10;
    *(_BYTE *)(v5 + 232) = 1;
    if (a2)
    {
      v12 = 0;
LABEL_10:
      *a2 = v12;
    }
  }
  else
  {
    v5 = 0;
    if (a2)
    {
      v12 = 1;
      goto LABEL_10;
    }
  }
  return v5;
}

uint64_t ICGetRecordIndexForTime(uint64_t a1, CMTime *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFDictionary *v8;
  void *v9;
  const __CFDictionary *v10;
  unsigned int v11;
  BOOL v12;
  void *v13;
  const __CFDictionary *v14;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime time2;
  CMTime time1;
  CMTime v22;

  ICGetResultHomographies(a1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", IC_A_FRAMEINSTRUCTIONS);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");
    if (v6)
    {
      memset(&v22, 0, sizeof(v22));
      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_RAWTIME);
      v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CMTimeMakeFromDictionary(&v22, v8);

      time1 = *a2;
      time2 = v22;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        v6 = 0;
        goto LABEL_13;
      }
      memset(&v22, 0, sizeof(v22));
      objc_msgSend(v5, "objectAtIndexedSubscript:", v6 - 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_RAWTIME);
      v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CMTimeMakeFromDictionary(&v22, v10);

      v19 = *a2;
      v18 = v22;
      if ((CMTimeCompare(&v19, &v18) & 0x80000000) == 0)
      {
        v6 = (v6 - 1);
LABEL_13:

        goto LABEL_14;
      }
      v11 = v6 - 1;
      while (1)
      {
        v12 = __OFSUB__((_DWORD)v6, 1);
        v6 = (v6 - 1);
        if ((int)v6 < 0 != v12)
          break;
        memset(&v22, 0, sizeof(v22));
        objc_msgSend(v5, "objectAtIndexedSubscript:", v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", IC_A_FRAMETRANSFORM_RAWTIME);
        v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        CMTimeMakeFromDictionary(&v22, v14);

        v17 = v22;
        v16 = *a2;
        --v11;
        if (CMTimeCompare(&v17, &v16) <= 0)
          goto LABEL_13;
      }
    }
    v6 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  v6 = 0xFFFFFFFFLL;
LABEL_14:

  return v6;
}

void sub_1D4D5C9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id ICFillHomographyGaps(void *a1, void *a2, void *a3, _QWORD *a4)
{
  void *v7;
  int v8;
  void *v9;
  int v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  double *v28;
  double *v29;
  char v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  double v51;
  double *v52;
  double v53;
  uint64_t i;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  double v58;
  double *v59;
  double v60;
  void *v61;
  double *v62;
  double *j;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double *v78;
  uint64_t v79;
  unint64_t v80;
  const __CFAllocator *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  CMTimeEpoch v91;
  CFDictionaryRef v92;
  void *v93;
  unint64_t v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  CMTime time;
  uint64_t *v102;
  _QWORD *v103[2];
  void *__p;
  char *v105;
  double *v106;
  double *v107;
  uint64_t v108;
  _QWORD v109[2];
  _QWORD v110[2];
  uint64_t v111;
  const __CFString *v112;
  uint64_t v113;
  const __CFString *v114;
  uint64_t v115;
  const __CFString *v116;
  uint64_t v117;
  const __CFString *v118;
  _BYTE __src[72];
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  _OWORD v129[4];
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v99 = a1;
  v98 = a2;
  v100 = a3;
  objc_msgSend(v100, "objectForKeyedSubscript:", IC_A_HOMOGRAPHIES_INVERTED);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v96 = v7;
  if (v7)
    v8 = objc_msgSend(v7, "BOOLValue");
  else
    v8 = 0;
  objc_msgSend(v100, "objectForKeyedSubscript:", IC_A_HOMOGRAPHIES_MAP_TO_REFERENCE);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = v9;
  if (v9)
    v10 = objc_msgSend(v9, "BOOLValue");
  else
    v10 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  if (sub_1D4D58A00((uint64_t *)&v106, v99, v8, v10, 0, (uint64_t)__src, 0))
  {
    sub_1D4D5D3D0(v98, &__p);
    v11 = (char *)__p;
    if (__p == v105)
    {
      if (a4)
      {
        v115 = *MEMORY[0x1E0CB2938];
        v116 = CFSTR("No requested fill times were provided.\n");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v116, &v115, 1);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v26);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      while ((*((_DWORD *)v11 + 3) & 0x1D) == 1)
      {
        v11 += 24;
        if (v11 == v105)
        {
          sub_1D4D7DF80((uint64_t *)&v106, (uint64_t)&__p, (uint64_t *)&v106, &v102);
          v18 = v102;
          if (v102 == (uint64_t *)v103)
          {
            v19 = 0;
          }
          else
          {
            v19 = 0;
            do
            {
              v20 = (uint64_t *)v18[1];
              v21 = v18;
              if (v20)
              {
                do
                {
                  v22 = v20;
                  v20 = (uint64_t *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  v22 = (uint64_t *)v21[2];
                  v23 = *v22 == (_QWORD)v21;
                  v21 = v22;
                }
                while (!v23);
              }
              v19 -= 0x5555555555555555 * ((v18[12] - v18[11]) >> 3);
              v18 = v22;
            }
            while (v22 != (uint64_t *)v103);
          }
          if (v19 != 0xAAAAAAAAAAAAAAABLL * ((v105 - (_BYTE *)__p) >> 3))
          {
            if (a4)
            {
              v111 = *MEMORY[0x1E0CB2938];
              v112 = CFSTR("Number of filled gaps does not match number of requested fill times.\n");
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v112, &v111, 1);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v61);
              *a4 = (id)objc_claimAutoreleasedReturnValue();

            }
            v25 = 0;
            goto LABEL_86;
          }
          if ((v8 | v10) == 1)
          {
            if (((v10 | v8 ^ 1) & 1) != 0)
            {
              if (v10)
              {
                v28 = v106;
                v29 = v107;
                if (v106 != v107)
                {
                  v30 = 1;
                  v31 = (double *)__src;
                  do
                  {
                    if ((v30 & 1) != 0)
                    {
                      memmove(v28, v31, 0x48uLL);
                    }
                    else
                    {
                      if (v8)
                      {
                        v32 = v28[7];
                        v33 = v28[8];
                        v34 = v28[5];
                        v35 = v28[6];
                        v37 = v28[3];
                        v36 = v28[4];
                        v38 = v36 * v33 - v32 * v34;
                        v39 = v28[1];
                        v40 = v28[2];
                        v41 = v32 * v40 - v39 * v33;
                        v120 = v38;
                        v121 = v41;
                        v42 = v39 * v34 - v36 * v40;
                        v122 = v42;
                        v43 = *v28;
                        v44 = v41 * v37 + *v28 * v38 + v35 * v42;
                        if (v44 >= 2.22044605e-16 || v44 <= -2.22044605e-16)
                        {
                          v120 = v38 / v44;
                          v121 = v41 / v44;
                          v122 = v42 / v44;
                          v123 = (v35 * v34 - v37 * v33) / v44;
                          v124 = (v43 * v33 - v35 * v40) / v44;
                          v125 = (v37 * v40 - v43 * v34) / v44;
                          v126 = (v37 * v32 - v35 * v36) / v44;
                          v127 = (v35 * v39 - v43 * v32) / v44;
                          v128 = (v43 * v36 - v37 * v39) / v44;
                        }
                        v46 = 0;
                        v47 = &v120;
                        do
                        {
                          v48 = 0;
                          v49 = v31;
                          do
                          {
                            v50 = 0;
                            v51 = 0.0;
                            v52 = v49;
                            do
                            {
                              v53 = *v52;
                              v52 += 3;
                              v51 = v51 + v47[v50++] * v53;
                            }
                            while (v50 != 3);
                            *((double *)v129 + 3 * v46 + v48++) = v51;
                            ++v49;
                          }
                          while (v48 != 3);
                          ++v46;
                          v47 += 3;
                        }
                        while (v46 != 3);
                      }
                      else
                      {
                        for (i = 0; i != 3; ++i)
                        {
                          v55 = 0;
                          v56 = v28;
                          do
                          {
                            v57 = 0;
                            v58 = 0.0;
                            v59 = v56;
                            do
                            {
                              v60 = *v59;
                              v59 += 3;
                              v58 = v58 + v31[v57++] * v60;
                            }
                            while (v57 != 3);
                            *((double *)v129 + 3 * i + v55++) = v58;
                            ++v56;
                          }
                          while (v55 != 3);
                          v31 += 3;
                        }
                      }
                      *((_OWORD *)v28 + 1) = v129[1];
                      *((_OWORD *)v28 + 2) = v129[2];
                      *((_OWORD *)v28 + 3) = v129[3];
                      *((_QWORD *)v28 + 8) = v130;
                      *(_OWORD *)v28 = v129[0];
                      v31 = v28;
                    }
                    v30 = 0;
                    v28 += 38;
                  }
                  while (v28 != v29);
                }
              }
            }
            else
            {
              v62 = v106;
              for (j = v107; v62 != j; v62 += 38)
              {
                v64 = v62[7];
                v65 = v62[8];
                v66 = v62[4];
                v67 = v62[5];
                v68 = v62[6];
                v69 = v66 * v65 - v64 * v67;
                v70 = *v62;
                v71 = v62[1];
                v73 = v62[2];
                v72 = v62[3];
                v74 = v64 * v73 - v71 * v65;
                v75 = v71 * v67 - v66 * v73;
                v76 = v74 * v72 + *v62 * v69 + v68 * v75;
                if (v76 >= 2.22044605e-16 || v76 <= -2.22044605e-16)
                {
                  v69 = v69 / v76;
                  v74 = v74 / v76;
                  v75 = v75 / v76;
                  v13 = (v68 * v67 - v72 * v65) / v76;
                  v12 = (v72 * v64 - v68 * v66) / v76;
                  v14 = (v70 * v65 - v68 * v73) / v76;
                  v15 = (v72 * v73 - v70 * v67) / v76;
                  v16 = (v68 * v71 - v70 * v64) / v76;
                  v17 = (v70 * v66 - v72 * v71) / v76;
                }
                *v62 = v69;
                v62[1] = v74;
                v62[2] = v75;
                v62[3] = v13;
                v62[4] = v14;
                v62[5] = v15;
                v62[6] = v12;
                v62[7] = v16;
                v62[8] = v17;
              }
            }
          }
          v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          *(_QWORD *)&v129[0] = 0;
          v79 = (uint64_t)v106;
          v78 = v107;
          if (v107 == v106)
            goto LABEL_86;
          v80 = 0;
          v81 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          while (1)
          {
            v82 = v103[0];
            if (!v103[0])
            {
LABEL_78:
              ++v80;
              goto LABEL_85;
            }
            while (1)
            {
              v83 = v82[4];
              if (v80 >= v83)
                break;
LABEL_77:
              v82 = (_QWORD *)*v82;
              if (!v82)
                goto LABEL_78;
            }
            if (v83 < v80)
              break;
            v120 = COERCE_DOUBLE(v129);
            v84 = sub_1D4D63BF0(&v102, (unint64_t *)v129, (uint64_t)&unk_1D4DB1844, (_QWORD **)&v120);
            v95 = ((char *)v84[12] - (char *)v84[11]) / 24;
            if (v84[12] != v84[11])
            {
              v85 = 0;
              if (v95 <= 1)
                v86 = 1;
              else
                v86 = ((char *)v84[12] - (char *)v84[11]) / 24;
              do
              {
                v87 = v85 + *(_QWORD *)&v129[0];
                v88 = (uint64_t)v106;
                v109[0] = IC_A_FRAMETRANSFORM_HOMOGRAPHY;
                sub_1D4D51DEC((uint64_t)&v106[38 * v85 + 38 * *(_QWORD *)&v129[0]]);
                v89 = (void *)objc_claimAutoreleasedReturnValue();
                v109[1] = IC_A_FRAMETRANSFORM_RAWTIME;
                v110[0] = v89;
                v90 = v88 + 304 * v87;
                v91 = *(_QWORD *)(v90 + 128);
                *(_OWORD *)&time.value = *(_OWORD *)(v90 + 112);
                time.epoch = v91;
                v92 = CMTimeCopyAsDictionary(&time, v81);
                v110[1] = v92;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v110, v109, 2);
                v93 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v25, "addObject:", v93);
                ++v85;
              }
              while (v86 != v85);
            }
            v80 = *(_QWORD *)&v129[0] + v95;
            v79 = (uint64_t)v106;
            v78 = v107;
LABEL_85:
            *(_QWORD *)&v129[0] = v80;
            if (v80 >= 0x86BCA1AF286BCA1BLL * (((uint64_t)v78 - v79) >> 4))
            {
LABEL_86:
              sub_1D4D63BA0((uint64_t)&v102, v103[0]);
              goto LABEL_87;
            }
          }
          ++v82;
          goto LABEL_77;
        }
      }
      if (a4)
      {
        v113 = *MEMORY[0x1E0CB2938];
        v114 = CFSTR("Requested fill time value is not numeric.\n");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v114, &v113, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v27);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    v25 = 0;
LABEL_87:
    if (__p)
    {
      v105 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    if (a4)
    {
      v117 = *MEMORY[0x1E0CB2938];
      v118 = CFSTR("Error while extracting existing homographies.\n");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v118, &v117, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v24);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v25 = 0;
  }
  *(_QWORD *)&v129[0] = &v106;
  sub_1D4D61D18((void ***)v129);

  return v25;
}

void sub_1D4D5D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;

  sub_1D4D63BA0((uint64_t)&a18, a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v25 - 168) = &a24;
  sub_1D4D61D18((void ***)(v25 - 168));

  _Unwind_Resume(a1);
}

void sub_1D4D5D3D0(void *a1@<X0>, void **a2@<X8>)
{
  id v3;
  unint64_t v4;
  uint64_t i;
  const __CFDictionary *v6;
  char *v7;
  char *v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  CMTime v22;

  v3 = a1;
  v4 = objc_msgSend(v3, "count");
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v4)
  {
    sub_1D4D61C3C(a2, v4);
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", i);
      v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      memset(&v22, 0, sizeof(v22));
      CMTimeMakeFromDictionary(&v22, v6);
      v8 = (char *)a2[1];
      v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a2) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1D4D5DFA8();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a2) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)sub_1D4D60A34((uint64_t)(a2 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[24 * v11];
        v17 = *(_OWORD *)&v22.value;
        *((_QWORD *)v16 + 2) = v22.epoch;
        *(_OWORD *)v16 = v17;
        v19 = (char *)*a2;
        v18 = (char *)a2[1];
        v20 = v16;
        if (v18 != *a2)
        {
          do
          {
            v21 = *(_OWORD *)(v18 - 24);
            *((_QWORD *)v20 - 1) = *((_QWORD *)v18 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v18 -= 24;
          }
          while (v18 != v19);
          v18 = (char *)*a2;
        }
        v10 = v16 + 24;
        *a2 = v20;
        a2[1] = v16 + 24;
        a2[2] = &v15[24 * v14];
        if (v18)
          operator delete(v18);
      }
      else
      {
        v9 = *(_OWORD *)&v22.value;
        *((_QWORD *)v8 + 2) = v22.epoch;
        *(_OWORD *)v8 = v9;
        v10 = v8 + 24;
      }
      a2[1] = v10;

    }
  }

}

void sub_1D4D5D584(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

_QWORD *ICFillMotionBlurVectorGaps(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  double **v35;
  double *v36;
  double *v37;
  void *v38;
  void *v39;
  unint64_t v41;
  id v42;
  id v43;
  id v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49[2];
  void *__p;
  char *v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  char *v55;
  __int128 *v56;
  uint64_t v57;
  const __CFString *v58;
  uint64_t v59;
  const __CFString *v60;
  uint64_t v61;
  const __CFString *v62;
  uint64_t v63;
  const __CFString *v64;
  uint64_t v65;
  const __CFString *v66;
  uint64_t v67;
  const __CFString *v68;
  uint64_t v69;
  _QWORD v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v44 = a2;
  v43 = a3;
  v42 = a4;
  sub_1D4D5D3D0(v9, &v54);
  v10 = (char *)v54;
  if (v54 == v55)
  {
    if (!a5)
      goto LABEL_60;
    v69 = *MEMORY[0x1E0CB2938];
    v70[0] = CFSTR("No input frame times were provided.\n");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v70, &v69, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v18);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    while ((*((_DWORD *)v10 + 3) & 0x1D) == 1)
    {
      v10 += 24;
      if (v10 == v55)
      {
        v52 = 0uLL;
        v53 = 0;
        if (sub_1D4D92040(v44, (uint64_t *)&v52))
        {
          if (v55 - (_BYTE *)v54 == *((_QWORD *)&v52 + 1) - (_QWORD)v52)
          {
            sub_1D4D5D3D0(v43, &__p);
            v11 = (char *)__p;
            if (__p == v51)
            {
              if (a5)
              {
                v61 = *MEMORY[0x1E0CB2938];
                v62 = CFSTR("No requested fill times were provided.\n");
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v22);
                *a5 = (id)objc_claimAutoreleasedReturnValue();

                goto LABEL_32;
              }
            }
            else
            {
              while ((*((_DWORD *)v11 + 3) & 0x1D) == 1)
              {
                v11 += 24;
                if (v11 == v51)
                {
                  v46 = v52;
                  v47 = v53;
                  v52 = 0uLL;
                  v53 = 0;
                  sub_1D4D7EAF8((uint64_t *)&v54, &v46, (uint64_t)&__p, (uint64_t *)&v52, &v48);
                  v56 = &v46;
                  sub_1D4D60C20((void ***)&v56);
                  v12 = v48;
                  if (v48 == (uint64_t *)v49)
                  {
                    v13 = 0;
                  }
                  else
                  {
                    v13 = 0;
                    do
                    {
                      v14 = (uint64_t *)v12[1];
                      v15 = v12;
                      if (v14)
                      {
                        do
                        {
                          v16 = v14;
                          v14 = (uint64_t *)*v14;
                        }
                        while (v14);
                      }
                      else
                      {
                        do
                        {
                          v16 = (uint64_t *)v15[2];
                          v17 = *v16 == (_QWORD)v15;
                          v15 = v16;
                        }
                        while (!v17);
                      }
                      v13 -= 0x5555555555555555 * ((v12[12] - v12[11]) >> 3);
                      v12 = v16;
                    }
                    while (v16 != (uint64_t *)v49);
                  }
                  if (v13 != 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)__p) >> 3))
                  {
                    if (a5)
                    {
                      v57 = *MEMORY[0x1E0CB2938];
                      v58 = CFSTR("Number of filled gaps does not match number of requested fill times.\n");
                      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1);
                      v39 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v39);
                      *a5 = (id)objc_claimAutoreleasedReturnValue();

                      a5 = 0;
                    }
                    goto LABEL_56;
                  }
                  a5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  v45 = 0;
                  v24 = *((_QWORD *)&v52 + 1);
                  v25 = v52;
                  if (*((_QWORD *)&v52 + 1) == (_QWORD)v52)
                    goto LABEL_56;
                  v26 = 0;
                  while (1)
                  {
                    v27 = v49[0];
                    if (!v49[0])
                    {
LABEL_42:
                      ++v26;
                      goto LABEL_52;
                    }
                    while (1)
                    {
                      v28 = v27[4];
                      if (v26 >= v28)
                        break;
LABEL_41:
                      v27 = (_QWORD *)*v27;
                      if (!v27)
                        goto LABEL_42;
                    }
                    if (v28 < v26)
                      break;
                    v56 = (__int128 *)&v45;
                    v29 = sub_1D4D63BF0(&v48, &v45, (uint64_t)&unk_1D4DB1844, (_QWORD **)&v56);
                    v41 = ((char *)v29[12] - (char *)v29[11]) / 24;
                    if (v29[12] != v29[11])
                    {
                      v30 = 0;
                      if (v41 <= 1)
                        v31 = 1;
                      else
                        v31 = ((char *)v29[12] - (char *)v29[11]) / 24;
                      do
                      {
                        v32 = v45;
                        v33 = v52;
                        v34 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                        v35 = (double **)(v33 + 24 * (v32 + v30));
                        v36 = *v35;
                        v37 = v35[1];
                        while (v36 != v37)
                        {
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v36);
                          v38 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v34, "addObject:", v38);

                          ++v36;
                        }
                        objc_msgSend(a5, "addObject:", v34);

                        ++v30;
                      }
                      while (v30 != v31);
                    }
                    v26 = v45 + v41;
                    v24 = *((_QWORD *)&v52 + 1);
                    v25 = v52;
LABEL_52:
                    v45 = v26;
                    if (v26 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3))
                    {
LABEL_56:
                      sub_1D4D63BA0((uint64_t)&v48, v49[0]);
                      goto LABEL_57;
                    }
                  }
                  ++v27;
                  goto LABEL_41;
                }
              }
              if (a5)
              {
                v59 = *MEMORY[0x1E0CB2938];
                v60 = CFSTR("Requested fill time value is not numeric.\n");
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1);
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v23);
                *a5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_32:
                a5 = 0;
              }
            }
LABEL_57:
            if (__p)
            {
              v51 = (char *)__p;
              operator delete(__p);
            }
LABEL_59:
            __p = &v52;
            sub_1D4D60C20((void ***)&__p);
            goto LABEL_60;
          }
          if (!a5)
            goto LABEL_59;
          v63 = *MEMORY[0x1E0CB2938];
          v64 = CFSTR("Mismatch between number of frame times and motion blur vectors provided.\n");
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v64, &v63, 1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v21);
          *a5 = (id)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          if (!a5)
            goto LABEL_59;
          v65 = *MEMORY[0x1E0CB2938];
          v66 = CFSTR("Unable to parse motion blur vector input.\n");
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v20);
          *a5 = (id)objc_claimAutoreleasedReturnValue();

        }
        a5 = 0;
        goto LABEL_59;
      }
    }
    if (!a5)
      goto LABEL_60;
    v67 = *MEMORY[0x1E0CB2938];
    v68 = CFSTR("A provided frame time value is not numeric.\n");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("InertiaCamErrorDomain"), 10, v19);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  a5 = 0;
LABEL_60:
  if (v54)
  {
    v55 = (char *)v54;
    operator delete(v54);
  }

  return a5;
}

void sub_1D4D5DC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char *__p,char *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;

  sub_1D4D63BA0((uint64_t)&a19, a20);
  if (__p)
  {
    a23 = __p;
    operator delete(__p);
  }
  __p = &a25;
  sub_1D4D60C20((void ***)&__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_1D4D5DDC8()
{
  sub_1D4D5DDDC("vector");
}

void sub_1D4D5DDDC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D4D5DE2C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
}

void sub_1D4D5DE18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D4D5DE2C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

Class sub_1D4D5DE50()
{
  Class result;

  if (qword_1ED988270 != -1)
    dispatch_once(&qword_1ED988270, &unk_1E988B298);
  result = objc_getClass("DESRecordStore");
  qword_1EFEFADC0 = (uint64_t)result;
  off_1ED988268 = (uint64_t (*)())sub_1D4D5DEAC;
  return result;
}

id sub_1D4D5DEAC()
{
  return (id)qword_1EFEFADC0;
}

void *sub_1D4D5DEB8()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/DistributedEvaluation.framework/DistributedEvaluation", 2);
  qword_1EFEFADC8 = (uint64_t)result;
  return result;
}

void sub_1D4D5DEE0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.acg.inertiacam", "InertiaCam");
  v1 = (void *)qword_1ED988290;
  qword_1ED988290 = (uint64_t)v0;

}

uint64_t sub_1D4D5DF1C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *MEMORY[0x1E0CA2E40];
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 71) = 0;
  *(_QWORD *)(a1 + 76) = -3229614080;
  sub_1D4DA76D4(a1 + 84);
  return a1;
}

void sub_1D4D5DF78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D5DF98(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1D4D5DFA8()
{
  sub_1D4D5DFBC("vector");
}

void sub_1D4D5DFBC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D4D5E00C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9889B48, MEMORY[0x1E0DE42D0]);
}

void sub_1D4D5DFF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D4D5E00C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *sub_1D4D5E030(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_1D4D5E074();
  return operator new(48 * a2);
}

void sub_1D4D5E074()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t sub_1D4D5E09C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v28;

  v2 = operator new();
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 80))
  {
    v3 = operator new();
    v4 = *(_QWORD *)(a1 + 80);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    v5 = *(_OWORD *)(v4 + 16);
    v6 = *(_OWORD *)(v4 + 32);
    v7 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(v3 + 60) = *(_OWORD *)(v4 + 60);
    *(_OWORD *)(v3 + 32) = v6;
    *(_OWORD *)(v3 + 48) = v7;
    *(_OWORD *)(v3 + 16) = v5;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    sub_1D4D5E408((_QWORD *)(v3 + 80), *(const void **)(v4 + 80), *(_QWORD *)(v4 + 88), (uint64_t)(*(_QWORD *)(v4 + 88) - *(_QWORD *)(v4 + 80)) >> 6);
    *(_OWORD *)(v3 + 104) = *(_OWORD *)(v4 + 104);
    v8 = *(_OWORD *)(v4 + 120);
    v9 = *(_OWORD *)(v4 + 136);
    v10 = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(v3 + 168) = *(_OWORD *)(v4 + 168);
    *(_OWORD *)(v3 + 152) = v10;
    *(_OWORD *)(v3 + 136) = v9;
    *(_OWORD *)(v3 + 120) = v8;
    v11 = *(_OWORD *)(v4 + 184);
    v12 = *(_OWORD *)(v4 + 200);
    v13 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)(v3 + 232) = *(_OWORD *)(v4 + 232);
    *(_OWORD *)(v3 + 216) = v13;
    *(_OWORD *)(v3 + 200) = v12;
    *(_OWORD *)(v3 + 184) = v11;
    v14 = *(_OWORD *)(v4 + 248);
    v15 = *(_OWORD *)(v4 + 264);
    v16 = *(_OWORD *)(v4 + 280);
    *(_QWORD *)(v3 + 293) = *(_QWORD *)(v4 + 293);
    *(_OWORD *)(v3 + 264) = v15;
    *(_OWORD *)(v3 + 280) = v16;
    *(_OWORD *)(v3 + 248) = v14;
    *(_QWORD *)(v2 + 80) = v3;
  }
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
  {
    v18 = sub_1D4D5E300(v17);
    sub_1D4D5EF04(&v28, v18);
    sub_1D4D5E3A4(v2 + 48, &v28);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = *(_QWORD *)(a1 + 64);
  if (v22)
  {
    v23 = sub_1D4D5E300(v22);
    sub_1D4D5EF04(&v28, v23);
    sub_1D4D5E3A4(v2 + 64, &v28);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  return v2;
}

void sub_1D4D5E2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1020C40BD1971B5);
  _Unwind_Resume(a1);
}

void *sub_1D4D5E2CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1D4D5E074();
  return operator new(8 * a2);
}

uint64_t sub_1D4D5E300(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;

  v2 = operator new();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 45) = *(_QWORD *)(a1 + 45);
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  sub_1D4D5E4F4((_QWORD *)(v2 + 56), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3));
  return v2;
}

void sub_1D4D5E380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1020C408C3C92B4);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5E3A4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_1D4D5E408(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D5E480(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D5E464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D5E480(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5E4C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_1D4D5E4C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_1D4D5E074();
  return operator new(a2 << 6);
}

_QWORD *sub_1D4D5E4F4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4D5E578(result, a4);
    result = (_QWORD *)sub_1D4D5E614((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4D5E558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D4D5EE80(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D4D5E578(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xDD67C8A60DD67DLL)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5E5CC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

void *sub_1D4D5E5CC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL)
    sub_1D4D5E074();
  return operator new(296 * a2);
}

uint64_t sub_1D4D5E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1D4D5E6B4(v4, v6);
      v6 += 296;
      v4 = v11 + 296;
      v11 += 296;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D4D5EDAC((uint64_t)v8);
  return v4;
}

void sub_1D4D5E6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D5EDAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5E6B4(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  sub_1D4D5E7FC(a1 + 32, 0, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
  memmove(*(void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(_QWORD *)(a2 + 48));
  sub_1D4D5E8AC(a1 + 104, 0, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
  memmove(*(void **)(a1 + 104), *(const void **)(a2 + 104), 4 * *(_QWORD *)(a2 + 120));
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_1D4D5E95C((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  sub_1D4D5EA48(a1 + 200, 0, *(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 216));
  memmove(*(void **)(a1 + 200), *(const void **)(a2 + 200), 32 * *(_QWORD *)(a2 + 216));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_1D4D5EAF8((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  return a1;
}

void sub_1D4D5E7B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;

  sub_1D4D5EBC0(v5);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 184) = v7;
    operator delete(v7);
  }
  sub_1D4D5EC64(v3);
  sub_1D4D5ED08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (!a2 && a3)
  {
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)a1 = operator new[]();
  }
  return a1;
}

void sub_1D4D5E870(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 56);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 56);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D5E8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (!a2 && a3)
  {
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)a1 = operator new[]();
  }
  return a1;
}

void sub_1D4D5E920(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 56);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 56);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D5E95C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D5E9D4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D5E9B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D5E9D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5EA14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_1D4D5EA14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1D4D5E074();
  return operator new(4 * a2);
}

uint64_t sub_1D4D5EA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (!a2 && a3)
  {
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)a1 = operator new[]();
  }
  return a1;
}

void sub_1D4D5EABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 56);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 56);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D5EAF8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D5EB70(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D5EB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D5EB70(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5E030((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t sub_1D4D5EBC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
    MEMORY[0x1D8268964]();
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v5 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
      v2 = *(_QWORD *)(a1 + 56);
    }
    if (v2 == a1 + 32)
    {
      v3 = 4;
      v2 = a1 + 32;
      goto LABEL_11;
    }
    if (v2)
    {
      v3 = 5;
LABEL_11:
      (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    }
  }
  return a1;
}

uint64_t sub_1D4D5EC64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
    MEMORY[0x1D8268964]();
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v5 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
      v2 = *(_QWORD *)(a1 + 56);
    }
    if (v2 == a1 + 32)
    {
      v3 = 4;
      v2 = a1 + 32;
      goto LABEL_11;
    }
    if (v2)
    {
      v3 = 5;
LABEL_11:
      (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    }
  }
  return a1;
}

uint64_t sub_1D4D5ED08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
    MEMORY[0x1D8268964]();
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v5 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
      v2 = *(_QWORD *)(a1 + 56);
    }
    if (v2 == a1 + 32)
    {
      v3 = 4;
      v2 = a1 + 32;
      goto LABEL_11;
    }
    if (v2)
    {
      v3 = 5;
LABEL_11:
      (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    }
  }
  return a1;
}

uint64_t sub_1D4D5EDAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D5EDE0((uint64_t *)a1);
  return a1;
}

uint64_t *sub_1D4D5EDE0(uint64_t *result)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD **)result[2];
  v3 = *v1;
  v4 = (_QWORD *)*v2;
  if (*v1 != (_QWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 37;
      result = (uint64_t *)sub_1D4D5EE30(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_1D4D5EE30(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[34];
  if (v3)
  {
    a2[35] = v3;
    operator delete(v3);
  }
  sub_1D4D5EBC0((uint64_t)(a2 + 25));
  v4 = (void *)a2[22];
  if (v4)
  {
    a2[23] = v4;
    operator delete(v4);
  }
  sub_1D4D5EC64((uint64_t)(a2 + 13));
  return sub_1D4D5ED08((uint64_t)(a2 + 4));
}

void sub_1D4D5EE80(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 37;
        sub_1D4D5EE30((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1D4D5EF04(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E988B168;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_1D4D5F098(&v6, 0);
  return a1;
}

void sub_1D4D5EF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F098((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1D4D5EF90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D5EFB4(uint64_t a1)
{
  return sub_1D4D5EFFC(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1D4D5EFBC(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A890))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1D4D5EFFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 56);
    sub_1D4D5EE80(&v4);
    return MEMORY[0x1D826897C](a2, 0x1020C408C3C92B4);
  }
  return result;
}

BOOL sub_1D4D5F04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t *sub_1D4D5F098(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 56);
    sub_1D4D5EE80(&v3);
    return (uint64_t *)MEMORY[0x1D826897C](v2, 0x1020C408C3C92B4);
  }
  return result;
}

uint64_t sub_1D4D5F0EC(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D5F114(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D5F14C(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988A480;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D5F18C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988A480;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D5F1A8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D5F1B0(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1D4D5F1D8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  id WeakRetained;
  void *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    sub_1D4D51DEC(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v6;
    v9 = v7;
    objc_msgSend(WeakRetained, "ICReportL1Correction:forPresentationTime:withStats:", v5, &v8, MEMORY[0x1E0C9AA70]);

  }
}

void sub_1D4D5F270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5F290(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A2F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D5F2CC()
{
  return &unk_1E988A2F0;
}

_QWORD *sub_1D4D5F2D8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D4D5F440(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D4D5DF98(a1);
}

uint64_t sub_1D4D5F44C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xD79435E50D7944)
      sub_1D4D5DFA8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1D4D5F57C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 304 * v6;
    sub_1D4D5F508(a1, v7);
    return sub_1D4D5F774((uint64_t)v7);
  }
  return result;
}

void sub_1D4D5F4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5F508(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4D5F5C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1D4D5F57C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD79435E50D7944)
    sub_1D4D5E074();
  return operator new(304 * a2);
}

uint64_t sub_1D4D5F5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v25[3];
  char v26;
  __int128 v27;
  __int128 v28;

  v7 = a7;
  *(_QWORD *)&v28 = a6;
  *((_QWORD *)&v28 + 1) = a7;
  v27 = v28;
  v25[0] = a1;
  v25[1] = &v27;
  v25[2] = &v28;
  if (a3 == a5)
  {
    v23 = a6;
  }
  else
  {
    v8 = a3 - 304;
    do
    {
      v9 = (_OWORD *)(v7 - 304);
      *v9 = *(_OWORD *)v8;
      v10 = *(_OWORD *)(v8 + 16);
      v11 = *(_OWORD *)(v8 + 32);
      v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 - 244) = *(_OWORD *)(v8 + 60);
      *(_OWORD *)(v7 - 256) = v12;
      v9[1] = v10;
      v9[2] = v11;
      *(_QWORD *)(v7 - 216) = 0;
      *(_QWORD *)(v7 - 208) = 0;
      *(_QWORD *)(v7 - 224) = 0;
      *(_OWORD *)(v7 - 224) = *(_OWORD *)(v8 + 80);
      *(_QWORD *)(v7 - 208) = *(_QWORD *)(v8 + 96);
      *(_QWORD *)(v8 + 88) = 0;
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      v13 = *(_OWORD *)(v8 + 136);
      v14 = *(_OWORD *)(v8 + 152);
      v15 = *(_OWORD *)(v8 + 168);
      *(_OWORD *)(v7 - 184) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 - 136) = v15;
      *(_OWORD *)(v7 - 152) = v14;
      *(_OWORD *)(v7 - 168) = v13;
      v16 = *(_OWORD *)(v8 + 200);
      v17 = *(_OWORD *)(v8 + 216);
      v18 = *(_OWORD *)(v8 + 232);
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(v7 - 72) = v18;
      *(_OWORD *)(v7 - 88) = v17;
      *(_OWORD *)(v7 - 104) = v16;
      v19 = *(_OWORD *)(v8 + 264);
      v20 = *(_OWORD *)(v8 + 280);
      v21 = *(_QWORD *)(v8 + 293);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v8 + 248);
      *(_QWORD *)(v7 - 11) = v21;
      *(_OWORD *)(v7 - 24) = v20;
      *(_OWORD *)(v7 - 40) = v19;
      *(_OWORD *)(v7 - 200) = *(_OWORD *)(v8 + 104);
      v7 = *((_QWORD *)&v28 + 1) - 304;
      *((_QWORD *)&v28 + 1) -= 304;
      v22 = v8 == a5;
      v8 -= 304;
    }
    while (!v22);
    v23 = v28;
  }
  v26 = 1;
  sub_1D4D5F6FC((uint64_t)v25);
  return v23;
}

uint64_t sub_1D4D5F6FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D5F730(a1);
  return a1;
}

void sub_1D4D5F730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(_QWORD *)(v1 + 88) = v3;
      operator delete(v3);
    }
    v1 += 304;
  }
}

uint64_t sub_1D4D5F774(uint64_t a1)
{
  sub_1D4D5F7A8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4D5F7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 304;
    v5 = *(void **)(v2 - 224);
    if (v5)
    {
      *(_QWORD *)(v2 - 216) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 304;
    }
  }
}

uint64_t sub_1D4D5F800(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x6BCA1AF286BCA1)
    v11 = 0xD79435E50D7943;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1D4D5F57C(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[304 * v5];
  v17 = (uint64_t)v16;
  v18 = &v12[304 * v11];
  sub_1D4D5F924((uint64_t)v16, *a2, a3);
  v17 = (uint64_t)(v16 + 304);
  sub_1D4D5F508(a1, &v15);
  v13 = a1[1];
  sub_1D4D5F774((uint64_t)&v15);
  return v13;
}

void sub_1D4D5F910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 112) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 136) = -1;
  v5 = MEMORY[0x1E0CA2E10];
  *(_OWORD *)(a1 + 144) = *MEMORY[0x1E0CA2E10];
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 293) = 0;
  if (a3)
  {
    for (i = 0; i != 72; i += 8)
      *(_QWORD *)(a1 + i) = *(_QWORD *)(a3 + i);
  }
  else
  {
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  }
  bzero((void *)(a1 + 252), 0x30uLL);
  *(int32x4_t *)(a1 + 284) = vdupq_n_s32(0x3FC90FDBu);
  bzero((void *)(a1 + 196), 0x38uLL);
  return a1;
}

uint64_t sub_1D4D5FA14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        v21 = a3 + 304 * a5;
      }
      else
      {
        v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_1D4D5FEAC(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_1D4D5FBF8((uint64_t)a1, v5, v12, v5 + 304 * a5);
      sub_1D4D601A8((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0xD79435E50D7943)
        sub_1D4D5DFA8();
      v15 = 0x86BCA1AF286BCA1BLL * ((a2 - v13) >> 4);
      v16 = 0x86BCA1AF286BCA1BLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x6BCA1AF286BCA1)
        v18 = 0xD79435E50D7943;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1D4D5F57C(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[304 * v15];
      v25 = v24;
      v26 = &v19[304 * v18];
      sub_1D4D5FCE4(&v23, a3, a5);
      v5 = sub_1D4D5FDFC(a1, &v23, v5);
      sub_1D4D5F774((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1D4D5FBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D5FBF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v10 = *(_OWORD *)(v9 + 16);
      v11 = *(_OWORD *)(v9 + 32);
      v12 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 60) = *(_OWORD *)(v9 + 60);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(v8 + 88) = 0;
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 96) = 0;
      *(_QWORD *)(v9 + 80) = 0;
      v13 = *(_OWORD *)(v9 + 136);
      v14 = *(_OWORD *)(v9 + 152);
      v15 = *(_OWORD *)(v9 + 168);
      *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
      *(_OWORD *)(v8 + 168) = v15;
      *(_OWORD *)(v8 + 152) = v14;
      *(_OWORD *)(v8 + 136) = v13;
      v16 = *(_OWORD *)(v9 + 200);
      v17 = *(_OWORD *)(v9 + 216);
      v18 = *(_OWORD *)(v9 + 232);
      *(_OWORD *)(v8 + 184) = *(_OWORD *)(v9 + 184);
      *(_OWORD *)(v8 + 232) = v18;
      *(_OWORD *)(v8 + 216) = v17;
      *(_OWORD *)(v8 + 200) = v16;
      v19 = *(_OWORD *)(v9 + 264);
      v20 = *(_OWORD *)(v9 + 280);
      v21 = *(_QWORD *)(v9 + 293);
      *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
      *(_QWORD *)(v8 + 293) = v21;
      *(_OWORD *)(v8 + 264) = v19;
      *(_OWORD *)(v8 + 280) = v20;
      *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
      v8 += 304;
      v9 += 304;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1D4D6005C(a2, v7, v6);
}

_QWORD *sub_1D4D5FCE4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 304 * a3;
    v7 = v4 + 80;
    v8 = 304 * a3;
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)a2;
      v9 = *(_OWORD *)(a2 + 16);
      v10 = *(_OWORD *)(a2 + 32);
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v7 - 20) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v7 - 48) = v10;
      *(_OWORD *)(v7 - 32) = v11;
      *(_OWORD *)(v7 - 64) = v9;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      result = sub_1D4D5E408((_QWORD *)v7, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 104);
      v12 = *(_OWORD *)(a2 + 120);
      v13 = *(_OWORD *)(a2 + 136);
      v14 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v7 + 72) = v14;
      *(_OWORD *)(v7 + 56) = v13;
      *(_OWORD *)(v7 + 40) = v12;
      v15 = *(_OWORD *)(a2 + 184);
      v16 = *(_OWORD *)(a2 + 200);
      v17 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v7 + 136) = v17;
      *(_OWORD *)(v7 + 120) = v16;
      *(_OWORD *)(v7 + 104) = v15;
      v18 = *(_OWORD *)(a2 + 248);
      v19 = *(_OWORD *)(a2 + 264);
      v20 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(v7 + 213) = *(_QWORD *)(a2 + 293);
      *(_OWORD *)(v7 + 200) = v20;
      *(_OWORD *)(v7 + 184) = v19;
      *(_OWORD *)(v7 + 168) = v18;
      v7 += 304;
      a2 += 304;
      v8 -= 304;
    }
    while (v8);
  }
  else
  {
    v6 = result[2];
  }
  v3[2] = v6;
  return result;
}

void sub_1D4D5FDF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 80;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5FDFC(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_1D4D5F5C4((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1D4D603B4(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1D4D5FEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[3];
  char v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v22 = a4;
  v23 = a4;
  v20[0] = a1;
  v20[1] = &v22;
  v20[2] = &v23;
  v21 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      v7 = *(_OWORD *)(v6 + 16);
      v8 = *(_OWORD *)(v6 + 32);
      v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      sub_1D4D5E408((_QWORD *)(v4 + 80), *(const void **)(v6 + 80), *(_QWORD *)(v6 + 88), (uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 6);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v6 + 104);
      v10 = *(_OWORD *)(v6 + 120);
      v11 = *(_OWORD *)(v6 + 136);
      v12 = *(_OWORD *)(v6 + 152);
      *(_OWORD *)(v4 + 168) = *(_OWORD *)(v6 + 168);
      *(_OWORD *)(v4 + 152) = v12;
      *(_OWORD *)(v4 + 136) = v11;
      *(_OWORD *)(v4 + 120) = v10;
      v13 = *(_OWORD *)(v6 + 184);
      v14 = *(_OWORD *)(v6 + 200);
      v15 = *(_OWORD *)(v6 + 216);
      *(_OWORD *)(v4 + 232) = *(_OWORD *)(v6 + 232);
      *(_OWORD *)(v4 + 216) = v15;
      *(_OWORD *)(v4 + 200) = v14;
      *(_OWORD *)(v4 + 184) = v13;
      v16 = *(_OWORD *)(v6 + 248);
      v17 = *(_OWORD *)(v6 + 264);
      v18 = *(_OWORD *)(v6 + 280);
      *(_QWORD *)(v4 + 293) = *(_QWORD *)(v6 + 293);
      *(_OWORD *)(v4 + 264) = v17;
      *(_OWORD *)(v4 + 280) = v18;
      *(_OWORD *)(v4 + 248) = v16;
      v4 = v23 + 304;
      v23 += 304;
      v6 += 304;
    }
    while (v6 != a3);
  }
  v21 = 1;
  sub_1D4D5FFE4((uint64_t)v20);
  return v4;
}

void sub_1D4D5FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D5FFE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D5FFE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D60018(a1);
  return a1;
}

void sub_1D4D60018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 224);
    if (v3)
    {
      *(_QWORD *)(v1 - 216) = v3;
      operator delete(v3);
    }
    v1 -= 304;
  }
}

uint64_t sub_1D4D6005C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v7 = (_OWORD *)(a3 - 304);
      *v7 = *(_OWORD *)(v6 - 304);
      v8 = *(_OWORD *)(v6 - 288);
      v9 = *(_OWORD *)(v6 - 272);
      v10 = *(_OWORD *)(v6 - 256);
      *(_OWORD *)(a3 - 244) = *(_OWORD *)(v6 - 244);
      *(_OWORD *)(a3 - 256) = v10;
      v7[1] = v8;
      v7[2] = v9;
      sub_1D4D60158(a3 - 224, (__n128 *)(v6 - 224));
      *(_OWORD *)(a3 - 200) = *(_OWORD *)(v6 - 200);
      v11 = *(_OWORD *)(v6 - 184);
      v12 = *(_OWORD *)(v6 - 168);
      v13 = *(_OWORD *)(v6 - 152);
      *(_OWORD *)(a3 - 136) = *(_OWORD *)(v6 - 136);
      *(_OWORD *)(a3 - 152) = v13;
      *(_OWORD *)(a3 - 168) = v12;
      *(_OWORD *)(a3 - 184) = v11;
      v14 = *(_OWORD *)(v6 - 120);
      v15 = *(_OWORD *)(v6 - 104);
      v16 = *(_OWORD *)(v6 - 88);
      *(_OWORD *)(a3 - 72) = *(_OWORD *)(v6 - 72);
      *(_OWORD *)(a3 - 88) = v16;
      *(_OWORD *)(a3 - 104) = v15;
      *(_OWORD *)(a3 - 120) = v14;
      v17 = *(_OWORD *)(v6 - 56);
      v18 = *(_OWORD *)(v6 - 40);
      v19 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(a3 - 11) = *(_QWORD *)(v6 - 11);
      *(_OWORD *)(a3 - 24) = v19;
      *(_OWORD *)(a3 - 40) = v18;
      *(_OWORD *)(a3 - 56) = v17;
      a3 -= 304;
      v6 -= 304;
    }
    while (v6 != a1);
  }
  return a2;
}

__n128 sub_1D4D60158(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1D4D601A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 88;
  do
  {
    v7 = v6 - 88;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 88);
    v8 = *(_OWORD *)(v6 - 72);
    v9 = *(_OWORD *)(v6 - 56);
    v10 = *(_OWORD *)(v6 - 40);
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(v6 - 28);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    if (a4 != v6 - 88)
      sub_1D4D602AC((char *)(a4 + 80), *(char **)(v6 - 8), *(_QWORD *)v6, (uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 6);
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(v6 + 16);
    v11 = *(_OWORD *)(v6 + 32);
    v12 = *(_OWORD *)(v6 + 48);
    v13 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a4 + 168) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a4 + 152) = v13;
    *(_OWORD *)(a4 + 136) = v12;
    *(_OWORD *)(a4 + 120) = v11;
    v14 = *(_OWORD *)(v6 + 96);
    v15 = *(_OWORD *)(v6 + 112);
    v16 = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a4 + 232) = *(_OWORD *)(v6 + 144);
    *(_OWORD *)(a4 + 216) = v16;
    *(_OWORD *)(a4 + 200) = v15;
    *(_OWORD *)(a4 + 184) = v14;
    v17 = *(_OWORD *)(v6 + 160);
    v18 = *(_OWORD *)(v6 + 176);
    v19 = *(_OWORD *)(v6 + 192);
    *(_QWORD *)(a4 + 293) = *(_QWORD *)(v6 + 205);
    *(_OWORD *)(a4 + 264) = v18;
    *(_OWORD *)(a4 + 280) = v19;
    *(_OWORD *)(a4 + 248) = v17;
    a4 += 304;
    v6 += 304;
  }
  while (v7 + 304 != v5);
  return v5;
}

char *sub_1D4D602AC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 6)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58)
      sub_1D4D5DFA8();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D4D5E480(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 6;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1D4D603B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[3];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  v21 = a4;
  v20 = a4;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v4 + 32) = v6;
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v5;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      v8 = *(_OWORD *)(a2 + 136);
      v9 = *(_OWORD *)(a2 + 152);
      v10 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(v4 + 168) = v10;
      *(_OWORD *)(v4 + 152) = v9;
      *(_OWORD *)(v4 + 136) = v8;
      v11 = *(_OWORD *)(a2 + 200);
      v12 = *(_OWORD *)(a2 + 216);
      v13 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(v4 + 232) = v13;
      *(_OWORD *)(v4 + 216) = v12;
      *(_OWORD *)(v4 + 200) = v11;
      v14 = *(_OWORD *)(a2 + 264);
      v15 = *(_OWORD *)(a2 + 280);
      v16 = *(_QWORD *)(a2 + 293);
      *(_OWORD *)(v4 + 248) = *(_OWORD *)(a2 + 248);
      *(_QWORD *)(v4 + 293) = v16;
      *(_OWORD *)(v4 + 264) = v14;
      *(_OWORD *)(v4 + 280) = v15;
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
      v4 += 304;
      a2 += 304;
    }
    while (a2 != a3);
    v21 = v4;
  }
  v19 = 1;
  sub_1D4D5FFE4((uint64_t)v18);
  return v4;
}

_QWORD *sub_1D4D604C8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D6053C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D4D60520(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6053C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5E2CC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *sub_1D4D6057C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_1D4D6063C(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1D4D6063C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1D4D60690(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1D4D60690(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1D4D60828(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_1D4D60874(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1D4D60960(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  sub_1D4D60CB4(a1 + 3, a2 + 24);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1D4D61098(a1 + 6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_1D4D61184(a1 + 9, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 5);
  return a1;
}

void sub_1D4D6091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 56) = v14;
    operator delete(v14);
  }
  sub_1D4D61048(v11, *(_QWORD **)(v10 + 32));
  a10 = (void **)v10;
  sub_1D4D60C20(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D60960(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4D609E4(result, a4);
    result = sub_1D4D60A78((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4D609C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D4D60C20(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D4D609E4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D60A34((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1D4D60A34(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4D5E074();
  return operator new(24 * a2);
}

_QWORD *sub_1D4D60A78(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D4D60B28(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D4D60BA0((uint64_t)v8);
  return v4;
}

void sub_1D4D60B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D60BA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D60B28(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D6053C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D60B84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D60BA0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D60BD4(a1);
  return a1;
}

void sub_1D4D60BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1D4D60C20(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4D60C60((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4D60C60(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t *sub_1D4D60CB4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1D4D60D08(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1D4D60CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4D61048(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4D60D08(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1D4D60D8C(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1D4D60D8C(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_1D4D60E0C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1D4D60FB4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1D4D6063C(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_1D4D60E0C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_1D4D60FB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (const void *)a2[1];
  v6[4] = *a2;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  result = sub_1D4D60B28(v6 + 5, v7, a2[2], (uint64_t)(a2[2] - (_QWORD)v7) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D4D6102C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_1D4D60828(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1D4D61048(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1D4D61048(a1, *a2);
    sub_1D4D61048(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_1D4D61098(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D61110(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D610F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D61110(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D61150((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_1D4D61150(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1D4D5E074();
  return operator new(16 * a2);
}

_QWORD *sub_1D4D61184(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D611FC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D611E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D611FC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D6123C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_1D4D6123C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1D4D5E074();
  return operator new(32 * a2);
}

uint64_t sub_1D4D61270(uint64_t a1, uint64_t a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_1E988AFA8;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1D4D61DA4((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4));
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v5;
  sub_1D4D61658(a1 + 96, a2 + 96);
  *(_QWORD *)a1 = &off_1E988ABE8;
  *(_QWORD *)(a1 + 240) = 0;
  v7 = (uint64_t *)(a1 + 240);
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (*(_QWORD *)(a2 + 240))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(_QWORD *)(a2 + 240);
    *v8 = *(_QWORD *)v9;
    v8[2] = 0;
    v8[3] = 0;
    v8[1] = 0;
    sub_1D4D60B28(v8 + 1, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
    v10 = *v7;
    *v7 = (uint64_t)v8;
    if (v10)
      sub_1D4D61B7C(a1 + 240, v10);
  }
  if (*(_QWORD *)(a2 + 248))
  {
    v11 = operator new();
    v12 = *(_QWORD *)(a2 + 248);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    v13 = *(_OWORD *)(v12 + 16);
    v14 = *(_OWORD *)(v12 + 32);
    v15 = *(_OWORD *)(v12 + 48);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
    *(_OWORD *)(v11 + 32) = v14;
    *(_OWORD *)(v11 + 48) = v15;
    *(_OWORD *)(v11 + 16) = v13;
    v16 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v11;
    if (v16)
      MEMORY[0x1D826897C](v16, 0x1000C40FF89C88ELL);
  }
  return a1;
}

void sub_1D4D613FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1D826897C](v3, 0x1080C409938AC02);
  v5 = *(_QWORD **)(v1 + 256);
  *(_QWORD *)(v1 + 256) = 0;
  if (v5)
    sub_1D4D61BC4(v1 + 256, v5);
  v6 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v1 + 248) = 0;
  if (v6)
    MEMORY[0x1D826897C](v6, 0x1000C40FF89C88ELL);
  v7 = *v2;
  *v2 = 0;
  if (v7)
    sub_1D4D61B7C((uint64_t)v2, v7);
  sub_1D4D6149C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6149C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1E988AFA8;
  v2 = *(void **)(a1 + 192);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 24);
  sub_1D4D61D18(&v8);

  return a1;
}

uint64_t sub_1D4D61534(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E988ABE8;
  v2 = (_QWORD *)a1[32];
  a1[32] = 0;
  if (v2)
    sub_1D4D61BC4((uint64_t)(a1 + 32), v2);
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    MEMORY[0x1D826897C](v3, 0x1000C40FF89C88ELL);
  v4 = a1[30];
  a1[30] = 0;
  if (v4)
    sub_1D4D61B7C((uint64_t)(a1 + 30), v4);
  return sub_1D4D6149C((uint64_t)a1);
}

void sub_1D4D615A8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E988ABE8;
  v2 = (_QWORD *)a1[32];
  a1[32] = 0;
  if (v2)
    sub_1D4D61BC4((uint64_t)(a1 + 32), v2);
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    MEMORY[0x1D826897C](v3, 0x1000C40FF89C88ELL);
  v4 = a1[30];
  a1[30] = 0;
  if (v4)
    sub_1D4D61B7C((uint64_t)(a1 + 30), v4);
  sub_1D4D6149C((uint64_t)a1);
  JUMPOUT(0x1D826897CLL);
}

void sub_1D4D61634(uint64_t a1)
{
  sub_1D4D6149C(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D61658(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4D617B8((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1D4D61830((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1D4D61944((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1D4D61830((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  sub_1D4D619BC((_QWORD *)(a1 + 96), a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

void sub_1D4D61754(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D617B8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D609E4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D61814(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D61830(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D618A8(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D6188C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D618A8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D618FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_1D4D618FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1D4D5E074();
  return operator new(72 * a2);
}

_QWORD *sub_1D4D61944(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D609E4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D619A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D619BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    sub_1D4D61A14(a1, v4);
    sub_1D4D61A58(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void *sub_1D4D61A14(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_1D4D5DFA8();
  result = sub_1D4D5E2CC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_1D4D61A58(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  sub_1D4D61AD4(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_1D4D61AD4(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_1D4D61B7C(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(_QWORD *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D826897CLL);
  }
}

void sub_1D4D61BC4(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = (void *)a2[10];
    if (v3)
    {
      a2[11] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[4];
    if (v5)
    {
      a2[5] = v5;
      operator delete(v5);
    }
    v6 = (void *)a2[1];
    if (v6)
    {
      a2[2] = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1D826897CLL);
  }
}

void sub_1D4D61C3C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1D4D5DFA8();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_1D4D60A34(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4D61D18(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4D61D58((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4D61D58(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 304)
  {
    v4 = *(void **)(i - 224);
    if (v4)
    {
      *(_QWORD *)(i - 216) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *sub_1D4D61DA4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4D61E28(result, a4);
    result = (_QWORD *)sub_1D4D5FEAC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4D61E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D4D61D18(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D4D61E28(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xD79435E50D7944)
    sub_1D4D5DFA8();
  result = (char *)sub_1D4D5F57C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[304 * v4];
  return result;
}

void sub_1D4D61E7C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_1D4D62020(a1);
    if (a4 > 0xD79435E50D7943)
      sub_1D4D5DFA8();
    v10 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) >= 0x6BCA1AF286BCA1)
      v11 = 0xD79435E50D7943;
    else
      v11 = v10;
    sub_1D4D61E28(a1, v11);
    v12 = sub_1D4D5FEAC(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1] - v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((a1[1] - v9) >> 4);
    sub_1D4D601A8((uint64_t)&v18, a2, v13, v9);
    v12 = sub_1D4D5FEAC(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1D4D601A8((uint64_t)&v19, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v17 = *(void **)(v16 - 224);
      if (v17)
      {
        *(_QWORD *)(v16 - 216) = v17;
        operator delete(v17);
      }
      v16 -= 304;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1D4D62010(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D4D62018(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D4D62020(uint64_t *a1)
{
  if (*a1)
  {
    sub_1D4D61D58(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1D4D6205C(_QWORD *a1)
{
  sub_1D4D62080(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D62080(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  *a1 = &off_1E988AAD8;
  v2 = (_QWORD *)a1[29];
  if (v2)
  {
    sub_1D4D877F8(v2);
    v3 = a1[29];
    if (v3)
    {
      v4 = *(void **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(v3 + 8) = v4;
        operator delete(v4);
      }
      MEMORY[0x1D826897C](v3, 0x80C40D6874129);
    }
    a1[29] = 0;
  }
  return sub_1D4D6149C((uint64_t)a1);
}

uint64_t sub_1D4D620F0(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D62118(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D62150(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988B020;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D62190(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988B020;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D621AC(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D621B4(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1D4D621DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    sub_1D4D51DEC(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = IC_A_STAT_FRAME_MATCH_CONFIDENCE;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(v2 + 168));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = *(_OWORD *)(v2 + 112);
    v8 = *(_QWORD *)(v2 + 128);
    objc_msgSend(WeakRetained, "ICReportFrameAnalysis:forPresentationTime:withStats:", v4, &v7, v6);

  }
}

void sub_1D4D622E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D62328(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A948))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D62364()
{
  return &unk_1E988A948;
}

void sub_1D4D62374(_QWORD *a1)
{
  sub_1D4D62398(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D62398(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  *a1 = &off_1E988ABC8;
  v2 = a1[29];
  if (v2)
  {
    sub_1D4D88CFC(v2);
    while (1)
    {
      v3 = atomic_load((unsigned __int8 *)(a1[29] + 136));
      if ((v3 & 1) == 0)
        break;
      usleep(0x3E8u);
    }
    v4 = a1[29];
    a1[29] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    a1[29] = 0;
  }
  return sub_1D4D6149C((uint64_t)a1);
}

uint64_t sub_1D4D62414(uint64_t a1)
{
  _OWORD *v2;
  __int128 v3;

  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)a1 = &off_1E988AC28;
  *(_WORD *)(a1 + 232) = 0;
  v2 = (_OWORD *)MEMORY[0x1E0C9D628];
  *(_BYTE *)(a1 + 234) = 0;
  v3 = v2[1];
  *(_OWORD *)(a1 + 240) = *v2;
  *(_OWORD *)(a1 + 256) = v3;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 304) = xmmword_1D4DB19A0;
  *(_OWORD *)(a1 + 320) = unk_1D4DB19B0;
  *(_OWORD *)(a1 + 272) = xmmword_1D4DB1980;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)algn_1D4DB1990;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  sub_1D4D8E9FC(a1 + 448);
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  return a1;
}

void sub_1D4D624F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD **v13;
  void **v14;
  void *v16;
  void *v17;
  uint64_t v18;

  v16 = *(void **)(v10 + 424);
  if (v16)
  {
    *(_QWORD *)(v10 + 432) = v16;
    operator delete(v16);
  }
  v17 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 408) = v17;
    operator delete(v17);
  }
  sub_1D4D61048(v11, *v13);
  a10 = (void **)(v10 + 352);
  sub_1D4D60C20(&a10);
  v18 = *v12;
  *v12 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_1D4D6149C(v10);
  _Unwind_Resume(a1);
}

void sub_1D4D62564(uint64_t a1)
{
  sub_1D4D62588(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D62588(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void **v13;

  *(_QWORD *)a1 = &off_1E988AC28;
  v2 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = 0;
  if (v2)
    sub_1D4D62CDC(a1 + 584, v2);
  v3 = *(_QWORD **)(a1 + 576);
  if (v3 == (_QWORD *)(a1 + 552))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 552);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 544);
  if (v5 == (_QWORD *)(a1 + 520))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 520);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = *(_QWORD **)(a1 + 512);
  if (v7 == (_QWORD *)(a1 + 488))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 488);
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  nullsub_2(a1 + 448);
  v9 = *(void **)(a1 + 424);
  if (v9)
  {
    *(_QWORD *)(a1 + 432) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 400);
  if (v10)
  {
    *(_QWORD *)(a1 + 408) = v10;
    operator delete(v10);
  }
  sub_1D4D61048(a1 + 376, *(_QWORD **)(a1 + 384));
  v13 = (void **)(a1 + 352);
  sub_1D4D60C20(&v13);
  v11 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return sub_1D4D6149C(a1);
}

uint64_t sub_1D4D626C0(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D626E8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D62720(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988A320;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D62760(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988A320;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D6277C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D62784(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

uint64_t sub_1D4D627AC(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend(WeakRetained, "ICShouldBeCanceled");
  else
    v2 = 0;

  return v2;
}

void sub_1D4D627FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6280C(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A2B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D62848()
{
  return &unk_1E988A2B0;
}

_QWORD *sub_1D4D62854(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D4D629BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D4D5DF98(a1);
}

uint64_t sub_1D4D629C8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D629F0(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D62A28(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988A378;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D62A68(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988A378;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D62A84(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D62A8C(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1D4D62AB4(uint64_t a1, int *a2)
{
  int v2;
  double v3;
  id WeakRetained;

  v2 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    LODWORD(v3) = v2;
    objc_msgSend(WeakRetained, "ICReportProgress:", v3);
  }

}

void sub_1D4D62B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D62B20(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A2C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D62B5C()
{
  return &unk_1E988A2C0;
}

_QWORD *sub_1D4D62B68(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D4D62CD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D4D5DF98(a1);
}

void sub_1D4D62CDC(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;

  if (a2)
  {
    v3 = *(void **)(a2 + 520);
    if (v3)
    {
      *(_QWORD *)(a2 + 528) = v3;
      operator delete(v3);
    }
    sub_1D4D62DB8(a2 + 296);
    v9 = (void **)(a2 + 272);
    sub_1D4D60C20(&v9);
    v4 = *(_QWORD **)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    if (v4)
      sub_1D4D61BC4(a2 + 256, v4);
    v5 = *(_QWORD **)(a2 + 216);
    if (v5 == (_QWORD *)(a2 + 192))
    {
      v6 = 4;
      v5 = (_QWORD *)(a2 + 192);
    }
    else
    {
      if (!v5)
        goto LABEL_11;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
    v7 = *(_QWORD **)(a2 + 184);
    if (v7 == (_QWORD *)(a2 + 160))
    {
      v8 = 4;
      v7 = (_QWORD *)(a2 + 160);
    }
    else
    {
      if (!v7)
      {
LABEL_16:
        MEMORY[0x1D826897C](a2, 0x10B0C408AFB0367);
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_16;
  }
}

uint64_t sub_1D4D62DB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  sub_1D4D61048(a1 + 192, *(_QWORD **)(a1 + 200));
  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v9 = (void **)(a1 + 120);
  sub_1D4D60C20(&v9);
  v9 = (void **)(a1 + 96);
  sub_1D4D60C20(&v9);
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_1D4D62E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *sub_1D4D62ED0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4D61E28(result, a4);
    result = (_QWORD *)sub_1D4D62F54((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4D62F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D4D61D18(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D62F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[3];
  char v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v22 = a4;
  v23 = a4;
  v20[0] = a1;
  v20[1] = &v22;
  v20[2] = &v23;
  v21 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      v7 = *(_OWORD *)(v6 + 16);
      v8 = *(_OWORD *)(v6 + 32);
      v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      sub_1D4D5E408((_QWORD *)(v4 + 80), *(const void **)(v6 + 80), *(_QWORD *)(v6 + 88), (uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 6);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v6 + 104);
      v10 = *(_OWORD *)(v6 + 120);
      v11 = *(_OWORD *)(v6 + 136);
      v12 = *(_OWORD *)(v6 + 152);
      *(_OWORD *)(v4 + 168) = *(_OWORD *)(v6 + 168);
      *(_OWORD *)(v4 + 152) = v12;
      *(_OWORD *)(v4 + 136) = v11;
      *(_OWORD *)(v4 + 120) = v10;
      v13 = *(_OWORD *)(v6 + 184);
      v14 = *(_OWORD *)(v6 + 200);
      v15 = *(_OWORD *)(v6 + 216);
      *(_OWORD *)(v4 + 232) = *(_OWORD *)(v6 + 232);
      *(_OWORD *)(v4 + 216) = v15;
      *(_OWORD *)(v4 + 200) = v14;
      *(_OWORD *)(v4 + 184) = v13;
      v16 = *(_OWORD *)(v6 + 248);
      v17 = *(_OWORD *)(v6 + 264);
      v18 = *(_OWORD *)(v6 + 280);
      *(_QWORD *)(v4 + 293) = *(_QWORD *)(v6 + 293);
      *(_OWORD *)(v4 + 264) = v17;
      *(_OWORD *)(v4 + 280) = v18;
      *(_OWORD *)(v4 + 248) = v16;
      v4 = v23 + 304;
      v23 += 304;
      v6 += 304;
    }
    while (v6 != a3);
  }
  v21 = 1;
  sub_1D4D5FFE4((uint64_t)v20);
  return v4;
}

void sub_1D4D63078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D5FFE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6308C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D630B4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D630EC(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988A3D0;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D6312C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988A3D0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D63148(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D63150(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

uint64_t sub_1D4D63178(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend(WeakRetained, "ICShouldBeCanceled");
  else
    v2 = 0;

  return v2;
}

void sub_1D4D631C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D631D8(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A2D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D63214()
{
  return &unk_1E988A2D0;
}

uint64_t sub_1D4D63220(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_1D4D63248(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1D826897CLL);
}

id *sub_1D4D63280(uint64_t a1)
{
  id *v1;
  id *v2;

  v1 = (id *)(a1 + 8);
  v2 = (id *)operator new(0x10uLL);
  *v2 = &off_1E988A428;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1D4D632C0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E988A428;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1D4D632DC(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
}

void sub_1D4D632E4(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1D4D6330C(uint64_t a1, int *a2)
{
  int v2;
  double v3;
  id WeakRetained;

  v2 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    LODWORD(v3) = v2;
    objc_msgSend(WeakRetained, "ICReportProgress:", v3);
  }

}

void sub_1D4D63364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D63378(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A2E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D633B4()
{
  return &unk_1E988A2E0;
}

void sub_1D4D633C0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = *(void **)(a2 + 96);
    if (v3)
      operator delete(v3);
    v4 = *(void **)(a2 + 72);
    if (v4)
    {
      *(_QWORD *)(a2 + 80) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(_QWORD *)(a2 + 56) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a2 + 24);
    if (v6)
    {
      *(_QWORD *)(a2 + 32) = v6;
      operator delete(v6);
    }
    v7 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v7;
      operator delete(v7);
    }
    JUMPOUT(0x1D826897CLL);
  }
}

_QWORD *sub_1D4D63444(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D609E4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D634A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D634BC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D618A8(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D63518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D63534(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  if (a6)
  {
    sub_1D4D61A14(a1, a6);
    sub_1D4D61A58(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1D4D6359C(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_1D4D635B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  sub_1D4D5E408((_QWORD *)(v4 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v10;
  *(_OWORD *)(v4 + 136) = v9;
  *(_OWORD *)(v4 + 120) = v8;
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v13;
  *(_OWORD *)(v4 + 200) = v12;
  *(_OWORD *)(v4 + 184) = v11;
  result = *(__n128 *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  v16 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(v4 + 293) = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v15;
  *(_OWORD *)(v4 + 280) = v16;
  *(__n128 *)(v4 + 248) = result;
  *(_QWORD *)(a1 + 8) = v4 + 304;
  return result;
}

void sub_1D4D63690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D63698(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t *v30;

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6BCA1AF286BCA1)
    v9 = 0xD79435E50D7943;
  else
    v9 = v5;
  v30 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4D5F57C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[304 * v4];
  v27[0] = v10;
  v27[1] = v11;
  v28 = v11;
  v29 = &v10[304 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 10) = 0;
  sub_1D4D5E408((_QWORD *)v11 + 10, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  v15 = &v10[304 * v4];
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v15 + 152) = v18;
  *(_OWORD *)(v15 + 136) = v17;
  *(_OWORD *)(v15 + 120) = v16;
  v19 = *(_OWORD *)(a2 + 184);
  v20 = *(_OWORD *)(a2 + 200);
  v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v15 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v15 + 216) = v21;
  *(_OWORD *)(v15 + 200) = v20;
  *(_OWORD *)(v15 + 184) = v19;
  v22 = *(_OWORD *)(a2 + 264);
  v23 = *(_OWORD *)(a2 + 280);
  v24 = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v15 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(v15 + 293) = v24;
  *(_OWORD *)(v15 + 264) = v22;
  *(_OWORD *)(v15 + 280) = v23;
  v28 += 304;
  sub_1D4D5F508(a1, v27);
  v25 = a1[1];
  sub_1D4D5F774((uint64_t)v27);
  return v25;
}

void sub_1D4D63840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D63854(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        v21 = a3 + 304 * a5;
      }
      else
      {
        v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_1D4D62F54(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_1D4D5FBF8((uint64_t)a1, v5, v12, v5 + 304 * a5);
      sub_1D4D601A8((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0xD79435E50D7943)
        sub_1D4D5DFA8();
      v15 = 0x86BCA1AF286BCA1BLL * ((a2 - v13) >> 4);
      v16 = 0x86BCA1AF286BCA1BLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x6BCA1AF286BCA1)
        v18 = 0xD79435E50D7943;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1D4D5F57C(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[304 * v15];
      v25 = v24;
      v26 = &v19[304 * v18];
      sub_1D4D63A38(&v23, a3, a5);
      v5 = sub_1D4D5FDFC(a1, &v23, v5);
      sub_1D4D5F774((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1D4D63A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D63A38(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 304 * a3;
    v7 = v4 + 80;
    v8 = 304 * a3;
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)a2;
      v9 = *(_OWORD *)(a2 + 16);
      v10 = *(_OWORD *)(a2 + 32);
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v7 - 20) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v7 - 48) = v10;
      *(_OWORD *)(v7 - 32) = v11;
      *(_OWORD *)(v7 - 64) = v9;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      result = sub_1D4D5E408((_QWORD *)v7, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 104);
      v12 = *(_OWORD *)(a2 + 120);
      v13 = *(_OWORD *)(a2 + 136);
      v14 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v7 + 72) = v14;
      *(_OWORD *)(v7 + 56) = v13;
      *(_OWORD *)(v7 + 40) = v12;
      v15 = *(_OWORD *)(a2 + 184);
      v16 = *(_OWORD *)(a2 + 200);
      v17 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v7 + 136) = v17;
      *(_OWORD *)(v7 + 120) = v16;
      *(_OWORD *)(v7 + 104) = v15;
      v18 = *(_OWORD *)(a2 + 248);
      v19 = *(_OWORD *)(a2 + 264);
      v20 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(v7 + 213) = *(_QWORD *)(a2 + 293);
      *(_OWORD *)(v7 + 200) = v20;
      *(_OWORD *)(v7 + 184) = v19;
      *(_OWORD *)(v7 + 168) = v18;
      v7 += 304;
      a2 += 304;
      v8 -= 304;
    }
    while (v8);
  }
  else
  {
    v6 = result[2];
  }
  v3[2] = v6;
  return result;
}

void sub_1D4D63B44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 80;
  _Unwind_Resume(a1);
}

void ***sub_1D4D63B50(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_1D4D61D18(&v3);
    return (void ***)MEMORY[0x1D826897C](v2, 0x20C40960023A9);
  }
  return result;
}

void sub_1D4D63BA0(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1D4D63BA0(a1, *a2);
    sub_1D4D63BA0(a1, a2[1]);
    v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **sub_1D4D63BF0(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x70uLL);
    *((_QWORD *)v11 + 4) = **a4;
    v12 = (__int128 *)MEMORY[0x1E0CA2E18];
    v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *((_QWORD *)v11 + 7) = v13;
    v14 = *v12;
    *(_OWORD *)(v11 + 40) = *v12;
    *((_OWORD *)v11 + 4) = v14;
    *((_QWORD *)v11 + 12) = 0;
    *((_QWORD *)v11 + 13) = 0;
    *((_QWORD *)v11 + 10) = v13;
    *((_QWORD *)v11 + 11) = 0;
    sub_1D4D6063C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1D4D63CD0(uint64_t result, uint64_t a2, unint64_t a3, double *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double *v7;

  v4 = 0;
  v5 = a3;
  do
  {
    v6 = 0;
    *(_QWORD *)(result + 8 * v4) = 0;
    if (v4 <= a3)
    {
      v7 = a4 + 8;
      switch(v4)
      {
        case 0uLL:
          goto LABEL_7;
        case 1uLL:
          goto LABEL_6;
        case 2uLL:
          v7 = a4 + 9;
          goto LABEL_6;
        case 3uLL:
          v7 = a4 + 10;
LABEL_6:
          if (*v7 == 0.0)
            goto LABEL_8;
LABEL_7:
          v6 = v5;
          break;
        default:
LABEL_8:
          v6 = 0;
          break;
      }
    }
    *(_QWORD *)(a2 + 8 * v4++) = v6;
    --v5;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1D4D63D54(int64x2_t *a1, unint64_t a2, double *a3)
{
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  char v10[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v10, (uint64_t)&v8, a2, a3);
  v4 = v9;
  v5 = v8;
  v6 = v9;
  *a1 = v8;
  a1[1] = v4;
  return vaddvq_s64(vaddq_s64(v6, v5));
}

double sub_1D4D63DD0(double result, double a2)
{
  if (result <= a2)
    return a2;
  return result;
}

uint64_t sub_1D4D63DDC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, double a5)
{
  double v7;
  double v8;
  uint64_t result;
  _QWORD v10[10];

  v10[9] = *MEMORY[0x1E0C80C00];
  v7 = *(double *)(*a3 + 72 * a4);
  v8 = v7;
  if (a4)
    v8 = *(double *)(*a3 + 72 * a4 - 72);
  sub_1D4D732A0((uint64_t)v10, *a2 + 72 * a4);
  result = sub_1D4D73570(a1, v10);
  *(double *)(a1 + 24) = (v8 - v7) / (a5 * 3.0);
  return result;
}

void sub_1D4D63E98(uint64_t a1, double *a2, double *a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t i;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double *v28;
  double v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  double v35;
  double *v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  const double *v43;
  float64x2_t v44;
  _BYTE v45[72];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  sub_1D4D7353C((uint64_t)&v62, a2);
  sub_1D4D7333C((uint64_t)v45, &v62);
  v8 = a3[1];
  v10 = a3[2];
  v9 = a3[3];
  v11 = a3[5];
  v12 = a3[6];
  v13 = a3[7];
  v14 = a3[8];
  v15 = a2[3] * -3.0 * a4;
  v16 = v15 + *a3;
  v17 = v15 + a3[4];
  v18 = v17 * v14 - v13 * v11;
  v19 = v13 * v10 - v8 * v14;
  v53 = v18;
  v54 = v19;
  v20 = v8 * v11 - v17 * v10;
  v55 = v20;
  v21 = v19 * v9 + v16 * v18 + v12 * v20;
  if (v21 >= 2.22044605e-16 || v21 <= -2.22044605e-16)
  {
    v53 = v18 / v21;
    v54 = v19 / v21;
    v55 = v20 / v21;
    v56 = (v12 * v11 - v9 * v14) / v21;
    v57 = (v16 * v14 - v12 * v10) / v21;
    v58 = (v9 * v10 - v16 * v11) / v21;
    v59 = (v9 * v13 - v12 * v17) / v21;
    v60 = (v12 * v8 - v16 * v13) / v21;
    v61 = (v16 * v17 - v9 * v8) / v21;
  }
  for (i = 0; i != 3; ++i)
  {
    v24 = 0;
    v25 = (double *)v45;
    do
    {
      v26 = 0;
      v27 = 0.0;
      v28 = v25;
      do
      {
        v29 = *v28;
        v28 += 3;
        v27 = v27 + a3[v26++] * v29;
      }
      while (v26 != 3);
      *((double *)&v62 + 3 * i + v24++) = v27;
      ++v25;
    }
    while (v24 != 3);
    a3 += 3;
  }
  v30 = 0;
  v51[2] = v64;
  v51[3] = v65;
  v52 = v66;
  v51[0] = v62;
  v51[1] = v63;
  v31 = v51;
  do
  {
    v32 = 0;
    v33 = &v53;
    do
    {
      v34 = 0;
      v35 = 0.0;
      v36 = v33;
      do
      {
        v37 = *v36;
        v36 += 3;
        v35 = v35 + *(double *)((char *)v31 + v34) * v37;
        v34 += 8;
      }
      while (v34 != 24);
      *((double *)&v62 + 3 * v30 + v32++) = v35;
      ++v33;
    }
    while (v32 != 3);
    ++v30;
    v31 = (_OWORD *)((char *)v31 + 24);
  }
  while (v30 != 3);
  v38 = 0;
  v39 = v65;
  v48 = v64;
  v49 = v65;
  v41 = v62;
  v40 = v63;
  v50 = v66;
  v42 = v66;
  v46 = v62;
  v47 = v63;
  *(_OWORD *)(a1 + 32) = v64;
  *(_OWORD *)(a1 + 48) = v39;
  *(_QWORD *)(a1 + 64) = v42;
  *(_OWORD *)a1 = v41;
  *(_OWORD *)(a1 + 16) = v40;
  v43 = (const double *)(a1 + 64);
  v44 = vld1q_dup_f64(v43);
  do
  {
    *(float64x2_t *)(a1 + v38) = vdivq_f64(*(float64x2_t *)(a1 + v38), v44);
    v38 += 16;
  }
  while (v38 != 64);
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
}

float64x2_t sub_1D4D6412C(float64x2_t **a1, float64x2_t **a2, double *a3)
{
  double v6;
  double v7;
  double v8;
  float64x2_t *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float64x2_t *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t result;

  v6 = log((1.0 - a3[4]) * 1.0008) * -0.249688;
  if (v6 >= 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  v8 = log((1.0 - a3[5]) * 1.0008) * -0.249688;
  if (v8 < 0.0)
    v8 = 0.0;
  v9 = *a1;
  v10 = -v7;
  if (v9->f64[0] >= -v7)
    v10 = v9->f64[0];
  v9->f64[0] = v10;
  v11 = -v8;
  if (v9[2].f64[0] >= v11)
    v11 = v9[2].f64[0];
  v9[2].f64[0] = v11;
  v12 = a3[4];
  if (v12 <= a3[5])
    v12 = a3[5];
  v13 = 1.0 - v12;
  v14 = log((1.0 - v12) * 1.00929) * -1.56986;
  if (v14 < 0.0)
    v14 = 0.0;
  v15 = -v14;
  v16 = v9->f64[1];
  if (v16 < -v14)
    v16 = -v14;
  v9->f64[1] = v16;
  if (v9[1].f64[1] >= v15)
    v15 = v9[1].f64[1];
  v9[1].f64[1] = v15;
  v17 = *a2;
  v18 = v17->f64[1];
  if (v14 < v18)
    v18 = v14;
  v17->f64[1] = v18;
  if (v14 >= v17[1].f64[1])
    v14 = v17[1].f64[1];
  v17[1].f64[1] = v14;
  v19 = a3[4] * (a3[1] * 0.5);
  if (v19 < 0.0)
    v19 = 0.0;
  v20 = -v19;
  if (v9[1].f64[0] >= -v19)
    v20 = v9[1].f64[0];
  v9[1].f64[0] = v20;
  if (v19 >= v17[1].f64[0])
    v19 = v17[1].f64[0];
  v17[1].f64[0] = v19;
  v21 = a3[5] * (a3[2] * 0.5);
  if (v21 < 0.0)
    v21 = 0.0;
  v22 = -v21;
  if (v9[2].f64[1] >= -v21)
    v22 = v9[2].f64[1];
  v9[2].f64[1] = v22;
  if (v21 >= v17[2].f64[1])
    v21 = v17[2].f64[1];
  v17[2].f64[1] = v21;
  v23 = log(v13) * -1.237 + -0.0186;
  if (v23 < 0.0)
    v23 = 0.0;
  v24 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v23), 0);
  v9[3] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v9[3]), (int8x16_t)v24, (int8x16_t)v9[3]);
  v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0);
  result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17[3], v25), (int8x16_t)v25, (int8x16_t)v17[3]);
  v17[3] = result;
  return result;
}

void sub_1D4D64334(_QWORD *a1, void **a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *i;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *j;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  void *__p[2];
  int64x2_t v32;
  void *v33[5];

  v33[4] = *(void **)MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v33, (uint64_t)__p, a4, (double *)a3);
  v29 = v32;
  v30 = *(int64x2_t *)__p;
  *(double *)__p = -*(double *)(a3 + 104);
  sub_1D4D6A0B8(v33, a5, __p);
  sub_1D4D6A0B8(__p, a5, (_QWORD *)(a3 + 104));
  v12 = vaddvq_s64(vaddq_s64(v29, v30));
  v13 = v12 * a5;
  if ((a6 & 1) == 0)
  {
    if (*(_BYTE *)(a3 + 24))
      sub_1D4D6412C((float64x2_t **)v33, (float64x2_t **)__p, (double *)a3);
    else
      printf("undefined: generating log H bounds for uncentered image.");
  }
  sub_1D4D6455C((uint64_t)a1, v13);
  sub_1D4D8C0EC((uint64_t)a1);
  v14 = 8 * a5;
  if (a4)
  {
    v15 = 0;
    v16 = (uint64_t *)v33[0];
    v17 = (_QWORD *)*a1;
    do
    {
      v18 = a5;
      v19 = v17;
      for (i = v16; v18; --v18)
      {
        v21 = *i++;
        *v19++ = v21;
      }
      ++v15;
      v17 = (_QWORD *)((char *)v17 + v14);
    }
    while (v15 != a4);
  }
  sub_1D4D6455C((uint64_t)a2, v13);
  if (v13)
    memset_pattern16(*a2, &unk_1D4DB1CE0, 8 * a5 * v12);
  v22 = (uint64_t *)__p[0];
  if (a4)
  {
    v23 = 0;
    v24 = (char *)*a2;
    do
    {
      v25 = a5;
      v26 = v24;
      for (j = v22; v25; --v25)
      {
        v28 = *j++;
        *v26++ = v28;
      }
      ++v23;
      v24 += v14;
    }
    while (v23 != a4);
    v22 = (uint64_t *)__p[0];
  }
  if (v22)
  {
    __p[1] = v22;
    operator delete(v22);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_1D4D64520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D6455C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4D6A1CC((char **)a1, a2 - v2);
  }
}

uint64_t sub_1D4D6458C(uint64_t result, unint64_t *a2, unint64_t *a3, float64x2_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t i;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  const double *v13;
  float64x2_t v14;
  double *v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  unint64_t v20;

  for (i = 0; i != 4; ++i)
  {
    a4->f64[i] = 0.0;
    *(_QWORD *)(a5 + i * 8) = 0;
  }
  switch(result)
  {
    case 1:
      *a2 = 0;
      v8 = 1;
      *a3 = 1;
      v13 = (const double *)(*a6 + 8 * a7);
      v14 = vld1q_dup_f64(v13);
      *a4 = vdivq_f64((float64x2_t)xmmword_1D4DB1C80, v14);
      break;
    case 2:
      *a2 = 0;
      v8 = 2;
      *a3 = 2;
      v15 = (double *)(*a6 + 8 * a7);
      v16 = v15[1];
      v17 = *v15 * v16 * (*v15 + v16);
      a4->f64[0] = (v16 + v16) / v17;
      a4->f64[1] = (*v15 + v15[1]) * -2.0 / v17;
      a4[1].f64[0] = (*v15 + *v15) / v17;
      break;
    case 3:
      *a2 = 0;
      v8 = 3;
      *a3 = 3;
      v9 = (double *)(*a6 + 8 * a7);
      v10 = v9[1];
      v11 = v9[2];
      v12 = (*v9 + v10 + v11) * ((v10 + v11) * ((*v9 + v10) * (*v9 * v10 * v11)));
      a4->f64[0] = v10 * -6.0 * v11 * (v10 + v11) / v12;
      a4->f64[1] = v9[2] * 6.0 * (*v9 + v9[1]) * (v9[2] + *v9 + v9[1]) / v12;
      a4[1].f64[0] = (*v9 + v9[1] + v9[2]) * (*v9 * -6.0 * (v9[1] + v9[2])) / v12;
      a4[1].f64[1] = *v9 * 6.0 * v9[1] * (*v9 + v9[1]) / v12;
      break;
    default:
      v8 = *a3;
      break;
  }
  v18 = *a2;
  *(_QWORD *)(a5 + 8 * *a2) = 0;
  while (++v18 <= v8)
  {
    *(_QWORD *)(a5 + 8 * v18) = 0;
    v19 = 0.0;
    v20 = v18;
    do
    {
      v19 = a4->f64[v20] + v19;
      *(double *)(a5 + 8 * v18) = v19;
      ++v20;
    }
    while (v20 <= v8);
  }
  return result;
}

void sub_1D4D6474C(sparse_m_double *a1, uint64_t *a2, _QWORD *a3, void *A, double *a5, uint64_t a6)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  sparse_m_double *v18;
  sparse_index k;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  sparse_index v24;
  sparse_dimension v25;
  void **v26;
  size_t v27;
  double *v28;
  sparse_index *v29;
  sparse_status v30;
  _QWORD *v31;
  uint64_t v32;
  double *v33;
  sparse_index *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  double *v53;
  double *v54;
  unint64_t v55;
  double v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v65;
  uint64_t v66;
  sparse_dimension v67;
  unint64_t v68;
  sparse_dimension v69;
  uint64_t v70;
  uint64_t v71;
  void *Aa;
  uint64_t v73;
  unint64_t v74;
  void *__p;
  uint64_t *v76;
  _QWORD v77[3];
  int v78;
  sparse_index column_end;
  double v80[4];
  float64x2_t v81;
  _OWORD v82[2];
  _QWORD v83[4];
  _QWORD v84[4];
  _QWORD v85[4];
  _QWORD v86[8];
  _BYTE v87[32];
  _QWORD v88[6];

  v88[4] = *MEMORY[0x1E0C80C00];
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  Aa = A;
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1D4D63CD0((uint64_t)v88, (uint64_t)v87, matrix_number_of_rows, a5);
  v12 = 0;
  v13 = 0;
  v88[0] = 0;
  do
  {
    v13 += *(_QWORD *)&v87[v12 * 8];
    v88[++v12] = v13;
  }
  while (v12 != 3);
  for (i = 0; i != 4; ++i)
    v86[i + 4] = v88[i] * matrix_number_of_columns;
  v86[0] = 0;
  for (j = 1; j != 4; ++j)
    v86[j] = 2 * matrix_number_of_columns * *(_QWORD *)&v87[j * 8];
  v16 = 0;
  v17 = 0;
  v85[0] = 0;
  do
  {
    v17 += v86[v16];
    v85[++v16] = v17;
  }
  while (v16 != 3);
  sub_1D4D63CD0((uint64_t)v84, (uint64_t)v83, matrix_number_of_rows, a5);
  column_end = 0x7FF8000000000000;
  sub_1D4D6A0B8(&__p, matrix_number_of_columns, &column_end);
  sub_1D4D6A2D4(v77, 4uLL, (uint64_t)&__p);
  if (__p)
  {
    v76 = (uint64_t *)__p;
    operator delete(__p);
  }
  v18 = sparse_matrix_create_double(matrix_number_of_columns, matrix_number_of_columns);
  if (matrix_number_of_columns)
  {
    for (k = 0; k != matrix_number_of_columns; ++k)
      sparse_insert_entry_double(v18, 1.0, k, k);
  }
  if (matrix_number_of_rows)
  {
    v69 = matrix_number_of_columns;
    v70 = 0;
    v20 = 0;
    v65 = (_QWORD *)(a6 + 24);
    v67 = matrix_number_of_rows;
    do
    {
      v21 = 0;
      memset(v82, 0, sizeof(v82));
      v78 = 0;
      do
      {
        if (v20 + v21 < matrix_number_of_rows)
        {
          *((_QWORD *)v82 + v21) = v20 + v21;
          *((_BYTE *)&v78 + v21) = 1;
        }
        ++v21;
      }
      while (v21 != 4);
      v68 = v20;
      v22 = 0;
      v66 = matrix_number_of_columns * 2 * v20;
      do
      {
        if (*((_BYTE *)&v78 + v22))
        {
          v23 = v77[0];
          v24 = *((_QWORD *)v82 + v22);
          v25 = sparse_get_matrix_number_of_columns(Aa);
          v26 = (void **)(v23 + 24 * v22);
          sub_1D4D6455C((uint64_t)v26, v25);
          if (v25)
          {
            v27 = 8 * v25;
            bzero(*v26, 8 * v25);
          }
          else
          {
            v27 = 0;
          }
          v28 = (double *)malloc_type_malloc(v27, 0x100004000313F17uLL);
          v29 = (sparse_index *)malloc_type_malloc(v27, 0x100004000313F17uLL);
          column_end = 0;
          v30 = sparse_extract_sparse_row_double((sparse_matrix_double)Aa, v24, 0, &column_end, v25, v28, v29);
          if (v30 >= 1)
          {
            v31 = *v26;
            v32 = v30;
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = *(_QWORD *)v33++;
              v36 = v35;
              v37 = *v34++;
              v31[v37] = v36;
              --v32;
            }
            while (v32);
          }
          free(v28);
          free(v29);
        }
        ++v22;
      }
      while (v22 != 4);
      matrix_number_of_rows = v67;
      v38 = v68;
      v39 = v68;
      v40 = 1;
      v41 = 2 * matrix_number_of_columns;
      do
      {
        if (v84[v40] <= v38 && v83[v40] > v38)
        {
          column_end = 0;
          v74 = 0;
          sub_1D4D6458C(v40, (unint64_t *)&column_end, &v74, &v81, (uint64_t)v80, v65, v38);
          v42 = column_end;
          v43 = v74;
          v71 = v85[v40];
          v44 = v71 + v66;
          if (column_end <= v74)
          {
            v45 = column_end;
            do
            {
              v46 = *((_QWORD *)v82 + v45) * matrix_number_of_columns;
              v47 = v81.f64[v45];
              sub_1D4D8C26C(a1, v44, v46, v18, 0, v47, 0.0);
              sub_1D4D8C26C(a1, v44 + matrix_number_of_columns, v46, v18, 0, -v47, 0.0);
              ++v45;
            }
            while (v45 <= v43);
          }
          v48 = v86[v40 + 4] + v68 * matrix_number_of_columns;
          sub_1D4D8C26C(a1, v44, v48, v18, 0, -1.0, 0.0);
          sub_1D4D8C26C(a1, v44 + matrix_number_of_columns, v48, v18, 0, -1.0, 0.0);
          v73 = 0;
          sub_1D4D6A0B8(&__p, matrix_number_of_columns, &v73);
          v39 = v68;
          if (v42 <= v43)
          {
            v49 = 24 * v42;
            do
            {
              sub_1D4D8C04C((uint64_t)&__p, (double **)(v77[0] + v49), v80[v42++]);
              v49 += 24;
            }
            while (v42 <= v43);
          }
          v50 = (uint64_t *)__p;
          v41 = 2 * matrix_number_of_columns;
          matrix_number_of_rows = v67;
          v38 = v68;
          if (v76 != __p)
          {
            v51 = ((char *)v76 - (_BYTE *)__p) >> 3;
            v52 = *a2;
            if (v51 <= 1)
              v51 = 1;
            v53 = (double *)(v52 + 8 * (v70 + v71));
            v54 = (double *)__p;
            v55 = v51;
            do
            {
              v56 = *v54++;
              *v53++ = -v56;
              --v55;
            }
            while (v55);
            v57 = (_QWORD *)(v52 + 8 * (v69 + v71));
            v58 = v50;
            do
            {
              v59 = *v58++;
              *v57++ = v59;
              --v51;
            }
            while (v51);
          }
          if (matrix_number_of_columns)
          {
            v60 = 0;
            v61 = *a3 + 4 * (v69 + v71);
            v62 = *a3 + 4 * (v70 + v71);
            do
            {
              *(_DWORD *)(v62 + 4 * v60) = 1;
              *(_DWORD *)(v61 + 4 * v60++) = 1;
            }
            while (matrix_number_of_columns > v60);
          }
          if (v50)
          {
            v76 = v50;
            operator delete(v50);
          }
        }
        if (v39 == 255)
          sparse_commit(a1);
        ++v40;
      }
      while (v40 != 4);
      v20 = v38 + 1;
      v70 += v41;
      v69 += v41;
    }
    while (v20 != matrix_number_of_rows);
  }
  if (v18)
    sparse_matrix_destroy(v18);
  __p = v77;
  sub_1D4D60C20((void ***)&__p);
}

void sub_1D4D64D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D64DB0(void *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, sparse_dimension a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  sparse_dimension matrix_number_of_rows;
  sparse_m_double *v17;
  sparse_index v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;

  v7 = *(_QWORD *)(a7 + 48);
  v8 = *(_QWORD *)(a7 + 56);
  if (v7 == v8)
    return 0;
  v10 = (v8 - v7) >> 3;
  if (v10 != 3 * a5)
    return 0;
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  if (matrix_number_of_rows < v10 + a4
    || matrix_number_of_rows != (uint64_t)(a2[1] - *a2) >> 3
    || matrix_number_of_rows != (uint64_t)(a3[1] - *a3) >> 2)
  {
    return 0;
  }
  v29 = a2;
  v30 = a3;
  v17 = sparse_matrix_create_double(a5, a5);
  if (a5)
  {
    v18 = 0;
    do
    {
      sparse_insert_entry_double(v17, 1.0, v18, v18);
      ++v18;
    }
    while (a5 != v18);
  }
  v19 = 0;
  v20 = 0;
  v21 = 4 * a4;
  v22 = 8 * a4;
  v23 = 8 * a5;
  do
  {
    sub_1D4D8C26C((sparse_m_double *)a1, a4, v20 * a5, v17, 0, 1.0, 0.0);
    if (a5)
    {
      v24 = 0;
      v25 = *v30 + v21;
      v26 = *v29 + v22;
      v27 = *(_QWORD *)(a7 + 48) + v19;
      do
      {
        *(_QWORD *)(v26 + 8 * v24) = *(_QWORD *)(v27 + 8 * v24);
        *(_DWORD *)(v25 + 4 * v24++) = 0;
      }
      while (a5 > v24);
    }
    a4 += a5;
    ++v20;
    v21 += 4 * a5;
    v22 += v23;
    v19 += v23;
  }
  while (v20 != 3);
  if (v17)
    sparse_matrix_destroy(v17);
  return 1;
}

void sub_1D4D64F48(unint64_t a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unsigned __int8 v28;
  void *__p;

  if (*(_QWORD *)(a2 + 72) == *(_QWORD *)(a2 + 80))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v28 = 0;
    sub_1D4D6A38C(&__p, a1, &v28);
    v6 = *(_QWORD *)(a2 + 72);
    v7 = *(_QWORD *)(a2 + 80);
    v8 = v7 - v6;
    if (v7 != v6)
    {
      v9 = 0;
      v10 = v8 >> 2;
      v11 = (char *)__p;
      if ((unint64_t)(v8 >> 2) <= 1)
        v10 = 1;
      do
      {
        v12 = *(_DWORD *)(v6 + 4 * v9);
        if (v12 <= 4)
          v13 = 4;
        else
          v13 = v12;
        v14 = v12 + 3;
        if (v14 >= (int)a1 - 1)
          v14 = a1 - 1;
        if ((int)v13 - 3 <= v14)
        {
          v15 = v14 + 4;
          do
          {
            *(_QWORD *)&v11[((unint64_t)(v13 - 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << (v13
                                                                                                - 3);
            ++v13;
          }
          while (v15 != (_DWORD)v13);
        }
        ++v9;
      }
      while (v9 != v10);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (a1)
    {
      v16 = 0;
      v17 = 0;
      v18 = a3 + 2;
      do
      {
        if (((*(_QWORD *)((char *)__p + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          if ((unint64_t)v16 >= *v18)
          {
            v20 = *a3;
            v21 = (v16 - *a3) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_1D4D5DFA8();
            v23 = *v18 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_1D4D5EA14((uint64_t)(a3 + 2), v24);
              v20 = *a3;
              v16 = a3[1];
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v17;
            v19 = v26 + 4;
            while (v16 != v20)
            {
              v27 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *a3 = v26;
            a3[1] = v19;
            a3[2] = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *(_DWORD *)v16 = v17;
            v19 = v16 + 4;
          }
          a3[1] = v19;
          v16 = v19;
        }
        ++v17;
      }
      while (v17 != a1);
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1D4D6513C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sparse_m_double *sub_1D4D65168(sparse_m_double *A, _QWORD *a2, _QWORD *a3, uint64_t *a4, sparse_index i, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  sparse_m_double *v13;
  unint64_t v14;
  uint64_t v15;
  sparse_index v16;
  sparse_index v17;
  uint64_t v18;

  v7 = *a4;
  v6 = a4[1];
  if (v6 != *a4)
  {
    v13 = A;
    v14 = 0;
    do
    {
      if (a6)
      {
        v15 = *(int *)(v7 + 4 * v14);
        v16 = v15 * a6;
        v17 = (v15 - 1) * a6;
        v18 = a6;
        do
        {
          sparse_insert_entry_double(v13, 1.0, i, v16);
          A = (sparse_m_double *)(int)sparse_insert_entry_double(v13, -1.0, i, v17);
          *(_QWORD *)(*a2 + 8 * i) = 0;
          *(_DWORD *)(*a3 + 4 * i++) = 0;
          ++v17;
          ++v16;
          --v18;
        }
        while (v18);
        v7 = *a4;
        v6 = a4[1];
      }
      ++v14;
    }
    while (v14 < (v6 - v7) >> 2);
  }
  return A;
}

void sub_1D4D65240(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, _DWORD *a5, uint64_t a6, unint64_t a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;

  v8 = *a4;
  v7 = a4[1];
  if (*a5 == 1)
  {
    v12 = *(_QWORD *)(a6 + 168);
    v13 = 1.0;
    if (((*(_QWORD *)(a6 + 176) - v12) >> 3) + 1 > a7)
    {
      v14 = a7 - 1;
      if (!a7)
        v14 = 0;
      v13 = *(double *)(v12 + 8 * v14);
    }
    *(double *)a2 = -(v8 * v7) / v13;
    *(double *)(a2 + 8) = v13 + v8 * v8 / v13;
    *(double *)(a2 + 16) = -v7;
    *(double *)(a2 + 24) = v8 * 3.0 / v13;
    *(double *)a3 = -v13 - v7 * v7 / v13;
    *(double *)(a3 + 8) = v8 * v7 / v13;
    *(double *)(a3 + 16) = v8;
    v11 = 3;
    v10 = v7 * 3.0 / v13;
  }
  else
  {
    if (*a5)
      return;
    *(double *)a2 = v8;
    *(double *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v9 = -(v8 * v7);
    *(double *)(a2 + 48) = -(v8 * v8);
    *(double *)(a2 + 56) = v9;
    *(double *)(a2 + 64) = -v8;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 24) = v8;
    *(double *)(a3 + 32) = v7;
    *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
    v10 = -v7;
    v11 = 8;
    *(double *)(a3 + 48) = v9;
    *(double *)(a3 + 56) = -(v7 * v7);
  }
  *(double *)(a3 + 8 * v11) = v10;
}

double sub_1D4D65324(double *a1, double *a2, double *a3)
{
  double v3;
  double result;
  double v5;
  double v6;
  double v7;

  *a1 = a3[14] * a3[4];
  v3 = a3[14] * a3[5];
  *a2 = v3;
  result = a3[4];
  v5 = a3[5];
  if (vabdd_f64(result, v5) > a3[11])
  {
    if (result <= v5)
    {
      if (v5 <= result)
      {
        v6 = 1.0 - result;
        v7 = 0.0;
      }
      else
      {
        v6 = 1.0 - result;
        v7 = fmin((1.0 - v3) / (1.0 - v5), (*a1 * -0.5 + 1.0) / v6);
      }
    }
    else
    {
      v6 = 1.0 - result;
      v7 = fmin((1.0 - *a1) / v6, (v3 * -0.5 + 1.0) / (1.0 - v5));
    }
    *a1 = 1.0 - v7 * v6;
    result = 1.0 - v7 * (1.0 - a3[5]);
    *a2 = result;
  }
  return result;
}

double sub_1D4D653EC@<D0>(double *a1@<X0>, double **a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v11 = (double *)operator new(0x40uLL);
  result = v7 - v3;
  a2[1] = v11 + 8;
  a2[2] = v11 + 8;
  *v11 = v6 - v10;
  v11[1] = v9 - v5;
  v11[2] = v8 - v4;
  v11[3] = v3 - v7;
  v11[4] = v10 - v6;
  v11[5] = v5 - v9;
  v11[6] = v4 - v8;
  v11[7] = v7 - v3;
  *a2 = v11;
  return result;
}

float64x2_t sub_1D4D65484@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  float64x2_t result;
  float64x2_t v14;
  uint64_t v15;

  v15 = 0;
  v14 = vsubq_f64(*(float64x2_t *)(a1 + 16 * a2), *(float64x2_t *)(a1 + 16 * a3));
  sub_1D4D6A0B8(a4, 8uLL, &v15);
  v7 = *a4;
  *(float64x2_t *)(*a4 + 16 * a2) = vaddq_f64(v14, v14);
  __asm { FMOV            V0.2D, #-2.0 }
  result = vmulq_f64(v14, _Q0);
  *(float64x2_t *)(v7 + 16 * a3) = result;
  return result;
}

uint64_t sub_1D4D654F8(void *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, uint64_t a8, unint64_t a9)
{
  sparse_dimension matrix_number_of_rows;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float64x2_t v28;
  float64x2_t v29;
  int v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v38;
  int64x2_t v39;
  float64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  float64_t v53;
  sparse_m_double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  const double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  double *v85;
  double *v86;
  uint64_t v87;
  double v88;
  double *v89;
  void *v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  double *v95;
  double *v96;
  double v97;
  double v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _DWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  double *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  double v119;
  double *v120;
  void *v121;
  _QWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  float64x2_t v125;
  uint64_t v126;
  unint64_t v127;
  double *v128;
  double *v129;
  uint64_t v130;
  unint64_t v131;
  double v132;
  _QWORD *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t *v136;
  uint64_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;
  sparse_m_double *v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  void *v152;
  double *v153;
  double *v154;
  uint64_t v155;
  float64_t v156;
  float64_t v157;
  void *v158[3];
  void *v159[3];
  uint64_t v160;
  uint64_t v161;
  _OWORD v162[4];
  _OWORD v163[4];
  uint64_t v164;
  float64x2x2_t v165;
  float64x2x2_t v166;
  float64x2x2_t v167;
  float64x2x2_t v168;
  float64x2x2_t v169;
  float64x2x2_t v170;

  v164 = *MEMORY[0x1E0C80C00];
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  v19 = *a2;
  v18 = a2[1];
  v149 = a2;
  if (matrix_number_of_rows != (v18 - v19) >> 3 || sparse_get_matrix_number_of_rows(a1) != (uint64_t)(a3[1] - *a3) >> 2)
    return 0;
  v20 = 20;
  if (!*((_BYTE *)a7 + 154))
    v20 = 16;
  v21 = *a7;
  v22 = 6;
  if (!*((_BYTE *)a7 + 152))
    v22 = 4;
  _ZF = v21 == 0;
  if (v21)
    v24 = 0;
  else
    v24 = v22;
  v25 = v20 | *((unsigned __int8 *)a7 + 155);
  if (_ZF)
    ++v25;
  v26 = v25 + v24;
  if (v25 + v24 + a4 > sparse_get_matrix_number_of_rows(a1))
    return 0;
  *(_QWORD *)&v162[0] = 0;
  sub_1D4D6A0B8(v163, a6, v162);
  sub_1D4D6A2D4(&v160, v26, (uint64_t)v163);
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
  }
  *(_QWORD *)&v163[0] = 0;
  sub_1D4D6A0B8(v159, v26, v163);
  v142 = (sparse_m_double *)a1;
  LODWORD(v163[0]) = 0;
  sub_1D4D6A5B8(v158, v26, v163);
  v30 = *((unsigned __int8 *)a7 + 24);
  v31.f64[0] = *((float64_t *)a7 + 1);
  v141 = a4;
  v148 = a3;
  v137 = a5;
  v140 = v31;
  if (v30)
  {
    v29.f64[0] = v31.f64[0] * -0.5;
    v144 = v29;
    v31.f64[0] = v31.f64[0] * 0.5;
    v146 = v31;
    v31.f64[0] = *((float64_t *)a7 + 2);
    v28.f64[0] = v31.f64[0] * -0.5;
    v143 = v28;
    v147 = v31;
    v28.f64[0] = v31.f64[0] * 0.5;
  }
  else
  {
    v29.f64[0] = *((float64_t *)a7 + 2);
    v28.f64[0] = 0.0;
    v144 = v28;
    v28.f64[0] = v31.f64[0];
    v146 = v28;
    v147 = v29;
    v28.f64[0] = 0.0;
    v143 = v28;
    v28.f64[0] = v29.f64[0];
  }
  v145 = v28;
  v28.f64[0] = *((float64_t *)a7 + 4);
  v138 = v28;
  v139.f64[0] = *((float64_t *)a7 + 5);
  v156 = 0.0;
  v157 = 0.0;
  sub_1D4D65324(&v157, &v156, (double *)a7);
  v136 = &v134;
  v33.f64[0] = v156;
  v32.f64[0] = v157;
  v32.f64[1] = v138.f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  v38 = vmulq_f64(vmulq_n_f64(v32, v140.f64[0]), _Q3);
  v39 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v144.f64[0], 0), v38);
  v33.f64[1] = v139.f64[0];
  v140 = _Q3;
  v40 = vmulq_f64(vmulq_n_f64(v33, v147.f64[0]), _Q3);
  v41 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v143.f64[0], 0), v40);
  v42 = (int64x2_t)vsubq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v146.f64[0], 0), v38);
  v163[0] = vzip2q_s64(v39, v41);
  v163[1] = vzip2q_s64(v42, v41);
  v43 = (int64x2_t)vsubq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v145.f64[0], 0), v40);
  v163[2] = vzip2q_s64(v42, v43);
  v163[3] = vzip2q_s64(v39, v43);
  v138 = (float64x2_t)v41;
  v139 = (float64x2_t)v39;
  v162[0] = vzip1q_s64(v39, v41);
  v162[1] = vzip1q_s64(v42, v41);
  v134 = (float64x2_t)v43;
  v135 = (float64x2_t)v42;
  v162[2] = vzip1q_s64(v42, v43);
  v162[3] = vzip1q_s64(v39, v43);
  v44 = 8 * a6;
  v46 = MEMORY[0x1E0C80A78](v45);
  v47 = &v134 - 4 * a6;
  v48 = a7;
  v49 = 0;
  *(_QWORD *)&v147.f64[0] = v47;
  do
  {
    sub_1D4D65240(v46, (uint64_t)v47, (uint64_t)v47 + v44, (double *)&v162[v49++], v48, a8, a9);
    v47 += a6;
  }
  while (v49 != 4);
  v50 = 0;
  v51 = v160;
  v52 = *(double **)&v147.f64[0];
  v53 = v147.f64[0];
  v55 = v141;
  v54 = v142;
  v57 = *(_QWORD *)&v143.f64[0];
  v56 = *(_QWORD *)&v144.f64[0];
  do
  {
    if (a6)
    {
      v58 = 0;
      v59 = *(_QWORD *)(v51 + 24 * v50);
      do
      {
        *(double *)(v59 + 8 * v58) = -*(double *)(*(_QWORD *)&v53 + 8 * v58);
        ++v58;
      }
      while (a6 > v58);
    }
    ++v50;
    *(_QWORD *)&v53 += v44;
  }
  while (v50 != 8);
  v60 = 0;
  v61 = (char *)v159[0];
  v62 = (float64x2_t *)v158[0];
  v63 = (float64x2_t)vdupq_lane_s64(v56, 0);
  v64 = (float64x2_t)vdupq_lane_s64(v57, 0);
  v65 = (const double *)v162;
  v165 = vld2q_f64(v65);
  v65 += 4;
  v167 = vld2q_f64(v65);
  v169.val[0] = vsubq_f64(v165.val[0], v63);
  v169.val[1] = vsubq_f64(v165.val[1], v64);
  v66 = (double *)v159[0];
  vst2q_f64(v66, v169);
  v66 += 4;
  v165.val[0] = vsubq_f64(v167.val[0], v63);
  v165.val[1] = vsubq_f64(v167.val[1], v64);
  vst2q_f64(v66, v165);
  *(_QWORD *)&v63.f64[0] = 0x100000001;
  *(_QWORD *)&v63.f64[1] = 0x100000001;
  *v62 = v63;
  v62[1] = v63;
  v67 = v160;
  v68 = v52;
  v70 = *(_QWORD *)&v145.f64[0];
  v69 = *(_QWORD *)&v146.f64[0];
  do
  {
    if (a6)
    {
      v71 = 0;
      v72 = *(_QWORD *)(v67 + 24 * v60 + 192);
      do
      {
        *(double *)(v72 + 8 * v71) = v68[v71];
        ++v71;
      }
      while (a6 > v71);
    }
    ++v60;
    v68 = (double *)((char *)v68 + v44);
  }
  while (v60 != 8);
  v73 = (float64x2_t)vdupq_lane_s64(v69, 0);
  v74 = (float64x2_t)vdupq_lane_s64(v70, 0);
  v75 = (const double *)v162;
  v166 = vld2q_f64(v75);
  v75 += 4;
  v168 = vld2q_f64(v75);
  v170.val[0] = vsubq_f64(v73, v166.val[0]);
  v170.val[1] = vsubq_f64(v74, v166.val[1]);
  v166.val[0] = vsubq_f64(v73, v168.val[0]);
  v76 = (double *)(v61 + 64);
  vst2q_f64(v76, v170);
  v166.val[1] = vsubq_f64(v74, v168.val[1]);
  v77 = (double *)(v61 + 96);
  vst2q_f64(v77, v166);
  *(_QWORD *)&v73.f64[0] = 0x100000001;
  *(_QWORD *)&v73.f64[1] = 0x100000001;
  v62[2] = v73;
  v62[3] = v73;
  if (*((_BYTE *)v48 + 154))
  {
    v78 = v55;
    v79 = 0;
    v80 = 16;
    do
    {
      v81 = v79 + 1;
      if (v79 == 3)
        v82 = 0;
      else
        v82 = (v79 + 1);
      sub_1D4D65484((uint64_t)v162, v79, v82, (uint64_t *)&v153);
      v150 = 0;
      sub_1D4D6A0B8(&v151, a6, &v150);
      if (a6)
      {
        v83 = 0;
        v84 = v151;
        v85 = v153;
        v86 = *(double **)&v147.f64[0];
        do
        {
          v87 = 0;
          v84[v83] = 0;
          v88 = 0.0;
          v89 = v86;
          do
          {
            v88 = v88 + *v89 * v85[v87];
            *(double *)&v84[v83] = v88;
            ++v87;
            v89 = (double *)((char *)v89 + v44);
          }
          while (v87 != 8);
          ++v83;
          ++v86;
        }
        while (v83 != a6);
      }
      sub_1D4D8C0BC((uint64_t)&v151, -1.0);
      v90 = v151;
      if (a6)
      {
        v91 = *(_QWORD **)(v160 + 24 * v80);
        v92 = v151;
        v93 = a6;
        do
        {
          v94 = *v92++;
          *v91++ = v94;
          --v93;
        }
        while (v93);
      }
      v95 = (double *)&v162[v79];
      v96 = (double *)&v162[v82];
      v97 = v95[1] - v96[1];
      v98 = v97 * v97 + (*v95 - *v96) * (*v95 - *v96);
      v99 = (double *)&v163[v82];
      *((double *)v159[0] + v80) = v98
                                 - ((*((double *)&v163[v79] + 1) - v99[1]) * (*((double *)&v163[v79] + 1) - v99[1])
                                  + (*(double *)&v163[v79] - *v99) * (*(double *)&v163[v79] - *v99));
      *((_DWORD *)v158[0] + v80) = 1;
      if (v90)
      {
        v152 = v90;
        operator delete(v90);
      }
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      ++v80;
      ++v79;
    }
    while (v81 != 4);
    v55 = v78;
    v52 = *(double **)&v147.f64[0];
    v100 = 20;
  }
  else
  {
    v100 = 16;
  }
  if (!*v48)
  {
    v101 = v160;
    v102 = v160 + 24 * v100;
    v103 = *(_QWORD **)v102;
    *v103 = 0x3FF0000000000000;
    v103[4] = 0x3FF0000000000000;
    v103[8] = 0x3FF0000000000000;
    v104 = v159[0];
    *((_QWORD *)v159[0] + v100) = 0;
    v105 = v158[0];
    v106 = *(_QWORD **)(v101 + 24 * (v100 | 1));
    *v106 = 0x3FF0000000000000;
    v106[4] = 0xBFF0000000000000;
    v104[v100 | 1] = *((_QWORD *)v48 + 17);
    v107 = *(_QWORD **)(v101 + 24 * (v100 | 2));
    *v107 = 0xBFF0000000000000;
    v107[4] = 0x3FF0000000000000;
    v104[v100 | 2] = *((_QWORD *)v48 + 17);
    v108 = *(_QWORD *)(v101 + 24 * (v100 | 3));
    *(_QWORD *)(v108 + 8) = 0x3FF0000000000000;
    *(_QWORD *)(v108 + 24) = 0x3FF0000000000000;
    v104[v100 | 3] = *((_QWORD *)v48 + 18);
    *(_OWORD *)&v105[v100] = xmmword_1D4DB1C90;
    v109 = *(_QWORD *)(v102 + 96);
    *(_QWORD *)(v109 + 8) = 0xBFF0000000000000;
    *(_QWORD *)(v109 + 24) = 0xBFF0000000000000;
    v104[v100 + 4] = *((_QWORD *)v48 + 18);
    v105[v100 + 4] = 1;
    v110 = v100 + 5;
    if (*((_BYTE *)v48 + 152))
    {
      v111 = *(_QWORD *)(v101 + 24 * v110);
      *(_QWORD *)(v111 + 16) = 0x3FF0000000000000;
      *(_QWORD *)(v111 + 48) = 0x3FF0000000000000;
      v104[v110] = 0;
      v112 = *(_QWORD *)(v101 + 24 * (v100 + 6));
      *(_QWORD *)(v112 + 40) = 0x3FF0000000000000;
      *(_QWORD *)(v112 + 56) = 0x3FF0000000000000;
      v104[v100 + 6] = 0;
      *(_QWORD *)&v105[v110] = 0;
      v100 += 7;
    }
    else
    {
      v100 += 5;
    }
  }
  v113 = *((unsigned __int8 *)v48 + 155);
  v114 = v137;
  if (v113)
  {
    sub_1D4D653EC((double *)v162, &v153);
    v150 = 0;
    sub_1D4D6A0B8(&v151, a6, &v150);
    v115 = v153;
    if (a6)
    {
      v116 = 0;
      v117 = v151;
      do
      {
        v118 = 0;
        v117[v116] = 0;
        v119 = 0.0;
        v120 = v52;
        do
        {
          v119 = v119 + *v120 * v115[v118];
          *(double *)&v117[v116] = v119;
          ++v118;
          v120 = (double *)((char *)v120 + v44);
        }
        while (v118 != 8);
        ++v116;
        ++v52;
      }
      while (v116 != a6);
    }
    sub_1D4D8C0BC((uint64_t)&v151, -0.5);
    v121 = v151;
    if (a6)
    {
      v122 = *(_QWORD **)(v160 + 24 * v100);
      v123 = v151;
      do
      {
        v124 = *v123++;
        *v122++ = v124;
        --a6;
      }
      while (a6);
    }
    v125 = vmulq_f64(vmlsq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vsubq_f64(v138, v138), vnegq_f64(vsubq_f64(v135, v135))), vsubq_f64(v134, v138), vsubq_f64(v135, v139)), vsubq_f64(v138, v134), vsubq_f64(v139, v135)), vsubq_f64(v134, v134), vsubq_f64(v139, v139)), v140);
    *((_QWORD *)v159[0] + v100) = *(_OWORD *)&vsubq_f64(v125, (float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1));
    *((_DWORD *)v158[0] + v100) = 1;
    if (v121)
    {
      v152 = v121;
      operator delete(v121);
    }
    if (v115)
      operator delete(v115);
  }
  v126 = v160;
  if (v161 != v160)
  {
    v127 = 0;
    do
    {
      v153 = 0;
      v154 = 0;
      v155 = 0;
      sub_1D4D60B28(&v153, *(const void **)(v126 + 24 * v127), *(_QWORD *)(v126 + 24 * v127 + 8), (uint64_t)(*(_QWORD *)(v126 + 24 * v127 + 8) - *(_QWORD *)(v126 + 24 * v127)) >> 3);
      v128 = v153;
      v129 = v154;
      v130 = v127 + v55;
      if (v154 == v153)
      {
        v128 = v154;
      }
      else
      {
        v131 = 0;
        do
        {
          v132 = v128[v131];
          if (fabs(v132) > 1.0e-12)
          {
            sparse_insert_entry_double(v54, v132, v127 + v55, v114 + v131);
            v128 = v153;
            v129 = v154;
          }
          ++v131;
        }
        while (v131 < v129 - v128);
      }
      v133 = v148;
      *(_QWORD *)(*v149 + 8 * v130) = *((_QWORD *)v159[0] + v127);
      *(_DWORD *)(*v133 + 4 * v130) = *((_DWORD *)v158[0] + v127);
      if (v128)
      {
        v154 = v128;
        operator delete(v128);
      }
      ++v127;
      v126 = v160;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v161 - v160) >> 3) > v127);
  }
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  if (v159[0])
  {
    v159[1] = v159[0];
    operator delete(v159[0]);
  }
  *(_QWORD *)&v163[0] = &v160;
  sub_1D4D60C20((void ***)v163);
  return 1;
}

void sub_1D4D65E08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)v1[27];
  if (v5)
  {
    v1[28] = v5;
    operator delete(v5);
  }
  if (v2)
    operator delete(v2);
  v6 = (void *)v1[35];
  if (v6)
  {
    v1[36] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[38];
  if (v7)
  {
    v1[39] = v7;
    operator delete(v7);
  }
  *(_QWORD *)(v3 - 176) = v1 + 41;
  sub_1D4D60C20((void ***)(v3 - 176));
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D65EDC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  int v5;

  v1 = *a1;
  if (*a1 == a1[1])
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v5 += !CGRectIsNull(*(CGRect *)(v1 + v3));
    ++v4;
    v1 = *a1;
    v3 += 32;
  }
  while (v4 < (a1[1] - *a1) >> 5);
  return (16 * v5);
}

BOOL sub_1D4D65F54(void *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, sparse_index a5, uint64_t a6, unint64_t a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v9;
  const void *v15;
  uint64_t v16;
  int v17;
  sparse_dimension matrix_number_of_rows;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v35;
  CGFloat *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t IsNull;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  double v49;
  double v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  sparse_index v54;
  uint64_t *v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  float64x2_t v65;
  int v66;
  void *v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[10];
  CGRect v71;

  v61 = a8;
  v62 = a3;
  v64 = a2;
  v70[8] = *MEMORY[0x1E0C80C00];
  v9 = a4[1];
  if (*a4 == v9)
    return 1;
  if (a6 != (v9 - *a4) >> 5
    || sparse_get_matrix_number_of_rows(a1) != (uint64_t)(v64[1] - *v64) >> 3
    || sparse_get_matrix_number_of_rows(a1) != (v62[1] - *v62) >> 2)
  {
    return 0;
  }
  v56 = a6;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v15 = (const void *)*a4;
  v16 = a4[1];
  v55 = a4;
  sub_1D4D61184(&v67, v15, v16, (v16 - (uint64_t)v15) >> 5);
  v17 = sub_1D4D65EDC((uint64_t *)&v67);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  if (a5 + v17 > matrix_number_of_rows)
    return 0;
  v54 = a5 + v17;
  v53 = (uint64_t)&v53;
  v20 = MEMORY[0x1E0C80A78](matrix_number_of_rows);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v27 = (char *)&v53 - v26;
  if (v56)
  {
    v28 = 0;
    v60 = a9;
    __asm { FMOV            V3.2D, #1.0 }
    v58 = vmulq_f64(vmlsq_lane_f64(_Q3, v24, v23, 0), v25);
    __asm { FMOV            V0.2D, #0.5 }
    v57 = _Q0;
    do
    {
      v35 = *v55;
      v63 = v28;
      v36 = (CGFloat *)(v35 + 32 * v28);
      v37 = *v36;
      v38 = v36[1];
      v39 = v36[2];
      v40 = v36[3];
      v71.origin.x = *v36;
      v71.origin.y = v38;
      v71.size.width = v39;
      v71.size.height = v40;
      IsNull = CGRectIsNull(v71);
      if ((IsNull & 1) != 0)
      {
        v42 = v63;
      }
      else
      {
        *(double *)v70 = v37;
        *(double *)&v70[1] = v38;
        *(double *)&v70[2] = v37 + v39;
        *(double *)&v70[3] = v38;
        *(double *)&v70[4] = v37 + v39;
        *(double *)&v70[5] = v38 + v40;
        *(double *)&v70[6] = v37;
        *(double *)&v70[7] = v38 + v40;
        v42 = v63;
        v43 = v63 * a7;
        v44 = 1;
        do
        {
          v45 = 0;
          v59 = v44;
          if ((v44 & 1) != 0)
            v46 = -1;
          else
            v46 = 1;
          v66 = v46;
          v65 = vmulq_f64(vmulq_n_f64(v58, (double)v46), v57);
          do
          {
            sub_1D4D65240(IsNull, (uint64_t)v22, (uint64_t)v27, (double *)&v70[2 * v45], v61, v60, v42);
            if (a7)
            {
              v47 = 0;
              v48 = 1;
              do
              {
                v49 = *(double *)&v22[8 * v47];
                if (fabs(v49) > 1.0e-12)
                  IsNull = sparse_insert_entry_double((sparse_matrix_double)a1, v49, a5, v47 + v43);
                v50 = *(double *)&v27[8 * v47];
                if (fabs(v50) > 1.0e-12)
                  IsNull = sparse_insert_entry_double((sparse_matrix_double)a1, v50, a5 + 1, v47 + v43);
                v47 = v48++;
              }
              while (v47 < a7);
            }
            *(float64x2_t *)(*v64 + 8 * a5) = vaddq_f64(v65, *(float64x2_t *)&v70[2 * v45]);
            v51 = *v62;
            v52 = v66;
            *(_DWORD *)(v51 + 4 * a5) = v66;
            *(_DWORD *)(v51 + 4 * (a5 + 1)) = v52;
            a5 += 2;
            ++v45;
            v42 = v63;
          }
          while (v45 != 4);
          v44 = 0;
        }
        while ((v59 & 1) != 0);
      }
      v28 = v42 + 1;
    }
    while (v28 != v56);
  }
  return a5 == v54;
}

void sub_1D4D66334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(_QWORD *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D66358(void *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  sparse_dimension matrix_number_of_rows;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  v16 = a8 == (uint64_t)(a5[1] - *a5) >> 3 && matrix_number_of_rows >= a8 + a6;
  if (!v16
    || matrix_number_of_rows != (uint64_t)(a2[1] - *a2) >> 3
    || matrix_number_of_rows != (uint64_t)(a3[1] - *a3) >> 2)
  {
    return 0;
  }
  if (a8)
  {
    v17 = 0;
    v18 = a8 * a4;
    v19 = 1;
    do
    {
      v20 = v17 + a6;
      sparse_insert_entry_double((sparse_matrix_double)a1, 1.0, v17 + a6, v17 + v18);
      *(_QWORD *)(*a2 + 8 * v20) = *(_QWORD *)(*a5 + 8 * v17);
      *(_DWORD *)(*a3 + 4 * v20) = 0;
      v17 = v19++;
    }
    while (v17 < a8);
  }
  return 1;
}

void sub_1D4D66444(void *A@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  sparse_index v25;
  sparse_dimension v26;
  sparse_m_double *v27;
  uint64_t v28;
  sparse_index v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  unint64_t j;
  sparse_dimension v38;
  uint64_t *v39;
  void *Aa;
  sparse_dimension v41;
  sparse_dimension v42;
  int64x2_t v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54[3];
  void *v55[3];
  sparse_m_double *v56;
  void *__p;
  void *v58;
  uint64_t v59;
  void *v60;
  _BYTE *v61;
  int64x2_t v62[2];
  int64x2_t v63;
  int64x2_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a4)
    puts("Working on L1 constraints.");
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1D4D63CD0((uint64_t)&v65, (uint64_t)&v63, matrix_number_of_rows, (double *)a2);
  v62[0] = v63;
  v62[1] = v64;
  v43 = v64;
  v45 = v63;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v63 = 0uLL;
  v64.i64[0] = 0;
  sub_1D4D64334(&v65, (void **)&v63, a2, matrix_number_of_rows, matrix_number_of_columns, (*(_DWORD *)a2 | *(unsigned __int8 *)(a2 + 153)) != 0);
  sub_1D4D64F48(matrix_number_of_rows, a3, (char **)&v60);
  v11 = 0;
  Aa = A;
  v41 = vaddvq_s64(vaddq_s64(v43, v45)) * matrix_number_of_columns;
  for (i = 1; i != 4; ++i)
    v11 += 2 * matrix_number_of_columns * v62[0].i64[i];
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56))
    v13 = 0;
  else
    v13 = 3 * matrix_number_of_columns;
  v44 = v13;
  v14 = 20;
  if (!*(_BYTE *)(a2 + 154))
    v14 = 16;
  v15 = *(_DWORD *)a2;
  v16 = 6;
  if (!*(_BYTE *)(a2 + 152))
    v16 = 4;
  if (v15)
    v17 = 0;
  else
    v17 = v16;
  v18 = v14 | *(unsigned __int8 *)(a2 + 155);
  if (v15)
    v19 = v18;
  else
    v19 = v18 + 1;
  v21 = v60;
  v20 = v61;
  v58 = 0;
  v59 = 0;
  __p = 0;
  sub_1D4D61184(&__p, *(const void **)(a3 + 144), *(_QWORD *)(a3 + 152), (uint64_t)(*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 5);
  v39 = a5;
  v22 = v19 + v17;
  v23 = ((v20 - v21) >> 2) * matrix_number_of_columns;
  v24 = (int)sub_1D4D65EDC((uint64_t *)&__p);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  v25 = v44 + v11;
  v46 = v24;
  v38 = *(_QWORD *)(a3 + 208) * matrix_number_of_columns;
  v26 = v44 + v11 + v22 * matrix_number_of_rows + v23 + v24 + v38;
  v27 = sparse_matrix_create_double(v26, v41);
  v56 = v27;
  v54[0] = 0;
  sub_1D4D6A0B8(v55, v26, v54);
  v42 = v26;
  sub_1D4D6A638(v54, v26);
  sub_1D4D6474C(v27, (uint64_t *)v55, v54, Aa, (double *)a2, a3);
  if (a4)
    printf("added %ld derivative constraints.\n", v11);
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56))
  {
    v25 = v11;
  }
  else
  {
    sub_1D4D64DB0(v27, v55, v54, v11, matrix_number_of_columns, v28, a3);
    if (a4)
      printf("added %ld initial condition constraints.\n", v44);
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  sub_1D4D6A6AC(&v51, v60, (uint64_t)v61, (v61 - (_BYTE *)v60) >> 2);
  sub_1D4D65168(v27, v55, v54, (uint64_t *)&v51, v25, matrix_number_of_columns);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (a4)
    printf("added %ld invalid-frame constraints.\n", v23);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  sub_1D4D61184(&v48, *(const void **)(a3 + 144), *(_QWORD *)(a3 + 152), (uint64_t)(*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 5);
  v29 = v25 + v23;
  sub_1D4D65F54(v27, v55, (uint64_t *)v54, (uint64_t *)&v48, v29, matrix_number_of_rows, matrix_number_of_columns, (_DWORD *)a2, a3);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (a4)
    printf("added %ld salient-rect constraints.\n", v46);
  v31 = v29 + v46;
  v32 = *(_QWORD **)(a3 + 192);
  if (v32 != (_QWORD *)(a3 + 200))
  {
    do
    {
      sub_1D4D66358(v27, v55, v54, v32[4], v32 + 5, v31, v30, matrix_number_of_columns);
      v33 = (_QWORD *)v32[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v32[2];
          v35 = *v34 == (_QWORD)v32;
          v32 = v34;
        }
        while (!v35);
      }
      v31 += matrix_number_of_columns;
      v32 = v34;
    }
    while (v34 != (_QWORD *)(a3 + 200));
  }
  if ((a4 & 1) != 0)
    printf("added %ld path constraints.\n", v38);
  if (matrix_number_of_rows)
  {
    v36 = 0;
    for (j = 0; j != matrix_number_of_rows; ++j)
    {
      sub_1D4D654F8(v27, v55, v54, v31, v36, matrix_number_of_columns, (int *)a2, a3, j);
      if ((_BYTE)j == 0xFF)
        sparse_commit(v27);
      v31 += v22;
      v36 += matrix_number_of_columns;
    }
  }
  if ((a4 & 1) != 0)
  {
    printf("added %ld x %ld per-frame constraints.\n", matrix_number_of_rows, v22);
    printf("-> total of %ld constraints (expected %ld)\n", v31, v42);
  }
  sub_1D4D66A44((uint64_t *)&v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)&v65, (uint64_t)&v63, v39);
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63.i64[0])
  {
    v63.i64[1] = v63.i64[0];
    operator delete((void *)v63.i64[0]);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_1D4D66978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a36)
    operator delete(a36);
  v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(_QWORD *)(v37 - 168) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v37 - 136);
  if (v40)
  {
    *(_QWORD *)(v37 - 128) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D66A44(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;

  v12 = operator new();
  v13 = *a1;
  *(_OWORD *)v20 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v18 = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)v16 = *(_OWORD *)a4;
  v17 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_OWORD *)__p = *(_OWORD *)a5;
  v15 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_1D4D852F0(v12, v13, v20, v18, v16, __p);
  *a6 = v12;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_1D4D66B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a17)
    operator delete(a17);
  if (a21)
    operator delete(a21);
  MEMORY[0x1D826897C](v22, 0x10B0C40BD2A282ELL);
  _Unwind_Resume(a1);
}

void sub_1D4D66BD0(unint64_t a1@<X0>, unint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  unint64_t v21;
  double *v22;
  double v23;
  double *v24;
  double *v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  _OWORD v29[2];
  void *__p[2];
  int64x2_t v31;
  _QWORD v32[4];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v32, (uint64_t)__p, a1, a3);
  v9 = 0;
  v10 = 0;
  v29[0] = *(_OWORD *)__p;
  v29[1] = v31;
  v11 = vaddvq_s64(vaddq_s64(v31, *(int64x2_t *)__p));
  do
  {
    v10 += *(_QWORD *)((char *)v29 + v9 * 8);
    v32[++v9] = v10;
  }
  while (v9 != 3);
  __p[0] = 0;
  sub_1D4D6A0B8(a5, v11 * a2, __p);
  v12 = 8 * a2;
  for (i = 1; i != 4; ++i)
  {
    if (i == 3)
    {
      v14 = *((_QWORD *)a3 + 10);
    }
    else if (i == 2)
    {
      v14 = *((_QWORD *)a3 + 9);
    }
    else
    {
      v14 = 0;
      if (i == 1)
        v14 = *((_QWORD *)a3 + 8);
    }
    v15 = *(_DWORD *)a3;
    v28 = v14;
    sub_1D4D6A0B8(__p, a2, &v28);
    v16 = (double *)__p[0];
    if (!v15)
      *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
    v17 = *((_QWORD *)v29 + i);
    if (v17)
    {
      v18 = 0;
      v19 = *(_QWORD *)(a4 + 24);
      v20 = (double *)__p[1];
      v21 = ((char *)__p[1] - (char *)v16) >> 3;
      if (v21 <= 1)
        v21 = 1;
      v22 = (double *)(*a5 + v12 * v32[i]);
      do
      {
        if (v20 != v16)
        {
          v23 = *(double *)(v19 + 8 * v18);
          v24 = v16;
          v25 = v22;
          v26 = v21;
          do
          {
            v27 = *v24++;
            *v25++ = v23 * v27;
            --v26;
          }
          while (v26);
        }
        ++v18;
        v22 = (double *)((char *)v22 + v12);
      }
      while (v17 > v18);
    }
    if (v16)
    {
      __p[1] = v16;
      operator delete(v16);
    }
  }
}

void sub_1D4D66DB8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

sparse_matrix_double sub_1D4D66DDC(uint64_t a1, unint64_t a2, unint64_t a3, double *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  sparse_dimension v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  int v18;
  double *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  unint64_t v24;
  double *v25;
  double v26;
  double *v27;
  double *v28;
  unint64_t v29;
  double v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double *v39;
  unint64_t v41;
  double *v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  sparse_matrix_double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  sparse_index v57;
  double v58;
  double v59;
  void *v62[3];
  uint64_t v63;
  _OWORD v64[2];
  void *__p[2];
  int64x2_t v66;
  _QWORD v67[6];

  v67[4] = *MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v67, (uint64_t)__p, a2, a4);
  v9 = 0;
  v10 = 0;
  v64[0] = *(_OWORD *)__p;
  v64[1] = v66;
  v11 = vaddvq_s64(vaddq_s64(v66, *(int64x2_t *)__p));
  v67[0] = 0;
  do
  {
    v10 += *(_QWORD *)((char *)v64 + v9 * 8);
    v67[++v9] = v10;
  }
  while (v9 != 3);
  v12 = v11 * a3;
  sub_1D4D6455C(a1, v11 * a3);
  v13 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v13)
  {
    v14 = v13 >> 3;
    if (v14 <= 1)
      v14 = 1;
    bzero(*(void **)a1, 8 * v14);
  }
  v15 = 8 * a3;
  for (i = 1; i != 4; ++i)
  {
    if (i == 3)
    {
      v17 = (void *)*((_QWORD *)a4 + 10);
    }
    else if (i == 2)
    {
      v17 = (void *)*((_QWORD *)a4 + 9);
    }
    else
    {
      v17 = 0;
      if (i == 1)
        v17 = (void *)*((_QWORD *)a4 + 8);
    }
    v18 = *(_DWORD *)a4;
    v62[0] = v17;
    sub_1D4D6A0B8(__p, a3, v62);
    v19 = (double *)__p[0];
    if (!v18)
      *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
    v20 = *((_QWORD *)v64 + i);
    if (v20)
    {
      v21 = 0;
      v22 = a5[3];
      v23 = (double *)__p[1];
      v24 = ((char *)__p[1] - (char *)v19) >> 3;
      if (v24 <= 1)
        v24 = 1;
      v25 = (double *)(*(_QWORD *)a1 + v15 * v67[i]);
      do
      {
        if (v23 != v19)
        {
          v26 = *(double *)(v22 + 8 * v21);
          v27 = v19;
          v28 = v25;
          v29 = v24;
          do
          {
            v30 = *v27++;
            *v28++ = v26 * v30;
            --v29;
          }
          while (v29);
        }
        ++v21;
        v25 = (double *)((char *)v25 + v15);
      }
      while (v20 > v21);
    }
    if (v19)
    {
      __p[1] = v19;
      operator delete(v19);
    }
  }
  v31 = *(_DWORD *)a4;
  v62[0] = *((void **)a4 + 6);
  sub_1D4D6A0B8(__p, a3, v62);
  if (!v31)
    *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
  v32 = *(_DWORD *)a4;
  if (a5[15] == a5[16])
    v63 = 0;
  else
    v63 = *((_QWORD *)a4 + 7);
  sub_1D4D6A0B8(v62, a3, &v63);
  if (!v32)
    *((double *)v62[0] + 8) = *((double *)v62[0] + 8) * 0.01;
  v33 = a5[15];
  if (v33 != a5[16] && a2)
  {
    v34 = 0;
    v35 = (double *)v62[0];
    v36 = a5[3];
    v37 = *(double **)a1;
    do
    {
      v38 = v33 + 24 * v34;
      v39 = *(double **)v38;
      if (*(_QWORD *)v38 != *(_QWORD *)(v38 + 8) && a3 != 0)
      {
        v41 = a3;
        v42 = v37;
        v43 = v35;
        do
        {
          v44 = *v43++;
          v45 = v44;
          v46 = *v39++;
          *v42 = *v42 + -(v45 * v46) * *(double *)(v36 + 8 * v34);
          ++v42;
          --v41;
        }
        while (v41);
      }
      ++v34;
      v37 = (double *)((char *)v37 + v15);
    }
    while (v34 != a2);
  }
  v47 = sparse_matrix_create_double(v12, v12);
  sparse_set_matrix_property(v47, SPARSE_UPPER_SYMMETRIC);
  if (a2)
  {
    v48 = 0;
    v49 = 0;
    do
    {
      if (a3)
      {
        v50 = 0;
        do
        {
          v51 = *((double *)__p[0] + v50);
          v52 = a5[12];
          if (v52 != a5[13])
            v51 = v51 * *(double *)(*(_QWORD *)(v52 + 24 * v49) + 8 * v50);
          v53 = v51 + 0.0;
          v54 = a5[15];
          if (v54 != a5[16] && *(_QWORD *)(v54 + 24 * v49) != *(_QWORD *)(v54 + 24 * v49 + 8))
            v53 = v53 + *((double *)v62[0] + v50);
          if (!*(_DWORD *)a4)
          {
            v55 = a4[15];
            if ((v50 & 0x7FFFFFFB) != 0)
              v55 = -0.0;
            v53 = v53 + v55;
            if ((v50 & 0x7FFFFFFD) == 1)
              v53 = v53 + a4[16];
          }
          if (v53 != 0.0)
            sparse_insert_entry_double(v47, v53 * *(double *)(a5[3] + 8 * v49), v48 + v50, v48 + v50);
          ++v50;
        }
        while (a3 != v50);
      }
      ++v49;
      v48 += a3;
    }
    while (v49 != a2);
    v56 = 0;
    v57 = 3;
    do
    {
      if (!*(_DWORD *)a4)
      {
        v58 = a4[15];
        if (v58 != 0.0)
        {
          sparse_insert_entry_double(v47, -(v58 * *(double *)(a5[3] + 8 * v56)), v57 - 3, v57 + 1);
          sparse_insert_entry_double(v47, -(a4[15] * *(double *)(a5[3] + 8 * v56)), v57 + 1, v57 - 3);
        }
        v59 = a4[16];
        if (v59 != 0.0)
        {
          sparse_insert_entry_double(v47, v59 * *(double *)(a5[3] + 8 * v56), v57 - 2, v57);
          sparse_insert_entry_double(v47, a4[16] * *(double *)(a5[3] + 8 * v56), v57, v57 - 2);
        }
      }
      ++v56;
      v57 += a3;
    }
    while (a2 != v56);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v47;
}

void sub_1D4D672D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D67314(void *A@<X0>, double *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[3];
  _QWORD *v17;

  if (a4)
    printf("Solving l1 LP with w1=%f, w2=%f, w3=%f\n", a2[8], a2[9], a2[10]);
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1D4D66444(A, (uint64_t)a2, a3, 0, (uint64_t *)&v17);
  sub_1D4D66BD0(matrix_number_of_rows, matrix_number_of_columns, a2, a3, __p);
  v11 = operator new();
  v12 = (uint64_t)v17;
  v17 = 0;
  v15 = (_QWORD *)v12;
  sub_1D4D86668(v11, &v15, __p);
  *a5 = v11;
  v13 = v15;
  v15 = 0;
  if (v13)
    sub_1D4D6A138((uint64_t)&v15, v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v14 = v17;
  v17 = 0;
  if (v14)
    sub_1D4D6A138((uint64_t)&v17, v14);
}

void sub_1D4D6742C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void *__p, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;

  v18 = a12;
  a12 = 0;
  if (v18)
    sub_1D4D6A138((uint64_t)&a12, v18);
  MEMORY[0x1D826897C](v16, 0x10A1C404B04B953);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = a16;
  a16 = 0;
  if (v19)
    sub_1D4D6A138((uint64_t)&a16, v19);
  _Unwind_Resume(a1);
}

void sub_1D4D67498(void *A@<X0>, double *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  sparse_matrix_double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD *v20;

  if (a4)
    printf("Solving l1 QP with q0=%f, qt=%f, w1=%f, w2=%f, w3=%f, cropfraction=%f %f\n", a2[6], a2[7], a2[8], a2[9], a2[10], a2[4], a2[5]);
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1D4D66444(A, (uint64_t)a2, (uint64_t)a3, 0, (uint64_t *)&v20);
  __p = 0;
  v18 = 0;
  v19 = 0;
  v11 = sub_1D4D66DDC((uint64_t)&__p, matrix_number_of_rows, matrix_number_of_columns, a2, a3);
  v12 = operator new();
  v13 = (uint64_t)v20;
  v20 = 0;
  v16 = (_QWORD *)v13;
  sub_1D4D86B78(v12, &v16, v11, &__p);
  *a5 = v12;
  v14 = v16;
  v16 = 0;
  if (v14)
    sub_1D4D6A138((uint64_t)&v16, v14);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    sub_1D4D6A138((uint64_t)&v20, v15);
}

void sub_1D4D675C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;

  v21 = a16;
  a16 = 0;
  if (v21)
    sub_1D4D6A138((uint64_t)&a16, v21);
  MEMORY[0x1D826897C](v18, 0x10A1C40F3C75648);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  v22 = *(_QWORD **)(v19 - 56);
  *(_QWORD *)(v19 - 56) = 0;
  if (v22)
    sub_1D4D6A138(v19 - 56, v22);
  _Unwind_Resume(a1);
}

double sub_1D4D6762C(uint64_t a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  double v12;
  double v13;
  int v14;
  double result;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 24) = a3;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 48) = xmmword_1D4DB1CA0;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = xmmword_1D4DB1CB0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 104) = xmmword_1D4DB1CC0;
  v12 = 0.0;
  v13 = 1.0;
  if (a2)
    v14 = 0;
  else
    v14 = 10;
  if (a2)
    v13 = 0.0;
  *(double *)(a1 + 120) = v13;
  *(double *)(a1 + 128) = (double)v14;
  if (!a2)
    v12 = 0.1;
  *(double *)(a1 + 136) = v12;
  *(double *)(a1 + 144) = v12;
  *(_QWORD *)&result = 16842752;
  *(_DWORD *)(a1 + 152) = 16842752;
  return result;
}

uint64_t sub_1D4D676B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = 0;
  v10 = 0;
  sub_1D4D69E50((_QWORD *)a1, (uint64_t)v7);
  v2 = v9;
  sub_1D4D69E50((_QWORD *)(a1 + 32), (uint64_t)v9);
  if (v10 == v9)
  {
    v3 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v3 = 5;
    v2 = v10;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v3))(v2);
LABEL_6:
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_10;
  }
  if (v8)
  {
    v5 = 5;
LABEL_10:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1D4DB1CD0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_1D4D677A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D4D5DF98(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D677B8(uint64_t a1, uint64_t a2)
{
  CMTime v4;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (a1 != a2)
    sub_1D4D6A724((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  CMTimeMake(&v4, 20, 600);
  sub_1D4D67904((_QWORD *)a1, 0, &v4);
  return a1;
}

void sub_1D4D67870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a4);
  v6 = v5;
  sub_1D4D61048(v6, *(_QWORD **)(v4 + 200));
  v8 = *(void **)(v4 + 168);
  if (v8)
  {
    *(_QWORD *)(v4 + 176) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v4 + 144);
  if (v9)
  {
    *(_QWORD *)(v4 + 152) = v9;
    operator delete(v9);
  }
  sub_1D4D60C20((void ***)va);
  sub_1D4D60C20((void ***)va);
  v10 = *(void **)(v4 + 72);
  if (v10)
  {
    *(_QWORD *)(v4 + 80) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v4 + 48);
  if (v11)
  {
    *(_QWORD *)(v4 + 56) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v4 + 24);
  if (v12)
  {
    *(_QWORD *)(v4 + 32) = v12;
    operator delete(v12);
  }
  v13 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_1D4D67904(_QWORD *a1, int a2, CMTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  double Seconds;
  double v18;
  uint64_t v19;
  CMTimeEpoch v20;
  Float64 v21;
  _QWORD *v22;
  CMTime v23;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  void *v30[3];

  v3 = a1[1];
  v4 = v3 - *a1;
  if (v3 != *a1)
  {
    v8 = v4 / 24;
    v9 = (_QWORD **)(a1 + 3);
    sub_1D4D6455C((uint64_t)(a1 + 3), v4 / 24);
    if (v4 == 24)
    {
      **v9 = 0x3FF0000000000000;
    }
    else
    {
      v10 = v8 - 1;
      sub_1D4D6A85C(v30, v8 - 1);
      v11 = a2 & ~(a2 >> 31);
      if (v8 - 1 > v11)
      {
        v12 = 24 * v11;
        v13 = ~v11 + v8;
        do
        {
          v14 = *a1 + v12;
          v29 = *(CMTime *)v14;
          v28 = *(CMTime *)(v14 + 24);
          lhs = v28;
          rhs = v29;
          CMTimeSubtract(&v27, &lhs, &rhs);
          v15 = (char *)v30[0] + v12;
          v16 = *(_OWORD *)&v27.value;
          *((_QWORD *)v15 + 2) = v27.epoch;
          *(_OWORD *)v15 = v16;
          v12 += 24;
          --v13;
        }
        while (v13);
      }
      time = *a3;
      Seconds = CMTimeGetSeconds(&time);
      if (v10 <= v11)
      {
        v22 = *v9;
      }
      else
      {
        v18 = Seconds;
        v19 = 24 * v11;
        do
        {
          v20 = *(_QWORD *)((char *)v30[0] + v19 + 16);
          *(_OWORD *)&v23.value = *(_OWORD *)((char *)v30[0] + v19);
          v23.epoch = v20;
          v21 = CMTimeGetSeconds(&v23);
          v22 = *v9;
          *(Float64 *)&(*v9)[v11++] = v21 / v18;
          v19 += 24;
        }
        while (v10 != v11);
      }
      v22[v10] = v22[v8 - 2];
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
    }
  }
}

void sub_1D4D67AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D67AF0(int a1, unint64_t a2, uint64_t a3)
{
  if (a1 >= a2 && (a3 == -1 || a3 + a2 > a1))
    return (a1 - a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1D4D67B20(uint64_t a1, uint64_t *a2, signed int a3, int a4)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  _BOOL4 v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  CMTime v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v8 = (uint64_t *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v48 = a1 + 144;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  v9 = (uint64_t **)(a1 + 192);
  v10 = a1 + 24;
  v49 = (void **)(a1 + 72);
  v11 = (uint64_t *)(a1 + 120);
  v47 = a1 + 168;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v12 = (char *)a2[6];
  v13 = a2[7];
  if (v12 != (char *)v13)
  {
    if (a3)
    {
      puts("warning: asked to copy l1StabParams initial condition to a different range; ignoring.");
    }
    else if ((uint64_t *)a1 != a2)
    {
      sub_1D4D6A8F4((char *)(a1 + 48), v12, v13, (v13 - (uint64_t)v12) >> 3);
    }
  }
  sub_1D4D6805C(a2 + 3, a3, a4, &v51);
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(a1 + 32) = v14;
    operator delete(v14);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = v51;
  *(_QWORD *)(a1 + 40) = v52;
  sub_1D4D5B368(a2, a3, a4, &v51);
  v15 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v51;
  *(_QWORD *)(a1 + 16) = v52;
  CMTimeMake(&v50, 20, 600);
  sub_1D4D67904((_QWORD *)a1, 0, &v50);
  sub_1D4D680C0(a2 + 12, a3, a4, &v51);
  sub_1D4D6ABA8(v8);
  *(_OWORD *)(a1 + 96) = v51;
  *(_QWORD *)(a1 + 112) = v52;
  v52 = 0;
  v51 = 0uLL;
  v53 = &v51;
  sub_1D4D60C20((void ***)&v53);
  sub_1D4D680C0(a2 + 15, a3, a4, &v51);
  sub_1D4D6ABA8(v11);
  *(_OWORD *)(a1 + 120) = v51;
  *(_QWORD *)(a1 + 136) = v52;
  v52 = 0;
  v51 = 0uLL;
  v53 = &v51;
  sub_1D4D60C20((void ***)&v53);
  sub_1D4D68134(a2 + 18, a3, a4, &v51);
  v16 = *(void **)v48;
  if (*(_QWORD *)v48)
  {
    *(_QWORD *)(a1 + 152) = v16;
    operator delete(v16);
    *(_QWORD *)v48 = 0;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 16) = 0;
  }
  *(_OWORD *)(a1 + 144) = v51;
  *(_QWORD *)(a1 + 160) = v52;
  sub_1D4D6805C(a2 + 21, a3, a4, &v51);
  v17 = *(void **)v47;
  if (*(_QWORD *)v47)
  {
    *(_QWORD *)(a1 + 176) = v17;
    operator delete(v17);
    *(_QWORD *)v47 = 0;
    *(_QWORD *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = 0;
  }
  *(_OWORD *)(a1 + 168) = v51;
  *(_QWORD *)(a1 + 184) = v52;
  v19 = a2[9];
  v18 = a2[10];
  if (v18 != v19)
  {
    v20 = 0;
    do
    {
      v21 = *(int *)(v19 + 4 * v20);
      v23 = a4 == -1 || a4 + (uint64_t)a3 > v21;
      v24 = v21 < a3 || !v23;
      if (!v24)
      {
        v25 = v21 - a3;
        if ((int)v21 - a3 >= 0)
        {
          v27 = *(char **)(a1 + 80);
          v26 = *(_QWORD *)(a1 + 88);
          if ((unint64_t)v27 >= v26)
          {
            v29 = (char *)*v49;
            v30 = (v27 - (_BYTE *)*v49) >> 2;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62)
              sub_1D4D5DFA8();
            v32 = v26 - (_QWORD)v29;
            if (v32 >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)sub_1D4D5EA14(a1 + 88, v33);
              v29 = *(char **)(a1 + 72);
              v27 = *(char **)(a1 + 80);
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v30];
            *(_DWORD *)v35 = v25;
            v28 = v35 + 4;
            while (v27 != v29)
            {
              v36 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            *(_QWORD *)(a1 + 72) = v35;
            *(_QWORD *)(a1 + 80) = v28;
            *(_QWORD *)(a1 + 88) = &v34[4 * v33];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_DWORD *)v27 = v25;
            v28 = v27 + 4;
          }
          *(_QWORD *)(a1 + 80) = v28;
          v19 = a2[9];
          v18 = a2[10];
        }
      }
      ++v20;
    }
    while (v20 < (v18 - v19) >> 2);
  }
  v37 = (uint64_t *)a2[24];
  if (v37 != a2 + 25)
  {
    do
    {
      v38 = v37[4];
      v40 = a4 == -1 || a4 + (uint64_t)a3 > (unint64_t)(int)v38;
      if ((int)v38 >= (unint64_t)a3 && v40)
      {
        v42 = (v38 - a3);
        if ((int)v42 >= 0)
        {
          *(_QWORD *)&v51 = v42;
          v53 = &v51;
          v43 = sub_1D4D6057C(v9, (unint64_t *)&v51, (uint64_t)&unk_1D4DB1C24, (uint64_t **)&v53);
          if (v37 != v43)
            sub_1D4D6A8F4((char *)v43 + 40, (char *)v37[5], v37[6], (v37[6] - v37[5]) >> 3);
        }
      }
      v44 = (uint64_t *)v37[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (uint64_t *)v37[2];
          v24 = *v45 == (_QWORD)v37;
          v37 = v45;
        }
        while (!v24);
      }
      v37 = v45;
    }
    while (v45 != a2 + 25);
  }
  return a1;
}

void sub_1D4D67F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  sub_1D4D61048(v22, *a10);
  v24 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v21 + 176) = v24;
    operator delete(v24);
  }
  v25 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v21 + 152) = v25;
    operator delete(v25);
  }
  a21 = a11;
  sub_1D4D60C20(&a21);
  a21 = a12;
  sub_1D4D60C20(&a21);
  v26 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v21 + 80) = v26;
    operator delete(v26);
  }
  v27 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v21 + 56) = v27;
    operator delete(v27);
  }
  v28 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v21 + 32) = v28;
    operator delete(v28);
  }
  v29 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4D6805C@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = (unint64_t)(v5 - v4) >> 3, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= (int)v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D6A9FC(a4, (const void *)(v4 + 8 * a2), v4 + 8 * a2 + 8 * v8, v8);
  }
  return result;
}

uint64_t *sub_1D4D680C0@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = -1431655765 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D6AA74(a4, v4 + 24 * a2, v4 + 24 * a2 + 24 * v8, v8);
  }
  return result;
}

uint64_t *sub_1D4D68134@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = (unint64_t)(v5 - v4) >> 5, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= (int)v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D6ABE0(a4, (const void *)(v4 + 32 * a2), v4 + 32 * a2 + 32 * v8, v8);
  }
  return result;
}

char *sub_1D4D6819C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *result;
  char *v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  BOOL v12;
  unint64_t v13;
  CMTime v14;
  unint64_t *v15;

  sub_1D4D6AC58(a1 + 24, *(_QWORD *)(a1 + 32), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  sub_1D4D6AF28(a1, *(_QWORD *)(a1 + 8), *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v6 = -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3)
     + 1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
     - 1;
  CMTimeMake(&v14, 20, 600);
  sub_1D4D67904((_QWORD *)a1, v6, &v14);
  sub_1D4D6B29C(a1 + 72, *(_QWORD *)(a1 + 80), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  sub_1D4D6B56C((uint64_t *)(a1 + 96), *(__n128 **)(a1 + 104), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  sub_1D4D6B56C((uint64_t *)(a1 + 120), *(__n128 **)(a1 + 128), *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
  sub_1D4D6BBC0(a1 + 144, *(_QWORD *)(a1 + 152), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 5);
  result = sub_1D4D6AC58(a1 + 168, *(_QWORD *)(a1 + 176), *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  v8 = *(char **)(a2 + 192);
  if (v8 != (char *)(a2 + 200))
  {
    v9 = (uint64_t **)(a1 + 192);
    do
    {
      v13 = *((_QWORD *)v8 + 4) + a3;
      v15 = &v13;
      result = (char *)sub_1D4D6057C(v9, &v13, (uint64_t)&unk_1D4DB1C24, (uint64_t **)&v15);
      if (v8 != result)
        result = sub_1D4D6A8F4(result + 40, *((char **)v8 + 5), *((_QWORD *)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 3);
      v10 = (char *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v8 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != (char *)(a2 + 200));
  }
  return result;
}

sparse_m_double *sub_1D4D68380(sparse_m_double *A, _QWORD *a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  sparse_m_double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  sparse_index i;
  double v14;
  unint64_t v15;
  sparse_index j;
  double v17;
  unint64_t v18;
  sparse_index k;
  double v20;
  unint64_t v21;

  v8 = A;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (a2[1] == *a2)
    v10 = 0;
  else
    v10 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 3;
  if (a4)
    v11 = a3;
  else
    v11 = 0;
  if (a4)
    v9 = a4;
  v21 = v9;
  if (v9)
  {
    v12 = 0;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v14 = *(double *)(*(_QWORD *)(*a2 + 24 * (v12 + v11)) + 8 * i);
          if (v14 != 0.0)
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v14, v12 + a5, i);
        }
      }
      ++v12;
    }
    while (v12 != v21);
  }
  if (a5)
  {
    v15 = 1;
    do
    {
      if (v10)
      {
        for (j = 0; j != v10; ++j)
        {
          v17 = *(double *)(*(_QWORD *)(*a2 + 24 * (v15 + v11)) + 8 * j);
          if (v17 != 0.0)
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v17, a5 - v15, j);
        }
      }
      ++v15;
    }
    while (v15 <= a5);
  }
  if (a6)
  {
    v18 = 1;
    do
    {
      if (v10)
      {
        for (k = 0; k != v10; ++k)
        {
          v20 = *(double *)(*(_QWORD *)(*a2 + 24 * (v21 + v11 + ~v18)) + 8 * k);
          if (v20 != 0.0)
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v20, a6 + v21 - 1 + v18, k);
        }
      }
      ++v18;
    }
    while (v18 <= a6);
  }
  return A;
}

uint64_t sub_1D4D68544(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
    sub_1D4D67498(a1, (double *)a2, a3, a5, &v13);
  else
    sub_1D4D67314(a1, (double *)a2, (uint64_t)a3, a5, &v13);
  v11 = v13;
  sub_1D4D86FB4(v13, 0x64uLL, a5, (unsigned int *)v10, a4, *(double *)(a2 + 88));
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v10;
}

void sub_1D4D6864C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

__int128 *sub_1D4D68670@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, _DWORD *a4@<X2>)
{
  double v4;

  *a4 = 0;
  v4 = *((double *)a1 + 11);
  if (*((double *)a1 + 4) >= v4 && *((double *)a1 + 5) >= v4)
    return (__int128 *)sub_1D4D6869C(a1, a2, a3);
  *a4 = 3;
  *a3 = 0;
  return a1;
}

_QWORD *sub_1D4D6869C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = a1[7];
  v29 = a1[6];
  v30 = v7;
  v8 = a1[9];
  v31 = a1[8];
  v32 = v8;
  v9 = a1[3];
  v25 = a1[2];
  v26 = v9;
  v10 = a1[5];
  v27 = a1[4];
  v28 = v10;
  v11 = a1[1];
  v23 = *a1;
  v24 = v11;
  sub_1D4D62E6C((uint64_t)v33, a2);
  sub_1D4D62E6C((uint64_t)v35, a2 + 32);
  v37[0] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(a2 + 73);
  sub_1D4D6BEA0(v6, &v23, (uint64_t)v33);
  *a3 = v6;
  v19 = v36;
  if (v36 == v35)
  {
    v20 = 4;
    v19 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v19 + 8 * v20))(v19, v12, v13, v14, v15, v16, v17, v18, v23, *((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, *((_QWORD *)&v26 + 1), v27, *((_QWORD *)&v27 + 1), v28,
    *((_QWORD *)&v28 + 1));
LABEL_6:
  result = v34;
  if (v34 == v33)
  {
    v22 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

void sub_1D4D687EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1D4D5B4E0((_QWORD *)(v2 - 152));
  MEMORY[0x1D826897C](v1, 0x10B0C408AFB0367);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D68858(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 3);
  sub_1D4D6B56C((uint64_t *)(a1 + 272), *(__n128 **)(a1 + 280), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  sub_1D4D6819C(a1 + 296, a3, v9);
  sub_1D4D62E6C((uint64_t)v12, a4);
  sub_1D4D68998(a1, 0, (uint64_t)v12, a5);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_1D4D68958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D4D68998(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[3];
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 280) - (_QWORD)v8;
  if (v9)
    v10 = (uint64_t)(v8[1] - *v8) >> 3;
  else
    v10 = 0;
  if (*a4)
    return;
  v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (a2)
  {
    if (v11 <= 2)
      goto LABEL_18;
  }
  else
  {
    v12 = v11 < 3 || *(_BYTE *)(a1 + 224) == 0;
    if (v12)
      return;
  }
  v13 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1 && v10 != 9)
  {
    printf("Require k=9 for l1Model_logHomography, got k=%zu.\n");
LABEL_18:
    v14 = 3;
LABEL_19:
    *a4 = v14;
    return;
  }
  if (v13 == 1 && v10 != 4)
  {
    printf("Require k=4 for l1Model_logHomographyScale, got k=%zu.\n");
    goto LABEL_18;
  }
  if (v13 == 1 && v11 != (uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3)
    goto LABEL_18;
  v15 = *(double **)(a1 + 320);
  v16 = *(double **)(a1 + 328);
  if (v11 != v16 - v15)
    goto LABEL_18;
  if (v16 != v15)
  {
    if (v11 <= 1)
      v17 = 1;
    else
      v17 = v11;
    while (*v15 > 0.0)
    {
      ++v15;
      if (!--v17)
        goto LABEL_30;
    }
    goto LABEL_18;
  }
LABEL_30:
  v18 = *(_QWORD **)(a1 + 488);
  v19 = (_QWORD *)(a1 + 496);
  if (v18 != (_QWORD *)(a1 + 496))
  {
    while (1)
    {
      __p = 0;
      v43 = 0;
      v44 = 0;
      sub_1D4D60B28(&__p, (const void *)v18[5], v18[6], (uint64_t)(v18[6] - v18[5]) >> 3);
      v20 = sub_1D4D69D60((const double **)&__p, v18[4], 9uLL, a1, (uint64_t *)(a1 + 296));
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if ((v20 & 1) == 0)
        break;
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v12 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v12);
      }
      v18 = v22;
      if (v22 == v19)
        goto LABEL_40;
    }
    v14 = 7;
    goto LABEL_19;
  }
LABEL_40:
  sub_1D4D63D54(&v45, v11, (double *)a1);
  v23 = *(_QWORD *)(a1 + 256) + 8;
  *(_QWORD *)&v38 = 0;
  sub_1D4D69EE0(v23, v45.i64[0] * v10, &v38);
  v24 = *(_QWORD *)(a1 + 256) + 32;
  *(_QWORD *)&v38 = 0;
  sub_1D4D69EE0(v24, v45.i64[1] * v10, &v38);
  v25 = *(_QWORD *)(a1 + 256) + 56;
  *(_QWORD *)&v38 = 0;
  sub_1D4D69EE0(v25, v46 * v10, &v38);
  v26 = *(_QWORD *)(a1 + 256) + 80;
  *(_QWORD *)&v38 = 0;
  sub_1D4D69EE0(v26, v47 * v10, &v38);
  v35 = a1 + 160;
  if (!a2 || *(_BYTE *)(a1 + 224))
  {
    v28 = *(_QWORD *)(a1 + 512);
    if (v28 < v11)
    {
      v29 = (_OWORD *)(a1 + 520);
      v30 = *(_QWORD *)(a1 + 232);
      v31 = *(_QWORD *)(a1 + 240);
      do
      {
        if (a2)
        {
          if (v28 + v30 > v11)
          {
            v30 = v11 - v28;
            if (v31 + 3 > v11 - v28 || *(_BYTE *)(a1 + 248) == 0)
              v31 = v11 - v28;
          }
        }
        else if (v28 + v30 > v11 || v31 + v28 + 3 > v11)
        {
          return;
        }
        v33 = *(_QWORD **)(a1 + 256);
        *(_OWORD *)v36 = *v29;
        v37 = *(_QWORD *)(a1 + 536);
        *(_QWORD *)(a1 + 528) = 0;
        *(_QWORD *)(a1 + 536) = 0;
        *(_QWORD *)v29 = 0;
        sub_1D4D69854(v33, (uint64_t)v36, (_QWORD *)(a1 + 272), (double *)a1, (uint64_t *)(a1 + 296), v35, 0, v28, &v38, v31, v30, a4);
        v34 = *(void **)v29;
        if (*(_QWORD *)v29)
        {
          *(_QWORD *)(a1 + 528) = v34;
          operator delete(v34);
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(a1 + 528) = 0;
          *(_QWORD *)(a1 + 536) = 0;
        }
        *v29 = v38;
        *(_QWORD *)(a1 + 536) = v39;
        if (v36[0])
        {
          v36[1] = v36[0];
          operator delete(v36[0]);
        }
        if (*a4)
          break;
        if (*(_QWORD *)(a3 + 24))
          sub_1D4D69F10(a3, *(_QWORD *)(a1 + 512), v31);
        v28 = *(_QWORD *)(a1 + 512) + v31;
        *(_QWORD *)(a1 + 512) = v28;
      }
      while (v28 < v11);
    }
  }
  else
  {
    v27 = *(_QWORD **)(a1 + 256);
    memset(v40, 0, sizeof(v40));
    sub_1D4D69854(v27, (uint64_t)v40, (_QWORD *)(a1 + 272), (double *)a1, (uint64_t *)(a1 + 296), v35, 0, 0, &v41, v11, v11, a4);
    if (v41)
      operator delete(v41);
    if (v40[0])
      operator delete(v40[0]);
    if (!*a4)
    {
      if (*(_QWORD *)(a3 + 24))
        sub_1D4D69F10(a3, 0, v11);
    }
  }
}

void sub_1D4D68DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D68E04(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1D4D62E6C((uint64_t)v18, a2);
  sub_1D4D68998(a1, 1, (uint64_t)v18, a3);
  v7 = v19;
  if (v19 == v18)
  {
    v8 = 4;
    v7 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (*a3)
  {
    v9 = 0;
  }
  else
  {
    v10 = *(_QWORD **)(a1 + 272);
    v11 = *(_QWORD *)(a1 + 280) - (_QWORD)v10;
    if (v11)
      v12 = (uint64_t)(v10[1] - *v10) >> 3;
    else
      v12 = 0;
    sub_1D4D68F7C(*(_QWORD **)(a1 + 256), a1, (_QWORD *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * (v11 >> 3), v12, 0, (uint64_t)v16);
    v13 = *(_QWORD *)(a1 + 256);
    v14 = v16[0];
    *(_OWORD *)(v13 + 120) = v16[1];
    v15 = v16[3];
    *(_OWORD *)(v13 + 136) = v16[2];
    *(_OWORD *)(v13 + 152) = v15;
    *(_QWORD *)(v13 + 168) = v17;
    *(_OWORD *)(v13 + 104) = v14;
    v9 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
  }
  *a4 = v9;
}

void sub_1D4D68F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D4D68F7C(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  sparse_m_double *v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  sparse_m_double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  sparse_m_double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  sparse_m_double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  sparse_m_double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  sparse_m_double *v42;
  double v43;
  double v44;
  double v45;
  sparse_m_double *v46;
  double v47;
  double v48;
  double v49;
  sparse_m_double *v50;
  double v51;
  double v52;
  double v53;
  _OWORD v54[3];
  __int128 v55;
  float64x2_t v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  __int128 v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;

  *(_QWORD *)(a7 + 64) = 0;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  sub_1D4D696A4(&v64, a1, a5, (double *)a2);
  if (a6)
    puts("\nL1 objective function breakdown:");
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v13 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)a2, a3);
  v14 = sub_1D4D69C70((uint64_t)&v64, v13, (uint64_t)&v61);
  *(double *)a7 = v14;
  if (a6)
    printf("\tFinal objective value = %f\n", v14);
  sparse_matrix_destroy(v13);
  v15 = *(_OWORD *)(a2 + 112);
  v58 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)v59 = v15;
  v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 128);
  v60 = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v54[2] = *(_OWORD *)(a2 + 32);
  v55 = v17;
  v18 = *(_OWORD *)(a2 + 80);
  v56 = *(float64x2_t *)(a2 + 64);
  v57 = v18;
  v19 = *(_OWORD *)(a2 + 16);
  v54[0] = *(_OWORD *)a2;
  v54[1] = v19;
  v56 = (float64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(0x3D719799812DEA11uLL), (int8x16_t)vcgtzq_f64(v56));
  v20 = 0.0;
  if (*(double *)(a2 + 80) > 0.0)
    v20 = 1.0e-12;
  *(double *)&v57 = v20;
  *(_QWORD *)&v59[8] = 0;
  *(_QWORD *)&v59[16] = 0;
  v55 = 0x3FF0000000000000uLL;
  v21 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
  v22 = sub_1D4D69C70((uint64_t)&v64, v21, (uint64_t)&v61);
  v23 = v22;
  *(double *)(a7 + 8) = v22;
  v24 = *(double *)(a2 + 48);
  if (a6)
    printf("\tCorrections penalty (q0) = %f, weight = %f\n", v22, v24);
  sparse_matrix_destroy(v21);
  v25 = v24 * v23 + 0.0;
  *(_QWORD *)&v55 = 0;
  if (*(double *)(a2 + 64) == 0.0)
  {
    if ((a6 & 1) == 0)
    {
      if (*(double *)(a2 + 72) == 0.0)
        goto LABEL_27;
      goto LABEL_22;
    }
    puts("\tFirst derivative (e1) omitted from model.");
    if (*(double *)(a2 + 72) != 0.0)
    {
LABEL_22:
      v56.f64[1] = 1.0;
      v32 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
      v33 = sub_1D4D69C70((uint64_t)&v64, v32, (uint64_t)&v61);
      v34 = v33;
      *(double *)(a7 + 40) = v33;
      v35 = *(double *)(a2 + 72);
      if (a6)
        printf("\tSecond derivative (w2) = %f, weight = %f\n", v33, v35);
      sparse_matrix_destroy(v32);
      v25 = v25 + v35 * v34;
      v36 = 0.0;
      if (*(double *)(a2 + 72) > 0.0)
        v36 = 1.0e-12;
      v56.f64[1] = v36;
LABEL_27:
      if (*(double *)(a2 + 80) == 0.0)
      {
        if (!a6)
          goto LABEL_35;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  else
  {
    v56.f64[0] = 1.0;
    v26 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
    v27 = sub_1D4D69C70((uint64_t)&v64, v26, (uint64_t)&v61);
    v28 = v27;
    *(double *)(a7 + 32) = v27;
    v29 = *(double *)(a2 + 64);
    if (a6)
      printf("\tFirst derivative (w1) = %f, weight = %f\n", v27, v29);
    sparse_matrix_destroy(v26);
    v25 = v25 + v29 * v28;
    v30 = *(double *)(a2 + 72);
    v31 = 0.0;
    if (*(double *)(a2 + 64) > 0.0)
      v31 = 1.0e-12;
    v56.f64[0] = v31;
    if (v30 != 0.0)
      goto LABEL_22;
    if ((a6 & 1) == 0)
      goto LABEL_27;
  }
  puts("\tSecond derivative (e2) omitted from model.");
  if (*(double *)(a2 + 80) == 0.0)
  {
LABEL_29:
    puts("\tThird derivative (e3) omitted from model.");
    goto LABEL_35;
  }
LABEL_30:
  *(_QWORD *)&v57 = 0x3FF0000000000000;
  v37 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
  v38 = sub_1D4D69C70((uint64_t)&v64, v37, (uint64_t)&v61);
  v39 = v38;
  *(double *)(a7 + 48) = v38;
  v40 = *(double *)(a2 + 80);
  if (a6)
    printf("\tThird derivative (w3) = %f, weight = %f\n", v38, v40);
  sparse_matrix_destroy(v37);
  v25 = v25 + v40 * v39;
  v41 = 0.0;
  if (*(double *)(a2 + 80) > 0.0)
    v41 = 1.0e-12;
  *(double *)&v57 = v41;
LABEL_35:
  if (!*(_DWORD *)a2)
  {
    *(_QWORD *)&v59[8] = 0x3FF0000000000000;
    v42 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
    v43 = sub_1D4D69C70((uint64_t)&v64, v42, (uint64_t)&v61);
    v44 = v43;
    *(double *)(a7 + 56) = v43;
    v45 = *(double *)(a2 + 120);
    if (a6)
      printf("\taffine_diag objective = %f, weight = %f\n", v43, v45);
    sparse_matrix_destroy(v42);
    *(_OWORD *)&v59[8] = xmmword_1D4DB16C0;
    v46 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
    v47 = sub_1D4D69C70((uint64_t)&v64, v46, (uint64_t)&v61);
    v48 = v47;
    *(double *)(a7 + 64) = v47;
    v49 = *(double *)(a2 + 128);
    if (a6)
      printf("\taffine_off_diag objective = %f, weight = %f\n", v47, v49);
    sparse_matrix_destroy(v46);
    v25 = v25 + v45 * v44 + v49 * v48;
    *(_QWORD *)&v59[16] = 0;
  }
  if (a3[15] != a3[16])
  {
    *((_QWORD *)&v55 + 1) = 0x3FF0000000000000;
    v50 = sub_1D4D66DDC((uint64_t)&v61, a4, a5, (double *)v54, a3);
    v51 = sub_1D4D69C70((uint64_t)&v64, v50, (uint64_t)&v61);
    v52 = v51;
    *(double *)(a7 + 24) = v51;
    v53 = *(double *)(a2 + 56);
    if (a6)
      printf("\tTarget (qt) = %f, weight = %f\n", v51, v53);
    sparse_matrix_destroy(v50);
    v25 = v25 + v53 * v52;
  }
  if (a6)
    printf("\tSub-objective total = %f\n", v25);
  sub_1D4D69D30((float64x2_t *)a7, (float)(1.0 / (float)a4));
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1D4D694AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D694E4(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, double *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  _BYTE v37[32];
  _QWORD v38[4];
  _BYTE v39[32];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v39, (uint64_t)v37, a4, a8);
  v14 = 0;
  v15 = 0;
  v36[0] = 0;
  do
  {
    v15 += *(_QWORD *)&v37[v14 * 8];
    v36[++v14] = v15;
  }
  while (v14 != 3);
  result = sub_1D4D63CD0((uint64_t)v39, (uint64_t)v38, a6, a8);
  if (a6)
  {
    v17 = 0;
    v18 = v38[0];
    v19 = v38[1];
    v20 = v38[2];
    v21 = v38[3];
    v22 = 8 * a7 * a5;
    v23 = 8 * a7;
    v24 = 8 * v36[3] * a7;
    v25 = 8 * v36[2] * a7;
    v26 = 8 * v36[1] * a7;
    result = 8 * v36[0] * a7;
    do
    {
      if (a7)
      {
        v27 = 0;
        v28 = a1[10] + v22;
        v29 = *a2 + v24;
        v30 = a1[7] + v22;
        v31 = *a2 + v25;
        v32 = a1[4] + v22;
        v33 = *a2 + v26;
        v34 = a1[1] + v22;
        v35 = *a2 + result;
        do
        {
          if (v17 < v18)
            *(_QWORD *)(v34 + 8 * v27) = *(_QWORD *)(v35 + 8 * v27);
          if (v17 < v19)
            *(_QWORD *)(v32 + 8 * v27) = *(_QWORD *)(v33 + 8 * v27);
          if (v17 < v20)
            *(_QWORD *)(v30 + 8 * v27) = *(_QWORD *)(v31 + 8 * v27);
          if (v17 < v21)
            *(_QWORD *)(v28 + 8 * v27) = *(_QWORD *)(v29 + 8 * v27);
          ++v27;
        }
        while (a7 != v27);
      }
      ++v17;
      v22 += v23;
      v24 += v23;
      v25 += v23;
      v26 += v23;
      result += v23;
    }
    while (v17 != a6);
  }
  return result;
}

double sub_1D4D696A4(_QWORD *a1, _QWORD *a2, unint64_t a3, double *a4)
{
  double result;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  double *v13;
  double v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  double v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  _OWORD v30[2];
  int64x2_t v31;
  int64x2_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  sub_1D4D63CD0((uint64_t)v33, (uint64_t)&v31, ((uint64_t)(a2[2] - a2[1]) >> 3) / a3, a4);
  v30[0] = v31;
  v30[1] = v32;
  sub_1D4D6455C((uint64_t)a1, vaddvq_s64(vaddq_s64(v32, v31)) * a3);
  v8 = 0;
  v9 = 0;
  v33[0] = 0;
  do
  {
    v9 += *(_QWORD *)((char *)v30 + v8 * 8);
    v33[++v8] = v9;
  }
  while (v8 != 3);
  v10 = (double *)a2[1];
  v11 = a2[2] - (_QWORD)v10;
  if (v11)
  {
    v12 = v11 >> 3;
    if (v12 <= 1)
      v12 = 1;
    v13 = (double *)(*a1 + 8 * v33[0] * a3);
    do
    {
      v14 = *v10++;
      result = v14;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  v15 = (double *)a2[4];
  v16 = a2[5] - (_QWORD)v15;
  if (v16)
  {
    v17 = v16 >> 3;
    if (v17 <= 1)
      v17 = 1;
    v18 = (double *)(*a1 + 8 * v33[1] * a3);
    do
    {
      v19 = *v15++;
      result = v19;
      *v18++ = v19;
      --v17;
    }
    while (v17);
  }
  v20 = (double *)a2[7];
  v21 = a2[8] - (_QWORD)v20;
  if (v21)
  {
    v22 = v21 >> 3;
    if (v22 <= 1)
      v22 = 1;
    v23 = (double *)(*a1 + 8 * v33[2] * a3);
    do
    {
      v24 = *v20++;
      result = v24;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  v25 = (double *)a2[10];
  v26 = a2[11] - (_QWORD)v25;
  if (v26)
  {
    v27 = v26 >> 3;
    if (v27 <= 1)
      v27 = 1;
    v28 = (double *)(*a1 + 8 * v33[3] * a3);
    do
    {
      v29 = *v25++;
      result = v29;
      *v28++ = v29;
      --v27;
    }
    while (v27);
  }
  return result;
}

void sub_1D4D69854(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, double *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, unint64_t a11, int *a12)
{
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  sparse_matrix_double v25;
  sparse_m_double *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[6];
  void *__p[2];
  uint64_t v57;
  sparse_m_double *v58;
  std::__shared_weak_count *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v19 = a10;
  v64 = *MEMORY[0x1E0C80C00];
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  if (a3[1] == *a3)
    v21 = 0;
  else
    v21 = (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 3;
  if (a11 + a8 >= v20)
    v22 = v20 - a8;
  else
    v22 = a11;
  if (v22 < a10)
    v19 = v22;
  v50 = v19;
  v23 = *(_QWORD *)(a6 + 24);
  if (v23 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23))
  {
    v24 = 2;
LABEL_23:
    *a12 = v24;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    return;
  }
  *a12 = 0;
  if (!v50)
  {
    if (a7)
      puts("Windowed-L1 requires stride length > 0.");
    v24 = 3;
    goto LABEL_23;
  }
  v25 = sparse_matrix_create_double(v22, v21);
  sub_1D4D85184((uint64_t)v25, &v58);
  sub_1D4D68380(v58, a3, a8, v22, 0, 0);
  sub_1D4D67B20((uint64_t)v55, a5, a8, v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v57 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (a7)
    printf("Window start = %zu, length %zu\n", a8, v22);
  v26 = v58;
  sub_1D4D62E6C((uint64_t)v60, a6);
  sub_1D4D62E6C((uint64_t)v62, a6 + 32);
  v28 = (_QWORD *)sub_1D4D68544(v26, (uint64_t)a4, v55, (uint64_t)v60, 0);
  v54 = v28;
  v29 = v63;
  if (v63 == v62)
  {
    v30 = 4;
    v29 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_26;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_26:
  v31 = v61;
  if (v61 == v60)
  {
    v32 = 4;
    v31 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_31;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_31:
  if (*a12 || (v33 = *(_DWORD *)v28, *a12 = *(_DWORD *)v28, v33))
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
    if (v22 >= v50 + 3)
      v37 = v50 + 3;
    else
      v37 = v22;
    sub_1D4D694E4(a1, v28 + 1, v27, v22, a8, v37, v21, a4);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    if (v22 >= v50 + 3)
    {
      v51 = 0x7FF8000000000000;
      sub_1D4D6A0B8(&v52, 3 * v21, &v51);
      v38 = 0;
      v28 = v54;
      v39 = v53;
      v40 = (_QWORD *)v52;
      *(_OWORD *)a9 = v52;
      a9[2] = v39;
      v41 = v40;
      v42 = 8 * v21;
      v43 = 8 * v21 * v50;
      do
      {
        if (v21)
        {
          v44 = (uint64_t *)(v28[1] + v43);
          v45 = v21;
          v46 = v41;
          do
          {
            v47 = *v44++;
            *v46++ = v47;
            --v45;
          }
          while (v45);
        }
        ++v38;
        v41 = (_QWORD *)((char *)v41 + v42);
        v43 += v42;
      }
      while (v38 != 3);
    }
    else
    {
      v28 = v54;
    }
  }
  v54 = 0;
  if (v28)
    sub_1D4D6C228((uint64_t)&v54, v28);
  sub_1D4D62DB8((uint64_t)v55);
  v34 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1D4D69BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  va_list va;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD *);
  v13 = v14;
  v14 = 0;
  if (v13)
    sub_1D4D6C228((uint64_t)va, v13);
  sub_1D4D62DB8((uint64_t)va1);
  sub_1D4D6C1D0(v11 - 176);
  _Unwind_Resume(a1);
}

void sub_1D4D69C68()
{
  JUMPOUT(0x1D4D69C60);
}

double sub_1D4D69C70(uint64_t a1, sparse_m_double *a2, uint64_t a3)
{
  double v6;
  double v7;
  void *__p[3];

  sub_1D4D604C8(__p, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  sub_1D4D8BF18(a2, (const double **)a1, (uint64_t)__p, CblasNoTrans);
  v6 = sub_1D4D8BF90(a1, (double **)__p);
  v7 = sub_1D4D8BF90(a3, (double **)a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v7 + v6 * 0.5;
}

void sub_1D4D69D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64_t sub_1D4D69D30(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64_t result;

  v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  result = a1[4].f64[0] * a2;
  a1[4].f64[0] = result;
  return result;
}

uint64_t sub_1D4D69D60(const double **a1, signed int a2, sparse_dimension N, uint64_t a4, uint64_t *a5)
{
  sparse_matrix_double v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  _BYTE v14[216];

  v9 = sparse_matrix_create_double(1uLL, N);
  sub_1D4D67B20((uint64_t)v14, a5, a2, 1);
  sub_1D4D66444(v9, a4, (uint64_t)v14, 0, (uint64_t *)&v13);
  v10 = sub_1D4D85B3C((uint64_t)v13, a1, 0, 0.0001);
  sparse_matrix_destroy(v9);
  v11 = v13;
  v13 = 0;
  if (v11)
    sub_1D4D6A138((uint64_t)&v13, v11);
  sub_1D4D62DB8((uint64_t)v14);
  return v10;
}

void sub_1D4D69E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D62DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D69E50(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_1D4D69EE0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4D69F4C((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_1D4D69F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_1D4D6A05C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_1D4D69F4C(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      sub_1D4D5DFA8();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1D4D5E2CC(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1D4D6A05C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E988B0D0;
  __cxa_throw(exception, (struct type_info *)&unk_1E988A8C8, (void (*)(void *))std::exception::~exception);
}

void sub_1D4D6A094(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D6A0B8(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D6053C(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4D6A11C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D6A138(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = (void *)a2[16];
    if (v3)
    {
      a2[17] = v3;
      operator delete(v3);
    }
    sub_1D4D6C1D0((uint64_t)(a2 + 14));
    v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[8];
    if (v5)
    {
      a2[9] = v5;
      operator delete(v5);
    }
    v6 = (void *)a2[5];
    if (v6)
    {
      a2[6] = v6;
      operator delete(v6);
    }
    v7 = (void *)a2[2];
    if (v7)
    {
      a2[3] = v7;
      operator delete(v7);
    }
    sub_1D4D6C1D0((uint64_t)a2);
    JUMPOUT(0x1D826897CLL);
  }
}

void sub_1D4D6A1CC(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1D4D5DFA8();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D4D5E2CC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *sub_1D4D6A2D4(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D609E4(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1D4D60B28(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1D4D6A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D4D60C20(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D6A38C(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D61A14(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_1D4D6A45C(&v13, a2);
        else
          sub_1D4D6A50C((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *sub_1D4D6A45C(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1D4D6A50C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *sub_1D4D6A5B8(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D5E9D4(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4D6A61C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D6A638(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D5E9D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D4D6A690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D6A6AC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D5E9D4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D6A708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6A724(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_1D4D609E4(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

_QWORD *sub_1D4D6A85C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D609E4(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4D6A8D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6A8F4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_1D4D5DFA8();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D4D6053C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_1D4D6A9FC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D6053C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D6AA58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D6AA74(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D4D609E4(result, a4);
    result = sub_1D4D6AAF8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4D6AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D4D60C20(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D6AAF8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D4D60B28(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D4D60BA0((uint64_t)v8);
  return v4;
}

void sub_1D4D6AB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D60BA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D4D6ABA8(uint64_t *a1)
{
  if (*a1)
  {
    sub_1D4D60C60(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_1D4D6ABE0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D611FC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D6AC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6AC58(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_1D4D5DFA8();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1D4D5E2CC(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_1D4D6AE64((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D4D6AE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6AE64(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *sub_1D4D6AF28(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v37 = v9;
    if (v18)
      v19 = (char *)sub_1D4D60A34(v9, v18);
    else
      v19 = 0;
    v28 = &v19[24 * v15];
    __p = v19;
    v34 = v28;
    v36 = &v19[24 * v18];
    v29 = &v28[24 * a5];
    v30 = 24 * a5;
    do
    {
      v31 = *(_OWORD *)v7;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    v35 = v29;
    v5 = (char *)sub_1D4D6B1C0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[24 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[24 * a5];
    v25 = &v23[-24 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[24 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D4D6B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1D4D6B1C0(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *sub_1D4D6B29C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      sub_1D4D5DFA8();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1D4D5EA14(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = sub_1D4D6B4A8((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D4D6B470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1D4D6B4A8(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

__n128 *sub_1D4D6B56C(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = (uint64_t)sub_1D4D6AAF8(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_1D4D6B730((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      sub_1D4D6B924((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_1D4D5DFA8();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1D4D60A34(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_1D4D6B794(&v23, a3, a5);
      v5 = (__n128 *)sub_1D4D6B818(a1, &v23, v5);
      sub_1D4D6BB34((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1D4D6B710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *sub_1D4D6B730(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__n128 *)((char *)a2 + v6 - a4);
  v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v8 = (__n128 *)((char *)v8 + 24);
      v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1D4D6B8C8(a2, v7, v6);
}

_QWORD *sub_1D4D6B794(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a3)
  {
    v6 = &v4[3 * a3];
    v7 = 24 * a3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = sub_1D4D60B28(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1D4D6B810(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6B818(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_1D4D6B990((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1D4D6BA30(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *sub_1D4D6B8C8(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      sub_1D4D60158(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_1D4D6B924(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        sub_1D4D6A8F4(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1D4D6B990(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D4D6BABC((uint64_t)v11);
  return v9;
}

_QWORD *sub_1D4D6BA30(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  sub_1D4D60BA0((uint64_t)v6);
  return v4;
}

uint64_t sub_1D4D6BABC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D6BAF0(a1);
  return a1;
}

void sub_1D4D6BAF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1D4D6BB34(uint64_t a1)
{
  sub_1D4D6BB68(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4D6BB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *sub_1D4D6BBC0(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 5);
    if (v14 >> 59)
      sub_1D4D5DFA8();
    v15 = (__dst - (uint64_t)v13) >> 5;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 4 > v14)
      v14 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v39 = v9;
    if (v17)
      v18 = (char *)sub_1D4D6123C(v9, v17);
    else
      v18 = 0;
    v29 = &v18[32 * v15];
    __p = v18;
    v36 = v29;
    v38 = &v18[32 * v17];
    v30 = 32 * a5;
    v31 = &v29[32 * a5];
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    v37 = v31;
    v5 = (char *)sub_1D4D6BDCC((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    v21 = &__src[32 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[32 * a5];
    v25 = &v23[-32 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[32 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D4D6BD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1D4D6BDCC(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_1D4D6BEA0(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;

  v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  sub_1D4D6BFC0(a1 + 160, a3);
  sub_1D4D6C024(a1 + 192, a3 + 32);
  v12 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 233) = *(_OWORD *)(a3 + 73);
  *(_OWORD *)(a1 + 224) = v12;
  v13 = (_OWORD *)operator new();
  v13[9] = 0u;
  v13[10] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  *v13 = 0u;
  *(_QWORD *)(a1 + 256) = v13;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_1D4D6C088(a1 + 296, 0);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  return a1;
}

void sub_1D4D6BF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  va_list va;

  va_start(va, a2);
  sub_1D4D60C20((void ***)va);
  v5 = (_QWORD *)*v3;
  *v3 = 0;
  if (v5)
    sub_1D4D61BC4((uint64_t)v3, v5);
  sub_1D4D5B4E0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6BFC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_1D4D6C024(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_1D4D6C088(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  v3 = a1 + 24;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v6 = 0x3FF0000000000000;
  sub_1D4D6A0B8(&v7, a2, &v6);
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  return a1;
}

void sub_1D4D6C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a3);
  v6 = v4;
  sub_1D4D61048(v6, *(_QWORD **)(v3 + 200));
  v8 = *(void **)(v3 + 168);
  if (v8)
  {
    *(_QWORD *)(v3 + 176) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v3 + 144);
  if (v9)
  {
    *(_QWORD *)(v3 + 152) = v9;
    operator delete(v9);
  }
  sub_1D4D60C20((void ***)va);
  sub_1D4D60C20((void ***)va);
  v10 = *(void **)(v3 + 72);
  if (v10)
  {
    *(_QWORD *)(v3 + 80) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v3 + 48);
  if (v11)
  {
    *(_QWORD *)(v3 + 56) = v11;
    operator delete(v11);
  }
  v12 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v12;
    operator delete(v12);
  }
  v13 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6C1D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1D4D6C228(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (a2)
  {
    v3 = (void *)a2[7];
    if (v3)
    {
      a2[8] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[1];
    if (v5)
    {
      a2[2] = v5;
      operator delete(v5);
    }
    JUMPOUT(0x1D826897CLL);
  }
}

void sub_1D4D6C290()
{
  sub_1D4D5DFBC("basic_string");
}

PipelineStatePromise *sub_1D4D6C4BC(void *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  PipelineStatePromise *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v16;
  _QWORD v17[4];
  PipelineStatePromise *v18;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "count"))
  {
    v5 = dispatch_group_create();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[PipelineStatePromise initWithDispatchGroup:pipelineStates:errors:]([PipelineStatePromise alloc], "initWithDispatchGroup:pipelineStates:errors:", v5, v6, v7);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v9 = v4;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
          if (objc_msgSend(v14, "conformsToProtocol:", &unk_1EFEFF2A0))
          {
            dispatch_group_enter(v5);
            v17[0] = MEMORY[0x1E0C809B0];
            v17[1] = 3221225472;
            v17[2] = sub_1D4D6C6E8;
            v17[3] = &unk_1E988B2E0;
            v18 = v8;
            v19 = v6;
            v20 = v14;
            v21 = v7;
            v22 = v5;
            objc_msgSend(v16, "newComputePipelineStateWithFunction:completionHandler:", v14, v17);

          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v11);
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1D4D6C6E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  v7 = *(_QWORD *)(a1 + 48);
  if (v8)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v8, v7);
  else
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKey:", v5, v7);
  objc_sync_exit(v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1D4D6C77C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D4D6CD88(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D4D6CD08);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D6D0C0(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

MetalFAST9BRIEF *sub_1D4D6FB7C()
{
  return objc_alloc_init(MetalFAST9BRIEF);
}

BOOL sub_1D4D6FB8C(void *a1)
{
  _BOOL8 v2;

  objc_msgSend(a1, "waitUntilCompleted");
  v2 = objc_msgSend(a1, "status") == 4;

  return v2;
}

void *sub_1D4D6FBC4(void *a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  CGFloat x;
  CGFloat y;
  double height;
  CGSize EncodedSize;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *context;
  CGRect CleanRect;

  v7 = a1;
  if (objc_msgSend(v7, "didFinishInitializationWithTimeout:", 5000000.0))
  {
    CleanRect = CVImageBufferGetCleanRect(a2);
    x = CleanRect.origin.x;
    y = CleanRect.origin.y;
    height = CleanRect.size.height;
    EncodedSize = CVImageBufferGetEncodedSize(a2);
    *(float *)&y = EncodedSize.height - (y + height);
    objc_msgSend(v7, "queue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "commandBuffer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    context = (void *)MEMORY[0x1D8268CC4]();
    objc_msgSend(v7, "_textureFromPixelBuffer:forcedMetalPixelFormat:forcedWidthDivisior:", a2, 13, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_textureFromPixelBuffer:forcedMetalPixelFormat:forcedWidthDivisior:", a3, 13, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_textureFromPixelBuffer:forcedMetalPixelFormat:forcedWidthDivisior:", a3, 73, 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_textureFromPixelBuffer:forcedMetalPixelFormat:forcedWidthDivisior:", a4, 73, 4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", objc_msgSend(v16, "pixelFormat"), objc_msgSend(v16, "width"), objc_msgSend(v16, "height"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setUsage:", objc_msgSend(v18, "usage") | 3);
    objc_msgSend(v7, "device");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v19, "newTextureWithDescriptor:", v18);

    *(float *)&x = x;
    objc_msgSend(v7, "_gaussianishBlur_metal:inputTexture:outputTexture:offset:", v13, v14, v15, *(float *)&x, *(float *)&y);
    objc_msgSend(v7, "_computeResponseMap_metal:inputTexture:outputTexture:garbagePixelCount:", v13, v16, v20, ((double)(unint64_t)objc_msgSend(v20, "width") - EncodedSize.width));
    objc_msgSend(v7, "_suppressResponseMap_metal:unsuppressedTexture:suppressedTexture:garbagePixelCount:", v13, v20, v17, ((double)(unint64_t)objc_msgSend(v20, "width") - EncodedSize.width));
    objc_msgSend(v13, "commit");
    objc_msgSend(v13, "waitUntilScheduled");

    objc_autoreleasePoolPop(context);
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

uint64_t sub_1D4D6FE24()
{
  char *v0;
  uint64_t result;

  v0 = getenv("AL_STABILIZE_NO_METAL");
  if (v0)
    result = atoi(v0);
  else
    result = dword_1ED988278;
  dword_1ED988278 = result;
  return result;
}

void sub_1D4D6FE60(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  float v6;
  double v7;
  double v8;
  const double *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double *v19;
  float64x2_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  const double *v31;
  float64x2_t v32;
  float64x2_t v33;
  double *v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float *v44;
  float *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  int v58;
  double v59;
  float v60;
  float v61;
  const double *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double *v66;
  uint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  const double *v74;
  float64x2_t v75;
  float64x2_t v76;
  double *v77;
  uint64_t v78;
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  char v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  float64x2_t v101;
  _QWORD v102[12];
  _QWORD v103[12];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  __int128 v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  float32x4x2_t v116;
  float64x2x3_t v117;
  float64x2x3_t v118;
  float64x2x3_t v119;
  float64x2x3_t v120;
  float64x2x3_t v121;

  v115 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v4 = 0;
    v5 = HIDWORD(a2);
    v6 = (float)((float)(*(float *)(a1 + 244) - *(float *)(a1 + 236))
               * (float)(*(float *)(a1 + 248) - *(float *)(a1 + 240)))
       / (float)(HIDWORD(a2) * (int)a2);
    *(float *)(a1 + 192) = v6;
    v7 = (double)(int)a2;
    v8 = (double)SHIDWORD(a2);
    v104 = 0;
    v105 = 0;
    v106 = 0x3FF0000000000000;
    v107 = (double)(int)a2;
    v108 = xmmword_1D4DB16C0;
    v109 = 0;
    v110 = (double)SHIDWORD(a2);
    v111 = 0x3FF0000000000000;
    v112 = (double)(int)a2;
    v113 = (double)SHIDWORD(a2);
    v114 = 0x3FF0000000000000;
    __asm { FMOV            V22.2D, #1.0 }
    do
    {
      v14 = (const double *)((char *)&v104 + v4 * 8);
      v117 = vld3q_f64(v14);
      v15 = vmulq_f64(v117.val[1], (float64x2_t)0);
      v16 = vmlaq_f64(vaddq_f64(v117.val[0], v15), (float64x2_t)0, v117.val[2]);
      v17 = vaddq_f64(v117.val[2], vmlaq_f64(v15, (float64x2_t)0, v117.val[0]));
      v18 = vdivq_f64(v16, v17);
      v19 = (double *)&v103[v4];
      v20 = vdivq_f64(vmlaq_f64(vmlaq_f64(v117.val[1], (float64x2_t)0, v117.val[0]), (float64x2_t)0, v117.val[2]), v17);
      vst3q_f64(v19, *(float64x2x3_t *)(&_Q22 - 2));
      v4 += 6;
    }
    while (v4 != 12);
    v21 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0x3FF0000000000000;
    v107 = (double)(int)a2;
    v108 = xmmword_1D4DB16C0;
    v109 = 0;
    v110 = (double)SHIDWORD(a2);
    v111 = 0x3FF0000000000000;
    v112 = (double)(int)a2;
    v113 = (double)SHIDWORD(a2);
    v114 = 0x3FF0000000000000;
    v22 = *(double *)(a1 + 8);
    v23 = *(double *)(a1 + 32);
    v24 = *(double *)(a1 + 56);
    v92 = *(_QWORD *)(a1 + 16);
    v93 = *(_QWORD *)a1;
    v25 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)a1, 0);
    v26 = (float64x2_t)vdupq_lane_s64(v92, 0);
    v94 = *(_QWORD *)(a1 + 40);
    v95 = *(_QWORD *)(a1 + 24);
    v27 = (float64x2_t)vdupq_lane_s64(v95, 0);
    v28 = (float64x2_t)vdupq_lane_s64(v94, 0);
    v96 = *(_QWORD *)(a1 + 48);
    v97 = *(_QWORD *)(a1 + 64);
    v29 = (float64x2_t)vdupq_lane_s64(v96, 0);
    v30 = (float64x2_t)vdupq_lane_s64(v97, 0);
    do
    {
      v31 = (const double *)((char *)&v104 + v21 * 8);
      v119 = vld3q_f64(v31);
      v32 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v23), v119.val[0], v27), v119.val[2], v28);
      v33 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v24), v119.val[0], v29), v119.val[2], v30);
      v119.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v22), v119.val[0], v25), v119.val[2], v26), v33);
      v119.val[1] = vdivq_f64(v32, v33);
      v119.val[2] = _Q22;
      v34 = (double *)&v102[v21];
      vst3q_f64(v34, v119);
      v21 += 6;
    }
    while (v21 != 12);
    v98 = v24;
    v99 = v23;
    v100 = v22;
    v101 = _Q22;
    v35 = 0;
    *(_QWORD *)&v36.f64[0] = v103[0];
    *(_QWORD *)&v37.f64[0] = v103[1];
    *(_QWORD *)&v36.f64[1] = v103[3];
    *(_QWORD *)&v38.f64[0] = v103[6];
    *(_QWORD *)&v39.f64[0] = v103[7];
    *(_QWORD *)&v38.f64[1] = v103[9];
    *(_QWORD *)&v40.f64[0] = v102[6];
    *(_QWORD *)&v41.f64[0] = v102[7];
    *(_QWORD *)&v40.f64[1] = v102[9];
    v42 = vsubq_f64(v38, v40);
    *(_QWORD *)&v40.f64[0] = v102[0];
    *(_QWORD *)&v43.f64[0] = v102[1];
    *(_QWORD *)&v40.f64[1] = v102[3];
    v44 = (float *)(a1 + 252);
    *(_QWORD *)&v37.f64[1] = v103[4];
    *(_QWORD *)&v39.f64[1] = v103[10];
    *(_QWORD *)&v43.f64[1] = v102[4];
    *(_QWORD *)&v41.f64[1] = v102[10];
    v116.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v36, v40)), v42);
    v116.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v37, v43)), vsubq_f64(v39, v41));
    vst2q_f32(v44, v116);
    v45 = (float *)(a1 + 284);
    v46 = -1;
    do
    {
      if (v46 >= 2)
        v47 = 6;
      else
        v47 = 0;
      if (v46 >= 2)
        v48 = 3;
      else
        v48 = 9;
      v49 = (double *)&v102[v47];
      v50 = *(double *)&v102[v35];
      v51 = *(double *)&v102[v35 + 1];
      v52 = *v49 - v50;
      *(float *)&v50 = *(double *)&v102[v48] - v50;
      v53 = v49[1] - v51;
      *(float *)&v51 = *(double *)&v102[v48 + 1] - v51;
      *v45++ = acosf((float)((float)(v53 * *(float *)&v51) + (float)(v52 * *(float *)&v50))/ (float)(sqrtf((float)(v53 * v53) + (float)(v52 * v52))* sqrtf((float)(*(float *)&v51 * *(float *)&v51) + (float)(*(float *)&v50 * *(float *)&v50))));
      v35 += 3;
      ++v46;
    }
    while (v35 != 12);
    v54 = 0;
    *(_DWORD *)(a1 + 172) = 0;
    v55 = 0.0;
    do
    {
      v56 = vabds_f32(1.5708, *(float *)(a1 + 284 + v54));
      if (v55 <= v56)
        v55 = v56;
      v54 += 4;
    }
    while (v54 != 16);
    v57 = 0;
    if ((int)v5 <= v2)
      v58 = v2;
    else
      v58 = v5;
    v59 = (double)v58;
    v60 = *(float *)(a1 + 220) / (double)v58;
    v61 = (float)(v55 * v55) / (v60 + 0.0001);
    *(float *)(a1 + 176) = v61;
    v104 = 0;
    v105 = 0;
    v106 = 0x3FF0000000000000;
    v107 = v7;
    v108 = xmmword_1D4DB16C0;
    v109 = 0;
    v110 = v8;
    v111 = 0x3FF0000000000000;
    v112 = v7;
    v113 = v8;
    v114 = 0x3FF0000000000000;
    do
    {
      v62 = (const double *)((char *)&v104 + v57 * 8);
      v118 = vld3q_f64(v62);
      v63 = vmulq_f64(v118.val[1], (float64x2_t)0);
      v64 = vmlaq_f64(vaddq_f64(v118.val[0], v63), (float64x2_t)0, v118.val[2]);
      v65 = vaddq_f64(v118.val[2], vmlaq_f64(v63, (float64x2_t)0, v118.val[0]));
      v120.val[0] = vdivq_f64(v64, v65);
      v120.val[1] = vdivq_f64(vmlaq_f64(vmlaq_f64(v118.val[1], (float64x2_t)0, v118.val[0]), (float64x2_t)0, v118.val[2]), v65);
      v66 = (double *)&v103[v57];
      v120.val[2] = v101;
      vst3q_f64(v66, v120);
      v57 += 6;
    }
    while (v57 != 12);
    v67 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0x3FF0000000000000;
    v107 = v7;
    v108 = xmmword_1D4DB16C0;
    v109 = 0;
    v110 = v8;
    v111 = 0x3FF0000000000000;
    v112 = v7;
    v113 = v8;
    v114 = 0x3FF0000000000000;
    v68 = (float64x2_t)vdupq_lane_s64(v93, 0);
    v69 = (float64x2_t)vdupq_lane_s64(v92, 0);
    v70 = (float64x2_t)vdupq_lane_s64(v95, 0);
    v71 = (float64x2_t)vdupq_lane_s64(v94, 0);
    v72 = (float64x2_t)vdupq_lane_s64(v96, 0);
    v73 = (float64x2_t)vdupq_lane_s64(v97, 0);
    do
    {
      v74 = (const double *)((char *)&v104 + v67 * 8);
      v121 = vld3q_f64(v74);
      v75 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v99), v121.val[0], v70), v121.val[2], v71);
      v76 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v98), v121.val[0], v72), v121.val[2], v73);
      v121.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v100), v121.val[0], v68), v121.val[2], v69), v76);
      v121.val[1] = vdivq_f64(v75, v76);
      v121.val[2] = v101;
      v77 = (double *)&v102[v67];
      vst3q_f64(v77, v121);
      v67 += 6;
    }
    while (v67 != 12);
    v78 = 0;
    v79 = 0uLL;
    v80 = 0.0;
    do
    {
      v81 = *(float64x2_t *)&v103[v78];
      v82 = *(float64x2_t *)&v102[v78];
      v83 = vsubq_f64(v81, v82);
      v84 = vabdq_f64(v81, v82);
      v85 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v83, v83).f64[1]), v83.f64[0], v83.f64[0]);
      if (v85 > v80)
        v80 = v85;
      v79 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v84, v79), (int8x16_t)v84, (int8x16_t)v79);
      v78 += 3;
    }
    while (v78 != 12);
    *(float32x2_t *)(a1 + 184) = vcvt_f32_f64(v79);
    v86 = *(float *)(a1 + 224) / v59;
    v87 = sqrt(v80) / v59;
    v88 = v87 / (float)(fmaxf(v86, 0.0025) + 0.00000001);
    *(float *)(a1 + 180) = v88;
    v89 = *(_QWORD *)(a1 + 104);
    if (v89)
    {
      if (v61 <= 0.5)
      {
        LOBYTE(v89) = 0;
        v90 = 0;
      }
      else if (v61 <= 0.75)
      {
        v90 = 0;
        LOBYTE(v89) = 1;
      }
      else
      {
        LOBYTE(v89) = 1;
        v90 = 1;
      }
      if (v6 < 0.08)
      {
        LOBYTE(v89) = v89 | 2;
        if (v6 < 0.15)
          v90 |= 2u;
      }
      v91 = *(float *)(a1 + 168);
      if (v91 < 0.1)
      {
        LOBYTE(v89) = v89 | 4;
        if (v91 < 0.2)
          v90 |= 4u;
      }
      if (v88 > 1.8)
      {
        LOBYTE(v89) = v89 | 8;
        if (v88 > 3.0)
          v90 |= 8u;
      }
    }
    else
    {
      v90 = 0;
    }
    *(_BYTE *)(a1 + 74) = v89;
    *(_BYTE *)(a1 + 75) = v90;
  }
}

uint64_t sub_1D4D70AC0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "lock");
  return objc_msgSend(*(id *)(a1 + 32), "unlockWithCondition:", 1);
}

uint64_t sub_1D4D70EE4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_FrameRequestCallback);
}

void sub_1D4D711D8(void *a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  int v13;
  void **v14;
  sparse_status v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  sparse_index v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  void **v54;
  void *v55;
  int v56;
  sparse_index column_end;
  sparse_index *jndx[3];
  double *val[3];

  *(_OWORD *)(a2 + 24) = 0u;
  v4 = (void **)(a2 + 24);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  v53 = a2 + 64;
  v5 = sub_1D4D5EA14(a2 + 64, 1uLL);
  v6 = *(char **)(a2 + 48);
  v7 = *(char **)(a2 + 56);
  v9 = &v5[v8];
  *v5 = 0;
  v10 = v5 + 1;
  while (v7 != v6)
  {
    v11 = *((_DWORD *)v7 - 1);
    v7 -= 4;
    *--v5 = v11;
  }
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v9;
  if (v6)
    operator delete(v6);
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)a2 = sparse_get_matrix_number_of_rows(a1);
  *(_QWORD *)(a2 + 8) = sparse_get_matrix_number_of_columns(a1);
  *(_QWORD *)(a2 + 16) = sparse_get_matrix_nonzero_count(a1);
  sub_1D4D604C8(val, *(_QWORD *)(a2 + 8));
  sub_1D4D72594(jndx, *(_QWORD *)(a2 + 8));
  column_end = 0;
  if (*(_QWORD *)a2)
  {
    v12 = 0;
    v13 = 0;
    v54 = v4 + 3;
    v55 = a1;
    v14 = (void **)(a2 + 72);
    do
    {
      v15 = sparse_extract_sparse_row_double((sparse_matrix_double)a1, v12, 0, &column_end, *(_QWORD *)(a2 + 8), val[0], jndx[0]);
      if (v15 >= 1)
      {
        v16 = 0;
        v56 = v13 + v15;
        v17 = v15;
        do
        {
          v18 = val[0];
          v20 = *(double **)(a2 + 80);
          v19 = *(_QWORD *)(a2 + 88);
          if ((unint64_t)v20 >= v19)
          {
            v22 = (double *)*v14;
            v23 = ((char *)v20 - (_BYTE *)*v14) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              sub_1D4D5DFA8();
            v25 = v19 - (_QWORD)v22;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)sub_1D4D5E2CC(a2 + 88, v26);
              v22 = *(double **)(a2 + 72);
              v20 = *(double **)(a2 + 80);
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(double *)v28 = v18[v16];
            v21 = (double *)(v28 + 8);
            while (v20 != v22)
            {
              v29 = *((_QWORD *)v20-- - 1);
              *((_QWORD *)v28 - 1) = v29;
              v28 -= 8;
            }
            *(_QWORD *)(a2 + 72) = v28;
            *(_QWORD *)(a2 + 80) = v21;
            *(_QWORD *)(a2 + 88) = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v20 = val[0][v16];
            v21 = v20 + 1;
          }
          *(_QWORD *)(a2 + 80) = v21;
          v30 = jndx[0][v16];
          v32 = *(char **)(a2 + 32);
          v31 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*v4;
            v35 = (v32 - (_BYTE *)*v4) >> 2;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62)
              sub_1D4D5DFA8();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 1 > v36)
              v36 = v37 >> 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
              v38 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)sub_1D4D5EA14(a2 + 40, v38);
              v34 = *(char **)(a2 + 24);
              v32 = *(char **)(a2 + 32);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[4 * v35];
            *(_DWORD *)v40 = v30;
            v33 = v40 + 4;
            while (v32 != v34)
            {
              v41 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            *(_QWORD *)(a2 + 24) = v40;
            *(_QWORD *)(a2 + 32) = v33;
            *(_QWORD *)(a2 + 40) = &v39[4 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_DWORD *)v32 = v30;
            v33 = v32 + 4;
          }
          *(_QWORD *)(a2 + 32) = v33;
          ++v16;
        }
        while (v16 != v17);
        a1 = v55;
        v13 = v56;
      }
      v43 = *(char **)(a2 + 56);
      v42 = *(_QWORD *)(a2 + 64);
      if ((unint64_t)v43 >= v42)
      {
        v45 = (char *)*v54;
        v46 = (v43 - (_BYTE *)*v54) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          sub_1D4D5DFA8();
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)sub_1D4D5EA14(v53, v49);
          v45 = *(char **)(a2 + 48);
          v43 = *(char **)(a2 + 56);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[4 * v46];
        *(_DWORD *)v51 = v13;
        v44 = v51 + 4;
        while (v43 != v45)
        {
          v52 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v51 - 1) = v52;
          v51 -= 4;
        }
        *(_QWORD *)(a2 + 48) = v51;
        *(_QWORD *)(a2 + 56) = v44;
        *(_QWORD *)(a2 + 64) = &v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_DWORD *)v43 = v13;
        v44 = v43 + 4;
      }
      *(_QWORD *)(a2 + 56) = v44;
      ++v12;
    }
    while (v12 < *(_QWORD *)a2);
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
}

void sub_1D4D7158C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _QWORD *v19;

  if (__p)
    operator delete(__p);
  sub_1D4D715E8(v19);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D715E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D4D71638(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  FILE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v13;
  __int128 v14;
  void *exception;
  std::string v16;
  __int128 v17;
  std::string::size_type v18;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    v13 = std::string::append(&v16, ".");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8268838](exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  fprintf(v4, "%ld\t%ld\t%ld", *a1, a1[1], a1[2]);
  fputc(10, v5);
  v6 = a1[6];
  if (a1[7] != v6)
  {
    v7 = 0;
    do
    {
      fprintf(v5, "%d\t", *(_DWORD *)(v6 + 4 * v7++));
      v6 = a1[6];
    }
    while (v7 < (a1[7] - v6) >> 2);
  }
  fputc(10, v5);
  v8 = a1[3];
  if (a1[4] != v8)
  {
    v9 = 0;
    do
    {
      fprintf(v5, "%d\t", *(_DWORD *)(v8 + 4 * v9++));
      v8 = a1[3];
    }
    while (v9 < (a1[4] - v8) >> 2);
  }
  fputc(10, v5);
  v10 = a1[9];
  if (a1[10] != v10)
  {
    v11 = 0;
    do
    {
      fprintf(v5, "%0.32f\t", *(double *)(v10 + 8 * v11++));
      v10 = a1[9];
    }
    while (v11 < (a1[10] - v10) >> 3);
  }
  fputc(10, v5);
  return fclose(v5);
}

void sub_1D4D71818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D71858(void *a1, uint64_t a2)
{
  void *v3[3];
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *__p;
  void *v9;

  sub_1D4D711D8(a1, (uint64_t)v3);
  sub_1D4D71638(v3, a2);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_1D4D718C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D715E8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D718D4(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1D4D71950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D71964(uint64_t *a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  FILE *v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v9;
  __int128 v10;
  void *exception;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, ".");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8268838](exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    do
    {
      fprintf(v5, "%0.32f\n", *(double *)(v6 + 8 * v7++));
      v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
  }
  return fclose(v5);
}

void sub_1D4D71A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D71AB8(uint64_t *a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  FILE *v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v9;
  __int128 v10;
  void *exception;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, ".");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8268838](exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    do
    {
      fprintf(v5, "%d\n", *(_DWORD *)(v6 + 4 * v7++));
      v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
  }
  return fclose(v5);
}

void sub_1D4D71BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D71C0C(uint64_t a1, const void **a2)
{
  void *v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *v8;
  __int128 v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  __int128 v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  std::string *v18;
  __int128 v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  std::string *v23;
  __int128 v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  std::string *v28;
  __int128 v29;
  std::string v30;
  void *__p[2];
  std::string::size_type v32;

  v4 = *(void **)a1;
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = &v30;
  sub_1D4D72950((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  v8 = std::string::append(&v30, "cnstr_A0.txt");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v32 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71858(v4, (uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = &v30;
  sub_1D4D72950((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  v13 = std::string::append(&v30, "cnstr_b0.txt");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964((uint64_t *)(a1 + 16), (uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = &v30;
  sub_1D4D72950((uint64_t)&v30, v15 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = *a2;
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 47;
  v18 = std::string::append(&v30, "cnstr_ineq.txt");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71AB8((uint64_t *)(a1 + 40), (uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) >= 0)
    v20 = *((unsigned __int8 *)a2 + 23);
  else
    v20 = (size_t)a2[1];
  v21 = &v30;
  sub_1D4D72950((uint64_t)&v30, v20 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if (*((char *)a2 + 23) >= 0)
      v22 = a2;
    else
      v22 = *a2;
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 47;
  v23 = std::string::append(&v30, "cnstr_lb.txt");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964((uint64_t *)(a1 + 64), (uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) >= 0)
    v25 = *((unsigned __int8 *)a2 + 23);
  else
    v25 = (size_t)a2[1];
  v26 = &v30;
  sub_1D4D72950((uint64_t)&v30, v25 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v26, v27, v25);
  }
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 47;
  v28 = std::string::append(&v30, "cnstr_ub.txt");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v32 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964((uint64_t *)(a1 + 88), (uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1D4D71FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D72020(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;

  sub_1D4D71C0C(*(_QWORD *)(a1 + 40), (const void **)a2);
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = &v17;
  sub_1D4D72950((uint64_t)&v17, v6 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = std::string::append(&v17, "c.txt");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v19 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964((uint64_t *)(a1 + 48), (uint64_t)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if (!a3)
      return 0;
  }
  else if (!a3)
  {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = &v17;
  sub_1D4D72950((uint64_t)&v17, v11 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const void *)a2;
    else
      v13 = *(const void **)a2;
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
  v14 = std::string::append(&v17, "x.txt");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v19 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964(a3, (uint64_t)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1D4D721DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D72218(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  std::string *v15;
  __int128 v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  __int128 v21;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;

  sub_1D4D71C0C(a1[5], (const void **)a2);
  v6 = (void *)a1[6];
  if (*(char *)(a2 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = &v23;
  sub_1D4D72950((uint64_t)&v23, v7 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 47;
  v10 = std::string::append(&v23, "Q.txt");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71858(v6, (uint64_t)__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = &v23;
  sub_1D4D72950((uint64_t)&v23, v12 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 47;
  v15 = std::string::append(&v23, "c.txt");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964(a1 + 7, (uint64_t)__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!a3)
      return 0;
  }
  else if (!a3)
  {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = &v23;
  sub_1D4D72950((uint64_t)&v23, v17 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*(char *)(a2 + 23) >= 0)
      v19 = (const void *)a2;
    else
      v19 = *(const void **)a2;
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 47;
  v20 = std::string::append(&v23, "x.txt");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v25 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_1D4D71964(a3, (uint64_t)__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1D4D7248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D4D724D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1D4D729D4((char **)a1, a2 - v2);
  }
}

void sub_1D4D72500(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5EA14(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1D4D72594(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D6053C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D4D725EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D72608(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1D8268874](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1D4D7276C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1D8268880](v13);
  return a1;
}

void sub_1D4D72710(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1D8268880](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D4D726F0);
}

void sub_1D4D72758(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D7276C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_1D4D728A8(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1D4D7288C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D728A8(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4D6C290();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1D4D72950(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4D6C290();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1D4D729D4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1D4D5DFA8();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D4D5EA14(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1D4D72ADC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (a2)
  {
    v3 = *(void **)(a2 + 48);
    if (v3)
    {
      *(_QWORD *)(a2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 24);
    if (v4)
    {
      *(_QWORD *)(a2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v5);
    }
    JUMPOUT(0x1D826897CLL);
  }
}

double sub_1D4D72B44(uint64_t a1)
{
  int v1;
  unsigned int v2;
  double result;
  int v4;
  double v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  double v9;
  int v10;
  double v11;

  v1 = 0;
  v2 = 0;
  result = 0.0;
  do
  {
    v4 = 0;
    v5 = 1.0;
    v6 = v2;
    v7 = v1;
    v8 = v2;
    v9 = 1.0;
    v10 = v1;
    do
    {
      v9 = v9 * *(double *)(a1 + 8 * (v7 - 9 * (v6 / 3)));
      v11 = *(double *)(a1 + 8 * (v10 - 9 * (v8 / 3)));
      ++v4;
      v10 += 7;
      v5 = v5 * v11;
      v8 += 2;
      v7 += 4;
      ++v6;
    }
    while (v4 != 3);
    result = result + v9 - v5;
    ++v2;
    v1 += 3;
  }
  while (v2 != 3);
  return result;
}

void sub_1D4D72BDC(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  uint64_t v6;
  double v7;

  v4 = sub_1D4D72B44(a2);
  v5 = 1.0;
  if (v4 != 0.0)
  {
    v5 = pow(fabs(v4), 0.333333333);
    if (v4 < 0.0)
      v5 = -v5;
  }
  v6 = 0;
  v7 = 1.0 / v5;
  do
  {
    *(double *)(a1 + v6) = v7 * *(double *)(a2 + v6);
    v6 += 8;
  }
  while (v6 != 72);
}

void sub_1D4D72C5C(_QWORD *a1, char *a2)
{
  sub_1D4D72C64(a1, a2, 1);
}

void sub_1D4D72C64(_QWORD *a1, char *a2, int a3)
{
  void *v6;
  const void *v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  char *v17;
  double *v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  uint64_t v36;
  double (*v37)(void *, double, double);
  double i;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __CLPK_doublecomplex *v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  uint64_t k;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  char *v54;
  double *v55;
  uint64_t m;
  __int128 v57;
  __CLPK_doublecomplex v58;
  double v59[2];
  void *__p[3];
  __CLPK_integer __lwork;
  __CLPK_integer __info;
  __CLPK_integer *__ipiv[3];
  __CLPK_doublecomplex *__work;
  __CLPK_doublecomplex *v65;
  __CLPK_doublecomplex *__a[3];
  __CLPK_integer __lda;
  void *v68[3];
  void *__dst[3];
  void *v70[3];
  void *v71[3];

  if (a3)
    v6 = &unk_1E988B1D0;
  else
    v6 = &unk_1E988B388;
  sub_1D4D73C98(v71, 9uLL);
  sub_1D4D73C98(v70, 3uLL);
  sub_1D4D604C8(__dst, 9uLL);
  v7 = __dst[0];
  memmove(__dst[0], a2, 0x48uLL);
  sub_1D4D73574(v71, (uint64_t *)v70, v7);
  if (a3)
  {
    *(_QWORD *)&v8 = 0x3BC79CA10C924223;
    while (1)
    {
      v9 = *((double *)v70[0] + 1);
      v11 = *((double *)v70[0] + 2);
      v10 = *((double *)v70[0] + 3);
      if (*(double *)v70[0] != v11 || v9 != v10)
      {
        v13 = *((double *)v70[0] + 4);
        v14 = *((double *)v70[0] + 5);
        if ((*(double *)v70[0] != v13 || v9 != v14) && (v13 != v11 || v14 != v10))
          break;
      }
      if (*(double *)&v8 >= 0.00001)
        break;
      v17 = (char *)__dst[0];
      *((double *)__dst[0] + 7) = *(double *)&v8 + *((double *)__dst[0] + 7);
      *(float64x2_t *)(v17 + 40) = vmlaq_n_f64(*(float64x2_t *)(v17 + 40), (float64x2_t)xmmword_1D4DB1DC0, *(double *)&v8);
      *(float64x2_t *)(v17 + 8) = vmlaq_n_f64(*(float64x2_t *)(v17 + 8), (float64x2_t)xmmword_1D4DB1DD0, *(double *)&v8);
      *((double *)v17 + 3) = *((double *)v17 + 3) + *(double *)&v8 * 1.5;
      v57 = v8;
      sub_1D4D73574(v71, (uint64_t *)v70, v17);
      *((_QWORD *)&v8 + 1) = *((_QWORD *)&v57 + 1);
      *(double *)&v8 = *(double *)&v57 * 10.0;
    }
  }
  else
  {
    v18 = (double *)v70[0];
    v19 = *(double *)v70[0];
    v20 = *((double *)v70[0] + 1);
    v21 = *((double *)v70[0] + 2);
    v22 = *((double *)v70[0] + 3);
    if (hypot(*(double *)v70[0] - v21, v20 - v22) < 0.00000001)
    {
      v23 = v18[4];
      v24 = v18[5];
      if (hypot(v19 - v23, v20 - v24) < 0.00000001
        && hypot(v23 - v21, v24 - v22) < 0.00000001
        && hypot(v19, v20) < 0.00000001)
      {
        v25 = 0;
        v26 = a2;
        do
        {
          v27 = 0;
          v28 = 3 * v25;
          v29 = (double *)a2;
          do
          {
            v30 = 0;
            v31 = v27 + v28;
            if (v25 == v27)
              v32 = 1.0;
            else
              v32 = 0.0;
            v33 = v32 + *(double *)&a2[8 * v27 + 8 * v28];
            *(double *)&a1[v31] = v33;
            v34 = v29;
            do
            {
              v35 = *v34;
              v34 += 3;
              v33 = v33 + *(double *)&v26[v30] * v35 * 0.5;
              *(double *)&a1[v31] = v33;
              v30 += 8;
            }
            while (v30 != 24);
            ++v27;
            ++v29;
          }
          while (v27 != 3);
          ++v25;
          v26 += 24;
        }
        while (v25 != 3);
        goto LABEL_58;
      }
    }
  }
  __a[0] = 0;
  __a[1] = 0;
  sub_1D4D73D0C(v68, 3uLL, __a);
  v36 = 0;
  if (!a3)
  {
    v37 = (double (*)(void *, double, double))sub_1D4D739DC;
    goto LABEL_38;
  }
  v37 = (double (*)(void *, double, double))sub_1D4D73994;
  for (i = ((double (*)(void *, double, double))sub_1D4D73994)(v6, *(double *)v70[0], *((double *)v70[0] + 1));
        ;
        i = v37(v6, *(double *)((char *)v70[0] + v36), *(double *)((char *)v70[0] + v36 + 8)))
  {
    v40 = (char *)v68[0] + v36;
    *(double *)v40 = i;
    *((_QWORD *)v40 + 1) = v39;
    v36 += 16;
    if (v36 == 48)
      break;
LABEL_38:
    ;
  }
  __lda = 3;
  sub_1D4D73D8C(__a, 9uLL);
  sub_1D4D73D8C(&__work, 0x3CuLL);
  sub_1D4D6A638(__ipiv, 3uLL);
  v41 = 0;
  __lwork = (unint64_t)((char *)v65 - (char *)__work) >> 4;
  __info = 0;
  v42 = (char *)v71[0];
  v43 = __a[0];
  do
  {
    v43[v41] = *(__CLPK_doublecomplex *)&v42[v41 * 16];
    ++v41;
  }
  while (v41 != 9);
  zgetrf_(&__lda, &__lda, v43, &__lda, __ipiv[0], &__info);
  zgetri_(&__lda, __a[0], &__lda, __ipiv[0], __work, &__lwork, &__info);
  sub_1D4D73C98(__p, 9uLL);
  v44 = 0;
  for (j = 0; j != 3; ++j)
  {
    v46 = 0;
    for (k = 0; k != 3; ++k)
    {
      v48 = 0;
      v49 = 0.0;
      v50 = v44;
      v51 = 0.0;
      do
      {
        v59[0] = sub_1D4D73ACC((double *)((char *)v71[0] + v50), (double *)((char *)v68[0] + v48 * 16));
        v59[1] = v52;
        v58 = __a[0][v46 + v48];
        v51 = v51 + sub_1D4D73ACC(v59, &v58.r);
        v49 = v49 + v53;
        ++v48;
        v50 += 48;
      }
      while (v48 != 3);
      v54 = (char *)__p[0];
      v55 = (double *)((char *)__p[0] + 48 * j + 16 * k);
      *v55 = v51;
      v55[1] = v49;
      v46 += 3;
    }
    v44 += 16;
  }
  for (m = 0; m != 144; m += 16)
    *a1++ = *(_QWORD *)&v54[m];
  __p[1] = v54;
  operator delete(v54);
  if (__ipiv[0])
  {
    __ipiv[1] = __ipiv[0];
    operator delete(__ipiv[0]);
  }
  if (__work)
  {
    v65 = __work;
    operator delete(__work);
  }
  if (__a[0])
  {
    __a[1] = __a[0];
    operator delete(__a[0]);
  }
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
LABEL_58:
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
}

void sub_1D4D73114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(_QWORD *)(v37 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v37 - 168);
  if (v40)
  {
    *(_QWORD *)(v37 - 160) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D731EC(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  if (!a2)
  {
    *(_QWORD *)&v5[0] = 0x3FF0000000000000;
    *(_QWORD *)&v6 = 0x3FF0000000000000;
    v8 = 0x3FF0000000000000;
  }
  v2 = 0;
  v3 = 1;
  do
  {
    if ((_DWORD)v2 != 2 && (_DWORD)v2 != 5 && vabdd_f64(*(double *)(a1 + 8 * v2), *((double *)v5 + v2)) > 0.00000001)
      v3 = 0;
    ++v2;
  }
  while (v2 != 9);
  return v3 & 1;
}

void sub_1D4D732A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4[16];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_1D4D72BDC((uint64_t)v4, a2);
  if (sub_1D4D731EC((uint64_t)v4, 0))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    v3 = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 40) = v3;
  }
  else
  {
    sub_1D4D72C64((_QWORD *)a1, v4, 1);
  }
}

void sub_1D4D7333C(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  _OWORD v13[4];
  uint64_t v14;
  uint64_t v15;

  v2 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2[1];
  v8 = *a2;
  v9 = v3;
  v4 = a2[3];
  v10 = a2[2];
  v11 = v4;
  v12 = -(*(double *)&v8 + *(double *)&v10);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v5 = 1;
  do
  {
    while ((_DWORD)v2 != 2 && (_DWORD)v2 != 5 && vabdd_f64(*((double *)&v8 + v2), *((double *)v13 + v2)) > 0.00000001)
    {
      v5 = 0;
      if (v2++ == 8)
        goto LABEL_12;
    }
    ++v2;
  }
  while (v2 != 9);
  if ((v5 & 1) != 0)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
    v7 = *((_QWORD *)&v10 + 1);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 40) = v7;
    return;
  }
LABEL_12:
  sub_1D4D72C64((_QWORD *)a1, (char *)&v8, 0);
}

double sub_1D4D7345C(double *a1, double *a2)
{
  uint64_t v4;
  double v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;

  v4 = 0;
  v5 = 0.0;
  v6 = a2;
  v7 = a2;
  do
  {
    v8 = 0;
    v9 = v6;
    do
    {
      v10 = *v9;
      v9 += 3;
      v5 = v5 + (v10 + v7[v8]) * (v10 + v7[v8]);
      ++v8;
    }
    while (v8 != 3);
    ++v4;
    v7 += 3;
    ++v6;
  }
  while (v4 != 3);
  v11 = sqrt(v5);
  if (v11 > 0.001)
    printf("Matrix is not skew-symmetric by %f.\n", v11);
  *a1 = (a2[7] - a2[5]) * 0.5;
  a1[1] = (a2[2] - a2[6]) * 0.5;
  a1[2] = (a2[3] - a2[1]) * 0.5;
  return v11;
}

double sub_1D4D7353C(uint64_t a1, double *a2)
{
  double result;
  double v3;
  double v4;
  double v5;

  v3 = a2[1];
  result = a2[2];
  v4 = *a2;
  v5 = -*a2;
  *(_QWORD *)a1 = 0;
  *(double *)(a1 + 8) = -result;
  *(double *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = v5;
  *(double *)(a1 + 48) = -v3;
  *(double *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void sub_1D4D73574(_QWORD *a1, uint64_t *a2, const void *a3)
{
  __CLPK_doublereal *v6;
  __CLPK_doublereal *v7;
  uint64_t v8;
  char v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __CLPK_doublereal *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __CLPK_doublereal *v21;
  __CLPK_doublereal *v22;
  __CLPK_doublereal *v23;
  double *v24;
  double v25;
  __CLPK_doublereal v26;
  char __jobvl;
  char __jobvr;
  __CLPK_integer v29;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvr;
  __CLPK_integer __lda;
  void *__p;
  _BYTE *v34;
  __CLPK_doublereal *__vl[3];
  void *v36[3];
  void *v37[3];
  void *v38[3];
  void *v39[3];

  sub_1D4D73858((uint64_t)a1, 9uLL);
  sub_1D4D73858((uint64_t)a2, 3uLL);
  sub_1D4D604C8(v39, 9uLL);
  sub_1D4D604C8(v38, 3uLL);
  sub_1D4D604C8(v37, 3uLL);
  sub_1D4D604C8(v36, 9uLL);
  sub_1D4D604C8(__vl, 9uLL);
  sub_1D4D604C8(&__p, 0x78uLL);
  __ldvr = 3;
  __lda = 3;
  v6 = (__CLPK_doublereal *)__p;
  v29 = 0;
  __lwork = (unint64_t)(v34 - (_BYTE *)__p) >> 3;
  __jobvr = 78;
  __jobvl = 86;
  v7 = (__CLPK_doublereal *)v39[0];
  memmove(v39[0], a3, 0x48uLL);
  dgeev_(&__jobvl, &__jobvr, &__lda, v7, &__lda, (__CLPK_doublereal *)v38[0], (__CLPK_doublereal *)v37[0], __vl[0], &__lda, (__CLPK_doublereal *)v36[0], &__ldvr, v6, &__lwork, &v29);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v38[0];
  v12 = v37[0];
  v13 = *a2;
  v14 = __vl[0];
  v15 = *a1 + 8;
  do
  {
    v16 = v12[v8];
    v17 = (_QWORD *)(v13 + 16 * v8);
    *v17 = v11[v8];
    v17[1] = v16;
    if (*(double *)&v12[v8] == 0.0)
    {
      v18 = 0;
      v19 = (_QWORD *)(v15 + 16 * v10);
      do
      {
        *(v19 - 1) = *(_QWORD *)&v14[v10 + v18];
        *v19 = 0;
        v19 += 2;
        ++v18;
      }
      while (v18 != 3);
      v10 += 3;
    }
    else
    {
      if ((v9 & 1) == 0)
      {
        v20 = 0;
        v21 = &v14[v10 + 3];
        v22 = (__CLPK_doublereal *)(v15 + 16 * (v10 + 3));
        v23 = &v14[v10];
        v24 = (double *)(v15 + 16 * v10);
        do
        {
          v25 = -v21[v20];
          *(v24 - 1) = v23[v20];
          *v24 = v25;
          v26 = v21[v20];
          *(v22 - 1) = v23[v20];
          *v22 = v26;
          ++v20;
          v22 += 2;
          v24 += 2;
        }
        while (v20 != 3);
        v10 += 6;
      }
      v9 = 1;
    }
    ++v8;
  }
  while (v8 != 3);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (__vl[0])
  {
    __vl[1] = __vl[0];
    operator delete(__vl[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
}

void sub_1D4D737C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(_QWORD *)(v27 - 128) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v27 - 112);
  if (v30)
  {
    *(_QWORD *)(v27 - 104) = v30;
    operator delete(v30);
  }
  v31 = *(void **)v26;
  if (*(_QWORD *)v26)
  {
    *(_QWORD *)(v26 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D73858(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1D4D73888((void **)a1, a2 - v2);
  }
}

void sub_1D4D73888(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_1D4D5DFA8();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1D4D61150(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

double sub_1D4D73994(long double a1, long double a2)
{
  long double v4;
  double v5;

  v4 = hypot(a1, a2);
  v5 = log(v4);
  atan2(a2, a1);
  return v5;
}

void sub_1D4D739DC(double a1, double a2)
{
  double v2[2];

  v2[0] = a1;
  v2[1] = a2;
  sub_1D4D73A00(v2);
}

void sub_1D4D73A00(double *a1)
{
  long double v1;
  double v2;
  double v3;

  v1 = *a1;
  v2 = a1[1];
  if (v2 == 0.0)
  {
    exp(v1);
    return;
  }
  if (fabs(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        return;
    }
    else if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v2 = 1.0;
    }
  }
  v3 = v2;
  exp(v1);
  __sincos_stret(v3);
}

double sub_1D4D73ACC(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

_QWORD *sub_1D4D73C98(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D61110(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1D4D73CF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D73D0C(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D61110(a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4D73D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D73D8C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D61110(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1D4D73DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1D4D73E00(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t i;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  __int128 v24;
  __n128 result;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _OWORD v35[4];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2[7];
  v4 = a2[8];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = v5 * v4 - v3 * v6;
  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = v3 * v12 - v10 * v4;
  v26 = v8;
  v27 = v13;
  v14 = v10 * v6 - v5 * v12;
  v28 = v14;
  v15 = v13 * v11 + v9 * v8 + v7 * v14;
  if (v15 >= 2.22044605e-16 || v15 <= -2.22044605e-16)
  {
    v26 = v8 / v15;
    v27 = v13 / v15;
    v28 = v14 / v15;
    v29 = (v7 * v6 - v11 * v4) / v15;
    v30 = (v9 * v4 - v7 * v12) / v15;
    v31 = (v11 * v12 - v9 * v6) / v15;
    v32 = (v11 * v3 - v7 * v5) / v15;
    v33 = (v7 * v10 - v9 * v3) / v15;
    v34 = (v9 * v5 - v11 * v10) / v15;
  }
  for (i = 0; i != 3; ++i)
  {
    v18 = 0;
    v19 = &v26;
    do
    {
      v20 = 0;
      v21 = 0.0;
      v22 = v19;
      do
      {
        v23 = *v22;
        v22 += 3;
        v21 = v21 + *(double *)(a3 + v20) * v23;
        v20 += 8;
      }
      while (v20 != 24);
      *((double *)v35 + 3 * i + v18++) = v21;
      ++v19;
    }
    while (v18 != 3);
    a3 += 24;
  }
  v24 = v35[3];
  *(_OWORD *)(a1 + 32) = v35[2];
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 64) = v36;
  result = (__n128)v35[1];
  *(_OWORD *)a1 = v35[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1D4D73F80(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CLPK_doublereal *p_a;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  __CLPK_doublereal *v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  __CLPK_integer v30;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __k;
  __CLPK_integer __n;
  __CLPK_integer __lda;
  __CLPK_doublereal __work[96];
  __CLPK_doublereal __tau[3];
  _QWORD v38[3];
  __CLPK_doublereal __a;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  __a = *(__CLPK_doublereal *)a3;
  v40 = v7;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  v45 = v6;
  v46 = v9;
  v10 = *(_QWORD *)(a3 + 56);
  v41 = *(_QWORD *)(a3 + 48);
  v42 = v5;
  v43 = v8;
  v44 = v10;
  v47 = *(_QWORD *)(a3 + 64);
  __n = 3;
  __lda = 3;
  __lwork = 96;
  __k = 3;
  __info = 0;
  p_a = &__a;
  dgerqf_(&__lda, &__n, &__a, &__lda, __tau, __work, &__lwork, &__info);
  v12 = 0;
  v13 = a1;
  do
  {
    v14 = 0;
    v15 = p_a;
    do
    {
      v16 = 0.0;
      if (v14 >= v12)
        v16 = *v15;
      v13[v14++] = v16;
      v15 += 3;
    }
    while (v14 != 3);
    ++v12;
    v13 += 3;
    ++p_a;
  }
  while (v12 != 3);
  v30 = 3;
  result = dorgrq_(&__lda, &__n, &__k, &__a, &__lda, __tau, __work, &v30, &__info);
  v18 = 0;
  v19 = v40;
  v20 = v41;
  v21 = v42;
  *(__CLPK_doublereal *)a2 = __a;
  *(_QWORD *)(a2 + 8) = v21;
  v22 = v43;
  v23 = v44;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v23;
  v24 = v46;
  *(_QWORD *)(a2 + 16) = v45;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 64) = v47;
  v25 = -1.0;
  if (*a1 <= 0.0)
    v26 = -1.0;
  else
    v26 = 1.0;
  if (a1[4] <= 0.0)
    v27 = -1.0;
  else
    v27 = 1.0;
  *(double *)v38 = v26;
  *(double *)&v38[1] = v27;
  if (a1[8] > 0.0)
    v25 = 1.0;
  *(double *)&v38[2] = v25;
  do
  {
    v28 = 0;
    v29 = *(double *)&v38[v18];
    do
    {
      a1[v28] = *(double *)&v38[v28] * a1[v28];
      *(double *)(a2 + v28 * 8) = v29 * *(double *)(a2 + v28 * 8);
      ++v28;
    }
    while (v28 != 3);
    ++v18;
    a2 += 24;
    a1 += 3;
  }
  while (v18 != 3);
  return result;
}

uint64_t sub_1D4D74170(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  double v13;
  uint64_t result;
  const double *v15;
  float64x2_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;
  uint64_t v22;

  v7 = 0;
  v22 = *MEMORY[0x1E0C80C00];
  do
  {
    v8 = 0;
    v9 = a4;
    do
    {
      v10 = 0;
      v11 = 0.0;
      v12 = v9;
      do
      {
        v13 = *v12;
        v12 += 3;
        v11 = v11 + *(double *)(a3 + v10) * v13;
        v10 += 8;
      }
      while (v10 != 24);
      *((double *)v20 + 3 * v7 + v8++) = v11;
      ++v9;
    }
    while (v8 != 3);
    ++v7;
    a3 += 24;
  }
  while (v7 != 3);
  v18[2] = v20[2];
  v18[3] = v20[3];
  v19 = v21;
  v18[0] = v20[0];
  v18[1] = v20[1];
  result = sub_1D4D73F80((double *)a2, a1, (uint64_t)v18);
  v15 = (const double *)(a2 + 64);
  v16 = vld1q_dup_f64(v15);
  v17 = 0;
  if (a5 <= 0.0)
  {
    do
    {
      *(float64x2_t *)(a2 + v17) = vdivq_f64(*(float64x2_t *)(a2 + v17), v16);
      v17 += 16;
    }
    while (v17 != 64);
  }
  else
  {
    do
    {
      *(float64x2_t *)(a2 + v17) = vdivq_f64(*(float64x2_t *)(a2 + v17), v16);
      v17 += 16;
    }
    while (v17 != 64);
  }
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

void sub_1D4D742A4(uint64_t a1, _QWORD *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *__p[3];
  _BYTE v42[72];
  char v43[72];
  double v44[11];

  v44[9] = *(double *)MEMORY[0x1E0C80C00];
  v9 = a2[1] - *a2;
  if (v9)
  {
    v19 = v9 / 304;
    if (sub_1D4D5B2D0((_QWORD *)a1))
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    else
      v20 = 0;
    v40 = a3;
    if (a3)
      v21 = v20;
    else
      v21 = 0;
    v22 = (_QWORD *)(a1 + 24);
    sub_1D4D745F0(a1 + 24, v21 + v19);
    v39 = v21 + v19;
    sub_1D4D745F0(a1 + 72, v21 + v19);
    sub_1D4D749BC(__p, v19);
    v23 = 0;
    v24 = 0;
    v44[2] = (a4 + -1.0) * 0.5;
    v44[1] = 0.0;
    v44[3] = 0.0;
    v44[6] = 0.0;
    v44[7] = 0.0;
    v44[8] = 1.0;
    v44[0] = a4 * 0.75;
    v44[4] = a4 * 0.75;
    v44[5] = (a5 + -1.0) * 0.5;
    v25 = v19 - 1;
    v37 = v19;
    v38 = v21;
    if (v19 <= 1)
      v19 = 1;
    v26 = 72 * v21;
    v27 = v19;
    do
    {
      sub_1D4D74170((uint64_t)__p[0] + v23, *(_QWORD *)(a1 + 72) + v26 + v23, *a2 + v24, v44, 0.001);
      v24 += 304;
      v23 += 72;
      --v27;
    }
    while (v27);
    if (v40 && v38)
    {
      sub_1D4D74170((uint64_t)v42, (uint64_t)v43, v40, v44, 0.001);
      sub_1D4D73E00(*v22 + 72 * v38, (double *)__p[0], (uint64_t)v42);
    }
    else
    {
      v28 = (_QWORD *)*v22;
      *v28 = 0x3FF0000000000000;
      v28[1] = 0;
      v28[2] = 0;
      v28[3] = 0;
      v28[4] = 0x3FF0000000000000;
      v28[5] = 0;
      v28[6] = 0;
      v28[7] = 0;
      v28[8] = 0x3FF0000000000000;
    }
    if (v37 >= 2)
    {
      v29 = 72;
      do
      {
        sub_1D4D73E00(*v22 + 72 * v38 + v29, (double *)((char *)__p[0] + v29), (uint64_t)__p[0] + v29 - 72);
        v29 += 72;
        --v25;
      }
      while (v25);
    }
    sub_1D4D74634(a1, v39, MEMORY[0x1E0CA2E18]);
    v30 = 24 * v38;
    v31 = 112;
    v32 = v19;
    do
    {
      v33 = *a2 + v31;
      v34 = *(_QWORD *)a1 + v30;
      v35 = *(_OWORD *)v33;
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(v33 + 16);
      *(_OWORD *)v34 = v35;
      v31 += 304;
      v30 += 24;
      --v32;
    }
    while (v32);
    sub_1D4D74670(a1 + 96, v39, 1);
    *(double *)(a1 + 120) = a8;
    *(double *)(a1 + 128) = a9;
    v36 = (double *)(*(_QWORD *)(a1 + 72) + 72 * v38 + 40);
    do
    {
      *(v36 - 3) = *(v36 - 3) - a6;
      *v36 = *v36 - a7;
      v36 += 9;
      --v19;
    }
    while (v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1D4D745C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D745F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1D4D747F0((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 72 * a2;
  }
}

void sub_1D4D74634(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1D4D74A5C((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_1D4D74670(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        sub_1D4D5DFA8();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      sub_1D4D74BD0(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      sub_1D4D74E88(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1D4D6A45C(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1D4D6A50C((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1D4D747D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D747F0(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      sub_1D4D5DFA8();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1D4D618FC(v4, v11);
    else
      v12 = 0;
    v14 = &v12[72 * v8];
    v15 = &v12[72 * v11];
    v16 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        v20 = *(_OWORD *)(v18 - 56);
        v21 = *(_OWORD *)(v18 - 40);
        v22 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 72;
        v18 -= 72;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_1D4D749BC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D618A8(a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4D74A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D74A5C(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1D4D60A34(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

void sub_1D4D74BD0(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1D4D5DFA8();
    v10 = 0;
    v11 = 0uLL;
    sub_1D4D61A14(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_1D4D74C8C(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D4D74C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D74C8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_1D4D74D2C(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_1D4D74D2C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_1D4D74DB8((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_1D4D74DB8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *sub_1D4D74E88@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void sub_1D4D74FB8(uint64_t a1, int a2, int a3, char a4, int a5, __n128 *a6, __n128 *a7, __n128 *a8)
{
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a3;
  *(_BYTE *)(a1 + 100) = a4;
  *(_DWORD *)(a1 + 96) = a5;
  v11 = a1 + 24;
  sub_1D4D60158(a1 + 24, a6);
  sub_1D4D60158(a1, a7);
  sub_1D4D60158(a1 + 48, a8);
  sub_1D4D75118(v11);
  sub_1D4D751CC(a1);
  sub_1D4D75280(a1 + 48);
  v12 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 48);
}

_OWORD *sub_1D4D75048(_OWORD *a1, int a2, int a3, char a4, int a5, __n128 *a6, uint64_t a7, uint64_t a8)
{
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __n128 v14;
  unint64_t v15;

  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v14 = *a6;
  v15 = a6[1].n128_u64[0];
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  a6->n128_u64[0] = 0;
  *(_OWORD *)v12 = *(_OWORD *)a7;
  v13 = *(_QWORD *)(a7 + 16);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  *(_OWORD *)__p = *(_OWORD *)a8;
  v11 = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)a8 = 0;
  sub_1D4D74FB8((uint64_t)a1, a2, a3, a4, a5, &v14, (__n128 *)v12, (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
  return a1;
}

_OWORD *sub_1D4D75110(_OWORD *a1, int a2, int a3, char a4, int a5, __n128 *a6, uint64_t a7, uint64_t a8)
{
  return sub_1D4D75048(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1D4D75118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_1D4D5E2CC(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D4D751CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 2;
  if (v6 < (v3 - (uint64_t)v4) >> 2)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 4 * v6;
    }
    else
    {
      v7 = (char *)sub_1D4D5EA14(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[4 * v6];
      v11 = &v7[4 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *(_DWORD *)(v12 - 4) = v13;
          v12 -= 4;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D4D75280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_1D4D5E2CC(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D4D75334(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  float64x2_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float v16;
  double v17;
  float64_t v18;
  float v19;
  double v20;
  float64_t v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  char v26;
  char v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  char v32;
  double v33;
  char v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t i;
  double v39;
  long double v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  long double __y;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56[4];
  _OWORD v57[2];
  __int128 v58;
  _BYTE v59[32];
  __int128 v60;
  uint64_t v61;
  double v62[4];
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;

  v3 = 0;
  v67 = *MEMORY[0x1E0C80C00];
  v61 = *((_QWORD *)a2 + 8);
  v4 = a2[3];
  *(_OWORD *)&v59[16] = a2[2];
  v60 = v4;
  v5 = a2[1];
  v58 = *a2;
  *(_OWORD *)v59 = v5;
  v6 = (float64x2_t)vdupq_lane_s64(v61, 0);
  do
  {
    *(float64x2_t *)&v59[v3 - 16] = vdivq_f64(*(float64x2_t *)&v59[v3 - 16], v6);
    v3 += 16;
  }
  while (v3 != 64);
  v7 = 0;
  v8 = *(double *)v59;
  v9 = *(double *)&v59[24];
  v10 = *(double *)&v60;
  *(_QWORD *)a1 = *(_QWORD *)v59;
  *(double *)(a1 + 8) = v9;
  v11 = *((double *)&v60 + 1);
  *(double *)(a1 + 48) = v10;
  *(double *)(a1 + 56) = v11;
  v57[0] = v58;
  v57[1] = *(_OWORD *)&v59[8];
  v56[0] = v8 * v10;
  v56[1] = v8 * v11;
  v56[2] = v10 * v9;
  v56[3] = v11 * v9;
  do
  {
    *(float64x2_t *)((char *)&v54 + v7 * 8) = vsubq_f64((float64x2_t)v57[v7 / 2], *(float64x2_t *)&v56[v7]);
    v7 += 2;
  }
  while (v7 != 4);
  v12 = 0;
  v14 = v54;
  v13 = v55;
  *(_QWORD *)&v15 = *(_OWORD *)&vmulq_f64(v13, v13);
  v16 = vmlad_n_f64(v15, v14.f64[0], v14.f64[0]);
  v17 = sqrtf(v16);
  if (v54.f64[0] >= 0.0)
    v17 = -v17;
  v18 = v54.f64[0] - v17;
  v19 = v15 + v18 * v18;
  v20 = sqrtf(v19);
  v21 = v18 / v20;
  v22 = v55.f64[0] / v20;
  v23 = v21 * -2.0 * v21 + 1.0;
  v24 = v22 * (v21 * -2.0);
  v63 = v23;
  v64 = v24;
  v25 = v22 * -2.0 * v22 + 1.0;
  v65 = v24;
  v66 = v25;
  v50 = v23;
  v51 = v24;
  __y = v24;
  v53 = v25;
  v26 = 1;
  do
  {
    v27 = v26;
    *(float64x2_t *)(&v46 + v12) = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v14, *(&v63 + v12)), v13, *(double *)((char *)&v63 + ((8 * v12) | 8)));
    v12 = 2;
    v26 = 0;
  }
  while ((v27 & 1) != 0);
  v28 = v46;
  if (v46 < 0.0)
  {
    v23 = -v23;
    v50 = v23;
    __y = -v24;
    v28 = -v46;
    v46 = -v46;
    v47 = -v47;
  }
  v29 = v49;
  if (v49 >= 0.0)
  {
    v30 = v48;
  }
  else
  {
    v51 = -v24;
    v53 = -v25;
    v30 = -v48;
    v29 = -v49;
    v48 = -v48;
    v49 = -v49;
  }
  v31 = 0;
  v32 = 1;
  v33 = v47;
  do
  {
    v34 = v32;
    v35 = (8 * v31) | 8;
    v36 = *(&v50 + v31);
    v37 = *(double *)((char *)&v50 + v35);
    v62[v31] = v36 * v28 + 0.0 + v37 * v30;
    *(double *)((char *)v62 + v35) = v36 * v33 + 0.0 + v37 * v29;
    v31 = 2;
    v32 = 0;
  }
  while ((v34 & 1) != 0);
  for (i = 0; i != 4; ++i)
  {
    v39 = (v54.f64[i] - v62[i]) / (v54.f64[i] + 1.0);
    if (v39 < 0.0)
      v39 = -v39;
    if (v39 > 0.001)
      printf("warning: QR err = %f\n", v39);
  }
  v40 = atan2(__y, v23);
  v41 = 0;
  v42 = v28 * v29 - v33 * v30;
  *(double *)&v43 = sqrtf(v42);
  *(long double *)(a1 + 16) = v40;
  *(double *)(a1 + 24) = *(double *)&v43;
  v44 = (float64x2_t)vdupq_lane_s64(v43, 0);
  do
  {
    *(float64x2_t *)((char *)&v63 + v41) = vdivq_f64(*(float64x2_t *)((char *)&v46 + v41), v44);
    v41 += 16;
  }
  while (v41 != 32);
  v45 = v64 / v63;
  *(double *)(a1 + 32) = v63;
  *(double *)(a1 + 40) = v45;
}

__n128 sub_1D4D7566C(uint64_t a1)
{
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

__n128 sub_1D4D75688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  __n128 result;

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  result = *a6;
  *(_QWORD *)(a1 + 56) = a6[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1D4D756A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      sub_1D4D7DB18(v3, v2);
    else
      sub_1D4D98DAC(v2);
  }
  return a1;
}

uint64_t sub_1D4D756F0(uint64_t a1)
{
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = dispatch_semaphore_create(2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0);
  return a1;
}

void sub_1D4D75744(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D75768(uint64_t a1)
{
  void *v2;

  sub_1D4D757B4(a1);
  dispatch_release(*(dispatch_object_t *)a1);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1D4D757B4(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3 == *(_QWORD *)(a1 + 72))
      break;
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = sub_1D4D756A8(v4);
      MEMORY[0x1D826897C](v5, 0x1020C40A6EEA1E9);
      v3 = *(_QWORD *)(a1 + 80);
    }
    *(_QWORD *)(a1 + 80) = v3 - 8;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)a1);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t sub_1D4D75828(uint64_t result)
{
  *(_BYTE *)(result + 100) = 0;
  return result;
}

uint64_t sub_1D4D75830(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  uint64_t v12;
  const char *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  std::locale v21;

  *(_QWORD *)a1 = &off_1E988AA18;
  v12 = a1 + 40;
  sub_1D4D62E6C(a1 + 8, a3);
  sub_1D4D62E6C(v12, a3 + 32);
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a5;
  *(double *)(a1 + 96) = a6;
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 118) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  if (a4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
      v13 = "LP; ";
    else
      v13 = "QP; ";
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)v13, 4);
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"n = ", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    sub_1D4D72608(v14, (uint64_t)", m = ", 6);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v21, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"regularization: d1 = ", 21);
    v17 = (_QWORD *)std::ostream::operator<<();
    sub_1D4D72608(v17, (uint64_t)" d2 = ", 6);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v21, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return a1;
}

void sub_1D4D75A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v14;
  uint64_t v15;

  std::locale::~locale(&a10);
  v14 = *(void **)(v11 + 176);
  if (v14)
  {
    *(_QWORD *)(v11 + 184) = v14;
    operator delete(v14);
  }
  v15 = *v12;
  *v12 = 0;
  if (v15)
    sub_1D4D72ADC((uint64_t)v12, v15);
  sub_1D4D5B4E0(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D75AC8(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v11[4];

  *(_QWORD *)a1 = &off_1E988AA18;
  v2 = *(_OWORD *)(a1 + 128);
  v11[0] = *(_OWORD *)(a1 + 112);
  v11[1] = v2;
  v3 = *(_OWORD *)(a1 + 160);
  v11[2] = *(_OWORD *)(a1 + 144);
  v11[3] = v3;
  _SparseDestroyOpaqueSymbolic((SparseOpaqueSymbolicFactorization *)v11);
  v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(_QWORD *)(a1 + 184) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v5)
    sub_1D4D72ADC(a1 + 104, v5);
  v6 = *(_QWORD **)(a1 + 64);
  if (v6 == (_QWORD *)(a1 + 40))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = *(_QWORD **)(a1 + 32);
  if (v8 == (_QWORD *)(a1 + 8))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 8);
    goto LABEL_14;
  }
  if (v8)
  {
    v9 = 5;
LABEL_14:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_1D4D75BA0(uint64_t a1)
{
  sub_1D4D75AC8(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D75BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  int v9;

  v9 = 0;
  sub_1D4D75C4C(a1, &v9, &v8);
  v2 = *(_QWORD *)(a1 + 104);
  v3 = v8;
  v8 = 0;
  *(_QWORD *)(a1 + 104) = v3;
  if (v2)
  {
    sub_1D4D72ADC(a1 + 104, v2);
    v4 = v8;
    v8 = 0;
    if (v4)
      sub_1D4D72ADC((uint64_t)&v8, v4);
  }
  v5 = v9;
  v6 = 4 * (sub_1D4D76B20(a1) != 0);
  if (v5)
    return 3;
  else
    return v6;
}

void **sub_1D4D75C4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  void *v9;
  sparse_dimension matrix_number_of_columns;
  sparse_dimension matrix_number_of_rows;
  sparse_dimension v12;
  sparse_index v14;
  sparse_status v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  sparse_index v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  char *v26;
  double **v27;
  double *v28;
  unint64_t v29;
  double *v30;
  sparse_index v31;
  double *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  double *v38;
  double *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  sparse_dimension v55;
  sparse_dimension v56;
  sparse_dimension v57;
  sparse_index v58;
  sparse_status v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  double v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  int v77;
  double v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  void *v96;
  char *v97;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  char *v105;
  void *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  int v128;
  void *v129;
  char *v130;
  int64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _OWORD *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  unint64_t v153;
  uint64_t v156;
  sparse_dimension v158;
  sparse_dimension v159;
  sparse_dimension v160;
  void *v161;
  sparse_dimension v162;
  uint64_t v163;
  int v165;
  uint64_t v166;
  void *v167;
  unint64_t v168;
  int v169;
  BOOL v170;
  sparse_index v171;
  uint64_t v172;
  uint64_t v173;
  void *v174[2];
  char *v175;
  void *v176[2];
  uint64_t v177;
  void *v178[2];
  uint64_t v179;
  double v180;
  uint64_t v181;
  void *v182[2];
  char *v183;
  void *__p[2];
  _QWORD v185[2];
  __int128 v186;
  _QWORD v187[2];
  sparse_index column_end;
  sparse_index *v189;
  sparse_index *v190;
  uint64_t v191;
  double *v192;
  double *v193;
  uint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  const void *v197[3];
  char *v198;
  char *v199;
  char *v200;

  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v163 = v4;
  v6 = (int)v4;
  v169 = v4;
  v165 = v5;
  v156 = (int)v4;
  if (v4 << 32)
  {
    if (v4 << 32 < 0)
      sub_1D4D5DFA8();
    v7 = (char *)operator new(24 * (int)v4);
    v8 = 24 * ((24 * (int)v4 - 24) / 0x18uLL) + 24;
    bzero(v7, v8);
    v198 = v7;
    v199 = &v7[v8];
    v200 = &v7[24 * (int)v4];
    v6 = (int)v4;
  }
  v192 = 0;
  sub_1D4D6A0B8(v197, v6, &v192);
  sub_1D4D86220(*(uint64_t **)(a1 + 80), v197, &v195);
  v9 = v195;
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(v195);
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(v9);
  v12 = matrix_number_of_rows;
  if (matrix_number_of_columns != (int)v4 || matrix_number_of_rows != (int)v4)
    *a2 = -1;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  sub_1D4D6455C((uint64_t)&v192, matrix_number_of_columns);
  v189 = 0;
  v190 = 0;
  v191 = 0;
  sub_1D4D78AC4((uint64_t)&v189, matrix_number_of_columns);
  column_end = 0;
  if (v12)
  {
    v14 = 0;
    v172 = 0;
    v159 = matrix_number_of_columns;
    v161 = v9;
    v158 = v12;
    while (1)
    {
      v15 = sparse_extract_sparse_row_double((sparse_matrix_double)v9, v14, 0, &column_end, matrix_number_of_columns, v192, v189);
      if (v15 == SPARSE_ILLEGAL_PARAMETER)
      {
        *a2 = -1;
      }
      else if (v15 >= 1)
      {
        v16 = 0;
        v17 = 0;
        v18 = v15;
        v19 = v172;
        v166 = v15;
        do
        {
          v20 = v189[v16];
          if (v20 > v14)
            break;
          v21 = v192[v16];
          v22 = -v21;
          v23 = v20 == v14;
          v24 = -1.0 - v21;
          if (v20 == v14)
            v25 = v24;
          else
            v25 = v22;
          if (v25 != 0.0)
          {
            v26 = &v198[24 * v20];
            v27 = (double **)(v26 + 8);
            v28 = (double *)*((_QWORD *)v26 + 1);
            v29 = *((_QWORD *)v26 + 2);
            if ((unint64_t)v28 >= v29)
            {
              v31 = v14;
              v32 = *(double **)v26;
              v33 = ((uint64_t)v28 - *(_QWORD *)v26) >> 4;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 60)
                sub_1D4D5DFA8();
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 3 > v34)
                v34 = v35 >> 3;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
                v36 = 0xFFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              v173 = v19;
              v170 = v23;
              if (v36)
              {
                if (v36 >> 60)
                  sub_1D4D5E074();
                v37 = (char *)operator new(16 * v36);
              }
              else
              {
                v37 = 0;
              }
              v38 = (double *)&v37[16 * v33];
              v14 = v31;
              *(_DWORD *)v38 = v31;
              v38[1] = v25;
              v39 = v38;
              if (v28 != v32)
              {
                do
                {
                  *((_OWORD *)v39 - 1) = *((_OWORD *)v28 - 1);
                  v39 -= 2;
                  v28 -= 2;
                }
                while (v28 != v32);
                v28 = *(double **)v26;
              }
              *(_QWORD *)v26 = v39;
              v30 = v38 + 2;
              *v27 = v38 + 2;
              *((_QWORD *)v26 + 2) = &v37[16 * v36];
              if (v28)
                operator delete(v28);
              v19 = v173;
              v18 = v166;
              v23 = v170;
            }
            else
            {
              *(_DWORD *)v28 = v14;
              v28[1] = v25;
              v30 = v28 + 2;
            }
            *v27 = v30;
            ++v19;
          }
          v17 |= v23;
          ++v16;
        }
        while (v16 != v18);
        if ((v17 & 1) != 0)
          goto LABEL_62;
        goto LABEL_43;
      }
      v19 = v172;
LABEL_43:
      v40 = &v198[24 * v14];
      v41 = v40 + 8;
      v42 = (_QWORD *)*((_QWORD *)v40 + 1);
      v43 = *((_QWORD *)v40 + 2);
      if ((unint64_t)v42 >= v43)
      {
        v45 = *(_QWORD **)v40;
        v46 = ((uint64_t)v42 - *(_QWORD *)v40) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
          sub_1D4D5DFA8();
        v48 = v43 - (_QWORD)v45;
        if (v48 >> 3 > v47)
          v47 = v48 >> 3;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 60)
            sub_1D4D5E074();
          v50 = v19;
          v51 = (char *)operator new(16 * v49);
        }
        else
        {
          v50 = v19;
          v51 = 0;
        }
        v52 = &v51[16 * v46];
        *(_DWORD *)v52 = v14;
        *((_QWORD *)v52 + 1) = 0xBFF0000000000000;
        v53 = v52;
        if (v42 != v45)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v42 - 1);
            v53 -= 16;
            v42 -= 2;
          }
          while (v42 != v45);
          v42 = *(_QWORD **)v40;
        }
        *(_QWORD *)v40 = v53;
        v44 = v52 + 16;
        *v41 = v52 + 16;
        *((_QWORD *)v40 + 2) = &v51[16 * v49];
        if (v42)
          operator delete(v42);
        v19 = v50;
      }
      else
      {
        *(_DWORD *)v42 = v14;
        v42[1] = 0xBFF0000000000000;
        v44 = v42 + 2;
      }
      *v41 = v44;
      ++v19;
LABEL_62:
      v172 = v19;
      ++v14;
      matrix_number_of_columns = v159;
      LODWORD(v4) = v169;
      LODWORD(v5) = v165;
      v9 = v161;
      if (v14 == v158)
        goto LABEL_65;
    }
  }
  v172 = 0;
LABEL_65:
  v54 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 112);
  v55 = sparse_get_matrix_number_of_columns(v54);
  v56 = sparse_get_matrix_number_of_rows(v54);
  v57 = v56;
  if (v55 != v156 || v56 != (int)v5)
    *a2 = -1;
  if (v56)
  {
    v58 = 0;
    v167 = v54;
    v160 = v56;
    v162 = v55;
    do
    {
      v59 = sparse_extract_sparse_row_double((sparse_matrix_double)v54, v58, 0, &column_end, v55, v192, v189);
      if (v59 == SPARSE_ILLEGAL_PARAMETER)
      {
        *a2 = -1;
      }
      else if (v59 >= 1)
      {
        v60 = 0;
        v171 = v58;
        v61 = v58 + v4;
        v172 += (v59 - 1) + 1;
        v62 = v59;
        do
        {
          v63 = &v198[24 * v189[v60]];
          v64 = v192[v60];
          v66 = v63 + 8;
          v65 = (_QWORD *)*((_QWORD *)v63 + 1);
          v67 = *((_QWORD *)v63 + 2);
          if ((unint64_t)v65 >= v67)
          {
            v69 = *(_QWORD **)v63;
            v70 = ((uint64_t)v65 - *(_QWORD *)v63) >> 4;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 60)
              sub_1D4D5DFA8();
            v72 = v67 - (_QWORD)v69;
            if (v72 >> 3 > v71)
              v71 = v72 >> 3;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
              v73 = 0xFFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              if (v73 >> 60)
                sub_1D4D5E074();
              v74 = (char *)operator new(16 * v73);
            }
            else
            {
              v74 = 0;
            }
            v75 = &v74[16 * v70];
            *(_DWORD *)v75 = v61;
            *((double *)v75 + 1) = v64;
            v76 = v75;
            if (v65 != v69)
            {
              do
              {
                *((_OWORD *)v76 - 1) = *((_OWORD *)v65 - 1);
                v76 -= 16;
                v65 -= 2;
              }
              while (v65 != v69);
              v65 = *(_QWORD **)v63;
            }
            *(_QWORD *)v63 = v76;
            v68 = v75 + 16;
            *v66 = v75 + 16;
            *((_QWORD *)v63 + 2) = &v74[16 * v73];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_DWORD *)v65 = v61;
            *((double *)v65 + 1) = v64;
            v68 = v65 + 2;
          }
          *v66 = v68;
          ++v60;
        }
        while (v60 != v62);
        v54 = v167;
        LODWORD(v4) = v169;
        LODWORD(v5) = v165;
        v57 = v160;
        v55 = v162;
        v58 = v171;
      }
      ++v58;
    }
    while (v58 != v57);
  }
  v186 = 0uLL;
  v187[0] = 0;
  v77 = v5 + v4;
  sub_1D4D78AF4((void **)&v186, (int)v5 + (int)v4 + 1);
  v78 = *(double *)(a1 + 96);
  v79 = (int)v5;
  if (v78 == 0.0)
    v79 = 0;
  v80 = v79 + v172;
  __p[0] = 0;
  __p[1] = 0;
  v185[0] = 0;
  sub_1D4D72500(__p, v79 + v172);
  v182[0] = 0;
  v182[1] = 0;
  v183 = 0;
  v168 = v80;
  sub_1D4D78B88(v182, v80);
  v181 = 0;
  if ((int)v4 >= 1)
  {
    v81 = 0;
    do
    {
      v82 = (char *)*((_QWORD *)&v186 + 1);
      if (*((_QWORD *)&v186 + 1) >= v187[0])
      {
        v84 = (char *)v186;
        v85 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 3;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
          sub_1D4D5DFA8();
        v87 = v187[0] - v186;
        if ((uint64_t)(v187[0] - v186) >> 2 > v86)
          v86 = v87 >> 2;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v89 = (char *)sub_1D4D5E2CC((uint64_t)v187, v88);
          v82 = (char *)*((_QWORD *)&v186 + 1);
          v84 = (char *)v186;
        }
        else
        {
          v89 = 0;
        }
        v90 = &v89[8 * v85];
        *(_QWORD *)v90 = v181;
        v83 = v90 + 8;
        while (v82 != v84)
        {
          v91 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v90 - 1) = v91;
          v90 -= 8;
        }
        *(_QWORD *)&v186 = v90;
        *((_QWORD *)&v186 + 1) = v83;
        v187[0] = &v89[8 * v88];
        if (v84)
          operator delete(v84);
      }
      else
      {
        **((_QWORD **)&v186 + 1) = v181;
        v83 = v82 + 8;
      }
      *((_QWORD *)&v186 + 1) = v83;
      v92 = &v198[24 * v81];
      v93 = *(_QWORD *)v92;
      v94 = *((_QWORD *)v92 + 1);
      while (v93 != v94)
      {
        v95 = (char *)__p[1];
        if (__p[1] >= (void *)v185[0])
        {
          v97 = (char *)__p[0];
          v98 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 62)
            sub_1D4D5DFA8();
          v100 = v185[0] - (unint64_t)__p[0];
          if ((uint64_t)(v185[0] - (unint64_t)__p[0]) >> 1 > v99)
            v99 = v100 >> 1;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
            v101 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v101 = v99;
          if (v101)
          {
            v102 = (char *)sub_1D4D5EA14((uint64_t)v185, v101);
            v97 = (char *)__p[0];
            v95 = (char *)__p[1];
          }
          else
          {
            v102 = 0;
          }
          v103 = &v102[4 * v98];
          *(_DWORD *)v103 = *(_DWORD *)v93;
          v96 = v103 + 4;
          while (v95 != v97)
          {
            v104 = *((_DWORD *)v95 - 1);
            v95 -= 4;
            *((_DWORD *)v103 - 1) = v104;
            v103 -= 4;
          }
          __p[0] = v103;
          __p[1] = v96;
          v185[0] = &v102[4 * v101];
          if (v97)
            operator delete(v97);
        }
        else
        {
          *(_DWORD *)__p[1] = *(_DWORD *)v93;
          v96 = v95 + 4;
        }
        __p[1] = v96;
        v105 = (char *)v182[1];
        if (v182[1] >= v183)
        {
          v107 = (char *)v182[0];
          v108 = ((char *)v182[1] - (char *)v182[0]) >> 3;
          v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61)
            sub_1D4D5DFA8();
          v110 = v183 - (char *)v182[0];
          if ((v183 - (char *)v182[0]) >> 2 > v109)
            v109 = v110 >> 2;
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
            v111 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v111 = v109;
          if (v111)
          {
            v112 = (char *)sub_1D4D5E2CC((uint64_t)&v183, v111);
            v107 = (char *)v182[0];
            v105 = (char *)v182[1];
          }
          else
          {
            v112 = 0;
          }
          v113 = &v112[8 * v108];
          *(_QWORD *)v113 = *(_QWORD *)(v93 + 8);
          v106 = v113 + 8;
          while (v105 != v107)
          {
            v114 = *((_QWORD *)v105 - 1);
            v105 -= 8;
            *((_QWORD *)v113 - 1) = v114;
            v113 -= 8;
          }
          v182[0] = v113;
          v182[1] = v106;
          v183 = &v112[8 * v111];
          if (v107)
            operator delete(v107);
        }
        else
        {
          *(_QWORD *)v182[1] = *(_QWORD *)(v93 + 8);
          v106 = v105 + 8;
        }
        v182[1] = v106;
        ++v181;
        v93 += 16;
      }
      ++v81;
    }
    while (v81 != v163);
  }
  if (v78 == 0.0)
  {
    v115 = v77;
    sub_1D4D78C1C((uint64_t)&v186, v77, &v181);
  }
  else
  {
    v180 = *(double *)(a1 + 96) * *(double *)(a1 + 96);
    sub_1D4D69EE0((uint64_t)v182, v168, &v180);
    v115 = v77;
    if (v165 >= 1)
    {
      do
      {
        v116 = v181++;
        v117 = (char *)*((_QWORD *)&v186 + 1);
        if (*((_QWORD *)&v186 + 1) >= v187[0])
        {
          v119 = (char *)v186;
          v120 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 3;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61)
            sub_1D4D5DFA8();
          v122 = v187[0] - v186;
          if ((uint64_t)(v187[0] - v186) >> 2 > v121)
            v121 = v122 >> 2;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
            v123 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          if (v123)
          {
            v124 = (char *)sub_1D4D5E2CC((uint64_t)v187, v123);
            v117 = (char *)*((_QWORD *)&v186 + 1);
            v119 = (char *)v186;
          }
          else
          {
            v124 = 0;
          }
          v125 = &v124[8 * v120];
          *(_QWORD *)v125 = v116;
          v118 = v125 + 8;
          while (v117 != v119)
          {
            v126 = *((_QWORD *)v117 - 1);
            v117 -= 8;
            *((_QWORD *)v125 - 1) = v126;
            v125 -= 8;
          }
          *(_QWORD *)&v186 = v125;
          *((_QWORD *)&v186 + 1) = v118;
          v187[0] = &v124[8 * v123];
          if (v119)
            operator delete(v119);
        }
        else
        {
          **((_QWORD **)&v186 + 1) = v116;
          v118 = v117 + 8;
        }
        *((_QWORD *)&v186 + 1) = v118;
        v127 = (char *)__p[1];
        if (__p[1] >= (void *)v185[0])
        {
          v130 = (char *)__p[0];
          v131 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 62)
            sub_1D4D5DFA8();
          v133 = v185[0] - (unint64_t)__p[0];
          if ((uint64_t)(v185[0] - (unint64_t)__p[0]) >> 1 > v132)
            v132 = v133 >> 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
            v134 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v134 = v132;
          if (v134)
          {
            v135 = (char *)sub_1D4D5EA14((uint64_t)v185, v134);
            v130 = (char *)__p[0];
            v127 = (char *)__p[1];
          }
          else
          {
            v135 = 0;
          }
          v136 = &v135[4 * v131];
          *(_DWORD *)v136 = v169;
          v129 = v136 + 4;
          while (v127 != v130)
          {
            v137 = *((_DWORD *)v127 - 1);
            v127 -= 4;
            *((_DWORD *)v136 - 1) = v137;
            v136 -= 4;
          }
          __p[0] = v136;
          __p[1] = v129;
          v185[0] = &v135[4 * v134];
          if (v130)
            operator delete(v130);
          v128 = v169;
        }
        else
        {
          v128 = v169;
          *(_DWORD *)__p[1] = v169;
          v129 = v127 + 4;
        }
        __p[1] = v129;
        v169 = v128 + 1;
      }
      while (v128 + 1 < v77);
    }
  }
  v138 = (char *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1) >= v187[0])
  {
    v140 = (char *)v186;
    v141 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 3;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 61)
      sub_1D4D5DFA8();
    v143 = v187[0] - v186;
    if ((uint64_t)(v187[0] - v186) >> 2 > v142)
      v142 = v143 >> 2;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      v145 = (char *)sub_1D4D5E2CC((uint64_t)v187, v144);
      v138 = (char *)*((_QWORD *)&v186 + 1);
      v140 = (char *)v186;
    }
    else
    {
      v145 = 0;
    }
    v146 = &v145[8 * v141];
    v147 = &v145[8 * v144];
    *(_QWORD *)v146 = v181;
    v139 = v146 + 8;
    while (v138 != v140)
    {
      v148 = *((_QWORD *)v138 - 1);
      v138 -= 8;
      *((_QWORD *)v146 - 1) = v148;
      v146 -= 8;
    }
    *(_QWORD *)&v186 = v146;
    *((_QWORD *)&v186 + 1) = v139;
    v187[0] = v147;
    if (v140)
      operator delete(v140);
  }
  else
  {
    **((_QWORD **)&v186 + 1) = v181;
    v139 = v138 + 8;
  }
  *((_QWORD *)&v186 + 1) = v139;
  *a3 = 0;
  v149 = (_OWORD *)operator new();
  *(_OWORD *)v178 = v186;
  v179 = v187[0];
  v187[0] = 0;
  v186 = 0uLL;
  *(_OWORD *)v176 = *(_OWORD *)__p;
  v177 = v185[0];
  __p[0] = 0;
  __p[1] = 0;
  v185[0] = 0;
  *(_OWORD *)v174 = *(_OWORD *)v182;
  v175 = v183;
  v182[1] = 0;
  v183 = 0;
  v182[0] = 0;
  sub_1D4D75110(v149, v115, v115, 1, 14, (__n128 *)v178, (uint64_t)v176, (uint64_t)v174);
  v150 = *a3;
  *a3 = (uint64_t)v149;
  if (v150)
    sub_1D4D72ADC((uint64_t)a3, v150);
  if (v174[0])
  {
    v174[1] = v174[0];
    operator delete(v174[0]);
  }
  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v182[0])
  {
    v182[1] = v182[0];
    operator delete(v182[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v186)
  {
    *((_QWORD *)&v186 + 1) = v186;
    operator delete((void *)v186);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  v151 = v196;
  if (v196)
  {
    p_shared_owners = (unint64_t *)&v196->__shared_owners_;
    do
      v153 = __ldaxr(p_shared_owners);
    while (__stlxr(v153 - 1, p_shared_owners));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v197[0])
  {
    v197[1] = v197[0];
    operator delete((void *)v197[0]);
  }
  return sub_1D4D78C4C((void **)&v198);
}

void sub_1D4D769A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  v44 = *(void **)(v42 - 256);
  if (v44)
  {
    *(_QWORD *)(v42 - 248) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 216);
  if (v45)
  {
    *(_QWORD *)(v42 - 208) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 192);
  if (v46)
  {
    *(_QWORD *)(v42 - 184) = v46;
    operator delete(v46);
  }
  sub_1D4D6C1D0(v42 - 168);
  v47 = *(void **)(v42 - 152);
  if (v47)
  {
    *(_QWORD *)(v42 - 144) = v47;
    operator delete(v47);
  }
  sub_1D4D78C4C((void **)(v42 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D76B20(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _BOOL4 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  __int128 v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  SparseSymbolicFactorOptions options;
  SparseMatrixStructure Matrix;
  _OWORD v38[2];
  uint64_t v39;
  SparseSymbolicFactorOptions v40;
  _BYTE v41[256];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"Preparing Symbolic Factorization", 32);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
    v3 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale((std::locale *)v41);
    std::ostream::put();
    std::ostream::flush();
  }
  v4 = *(double *)(a1 + 96) == 0.0;
  memset(&v40, 0, sizeof(v40));
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_OWORD *)(v5 + 88);
  v38[0] = *(_OWORD *)(v5 + 72);
  v38[1] = v6;
  v39 = *(_QWORD *)(v5 + 104);
  v7 = sub_1D4D8C428((uint64_t)v38);
  sub_1D4D78CB8(v7, v4, (uint64_t)&v40);
  v8 = *(_OWORD *)(*(_QWORD *)(a1 + 104) + 88);
  *(_OWORD *)&Matrix.rowCount = *(_OWORD *)(*(_QWORD *)(a1 + 104) + 72);
  *(_OWORD *)&Matrix.rowIndices = v8;
  options = v40;
  if (Matrix.columnCount <= 0)
  {
    if (!options.reportError)
    {
      v9 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v9)
        sub_1D4DAF814(v9, v10, v11, v12, v13, v14, v15, v16);
      goto LABEL_21;
    }
    strcpy(v41, ".structure.columnCount must be greater than 0.\n");
    memset(&v41[48], 0, 208);
    ((void (*)(_BYTE *))options.reportError)(v41);
  }
  else
  {
    if ((~*(_WORD *)&Matrix.attributes & 0xC) == 0)
    {
      if (Matrix.rowCount == Matrix.columnCount)
      {
        _SparseSymbolicFactorSymmetric((SparseOpaqueSymbolicFactorization *)v41, SparseFactorizationLDLTUnpivoted, &Matrix, &options);
        goto LABEL_23;
      }
      if (options.reportError)
      {
        memset(&v41[63], 0, 193);
        strcpy(v41, "Matrix purports to be symmetric, but rowCount != columnCount.\n");
        ((void (*)(_BYTE *))options.reportError)(v41);
        goto LABEL_22;
      }
      v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v25)
        sub_1D4DAF7AC(v25, v26, v27, v28, v29, v30, v31, v32);
LABEL_21:
      _SparseTrap();
      goto LABEL_22;
    }
    if (!options.reportError)
    {
      v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v17)
        sub_1D4DAF7E0(v17, v18, v19, v20, v21, v22, v23, v24);
      goto LABEL_21;
    }
    memset(&v41[58], 0, 198);
    strcpy(v41, "Requested symmetric factorization of unsymmetric matrix.\n");
    ((void (*)(_BYTE *))options.reportError)(v41);
  }
LABEL_22:
  memset(v41, 0, 64);
  *(_DWORD *)v41 = -4;
LABEL_23:
  v33 = *(_OWORD *)&v41[16];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v41;
  *(_OWORD *)(a1 + 128) = v33;
  v34 = *(_OWORD *)&v41[48];
  *(_OWORD *)(a1 + 144) = *(_OWORD *)&v41[32];
  *(_OWORD *)(a1 + 160) = v34;
  if (!*(_DWORD *)(a1 + 112))
    return 0;
  printf("Symbolic factorization failed (status = %d).\n", *(_DWORD *)(a1 + 112));
  return 0xFFFFFFFFLL;
}

void sub_1D4D76E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::locale a33)
{
  std::locale::~locale(&a33);
  _Unwind_Resume(a1);
}

void sub_1D4D76E80(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  double Current;
  double v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  clock_t v19;
  void *v20;
  void *v21;
  void *v22;
  float v23;
  float v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  double v35;
  int v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  _QWORD *v62;
  double v63;
  clock_t v64;
  void *__p[3];
  void *v66[3];
  void *v67[3];
  void *v68[3];
  void *v69[3];
  void *v70[2];
  uint64_t v71;
  std::locale v72;

  Current = CFAbsoluteTimeGetCurrent();
  if (!a3)
    return;
  v9 = Current;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 80) = 0x7FF0000000000000;
  *(_DWORD *)(a3 + 88) = 0;
  v10 = (void **)(a3 + 8);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a3 + 56);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80)) & 1) == 0)
  {
    puts("Constant Hessian is required for this implementation.");
LABEL_15:
    v17 = 3;
LABEL_16:
    *(_DWORD *)a3 = v17;
    return;
  }
  v11 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(v11 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  if (v13)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    goto LABEL_15;
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    LODWORD(v70[0]) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 48))(v15, v70);
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (v16 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16))
  {
    if (*(_BYTE *)(a1 + 72))
      puts("Canceled IPOpt.");
    v17 = 2;
    goto LABEL_16;
  }
  v18 = sub_1D4D75BC4(a1);
  if (!*(_DWORD *)a3 && v18)
    *(_DWORD *)a3 = v18;
  v19 = clock();
  v69[0] = (void *)0x3FF0000000000000;
  sub_1D4D6A0B8(v70, v12, v69);
  v20 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a3 + 16) = v20;
    operator delete(v20);
    *v10 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v70;
  *(_QWORD *)(a3 + 24) = v71;
  v69[0] = 0;
  sub_1D4D6A0B8(v70, v13, v69);
  v21 = *(void **)(a3 + 32);
  if (v21)
  {
    *(_QWORD *)(a3 + 40) = v21;
    operator delete(v21);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v70;
  *(_QWORD *)(a3 + 48) = v71;
  v69[0] = (void *)0x3FF0000000000000;
  sub_1D4D6A0B8(v70, v12, v69);
  v22 = *(void **)(a3 + 56);
  if (v22)
  {
    *(_QWORD *)(a3 + 64) = v22;
    operator delete(v22);
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  *(_OWORD *)(a3 + 56) = *(_OWORD *)v70;
  *(_QWORD *)(a3 + 72) = v71;
  sub_1D4D604C8(v70, v12);
  sub_1D4D604C8(v69, v13);
  sub_1D4D604C8(v68, v12);
  sub_1D4D604C8(v67, v12);
  sub_1D4D604C8(v66, v13);
  v64 = v19;
  sub_1D4D604C8(__p, v12);
  v63 = CFAbsoluteTimeGetCurrent();
  v23 = a4;
  v24 = logf(v23);
  v25 = 0;
  v26 = 1.79769313e308;
  v27 = 1.79769313e308;
  while (!*(_DWORD *)a3)
  {
    sub_1D4D77880(a1, (uint64_t)v70, (uint64_t)v69, (double **)v68, (const void **)(a3 + 8), (const double **)(a3 + 32), (double **)(a3 + 56));
    sub_1D4D77A94(a1, (uint64_t)v70, (uint64_t)v69, a3 + 8, (double **)(a3 + 56));
    v29 = v28;
    if (*(_BYTE *)(a1 + 72))
    {
      sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"iter ", 5);
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = sub_1D4D72608(v30, (uint64_t)": ", 2);
      sub_1D4D72608(v31, (uint64_t)"error = ", 8);
      v32 = (_QWORD *)std::ostream::operator<<();
      sub_1D4D72608(v32, (uint64_t)", obj = ", 8);
      sub_1D4D86110(*(uint64_t **)(a1 + 80), (const void **)(a3 + 8));
      v33 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v34 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale(&v72);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v29 < a4)
      break;
    v35 = sub_1D4D8BF90(a3 + 8, (double **)(a3 + 56));
    v36 = sub_1D4D77BD8(a1, (double **)v67, (_QWORD **)v66, (uint64_t *)__p, (uint64_t *)v70, (double **)v69, (uint64_t *)v68, (uint64_t *)(a3 + 8), v35 / (double)(unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3), (uint64_t *)(a3 + 56));
    if (!*(_DWORD *)a3)
    {
      if (v36)
      {
        *(_DWORD *)a3 = v36;
        if (*(_BYTE *)(a1 + 72))
        {
          if (v36 == 4)
            puts("early terminate due to Sparse factor/solve error.");
        }
      }
    }
    sub_1D4D8C04C(a3 + 8, (double **)v67, 1.0);
    sub_1D4D8C04C(a3 + 32, (double **)v66, 1.0);
    sub_1D4D8C04C(a3 + 56, (double **)__p, 1.0);
    v37 = *(_QWORD *)(a1 + 32);
    if (v37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37))
    {
      LODWORD(v25) = v25 + 1;
      *(_DWORD *)a3 = 2;
      break;
    }
    if (v27 == 1.79769313e308)
    {
      v27 = v29;
      v38 = v29;
    }
    else
    {
      v38 = v26;
    }
    if (v29 >= v38)
      v26 = v38;
    else
      v26 = v29;
    v39 = *(_QWORD *)(a1 + 64);
    if (v39)
    {
      v40 = v27;
      v41 = logf(v40);
      v42 = v26;
      v43 = fmax(fmin((float)((float)(v41 - logf(v42)) / (float)(v41 - v24)), 1.0), 0.0);
      *(float *)&v72.__locale_ = v43;
      (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)v39 + 48))(v39, &v72);
    }
    if (a2 + 1 == ++v25)
    {
      LODWORD(v25) = a2 + 1;
      break;
    }
  }
  *(double *)(a3 + 80) = sub_1D4D86110(*(uint64_t **)(a1 + 80), (const void **)(a3 + 8));
  if (!*(_DWORD *)a3)
    *(_DWORD *)a3 = sub_1D4D77E68(a1, a3 + 8, a4, v44, (double **)(a3 + 56), (uint64_t)v70, (uint64_t)v69, (uint64_t)v68);
  *(_DWORD *)(a3 + 88) = v25;
  *(float *)(a3 + 100) = (float)((clock() - v64) / 0xF4240);
  v45 = CFAbsoluteTimeGetCurrent() - v9;
  *(float *)(a3 + 96) = v45;
  v46 = (CFAbsoluteTimeGetCurrent() - v63) / (double)*(int *)(a3 + 88);
  *(float *)(a3 + 92) = v46;
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_62;
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A60] + *(_QWORD *)(*MEMORY[0x1E0DE4A60] - 24)));
  v47 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
  v48 = sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"IPOpt Problem: ", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
  v49 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)a3 == 2)
  {
    v50 = "canceled after ";
    v51 = 15;
  }
  else if (*(_DWORD *)a3 == 4)
  {
    v50 = "factorization failed (likely due to ill-conditioning) in ";
    v51 = 57;
  }
  else
  {
    if ((int)v25 >= a2)
    {
      v62 = sub_1D4D718D4(MEMORY[0x1E0DE4A60]);
      sub_1D4D72608(v62, (uint64_t)"terminated after maximum number of iterations: ", 47);
      v53 = (_QWORD *)std::ostream::operator<<();
      goto LABEL_61;
    }
    v50 = "finished in ";
    v51 = 12;
  }
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)v50, v51);
  v52 = (_QWORD *)std::ostream::operator<<();
  v53 = sub_1D4D72608(v52, (uint64_t)" iterations", 11);
LABEL_61:
  sub_1D4D718D4(v53);
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"Flag = ", 7);
  v54 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
  v55 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
  printf("Iterations         : %llu\n", (int)v25);
  printf("Time per iteration : %.4f s\n", *(float *)(a3 + 92));
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"IPOpt CPU  time    : ", 21);
  v56 = (_QWORD *)std::ostream::operator<<();
  v57 = sub_1D4D72608(v56, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  v58 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"IPOpt wall time    : ", 21);
  v59 = (_QWORD *)std::ostream::operator<<();
  v60 = sub_1D4D72608(v59, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
  v61 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
LABEL_62:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_1D4D777B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_1D4D77880(uint64_t a1, uint64_t a2, uint64_t a3, double **a4, const void **a5, const double **a6, double **a7)
{
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  void *__p[3];
  void *v24[3];
  void *v25[3];

  v14 = *(uint64_t **)(a1 + 80);
  v16 = v14[1];
  v15 = v14[2];
  sub_1D4D86190(v14, a5, v25);
  sub_1D4D604C8(v24, v16);
  sub_1D4D8BF18(*(sparse_matrix_double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 112), (const double **)a5, (uint64_t)v24, CblasNoTrans);
  sub_1D4D604C8(__p, v15);
  sub_1D4D8BF18(*(sparse_matrix_double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 112), a6, (uint64_t)__p, CblasTrans);
  sub_1D4D6455C(a2, v15);
  sub_1D4D8C0EC(a2);
  sub_1D4D8C084(a2, (double **)v25);
  sub_1D4D8C04C(a2, (double **)__p, 1.0);
  sub_1D4D8C04C(a2, a7, 1.0);
  sub_1D4D8C04C(a2, (double **)a5, -(*(double *)(a1 + 88) * *(double *)(a1 + 88)));
  sub_1D4D6455C(a3, v16);
  sub_1D4D8C0EC(a3);
  sub_1D4D8C04C(a3, (double **)v24, 1.0);
  sub_1D4D8C084(a3, (double **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 128));
  sub_1D4D8C04C(a3, (double **)a6, *(double *)(a1 + 96) * *(double *)(a1 + 96));
  sub_1D4D6455C((uint64_t)a4, v15);
  if (v15)
  {
    v17 = (double *)*a5;
    v18 = *a7;
    v19 = *a4;
    do
    {
      v20 = *v17++;
      v21 = v20;
      v22 = *v18++;
      *v19++ = v21 * v22;
      --v15;
    }
    while (v15);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_1D4D77A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1D4D77A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double **a5)
{
  double *v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  void *__p[3];

  v9 = *(double **)a4;
  v10 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v10)
  {
    v11 = v10 >> 3;
    v12 = *a5;
    if (v11 <= 1)
      v11 = 1;
    while (*v9 >= 0.0 && *v12 >= 0.0)
    {
      ++v12;
      ++v9;
      if (!--v11)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    sub_1D4D8C00C(a2);
    sub_1D4D862FC(*(unint64_t **)(a1 + 80), __p);
    sub_1D4D8C00C((uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_1D4D8C00C(a3);
    sub_1D4D8C00C(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 128);
    fabs(sub_1D4D8BF90(a4, a5));
    sub_1D4D86110(*(uint64_t **)(a1 + 80), (const void **)a4);
  }
}

void sub_1D4D77BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D77BD8(uint64_t a1, double **a2, _QWORD **a3, uint64_t *a4, uint64_t *a5, double **a6, uint64_t *a7, uint64_t *a8, double a9, uint64_t *a10)
{
  double *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  BOOL v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  unsigned int v49;
  void *__p[3];

  v18 = (double *)*a8;
  v19 = a8[1] - *a8;
  if (v19)
  {
    v20 = v19 >> 3;
    v21 = (double *)*a10;
    if (v20 <= 1)
      v20 = 1;
    v22 = 6;
    while (*v21 > 0.0 && *v18 > 0.0)
    {
      ++v21;
      ++v18;
      if (!--v20)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    *(_BYTE *)(a1 + 208) = 0;
    v23 = sub_1D4D7835C(a1, a8, a10);
    v24 = sub_1D4D78514(a1, (_QWORD **)a2, a3, a4, a8, a10, a5, a6, a7);
    v25 = v24;
    v26 = 4 * ((_DWORD)v24 != 0);
    if (v23)
      v26 = 6;
    v49 = v26;
    v27 = sub_1D4D78788(v24, (double **)a8, a2);
    v29 = sub_1D4D78788(v28, (double **)a10, (double **)a4);
    v31 = sub_1D4D78874(v27, v29, v30, (uint64_t)a8, (uint64_t)a10, a2, (double **)a4);
    sub_1D4D604C8(__p, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16));
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
    if (v32)
    {
      v33 = (double *)*a7;
      v34 = *a2;
      v35 = (double *)*a4;
      v36 = (double *)__p[0];
      do
      {
        v37 = *v33++;
        v38 = v37;
        v39 = *v34++;
        v40 = v39;
        v41 = *v35++;
        *v36++ = v38 + v40 * v41 + -v31 * a9;
        --v32;
      }
      while (v32);
    }
    *(_BYTE *)(a1 + 208) = 1;
    v42 = sub_1D4D78514(a1, (_QWORD **)a2, a3, a4, a8, a10, a5, a6, (uint64_t *)__p);
    if ((_DWORD)v42)
      v43 = (v23 | v25) == 0;
    else
      v43 = 0;
    if (v43)
      v22 = 4;
    else
      v22 = v49;
    v44 = sub_1D4D78788(v42, (double **)a8, a2);
    v46 = sub_1D4D78788(v45, (double **)a10, (double **)a4);
    sub_1D4D8C0BC((uint64_t)a2, v44 * 0.99);
    v47 = v46 * 0.99;
    sub_1D4D8C0BC((uint64_t)a3, v47);
    sub_1D4D8C0BC((uint64_t)a4, v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v22;
}

void sub_1D4D77E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D77E68(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  char v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  std::locale v39;

  sub_1D4D77A94(a1, a6, a7, a2, a5);
  v16 = v15;
  v17 = *(double **)a2;
  v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v18)
  {
    v19 = v18 >> 3;
    v20 = *a5;
    if (v19 <= 1)
      v19 = 1;
    v21 = 1;
    do
    {
      if (*v17 < 0.0 || *v20 < 0.0)
        v21 = 0;
      ++v20;
      ++v17;
      --v19;
    }
    while (v19);
  }
  else
  {
    v21 = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v22 = sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"checking optimality conditions:", 31);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    v24 = sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"feasibility:", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"x > 0 and z > 0? ", 17);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"total constraint violation = ", 29);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
    v29 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"rx: (-Qx + A^Ty + z = c) ", 25);
    sub_1D4D8C00C(a6);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
    v31 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"ry: (Ax = b) = ", 15);
    sub_1D4D8C00C(a7);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
    v33 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"rz: (x.*z) = ", 13);
    sub_1D4D8C00C(a8);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v35 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"objective value:", 16);
    sub_1D4D86110(*(uint64_t **)(a1 + 80), (const void **)a2);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
  }
  return (v16 > a3) | ((v21 & 1) == 0);
}

void sub_1D4D7832C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D7835C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  double *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *__p[3];
  void *v27[3];

  v6 = *(_QWORD **)(a1 + 80);
  v7 = v6[1];
  v8 = v6[2];
  if (!(*(unsigned int (**)(_QWORD *))(*v6 + 24))(v6))
    return 0xFFFFFFFFLL;
  v9 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
  __p[0] = 0;
  sub_1D4D6A0B8(v27, v7 + v8, __p);
  if (v8)
  {
    v10 = 0;
    v11 = *v9;
    v12 = (v9[1] - *v9) >> 3;
    v13 = *a3;
    v14 = *a2;
    v15 = 1;
    v16 = (double *)v27[0];
    do
    {
      if (v12 <= v10)
        sub_1D4D5DDC8();
      v16[v10] = -(*(double *)(v11 + 8 * v10)
                 + *(double *)(v13 + 8 * v10) / *(double *)(v14 + 8 * v10)
                 + *(double *)(a1 + 88) * *(double *)(a1 + 88));
      v10 = v15;
    }
    while (v8 > v15++);
  }
  if (v7)
  {
    v18 = 0;
    v19 = (char *)v27[0] + 8 * v8;
    do
      *(double *)&v19[8 * v18++] = *(double *)(a1 + 96) * *(double *)(a1 + 96);
    while (v7 > v18);
  }
  v25 = 0;
  sub_1D4D6A0B8(__p, v7 + v8, &v25);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_OWORD *)(v20 + 88);
  v23[0] = *(_OWORD *)(v20 + 72);
  v23[1] = v21;
  v24 = *(_QWORD *)(v20 + 104);
  sub_1D4D8C430((uint64_t)v23, (uint64_t *)__p, (uint64_t *)v27);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  return 0;
}

void sub_1D4D784DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D78514(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, double **a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  void *__p[3];
  void *v58[3];
  double *v59;
  double *v60;

  v16 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(v16 + 8);
  v17 = *(_QWORD *)(v16 + 16);
  sub_1D4D604C8(&v59, (a5[1] - *a5) >> 3);
  v19 = v59;
  if (v60 != v59)
  {
    v20 = 0;
    v21 = v60 - v59;
    v22 = *a7;
    v23 = *a9;
    v24 = *a5;
    do
    {
      v19[v20] = *(double *)(v22 + 8 * v20) - *(double *)(v23 + 8 * v20) / *(double *)(v24 + 8 * v20);
      ++v20;
    }
    while (v21 > v20);
  }
  sub_1D4D604C8(v58, v18 + v17);
  if (v17)
  {
    v25 = v59;
    v26 = (double *)v58[0];
    v27 = v17;
    do
    {
      v28 = *v25++;
      *v26++ = -v28;
      --v27;
    }
    while (v27);
  }
  if (v18)
  {
    v29 = *a8;
    v30 = (double *)((char *)v58[0] + 8 * v17);
    v31 = v18;
    do
    {
      v32 = *v29++;
      *v30++ = -v32;
      --v31;
    }
    while (v31);
  }
  v56 = 0;
  sub_1D4D6A0B8(__p, v18 + v17, &v56);
  v33 = *(_QWORD *)(a1 + 104);
  v34 = *(_OWORD *)(v33 + 88);
  v54[0] = *(_OWORD *)(v33 + 72);
  v54[1] = v34;
  v55 = *(_QWORD *)(v33 + 104);
  v35 = sub_1D4D789BC(a1, (uint64_t)__p, (uint64_t)v54, (uint64_t)v58);
  if (v17)
  {
    v36 = (uint64_t *)__p[0];
    v37 = *a2;
    v38 = v17;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      --v38;
    }
    while (v38);
  }
  if (v18)
  {
    v40 = *a3;
    v41 = (uint64_t *)((char *)__p[0] + 8 * v17);
    do
    {
      v42 = *v41++;
      *v40++ = v42;
      --v18;
    }
    while (v18);
  }
  v43 = *a4;
  v44 = a4[1];
  v45 = v44 - *a4;
  if (v44 != *a4)
  {
    v46 = 0;
    v47 = v45 >> 3;
    v48 = *a9;
    v49 = *a6;
    v50 = *a2;
    v51 = *a5;
    do
    {
      *(double *)(v43 + 8 * v46) = -(*(double *)(v48 + 8 * v46) + *(double *)(v49 + 8 * v46) * *(double *)&v50[v46])
                                 / *(double *)(v51 + 8 * v46);
      ++v46;
    }
    while (v47 > v46);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  return v35;
}

void sub_1D4D7873C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D4D78788(uint64_t a1, double **a2, double **a3)
{
  double *v5;
  double *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v20;
  void *__p[3];

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v20 = 0x3FF0000000000000;
  sub_1D4D6A0B8(__p, v7, &v20);
  v8 = (double *)__p[0];
  if (v5 != v6)
  {
    v9 = *a3;
    v10 = *a2;
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = v7;
    v12 = (double *)__p[0];
    v13 = v11;
    do
    {
      v14 = -*v10;
      if (*v9 <= v14)
        *v12 = v14 / *v9;
      ++v9;
      ++v10;
      ++v12;
      --v13;
    }
    while (v13);
    v15 = 1.0;
    v16 = v8;
    do
    {
      v17 = *v16++;
      v18 = v17;
      if (v17 < v15)
        v15 = v18;
      --v11;
    }
    while (v11);
    goto LABEL_15;
  }
  v15 = 1.0;
  if (__p[0])
  {
LABEL_15:
    __p[1] = v8;
    operator delete(v8);
  }
  return v15;
}

double sub_1D4D78874(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, double **a6, double **a7)
{
  double v13;
  double v14;
  double v15;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_1D4D60B28(&v20, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  sub_1D4D8C04C((uint64_t)&v20, a6, a1);
  __p = 0;
  v18 = 0;
  v19 = 0;
  sub_1D4D60B28(&__p, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  sub_1D4D8C04C((uint64_t)&__p, a7, a2);
  v13 = sub_1D4D8BF90((uint64_t)&v20, (double **)&__p);
  v14 = sub_1D4D8BF90(a4, (double **)a5);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v15 = v13 / v14;
  if (v13 / v14 < 0.0)
    v15 = 0.0;
  if (v15 > 1.0)
    v15 = 1.0;
  return v15 * (v15 * v15);
}

void sub_1D4D7897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D789BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  SparseOpaqueFactorization_Double v21;
  uint64_t v22;
  _OWORD v23[6];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[6];
  uint64_t v28;

  if (!*(_BYTE *)(a1 + 208))
  {
    v7 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v7;
    v26 = *(_QWORD *)(a3 + 32);
    sub_1D4D78D70((_OWORD *)a1, (uint64_t)v25, (uint64_t)v27);
    v8 = v27[4];
    v9 = v27[5];
    v10 = v27[2];
    *(_OWORD *)(a1 + 264) = v27[3];
    *(_OWORD *)(a1 + 280) = v8;
    *(_OWORD *)(a1 + 296) = v9;
    v11 = v27[1];
    *(_OWORD *)(a1 + 216) = v27[0];
    *(_OWORD *)(a1 + 232) = v11;
    *(_QWORD *)(a1 + 312) = v28;
    *(_OWORD *)(a1 + 248) = v10;
  }
  v24 = *(_QWORD *)(a1 + 312);
  v12 = *(_OWORD *)(a1 + 232);
  v23[0] = *(_OWORD *)(a1 + 216);
  v23[1] = v12;
  v13 = *(_OWORD *)(a1 + 264);
  v14 = *(_OWORD *)(a1 + 280);
  v23[2] = *(_OWORD *)(a1 + 248);
  v23[3] = v13;
  v15 = *(_OWORD *)(a1 + 296);
  v23[4] = v14;
  v23[5] = v15;
  v16 = sub_1D4D790CC(a1, a2, (uint64_t)v23, a4);
  if (*(_BYTE *)(a1 + 208))
  {
    v17 = *(_OWORD *)(a1 + 296);
    *(_OWORD *)&v21.userFactorStorage = *(_OWORD *)(a1 + 280);
    *(_OWORD *)&v21.solveWorkspaceRequiredStatic = v17;
    v22 = *(_QWORD *)(a1 + 312);
    v18 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)&v21.status = *(_OWORD *)(a1 + 216);
    *(_OWORD *)&v21.symbolicFactorization.columnCount = v18;
    v19 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v21.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 248);
    *(_OWORD *)&v21.symbolicFactorization.factorSize_Float = v19;
    _SparseDestroyOpaqueNumeric_Double(&v21);
  }
  return v16;
}

void sub_1D4D78AC4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4D79488((char **)a1, a2 - v2);
  }
}

void sub_1D4D78AF4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5E2CC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4D78B88(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5E2CC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4D78C1C(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4D79590((void **)a1, a2 - v3, a3);
  }
}

void **sub_1D4D78C4C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1D4D78CB8(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  void *__p;
  _DWORD *v8;
  uint64_t v9;

  *(_OWORD *)a3 = xmmword_1E988B3B8;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1E988B3C8;
  *(_OWORD *)(a3 + 32) = xmmword_1E988B3D8;
  __p = 0;
  v8 = 0;
  v9 = 0;
  if (a2)
  {
    sub_1D4D724D0((uint64_t)&__p, a1);
    v5 = __p;
    if (a1)
    {
      v6 = 0;
      do
      {
        v5[v6] = v6;
        ++v6;
      }
      while (a1 != v6);
      *(_BYTE *)(a3 + 4) = 1;
      *(_QWORD *)(a3 + 8) = v5;
    }
    else
    {
      *(_BYTE *)(a3 + 4) = 1;
      *(_QWORD *)(a3 + 8) = v5;
      if (!v5)
        return;
    }
    v8 = v5;
    operator delete(v5);
  }
}

void sub_1D4D78D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D78D70(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (*workspaceSize_Double)(SparseOpaqueFactorization_Double *);
  uint64_t (*factorization)(_QWORD);
  void (*workspaceSize_Float)(void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  SparseNumericFactorOptions options;
  SparseMatrix_Double Matrix;
  _BYTE factor[64];
  SparseOpaqueFactorization_Double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = a1[8];
  *(_OWORD *)factor = a1[7];
  *(_OWORD *)&factor[16] = v4;
  v5 = a1[10];
  *(_OWORD *)&factor[32] = a1[9];
  *(_OWORD *)&factor[48] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&Matrix.structure.rowCount = *(_OWORD *)a2;
  *(_OWORD *)&Matrix.structure.rowIndices = v6;
  Matrix.data = *(double **)(a2 + 32);
  options = *(SparseNumericFactorOptions *)ymmword_1D4DB1E00;
  if (*(_DWORD *)factor || !*(_QWORD *)&factor[24])
  {
    v14 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v14)
      sub_1D4DAF848(v14, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_16;
  }
  _SparseGetOptionsFromSymbolicFactor((SparseSymbolicFactorOptions *)&v43, (SparseOpaqueSymbolicFactorization *)factor);
  workspaceSize_Double = (void (*)(SparseOpaqueFactorization_Double *))v43.symbolicFactorization.workspaceSize_Double;
  if (*(_QWORD *)&Matrix.structure.rowCount != *(_QWORD *)&factor[4]
    || *(&Matrix.structure.blockSize + 2) != factor[16]
    || ((*(unsigned __int16 *)&factor[12] ^ *(_WORD *)&Matrix.structure.attributes) & 1) != 0)
  {
    if (v43.symbolicFactorization.workspaceSize_Double)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "%s does not match that used for symbolic factorization stored in %s.\n", "Matrix", "symbolicFactor");
      workspaceSize_Double(&v43);
LABEL_17:
      *(_QWORD *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v22 = -4;
LABEL_18:
      *(_DWORD *)a3 = v22;
      *(_DWORD *)(a3 + 8) = v22;
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1D4DAF95C();
LABEL_16:
    _SparseTrap();
    goto LABEL_17;
  }
  factorization = (uint64_t (*)(_QWORD))v43.symbolicFactorization.factorization;
  workspaceSize_Float = (void (*)(void *))v43.symbolicFactorization.workspaceSize_Float;
  v10 = ((uint64_t (*)(_QWORD))v43.symbolicFactorization.factorization)(*(_QWORD *)&factor[56]);
  if (!v10)
  {
    if (workspaceSize_Double)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "Failed to allocate factor storage of size %ld bytes.");
LABEL_23:
      workspaceSize_Double(&v43);
LABEL_31:
      *(_QWORD *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v22 = -3;
      goto LABEL_18;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1D4DAF87C((uint64_t)&factor[56], v26, v27, v28, v29, v30, v31, v32);
LABEL_30:
    _SparseTrap();
    goto LABEL_31;
  }
  v11 = (void *)v10;
  v12 = (void *)factorization(*(_QWORD *)&factor[40]);
  if (!v12)
  {
    workspaceSize_Float(v11);
    if (workspaceSize_Double)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "Failed to allocate workspace of size %ld bytes.");
      goto LABEL_23;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      sub_1D4DAF8EC((uint64_t)&factor[40], v33, v34, v35, v36, v37, v38, v39);
    goto LABEL_30;
  }
  v13 = v12;
  if ((factor[17] & 0xFE) == 0x28)
    _SparseNumericFactorQR_Double(&v43, (SparseOpaqueSymbolicFactorization *)factor, &Matrix, &options, v11, v12);
  else
    _SparseNumericFactorSymmetric_Double(&v43, (SparseOpaqueSymbolicFactorization *)factor, &Matrix, &options, v11, v12);
  v23 = *(_OWORD *)&v43.solveWorkspaceRequiredStatic;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)&v43.userFactorStorage;
  *(_OWORD *)(a3 + 80) = v23;
  *(_QWORD *)(a3 + 96) = v44;
  v24 = *(_OWORD *)&v43.symbolicFactorization.columnCount;
  *(_OWORD *)a3 = *(_OWORD *)&v43.status;
  *(_OWORD *)(a3 + 16) = v24;
  v25 = *(_OWORD *)&v43.symbolicFactorization.factorSize_Float;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v43.symbolicFactorization.workspaceSize_Float;
  *(_OWORD *)(a3 + 48) = v25;
  *(_BYTE *)(a3 + 72) = 0;
  workspaceSize_Float(v13);
}

uint64_t sub_1D4D790CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (__cdecl *reportError)(const char *);
  int v28;
  int v29;
  int v30;
  void (__cdecl *free)(void *);
  uint64_t v32;
  void *v33;
  void *v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v51;
  DenseMatrix_Double Soln;
  DenseMatrix_Double RHS;
  SparseSymbolicFactorOptions v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v8 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 - *(_QWORD *)a2;
  if (v7 != *(_QWORD *)a2)
  {
    v10 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1)
      v10 = 1;
    bzero(v8, 8 * v10);
  }
  if (!*(_DWORD *)a3)
  {
    v14 = *(double **)a4;
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v16;
    v51 = *(_QWORD *)(a3 + 96);
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a3;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v17;
    v18 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v18;
    if (Factored.symbolicFactorization.status || !Factored.symbolicFactorization.workspaceSize_Float)
    {
      v19 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v19)
        sub_1D4DAF9F0(v19, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_14;
    }
    _SparseGetOptionsFromSymbolicFactor(&v54, &Factored.symbolicFactorization);
    reportError = v54.reportError;
    if (Factored.symbolicFactorization.status
      || !Factored.symbolicFactorization.workspaceSize_Float
      || Factored.status
      || !Factored.solveWorkspaceRequiredStatic)
    {
      if (!v54.reportError)
      {
        v35 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v35)
          sub_1D4DAFA24(v35, v36, v37, v38, v39, v40, v41, v42);
        goto LABEL_14;
      }
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      memset(&v54, 0, sizeof(v54));
      snprintf((char *)&v54, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    }
    else
    {
      if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
        v28 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
      else
        v28 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
      if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
        v29 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
      else
        v29 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
      if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
        v30 = v28;
      else
        v30 = v29;
      if (v29 == ((unint64_t)v9 >> 3))
      {
        if (v30 == ((unint64_t)(v15 - (_QWORD)v14) >> 3))
        {
          free = v54.free;
          RHS.rowCount = (unint64_t)(v15 - (_QWORD)v14) >> 3;
          RHS.columnCount = 1;
          *(_DWORD *)&RHS.attributes = 0;
          RHS.data = v14;
          RHS.columnStride = RHS.rowCount;
          *(_DWORD *)&Soln.attributes = 0;
          Soln.data = (double *)v8;
          Soln.rowCount = (unint64_t)v9 >> 3;
          Soln.columnCount = 1;
          Soln.columnStride = Soln.rowCount;
          v32 = v51 + Factored.solveWorkspaceRequiredPerRHS;
          v33 = (void *)((uint64_t (*)(size_t))v54.malloc)(v51 + Factored.solveWorkspaceRequiredPerRHS);
          if (v33)
          {
            v34 = v33;
            _SparseSolveOpaque_Double(&Factored, &RHS, &Soln, v33);
            ((void (*)(void *))free)(v34);
            return 0;
          }
          if (reportError)
          {
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v55 = 0u;
            memset(&v54, 0, sizeof(v54));
            snprintf((char *)&v54, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
            goto LABEL_42;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            sub_1D4DAFA98(v32, v43, v44, v45, v46, v47, v48, v49);
LABEL_14:
          _SparseTrap();
          return 0;
        }
        if (!v54.reportError)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            sub_1D4DAFB04();
          goto LABEL_14;
        }
      }
      else if (!v54.reportError)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          sub_1D4DAFB88();
        goto LABEL_14;
      }
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      memset(&v54, 0, sizeof(v54));
      snprintf((char *)&v54, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
    }
LABEL_42:
    ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v54);
    return 0;
  }
  printf("Numeric factorization failed (status = %d).\n", *(_DWORD *)a3);
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v11)
  {
    v12 = v11 >> 3;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a2, 8 * v12);
  }
  return 0xFFFFFFFFLL;
}

void sub_1D4D79488(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1D4D5DFA8();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D4D5E2CC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1D4D79590(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      sub_1D4D5DFA8();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1D4D5E2CC(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1D4D796A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1D4D796B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D4D796EC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

uint64_t sub_1D4D79714(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

intptr_t sub_1D4D79720(intptr_t result)
{
  unsigned __int8 v1;
  intptr_t v2;
  NSObject *v3;
  dispatch_time_t v4;
  unsigned __int8 v5;

  v1 = atomic_load((unsigned __int8 *)(result + 2));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    do
    {
      v3 = *(NSObject **)(v2 + 16);
      v4 = dispatch_time(0, 1000000);
      result = dispatch_semaphore_wait(v3, v4);
      if (!result)
        atomic_store(1u, (unsigned __int8 *)(v2 + 2));
      v5 = atomic_load((unsigned __int8 *)(v2 + 2));
    }
    while ((v5 & 1) == 0);
  }
  return result;
}

void sub_1D4D7978C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  unint64_t v33;
  NSObject *v34;
  void **v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  unsigned __int8 v46;
  BOOL v47;
  unsigned __int8 v48;
  dispatch_time_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD v67[5];
  void **v68;
  void ***v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  NSObject *v72;
  dispatch_object_t object[7];
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  _QWORD block[6];
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  __n128 (*v85)(_QWORD *, uint64_t);
  void (*v86)(uint64_t);
  _BYTE v87[24];
  void **v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;

  v80 = 0;
  v6 = dispatch_group_create();
  v77 = 0;
  v78 = 0;
  v79 = 0;
  do
  {
    v7 = (const char *)(*((uint64_t (**))a2->isa + 3))(a2);
    v8 = dispatch_queue_create(v7, 0);
    v9 = (*((uint64_t (**))a2->isa + 4))(a2);
    v10 = dispatch_semaphore_create(v9);
    v11 = v10;
    v70 = 0;
    v71 = 0;
    v69 = 0;
    v68 = (void **)&off_1E988ADA0;
    v72 = v8;
    object[0] = v10;
    object[1] = a2;
    if (v8)
    {
      dispatch_retain(v8);
      v10 = object[0];
    }
    if (v10)
      dispatch_retain(v10);
    sub_1D4D79E7C(&v77, (uint64_t)&v68);
    dispatch_release(v8);
    dispatch_release(v11);
    sub_1D4D7A0AC((uint64_t)&v68);
    a2 = (*((uint64_t (**))a2->isa + 2))(a2);
  }
  while (a2);
  v61 = a3;
  v64 = dispatch_queue_create("com.apple.stage_state", 0);
  v60 = dispatch_semaphore_create(0);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v12 = (v78 - v77) >> 3;
  v13 = 0x8E38E38E38E38E39 * v12 - 1;
  if (0x8E38E38E38E38E39 * v12 != 1)
  {
    v14 = 0;
    do
    {
      v15 = v77;
      v16 = (_QWORD *)operator new();
      v17 = v14 + 1;
      sub_1D4D7A184(v16, *(dispatch_object_t *)(v15 + 72 * (v14 + 1) + 40), *(dispatch_object_t *)(v15 + 72 * v14 + 40), v64, (uint64_t)v60, v15 + 72 * (v14 + 1) + 8, a1);
      v18 = v75;
      if (v75 >= v76)
      {
        v20 = (v75 - v74) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          sub_1D4D5DFA8();
        v21 = (v76 - v74) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)(v76 - v74) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)sub_1D4D5E2CC((uint64_t)&v76, v22);
        else
          v23 = 0;
        v24 = &v23[8 * v20];
        *(_QWORD *)v24 = v16;
        v19 = v24 + 8;
        v26 = v74;
        v25 = v75;
        if (v75 != v74)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          v25 = v74;
        }
        v74 = v24;
        v75 = v19;
        v76 = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v75 = v16;
        v19 = v18 + 8;
      }
      v75 = v19;
      v28 = v15 + 72 * v14;
      *(_QWORD *)(v28 + 56) = v16;
      *(_QWORD *)(v28 + 64) = v14++;
    }
    while (v17 != v13);
  }
  v63 = a1;
  v29 = operator new();
  v30 = v77;
  v31 = *(NSObject **)(v77 + 72 * v13 + 40);
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = v29 + 80;
  *(_QWORD *)v29 = &off_1E988AE48;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = v31;
  *(_QWORD *)(v29 + 48) = v29 + 56;
  if (v31)
  {
    dispatch_retain(v31);
    v30 = v77;
  }
  v32 = v64;
  *(_QWORD *)v29 = off_1E988AE10;
  *(_QWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_BYTE *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = &v80;
  *(_QWORD *)(v29 + 96) = v61;
  v33 = v30 + 72 * v13;
  v59 = v29;
  *(_QWORD *)(v33 + 56) = v29;
  *(_QWORD *)(v33 + 64) = v13;
  v68 = 0;
  v69 = &v68;
  v70 = 0x6002000000;
  v71 = sub_1D4D79FB8;
  v72 = sub_1D4D79FC4;
  v34 = v60;
  sub_1D4D7A184(object, *(dispatch_object_t *)(v30 + 40), 0, v64, (uint64_t)v60, v30 + 8, a1);
  v35 = (void **)MEMORY[0x1E0C809B0];
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 0x40000000;
  v67[2] = sub_1D4D79FD0;
  v67[3] = &unk_1E988B3F0;
  v67[4] = &v68;
  *(_QWORD *)(a1 + 8) = v67;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
  v66 = 0;
  v36 = atomic_load((unsigned __int8 *)a1);
  if ((v36 & 1) == 0)
  {
    do
    {
      v37 = atomic_load(&v80);
      if ((v37 & 1) != 0)
        break;
      if (atomic_load(&v66))
        break;
      v39 = v78;
      v62 = v77;
      if (v78 != v77)
      {
        do
        {
          v82 = 0;
          v83 = &v82;
          v84 = 0x4002000000;
          v85 = sub_1D4D7A7C0;
          v86 = sub_1D4D7A7E4;
          memset(v87, 0, sizeof(v87));
          block[0] = v35;
          block[1] = 0x40000000;
          block[2] = sub_1D4D7A80C;
          block[3] = &unk_1E988B458;
          block[4] = &v82;
          block[5] = v39 - 72;
          v65 = v39 - 72;
          dispatch_sync(v32, block);
          v41 = (uint64_t *)v83[5];
          v40 = (uint64_t *)v83[6];
          while (v41 != v40)
          {
            dispatch_group_enter(v6);
            v42 = *(_QWORD *)(v39 - 24);
            v43 = *(_QWORD *)(v39 - 16);
            v44 = *v41;
            *v41++ = 0;
            v45 = *(NSObject **)(v39 - 40);
            v88 = v35;
            v89 = 0x40000000;
            v90 = sub_1D4D7A8F8;
            v91 = &unk_1E988B478;
            v92 = v63;
            v93 = &v66;
            v94 = v42;
            v95 = v44;
            v96 = v43;
            v97 = v6;
            dispatch_async(v45, &v88);
          }
          _Block_object_dispose(&v82, 8);
          v88 = (void **)v87;
          sub_1D4D7A108(&v88);
          v32 = v64;
          v39 -= 72;
        }
        while (v65 != v62);
      }
      a1 = v63;
      v46 = atomic_load((unsigned __int8 *)v63);
      v34 = v60;
      if ((v46 & 1) == 0)
      {
        v47 = 1;
        do
        {
          v48 = atomic_load(&v80);
          if ((v48 & 1) != 0)
            break;
          if (!v47)
            break;
          v49 = dispatch_time(0, 10000000);
          v47 = dispatch_semaphore_wait(v60, v49) != 0;
          v50 = atomic_load((unsigned __int8 *)v63);
        }
        while ((v50 & 1) == 0);
      }
      v51 = atomic_load((unsigned __int8 *)v63);
    }
    while ((v51 & 1) == 0);
  }
  *(_QWORD *)(a1 + 8) = &unk_1E988B1F0;
  v52 = atomic_load((unsigned __int8 *)a1);
  v53 = 1;
  if ((v52 & 1) == 0)
  {
    v54 = atomic_load(&v66);
    v53 = v54 != 0;
  }
  atomic_store(v53, (unsigned __int8 *)(a1 + 1));
  atomic_store(1u, (unsigned __int8 *)a1);
  dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  v56 = v77;
  v55 = v78;
  while (v55 != v56)
  {
    v55 -= 72;
    v88 = v35;
    v89 = 0x40000000;
    v90 = sub_1D4D7A984;
    v91 = &unk_1E988B498;
    v92 = v55;
    dispatch_sync(v32, &v88);
  }
  v57 = v74;
  v58 = v75;
  if (v74 != v75)
  {
    do
    {
      if (*(_QWORD *)v57)
        (*(void (**)(_QWORD))(**(_QWORD **)v57 + 8))(*(_QWORD *)v57);
      v57 += 8;
    }
    while (v57 != v58);
    v57 = v74;
  }
  v75 = v57;
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  dispatch_release(v6);
  dispatch_release(v32);
  dispatch_release(v34);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v63 + 24));
  _Block_object_dispose(&v68, 8);
  sub_1D4D7A370(object);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  v68 = (void **)&v77;
  sub_1D4D7A5E0(&v68);
}

void sub_1D4D79E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)v38;
  if (*(_QWORD *)v38)
  {
    *(_QWORD *)(v38 + 8) = v40;
    operator delete(v40);
  }
  a23 = (void **)&a38;
  sub_1D4D7A5E0(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D79E7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x38E38E38E38E38ELL)
      sub_1D4D5DFA8();
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x1C71C71C71C71C7)
      v13 = 0x38E38E38E38E38ELL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_1D4D618FC(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[72 * v10];
    v18 = &v14[72 * v13];
    sub_1D4D7A66C((uint64_t)v16, a2);
    v17 = v16 + 72;
    sub_1D4D7A6EC(a1, &v15);
    v9 = a1[1];
    result = sub_1D4D7A770((uint64_t)&v15);
  }
  else
  {
    result = sub_1D4D7A66C(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v9;
  return result;
}

void sub_1D4D79FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D7A770((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D79FB8(uint64_t a1, uint64_t a2)
{
  return sub_1D4D7A3CC(a1 + 40, a2 + 40);
}

_QWORD *sub_1D4D79FC4(uint64_t a1)
{
  return sub_1D4D7A370((_QWORD *)(a1 + 40));
}

uint64_t sub_1D4D79FD0(uint64_t a1, uint64_t a2, dispatch_time_t a3)
{
  return sub_1D4D79FE0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, a2, a3);
}

uint64_t sub_1D4D79FE0(uint64_t a1, uint64_t a2, dispatch_time_t timeout)
{
  unsigned __int8 v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v9[6];

  if (dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), timeout))
    return 0;
  v5 = atomic_load(*(unsigned __int8 **)(a1 + 24));
  if ((v5 & 1) != 0)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    return 0;
  }
  v6 = *(NSObject **)(a1 + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = sub_1D4D7A44C;
  v9[3] = &unk_1E988B430;
  v9[4] = a1;
  v9[5] = a2;
  dispatch_sync(v6, v9);
  v7 = *(NSObject **)(a1 + 16);
  if (v7)
    dispatch_semaphore_signal(v7);
  return 1;
}

uint64_t sub_1D4D7A080()
{
  return 0;
}

void sub_1D4D7A088(uint64_t a1)
{
  sub_1D4D7A0AC(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D7A0AC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void **v5;

  *(_QWORD *)a1 = &off_1E988ADA0;
  v2 = *(NSObject **)(a1 + 32);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
  v5 = (void **)(a1 + 8);
  sub_1D4D7A108(&v5);
  return a1;
}

void sub_1D4D7A108(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1D4D7A184(_QWORD *a1, dispatch_object_t object, dispatch_object_t a3, dispatch_object_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = off_1E988AC98;
  a1[1] = a4;
  a1[2] = a5;
  a1[3] = a7;
  if (a4)
    dispatch_retain(a4);
  *a1 = &off_1E988AE48;
  a1[4] = object;
  a1[5] = a3;
  a1[6] = a6;
  if (object)
  {
    dispatch_retain(object);
    a3 = (dispatch_object_t)a1[5];
  }
  if (a3)
    dispatch_retain(a3);
  return a1;
}

void sub_1D4D7A204(_QWORD *a1)
{
  sub_1D4D7A370(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D7A228(unsigned __int8 **a1, uint64_t a2)
{
  dispatch_time_t v4;
  uint64_t result;
  unsigned __int8 v6;

  do
  {
    v4 = dispatch_time(0, 10000000);
    result = (*((uint64_t (**)(unsigned __int8 **, uint64_t, dispatch_time_t))*a1 + 4))(a1, a2, v4);
    if ((result & 1) != 0)
      break;
    v6 = atomic_load(a1[3]);
  }
  while ((v6 & 1) == 0);
  return result;
}

uint64_t sub_1D4D7A280(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_semaphore_signal(v1);
  return 1;
}

uint64_t sub_1D4D7A2A0()
{
  return 1;
}

_QWORD *sub_1D4D7A2A8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E988AE10;
  v3 = (void **)(a1 + 56);
  sub_1D4D7A108(&v3);
  return sub_1D4D7A370((_QWORD *)a1);
}

uint64_t sub_1D4D7A2F0(uint64_t a1)
{
  _QWORD *v2;
  void **v4;

  *(_QWORD *)a1 = off_1E988AE10;
  v4 = (void **)(a1 + 56);
  sub_1D4D7A108(&v4);
  v2 = sub_1D4D7A370((_QWORD *)a1);
  return MEMORY[0x1D826897C](v2, 0x10A1C4096DEAEF2);
}

uint64_t sub_1D4D7A34C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8))
    atomic_store(1u, *(unsigned __int8 **)(a1 + 88));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96));
}

_QWORD *sub_1D4D7A370(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  *a1 = &off_1E988AE48;
  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  *a1 = off_1E988AC98;
  v4 = a1[1];
  if (v4)
    dispatch_release(v4);
  return a1;
}

uint64_t sub_1D4D7A3CC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  NSObject *v7;

  v4 = *(NSObject **)(a2 + 8);
  *(_QWORD *)a1 = off_1E988AC98;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (v4)
    dispatch_retain(v4);
  *(_QWORD *)a1 = &off_1E988AE48;
  v5 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  if (!v5)
  {
    v7 = v6;
    if (!(_QWORD)v6)
      return a1;
    goto LABEL_5;
  }
  dispatch_retain(v5);
  v7 = *(NSObject **)(a1 + 40);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
  return a1;
}

uint64_t sub_1D4D7A44C(uint64_t a1)
{
  uint64_t v1;
  char **v2;
  char *v3;
  uint64_t result;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(char ***)(*(_QWORD *)(a1 + 32) + 48);
  v3 = v2[1];
  result = (uint64_t)(v2 + 2);
  v5 = (unint64_t)v2[2];
  if ((unint64_t)v3 >= v5)
  {
    v7 = (v3 - *v2) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_1D4D5DFA8();
    v8 = v5 - (_QWORD)*v2;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = v2 + 2;
    if (v10)
      v11 = (char *)sub_1D4D5E2CC(result, v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *(_QWORD *)v12 = v1;
    v6 = v12 + 8;
    v20 = v12 + 8;
    v15 = *v2;
    v14 = v2[1];
    if (v14 == *v2)
    {
      v17 = v2[1];
    }
    else
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v17 = *v2;
      v14 = v2[1];
      v6 = v20;
      v13 = v21;
    }
    *v2 = v12;
    v19[0] = v17;
    v19[1] = v17;
    v2[1] = v6;
    v20 = v14;
    v18 = v2[2];
    v2[2] = v13;
    v21 = v18;
    result = sub_1D4D7A580((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v3 = v1;
    v6 = v3 + 8;
  }
  v2[1] = v6;
  return result;
}

void sub_1D4D7A560(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D7A580(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4D7A5E0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D4D7A66C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  __int128 v4;
  uint64_t v5;
  NSObject *v6;

  *(_QWORD *)a1 = &off_1E988ADA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (!v3)
  {
    v6 = v4;
    if (!(_QWORD)v4)
      return a1;
    goto LABEL_3;
  }
  dispatch_retain(v3);
  v6 = *(NSObject **)(a1 + 40);
  if (v6)
LABEL_3:
    dispatch_retain(v6);
  return a1;
}

uint64_t sub_1D4D7A6EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 72;
    result = sub_1D4D7A66C(result - 72, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4D7A770(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_1D4D7A7C0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_1D4D7A7E4(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_1D4D7A108(&v1);
}

void sub_1D4D7A80C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  sub_1D4D7A888((_QWORD *)(v3 + 40));
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(v3 + 56) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD **)(v4 + 16);
  while (v6 != v5)
  {
    v8 = *--v6;
    v7 = v8;
    *v6 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  *(_QWORD *)(v4 + 16) = v5;
}

void sub_1D4D7A888(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1D4D7A8F8(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = atomic_load(*(unsigned __int8 **)(a1 + 32));
  if ((v2 & 1) != 0 || (v3 = atomic_load(*(unsigned int **)(a1 + 40))) != 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
  }
  else if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)) & 1) == 0)
  {
    v5 = *(unsigned int **)(a1 + 40);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_1D4D7A984(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  while (v2 != v3)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 56) + 24))(*(_QWORD *)(v1 + 56));
    v2 += 8;
  }
  return result;
}

BOOL sub_1D4D7A9CC(uint64_t a1, int a2, int a3, int a4)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v4 = *(_DWORD **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 == *(_QWORD *)a1)
    return 0;
  v6 = a2 - *v4;
  return a2 >= *v4
      && *(_DWORD *)(v5 - 24) >= a2
      && *(double *)&v4[6 * v6 + 2] <= (double)a3
      && *(double *)&v4[6 * v6 + 4] >= (double)a4;
}

uint64_t sub_1D4D7AA30(int **a1, int a2, int a3, int a4)
{
  int *v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  double v11;
  int v12;
  double *v13;
  int v14;
  _BOOL4 v15;

  v4 = *a1;
  v5 = a1[1];
  if (v5 == *a1)
    return 0;
  v6 = *v4;
  v7 = a3 - *v4;
  if (a3 >= *v4)
  {
    v8 = *(v5 - 6) < a3;
    if (*(v5 - 6) < a3)
      v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  if (a4 < v6)
    return 0;
  v9 = *(v5 - 6) < a4 || v8;
  if ((v9 & 1) != 0)
    return 0;
  if (v7 > a4 - v6)
    return 1;
  v11 = (double)a2;
  v12 = v7 + v6 - a4;
  v13 = (double *)&v4[6 * v7 + 4];
  do
  {
    v14 = v12;
    v15 = *v13 < v11 || *(v13 - 1) > v11;
    if (v15)
      break;
    ++v12;
    v13 += 3;
  }
  while (v14);
  return !v15;
}

double sub_1D4D7AAE0(int **a1, double *a2)
{
  int v3;
  double result;

  v3 = (int)*a2 - 1;
  if (sub_1D4D7AA30(a1, v3, (int)a2[1], (int)(a2[3] + (double)(int)a2[1] + -1.0)))
  {
    *a2 = (double)v3;
    result = a2[2] + 1.0;
    a2[2] = result;
  }
  return result;
}

uint64_t sub_1D4D7AB48(int **a1, double *a2)
{
  double v3;
  uint64_t result;

  v3 = a2[2];
  result = sub_1D4D7AA30(a1, (int)(*a2 + v3) + 1, (int)a2[1], (int)(a2[3] + (double)(int)a2[1] + -1.0));
  if ((_DWORD)result)
    a2[2] = v3 + 1.0;
  return result;
}

double sub_1D4D7ABAC(uint64_t a1, double *a2)
{
  int v3;
  double result;

  v3 = (int)a2[1] - 1;
  if (sub_1D4D7A9CC(a1, v3, (int)*a2, (int)(a2[2] + (double)(int)*a2 + -1.0)))
  {
    a2[1] = (double)v3;
    result = a2[3] + 1.0;
    a2[3] = result;
  }
  return result;
}

BOOL sub_1D4D7AC14(uint64_t a1, double *a2)
{
  double v3;
  _BOOL8 result;

  v3 = a2[3];
  result = sub_1D4D7A9CC(a1, (int)(a2[1] + v3 + -1.0) + 1, (int)*a2, (int)(a2[2] + (double)(int)*a2 + -1.0));
  if (result)
    a2[3] = v3 + 1.0;
  return result;
}

void sub_1D4D7AC7C(int **a1, __int128 *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  sub_1D4D7AAE0(a1, (double *)&v7);
  if (v5)
  {
    if (sub_1D4D7AB48(a1, (double *)&v7))
    {
      v6 = v8;
      *a2 = v7;
      a2[1] = v6;
    }
  }
}

void sub_1D4D7ACD4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  sub_1D4D7ABAC(a1, (double *)&v7);
  if (v5)
  {
    if (sub_1D4D7AC14(a1, (double *)&v7))
    {
      v6 = v8;
      *a2 = v7;
      a2[1] = v6;
    }
  }
}

BOOL sub_1D4D7AD2C(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;

  v2 = *(_DWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)a1)
    return 0;
  v4 = HIDWORD(a2) - *v2;
  return SHIDWORD(a2) >= *v2
      && *(_DWORD *)(v3 - 24) >= SHIDWORD(a2)
      && *(double *)&v2[6 * v4 + 2] <= (double)(int)a2
      && *(double *)&v2[6 * v4 + 4] >= (double)(int)a2;
}

uint64_t sub_1D4D7AD90(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  double *v10;
  int v11;
  BOOL v12;
  uint64_t v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
    return 0;
  v6 = 0;
  v7 = 0;
  LODWORD(result) = 0;
  v9 = v5 / 24;
  if (v9 <= 1)
    v9 = 1;
  v10 = (double *)(v3 + 16);
  do
  {
    v11 = (int)(*v10 - *(v10 - 1) + 1.0);
    v12 = (int)result < v11;
    if ((int)result <= v11)
      result = v11;
    else
      result = result;
    if (v12)
      v7 = v6;
    ++v6;
    v10 += 3;
  }
  while (v9 != v6);
  v13 = v3 + 24 * v7;
  *a2 = *(_DWORD *)v13;
  *a3 = (int)*(double *)(v13 + 8);
  return result;
}

uint64_t sub_1D4D7AE24(int **a1, double *a2)
{
  double v4;
  int v5;
  int v6;
  int v7;

  v4 = a2[1];
  v5 = (int)*a2;
  v6 = (int)(*a2 + a2[2] + -1.0);
  if (sub_1D4D7A9CC((uint64_t)a1, (int)v4, v5, v6)
    && (v7 = (int)(v4 + a2[3] + -1.0), sub_1D4D7A9CC((uint64_t)a1, v7, v5, v6))
    && sub_1D4D7AA30(a1, v5, (int)v4, v7))
  {
    return sub_1D4D7AA30(a1, v6, (int)v4, v7);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1D4D7AEFC(float64x2_t *a1, int **a2, char a3, float a4, __n128 a5)
{
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x8_t v16;
  float32x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  char v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double v40;
  char v41;
  char v42;
  double v43;
  float v44;
  double v45;
  float v46;
  float v47;
  double v48;
  double v49;
  float v50;
  double v51;
  float v52;
  double v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62;
  double v63;
  double v64;
  char v65;
  float v66;
  double v67;
  float v68;
  double v69;
  float v70;
  double v71;
  float v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  char v78;
  float v79;
  double v80;
  int v81;
  float v82;
  double v83;
  double v84;
  double v85;
  float v86;
  float v87;
  float v88;
  char v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  double v97;
  double v98;
  double v99;
  double v100;
  float v101;
  double v102;
  float32x2_t v103;
  double v104;
  double v105;
  __n128 v106;
  double v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;
  double v114;
  double v115;
  float64x2_t v116;
  double v117;
  double v118;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;

  v8 = 0;
  v10 = *a1;
  v9 = a1[1];
  __asm { FMOV            V3.2S, #1.0 }
  v16.i32[0] = _D3.i32[0];
  *(float *)&v16.i32[1] = 1.0 / a4;
  *(float *)_D3.i32 = a4;
  v103 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a4 > 1.0), 0x1FuLL)), v16, _D3);
  v17 = vadd_f32(v103, v103);
  a5.n128_u64[0] = 0x4300000043000000;
  do
  {
    v106 = a5;
    v108 = vcvtq_f64_f32(vmul_n_f32(v17, a5.n128_f32[0]));
    v110 = vcvtq_f64_f32(vmul_n_f32(v103, a5.n128_f32[0]));
    v18 = v8;
    v19 = v9;
    v20 = v10;
    do
    {
      v8 = v18;
      v112 = v19;
      v116 = v20;
      v119 = vaddq_f64(v19, v108);
      v121 = vsubq_f64(v20, v110);
      v21 = vcvt_f32_f64(v121);
      v22 = vcvt_f32_f64(vaddq_f64(v119, vcvtq_f64_f32(v21)));
      v23 = vrndm_f32(v21);
      v123 = v23.f32[0];
      v124 = v23.f32[1];
      v125 = vcvtq_f64_f32(vsub_f32(vrndp_f32(v22), v23));
      v24 = sub_1D4D7AE24(a2, &v123);
      v19 = v119;
      v20 = v121;
      v18 = 1;
    }
    while ((v24 & 1) != 0);
    a5 = v106;
    a5.n128_f32[0] = v106.n128_f32[0] * 0.5;
    v9 = v112;
    v10 = v116;
  }
  while ((float)(v106.n128_f32[0] * 0.5) > 0.25);
  v25 = v112.f64[1];
  v26 = v116.f64[1];
  if ((a3 & 1) != 0)
  {
    v111 = v112.f64[1];
    v107 = v112.f64[0];
    v109 = v116.f64[1];
    v97 = v116.f64[0];
    LOBYTE(v27) = v8;
  }
  else
  {
    v28 = v103.f32[0];
    v29 = v103.f32[1];
    v120 = v103.f32[0];
    v122 = v103.f32[1];
    while (1)
    {
      v30 = v10.f64[0];
      v109 = v26;
      v107 = v9.f64[0];
      v111 = v25;
      v117 = v10.f64[0] - v28;
      v31 = v26 - v29;
      v32 = v9.f64[0] + v28;
      v33 = v25 + v29;
      v34 = v10.f64[0] - v28;
      v104 = v34;
      v35 = v9.f64[0] + v28 + v34;
      v36 = v31;
      v113 = v36;
      v37 = v33 + v36;
      v38 = floorf(v34);
      v39 = floorf(v36);
      v123 = v38;
      v124 = v39;
      v40 = (float)(ceilf(v37) - v39);
      v125.f64[0] = (float)(ceilf(v35) - v38);
      v125.f64[1] = v40;
      v41 = sub_1D4D7AE24(a2, &v123);
      v42 = v41;
      v43 = v31 - v122;
      v44 = v31 - v122;
      v45 = v44;
      v46 = v33 + v122 + v44;
      v47 = floorf(v44);
      v48 = v47;
      v49 = (float)(ceilf(v46) - v47);
      v50 = v30;
      v51 = v50;
      v52 = floorf(v50);
      v53 = v52;
      if ((v41 & 1) != 0)
      {
        v53 = v38;
        v54 = v38;
      }
      else
      {
        v54 = v52;
      }
      if ((v41 & 1) != 0)
        v55 = v104;
      else
        v55 = v51;
      if ((v41 & 1) == 0)
      {
        v49 = v40;
        v48 = v39;
        v47 = v39;
      }
      v101 = v47;
      v56 = v113;
      if ((v41 & 1) != 0)
      {
        v56 = v45;
        v57 = v33 + v122;
      }
      else
      {
        v57 = v33;
      }
      if ((v41 & 1) != 0)
        v58 = v32 + v120;
      else
        v58 = v32;
      if ((v41 & 1) == 0)
        v43 = v31;
      v114 = v43;
      v59 = v111;
      if ((v41 & 1) != 0)
        v59 = v33;
      v99 = v59;
      v100 = v56;
      v60 = v107;
      if ((v41 & 1) != 0)
        v60 = v32;
      v97 = v30;
      v98 = v60;
      if ((v41 & 1) == 0)
        v31 = v109;
      v61 = v117;
      if ((v41 & 1) == 0)
        v61 = v30;
      v105 = v61;
      if ((v41 & 1) != 0)
        LODWORD(v8) = 1;
      v62 = v58 + v55;
      v123 = v53;
      v124 = v48;
      v63 = v48;
      v64 = (float)(ceilf(v62) - v54);
      v125.f64[0] = v64;
      v125.f64[1] = v49;
      v65 = sub_1D4D7AE24(a2, &v123);
      v66 = v58 + v120 + v55;
      v67 = (float)(ceilf(v66) - v54);
      v68 = v31;
      v69 = v68;
      v70 = floorf(v68);
      if ((v65 & 1) != 0)
        v71 = v63;
      else
        v71 = v70;
      if ((v65 & 1) != 0)
        v72 = v101;
      else
        v72 = v70;
      if ((v65 & 1) != 0)
        v73 = v100;
      else
        v73 = v69;
      if ((v65 & 1) != 0)
      {
        v74 = v57 + v122;
      }
      else
      {
        v67 = v64;
        v74 = v57;
      }
      if ((v65 & 1) != 0)
        v75 = v58 + v120;
      else
        v75 = v58;
      v76 = v99;
      if ((v65 & 1) != 0)
        v76 = v57;
      v118 = v76;
      if ((v65 & 1) == 0)
        v58 = v98;
      v77 = v114;
      if ((v65 & 1) == 0)
        v77 = v31;
      v102 = v77;
      if ((v65 & 1) != 0)
      {
        LODWORD(v8) = 1;
        v78 = 1;
      }
      else
      {
        v78 = v42;
      }
      v79 = v74 + v73;
      v124 = v71;
      v125.f64[0] = v67;
      v80 = (float)(ceilf(v79) - v72);
      v125.f64[1] = v80;
      v81 = sub_1D4D7AE24(a2, &v123);
      v28 = v120;
      v82 = v74 + v122 + v73;
      v83 = (float)(ceilf(v82) - v72);
      if (v81)
      {
        v25 = v74 + v122;
      }
      else
      {
        v83 = v80;
        v25 = v74;
      }
      if (v81)
        v84 = v75 + v120;
      else
        v84 = v75;
      if (v81)
      {
        v85 = v75;
      }
      else
      {
        v74 = v118;
        v85 = v58;
      }
      if (v81)
        v27 = 1;
      else
        v27 = v8;
      if (v81)
        v78 = 1;
      v115 = v84;
      v86 = v105 - v120;
      v87 = v84 + v86;
      v88 = floorf(v86);
      v123 = v88;
      v124 = v71;
      v125.f64[0] = (float)(ceilf(v87) - v88);
      v125.f64[1] = v83;
      v89 = sub_1D4D7AE24(a2, &v123);
      v26 = v102;
      v9.f64[0] = v115;
      v10.f64[0] = v105 - v120;
      v29 = v122;
      LODWORD(v8) = 1;
      if ((v89 & 1) == 0)
      {
        v25 = v74;
        v9.f64[0] = v85;
        v10.f64[0] = v105;
        LODWORD(v8) = v27;
        if ((v78 & 1) == 0)
          break;
      }
    }
  }
  if ((v27 & 1) != 0)
  {
    v90 = v97;
    v91 = v107 + v90;
    v92 = v109;
    v93 = v111 + v92;
    v94 = floorf(v90);
    v95 = floorf(v92);
    a1->f64[0] = v94;
    a1->f64[1] = v95;
    a1[1].f64[0] = (float)(ceilf(v91) - v94);
    a1[1].f64[1] = (float)(ceilf(v93) - v95);
  }
  return v27 & 1;
}

uint64_t sub_1D4D7B3EC(uint64_t a1, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  __n128 v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  BOOL v25;
  char v26;
  __int128 v27;
  _BOOL4 v28;
  uint64_t v30;
  float64x2_t v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  if (sub_1D4D7AD2C((uint64_t)a2, a5))
  {
    v13.n128_f64[0] = (double)SHIDWORD(a5);
    v31.f64[0] = (double)(int)a5;
    v31.f64[1] = (double)SHIDWORD(a5);
    v32 = 0uLL;
    v14 = 1;
  }
  else
  {
    v14 = a7 ^ 1;
    if (((a7 ^ 1) & 1) == 0)
      puts("Warning: unable to satisfy centered-crop requirement: center pixel invalid");
    v30 = 0;
    v15 = sub_1D4D7AD90(a2, (_DWORD *)&v30 + 1, &v30);
    if (!v15)
      goto LABEL_29;
    v13.n128_f64[0] = (double)SHIDWORD(v30);
    v31.f64[0] = (double)((int)v30 + (v15 >> 1));
    v31.f64[1] = (double)SHIDWORD(v30);
    v32 = 0uLL;
  }
  sub_1D4D7AEFC(&v31, (int **)a2, a7, a3, v13);
  if ((a6 & 1) == 0)
  {
    if ((a7 & 1) != 0)
    {
      LOBYTE(v16) = 1;
      LOBYTE(v17) = 1;
      while (1)
      {
        if ((v16 & 1) != 0)
        {
          sub_1D4D7AC7C((int **)a2, (__int128 *)&v31);
          v16 = v18;
          if ((v17 & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          v16 = 0;
          if ((v17 & 1) != 0)
          {
LABEL_14:
            sub_1D4D7ACD4((uint64_t)a2, (__int128 *)&v31);
            v17 = v19;
            goto LABEL_15;
          }
        }
        v17 = 0;
LABEL_15:
        if (((v16 | v17) & 1) == 0)
          goto LABEL_29;
      }
    }
    v20 = 1;
    v21 = 1;
    v22 = 1;
    v23 = 1;
    do
    {
      if ((v20 & 1) != 0)
      {
        sub_1D4D7AAE0((int **)a2, v31.f64);
        v20 = v24;
        if ((v21 & 1) == 0)
          goto LABEL_20;
      }
      else
      {
        v20 = 0;
        if ((v21 & 1) == 0)
        {
LABEL_20:
          v21 = 0;
          if ((v22 & 1) == 0)
            goto LABEL_21;
          goto LABEL_25;
        }
      }
      v21 = sub_1D4D7AB48((int **)a2, v31.f64);
      if ((v22 & 1) == 0)
      {
LABEL_21:
        v22 = 0;
        if ((v23 & 1) == 0)
          goto LABEL_22;
        goto LABEL_26;
      }
LABEL_25:
      sub_1D4D7ABAC((uint64_t)a2, v31.f64);
      v22 = v26;
      if ((v23 & 1) == 0)
      {
LABEL_22:
        v25 = 0;
        goto LABEL_27;
      }
LABEL_26:
      v25 = sub_1D4D7AC14((uint64_t)a2, v31.f64);
LABEL_27:
      v23 = (v20 | v21 | v22) ^ 1 | v25;
    }
    while ((((v20 | v21) | v22) & 1) != 0 || v25);
  }
LABEL_29:
  v27 = v32;
  *(float64x2_t *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v27;
  v28 = *(double *)&v32 >= 2.0;
  if (*((double *)&v32 + 1) < 2.0)
    v28 = 0;
  return v14 & v28;
}

uint64_t sub_1D4D7B5E8(float *a1, float *a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  v8 = a2[2];
  v9 = a1[2];
  v10 = (float)((float)(v5 * v7) + (float)(*a2 * *a1)) + (float)(v8 * v9);
  if (v10 < 0.0)
    return 0;
  result = 0;
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  v15 = (float)((float)(v7 * v13) + (float)(v12 * v6)) + (float)(v14 * v9);
  if (v10 > (float)(v15 * a3))
    return result;
  v16 = a2[3];
  v17 = a2[4];
  v18 = a2[5];
  v19 = (float)((float)(v7 * v17) + (float)(v16 * v6)) + (float)(v18 * v9);
  v20 = v15 * a4;
  if (v19 < 0.0 || v19 > v20)
    return result;
  v22 = v6 + 1.0;
  v23 = v8 + (float)((float)(v5 * v7) + (float)(v4 * (float)(v6 + 1.0)));
  if (v23 < 0.0)
    return 0;
  result = 0;
  v24 = v14 + (float)((float)(v7 * v13) + (float)(v12 * v22));
  if (v23 <= (float)(v24 * a3))
  {
    v25 = v18 + (float)((float)(v7 * v17) + (float)(v16 * v22));
    v26 = v24 * a4;
    if (v25 >= 0.0 && v25 <= v26)
    {
      v28 = v7 + 1.0;
      v29 = v8 + (float)((float)(v5 * v28) + (float)(v4 * v6));
      v30 = v14 + (float)((float)(v28 * v13) + (float)(v12 * v6));
      v31 = v30 * a3;
      if (v29 >= 0.0 && v29 <= v31)
      {
        v33 = v18 + (float)((float)(v28 * v17) + (float)(v16 * v6));
        v34 = v30 * a4;
        if (v33 >= 0.0 && v33 <= v34)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D4D7B6F8(uint64_t result, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t i;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  double v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  float v30[3];
  float v31[9];
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a3[7];
  v4 = a3[8];
  v5 = a3[4];
  v6 = a3[5];
  v7 = a3[6];
  v8 = v5 * v4 - v3 * v6;
  v9 = *a3;
  v10 = a3[1];
  v12 = a3[2];
  v11 = a3[3];
  v13 = v3 * v12 - v10 * v4;
  v32 = v8;
  v33 = v13;
  v14 = v10 * v6 - v5 * v12;
  v34 = v14;
  v15 = v13 * v11 + v9 * v8 + v7 * v14;
  if (v15 >= 2.22044605e-16 || v15 <= -2.22044605e-16)
  {
    v32 = v8 / v15;
    v33 = v13 / v15;
    v34 = v14 / v15;
    v35 = (v7 * v6 - v11 * v4) / v15;
    v36 = (v9 * v4 - v7 * v12) / v15;
    v37 = (v11 * v12 - v9 * v6) / v15;
    v38 = (v11 * v3 - v7 * v5) / v15;
    v39 = (v7 * v10 - v9 * v3) / v15;
    v40 = (v9 * v5 - v11 * v10) / v15;
  }
  for (i = 0; i != 9; ++i)
  {
    v18 = *(&v32 + i);
    v31[i] = v18;
  }
  v30[2] = 1.0;
  v19 = *(_QWORD *)result;
  v20 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result != v20)
  {
    v21 = (float)(int)a2;
    v22 = (float)SHIDWORD(a2);
    do
    {
      v30[1] = (float)*(int *)v19;
      v23 = *(double *)(v19 + 16);
      v24 = (int)*(double *)(v19 + 8);
      v25 = (double)v24;
      if (v23 >= (double)v24)
      {
        v30[0] = (float)v24;
        result = sub_1D4D7B5E8(v30, v31, v21, v22);
        if ((result & 1) == 0)
        {
          v26 = v24 + 1;
          do
          {
            v25 = (double)v26;
            if (v23 < (double)v26)
              break;
            v30[0] = (float)v26;
            result = sub_1D4D7B5E8(v30, v31, v21, v22);
            ++v26;
          }
          while (!(_DWORD)result);
        }
      }
      *(double *)(v19 + 8) = v25;
      if (v23 > v25)
      {
        v27 = (int)v23;
        v28 = (double)v27;
        if (v25 <= (double)v27)
        {
          v30[0] = (float)v27;
          result = sub_1D4D7B5E8(v30, v31, v21, v22);
          if ((result & 1) == 0)
          {
            v29 = v27 - 1;
            do
            {
              v28 = (double)v29;
              if (v25 > (double)v29)
                break;
              v30[0] = (float)v29;
              result = sub_1D4D7B5E8(v30, v31, v21, v22);
              --v29;
            }
            while (!(_DWORD)result);
          }
        }
        *(double *)(v19 + 16) = v28;
      }
      v19 += 24;
    }
    while (v19 != v20);
  }
  return result;
}

double sub_1D4D7B958(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t i;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double result;
  __int128 v23;
  uint64_t v24;
  double v25;
  __int128 v26;
  double v27;
  double v28;
  __int128 v29;
  double v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v23 = xmmword_1D4DB1EA8;
  v24 = 0x3FF0000000000000;
  v25 = (double)(int)a1;
  v26 = xmmword_1D4DB16C0;
  v27 = (double)(int)a1;
  v28 = (double)SHIDWORD(a1);
  v29 = xmmword_1D4DB16B0;
  v30 = (double)SHIDWORD(a1);
  v31 = 0x3FF0000000000000;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v7 = 1.79769313e308;
    v18 = -INFINITY;
    v19 = -INFINITY;
    v6 = 1.79769313e308;
  }
  else
  {
    v5 = -1.79769313e308;
    v6 = 1.79769313e308;
    v7 = 1.79769313e308;
    v8 = -1.79769313e308;
    do
    {
      for (i = 0; i != 96; i += 24)
      {
        v10 = *(double *)((char *)&v23 + i);
        v11 = *(double *)((char *)&v23 + i + 8);
        v12 = *(double *)((char *)&v23 + i + 16);
        v13 = *(double *)(*(_QWORD *)v3 + 8) * v11 + **(double **)v3 * v10 + *(double *)(*(_QWORD *)v3 + 16) * v12;
        v14 = v11 * *(double *)(*(_QWORD *)v3 + 32) + *(double *)(*(_QWORD *)v3 + 24) * v10;
        v15 = v11 * *(double *)(*(_QWORD *)v3 + 56)
            + *(double *)(*(_QWORD *)v3 + 48) * v10
            + *(double *)(*(_QWORD *)v3 + 64) * v12;
        v16 = v13 / v15;
        v17 = (v14 + *(double *)(*(_QWORD *)v3 + 40) * v12) / v15;
        if (v16 < v7)
          v7 = v16;
        if (v8 < v16)
          v8 = v16;
        if (v17 < v6)
          v6 = v17;
        if (v5 < v17)
          v5 = v17;
      }
      v3 += 8;
    }
    while (v3 != v4);
    v18 = v8;
    v19 = v5;
  }
  v20 = floor(v7);
  v21 = floor(v6);
  *a3 = v20;
  a3[1] = v21;
  result = ceilf(v18) - v20 + 1.0;
  a3[2] = result;
  a3[3] = ceilf(v19) - v21 + 1.0;
  return result;
}

void sub_1D4D7BAF4(_QWORD *a1, uint64_t a2, _QWORD *a3, double *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  float v32;
  int v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  double v40;
  __int128 v41;
  double v42;
  double v43;
  __int128 v44;
  double v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  a1[1] = *a1;
  if (a3)
  {
    v39 = 0x3FF0000000000000;
    v38 = xmmword_1D4DB1EA8;
    v40 = (double)(int)a2;
    v41 = xmmword_1D4DB16C0;
    v42 = (double)(int)a2;
    v43 = (double)SHIDWORD(a2);
    v44 = xmmword_1D4DB16B0;
    v45 = (double)SHIDWORD(a2);
    v46 = 0x3FF0000000000000;
    v5 = a3[1];
    v6 = v5 - *a3;
    if (v5 == *a3)
    {
      v11 = -1.79769313e308;
      v12 = 1.79769313e308;
      v9 = 1.79769313e308;
      v10 = -1.79769313e308;
    }
    else
    {
      v7 = 0;
      v8 = v6 >> 3;
      if (v8 <= 1)
        v8 = 1;
      v9 = 1.79769313e308;
      v10 = -1.79769313e308;
      v11 = -1.79769313e308;
      v12 = 1.79769313e308;
      do
      {
        v13 = 0;
        v14 = *(double **)(*a3 + 8 * v7);
        v15 = 1.79769313e308;
        v16 = -1.79769313e308;
        v17 = -1.79769313e308;
        v18 = 1.79769313e308;
        do
        {
          v19 = *(double *)((char *)&v38 + v13);
          v20 = *(double *)((char *)&v38 + v13 + 8);
          v21 = *(double *)((char *)&v38 + v13 + 16);
          v22 = v14[1] * v20 + *v14 * v19 + v14[2] * v21;
          v23 = v20 * v14[4] + v14[3] * v19;
          v24 = v20 * v14[7] + v14[6] * v19 + v14[8] * v21;
          v25 = v22 / v24;
          v26 = (v23 + v14[5] * v21) / v24;
          if (v25 < v15)
            v15 = v25;
          if (v16 < v25)
            v16 = v25;
          if (v26 < v18)
            v18 = v26;
          if (v17 < v26)
            v17 = v26;
          v13 += 24;
        }
        while (v13 != 96);
        if (v11 < v15)
          v11 = v15;
        if (v16 < v9)
          v9 = v16;
        if (v10 < v18)
          v10 = v18;
        if (v17 < v12)
          v12 = v17;
        ++v7;
      }
      while (v7 != v8);
    }
    if (v9 < v11)
      v9 = v11;
    if (v12 < v10)
      v12 = v10;
    v27 = v10;
    v28 = vcvtms_s32_f32(v27);
    v29 = v12;
    v30 = v11;
    v31 = vcvtms_s32_f32(v30);
    v32 = v9;
    v33 = vcvtps_s32_f32(v32);
    v34 = (double)v31;
    *a4 = (double)v31;
    a4[1] = (double)v28;
    v35 = vcvtps_s32_f32(v29) - v28;
    a4[2] = (double)(v33 - v31);
    a4[3] = (double)v35;
    sub_1D4D7BD4C((uint64_t)a1, v35 + 1);
    v36 = *a1;
    v37 = a1[1];
    if (*a1 != v37)
    {
      do
      {
        *(_DWORD *)v36 = v28;
        *(double *)(v36 + 8) = v34;
        *(double *)(v36 + 16) = (double)v33;
        ++v28;
        v36 += 24;
      }
      while (v36 != v37);
    }
  }
}

void sub_1D4D7BD4C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1D4D7C38C((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_1D4D7BD88(_QWORD *a1, uint64_t a2, double *a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;

  sub_1D4D7BAF4(a1, a2, a4, a3);
  v7 = *a4;
  if (a4[1] != *a4)
  {
    v8 = 0;
    do
    {
      sub_1D4D7B6F8((uint64_t)a1, a2, *(double **)(v7 + 8 * v8++));
      v7 = *a4;
    }
    while (v8 < (a4[1] - *a4) >> 3);
  }
}

BOOL sub_1D4D7BDF4(uint64_t a1)
{
  float v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  double v27;
  double v28;
  __int128 v29;
  CGRect v30;

  v29 = *MEMORY[0x1E0C9D648];
  v2 = *(float *)(a1 + 160);
  if (v2 == -1.0 || v2 <= 0.0)
    v2 = (float)*(int *)(a1 + 4) / (float)*(int *)(a1 + 8);
  v3 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  if (v5 != v6)
  {
    v7 = (float)(1.0 / v2);
    v25 = v7;
    do
    {
      v9 = *(double *)(v5 + 8);
      v8 = *(double *)(v5 + 16);
      if (v9 <= v8)
      {
        v10 = (double)*(int *)v5;
        *(_QWORD *)&v26 = *(_QWORD *)(v5 + 8);
        *((double *)&v26 + 1) = v10;
        v11 = v8 - v9 + 1.0;
        v12 = round(v11 * v7);
        v27 = v11;
        v28 = v12;
        v24 = v10;
        if (sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26))
        {
          v13 = v11;
          v14 = v12;
          if (v11 > v3)
          {
LABEL_9:
            v29 = v26;
            v3 = v13;
            v4 = v14;
          }
        }
        else
        {
          v13 = v11 + -1.0;
          v14 = round((v11 + -1.0) * v7);
          v27 = v11 + -1.0;
          v28 = v14;
          if (v11 + -1.0 > v3)
          {
            v23 = v4;
            v4 = v14;
            v16 = v11 + -1.0;
            if ((sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26) & 1) != 0)
            {
LABEL_19:
              v29 = v26;
              v3 = v16;
            }
            else
            {
              while (1)
              {
                v16 = v16 + -1.0;
                v4 = round(v16 * v25);
                v27 = v16;
                v28 = v4;
                if (v16 <= v3)
                  break;
                if (sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26))
                  goto LABEL_19;
              }
              v4 = v23;
            }
          }
          v20 = v9 + 1.0;
          *(double *)&v26 = v9 + 1.0;
          *((double *)&v26 + 1) = v24;
          v27 = v11 + -1.0;
          while (1)
          {
            v28 = v14;
            if (v13 <= v3)
              break;
            if ((sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26) & 1) != 0)
              goto LABEL_9;
            v20 = v20 + 1.0;
            v13 = v13 + -1.0;
            *(double *)&v26 = v20;
            v27 = v13;
            v14 = round(v13 * v25);
          }
        }
        v27 = v11;
        v28 = v12;
        v15 = v24;
        *(double *)&v26 = v9;
        *((double *)&v26 + 1) = v24 - v12;
        if (sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26))
        {
          v7 = v25;
          if (v11 > v3)
          {
LABEL_12:
            v29 = v26;
            v3 = v11;
            v4 = v12;
          }
        }
        else
        {
          v11 = v11 + -1.0;
          v7 = v25;
          v12 = round(v11 * v25);
          v27 = v11;
          v28 = v12;
          *((double *)&v26 + 1) = v24 - v12;
          if (v11 > v3)
          {
            v17 = v12;
            v18 = v11;
            if ((sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26) & 1) != 0)
            {
LABEL_24:
              v29 = v26;
              v3 = v18;
              v19 = v17;
              v7 = v25;
              v15 = v24;
              v4 = v19;
            }
            else
            {
              while (1)
              {
                v18 = v18 + -1.0;
                v17 = round(v18 * v25);
                v27 = v18;
                v28 = v17;
                if (v18 <= v3)
                  break;
                if (sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26))
                  goto LABEL_24;
              }
              v7 = v25;
              v15 = v24;
            }
          }
          v21 = v9 + 1.0;
          v27 = v11;
          v28 = v12;
          *(double *)&v26 = v21;
          *((double *)&v26 + 1) = v24 - v12;
          while (v11 > v3)
          {
            if ((sub_1D4D7AE24((int **)(a1 + 96), (double *)&v26) & 1) != 0)
              goto LABEL_12;
            v21 = v21 + 1.0;
            v11 = v11 + -1.0;
            v12 = round(v11 * v7);
            v27 = v11;
            v28 = v12;
            *(double *)&v26 = v21;
            *((double *)&v26 + 1) = v15 - v12;
          }
        }
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  *(_OWORD *)(a1 + 24) = v29;
  *(double *)(a1 + 40) = v3;
  *(double *)(a1 + 48) = v4;
  v30.origin.x = *(CGFloat *)(a1 + 24);
  v30.origin.y = *(CGFloat *)(a1 + 32);
  v30.size.width = v3;
  v30.size.height = v4;
  return !CGRectIsEmpty(v30);
}

uint64_t sub_1D4D7C134(uint64_t a1)
{
  uint64_t v2;
  float v3;
  int v4;
  __int128 v5;
  _OWORD v7[2];

  if (*(_BYTE *)(a1 + 1))
    sub_1D4D7B958(*(_QWORD *)(a1 + 4), *(uint64_t **)(a1 + 88), (double *)(a1 + 56));
  sub_1D4D7BD88((_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 4), (double *)(a1 + 120), *(uint64_t **)(a1 + 88));
  v3 = *(float *)(a1 + 160);
  if (v3 == -1.0 || v3 <= 0.0)
    v3 = (float)*(int *)(a1 + 4) / (float)*(int *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 155);
  if (*(_BYTE *)(a1 + 154))
  {
    if (*(_BYTE *)(a1 + 155))
    {
      v4 = 1;
    }
    else
    {
      v4 = *(unsigned __int8 *)(a1 + 156);
      if (*(_BYTE *)(a1 + 156))
      {
        *(_BYTE *)a1 = sub_1D4D7BDF4(a1);
        goto LABEL_10;
      }
    }
  }
  *(_BYTE *)a1 = sub_1D4D7B3EC((uint64_t)v7, (uint64_t *)(a1 + 96), v3, v2, *(_QWORD *)(a1 + 12), *(_BYTE *)(a1 + 154) != 0, v4 != 0);
  v5 = v7[1];
  *(_OWORD *)(a1 + 24) = v7[0];
  *(_OWORD *)(a1 + 40) = v5;
LABEL_10:
  *(_BYTE *)(a1 + 152) = 1;
  return 1;
}

BOOL sub_1D4D7C218(unsigned __int8 *a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  float64x2_t v4;
  int32x2_t v5;
  int64x2_t v6;
  uint64_t v7;
  int64x2_t v8;
  __int128 v9;

  if (a1[1])
  {
    v2 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 16) = v2;
    return 1;
  }
  else
  {
    v3 = *a1;
    if (*a1)
    {
      v4.f64[0] = *((float64_t *)a1 + 5);
      if (a1[153])
      {
        v4.f64[1] = *((float64_t *)a1 + 6);
        v5 = vcvt_s32_f32(vrndm_f32(vcvt_f32_f64(v4)));
        v6.i64[0] = (int)(v5.i32[0] & 0xFFFFFFFE);
        v6.i64[1] = (int)(v5.i32[1] & 0xFFFFFFFE);
        v4 = vcvtq_f64_s64(v6);
        *(float64x2_t *)(a1 + 40) = v4;
      }
      if (v4.f64[0] >= 2.0 && *((double *)a1 + 6) >= 2.0)
      {
        *a1 = 1;
        v9 = *(_OWORD *)(a1 + 40);
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(a2 + 16) = v9;
        return *a1 != 0;
      }
      else
      {
        v3 = 0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v7 = *(_QWORD *)(a1 + 4);
        v8.i64[0] = (int)v7;
        v8.i64[1] = SHIDWORD(v7);
        *(float64x2_t *)(a2 + 16) = vcvtq_f64_s64(v8);
        *a1 = 0;
      }
    }
    else
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
  return v3;
}

uint64_t sub_1D4D7C2D8(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  unint64_t v9;

  *(_WORD *)result = 0;
  *(_QWORD *)(result + 4) = a2;
  v3 = MEMORY[0x1E0C9D648];
  v5 = *MEMORY[0x1E0C9D648];
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(result + 24) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(result + 40) = v4;
  *(_OWORD *)(result + 56) = v5;
  *(_OWORD *)(result + 72) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(result + 88) = a3;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  v6 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(result + 120) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(result + 136) = v6;
  *(_DWORD *)(result + 152) = 65792;
  *(_BYTE *)(result + 156) = 1;
  *(_DWORD *)(result + 160) = -1082130432;
  if ((a2 & 0x80000000) == 0)
    v7 = a2;
  else
    v7 = a2 + 1;
  v8 = v7 >> 1;
  v9 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) != 0)
    LODWORD(v9) = HIDWORD(a2) + 1;
  *(_DWORD *)(result + 12) = v8;
  *(_DWORD *)(result + 16) = (int)v9 >> 1;
  return result;
}

uint64_t sub_1D4D7C35C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D4D7C38C(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1D4D60A34(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_1D4D7C50C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  float *v31;
  float v32;
  unint64_t v33;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  void *__p;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  sub_1D4D7CA20((unint64_t *)&v69, (a2[1] - *a2) >> 3);
  v5 = a2[1];
  if (v5 == *a2)
  {
    v35 = 0;
LABEL_43:
    v23 = (float *)v5;
    goto LABEL_44;
  }
  v6 = 0;
  v7 = v70;
  do
  {
    if (v7 >= v71)
    {
      v9 = (unint64_t)v69;
      v10 = v7 - (_BYTE *)v69;
      v11 = v7 - (_BYTE *)v69 + 1;
      if (v11 < 0)
        sub_1D4D5DFA8();
      v12 = v71 - (_BYTE *)v69;
      if (2 * (v71 - (_BYTE *)v69) > (unint64_t)v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)operator new(v13);
      else
        v14 = 0;
      v15 = &v14[v10];
      v16 = &v14[v10];
      *v16 = 0;
      v8 = v16 + 1;
      if (v7 != (char *)v9)
      {
        v17 = &v7[~v9];
        do
        {
          v18 = *--v7;
          (v17--)[(_QWORD)v14] = v18;
        }
        while (v7 != (char *)v9);
        v7 = (char *)v69;
        v15 = v14;
      }
      v69 = v15;
      v70 = v8;
      v71 = &v14[v13];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = 0;
      v8 = v7 + 1;
    }
    v70 = v8;
    ++v6;
    v5 = *a2;
    v19 = a2[1];
    v20 = v19 - *a2;
    v7 = v8;
  }
  while (v6 < v20 >> 3);
  if (v19 == v5)
  {
    v35 = v20 >> 3;
    goto LABEL_43;
  }
  v21 = 0;
  v22 = 0;
  v23 = (float *)*a2;
  v5 = a2[1];
  do
  {
    v24 = v22;
    v25 = *((unsigned __int8 *)v69 + v22++);
    if (!v25 && v22 < (v5 - (uint64_t)v23) >> 3)
    {
      v26 = (v5 - (uint64_t)v23) >> 3;
      v27 = v23[2 * v24 + 1] + 4.0;
      v28 = v21;
      v29 = v22;
      do
      {
        v30 = *(float *)((char *)v23 + v28 + 12);
        if (v30 > v27)
          break;
        if (!*((_BYTE *)v69 + v29))
        {
          if (v26 <= v24)
            sub_1D4D5DDC8();
          v31 = &v23[2 * v24];
          v32 = *v31 - *(float *)((char *)v23 + v28 + 8);
          if ((float)((float)((float)(v31[1] - v30) * (float)(v31[1] - v30)) + (float)(v32 * v32)) < 16.0)
          {
            v33 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
            if (v33 <= v24 || v33 <= v29)
              sub_1D4D5DDC8();
            if (*(_DWORD *)(*(_QWORD *)a3 + 4 * v24) < *(_DWORD *)(*(_QWORD *)a3 + 4 * v29))
            {
              *((_BYTE *)v69 + v24) = 1;
              v23 = (float *)*a2;
              v5 = a2[1];
              break;
            }
            *((_BYTE *)v69 + v29) = 1;
            v23 = (float *)*a2;
            v5 = a2[1];
          }
        }
        ++v29;
        v26 = (v5 - (uint64_t)v23) >> 3;
        v28 += 8;
      }
      while (v29 < v26);
    }
    v21 += 8;
  }
  while (v22 < (v5 - (uint64_t)v23) >> 3);
  v35 = (v5 - (uint64_t)v23) >> 3;
LABEL_44:
  v66 = 0;
  v67 = 0;
  v68 = 0;
  sub_1D4D7CB10(&v66, v23, v5, v35);
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_1D4D7CB88(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  a2[1] = *a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v37 = v66;
  v36 = v67;
  if (v67 == v66)
  {
    v37 = v67;
  }
  else
  {
    v38 = 0;
    do
    {
      if (!*((_BYTE *)v69 + v38))
      {
        v40 = (_QWORD *)a2[1];
        v39 = a2[2];
        if ((unint64_t)v40 >= v39)
        {
          v42 = ((uint64_t)v40 - *a2) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            sub_1D4D5DFA8();
          v43 = v39 - *a2;
          v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1))
            v44 = v42 + 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
            v46 = (char *)sub_1D4D5E2CC((uint64_t)(a2 + 2), v45);
          else
            v46 = 0;
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = v37[v38];
          v41 = v47 + 8;
          v49 = (char *)*a2;
          v48 = (char *)a2[1];
          if (v48 != (char *)*a2)
          {
            do
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *((_QWORD *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            v48 = (char *)*a2;
          }
          *a2 = (uint64_t)v47;
          a2[1] = (uint64_t)v41;
          a2[2] = (uint64_t)&v46[8 * v45];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v40 = v37[v38];
          v41 = v40 + 1;
        }
        a2[1] = (uint64_t)v41;
        v51 = __p;
        v53 = *(_DWORD **)(a3 + 8);
        v52 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v53 >= v52)
        {
          v55 = *(_DWORD **)a3;
          v56 = ((uint64_t)v53 - *(_QWORD *)a3) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            sub_1D4D5DFA8();
          v58 = v52 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)sub_1D4D5EA14(a3 + 16, v59);
            v55 = *(_DWORD **)a3;
            v53 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[4 * v56];
          *(_DWORD *)v61 = v51[v38];
          v54 = v61 + 4;
          while (v53 != v55)
          {
            v62 = *--v53;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(_QWORD *)a3 = v61;
          *(_QWORD *)(a3 + 8) = v54;
          *(_QWORD *)(a3 + 16) = &v60[4 * v59];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *v53 = *((_DWORD *)__p + v38);
          v54 = v53 + 1;
        }
        *(_QWORD *)(a3 + 8) = v54;
        v37 = v66;
        v36 = v67;
      }
      ++v38;
    }
    while (v38 < v36 - v37);
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
    v37 = v66;
  }
  if (v37)
  {
    v67 = v37;
    operator delete(v37);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
}

void sub_1D4D7C9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1D4D7CA20(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_1D4D5DFA8();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t sub_1D4D7CAC8(uint64_t result)
{
  *(_QWORD *)result = off_1E988AAF8;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

char *sub_1D4D7CADC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_1D4DAD150(*a2, a2[1], a2[2], a2[3], *a3, a3[3]);
}

uint64_t sub_1D4D7CB04()
{
  return 0;
}

_QWORD *sub_1D4D7CB10(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D6053C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D7CB6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D7CB88(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D5E9D4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D7CBE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D4D7CC00(uint64_t *a1)
{
  uint64_t i;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  _QWORD *v13;
  double *v14;
  double *v15;
  void **v16;
  unint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  double v27;
  long double v28;
  double v29;
  double *v31;
  double *v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  void *v36[3];
  _QWORD v37[3];
  _QWORD v38[2];
  long double (*v39)(uint64_t, double);
  void *v40;
  __int128 v41;
  void *__p;
  _BYTE *v43;
  void **v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v39 = sub_1D4D7D0B0;
  v40 = &unk_1E988B4B8;
  v41 = xmmword_1D4DB1EE0;
  sub_1D4D7D3A0(v37, 9uLL);
  for (i = 0; i != 216; i += 24)
    sub_1D4D6455C(v37[0] + i, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1D4D72594(v36, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1D4D72594(&v34, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1);
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      v5 = v3 + 304 * v4;
      v6 = *(_QWORD *)(v5 + 112);
      v7 = v36[0];
      *((_QWORD *)v36[0] + v4) = v6;
      if (v4)
        *((_QWORD *)v34 + (v4 - 1)) = v6 - v7[(v4 - 1)];
      sub_1D4D72BDC((uint64_t)&__p, v5);
      sub_1D4D72C5C(&v44, (char *)&__p);
      v8 = 0;
      v9 = (uint64_t *)v37[0];
      do
      {
        v10 = *v9;
        v9 += 3;
        *(double *)(v10 + 8 * v4) = *(double *)&(&v44)[v8] * *(double *)&qword_1D4DB1EF0[v8];
        ++v8;
      }
      while (v8 != 9);
      ++v4;
      v3 = *a1;
    }
    while (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v4);
  }
  std::__sort<std::__less<long long,long long> &,long long *>();
  v11 = *(_QWORD *)((char *)v34 + (((v35 - (_BYTE *)v34) >> 1) & 0xFFFFFFFFFFFFFFF8));
  sub_1D4D604C8(&__p, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  if (v43 - (_BYTE *)__p >= 1)
    bzero(__p, 8 * (((unint64_t)(v43 - (_BYTE *)__p) >> 3) - ((unint64_t)(v43 - (_BYTE *)__p) > 7)) + 8);
  for (j = 0; j != 9; ++j)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v13 = (_QWORD *)(v37[0] + 24 * j);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    sub_1D4D7D0E0(v13, &v31, 1);
    sub_1D4D7D0E0(v13, &v44, 0);
    v15 = v31;
    v14 = v32;
    v16 = v44;
    if (v32 == v31)
    {
      if (!v44)
        goto LABEL_25;
    }
    else
    {
      v17 = v32 - v31;
      if (v17 <= 1)
        v17 = 1;
      v18 = (double *)v44;
      do
      {
        v19 = *v18++;
        *v15 = (*v15 + v19) * 0.5;
        ++v15;
        --v17;
      }
      while (v17);
    }
    v45 = v16;
    operator delete(v16);
    v14 = v31;
    if (v32 == v31)
    {
LABEL_25:
      if (!v14)
        continue;
      goto LABEL_26;
    }
    v20 = 0;
    v21 = v32 - v31;
    v22 = (double *)__p;
    if (v21 <= 1)
      v21 = 1;
    do
    {
      v22[v20] = v22[v20] + v14[v20] * v14[v20];
      ++v20;
    }
    while (v21 != v20);
LABEL_26:
    v32 = v14;
    operator delete(v14);
  }
  v23 = 1.0;
  if (v43 == __p)
  {
    v27 = -1.0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = (v43 - (_BYTE *)__p) >> 3;
    if (v26 <= 1)
      v26 = 1;
    v27 = -1.0;
    do
    {
      if (*((double *)__p + v24) > v27)
      {
        v27 = *((double *)__p + v24);
        v25 = v24;
      }
      ++v24;
    }
    while (v26 != v24);
    if (v25)
      v23 = (double)v11 / (double)(uint64_t)(*((_QWORD *)v36[0] + v25) - *((_QWORD *)v36[0] + v25 - 1));
  }
  v28 = log(v23 * (v27 * v23));
  v29 = v39((uint64_t)v38, v28);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  v44 = (void **)v37;
  sub_1D4D60C20(&v44);
  return v29;
}

void sub_1D4D7D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  *(_QWORD *)(v29 - 160) = &a19;
  sub_1D4D60C20((void ***)(v29 - 160));
  _Unwind_Resume(a1);
}

long double sub_1D4D7D0B0(uint64_t a1, double a2)
{
  return 1.0 / (exp(-(a2 - *(double *)(a1 + 32)) / *(double *)(a1 + 40)) + 1.0);
}

void sub_1D4D7D0E0(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];

  sub_1D4D6455C((uint64_t)a2, (uint64_t)(a1[1] - *a1) >> 3);
  if (a3)
  {
    v6 = &v34;
    v7 = &v35;
    v8 = &v36;
    v9 = &v37;
    v10 = &v38;
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 0x40000000;
    v39[2] = sub_1D4D7D2EC;
    v39[3] = &unk_1E988B4D8;
    v39[4] = a1;
    v34 = MEMORY[0x1E0C809B0];
    v11 = (uint64_t *)&unk_1E988B210;
    v12 = v39;
    v13 = &unk_1E988B4F8;
    v14 = sub_1D4D7D304;
    v15 = a2;
  }
  else
  {
    v11 = &v27;
    v7 = &v28;
    v33[0] = MEMORY[0x1E0C809B0];
    v8 = &v29;
    v9 = &v30;
    v10 = &v31;
    v33[1] = 0x40000000;
    v33[2] = sub_1D4D7D328;
    v33[3] = &unk_1E988B538;
    v33[4] = a1;
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 0x40000000;
    v32[2] = sub_1D4D7D35C;
    v32[3] = &unk_1E988B558;
    v27 = MEMORY[0x1E0C809B0];
    v6 = v32;
    v12 = v33;
    v13 = &unk_1E988B578;
    v14 = sub_1D4D7D388;
    v15 = a1;
    v32[4] = a2;
  }
  *v7 = 0x40000000;
  *v8 = (uint64_t)v14;
  *v9 = (uint64_t)v13;
  *v10 = (uint64_t)v15;
  if (a1[1] != *a1)
  {
    v16 = 0;
    do
    {
      v17 = 0;
      v18 = 0.0;
      v19 = 1;
      do
      {
        v20 = v17;
        v21 = v19;
        v22 = dbl_1D4DB1F38[v17];
        v23 = (v16 - v17);
        v24 = ((double (*)(_QWORD *, uint64_t))v12[2])(v12, v23);
        v19 = 0;
        v18 = v18 + v22 * v24;
        v17 = 1;
      }
      while ((v21 & 1) != 0);
      v25 = dbl_1D4DB1F48[v20];
      v26 = v18 - v25 * ((double (*)(uint64_t *, uint64_t))v6[2])(v6, v23);
      *(double *)(*a2 + 8 * ((uint64_t (*)(uint64_t *, unint64_t))v11[2])(v11, v16++)) = v26;
    }
    while (v16 < (uint64_t)(a1[1] - *a1) >> 3);
  }
}

double sub_1D4D7D2EC(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 >= 0)
    v2 = a2;
  else
    v2 = -a2;
  return *(double *)(**(_QWORD **)(a1 + 32) + 8 * v2);
}

double sub_1D4D7D304(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
    return 0.0;
  else
    return *(double *)(**(_QWORD **)(a1 + 32) + 8 * a2);
}

uint64_t sub_1D4D7D320(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_1D4D7D328(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a1 + 32);
  v3 = (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v2) >> 3;
  v4 = v3 + a2 - 1;
  v5 = v3 + ~(unint64_t)a2;
  if (a2 < 0)
    v5 = v4;
  return *(double *)(v2 + 8 * v5);
}

double sub_1D4D7D35C(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
    return 0.0;
  else
    return *(double *)(**(_QWORD **)(a1 + 32)
                     + 8
                     * (~(unint64_t)a2 + ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32)) >> 3)));
}

uint64_t sub_1D4D7D388(uint64_t a1, uint64_t a2)
{
  return ~a2 + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32)) >> 3);
}

_QWORD *sub_1D4D7D3A0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D609E4(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4D7D42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D4D60C20(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D7D440(_QWORD *result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  char *v9;

  v5 = 0;
  v6 = (char *)(a2 + 3);
  do
  {
    v7 = 0;
    v8 = 0;
    v9 = v6;
    do
    {
      v8 |= (*(unsigned __int8 *)(*result
                                + result[3] * (int)(*(v9 - 2) + (float)(a5 + 0.5))
                                + (int)(*(v9 - 3) + (float)(a4 + 0.5))) < *(unsigned __int8 *)(*result + result[3] * (int)(*v9 + (float)(a5 + 0.5)) + (int)(*(v9 - 1) + (float)(a4 + 0.5)))) << v7++;
      v9 += 4;
    }
    while (v7 != 8);
    *(_BYTE *)(a3 + v5++) = v8;
    v6 += 32;
  }
  while (v5 != 32);
  return result;
}

void sub_1D4D7D4E8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  float *v8;
  float v9;
  float v10;
  BOOL v11;
  _OWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  sub_1D4D7D614((uint64_t)a3, a2[2]);
  if (a2[2])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (float *)(*a2 + v6);
      v9 = *v8;
      v10 = v8[1];
      bzero(v13, 0x20uLL);
      v11 = v9 < 15.0 || v10 < 15.0;
      if (!v11 && v9 <= (float)(unint64_t)(a1[1] - 16) && v10 <= (float)(unint64_t)(a1[2] - 16))
        sub_1D4D7D440(a1, (uint64_t)&inertiaCamMetalLibEnd, (uint64_t)v13, v9, v10);
      v12[0] = v13[0];
      v12[1] = v13[1];
      sub_1D4D7D67C(a3, (uint64_t)v12);
      ++v7;
      v6 += 8;
    }
    while (a2[2] > v7);
  }
}

uint64_t sub_1D4D7D614(uint64_t result, unint64_t a2)
{
  std::logic_error *exception;

  if (*(_QWORD *)(result + 8) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "reserve");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  return result;
}

void sub_1D4D7D668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D4D7D67C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _OWORD *v3;
  __n128 result;
  __int128 v5;
  std::logic_error *exception;

  v2 = a1[2];
  if (v2 >= a1[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  v3 = (_OWORD *)(*a1 + 32 * v2);
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *v3 = *(_OWORD *)a2;
  v3[1] = v5;
  ++a1[2];
  return result;
}

void sub_1D4D7D6EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D7D700(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int32x4_t v4;
  const char *v5;
  uint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  float *v11;
  float *v12;
  float *v13;
  int16x8_t v14;
  int32x4_t v15;
  float32x4x2_t v16;
  float32x4x2_t v17;
  int8x16x4_t v18;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = vdupq_n_s32(v3);
  v5 = (const char *)&inertiaCamMetalLibEnd;
  v6 = 1;
  do
  {
    v18 = vld4q_s8(v5);
    v5 += 64;
    v7 = vmovl_s8(*(int8x8_t *)v18.val[0].i8);
    v8 = vmovl_s8(*(int8x8_t *)v18.val[1].i8);
    v9 = vmovl_s8(*(int8x8_t *)v18.val[2].i8);
    v10 = vmovl_s8(*(int8x8_t *)v18.val[3].i8);
    v17.val[0] = (float32x4_t)vaddw_high_s16(vmulq_s32(v4, vmovl_high_s16(v8)), v7);
    v17.val[1] = (float32x4_t)vaddw_high_s16(vmulq_s32(v4, vmovl_high_s16(v10)), v9);
    v16.val[0] = (float32x4_t)vaddw_s16(vmulq_s32(v4, vmovl_s16(*(int16x4_t *)v8.i8)), *(int16x4_t *)v7.i8);
    v16.val[1] = (float32x4_t)vaddw_s16(vmulq_s32(v4, vmovl_s16(*(int16x4_t *)v10.i8)), *(int16x4_t *)v9.i8);
    v11 = (float *)&result[v6];
    v12 = (float *)&result[v6 + 8];
    v13 = (float *)&result[v6 + 12];
    vst2q_f32(v11, v16);
    v11 += 8;
    vst2q_f32(v11, v17);
    v16.val[0] = (float32x4_t)vmovl_high_s8(v18.val[0]);
    v16.val[1] = (float32x4_t)vmovl_high_s8(v18.val[1]);
    v14 = vmovl_high_s8(v18.val[2]);
    v18.val[0] = (int8x16_t)vmovl_high_s8(v18.val[3]);
    v18.val[2] = (int8x16_t)vmulq_s32(v4, vmovl_s16(*(int16x4_t *)v16.val[1].f32));
    v16.val[1] = (float32x4_t)vaddw_high_s16(vmulq_s32(v4, vmovl_high_s16((int16x8_t)v16.val[1])), (int16x8_t)v16.val[0]);
    v18.val[2] = (int8x16_t)vaddw_s16((int32x4_t)v18.val[2], *(int16x4_t *)v16.val[0].f32);
    v6 += 16;
    v18.val[3] = (int8x16_t)vaddw_s16(vmulq_s32(v4, vmovl_s16(*(int16x4_t *)v18.val[0].i8)), *(int16x4_t *)v14.i8);
    vst2q_f32(v12, *(float32x4x2_t *)v18.val[2].i8);
    v15 = vaddw_high_s16(vmulq_s32(v4, vmovl_high_s16((int16x8_t)v18.val[0])), v14);
    vst2q_f32(v13, *(float32x4x2_t *)((char *)&v16 + 16));
  }
  while (v6 != 257);
  *result = v3;
  return result;
}

uint64_t sub_1D4D7D7F8(uint64_t result)
{
  if (result)
    JUMPOUT(0x1D826897CLL);
  return result;
}

_QWORD *sub_1D4D7D814(_QWORD *result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = 0;
  v6 = *result + result[3] * (float)(a5 + 0.5) + (float)(a4 + 0.5);
  v7 = a2 + 12;
  do
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v9 = (4 * v9) | (2
                     * (*(unsigned __int8 *)(v6 + *(int *)(v7 + v8 - 4)) < *(unsigned __int8 *)(v6 + *(int *)(v7 + v8)))) | (*(unsigned __int8 *)(v6 + *(int *)(v7 + v8 + 4)) < *(unsigned __int8 *)(v6 + *(int *)(v7 + v8 + 8)));
      v8 += 16;
    }
    while ((_DWORD)v8 != 64);
    *(_BYTE *)(a3 + v5++) = v9;
    v7 += 64;
  }
  while (v5 != 32);
  return result;
}

void sub_1D4D7D8A4(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  float *v10;
  float v11;
  float v12;
  BOOL v13;
  _OWORD v14[2];
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sub_1D4D7D614((uint64_t)a4, a3[2]);
  if (a3[2])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (float *)(*a3 + v8);
      v11 = *v10;
      v12 = v10[1];
      bzero(v15, 0x20uLL);
      v13 = v11 < 15.0 || v12 < 15.0;
      if (!v13 && v11 <= (float)(unint64_t)(a1[1] - 16) && v12 <= (float)(unint64_t)(a1[2] - 16))
        sub_1D4D7D814(a1, a2, (uint64_t)v15, v11, v12);
      v14[0] = v15[0];
      v14[1] = v15[1];
      sub_1D4D7D67C(a4, (uint64_t)v14);
      ++v9;
      v8 += 8;
    }
    while (a3[2] > v9);
  }
}

uint64_t sub_1D4D7D9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  return a1;
}

void sub_1D4D7DA0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D7DA30(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  while (1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2 == *(_QWORD *)(a1 + 32))
      break;
    v3 = *(void **)(v2 - 8);
    *(_QWORD *)(a1 + 40) = v2 - 8;
    sub_1D4D98DAC(v3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

void **sub_1D4D7DA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 16) && !*(_QWORD *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = a3;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 == *(_QWORD *)(a1 + 32))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(a1 + 40) = v4 - 8;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
    if (v5)
      return (void **)v5;
  }
  return sub_1D4D98DD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24));
}

uint64_t sub_1D4D7DB18(uint64_t a1, void *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 40);
  v7 = ((uint64_t)v6 - v5) >> 3;
  if (v7 >= *(_QWORD *)a1)
  {
    sub_1D4D98DAC(a2);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v6 >= v8)
    {
      if ((v7 + 1) >> 61)
        sub_1D4D5DFA8();
      v10 = v8 - v5;
      v11 = v10 >> 2;
      if (v10 >> 2 <= v7 + 1)
        v11 = v7 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_1D4D5E2CC(a1 + 48, v12);
      else
        v13 = 0;
      v14 = &v13[8 * v7];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v9 = v14 + 8;
      v17 = *(char **)(a1 + 32);
      v16 = *(char **)(a1 + 40);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = a2;
      v9 = v6 + 1;
    }
    *(_QWORD *)(a1 + 40) = v9;
  }
  return pthread_mutex_unlock(v4);
}

void sub_1D4D7DC24(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  CMTime *v14;
  CMTime *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  CMTime *v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime time1;
  CMTime v39;
  CMTime rhs;
  CMTime lhs;
  CMTime v42;
  CMTime v43;

  v5 = *a1;
  if (*a1 == a1[1])
  {
    *a3 = v5;
    a3[1] = v5;
    a3[2] = a1[2];
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v7 = (_QWORD *)*a2;
    v8 = sub_1D4D7EE1C(a3, v5);
    v9 = a1[1];
    a3[1] = v8;
    v43 = *(CMTime *)(v8 - 192);
    v10 = (_OWORD *)(v5 + 304);
    if (v5 + 304 != v9)
    {
      v11 = a2 + 1;
      do
      {
        v12 = v10;
        lhs = *(CMTime *)(v5 + 416);
        rhs = v43;
        CMTimeSubtract(&v42, &lhs, &rhs);
        v13 = v11;
        if (v7 != v11)
        {
          if (v7[4] == 0x86BCA1AF286BCA1BLL * ((a3[1] - *a3) >> 4))
          {
            v14 = (CMTime *)v7[11];
            v15 = (CMTime *)v7[12];
            while (v14 != v15)
            {
              v16 = a3[1];
              if (v16 >= a3[2])
              {
                v17 = sub_1D4D7F0B0(a3, (uint64_t)v12);
              }
              else
              {
                sub_1D4D7EFCC((uint64_t)a3, (uint64_t)v12);
                v17 = v16 + 304;
              }
              a3[1] = v17;
              sub_1D4D7ECDC(&v42, v14, &v43, (uint64_t)v12, v17 - 304, (uint64_t)&v39);
              v43 = v39;
              ++v14;
            }
            v18 = (_QWORD *)v7[1];
            if (v18)
            {
              do
              {
                v13 = v18;
                v18 = (_QWORD *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v7[2];
                v19 = *v13 == (_QWORD)v7;
                v7 = v13;
              }
              while (!v19);
            }
          }
          else
          {
            v13 = v7;
          }
        }
        v20 = a3[1];
        if (v20 >= a3[2])
        {
          v33 = sub_1D4D7EE1C(a3, (uint64_t)v12);
        }
        else
        {
          *(_OWORD *)v20 = *v12;
          v21 = v12[1];
          v22 = v12[2];
          v23 = v12[3];
          *(_OWORD *)(v20 + 60) = *(_OWORD *)((char *)v12 + 60);
          *(_OWORD *)(v20 + 32) = v22;
          *(_OWORD *)(v20 + 48) = v23;
          *(_OWORD *)(v20 + 16) = v21;
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 96) = 0;
          *(_QWORD *)(v20 + 80) = 0;
          *(_OWORD *)(v20 + 80) = *(_OWORD *)(v5 + 384);
          *(_QWORD *)(v20 + 96) = *(_QWORD *)(v5 + 400);
          *(_QWORD *)(v5 + 392) = 0;
          *(_QWORD *)(v5 + 400) = 0;
          *(_QWORD *)(v5 + 384) = 0;
          v24 = *(_OWORD *)(v5 + 440);
          v25 = *(_OWORD *)(v5 + 456);
          v26 = *(_OWORD *)(v5 + 472);
          *(_OWORD *)(v20 + 120) = *(_OWORD *)(v5 + 424);
          *(_OWORD *)(v20 + 168) = v26;
          *(_OWORD *)(v20 + 152) = v25;
          *(_OWORD *)(v20 + 136) = v24;
          v27 = *(_OWORD *)(v5 + 504);
          v28 = *(_OWORD *)(v5 + 520);
          v29 = *(_OWORD *)(v5 + 536);
          *(_OWORD *)(v20 + 184) = *(_OWORD *)(v5 + 488);
          *(_OWORD *)(v20 + 232) = v29;
          *(_OWORD *)(v20 + 216) = v28;
          *(_OWORD *)(v20 + 200) = v27;
          v30 = *(_OWORD *)(v5 + 568);
          v31 = *(_OWORD *)(v5 + 584);
          v32 = *(_QWORD *)(v5 + 597);
          *(_OWORD *)(v20 + 248) = *(_OWORD *)(v5 + 552);
          *(_QWORD *)(v20 + 293) = v32;
          *(_OWORD *)(v20 + 264) = v30;
          *(_OWORD *)(v20 + 280) = v31;
          *(_OWORD *)(v20 + 104) = *(_OWORD *)(v5 + 408);
          v33 = v20 + 304;
        }
        v34 = (CMTime *)(v5 + 416);
        a3[1] = v33;
        v37 = *v34;
        v36 = v43;
        CMTimeSubtract(&time1, &v37, &v36);
        v35 = v42;
        if (CMTimeCompare(&time1, &v35))
          sub_1D4D7ECDC(&v42, v34, &v43, a3[1] - 304, a3[1] - 304, (uint64_t)&v39);
        v43 = *(CMTime *)(a3[1] - 192);
        v10 = v12 + 19;
        v7 = v13;
        v5 = (uint64_t)v12;
      }
      while (v12 + 19 != (_OWORD *)a1[1]);
    }
  }
}

void sub_1D4D7DF54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v1;
  sub_1D4D61D18((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1D4D7DF80(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v25[3];
  __int128 v26;
  uint64_t v27;
  void *__p;
  char *v29;
  char *v30;
  void **v31;

  v5 = *a1;
  v6 = a1[1];
  v29 = 0;
  v30 = 0;
  __p = 0;
  if (v5 != v6)
  {
    sub_1D4D61C3C(&__p, 0x86BCA1AF286BCA1BLL * ((v6 - v5) >> 4));
    v7 = *a1;
    v8 = a1[1];
    if (*a1 != v8)
    {
      v9 = v29;
      do
      {
        v10 = (__int128 *)(v7 + 112);
        if (v9 >= v30)
        {
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (_BYTE *)__p) >> 3);
          v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_1D4D5DFA8();
          if (0x5555555555555556 * ((v30 - (_BYTE *)__p) >> 3) > v13)
            v13 = 0x5555555555555556 * ((v30 - (_BYTE *)__p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)sub_1D4D60A34((uint64_t)&v30, v14);
          else
            v15 = 0;
          v16 = &v15[24 * v12];
          v17 = *v10;
          *((_QWORD *)v16 + 2) = *(_QWORD *)(v7 + 128);
          *(_OWORD *)v16 = v17;
          v19 = (char *)__p;
          v18 = v29;
          v20 = v16;
          if (v29 != __p)
          {
            do
            {
              v21 = *(_OWORD *)(v18 - 24);
              *((_QWORD *)v20 - 1) = *((_QWORD *)v18 - 1);
              *(_OWORD *)(v20 - 24) = v21;
              v20 -= 24;
              v18 -= 24;
            }
            while (v18 != v19);
            v18 = (char *)__p;
          }
          v9 = v16 + 24;
          __p = v20;
          v29 = v16 + 24;
          v30 = &v15[24 * v14];
          if (v18)
            operator delete(v18);
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)v9 + 2) = *(_QWORD *)(v7 + 128);
          *(_OWORD *)v9 = v11;
          v9 += 24;
        }
        v29 = v9;
        v7 += 304;
      }
      while (v7 != v8);
    }
  }
  sub_1D4D7E224((uint64_t *)&__p, a2, (uint64_t)a4);
  memset(v25, 0, sizeof(v25));
  sub_1D4D61DA4(v25, *a1, a1[1], 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1D4D7DC24(v25, a4, (uint64_t *)&v26);
  sub_1D4D62020(a3);
  *(_OWORD *)a3 = v26;
  a3[2] = v27;
  v27 = 0;
  v26 = 0uLL;
  v31 = (void **)&v26;
  sub_1D4D61D18(&v31);
  v31 = (void **)v25;
  sub_1D4D61D18(&v31);
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D4D7E1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D7E224(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMTime *v8;
  CMTime *v9;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t **v19;
  CMTimeEpoch *v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  char **v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  CMTimeEpoch v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  CMTimeEpoch v41;
  __int128 v42;
  uint64_t v44;
  uint64_t v45;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  unint64_t v50;
  CMTime v51;
  CMTime v52;
  CMTime time2;
  CMTime time1;
  CMTime *v55;
  CMTime *v56;
  uint64_t v57;
  unint64_t *v58;

  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > 1)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    sub_1D4D617B8(&v55, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
    if (v56 == v55)
      v6 = 0;
    else
      v6 = v5;
    sub_1D4D7F26C(v55, v56, v6, 1);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = a3 + 8;
    v7 = *a1;
    v9 = v55;
    v8 = v56;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 2 && v55 != v56)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        if (v9 == v8)
          break;
        v13 = (__int128 *)(v7 + 24 * v12);
        v14 = (__int128 *)((char *)v13 - 24);
        while (1)
        {
          v15 = *(_OWORD *)&v9->value;
          time1.epoch = v9->epoch;
          *(_OWORD *)&time1.value = v15;
          v16 = *v14;
          time2.epoch = *((_QWORD *)v13 - 1);
          *(_OWORD *)&time2.value = v16;
          if (CMTimeCompare(&time1, &time2) > 0)
            break;
          if (++v9 == v56)
            goto LABEL_45;
        }
        if (v9 == v56)
          break;
        v17 = *(_OWORD *)&v9->value;
        v52.epoch = v9->epoch;
        *(_OWORD *)&v52.value = v17;
        v18 = *v13;
        v51.epoch = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v51.value = v18;
        if (CMTimeCompare(&v52, &v51) < 0)
        {
          v50 = v11 + v12;
          v58 = &v50;
          v19 = sub_1D4D63BF0((uint64_t **)a3, &v50, (uint64_t)&unk_1D4DB1F6A, &v58);
          v20 = (CMTimeEpoch *)v19;
          v44 = v11;
          v21 = *v14;
          v19[7] = (uint64_t *)*((_QWORD *)v13 - 1);
          *(_OWORD *)(v19 + 5) = v21;
          v22 = *v13;
          v19[10] = (uint64_t *)*((_QWORD *)v13 + 2);
          *((_OWORD *)v19 + 4) = v22;
          if (v9 != v56)
          {
            v23 = v19 + 5;
            v24 = v19 + 8;
            v25 = (char **)(v19 + 11);
            v45 = (uint64_t)(v19 + 13);
            do
            {
              v26 = *(_OWORD *)&v9->value;
              v49.epoch = v9->epoch;
              *(_OWORD *)&v49.value = v26;
              *(_OWORD *)&v48.value = *v23;
              v48.epoch = v20[7];
              if (CMTimeCompare(&v49, &v48) < 1)
                break;
              v27 = *(_OWORD *)&v9->value;
              v47.epoch = v9->epoch;
              *(_OWORD *)&v47.value = v27;
              *(_OWORD *)&v46.value = *v24;
              v46.epoch = v20[10];
              if ((CMTimeCompare(&v47, &v46) & 0x80000000) == 0)
                break;
              v29 = v20[12];
              v28 = v20[13];
              if (v29 >= v28)
              {
                v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)*v25) >> 3);
                v33 = v32 + 1;
                if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_1D4D5DFA8();
                v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*v25) >> 3);
                if (2 * v34 > v33)
                  v33 = 2 * v34;
                if (v34 >= 0x555555555555555)
                  v35 = 0xAAAAAAAAAAAAAAALL;
                else
                  v35 = v33;
                if (v35)
                  v36 = (char *)sub_1D4D60A34(v45, v35);
                else
                  v36 = 0;
                v37 = &v36[24 * v32];
                v38 = *(_OWORD *)&v9->value;
                *((_QWORD *)v37 + 2) = v9->epoch;
                *(_OWORD *)v37 = v38;
                v40 = (char *)v20[11];
                v39 = (char *)v20[12];
                v41 = (CMTimeEpoch)v37;
                if (v39 != v40)
                {
                  do
                  {
                    v42 = *(_OWORD *)(v39 - 24);
                    *(_QWORD *)(v41 - 8) = *((_QWORD *)v39 - 1);
                    *(_OWORD *)(v41 - 24) = v42;
                    v41 -= 24;
                    v39 -= 24;
                  }
                  while (v39 != v40);
                  v39 = *v25;
                }
                v31 = (CMTimeEpoch)(v37 + 24);
                v20[11] = v41;
                v20[12] = (CMTimeEpoch)(v37 + 24);
                v20[13] = (CMTimeEpoch)&v36[24 * v35];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                v30 = *(_OWORD *)&v9->value;
                *(_QWORD *)(v29 + 16) = v9->epoch;
                *(_OWORD *)v29 = v30;
                v31 = v29 + 24;
              }
              v20[12] = v31;
              ++v9;
            }
            while (v9 != v56);
          }
          v11 = v44 - 0x5555555555555555 * ((v20[12] - v20[11]) >> 3);
        }
        ++v12;
        v7 = *a1;
        v8 = v56;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) && v9 != v56);
LABEL_45:
      v9 = v55;
    }
    if (v9)
    {
      v56 = v9;
      operator delete(v9);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
  }
}

void sub_1D4D7E614(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_1D4D63BA0(v1, *(_QWORD **)(v1 + 8));
  v4 = *(void **)(v2 - 128);
  if (v4)
  {
    *(_QWORD *)(v2 - 120) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1D4D7E658(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  uint64_t v23;

  v6 = (a1[1] - *a1) >> 3;
  v7 = a2[1] - *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v6 == v7 >> 3)
  {
    sub_1D4D78B88((void **)a3, v6);
    v10 = *a1;
    if (a1[1] != *a1)
    {
      v11 = 0;
      v12 = (_QWORD *)(a3 + 16);
      v13 = *(double **)(a3 + 8);
      do
      {
        v14 = *(double *)(v10 + 8 * v11) + a4 * (*(double *)(*a2 + 8 * v11) - *(double *)(v10 + 8 * v11));
        if ((unint64_t)v13 >= *v12)
        {
          v16 = *(double **)a3;
          v17 = ((uint64_t)v13 - *(_QWORD *)a3) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            sub_1D4D5DFA8();
          v19 = *v12 - (_QWORD)v16;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)sub_1D4D5E2CC(a3 + 16, v20);
            v16 = *(double **)a3;
            v13 = *(double **)(a3 + 8);
          }
          else
          {
            v21 = 0;
          }
          v22 = (double *)&v21[8 * v17];
          *v22 = v14;
          v15 = v22 + 1;
          while (v13 != v16)
          {
            v23 = *((_QWORD *)v13-- - 1);
            *((_QWORD *)v22-- - 1) = v23;
          }
          *(_QWORD *)a3 = v22;
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v13 = v14;
          v15 = v13 + 1;
        }
        *(_QWORD *)(a3 + 8) = v15;
        ++v11;
        v10 = *a1;
        v13 = v15;
      }
      while (v11 < (a1[1] - *a1) >> 3);
    }
  }
}

void sub_1D4D7E7C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D4D7E7E4@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  double Seconds;
  Float64 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime rhs;
  CMTime lhs;
  CMTime v38;
  CMTime v39;
  CMTime time;

  v4 = result;
  v6 = *result;
  v7 = result[1];
  if (*result == v7)
  {
    *a4 = v6;
    a4[1] = v6;
    a4[2] = result[2];
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = a2 + 1;
    v10 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 == a2 + 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = (_QWORD *)v10[1];
        v14 = v10;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v14[2];
            v16 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v16);
        }
        v12 -= 0x5555555555555555 * ((uint64_t)(v10[12] - v10[11]) >> 3);
        v10 = v15;
      }
      while (v15 != v11);
    }
    sub_1D4D8052C(a4, v12 - 0x5555555555555555 * ((v7 - v6) >> 3));
    v17 = (_QWORD *)*a2;
    v18 = *v4;
    result = (uint64_t *)sub_1D4D805DC(a4, *v4);
    v31 = v11;
    v32 = v4;
    while (1)
    {
      v18 += 24;
      if (v18 == v4[1])
        break;
      v19 = v11;
      if (v17 != v11)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
        if (v17[4] == v20)
        {
          v21 = (__int128 *)v17[11];
          v22 = (__int128 *)v17[12];
          if (v21 != v22)
          {
            v23 = v20 - 1;
            v24 = v17 + 5;
            do
            {
              v25 = *v21;
              lhs.epoch = *((_QWORD *)v21 + 2);
              *(_OWORD *)&lhs.value = v25;
              *(_OWORD *)&rhs.value = *v24;
              rhs.epoch = v17[7];
              CMTimeSubtract(&v38, &lhs, &rhs);
              v34 = *(CMTime *)(v17 + 8);
              *(_OWORD *)&v33.value = *v24;
              v33.epoch = v17[7];
              CMTimeSubtract(&v35, &v34, &v33);
              time = v38;
              Seconds = CMTimeGetSeconds(&time);
              v39 = v35;
              v27 = CMTimeGetSeconds(&v39);
              v28 = *a4;
              *(double *)&v39.value = Seconds / v27;
              v29 = *(_QWORD *)(a3 + 24);
              if (!v29)
                sub_1D4D6A05C();
              (*(void (**)(CMTime *__return_ptr, uint64_t, unint64_t, uint64_t, CMTime *))(*(_QWORD *)v29 + 48))(&time, v29, v28 + 24 * v23, v18, &v39);
              sub_1D4D805DC(a4, (uint64_t)&time);
              if (time.value)
              {
                *(_QWORD *)&time.timescale = time.value;
                operator delete((void *)time.value);
              }
              v21 = (__int128 *)((char *)v21 + 24);
            }
            while (v21 != v22);
          }
          v30 = (_QWORD *)v17[1];
          v11 = v31;
          v4 = v32;
          if (v30)
          {
            do
            {
              v19 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v17[2];
              v16 = *v19 == (_QWORD)v17;
              v17 = v19;
            }
            while (!v16);
          }
        }
        else
        {
          v19 = v17;
        }
      }
      result = (uint64_t *)sub_1D4D805DC(a4, v18);
      v17 = v19;
    }
  }
  return result;
}

void sub_1D4D7EAAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v1;
  sub_1D4D60C20((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D7EAF8@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void **v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  sub_1D4D7E224(a1, a3, (uint64_t)a5);
  v19[0] = &unk_1E988AFC8;
  v19[1] = sub_1D4D7E658;
  v20 = v19;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v18 = v17;
  v17[0] = &unk_1E988AFC8;
  v17[1] = sub_1D4D7E658;
  sub_1D4D7E7E4((uint64_t *)&v12, a5, (uint64_t)v17, (uint64_t *)&v14);
  sub_1D4D6ABA8(a4);
  *(_OWORD *)a4 = v14;
  a4[2] = v15;
  v15 = 0;
  v14 = 0uLL;
  v16 = (void **)&v14;
  sub_1D4D60C20(&v16);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v16 = (void **)&v12;
  sub_1D4D60C20(&v16);
  result = v20;
  if (v20 == v19)
  {
    v11 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_1D4D7EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v25 = a21;
  if (a21 == v22)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  a17 = (void **)&a9;
  sub_1D4D60C20(&a17);
  v27 = *(_QWORD **)(v23 - 48);
  if (v27 == (_QWORD *)(v23 - 72))
  {
    v28 = 4;
    v27 = (_QWORD *)(v23 - 72);
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_11:
  sub_1D4D63BA0(v21, *(_QWORD **)(v21 + 8));
  _Unwind_Resume(a1);
}

void sub_1D4D7ECDC(CMTime *a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double Seconds;
  double v12;
  uint64_t i;
  __int128 v14;
  CMTime v15;
  CMTime lhs;
  CMTime v17;
  CMTime v18;
  CMTime time;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  lhs = *a2;
  v15 = *a3;
  CMTimeSubtract(&v17, &lhs, &v15);
  time = v17;
  Seconds = CMTimeGetSeconds(&time);
  v18 = *a1;
  v12 = Seconds / CMTimeGetSeconds(&v18);
  sub_1D4D732A0((uint64_t)&time, a4);
  for (i = 0; i != 72; i += 8)
    *(double *)((char *)&time.value + i) = v12 * *(double *)((char *)&time.value + i);
  sub_1D4D7333C(a5, (__int128 *)&time.value);
  v14 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a5 + 128) = a2->epoch;
  *(_OWORD *)(a5 + 112) = v14;
  *(_OWORD *)a6 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a6 + 16) = a2->epoch;
}

uint64_t sub_1D4D7EE1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[5];

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6BCA1AF286BCA1)
    v9 = 0xD79435E50D7943;
  else
    v9 = v5;
  v26[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4D5F57C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[304 * v4];
  v26[0] = v10;
  v26[1] = v11;
  v26[3] = &v10[304 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_OWORD *)v11 + 5) = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v15 = *(_OWORD *)(a2 + 136);
  v16 = *(_OWORD *)(a2 + 152);
  v17 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v11 + 168) = v17;
  *(_OWORD *)(v11 + 152) = v16;
  *(_OWORD *)(v11 + 136) = v15;
  v18 = *(_OWORD *)(a2 + 200);
  v19 = *(_OWORD *)(a2 + 216);
  v20 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v11 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v11 + 232) = v20;
  *(_OWORD *)(v11 + 216) = v19;
  *(_OWORD *)(v11 + 200) = v18;
  v21 = *(_OWORD *)(a2 + 264);
  v22 = *(_OWORD *)(a2 + 280);
  v23 = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(v11 + 293) = v23;
  *(_OWORD *)(v11 + 264) = v21;
  *(_OWORD *)(v11 + 280) = v22;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  v26[2] = v11 + 304;
  sub_1D4D5F508(a1, v26);
  v24 = a1[1];
  sub_1D4D5F774((uint64_t)v26);
  return v24;
}

void sub_1D4D7EFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1D4D7EFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  sub_1D4D5E408((_QWORD *)(v4 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v10;
  *(_OWORD *)(v4 + 136) = v9;
  *(_OWORD *)(v4 + 120) = v8;
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v13;
  *(_OWORD *)(v4 + 200) = v12;
  *(_OWORD *)(v4 + 184) = v11;
  result = *(__n128 *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  v16 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(v4 + 293) = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v15;
  *(_OWORD *)(v4 + 280) = v16;
  *(__n128 *)(v4 + 248) = result;
  *(_QWORD *)(a1 + 8) = v4 + 304;
  return result;
}

void sub_1D4D7F0A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D7F0B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t *v30;

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6BCA1AF286BCA1)
    v9 = 0xD79435E50D7943;
  else
    v9 = v5;
  v30 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4D5F57C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[304 * v4];
  v27[0] = v10;
  v27[1] = v11;
  v28 = v11;
  v29 = &v10[304 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 10) = 0;
  sub_1D4D5E408((_QWORD *)v11 + 10, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  v15 = &v10[304 * v4];
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v15 + 152) = v18;
  *(_OWORD *)(v15 + 136) = v17;
  *(_OWORD *)(v15 + 120) = v16;
  v19 = *(_OWORD *)(a2 + 184);
  v20 = *(_OWORD *)(a2 + 200);
  v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v15 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v15 + 216) = v21;
  *(_OWORD *)(v15 + 200) = v20;
  *(_OWORD *)(v15 + 184) = v19;
  v22 = *(_OWORD *)(a2 + 264);
  v23 = *(_OWORD *)(a2 + 280);
  v24 = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v15 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(v15 + 293) = v24;
  *(_OWORD *)(v15 + 264) = v22;
  *(_OWORD *)(v15 + 280) = v23;
  v28 += 304;
  sub_1D4D5F508(a1, v27);
  v25 = a1[1];
  sub_1D4D5F774((uint64_t)v27);
  return v25;
}

void sub_1D4D7F258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4D7F26C(CMTime *a1, CMTime *a2, uint64_t a3, char a4)
{
  CMTime *v7;
  CMTime *v8;
  CMTime *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  CMTime *v13;
  uint64_t v14;
  __int128 v15;
  CMTimeEpoch v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  CMTime *v22;
  CMTime *v23;
  CMTime *v24;
  __int128 v25;
  int32_t v26;
  CMTime *v27;
  __int128 v28;
  int32_t v29;
  CMTime *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CMTimeEpoch v36;
  __int128 v37;
  CMTimeEpoch v38;
  CMTime *v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  CMTime *v45;
  CMTimeEpoch v46;
  int32_t v47;
  CMTime *v48;
  CMTimeEpoch v49;
  int32_t v50;
  CMTime *v51;
  CMTime *v52;
  CMTimeEpoch v53;
  int32_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CMTimeEpoch v58;
  __int128 v59;
  CMTimeEpoch v60;
  __int128 v61;
  CMTime *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  CMTime *v69;
  BOOL v70;
  char v71;
  uint64_t v72;
  CMTime *v73;
  CMTime *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  CMTimeEpoch v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  CMTime *v85;
  __int128 v86;
  __int128 v87;
  CMTime *v88;
  __int128 v89;
  __int128 v90;
  CMTime *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  CMTime *v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  CMTime *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  CMTime *v118;
  __int128 v119;
  __int128 v120;
  CMTime *v121;
  CMTime *v122;
  CMTimeEpoch epoch;
  int32_t v124;
  __int128 v126;
  CMTimeEpoch v127;
  CMTime v128;
  CMTime v129;
  CMTime v130;
  CMTime v131;
  CMTime v132;
  CMTime v133;
  CMTime time2;
  CMTime time1;

LABEL_1:
  v7 = a2;
  v8 = a2 - 1;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v64 = *(_OWORD *)&a2[-1].value;
        time1.epoch = a2[-1].epoch;
        *(_OWORD *)&time1.value = v64;
        v65 = *(_OWORD *)&a1->value;
        time2.epoch = a1->epoch;
        *(_OWORD *)&time2.value = v65;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          v66 = *(_OWORD *)&a1->value;
          time1.epoch = a1->epoch;
          *(_OWORD *)&time1.value = v66;
          v67 = *(_OWORD *)&v8->value;
          a1->epoch = a2[-1].epoch;
          *(_OWORD *)&a1->value = v67;
          v68 = *(_OWORD *)&time1.value;
          a2[-1].epoch = time1.epoch;
          *(_OWORD *)&v8->value = v68;
        }
        return;
      case 3:
        sub_1D4D7FF4C(a1, a1 + 1, v8);
        return;
      case 4:
        sub_1D4D80334(a1, a1 + 1, a1 + 2, v8);
        return;
      case 5:
        sub_1D4D7FDC4(a1, a1 + 1, a1 + 2, a1 + 3, v8);
        return;
      default:
        if (v10 <= 575)
        {
          v69 = a1 + 1;
          v70 = a1 == v7 || v69 == v7;
          v71 = v70;
          if ((a4 & 1) != 0)
          {
            if ((v71 & 1) == 0)
            {
              v72 = 0;
              v73 = a1;
              do
              {
                v74 = v73;
                v73 = v69;
                v75 = *(_OWORD *)&v69->value;
                time1.epoch = v69->epoch;
                *(_OWORD *)&time1.value = v75;
                v76 = *(_OWORD *)&v74->value;
                time2.epoch = v74->epoch;
                *(_OWORD *)&time2.value = v76;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  v130.epoch = v73->epoch;
                  *(_OWORD *)&v130.value = *(_OWORD *)&v73->value;
                  v77 = v72;
                  while (1)
                  {
                    v78 = (char *)a1 + v77;
                    *(_OWORD *)(v78 + 24) = *(_OWORD *)((char *)&a1->value + v77);
                    *((_QWORD *)v78 + 5) = *(CMTimeEpoch *)((char *)&a1->epoch + v77);
                    if (!v77)
                      break;
                    time1 = v130;
                    v79 = *((_QWORD *)v78 - 1);
                    *(_OWORD *)&time2.value = *(_OWORD *)(v78 - 24);
                    time2.epoch = v79;
                    v77 -= 24;
                    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                    {
                      v80 = (uint64_t)&a1[1] + v77;
                      goto LABEL_76;
                    }
                  }
                  v80 = (uint64_t)a1;
LABEL_76:
                  *(_QWORD *)(v80 + 16) = v130.epoch;
                  *(_OWORD *)v80 = *(_OWORD *)&v130.value;
                }
                v69 = v73 + 1;
                v72 += 24;
              }
              while (&v73[1] != a2);
            }
          }
          else if ((v71 & 1) == 0)
          {
            do
            {
              v118 = a1;
              a1 = v69;
              v119 = *(_OWORD *)&v69->value;
              time1.epoch = v69->epoch;
              *(_OWORD *)&time1.value = v119;
              v120 = *(_OWORD *)&v118->value;
              time2.epoch = v118->epoch;
              *(_OWORD *)&time2.value = v120;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                v133.epoch = a1->epoch;
                *(_OWORD *)&v133.value = *(_OWORD *)&a1->value;
                v121 = a1;
                do
                {
                  v122 = v121 - 1;
                  *(_OWORD *)&v121->value = *(_OWORD *)&v121[-1].value;
                  v121->epoch = v121[-1].epoch;
                  time1 = v133;
                  epoch = v121[-2].epoch;
                  *(_OWORD *)&time2.value = *(_OWORD *)&v121[-2].value;
                  time2.epoch = epoch;
                  v124 = CMTimeCompare(&time1, &time2);
                  v121 = v122;
                }
                while (v124 < 0);
                v122->epoch = v133.epoch;
                *(_OWORD *)&v122->value = *(_OWORD *)&v133.value;
              }
              v69 = a1 + 1;
            }
            while (&a1[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v81 = (unint64_t)(v11 - 2) >> 1;
            v82 = v81;
            do
            {
              v83 = v82;
              if (v81 >= v82)
              {
                v84 = (2 * v82) | 1;
                v85 = &a1[v84];
                if (2 * v82 + 2 < v11)
                {
                  v86 = *(_OWORD *)&v85->value;
                  time1.epoch = v85->epoch;
                  *(_OWORD *)&time1.value = v86;
                  v87 = *(_OWORD *)&v85[1].value;
                  time2.epoch = v85[1].epoch;
                  *(_OWORD *)&time2.value = v87;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    ++v85;
                    v84 = 2 * v83 + 2;
                  }
                }
                v88 = &a1[v83];
                v89 = *(_OWORD *)&v85->value;
                time1.epoch = v85->epoch;
                *(_OWORD *)&time1.value = v89;
                v90 = *(_OWORD *)&v88->value;
                time2.epoch = v88->epoch;
                *(_OWORD *)&time2.value = v90;
                if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                {
                  v131.epoch = v88->epoch;
                  *(_OWORD *)&v131.value = *(_OWORD *)&v88->value;
                  do
                  {
                    v91 = v85;
                    v92 = *(_OWORD *)&v85->value;
                    v88->epoch = v85->epoch;
                    *(_OWORD *)&v88->value = v92;
                    if (v81 < v84)
                      break;
                    v93 = (2 * v84) | 1;
                    v85 = &a1[v93];
                    v94 = 2 * v84 + 2;
                    if (v94 < v11)
                    {
                      v95 = *(_OWORD *)&v85->value;
                      time1.epoch = v85->epoch;
                      *(_OWORD *)&time1.value = v95;
                      v96 = *(_OWORD *)&v85[1].value;
                      time2.epoch = v85[1].epoch;
                      *(_OWORD *)&time2.value = v96;
                      if (CMTimeCompare(&time1, &time2) < 0)
                      {
                        ++v85;
                        v93 = v94;
                      }
                    }
                    v97 = *(_OWORD *)&v85->value;
                    time1.epoch = v85->epoch;
                    *(_OWORD *)&time1.value = v97;
                    time2 = v131;
                    v88 = v91;
                    v84 = v93;
                  }
                  while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
                  v91->epoch = v131.epoch;
                  *(_OWORD *)&v91->value = *(_OWORD *)&v131.value;
                }
              }
              v82 = v83 - 1;
            }
            while (v83);
            v98 = v10 / 0x18uLL;
            do
            {
              v99 = 0;
              v127 = a1->epoch;
              v126 = *(_OWORD *)&a1->value;
              v100 = (uint64_t)a1;
              do
              {
                v101 = v100 + 24 * v99 + 24;
                v102 = (2 * v99) | 1;
                v103 = 2 * v99 + 2;
                if (v103 < v98)
                {
                  v104 = *(_OWORD *)v101;
                  time1.epoch = *(_QWORD *)(v100 + 24 * v99 + 40);
                  *(_OWORD *)&time1.value = v104;
                  v105 = *(_OWORD *)(v100 + 24 * v99 + 48);
                  time2.epoch = *(_QWORD *)(v100 + 24 * v99 + 64);
                  *(_OWORD *)&time2.value = v105;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    v101 += 24;
                    v102 = v103;
                  }
                }
                v106 = *(_OWORD *)v101;
                *(_QWORD *)(v100 + 16) = *(_QWORD *)(v101 + 16);
                *(_OWORD *)v100 = v106;
                v100 = v101;
                v99 = v102;
              }
              while (v102 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
              v107 = a2 - 1;
              v70 = v101 == (_QWORD)--a2;
              if (v70)
              {
                *(_QWORD *)(v101 + 16) = v127;
                *(_OWORD *)v101 = v126;
              }
              else
              {
                v108 = *(_OWORD *)&v107->value;
                *(_QWORD *)(v101 + 16) = v107->epoch;
                *(_OWORD *)v101 = v108;
                v107->epoch = v127;
                *(_OWORD *)&v107->value = v126;
                v109 = v101 - (_QWORD)a1 + 24;
                if (v109 >= 25)
                {
                  v110 = (v109 / 0x18uLL - 2) >> 1;
                  v111 = &a1[v110];
                  v112 = *(_OWORD *)&v111->value;
                  time1.epoch = v111->epoch;
                  *(_OWORD *)&time1.value = v112;
                  v113 = *(_OWORD *)v101;
                  time2.epoch = *(_QWORD *)(v101 + 16);
                  *(_OWORD *)&time2.value = v113;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    v132.epoch = *(_QWORD *)(v101 + 16);
                    *(_OWORD *)&v132.value = *(_OWORD *)v101;
                    do
                    {
                      v114 = (uint64_t)v111;
                      v115 = *(_OWORD *)&v111->value;
                      *(_QWORD *)(v101 + 16) = v111->epoch;
                      *(_OWORD *)v101 = v115;
                      if (!v110)
                        break;
                      v110 = (v110 - 1) >> 1;
                      v111 = &a1[v110];
                      v116 = *(_OWORD *)&v111->value;
                      time1.epoch = v111->epoch;
                      *(_OWORD *)&time1.value = v116;
                      time2 = v132;
                      v101 = v114;
                    }
                    while (CMTimeCompare(&time1, &time2) < 0);
                    *(_QWORD *)(v114 + 16) = v132.epoch;
                    *(_OWORD *)v114 = *(_OWORD *)&v132.value;
                  }
                }
              }
            }
            while (v98-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0xC01)
        {
          sub_1D4D7FF4C(v13, a1, v8);
        }
        else
        {
          sub_1D4D7FF4C(a1, v13, v8);
          v14 = v12;
          sub_1D4D7FF4C(a1 + 1, &a1[v14 - 1], a2 - 2);
          sub_1D4D7FF4C(a1 + 2, &a1[v14 + 1], a2 - 3);
          sub_1D4D7FF4C(&a1[v14 - 1], v13, &a1[v14 + 1]);
          v15 = *(_OWORD *)&a1->value;
          time1.epoch = a1->epoch;
          *(_OWORD *)&time1.value = v15;
          v16 = v13->epoch;
          *(_OWORD *)&a1->value = *(_OWORD *)&v13->value;
          a1->epoch = v16;
          v17 = *(_OWORD *)&time1.value;
          v13->epoch = time1.epoch;
          *(_OWORD *)&v13->value = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_OWORD *)&a1[-1].value;
          time1.epoch = a1[-1].epoch;
          *(_OWORD *)&time1.value = v18;
          v19 = *(_OWORD *)&a1->value;
          time2.epoch = a1->epoch;
          *(_OWORD *)&time2.value = v19;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            v129.epoch = a1->epoch;
            *(_OWORD *)&v129.value = *(_OWORD *)&a1->value;
            v43 = *(_OWORD *)&a1->value;
            time1.epoch = v129.epoch;
            *(_OWORD *)&time1.value = v43;
            v44 = *(_OWORD *)&v8->value;
            time2.epoch = a2[-1].epoch;
            *(_OWORD *)&time2.value = v44;
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              v48 = a1;
              do
              {
                v9 = v48 + 1;
                time1 = v129;
                v49 = v48[1].epoch;
                *(_OWORD *)&time2.value = *(_OWORD *)&v48[1].value;
                time2.epoch = v49;
                v50 = CMTimeCompare(&time1, &time2);
                v48 = v9;
              }
              while ((v50 & 0x80000000) == 0);
            }
            else
            {
              v45 = a1 + 1;
              do
              {
                v9 = v45;
                if (v45 >= v7)
                  break;
                time1 = v129;
                v46 = v45->epoch;
                *(_OWORD *)&time2.value = *(_OWORD *)&v9->value;
                time2.epoch = v46;
                v47 = CMTimeCompare(&time1, &time2);
                v45 = v9 + 1;
              }
              while ((v47 & 0x80000000) == 0);
            }
            v51 = v7;
            if (v9 < v7)
            {
              v52 = v7;
              do
              {
                v51 = v52 - 1;
                time1 = v129;
                v53 = v52[-1].epoch;
                *(_OWORD *)&time2.value = *(_OWORD *)&v52[-1].value;
                time2.epoch = v53;
                v54 = CMTimeCompare(&time1, &time2);
                v52 = v51;
              }
              while (v54 < 0);
            }
            while (v9 < v51)
            {
              v55 = *(_OWORD *)&v9->value;
              time1.epoch = v9->epoch;
              *(_OWORD *)&time1.value = v55;
              v56 = *(_OWORD *)&v51->value;
              v9->epoch = v51->epoch;
              *(_OWORD *)&v9->value = v56;
              v57 = *(_OWORD *)&time1.value;
              v51->epoch = time1.epoch;
              *(_OWORD *)&v51->value = v57;
              do
              {
                time1 = v129;
                v58 = v9[1].epoch;
                v59 = *(_OWORD *)&v9[1].value;
                ++v9;
                *(_OWORD *)&time2.value = v59;
                time2.epoch = v58;
              }
              while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
              do
              {
                time1 = v129;
                v60 = v51[-1].epoch;
                v61 = *(_OWORD *)&v51[-1].value;
                --v51;
                *(_OWORD *)&time2.value = v61;
                time2.epoch = v60;
              }
              while (CMTimeCompare(&time1, &time2) < 0);
            }
            v62 = v9 - 1;
            if (&v9[-1] != a1)
            {
              v63 = *(_OWORD *)&v62->value;
              a1->epoch = v9[-1].epoch;
              *(_OWORD *)&a1->value = v63;
            }
            a4 = 0;
            v9[-1].epoch = v129.epoch;
            *(_OWORD *)&v62->value = *(_OWORD *)&v129.value;
            continue;
          }
        }
        v20 = 0;
        v128.epoch = a1->epoch;
        *(_OWORD *)&v128.value = *(_OWORD *)&a1->value;
        do
        {
          v21 = *(_OWORD *)&a1[v20 + 1].value;
          time1.epoch = a1[v20 + 1].epoch;
          *(_OWORD *)&time1.value = v21;
          time2 = v128;
          ++v20;
        }
        while (CMTimeCompare(&time1, &time2) < 0);
        v22 = &a1[v20];
        v23 = v7;
        if (v20 == 1)
        {
          v27 = a2;
          while (v22 < v27)
          {
            v24 = v27 - 1;
            v28 = *(_OWORD *)&v27[-1].value;
            time1.epoch = v27[-1].epoch;
            *(_OWORD *)&time1.value = v28;
            time2 = v128;
            v29 = CMTimeCompare(&time1, &time2);
            v27 = v24;
            if (v29 < 0)
              goto LABEL_20;
          }
          v24 = v27;
        }
        else
        {
          do
          {
            v24 = v23 - 1;
            v25 = *(_OWORD *)&v23[-1].value;
            time1.epoch = v23[-1].epoch;
            *(_OWORD *)&time1.value = v25;
            time2 = v128;
            v26 = CMTimeCompare(&time1, &time2);
            v23 = v24;
          }
          while ((v26 & 0x80000000) == 0);
        }
LABEL_20:
        if (v22 >= v24)
        {
          v39 = v22 - 1;
        }
        else
        {
          v30 = &a1[v20];
          v31 = (unint64_t)v24;
          do
          {
            v32 = *(_OWORD *)&v30->value;
            time1.epoch = v30->epoch;
            *(_OWORD *)&time1.value = v32;
            v33 = *(_OWORD *)v31;
            v30->epoch = *(_QWORD *)(v31 + 16);
            *(_OWORD *)&v30->value = v33;
            v34 = *(_OWORD *)&time1.value;
            *(_QWORD *)(v31 + 16) = time1.epoch;
            *(_OWORD *)v31 = v34;
            do
            {
              v35 = *(_OWORD *)&v30[1].value;
              v36 = v30[1].epoch;
              ++v30;
              time1.epoch = v36;
              *(_OWORD *)&time1.value = v35;
              time2 = v128;
            }
            while (CMTimeCompare(&time1, &time2) < 0);
            do
            {
              v37 = *(_OWORD *)(v31 - 24);
              v38 = *(_QWORD *)(v31 - 8);
              v31 -= 24;
              time1.epoch = v38;
              *(_OWORD *)&time1.value = v37;
              time2 = v128;
            }
            while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
          }
          while ((unint64_t)v30 < v31);
          v39 = v30 - 1;
        }
        if (v39 != a1)
        {
          v40 = *(_OWORD *)&v39->value;
          a1->epoch = v39->epoch;
          *(_OWORD *)&a1->value = v40;
        }
        v39->epoch = v128.epoch;
        *(_OWORD *)&v39->value = *(_OWORD *)&v128.value;
        v41 = v22 >= v24;
        v7 = a2;
        if (!v41)
        {
LABEL_34:
          sub_1D4D7F26C(a1, v39, a3, a4 & 1);
          a4 = 0;
          v9 = v39 + 1;
          continue;
        }
        v42 = sub_1D4D80110(a1, v39);
        v9 = v39 + 1;
        if (!sub_1D4D80110(v39 + 1, a2))
        {
          if (v42)
            continue;
          goto LABEL_34;
        }
        a2 = v39;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = (__int128 *)&a2[-5];
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 4);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)&a2[-5], v11))
        {
          v32 = *v11;
          v38 = v11[3];
          v40 = v11[4];
          v34 = v11[1];
          v36 = v11[2];
          v28 = (__int128)a2[-1];
          v30 = (__int128)a2[-4];
          v29 = (__int128)a2[-3];
          v11[3] = (__int128)a2[-2];
          v11[4] = v28;
          v11[1] = v30;
          v11[2] = v29;
          *v11 = *v10;
          a2[-3] = (__n128)v36;
          a2[-2] = (__n128)v38;
          a2[-1] = (__n128)v40;
          *v10 = v32;
          a2[-4] = (__n128)v34;
        }
        return;
      case 3uLL:
        sub_1D4DA8FFC(v11, v11 + 5, (__int128 *)&a2[-5], a3);
        return;
      case 4uLL:
        sub_1D4DA9764(v11, v11 + 5, v11 + 10, (__int128 *)&a2[-5], a3);
        return;
      case 5uLL:
        sub_1D4DA98C4(v11, v11 + 5, v11 + 10, v11 + 15, (__int128 *)&a2[-5], a3);
        return;
      default:
        if (v14 <= 1919)
        {
          if ((a5 & 1) != 0)
            sub_1D4DA8E20((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            sub_1D4DA8F1C((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[5 * (v15 >> 1)];
          if ((unint64_t)v14 < 0x2801)
          {
            sub_1D4DA8FFC(v17, v11, (__int128 *)&a2[-5], a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1D4DA8FFC(v11, v17, (__int128 *)&a2[-5], a3);
            v18 = 5 * v16;
            v19 = &v11[5 * v16 - 5];
            sub_1D4DA8FFC(v11 + 5, v19, (__int128 *)&a2[-10], a3);
            v20 = v11 + 10;
            v21 = &v11[v18 + 5];
            sub_1D4DA8FFC(v20, v21, (__int128 *)&a2[-15], a3);
            sub_1D4DA8FFC(v19, v17, v21, a3);
            v31 = *a1;
            v37 = a1[3];
            v39 = a1[4];
            v33 = a1[1];
            v35 = a1[2];
            v22 = v17[4];
            v24 = v17[1];
            v23 = v17[2];
            a1[3] = v17[3];
            a1[4] = v22;
            a1[1] = v24;
            a1[2] = v23;
            *a1 = *v17;
            v17[3] = v37;
            v17[4] = v39;
            v17[1] = v33;
            v17[2] = v35;
            *v17 = v31;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(a1 - 5, a1) & 1) == 0)
          {
            v11 = sub_1D4DA9214(a1, (__int128 *)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v25 = sub_1D4DA93A0(a1, (__int128 *)a2, a3);
          if ((v26 & 1) == 0)
            goto LABEL_14;
          v27 = sub_1D4DA9534(a1, v25, a3);
          v11 = v25 + 5;
          if (!sub_1D4DA9534(v25 + 5, (__int128 *)a2, a3))
          {
            v12 = v13 + 1;
            if (v27)
              continue;
LABEL_14:
            sub_1D4DA8A48(a1, v25, a3, -v13, a5 & 1);
            v11 = v25 + 5;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__n128 *)v25;
          if (v27)
            return;
          goto LABEL_1;
        }
        if (v11 != (__int128 *)a2)
          sub_1D4DA9A84((uint64_t)v11, a2, a2, (unsigned int (**)(uint64_t, __n128 *))a3, a6);
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (a2[-4].n128_f32[3] < *(float *)(v10 + 28))
        {
          v31 = *(__n128 *)v10;
          v37 = *(__n128 *)(v10 + 48);
          v39 = *(__n128 *)(v10 + 64);
          v33 = *(__n128 *)(v10 + 16);
          v35 = *(__n128 *)(v10 + 32);
          v27 = a2[-1];
          v29 = a2[-4];
          v28 = a2[-3];
          *(__n128 *)(v10 + 48) = a2[-2];
          *(__n128 *)(v10 + 64) = v27;
          *(__n128 *)(v10 + 16) = v29;
          *(__n128 *)(v10 + 32) = v28;
          *(__n128 *)v10 = a2[-5];
          a2[-3] = v35;
          a2[-2] = v37;
          a2[-1] = v39;
          a2[-5] = v31;
          a2[-4] = v33;
        }
        return;
      case 3uLL:
        sub_1D4DAAD18((float *)v10, (float *)(v10 + 80), (float *)&a2[-5]);
        return;
      case 4uLL:
        sub_1D4DAB3C4(v10, v10 + 80, v10 + 160, (uint64_t)&a2[-5]);
        return;
      case 5uLL:
        sub_1D4DAB50C(v10, v10 + 80, v10 + 160, v10 + 240, (uint64_t)&a2[-5]);
        return;
      default:
        if (v13 <= 1919)
        {
          if ((a5 & 1) != 0)
            sub_1D4DAAB8C(v10, a2);
          else
            sub_1D4DAAC64(v10, (uint64_t)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = v10 + 80 * (v14 >> 1);
          if ((unint64_t)v13 < 0x2801)
          {
            sub_1D4DAAD18((float *)v16, (float *)v10, (float *)&a2[-5]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1D4DAAD18((float *)v10, (float *)v16, (float *)&a2[-5]);
            v17 = 5 * v15;
            v18 = (float *)(v10 + 80 * v15 - 80);
            sub_1D4DAAD18((float *)(v10 + 80), v18, (float *)&a2[-10]);
            v19 = (float *)(v10 + 160);
            v20 = (float *)(v10 + 80 + 16 * v17);
            sub_1D4DAAD18(v19, v20, (float *)&a2[-15]);
            sub_1D4DAAD18(v18, (float *)v16, v20);
            v30 = *(_OWORD *)a1;
            v36 = *(_OWORD *)(a1 + 48);
            v38 = *(_OWORD *)(a1 + 64);
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 32);
            v21 = *(_OWORD *)(v16 + 64);
            v23 = *(_OWORD *)(v16 + 16);
            v22 = *(_OWORD *)(v16 + 32);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 64) = v21;
            *(_OWORD *)(a1 + 16) = v23;
            *(_OWORD *)(a1 + 32) = v22;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)(v16 + 48) = v36;
            *(_OWORD *)(v16 + 64) = v38;
            *(_OWORD *)(v16 + 16) = v32;
            *(_OWORD *)(v16 + 32) = v34;
            *(_OWORD *)v16 = v30;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(float *)(a1 - 52) >= *(float *)(a1 + 28))
          {
            v10 = sub_1D4DAAEF0(a1, (float *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v24 = sub_1D4DAB04C(a1, (float *)a2);
          if ((v25 & 1) == 0)
            goto LABEL_14;
          v26 = sub_1D4DAB1AC(a1, v24);
          v10 = v24 + 80;
          if (!sub_1D4DAB1AC(v24 + 80, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v26)
              continue;
LABEL_14:
            sub_1D4DAA7BC(a1, v24, a3, -v12, a5 & 1);
            v10 = v24 + 80;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if ((__n128 *)v10 != a2)
          sub_1D4DAB6B8(v10, a2, a2, a3, a6);
        return;
    }
  }
}

__n128 sub_1D4D7FDC4(CMTime *a1, CMTime *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __n128 result;
  CMTimeEpoch epoch;
  __int128 v12;
  CMTimeEpoch v13;
  CMTimeEpoch v14;
  __int128 v15;
  CMTimeEpoch v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch v19;
  CMTimeEpoch v20;
  CMTimeEpoch v21;
  CMTime time2;
  CMTime time1;

  sub_1D4D80334(a1, a2, a3, a4);
  time1 = *a5;
  time2 = *a4;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    epoch = a4->epoch;
    v12 = *(_OWORD *)&a4->value;
    v13 = a5->epoch;
    *(_OWORD *)&a4->value = *(_OWORD *)&a5->value;
    a4->epoch = v13;
    *(_OWORD *)&a5->value = v12;
    a5->epoch = epoch;
    time1 = *a4;
    time2 = *a3;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v14 = a3->epoch;
      v15 = *(_OWORD *)&a3->value;
      v16 = a4->epoch;
      *(_OWORD *)&a3->value = *(_OWORD *)&a4->value;
      a3->epoch = v16;
      *(_OWORD *)&a4->value = v15;
      a4->epoch = v14;
      time1 = *a3;
      time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v17 = a2->epoch;
        v18 = *(_OWORD *)&a2->value;
        v19 = a3->epoch;
        *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
        a2->epoch = v19;
        *(_OWORD *)&a3->value = v18;
        a3->epoch = v17;
        time1 = *a2;
        time2 = *a1;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          v20 = a1->epoch;
          result = *(__n128 *)&a1->value;
          v21 = a2->epoch;
          *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
          a1->epoch = v21;
          *(__n128 *)&a2->value = result;
          a2->epoch = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D4D7FF4C(CMTime *a1, CMTime *a2, CMTime *a3)
{
  uint64_t result;
  CMTimeEpoch v7;
  __int128 v8;
  CMTimeEpoch v9;
  CMTimeEpoch v10;
  __int128 v11;
  CMTimeEpoch v12;
  CMTimeEpoch v13;
  __int128 v14;
  CMTimeEpoch v15;
  CMTimeEpoch epoch;
  __int128 v17;
  CMTimeEpoch v18;
  CMTimeEpoch v19;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a1;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    time1 = *a3;
    time2 = *a2;
    result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      epoch = a1->epoch;
      v17 = *(_OWORD *)&a1->value;
      v19 = a3->epoch;
      *(_OWORD *)&a1->value = *(_OWORD *)&a3->value;
      a1->epoch = v19;
    }
    else
    {
      v13 = a1->epoch;
      v14 = *(_OWORD *)&a1->value;
      v15 = a2->epoch;
      *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
      a1->epoch = v15;
      *(_OWORD *)&a2->value = v14;
      a2->epoch = v13;
      time1 = *a3;
      time2 = *a2;
      result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) == 0)
        return result;
      epoch = a2->epoch;
      v17 = *(_OWORD *)&a2->value;
      v18 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->epoch = v18;
    }
    *(_OWORD *)&a3->value = v17;
    a3->epoch = epoch;
  }
  else
  {
    time1 = *a3;
    time2 = *a2;
    result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      v7 = a2->epoch;
      v8 = *(_OWORD *)&a2->value;
      v9 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->epoch = v9;
      *(_OWORD *)&a3->value = v8;
      a3->epoch = v7;
      time1 = *a2;
      time2 = *a1;
      result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) != 0)
      {
        v10 = a1->epoch;
        v11 = *(_OWORD *)&a1->value;
        v12 = a2->epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
        a1->epoch = v12;
        *(_OWORD *)&a2->value = v11;
        a2->epoch = v10;
      }
    }
  }
  return result;
}

BOOL sub_1D4D80110(CMTime *a1, CMTime *a2)
{
  unint64_t v4;
  _BOOL8 result;
  CMTime *v6;
  CMTimeEpoch epoch;
  __int128 v8;
  CMTimeEpoch v9;
  CMTime *v10;
  CMTime *v11;
  uint64_t v12;
  int v13;
  CMTimeEpoch v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  CMTime v18;
  CMTime time2;
  CMTime time1;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      time1 = a2[-1];
      time2 = *a1;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v6 = a2 - 1;
        epoch = a1->epoch;
        v8 = *(_OWORD *)&a1->value;
        v9 = a2[-1].epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2[-1].value;
        a1->epoch = v9;
        *(_OWORD *)&v6->value = v8;
        v6->epoch = epoch;
      }
      return 1;
    case 3uLL:
      sub_1D4D7FF4C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4uLL:
      sub_1D4D80334(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5uLL:
      sub_1D4D7FDC4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1D4D7FF4C(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    time1 = *v11;
    v14 = v10->epoch;
    *(_OWORD *)&time2.value = *(_OWORD *)&v10->value;
    time2.epoch = v14;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)&v18.value = *(_OWORD *)&v11->value;
      v18.epoch = v11->epoch;
      v15 = v12;
      while (1)
      {
        v16 = (char *)a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)((char *)&a1[2].value + v15);
        *((_QWORD *)v16 + 11) = *(CMTimeEpoch *)((char *)&a1[2].epoch + v15);
        if (v15 == -48)
          break;
        time1 = v18;
        time2 = *(CMTime *)(v16 + 1);
        v15 -= 24;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          v17 = (uint64_t)&a1[3] + v15;
          goto LABEL_12;
        }
      }
      v17 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v17 = *(_OWORD *)&v18.value;
      *(_QWORD *)(v17 + 16) = v18.epoch;
      if (++v13 == 8)
        return &v11[1] == a2;
    }
    v10 = v11;
    v12 += 24;
    if (++v11 == a2)
      return 1;
  }
}

__n128 sub_1D4D80334(CMTime *a1, CMTime *a2, CMTime *a3, CMTime *a4)
{
  __n128 result;
  CMTimeEpoch epoch;
  __int128 v10;
  CMTimeEpoch v11;
  CMTimeEpoch v12;
  __int128 v13;
  CMTimeEpoch v14;
  CMTimeEpoch v15;
  CMTimeEpoch v16;
  CMTime time2;
  CMTime time1;

  sub_1D4D7FF4C(a1, a2, a3);
  time1 = *a4;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    epoch = a3->epoch;
    v10 = *(_OWORD *)&a3->value;
    v11 = a4->epoch;
    *(_OWORD *)&a3->value = *(_OWORD *)&a4->value;
    a3->epoch = v11;
    *(_OWORD *)&a4->value = v10;
    a4->epoch = epoch;
    time1 = *a3;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v12 = a2->epoch;
      v13 = *(_OWORD *)&a2->value;
      v14 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->epoch = v14;
      *(_OWORD *)&a3->value = v13;
      a3->epoch = v12;
      time1 = *a2;
      time2 = *a1;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v15 = a1->epoch;
        result = *(__n128 *)&a1->value;
        v16 = a2->epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
        a1->epoch = v16;
        *(__n128 *)&a2->value = result;
        a2->epoch = v15;
      }
    }
  }
  return result;
}

void sub_1D4D80464()
{
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D80478(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E988AFC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1D4D804B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E988AFC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1D4D804D0(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a1 + 8))(a2, a3, *a4);
}

uint64_t sub_1D4D804E4(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A928))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D80520()
{
  return &unk_1E988A928;
}

uint64_t sub_1D4D8052C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1D4D5DFA8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1D4D60A34(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1D4D80718(a1, v7);
    return sub_1D4D6BB34((uint64_t)v7);
  }
  return result;
}

void sub_1D4D805C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D6BB34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D805DC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1D4D60A34(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_1D4D80718(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_1D4D6BB34((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1D4D80704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D6BB34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D80718(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4D6B990((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_1D4D8078C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D61150(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4D8082C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D6123C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1D4D808C8(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7;
  int v8;
  float v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (a5)
  {
    v7 = 0;
    v8 = (int)(float)(ceilf((float)((int)a6 - a3) / (float)(int)a4) + (float)a3);
    v9 = ceilf((float)((int)a7 - a3) / (float)(int)a5) + (float)a3;
    v10 = (int)v9 - a3;
    do
    {
      if (a4)
      {
        v11 = 0;
        v12 = (int)v9 + (uint64_t)(v10 * (int)v7);
        if (v12 >= a7)
          v12 = a7;
        v13 = a4;
        do
        {
          v14 = v8 + (uint64_t)v11;
          if (v14 >= a6)
            v14 = a6;
          *result = v11;
          result[1] = v14;
          result[2] = v10 * (int)v7;
          result[3] = v12;
          result += 4;
          v11 += v8 - a3;
          --v13;
        }
        while (v13);
      }
      ++v7;
    }
    while (v7 != a5);
  }
  return result;
}

_QWORD *sub_1D4D80974(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E988AF88;
  v2 = (_QWORD *)operator new();
  *v2 = sub_1D4D809EC();
  a1[1] = v2;
  return a1;
}

void sub_1D4D809C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D809EC()
{
  int v0;
  int v1;
  uint64_t v3;

  v0 = open("/dev/random", 0);
  if (v0 < 0)
  {
    perror("/dev/random");
    return 0;
  }
  else
  {
    v1 = v0;
    v3 = 0;
    read(v0, &v3, 8uLL);
    close(v1);
    return v3;
  }
}

_QWORD *sub_1D4D80A58(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E988AF88;
  v2 = a1[1];
  if (v2)
    MEMORY[0x1D826897C](v2, 0x1000C4000313F17);
  return a1;
}

void sub_1D4D80AA0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E988AF88;
  v1 = a1[1];
  if (v1)
    MEMORY[0x1D826897C](v1, 0x1000C4000313F17);
  JUMPOUT(0x1D826897CLL);
}

unint64_t sub_1D4D80AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;

  if (a3 == a2)
    return a2;
  v4 = a3 - a2 + 1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = 0x5851F42D4C957F2DLL * *v5 + 1;
  *v5 = v6;
  if (v4 >= 0x100000001)
  {
    v7 = 0x5851F42D4C957F2DLL * v6 + 1;
    *v5 = v7;
    result = v6 & 0xFFFFFFFF00000000 | HIDWORD(v7);
    return result % v4 + a2;
  }
  result = HIDWORD(v6);
  if (a3 - a2 != -1)
    return result % v4 + a2;
  return result;
}

float sub_1D4D80B64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = 0x5851F42D4C957F2DLL * *v1 + 1;
  *v1 = v2;
  return (float)HIDWORD(v2) * 2.3283e-10;
}

uint64_t sub_1D4D80BA0(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

_QWORD *sub_1D4D80BAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_1D4D9708C(a1, a2, a3, a4);
  *result = off_1E988AC48;
  result[36] = 0;
  return result;
}

void sub_1D4D80BD0(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t v13;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  sub_1D4D724D0(a3, (a2[1] - *a2) >> 2);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *a2;
  v8 = a2[1];
  if (v6)
  {
    v9 = v8 - v7;
    if (v9)
    {
      v10 = v9 >> 2;
      if (v10 <= 1)
        v10 = 1;
      v11 = *(_DWORD **)a3;
      do
      {
        v12 = *(_DWORD *)v7;
        v7 += 4;
        *v11++ = *(__int16 *)(v6 + 48 * v12 + 40);
        --v10;
      }
      while (v10);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  }
  else if (v8 != v7)
  {
    v13 = (v8 - v7) >> 2;
    if (v13 <= 1)
      v13 = 1;
    bzero(*(void **)a3, 4 * v13);
  }
}

BOOL sub_1D4D80CA0(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = 0;
  v3 = 1;
  while ((v3 & *a2) != 0)
  {
    ++v2;
    v3 *= 2;
    if (v2 == 4)
      goto LABEL_6;
  }
  if (!v2)
    return 1;
LABEL_6:
  v4 = (float *)a2 + 3;
  v5 = 0.0;
  v6 = v2;
  v7 = 0.0;
  do
  {
    v7 = v7 + *(v4 - 1);
    v8 = *v4;
    v4 += 2;
    v5 = v5 + v8;
    --v6;
  }
  while (v6);
  v9 = sqrtf((float)(v5 * v5) + (float)(v7 * v7));
  v10 = sqrtf((float)v2);
  return v9 <= (float)((float)((float)(*(float *)(a1 + 232) * 0.33333) * v10)
                     + (float)((float)(*(float *)(a1 + 232) * 0.33333) * v10));
}

void sub_1D4D80D38(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  uint64_t v4;
  float v5;
  float v6;
  int v7[2];
  _BYTE v8[16];
  _OWORD v9[2];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v2;
  v10 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 40))
  {
    v3 = *(_DWORD *)(a1 + 44);
    if (v3)
    {
      v7[0] = *(_DWORD *)(a1 + 40);
      v7[1] = v3;
      sub_1D4D80E24((float *)v9, v7, (uint64_t)v8);
      v4 = 0;
      v5 = 0.0;
      do
      {
        v6 = fabsf(*(float *)&v8[v4] + -1.5708);
        if (v6 > v5)
          v5 = v6;
        v4 += 4;
      }
      while (v4 != 16);
      sub_1D4D80FA0((float *)v9, v7);
    }
  }
}

void sub_1D4D80E24(float *a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  _BYTE v23[48];
  uint64_t v24;
  float32x4x3_t v25;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5.i32[0] = 0;
  v5.i32[2] = 0;
  v5.f32[1] = (float)*a2;
  v5.f32[3] = v5.f32[1];
  v6.i64[0] = 0;
  v6.f32[2] = (float)a2[1];
  v6.f32[3] = v6.f32[2];
  __asm { FMOV            V22.4S, #1.0 }
  v11 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[1]), v5, *a1), v25.val[2], a1[2]);
  v12 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[4]), v5, a1[3]), v25.val[2], a1[5]);
  v13 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[7]), v5, a1[6]), v25.val[2], a1[8]);
  v25.val[0] = vdivq_f32(v11, v13);
  v25.val[1] = vdivq_f32(v12, v13);
  v14 = (float *)v23;
  vst3q_f32(v14, v25);
  v15 = 4;
  do
  {
    if ((v4 & 0xFFFFFFFC) != 0)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v16 = qword_1D4DB20A8[v4];
      v17 = qword_1D4DB20C8[v4];
    }
    v18 = (float *)&v23[12 * v17];
    v19 = *(float *)&v23[v15 - 4];
    v20 = *v18 - v19;
    v21 = (float *)&v23[12 * v16];
    v22 = *(float *)&v23[v15];
    *(float *)(a3 + 4 * v4++) = acosf((float)((float)((float)(v18[1] - v22) * (float)(v21[1] - v22))+ (float)(v20 * (float)(*v21 - v19)))/ (float)(sqrtf((float)((float)(v18[1] - v22) * (float)(v18[1] - v22)) + (float)(v20 * v20))* sqrtf((float)((float)(v21[1] - v22) * (float)(v21[1] - v22))+ (float)((float)(*v21 - v19) * (float)(*v21 - v19)))));
    v15 += 12;
  }
  while (v4 != 4);
}

float sub_1D4D80FA0(float *a1, int *a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float *v18;
  float32x4_t v19;
  float *v20;
  float v21;
  float v22;
  _BYTE v24[48];
  _BYTE v25[48];
  uint64_t v26;
  float32x4x3_t v27;

  v2 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v3.i32[0] = 0;
  v3.i32[2] = 0;
  v3.f32[1] = (float)*a2;
  v3.f32[3] = v3.f32[1];
  v4.i64[0] = 0;
  v4.f32[2] = (float)a2[1];
  v4.f32[3] = v4.f32[2];
  v5 = vmulq_f32(v4, (float32x4_t)0);
  __asm { FMOV            V7.4S, #1.0 }
  v10 = vmlaq_f32(vaddq_f32(v3, v5), (float32x4_t)0, v27.val[2]);
  v11 = a1[6];
  v12 = a1[5];
  v13 = *a1;
  v14 = vmulq_n_f32(v4, a1[1]);
  v15 = vmulq_n_f32(v4, a1[4]);
  v16 = vmulq_n_f32(v4, a1[7]);
  v17 = vaddq_f32(v27.val[2], vmlaq_f32(v5, (float32x4_t)0, v3));
  v27.val[0] = vdivq_f32(v10, v17);
  v27.val[1] = vdivq_f32(vmlaq_f32(vmlaq_f32(v4, (float32x4_t)0, v3), (float32x4_t)0, v27.val[2]), v17);
  v18 = (float *)v25;
  vst3q_f32(v18, v27);
  v19 = vmlaq_n_f32(vmlaq_n_f32(v16, v3, v11), v27.val[2], a1[8]);
  v27.val[0] = vdivq_f32(vmlaq_n_f32(vmlaq_n_f32(v14, v3, v13), v27.val[2], a1[2]), v19);
  v27.val[1] = vdivq_f32(vmlaq_n_f32(vmlaq_n_f32(v15, v3, a1[3]), v27.val[2], v12), v19);
  v20 = (float *)v24;
  vst3q_f32(v20, v27);
  do
  {
    v21 = *(float *)&v24[v2];
    v22 = (float)(*(float *)&v25[v2 + 4] - *(float *)&v24[v2 + 4])
        * (float)(*(float *)&v25[v2 + 4] - *(float *)&v24[v2 + 4]);
    if ((float)(v22 + (float)((float)(*(float *)&v25[v2] - v21) * (float)(*(float *)&v25[v2] - v21))) > v4.f32[0])
      v4.f32[0] = v22 + (float)((float)(*(float *)&v25[v2] - v21) * (float)(*(float *)&v25[v2] - v21));
    v2 += 12;
  }
  while (v2 != 48);
  return sqrtf(v4.f32[0]);
}

void sub_1D4D810C4(uint64_t a1)
{
  void **v2;
  float32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  float *v14;
  unint64_t *v15;
  int v16;
  unint64_t v17;
  int v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  unsigned int v26;
  uint64_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;

  v2 = (void **)(a1 + 80);
  sub_1D4D81328(a1 + 80, *(unsigned int *)(a1 + 48));
  v3 = *(float32x2_t **)(a1 + 288);
  if (v3)
  {
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v7 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 64);
      v8 = v3 + 1;
      __asm { FMOV            V9.2S, #1.0 }
      v14 = (float *)*v2;
      do
      {
        v15 = (unint64_t *)&v3[6 * v5];
        v16 = *((__int16 *)v15 + 20);
        v17 = *v15;
        if (v16 >= 0x40)
          v18 = 64;
        else
          v18 = v16;
        if (v18)
        {
          v19 = 0.0;
          v20 = 1000.0;
          v21 = v17;
          v22 = 0.0;
          do
          {
            if ((v21 & 1) != 0)
              v23 = v20;
            else
              v23 = -0.0;
            v22 = v22 + v23;
            if ((v21 & 1) != 0)
              v24 = -0.0;
            else
              v24 = v20;
            v19 = v19 + v24;
            v21 >>= 1;
            v20 = v20 * 0.25;
            --v18;
          }
          while (v18);
        }
        else
        {
          v22 = 0.0;
          v19 = 0.0;
        }
        if (v19 < 0.000001)
          v19 = 0.000001;
        if (v22 < 0.000001)
          v22 = 0.000001;
        v25 = _D9;
        if (v16 > 0)
        {
          if (v16 >= 4)
            v26 = 4;
          else
            v26 = v16;
          if (v26 <= 1)
            v27 = 1;
          else
            v27 = v26;
          v28 = 0;
          v29 = v8;
          do
          {
            v30 = *v29++;
            v31 = vabs_f32(v30);
            v28 = vadd_f32(v28, v31);
            --v27;
          }
          while (v27);
          v31.f32[0] = (float)(int)v26;
          v25 = vdiv_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 0));
        }
        v32 = v22 / v19;
        if (v16)
          v32 = v32
              / (float)(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v25, v25).i32[1]), v25.f32[0], v25.f32[0])) + 0.25);
        if (((v16 > 0) & v17) == 0)
        {
          v33 = *(float *)(v7 + 8 * v5) - *(float *)(v6 + 8 * v5);
          v32 = v32
              / (float)(sqrtf(sqrtf((float)((float)(*(float *)(v7 + ((8 * v5) | 4)) - *(float *)(v6 + ((8 * v5) | 4)))* (float)(*(float *)(v7 + ((8 * v5) | 4)) - *(float *)(v6 + ((8 * v5) | 4))))+ (float)(v33 * v33)))+ 1.0);
        }
        if (v3[6 * v5 + 5].i16[1])
          v32 = v32 / (float)v3[6 * v5 + 5].i16[1];
        if (v32 > 0.00000011921)
          v34 = v32 + 1.0;
        else
          v34 = 1.0;
        v35 = logf(v34);
        if (v35 <= 0.00000011921)
          v35 = 0.00000011921;
        v14[v5++] = v35;
        v8 += 6;
      }
      while (v5 != v4);
    }
  }
  else
  {
    v36 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v36)
      memset_pattern16(*v2, &unk_1D4DB20F0, 4 * v36);
  }
}

void sub_1D4D81328(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1D4D81668((char **)a1, a2 - v2);
  }
}

void sub_1D4D81358(uint64_t a1, char **a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  void *__p;
  _BYTE *v43;
  uint64_t v44;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v7 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    sub_1D4D72500((void **)a3, (a2[1] - v3) >> 2);
    __p = 0;
    v43 = 0;
    v44 = 0;
    sub_1D4D80BD0(a1, a2, (uint64_t)&__p);
    v8 = (v43 - (_BYTE *)__p) >> 2;
    LODWORD(v9) = (int)((double)v8 * 0.35);
    if ((int)v9 <= 50)
      v9 = 50;
    else
      v9 = v9;
    if (v8 >= v9)
      v10 = v8 - v9;
    else
      v10 = 0;
    if (v8 <= v10)
      v10 = v8 - 1;
    v12 = *a2;
    v11 = a2[1];
    if (v7)
    {
      if (v11 != v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = *((_DWORD *)__p + v10);
        do
        {
          v16 = *(_DWORD *)&v12[4 * v13];
          if (v15 <= *(__int16 *)(v7 + 48 * v16 + 40) && sub_1D4D80CA0(a1, (_QWORD *)(v7 + 48 * v16)))
          {
            v18 = *(unsigned int **)(a3 + 8);
            v17 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v18 >= v17)
            {
              v20 = *(unsigned int **)a3;
              v21 = ((uint64_t)v18 - *(_QWORD *)a3) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                sub_1D4D5DFA8();
              v23 = v17 - (_QWORD)v20;
              if (v23 >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)sub_1D4D5EA14(a3 + 16, v24);
                v20 = *(unsigned int **)a3;
                v18 = *(unsigned int **)(a3 + 8);
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v16;
              v19 = v26 + 4;
              while (v18 != v20)
              {
                v27 = *--v18;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *(_QWORD *)a3 = v26;
              *(_QWORD *)(a3 + 8) = v19;
              *(_QWORD *)(a3 + 16) = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *v18 = v16;
              v19 = v18 + 1;
            }
            *(_QWORD *)(a3 + 8) = v19;
            v12 = *a2;
            v11 = a2[1];
          }
          v13 = ++v14;
        }
        while (v14 < (unint64_t)((v11 - v12) >> 2));
      }
    }
    else if (v11 != v12)
    {
      v28 = 0;
      v29 = 0;
      v30 = (_QWORD *)(a3 + 16);
      v31 = *(_DWORD **)(a3 + 8);
      do
      {
        v32 = *(_DWORD *)&v12[4 * v28];
        if ((unint64_t)v31 >= *v30)
        {
          v34 = *(_DWORD **)a3;
          v35 = ((uint64_t)v31 - *(_QWORD *)a3) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_1D4D5DFA8();
          v37 = *v30 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_1D4D5EA14(a3 + 16, v38);
            v34 = *(_DWORD **)a3;
            v31 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v32;
          v33 = v40 + 4;
          while (v31 != v34)
          {
            v41 = *--v31;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *(_QWORD *)a3 = v40;
          *(_QWORD *)(a3 + 8) = v33;
          *(_QWORD *)(a3 + 16) = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v31 = v32;
          v33 = v31 + 1;
        }
        *(_QWORD *)(a3 + 8) = v33;
        v12 = *a2;
        v31 = v33;
        v28 = ++v29;
      }
      while (v29 < (unint64_t)((a2[1] - *a2) >> 2));
    }
    if (__p)
    {
      v43 = __p;
      operator delete(__p);
    }
  }
}

void sub_1D4D8163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D81668(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1D4D5DFA8();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D4D5EA14(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1D4D81770(double *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 v16[168];
  char *v17;
  char *v18;
  char *v19;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_1D4D81950((void **)&v17, 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4));
  v6 = *a2;
  if (*a2 < a2[1])
  {
    v7 = v18;
    do
    {
      if (v7 >= v19)
      {
        v8 = (v7 - v17) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          sub_1D4D5DFA8();
        v9 = (v19 - v17) >> 2;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)sub_1D4D5E2CC((uint64_t)&v19, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v8];
        *(_QWORD *)v12 = v6;
        v7 = v12 + 8;
        v14 = v17;
        v13 = v18;
        if (v18 != v17)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = v17;
        }
        v17 = v12;
        v18 = v7;
        v19 = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v7 = v6;
        v7 += 8;
      }
      v18 = v7;
      v6 += 304;
    }
    while (v6 < a2[1]);
  }
  sub_1D4D7C2D8((uint64_t)v16, (int)*a1 | ((unint64_t)(int)a1[1] << 32), (uint64_t)&v17);
  v16[1] = 1;
  sub_1D4D7C134((uint64_t)v16);
  sub_1D4D7C218(v16, a3);
  sub_1D4D7C35C((uint64_t)v16);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_1D4D81918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D81950(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5E2CC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

id sub_1D4D819E4(void *a1, __int128 *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;

  v7 = a1;
  v8 = a3;
  if (v7)
  {
    v34 = 0;
    v35 = &v34;
    v36 = 0x3032000000;
    v37 = sub_1D4D81CB4;
    v38 = sub_1D4D81CC4;
    v39 = 0;
    v28 = 0;
    v29 = &v28;
    v30 = 0x3032000000;
    v31 = sub_1D4D81CB4;
    v32 = sub_1D4D81CC4;
    v33 = 0;
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3538]), "initWithCondition:", 0);
    objc_msgSend(v9, "lock");
    objc_msgSend(v9, "unlockWithCondition:", 1);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", CFSTR("tracks"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1D4D81CCC;
    v18[3] = &unk_1E988B5A0;
    v24 = a4;
    v19 = v7;
    v22 = &v34;
    v11 = a2[1];
    v25 = *a2;
    v26 = v11;
    v27 = a2[2];
    v20 = v8;
    v23 = &v28;
    v12 = v9;
    v21 = v12;
    objc_msgSend(v19, "loadValuesAsynchronouslyForKeys:completionHandler:", v10, v18);

    objc_msgSend(v12, "lockWhenCondition:", 2);
    objc_msgSend(v12, "unlockWithCondition:", 0);
    v13 = (void *)v35[5];
    if (v13)
    {
      objc_msgSend(v13, "localizedDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("%@"), v14);

      objc_msgSend((id)v35[5], "localizedRecoverySuggestion");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("%@"), v15);

    }
    v16 = (id)v29[5];

    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v34, 8);

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1D4D81C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v36 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D81CB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D4D81CC4(uint64_t a1)
{

}

void sub_1D4D81CCC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double width;
  double v14;
  double height;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  const opaqueCMFormatDescription *v20;
  CMVideoDimensions Dimensions;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  id v46;
  void *v47;
  _OWORD v48[3];
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(v2, "objectAtIndex:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      objc_msgSend(v3, "preferredTransform");
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
    }
    v9 = *(_OWORD **)(a1 + 72);
    v10 = v54;
    v11 = v56;
    v9[1] = v55;
    v9[2] = v11;
    *v9 = v10;
    objc_msgSend(v4, "naturalSize");
    width = v12;
    height = v14;
    objc_msgSend(v4, "formatDescriptions");
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v51;
      while (2)
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v51 != v18)
            objc_enumerationMutation(v16);
          v20 = *(const opaqueCMFormatDescription **)(*((_QWORD *)&v50 + 1) + 8 * i);
          if (CMFormatDescriptionGetMediaType(v20) == 1986618469)
          {
            Dimensions = CMVideoFormatDescriptionGetDimensions(v20);
            width = (double)Dimensions.width;
            height = (double)Dimensions.height;
            goto LABEL_16;
          }
        }
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
        if (v17)
          continue;
        break;
      }
    }
LABEL_16:

    v22 = objc_alloc(MEMORY[0x1E0C8AFD0]);
    v23 = *(_QWORD *)(a1 + 32);
    v49 = 0;
    v24 = (void *)objc_msgSend(v22, "initWithAsset:error:", v23, &v49);
    v25 = v49;
    v26 = v49;
    v27 = v26;
    v47 = v24;
    if (v26)
    {
      objc_msgSend(v26, "localizedDescription");
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      NSLog(CFSTR("error creating movie reader:%s"), objc_msgSend(v28, "UTF8String"));

      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v25);
    }
    if ((*(_BYTE *)(a1 + 92) & 1) != 0
      && (*(_BYTE *)(a1 + 116) & 1) != 0
      && !*(_QWORD *)(a1 + 120)
      && (*(_QWORD *)(a1 + 104) & 0x8000000000000000) == 0
      && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v44 = *(_OWORD *)(a1 + 96);
      v48[0] = *(_OWORD *)(a1 + 80);
      v48[1] = v44;
      v48[2] = *(_OWORD *)(a1 + 112);
      objc_msgSend(v24, "setTimeRange:", v48);
    }
    v29 = (void *)MEMORY[0x1E0C99D80];
    v30 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (uint64_t)rint(width));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (uint64_t)rint(height));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 16);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "dictionaryWithObjectsAndKeys:", v30, *MEMORY[0x1E0CA9040], v31, *MEMORY[0x1E0CA90E0], v32, *MEMORY[0x1E0CA8FD8], v33, *MEMORY[0x1E0CA8F68], MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CA9010], 0);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      objc_msgSend(MEMORY[0x1E0C8B000], "assetReaderTrackOutputWithTrack:outputSettings:", v4, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "addOutput:", v35);

      objc_msgSend(v47, "error");
      v36 = objc_claimAutoreleasedReturnValue();
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v38 = *(void **)(v37 + 40);
      *(_QWORD *)(v37 + 40) = v36;

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
        || (objc_msgSend(v47, "startReading"),
            objc_msgSend(v47, "error"),
            v39 = objc_claimAutoreleasedReturnValue(),
            v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8),
            v41 = *(void **)(v40 + 40),
            *(_QWORD *)(v40 + 40) = v39,
            v41,
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)))
      {
        v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v43 = *(void **)(v42 + 40);
        *(_QWORD *)(v42 + 40) = 0;
      }
      else
      {
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v46 = v47;
        v43 = *(void **)(v45 + 40);
        *(_QWORD *)(v45 + 40) = v46;
      }

    }
    v8 = v4;
  }
  else
  {
    v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("InertiaCamVideoUtilDomain"), -1, 0);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "lock");
  objc_msgSend(*(id *)(a1 + 48), "unlockWithCondition:", 2);

}

void sub_1D4D82170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void ICDebugExpWriteVideoWithHomographies(uint64_t a1)
{
  void *v1;
  id v2;
  __int128 v3;
  void *v4;
  __int128 v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  void *v25;
  VideoFrameWriterQueue *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  uint64_t i;
  __CVBuffer *ImageBuffer;
  double v39;
  OSType PixelFormatType;
  int v41;
  uint32_t v42;
  size_t BytesPerRow;
  size_t Width;
  size_t Height;
  CGFloat x;
  double y;
  CGColorSpace *DeviceRGB;
  void *BaseAddress;
  CGContext *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  int v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  float v69;
  double v70;
  void *v71;
  void *v72;
  BOOL v73;
  void *v74;
  const __CFDictionary *v75;
  CGRect *p_rect;
  void *v77;
  BOOL v78;
  void *v79;
  const __CFDictionary *v80;
  CGRect *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  CGFloat v85;
  double v86;
  CGColorSpace *v87;
  void *v88;
  CGContext *v89;
  size_t v90;
  double v91;
  double v92;
  __CVBuffer *v93;
  void *v94;
  void *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  __CFString *v102;
  OSType v103;
  int v104;
  uint32_t v105;
  size_t v106;
  size_t v107;
  size_t v108;
  double v109;
  double v110;
  CGColorSpace *v111;
  void *v112;
  CGContext *v113;
  CTFontRef v114;
  CGColorSpace *ColorSpace;
  CGColorRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  const __CFDictionary *v119;
  const __CFAttributedString *v120;
  const __CTLine *v121;
  double v122;
  double v123;
  VideoFrameWriterElement *v124;
  void *v125;
  double v126;
  void *v127;
  id v128;
  void *v129;
  void *v130;
  void *v131;
  unint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  const __CFAllocator *allocator;
  id v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  char v144;
  double v145;
  double v146;
  double v147;
  double v148;
  CFTypeRef cf;
  const __CTFontDescriptor *cfa;
  CIHomographyResampler *v151;
  void *v152;
  uint64_t v153;
  opaqueCMSampleBuffer *sbuf;
  void *context;
  VideoFrameWriterQueue *v157;
  id v158;
  id v159;
  CGAffineTransform v160;
  CMTime v161;
  CMTime presentationTimeStamp;
  CMSampleTimingInfo timingInfoOut;
  __int128 v164;
  CGFloat v165;
  __int128 v166;
  CGFloat v167;
  CGAffineTransform v168;
  CGAffineTransform v169;
  CMTime v170;
  CMTime rhs;
  CMTime lhs;
  CGAffineTransform v173;
  CGAffineTransform v174;
  CGAffineTransform v175;
  double v176[2];
  __int128 v177;
  __int128 v178;
  __int128 v179[3];
  CGAffineTransform v180;
  _BYTE v181[80];
  void *__p;
  void *v183;
  CGAffineTransform v184;
  __int128 v185;
  CGFloat c;
  int v187;
  int valuePtr;
  CGAffineTransform v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _QWORD v194[9];
  void *values[4];
  void *keys[4];
  CGRect rect;
  uint64_t v198;
  CGRect CleanRect;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect ImageBounds;
  CGRect v205;

  v198 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v139 = *(_QWORD *)(a1 + 8);
  objc_msgSend(*(id *)a1, "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  v194[0] = 0x3FF0000000000000;
  memset(&v194[1], 0, 24);
  v194[4] = 0x3FF0000000000000;
  memset(&v194[5], 0, 24);
  v194[8] = 0x3FF0000000000000;
  sub_1D4D5F924((uint64_t)v181, 0, (uint64_t)v194);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1111970369);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v193, 1);
  v131 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = *(id *)a1;
  v3 = *(_OWORD *)(a1 + 40);
  v179[0] = *(_OWORD *)(a1 + 24);
  v179[1] = v3;
  v179[2] = *(_OWORD *)(a1 + 56);
  sub_1D4D819E4(v2, v179, v131, (uint64_t)&v180);
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v130, "objectAtIndex:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_OWORD *)(v139 + 72);
  v177 = *(_OWORD *)(v139 + 56);
  v178 = v5;
  v145 = *((double *)&v5 + 1);
  v146 = *(double *)&v5;
  v142 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v143 = *MEMORY[0x1E0C9D648];
  v140 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v141 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v6 = *(unsigned __int8 *)(a1 + 75);
  v129 = v4;
  objc_msgSend(v4, "naturalSize");
  v8 = v7;
  v10 = v9;
  v176[0] = v7;
  v176[1] = v9;
  if (v6)
  {
    sub_1D4D81770(v176, (unint64_t *)(v139 + 24), (uint64_t)&v177);
    v142 = *(double *)(v139 + 64);
    v143 = *(double *)(v139 + 56);
    v140 = *(double *)(v139 + 80);
    v141 = *(double *)(v139 + 72);
  }
  if (*((double *)&v178 + 1) > 1920.0 || *(double *)&v178 > 1920.0)
  {
    if (*(double *)&v178 >= *((double *)&v178 + 1))
      v11 = *(double *)&v178;
    else
      v11 = *((double *)&v178 + 1);
    v12 = v11;
    v13 = (float)(1920.0 / v12);
    v145 = *((double *)&v178 + 1) * v13;
    v146 = *(double *)&v178 * v13;
  }
  v15 = v145;
  v14 = v146;
  if (*(_BYTE *)(a1 + 72))
  {
    v177 = 0uLL;
    v14 = v8;
    v15 = v10;
    *(double *)&v178 = v8;
    *((double *)&v178 + 1) = v10;
  }
  v174 = v180;
  memset(&v175, 0, sizeof(v175));
  CGAffineTransformInvert(&v175, &v174);
  if (v175.tx != 0.0)
  {
    v16 = -v14;
    if (v175.tx > 0.0)
      v16 = v14;
    v175.tx = v16;
  }
  if (v175.ty != 0.0)
  {
    v17 = -v15;
    if (v175.ty > 0.0)
      v17 = v15;
    v175.ty = v17;
  }
  v173 = v175;
  CGAffineTransformInvert(&v189, &v173);
  v180 = v189;
  if ((*(_BYTE *)(a1 + 36) & 1) == 0
    || (*(_BYTE *)(a1 + 60) & 1) == 0
    || *(_QWORD *)(a1 + 64)
    || (*(_QWORD *)(a1 + 48) & 0x8000000000000000) != 0)
  {
    v18 = v129;
    if (!v129)
    {
LABEL_27:
      memset(&v189, 0, sizeof(v189));
      goto LABEL_28;
    }
  }
  else
  {
    v18 = v152;
    if (!v152)
      goto LABEL_27;
  }
  objc_msgSend(v18, "timeRange");
LABEL_28:
  v184 = v189;
  *(_OWORD *)&lhs.value = *(_OWORD *)&v189.a;
  lhs.epoch = *(_QWORD *)&v189.c;
  rhs = *(CMTime *)&v189.d;
  CMTimeAdd((CMTime *)&v189, &lhs, &rhs);
  v185 = *(_OWORD *)&v189.a;
  c = v189.c;
  v144 = objc_opt_respondsToSelector();
  if ((v144 & 1) != 0)
  {
    v19 = *(void **)(a1 + 88);
    v170 = *(CMTime *)&v184.a;
    v169 = v184;
    *(float *)&v20 = sub_1D4D835DC(&v170, (CMTime *)&v169);
    objc_msgSend(v19, "ICReportProgress:", v20);
  }
  v189.a = 1.0;
  memset(&v189.b, 0, 24);
  v189.tx = 1.0;
  v189.ty = 0.0;
  v191 = 0;
  v190 = 0;
  v192 = 0x3FF0000000000000;
  v138 = *(id *)(a1 + 16);
  if (!v138)
  {
    NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectAtIndex:", 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    objc_msgSend(v23, "stringWithFormat:", CFSTR("%.0f.%@"), v24 * 1000.0, CFSTR("mov"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "stringByAppendingPathComponent:", v25);
    v138 = (id)objc_claimAutoreleasedReturnValue();

  }
  v26 = [VideoFrameWriterQueue alloc];
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v138);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = v180;
  v166 = *(_OWORD *)&v184.a;
  v167 = v184.c;
  v164 = v185;
  v165 = c;
  v157 = -[VideoFrameWriterQueue initWithOutputURL:forMovieDimensions:outputTransform:startTime:endTime:](v26, "initWithOutputURL:forMovieDimensions:outputTransform:startTime:endTime:", v27, &v168, &v166, &v164, v14, v15);

  -[VideoFrameWriterQueue StartWatchingForFrames](v157, "StartWatchingForFrames");
  v151 = objc_alloc_init(CIHomographyResampler);
  v132 = 0;
  v153 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v136 = (void *)*MEMORY[0x1E0CA8188];
  v134 = (void *)*MEMORY[0x1E0CA8588];
  v135 = (void *)*MEMORY[0x1E0CA8550];
  v133 = (void *)*MEMORY[0x1E0CA85D0];
  do
  {
    context = (void *)MEMORY[0x1D8268CC4]();
    v158 = v152;
    if (objc_msgSend(v158, "status") != 1)
    {

LABEL_46:
      objc_msgSend(v158, "status");
      v36 = 1;
      goto LABEL_111;
    }
    objc_msgSend(v158, "outputs");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "objectAtIndex:", 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    sbuf = (opaqueCMSampleBuffer *)objc_msgSend(v29, "copyNextSampleBuffer");
    objc_msgSend(v158, "error");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (v30)
    {
      NSLog(CFSTR("reader error:%d\n"), objc_msgSend(v30, "code"));
      NSLog(CFSTR("description:%@"), v31);
    }

    if (!sbuf)
      goto LABEL_46;
    CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut);
    if (*(_BYTE *)(a1 + 72)
      || (v32 = *(_QWORD *)(v139 + 24), v33 = v132, v132 >= 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(v139 + 32) - v32) >> 4)))
    {
      v35 = v181;
    }
    else
    {
      v34 = v32 + 304 * v132;
      if (*(_QWORD *)(v34 + 104) == v153)
        v35 = (_BYTE *)v34;
      else
        v35 = v181;
      if (*(_QWORD *)(v34 + 104) == v153)
        v33 = v132 + 1;
      v132 = v33;
    }
    for (i = 0; i != 72; i += 8)
      *(CGFloat *)((char *)&v189.a + i) = *(CGFloat *)&v35[i];
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    v39 = *((double *)&v177 + 1);
    v148 = *(double *)&v178;
    cf = (CFTypeRef)v177;
    v147 = *((double *)&v178 + 1);
    -[ImageHomographyResampler setHomographyMatrix:](v151, "setHomographyMatrix:", &v189);
    if (*(_BYTE *)(a1 + 73))
    {
      CVPixelBufferLockBaseAddress(ImageBuffer, 0);
      PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
      if (PixelFormatType == 32)
        v41 = 16386;
      else
        v41 = 2;
      if (PixelFormatType == 1111970369)
        v42 = 8194;
      else
        v42 = v41;
      BytesPerRow = CVPixelBufferGetBytesPerRow(ImageBuffer);
      Width = CVPixelBufferGetWidth(ImageBuffer);
      Height = CVPixelBufferGetHeight(ImageBuffer);
      CleanRect = CVImageBufferGetCleanRect(ImageBuffer);
      x = CleanRect.origin.x;
      y = CleanRect.origin.y;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      BaseAddress = CVPixelBufferGetBaseAddress(ImageBuffer);
      v50 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, v42);
      CGColorSpaceRelease(DeviceRGB);
      CGContextSaveGState(v50);
      CGContextTranslateCTM(v50, x, -y);
      v51 = CVPixelBufferGetHeight(ImageBuffer);
      CGContextTranslateCTM(v50, 0.0, (double)v51);
      CGContextScaleCTM(v50, 1.0, -1.0);
      v52 = *((_QWORD *)v35 + 10);
      if (*((_QWORD *)v35 + 11) != v52)
      {
        v53 = 0;
        v54 = 0;
        do
        {
          v55 = v52 + (v53 << 6);
          v56 = *(_QWORD *)(v55 + 16);
          if ((v56 & 1) != 0)
          {
            v57 = 0;
            v58 = *(_QWORD *)(v55 + 16);
            do
            {
              ++v57;
              v59 = v58;
              v58 >>= 1;
            }
            while ((v59 & 2) != 0);
          }
          else
          {
            v57 = 0;
          }
          if (v57 >= 0xF)
            v60 = 15;
          else
            v60 = v57;
          v61 = *(float *)v55;
          v62 = *(float *)(v55 + 4);
          v63 = *(float *)(v55 + 8);
          v64 = *(float *)(v55 + 12);
          v65 = *(__int16 *)(v55 + 56);
          if ((v56 & 1) != 0)
          {
            if ((v56 & 2) != 0 || v65 < 2)
            {
              v68 = 1.0;
              v67 = 0.0;
              CGContextSetRGBStrokeColor(v50, 0.0, 1.0, 0.0, 1.0);
              v66 = 0.0;
            }
            else
            {
              v68 = 1.0;
              v67 = 0.0;
              CGContextSetRGBStrokeColor(v50, 0.0, 1.0, 1.0, 1.0);
              v66 = 1.0;
            }
          }
          else if ((v56 & 2) != 0 && v65 >= 2)
          {
            v66 = 0.0;
            v67 = 1.0;
            CGContextSetRGBStrokeColor(v50, 1.0, 1.0, 0.0, 1.0);
            v68 = 1.0;
          }
          else
          {
            v68 = 0.0;
            v67 = 1.0;
            CGContextSetRGBStrokeColor(v50, 1.0, 0.0, 0.0, 1.0);
            v66 = 0.0;
          }
          CGContextSetRGBFillColor(v50, v67, v68, v66, 1.0);
          v69 = (float)v60 + 2.0;
          v70 = (float)(v69 * 0.5);
          v200.origin.x = v61 - v70;
          v200.origin.y = v62 - v70;
          v200.size.width = v69;
          v200.size.height = v200.size.width;
          CGContextFillEllipseInRect(v50, v200);
          CGContextBeginPath(v50);
          CGContextMoveToPoint(v50, v61, v62);
          CGContextAddLineToPoint(v50, v63, v64);
          CGContextStrokePath(v50);
          v52 = *((_QWORD *)v35 + 10);
          v53 = ++v54;
        }
        while (v54 < (unint64_t)((*((_QWORD *)v35 + 11) - v52) >> 6));
      }
      CGContextRestoreGState(v50);
      CVPixelBufferUnlockBaseAddress(ImageBuffer, 0);
      CGContextRelease(v50);
    }
    v71 = *(void **)(a1 + 80);
    if (v71)
    {
      objc_msgSend(v71, "objectForKeyedSubscript:", IC_C_L1_SALIENT_RECTS);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = v72 == 0;

      if (v73)
      {
        p_rect = 0;
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", IC_C_L1_SALIENT_RECTS);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "objectAtIndexedSubscript:", v153);
        v75 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        CGRectMakeWithDictionaryRepresentation(v75, &rect);

        p_rect = &rect;
      }
      objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", IC_C_L1_CENTER_TARGETS);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = v77 == 0;

      if (v78)
      {
        v81 = 0;
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", IC_C_L1_CENTER_TARGETS);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "objectAtIndexedSubscript:", v153);
        v80 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        CGPointMakeWithDictionaryRepresentation(v80, &rect.origin);

        v81 = &rect;
      }
      CVPixelBufferLockBaseAddress(ImageBuffer, 0);
      v82 = CVPixelBufferGetBytesPerRow(ImageBuffer);
      v83 = CVPixelBufferGetWidth(ImageBuffer);
      v84 = CVPixelBufferGetHeight(ImageBuffer);
      v201 = CVImageBufferGetCleanRect(ImageBuffer);
      v85 = v201.origin.x;
      v86 = v201.origin.y;
      v87 = CGColorSpaceCreateDeviceRGB();
      v88 = CVPixelBufferGetBaseAddress(ImageBuffer);
      v89 = CGBitmapContextCreate(v88, v83, v84, 8uLL, v82, v87, 0x4002u);
      CGColorSpaceRelease(v87);
      CGContextSaveGState(v89);
      CGContextTranslateCTM(v89, v85, -v86);
      v90 = CVPixelBufferGetHeight(ImageBuffer);
      CGContextTranslateCTM(v89, 0.0, (double)v90);
      CGContextScaleCTM(v89, 1.0, -1.0);
      CGContextSetRGBStrokeColor(v89, 0.0, 1.0, 0.0, 1.0);
      CGContextSetRGBFillColor(v89, 0.0, -1.0, 0.5, 0.5);
      if (p_rect)
      {
        CGContextSetLineWidth(v89, 3.0);
        CGContextStrokeRect(v89, *p_rect);
        CGContextFillRect(v89, *p_rect);
      }
      if (v81)
      {
        v91 = v81->origin.x;
        v92 = v81->origin.y;
        CGContextSetRGBFillColor(v89, 0.0, 1.0, 0.0, 1.0);
        v202.origin.y = v92 + -12.5;
        v202.origin.x = v91 + -12.5;
        v202.size.width = 25.0;
        v202.size.height = 25.0;
        CGContextFillEllipseInRect(v89, v202);
      }
      CGContextRestoreGState(v89);
      CVPixelBufferUnlockBaseAddress(ImageBuffer, 0);
      CGContextRelease(v89);
    }
    -[CIHomographyResampler setHightlightRect:](v151, "setHightlightRect:", v143, v142, v141, v140);
    v93 = -[CIHomographyResampler ResampleCVPixels:clipToRect:outputSize:](v151, "ResampleCVPixels:clipToRect:outputSize:", ImageBuffer, *(double *)&cf, v39, v148, v147, v146, v145);
    if (*(_BYTE *)(a1 + 74))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d %6.4f "), v153, *((float *)v35 + 42));
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = v94;
      v96 = v35[75];
      if ((v96 & 1) != 0)
      {
        objc_msgSend(v94, "stringByAppendingString:", CFSTR("A"));
        v97 = objc_claimAutoreleasedReturnValue();

        v96 = v35[75];
        v95 = (void *)v97;
      }
      if ((v96 & 2) != 0)
      {
        objc_msgSend(v95, "stringByAppendingString:", CFSTR("I"));
        v98 = objc_claimAutoreleasedReturnValue();

        v96 = v35[75];
        v95 = (void *)v98;
      }
      if ((v96 & 4) != 0)
      {
        objc_msgSend(v95, "stringByAppendingString:", CFSTR("C"));
        v99 = objc_claimAutoreleasedReturnValue();

        v96 = v35[75];
        v95 = (void *)v99;
      }
      if ((v96 & 8) != 0)
      {
        objc_msgSend(v95, "stringByAppendingString:", CFSTR("T"));
        v100 = objc_claimAutoreleasedReturnValue();

        v95 = (void *)v100;
      }
      if (v35[73])
        v101 = 0.7;
      else
        v101 = 0.0;
      v102 = v95;
      CVPixelBufferLockBaseAddress(v93, 0);
      v103 = CVPixelBufferGetPixelFormatType(v93);
      if (v103 == 32)
        v104 = 16386;
      else
        v104 = 2;
      if (v103 == 1111970369)
        v105 = 8194;
      else
        v105 = v104;
      v106 = CVPixelBufferGetBytesPerRow(v93);
      v107 = CVPixelBufferGetWidth(v93);
      v108 = CVPixelBufferGetHeight(v93);
      v203 = CVImageBufferGetCleanRect(v93);
      v109 = v203.origin.x;
      v110 = v203.origin.y;
      v111 = CGColorSpaceCreateDeviceRGB();
      v112 = CVPixelBufferGetBaseAddress(v93);
      v113 = CGBitmapContextCreate(v112, v107, v108, 8uLL, v106, v111, v105);
      CGColorSpaceRelease(v111);
      CGContextSaveGState(v113);
      cfa = CTFontDescriptorCreateWithNameAndSize(CFSTR("Courier"), 11.0);
      v114 = CTFontCreateWithFontDescriptor(cfa, 0.0, 0);
      rect = *(CGRect *)ymmword_1D4DB2118;
      ColorSpace = CGBitmapContextGetColorSpace(v113);
      v116 = CGColorCreate(ColorSpace, &rect.origin.x);
      valuePtr = 1071225242;
      v117 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      v187 = -1073741824;
      v118 = CFNumberCreate(allocator, kCFNumberFloat32Type, &v187);
      keys[0] = v136;
      keys[1] = v135;
      keys[2] = v134;
      keys[3] = v133;
      values[0] = v114;
      values[1] = v116;
      values[2] = v117;
      values[3] = v118;
      v119 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v120 = CFAttributedStringCreate(allocator, v102, v119);
      v121 = CTLineCreateWithAttributedString(v120);
      ImageBounds = CTLineGetImageBounds(v121, v113);
      v122 = ImageBounds.size.width;
      v123 = ImageBounds.size.height;
      CGContextSetRGBFillColor(v113, v101, 0.0, 0.0, 1.0);
      v205.size.width = v122 + 12.0;
      v205.size.height = v123 + 12.0;
      v205.origin.x = v109;
      v205.origin.y = v110;
      CGContextFillRect(v113, v205);
      CGContextSetTextPosition(v113, v109 + 6.0, v110 + 6.0);
      CTLineDraw(v121, v113);
      CFRelease(v121);
      CFRelease(v120);
      CFRelease(v117);
      CFRelease(v118);
      CFRelease(v119);
      CFRelease(v116);
      CFRelease(v114);
      CFRelease(cfa);
      CGContextRestoreGState(v113);
      CVPixelBufferUnlockBaseAddress(v93, 0);
      CGContextRelease(v113);

    }
    v124 = objc_alloc_init(VideoFrameWriterElement);
    -[VideoFrameWriterElement setPixelBuffer:](v124, "setPixelBuffer:", v93);
    presentationTimeStamp = timingInfoOut.presentationTimeStamp;
    -[VideoFrameWriterElement setFrameTime:](v124, "setFrameTime:", &presentationTimeStamp);
    -[VideoFrameWriterElement setFrameNumber:](v124, "setFrameNumber:", v153);
    -[VideoFrameWriterQueue AddAFrame:](v157, "AddAFrame:", v124);
    CFRelease(sbuf);
    if ((v144 & 1) != 0)
    {
      v125 = *(void **)(a1 + 88);
      v161 = timingInfoOut.presentationTimeStamp;
      v160 = v184;
      *(float *)&v126 = sub_1D4D835DC(&v161, (CMTime *)&v160);
      objc_msgSend(v125, "ICReportProgress:", v126);
    }

    v36 = 0;
    ++v153;
LABEL_111:
    objc_autoreleasePoolPop(context);
    -[VideoFrameWriterQueue DrainIfAbove:downTo:](v157, "DrainIfAbove:downTo:", 16, 2);
  }
  while ((v36 & 1) == 0 && -[VideoFrameWriterQueue writeSuccess](v157, "writeSuccess"));
  if (!-[VideoFrameWriterQueue WaitForFinish](v157, "WaitForFinish"))
  {
    puts("Error writing movie file.");
    if (v138)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      v159 = 0;
      objc_msgSend(v127, "removeItemAtPath:error:", v138, &v159);
      v128 = v159;

      if (v128)
      {
        NSLog(CFSTR("delete movie error:"));
        NSLog(CFSTR("%@"), v128);
      }

    }
  }

  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }

}

void sub_1D4D833C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  void *v36;

  v36 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v36;
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

float sub_1D4D835DC(CMTime *a1, CMTime *a2)
{
  CMTime v4;
  CMTime lhs;
  CMTime v6;

  memset(&v6, 0, sizeof(v6));
  lhs = *a1;
  v4 = *a2;
  CMTimeSubtract(&v6, &lhs, &v4);
  return (float)((float)v6.value / (float)v6.timescale) / (float)((float)a2[1].value / (float)a2[1].timescale);
}

uint64_t sub_1D4D83664(__CVBuffer *a1, __n128 *a2, unsigned int a3, uint64_t a4, void *a5)
{
  id v9;
  char v10;
  OSType PixelFormatType;
  uint64_t v12;
  double x;
  double y;
  double width;
  double height;
  vImagePixelCount HeightOfPlane;
  vImagePixelCount WidthOfPlane;
  void **v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  void *v23;
  int v24;
  __CVBuffer *v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  int32_t divisor;
  __CVBuffer *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  double v36;
  int v37;
  uint64_t v38;
  size_t BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  unsigned int v42;
  __n128 *v43;
  uint64_t v44;
  __n128 v45;
  unint64_t v46;
  vImage_Buffer dest;
  vImage_Buffer src;
  int16_t kernel[8];
  __int16 v50;
  uint64_t v51;
  CGRect CleanRect;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = objc_opt_respondsToSelector();
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != 875704422 && PixelFormatType != 875704438 && PixelFormatType != 1278226488)
  {
    LOWORD(v24) = -1;
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(a4 + 248);
  CleanRect = CVImageBufferGetCleanRect(a1);
  x = CleanRect.origin.x;
  y = CleanRect.origin.y;
  width = CleanRect.size.width;
  height = CleanRect.size.height;
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v42 = a3;
  v43 = a2;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  v44 = v12;
  v19 = sub_1D4D7DA90(v12, width, height);
  v20 = (uint64_t)v19;
  v21 = *(void **)(a4 + 280);
  if (v21 && v19[6])
  {
    v22 = (uint64_t *)sub_1D4D7DA90(v44, width, height);
    v23 = sub_1D4D6FBC4(v21, a1, *(_QWORD *)(v20 + 48), v22[6]);
    if (v23)
    {
      CVBufferSetAttachment(*(CVBufferRef *)(v20 + 48), CFSTR("fast9"), (CFTypeRef)v22[6], kCVAttachmentMode_ShouldNotPropagate);
      CVBufferSetAttachment(*(CVBufferRef *)(v20 + 48), CFSTR("metalOpHandle"), v23, kCVAttachmentMode_ShouldNotPropagate);
      sub_1D4D98DAC(v22);
      goto LABEL_22;
    }
    sub_1D4D7DB18(v44, v22);
  }
  v25 = *(__CVBuffer **)(v20 + 48);
  if (v25)
  {
    CVPixelBufferLockBaseAddress(v25, 0);
    v26 = (unsigned int *)(v20 + 56);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v20 + 48), 0) + *(_QWORD *)(v20 + 40);
    *(_QWORD *)v20 = v28;
  }
  else
  {
    v28 = *(char **)v20;
  }
  v29 = 0;
  divisor = 0;
  src.data = BaseAddressOfPlane;
  src.height = HeightOfPlane;
  src.width = WidthOfPlane;
  src.rowBytes = BytesPerRowOfPlane;
  dest.data = v28;
  *(int8x16_t *)&dest.height = vextq_s8(*(int8x16_t *)(v20 + 8), *(int8x16_t *)(v20 + 8), 8uLL);
  dest.rowBytes = *(_QWORD *)(v20 + 24);
  *(_OWORD *)kernel = xmmword_1D4DB2138;
  v50 = 3;
  do
    divisor += kernel[v29++];
  while (v29 != 9);
  vImageConvolve_Planar8(&src, &dest, 0, (unint64_t)x, (unint64_t)((double)HeightOfPlane - (y + height)), kernel, 3u, 3u, divisor, 0, 8u);
  v31 = *(__CVBuffer **)(v20 + 48);
  if (v31)
  {
    CVPixelBufferUnlockBaseAddress(v31, 0);
    v32 = (unsigned int *)(v20 + 56);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      *(_QWORD *)v20 = 0;
  }
LABEL_22:
  v35 = operator new();
  v45 = *v43;
  v46 = v43[1].n128_u64[0];
  *(_QWORD *)&v36 = sub_1D4D75688(v35, v20, v44, 0, v42, &v45).n128_u64[0];
  while ((v10 & 1) == 0 || !objc_msgSend(v9, "ICShouldBeCanceled", v36))
  {
    dispatch_time(0, 50000000);
    if (sub_1D4D88BA8(a4, v35, 0))
    {
      v37 = 0;
      goto LABEL_28;
    }
  }
  v38 = sub_1D4D756EC(v35);
  MEMORY[0x1D826897C](v38, 0x1020C40A6EEA1E9);
  v37 = 1;
LABEL_28:
  CVPixelBufferUnlockBaseAddress(a1, 0);
  v24 = v37 << 31 >> 31;
LABEL_29:

  return (__int16)v24;
}

void sub_1D4D83A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D83A9C(int8x16_t *a1, int8x16_t **a2, float *a3, uint64_t *a4, int32x2_t *a5, uint64_t a6, unsigned __int32 a7, float a8)
{
  unint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x8_t v12;
  int32x2_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  int8x16_t v22;
  int8x8_t v23;
  unsigned __int32 v24;
  uint64_t v25;

  *a5 = vdup_n_s32(0x101u);
  *(_QWORD *)a6 = 0;
  v8 = (unint64_t)a2[2];
  if (!v8)
    return 0;
  v9 = 0;
  v10 = *a2;
  v11 = vaddq_s8(vcntq_s8(veorq_s8((*a2)[1], a1[1])), vcntq_s8(veorq_s8(**a2, *a1)));
  *(int8x8_t *)v11.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), *(int8x8_t *)v11.i8);
  *(int8x8_t *)v11.i8 = vpadd_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8);
  v11.i16[0] = vpadd_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8).u16[0];
  v12.i32[0] = v11.u8[0];
  v12.i32[1] = v11.u8[1];
  v13 = (int32x2_t)vand_s8(v12, (int8x8_t)0xFF000000FFLL);
  a5->i32[0] = vadd_s32(vdup_lane_s32(v13, 1), v13).u32[0];
  *(_DWORD *)a6 = 0;
  if (v8 != 1)
  {
    v14 = a8 * a8;
    v15 = *a4;
    v17 = *a3;
    v16 = a3[1];
    v18 = v16 + a8;
    v19 = 2;
    v20 = 1;
    while (1)
    {
      v21 = *(float *)(v15 + 8 * v20 + 4);
      if (v21 > v18)
        break;
      if ((float)((float)((float)(v16 - v21) * (float)(v16 - v21))
                 + (float)((float)(v17 - *(float *)(v15 + 8 * v20)) * (float)(v17 - *(float *)(v15 + 8 * v20)))) < v14)
      {
        v22 = vaddq_s8(vcntq_s8(veorq_s8(v10[2 * v20 + 1], a1[1])), vcntq_s8(veorq_s8(v10[2 * v20], *a1)));
        *(int8x8_t *)v22.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(int8x8_t *)v22.i8);
        *(int8x8_t *)v22.i8 = vpadd_s8(*(int8x8_t *)v22.i8, *(int8x8_t *)v22.i8);
        v22.i16[0] = vpadd_s8(*(int8x8_t *)v22.i8, *(int8x8_t *)v22.i8).u16[0];
        v23.i32[0] = v22.u8[0];
        v23.i32[1] = v22.u8[1];
        *(int8x8_t *)v22.i8 = vand_s8(v23, (int8x8_t)0xFF000000FFLL);
        v24 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(int32x2_t *)v22.i8).u32[0];
        if (v24 < a5->i32[1])
        {
          if (v24 >= a5->i32[0])
          {
            v25 = 1;
          }
          else
          {
            if (v24 < a7)
              return 1;
            v25 = 0;
            a5->i32[1] = a5->i32[0];
            *(_DWORD *)(a6 + 4) = *(_DWORD *)a6;
          }
          a5->i32[v25] = v24;
          *(_DWORD *)(a6 + 4 * v25) = v19 - 1;
        }
      }
      v20 = v19;
      if (v8 <= v19++)
        return 0;
    }
    return 0;
  }
  return v9;
}

void sub_1D4D83C18(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int a5, uint64_t a6, float a7)
{
  unint64_t v7;
  unint64_t v15;
  int v16;
  float v17;
  float v18;
  float *v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  char v23;
  int v24;
  int8x16_t *v25;
  float *v26;
  unsigned int v27;
  float v28;
  int8x16_t v29;
  int8x8_t v30;
  unsigned __int32 v31;
  BOOL v32;
  float v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v7 = a3[2];
  if (v7)
  {
    v15 = 0;
    v16 = 0;
    v17 = a7 * a7;
    v18 = -a7;
    v45 = a6 + 16;
    do
    {
      v19 = (float *)(*a3 + 8 * v15);
      v20 = a4[2];
      v21 = v16;
      if (v20 > v16)
      {
        v22 = (float *)(*a4 + 8 * v16 + 4);
        do
        {
          if (*v22 >= (float)(v19[1] - a7))
            break;
          ++v21;
          v22 += 2;
        }
        while (v20 > v21);
        v16 = v21;
        v21 = (int)v21;
      }
      if (v20 > v21)
      {
        v23 = 0;
        v24 = 0;
        v25 = (int8x16_t *)(*a2 + 32 * v21 + 16);
        v26 = (float *)(*a4 + 8 * v21 + 4);
        v27 = a5;
        do
        {
          v28 = *(float *)(*a3 + 8 * v15 + 4) - *v26;
          if (v28 < v18)
            break;
          if ((float)((float)(v28 * v28) + (float)((float)(*v19 - *(v26 - 1)) * (float)(*v19 - *(v26 - 1)))) <= v17)
          {
            v29 = vaddq_s8(vcntq_s8(veorq_s8(*v25, *(int8x16_t *)(*a1 + 32 * v15 + 16))), vcntq_s8(veorq_s8(v25[-1], *(int8x16_t *)(*a1 + 32 * v15))));
            *(int8x8_t *)v29.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(int8x8_t *)v29.i8);
            *(int8x8_t *)v29.i8 = vpadd_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v29.i8);
            v29.i16[0] = vpadd_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v29.i8).u16[0];
            v30.i32[0] = v29.u8[0];
            v30.i32[1] = v29.u8[1];
            *(int8x8_t *)v29.i8 = vand_s8(v30, (int8x8_t)0xFF000000FFLL);
            v31 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(int32x2_t *)v29.i8).u32[0];
            v32 = v31 <= v27;
            if (v31 <= v27)
              v24 = v21;
            if (v31 < v27)
              v27 = v31;
            v23 |= v32;
          }
          ++v21;
          v25 += 2;
          v26 += 2;
        }
        while (v20 > v21);
        if ((v23 & 1) != 0)
        {
          v33 = (float)(int)v27;
          v35 = *(_DWORD **)(a6 + 8);
          v34 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v35 >= v34)
          {
            v37 = *(_DWORD **)a6;
            v38 = ((uint64_t)v35 - *(_QWORD *)a6) >> 4;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60)
              sub_1D4D5DFA8();
            v40 = v34 - (_QWORD)v37;
            if (v40 >> 3 > v39)
              v39 = v40 >> 3;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
              v41 = 0xFFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)sub_1D4D61150(v45, v41);
              v37 = *(_DWORD **)a6;
              v35 = *(_DWORD **)(a6 + 8);
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[16 * v38];
            *(_DWORD *)v43 = v15;
            *((_DWORD *)v43 + 1) = v24;
            *((_DWORD *)v43 + 2) = 0;
            *((float *)v43 + 3) = v33;
            v44 = v43;
            if (v35 != v37)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v35 - 1);
                v44 -= 16;
                v35 -= 4;
              }
              while (v35 != v37);
              v37 = *(_DWORD **)a6;
            }
            v36 = v43 + 16;
            *(_QWORD *)a6 = v44;
            *(_QWORD *)(a6 + 8) = v43 + 16;
            *(_QWORD *)(a6 + 16) = &v42[16 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v35 = v15;
            v35[1] = v24;
            v35[2] = 0;
            v36 = (char *)(v35 + 4);
            *((float *)v35 + 3) = v33;
          }
          *(_QWORD *)(a6 + 8) = v36;
          v7 = a3[2];
        }
      }
      ++v15;
    }
    while (v7 > v15);
  }
}

void sub_1D4D83EC8(int8x16_t **a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, float a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  unsigned int v16;
  float *v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int32x2_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = *a7;
  v8 = a7[1];
  if (v8 != *a7)
  {
    v15 = 0;
    v16 = 0;
    v35 = a8 + 16;
    do
    {
      v17 = (float *)(v9 + 16 * v15);
      v18 = *v17;
      v19 = *((unsigned int *)v17 + 1);
      v20 = *((_DWORD *)v17 + 2);
      v21 = v17[3];
      if ((sub_1D4D83A9C((int8x16_t *)(*a2 + 32 * v19), a1, (float *)(*a4 + 8 * v19), a3, &v38, (uint64_t)&v39, v21, a5) & 1) == 0&& v39 == LODWORD(v18))
      {
        LODWORD(v23) = v38.i32[1];
        LODWORD(v22) = v38.i32[0];
        if ((double)v23 * 0.7 > (double)v22)
        {
          v25 = *(_DWORD **)(a8 + 8);
          v24 = *(_QWORD *)(a8 + 16);
          if ((unint64_t)v25 >= v24)
          {
            v27 = *(_DWORD **)a8;
            v28 = ((uint64_t)v25 - *(_QWORD *)a8) >> 4;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60)
              sub_1D4D5DFA8();
            v30 = v24 - (_QWORD)v27;
            if (v30 >> 3 > v29)
              v29 = v30 >> 3;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
              v31 = 0xFFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)sub_1D4D61150(v35, v31);
              v27 = *(_DWORD **)a8;
              v25 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[16 * v28];
            *(float *)v33 = v18;
            *((_DWORD *)v33 + 1) = v19;
            *((_DWORD *)v33 + 2) = v20;
            *((float *)v33 + 3) = v21;
            v34 = v33;
            if (v25 != v27)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
                v34 -= 16;
                v25 -= 4;
              }
              while (v25 != v27);
              v27 = *(_DWORD **)a8;
            }
            v26 = v33 + 16;
            *(_QWORD *)a8 = v34;
            *(_QWORD *)(a8 + 8) = v33 + 16;
            *(_QWORD *)(a8 + 16) = &v32[16 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(float *)v25 = v18;
            v25[1] = v19;
            v25[2] = v20;
            v26 = (char *)(v25 + 4);
            *((float *)v25 + 3) = v21;
          }
          *(_QWORD *)(a8 + 8) = v26;
          v9 = *a7;
          v8 = a7[1];
        }
      }
      v15 = ++v16;
    }
    while (v16 < (unint64_t)((v8 - v9) >> 4));
  }
}

_QWORD *sub_1D4D840DC(_QWORD *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

const void **sub_1D4D8410C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1D4D84140(id *a1, void *a2, float *a3)
{
  id v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  float v16;
  float v17;
  _BYTE *v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  _BYTE *v37;
  void *v38;
  _BYTE *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v31 = *a1;
  v6 = (int)objc_msgSend(v31, "count");
  sub_1D4D844A0(&v38, v6);
  sub_1D4D844A0(&__p, v6);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v7 = v31;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v8)
  {
    LODWORD(v9) = 0;
    v10 = *(_QWORD *)v33;
LABEL_3:
    v11 = 0;
    v9 = (int)v9;
    while (1)
    {
      if (*(_QWORD *)v33 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v11);
      objc_msgSend(v7, "objectForKeyedSubscript:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(CFSTR("invalid coef dictionary entry for %@"), v12);
        goto LABEL_22;
      }
      objc_msgSend(v13, "floatValue");
      v15 = v14;

      v16 = 1.0;
      if ((objc_msgSend(v12, "isEqualToString:", CFSTR("_intercept")) & 1) == 0)
      {
        objc_msgSend(v5, "objectForKeyedSubscript:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v13)
        {
          v27 = 4294962976;
          goto LABEL_23;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSLog(CFSTR("invalid input dictionary entry for %@"), v12);
LABEL_22:
          v27 = 4294962977;
LABEL_23:

          v18 = __p;
          v28 = NAN;
          goto LABEL_26;
        }
        objc_msgSend(v13, "floatValue");
        v16 = v17;

      }
      *((_DWORD *)v38 + v9) = v15;
      *((float *)__p + v9++) = v16;
      if (v8 == ++v11)
      {
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
        if (v8)
          goto LABEL_3;
        break;
      }
    }
  }

  v18 = __p;
  v19 = (unint64_t)(v37 - (_BYTE *)__p) >> 2;
  v20 = (float *)v38;
  if ((int)((unint64_t)(v39 - (_BYTE *)v38) >> 2) < (int)v19)
    LODWORD(v19) = (unint64_t)(v39 - (_BYTE *)v38) >> 2;
  if ((int)v19 < 1)
  {
    v22 = 0.0;
  }
  else
  {
    v21 = 4 * v19;
    v22 = 0.0;
    v23 = (float *)__p;
    do
    {
      v24 = *v20++;
      v25 = v24;
      v26 = *v23++;
      v22 = v22 + (float)(v25 * v26);
      v21 -= 4;
    }
    while (v21);
  }
  v29 = expf(v22);
  v27 = 0;
  v28 = v29 / (float)(v29 + 1.0);
LABEL_26:
  *a3 = v28;
  if (v18)
  {
    v37 = v18;
    operator delete(v18);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }

  return v27;
}

void sub_1D4D84414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D844A0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D5E9D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D4D844F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1D4D84514(uint64_t a1, __CLPK_real *a2, uint64_t a3, uint64_t a4, float *a5, unsigned int a6, uint64_t a7)
{
  sub_1D4DA178C((uint64_t)a2, a3, a4, a5, a6);
  return sub_1D4DA1AB4(a1, a2, 2 * a6, 9u, a7);
}

float sub_1D4D84570(const float *a1, const float *a2, uint64_t a3)
{
  double *v4;
  double *v5;
  float result;
  uint64_t i;
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD v13[8];
  _BYTE v14[64];
  _QWORD v15[10];
  float32x4x2_t v16;
  float32x4x2_t v17;
  float64x2x2_t v18;

  v15[9] = *MEMORY[0x1E0C80C00];
  v16 = vld2q_f32(a1);
  v18.val[0] = vcvtq_f64_f32(*(float32x2_t *)v16.val[0].f32);
  v18.val[1] = vcvtq_f64_f32(*(float32x2_t *)v16.val[1].f32);
  v4 = (double *)v14;
  vst2q_f64(v4, v18);
  v4 += 4;
  v18.val[0] = vcvt_hight_f64_f32(v16.val[0]);
  v18.val[1] = vcvt_hight_f64_f32(v16.val[1]);
  vst2q_f64(v4, v18);
  v17 = vld2q_f32(a2);
  v18.val[0] = vcvtq_f64_f32(*(float32x2_t *)v17.val[0].f32);
  v18.val[1] = vcvtq_f64_f32(*(float32x2_t *)v17.val[1].f32);
  v5 = (double *)v13;
  vst2q_f64(v5, v18);
  v5 += 4;
  v18.val[0] = vcvt_hight_f64_f32(v17.val[0]);
  v18.val[1] = vcvt_hight_f64_f32(v17.val[1]);
  vst2q_f64(v5, v18);
  if (sub_1D4DA1E68(v14, v13, v15))
  {
    for (i = 0; i != 9; ++i)
    {
      v8 = *(double *)&v15[i];
      *(float *)(a3 + 4 * i) = v8;
    }
    v9 = *(_DWORD *)(a3 + 8);
    v10 = *(_DWORD *)(a3 + 4);
    v12 = *(_DWORD *)(a3 + 20);
    v11 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = v10;
    result = *(float *)(a3 + 28);
    *(float *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 24) = v9;
    *(_DWORD *)(a3 + 28) = v12;
  }
  return result;
}

uint64_t sub_1D4D84654(unsigned int a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_DWORD *)(v2 + 8) = 9;
  *(_DWORD *)v2 = a1;
  *(_DWORD *)(v2 + 4) = 2 * a1;
  *(_QWORD *)(v2 + 16) = malloc_type_malloc(72 * a1, 0x2AA3656DuLL);
  *(_QWORD *)(v2 + 64) = malloc_type_malloc(8 * a1, 0x628329EBuLL);
  *(_QWORD *)(v2 + 72) = malloc_type_malloc(8 * a1, 0xEC942B25uLL);
  *(_QWORD *)(v2 + 80) = malloc_type_malloc(4 * a1, 0x100004052888210uLL);
  *(_QWORD *)(v2 + 160) = sub_1D4DA15AC(2 * a1, 9u);
  return v2;
}

void **sub_1D4D84730(void **result, unsigned int a2)
{
  void **v2;

  if (*(_DWORD *)result < a2)
  {
    v2 = result;
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = 2 * a2;
    result[2] = malloc_type_realloc(result[2], 4 * *((unsigned int *)result + 2) * (unint64_t)(2 * a2), 0x79A8A90CuLL);
    v2[8] = malloc_type_realloc(v2[8], 8 * *(unsigned int *)v2, 0xD86641A2uLL);
    v2[9] = malloc_type_realloc(v2[9], 8 * *(unsigned int *)v2, 0x7DE63E2CuLL);
    result = (void **)malloc_type_realloc(v2[10], 4 * *(unsigned int *)v2, 0x100004052888210uLL);
    v2[10] = result;
  }
  return result;
}

void sub_1D4D847DC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (a1)
  {
    v2 = (void *)a1[2];
    if (v2)
    {
      free(v2);
      a1[2] = 0;
    }
    v3 = (void *)a1[8];
    if (v3)
    {
      free(v3);
      a1[8] = 0;
    }
    v4 = (void *)a1[9];
    if (v4)
    {
      free(v4);
      a1[9] = 0;
    }
    v5 = (void *)a1[10];
    if (v5)
    {
      free(v5);
      a1[10] = 0;
    }
    v6 = (void **)a1[20];
    if (v6)
      sub_1D4DA1744(v6);
    free(a1);
  }
}

float sub_1D4D84850(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float result;

  v6 = operator new();
  if (a3)
  {
    v8 = 0;
    v9 = 0uLL;
    do
    {
      v10 = (4 * v8) & 0x3FFFFFFF8;
      v7.i64[0] = *(_QWORD *)(a1 + v10);
      v7.i64[1] = *(_QWORD *)(a2 + v10);
      v9 = vaddq_f32(v7, v9);
      v8 += 2;
    }
    while (2 * a3 != v8);
  }
  else
  {
    v9 = 0uLL;
  }
  v7.f32[0] = (float)a3;
  v11 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0));
  *(float32x4_t *)v6 = v11;
  if (a3)
  {
    v12 = 0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = (4 * v12) & 0x3FFFFFFF8;
      v13 = v13
          + sqrtf((float)((float)(*(float *)(a1 + v15 + 4) - v11.f32[1]) * (float)(*(float *)(a1 + v15 + 4) - v11.f32[1]))+ (float)((float)(*(float *)(a1 + v15) - v11.f32[0]) * (float)(*(float *)(a1 + v15) - v11.f32[0])));
      v14 = v14
          + sqrtf((float)((float)(*(float *)(a2 + v15 + 4) - v11.f32[3]) * (float)(*(float *)(a2 + v15 + 4) - v11.f32[3]))+ (float)((float)(*(float *)(a2 + v15) - v11.f32[2]) * (float)(*(float *)(a2 + v15) - v11.f32[2])));
      v12 += 2;
    }
    while (2 * a3 != v12);
  }
  else
  {
    v14 = 0.0;
    v13 = 0.0;
  }
  v16 = 1.4142 / (float)(v13 / v7.f32[0]);
  result = 1.4142 / (float)(v14 / v7.f32[0]);
  *(float *)(v6 + 16) = v16;
  *(float *)(v6 + 20) = result;
  return result;
}

float sub_1D4D8497C(uint64_t a1, uint64_t a2, float *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  float result;

  if (a4)
  {
    v4 = 0;
    do
    {
      v5 = 4 * v4;
      v6 = v4 + 1;
      v7 = *(float *)(a1 + 4 * (v4 + 1));
      *(float *)(a1 + v5) = *(float *)(a1 + v5) - *a3;
      *(float *)(a1 + 4 * v6) = v7 - a3[1];
      v8 = *(float *)(a2 + 4 * (v4 + 1));
      *(float *)(a2 + v5) = *(float *)(a2 + v5) - a3[2];
      *(float *)(a2 + 4 * v6) = v8 - a3[3];
      v4 += 2;
    }
    while (2 * a4 != v4);
    v9 = 0;
    do
    {
      v10 = 4 * v9;
      v11 = v9 + 1;
      v12 = *(float *)(a1 + 4 * (v9 + 1));
      *(float *)(a1 + v10) = a3[4] * *(float *)(a1 + v10);
      *(float *)(a1 + 4 * v11) = a3[4] * v12;
      v13 = *(float *)(a2 + 4 * (v9 + 1));
      *(float *)(a2 + v10) = a3[5] * *(float *)(a2 + v10);
      result = a3[5] * v13;
      *(float *)(a2 + 4 * v11) = result;
      v9 += 2;
    }
    while (2 * a4 != v9);
  }
  return result;
}

uint64_t sub_1D4D84A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float *v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  float *v18;
  float v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v5 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 4) = 0;
  *(float *)(a2 + 8) = -(float)(*(float *)(a1 + 16) * *(float *)a1);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(float *)(a2 + 20) = -(float)(*(float *)(a1 + 16) * *(float *)(a1 + 4));
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 1065353216;
  *(float *)a3 = 1.0 / *(float *)(a1 + 20);
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = 1.0 / *(float *)(a1 + 20);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 1065353216;
  do
  {
    v6 = 0;
    v7 = (float *)a5;
    do
    {
      v8 = 0;
      v9 = 0.0;
      v10 = v7;
      do
      {
        v11 = *v10;
        v10 += 3;
        v9 = v9 + (float)(*(float *)(a3 + v8) * v11);
        v8 += 4;
      }
      while (v8 != 12);
      *((float *)&v22 + 3 * v5 + v6++) = v9;
      ++v7;
    }
    while (v6 != 3);
    ++v5;
    a3 += 12;
  }
  while (v5 != 3);
  v12 = 0;
  v13 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 32) = v24;
  do
  {
    v14 = 0;
    v15 = (float *)a2;
    do
    {
      v16 = 0;
      v17 = 0.0;
      v18 = v15;
      do
      {
        v19 = *v18;
        v18 += 3;
        v17 = v17 + (float)(*(float *)(a4 + v16) * v19);
        v16 += 4;
      }
      while (v16 != 12);
      *((float *)&v22 + 3 * v12 + v14++) = v17;
      ++v15;
    }
    while (v14 != 3);
    ++v12;
    a4 += 12;
  }
  while (v12 != 3);
  v20 = v23;
  *(_OWORD *)a5 = v22;
  *(_OWORD *)(a5 + 16) = v20;
  *(_DWORD *)(a5 + 32) = v24;
  return 1;
}

_DWORD *sub_1D4D84BF4(int a1)
{
  _DWORD *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  v2[2] = a1 * a1;
  v2[3] = a1;
  v3 = (char *)malloc_type_malloc(32 * (a1 * a1), 0x1010040ED1E20F3uLL);
  *(_QWORD *)v2 = v3;
  if (v2[2])
  {
    v4 = 0;
    v5 = 0;
    do
    {
      *(_DWORD *)&v3[v4] = v5;
      v6 = malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
      v3 = *(char **)v2;
      v7 = *(_QWORD *)v2 + v4;
      *(_QWORD *)(v7 + 8) = v6;
      *(_DWORD *)(v7 + 20) = 256;
      ++v5;
      v4 += 32;
    }
    while (v5 < v2[2]);
  }
  return v2;
}

void sub_1D4D84CB4(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int *v21;
  unsigned int v22;
  _DWORD *v23;
  int32x2_t v24;
  float32x2_t *v25;
  uint64_t v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t *v29;
  __int32 v35;
  unsigned int v36;
  float32x2_t v37;
  size_t v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;

  v6 = a1[2];
  if ((_DWORD)v6)
  {
    v7 = (_DWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      *v7 = 0;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  sub_1D4D84EA4(a2, a3, (uint64_t)&v40);
  v39 = a3;
  if (a3)
  {
    v8 = 0;
    v9 = *(_QWORD *)a1;
    v10 = a1[3];
    v12 = v40;
    v11 = v41;
    v13 = (float)v10 / (float)(v43 - v41);
    v14 = v10 - 1;
    v15 = 1;
    v16 = (float)v10 / (float)(v42 - v40);
    do
    {
      v17 = (float)(v13 * (float)(*(float *)(a2 + 4 * v15) - v11));
      v18 = (float)(v16 * (float)(*(float *)(a2 + 4 * (v15 - 1)) - v12));
      if (v14 < v17)
        v17 = v10 - 1;
      if (v14 < v18)
        v18 = v10 - 1;
      v19 = v9 + 32 * (v18 + v17 * v10);
      v21 = (int *)(v19 + 16);
      v20 = *(_DWORD *)(v19 + 16);
      if (v20 == *(_DWORD *)(v19 + 20))
      {
        v22 = 2 * v20;
        *(_DWORD *)(v19 + 20) = v22;
        v23 = malloc_type_realloc(*(void **)(v19 + 8), 4 * v22, 0x100004052888210uLL);
        *(_QWORD *)(v19 + 8) = v23;
        v20 = *v21;
      }
      else
      {
        v23 = *(_DWORD **)(v19 + 8);
      }
      *v21 = v20 + 1;
      v23[v20] = v8++;
      v15 += 2;
    }
    while (v39 != v8);
  }
  sub_1D4D84EA4(a2, v39, (uint64_t)&v40);
  v25 = *(float32x2_t **)a1;
  v26 = a1[2];
  if ((_DWORD)v26)
  {
    v27 = 0;
    *(float *)v24.i32 = (float)v39;
    v28 = (float32x2_t)vdup_lane_s32(v24, 0);
    v29 = v25 + 3;
    __asm { FMOV            V1.2S, #-1.0 }
    do
    {
      v35 = v29[-1].i32[0];
      if (v35)
      {
        v36 = v35 + v27;
        v37 = vdiv_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v36, v27)), v28);
        v27 = v36;
      }
      else
      {
        v37 = _D1;
      }
      *v29 = v37;
      v29 += 4;
      --v26;
    }
    while (v26);
    v25 = *(float32x2_t **)a1;
    v38 = a1[2];
  }
  else
  {
    v38 = 0;
  }
  qsort(v25, v38, 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1D4D84F80);
}

float sub_1D4D84EA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  *(_OWORD *)a3 = xmmword_1D4DB2150;
  if (a2)
  {
    v3 = a2;
    v4 = (float *)(a1 + 4);
    v5 = 3.4028e38;
    v6 = -3.4028e38;
    v7 = -3.4028e38;
    v8 = 3.4028e38;
    do
    {
      v9 = *(v4 - 1);
      if ((float)(v8 - v9) > 0.00000011921)
      {
        *(float *)a3 = v9;
        v8 = v9;
      }
      v10 = *v4;
      if ((float)(v5 - *v4) > 0.00000011921)
      {
        *(float *)(a3 + 4) = v10;
        v5 = v10;
      }
      v11 = *(v4 - 1);
      if ((float)(v7 - v11) < -0.00000011921)
      {
        *(float *)(a3 + 8) = v11;
        v7 = v11;
      }
      v12 = *v4;
      if ((float)(v6 - *v4) < -0.00000011921)
      {
        *(float *)(a3 + 12) = v12;
        v6 = v12;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 3.4028e38;
    v6 = -3.4028e38;
    v7 = -3.4028e38;
    v8 = 3.4028e38;
  }
  *(float *)a3 = floorf(v8);
  *(float *)(a3 + 4) = floorf(v5);
  result = ceilf(v7);
  *(float *)(a3 + 8) = result;
  *(float *)(a3 + 12) = ceilf(v6);
  return result;
}

uint64_t sub_1D4D84F80(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 24);
  v3 = *(float *)(a2 + 24);
  if ((float)(v2 - v3) < -0.00000011921)
    return 0xFFFFFFFFLL;
  else
    return (float)(v3 - v2) < -0.00000011921;
}

void sub_1D4D84FA8(void **a1)
{
  void **v2;
  uint64_t v3;
  void **v4;
  void *v5;

  v2 = (void **)*a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 + 1;
    do
    {
      v5 = *v4;
      v4 += 4;
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(v2);
  free(a1);
}

void sub_1D4D84FF8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  size_t v5;
  float *v9;
  size_t v10;
  _BYTE *v11;
  unsigned int v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float __key;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v9 = *(float **)a1;
    v10 = v5;
    while ((float)(v9[6] + 0.5) <= 0.00000011921)
    {
      v9 += 8;
      if (!--v10)
        return;
    }
    if ((_DWORD)v10)
    {
      v11 = malloc_type_calloc(v5, 1uLL, 0x100004077774924uLL);
      if (a3)
      {
        v12 = 0;
        do
        {
          __key = 0.0;
          __key = (float)(sub_1D4D80B64(a2) * 0.999) + 0.001;
          v13 = (float *)bsearch(&__key, v9, v10, 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1D4D85158);
          if (v13)
            v14 = v13;
          else
            v14 = v9;
          v15 = *(int *)v14;
          if (v12 < v10 && v11[v15])
          {
            --v12;
          }
          else
          {
            v11[v15] = 1;
            *(_DWORD *)(a4 + 4 * (int)v12) = *(_DWORD *)(*((_QWORD *)v14 + 1)
                                                         + 4
                                                         * sub_1D4D80AF8(a2, 0, (*((_DWORD *)v14 + 4) - 1)));
          }
          ++v12;
        }
        while (v12 < a3);
      }
      free(v11);
    }
  }
}

uint64_t sub_1D4D85158(float *a1, uint64_t a2)
{
  if ((float)(*a1 - *(float *)(a2 + 24)) < -0.00000011921)
    return 0xFFFFFFFFLL;
  else
    return (float)(*a1 - *(float *)(a2 + 28)) > 0.00000011921;
}

_QWORD *sub_1D4D85184@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D4D85E5C(a2, a1);
}

_QWORD *sub_1D4D85190(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;

  v11 = sub_1D4D85E5C(a1, a2);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  v11[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  *(_OWORD *)(v11 + 5) = *(_OWORD *)a4;
  v11[7] = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v11[8] = 0;
  v11[9] = 0;
  v11[10] = 0;
  *((_OWORD *)v11 + 4) = *(_OWORD *)a5;
  v11[10] = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v11[11] = 0;
  v11[12] = 0;
  v11[13] = 0;
  *(_OWORD *)(v11 + 11) = *(_OWORD *)a6;
  v11[13] = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *((_OWORD *)v11 + 7) = 0u;
  *(_OWORD *)((char *)v11 + 137) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  sub_1D4D852F4((uint64_t)v11);
  return a1;
}

void sub_1D4D85284(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = (void *)v1[16];
  if (v8)
  {
    v1[17] = v8;
    operator delete(v8);
  }
  sub_1D4D6C1D0(v2);
  v9 = *v6;
  if (*v6)
  {
    v1[12] = v9;
    operator delete(v9);
  }
  v10 = *v3;
  if (*v3)
  {
    v1[9] = v10;
    operator delete(v10);
  }
  v11 = *v4;
  if (*v4)
  {
    v1[6] = v11;
    operator delete(v11);
  }
  v12 = *v5;
  if (*v5)
  {
    v1[3] = v12;
    operator delete(v12);
  }
  sub_1D4D6C1D0((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1D4D852F4(uint64_t a1)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  sparse_dimension v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  sparse_dimension v17;
  sparse_dimension v18;
  sparse_matrix_double v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  sparse_m_double *v24;
  sparse_m_double *v25;
  sparse_index v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  sparse_dimension v32;
  double *v33;
  double *v34;
  sparse_dimension v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  char *v46;
  sparse_m_double *A;
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  void *__p;
  char *v52;
  char *v53;

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  if (matrix_number_of_rows == (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3
    && (v4 = matrix_number_of_columns,
        matrix_number_of_columns == (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3)
    && matrix_number_of_columns == (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3
    && matrix_number_of_rows == (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2)
  {
    __p = 0;
    v52 = 0;
    v53 = 0;
    if (matrix_number_of_columns)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (*(double *)(*(_QWORD *)(a1 + 88) + 8 * v6) < INFINITY)
        {
          if (v5 >= v53)
          {
            v8 = (char *)__p;
            v9 = (v5 - (_BYTE *)__p) >> 2;
            v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62)
              sub_1D4D5DFA8();
            v11 = v53 - (_BYTE *)__p;
            if ((v53 - (_BYTE *)__p) >> 1 > v10)
              v10 = v11 >> 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
              v12 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (v12)
            {
              v13 = (char *)sub_1D4D5EA14((uint64_t)&v53, v12);
              v8 = (char *)__p;
              v5 = v52;
            }
            else
            {
              v13 = 0;
            }
            v14 = &v13[4 * v9];
            *(_DWORD *)v14 = v6;
            v7 = v14 + 4;
            while (v5 != v8)
            {
              v15 = *((_DWORD *)v5 - 1);
              v5 -= 4;
              *((_DWORD *)v14 - 1) = v15;
              v14 -= 4;
            }
            __p = v14;
            v52 = v7;
            v53 = &v13[4 * v12];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *(_DWORD *)v5 = v6;
            v7 = v5 + 4;
          }
          v52 = v7;
          v5 = v7;
        }
        ++v6;
      }
      while (v6 != v4);
      v16 = (char *)__p;
    }
    else
    {
      v16 = 0;
      v5 = 0;
    }
    v17 = sub_1D4D85AA0(a1);
    v19 = sparse_matrix_create_double(v17, v18);
    sub_1D4D85E5C(v49, (uint64_t)v19);
    sub_1D4D5E3A4(a1 + 112, (__int128 *)v49);
    v20 = (std::__shared_weak_count *)v49[1];
    if (v49[1])
    {
      v21 = (unint64_t *)((char *)v49[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v48 = 0;
    sub_1D4D6A0B8(v49, v17, &v48);
    v23 = *(void **)(a1 + 128);
    if (v23)
    {
      *(_QWORD *)(a1 + 136) = v23;
      operator delete(v23);
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v49;
    *(_QWORD *)(a1 + 144) = v50;
    v24 = *(sparse_m_double **)(a1 + 112);
    v25 = *(sparse_m_double **)a1;
    sub_1D4D8C26C(v24, 0, 0, *(void **)a1, 0, 1.0, 0.0);
    sparse_commit(v24);
    if (matrix_number_of_rows)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v26);
        if (v28)
        {
          sparse_insert_entry_double(v24, (double)v28, v26, v27 + v4);
          ++v27;
        }
        if ((~(_WORD)v27 & 0x3FFF) == 0)
          sparse_commit(v24);
        ++v26;
      }
      while (matrix_number_of_rows != v26);
    }
    else
    {
      v27 = 0;
    }
    v46 = v16;
    A = v25;
    v29 = (v5 - v16) >> 2;
    if (v5 != v16)
    {
      v30 = 0;
      if (v29 <= 1)
        v31 = 1;
      else
        v31 = v29;
      v32 = v4 + v27;
      do
      {
        sparse_insert_entry_double(v24, 1.0, matrix_number_of_rows + v30, *((int *)__p + v30));
        sparse_insert_entry_double(v24, 1.0, matrix_number_of_rows + v30, v32 + v30);
        ++v30;
      }
      while (v31 != v30);
    }
    sparse_commit(v24);
    sub_1D4D604C8(v49, matrix_number_of_rows);
    sub_1D4D8BF18(A, (const double **)(a1 + 64), (uint64_t)v49, CblasNoTrans);
    if (matrix_number_of_rows)
    {
      v33 = *(double **)(a1 + 16);
      v34 = (double *)v49[0];
      v35 = matrix_number_of_rows;
      v36 = *(double **)(a1 + 128);
      do
      {
        v37 = *v33++;
        v38 = v37;
        v39 = *v34++;
        *v36++ = v38 - v39;
        --v35;
      }
      while (v35);
    }
    if (v5 != v46)
    {
      v40 = (int *)__p;
      v41 = *(_QWORD *)(a1 + 88);
      v42 = *(_QWORD *)(a1 + 64);
      if (v29 <= 1)
        v43 = 1;
      else
        v43 = v29;
      v44 = (double *)(*(_QWORD *)(a1 + 128) + 8 * matrix_number_of_rows);
      do
      {
        v45 = *v40++;
        *v44++ = *(double *)(v41 + 8 * v45) - *(double *)(v42 + 8 * v45);
        --v43;
      }
      while (v43);
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p)
    {
      v52 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_1D4D856E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_1D4D85740@<D0>(uint64_t a1@<X0>, const void **a2@<X1>, double **a3@<X8>)
{
  sparse_dimension matrix_number_of_columns;
  double result;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  v11 = 0;
  sub_1D4D6A0B8(a3, matrix_number_of_columns, &v11);
  if (matrix_number_of_columns)
  {
    memmove(*a3, *a2, 8 * matrix_number_of_columns);
    v8 = *(double **)(a1 + 64);
    v9 = *a3;
    do
    {
      v10 = *v8++;
      result = v10 + *v9;
      *v9++ = result;
      --matrix_number_of_columns;
    }
    while (matrix_number_of_columns);
  }
  return result;
}

void sub_1D4D857C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1D4D60B28(a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  sub_1D4D6455C((uint64_t)a3, matrix_number_of_columns);
}

void sub_1D4D8581C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D85838@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns;
  sparse_dimension v7;
  sparse_matrix_double v8;

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  v7 = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  v8 = sparse_matrix_create_double(matrix_number_of_columns, v7);
  sparse_set_matrix_property(v8, SPARSE_UPPER_SYMMETRIC);
  sub_1D4D8C26C(v8, 0, 0, a2, 0, 1.0, 0.0);
  return sub_1D4D85E5C(a3, (uint64_t)v8);
}

_QWORD *sub_1D4D858B8@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns;
  sparse_dimension v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *result;
  sparse_dimension v13;
  uint64_t *v14;
  _QWORD *v15;
  sparse_dimension v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  v7 = matrix_number_of_columns;
  v8 = *(_DWORD **)(a1 + 40);
  v9 = *(_DWORD **)(a1 + 48);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*v8++)
        ++v10;
    }
    while (v8 != v9);
  }
  v22 = 0;
  result = sub_1D4D6A0B8(a3, 2 * matrix_number_of_columns, &v22);
  if (v7)
  {
    v13 = v10 + v7;
    v14 = *a2;
    v15 = (_QWORD *)*a3;
    v16 = v7;
    do
    {
      v17 = *v14++;
      *v15++ = v17;
      --v16;
    }
    while (v16);
    v18 = 0;
    v19 = *(double **)(a1 + 88);
    v20 = *a2;
    v21 = (_QWORD *)(*a3 + 8 * v7);
    do
    {
      if (*v19 >= INFINITY)
        *v21 = 0xBFF0000000000000;
      else
        *v21 = v20[v13 + v18++];
      ++v19;
      ++v21;
      --v7;
    }
    while (v7);
  }
  return result;
}

sparse_dimension sub_1D4D859B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns;
  sparse_dimension matrix_number_of_rows;
  uint64_t v8;
  sparse_dimension i;
  sparse_dimension result;
  double v11;
  uint64_t v12;

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  v12 = 0;
  sub_1D4D6A0B8(a3, matrix_number_of_rows, &v12);
  v8 = 0;
  for (i = 0; ; ++i)
  {
    result = sparse_get_matrix_number_of_rows(*(void **)a1);
    if (i >= result)
      break;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * i))
    {
      v11 = *(double *)(*a2 + 8 * (v8 + matrix_number_of_columns));
      if (v11 < 0.0)
        v11 = -v11;
      *(double *)(*a3 + 8 * i) = v11;
      ++v8;
    }
    else
    {
      *(_QWORD *)(*a3 + 8 * i) = 0xBFF0000000000000;
    }
  }
  return result;
}

void sub_1D4D85A84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sparse_dimension sub_1D4D85AA0(uint64_t a1)
{
  sparse_dimension matrix_number_of_rows;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  sparse_get_matrix_number_of_columns(*(void **)a1);
  v3 = *(_DWORD **)(a1 + 40);
  v4 = *(_DWORD **)(a1 + 48);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      if (*v3++)
        ++v5;
    }
    while (v3 != v4);
  }
  v7 = *(double **)(a1 + 88);
  v8 = *(double **)(a1 + 96);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      if (v10 < INFINITY)
        ++v9;
    }
    while (v7 != v8);
  }
  return v9 + matrix_number_of_rows;
}

uint64_t sub_1D4D85B3C(uint64_t a1, const double **a2, char a3, double a4)
{
  sparse_dimension matrix_number_of_columns;
  sparse_dimension matrix_number_of_rows;
  sparse_m_double *v10;
  double *v11;
  double *v12;
  double *v13;
  int v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  int v23;
  double *v24;
  int v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  double v35;
  double v36;
  uint64_t v38;
  void *__p[3];
  void *v40[3];
  void *v41[3];

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  v10 = *(sparse_m_double **)a1;
  v40[0] = 0;
  sub_1D4D6A0B8(v41, matrix_number_of_columns, v40);
  if (matrix_number_of_columns)
  {
    v11 = (double *)*a2;
    v12 = *(double **)(a1 + 64);
    v13 = (double *)v41[0];
    LOBYTE(v14) = 1;
    v15 = *(double **)(a1 + 88);
    do
    {
      v16 = *v11;
      if (*v11 < *v12)
      {
        *v13 = *v12 - v16 + *v13;
        v16 = *v11;
      }
      v17 = *v15;
      if (v16 > *v15)
      {
        *v13 = v16 - v17 + *v13;
        v16 = *v11;
        v17 = *v15;
      }
      v18 = *v12++;
      v19 = (v16 >= v18 - a4) & v14;
      if (v16 > v17 + a4)
        v14 = 0;
      else
        v14 = v19;
      ++v13;
      ++v15;
      ++v11;
      --matrix_number_of_columns;
    }
    while (matrix_number_of_columns);
  }
  else
  {
    v14 = 1;
  }
  sub_1D4D604C8(v40, matrix_number_of_rows);
  sub_1D4D8BF18(v10, a2, (uint64_t)v40, CblasNoTrans);
  v38 = 0;
  sub_1D4D6A0B8(__p, matrix_number_of_rows, &v38);
  if (matrix_number_of_rows)
  {
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 40);
    v22 = (double *)v40[0];
    v23 = 1;
    v24 = (double *)__p[0];
    while (1)
    {
      v25 = *(_DWORD *)(v21 + 4 * v20);
      if (v25 == -1)
      {
        v29 = v22[v20];
        v30 = *(_QWORD *)(a1 + 16);
        v31 = *(double *)(v30 + 8 * v20);
        if (v29 < v31)
        {
          v24[v20] = v31 - v29;
          v29 = v22[v20];
          v31 = *(double *)(v30 + 8 * v20);
        }
        if (v29 >= v31 - a4)
          goto LABEL_21;
      }
      else if (v25 == 1)
      {
        v26 = v22[v20];
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(double *)(v27 + 8 * v20);
        if (v26 > v28)
        {
          v24[v20] = v26 - v28;
          v26 = v22[v20];
          v28 = *(double *)(v27 + 8 * v20);
        }
        if (v26 <= v28 + a4)
          goto LABEL_21;
      }
      else
      {
        v32 = *(_QWORD *)(a1 + 16);
        v24[v20] = vabdd_f64(v22[v20], *(double *)(v32 + 8 * v20));
        if (vabdd_f64(v22[v20], *(double *)(v32 + 8 * v20)) <= a4)
          goto LABEL_21;
      }
      v23 = 0;
LABEL_21:
      if (matrix_number_of_rows == ++v20)
        goto LABEL_30;
    }
  }
  v23 = 1;
LABEL_30:
  if ((a3 & 1) != 0)
  {
    puts("\nChecking nonstandard constraints:");
    if (v14)
      v33 = "lb < x < ub? true";
    else
      v33 = "lb < x < ub? false";
    puts(v33);
    if ((v23 & 1) != 0)
      v34 = "Ax (?) b? true";
    else
      v34 = "Ax (?) b? false";
    puts(v34);
    v35 = sub_1D4D8BFD0((uint64_t)v41);
    printf("||(lb-x)_+ + (x-ub)_+||_1 = %f\n", v35);
    v36 = sub_1D4D8BFD0((uint64_t)__p);
    printf("||Ax (?) b||_2 = %f\n", v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  return v14 & v23;
}

void sub_1D4D85E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D85E5C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E988B130;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4D85EB8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;

  __cxa_begin_catch(a1);
  sub_1D4D85EE4((int)&a13, v13);
  __cxa_rethrow();
}

void sub_1D4D85ED0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D85EE4(int a1, void *A)
{
  uint64_t result;

  if (A)
    return sparse_matrix_destroy(A);
  return result;
}

void sub_1D4D85F08(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D826897CLL);
}

void *sub_1D4D85F2C(uint64_t a1)
{
  void *result;

  result = *(void **)(a1 + 24);
  if (result)
    return (void *)(int)sparse_matrix_destroy(result);
  return result;
}

uint64_t sub_1D4D85F4C(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A660))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_1D4D85F8C(_QWORD *a1, void ***a2)
{
  sparse_dimension *v3;
  void ***v4;
  void **v5;
  _QWORD *v6;

  *a1 = off_1E988A998;
  a1[1] = 0;
  v3 = a1 + 1;
  a1[5] = 0;
  v4 = (void ***)(a1 + 5);
  a1[2] = 0;
  a1[3] = 0;
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)a1[5];
  a1[5] = v5;
  if (v6)
  {
    sub_1D4D6A138((uint64_t)(a1 + 5), v6);
    v5 = *v4;
  }
  if (!*((_BYTE *)v5 + 152))
  {
    a1[2] = sparse_get_matrix_number_of_columns(v5[14]);
    *v3 = sparse_get_matrix_number_of_rows(*(void **)(a1[5] + 112));
    a1[3] = sparse_get_matrix_number_of_columns(**v4);
  }
  return a1;
}

void sub_1D4D86028(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v4 = v3;
  *v1 = v4;
  v6 = (_QWORD *)v1[5];
  v1[5] = 0;
  if (v6)
    sub_1D4D6A138(v2, v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D86058(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  void *exception;

  v1 = a1[5];
  if (v1 && *(_BYTE *)(v1 + 152))
  {
    puts("Bad constraint dimensions.");
    return 1;
  }
  v3 = a1[2];
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D826882C](exception, "ERROR: n = 0.");
    goto LABEL_9;
  }
  if (a1[1] > v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D826882C](exception, "ERROR: require m <= n.");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return 0;
}

void sub_1D4D860F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D4D86110(uint64_t *a1, const void **a2)
{
  double v3;
  double v4;
  void *__p[3];

  v3 = sub_1D4D85740(a1[5], a2, (double **)__p);
  v4 = (*(double (**)(uint64_t *, void **, double))(*a1 + 80))(a1, __p, v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1D4D86174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D86190(uint64_t *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;
  void *__p[3];

  v5 = sub_1D4D85740(a1[5], a2, (double **)__p);
  v6 = (*(uint64_t (**)(uint64_t *, void **, double))(*a1 + 88))(a1, __p, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1D4D857C8(a1[5], v6, a3);
}

void sub_1D4D86204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D86220(uint64_t *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  void *v8;
  double v9;
  void *v10;
  void *__p[3];

  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  v7 = a1[5];
  if (v6)
  {
    v8 = (void *)(*(uint64_t (**)(uint64_t *, const void **))(*a1 + 96))(a1, a2);
    sub_1D4D85838(v7, v8, a3);
  }
  else
  {
    v9 = sub_1D4D85740(a1[5], a2, (double **)__p);
    v10 = (void *)(*(uint64_t (**)(uint64_t *, void **, double))(*a1 + 96))(a1, __p, v9);
    sub_1D4D85838(v7, v10, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1D4D862E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D862FC(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(unint64_t *))(*a1 + 104))(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1D4D60B28(a2, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  sub_1D4D6455C((uint64_t)a2, a1[2]);
}

void sub_1D4D86350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D4D8636C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v8;
  void *v9;
  uint64_t **v10;
  void *v11;
  void *v12;
  double result;
  __int128 v14;
  uint64_t v15;

  sub_1D4D86EDC(a4, a2);
  v8 = sub_1D4D86110(a1, (const void **)(a2 + 8));
  *(double *)(a4 + 80) = v8;
  if (a3)
    printf("\nObjective value = %0.16f\n", v8);
  sub_1D4D85740(a1[5], (const void **)(a2 + 8), (double **)&v14);
  v9 = *(void **)(a4 + 8);
  if (v9)
  {
    *(_QWORD *)(a4 + 16) = v9;
    operator delete(v9);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
  }
  *(_OWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 24) = v15;
  v10 = (uint64_t **)(a2 + 56);
  sub_1D4D858B8(a1[5], v10, &v14);
  v11 = *(void **)(a4 + 56);
  if (v11)
  {
    *(_QWORD *)(a4 + 64) = v11;
    operator delete(v11);
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
  }
  *(_OWORD *)(a4 + 56) = v14;
  *(_QWORD *)(a4 + 72) = v15;
  sub_1D4D859B8(a1[5], v10, &v14);
  v12 = *(void **)(a4 + 32);
  if (v12)
  {
    *(_QWORD *)(a4 + 40) = v12;
    operator delete(v12);
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
  }
  result = *(double *)&v14;
  *(_OWORD *)(a4 + 32) = v14;
  *(_QWORD *)(a4 + 48) = v15;
  return result;
}

void sub_1D4D86494(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4D864B4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D864B4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D4D86504(uint64_t a1, uint64_t a2, char a3, double a4)
{
  return sub_1D4D85B3C(*(_QWORD *)(a1 + 40), (const double **)(a2 + 8), a3, a4);
}

_QWORD *sub_1D4D86510(_QWORD *a1, void ***a2, uint64_t a3)
{
  void **v5;
  void **v6;
  sparse_matrix_double v7;
  unint64_t v8;
  void *v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void **v14;

  v5 = *a2;
  *a2 = 0;
  v14 = v5;
  sub_1D4D85F8C(a1, &v14);
  v6 = v14;
  v14 = 0;
  if (v6)
    sub_1D4D6A138((uint64_t)&v14, v6);
  *a1 = &off_1E988AA38;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1D4D60B28(a1 + 6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  v7 = sparse_matrix_create_double(a1[3], a1[3]);
  a1[9] = v7;
  sparse_set_matrix_property(v7, SPARSE_UPPER_SYMMETRIC);
  v8 = a1[2];
  v11 = 0;
  sub_1D4D6A0B8(&v12, v8, &v11);
  v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  *((_OWORD *)a1 + 5) = v12;
  a1[12] = v13;
  return a1;
}

void sub_1D4D865F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v18 = *v16;
  if (*v16)
  {
    v14[11] = v18;
    operator delete(v18);
  }
  v19 = *v15;
  if (*v15)
  {
    v14[7] = v19;
    operator delete(v19);
  }
  *v14 = off_1E988A998;
  v22 = (_QWORD *)v14[5];
  v21 = v14 + 5;
  v20 = v22;
  *v21 = 0;
  if (v22)
    sub_1D4D6A138((uint64_t)v21, v20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D8666C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  *a1 = &off_1E988AA38;
  v2 = (void *)a1[9];
  if (v2)
  {
    sparse_matrix_destroy(v2);
    a1[9] = 0;
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  *a1 = off_1E988A998;
  v5 = (_QWORD *)a1[5];
  a1[5] = 0;
  if (v5)
    sub_1D4D6A138((uint64_t)(a1 + 5), v5);
  return a1;
}

void sub_1D4D866F0(_QWORD *a1)
{
  sub_1D4D8666C(a1);
  JUMPOUT(0x1D826897CLL);
}

double sub_1D4D86714(uint64_t a1, double **a2)
{
  return sub_1D4D8BF90(a1 + 48, a2);
}

uint64_t sub_1D4D8671C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1D4D86724(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

BOOL sub_1D4D8672C(_QWORD *a1)
{
  return (sub_1D4D86058(a1) & 1) != 0 || !a1[5] && sub_1D4D86770(a1);
}

BOOL sub_1D4D86770(_QWORD *a1)
{
  unint64_t v2;
  uint64_t matrix_nonzero_count_for_column;
  _BOOL8 result;

  if (a1[2] <= a1[1])
    return 0;
  v2 = 0;
  do
  {
    matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(a1[5] + 112), v2);
    result = matrix_nonzero_count_for_column == 0;
    if (!matrix_nonzero_count_for_column)
      break;
    ++v2;
  }
  while (a1[2] > v2);
  return result;
}

void sub_1D4D867D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v2 = (_QWORD *)MEMORY[0x1E0DE4A60];
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"A = ", 4);
  sub_1D4D8BD98(*(void **)(*(_QWORD *)(a1 + 40) + 112), 1);
  sub_1D4D72608(v2, (uint64_t)"b = ", 4);
  v3 = *(_QWORD *)(a1 + 40);
  v8 = 0;
  v9 = 0;
  __p = 0;
  sub_1D4D60B28(&__p, *(const void **)(v3 + 128), *(_QWORD *)(v3 + 136), (uint64_t)(*(_QWORD *)(v3 + 136) - *(_QWORD *)(v3 + 128)) >> 3);
  sub_1D4D8BD10((uint64_t *)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"c = ", 4);
  v5 = 0;
  v6 = 0;
  v4 = 0;
  sub_1D4D60B28(&v4, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  sub_1D4D8BD10((uint64_t *)&v4);
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_1D4D868BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D868F0(_QWORD *a1, void ***a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  void **v8;
  void **v9;
  unint64_t v10;
  void *v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void **v16;

  v7 = *a2;
  *a2 = 0;
  v16 = v7;
  sub_1D4D85F8C(a1, &v16);
  v8 = v16;
  v16 = 0;
  if (v8)
    sub_1D4D6A138((uint64_t)&v16, v8);
  *a1 = &off_1E988AB48;
  a1[6] = a3;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_1D4D60B28(a1 + 7, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  a1[10] = 0;
  v9 = (void **)(a1 + 10);
  a1[11] = 0;
  a1[12] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    v10 = a1[3];
    v13 = 0;
    sub_1D4D6A0B8(&v14, v10, &v13);
    v11 = *v9;
    if (*v9)
    {
      a1[11] = v11;
      operator delete(v11);
      *v9 = 0;
      a1[11] = 0;
      a1[12] = 0;
    }
    *((_OWORD *)a1 + 5) = v14;
    a1[12] = v15;
    sub_1D4D86A78((uint64_t)a1);
  }
  return a1;
}

void sub_1D4D869F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v19 = *v17;
  if (*v17)
  {
    v14[15] = v19;
    operator delete(v19);
  }
  v20 = *v16;
  if (*v16)
  {
    v14[11] = v20;
    operator delete(v20);
  }
  v21 = *v15;
  if (*v15)
  {
    v14[8] = v21;
    operator delete(v21);
  }
  *v14 = off_1E988A998;
  v24 = (_QWORD *)v14[5];
  v23 = v14 + 5;
  v22 = v24;
  *v23 = 0;
  if (v24)
    sub_1D4D6A138((uint64_t)v23, v22);
  _Unwind_Resume(exception_object);
}

void sub_1D4D86A78(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *A;
  std::__shared_weak_count *v9;
  void *__p[3];

  v2 = *(_QWORD *)(a1 + 16);
  A = 0;
  sub_1D4D6A0B8(__p, v2, &A);
  sub_1D4D6455C(a1 + 112, *(_QWORD *)(a1 + 16));
  sub_1D4D86220((uint64_t *)a1, (const void **)__p, &A);
  v3 = A;
  v4 = sub_1D4D8C110((uint64_t *)(a1 + 112), A);
  *(_BYTE *)(a1 + 104) = v4 == sparse_get_matrix_nonzero_count(v3);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D4D86B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4D86B7C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E988AB48;
  v2 = (void *)a1[6];
  if (v2)
  {
    sparse_matrix_destroy(v2);
    a1[6] = 0;
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  *a1 = off_1E988A998;
  v6 = (_QWORD *)a1[5];
  a1[5] = 0;
  if (v6)
    sub_1D4D6A138((uint64_t)(a1 + 5), v6);
  return a1;
}

void sub_1D4D86C10(_QWORD *a1)
{
  sub_1D4D86B7C(a1);
  JUMPOUT(0x1D826897CLL);
}

double sub_1D4D86C34(uint64_t a1, const double **a2)
{
  sparse_dimension matrix_number_of_rows;
  double v5;
  double v6;
  void *__p[3];

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)(a1 + 48));
  sub_1D4D604C8(__p, matrix_number_of_rows);
  sub_1D4D8BF18(*(sparse_matrix_double *)(a1 + 48), a2, (uint64_t)__p, CblasNoTrans);
  v5 = sub_1D4D8BF90((uint64_t)a2, (double **)__p);
  v6 = sub_1D4D8BF90(a1 + 56, (double **)a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6 + v5 * 0.5;
}

void sub_1D4D86CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D86CE8(uint64_t a1, const double **a2)
{
  sub_1D4D8BF18(*(sparse_matrix_double *)(a1 + 48), a2, a1 + 80, CblasNoTrans);
  sub_1D4D8C04C(a1 + 80, (double **)(a1 + 56), 1.0);
  return a1 + 80;
}

uint64_t sub_1D4D86D2C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void sub_1D4D86D34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v2 = (_QWORD *)MEMORY[0x1E0DE4A60];
  sub_1D4D72608(MEMORY[0x1E0DE4A60], (uint64_t)"A = ", 4);
  sub_1D4D8BD98(*(void **)(*(_QWORD *)(a1 + 40) + 112), 1);
  sub_1D4D72608(v2, (uint64_t)"b = ", 4);
  v3 = *(_QWORD *)(a1 + 40);
  v8 = 0;
  v9 = 0;
  __p = 0;
  sub_1D4D60B28(&__p, *(const void **)(v3 + 128), *(_QWORD *)(v3 + 136), (uint64_t)(*(_QWORD *)(v3 + 136) - *(_QWORD *)(v3 + 128)) >> 3);
  sub_1D4D8BD10((uint64_t *)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  sub_1D4D72608(v2, (uint64_t)"Q = ", 4);
  sub_1D4D8BD98(*(void **)(a1 + 48), 1);
  sub_1D4D72608(v2, (uint64_t)"c = ", 4);
  v5 = 0;
  v6 = 0;
  v4 = 0;
  sub_1D4D60B28(&v4, *(const void **)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
  sub_1D4D8BD10((uint64_t *)&v4);
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_1D4D86E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D86E6C()
{
  return 0;
}

uint64_t sub_1D4D86E74()
{
  return 0;
}

uint64_t sub_1D4D86E7C()
{
  return 0;
}

uint64_t sub_1D4D86E84()
{
  return 0;
}

uint64_t sub_1D4D86E8C()
{
  return 1;
}

uint64_t sub_1D4D86E94()
{
  return 1;
}

uint64_t sub_1D4D86E9C()
{
  return 1;
}

uint64_t sub_1D4D86EA4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1D4D86EAC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1D4D86EB4()
{
  return 0;
}

uint64_t sub_1D4D86EBC()
{
  return 1;
}

uint64_t sub_1D4D86EC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_1D4D86ECC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_1D4D86ED4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1D4D86EDC(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1D4D60B28((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1D4D60B28((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1D4D60B28((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v4 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  return a1;
}

void sub_1D4D86F80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D86FB4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, double a6)
{
  clock_t v12;
  double Current;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  clock_t v18;
  double v19;
  double v20;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[320];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v12 = clock();
  Current = CFAbsoluteTimeGetCurrent();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    if ((_DWORD)a3)
      puts("Bad input, giving up.");
    v14 = 3;
    *a4 = 3;
    sub_1D4D872D8((uint64_t)a4);
  }
  else
  {
    sub_1D4D75AC4(v37, a1, a5, a3, 0.0, 0.0001);
    v36 = 0;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    *(_OWORD *)v32 = 0u;
    sub_1D4D76E80((uint64_t)v37, a2, (uint64_t)&v31, a6);
    v14 = v31;
    if (v31)
    {
      *a4 = v31;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *, uint64_t, double))(*(_QWORD *)a1 + 56))(&v22, a1, &v31, a3, a6);
      *a4 = v22;
      v15 = (void *)*((_QWORD *)a4 + 1);
      if (v15)
      {
        *((_QWORD *)a4 + 2) = v15;
        operator delete(v15);
        *((_QWORD *)a4 + 1) = 0;
        *((_QWORD *)a4 + 2) = 0;
        *((_QWORD *)a4 + 3) = 0;
      }
      v16 = (void *)*((_QWORD *)a4 + 4);
      *(_OWORD *)(a4 + 2) = *(_OWORD *)v23;
      *((_QWORD *)a4 + 3) = v24;
      v23[1] = 0;
      v24 = 0;
      v23[0] = 0;
      if (v16)
      {
        *((_QWORD *)a4 + 5) = v16;
        operator delete(v16);
        *((_QWORD *)a4 + 4) = 0;
        *((_QWORD *)a4 + 5) = 0;
        *((_QWORD *)a4 + 6) = 0;
      }
      v17 = (void *)*((_QWORD *)a4 + 7);
      *((_OWORD *)a4 + 2) = *(_OWORD *)__p;
      *((_QWORD *)a4 + 6) = v26;
      __p[1] = 0;
      v26 = 0;
      __p[0] = 0;
      if (v17)
      {
        *((_QWORD *)a4 + 8) = v17;
        operator delete(v17);
        *((_QWORD *)a4 + 7) = 0;
        *((_QWORD *)a4 + 8) = 0;
        *((_QWORD *)a4 + 9) = 0;
        v17 = __p[0];
      }
      *(_OWORD *)(a4 + 14) = v27;
      *((_QWORD *)a4 + 9) = v28;
      v28 = 0;
      v27 = 0uLL;
      *((_OWORD *)a4 + 5) = v29;
      *((_QWORD *)a4 + 12) = v30;
      if (v17)
      {
        __p[1] = v17;
        operator delete(v17);
      }
      if (v23[0])
      {
        v23[1] = v23[0];
        operator delete(v23[0]);
      }
      if ((sub_1D4D86504(a1, (uint64_t)a4, a3, a6) & 1) == 0)
      {
        if ((_DWORD)a3)
          puts("ConvexSolver: solution violates constraints (probably infeasible).");
        *a4 = 5;
      }
      v18 = clock();
      v19 = CFAbsoluteTimeGetCurrent();
      if ((_DWORD)a3)
      {
        v20 = v19 - Current;
        printf("Total CPU  time    : %f s\n", (double)(v18 - v12) / 1000000.0);
        printf("Total wall time    : %f s\n\n", v20);
      }
      sub_1D4D872D8((uint64_t)a4);
      v14 = *a4;
    }
    if ((_QWORD)v35)
    {
      *((_QWORD *)&v35 + 1) = v35;
      operator delete((void *)v35);
    }
    if (*((_QWORD *)&v33 + 1))
    {
      *(_QWORD *)&v34 = *((_QWORD *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    sub_1D4D75B9C(v37);
  }
  return v14;
}

void sub_1D4D872A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_1D4D864B4(&a23);
  sub_1D4D75B9C(&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D872D8(uint64_t a1)
{
  return printf("%d\t%f\t%d\t%f\t%f\t%f\t\n", *(_DWORD *)a1, *(double *)(a1 + 80), *(_DWORD *)(a1 + 88), *(float *)(a1 + 92), *(float *)(a1 + 96), *(float *)(a1 + 100));
}

uint64_t sub_1D4D87330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9)
{
  uint64_t v13;
  MetalFAST9BRIEF *v14;
  qos_class_t v15;
  NSObject *v16;
  uint64_t *v17;

  *(_QWORD *)a1 = &off_1E988ACC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 40) = a9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_BYTE *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  sub_1D4D75764(a1 + 144);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = &unk_1D4DB2228;
  sub_1D4D62E6C(a1 + 336, a8);
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 368) = 850045863;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 440) = 1018212795;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
    *(_DWORD *)(a1 + 40) = 5;
  sub_1D4DA76D4(a1 + 68);
  v13 = operator new();
  sub_1D4D7DA2C(v13, 0, 0, 1, 4);
  *(_QWORD *)(a1 + 272) = v13;
  *(_QWORD *)(a1 + 248) = v13;
  if (!a6 || (a7 & 1) != 0)
  {
    v14 = *(MetalFAST9BRIEF **)(a1 + 280);
  }
  else
  {
    v14 = sub_1D4D6FB7C();
    *(_QWORD *)(a1 + 280) = v14;
  }
  *(_QWORD *)(a1 + 288) = 0;
  if (v14)
  {
    v15 = qos_class_self();
    v16 = dispatch_queue_attr_make_with_qos_class(0, v15, 0);
    *(_QWORD *)(a1 + 288) = dispatch_queue_create("com.apple.acg.inertiacam.featureextraction", v16);
  }
  v17 = (uint64_t *)operator new();
  sub_1D4DA1EFC(v17, 6, *(_DWORD *)(a1 + 96), 0);
  *(_QWORD *)(a1 + 304) = v17;
  if (a7)
    *(_QWORD *)(a1 + 328) = &unk_1D4DB2238;
  return a1;
}

void sub_1D4D874F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v5 = (void *)v1[61];
  if (v5)
  {
    v1[62] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)v1[45];
  if (v6 == v3)
  {
    v7 = 4;
    v6 = v3;
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  v8 = (std::__shared_weak_count *)v1[40];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  sub_1D4D75824(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D875A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9)
{
  return sub_1D4D87330(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1D4D875AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void **v19;

  *(_QWORD *)a1 = &off_1E988ACC8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 368));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 440));
  sub_1D4D757B4(a1 + 144);
  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
  {
    v3 = sub_1D4D756EC(v2);
    MEMORY[0x1D826897C](v3, 0x1020C40A6EEA1E9);
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v19 = *(void ***)(a1 + 56);
    sub_1D4D61D18(&v19);
    MEMORY[0x1D826897C](v4, 0x20C40960023A9);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v19 = *(void ***)(a1 + 48);
    sub_1D4D61D18(&v19);
    MEMORY[0x1D826897C](v5, 0x20C40960023A9);
  }
  v6 = *(_QWORD *)(a1 + 128);
  if (v6)
  {
    v7 = sub_1D4D6C1D0(v6);
    MEMORY[0x1D826897C](v7, 0x1020C401705F15ELL);
  }
  v8 = *(_QWORD *)(a1 + 272);
  if (v8)
  {
    v9 = sub_1D4D7DA8C(v8);
    MEMORY[0x1D826897C](v9, 0x1080C4008018275);
  }
  v10 = *(const void **)(a1 + 280);
  if (v10)
    j__CFRelease(v10);
  v11 = *(const void **)(a1 + 288);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 296);
  if (v12)
    CFRelease(v12);
  if (*(_QWORD *)(a1 + 304))
  {
    v13 = sub_1D4DA1F44();
    MEMORY[0x1D826897C](v13, 0x20C4093837F09);
  }
  sub_1D4D877F8((_QWORD *)(a1 + 488));
  v14 = *(void **)(a1 + 488);
  if (v14)
  {
    *(_QWORD *)(a1 + 496) = v14;
    operator delete(v14);
  }
  v15 = *(_QWORD **)(a1 + 360);
  if (v15 == (_QWORD *)(a1 + 336))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 336);
  }
  else
  {
    if (!v15)
      goto LABEL_26;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_26:
  v17 = *(std::__shared_weak_count **)(a1 + 320);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  sub_1D4D75824(a1 + 144);
  return a1;
}

void sub_1D4D87764(uint64_t a1)
{
  sub_1D4D875AC(a1);
  JUMPOUT(0x1D826897CLL);
}

__n128 sub_1D4D87788(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 100) = v4;
  *(_OWORD *)(a1 + 84) = v3;
  *(__n128 *)(a1 + 68) = result;
  return result;
}

uint64_t sub_1D4D877A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(result + 80);
  if (v1)
  {
    v2 = result;
    v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(_QWORD *)(v1 + 88) = v3;
      operator delete(v3);
    }
    result = MEMORY[0x1D826897C](v1, 0x1020C40BD1971B5);
    *(_QWORD *)(v2 + 80) = 0;
  }
  return result;
}

_QWORD *sub_1D4D877F8(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = result[1];
  v2 = v1 - *result;
  if ((int)(v2 >> 3) >= 1)
  {
    v3 = result;
    v4 = (v2 >> 3) + 1;
    do
    {
      v5 = *(_QWORD *)(*v3 + 8 * (v4 - 2));
      if (v5)
      {
        sub_1D4D877A8(*(_QWORD *)(*v3 + 8 * (v4 - 2)));
        sub_1D4D6C1D0(v5 + 64);
        sub_1D4D6C1D0(v5 + 48);
        result = (_QWORD *)MEMORY[0x1D826897C](v5, 0x1020C4048629F8CLL);
        v1 = v3[1];
      }
      v1 -= 8;
      v3[1] = v1;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void sub_1D4D87890(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = operator new();
  v7 = v6;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  v9 = (uint64_t *)a1[62];
  v8 = a1[63];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a1[61];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_1D4D5DFA8();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_1D4D5E2CC((uint64_t)(a1 + 63), v15);
    else
      v16 = 0;
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v7;
    v10 = v17 + 1;
    v20 = (char *)a1[61];
    v19 = (char *)a1[62];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)a1[61];
    }
    a1[61] = v17;
    a1[62] = v10;
    a1[63] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[62] = v10;
}

uint64_t sub_1D4D879B4(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 496) - *(_QWORD *)(result + 488);
  if ((int)(v1 >> 3) >= 1)
  {
    v2 = result;
    v3 = (v1 >> 3) + 1;
    do
      result = sub_1D4D877A8(*(_QWORD *)(*(_QWORD *)(v2 + 488) + 8 * (v3-- - 2)));
    while (v3 > 1);
  }
  return result;
}

void sub_1D4D87A08(_QWORD *a1, uint64_t *a2, int a3)
{
  unint64_t v3;
  unint64_t v7;
  CMTime *v8;
  __int128 *v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  __int128 v25;
  CMTime v26;
  CMTime v27;
  CMTime time2;
  CMTime time1;

  v3 = a1[1] - *a1;
  if ((int)(v3 >> 3) >= 1)
  {
    v7 = (v3 >> 3);
    v8 = (CMTime *)MEMORY[0x1E0CA2E30];
    do
    {
      v9 = *(__int128 **)(*a1 + 8 * (v7 - 1));
      if (!*((_QWORD *)v9 + 6))
      {
        v11 = *v9;
        time1.epoch = *((_QWORD *)v9 + 2);
        *(_OWORD *)&time1.value = v11;
        time2 = *(CMTime *)(*a2 + 28);
        if (CMTimeCompare(&time1, &time2) < 1
          || (v12 = *v9,
              v27.epoch = *((_QWORD *)v9 + 2),
              *(_OWORD *)&v27.value = v12,
              v26 = *v8,
              !CMTimeCompare(&v27, &v26))
          && a3)
        {
          v13 = sub_1D4D5E300(*a2);
          sub_1D4D5EF04(&v25, v13);
          sub_1D4D5E3A4((uint64_t)(v9 + 3), &v25);
          v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
          if (*((_QWORD *)&v25 + 1))
          {
            v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
      }
      if (!*((_QWORD *)v9 + 8))
      {
        v24 = *(CMTime *)((_BYTE *)v9 + 1);
        v23 = *(CMTime *)(*a2 + 28);
        if (CMTimeCompare(&v24, &v23) < 1
          || (v22 = *(CMTime *)((_BYTE *)v9 + 1), v21 = *v8, !CMTimeCompare(&v22, &v21)) && a3)
        {
          v17 = sub_1D4D5E300(*a2);
          sub_1D4D5EF04(&v25, v17);
          sub_1D4D5E3A4((uint64_t)(v9 + 4), &v25);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
          if (*((_QWORD *)&v25 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
    }
    while (v7-- > 1);
  }
}

void sub_1D4D87C3C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = a2[6];
  if (v2 && a2[8])
  {
    v5 = (std::__shared_weak_count *)a2[9];
    v21 = a2[8];
    v22 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v2 = a2[6];
    }
    v8 = (std::__shared_weak_count *)a2[7];
    v20[0] = v2;
    v20[1] = (uint64_t)v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (_QWORD *)sub_1D4D87E24(a1, (uint64_t)&v21, v20);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v14 = v22;
    if (!v22)
      goto LABEL_19;
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v11)
      {
LABEL_20:
        v17 = operator new();
        sub_1D4D5F924(v17, 0, 0);
        sub_1D4DA4B30((uint64_t)v11);
        sub_1D4D87F6C(v11, v17, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 124));
        a2[10] = v17;
        v18 = (void *)v11[47];
        if (v18)
        {
          v11[48] = v18;
          operator delete(v18);
        }
        v19 = (void *)v11[44];
        if (v19)
        {
          v11[45] = v19;
          operator delete(v19);
        }
        sub_1D4D6C1D0((uint64_t)(v11 + 40));
        sub_1D4D6C1D0((uint64_t)(v11 + 38));
        JUMPOUT(0x1D826897CLL);
      }
    }
    else
    {
LABEL_19:
      if (v11)
        goto LABEL_20;
    }
  }
}

void sub_1D4D87DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1020C40BD1971B5);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D87E24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v21 = *(_QWORD **)a2;
  v22 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a3[1];
  v19 = *a3;
  v20 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_1D4DA7570((uint64_t *)&v21, &v19, *(_QWORD *)(a1 + 304), *(_DWORD *)(a1 + 96), *(float *)(a1 + 84), *(float *)(a1 + 92), *(float *)(a1 + 88), *(float *)(a1 + 108));
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v11 + 116) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v11 + 128) = **(_QWORD **)a2;
  *(_QWORD *)(v11 + 100) = *(_QWORD *)(a1 + 112);
  *(_DWORD *)(v11 + 108) = *(_DWORD *)(a1 + 120);
  return v11;
}

void sub_1D4D87F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D4D6C1D0((uint64_t)&a9);
  sub_1D4D6C1D0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1D4D87F6C(_QWORD *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  float v12;
  float v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  const double *v17;
  float64x2_t v18;

  *(_QWORD *)(a2 + 104) = a1[16];
  v7 = a1[38];
  v8 = *(_OWORD *)(v7 + 28);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(v7 + 44);
  *(_OWORD *)(a2 + 112) = v8;
  v9 = a1[40];
  *(_QWORD *)(a2 + 136) = *(_QWORD *)v9;
  v10 = *(_OWORD *)(v9 + 28);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(v9 + 44);
  *(_OWORD *)(a2 + 144) = v10;
  if (a4)
  {
    v11 = (void **)operator new();
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  a1[37] = v11;
  v12 = sub_1D4DA5108((uint64_t)a1, a2);
  v13 = v12;
  *(_BYTE *)(a2 + 72) = v12 > 0.0;
  if (v12 <= 0.0)
  {
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v12 = 0.0;
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  }
  *(float *)(a2 + 168) = v12;
  if (v11)
  {
    v14.n128_f64[0] = sub_1D4D881A4(v11, (_QWORD *)a2);
    v15 = *v11;
    if (*v11)
    {
      v11[1] = v15;
      operator delete(v15);
    }
    MEMORY[0x1D826897C](v11, 0x20C40960023A9, v14);
  }
  v16 = 0;
  v17 = (const double *)(a2 + 64);
  v18 = vld1q_dup_f64(v17);
  do
  {
    *(float64x2_t *)(a2 + v16) = vdivq_f64(*(float64x2_t *)(a2 + v16), v18);
    v16 += 16;
  }
  while (v16 != 64);
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  if (v13 > 0.0)
    sub_1D4DA5E04((uint64_t)a1, a2 + 196);
  sub_1D4D6FE60(a2, a3);
  return v13 > 0.0;
}

void sub_1D4D880DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 488);
  v1 = *(_QWORD *)(a1 + 496);
  if (v1 != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if (v5)
      {
        sub_1D4D87C3C(a1, v5);
        v2 = *(_QWORD *)(a1 + 488);
        v1 = *(_QWORD *)(a1 + 496);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

_QWORD *sub_1D4D8812C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

double sub_1D4D881A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  double result;
  void *__p[2];
  char *v25;

  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  sub_1D4D883D0(__p, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3));
  if (a1[1] != *a1)
  {
    v3 = 0;
    v4 = 0;
    v5 = (char *)__p[1];
    do
    {
      if (v5 >= v25)
      {
        v6 = (char *)__p[0];
        v7 = (v5 - (char *)__p[0]) >> 6;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 58)
          sub_1D4D5DFA8();
        v9 = v25 - (char *)__p[0];
        if ((v25 - (char *)__p[0]) >> 5 > v8)
          v8 = v9 >> 5;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
          v10 = 0x3FFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)sub_1D4D5E4C0((uint64_t)&v25, v10);
          v6 = (char *)__p[0];
          v5 = (char *)__p[1];
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[64 * v7];
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        *(_OWORD *)v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        if (v5 == v6)
        {
          v17 = &v11[64 * v7];
        }
        else
        {
          v13 = &v11[64 * v7];
          do
          {
            v14 = *((_OWORD *)v5 - 4);
            v15 = *((_OWORD *)v5 - 3);
            v16 = *((_OWORD *)v5 - 1);
            v17 = v13 - 64;
            *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
            *((_OWORD *)v13 - 1) = v16;
            *((_OWORD *)v13 - 4) = v14;
            *((_OWORD *)v13 - 3) = v15;
            v5 -= 64;
            v13 -= 64;
          }
          while (v5 != v6);
        }
        v5 = v12 + 64;
        __p[0] = v17;
        __p[1] = v12 + 64;
        v25 = &v11[64 * v10];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *(_OWORD *)v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        v5 += 64;
      }
      __p[1] = v5;
      v18 = *a1 + 56 * v3;
      *((float32x4_t *)v5 - 4) = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18));
      v19 = *(_OWORD *)(v18 + 8);
      v20 = *(_OWORD *)(v18 + 40);
      *((_OWORD *)v5 - 2) = *(_OWORD *)(v18 + 24);
      *((_OWORD *)v5 - 1) = v20;
      *((_OWORD *)v5 - 3) = v19;
      v3 = ++v4;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3) > (unint64_t)v4);
  }
  v21 = (void *)a2[10];
  if (v21)
  {
    a2[11] = v21;
    operator delete(v21);
    a2[10] = 0;
    a2[11] = 0;
    a2[12] = 0;
  }
  result = *(double *)__p;
  *((_OWORD *)a2 + 5) = *(_OWORD *)__p;
  a2[12] = v25;
  return result;
}

void sub_1D4D883AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4D883D0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 6)
  {
    if (a2 >> 58)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5E4C0(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    v9 = &v6[64 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 4);
        v14 = *((_OWORD *)v10 - 3);
        v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4D88474(uint64_t a1)
{
  pthread_setname_np("com.apple.helium-dominantMotionTracker2-analyzer");
  sub_1D4D884A0(a1);
  pthread_exit(0);
}

uint64_t sub_1D4D884A0(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void (**v31)();
  dispatch_object_t object;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t (**v38)();
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  NSObject v48;
  int v49;
  uint64_t (***v50)();
  uint64_t v51;
  int v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t (**v55)();
  int v56;
  uint64_t (***v57)();
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  void **v64;
  _BYTE v65[24];
  _BYTE *v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  _BYTE v69[24];
  _BYTE *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  sub_1D4D889EC(a1);
  v63 = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 137));
  atomic_store(1u, (unsigned __int8 *)(a1 + 136));
  sub_1D4D879B4(a1);
  v3 = *(int **)(a1 + 328);
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 <= 1)
    v4 = 1;
  v56 = *v3;
  v57 = 0;
  v58 = 0;
  v55 = &off_1E988AF40;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = v4;
  v5 = *(_DWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 288);
  v49 = v3[1];
  v48.isa = (Class)&off_1E988AEF8;
  v50 = 0;
  v51 = a1 + 68;
  v52 = v5;
  v53 = v6;
  v54 = vextq_s8(*(int8x16_t *)(a1 + 272), *(int8x16_t *)(a1 + 272), 8uLL);
  v7 = *(_QWORD *)(a1 + 304);
  v39 = v3[2];
  v40 = 0;
  v41 = 0;
  v38 = &off_1E988AEB0;
  v42 = 0;
  v43 = 0;
  v44 = a1 + 68;
  v45 = a1 + 32;
  v46 = v7;
  v47 = 0;
  v8 = v3[3];
  v9 = *(unsigned __int8 *)(a1 + 124);
  sub_1D4D62E6C((uint64_t)v65, a1 + 336);
  sub_1D4D8A73C((uint64_t)v67, v8, a1 + 32, v9 != 0, a1 + 488, (uint64_t)v65);
  v10 = v66;
  if (v66 == v65)
  {
    v11 = 4;
    v10 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v12 = operator new();
  *(_WORD *)v12 = 0;
  *(_BYTE *)(v12 + 2) = 0;
  *(_QWORD *)(v12 + 8) = &unk_1E988B230;
  *(_QWORD *)(v12 + 16) = dispatch_semaphore_create(0);
  *(_QWORD *)(v12 + 24) = dispatch_semaphore_create(0);
  sub_1D4D8B158(&v36, v12);
  v14 = v36;
  v13 = v37;
  if (v37)
  {
    p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 320);
  *(_QWORD *)(a1 + 312) = v14;
  *(_QWORD *)(a1 + 320) = v13;
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  v40 = v67;
  v57 = &v38;
  v50 = &v55;
  v33 = 0;
  v34 = &v63;
  v31 = (void (**)())&off_1E988AE80;
  object = 0;
  v35 = v2;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 368));
  *(_DWORD *)(a1 + 432) = 0;
  pthread_cond_signal((pthread_cond_t *)(a1 + 440));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 368));
  sub_1D4D7978C(v36, &v48, (uint64_t)&v31);
  v18 = *(std::__shared_weak_count **)(a1 + 320);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  v19 = atomic_load((unsigned __int8 *)(a1 + 137));
  if ((v19 & 1) != 0 || (v20 = atomic_load((unsigned __int8 *)(v36 + 1)), (v20 & 1) != 0))
  {
    v64 = (void **)v2;
    sub_1D4D61D18(&v64);
    MEMORY[0x1D826897C](v2, 0x20C40960023A9);
    v2 = 0;
  }
  else
  {
    sub_1D4D880DC(a1);
    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
    {
      v64 = *(void ***)(a1 + 56);
      sub_1D4D61D18(&v64);
      MEMORY[0x1D826897C](v21, 0x20C40960023A9);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  *(_QWORD *)(a1 + 56) = v2;
  atomic_store(0, (unsigned __int8 *)(a1 + 136));
  v31 = off_1E988AC98;
  if (object)
    dispatch_release(object);
  v22 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v67[0] = &off_1E988AD08;
  v25 = v70;
  if (v70 == v69)
  {
    v26 = 4;
    v25 = v69;
    goto LABEL_31;
  }
  if (v70)
  {
    v26 = 5;
LABEL_31:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = v68;
  if (v68)
  {
    v28 = (unint64_t *)&v68->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_1D4D8AFBC((uint64_t)&v38);
  sub_1D4D8B058(&v55);
  return 0;
}

void sub_1D4D888A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_1D4D88B38((_QWORD *)(v35 - 152));
  sub_1D4D8AFBC((uint64_t)&a17);
  sub_1D4D8B058(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D88930(uint64_t a1)
{
  pthread_mutex_t *v2;
  qos_class_t v3;
  uint64_t v4;
  pthread_t v6;
  pthread_attr_t __attr;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)(a1 + 368);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 368));
  *(_DWORD *)(a1 + 432) = 0;
  pthread_attr_init(&__attr);
  v3 = qos_class_self();
  pthread_attr_set_qos_class_np(&__attr, v3, 0);
  v6 = 0;
  pthread_create(&v6, &__attr, (void *(__cdecl *)(void *))sub_1D4D88474, (void *)a1);
  pthread_detach(v6);
  pthread_cond_wait((pthread_cond_t *)(a1 + 440), v2);
  v4 = *(unsigned int *)(a1 + 432);
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t sub_1D4D889EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  void **v8;

  atomic_store(0, (unsigned __int8 *)(a1 + 138));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v8 = *(void ***)(a1 + 56);
    sub_1D4D61D18(&v8);
    MEMORY[0x1D826897C](v2, 0x20C40960023A9);
    *(_QWORD *)(a1 + 56) = 0;
  }
  sub_1D4D757B4(a1 + 144);
  if (*(_QWORD *)(a1 + 272))
  {
    v3 = operator new();
    sub_1D4D7DA2C(v3, 0, 0, 1, 4);
    v4 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v3;
    *(_QWORD *)(a1 + 248) = v3;
    if (v4)
    {
      v5 = sub_1D4D7DA8C(v4);
      MEMORY[0x1D826897C](v5, 0x1080C4008018275);
    }
  }
  v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = 0;
    CFRelease(v6);
  }
  return sub_1D4D75828(a1 + 144);
}

void sub_1D4D88AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1080C4008018275);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D88AF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

_QWORD *sub_1D4D88B00(_QWORD *a1)
{
  NSObject *v2;

  *a1 = off_1E988AC98;
  v2 = a1[1];
  if (v2)
    dispatch_release(v2);
  return a1;
}

_QWORD *sub_1D4D88B38(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E988AD08;
  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1D4D6C1D0((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1D4D88BA8(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  intptr_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v4 = *(std::__shared_weak_count **)(a1 + 320);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 312);
  if (!v9)
    goto LABEL_11;
  sub_1D4D79720(v9);
  if (a3)
  {
    v10 = operator new();
    a2 = 0;
    v11 = 1;
  }
  else
  {
    v10 = operator new();
    v11 = 0;
  }
  *(_BYTE *)(v10 + 8) = v11;
  *(_QWORD *)v10 = &off_1E988A978;
  *(_QWORD *)(v10 + 16) = a2;
  if ((sub_1D4D79714(v9) & 1) == 0)
  {
    *(_QWORD *)(v10 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v12 = 1;
LABEL_12:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v12;
}

void sub_1D4D88CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D6C1D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D4D88CFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unsigned __int8 *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 320);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(unsigned __int8 **)(a1 + 312);
      if (v5)
      {
        atomic_store(1u, v5);
        atomic_store(1u, (unsigned __int8 *)(a1 + 137));
      }
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

float sub_1D4D88D7C(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  char *v7;
  float v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  int v31;
  char *v32;
  char v33;
  const double *v34;
  const double *v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  char v48;
  unsigned __int8 *v49;
  unint64_t v50;
  int v51;
  uint64_t v53;
  _BYTE *v55;
  void *__p;
  char *v57;
  double v58[11];

  v58[9] = *(double *)MEMORY[0x1E0C80C00];
  if (a1[1] == *a1)
    return 0.0;
  v5 = a3;
  v55 = 0;
  __p = 0;
  v57 = 0;
  sub_1D4D8078C((void **)&v55, a4 - a3);
  if (a4 >= v5)
  {
    v7 = (char *)__p;
    do
    {
      v9 = *a1 + 304 * v5;
      v10 = *(_BYTE *)(v9 + 74);
      v11 = *(_BYTE *)(v9 + 75);
      if (v7 >= v57)
      {
        v12 = (v7 - v55) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_1D4D5DFA8();
        v13 = (v57 - v55) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v57 - v55) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_1D4D61150((uint64_t)&v57, v14);
        else
          v15 = 0;
        v16 = &v15[16 * v12];
        *(_QWORD *)v16 = v5;
        v16[8] = v10;
        v16[9] = v11;
        v16[10] = 0;
        v18 = v55;
        v17 = __p;
        v19 = v16;
        if (__p != v55)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = v55;
        }
        v7 = v16 + 16;
        v55 = v19;
        __p = v16 + 16;
        v57 = &v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v7 = v5;
        v7[8] = v10;
        v7[9] = v11;
        v7[10] = 0;
        v7 += 16;
      }
      __p = v7;
      ++v5;
    }
    while (v5 <= a4);
  }
  else
  {
    v7 = (char *)__p;
  }
  v20 = (v7 - v55) >> 4;
  if (v7 != v55)
  {
    v21 = 0;
    v22 = 0;
    v53 = *a1;
    v23 = 1;
    v7 = v55;
    do
    {
      if (v7[16 * v22 + 9])
      {
        v24 = v20 - 1;
        v25 = 1;
        v26 = v22;
        do
        {
          v47 = v26-- < 1;
          if (v47 || v26 > v24)
          {
LABEL_36:
            v7[16 * v22 + 10] = 1;
            goto LABEL_37;
          }
          v27 = v25++;
        }
        while (v7[16 * v26 + 8]);
        v28 = *(_QWORD *)&v7[16 * v26];
        v29 = &v7[v21];
        v30 = v23;
        do
        {
          if (v22 < -1 || v30 > v24)
            goto LABEL_36;
          v31 = v29[24];
          v29 += 16;
          ++v27;
          ++v30;
        }
        while (v31);
        if (v27 >= 4)
        {
          v32 = &v7[16 * v22];
          v33 = 2;
LABEL_43:
          v32[10] = v33;
          goto LABEL_37;
        }
        v34 = (const double *)(v53 + 304 * v28);
        v35 = (const double *)(v53 + 304 * *(_QWORD *)v29);
        v36 = sub_1D4D891F0(v34, v35, a2);
        memset(&v58[1], 0, 24);
        v58[0] = 1.0;
        v58[4] = 1.0;
        memset(&v58[5], 0, 24);
        v58[8] = 1.0;
        v37 = sub_1D4D891F0(v58, v34, a2);
        v38 = sub_1D4D891F0(v58, v35, a2);
        if (v37 > v38)
          v38 = v37;
        if (v36 > v38 * 1.75)
        {
          v32 = &v7[16 * v22];
          v33 = 4;
          goto LABEL_43;
        }
      }
LABEL_37:
      ++v22;
      v7 = v55;
      v20 = ((_BYTE *)__p - v55) >> 4;
      v21 += 16;
      ++v23;
    }
    while (v22 < v20);
  }
  if (v20 >= 0x5A)
    v39 = 90;
  else
    v39 = v20;
  if (v39)
  {
    v40 = 0;
    v41 = v7 + 10;
    v42 = v39;
    do
    {
      if (*(v41 - 2))
      {
        v43 = (v40 + 1);
        if ((int)v40 >= 2)
          *v41 = 5;
      }
      else
      {
        v43 = v40;
      }
      v41 += 16;
      v40 = v43;
      --v42;
    }
    while (v42);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  if (v20 >= 0x5B)
  {
    v44 = v20 - v39;
    v45 = 16 * v39;
    v46 = v7;
    do
    {
      LODWORD(v43) = v43 - (v46[8] != 0);
      if (v46[v45 + 8])
      {
        LODWORD(v43) = v43 + 1;
        v47 = (int)v43 < 3;
      }
      else
      {
        v47 = 1;
      }
      if (!v47)
        v46[v45 + 10] = 5;
      v46 += 16;
      --v44;
    }
    while (v44);
  }
  if (v20 >= 2)
  {
    v48 = 0;
    v49 = (unsigned __int8 *)(v7 + 26);
    v50 = v20 - 1;
    do
    {
      v51 = *v49;
      v49 += 16;
      v48 |= v51 != 0;
      --v50;
    }
    while (v50);
    if ((v48 & 1) != 0)
      v8 = 0.0;
    else
      v8 = 1.0;
    goto LABEL_71;
  }
  v8 = 1.0;
  if (v7)
  {
LABEL_71:
    __p = v7;
    operator delete(v7);
  }
  return v8;
}

void sub_1D4D891CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D4D891F0(const double *a1, const double *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  const double *v5;
  const double *v6;
  const double *v7;
  const double *v8;
  const double *v9;
  const double *v10;
  const double *v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  const double *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double *v31;
  uint64_t v32;
  const double *v33;
  const double *v34;
  const double *v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  const double *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  const double *v50;
  float64x2_t v51;
  float64x2_t v52;
  double *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  float v58;
  _BYTE v60[192];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  __int128 v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  float64x2x3_t v73;
  float64x2x3_t v74;

  v3 = 0;
  v72 = *MEMORY[0x1E0C80C00];
  v4 = HIDWORD(a3);
  v61 = 0;
  v62 = 0;
  v63 = 0x3FF0000000000000;
  v64 = (double)(int)a3;
  v65 = xmmword_1D4DB16C0;
  v66 = 0;
  v67 = (double)SHIDWORD(a3);
  v68 = 0x3FF0000000000000;
  v69 = (double)(int)a3;
  v70 = (double)SHIDWORD(a3);
  v71 = 0x3FF0000000000000;
  v5 = a1 + 8;
  v6 = a1 + 7;
  v7 = a1 + 6;
  v8 = a1 + 5;
  v9 = a1 + 4;
  v10 = a1 + 3;
  v11 = a1 + 2;
  v13 = vld1q_dup_f64(a1);
  v12 = a1 + 1;
  v14 = vld1q_dup_f64(v12);
  v15 = vld1q_dup_f64(v11);
  v16 = vld1q_dup_f64(v9);
  v17 = vld1q_dup_f64(v10);
  v18 = vld1q_dup_f64(v8);
  v19 = vld1q_dup_f64(v6);
  v20 = vld1q_dup_f64(v7);
  v21 = vld1q_dup_f64(v5);
  __asm { FMOV            V2.2D, #1.0 }
  do
  {
    v27 = (const double *)((char *)&v61 + v3);
    v74 = vld3q_f64(v27);
    v28 = vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[1], v19), v74.val[0], v20), v74.val[2], v21);
    v29 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14, v74.val[1]), v74.val[0], v13), v74.val[2], v15), v28);
    v30 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[1], v16), v74.val[0], v17), v74.val[2], v18), v28);
    v31 = (double *)&v60[v3 + 96];
    vst3q_f64(v31, *(float64x2x3_t *)(&_Q2 - 2));
    v3 += 48;
  }
  while (v3 != 96);
  v32 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0x3FF0000000000000;
  v64 = (double)(int)a3;
  v65 = xmmword_1D4DB16C0;
  v66 = 0;
  v67 = (double)SHIDWORD(a3);
  v68 = 0x3FF0000000000000;
  v69 = (double)(int)a3;
  v70 = (double)SHIDWORD(a3);
  v71 = 0x3FF0000000000000;
  v33 = a2 + 8;
  v34 = a2 + 7;
  v35 = a2 + 6;
  v36 = a2 + 5;
  v37 = a2 + 4;
  v38 = a2 + 3;
  v39 = a2 + 2;
  v41 = vld1q_dup_f64(a2);
  v40 = a2 + 1;
  v42 = vld1q_dup_f64(v40);
  v43 = vld1q_dup_f64(v39);
  v44 = vld1q_dup_f64(v37);
  v45 = vld1q_dup_f64(v38);
  v46 = vld1q_dup_f64(v36);
  v47 = vld1q_dup_f64(v34);
  v48 = vld1q_dup_f64(v35);
  v49 = vld1q_dup_f64(v33);
  do
  {
    v50 = (const double *)((char *)&v61 + v32);
    v73 = vld3q_f64(v50);
    v51 = vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[1], v44), v73.val[0], v45), v73.val[2], v46);
    v52 = vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[1], v47), v73.val[0], v48), v73.val[2], v49);
    v73.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42, v73.val[1]), v73.val[0], v41), v73.val[2], v43), v52);
    v73.val[1] = vdivq_f64(v51, v52);
    v73.val[2] = _Q2;
    v53 = (double *)&v60[v32];
    vst3q_f64(v53, v73);
    v32 += 48;
  }
  while (v32 != 96);
  v54 = 0;
  if (SHIDWORD(a3) <= (int)a3)
    LODWORD(v4) = a3;
  v55 = (double)(int)v4;
  v56 = 0.0;
  do
  {
    v57 = (*(double *)&v60[v54 + 104] - *(double *)&v60[v54 + 8]) / v55;
    v56 = v56
        + v57 * v57
        + (*(double *)&v60[v54 + 96] - *(double *)&v60[v54])
        / v55
        * ((*(double *)&v60[v54 + 96] - *(double *)&v60[v54])
         / v55);
    v54 += 24;
  }
  while (v54 != 96);
  v58 = v56;
  return sqrtf(v58);
}

void sub_1D4D89430(const double *a1, const double *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v6;
  const double *v7;
  const double *v8;
  const double *v9;
  const double *v10;
  const double *v11;
  const double *v12;
  const double *v13;
  const double *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  const double *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double *v33;
  uint64_t v34;
  const double *v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  const double *v40;
  const double *v41;
  const double *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  double *v55;
  uint64_t v56;
  double v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  const double *v69;
  float64x2_t v70;
  _BYTE v71[416];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  __int128 v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  float v83[9];
  _BYTE v84[32];
  _BYTE v85[32];
  uint64_t v86;
  float64x2x2_t v87;
  float64x2x3_t v88;
  float64x2x3_t v89;

  v6 = 0;
  v86 = *MEMORY[0x1E0C80C00];
  v72 = 0;
  v73 = 0;
  v74 = 0x3FF0000000000000;
  v75 = (double)(int)a4;
  v76 = xmmword_1D4DB16C0;
  v77 = 0;
  v78 = (double)SHIDWORD(a4);
  v79 = 0x3FF0000000000000;
  v80 = (double)(int)a4;
  v81 = (double)SHIDWORD(a4);
  v82 = 0x3FF0000000000000;
  v7 = a1 + 8;
  v8 = a1 + 7;
  v9 = a1 + 6;
  v10 = a1 + 5;
  v11 = a1 + 4;
  v12 = a1 + 3;
  v13 = a1 + 2;
  v15 = vld1q_dup_f64(a1);
  v14 = a1 + 1;
  v16 = vld1q_dup_f64(v14);
  v17 = vld1q_dup_f64(v13);
  v18 = vld1q_dup_f64(v11);
  v19 = vld1q_dup_f64(v12);
  v20 = vld1q_dup_f64(v10);
  v21 = vld1q_dup_f64(v8);
  v22 = vld1q_dup_f64(v9);
  v23 = vld1q_dup_f64(v7);
  __asm { FMOV            V5.2D, #1.0 }
  do
  {
    v29 = (const double *)((char *)&v72 + v6);
    v89 = vld3q_f64(v29);
    v30 = vmlaq_f64(vmlaq_f64(vmulq_f64(v21, v89.val[1]), v89.val[0], v22), v89.val[2], v23);
    v31 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16, v89.val[1]), v89.val[0], v15), v89.val[2], v17), v30);
    v32 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v18, v89.val[1]), v89.val[0], v19), v89.val[2], v20), v30);
    v33 = (double *)&v71[v6 + 192];
    vst3q_f64(v33, *(float64x2x3_t *)(&_Q5 - 2));
    v6 += 48;
  }
  while (v6 != 96);
  v34 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0x3FF0000000000000;
  v75 = (double)(int)a4;
  v76 = xmmword_1D4DB16C0;
  v77 = 0;
  v78 = (double)SHIDWORD(a4);
  v79 = 0x3FF0000000000000;
  v80 = (double)(int)a4;
  v81 = (double)SHIDWORD(a4);
  v82 = 0x3FF0000000000000;
  v35 = a2 + 8;
  v36 = a2 + 7;
  v37 = a2 + 6;
  v38 = a2 + 5;
  v39 = a2 + 4;
  v40 = a2 + 3;
  v41 = a2 + 2;
  v43 = vld1q_dup_f64(a2);
  v42 = a2 + 1;
  v44 = vld1q_dup_f64(v42);
  v45 = vld1q_dup_f64(v41);
  v46 = vld1q_dup_f64(v39);
  v47 = vld1q_dup_f64(v40);
  v48 = vld1q_dup_f64(v38);
  v49 = vld1q_dup_f64(v36);
  v50 = vld1q_dup_f64(v37);
  v51 = vld1q_dup_f64(v35);
  do
  {
    v52 = (const double *)((char *)&v72 + v34);
    v88 = vld3q_f64(v52);
    v53 = vmlaq_f64(vmlaq_f64(vmulq_f64(v46, v88.val[1]), v88.val[0], v47), v88.val[2], v48);
    v54 = vmlaq_f64(vmlaq_f64(vmulq_f64(v49, v88.val[1]), v88.val[0], v50), v88.val[2], v51);
    v88.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44, v88.val[1]), v88.val[0], v43), v88.val[2], v45), v54);
    v88.val[1] = vdivq_f64(v53, v54);
    v88.val[2] = _Q5;
    v55 = (double *)&v71[v34 + 96];
    vst3q_f64(v55, v88);
    v34 += 48;
  }
  while (v34 != 96);
  v56 = 0;
  v57 = a5;
  v58 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((float)(1.0 - a5)), 0);
  do
  {
    *(float64x2_t *)&v71[v56] = vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v71[v56 + 96], v57), v58, *(float64x2_t *)&v71[v56 + 192]);
    v56 += 24;
  }
  while (v56 != 96);
  v59 = 0;
  v60 = 0;
  v72 = 0;
  v73 = 0;
  v75 = (double)(int)a4;
  *(_QWORD *)&v76 = 0;
  v77 = 0;
  v78 = (double)SHIDWORD(a4);
  v80 = (double)(int)a4;
  v81 = (double)SHIDWORD(a4);
  do
  {
    *(_QWORD *)&v87.val[0].f64[0] = *(uint64_t *)((char *)&v72 + v60);
    v87.val[0].f64[1] = *(double *)((char *)&v75 + v60);
    *(_QWORD *)&v87.val[1].f64[0] = *(uint64_t *)((char *)&v72 + v60 + 8);
    v87.val[1].f64[1] = *(float64_t *)((char *)&v76 + v60);
    v61 = (double *)&v71[v59 + 352];
    vst2q_f64(v61, v87);
    v87.val[0].f64[0] = *(float64_t *)&v71[v60];
    v87.val[0].f64[1] = *(float64_t *)&v71[v60 + 24];
    v87.val[1].f64[0] = *(float64_t *)&v71[v60 + 8];
    v87.val[1].f64[1] = *(float64_t *)&v71[v60 + 32];
    v62 = (double *)&v71[v59 + 288];
    vst2q_f64(v62, v87);
    v60 += 48;
    v59 += 32;
  }
  while (v59 != 64);
  v63 = sub_1D4D84654(4u);
  v64 = (_QWORD *)v63;
  v65 = 0;
  v66 = 0;
  do
  {
    *(float32x4_t *)&v85[v65] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v71[v66 + 352]), *(float64x2_t *)&v71[v66 + 368]);
    *(float32x4_t *)&v84[v65] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v71[v66 + 288]), *(float64x2_t *)&v71[v66 + 304]);
    v66 += 32;
    v65 += 16;
  }
  while (v65 != 32);
  sub_1D4D8BBF4(v63, (uint64_t)v85, (uint64_t)v84, 4u);
  for (i = 0; i != 9; ++i)
    *(double *)(a3 + 8 * i) = v83[i];
  v68 = 0;
  v69 = (const double *)(a3 + 64);
  v70 = vld1q_dup_f64(v69);
  do
  {
    *(float64x2_t *)(a3 + v68) = vdivq_f64(*(float64x2_t *)(a3 + v68), v70);
    v68 += 16;
  }
  while (v68 != 64);
  *(_QWORD *)(a3 + 64) = 0x3FF0000000000000;
  sub_1D4D847DC(v64);
}

void sub_1D4D897B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = a1[1] - *a1;
  if (v2)
  {
    v4 = v2 / 304;
    if (v4 <= 1)
      v4 = 1;
    v5 = (_BYTE *)(*a1 + 72);
    do
    {
      if (v5[3])
        *v5 = 0;
      v5 += 304;
      --v4;
    }
    while (v4);
    v6 = *a1;
    v7 = a1[1];
    if (v7 != *a1)
    {
      v8 = 0;
      v9 = 0x86BCA1AF286BCA1BLL * ((v7 - *a1) >> 4);
      v10 = -232;
      v11 = 377;
      do
      {
        v12 = v6 + 304 * v8;
        if (!*(_BYTE *)(v12 + 72))
        {
          v13 = v6 + 304 * v8;
          v15 = *(unsigned __int8 *)(v13 + 73);
          v14 = (_BYTE *)(v13 + 73);
          if (!v15)
          {
            v16 = (unsigned __int8 *)(v6 + v10);
            v17 = v8;
            while (v17)
            {
              --v17;
              v18 = *v16;
              v19 = v16[1];
              v16 -= 304;
              if (v18)
                v20 = v19 == 0;
              else
                v20 = 0;
              if (v20)
                goto LABEL_21;
            }
            v17 = v8;
LABEL_21:
            v21 = v9 - 1;
            v22 = (unsigned __int8 *)(v6 + v11);
            v23 = v8;
            while (v21 != v23)
            {
              ++v23;
              v24 = *(v22 - 1);
              v25 = *v22;
              v22 += 304;
              if (v24)
                v26 = v25 == 0;
              else
                v26 = 0;
              if (v26)
                goto LABEL_30;
            }
            v23 = v8;
LABEL_30:
            if (v17 == v8)
            {
              v17 = 0;
              v45 = 0uLL;
              v44 = 0x3FF0000000000000uLL;
              v46 = 0x3FF0000000000000uLL;
              v47 = 0uLL;
              v48 = 0x3FF0000000000000;
            }
            else
            {
              v27 = (__int128 *)(v6 + 304 * v17);
              v44 = *v27;
              v28 = v27[1];
              v29 = v27[2];
              v30 = v27[3];
              v48 = *((_QWORD *)v27 + 8);
              v46 = v29;
              v47 = v30;
              v45 = v28;
            }
            if (v23 == v8)
            {
              v40 = 0uLL;
              v39 = 0x3FF0000000000000uLL;
              v41 = 0x3FF0000000000000uLL;
              v42 = 0uLL;
              v43 = 0x3FF0000000000000;
            }
            else
            {
              v31 = (__int128 *)(v6 + 304 * v23);
              v39 = *v31;
              v32 = v31[1];
              v33 = v31[2];
              v34 = v31[3];
              v43 = *((_QWORD *)v31 + 8);
              v41 = v33;
              v42 = v34;
              v40 = v32;
              v21 = v23;
            }
            v35 = v8 - v17;
            v36 = v21 - v17;
            v37 = (float)v36;
            if (!v36)
              v37 = 1.0;
            sub_1D4D89430((const double *)&v44, (const double *)&v39, v12, a2, (float)v35 / v37);
            *v14 = 1;
            v6 = *a1;
            v7 = a1[1];
          }
        }
        ++v8;
        v9 = 0x86BCA1AF286BCA1BLL * ((v7 - v6) >> 4);
        v10 += 304;
        v11 += 304;
      }
      while (v9 > v8);
    }
  }
}

void sub_1D4D89A4C(_QWORD *a1)
{
  sub_1D4D8B058(a1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D89A70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

char *sub_1D4D89A78()
{
  return aComAppleAcgIne_1;
}

uint64_t sub_1D4D89A84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1D4D89A8C(uint64_t a1, void *lpsrc, unsigned __int8 **a3)
{
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;

  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E988A520, (const struct __class_type_info *)&unk_1E988A6A0, 0);
  v6 = v5;
  if (*(_BYTE *)(a1 + 48))
  {
LABEL_48:
    v42 = operator new();
    *(_BYTE *)(v42 + 8) = v6[8];
    *(_QWORD *)v42 = &off_1E988ACE8;
    *(_QWORD *)(v42 + 16) = *((_QWORD *)v6 + 2);
    if (((*((uint64_t (**)(unsigned __int8 **, uint64_t))*a3 + 2))(a3, v42) & 1) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    goto LABEL_50;
  }
  if (v5[8])
  {
    v7 = *(char **)(a1 + 32);
    goto LABEL_33;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)(a1 + 32);
  v9 = (void **)(a1 + 24);
  v11 = ((uint64_t)v10 - v8) >> 3;
  v12 = *(int *)(a1 + 52) - 1;
  if (v11 != v12)
  {
    if (v11 >= v12)
      abort();
    v14 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v10 >= v14)
    {
      if ((v11 + 1) >> 61)
        goto LABEL_59;
      v20 = v14 - v8;
      v21 = v20 >> 2;
      if (v20 >> 2 <= v11 + 1)
        v21 = v11 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)sub_1D4D5E2CC(a1 + 40, v22);
      else
        v23 = 0;
      v44 = &v23[8 * v11];
      v45 = &v23[8 * v22];
      *(_QWORD *)v44 = *((_QWORD *)v6 + 2);
      v15 = v44 + 8;
      v47 = *(char **)(a1 + 24);
      v46 = *(char **)(a1 + 32);
      if (v46 != v47)
      {
        do
        {
          v48 = *((_QWORD *)v46 - 1);
          v46 -= 8;
          *((_QWORD *)v44 - 1) = v48;
          v44 -= 8;
        }
        while (v46 != v47);
        v46 = (char *)*v9;
      }
      *(_QWORD *)(a1 + 24) = v44;
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v10 = *((_QWORD *)v5 + 2);
      v15 = v10 + 1;
    }
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_50;
  }
  v13 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v10 >= v13)
  {
    if (!((v11 + 1) >> 61))
    {
      v16 = v13 - v8;
      v17 = v16 >> 2;
      if (v16 >> 2 <= v11 + 1)
        v17 = v11 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)sub_1D4D5E2CC(a1 + 40, v18);
      else
        v19 = 0;
      v24 = &v19[8 * v11];
      v25 = &v19[8 * v18];
      *(_QWORD *)v24 = *((_QWORD *)v6 + 2);
      v7 = v24 + 8;
      v27 = *(char **)(a1 + 24);
      v26 = *(char **)(a1 + 32);
      if (v26 != v27)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v24 - 1) = v28;
          v24 -= 8;
        }
        while (v26 != v27);
        v26 = (char *)*v9;
      }
      *(_QWORD *)(a1 + 24) = v24;
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v25;
      if (v26)
        operator delete(v26);
      goto LABEL_32;
    }
LABEL_59:
    sub_1D4D5DFA8();
  }
  *v10 = *((_QWORD *)v5 + 2);
  v7 = (char *)(v10 + 1);
LABEL_32:
  *(_QWORD *)(a1 + 32) = v7;
LABEL_33:
  v29 = *(char **)(a1 + 24);
  if ((unint64_t)(v7 - v29) >= 9)
  {
    v30 = -1;
    v31 = 1;
    while (1)
    {
      v32 = atomic_load(a3[3]);
      if ((v32 & 1) != 0)
        break;
      v33 = operator new();
      *(_BYTE *)(v33 + 8) = 0;
      *(_QWORD *)v33 = &off_1E988ACE8;
      *(_QWORD *)(v33 + 16) = 0;
      v34 = operator new();
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v30 + ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3)));
      v36 = sub_1D4D5E300(*(_QWORD *)v35);
      sub_1D4D5EF04((_QWORD *)v34, v36);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
      v37 = *(_OWORD *)(v35 + 24);
      *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
      *(_OWORD *)(v34 + 24) = v37;
      *(_QWORD *)(v33 + 16) = v34;
      *(_BYTE *)(*(_QWORD *)v34 + 52) = 1;
      if (((*((uint64_t (**)(unsigned __int8 **, uint64_t))*a3 + 2))(a3, v33) & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      ++v31;
      v29 = *(char **)(a1 + 24);
      v7 = *(char **)(a1 + 32);
      --v30;
      if (v31 >= (v7 - v29) >> 3)
        goto LABEL_41;
    }
    v29 = *(char **)(a1 + 24);
    v7 = *(char **)(a1 + 32);
  }
LABEL_41:
  if (v7 != v29)
  {
    v38 = 0;
    do
    {
      v39 = atomic_load(a3[3]);
      if ((v39 & 1) != 0)
        break;
      v40 = operator new();
      *(_BYTE *)(v40 + 8) = 0;
      *(_QWORD *)v40 = &off_1E988ACE8;
      *(_QWORD *)(v40 + 16) = 0;
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v38);
      *(_QWORD *)(v40 + 16) = v41;
      *(_BYTE *)(*(_QWORD *)v41 + 52) = v38 == 0;
      if (((*((uint64_t (**)(unsigned __int8 **, uint64_t))*a3 + 2))(a3, v40) & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      ++v38;
    }
    while (v38 < (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  }
  *(_BYTE *)(a1 + 48) = 1;
  if (v6[8])
    goto LABEL_48;
LABEL_50:
  *((_QWORD *)v6 + 2) = 0;
  (*((void (**)(unsigned __int8 **))*a3 + 3))(a3);
  return 1;
}

void sub_1D4D89EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x1020C401705F15ELL);
  _Unwind_Resume(a1);
}

void sub_1D4D89ED0(_QWORD *a1)
{
  sub_1D4D89EF4(a1);
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D89EF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E988ACE8;
  v2 = a1[2];
  if (v2)
  {
    v3 = sub_1D4D6C1D0(v2);
    MEMORY[0x1D826897C](v3, 0x1020C401705F15ELL);
  }
  return a1;
}

void sub_1D4D89F40()
{
  JUMPOUT(0x1D826897CLL);
}

char *sub_1D4D89F54()
{
  return aComAppleAcgIne_2;
}

uint64_t sub_1D4D89F60(uint64_t a1, void *lpsrc, unsigned __int8 **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;
  _QWORD *v10;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E988A520, (const struct __class_type_info *)&unk_1E988A530, 0);
    if (v5)
    {
      v6 = v5;
      v7 = operator new();
      v8 = *((unsigned __int8 *)v6 + 8);
      *(_BYTE *)(v7 + 8) = v8;
      *(_QWORD *)v7 = &off_1E988ACE8;
      *(_QWORD *)(v7 + 16) = 0;
      if (!v8)
      {
        v9 = atomic_load(a3[3]);
        if ((v9 & 1) == 0)
        {
          v10 = (_QWORD *)operator new();
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          sub_1D4D8A090((_QWORD *)a1, (uint64_t)v10, v6[2], *(unsigned int **)(a1 + 24), 1, 0, *(float *)(a1 + 32));
          *(_BYTE *)(*v10 + 52) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          v6[2] = 0;
        }
      }
      if (((*((uint64_t (**)(unsigned __int8 **, uint64_t))*a3 + 2))(a3, v7) & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  (*((void (**)(unsigned __int8 **))*a3 + 3))(a3);
  return 1;
}

void sub_1D4D8A090(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5, uint64_t a6, float a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a1[5];
  v11 = a1[6];
  v22 = a6;
  v23 = v10;
  v21 = v11;
  sub_1D4DA5E24(*(_QWORD *)(a3 + 8), *(unsigned __int8 *)(a3 + 1), a4, a1[7], (uint64_t *)&v19, a7);
  v12 = v19;
  *v19 = *(_QWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)((char *)v12 + 44) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)((char *)v12 + 28) = v13;
  sub_1D4D8812C((_QWORD *)a2, (uint64_t *)&v19);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 24) = v14;
  if (a3 && a5)
  {
    v15 = sub_1D4D756EC(a3);
    MEMORY[0x1D826897C](v15, 0x1020C40A6EEA1E9);
  }
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1D4D8A198(uint64_t a1)
{
  sub_1D4D8AFBC(a1);
  JUMPOUT(0x1D826897CLL);
}

char *sub_1D4D8A1BC()
{
  return aComAppleAcgIne_3;
}

uint64_t sub_1D4D8A1C8(uint64_t a1, void *lpsrc, unsigned __int8 **a3)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t ***v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  if (!lpsrc)
    goto LABEL_44;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E988A520, (const struct __class_type_info *)&unk_1E988A6A0, 0);
  if (!v5)
    goto LABEL_44;
  v6 = v5;
  if (v5[8])
  {
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = v6[8];
    *(_QWORD *)v7 = &off_1E988AAB8;
    *(_QWORD *)(v7 + 16) = 0;
LABEL_5:
    if (((*((uint64_t (**)(unsigned __int8 **, uint64_t))*a3 + 2))(a3, v7) & 1) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_44;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (uint64_t ***)(a1 + 24);
  v10 = *(_QWORD **)(a1 + 32);
  if ((unint64_t)v10 >= v8)
  {
    v12 = (uint64_t **)v10 - *v9;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_1D4D5DFA8();
    v13 = v8 - (_QWORD)*v9;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_1D4D5E2CC(a1 + 40, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = *((_QWORD *)v6 + 2);
    v11 = v17 + 8;
    v20 = *(uint64_t ***)(a1 + 24);
    v19 = *(uint64_t ***)(a1 + 32);
    if (v19 != v20)
    {
      do
      {
        v21 = (uint64_t)*--v19;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = *v9;
    }
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v10 = *((_QWORD *)v5 + 2);
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 32) = v11;
  *((_QWORD *)v6 + 2) = 0;
  if ((unint64_t)v11 - *(_QWORD *)(a1 + 24) >= 9)
  {
    v22 = atomic_load(a3[3]);
    if ((v22 & 1) == 0)
    {
      v23 = *v9;
      v25 = **v9;
      v24 = v23[1];
      v27 = *v24;
      v26 = (std::__shared_weak_count *)v24[1];
      v47 = v27;
      v48 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v30 = v25[1];
      v45 = *v25;
      v46 = (std::__shared_weak_count *)v30;
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = sub_1D4D8A4F8(a1, (uint64_t)&v47, &v45);
      v34 = v46;
      if (v46)
      {
        v35 = (unint64_t *)&v46->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v48;
      if (v48)
      {
        v38 = (unint64_t *)&v48->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v41 = *(_QWORD *)(a1 + 24);
      v40 = *(_QWORD *)(a1 + 32);
      v42 = v40 - (v41 + 8);
      if (v40 != v41 + 8)
        memmove(*(void **)(a1 + 24), (const void *)(v41 + 8), v40 - (v41 + 8));
      *(_QWORD *)(a1 + 32) = v41 + v42;
      v43 = sub_1D4D6C1D0((uint64_t)v25);
      MEMORY[0x1D826897C](v43, 0x1020C401705F15ELL);
      v7 = operator new();
      *(_BYTE *)(v7 + 8) = v6[8];
      *(_QWORD *)v7 = &off_1E988AAB8;
      *(_QWORD *)(v7 + 16) = 0;
      sub_1D4DA4B30(v33);
      *(_QWORD *)(v7 + 16) = v33;
      goto LABEL_5;
    }
  }
LABEL_44:
  (*((void (**)(unsigned __int8 **))*a3 + 3))(a3);
  return 1;
}

void sub_1D4D8A4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D4D6C1D0((uint64_t)&a9);
  sub_1D4D6C1D0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D8A4F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v22 = *(_QWORD **)a2;
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a3[1];
  v20 = *a3;
  v21 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_1D4DA7570((uint64_t *)&v22, &v20, *(_QWORD *)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 48) + 28), *(float *)(*(_QWORD *)(a1 + 48) + 16), *(float *)(*(_QWORD *)(a1 + 48) + 24), *(float *)(*(_QWORD *)(a1 + 48) + 20), *(float *)(*(_QWORD *)(a1 + 48) + 40));
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v11 + 116) = **(_QWORD **)(a1 + 56);
  *(_QWORD *)(v11 + 128) = **(_QWORD **)a2;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v11 + 100) = *(_QWORD *)(v18 + 44);
  *(_DWORD *)(v11 + 108) = *(_DWORD *)(v18 + 52);
  return v11;
}

void sub_1D4D8A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D4D6C1D0((uint64_t)&a9);
  sub_1D4D6C1D0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D8A64C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_1E988AAB8;
  v4 = (_QWORD *)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1D4D8A6D4((uint64_t)v2, v3);
  return a1;
}

void sub_1D4D8A688(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E988AAB8;
  v3 = (_QWORD *)a1[2];
  v1 = a1 + 2;
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_1D4D8A6D4((uint64_t)v1, v2);
  JUMPOUT(0x1D826897CLL);
}

void sub_1D4D8A6D4(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[47];
    if (v3)
    {
      a2[48] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[44];
    if (v4)
    {
      a2[45] = v4;
      operator delete(v4);
    }
    sub_1D4D6C1D0((uint64_t)(a2 + 40));
    sub_1D4D6C1D0((uint64_t)(a2 + 38));
    JUMPOUT(0x1D826897CLL);
  }
}

uint64_t sub_1D4D8A73C(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = &off_1E988AD08;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a5;
  sub_1D4D62E6C(a1 + 64, a6);
  return a1;
}

void sub_1D4D8A790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4D6C1D0(v1);
  _Unwind_Resume(a1);
}

void sub_1D4D8A7A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E988AD08;
  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      sub_1D4D6C1D0((uint64_t)(a1 + 5));
      JUMPOUT(0x1D826897CLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

char *sub_1D4D8A818()
{
  return aComAppleAcgIne_4;
}

BOOL sub_1D4D8A824(uint64_t a1, void *lpsrc, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E988A520, (const struct __class_type_info *)&unk_1E988A580, 0);
    if (v5)
    {
      v6 = v5;
      v7 = operator new();
      *(_BYTE *)(v7 + 8) = *((_BYTE *)v6 + 8);
      *(_QWORD *)v7 = &off_1E988AC08;
      sub_1D4D5F924(v7 + 16, 0, 0);
      if (*((_BYTE *)v6 + 8))
      {
        v9 = (uint64_t *)(a1 + 40);
        v8 = *(_QWORD *)(a1 + 40);
        if (v8)
        {
          if (*(_QWORD *)(a1 + 56) && (!*(_BYTE *)(v8 + 52) || !*(_QWORD *)v8))
          {
            v10 = *(std::__shared_weak_count **)(a1 + 48);
            v46 = *(_QWORD *)(a1 + 40);
            v47 = v10;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldxr(p_shared_owners);
              while (__stxr(v12 + 1, p_shared_owners));
              v8 = *v9;
            }
            sub_1D4D8AD08(a1, &v46, *(_QWORD *)v8 == 0, 0);
            v13 = v47;
            if (v47)
            {
              v14 = (unint64_t *)&v47->__shared_owners_;
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
          }
          v50 = 0uLL;
          sub_1D4D5E3A4((uint64_t)v9, &v50);
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
          if (*((_QWORD *)&v50 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7) & 1) != 0)
        {
          v19 = 1;
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v19 = 0;
        }
LABEL_67:
        v20 = v19 != 0;
        goto LABEL_68;
      }
      sub_1D4D87F6C(*((_QWORD **)v6 + 2), v7 + 16, **(_QWORD **)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
      if ((sub_1D4DA5DF8(*((_QWORD *)v6 + 2)) & 1) != 0 || *(_BYTE *)(a1 + 33))
      {
        v19 = 1;
      }
      else
      {
        v43 = operator new();
        *(_BYTE *)(v43 + 8) = 0;
        *(_QWORD *)v43 = &off_1E988AC08;
        sub_1D4D5F924(v43 + 16, 0, 0);
        *(_BYTE *)(v43 + 88) = 1;
        v44 = *(_QWORD *)(*((_QWORD *)v6 + 2) + 320);
        *(_QWORD *)(v43 + 120) = *(_QWORD *)v44;
        *(_DWORD *)(v43 + 184) = 1065351538;
        v45 = *(_OWORD *)(v44 + 28);
        *(_QWORD *)(v43 + 144) = *(_QWORD *)(v44 + 44);
        *(_OWORD *)(v43 + 128) = v45;
        v19 = 1;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v43) & 1) == 0)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          v19 = 0;
        }
        *(_BYTE *)(a1 + 33) = 1;
      }
      v21 = *(_QWORD *)(a1 + 88);
      if (v21 && (*(_BYTE *)(a1 + 33) || !*(_QWORD *)(v7 + 120)))
      {
        *(_QWORD *)&v50 = v7 + 16;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 48))(v21, &v50);
      }
      v22 = (_QWORD *)*((_QWORD *)v6 + 2);
      v23 = v22[41];
      *(_QWORD *)&v50 = v22[40];
      *((_QWORD *)&v50 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v22 = (_QWORD *)*((_QWORD *)v6 + 2);
      }
      v27 = v22[38];
      v26 = v22[39];
      *(_QWORD *)&v49 = v27;
      *((_QWORD *)&v49 + 1) = v26;
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      sub_1D4D5E3A4(a1 + 40, &v49);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (*(_QWORD *)(a1 + 56))
      {
        v33 = (_QWORD *)v50;
        if (!*(_BYTE *)(v50 + 52) || !*(_QWORD *)v50)
        {
          v48 = v50;
          if (*((_QWORD *)&v50 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          sub_1D4D8AD08(a1, (uint64_t *)&v48, *v33 == 0, 0);
          v36 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
          if (*((_QWORD *)&v48 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }
      }
      if (*(_BYTE *)(a1 + 33))
      {
        if (!v19)
        {
LABEL_62:
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
          if (*((_QWORD *)&v50 + 1))
          {
            v40 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          goto LABEL_67;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7) & 1) != 0)
        {
          v19 = 1;
          goto LABEL_62;
        }
        v19 = 0;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      goto LABEL_62;
    }
  }
  v20 = 1;
LABEL_68:
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  return v20;
}

void sub_1D4D8ACAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x10A1C4049012C49);
  _Unwind_Resume(a1);
}

void sub_1D4D8AD08(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];

  v4 = *(_QWORD **)(a1 + 56);
  v5 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1D4D87A08(v4, v10, a4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1D4D8AD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D6C1D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D8ADAC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E988AC08;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D4D8ADE8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E988AC08;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D8AE34()
{
  return 0;
}

void sub_1D4D8AE3C(_QWORD *a1)
{
  NSObject *v1;

  *a1 = off_1E988AC98;
  v1 = a1[1];
  if (v1)
    dispatch_release(v1);
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D8AE84(uint64_t a1, void *lpsrc)
{
  char *v4;
  BOOL v5;
  uint64_t *v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if (lpsrc)
  {
    v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E988A520, (const struct __class_type_info *)&unk_1E988A618, 0);
    if (*((_BYTE *)lpsrc + 8))
      v5 = 1;
    else
      v5 = v4 == 0;
    if (!v5)
    {
      v6 = *(uint64_t **)(a1 + 32);
      v7 = v4 + 16;
      v8 = v6[1];
      if (v8 >= v6[2])
      {
        v21 = sub_1D4D7EE1C(v6, (uint64_t)v7);
      }
      else
      {
        *(_OWORD *)v8 = *v7;
        v9 = *((_OWORD *)v4 + 2);
        v10 = *((_OWORD *)v4 + 3);
        v11 = *((_OWORD *)v4 + 4);
        *(_OWORD *)(v8 + 60) = *(_OWORD *)(v4 + 76);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = v11;
        *(_OWORD *)(v8 + 16) = v9;
        *(_QWORD *)(v8 + 88) = 0;
        *(_QWORD *)(v8 + 96) = 0;
        *(_QWORD *)(v8 + 80) = 0;
        *(_OWORD *)(v8 + 80) = *((_OWORD *)v4 + 6);
        *(_QWORD *)(v8 + 96) = *((_QWORD *)v4 + 14);
        *((_QWORD *)v4 + 13) = 0;
        *((_QWORD *)v4 + 14) = 0;
        *((_QWORD *)v4 + 12) = 0;
        v12 = *(_OWORD *)(v4 + 152);
        v13 = *(_OWORD *)(v4 + 168);
        v14 = *(_OWORD *)(v4 + 184);
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v4 + 136);
        *(_OWORD *)(v8 + 168) = v14;
        *(_OWORD *)(v8 + 152) = v13;
        *(_OWORD *)(v8 + 136) = v12;
        v15 = *(_OWORD *)(v4 + 216);
        v16 = *(_OWORD *)(v4 + 232);
        v17 = *(_OWORD *)(v4 + 248);
        *(_OWORD *)(v8 + 184) = *(_OWORD *)(v4 + 200);
        *(_OWORD *)(v8 + 232) = v17;
        *(_OWORD *)(v8 + 216) = v16;
        *(_OWORD *)(v8 + 200) = v15;
        v18 = *(_OWORD *)(v4 + 280);
        v19 = *(_OWORD *)(v4 + 296);
        v20 = *(_QWORD *)(v4 + 309);
        *(_OWORD *)(v8 + 248) = *(_OWORD *)(v4 + 264);
        *(_QWORD *)(v8 + 293) = v20;
        *(_OWORD *)(v8 + 264) = v18;
        *(_OWORD *)(v8 + 280) = v19;
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(v4 + 120);
        v21 = v8 + 304;
      }
      v6[1] = v21;
    }
    (*(void (**)(void *))(*(_QWORD *)lpsrc + 8))(lpsrc);
  }
  return 1;
}

uint64_t sub_1D4D8AFBC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E988AEB0;
  v2 = *(uint64_t **)(a1 + 32);
  while (1)
  {
    v3 = *(uint64_t **)(a1 + 24);
    if (v2 == v3)
      break;
    v4 = *v3;
    v5 = (char *)v2 - (char *)(v3 + 1);
    if (v2 != v3 + 1)
      memmove(*(void **)(a1 + 24), v3 + 1, v5);
    v2 = (uint64_t *)((char *)v3 + v5);
    *(_QWORD *)(a1 + 32) = (char *)v3 + v5;
    if (v4)
    {
      v6 = sub_1D4D6C1D0(v4);
      MEMORY[0x1D826897C](v6, 0x1020C401705F15ELL);
      v2 = *(uint64_t **)(a1 + 32);
    }
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1D4D8B058(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;
  int64_t v5;

  *a1 = &off_1E988AF40;
  v3 = (char *)a1[3];
  v2 = (char *)a1[4];
  if (v2 == v3)
  {
    v4 = (char *)a1[4];
    if (!v2)
      return a1;
    goto LABEL_7;
  }
  v4 = (char *)a1[3];
  do
  {
    v5 = v2 - (v3 + 8);
    if (v2 != v3 + 8)
    {
      memmove(v3, v3 + 8, v2 - (v3 + 8));
      v4 = (char *)a1[3];
    }
    v2 = &v3[v5];
    a1[4] = &v3[v5];
    v3 = v4;
  }
  while (v2 != v4);
  if (v4)
  {
LABEL_7:
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1D4D8B0E8(_QWORD *a1)
{
  sub_1D4D8B10C(a1);
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D8B10C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E988A978;
  if (a1[2])
  {
    v2 = sub_1D4D756EC();
    MEMORY[0x1D826897C](v2, 0x1020C40A6EEA1E9);
  }
  return a1;
}

_QWORD *sub_1D4D8B158(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E988B0F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4D8B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_1D4D8B244((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_1D4D8B1D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D826897CLL);
}

void sub_1D4D8B1FC(uint64_t a1)
{
  sub_1D4D8B244(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1D4D8B204(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A878))
    return a1 + 24;
  else
    return 0;
}

void sub_1D4D8B244(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    dispatch_release(*(dispatch_object_t *)(a2 + 16));
    dispatch_release(*(dispatch_object_t *)(a2 + 24));
    JUMPOUT(0x1D826897CLL);
  }
}

float sub_1D4D8B28C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  _QWORD *v15;
  float *v16;
  unint64_t v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  float v22;
  uint64_t v23;
  float *v24;
  _QWORD *v25;
  float *v26;
  unint64_t v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  float *v31;
  unsigned int v32;
  uint64_t v33;
  float *v34;
  _QWORD *v35;
  float *v36;
  unsigned int v37;
  float *v38;
  void *v39;
  float v40;
  uint64_t v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  void *__p[3];
  void *v50[3];

  *(_OWORD *)a1 = xmmword_1D4DB2500;
  *(_OWORD *)(a1 + 16) = xmmword_1D4DB2500;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v6 = *(unsigned int *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 112);
  v8 = (v7 + v6);
  if (v7 + (_DWORD)v6)
  {
    v9 = 0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = -2 * v6;
    do
    {
      if (v9 >= v6)
      {
        v13 = v12;
        v14 = (float *)(*(_QWORD *)(a2 + 40) + 4 * v12);
        v15 = (_QWORD *)(a2 + 64);
      }
      else
      {
        v13 = (2 * *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v9));
        v14 = (float *)(*(_QWORD *)a2 + 4 * v13);
        v15 = (_QWORD *)(a2 + 8);
      }
      v16 = (float *)(*v15 + 4 * v13);
      v10 = v10 + (float)(*v16 - *v14);
      v11 = v11 + (float)(v16[1] - v14[1]);
      ++v9;
      v12 += 2;
    }
    while (v8 != v9);
    v17 = 0;
    v18 = (float)v8;
    v19 = v10 / (float)v8;
    v20 = -2 * v6;
    v21 = 0.0;
    v22 = v11 / (float)v8;
    do
    {
      if (v17 >= v6)
      {
        v23 = v20;
        v24 = (float *)(*(_QWORD *)(a2 + 40) + 4 * v20);
        v25 = (_QWORD *)(a2 + 64);
      }
      else
      {
        v23 = (2 * *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v17));
        v24 = (float *)(*(_QWORD *)a2 + 4 * v23);
        v25 = (_QWORD *)(a2 + 8);
      }
      v26 = (float *)(*v25 + 4 * v23);
      v21 = v21
          + (float)((float)((float)((float)(v26[1] - v24[1]) - v22) * (float)((float)(v26[1] - v24[1]) - v22))
                  + (float)((float)((float)(*v26 - *v24) - v19) * (float)((float)(*v26 - *v24) - v19)));
      ++v17;
      v20 += 2;
    }
    while (v8 != v17);
  }
  else
  {
    v18 = (float)v8;
    v21 = 0.0;
    v22 = 0.0 / (float)v8;
    v19 = v22;
    v8 = 0;
  }
  sub_1D4D844A0(v50, v8);
  sub_1D4D844A0(__p, (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32)));
  v27 = *(unsigned int *)(a2 + 32);
  v28 = (float *)v50[0];
  v29 = (*(_DWORD *)(a2 + 112) + v27);
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = (float *)__p[0];
    v32 = -2 * v27;
    do
    {
      if (v30 >= v27)
      {
        v33 = v32;
        v34 = (float *)(*(_QWORD *)(a2 + 40) + 4 * v32);
        v35 = (_QWORD *)(a2 + 64);
      }
      else
      {
        v33 = (2 * *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v30));
        v34 = (float *)(*(_QWORD *)a2 + 4 * v33);
        v35 = (_QWORD *)(a2 + 8);
      }
      v36 = (float *)(*v35 + 4 * v33);
      v28[v30] = *v36 - *v34;
      v31[v30++] = v36[1] - v34[1];
      v32 += 2;
    }
    while (v29 != v30);
  }
  std::__sort<std::__less<float,float> &,float *>();
  std::__sort<std::__less<float,float> &,float *>();
  v37 = *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32);
  v38 = (float *)v50[0];
  v39 = __p[0];
  v40 = 0.0;
  if (v37)
  {
    v41 = (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
    v42 = (float *)__p[0];
    do
    {
      v43 = *v38++;
      v44 = v43 - *((float *)v50[0] + (v37 >> 1));
      v45 = *v42++;
      v46 = v45 - *((float *)__p[0] + (v37 >> 1));
      if (v44 < 0.0)
        v44 = -v44;
      if (v46 < 0.0)
        v46 = -v46;
      v40 = v40 + (float)(v44 + v46);
      --v41;
    }
    while (v41);
  }
  if ((a3 & 1) != 0)
  {
    v47 = v40 / (float)v37;
    v19 = *((float *)v50[0] + (v37 >> 1));
    v22 = *((float *)__p[0] + (v37 >> 1));
  }
  else
  {
    v47 = sqrtf(v21 / v18);
  }
  *(float *)(a1 + 8) = v19;
  *(float *)(a1 + 20) = v22;
  __p[1] = v39;
  operator delete(v39);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  return v47;
}

void sub_1D4D8B584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_1D4D8B5B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v23;
  int v24;
  float v25;
  uint64_t v26;
  int v27;
  float v28;
  int v29;
  float v30;
  float v31;
  int v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33 = xmmword_1D4DB2500;
  v34 = xmmword_1D4DB2500;
  *(float *)&v35 = 1.0;
  v7 = sub_1D4D8B28C((uint64_t)&v33, a1, a4);
  v8 = 0;
  v9 = *(float *)(a1 + 116) + -1.0;
  v10 = *(float *)(a1 + 120) + -1.0;
  v23 = 0;
  v24 = 1065353216;
  v25 = v9;
  v26 = 0x3F80000000000000;
  v27 = 0;
  v28 = v10;
  v29 = 1065353216;
  v30 = v9;
  v31 = v10;
  v32 = 1065353216;
  v11 = v33;
  v12 = v34;
  v13 = (float *)(a3 + 4);
  v14 = (float *)(a2 + 4);
  v15 = *(float *)&v35;
  do
  {
    v16 = *(float *)((char *)&v23 + v8);
    v17 = *(float *)((char *)&v23 + v8 + 4);
    v18 = *(float *)((char *)&v23 + v8 + 8);
    v19 = (float)((float)(*((float *)&v11 + 1) * v17) + (float)(*(float *)&v11 * v16))
        + (float)(*((float *)&v11 + 2) * v18);
    v20 = (float)((float)(v17 * *(float *)&v12) + (float)(*((float *)&v11 + 3) * v16))
        + (float)(*((float *)&v12 + 1) * v18);
    v21 = (float)((float)(v17 * *((float *)&v12 + 3)) + (float)(*((float *)&v12 + 2) * v16)) + (float)(v15 * v18);
    *(v14 - 1) = v16;
    *v14 = v17;
    *(v13 - 1) = v19 / v21;
    *v13 = v20 / v21;
    v8 += 12;
    v13 += 2;
    v14 += 2;
  }
  while (v8 != 48);
  return exp((float)-v7);
}

uint64_t sub_1D4D8B700(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  char v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  int v14;
  int32x4_t v16;
  int v17[8];
  int v18[10];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    v7 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
    v8 = MEMORY[0x1E0C80A78](v7);
    MEMORY[0x1E0C80A78](v8);
    if (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32))
    {
      *(float *)v9.i32 = sub_1D4D8B5B8(a2, (uint64_t)v18, (uint64_t)v17, 0);
      v16 = vdupq_lane_s32(v9, 0);
      sub_1D4D8B9A8(a2, v18, v17, v16.i32, 4);
    }
  }
  else if (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32) == 4)
  {
    sub_1D4D84730((void **)a1, 4u);
    sub_1D4D8B91C(a2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    sub_1D4D84570(*(const float **)(a1 + 64), *(const float **)(a1 + 72), a4);
    if ((v10 & 1) != 0)
      return 1;
  }
  sub_1D4D84730((void **)a1, *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
  sub_1D4D8B91C(a2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_1D4D8BA8C(a2, *(_QWORD *)(a1 + 80));
  sub_1D4D84850(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
  v13 = (uint64_t)v12;
  sub_1D4D8497C(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v12, *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
  sub_1D4D84514(*(_QWORD *)(a1 + 160), *(__CLPK_real **)(a1 + 16), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(float **)(a1 + 80), *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32), a4);
  if (v14)
  {
    v11 = sub_1D4D84A40(v13, a1 + 88, a1 + 124, a1 + 24, a4);
    if (!v13)
      return v11;
    goto LABEL_12;
  }
  v11 = 0;
  if (v13)
LABEL_12:
    MEMORY[0x1D826897C](v13, 0x1000C40504FFAC1);
  return v11;
}

float sub_1D4D8B91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  float result;

  v3 = *(unsigned int *)(a1 + 32);
  v4 = (*(_DWORD *)(a1 + 112) + v3);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = -2 * v3;
    do
    {
      if (v5 >= v3)
      {
        v8 = (_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v6);
        v9 = *(_QWORD *)(a1 + 64) + 4 * v6;
      }
      else
      {
        v7 = 2 * *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v5);
        v8 = (_DWORD *)(*(_QWORD *)a1 + 4 * v7);
        v9 = *(_QWORD *)(a1 + 8) + 4 * v7;
      }
      v10 = 2 * v5;
      *(_DWORD *)(a2 + 4 * v10) = *v8;
      v11 = v8[1];
      v12 = (2 * v5) | 1;
      *(_DWORD *)(a2 + 4 * v12) = v11;
      *(_DWORD *)(a3 + 4 * v10) = *(_DWORD *)v9;
      result = *(float *)(v9 + 4);
      *(float *)(a3 + 4 * v12) = result;
      ++v5;
      v6 += 2;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1D4D8B9A8(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  _DWORD **v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  void **v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;

  *(_DWORD *)(a1 + 112) = a5;
  v9 = (_DWORD **)(a1 + 40);
  sub_1D4D81328(a1 + 40, (2 * a5));
  sub_1D4D81328(a1 + 64, (2 * *(_DWORD *)(a1 + 112)));
  v10 = *(unsigned int *)(a1 + 112);
  v11 = (2 * v10);
  if ((_DWORD)v11)
  {
    v12 = *v9;
    v13 = *(_DWORD **)(a1 + 64);
    do
    {
      v14 = *a2++;
      *v12++ = v14;
      v15 = *a3++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
  }
  v16 = (void **)(a1 + 88);
  sub_1D4D81328(a1 + 88, v10);
  v17 = *(unsigned int *)(a1 + 112);
  if (a4)
  {
    if ((_DWORD)v17)
    {
      v18 = *v16;
      do
      {
        v19 = *a4++;
        *v18++ = v19;
        --v17;
      }
      while (v17);
    }
  }
  else if ((_DWORD)v17)
  {
    memset_pattern16(*v16, &unk_1D4DB20F0, 4 * v17);
  }
}

uint64_t sub_1D4D8BA8C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v2 = *(unsigned int *)(result + 32);
  v3 = (*(_DWORD *)(result + 112) + v2);
  if ((_DWORD)v3)
  {
    for (i = 0; v3 != i; ++i)
    {
      if (i >= v2)
      {
        v5 = *(_QWORD *)(result + 88);
        if (*(_QWORD *)(result + 96) == v5)
        {
LABEL_9:
          v7 = 1.0;
          goto LABEL_10;
        }
        v6 = (i - v2);
      }
      else
      {
        v5 = *(_QWORD *)(result + 16);
        if (!v5)
          goto LABEL_9;
        v6 = *(unsigned int *)(*(_QWORD *)(result + 24) + 4 * i);
      }
      v7 = *(float *)(v5 + 4 * v6);
LABEL_10:
      *(float *)(a2 + 4 * i) = v7;
    }
  }
  return result;
}

uint64_t sub_1D4D8BAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8, float a9, float a10)
{
  uint64_t v10;
  _QWORD v12[4];
  unsigned int v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  _BYTE __p[28];
  float v18;
  float v19;

  if (a6 < 4)
    return 0;
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  v13 = a6;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  memset(__p, 0, sizeof(__p));
  v18 = a9;
  v19 = a10;
  v10 = sub_1D4D8B700(a1, (uint64_t)v12, a7, a8);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v10;
}

void sub_1D4D8BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4D8BBA4(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D8BBA4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D4D8BBF4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[4];
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a4 < 4)
    return 0;
  v5 = MEMORY[0x1E0C80A78](a1);
  v11 = 0;
  do
  {
    *(_DWORD *)((char *)&v14[-1] + 4 * v11 - v10) = v11;
    ++v11;
  }
  while (v9 != v11);
  v14[0] = v6;
  v14[1] = v7;
  v14[2] = 0;
  v14[3] = (char *)&v14[-1] - v10;
  v15 = v9;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v4 = sub_1D4D8B700(v5, (uint64_t)v14, 0, v8);
  if ((_QWORD)v19)
  {
    *((_QWORD *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
  if (*((_QWORD *)&v17 + 1))
  {
    *(_QWORD *)&v18 = *((_QWORD *)&v17 + 1);
    operator delete(*((void **)&v17 + 1));
  }
  if ((_QWORD)v16)
  {
    *((_QWORD *)&v16 + 1) = v16;
    operator delete((void *)v16);
  }
  return v4;
}

void sub_1D4D8BCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4D8BBA4((_QWORD *)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D8BD10(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  printf("vector(%lu)\n", (a1[1] - *a1) >> 3);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    do
    {
      printf("%f ", *(double *)(v2 + 8 * v3++));
      v2 = *a1;
    }
    while (v3 < (a1[1] - *a1) >> 3);
  }
  return putchar(10);
}

void sub_1D4D8BD98(void *a1, int a2)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  uint64_t matrix_nonzero_count;
  sparse_index i;
  sparse_status v8;
  unint64_t v9;
  uint64_t v10;
  sparse_index column_end;
  sparse_index *jndx[3];
  double *val[3];

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(a1);
  sub_1D4D604C8(val, matrix_number_of_columns);
  sub_1D4D72594(jndx, matrix_number_of_columns);
  column_end = 0;
  matrix_nonzero_count = sparse_get_matrix_nonzero_count(a1);
  printf("Matrix (%llu, %llu) nonzeros = %ld\n", matrix_number_of_rows, matrix_number_of_columns, matrix_nonzero_count);
  if (a2)
  {
    if (matrix_number_of_rows)
    {
      for (i = 0; i != matrix_number_of_rows; ++i)
      {
        printf("\n row %d nonzeros:\n", i);
        v8 = sparse_extract_sparse_row_double((sparse_matrix_double)a1, i, 0, &column_end, matrix_number_of_columns, val[0], jndx[0]);
        if (v8 >= 1)
        {
          v9 = 0;
          v10 = 8 * v8;
          do
          {
            printf("   col %lld, val %f ;", jndx[0][v9 / 8], val[0][v9 / 8]);
            v9 += 8;
          }
          while (v10 != v9);
        }
      }
    }
    puts("\n");
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
}

void sub_1D4D8BEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D8BF18(sparse_matrix_double A, const double **a2, uint64_t a3, CBLAS_TRANSPOSE transa)
{
  double *v7;
  uint64_t v8;
  unint64_t v9;

  v7 = *(double **)a3;
  v8 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v8)
  {
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    bzero(*(void **)a3, 8 * v9);
  }
  if (sparse_matrix_vector_product_dense_double(transa, 1.0, A, *a2, 1, v7, 1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

double sub_1D4D8BF90(uint64_t a1, double **a2)
{
  double *v2;
  uint64_t v3;
  unint64_t v4;
  double *v5;
  double result;
  double v7;
  double v8;
  double v9;

  v2 = *(double **)a1;
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v3)
    return 0.0;
  v4 = v3 >> 3;
  v5 = *a2;
  if (v4 <= 1)
    v4 = 1;
  result = 0.0;
  do
  {
    v7 = *v2++;
    v8 = v7;
    v9 = *v5++;
    result = result + v8 * v9;
    --v4;
  }
  while (v4);
  return result;
}

double sub_1D4D8BFD0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = *(double **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v2)
  {
    v3 = v2 >> 3;
    if (v3 <= 1)
      v3 = 1;
    v4 = 0.0;
    do
    {
      v5 = *v1++;
      v4 = v4 + v5 * v5;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0.0;
  }
  return sqrt(v4);
}

double sub_1D4D8C00C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;
  double result;
  double v5;
  double v6;

  v1 = *(double **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v2)
    return -1.0;
  v3 = v2 >> 3;
  if (v3 <= 1)
    v3 = 1;
  result = -1.0;
  do
  {
    v5 = *v1++;
    v6 = fabs(v5);
    if (v6 > result)
      result = v6;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_1D4D8C04C(uint64_t result, double **a2, double a3)
{
  double *v3;
  uint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;

  v3 = *(double **)result;
  v4 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if (v4)
  {
    v5 = v4 >> 3;
    v6 = *a2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v7 = *v6++;
      *v3 = *v3 + a3 * v7;
      ++v3;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_1D4D8C084(uint64_t a1, double **a2)
{
  double *v2;
  uint64_t v3;
  unint64_t v4;
  double *v5;
  double v6;
  double result;

  v2 = *(double **)a1;
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v3)
  {
    v4 = v3 >> 3;
    v5 = *a2;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v6 = *v5++;
      result = *v2 - v6;
      *v2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1D4D8C0BC(uint64_t result, double a2)
{
  double *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(double **)result;
  v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if (v3)
  {
    v4 = v3 >> 3;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      *v2 = *v2 * a2;
      ++v2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1D4D8C0EC(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8) - (_QWORD)v1;
  if (v3)
  {
    v4 = v3 >> 3;
    if (v4 <= 1)
      v4 = 1;
    bzero(v1, 8 * v4);
  }
}

uint64_t sub_1D4D8C110(uint64_t *a1, void *A)
{
  sparse_dimension matrix_number_of_rows;
  sparse_dimension matrix_number_of_columns;
  unint64_t v6;
  sparse_index v7;
  uint64_t v8;
  sparse_status v9;
  sparse_index *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sparse_index column_end;
  sparse_index *jndx[3];
  double *val[3];

  matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  v6 = matrix_number_of_columns;
  if (matrix_number_of_rows >= matrix_number_of_columns)
    matrix_number_of_rows = matrix_number_of_columns;
  sub_1D4D6455C((uint64_t)a1, matrix_number_of_rows);
  sub_1D4D604C8(val, v6);
  sub_1D4D72594(jndx, v6);
  column_end = 0;
  if (matrix_number_of_rows)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      *(_QWORD *)(*a1 + 8 * v7) = 0;
      v9 = sparse_extract_sparse_row_double((sparse_matrix_double)A, v7, 0, &column_end, v6, val[0], jndx[0]);
      if (v9 >= 1)
      {
        v10 = jndx[0];
        v11 = val[0];
        v12 = v9;
        v13 = *a1;
        do
        {
          v14 = *v10++;
          if (v14 == v7)
          {
            *(double *)(v13 + 8 * v7) = *v11;
            ++v8;
          }
          ++v11;
          --v12;
        }
        while (v12);
      }
      ++v7;
    }
    while (v7 != matrix_number_of_rows);
  }
  else
  {
    v8 = 0;
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
  return v8;
}

void sub_1D4D8C238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D8C26C(sparse_m_double *a1, uint64_t a2, uint64_t a3, void *A, int a5, double a6, double a7)
{
  sparse_dimension v14;
  unint64_t v15;
  sparse_status v16;
  uint64_t v17;
  double *v18;
  sparse_index *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  sparse_dimension matrix_number_of_columns;
  sparse_index *v27;
  double *val;
  sparse_index column_end;

  matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  if (a7 != 0.0 && sparse_get_matrix_number_of_rows(A))
  {
    v14 = 0;
    do
    {
      sparse_insert_entry_double(a1, a7, a2 + v14, a3 + v14);
      ++v14;
    }
    while (v14 < sparse_get_matrix_number_of_rows(A));
  }
  val = (double *)malloc_type_malloc(8 * matrix_number_of_columns, 0x100004000313F17uLL);
  v27 = (sparse_index *)malloc_type_malloc(8 * matrix_number_of_columns, 0x100004000313F17uLL);
  column_end = 0;
  if (sparse_get_matrix_number_of_rows(A))
  {
    v15 = 0;
    do
    {
      v16 = sparse_extract_sparse_row_double((sparse_matrix_double)A, v15, 0, &column_end, matrix_number_of_columns, val, v27);
      if (v16 >= 1)
      {
        v17 = v16;
        v19 = v27;
        v18 = val;
        do
        {
          v21 = *v19++;
          v20 = v21;
          v22 = -0.0;
          if (v21 == v15)
            v22 = a7;
          v23 = *v18 * a6 + v22;
          if (v23 != 0.0)
          {
            if (a5)
              v24 = v15;
            else
              v24 = v20;
            if (!a5)
              v20 = v15;
            sparse_insert_entry_double(a1, v23, v20 + a2, v24 + a3);
          }
          ++v18;
          --v17;
        }
        while (v17);
      }
      if ((~(_WORD)v15 & 0x7FF) == 0)
        sparse_commit(a1);
      ++v15;
    }
    while (v15 < sparse_get_matrix_number_of_rows(A));
  }
  free(val);
  free(v27);
  return 0;
}

uint64_t sub_1D4D8C428(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_1D4D8C430(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(result + 4);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *a2;
    v6 = *a3;
    do
    {
      v7 = *(double *)(v5 + 8 * v4) + *(double *)(v6 + 8 * v4);
      if (v7 == 0.0)
      {
        v8 = v4 + 1;
      }
      else
      {
        v9 = *(_QWORD *)(result + 8);
        v10 = *(_QWORD *)(v9 + 8 * v4);
        v8 = v4 + 1;
        v11 = *(_QWORD *)(v9 + 8 * (v4 + 1)) - v10;
        if (v11 >= 1)
        {
          v12 = 0;
          while (1)
          {
            v13 = *(unsigned int *)(*(_QWORD *)(result + 16) + 4 * v10 + 4 * v12);
            if (v4 == v13)
              break;
            ++v12;
            if (v4 < (int)v13 || v11 <= v12)
              goto LABEL_5;
          }
          *(double *)(*(_QWORD *)(result + 32) + 8 * v10 + 8 * v12) = v7;
        }
      }
LABEL_5:
      v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_1D4D8C71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4D8CA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4D8CD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

double sub_1D4D8CDB0(double **a1, double *a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double result;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v3 = *a1;
  v2 = a1[1];
  if (v2 == *a1)
  {
    result = 0.0;
    v8 = 0.0;
    v5 = 0.0;
    v15 = 0.0;
    v14 = 0.0;
    v18 = 0.0;
    if (!a2)
      return result;
    goto LABEL_13;
  }
  v4 = v2 - *a1;
  v5 = *v3;
  v6 = 0.0;
  v7 = 0.0;
  v8 = *v3;
  result = 0.0;
  v10 = *a1;
  do
  {
    v11 = *v10++;
    v12 = v11;
    if (v11 < v5)
      v5 = v12;
    if (v8 < v12)
      v8 = v12;
    v13 = fabs(v12);
    if (result < v13)
      result = v13;
    v6 = v6 + v12;
    v7 = v7 + v12 * v12;
  }
  while (v10 != v2);
  v14 = v6 / (double)(unint64_t)v4;
  v15 = sqrt(v7 / (double)(unint64_t)v4);
  v16 = 0.0;
  do
  {
    v17 = *v3++;
    v16 = v16 + (v17 - v14) * (v17 - v14);
  }
  while (v3 != v2);
  v18 = sqrt(v16 / (double)(unint64_t)v4);
  if (a2)
  {
LABEL_13:
    *a2 = v14;
    a2[1] = v5;
    a2[2] = v8;
    a2[3] = v18;
    a2[4] = result;
    a2[5] = v15;
  }
  return result;
}

double sub_1D4D8CE70(_QWORD *a1, double **a2)
{
  uint64_t v2;
  double result;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  double *v9;
  unint64_t v10;

  v2 = a1[1] - *a1;
  if (v2)
  {
    sub_1D4D6455C((uint64_t)a2, (v2 >> 3) - 1);
    v6 = a1[1] - *a1;
    if ((unint64_t)v6 >= 9)
    {
      v7 = v6 >> 3;
      v8 = *a2;
      if (v7 <= 2)
        v7 = 2;
      v9 = (double *)(*a1 + 8);
      v10 = v7 - 1;
      do
      {
        result = *v9 - *(v9 - 1);
        *v8++ = result;
        ++v9;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void sub_1D4D8D15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D4D8D3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4D8D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1D4D8D748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4D8D7FC(unsigned int *a1)
{
  __CVBuffer *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (__CVBuffer *)*((_QWORD *)a1 + 6);
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(v2, 0);
    v3 = a1 + 14;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      *(_QWORD *)a1 = 0;
  }
  sub_1D4D98D74((uint64_t)a1);
  free(a1);
}

uint64_t sub_1D4D8DEE0(uint64_t result, int a2, int a3, int a4, int a5, _BYTE *a6, int a7, float a8, float a9, double a10, double a11, double a12, float a13, float a14, float a15)
{
  unsigned int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  float v20;
  float v21;
  int v22;
  int v24;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  char v46;

  v16 = a8 + -0.5;
  v17 = a9 + -0.5;
  if (v16 < 0.0)
    v16 = 0.0;
  v18 = (int)v16;
  if (v17 < 0.0)
    v17 = 0.0;
  v19 = (int)v17;
  v20 = v16 - (float)(int)v16;
  v21 = v17 - (float)(int)v17;
  if (a2 - 1 > v18)
    v22 = v18 + 1;
  else
    v22 = a2 - 1;
  if (v18 >= a2 && a2 - 1 <= v18)
    v18 = a2 - 1;
  if (a3 - 1 > v19)
    v24 = v19 + 1;
  else
    v24 = a3 - 1;
  if (v19 >= a3 && a3 - 1 <= v19)
    v19 = a3 - 1;
  v26 = result + v19 * (uint64_t)a4;
  v27 = (_BYTE *)(v26 + v18 * (uint64_t)a5);
  v28 = (_BYTE *)(v26 + v22 * (uint64_t)a5);
  v29 = result + v24 * (uint64_t)a4;
  v30 = (_BYTE *)(v29 + v18 * (uint64_t)a5);
  v31 = (_BYTE *)(v29 + v22 * (uint64_t)a5);
  v32 = (float)(1.0 - v20) * (float)(1.0 - v21);
  v33 = v20 * (float)(1.0 - v21);
  v34 = (float)(1.0 - v20) * v21;
  v35 = v20 * v21;
  LOBYTE(v21) = v27[1];
  LOBYTE(a13) = v28[1];
  LOBYTE(a14) = v30[1];
  v36 = (float)LODWORD(a14);
  LOBYTE(a15) = v31[1];
  v37 = (float)LODWORD(a15);
  v38 = (float)((float)((float)((float)(v33 * (float)LODWORD(a13)) + (float)((float)LODWORD(v21) * v32))
                      + (float)(v36 * v34))
              + (float)(v37 * v35))
      + 0.5;
  v39 = (int)v38;
  if ((int)v38 >= 255)
    LOBYTE(v39) = -1;
  LOBYTE(v38) = v27[2];
  LOBYTE(v36) = v28[2];
  LOBYTE(v37) = v30[2];
  *(float *)&v40 = (float)LODWORD(v37);
  LOBYTE(v15) = v31[2];
  *(float *)&v41 = (float)v15;
  *(float *)&v42 = v33 * (float)LODWORD(v36);
  *(float *)&v43 = (float)((float)((float)(*(float *)&v42 + (float)((float)LODWORD(v38) * v32))
                                 + (float)(*(float *)&v40 * v34))
                         + (float)(*(float *)&v41 * v35))
                 + 0.5;
  v44 = (int)*(float *)&v43;
  LOBYTE(v43) = v27[3];
  LOBYTE(v42) = v28[3];
  LOBYTE(v40) = v30[3];
  LOBYTE(v41) = v31[3];
  v45 = (int)(float)((float)((float)((float)((float)(v33 * (float)v42) + (float)((float)v43 * v32))
                                   + (float)((float)v40 * v34))
                           + (float)((float)v41 * v35))
                   + 0.5);
  if (v44 >= 255)
    v46 = -1;
  else
    v46 = v44;
  a6[1] = v39;
  if (v45 >= 255)
    LOBYTE(v45) = -1;
  a6[2] = v46;
  a6[3] = v45;
  if (a7)
    *a6 = -1;
  return result;
}

uint64_t sub_1D4D8E064(uint64_t result, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, float a11, float a12, float a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  unint64_t v28;

  if (a4 < a5)
  {
    v15 = result;
    v16 = a4;
    v17 = a5;
    v19 = a3 - (uint64_t)a2;
    do
    {
      if (a2 < a3)
      {
        v20 = 0;
        v21 = (float)(int)v16 + 0.5;
        v22 = *(_QWORD *)(v15 + 80) + (v16 - *(_QWORD *)(v15 + 120)) * *(_QWORD *)(v15 + 88);
        do
        {
          v23 = (float)(a2 + v20) + 0.5;
          v24 = *(float *)(v15 + 32)
              + (float)((float)(v21 * *(float *)(v15 + 28)) + (float)(*(float *)(v15 + 24) * v23));
          v25 = (float)(*(float *)(v15 + 8) + (float)((float)(v21 * *(float *)(v15 + 4)) + (float)(*(float *)v15 * v23)))
              / v24;
          if (v25 >= 0.0)
          {
            v26 = *(_QWORD *)(v15 + 64);
            if (v25 < (float)v26)
            {
              *(float *)&a10 = v21 * *(float *)(v15 + 16);
              LODWORD(a9) = *(_DWORD *)(v15 + 20);
              v27 = (float)(*(float *)&a9 + (float)(*(float *)&a10 + (float)(*(float *)(v15 + 12) * v23))) / v24;
              if (v27 >= 0.0)
              {
                v28 = *(_QWORD *)(v15 + 72);
                if (v27 < (float)v28)
                {
                  *(float *)&a8 = (float)v28;
                  result = sub_1D4D8DEE0(*(_QWORD *)(v15 + 40), v26, v28, *(_DWORD *)(v15 + 48), *(_DWORD *)(v15 + 56), (_BYTE *)(v22 + *(_QWORD *)(v15 + 96) * v20), *(_QWORD *)(v15 + 96) == 4, v25, v27, a8, a9, a10, a11, a12, a13);
                }
              }
            }
          }
          ++v20;
        }
        while (v19 != v20);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D4D8E9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D8E9E8(int *a1, double a2, double a3, double a4, double a5, double a6, float a7, float a8, float a9)
{
  return sub_1D4D8E064((uint64_t)(a1 + 8), a1[40], a1[41], a1[42], a1[43], a2, a3, a4, a5, a6, a7, a8, a9);
}

double sub_1D4D8E9FC(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 4) = 1;
  *(_OWORD *)(a1 + 8) = xmmword_1D4DB2560;
  result = 0.000488281365;
  *(_QWORD *)(a1 + 24) = 0x3F4000003F266666;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = -1082130432;
  return result;
}

void sub_1D4D8EA2C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  const double *v11;
  const double *v12;
  const double *v13;
  const double *v14;
  const double *v15;
  const double *v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  const double *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float *v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  _OWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  __int128 v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  float64x2x3_t v90;
  float64x2x3_t v91;

  v89 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v7 = a2[1];
  v81[0] = 0;
  v81[1] = 0;
  v81[2] = 0x3FF0000000000000;
  *(double *)&v81[3] = (double)(int)a3;
  v82 = xmmword_1D4DB16C0;
  v83 = 0;
  v84 = (double)SHIDWORD(a3);
  v85 = 0x3FF0000000000000;
  v86 = (double)(int)a3;
  v87 = (double)SHIDWORD(a3);
  v88 = 0x3FF0000000000000;
  if (a5 != -1)
  {
    v9 = 0;
    v10 = (const double *)(v8 + 304 * (int)a5);
    v11 = v10 + 8;
    v12 = v10 + 7;
    v13 = v10 + 6;
    v14 = v10 + 5;
    v15 = v10 + 4;
    v16 = v10 + 3;
    v17 = v10 + 2;
    v18 = vld1q_dup_f64(v10++);
    v19 = vld1q_dup_f64(v10);
    v20 = vld1q_dup_f64(v17);
    v21 = vld1q_dup_f64(v15);
    v22 = vld1q_dup_f64(v16);
    v23 = vld1q_dup_f64(v14);
    v24 = vld1q_dup_f64(v12);
    v25 = vld1q_dup_f64(v13);
    v26 = vld1q_dup_f64(v11);
    __asm { FMOV            V19.2D, #1.0 }
    do
    {
      v32 = (double *)&v81[v9];
      v91 = vld3q_f64(v32);
      v33 = vmlaq_f64(vmlaq_f64(vmulq_f64(v19, v91.val[1]), v91.val[0], v18), v91.val[2], v20);
      v34 = vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[1], v21), v33, v22), v91.val[2], v23);
      v35 = vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v24), v33, v25), v91.val[2], v26);
      v36 = vdivq_f64(v33, v35);
      v37 = vdivq_f64(v34, v35);
      vst3q_f64(v32, *(float64x2x3_t *)(&_Q19 - 2));
      v9 += 6;
    }
    while (v9 != 12);
  }
  if (v7 != v8)
  {
    v38 = 0;
    v39 = (unsigned __int128)((v7 - v8) * (__int128)0x6BCA1AF286BCA1BLL) >> 64;
    v40 = (v39 >> 3) + ((unint64_t)v39 >> 63);
    v41 = a5;
    if (v40 <= 1)
      v42 = 1;
    else
      v42 = v40;
    do
    {
      if (v38 == v41)
      {
        v43 = 1.0;
        v44 = 0.0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0.0;
        v50 = 1.0;
        v51 = 1.0;
      }
      else
      {
        v52 = (uint64_t *)(*a2 + 304 * v38);
        v51 = *v52;
        v44 = *((double *)v52 + 1);
        v45 = v52[2];
        v46 = v52[3];
        v50 = *((double *)v52 + 4);
        v47 = v52[5];
        v48 = v52[6];
        v49 = *((double *)v52 + 7);
        v43 = v52[8];
      }
      v53 = 0;
      v54 = (float64x2_t)vdupq_lane_s64(v51, 0);
      v55 = (float64x2_t)vdupq_lane_s64(v45, 0);
      v56 = (float64x2_t)vdupq_lane_s64(v46, 0);
      v57 = (float64x2_t)vdupq_lane_s64(v47, 0);
      v58 = (float64x2_t)vdupq_lane_s64(v48, 0);
      v59 = (const double *)v81;
      v60 = (float64x2_t)vdupq_lane_s64(v43, 0);
      do
      {
        v90 = vld3q_f64(v59);
        v59 += 6;
        v61 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v49), v90.val[0], v58), v90.val[2], v60);
        v62 = vsubq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v44), v90.val[0], v54), v90.val[2], v55), v61), v90.val[0]);
        v90.val[0] = vsubq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v50), v90.val[0], v56), v90.val[2], v57), v61), v90.val[1]);
        *(float32x2_t *)&v90.val[1].f64[0] = vcvt_f32_f64(v62);
        *(float32x2_t *)&v90.val[2].f64[0] = vcvt_f32_f64(v90.val[0]);
        v63 = (float *)((char *)&v79 + v53);
        vst2_f32(v63, (float32x2x2_t)v90.val[1]);
        v53 += 16;
      }
      while (v53 != 32);
      v64 = a4[1];
      v65 = (unint64_t)a4[2];
      if ((unint64_t)v64 >= v65)
      {
        v68 = ((char *)v64 - (_BYTE *)*a4) >> 5;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 59)
          sub_1D4D5DFA8();
        v70 = v65 - (_QWORD)*a4;
        if (v70 >> 4 > v69)
          v69 = v70 >> 4;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
          v71 = 0x7FFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
          v72 = (char *)sub_1D4D6123C((uint64_t)(a4 + 2), v71);
        else
          v72 = 0;
        v73 = &v72[32 * v68];
        v74 = v80;
        *(_OWORD *)v73 = v79;
        *((_OWORD *)v73 + 1) = v74;
        v76 = (char *)*a4;
        v75 = (char *)a4[1];
        v77 = v73;
        if (v75 != *a4)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 1);
            *((_OWORD *)v77 - 2) = *((_OWORD *)v75 - 2);
            *((_OWORD *)v77 - 1) = v78;
            v77 -= 32;
            v75 -= 32;
          }
          while (v75 != v76);
          v75 = (char *)*a4;
        }
        v67 = v73 + 32;
        *a4 = v77;
        a4[1] = v73 + 32;
        a4[2] = &v72[32 * v71];
        if (v75)
          operator delete(v75);
      }
      else
      {
        v66 = v80;
        *v64 = v79;
        v64[1] = v66;
        v67 = v64 + 2;
      }
      a4[1] = v67;
      ++v38;
    }
    while (v38 != v42);
  }
}

uint64_t *sub_1D4D8ED60(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;

  v2 = *result;
  v3 = result[1];
  v4 = v3 - *result;
  if (v3 != *result)
  {
    v5 = 0;
    v6 = v4 >> 5;
    v7 = *a2;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(float32x2_t *)(v7 + i) = vsub_f32(*(float32x2_t *)(v2 + i), *(float32x2_t *)(v7 + i));
      ++v5;
      v7 += 32;
      v2 += 32;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t *sub_1D4D8EDB8(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, int a6)
{
  int v8;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const double *v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 v25;
  float v27[9];
  _OWORD v28[2];
  _BYTE v29[32];
  uint64_t v30;

  v8 = a3;
  v30 = *MEMORY[0x1E0C80C00];
  v10 = HIDWORD(a3);
  sub_1D4D8ED60(a4, a5);
  v11 = (uint64_t *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  sub_1D4D5F44C(v11, 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4));
  v12 = (_QWORD *)sub_1D4D84654(4u);
  *(_QWORD *)v29 = 0;
  *(float *)&v29[8] = (float)v8;
  *(_QWORD *)&v29[12] = 0;
  *(float *)&v29[20] = (float)(int)v10;
  *(float *)&v29[24] = (float)v8;
  *(float *)&v29[28] = (float)(int)v10;
  v28[0] = *(_OWORD *)v29;
  v28[1] = *(_OWORD *)&v29[16];
  if (a2[1] != *a2)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = 0;
      v16 = *a5 + v13;
      do
      {
        *(float32x2_t *)((char *)v28 + v15) = vadd_f32(*(float32x2_t *)(v16 + v15), *(float32x2_t *)((char *)v28 + v15));
        v15 += 8;
      }
      while (v15 != 32);
      v17 = v11[1];
      if (v17 >= v11[2])
      {
        v18 = sub_1D4D95868(v11);
      }
      else
      {
        sub_1D4D5F924(v11[1], 0, 0);
        v18 = v17 + 304;
        v11[1] = v18;
      }
      v11[1] = v18;
      sub_1D4D8BBF4((uint64_t)v12, (uint64_t)v29, (uint64_t)v28, 4u);
      v19 = 0;
      v20 = v18 - 304;
      do
      {
        *(double *)(v20 + 8 * v19) = v27[v19];
        ++v19;
      }
      while (v19 != 9);
      v21 = 0;
      v22 = (const double *)(v18 - 240);
      v23 = vld1q_dup_f64(v22);
      do
      {
        *(float64x2_t *)(v20 + v21) = vdivq_f64(*(float64x2_t *)(v20 + v21), v23);
        v21 += 16;
      }
      while (v21 != 64);
      *(_QWORD *)(v18 - 240) = 0x3FF0000000000000;
      v24 = *a2 + 304 * v14;
      *(_QWORD *)(v18 - 200) = *(_QWORD *)(v24 + 104);
      v25 = *(_OWORD *)(v24 + 112);
      *(_QWORD *)(v18 - 176) = *(_QWORD *)(v24 + 128);
      *(_OWORD *)(v18 - 192) = v25;
      sub_1D4D8F018(v24, v20, a6);
      ++v14;
      v13 += 32;
    }
    while (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4) > v14);
  }
  sub_1D4D847DC(v12);
  return v11;
}

void sub_1D4D8F00C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_1D4D8F018(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (a2 != a1 && a3)
    sub_1D4D602AC((char *)(a2 + 80), *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 6);
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 168);
  *(_BYTE *)(a2 + 75) = *(_BYTE *)(a1 + 75);
  *(_WORD *)(a2 + 73) = *(_WORD *)(a1 + 73);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 192);
  v5 = *(_OWORD *)(a1 + 252);
  v6 = *(_OWORD *)(a1 + 284);
  *(_OWORD *)(a2 + 268) = *(_OWORD *)(a1 + 268);
  *(_OWORD *)(a2 + 284) = v6;
  *(_OWORD *)(a2 + 252) = v5;
  result = *(__n128 *)(a1 + 196);
  v8 = *(_OWORD *)(a1 + 212);
  v9 = *(_OWORD *)(a1 + 228);
  *(_QWORD *)(a2 + 244) = *(_QWORD *)(a1 + 244);
  *(_OWORD *)(a2 + 228) = v9;
  *(_OWORD *)(a2 + 212) = v8;
  *(__n128 *)(a2 + 196) = result;
  *(_BYTE *)(a2 + 300) = *(_BYTE *)(a1 + 300);
  return result;
}

void sub_1D4D8F0B8(float *a1, int a2, int a3, int a4)
{
  float *v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t v11;
  float v12;

  v6 = a1;
  if (a3 >= 1)
    bzero(a1, 4 * a3);
  if (a4 < 0)
  {
    v8 = a2;
    if (!a2)
      return;
    goto LABEL_9;
  }
  v7 = (a4 + 1);
  v8 = a2;
  if (a2 > v7)
    bzero(&v6[v7], 4 * (a2 - v7));
  if (a2)
  {
LABEL_9:
    v9 = 0.0;
    v10 = v6;
    v11 = v8;
    do
    {
      v12 = *v10++;
      v9 = v9 + v12;
      --v11;
    }
    while (v11);
    do
    {
      *v6 = *v6 / v9;
      ++v6;
      --v8;
    }
    while (v8);
  }
}

void sub_1D4D8F160(int *a1, float *a2)
{
  int v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  int v14;

  v4 = *a1;
  if (*((_BYTE *)a1 + 4))
  {
    if (v4 > 2)
    {
      v7 = 0;
      v8 = v4;
      v10 = 0.0;
      do
      {
        v9 = (float)(unint64_t)(v4 - 1) * 0.5;
        v11 = expf((float)-(float)((float)((float)(int)v7 - v9) * (float)((float)(int)v7 - v9))/ (float)((float)(v9 / 3.0) * (float)((float)(v9 / 3.0) + (float)(v9 / 3.0))));
        a2[v7] = v11;
        v10 = v10 + v11;
        ++v7;
      }
      while (v4 != v7);
      v12 = a2;
      do
      {
        *v12 = *v12 / v10;
        ++v12;
        --v8;
      }
      while (v8);
    }
    else if (v4)
    {
      *a2 = 1.0;
      if (v4 == 2)
      {
        a2[1] = 0.0;
        v4 = 2;
      }
      else
      {
        v4 = 1;
      }
    }
  }
  else if (v4 >= 1)
  {
    v5 = a2;
    v6 = *a1;
    do
    {
      *v5++ = 1.0 / (float)v4;
      --v6;
    }
    while (v6);
  }
  v13 = a1[2];
  v14 = a1[3];
  if ((v13 & 0x80000000) == 0 || (v14 & 0x80000000) == 0)
    sub_1D4D8F0B8(a2, v4, v13, v14);
}

void sub_1D4D8F2A4(uint64_t a1, char *a2, _QWORD *a3, vDSP_Length a4, vDSP_Length a5)
{
  unint64_t v8;
  unsigned int v9;
  vDSP_Length v10;
  vDSP_Length v11;
  uint64_t v12;
  float *v13;
  vDSP_Length v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  vDSP_Length v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;

  v34 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = 0;
    v9 = 1;
    v10 = a5;
    while (1)
    {
      if ((uint64_t)(a3[1] - *a3) >> 4 <= v8)
        sub_1D4D5DDC8();
      v11 = *(int *)(*a3 + 16 * v8);
      if (v11 > a5)
        break;
      if (v10 >= v11)
        v10 = v11;
      v8 = v9++;
      if (v8 >= a4)
      {
        v33[1] = v33;
        MEMORY[0x1E0C80A78](a1);
        v13 = (float *)((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        v14 = 0;
        v17 = *v15;
        v16 = v15[1];
        v33[0] = v15;
        v18 = (v16 - v17) >> 4;
        v19 = a5 >> 1;
        do
        {
          if (v18 <= v14)
            sub_1D4D5DDC8();
          sub_1D4D8F160((int *)(v17 + 16 * v14), v13);
          v21 = *(int *)(v17 + 16 * v14);
          if ((_DWORD)v21)
          {
            v22 = (float *)&v34[4 * v19 + 4 * (v21 >> 1)];
            v23 = 0.0;
            v24 = v13;
            do
            {
              v25 = *v24++;
              v26 = v25;
              v27 = *v22--;
              v23 = v23 + (float)(v26 * v27);
              --v21;
            }
            while (v21);
          }
          else
          {
            v23 = 0.0;
          }
          *(float *)(a1 + 4 * v14) = v23;
          v14 = (v14 + 1);
          ++v19;
        }
        while (v14 < a4);
        if (v10 == a5)
          goto LABEL_19;
        return;
      }
    }
  }
  else
  {
    v20 = MEMORY[0x1E0C80A78](a1);
    v13 = (float *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
LABEL_19:
    MEMORY[0x1E0C80A78](v20);
    v31 = (float *)((char *)v33 - v30);
    if (v32)
      memcpy((char *)v33 - v30, v34, v29);
    vDSP_conv(v31, 1, &v13[a5 - 1], -1, v31, 1, a4, a5);
  }
}

void sub_1D4D8F4D4(uint64_t *a1, void **a2, int *a3, int **a4)
{
  uint64_t v4;
  void **v6;
  uint64_t v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  vDSP_Length v25;
  uint64_t v26;
  float *v27;
  vDSP_Length v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  vDSP_Length v33;
  vDSP_Length v34;
  uint64_t v36;
  vDSP_Length v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  vDSP_Length v45;
  vDSP_Length v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  vDSP_Length v51;
  float *v52;
  float *v53;
  uint64_t v54;
  int v55;
  float *v56;
  int v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  void **v63;
  float *v64;
  unint64_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  int v69;
  uint64_t v70;
  vDSP_Length v71;
  const float *v72;
  vDSP_Length v73;
  _DWORD *v74;
  uint64_t v75;
  float *v76;
  float *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  int *v84;
  vDSP_Length v85;
  _DWORD *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  _QWORD v91[2];
  float *v92;
  int **v93;
  uint64_t v94;
  int *v95;
  vDSP_Length v96;
  vDSP_Length v97;
  uint64_t *v98;
  vDSP_Length v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v93 = a4;
  v102 = *MEMORY[0x1E0C80C00];
  v4 = a1[1] - *a1;
  if (v4)
  {
    v6 = a2;
    v8 = v4 >> 5;
    *(_QWORD *)&v9 = 0xEEEEEEEEEEEEEEEELL;
    *((_QWORD *)&v9 + 1) = 0xEEEEEEEEEEEEEEEELL;
    v100 = v9;
    v101 = v9;
    sub_1D4D8082C(a2, v4 >> 5);
    if (a1[1] != *a1)
    {
      v11 = 0;
      v12 = v6 + 2;
      v13 = (char *)v6[1];
      do
      {
        if ((unint64_t)v13 >= *v12)
        {
          v15 = (v13 - (_BYTE *)*v6) >> 5;
          if ((unint64_t)(v15 + 1) >> 59)
            sub_1D4D5DFA8();
          v16 = *v12 - (_QWORD)*v6;
          v17 = v16 >> 4;
          if (v16 >> 4 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
            v18 = 0x7FFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v10 = (char *)sub_1D4D6123C((uint64_t)(v6 + 2), v18);
          else
            v10 = 0;
          v19 = &v10[32 * v15];
          v20 = v101;
          *(_OWORD *)v19 = v100;
          *((_OWORD *)v19 + 1) = v20;
          v22 = (char *)*v6;
          v21 = (char *)v6[1];
          v23 = v19;
          if (v21 != *v6)
          {
            do
            {
              v24 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 32;
              v21 -= 32;
            }
            while (v21 != v22);
            v21 = (char *)*v6;
          }
          v13 = v19 + 32;
          *v6 = v23;
          v6[1] = v19 + 32;
          v6[2] = &v10[32 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          v14 = v101;
          *(_OWORD *)v13 = v100;
          *((_OWORD *)v13 + 1) = v14;
          v13 += 32;
        }
        v6[1] = v13;
        ++v11;
      }
      while (v11 < (a1[1] - *a1) >> 5);
    }
    v98 = a1;
    if (a3)
    {
      v91[0] = v91;
      v25 = *a3;
      MEMORY[0x1E0C80A78](v10);
      v27 = (float *)((char *)v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
      v28 = v8 + v25;
      sub_1D4D8F160(a3, v27);
    }
    else
    {
      v29 = *v93;
      v25 = 0;
      v30 = (char *)v93[1] - (char *)*v93;
      if (v30)
      {
        v31 = v30 >> 4;
        v32 = 1;
        do
        {
          v34 = *v29;
          v29 += 4;
          v33 = v34;
          if (v25 <= v34)
            v25 = v33;
        }
        while (v31 > v32++);
      }
      v91[0] = v91;
      MEMORY[0x1E0C80A78](v10);
      v27 = (float *)((char *)v91 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      v28 = v25 + v8;
    }
    v37 = v8;
    v38 = (float *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
    v39 = (float *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
    v40 = v39;
    v41 = 0;
    v96 = v25 >> 1;
    v97 = v37;
    if (v25 >> 1 <= 1)
      v42 = 1;
    else
      v42 = v25 >> 1;
    if (v37 <= 1)
      v43 = 1;
    else
      v43 = v37;
    v94 = v43;
    v95 = a3;
    v44 = 4;
    v91[1] = 4 * v37;
    v92 = v27 - 1;
    v45 = v25;
    v99 = v25;
    v46 = v37;
    do
    {
      v47 = *v98;
      v48 = v98[1];
      v49 = *v98 + 8 * v41;
      v50 = (v48 - *v98) >> 5;
      v51 = v96;
      v52 = v38;
      v53 = v40;
      v54 = v42;
      if (v45 >= 2)
      {
        do
        {
          v56 = (float *)(v49 + 32 * (v51 % v50));
          v57 = *((_DWORD *)v56 + 1);
          *v52++ = *v56;
          *(_DWORD *)v53++ = v57;
          --v51;
          --v54;
        }
        while (v54);
        v55 = v42;
      }
      else
      {
        v55 = 0;
      }
      if (v48 != v47)
      {
        if (v50 <= 1)
          v58 = 1;
        else
          v58 = v50;
        v59 = &v40[v55];
        v60 = &v38[v55];
        v61 = (float *)(v47 + v44);
        v55 += v58;
        do
        {
          v62 = *v61;
          *v60++ = *(v61 - 1);
          *v59++ = v62;
          v61 += 8;
          --v58;
        }
        while (v58);
      }
      v63 = v6;
      if (v45 >= 2)
      {
        v64 = &v40[v55];
        v65 = v50 - 1;
        v66 = v42;
        v67 = &v38[v55];
        do
        {
          v68 = (float *)(v49 + 32 * (v65 % v50));
          v69 = *((_DWORD *)v68 + 1);
          *v67++ = *v68;
          *(_DWORD *)v64++ = v69;
          --v65;
          --v66;
        }
        while (v66);
      }
      v70 = v42;
      if (a3)
      {
        v71 = *a3;
        v72 = &v92[v71];
        v73 = v97;
        vDSP_conv(v38, 1, v72, -1, v38, 1, v97, v71);
        vDSP_conv(v40, 1, v72, -1, v40, 1, v73, v71);
        v74 = (char *)*v63 + v44;
        v75 = v94;
        v76 = v38;
        v77 = v40;
        v42 = v70;
        v45 = v99;
        do
        {
          v78 = *(_DWORD *)v76++;
          *(v74 - 1) = v78;
          v79 = *(_DWORD *)v77++;
          *v74 = v79;
          v74 += 8;
          --v75;
        }
        while (v75);
      }
      else
      {
        v80 = MEMORY[0x1E0C80A78](v39);
        v82 = (int *)((char *)v91 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
        MEMORY[0x1E0C80A78](v80);
        v84 = (int *)((char *)v91 - v83);
        sub_1D4D8F2A4((uint64_t)v82, (char *)v38, v93, v46, v85);
        sub_1D4D8F2A4((uint64_t)v84, (char *)v40, v93, v46, v99);
        v86 = (char *)*v63 + v44;
        v87 = v94;
        do
        {
          v88 = *v82++;
          v89 = v88;
          v90 = *v84++;
          *(v86 - 1) = v89;
          *v86 = v90;
          v86 += 8;
          --v87;
        }
        while (v87);
        v42 = v70;
        v45 = v99;
      }
      ++v41;
      v44 += 8;
      a3 = v95;
      v6 = v63;
    }
    while (v41 != 4);
    free(v38);
    free(v40);
  }
}

uint64_t sub_1D4D8F9DC(uint64_t result, double *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double *v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  const double *v33;
  float64x2_t v34;
  _QWORD v35[9];
  double v36[9];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v5 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  v6 = (double)a3;
  v7 = (double)a4;
  if ((double)a3 < (double)a4)
    v8 = (double)a4;
  else
    v8 = (double)a3;
  v36[0] = 1.0 / v8;
  v36[1] = 0.0;
  v9 = -v6 / (v8 + v8);
  v10 = -v7 / (v8 + v8);
  if (!a5)
  {
    v9 = 0.0;
    v10 = 0.0;
  }
  v36[2] = v9;
  v36[3] = 0.0;
  v36[4] = 1.0 / v8;
  v36[5] = v10;
  v36[6] = 0.0;
  v36[7] = 0.0;
  v36[8] = 1.0;
  *(double *)v35 = v8;
  v35[1] = 0;
  v11 = v6 * 0.5;
  if (!a5)
    v11 = 0.0;
  *(double *)&v35[2] = v11;
  v35[3] = 0;
  v12 = v7 * 0.5;
  if (!a5)
    v12 = 0.0;
  *(double *)&v35[4] = v8;
  *(double *)&v35[5] = v12;
  v35[6] = 0;
  v35[7] = 0;
  v35[8] = 0x3FF0000000000000;
  v13 = v36;
  do
  {
    v14 = 0;
    v15 = a2;
    do
    {
      v16 = 0;
      v17 = 0.0;
      v18 = v15;
      do
      {
        v19 = *v18;
        v18 += 3;
        v17 = v17 + v13[v16++] * v19;
      }
      while (v16 != 3);
      *((double *)&v37 + 3 * v5 + v14++) = v17;
      ++v15;
    }
    while (v14 != 3);
    ++v5;
    v13 += 3;
  }
  while (v5 != 3);
  v20 = 0;
  v21 = v40;
  *(_OWORD *)(result + 32) = v39;
  *(_OWORD *)(result + 48) = v21;
  *(_QWORD *)(result + 64) = v41;
  v22 = v38;
  *(_OWORD *)result = v37;
  *(_OWORD *)(result + 16) = v22;
  v23 = result;
  do
  {
    v24 = 0;
    v25 = (double *)v35;
    do
    {
      v26 = 0;
      v27 = 0.0;
      v28 = v25;
      do
      {
        v29 = *v28;
        v28 += 3;
        v27 = v27 + *(double *)(v23 + v26) * v29;
        v26 += 8;
      }
      while (v26 != 24);
      *((double *)&v37 + 3 * v20 + v24++) = v27;
      ++v25;
    }
    while (v24 != 3);
    ++v20;
    v23 += 24;
  }
  while (v20 != 3);
  v30 = 0;
  v31 = v40;
  *(_OWORD *)(result + 32) = v39;
  *(_OWORD *)(result + 48) = v31;
  *(_QWORD *)(result + 64) = v41;
  v32 = v38;
  *(_OWORD *)result = v37;
  *(_OWORD *)(result + 16) = v32;
  v33 = (const double *)(result + 64);
  v34 = vld1q_dup_f64(v33);
  do
  {
    *(float64x2_t *)(result + v30) = vdivq_f64(*(float64x2_t *)(result + v30), v34);
    v30 += 16;
  }
  while (v30 != 64);
  *(_QWORD *)(result + 64) = 0x3FF0000000000000;
  return result;
}

float sub_1D4D8FBD4(uint64_t *a1, unint64_t a2)
{
  return sub_1D4D88D7C(a1, a2, 0, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1);
}

BOOL sub_1D4D8FC00(uint64_t a1, double *a2, uint64_t a3)
{
  _BOOL4 v3;
  float v5[7];

  sub_1D4D8FC84(a2, a3, (uint64_t)v5);
  v3 = fabsf(v5[3]) <= 0.03;
  if (fabsf(v5[2]) > 0.03)
    v3 = 0;
  if (v5[0] < 0.95)
    v3 = 0;
  if (v5[0] > 1.05)
    v3 = 0;
  return fabsf(v5[1]) <= 0.5 && v3;
}

float64x2_t sub_1D4D8FC84(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double *v11;
  double v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double v20;
  uint64_t v21;
  float64x2_t v22;
  __int128 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float64x2_t result;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float64x2_t v33;
  uint64_t v34;
  _QWORD v35[9];
  double v36[9];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float64x2_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  v5 = (double)(int)a2;
  if ((double)(int)a2 < (double)SHIDWORD(a2))
    v5 = (double)SHIDWORD(a2);
  v36[0] = 1.0 / v5;
  memset(&v36[1], 0, 24);
  v36[4] = 1.0 / v5;
  memset(&v36[5], 0, 24);
  v36[8] = 1.0;
  *(double *)v35 = v5;
  memset(&v35[1], 0, 24);
  *(double *)&v35[4] = v5;
  memset(&v35[5], 0, 24);
  v35[8] = 0x3FF0000000000000;
  v6 = v36;
  do
  {
    v7 = 0;
    v8 = a1;
    do
    {
      v9 = 0;
      v10 = 0.0;
      v11 = v8;
      do
      {
        v12 = *v11;
        v11 += 3;
        v10 = v10 + v6[v9++] * v12;
      }
      while (v9 != 3);
      *((double *)&v37 + 3 * v4 + v7++) = v10;
      ++v8;
    }
    while (v7 != 3);
    ++v4;
    v6 += 3;
  }
  while (v4 != 3);
  v13 = 0;
  v32 = v39;
  v33 = v40;
  v34 = v41;
  v30 = v37;
  v31 = v38;
  v14 = &v30;
  do
  {
    v15 = 0;
    v16 = (double *)v35;
    do
    {
      v17 = 0;
      v18 = 0.0;
      v19 = v16;
      do
      {
        v20 = *v19;
        v19 += 3;
        v18 = v18 + *(double *)((char *)v14 + v17) * v20;
        v17 += 8;
      }
      while (v17 != 24);
      *((double *)&v37 + 3 * v13 + v15++) = v18;
      ++v16;
    }
    while (v15 != 3);
    ++v13;
    v14 = (__int128 *)((char *)v14 + 24);
  }
  while (v13 != 3);
  v21 = 0;
  v34 = v41;
  v32 = v39;
  v33 = v40;
  v30 = v37;
  v31 = v38;
  v22 = (float64x2_t)vdupq_lane_s64(v41, 0);
  do
  {
    *(__int128 *)((char *)&v30 + v21) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v30 + v21), v22);
    v21 += 16;
  }
  while (v21 != 64);
  v23 = v30;
  v24 = *(double *)&v30 * *(double *)&v32 - *((double *)&v30 + 1) * *((double *)&v31 + 1);
  v25 = (*(double *)&v32 * *((double *)&v30 + 1) + *(double *)&v30 * *((double *)&v31 + 1)) / v24;
  *(float *)a3 = v24;
  *(float *)(a3 + 4) = v25;
  v29 = v33;
  v26 = *((double *)&v23 + 1);
  v27 = *(double *)&v23;
  *(float *)(a3 + 24) = atan2f(v26, v27);
  *(_QWORD *)&result.f64[0] = v31;
  result.f64[1] = *((float64_t *)&v32 + 1);
  *(float32x4_t *)(a3 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), result);
  return result;
}

uint64_t sub_1D4D8FEA8(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  double v10[10];

  v10[9] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 80);
  if (!v5 || *(float *)(v5 + 168) < a1[7])
    return 0;
  result = sub_1D4D8FF5C(a1, (double *)v5, a3);
  if ((_DWORD)result)
  {
    result = sub_1D4D8FFD8((uint64_t)a1, a4, a2, (uint64_t)v10);
    if ((_DWORD)result)
      return sub_1D4D8FC00(result, v10, a3);
  }
  return result;
}

BOOL sub_1D4D8FF5C(float *a1, double *a2, uint64_t a3)
{
  float v4;
  _BOOL4 v5;
  float v6;
  float v8[7];

  sub_1D4D8FC84(a2, a3, (uint64_t)v8);
  v4 = a1[2];
  v5 = fabsf(v8[3]) <= v4;
  if (fabsf(v8[2]) > v4)
    v5 = 0;
  v6 = fabsf(v8[1]);
  if (v8[0] < a1[4])
    v5 = 0;
  if (v8[0] > a1[3])
    v5 = 0;
  return v6 <= a1[5] && v5;
}

BOOL sub_1D4D8FFD8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  double *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  double v37;
  double *v38;
  double v39;
  __int128 v40;
  __int128 v41;
  CMTime v42;
  CMTime v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD v46[4];
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v43 = *(CMTime *)(*(_QWORD *)(a2 + 80) + 144);
  result = sub_1D4D90724(a1, a3, &v43, &v44);
  if (result)
  {
    v45 = 0;
    v42 = *(CMTime *)(*(_QWORD *)(a2 + 80) + 112);
    result = sub_1D4D90724(result, a3, &v42, &v45);
    if (result)
    {
      v8 = *a3;
      v9 = (double *)(*a3 + 304 * v45);
      v10 = v9[7];
      v11 = v9[8];
      v12 = v9[4];
      v13 = v9[5];
      v14 = v9[6];
      v15 = v12 * v11 - v10 * v13;
      v16 = *v9;
      v17 = v9[1];
      v19 = v9[2];
      v18 = v9[3];
      v20 = v10 * v19 - v17 * v11;
      v48 = v15;
      v49 = v20;
      v21 = v17 * v13 - v12 * v19;
      v50 = v21;
      v22 = v20 * v18 + v16 * v15 + v14 * v21;
      if (v22 >= 2.22044605e-16 || v22 <= -2.22044605e-16)
      {
        v48 = v15 / v22;
        v49 = v20 / v22;
        v50 = v21 / v22;
        v51 = (v14 * v13 - v18 * v11) / v22;
        v52 = (v16 * v11 - v14 * v19) / v22;
        v53 = (v18 * v19 - v16 * v13) / v22;
        v54 = (v18 * v10 - v14 * v12) / v22;
        v55 = (v14 * v17 - v16 * v10) / v22;
        v56 = (v16 * v12 - v18 * v17) / v22;
      }
      v24 = 0;
      v25 = *(_QWORD *)(a2 + 80);
      do
      {
        v26 = 0;
        v27 = &v48;
        do
        {
          v28 = 0;
          v29 = 0.0;
          v30 = v27;
          do
          {
            v31 = *v30;
            v30 += 3;
            v29 = v29 + *(double *)(v25 + v28) * v31;
            v28 += 8;
          }
          while (v28 != 24);
          *((double *)&v57 + 3 * v24 + v26++) = v29;
          ++v27;
        }
        while (v26 != 3);
        ++v24;
        v25 += 24;
      }
      while (v24 != 3);
      v32 = 0;
      v33 = v8 + 304 * v44;
      v46[2] = v59;
      v46[3] = v60;
      v47 = v61;
      v46[0] = v57;
      v46[1] = v58;
      do
      {
        v34 = 0;
        v35 = v46;
        do
        {
          v36 = 0;
          v37 = 0.0;
          v38 = (double *)v35;
          do
          {
            v39 = *v38;
            v38 += 3;
            v37 = v37 + *(double *)(v33 + v36) * v39;
            v36 += 8;
          }
          while (v36 != 24);
          *((double *)&v57 + 3 * v32 + v34++) = v37;
          v35 = (_OWORD *)((char *)v35 + 8);
        }
        while (v34 != 3);
        ++v32;
        v33 += 24;
      }
      while (v32 != 3);
      v40 = v60;
      *(_OWORD *)(a4 + 32) = v59;
      *(_OWORD *)(a4 + 48) = v40;
      *(_QWORD *)(a4 + 64) = v61;
      v41 = v58;
      *(_OWORD *)a4 = v57;
      *(_OWORD *)(a4 + 16) = v41;
      return 1;
    }
  }
  return result;
}

void sub_1D4D90268(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5, const double *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double *v27;
  double v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[72];
  double v32[9];
  _OWORD v33[4];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  v6 = a4[1];
  v8 = (v6 - *a4) >> 4;
  v32[0] = 1.0;
  memset(&v32[1], 0, 24);
  v9 = 0x86BCA1AF286BCA1BLL * v8;
  v32[8] = 1.0;
  v32[4] = 1.0;
  memset(&v32[5], 0, 24);
  if (v6 != v7)
  {
    v14 = 0;
    v15 = 0;
    v16 = (a2 - a1) / (double)(v9 - (v9 > 1));
    do
    {
      v17 = a1 + v16 * (double)(int)v15;
      sub_1D4D89430(v32, a6, (uint64_t)v31, a5, v17);
      v18 = *a4;
      v19 = 0x86BCA1AF286BCA1BLL * ((a4[1] - *a4) >> 4);
      if (v19 <= v15)
        sub_1D4D5DDC8();
      v20 = 0;
      v21 = v18 + 304 * v15;
      v22 = v18 + v14;
      do
      {
        v23 = 0;
        v24 = (double *)v31;
        do
        {
          v25 = 0;
          v26 = 0.0;
          v27 = v24;
          do
          {
            v28 = *v27;
            v27 += 3;
            v26 = v26 + *(double *)(v22 + v25) * v28;
            v25 += 8;
          }
          while (v25 != 24);
          *((double *)v33 + 3 * v20 + v23++) = v26;
          ++v24;
        }
        while (v23 != 3);
        ++v20;
        v22 += 24;
      }
      while (v20 != 3);
      v29 = v33[3];
      *(_OWORD *)(v21 + 32) = v33[2];
      *(_OWORD *)(v21 + 48) = v29;
      *(_QWORD *)(v21 + 64) = v34;
      v30 = v33[1];
      *(_OWORD *)v21 = v33[0];
      *(_OWORD *)(v21 + 16) = v30;
      ++v15;
      v14 += 304;
    }
    while (v19 > v15);
  }
}

uint64_t sub_1D4D90420(float *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, int a5, int a6, int *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int32_t v21;
  CMTime v23;
  CMTime v24;
  CMTime rhs;
  CMTime lhs;
  CMTime v27;
  CMTime time2;
  CMTime time1;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;

  v40 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  v7 = *a2;
  v39 = *(CMTime *)(*a2 + 304 * a5 + 112);
  v38 = *(CMTime *)(v7 + 304 * a6 + 112);
  v9 = *a4;
  v8 = a4[1];
  if (v8 == *a4)
    return 0;
  v15 = 0;
  v16 = -1;
  do
  {
    v17 = *(_QWORD *)(v9 + 8 * v15);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
      {
        v19 = *(_QWORD *)(v17 + 64);
        if (v19)
        {
          v37 = *(CMTime *)(v18 + 28);
          v36 = *(CMTime *)(v19 + 28);
          v35 = v39;
          v34 = *(CMTime *)(v18 + 28);
          v33 = v38;
          if (sub_1D4D90690(&v35, &v34, &v33))
          {
            v32 = v39;
            v31 = v36;
            v30 = v38;
            v20 = sub_1D4D90690(&v32, &v31, &v30);
          }
          else
          {
            v20 = 0;
          }
          time1 = v39;
          time2 = v38;
          v21 = CMTimeCompare(&time1, &time2);
          if (v20 && v21 < 0 && sub_1D4D8FEA8(a1, a2, a3, v17))
          {
            memset(&v27, 0, sizeof(v27));
            lhs = v36;
            rhs = v37;
            CMTimeSubtract(&v27, &lhs, &rhs);
            v24 = v27;
            v23 = v40;
            if (CMTimeCompare(&v24, &v23) >= 1)
            {
              v40 = v27;
              v16 = v15;
            }
          }
          v9 = *a4;
          v8 = a4[1];
        }
      }
    }
    ++v15;
  }
  while (v15 < (v8 - v9) >> 3);
  if (v16 == -1)
    return 0;
  *a7 = v16;
  return 1;
}

BOOL sub_1D4D90690(CMTime *a1, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  CMTime v7;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a1;
  if (CMTimeCompare(&time1, &time2) < 0)
    return 0;
  v7 = *a2;
  v6 = *a3;
  return CMTimeCompare(&v7, &v6) < 1;
}

BOOL sub_1D4D90724(uint64_t a1, _QWORD *a2, CMTime *a3, unint64_t *a4)
{
  uint64_t v6;
  int32_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  int32_t v15;
  uint64_t v16;
  CMTimeEpoch v17;
  CMTime v19;
  CMTime v20;
  CMTime time2;
  CMTime time1;

  v6 = a2[1];
  if (v6 == *a2)
  {
    v10 = 0;
    v9 = a2[1];
  }
  else
  {
    time1 = *(CMTime *)(*a2 + 112);
    time2 = *a3;
    v8 = CMTimeCompare(&time1, &time2);
    v6 = *a2;
    v9 = a2[1];
    if (v8 <= 0)
    {
      v11 = 0;
      v12 = 416;
      do
      {
        v10 = v11++;
        if (0x86BCA1AF286BCA1BLL * ((v9 - v6) >> 4) <= v11)
          break;
        v13 = (__int128 *)(v6 + v12);
        v14 = *v13;
        time1.epoch = *((_QWORD *)v13 + 2);
        *(_OWORD *)&time1.value = v14;
        time2 = *a3;
        v15 = CMTimeCompare(&time1, &time2);
        v6 = *a2;
        v9 = a2[1];
        v12 += 304;
      }
      while (v15 < 1);
    }
    else
    {
      v10 = 0;
    }
  }
  *a4 = v10;
  if (v10 >= 0x86BCA1AF286BCA1BLL * ((v9 - v6) >> 4))
    return 0;
  v20 = *a3;
  v16 = v6 + 304 * v10;
  v17 = *(_QWORD *)(v16 + 128);
  *(_OWORD *)&v19.value = *(_OWORD *)(v16 + 112);
  v19.epoch = v17;
  return CMTimeCompare(&v20, &v19) == 0;
}

void sub_1D4D908A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BOOL8 v15;
  _BOOL8 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL8 v19;
  uint64_t v20;
  CMTime v21;
  CMTime v22;
  unint64_t v23;
  unint64_t v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  double v35[10];

  v35[9] = *(double *)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 48);
  v34.epoch = *(_QWORD *)(v8 + 44);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_OWORD *)(v9 + 28);
  v33.epoch = *(_QWORD *)(v9 + 44);
  v11 = *a3;
  v12 = a3[1];
  v32.epoch = *(_QWORD *)(*a3 + 128);
  *(_OWORD *)&v34.value = *(_OWORD *)(v8 + 28);
  *(_OWORD *)&v33.value = v10;
  *(_OWORD *)&v32.value = *(_OWORD *)(v11 + 112);
  v31 = *(CMTime *)(v12 - 192);
  v13 = *(_OWORD *)(v11 + 112);
  v30.epoch = *(_QWORD *)(v11 + 128);
  *(_OWORD *)&v30.value = v13;
  v14 = *(_OWORD *)(v8 + 28);
  v29.epoch = *(_QWORD *)(v8 + 44);
  *(_OWORD *)&v29.value = v14;
  v28 = v31;
  if (sub_1D4D90690(&v30, &v29, &v28))
  {
    v27 = v32;
    v26 = v33;
    v25 = v31;
    v15 = sub_1D4D90690(&v27, &v26, &v25);
    if (v15)
    {
      v23 = 0;
      v24 = 0;
      v22 = v34;
      v16 = sub_1D4D90724(v15, a3, &v22, &v24);
      v17 = v16;
      v21 = v33;
      v18 = sub_1D4D90724(v16, a3, &v21, &v23);
      if (v17 && v18)
      {
        v19 = sub_1D4D8FFD8(a1, a2, a3, (uint64_t)v35);
        if (v19)
        {
          v20 = v23 + ~v24;
          if (v20 <= 1)
            v20 = 1;
          sub_1D4D90268(-(1.0 / (double)v20 * (double)v24), (double)(~v23 - 0x79435E50D79435E5 * ((a3[1] - *a3) >> 4)) * (1.0 / (double)v20) + 1.0, v19, a3, a4, v35);
        }
      }
    }
  }
}

uint64_t *sub_1D4D90AA4(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v31;
  unint64_t v32;
  __int128 *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  double v37;
  double *v38;
  double v39;
  uint64_t v40;
  float64x2_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  double v66;
  double *v67;
  double v68;
  uint64_t v69;
  float64x2_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  void *__p;
  void *v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (v8)
  {
    v9 = v8 / 304;
    v10 = v9 <= 1 ? 1 : v9;
    if (*(_QWORD *)(v7 + 104) != a6)
    {
      v11 = 0;
      v77 = (uint64_t *)(v7 + 408);
      v78 = v10 - 1;
      while (v78 != v11)
      {
        v79 = *v77;
        v77 += 38;
        ++v11;
        if (v79 == a6)
        {
          if (v9 <= v11)
            break;
          goto LABEL_7;
        }
      }
    }
  }
  v11 = 0;
LABEL_7:
  v12 = (uint64_t *)operator new();
  v13 = 0;
  v14 = 0;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  v115 = 0x3FF0000000000000uLL;
  v116 = 0uLL;
  v117 = 0x3FF0000000000000uLL;
  v118 = 0uLL;
  v119 = 0x3FF0000000000000;
  v80 = v11;
  if (v11 > a4)
  {
    do
    {
      v15 = *a2;
      v16 = (double *)(*a2 + 304 * v11);
      v17 = v16[7];
      v18 = v16[8];
      v19 = v16[4];
      v20 = v16[5];
      v21 = v16[6];
      v22 = v19 * v18 - v17 * v20;
      v23 = *v16;
      v24 = v16[1];
      v26 = v16[2];
      v25 = v16[3];
      v27 = v17 * v26 - v24 * v18;
      v106 = v22;
      v107 = v27;
      v28 = v24 * v20 - v19 * v26;
      v108 = v28;
      v29 = v27 * v25 + v23 * v22 + v21 * v28;
      if (v29 >= 2.22044605e-16 || v29 <= -2.22044605e-16)
      {
        v106 = v22 / v29;
        v107 = v27 / v29;
        v108 = v28 / v29;
        v109 = (v21 * v20 - v25 * v18) / v29;
        v110 = (v23 * v18 - v21 * v26) / v29;
        v111 = (v25 * v26 - v23 * v20) / v29;
        v112 = (v25 * v17 - v21 * v19) / v29;
        v113 = (v21 * v24 - v23 * v17) / v29;
        v114 = (v23 * v19 - v25 * v24) / v29;
      }
      v31 = 0;
      v32 = v11 - 1;
      v33 = &v115;
      do
      {
        v34 = 0;
        v35 = &v106;
        do
        {
          v36 = 0;
          v37 = 0.0;
          v38 = v35;
          do
          {
            v39 = *v38;
            v38 += 3;
            v37 = v37 + *(double *)((char *)v33 + v36) * v39;
            v36 += 8;
          }
          while (v36 != 24);
          *((double *)&v85 + 3 * v31 + v34++) = v37;
          ++v35;
        }
        while (v34 != 3);
        ++v31;
        v33 = (__int128 *)((char *)v33 + 24);
      }
      while (v31 != 3);
      v40 = 0;
      v119 = v89;
      v117 = v87;
      v118 = v88;
      v115 = v85;
      v116 = v86;
      v41 = (float64x2_t)vdupq_lane_s64(v89, 0);
      do
      {
        *(__int128 *)((char *)&v115 + v40) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v115 + v40), v41);
        v40 += 16;
      }
      while (v40 != 64);
      v119 = 0x3FF0000000000000;
      sub_1D4D5F924((uint64_t)&v85, *(_QWORD *)(v15 + 304 * v32 + 104), (uint64_t)&v115);
      v42 = v15 + 304 * v32;
      v43 = *(_OWORD *)(v42 + 112);
      v95 = *(_QWORD *)(v42 + 128);
      v94 = v43;
      v44 = v15 + 304 * v11;
      v96 = *(_DWORD *)(v44 + 168);
      v91 = *(_BYTE *)(v44 + 75);
      v90 = *(_WORD *)(v44 + 73);
      v97 = *(_DWORD *)(v44 + 192);
      v45 = *(_OWORD *)(v44 + 252);
      v46 = *(_OWORD *)(v44 + 284);
      v103 = *(_OWORD *)(v44 + 268);
      v104 = v46;
      v102 = v45;
      v47 = *(_OWORD *)(v44 + 196);
      v48 = *(_OWORD *)(v44 + 212);
      v49 = *(_OWORD *)(v44 + 228);
      v101 = *(_QWORD *)(v44 + 244);
      v99 = v48;
      v100 = v49;
      v98 = v47;
      v105 = *(_BYTE *)(v44 + 300);
      sub_1D4D91070(v12, *v12, (unint64_t)&v85);
      if (__p)
      {
        v93 = __p;
        operator delete(__p);
      }
      --v11;
    }
    while (v32 > a4);
    v14 = v12[1];
    v13 = v12[2];
    v11 = v80;
  }
  v116 = 0uLL;
  v115 = 0x3FF0000000000000uLL;
  v117 = 0x3FF0000000000000uLL;
  v118 = 0uLL;
  v119 = 0x3FF0000000000000;
  v50 = *a2;
  v51 = *a2 + 304 * v11;
  v52 = (uint64_t *)(v51 + 104);
  if (v14 >= v13)
  {
    v53 = sub_1D4D95E60(v12, v52, (uint64_t)&v115);
    v11 = v80;
  }
  else
  {
    sub_1D4D5F924(v14, *v52, (uint64_t)&v115);
    v53 = v14 + 304;
    v12[1] = v14 + 304;
  }
  v12[1] = v53;
  v54 = v50 + 304 * v11;
  v55 = *(_OWORD *)(v54 + 112);
  *(_QWORD *)(v53 - 176) = *(_QWORD *)(v54 + 128);
  *(_OWORD *)(v53 - 192) = v55;
  sub_1D4D8F018(v51, v53 - 304, a7);
  v56 = v80 + 1;
  if (v80 + 1 <= a5)
  {
    v57 = 304 * v80 + 304;
    do
    {
      v58 = 0;
      v59 = *a2;
      v60 = *a2 + 304 * v56;
      v61 = *a2 + v57;
      v62 = &v115;
      do
      {
        v63 = 0;
        v64 = (double *)v61;
        do
        {
          v65 = 0;
          v66 = 0.0;
          v67 = v64;
          do
          {
            v68 = *v67;
            v67 += 3;
            v66 = v66 + *(double *)((char *)v62 + v65) * v68;
            v65 += 8;
          }
          while (v65 != 24);
          *((double *)&v85 + 3 * v58 + v63++) = v66;
          ++v64;
        }
        while (v63 != 3);
        ++v58;
        v62 = (__int128 *)((char *)v62 + 24);
      }
      while (v58 != 3);
      v69 = 0;
      v119 = v89;
      v117 = v87;
      v118 = v88;
      v115 = v85;
      v116 = v86;
      v70 = (float64x2_t)vdupq_lane_s64(v89, 0);
      do
      {
        *(__int128 *)((char *)&v115 + v69) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v115 + v69), v70);
        v69 += 16;
      }
      while (v69 != 64);
      v119 = 0x3FF0000000000000;
      v71 = (uint64_t *)(v59 + 304 * v56 + 104);
      v72 = v12[1];
      if (v72 >= v12[2])
      {
        v73 = sub_1D4D95E60(v12, v71, (uint64_t)&v115);
      }
      else
      {
        sub_1D4D5F924(v12[1], *v71, (uint64_t)&v115);
        v73 = v72 + 304;
        v12[1] = v72 + 304;
      }
      v12[1] = v73;
      v74 = v59 + 304 * v56;
      v75 = *(_OWORD *)(v74 + 112);
      *(_QWORD *)(v73 - 176) = *(_QWORD *)(v74 + 128);
      *(_OWORD *)(v73 - 192) = v75;
      sub_1D4D8F018(v60, v73 - 304, a7);
      ++v56;
      v57 += 304;
    }
    while (v56 <= a5);
  }
  return v12;
}

void sub_1D4D9103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 8) = v26;
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1D4D91070(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _OWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v4 = (_OWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x86BCA1AF286BCA1BLL * ((a2 - *a1) >> 4);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v25 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v25 > 0xD79435E50D7943)
      sub_1D4D5DFA8();
    v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x6BCA1AF286BCA1)
      v27 = 0xD79435E50D7943;
    else
      v27 = v25;
    v34 = v9;
    if (v27)
      v28 = (char *)sub_1D4D5F57C(v9, v27);
    else
      v28 = 0;
    v30 = v28;
    v31 = &v28[304 * v8];
    v32 = v31;
    v33 = &v28[304 * v27];
    sub_1D4D95AE0(&v30, a3);
    v4 = (_OWORD *)sub_1D4D5FDFC(a1, &v30, (uint64_t)v4);
    sub_1D4D5F774((uint64_t)&v30);
  }
  else if (a2 == v6)
  {
    sub_1D4D635B4((uint64_t)a1, a3);
  }
  else
  {
    sub_1D4D5FBF8((uint64_t)a1, a2, v6, a2 + 304);
    if ((unint64_t)v4 <= a3)
      a3 += 304 * (a1[1] > a3);
    *v4 = *(_OWORD *)a3;
    v12 = *(_OWORD *)(a3 + 16);
    v13 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)((char *)v4 + 60) = *(_OWORD *)(a3 + 60);
    v4[2] = v13;
    v4[3] = v14;
    v4[1] = v12;
    if (v4 != (_OWORD *)a3)
      sub_1D4D602AC((char *)(v7 + 304 * v8 + 80), *(char **)(a3 + 80), *(_QWORD *)(a3 + 88), (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 6);
    v15 = v7 + 304 * v8;
    *(_OWORD *)(v15 + 104) = *(_OWORD *)(a3 + 104);
    v16 = *(_OWORD *)(a3 + 120);
    v17 = *(_OWORD *)(a3 + 136);
    v18 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)(v15 + 168) = *(_OWORD *)(a3 + 168);
    *(_OWORD *)(v15 + 152) = v18;
    *(_OWORD *)(v15 + 136) = v17;
    *(_OWORD *)(v15 + 120) = v16;
    v19 = *(_OWORD *)(a3 + 184);
    v20 = *(_OWORD *)(a3 + 200);
    v21 = *(_OWORD *)(a3 + 216);
    *(_OWORD *)(v15 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(v15 + 216) = v21;
    *(_OWORD *)(v15 + 200) = v20;
    *(_OWORD *)(v15 + 184) = v19;
    v22 = *(_OWORD *)(a3 + 264);
    v23 = *(_OWORD *)(a3 + 280);
    v24 = *(_QWORD *)(a3 + 293);
    *(_OWORD *)(v15 + 248) = *(_OWORD *)(a3 + 248);
    *(_QWORD *)(v15 + 293) = v24;
    *(_OWORD *)(v15 + 264) = v22;
    *(_OWORD *)(v15 + 280) = v23;
  }
  return v4;
}

void sub_1D4D91298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4D912AC(_QWORD *a1, unint64_t a2, char a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int v8;
  unint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  _OWORD v35[4];
  double v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 1;
  v5 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v8 = a2;
    v9 = HIDWORD(a2);
    while (1)
    {
      v10 = (double *)v5[5];
      v11 = v10[7];
      v12 = v10[8];
      v13 = v10[4];
      v14 = v10[5];
      v15 = v10[6];
      v16 = v13 * v12 - v11 * v14;
      v17 = *v10;
      v18 = v10[1];
      v20 = v10[2];
      v19 = v10[3];
      v21 = v11 * v20 - v18 * v12;
      *(double *)&v30 = v16;
      *((double *)&v30 + 1) = v21;
      v22 = v18 * v14 - v13 * v20;
      *(double *)&v31 = v22;
      v23 = v21 * v19 + v17 * v16 + v15 * v22;
      if (v23 >= 2.22044605e-16 || v23 <= -2.22044605e-16)
      {
        *(double *)&v30 = v16 / v23;
        *((double *)&v30 + 1) = v21 / v23;
        *(double *)&v31 = v22 / v23;
        *((double *)&v31 + 1) = (v15 * v14 - v19 * v12) / v23;
        *(double *)&v32 = (v17 * v12 - v15 * v20) / v23;
        *((double *)&v32 + 1) = (v19 * v20 - v17 * v14) / v23;
        *(double *)&v33 = (v19 * v11 - v15 * v13) / v23;
        *((double *)&v33 + 1) = (v15 * v18 - v17 * v11) / v23;
        v34 = (v17 * v13 - v19 * v18) / v23;
      }
      if ((a3 & 1) == 0)
        break;
      sub_1D4D8F9DC((uint64_t)v35, (double *)&v30, v8, v9, 1);
      if (a4)
        goto LABEL_13;
LABEL_14:
      v25 = 0;
      v26 = v5[5];
      do
      {
        *(_QWORD *)(v26 + v25) = *(_QWORD *)((char *)v35 + v25);
        v25 += 8;
      }
      while (v25 != 72);
      v27 = (_QWORD *)v5[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v5[2];
          v29 = *v28 == (_QWORD)v5;
          v5 = v28;
        }
        while (!v29);
      }
      v5 = v28;
      if (v28 == v4)
        return;
    }
    v35[2] = v32;
    v35[3] = v33;
    v36 = v34;
    v35[0] = v30;
    v35[1] = v31;
    if (!a4)
      goto LABEL_14;
LABEL_13:
    sub_1D4D732A0((uint64_t)v35, (uint64_t)v35);
    goto LABEL_14;
  }
}

void sub_1D4D914B0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  unint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  void *v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  void *v57[3];
  void *v58[2];
  void *v59[2];
  __int128 v60;
  void *v61[2];
  void *v62[2];
  __int128 v63;
  void *v64[2];
  uint64_t v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v13 = sub_1D4D5B2D0((_QWORD *)a4);
  v15 = *a2;
  v14 = a2[1];
  if (v13)
    v16 = 4;
  else
    v16 = 9;
  sub_1D4D60C60(a1);
  v65 = 0;
  v63 = 0u;
  *(_OWORD *)v64 = 0u;
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)v62 = 0u;
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  *(_OWORD *)v58 = 0u;
  if (v13)
  {
    if (v58 != (void **)a4)
    {
      sub_1D4D6A724((char *)v58, *(char **)a4, *(_QWORD *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
      sub_1D4D954DC((char *)&v59[1], *(char **)(a4 + 24), *(_QWORD *)(a4 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3));
      sub_1D4D6A724((char *)v61, *(char **)(a4 + 48), *(_QWORD *)(a4 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3));
      sub_1D4D954DC((char *)&v62[1], *(char **)(a4 + 72), *(_QWORD *)(a4 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 3));
    }
    sub_1D4D9544C(v64, a4 + 96);
    v66 = *(_OWORD *)(a4 + 120);
  }
  if (v14 != v15)
  {
    v17 = 0;
    if ((int)a3 >= 0)
      v18 = a3;
    else
      v18 = a3 + 1;
    v19 = (double)(v18 >> 1);
    v20 = (v14 - v15) >> 4;
    if (a3 >= 0)
      v21 = HIDWORD(a3);
    else
      v21 = HIDWORD(a3) + 1;
    v22 = (double)(v21 >> 1);
    if (v20 <= 1)
      v23 = 1;
    else
      v23 = (v14 - v15) >> 4;
    v24 = -(uint64_t)v20;
    while (*(double *)(*a2 + v17) < 0.0 || *(double *)(*a2 + v17 + 8) < 0.0)
    {
      __p = 0uLL;
      *(_QWORD *)&v68 = 0;
      sub_1D4D805DC(a1, (uint64_t)&__p);
      v25 = (void *)__p;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
LABEL_44:
        operator delete(v25);
      }
LABEL_45:
      v17 += 16;
      ++v24;
      if (!--v23)
        goto LABEL_46;
    }
    sub_1D4D604C8(v57, v16);
    if (v13)
    {
      if (sub_1D4D5B2D0(v58))
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58[1] - (char *)v58[0]) >> 3);
      else
        LODWORD(v26) = 0;
      v31 = v24 + (int)v26;
      v32 = (double *)(*(_QWORD *)(a4 + 72) + 72 * v31);
      v33 = v32[7];
      v34 = v32[8];
      v35 = v32[4];
      v36 = v32[5];
      v37 = v32[6];
      v38 = v35 * v34 - v33 * v36;
      v39 = *v32;
      v40 = v32[1];
      v42 = v32[2];
      v41 = v32[3];
      v43 = v33 * v42 - v40 * v34;
      v44 = v40 * v36 - v35 * v42;
      v45 = v43 * v41 + *v32 * v38 + v37 * v44;
      if (v45 >= 2.22044605e-16 || v45 <= -2.22044605e-16)
      {
        v38 = v38 / v45;
        v43 = v43 / v45;
        v44 = v44 / v45;
        v5 = (v37 * v36 - v41 * v34) / v45;
        v4 = (v41 * v33 - v37 * v35) / v45;
        v6 = (v39 * v34 - v37 * v42) / v45;
        v7 = (v41 * v42 - v39 * v36) / v45;
        v8 = (v37 * v40 - v39 * v33) / v45;
        v9 = (v39 * v35 - v41 * v40) / v45;
      }
      v47 = (double *)(*a2 + v17);
      v48 = v47[1];
      v49 = v44 + v43 * v48 + v38 * *v47;
      v50 = v9 + v8 * v48 + v4 * *v47;
      v51 = (v7 + v6 * v48 + v5 * *v47) / v50;
      v69 = 0;
      v73 = 0;
      __p = 0u;
      v68 = 0u;
      *(double *)&v68 = v49 / v50;
      v70 = v51;
      v71 = -(v49 / v50);
      v72 = -v51;
      sub_1D4D7333C((uint64_t)v59[1] + 72 * v31, &__p);
      v52 = v57[0];
      v53 = sub_1D4D63DD0(*(double *)&v66, *((double *)&v66 + 1));
      sub_1D4D63DDC((uint64_t)v52, &v59[1], &v62[1], v31, v53);
      v54 = a1[1];
      if (v54 >= a1[2])
      {
        v55 = sub_1D4D959CC(a1, (uint64_t)v57);
      }
      else
      {
        sub_1D4D9597C((uint64_t)a1, (uint64_t)v57);
        v55 = v54 + 24;
      }
      a1[1] = v55;
    }
    else
    {
      sub_1D4D604C8(&__p, 9uLL);
      v27 = __p;
      *(_QWORD *)(__p + 16) = 0;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)v27 = 0x3FF0000000000000;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_QWORD *)(v27 + 64) = 0x3FF0000000000000;
      v28 = (double *)(*a2 + v17);
      *(double *)(v27 + 16) = *v28 - v19;
      *(double *)(v27 + 40) = v28[1] - v22;
      sub_1D4D8F9DC((uint64_t)v57[0], (double *)v27, a3, SHIDWORD(a3), 1);
      sub_1D4D732A0((uint64_t)v57[0], (uint64_t)v57[0]);
      v29 = a1[1];
      if (v29 >= a1[2])
      {
        v30 = sub_1D4D959CC(a1, (uint64_t)v57);
      }
      else
      {
        sub_1D4D9597C((uint64_t)a1, (uint64_t)v57);
        v30 = v29 + 24;
      }
      a1[1] = v30;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    v25 = v57[0];
    if (!v57[0])
      goto LABEL_45;
    v57[1] = v57[0];
    goto LABEL_44;
  }
LABEL_46:
  if (v64[0])
    operator delete(v64[0]);
  if (v62[1])
  {
    *(void **)&v63 = v62[1];
    operator delete(v62[1]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v59[1])
  {
    *(void **)&v60 = v59[1];
    operator delete(v59[1]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
}

void sub_1D4D919B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  sub_1D4D91A14((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D91A14(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t *sub_1D4D91A80(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if (a3)
  {
    v3 = result;
    v4 = *result;
    if (result[1] != *result)
    {
      v5 = 0;
      v6 = 0;
      if ((double)(int)a2 < (double)SHIDWORD(a2))
        v7 = (double)SHIDWORD(a2);
      else
        v7 = (double)(int)a2;
      v8 = -(double)(int)a2 / (v7 + v7);
      v9 = -(double)SHIDWORD(a2) / (v7 + v7);
      v10 = 1.0 / v7;
      do
      {
        result = (uint64_t *)CGRectIsNull(*(CGRect *)(v4 + v5));
        v4 = *v3;
        if ((result & 1) == 0)
        {
          v11 = (double *)(v4 + v5);
          v12 = *(double *)(v4 + v5);
          v13 = *(double *)(v4 + v5 + 8);
          v14 = v12 + *(double *)(v4 + v5 + 16);
          v15 = v13 + *(double *)(v4 + v5 + 24);
          v16 = v13 * 0.0;
          v17 = v8 + v13 * 0.0 + v10 * v12;
          v18 = v9 + v10 * v13 + v12 * 0.0;
          v19 = v16 + v12 * 0.0 + 1.0;
          v20 = v17 / v19;
          v21 = v18 / v19;
          v22 = v15 * 0.0 + v14 * 0.0 + 1.0;
          *v11 = v20;
          v11[1] = v21;
          v11[2] = (v8 + v15 * 0.0 + v10 * v14) / v22 - v20;
          v11[3] = (v9 + v10 * v15 + v14 * 0.0) / v22 - v21;
        }
        ++v6;
        v5 += 32;
      }
      while (v6 < (v3[1] - v4) >> 5);
    }
  }
  return result;
}

uint64_t sub_1D4D91BAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  id v10;
  char **v11;
  unint64_t v12;
  uint64_t v13;
  CGSize v14;
  const __CFDictionary *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  CGSize v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  CGSize *v25;
  CGSize size;
  char *v27;
  char *v28;
  CGSize *v29;
  CGSize v30;
  char *v31;
  uint64_t v32;
  void *v33;
  id v34;
  CGPoint **v35;
  unint64_t i;
  const __CFDictionary *v37;
  BOOL v38;
  unint64_t v39;
  CGPoint *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  CGPoint *v46;
  CGPoint *v47;
  CGPoint *v48;
  CGPoint *v49;
  CGPoint *v50;
  id v52;
  CGRect rect;

  v5 = a2;
  objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_MOTION_BLUR_VECTOR);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6
    || (objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_MOTION_BLUR_VECTOR),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = sub_1D4D92040(v7, (uint64_t *)a1),
        v7,
        v8)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) == a4)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_L1_SALIENT_RECTS);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_L1_SALIENT_RECTS);
      v52 = v5;
      v10 = (id)objc_claimAutoreleasedReturnValue();
      v11 = (char **)(a1 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
      sub_1D4D8082C((void **)(a1 + 72), objc_msgSend(v10, "count"));
      v12 = 0;
      v13 = MEMORY[0x1E0C9D628];
      while (objc_msgSend(v10, "count", v52) > v12)
      {
        v14 = *(CGSize *)(v13 + 16);
        rect.origin = *(CGPoint *)v13;
        rect.size = v14;
        objc_msgSend(v10, "objectAtIndexedSubscript:", v12);
        v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        v16 = CGRectMakeWithDictionaryRepresentation(v15, &rect);

        if (!v16)
        {

          v32 = 6;
          v5 = v52;
          goto LABEL_56;
        }
        v17 = *(_QWORD *)(a1 + 80);
        v18 = *(_QWORD *)(a1 + 88);
        if (v17 >= v18)
        {
          v20 = (uint64_t)(v17 - (_QWORD)*v11) >> 5;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59)
            sub_1D4D5DFA8();
          v22 = v18 - (_QWORD)*v11;
          if (v22 >> 4 > v21)
            v21 = v22 >> 4;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
            v23 = 0x7FFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
            v24 = (char *)sub_1D4D6123C(a1 + 88, v23);
          else
            v24 = 0;
          v25 = (CGSize *)&v24[32 * v20];
          size = rect.size;
          *v25 = (CGSize)rect.origin;
          v25[1] = size;
          v28 = *(char **)(a1 + 72);
          v27 = *(char **)(a1 + 80);
          v29 = v25;
          if (v27 != v28)
          {
            do
            {
              v30 = (CGSize)*((_OWORD *)v27 - 1);
              v29[-2] = *((CGSize *)v27 - 2);
              v29[-1] = v30;
              v29 -= 2;
              v27 -= 32;
            }
            while (v27 != v28);
            v27 = *v11;
          }
          v31 = (char *)&v25[2];
          *(_QWORD *)(a1 + 72) = v29;
          *(_QWORD *)(a1 + 80) = v25 + 2;
          *(_QWORD *)(a1 + 88) = &v24[32 * v23];
          if (v27)
            operator delete(v27);
          *(_QWORD *)(a1 + 80) = v31;
        }
        else
        {
          v19 = rect.size;
          *(CGPoint *)v17 = rect.origin;
          *(CGSize *)(v17 + 16) = v19;
          *(_QWORD *)(a1 + 80) = v17 + 32;
        }
        ++v12;
      }

      v5 = v52;
      if (a4 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 5)
        goto LABEL_28;
      v32 = 6;
    }
    else
    {
LABEL_28:
      objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_L1_CENTER_TARGETS);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        objc_msgSend(v5, "objectForKeyedSubscript:", IC_C_L1_CENTER_TARGETS);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v35 = (CGPoint **)(a1 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
        sub_1D4D8078C((void **)(a1 + 48), objc_msgSend(v34, "count"));
        for (i = 0; objc_msgSend(v34, "count") > i; ++i)
        {
          objc_msgSend(v34, "objectAtIndexedSubscript:", i);
          v37 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
          v38 = CGPointMakeWithDictionaryRepresentation(v37, &rect.origin);

          if (!v38)
          {

            goto LABEL_54;
          }
          v40 = *(CGPoint **)(a1 + 56);
          v39 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v40 >= v39)
          {
            v41 = v40 - *v35;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 60)
              sub_1D4D5DFA8();
            v43 = v39 - (_QWORD)*v35;
            if (v43 >> 3 > v42)
              v42 = v43 >> 3;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
              v44 = 0xFFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
              v45 = (char *)sub_1D4D61150(a1 + 64, v44);
            else
              v45 = 0;
            v46 = (CGPoint *)&v45[16 * v41];
            *v46 = rect.origin;
            v48 = *(CGPoint **)(a1 + 48);
            v47 = *(CGPoint **)(a1 + 56);
            v49 = v46;
            if (v47 != v48)
            {
              do
              {
                v49[-1] = v47[-1];
                --v49;
                --v47;
              }
              while (v47 != v48);
              v47 = *v35;
            }
            v50 = v46 + 1;
            *(_QWORD *)(a1 + 48) = v49;
            *(_QWORD *)(a1 + 56) = v46 + 1;
            *(_QWORD *)(a1 + 64) = &v45[16 * v44];
            if (v47)
              operator delete(v47);
            *(_QWORD *)(a1 + 56) = v50;
          }
          else
          {
            *v40 = rect.origin;
            *(_QWORD *)(a1 + 56) = v40 + 1;
          }
        }

        if (a4 == (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4)
          goto LABEL_52;
LABEL_54:
        v32 = 7;
      }
      else
      {
LABEL_52:
        v32 = 0;
      }
    }
  }
  else
  {
    v32 = 5;
  }
LABEL_56:

  return v32;
}

void sub_1D4D91FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1D4D92040(void *a1, uint64_t *a2)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t *v26;
  unint64_t v27;
  void *v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[128];
  uint64_t v40;

  v26 = a2;
  v40 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (v3 = objc_msgSend(v2, "count")) != 0)
  {
    v27 = v3;
    v28 = v2;
    v37 = 0uLL;
    v38 = 0;
    sub_1D4D8052C((uint64_t *)&v37, v3);
    v4 = 0;
    v29 = 0;
    while (1)
    {
      objc_msgSend(v28, "objectAtIndexedSubscript:", v4, v26);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      v6 = objc_msgSend(v5, "count");
      if (!v6)
        break;
      __p = 0;
      v35 = 0;
      v36 = 0;
      sub_1D4D78B88(&__p, v6);
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v7 = v5;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v31;
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v31 != v9)
              objc_enumerationMutation(v7);
            v11 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              v24 = 0;
              goto LABEL_32;
            }
            objc_msgSend(v11, "doubleValue");
            v13 = v12;
            v14 = v35;
            if (v35 >= v36)
            {
              v16 = (char *)__p;
              v17 = (v35 - (_BYTE *)__p) >> 3;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 61)
                sub_1D4D5DFA8();
              v19 = v36 - (_BYTE *)__p;
              if ((v36 - (_BYTE *)__p) >> 2 > v18)
                v18 = v19 >> 2;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                v20 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)sub_1D4D5E2CC((uint64_t)&v36, v20);
                v16 = (char *)__p;
                v14 = v35;
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[8 * v17];
              *(_QWORD *)v22 = v13;
              v15 = v22 + 8;
              while (v14 != v16)
              {
                v23 = *((_QWORD *)v14 - 1);
                v14 -= 8;
                *((_QWORD *)v22 - 1) = v23;
                v22 -= 8;
              }
              __p = v22;
              v35 = v15;
              v36 = &v21[8 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_QWORD *)v35 = v12;
              v15 = v14 + 8;
            }
            v35 = v15;
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
          if (v8)
            continue;
          break;
        }
      }

      sub_1D4D805DC((uint64_t *)&v37, (uint64_t)&__p);
      v24 = 1;
LABEL_32:
      if (__p)
      {
        v35 = (char *)__p;
        operator delete(__p);
      }

      if ((v24 & 1) == 0)
        goto LABEL_39;
      v29 = v27 <= ++v4;
      if (v4 == v27)
      {
        sub_1D4D6ABA8(v26);
        *(_OWORD *)v26 = v37;
        v26[2] = v38;
        v38 = 0;
        v37 = 0uLL;
        v29 = 1;
        goto LABEL_39;
      }
    }

LABEL_39:
    __p = &v37;
    sub_1D4D60C20((void ***)&__p);
    v2 = v28;
  }
  else
  {
    v29 = 0;
  }

  return v29;
}

void sub_1D4D92368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,uint64_t a24,char a25)
{
  __p = &a25;
  sub_1D4D60C20((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D4D923EC(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double **v7;
  double *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double *v17;
  double v18;
  uint64_t v19;

  sub_1D4D7D3A0(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (double **)(*a2 + v5);
      v19 = 0x3FF0000000000000;
      sub_1D4D69EE0((uint64_t)v7, 9uLL, &v19);
      v8 = *(double **)(v4 + v5);
      v9 = *v8;
      v10 = (float)(tanhf((float)(fabsf(v9) * 2.0) + -5.0) * 100.0) + 100.0;
      v11 = v8[1];
      v12 = (float)(tanhf((float)(fabsf(v11) * 2.0) + -5.0) * 100.0) + 100.0;
      v13 = (float)(tanhf((float)(fabsf(v10) * 2.0) + -5.0) * 100.0) + 100.0;
      v14 = (float)(tanhf((float)(fabsf(v12) * 2.0) + -5.0) * 100.0) + 100.0;
      if (v13 >= 1.0)
        v15 = v13;
      else
        v15 = 1.0;
      if (v14 < 1.0)
        v14 = 1.0;
      v16 = v15;
      v17 = *v7;
      v17[2] = v16;
      v18 = v14;
      v17[6] = v16;
      v17[7] = v18;
      v17[5] = v18;
      ++v6;
      v4 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1D4D92550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D60C20((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D92568(uint64_t a1, uint64_t *a2, signed int a3, int a4)
{
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  unint64_t *v15;
  unint64_t v16;

  sub_1D4D680C0(a2, a3, a4, (_QWORD *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1D4D92718(a2 + 6, a3, a4, (_QWORD *)(a1 + 48));
  sub_1D4D68134(a2 + 9, a3, a4, (_QWORD *)(a1 + 72));
  v8 = (uint64_t *)a2[3];
  if (v8 != a2 + 4)
  {
    do
    {
      v9 = sub_1D4D67AF0(*((_DWORD *)v8 + 8), a3, a4);
      if ((v9 & 0x80000000) == 0)
      {
        v15 = &v16;
        v16 = v9;
        v10 = sub_1D4D6057C((uint64_t **)(a1 + 24), &v16, (uint64_t)&unk_1D4DB2584, (uint64_t **)&v15);
        if (v8 != v10)
          sub_1D4D6A8F4((char *)v10 + 40, (char *)v8[5], v8[6], (v8[6] - v8[5]) >> 3);
      }
      v11 = (uint64_t *)v8[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v8[2];
          v13 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
    }
    while (v12 != a2 + 4);
  }
  return a1;
}

void sub_1D4D926C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v16;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 56) = v16;
    operator delete(v16);
  }
  sub_1D4D61048(v13, *(_QWORD **)(v12 + 32));
  a12 = (void **)v12;
  sub_1D4D60C20(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4D92718@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  v4 = *result;
  v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (v6 = (unint64_t)(v5 - v4) >> 4, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1)
      v7 = v6 - a2;
    else
      v7 = a3;
    if ((int)(v7 + a2) <= (int)v6)
      v8 = v7;
    else
      v8 = v6 - a2;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1D4D95F84(a4, (const void *)(v4 + 16 * a2), v4 + 16 * a2 + 16 * v8, v8);
  }
  return result;
}

char *sub_1D4D92780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;
  char *v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t *v13;

  sub_1D4D6B56C((uint64_t *)a1, *(__n128 **)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  result = sub_1D4D6BBC0(a1 + 72, *(_QWORD *)(a1 + 80), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 5);
  v7 = *(char **)(a2 + 24);
  if (v7 != (char *)(a2 + 32))
  {
    v8 = (uint64_t **)(a1 + 24);
    do
    {
      v12 = *((_QWORD *)v7 + 4) + a3;
      v13 = &v12;
      result = (char *)sub_1D4D6057C(v8, &v12, (uint64_t)&unk_1D4DB2584, (uint64_t **)&v13);
      if (v7 != result)
        result = sub_1D4D6A8F4(result + 40, *((char **)v7 + 5), *((_QWORD *)v7 + 6), (uint64_t)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5)) >> 3);
      v9 = (char *)*((_QWORD *)v7 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != (char *)(a2 + 32));
  }
  return result;
}

_QWORD *sub_1D4D92890@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>, _DWORD *a11)
{
  int v16;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  __int128 v31[9];
  char v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v16 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  v18 = HIDWORD(a2);
  if (a10 == -1.0)
    v19 = 0.1;
  else
    v19 = a10;
  v20 = *(float *)(a1 + 36);
  if (v20 == -1.0)
  {
    v22 = v19;
  }
  else
  {
    v21 = (float)(int)a2 / (float)SHIDWORD(a2);
    v22 = fmaxf(v19, (float)((float)(v20 / v21) * (float)(v19 + -1.0)) + 1.0);
    v19 = fmaxf(v19, (float)((float)(v21 / v20) * (float)(v19 + -1.0)) + 1.0);
  }
  if ((double)(int)a2 < (double)SHIDWORD(a2))
    v23 = (double)SHIDWORD(a2);
  else
    v23 = (double)(int)a2;
  v24.n128_f64[0] = sub_1D4D676AC((uint64_t)v31, a6, 1, (double)(int)a2 / v23, (double)SHIDWORD(a2) / v23, v22, v19);
  if (a7)
    v32 = 0;
  if (a8)
    v33 = 0;
  sub_1D4D677B4(v34, v24);
  if (a3)
  {
    sub_1D4D95634(v34, a3);
    sub_1D4D956CC(v36, a3 + 32);
  }
  if (a4 >= 1)
  {
    v38 = 1;
    LODWORD(v25) = a4 >> 1;
    if (a5 <= 0)
      v25 = v25;
    else
      v25 = a5;
    v39 = a4;
    v40 = v25;
  }
  sub_1D4D68670(v31, (uint64_t)v34, a9, a11);
  v26 = *a9;
  *(_DWORD *)(v26 + 264) = v16;
  *(_DWORD *)(v26 + 268) = v18;
  v27 = v37;
  if (v37 == v36)
  {
    v28 = 4;
    v27 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_26;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_26:
  result = v35;
  if (v35 == v34)
  {
    v30 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v30 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
}

void sub_1D4D92A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(exception_object);
}

void sub_1D4D92A9C(uint64_t a1, _DWORD *a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, int *a8)
{
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t i;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  const void *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  const void *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  int v68;
  int *v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  void *v75[3];
  uint64_t v76[3];
  __int128 v77;
  uint64_t v78;
  _BYTE v79[24];
  _BYTE *v80;
  _DWORD *v81;
  _BYTE v82[24];
  _BYTE *v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  void *__p[2];
  uint64_t v88;
  void *v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94[3];
  void *v95[2];
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  _QWORD v105[3];
  _QWORD *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v77 = 0uLL;
  v78 = 0;
  if (*a6 != a6[1])
  {
    sub_1D4D923EC(a6, __p);
    sub_1D4D6ABA8((uint64_t *)&v77);
    v77 = *(_OWORD *)__p;
    v78 = v88;
    __p[1] = 0;
    v88 = 0;
    __p[0] = 0;
    *(_QWORD *)&v101 = __p;
    sub_1D4D60C20((void ***)&v101);
  }
  v70 = a7;
  v71 = a6;
  v15 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a3[1] - *a3) >> 4);
  if (v14 == 1)
    v16 = 4;
  else
    v16 = 9;
  if (v14 == 1)
  {
    if (sub_1D4D5B2D0((_QWORD *)a4))
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
    else
      v17 = 0;
    if (v17 < (int)v15)
    {
      *a8 = 3;
      goto LABEL_115;
    }
    if (sub_1D4D5B2D0((_QWORD *)a4))
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
    else
      LODWORD(v18) = 0;
    v68 = v18 - v15;
  }
  else
  {
    v68 = 0;
  }
  *(_QWORD *)&v101 = 0;
  sub_1D4D6A0B8(__p, v16, &v101);
  sub_1D4D6A2D4(v76, (int)v15, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v66 = (int)v15;
  v69 = a8;
  v72 = v15;
  if (v14 == 1)
  {
    if ((int)v15 >= 1)
    {
      v19 = 0;
      v20 = v68;
      do
      {
        v21 = *(_QWORD *)(v76[0] + v19);
        v22 = sub_1D4D63DD0(*(double *)(a4 + 120), *(double *)(a4 + 128));
        sub_1D4D63DDC(v21, (_QWORD *)(a4 + 24), (_QWORD *)(a4 + 72), v20++, v22);
        v19 += 24;
      }
      while (24 * v72 != v19);
    }
  }
  else if ((int)v15 >= 1)
  {
    v23 = 0;
    do
    {
      sub_1D4D8F9DC((uint64_t)__p, (double *)(*a3 + 304 * v23), a5, SHIDWORD(a5), 1);
      sub_1D4D732A0((uint64_t)__p, (uint64_t)__p);
      v24 = 0;
      v25 = *(_QWORD *)(v76[0] + 24 * v23);
      do
      {
        *(_QWORD *)(v25 + v24 * 8) = __p[v24];
        ++v24;
      }
      while (v24 != 9);
      ++v23;
    }
    while (v23 != v72);
  }
  sub_1D4D6A85C(v75, 0x86BCA1AF286BCA1BLL * ((uint64_t)(a3[1] - *a3) >> 4));
  if (v72 >= 1)
  {
    v26 = 0;
    v27 = 112;
    do
    {
      v28 = *a3 + v27;
      v29 = (char *)v75[0] + v26;
      v30 = *(_OWORD *)v28;
      *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + 16);
      *(_OWORD *)v29 = v30;
      v26 += 24;
      v27 += 304;
    }
    while (24 * v72 != v26);
  }
  sub_1D4D67AEC((int)__p);
  if (v72 >= 1)
  {
    for (i = 0; i != v72; ++i)
    {
      if (v14 == 1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a4 + 96) + (((unint64_t)(i + v68) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (i + v68)) & 1) == 0)
          goto LABEL_38;
      }
      else if (!*(_BYTE *)(*a3 + 304 * i + 72))
      {
LABEL_38:
        v32 = v90;
        if (v90 >= v91)
        {
          v34 = (char *)v89;
          v35 = (v90 - (_BYTE *)v89) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_1D4D5DFA8();
          v37 = v91 - (_BYTE *)v89;
          if ((v91 - (_BYTE *)v89) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_1D4D5EA14((uint64_t)&v91, v38);
            v34 = (char *)v89;
            v32 = v90;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = i;
          v33 = v40 + 4;
          while (v32 != v34)
          {
            v41 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          v89 = v40;
          v90 = v33;
          v91 = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v90 = i;
          v33 = v32 + 4;
        }
        v90 = v33;
      }
    }
  }
  if (v71[6] != v71[7])
    sub_1D4D914B0(v94, v71 + 6, a5, a4);
  v42 = (const void *)v71[9];
  v43 = v71[10];
  v44 = v69;
  if (v42 != (const void *)v43)
  {
    v101 = 0uLL;
    v102 = 0;
    sub_1D4D61184(&v101, v42, v43, (v43 - (uint64_t)v42) >> 5);
    sub_1D4D91A80((uint64_t *)&v101, a5, 1);
    if (v95[0])
    {
      v95[1] = v95[0];
      operator delete(v95[0]);
    }
    *(_OWORD *)v95 = v101;
    v96 = v102;
  }
  if ((_QWORD)v77 != *((_QWORD *)&v77 + 1))
  {
    sub_1D4D6ABA8((uint64_t *)&v92);
    v92 = v77;
    v93 = v78;
    v78 = 0;
    v77 = 0uLL;
  }
  if (v14 != 1)
  {
    if (v71[5])
    {
      v50 = sub_1D4D60CB4((uint64_t *)&v101, (uint64_t)(v71 + 3));
      sub_1D4D912AC(v50, a5, 1, 1);
      sub_1D4D61048((uint64_t)&v99, *((_QWORD **)&v99 + 1));
      v51 = (_QWORD *)*((_QWORD *)&v101 + 1);
      v99 = v101;
      v100 = v102;
      if (v102)
      {
        *(_QWORD *)(*((_QWORD *)&v101 + 1) + 16) = (char *)&v99 + 8;
        *(_QWORD *)&v101 = (char *)&v101 + 8;
        *((_QWORD *)&v101 + 1) = 0;
        v102 = 0;
        v51 = 0;
      }
      else
      {
        *(_QWORD *)&v99 = (char *)&v99 + 8;
      }
      sub_1D4D61048((uint64_t)&v101, v51);
    }
LABEL_81:
    v86 = 0;
    if (!*(_QWORD *)(v70 + 24))
    {
      v59 = 0;
      v52 = (uint64_t)a2;
      goto LABEL_101;
    }
    v52 = (uint64_t)a2;
    v81 = a2;
    v53 = v82;
    sub_1D4D62E6C((uint64_t)v82, v70);
    v84 = a4;
    *(_QWORD *)&v101 = v81;
    v54 = (_QWORD *)&v101 + 1;
    sub_1D4D95FFC((uint64_t)&v101 + 8, (uint64_t)v82);
    v104 = v84;
    v55 = operator new(0x38uLL);
    v56 = v101;
    *v55 = &off_1E988B078;
    v55[1] = v56;
    sub_1D4D95FFC((uint64_t)(v55 + 2), (uint64_t)&v101 + 8);
    v55[6] = v104;
    v106 = v55;
    sub_1D4D9638C(v105, v85);
    v57 = v106;
    if (v106 == v105)
    {
      v58 = 4;
      v57 = v105;
    }
    else
    {
      if (!v106)
        goto LABEL_88;
      v58 = 5;
    }
    (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_88:
    if (v103 == (__int128 *)((char *)&v101 + 8))
    {
      v60 = 4;
    }
    else
    {
      if (!v103)
        goto LABEL_93;
      v60 = 5;
      v54 = v103;
    }
    (*(void (**)(_QWORD *))(*v54 + 8 * v60))(v54);
LABEL_93:
    if (v83 == v82)
    {
      v61 = 4;
    }
    else
    {
      if (!v83)
        goto LABEL_98;
      v61 = 5;
      v53 = v83;
    }
    (*(void (**)(_QWORD *))(*v53 + 8 * v61))(v53);
LABEL_98:
    v59 = (uint64_t)v86;
    if (v86)
    {
      if (v86 == v85)
      {
        v80 = v79;
        (*(void (**)(_QWORD *, _BYTE *))(v85[0] + 24))(v85, v79);
LABEL_102:
        sub_1D4D68858(v52, v76, (uint64_t)__p, (uint64_t)v79, v44);
        v62 = v80;
        if (v80 == v79)
        {
          v63 = 4;
          v62 = v79;
        }
        else
        {
          if (!v80)
            goto LABEL_107;
          v63 = 5;
        }
        (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_107:
        v64 = v86;
        if (v86 == v85)
        {
          v65 = 4;
          v64 = v85;
        }
        else
        {
          if (!v86)
            goto LABEL_112;
          v65 = 5;
        }
        (*(void (**)(void))(*v64 + 8 * v65))();
        goto LABEL_112;
      }
      v59 = (*(uint64_t (**)(void))(*v86 + 16))();
    }
LABEL_101:
    v80 = (_BYTE *)v59;
    goto LABEL_102;
  }
  sub_1D4D604C8(&v101, v66);
  if (v72 <= 0)
  {
    v49 = (const void *)v101;
  }
  else
  {
    v45 = 0;
    v46 = 72 * v68;
    do
    {
      v47 = *(double *)(*(_QWORD *)(a4 + 72) + v46);
      v48 = sub_1D4D63DD0(*(double *)(a4 + 120), *(double *)(a4 + 128));
      v49 = (const void *)v101;
      *(double *)(v101 + v45) = v47 / v48;
      v46 += 72;
      v45 += 8;
    }
    while (8 * v72 != v45);
    v44 = v69;
  }
  v73 = 0uLL;
  v74 = 0;
  sub_1D4D60B28(&v73, v49, *((uint64_t *)&v101 + 1), (uint64_t)(*((_QWORD *)&v101 + 1) - (_QWORD)v49) >> 3);
  if ((_QWORD)v97)
  {
    *((_QWORD *)&v97 + 1) = v97;
    operator delete((void *)v97);
  }
  v97 = v73;
  v98 = v74;
  v74 = 0;
  v73 = 0uLL;
  if ((_QWORD)v101)
  {
    *((_QWORD *)&v101 + 1) = v101;
    operator delete((void *)v101);
  }
  if (!v71[5])
    goto LABEL_81;
  puts("Path constraints not supported for L1 logRotScale model.");
  *v44 = 3;
LABEL_112:
  sub_1D4D62DB8((uint64_t)__p);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  __p[0] = v76;
  sub_1D4D60C20((void ***)__p);
LABEL_115:
  __p[0] = &v77;
  sub_1D4D60C20((void ***)__p);
}

void sub_1D4D9333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char *a46,char *a47,uint64_t a48)
{
  char *v49;
  uint64_t v50;

  v49 = a46;
  if (a46 == &a43)
  {
    v50 = 4;
    v49 = &a43;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_6:
  sub_1D4D62DB8((uint64_t)&a47);
  if (__p)
    operator delete(__p);
  a47 = &a26;
  sub_1D4D60C20((void ***)&a47);
  a47 = &a29;
  sub_1D4D60C20((void ***)&a47);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4D934D8(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t i;
  void *__p[3];

  if (a5)
  {
    v9 = (uint64_t *)operator new();
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    sub_1D4D61DA4(v9, *a2, a2[1], 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 4));
    sub_1D4D9368C(a5, a3, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 4), a4, SHIDWORD(a4), 0, (uint64_t)__p);
    v10 = a2[1];
    v11 = v10 - *a2;
    if (v10 != *a2)
    {
      v12 = 0;
      v13 = v11 / 304;
      v14 = *v9;
      v15 = 0x86BCA1AF286BCA1BLL * ((v9[1] - *v9) >> 4);
      v16 = (char *)__p[0];
      if (v13 <= 1)
        v13 = 1;
      do
      {
        if (v15 <= v12)
          sub_1D4D5DDC8();
        for (i = 0; i != 72; i += 8)
          *(_QWORD *)(v14 + i) = *(_QWORD *)&v16[i];
        ++v12;
        v14 += 304;
        v16 += 72;
      }
      while (v12 != v13);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    puts("Passed NULL l1StabResults to createSmoothingHomographiesWithL1()");
    return 0;
  }
  return v9;
}

void sub_1D4D93650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1D826897C](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_1D4D9368C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  unint64_t v10;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  double *v64;
  uint64_t v65;
  char *v66;
  double v67;
  uint64_t v68;
  double *v69;
  double v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  double v79;
  double *v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  const double *v85;
  float64x2_t v86;
  uint64_t j;
  double v88;
  float64x2_t v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  double v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  double v110;
  _QWORD v111[6];
  _QWORD v112[3];
  double v113[6];
  _QWORD v114[3];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  double v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v99 = a1;
  if (!a1)
  {
    puts("Passed NULL l1StabResults to getSmoothingHomographiesFromL1Results()");
LABEL_12:
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    return;
  }
  v10 = (a3 - a6);
  if ((int)v10 < 1)
    goto LABEL_12;
  v14 = sub_1D4D5B2D0(a2);
  v15 = v14 ? 4 : 9;
  v98 = v14;
  if (v14)
  {
    v16 = sub_1D4D5B2D0(a2) ? 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) : 0;
    if (v16 < v10)
      goto LABEL_12;
  }
  v95 = a2;
  v96 = a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_1D4D95764((void **)a7, v10);
  v97 = a3;
  if ((int)a3 > a6)
  {
    v18 = (double)a4;
    v19 = (double)a5;
    if ((double)a4 < (double)a5)
      v20 = (double)a5;
    else
      v20 = (double)a4;
    v21 = -v18 / (v20 + v20);
    v22 = -v19 / (v20 + v20);
    v94 = v114;
    v23 = v18 * 0.5;
    v24 = v19 * 0.5;
    v92 = a7 + 16;
    v93 = v112;
    v25 = a6;
    v26 = 8 * (int)v15 * (uint64_t)a6;
    v101 = 8 * v15;
    v27 = 72 * a6;
    do
    {
      v29 = *(_OWORD **)(a7 + 8);
      v28 = *(_QWORD *)(a7 + 16);
      if ((unint64_t)v29 >= v28)
      {
        v17 = *(_OWORD **)a7;
        v31 = 0x8E38E38E38E38E39 * (((uint64_t)v29 - *(_QWORD *)a7) >> 3);
        v32 = v31 + 1;
        if (v31 + 1 > 0x38E38E38E38E38ELL)
          sub_1D4D5DFA8();
        v33 = 0x8E38E38E38E38E39 * ((uint64_t)(v28 - (_QWORD)v17) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x1C71C71C71C71C7)
          v34 = 0x38E38E38E38E38ELL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)sub_1D4D618FC(v92, v34);
          v17 = *(_OWORD **)a7;
          v29 = *(_OWORD **)(a7 + 8);
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[72 * v31];
        *((_QWORD *)v36 + 8) = 0;
        *((_OWORD *)v36 + 2) = 0u;
        *((_OWORD *)v36 + 3) = 0u;
        *(_OWORD *)v36 = 0u;
        *((_OWORD *)v36 + 1) = 0u;
        if (v29 == v17)
        {
          v41 = &v35[72 * v31];
        }
        else
        {
          v37 = &v35[72 * v31];
          do
          {
            *(_OWORD *)(v37 - 72) = *(_OWORD *)((char *)v29 - 72);
            v38 = *(_OWORD *)((char *)v29 - 56);
            v39 = *(_OWORD *)((char *)v29 - 40);
            v40 = *(_OWORD *)((char *)v29 - 24);
            v41 = v37 - 72;
            *((_QWORD *)v37 - 1) = *((_QWORD *)v29 - 1);
            *(_OWORD *)(v37 - 24) = v40;
            *(_OWORD *)(v37 - 40) = v39;
            *(_OWORD *)(v37 - 56) = v38;
            v29 = (_OWORD *)((char *)v29 - 72);
            v37 -= 72;
          }
          while (v29 != v17);
        }
        v30 = v36 + 72;
        *(_QWORD *)a7 = v41;
        *(_QWORD *)(a7 + 8) = v36 + 72;
        *(_QWORD *)(a7 + 16) = &v35[72 * v34];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *((_QWORD *)v29 + 8) = 0;
        v29[2] = 0u;
        v29[3] = 0u;
        v30 = (char *)v29 + 72;
        *v29 = 0u;
        v29[1] = 0u;
      }
      v100 = &v91;
      *(_QWORD *)(a7 + 8) = v30;
      MEMORY[0x1E0C80A78](v17);
      v43 = (double *)((char *)&v91 - v42);
      v44 = 0;
      v45 = *(_QWORD *)(v99 + 8);
      do
      {
        v43[v44] = *(double *)(v45 + v26 + 8 * v44);
        ++v44;
      }
      while (v15 != v44);
      if (v98)
      {
        v46 = *((_QWORD *)v95 + 9);
        v47 = sub_1D4D63DD0(v95[15], v95[16]);
        sub_1D4D63E98((uint64_t)&v115, v43, (double *)(v46 + 72 * v25), v47);
        v48 = *(double *)&v117 * v119 - *((double *)&v118 + 1) * *((double *)&v117 + 1);
        *((double *)v30 - 9) = v48;
        v49 = *((double *)&v118 + 1) * *(double *)&v116 - *((double *)&v115 + 1) * v119;
        *((double *)v30 - 8) = v49;
        v50 = *((double *)&v115 + 1) * *((double *)&v117 + 1) - *(double *)&v117 * *(double *)&v116;
        *((double *)v30 - 7) = v50;
        v51 = v49 * *((double *)&v116 + 1) + *(double *)&v115 * v48 + *(double *)&v118 * v50;
        if (v51 >= 2.22044605e-16 || v51 <= -2.22044605e-16)
        {
          *((double *)v30 - 9) = v48 / v51;
          *((double *)v30 - 8) = v49 / v51;
          *((double *)v30 - 7) = v50 / v51;
          *((double *)v30 - 6) = (*(double *)&v118 * *((double *)&v117 + 1) - *((double *)&v116 + 1) * v119) / v51;
          *((double *)v30 - 3) = (*((double *)&v116 + 1) * *((double *)&v118 + 1) - *(double *)&v118 * *(double *)&v117)
                               / v51;
          *((double *)v30 - 5) = (*(double *)&v115 * v119 - *(double *)&v118 * *(double *)&v116) / v51;
          *((double *)v30 - 4) = (*((double *)&v116 + 1) * *(double *)&v116 - *(double *)&v115 * *((double *)&v117 + 1))
                               / v51;
          *((double *)v30 - 2) = (*(double *)&v118 * *((double *)&v115 + 1) - *(double *)&v115 * *((double *)&v118 + 1))
                               / v51;
          v88 = (*(double *)&v115 * *(double *)&v117 - *((double *)&v116 + 1) * *((double *)&v115 + 1)) / v51;
          *((double *)v30 - 1) = v88;
        }
        else
        {
          v88 = *((double *)v30 - 1);
        }
        a7 = v96;
        v89 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0);
        for (i = -72; i != -8; i += 16)
          *(float64x2_t *)&v30[i] = vdivq_f64(*(float64x2_t *)&v30[i], v89);
        *((_QWORD *)v30 - 1) = 0x3FF0000000000000;
      }
      else
      {
        v53 = 0;
        v54 = v30 - 72;
        v55 = v45 + v27;
        do
        {
          *(_QWORD *)((char *)&v106 + v53) = *(_QWORD *)(v55 + v53);
          v53 += 8;
        }
        while (v53 != 72);
        sub_1D4D7333C((uint64_t)v102, &v106);
        v110 = v105;
        v108 = v103;
        v109 = v104;
        v106 = v102[0];
        v107 = v102[1];
        v56 = *(double *)&v103 * v105 - *((double *)&v104 + 1) * *((double *)&v103 + 1);
        *((double *)v30 - 9) = v56;
        v57 = *((double *)&v109 + 1) * *(double *)&v107 - *((double *)&v106 + 1) * v110;
        *((double *)v30 - 8) = v57;
        v58 = *((double *)&v106 + 1) * *((double *)&v108 + 1) - *(double *)&v108 * *(double *)&v107;
        *((double *)v30 - 7) = v58;
        v59 = v57 * *((double *)&v107 + 1) + *(double *)&v106 * v56 + *(double *)&v109 * v58;
        if (v59 >= 2.22044605e-16 || v59 <= -2.22044605e-16)
        {
          *((double *)v30 - 9) = v56 / v59;
          *((double *)v30 - 8) = v57 / v59;
          *((double *)v30 - 7) = v58 / v59;
          *((double *)v30 - 6) = (*(double *)&v109 * *((double *)&v108 + 1) - *((double *)&v107 + 1) * v110) / v59;
          *((double *)v30 - 3) = (*((double *)&v107 + 1) * *((double *)&v109 + 1) - *(double *)&v109 * *(double *)&v108)
                               / v59;
          *((double *)v30 - 5) = (*(double *)&v106 * v110 - *(double *)&v109 * *(double *)&v107) / v59;
          *((double *)v30 - 4) = (*((double *)&v107 + 1) * *(double *)&v107 - *(double *)&v106 * *((double *)&v108 + 1))
                               / v59;
          *((double *)v30 - 2) = (*(double *)&v109 * *((double *)&v106 + 1) - *(double *)&v106 * *((double *)&v109 + 1))
                               / v59;
          *((double *)v30 - 1) = (*(double *)&v106 * *(double *)&v108 - *((double *)&v107 + 1) * *((double *)&v106 + 1))
                               / v59;
        }
        v61 = 0;
        v113[0] = 1.0 / v20;
        v113[1] = 0.0;
        v113[2] = v21;
        v113[3] = 0.0;
        v113[4] = 1.0 / v20;
        v113[5] = v22;
        v62 = v94;
        *v94 = 0;
        v62[1] = 0;
        v114[2] = 0x3FF0000000000000;
        *(double *)v111 = v20;
        v111[1] = 0;
        *(double *)&v111[2] = v23;
        v111[3] = 0;
        *(double *)&v111[4] = v20;
        *(double *)&v111[5] = v24;
        v63 = v93;
        *v93 = 0;
        v63[1] = 0;
        v64 = (double *)v111;
        v112[2] = 0x3FF0000000000000;
        do
        {
          v65 = 0;
          v66 = v30;
          do
          {
            v67 = 0.0;
            v68 = -72;
            v69 = v64;
            do
            {
              v70 = *v69++;
              v67 = v67 + v70 * *(double *)&v66[v68];
              v68 += 24;
            }
            while (v68);
            *((double *)&v115 + 3 * v61 + v65++) = v67;
            v66 += 8;
          }
          while (v65 != 3);
          ++v61;
          v64 += 3;
        }
        while (v61 != 3);
        v71 = 0;
        *(_OWORD *)v54 = v115;
        v72 = v116;
        v73 = v117;
        v74 = v118;
        *((double *)v30 - 1) = v119;
        *(_OWORD *)(v30 - 40) = v73;
        *(_OWORD *)(v30 - 24) = v74;
        *(_OWORD *)(v30 - 56) = v72;
        v75 = v30 - 72;
        do
        {
          v76 = 0;
          v77 = v113;
          do
          {
            v78 = 0;
            v79 = 0.0;
            v80 = v77;
            do
            {
              v81 = *v80;
              v80 += 3;
              v79 = v79 + *(double *)&v75[v78] * v81;
              v78 += 8;
            }
            while (v78 != 24);
            *((double *)&v115 + 3 * v71 + v76++) = v79;
            ++v77;
          }
          while (v76 != 3);
          ++v71;
          v75 += 24;
        }
        while (v71 != 3);
        *(_OWORD *)v54 = v115;
        v82 = v116;
        v83 = v117;
        v84 = v118;
        *((double *)v30 - 1) = v119;
        *(_OWORD *)(v30 - 40) = v83;
        *(_OWORD *)(v30 - 24) = v84;
        *(_OWORD *)(v30 - 56) = v82;
        v85 = (const double *)(v30 - 8);
        v86 = vld1q_dup_f64(v85);
        for (j = -72; j != -8; j += 16)
          *(float64x2_t *)&v30[j] = vdivq_f64(*(float64x2_t *)&v30[j], v86);
        *((_QWORD *)v30 - 1) = 0x3FF0000000000000;
      }
      ++v25;
      v26 += v101;
      v27 += 72;
    }
    while ((_DWORD)v25 != (_DWORD)v97);
  }
}

void sub_1D4D93E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = **(void ***)(v1 + 40);
  if (v3)
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D4D93EC8(unsigned int *a1, uint64_t *a2, unint64_t a3, int a4, int **a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v23[2];

  v10 = (a2[1] - *a2) >> 4;
  v20 = 0;
  v21 = 0;
  v11 = 0x86BCA1AF286BCA1BLL * v10;
  v22 = 0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  sub_1D4D8082C(&v20, 0x86BCA1AF286BCA1BLL * v10);
  sub_1D4D8082C(&__p, v11);
  sub_1D4D8EA2C(v12, a2, a3, &v20, 0);
  v13 = *a1;
  if (v13 > 1)
  {
    if (a5)
    {
      sub_1D4D8F4D4((uint64_t *)&v20, &__p, 0, a5);
    }
    else
    {
      v23[0] = v13 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      v23[1] = -1;
      sub_1D4D8F4D4((uint64_t *)&v20, &__p, (int *)v23, 0);
    }
  }
  else
  {
    v14 = sub_1D4D96500((char *)&__p, (char *)v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 5);
  }
  v15 = sub_1D4D8EDB8((uint64_t)v14, a2, a3, (uint64_t *)&v20, (uint64_t *)&__p, a4);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  return v15;
}

void sub_1D4D9400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D4D94040(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BOOL8 v22;
  unsigned __int8 v29[12];
  uint64_t v30;
  char v31;
  char v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  if (a2[1] != *a2 && a5 <= a6)
  {
    v10 = a5;
    v12 = 0;
    do
    {
      if (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4) <= v10)
        sub_1D4D5DDC8();
      v13 = *a2 + 304 * v10;
      if (v12 >= v36)
      {
        v14 = v12 - v34;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_1D4D5DFA8();
        v15 = ((char *)v36 - (char *)v34) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)((char *)v36 - (char *)v34) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_1D4D5E2CC((uint64_t)&v36, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        *v18 = v13;
        v12 = v18 + 1;
        v20 = (char *)v34;
        v19 = (char *)v35;
        if (v35 != v34)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)v34;
        }
        v34 = v18;
        v35 = v12;
        v36 = (uint64_t *)&v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v12++ = v13;
      }
      v35 = v12;
      ++v10;
    }
    while (v10 <= a6);
  }
  sub_1D4D7C2D8((uint64_t)v29, a3, (uint64_t)&v34);
  if (*(float *)(a1 + 36) != -1.0)
    v33 = *(_DWORD *)(a1 + 36);
  v31 = *(_BYTE *)(a1 + 32);
  v32 = a7;
  if ((a8 & 0x8000000080000000) == 0)
    v30 = a8;
  sub_1D4D7C134((uint64_t)v29);
  v22 = sub_1D4D7C218(v29, a4);
  sub_1D4D7C35C((uint64_t)v29);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return v22;
}

void sub_1D4D94234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)(v14 - 112);
  if (v16)
  {
    *(_QWORD *)(v14 - 104) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D4D94268(double *a1, double *a2, double *a3, double *a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;

  v5 = *a3;
  v6 = a3[1];
  v7 = *a4;
  v8 = a4[1];
  v9 = sub_1D4D942E8(*a1, a1[1], *a3, v6, *a4, v8);
  v10 = sub_1D4D942E8(*a2, a2[1], v5, v6, v7, v8);
  if (v10 >= v9)
    return v9;
  return v10;
}

double sub_1D4D942E8(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;

  v6 = a5 - a3;
  v7 = a6 - a4;
  v8 = v7 * v7 + v6 * v6;
  if (v8 == 0.0 || (v9 = ((a2 - a4) * v7 + (a1 - a3) * v6) / v8, v9 < 0.0))
  {
    a5 = a3;
    a6 = a4;
  }
  else if (v9 <= 1.0)
  {
    a5 = a3 + v9 * v6;
    a6 = a4 + v9 * v7;
  }
  return sqrt((a2 - a6) * (a2 - a6) + (a1 - a5) * (a1 - a5));
}

void sub_1D4D94354(float *a1, float *a2, float *a3, unint64_t a4, double *a5, double a6, double a7, double a8, double a9)
{
  double v9;
  int v10;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  const double *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  unint64_t v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  double v59[3];
  double v60[3];
  double v61[3];
  double v62[3];
  _QWORD v63[3];
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  float64x2x3_t v74;

  v10 = a4;
  v73 = *MEMORY[0x1E0C80C00];
  v15 = a5[7];
  v14 = a5[8];
  v16 = a5[4];
  v17 = a5[5];
  v18 = a5[6];
  v19 = v16 * v14 - v15 * v17;
  v20 = *a5;
  v21 = a5[1];
  v23 = a5[2];
  v22 = a5[3];
  v24 = v15 * v23 - v21 * v14;
  v25 = v21 * v17 - v16 * v23;
  v26 = v24 * v22 + *a5 * v19 + v18 * v25;
  v27 = -2.22044605e-16;
  if (v26 >= 2.22044605e-16 || v26 <= -2.22044605e-16)
  {
    v19 = v19 / v26;
    v24 = v24 / v26;
    v25 = v25 / v26;
    v9 = (v18 * v17 - v22 * v14) / v26;
    v27 = (v22 * v15 - v18 * v16) / v26;
    v14 = (v20 * v14 - v18 * v23) / v26;
    v17 = (v22 * v23 - v20 * v17) / v26;
    v15 = (v18 * v21 - v20 * v15) / v26;
    v16 = (v20 * v16 - v22 * v21) / v26;
  }
  v29 = 0;
  *(double *)v63 = a6;
  *(double *)&v63[1] = a7;
  v63[2] = 0x3FF0000000000000;
  v64 = a6 + a8 + -1.0;
  v65 = a7;
  v66 = 0x3FF0000000000000;
  v67 = v64;
  v68 = a7 + a9 + -1.0;
  v69 = 0x3FF0000000000000;
  v70 = a6;
  v71 = v68;
  v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19, 0);
  v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25, 0);
  v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
  v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v17, 0);
  v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0);
  v72 = 0x3FF0000000000000;
  v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
  __asm { FMOV            V19.2D, #1.0 }
  do
  {
    v41 = (const double *)&v63[v29];
    v74 = vld3q_f64(v41);
    v42 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v15), v74.val[0], v34), v74.val[2], v35);
    v43 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v24), v74.val[0], v30), v74.val[2], v31), v42);
    v44 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v14), v74.val[0], v32), v74.val[2], v33), v42);
    v45 = &v59[v29];
    vst3q_f64(v45, *(float64x2x3_t *)(&_Q19 - 2));
    v29 += 6;
  }
  while (v29 != 12);
  v46 = HIDWORD(a4);
  v47 = sub_1D4D94268(v59, v60, v61, v62) + 1.0;
  v48 = sub_1D4D94268(v59, v62, v60, v61) + 1.0;
  v49 = v47 / (double)(int)v46;
  *a3 = v49;
  *a2 = v48 / (float)v10;
  v50 = v59[0];
  v51 = v59[1];
  v52 = v60[0];
  v53 = v60[1];
  v54 = v61[0];
  v55 = v61[1];
  v56 = v62[0];
  v57 = v62[1];
  v58 = (float)((float)((float)((float)((float)((float)(v52 - v50) * (float)(v55 - v53))
                                      - (float)((float)(v54 - v52) * (float)(v53 - v51)))
                              + (float)((float)(v56 - v54) * (float)(v51 - v57)))
                      - (float)((float)(v50 - v56) * (float)(v57 - v55)))
              * 0.5)
      / (double)((int)v46 * v10);
  *a1 = sqrtf(v58);
}

void sub_1D4D94618(float *a1, float *a2, float *a3, unint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  double *v9;
  uint64_t v10;
  unint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;

  *a1 = 1.0;
  *a2 = 1.0;
  *a3 = 1.0;
  v9 = *(double **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    v22 = 0;
    v21 = 0.0;
    v19 = v10 / 304;
    if (v19 <= 1)
      v20 = 1;
    else
      v20 = v19;
    do
    {
      sub_1D4D94354((float *)&v22 + 1, (float *)&v22, &v21, a4, v9, a6, a7, a8, a9);
      if (*((float *)&v22 + 1) < *a1)
        *a1 = *((float *)&v22 + 1);
      if (*(float *)&v22 < *a2)
        *(_DWORD *)a2 = v22;
      if (v21 < *a3)
        *a3 = v21;
      v9 += 38;
      --v20;
    }
    while (v20);
  }
}

uint64_t *sub_1D4D94730(unsigned int *a1, uint64_t *a2, unint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t *v9;

  v9 = sub_1D4D93EC8(a1, a2, a3, 1, 0);
  *a5 = sub_1D4D94040((uint64_t)a1, v9, a3, a4, 0, 0x86BCA1AF286BCA1BLL * ((v9[1] - *v9) >> 4) - 1, 0, -1);
  return v9;
}

_QWORD *sub_1D4D947C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  _QWORD *v20;
  double v21;
  _QWORD *v22;
  void **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD *v44;
  float v45;
  float v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v68;
  CGRect *v69;
  BOOL IsNull;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double y;
  const double *v77;
  const double *v78;
  const double *v79;
  const double *v80;
  const double *v81;
  const double *v82;
  const double *v83;
  const double *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  const double *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double *v98;
  uint64_t v99;
  double v100;
  double *v101;
  double v102;
  double v103;
  BOOL v106;
  double v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  __int128 v119;
  float v120;
  uint64_t v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _QWORD v126[3];
  _QWORD *v127;
  void **v128;
  _BYTE v129[24];
  _BYTE *v130;
  double *v131;
  double x;
  _QWORD v133[3];
  double v134;
  uint64_t v135;
  void **v136;
  double v137;
  uint64_t v138;
  double v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  float64x2x3_t v143;

  v142 = *MEMORY[0x1E0C80C00];
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_QWORD *)v14 = &off_1E988ABE8;
  *(_QWORD *)(v14 + 240) = 0;
  v15 = (uint64_t *)(v14 + 240);
  *(_QWORD *)(v14 + 248) = 0;
  *(_QWORD *)(v14 + 256) = 0;
  v16 = operator new();
  *(_QWORD *)(v16 + 64) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  v17 = *(_QWORD *)(v14 + 248);
  *(_QWORD *)(v14 + 248) = v16;
  if (v17)
    MEMORY[0x1D826897C](v17, 0x1000C40FF89C88ELL);
  v18 = *(double *)(a2 + 32);
  v19 = *(double *)(a2 + 40);
  v111 = *(unsigned int *)(a2 + 264);
  v110 = *(unsigned int *)(a2 + 268);
  v125 = 0;
  if (!*(_QWORD *)(a6 + 24))
  {
    v26 = 0;
LABEL_23:
    v123 = (_BYTE *)v26;
    goto LABEL_24;
  }
  v128 = (void **)a2;
  v20 = v129;
  sub_1D4D62E6C((uint64_t)v129, a6);
  v131 = a4;
  x = *(double *)&v128;
  v21 = COERCE_DOUBLE(v133);
  sub_1D4D95FFC((uint64_t)v133, (uint64_t)v129);
  v135 = (uint64_t)v131;
  v22 = operator new(0x38uLL);
  v23 = *(void ***)&x;
  *v22 = &off_1E988A4D8;
  v22[1] = v23;
  sub_1D4D95FFC((uint64_t)(v22 + 2), (uint64_t)v133);
  v22[6] = v135;
  v127 = v22;
  sub_1D4D9638C(v126, v124);
  v24 = v127;
  if (v127 == v126)
  {
    v25 = 4;
    v24 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_10;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_10:
  if (*(_QWORD **)&v134 == v133)
  {
    v27 = 4;
  }
  else
  {
    if (v134 == 0.0)
      goto LABEL_15;
    v27 = 5;
    v21 = v134;
  }
  (*(void (**)(double))(**(_QWORD **)&v21 + 8 * v27))(COERCE_DOUBLE(*(_QWORD *)&v21));
LABEL_15:
  if (v130 == v129)
  {
    v28 = 4;
  }
  else
  {
    if (!v130)
      goto LABEL_20;
    v28 = 5;
    v20 = v130;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v28))(v20);
LABEL_20:
  v26 = (uint64_t)v125;
  if (!v125)
    goto LABEL_23;
  if (v125 != v124)
  {
    v26 = (*(uint64_t (**)(void))(*v125 + 16))();
    goto LABEL_23;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _BYTE *))(v124[0] + 24))(v124, v122);
LABEL_24:
  sub_1D4D68E04(a2, (uint64_t)v122, a7, v126);
  v29 = v123;
  if (v123 == v122)
  {
    v30 = 4;
    v29 = v122;
    goto LABEL_28;
  }
  if (v123)
  {
    v30 = 5;
LABEL_28:
    v29 = (_QWORD *)(*(uint64_t (**)(void))(*v29 + 8 * v30))();
  }
  if (*a7 || (v34 = v126[0]) == 0)
  {
    printf("L1 stabilization failed with status %d.\n", *a7);
LABEL_31:
    *a8 = 0;
    goto LABEL_32;
  }
  v35 = *(_QWORD *)(v14 + 248);
  *(_OWORD *)v35 = *(_OWORD *)(v126[0] + 104);
  v36 = *(_OWORD *)(v34 + 120);
  v37 = *(_OWORD *)(v34 + 136);
  v38 = *(_OWORD *)(v34 + 152);
  *(_QWORD *)(v35 + 64) = *(_QWORD *)(v34 + 168);
  *(_OWORD *)(v35 + 32) = v37;
  *(_OWORD *)(v35 + 48) = v38;
  *(_OWORD *)(v35 + 16) = v36;
  v39 = v111 | (v110 << 32);
  *(double *)&v40 = COERCE_DOUBLE(sub_1D4D934D8((uint64_t)v29, a3, a4, v39, v34));
  if (*(double *)&v40 == 0.0)
    goto LABEL_31;
  v41 = (uint64_t *)(v14 + 24);
  sub_1D4D62020((uint64_t *)(v14 + 24));
  *(_OWORD *)(v14 + 24) = *(_OWORD *)v40;
  *(_QWORD *)(v14 + 40) = v40[2];
  *v40 = 0;
  v40[1] = 0;
  v40[2] = 0;
  x = *(double *)&v40;
  sub_1D4D61D18((void ***)&x);
  MEMORY[0x1D826897C](v40, 0x20C40960023A9);
  v42 = v126[0];
  v126[0] = 0;
  v43 = *(_QWORD **)(v14 + 256);
  *(_QWORD *)(v14 + 256) = v42;
  if (v43)
    sub_1D4D61BC4(v14 + 256, v43);
  *(_BYTE *)(v14 + 232) = sub_1D4D94040(a1, (_QWORD *)(v14 + 24), v39, v14 + 56, 0, 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24)) >> 4) - 1, 1, -1);
  v44 = (_OWORD *)operator new();
  *v44 = 0u;
  v44[1] = 0u;
  x = 0.0;
  v47 = *v15;
  *v15 = (uint64_t)v44;
  if (v47)
  {
    sub_1D4D61B7C((uint64_t)v15, v47);
    v48 = *(void ***)&x;
    x = 0.0;
    if (v48)
      sub_1D4D61B7C((uint64_t)&x, (uint64_t)v48);
  }
  v49 = *(_QWORD *)(v14 + 240);
  v121 = 0;
  v120 = 0.0;
  sub_1D4D94618((float *)&v121 + 1, (float *)&v121, &v120, v39, v14 + 24, *(double *)(v14 + 56), *(double *)(v14 + 64), *(double *)(v14 + 72), *(double *)(v14 + 80));
  v45 = v18;
  v50 = fmaxf((float)(1.0 - *(float *)&v121) - v45, 0.0);
  v46 = v19;
  v51 = fmaxf((float)(1.0 - v120) - v46, 0.0);
  if (v50 < v51)
    v50 = v51;
  *(double *)v49 = v50;
  v112 = (_QWORD *)(v49 + 8);
  v52 = *(_QWORD *)(a5 + 72);
  v53 = *(_QWORD *)(a5 + 80);
  if (v52 != v53)
  {
    v54 = (v53 - v52) >> 5;
    if (v54 == 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24)) >> 4))
    {
      v55 = *(double *)(v14 + 56);
      v56 = *(double *)(v14 + 64);
      v57 = *(double *)(v14 + 72);
      v58 = *(double *)(v14 + 80);
      *(_QWORD *)(v49 + 16) = *(_QWORD *)(v49 + 8);
      sub_1D4D6455C((uint64_t)v112, v54);
      if (*(_QWORD *)(v14 + 32) != *(_QWORD *)(v14 + 24))
      {
        v61 = 0;
        v62 = v55 + v57;
        v63 = v56 + v58;
        __asm { FMOV            V25.2D, #1.0 }
        do
        {
          v115 = v59;
          v117 = v60;
          v119 = _Q25;
          v68 = *(_QWORD *)(a5 + 72);
          v69 = (CGRect *)(v68 + 32 * v61);
          IsNull = CGRectIsNull(*v69);
          v71 = *v41;
          v59 = v115;
          v60 = v117;
          _Q25 = v119;
          if (!IsNull)
          {
            v72 = 0;
            v73 = v68 + 32 * v61;
            v74 = *(double *)(v73 + 16);
            v75 = *(double *)(v73 + 24);
            y = v69->origin.y;
            x = v69->origin.x;
            *(double *)v133 = y;
            v133[1] = 0x3FF0000000000000;
            *(double *)&v133[2] = v74 + x;
            v134 = y;
            v135 = 0x3FF0000000000000;
            v136 = *(void ***)&x;
            v137 = v75 + y;
            v138 = 0x3FF0000000000000;
            v139 = v74 + x;
            v140 = v75 + y;
            v141 = 0x3FF0000000000000;
            v77 = (const double *)(v71 + 304 * v61);
            v78 = v77 + 8;
            v79 = v77 + 7;
            v80 = v77 + 6;
            v81 = v77 + 5;
            v82 = v77 + 4;
            v83 = v77 + 3;
            v84 = v77 + 2;
            v85 = vld1q_dup_f64(v77++);
            v86 = vld1q_dup_f64(v77);
            v87 = vld1q_dup_f64(v84);
            v88 = vld1q_dup_f64(v82);
            v89 = vld1q_dup_f64(v83);
            v90 = vld1q_dup_f64(v81);
            v91 = vld1q_dup_f64(v79);
            v92 = vld1q_dup_f64(v80);
            v93 = vld1q_dup_f64(v78);
            do
            {
              v94 = (double *)&v133[v72 - 1];
              v143 = vld3q_f64(v94);
              v95 = vmlaq_f64(vmlaq_f64(vmulq_f64(v91, v143.val[1]), v143.val[0], v92), v143.val[2], v93);
              v96 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v86, v143.val[1]), v143.val[0], v85), v143.val[2], v87), v95);
              v97 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88, v143.val[1]), v143.val[0], v89), v143.val[2], v90), v95);
              v98 = (double *)&v129[v72 * 8 - 8];
              vst3q_f64(v98, *(float64x2x3_t *)(&_Q25 - 2));
              v72 += 6;
            }
            while (v72 != 12);
            v116 = v96;
            v118 = v97;
            v99 = 0;
            v100 = 0.0;
            do
            {
              v101 = (double *)&v129[24 * v99 - 8];
              v102 = *v101;
              v103 = v101[1];
              v106 = *v101 >= v55 && v102 <= v62 && v103 >= v56 && v103 < v63;
              v107 = 0.0;
              if (!v106)
              {
                v108 = (double *)operator new(0x20uLL);
                v109 = 0;
                *v108 = fmax(v55 - v102, 0.0);
                v108[1] = fmax(v102 - v62, 0.0);
                v108[2] = fmax(v56 - v103, 0.0);
                v108[3] = fmax(v103 - v63, 0.0);
                do
                {
                  if (v108[v109] > v107)
                    v107 = v108[v109];
                  ++v109;
                }
                while (v109 != 4);
                operator delete(v108);
              }
              if (v107 > v100)
                v100 = v107;
              ++v99;
            }
            while (v99 != 4);
            *(double *)(*v112 + 8 * v61) = v100;
            v71 = *v41;
            v59 = v116;
            v60 = v118;
            _Q25 = v119;
          }
          ++v61;
        }
        while (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(v14 + 32) - v71) >> 4) > v61);
      }
    }
  }
  *a8 = v14;
  v14 = 0;
LABEL_32:
  v31 = (_QWORD *)v126[0];
  v126[0] = 0;
  if (v31)
    sub_1D4D61BC4((uint64_t)v126, v31);
  result = v125;
  if (v125 == v124)
  {
    v33 = 4;
    result = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_77;
    v33 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v33))();
LABEL_77:
  if (v14)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

void sub_1D4D94F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30,_QWORD *a31)
{
  uint64_t v31;
  _QWORD *v33;
  char *v34;
  uint64_t v35;

  v33 = a31;
  a31 = 0;
  if (v33)
    sub_1D4D61BC4((uint64_t)&a31, v33);
  v34 = a30;
  if (a30 == &a27)
  {
    v35 = 4;
    v34 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_8;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4D9508C(float *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, BOOL *a9)
{
  int v10;
  int v11;
  uint64_t *v16;
  int v18;

  v10 = a7;
  v11 = a6;
  v16 = sub_1D4D90AA4((uint64_t)a1, a2, a3, a6, a7, a5, 1);
  v18 = 0;
  if (sub_1D4D90420(a1, a2, a3, a4, v11, v10, &v18))
    sub_1D4D908A0((uint64_t)a1, *(_QWORD *)(*a4 + 8 * v18), v16, a3);
  if (a8)
    *a9 = sub_1D4D94040((uint64_t)a1, v16, a3, a8, 0, 0x86BCA1AF286BCA1BLL * ((v16[1] - *v16) >> 4) - 1, 0, -1);
  return v16;
}

float sub_1D4D95190(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, __CFDictionary *a7)
{
  uint64_t *v9;
  float v10;
  void **v12;

  v9 = sub_1D4D90AA4(a1, a2, a3, a5, a6, a4, 0);
  v10 = sub_1D4DAD534(v9, a3, a7);
  v12 = (void **)v9;
  sub_1D4D61D18(&v12);
  MEMORY[0x1D826897C](v9, 0x20C40960023A9);
  return v10;
}

uint64_t sub_1D4D9521C(float *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6, unint64_t a7, _OWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  BOOL v14;
  uint64_t *v20;
  uint64_t *v21;
  float v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  void **v32;

  v8 = *a2;
  v9 = a2[1] - *a2;
  if (!v9)
    return 0;
  v10 = a6;
  if (*(_QWORD *)(v8 + 304 * a6 + 104) > a5)
    return 0;
  v13 = *(_QWORD *)(v8 + 304 * a7 + 104);
  v14 = 0x86BCA1AF286BCA1BLL * (v9 >> 4) <= a7 || v13 < a5;
  if (v14 || sub_1D4D88D7C(a2, a3, a6, a7) == 0.0)
    return 0;
  v29 = 0;
  v20 = sub_1D4D9508C(a1, a2, a3, a4, a5, 0, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 4) - 1, (uint64_t)&v30, &v29);
  v21 = v20;
  if (v10 <= a7)
  {
    v26 = 0x86BCA1AF286BCA1BLL * ((v20[1] - *v20) >> 4);
    if (v26 <= v10)
      v26 = v10;
    v27 = *v20 + 304 * v10 + 284;
LABEL_21:
    if (v10 == v26)
      sub_1D4D5DDC8();
    v28 = 0;
    while (vabds_f32(1.5708, *(float *)(v27 + v28)) <= 0.1)
    {
      v28 += 4;
      if (v28 == 16)
      {
        ++v10;
        v27 += 304;
        if (v10 <= a7)
          goto LABEL_21;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (v29)
    {
      v22 = a1[6];
      if (*((double *)&v31 + 1) >= (float)(v22 * (float)SHIDWORD(a3))
        && *(double *)&v31 >= (float)(v22 * (float)(int)a3))
      {
        v23 = 1;
        goto LABEL_13;
      }
    }
  }
  v23 = 0;
LABEL_13:
  v32 = (void **)v20;
  sub_1D4D61D18(&v32);
  MEMORY[0x1D826897C](v21, 0x20C40960023A9);
  if (a8 && (_DWORD)v23)
  {
    v24 = v31;
    *a8 = v30;
    a8[1] = v24;
  }
  return v23;
}

void **sub_1D4D9544C(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        sub_1D4D61A14(a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

char *sub_1D4D954DC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL)
      sub_1D4D5DFA8();
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x1C71C71C71C71C7)
      v12 = 0x38E38E38E38E38ELL;
    else
      v12 = v11;
    result = sub_1D4D618A8(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

_QWORD *sub_1D4D95634(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1D4D62E6C((uint64_t)v6, a2);
  sub_1D4D62854(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1D4D956CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1D4D62E6C((uint64_t)v6, a2);
  sub_1D4D62B68(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1D4D95764(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_1D4D5DFA8();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 72;
    v6 = (char *)sub_1D4D618FC(v3, a2);
    v7 = &v6[72 * v5];
    v9 = &v6[72 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        v13 = *(_OWORD *)(v10 - 56);
        v14 = *(_OWORD *)(v10 - 40);
        v15 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 72;
        v10 -= 72;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1D4D95868(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0x6BCA1AF286BCA1)
    v7 = 0xD79435E50D7943;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1D4D5F57C(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[304 * v3];
  v14 = &v8[304 * v7];
  sub_1D4D5F924((uint64_t)v12, 0, 0);
  v13 = v12 + 304;
  sub_1D4D5F508(a1, &v11);
  v9 = a1[1];
  sub_1D4D5F774((uint64_t)&v11);
  return v9;
}

void sub_1D4D95968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D9597C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_1D4D60B28(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1D4D959C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D959CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D4D5DFA8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4D60A34(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1D4D60B28(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_1D4D80718(a1, v14);
  v12 = a1[1];
  sub_1D4D6BB34((uint64_t)v14);
  return v12;
}

void sub_1D4D95ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D6BB34((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1D4D95AE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __n128 result;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v13 = v4 - v6;
      v12 = v13 == 0;
      v14 = 0xD79435E50D79436 * (v13 >> 4);
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      v16 = v15 >> 2;
      v53 = a1[4];
      v17 = (char *)sub_1D4D5F57C(v53, v15);
      v19 = &v17[304 * v16];
      v20 = a1[1];
      v21 = a1[2] - v20;
      if (v21)
      {
        v22 = &v19[v21];
        v23 = &v17[304 * v16];
        do
        {
          *(_OWORD *)v23 = *(_OWORD *)v20;
          v24 = *(_OWORD *)(v20 + 16);
          v25 = *(_OWORD *)(v20 + 32);
          v26 = *(_OWORD *)(v20 + 48);
          *(_OWORD *)(v23 + 60) = *(_OWORD *)(v20 + 60);
          *((_OWORD *)v23 + 2) = v25;
          *((_OWORD *)v23 + 3) = v26;
          *((_OWORD *)v23 + 1) = v24;
          *((_QWORD *)v23 + 11) = 0;
          *((_QWORD *)v23 + 12) = 0;
          *((_QWORD *)v23 + 10) = 0;
          *((_OWORD *)v23 + 5) = *(_OWORD *)(v20 + 80);
          *((_QWORD *)v23 + 12) = *(_QWORD *)(v20 + 96);
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 96) = 0;
          *(_QWORD *)(v20 + 80) = 0;
          v27 = *(_OWORD *)(v20 + 136);
          v28 = *(_OWORD *)(v20 + 152);
          v29 = *(_OWORD *)(v20 + 168);
          *(_OWORD *)(v23 + 120) = *(_OWORD *)(v20 + 120);
          *(_OWORD *)(v23 + 168) = v29;
          *(_OWORD *)(v23 + 152) = v28;
          *(_OWORD *)(v23 + 136) = v27;
          v30 = *(_OWORD *)(v20 + 200);
          v31 = *(_OWORD *)(v20 + 216);
          v32 = *(_OWORD *)(v20 + 232);
          *(_OWORD *)(v23 + 184) = *(_OWORD *)(v20 + 184);
          *(_OWORD *)(v23 + 232) = v32;
          *(_OWORD *)(v23 + 216) = v31;
          *(_OWORD *)(v23 + 200) = v30;
          v33 = *(_OWORD *)(v20 + 264);
          v34 = *(_OWORD *)(v20 + 280);
          v35 = *(_QWORD *)(v20 + 293);
          *(_OWORD *)(v23 + 248) = *(_OWORD *)(v20 + 248);
          *(_QWORD *)(v23 + 293) = v35;
          *(_OWORD *)(v23 + 264) = v33;
          *(_OWORD *)(v23 + 280) = v34;
          *(_OWORD *)(v23 + 104) = *(_OWORD *)(v20 + 104);
          v23 += 304;
          v20 += 304;
        }
        while (v23 != v22);
        v36 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v36 = vdupq_n_s64(v20);
        v22 = &v17[304 * v16];
      }
      v50 = *a1;
      *a1 = v17;
      a1[1] = v19;
      v51 = v36;
      v37 = a1[3];
      a1[2] = v22;
      a1[3] = &v17[304 * v18];
      v52 = v37;
      sub_1D4D5F774((uint64_t)&v50);
      v4 = a1[2];
    }
    else
    {
      v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - *a1) >> 4);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -304 * v9;
      sub_1D4D95D68(v5, v4, v5 - 304 * v9);
      v4 = v11;
      a1[1] += v10;
      a1[2] = v11;
    }
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v38 = *(_OWORD *)(a2 + 16);
  v39 = *(_OWORD *)(a2 + 32);
  v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v39;
  *(_OWORD *)(v4 + 48) = v40;
  *(_OWORD *)(v4 + 16) = v38;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  sub_1D4D5E408((_QWORD *)(v4 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  v41 = *(_OWORD *)(a2 + 120);
  v42 = *(_OWORD *)(a2 + 136);
  v43 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v43;
  *(_OWORD *)(v4 + 136) = v42;
  *(_OWORD *)(v4 + 120) = v41;
  v44 = *(_OWORD *)(a2 + 184);
  v45 = *(_OWORD *)(a2 + 200);
  v46 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v46;
  *(_OWORD *)(v4 + 200) = v45;
  *(_OWORD *)(v4 + 184) = v44;
  result = *(__n128 *)(a2 + 248);
  v48 = *(_OWORD *)(a2 + 264);
  v49 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(v4 + 293) = *(_QWORD *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v48;
  *(_OWORD *)(v4 + 280) = v49;
  *(__n128 *)(v4 + 248) = result;
  a1[2] += 304;
  return result;
}

uint64_t sub_1D4D95D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(_OWORD *)(v4 + 32);
    v8 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(v4 + 60);
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    sub_1D4D60158(a3 + 80, (__n128 *)(v4 + 80));
    *(_OWORD *)(a3 + 104) = *(_OWORD *)(v4 + 104);
    v9 = *(_OWORD *)(v4 + 120);
    v10 = *(_OWORD *)(v4 + 136);
    v11 = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(v4 + 168);
    *(_OWORD *)(a3 + 152) = v11;
    *(_OWORD *)(a3 + 136) = v10;
    *(_OWORD *)(a3 + 120) = v9;
    v12 = *(_OWORD *)(v4 + 184);
    v13 = *(_OWORD *)(v4 + 200);
    v14 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(v4 + 232);
    *(_OWORD *)(a3 + 216) = v14;
    *(_OWORD *)(a3 + 200) = v13;
    *(_OWORD *)(a3 + 184) = v12;
    v15 = *(_OWORD *)(v4 + 248);
    v16 = *(_OWORD *)(v4 + 264);
    v17 = *(_OWORD *)(v4 + 280);
    *(_QWORD *)(a3 + 293) = *(_QWORD *)(v4 + 293);
    *(_OWORD *)(a3 + 280) = v17;
    *(_OWORD *)(a3 + 264) = v16;
    *(_OWORD *)(a3 + 248) = v15;
    a3 += 304;
    v4 += 304;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1D4D95E60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0xD79435E50D7943)
    sub_1D4D5DFA8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x6BCA1AF286BCA1)
    v11 = 0xD79435E50D7943;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1D4D5F57C(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[304 * v5];
  v17 = (uint64_t)v16;
  v18 = &v12[304 * v11];
  sub_1D4D5F924((uint64_t)v16, *a2, a3);
  v17 = (uint64_t)(v16 + 304);
  sub_1D4D5F508(a1, &v15);
  v13 = a1[1];
  sub_1D4D5F774((uint64_t)&v15);
  return v13;
}

void sub_1D4D95F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D5F774((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4D95F84(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D4D61110(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4D95FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D95FFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_1D4D96060(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E988B078;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1D4D960BC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E988B078;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D96128(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E988B078;
  v2[1] = v3;
  sub_1D4D62E6C((uint64_t)(v2 + 2), a1 + 16);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_1D4D96174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D96188(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E988B078;
  a2[1] = v4;
  result = sub_1D4D62E6C((uint64_t)(a2 + 2), a1 + 16);
  a2[6] = *(_QWORD *)(a1 + 48);
  return result;
}

_QWORD *sub_1D4D961CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1D4D96200(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_1D4D96250(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p[3];
  char *v14;

  v4 = *a2;
  v5 = *a3;
  sub_1D4D9368C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 256), *(double **)(a1 + 48), *a3 + v4, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 264), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 268), v4, (uint64_t)__p);
  if (v5)
  {
    v6 = 0;
    v7 = 24 * v4;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 296) + v7;
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_OWORD *)v8;
      v12 = v9;
      v14 = (char *)__p[0] + v6;
      v10 = *(_QWORD *)(a1 + 40);
      if (!v10)
        sub_1D4D6A05C();
      (*(void (**)(uint64_t, char **, __int128 *))(*(_QWORD *)v10 + 48))(v10, &v14, &v11);
      v7 += 24;
      v6 += 72;
      --v5;
    }
    while (v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D4D96324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D96344(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A958))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D96380()
{
  return &unk_1E988A958;
}

_QWORD *sub_1D4D9638C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D4D964F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D4D5DF98(a1);
}

char *sub_1D4D96500(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_1D4D5DFA8();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D4D611FC(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_1D4D96608(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E988A4D8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1D4D96664(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E988A4D8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4D966D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E988A4D8;
  v2[1] = v3;
  sub_1D4D62E6C((uint64_t)(v2 + 2), a1 + 16);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_1D4D9671C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4D96730(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E988A4D8;
  a2[1] = v4;
  result = sub_1D4D62E6C((uint64_t)(a2 + 2), a1 + 16);
  a2[6] = *(_QWORD *)(a1 + 48);
  return result;
}

_QWORD *sub_1D4D96774(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1D4D967A8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_1D4D967F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p[3];
  char *v14;

  v4 = *a2;
  v5 = *a3;
  sub_1D4D9368C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 256), *(double **)(a1 + 48), *a3 + v4, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 264), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 268), v4, (uint64_t)__p);
  if (v5)
  {
    v6 = 0;
    v7 = 24 * v4;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 296) + v7;
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_OWORD *)v8;
      v12 = v9;
      v14 = (char *)__p[0] + v6;
      v10 = *(_QWORD *)(a1 + 40);
      if (!v10)
        sub_1D4D6A05C();
      (*(void (**)(uint64_t, char **, __int128 *))(*(_QWORD *)v10 + 48))(v10, &v14, &v11);
      v7 += 24;
      v6 += 72;
      --v5;
    }
    while (v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D4D968CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D968EC(uint64_t a1, uint64_t a2)
{
  if (sub_1D4D5F04C(a2, (uint64_t)&unk_1E988A300))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D4D96928()
{
  return &unk_1E988A300;
}

void sub_1D4D96934(uint64_t a1, uint64_t a2, int a3, int a4, int a5, float a6, float a7)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  char *v46;
  int v47;
  uint64_t v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v73 = a5;
  LODWORD(v71) = a3;
  v66 = a2;
  v72 = a1;
  v74 = *MEMORY[0x1E0C80C00];
  v10 = (2 * a4) | 1;
  v69 = (2 * a4);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (float *)((char *)&v65 - v12);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v65 - v15;
  v17 = -v14;
  if ((v14 & 0x80000000) == 0)
  {
    LODWORD(v18) = 0;
    v19 = 1.0 / (float)(a4 * a4);
    v20 = -v14;
    do
    {
      v21 = expf(v19 * (float)-(v20 * v20));
      v18 = (int)v18;
      v22 = v10;
      v23 = v17;
      do
      {
        v24 = v18++;
        *(float *)&v16[4 * v24] = v21 * expf(v19 * (float)-(v23 * v23));
        ++v23;
        --v22;
      }
      while (v22);
      v25 = v20++ == a4;
    }
    while (!v25);
  }
  if ((int)v71 >= 1)
  {
    v26 = 0;
    v27 = a6 * a6;
    if (a4 >= 0)
      v28 = a4;
    else
      v28 = -a4;
    v65 = v71;
    v29 = 4 * (int)v69 + 4;
    v30 = (uint64_t)&v13[(int)v69 + 5];
    v70 = v30 + 4 * (-4 - (int)v69);
    v71 = v30;
    v31 = 4 * ((int)v69 + 2);
    v32 = v31 + 4;
    v69 = v30 + v31;
    do
    {
      v33 = 0;
      v34 = (float *)(v66 + 8 * v26);
      v35 = *v34;
      v36 = v34[1];
      v67 = v34;
      v68 = v26;
      do
      {
        sub_1D4D96CC4(v72, a4 + 1, v13, v35, v36);
        v37 = 0.0;
        v38 = 0.0;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
        v42 = 0.0;
        if ((a4 & 0x80000000) == 0)
        {
          v43 = v69;
          v44 = v70;
          v45 = (float *)v71;
          v46 = v16;
          v47 = v17;
          do
          {
            v48 = 0;
            v49 = (float)v47;
            v50 = v45;
            do
            {
              v51 = (float)(*v50 - *(v50 - 2)) * 0.5;
              v52 = (float)(*(float *)(v43 + 4 * v48) - *(float *)(v44 + 4 * v48)) * 0.5;
              v53 = *(float *)&v46[4 * v48];
              v54 = (float)(v51 * v51) * v53;
              v55 = v53 * (float)(v51 * v52);
              v56 = v53 * (float)(v52 * v52);
              v38 = v38 + v54;
              v39 = v39 + v55;
              v40 = v40 + v56;
              v57 = (float)(v17 + v48);
              v41 = v41 + (float)((float)(v55 * v49) + (float)(v54 * v57));
              v42 = v42 + (float)((float)(v56 * v49) + (float)(v55 * v57));
              ++v48;
              ++v50;
            }
            while (a4 + 1 + v28 != (_DWORD)v48);
            v46 += v29;
            v44 += v32;
            v45 = (float *)((char *)v45 + v32);
            v43 += v32;
            v25 = v47++ == v28;
          }
          while (!v25);
        }
        v58 = (float)(v38 * v40) - (float)(v39 * v39);
        v59 = 0.0;
        v60 = 0.0;
        if (v58 != 0.0)
        {
          v59 = v40 * (float)(1.0 / v58);
          v37 = (float)(1.0 / v58) * (float)-v39;
          v60 = v38 * (float)(1.0 / v58);
        }
        v61 = (float)(v42 * v37) + (float)(v59 * v41);
        v62 = (float)(v42 * v60) + (float)(v37 * v41);
        v35 = v35 + v61;
        v36 = v36 + v62;
        ++v33;
      }
      while (v33 != v73 && (float)((float)(v62 * v62) + (float)(v61 * v61)) >= v27);
      v63 = v67;
      v64 = v68;
      if (vabds_f32(v35, *v67) < a7 && vabds_f32(v36, *(float *)(v66 + 8 * v68 + 4)) < a7)
      {
        *v67 = v35;
        v63[1] = v36;
      }
      v26 = v64 + 1;
    }
    while (v26 != v65);
  }
}

uint64_t sub_1D4D96CC4(uint64_t result, int a2, float *a3, float a4, float a5)
{
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  float v9;
  float v10;
  BOOL v11;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  float v25;
  int v26;
  int v28;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  float v35;
  int v36;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  float *v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  float *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  _QWORD v74[2];

  v74[1] = *MEMORY[0x1E0C80C00];
  v9 = truncf(a5);
  v10 = (float)a2;
  v11 = truncf(a4) == a4 && v9 == a5;
  v13 = !v11 || v10 > a4 || v10 > a5;
  if (v13
    || (float)(v10 + a4) >= (float)*(unint64_t *)(result + 8)
    || (float)(v10 + a5) >= (float)*(unint64_t *)(result + 16))
  {
    if ((float)(a4 - v10) < 0.0
      || ((float)(a5 - v10) >= 0.0
        ? (v14 = (float)((float)(v10 + a4) + 1.0) > (float)(unint64_t)(*(_QWORD *)(result + 8) - 1))
        : (v14 = 1),
          v14 || (float)((float)(v10 + a5) + 1.0) > (float)(unint64_t)(*(_QWORD *)(result + 16) - 1)))
    {
      if ((a2 & 0x80000000) == 0)
      {
        v16 = *(_QWORD *)(result + 16);
        v15 = *(_QWORD *)(result + 24);
        v17 = *(_QWORD *)result;
        v18 = *(_QWORD *)(result + 8);
        v19 = *(_QWORD *)(result + 32);
        v20 = v18 - 1;
        v21 = v18 - 1;
        v22 = v16 - 1;
        v23 = v16 - 1;
        v24 = -a2;
        do
        {
          v25 = (float)v24 + a5;
          if (v25 < 0.0)
            v25 = 0.0;
          v26 = (int)v25 + 1;
          if (v22 >= (int)v25 || v22 >= v26)
            v28 = (int)v25;
          else
            v28 = v23;
          if (v22 >= v26)
            v29 = (int)v25 + 1;
          else
            v29 = v23;
          v30 = v25 - (float)(int)v25;
          v31 = v17 + v15 * v28;
          v32 = v17 + v15 * v29;
          v33 = (2 * a2) | 1;
          v34 = -a2;
          do
          {
            v35 = (float)v34 + a4;
            if (v35 < 0.0)
              v35 = 0.0;
            v36 = (int)v35 + 1;
            if (v20 >= (int)v35 || v20 >= v36)
              v38 = (int)v35;
            else
              v38 = v21;
            if (v20 >= v36)
              v39 = (int)v35 + 1;
            else
              v39 = v21;
            v40 = v19 * v38;
            v41 = v19 * v39;
            LOBYTE(v5) = *(_BYTE *)(v31 + v40);
            LOBYTE(v6) = *(_BYTE *)(v31 + v41);
            v6 = (float)LODWORD(v6);
            LOBYTE(v7) = *(_BYTE *)(v32 + v40);
            v5 = (float)LODWORD(v5);
            v7 = (float)LODWORD(v7);
            LOBYTE(v8) = *(_BYTE *)(v32 + v41);
            *a3++ = (float)((float)((float)((float)((float)(1.0 - v30) * (float)(v35 - (float)(int)v35)) * v6)
                                  + (float)(v5
                                          * (float)((float)(1.0 - v30) * (float)(1.0 - (float)(v35 - (float)(int)v35)))))
                          + (float)(v7 * (float)(v30 * (float)(1.0 - (float)(v35 - (float)(int)v35)))))
                  + (float)((float)v8 * (float)(v30 * (float)(v35 - (float)(int)v35)));
            ++v34;
            --v33;
          }
          while (v33);
          result = (v24 + 1);
          v11 = v24++ == a2;
        }
        while (!v11);
      }
    }
    else
    {
      result = MEMORY[0x1E0C80A78]();
      v57 = (float *)v74 - v56;
      LODWORD(v58) = (2 * v48) | 1;
      if (v51 >= 1)
      {
        v59 = v52 - floorf(v52);
        v60 = v51 + (int)v55;
        v61 = *(_QWORD *)result;
        v62 = (int)v54;
        v63 = *(_QWORD *)(result + 24);
        v64 = (int)v54 + 1;
        v65 = (int)v55;
        v66 = v57;
        do
        {
          if ((v48 & 0x80000000) == 0)
          {
            result = v61 + v65 * v63;
            LOBYTE(v54) = *(_BYTE *)(result + v62);
            v54 = (float)LODWORD(v54);
            v67 = v64;
            v68 = (2 * v48) | 1u;
            do
            {
              LOBYTE(v55) = *(_BYTE *)(result + v67);
              v55 = (float)LODWORD(v55);
              *v66++ = (float)(v59 * v55) + (float)((float)(1.0 - v59) * v54);
              ++v67;
              v54 = v55;
              --v68;
            }
            while (v68);
          }
          ++v65;
        }
        while (v65 < v60);
      }
      if ((v48 & 0x80000000) == 0)
      {
        v69 = 0;
        v70 = v53 - floorf(v53);
        if ((int)v58 <= 1)
          v58 = 1;
        else
          v58 = v58;
        v71 = 4 * v50 + 4;
        do
        {
          ++v69;
          v72 = v57;
          v73 = v58;
          do
          {
            *v49++ = (float)(v70 * *(float *)((char *)v72 + v71)) + (float)(*v72 * (float)(1.0 - v70));
            ++v72;
            --v73;
          }
          while (v73);
          v57 = (float *)((char *)v57 + v71);
        }
        while (v69 != v58);
      }
    }
  }
  else if ((a2 & 0x80000000) == 0)
  {
    v42 = -a2;
    v43 = *(_QWORD *)(result + 24);
    v44 = *(_QWORD *)result + v43 * ((int)a5 - (uint64_t)a2) + (int)a4 - a2;
    do
    {
      v45 = (2 * a2) | 1;
      v46 = (unsigned __int8 *)v44;
      do
      {
        v47 = *v46++;
        *a3++ = (float)v47;
        --v45;
      }
      while (v45);
      ++v42;
      v44 += v43;
    }
    while (a2 + 1 != (_DWORD)v42);
  }
  return result;
}

uint64_t sub_1D4D9708C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  MetalRANSACDispatcher *v9;
  void *v10;

  *(_QWORD *)a1 = off_1E988AC70;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  v7 = 8;
  if (a2)
    v7 = a2;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = xmmword_1D4DB2980;
  *(_DWORD *)(a1 + 168) = 4;
  v8 = a1 + 184;
  sub_1D4D80A54(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 1061997773;
  *(_QWORD *)(a1 + 240) = 0;
  if (a4)
  {
    v9 = -[MetalRANSACDispatcher initWithMaxCorrespondences:]([MetalRANSACDispatcher alloc], "initWithMaxCorrespondences:", a3);
    v10 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;

    if (!*(_QWORD *)(a1 + 16))
      NSLog(CFSTR("error creating RANSAC Metal dispatcher, falling back to CPU code\n"));
  }
  *(_QWORD *)(a1 + 200) = sub_1D4D84654(a3);
  sub_1D4D80BA0(v8, 0);
  return a1;
}

void sub_1D4D971A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 104);
  if (v3)
  {
    *(_QWORD *)(v1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 + 80);
  if (v4)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1D4D971F8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E988AC70;
  sub_1D4D9727C(a1);
  v2 = *(_QWORD **)(a1 + 200);
  if (v2)
  {
    sub_1D4D847DC(v2);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  sub_1D4D80A58((_QWORD *)(a1 + 184));
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }

  return a1;
}

void sub_1D4D9727C(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = *(void ***)(a1 + 128);
  if (v2)
  {
    sub_1D4D84FA8(v2);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v3 = *(void ***)(a1 + 136);
  if (v3)
  {
    sub_1D4D84FA8(v3);
    *(_QWORD *)(a1 + 136) = 0;
  }
}

BOOL sub_1D4D972B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  _DWORD *v19;
  int v20;
  unsigned int *v21;
  double v22;
  uint64_t i;
  void *__p[3];

  if (a4 >= 4)
  {
    sub_1D4D80BA0(a1 + 184, 0);
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = a4;
    *(_QWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = a3;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    *(_QWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = a3;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a1 + 172) = _D0;
    sub_1D4D844A0(__p, (2 * *(_DWORD *)(a1 + 236)));
    if (*(_BYTE *)(a1 + 24))
    {
      v15 = sub_1D4D84BF4(*(_DWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 128) = v15;
      sub_1D4D84CB4(v15, *(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 48));
      v16 = *(unsigned int *)(a1 + 236);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(a1 + 56);
        v18 = *(int **)(a1 + 240);
        v19 = (char *)__p[0] + 4;
        do
        {
          v20 = *v18++;
          *(v19 - 1) = *(_DWORD *)(v17 + 4 * (2 * v20));
          *v19 = *(_DWORD *)(v17 + 4 * ((2 * v20) | 1u));
          v19 += 2;
          --v16;
        }
        while (v16);
        v21 = sub_1D4D84BF4(*(_DWORD *)(a1 + 32));
        *(_QWORD *)(a1 + 136) = v21;
        sub_1D4D84CB4(v21, (uint64_t)__p[0], *(_DWORD *)(a1 + 236));
      }
    }
    sub_1D4D9743C(a1);
    sub_1D4D9751C(a1, v22);
    for (i = 0; i != 36; i += 4)
      *(_DWORD *)(a5 + i) = *(_DWORD *)(a1 + i + 248);
    sub_1D4D9727C(a1);
    --*(_DWORD *)(a1 + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return a4 > 3;
}

void sub_1D4D97420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D9743C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 148) = v2;
  sub_1D4D97BE0(a1 + 208, v2);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (_DWORD *)((char *)v9 - ((v5 + 15) & 0x7FFFFFFF0));
  if (*(_DWORD *)(a1 + 148))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = sub_1D4D97674(a1, a1 + 184, v6, *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 208) + v7);
      ++v8;
      v7 += 36;
    }
    while (v8 < *(unsigned int *)(a1 + 148));
  }
  return result;
}

void sub_1D4D9751C(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  unsigned int v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  void *v12[3];

  if (*(_QWORD *)(a1 + 16))
    v3 = sub_1D4D97C24(a1, a2);
  else
    v3 = sub_1D4D97D44(a1);
  v4 = *(_QWORD *)(a1 + 208) + 36 * v3;
  v5 = *(_DWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 264) = v6;
  *(_DWORD *)(a1 + 280) = v5;
  sub_1D4D9865C(v12, *(unsigned int *)(a1 + 48));
  v11 = 0;
  sub_1D4D724D0((uint64_t)v12, *(unsigned int *)(a1 + 48));
  sub_1D4D97EF0(a1, (float *)(a1 + 248), &v11, (uint64_t)v12[0]);
  v7 = v11;
  sub_1D4D724D0((uint64_t)v12, v11);
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    __p = 0;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 16))(a1, v12, &__p);
    sub_1D4D8BAF0(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0, (uint64_t)__p, (unint64_t)(v9 - (_BYTE *)__p) >> 2, 1, a1 + 248, (float)*(unsigned int *)(a1 + 40), (float)*(unsigned int *)(a1 + 44));
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_1D4D9763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D97674(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  char *v19;
  _DWORD *v20;
  int64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t result;
  uint64_t v25;
  void *__p;
  char *v27;

  if (!*(_DWORD *)(a1 + 164))
  {
LABEL_28:
    result = 0;
    *(_OWORD *)a5 = xmmword_1D4DB2500;
    *(_OWORD *)(a5 + 16) = xmmword_1D4DB2500;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return result;
  }
  v10 = 0;
  v25 = a4;
  while (1)
  {
    if (*(_DWORD *)(a1 + 236) <= (4 * *(_DWORD *)(a1 + 168)) || v10 >= *(_DWORD *)(a1 + 160))
    {
      if (*(_BYTE *)(a1 + 24) && v10 < *(_DWORD *)(a1 + 156))
      {
        v11 = *(_QWORD *)(a1 + 128);
        goto LABEL_11;
      }
      v12 = *(unsigned int *)(a1 + 48);
      if (v12 >= a4)
      {
        sub_1D4D9865C(&__p, v12);
        if (*(_DWORD *)(a1 + 48))
        {
          v13 = 0;
          v14 = __p;
          do
          {
            v14[v13] = v13;
            ++v13;
          }
          while (v13 < *(unsigned int *)(a1 + 48));
        }
        if (a4)
        {
          v15 = v27;
          v16 = v25;
          v17 = a3;
          do
          {
            v18 = sub_1D4D80AF8(a2, 0, ((v15 - (_BYTE *)__p) >> 2) - 1);
            v19 = v27;
            v20 = (char *)__p + 4 * v18;
            *v17 = *v20;
            v21 = v19 - (char *)(v20 + 1);
            if (v19 != (char *)(v20 + 1))
              memmove(v20, v20 + 1, v19 - (char *)(v20 + 1));
            v15 = (char *)v20 + v21;
            v27 = (char *)v20 + v21;
            ++v17;
            --v16;
          }
          while (v16);
        }
        if (__p)
        {
          v27 = (char *)__p;
          operator delete(__p);
        }
      }
    }
    else
    {
      if (v10 >= *(_DWORD *)(a1 + 152) && *(_BYTE *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 136);
LABEL_11:
        sub_1D4D84FF8(v11, a2, a4, (uint64_t)a3);
        goto LABEL_26;
      }
      if (a4)
      {
        v22 = v25;
        v23 = a3;
        do
        {
          *v23++ = *(_DWORD *)(*(_QWORD *)(a1 + 240)
                             + 4 * (int)sub_1D4D80AF8(a2, 0, (*(_DWORD *)(a1 + 236) - 1)));
          --v22;
        }
        while (v22);
      }
    }
LABEL_26:
    if ((sub_1D4D97894(a1, v10, a4, a3, a5) & 1) != 0)
      return 1;
    if (++v10 >= *(_DWORD *)(a1 + 164))
      goto LABEL_28;
  }
}

void sub_1D4D97878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D97894(uint64_t a1, int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  int v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  uint64_t v50;
  const float *v51;
  float32x4_t v52;
  uint64_t v53;

  if (!a3)
  {
LABEL_13:
    v18 = *(_QWORD *)(a1 + 56);
    v19 = a4[1];
    v20 = (2 * *a4);
    v21 = *(float *)(v18 + 4 * v20);
    v22 = (2 * *a4) | 1u;
    v23 = *(float *)(v18 + 4 * v22);
    v24 = (2 * v19);
    v25 = *(float *)(v18 + 4 * v24);
    v26 = (2 * v19) | 1u;
    v27 = *(float *)(v18 + 4 * v26);
    v28 = a4[2];
    v29 = (2 * v28);
    v30 = *(float *)(v18 + 4 * v29);
    v31 = (2 * v28) | 1u;
    v32 = *(float *)(v18 + 4 * v31);
    v33 = (float)(v21 * v27) - (float)(v23 * v25);
    if (fabsf(v33 + (float)((float)((float)(v25 - v21) * v32) + (float)((float)(v23 - v27) * v30))) >= 0.00000011921)
    {
      v34 = a4[3];
      v35 = (2 * v34);
      v36 = *(float *)(v18 + 4 * v35);
      v37 = (2 * v34) | 1u;
      v38 = *(float *)(v18 + 4 * v37);
      if (fabsf(v33 + (float)((float)((float)(v25 - v21) * v38) + (float)((float)(v23 - v27) * v36))) >= 0.00000011921
        && fabsf((float)((float)(v30 * (float)-v23) + (float)(v21 * v32))+ (float)((float)((float)(v30 - v21) * v38) + (float)((float)(v23 - v32) * v36))) >= 0.00000011921&& fabsf((float)((float)(v25 * v32) - (float)(v27 * v30))+ (float)((float)((float)(v30 - v25) * v38) + (float)((float)(v27 - v32) * v36))) >= 0.00000011921)
      {
        v39 = *(_QWORD *)(a1 + 64);
        v40 = *(float *)(v39 + 4 * v20);
        v41 = *(float *)(v39 + 4 * v22);
        v42 = *(float *)(v39 + 4 * v24);
        v43 = *(float *)(v39 + 4 * v26);
        v44 = *(float *)(v39 + 4 * v29);
        v45 = *(float *)(v39 + 4 * v31);
        v46 = (float)(v40 * v43) - (float)(v41 * v42);
        if (fabsf(v46 + (float)((float)((float)(v42 - v40) * v45) + (float)((float)(v41 - v43) * v44))) >= 0.00000011921)
        {
          v47 = *(float *)(v39 + 4 * v35);
          v48 = *(float *)(v39 + 4 * v37);
          if (fabsf(v46 + (float)((float)((float)(v42 - v40) * v48) + (float)((float)(v41 - v43) * v47))) >= 0.00000011921
            && fabsf((float)((float)(v44 * (float)-v41) + (float)(v40 * v45))+ (float)((float)((float)(v44 - v40) * v48) + (float)((float)(v41 - v45) * v47))) >= 0.00000011921&& fabsf((float)((float)(v42 * v45) - (float)(v43 * v44))+ (float)((float)((float)(v44 - v42) * v48) + (float)((float)(v43 - v45) * v47))) >= 0.00000011921)
          {
            v49 = sub_1D4D8BAF0(*(_QWORD *)(a1 + 200), v18, v39, 0, (uint64_t)a4, a3, 0, a5, (float)*(unsigned int *)(a1 + 40), (float)*(unsigned int *)(a1 + 44));
            v17 = 0;
            if (!v49)
              return v17;
            v50 = 0;
            v51 = (const float *)(a5 + 32);
            v52 = vld1q_dup_f32(v51);
            do
            {
              *(float32x4_t *)(a5 + v50) = vdivq_f32(*(float32x4_t *)(a5 + v50), v52);
              v50 += 16;
            }
            while (v50 != 32);
            *(_DWORD *)(a5 + 32) = 1065353216;
            if (vabds_f32(1.0, (float)(*(float *)a5 * *(float *)(a5 + 16)) - (float)(*(float *)(a5 + 4) * *(float *)(a5 + 12))) <= (float)(1.0 - powf(0.98, (float)(a2 + 1))))
            {
              v53 = 0;
              v17 = 1;
              while (fabsf(*(float *)(a5 + v53)) != INFINITY)
              {
                v53 += 4;
                if (v53 == 36)
                  return v17;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v8 = 0;
  v9 = 1;
  v10 = 1;
  while (2)
  {
    v11 = &a4[v9];
    v12 = v8;
    while (1)
    {
      v8 = v12 + 1;
      if (v12 + 1 < (unint64_t)a3)
        break;
LABEL_8:
      ++v9;
      ++v11;
      v12 = v8;
      if (v8 == a3)
      {
        if ((v10 & 1) == 0)
          return 0;
        goto LABEL_13;
      }
    }
    v13 = a4[v12];
    v14 = a3;
    v15 = v11;
    while (1)
    {
      v16 = *v15++;
      if (v13 == v16)
        break;
      if (v9 == --v14)
        goto LABEL_8;
    }
    v10 = 0;
    v17 = 0;
    ++v9;
    if (v8 != a3)
      continue;
    return v17;
  }
}

void sub_1D4D97BE0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1D4D986D0((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 36 * a2;
  }
}

uint64_t sub_1D4D97C24(uint64_t a1, double a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  uint64_t i;
  uint64_t v9;
  float *v11;
  float *v12;

  LODWORD(a2) = *(_DWORD *)(a1 + 232);
  objc_msgSend(*(id *)(a1 + 16), "setInlierLimit:", a2);
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  LODWORD(v4) = *(_DWORD *)(a1 + 44);
  objc_msgSend(*(id *)(a1 + 16), "setFrameSize:", (double)v3, (double)v4);
  sub_1D4D844A0(&v11, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 2));
  objc_msgSend(*(id *)(a1 + 16), "performRansacOnData:firstPointSet:secondPointSet:pointWeights:homographies:numHomographies:homScores:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v11);
  if ((unint64_t)((char *)v12 - (char *)v11) < 5)
  {
    v9 = 0;
  }
  else
  {
    v5 = v12 - v11;
    v6 = *v11;
    if (v5 <= 2)
      v5 = 2;
    v7 = 0.0;
    for (i = 1; i != v5; ++i)
    {
      if (v11[i] > v6)
      {
        v6 = v11[i];
        v7 = (float)(int)i;
      }
    }
    v9 = (int)v7;
  }
  v12 = v11;
  operator delete(v11);
  return v9;
}

void sub_1D4D97D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4D97D44(uint64_t a1)
{
  unsigned int v2;
  size_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  qos_class_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  unsigned int *v20;
  size_t v21;
  _QWORD block[8];
  unsigned int v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 148);
  if (v2 < 0x64)
    v3 = 1;
  else
    v3 = v2 / 0x64;
  v4 = v2 / v3;
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (float *)((char *)block - ((v6 + 15) & 0x3FFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)block - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (unsigned int *)((char *)block - v11);
  v13 = qos_class_self();
  dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], v13, 0);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = dispatch_queue_create("RANSAC score queue", v14);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D4D980B0;
  block[3] = &unk_1E988B600;
  v24 = v4;
  v25 = v3;
  block[4] = a1;
  block[5] = v12;
  block[6] = v7;
  block[7] = v10;
  dispatch_apply(v3, v15, block);
  v16 = *v12;
  if (v3 >= 2)
  {
    v18 = *v7;
    v17 = v7 + 1;
    v19 = v18;
    v20 = v12 + 1;
    v21 = v3 - 1;
    do
    {
      if (*v17 > v19)
      {
        v16 = *v20;
        v19 = *v17;
      }
      ++v20;
      ++v17;
      --v21;
    }
    while (v21);
  }

  return v16;
}

uint64_t sub_1D4D97EF0(uint64_t result, float *a2, unsigned int *a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v9 = a2[7];
  v8 = a2[8];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = (float)(v10 * v8) - (float)(v9 * v11);
  v15 = *a2;
  v14 = a2[1];
  v16 = a2[2];
  v17 = a2[3];
  v18 = (float)(v9 * v16) - (float)(v14 * v8);
  v19 = (float)(v14 * v11) - (float)(v10 * v16);
  v20 = (float)((float)(v18 * v17) + (float)(*a2 * v13)) + (float)(v12 * v19);
  v21 = -2.2204e-16;
  if (v20 >= 2.2204e-16 || v20 <= -2.2204e-16)
  {
    v13 = v13 / v20;
    v18 = v18 / v20;
    v19 = v19 / v20;
    v4 = (float)((float)(v12 * v11) - (float)(v17 * v8)) / v20;
    v21 = (float)((float)(v17 * v9) - (float)(v12 * v10)) / v20;
    v5 = (float)((float)(v15 * v8) - (float)(v12 * v16)) / v20;
    v6 = (float)((float)(v17 * v16) - (float)(v15 * v11)) / v20;
    v7 = (float)((float)(v12 * v14) - (float)(v15 * v9)) / v20;
    v20 = (float)((float)(v15 * v10) - (float)(v17 * v14)) / v20;
  }
  v23 = *(unsigned int *)(result + 48);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = *(float *)(result + 232) * *(float *)(result + 232);
    v27 = *(float *)(result + 172) * (float)(v26 * *(float *)(result + 172));
    v28 = *(float *)(result + 176) * (float)(v26 * *(float *)(result + 176));
    v29 = *(_QWORD *)(result + 56);
    v30 = *(_QWORD *)(result + 64);
    v31 = 1;
    do
    {
      v32 = *(float *)(v29 + 4 * (v31 - 1));
      v33 = *(float *)(v29 + 4 * v31);
      v34 = *(float *)(v30 + 4 * (v31 - 1));
      v35 = *(float *)(v30 + 4 * v31);
      v36 = 1.0 / (float)(v20 + (float)((float)(v7 * v35) + (float)(v21 * v34)));
      v37 = (float)(v19 + (float)((float)(v18 * v35) + (float)(v13 * v34))) * v36;
      v38 = (float)((float)(v32 - v37) * (float)(v32 - v37))
          + (float)((float)(v33 - (float)((float)(v6 + (float)((float)(v5 * v35) + (float)(v4 * v34))) * v36))
                  * (float)(v33 - (float)((float)(v6 + (float)((float)(v5 * v35) + (float)(v4 * v34))) * v36)));
      v39 = 1.0 / (float)(v8 + (float)((float)(v9 * v33) + (float)(v12 * v32)));
      v40 = v35 - (float)((float)(v11 + (float)((float)(v10 * v33) + (float)(v17 * v32))) * v39);
      v41 = v34 - (float)((float)(v16 + (float)((float)(v14 * v33) + (float)(v15 * v32))) * v39);
      v42 = (float)(v41 * v41) + (float)(v40 * v40);
      if (v38 < v27 && v42 < v28)
      {
        *(_DWORD *)(a4 + 4 * v25++) = v24;
        v23 = *(unsigned int *)(result + 48);
      }
      ++v24;
      v31 += 2;
    }
    while (v24 < v23);
  }
  else
  {
    v25 = 0;
  }
  *a3 = v25;
  return result;
}

uint64_t sub_1D4D980B0(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;

  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = v12 * a2;
  if (*(int *)(a1 + 68) - 1 == a2)
    v14 = *(_DWORD *)(v11 + 148);
  else
    v14 = v12 + v13;
  result = sub_1D4D98114(v11, v13, v14 - 1, (float *)(*(_QWORD *)(a1 + 48) + 4 * a2), (int *)(*(_QWORD *)(a1 + 56) + 4 * a2), a3, a4, a5, a6, a7, a8, a9);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a2) = result;
  return result;
}

uint64_t sub_1D4D98114(uint64_t a1, int a2, int a3, float *a4, int *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v14;
  int v15;
  float v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int v24;

  if (a2 <= a3)
  {
    v17 = a2;
    v15 = 0;
    LODWORD(v14) = 0;
    v19 = a3 + 1;
    v20 = 36 * a2;
    v16 = -3.4028e38;
    do
    {
      v24 = 0;
      v21 = *(_QWORD *)(a1 + 208) + v20;
      sub_1D4D9820C(a1, v21, &v24, a6, a7, a8, a9, a10, a11, a12);
      *(float *)&a6 = v22 * (**(float (***)(uint64_t, uint64_t))a1)(a1, v21);
      if (*(float *)&a6 <= v16)
        v14 = v14;
      else
        v14 = v17;
      if (*(float *)&a6 > v16)
      {
        v15 = v24;
        v16 = *(float *)&a6;
      }
      v20 += 36;
      ++v17;
    }
    while (v19 != v17);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = -3.4028e38;
  }
  *a4 = v16;
  *a5 = v15;
  return v14;
}

uint64_t sub_1D4D9820C(uint64_t result, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  float v16;
  int32x2_t v17;
  float v18;
  int32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  int32x4_t *v26;
  float v27;
  int32x4_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int8x16_t *v50;
  unint64_t v51;
  int32x4_t *v52;
  int32x4_t *v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;

  v20 = *(float *)(a2 + 28);
  LODWORD(a5) = *(_DWORD *)(a2 + 32);
  v21 = *(float *)(a2 + 16);
  LODWORD(a7) = *(_DWORD *)(a2 + 20);
  LODWORD(a9) = *(_DWORD *)(a2 + 24);
  *(float *)&a10 = (float)(v21 * *(float *)&a5) - (float)(v20 * *(float *)&a7);
  v10.i32[0] = *(_DWORD *)a2;
  v22 = *(float *)(a2 + 4);
  v11.i32[0] = *(_DWORD *)(a2 + 8);
  v12.i32[0] = *(_DWORD *)(a2 + 12);
  v23 = (float)(v20 * *(float *)v11.i32) - (float)(v22 * *(float *)&a5);
  *(float *)v13.i32 = (float)(v22 * *(float *)&a7) - (float)(v21 * *(float *)v11.i32);
  *(float *)v19.i32 = (float)((float)(v23 * *(float *)v12.i32) + (float)(*(float *)a2 * *(float *)&a10))
                    + (float)(*(float *)&a9 * *(float *)v13.i32);
  v14.i32[0] = -1518338048;
  v24 = *(float *)v19.i32 >= 2.2204e-16 || *(float *)v19.i32 <= -2.2204e-16;
  if (v24)
  {
    *(float *)&a10 = *(float *)&a10 / *(float *)v19.i32;
    v23 = v23 / *(float *)v19.i32;
    *(float *)v13.i32 = *(float *)v13.i32 / *(float *)v19.i32;
    *(float *)v15.i32 = (float)((float)(*(float *)&a9 * *(float *)&a7) - (float)(*(float *)v12.i32 * *(float *)&a5))
                      / *(float *)v19.i32;
    *(float *)v14.i32 = (float)((float)(*(float *)v12.i32 * v20) - (float)(*(float *)&a9 * v21)) / *(float *)v19.i32;
    v16 = (float)((float)(*(float *)v10.i32 * *(float *)&a5) - (float)(*(float *)&a9 * *(float *)v11.i32))
        / *(float *)v19.i32;
    *(float *)v17.i32 = (float)((float)(*(float *)v12.i32 * *(float *)v11.i32)
                              - (float)(*(float *)v10.i32 * *(float *)&a7))
                      / *(float *)v19.i32;
    v18 = (float)((float)(*(float *)&a9 * v22) - (float)(*(float *)v10.i32 * v20)) / *(float *)v19.i32;
    *(float *)v19.i32 = (float)((float)(*(float *)v10.i32 * v21) - (float)(*(float *)v12.i32 * v22)) / *(float *)v19.i32;
  }
  v25 = *(float *)(result + 232) * *(float *)(result + 232);
  v26 = *(int32x4_t **)(result + 56);
  v27 = 0.0;
  if ((v26 & 0xF) != 0 || (v28 = *(int32x4_t **)(result + 64), (v28 & 0xF) != 0))
  {
    LODWORD(v29) = 0;
    v30 = 0;
  }
  else
  {
    v47 = *(unsigned int *)(result + 48);
    if (v47 >= 4)
    {
      v50 = *(int8x16_t **)(result + 80);
      v51 = v47 >> 2;
      v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      v80 = (float32x4_t)vdupq_lane_s32(v10, 0);
      v79 = (float32x4_t)vdupq_lane_s32(v11, 0);
      v78 = (float32x4_t)vdupq_lane_s32(v12, 0);
      v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v76 = (float32x4_t)vdupq_lane_s32(v14, 0);
      v75 = (float32x4_t)vdupq_lane_s32(v19, 0);
      v52 = v26 + 1;
      v53 = v28 + 1;
      v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a10, 0);
      v73 = (float32x4_t)vdupq_lane_s32(v13, 0);
      v49 = 0uLL;
      v72 = (float32x4_t)vdupq_lane_s32(v15, 0);
      v48 = 0uLL;
      v54 = (float32x4_t)vdupq_lane_s32(v17, 0);
      do
      {
        v55 = v52[-1];
        v56 = (float32x4_t)vuzp1q_s32(v55, *v52);
        v57 = (float32x4_t)vuzp2q_s32(v55, *v52);
        v58 = v53[-1];
        v59 = (float32x4_t)vuzp1q_s32(v58, *v53);
        v60 = (float32x4_t)vuzp2q_s32(v58, *v53);
        v61 = vaddq_f32(v81, vmlaq_f32(vmulq_n_f32(v57, v20), v56, v82));
        v62 = vmlaq_f32(vmulq_n_f32(v60, v18), v59, v76);
        v63 = vmlaq_f32(vmulq_n_f32(v60, v23), v59, v74);
        v64 = vmlsq_f32(vaddq_f32(v79, vmlaq_f32(vmulq_n_f32(v57, v22), v56, v80)), v61, v59);
        v65 = vmlaq_f32(vmulq_n_f32(v60, v16), v59, v72);
        v66 = vmlsq_f32(vaddq_f32(v77, vmlaq_f32(vmulq_n_f32(v57, v21), v56, v78)), v61, v60);
        v67 = vaddq_f32(v75, v62);
        v68 = vmlsq_f32(vaddq_f32(v73, v63), v67, v56);
        v69 = vmlsq_f32(vaddq_f32(v54, v65), v67, v57);
        v70 = *v50++;
        v71 = (int32x4_t)vandq_s8((int8x16_t)vcgeq_f32(vmulq_f32(v67, vmulq_n_f32(v67, v25)), vmlaq_f32(vmulq_f32(v69, v69), v68, v68)), (int8x16_t)vcgeq_f32(vmulq_f32(v61, vmulq_n_f32(v61, v25)), vmlaq_f32(vmulq_f32(v66, v66), v64, v64)));
        v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(v70, (int8x16_t)v71));
        v49 = vsubq_s32(v49, v71);
        v52 += 2;
        v53 += 2;
        --v51;
      }
      while (v51);
      LODWORD(v29) = v47 & 0xFFFFFFFC;
    }
    else
    {
      LODWORD(v29) = 0;
      v48 = 0uLL;
      v49 = 0uLL;
    }
    LODWORD(v27) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)))).u32[0];
    v30 = vaddvq_s32(v49);
  }
  v31 = *(unsigned int *)(result + 48);
  if (v29 < v31)
  {
    v32 = *(_QWORD *)(result + 64);
    v33 = 2 * v29;
    v29 = v29;
    do
    {
      v34 = *(float *)&v26->i32[v33];
      v35 = *(float *)&v26->i32[v33 + 1];
      v36 = *(float *)&a5 + (float)((float)(v20 * v35) + (float)(*(float *)&a9 * v34));
      v37 = *(float *)(v32 + 4 * v33);
      v38 = (float)(*(float *)v11.i32 + (float)((float)(v22 * v35) + (float)(*(float *)v10.i32 * v34)))
          - (float)(v37 * v36);
      v39 = *(float *)(v32 + 4 * (v33 + 1));
      v40 = (float)(*(float *)&a7 + (float)((float)(v21 * v35) + (float)(*(float *)v12.i32 * v34))) - (float)(v39 * v36);
      v24 = (float)((float)(v40 * v40) + (float)(v38 * v38)) <= (float)(v36 * (float)(v25 * v36));
      v41 = *(float *)v19.i32 + (float)((float)(v18 * v39) + (float)(*(float *)v14.i32 * v37));
      v42 = (float)(*(float *)v13.i32 + (float)((float)(v23 * v39) + (float)(*(float *)&a10 * v37)))
          - (float)(v34 * v41);
      v43 = (float)(*(float *)v17.i32 + (float)((float)(v16 * v39) + (float)(*(float *)v15.i32 * v37)))
          - (float)(v35 * v41);
      v44 = v41 * (float)(v25 * v41);
      v45 = (float)(v43 * v43) + (float)(v42 * v42);
      if (v24 && v45 <= v44)
      {
        ++v30;
        v27 = v27 + *(float *)(*(_QWORD *)(result + 80) + 4 * v29);
      }
      ++v29;
      v33 += 2;
    }
    while (v31 != v29);
  }
  if (a3)
    *a3 = v30;
  return result;
}

float sub_1D4D98588()
{
  return 1.0;
}

char *sub_1D4D98590(int a1, uint64_t a2, char *a3)
{
  char *result;

  if (a3 != (char *)a2)
    return sub_1D4D988D4(a3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

void sub_1D4D985B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = a1 + 80;
  if (v2)
  {
    sub_1D4D81328(v3, *(unsigned int *)(a1 + 48));
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4)
    {
      v5 = *(int **)(a1 + 72);
      v6 = *(_DWORD **)(a1 + 80);
      do
      {
        v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    v8 = *(unsigned int *)(a1 + 48);
    v9 = 1065353216;
    sub_1D4D9862C(v3, v8, &v9);
  }
}

void sub_1D4D9862C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1D4D989DC((void **)a1, a2 - v3, a3);
  }
}

_QWORD *sub_1D4D9865C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D5E9D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D4D986B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4D986D0(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x71C71C71C71C71CLL)
      sub_1D4D5DFA8();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x38E38E38E38E38ELL)
      v11 = 0x71C71C71C71C71CLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1D4D9888C(v4, v11);
    else
      v12 = 0;
    v14 = &v12[36 * v8];
    v15 = &v12[36 * v11];
    v16 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 36);
        v21 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v21;
        *(_OWORD *)(v14 - 36) = v20;
        v14 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *sub_1D4D9888C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL)
    sub_1D4D5E074();
  return operator new(36 * a2);
}

char *sub_1D4D988D4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_1D4D5DFA8();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D4D5E9D4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1D4D989DC(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      sub_1D4D5DFA8();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1D4D5EA14(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1D4D98AEC(void **a1, size_t a2, size_t a3, void *a4)
{
  unint64_t v8;

  if (a4 == (void *)1)
  {
    sub_1D4D98B78((uint64_t)a1, a2, a3);
  }
  else
  {
    v8 = ((_QWORD)a4 * a2 + 15) & 0xFFFFFFFFFFFFFFF0;
    *a1 = malloc_type_calloc(1uLL, v8 * a3, 0xC41B3F2CuLL);
    a1[1] = (void *)a2;
    a1[2] = (void *)a3;
    a1[3] = (void *)v8;
    a1[4] = a4;
    a1[5] = 0;
  }
}

double sub_1D4D98B78(uint64_t a1, size_t a2, size_t a3)
{
  OSType v6;
  const __CFAllocator *v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  const void *v12;
  CFNumberRef v13;
  CFDictionaryRef v14;
  CVReturn v15;
  double result;
  CVPixelBufferRef pixelBufferOut;
  void *values;
  int valuePtr;

  if ((a2 & 3) != 0)
    v6 = 875704422;
  else
    v6 = 1278226488;
  pixelBufferOut = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 16;
  v11 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v11);
  CFRelease(v11);
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9010], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9030], v12);
  valuePtr = 4096;
  v13 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9048], v13);
  CFRelease(v13);
  values = 0;
  v14 = CFDictionaryCreate(v7, (const void **)&values, (const void **)&values, 0, v8, v9);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v14);
  CFRelease(v14);
  v15 = CVPixelBufferCreate(v7, a2, a3, v6, Mutable, &pixelBufferOut);
  CFRelease(Mutable);
  if (!v15)
  {
    *(_QWORD *)(a1 + 24) = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    *(_QWORD *)(a1 + 48) = pixelBufferOut;
  }
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1D4DB29B0;
  return result;
}

void sub_1D4D98D60(uint64_t a1)
{
  bzero(*(void **)a1, *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16));
}

void sub_1D4D98D74(uint64_t a1)
{
  __CVBuffer *v2;

  v2 = *(__CVBuffer **)(a1 + 48);
  if (v2)
    CVPixelBufferRelease(v2);
  else
    free(*(void **)a1);
  *(_QWORD *)a1 = 0;
}

void sub_1D4D98DAC(void *a1)
{
  sub_1D4D98D74((uint64_t)a1);
  free(a1);
}

void **sub_1D4D98DD0(size_t a1, size_t a2, void *a3)
{
  void **v6;
  void **v7;

  v6 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x103004000EA119AuLL);
  v7 = v6;
  if (v6)
    sub_1D4D98AEC(v6, a1, a2, a3);
  return v7;
}

_QWORD *sub_1D4D98E38(__CVBuffer *a1)
{
  _QWORD *v2;
  double x;
  double y;
  double height;
  unint64_t width;
  unint64_t v7;
  size_t BytesPerRowOfPlane;
  CGRect CleanRect;

  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x103004000EA119AuLL);
  if (v2)
  {
    CleanRect = CVImageBufferGetCleanRect(a1);
    x = CleanRect.origin.x;
    y = CleanRect.origin.y;
    height = CleanRect.size.height;
    width = (unint64_t)CleanRect.size.width;
    v7 = (unint64_t)CleanRect.size.height;
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    v2[1] = width;
    v2[2] = v7;
    v2[3] = BytesPerRowOfPlane;
    v2[4] = 1;
    v2[5] = (unint64_t)(x
                             + ((double)CVPixelBufferGetHeightOfPlane(a1, 0) - (y + (double)(unint64_t)height))
                             * (double)BytesPerRowOfPlane);
    v2[6] = a1;
    CVPixelBufferRetain(a1);
  }
  return v2;
}

_QWORD *sub_1D4D99528(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_1D4DABED8(a1);
  *result = &off_1E988ADC0;
  return result;
}

void sub_1D4D9954C()
{
  j_nullsub_2();
  JUMPOUT(0x1D826897CLL);
}

uint64_t sub_1D4D99570(uint64_t result, uint64_t *a2, int a3, float **a4, int **a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v69;
  int v71;
  int v72;
  int v74;
  int v76;
  int v78;
  int v79;
  int v81;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v96;
  int v98;
  int v100;
  int v101;
  int v103;
  int v105;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _BOOL4 v114;
  int v115;
  int v117;
  int v119;
  int v121;
  int v123;
  int v125;
  _BOOL4 v127;
  int v128;
  int v130;
  int v132;
  int v134;
  int v136;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v145;
  int v147;
  int v149;
  int v150;
  int v152;
  int v154;
  int v156;
  int v157;
  int v158;
  int v159;
  int v161;
  int v163;
  int v165;
  int v167;
  int v169;
  int v170;
  int v172;
  int v173;
  int v175;
  int v177;
  int v179;
  int v181;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  _BOOL4 v191;
  int v192;
  int v194;
  int v196;
  int v198;
  int v200;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v221;
  int v223;
  int v225;
  int v227;
  int v229;
  int v231;
  int v232;
  int v234;
  int v236;
  int v238;
  int v240;
  int v242;
  int v243;
  int v245;
  int v246;
  int v248;
  int v250;
  int v252;
  int v254;
  int v256;
  int v258;
  int v260;
  int v262;
  int v264;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v279;
  int v281;
  int v283;
  int v285;
  int v286;
  int v287;
  int v289;
  int v291;
  int v293;
  int v295;
  int v297;
  int v299;
  int v300;
  int v302;
  int v304;
  int v306;
  int v307;
  int v309;
  int v310;
  int v311;
  int v313;
  int v315;
  int v317;
  int v319;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v328;
  int v330;
  int v332;
  int v334;
  int v336;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v347;
  int v349;
  int v351;
  int v353;
  int v355;
  int v356;
  int v358;
  int v360;
  int v362;
  int v364;
  int v365;
  int v367;
  int v369;
  int v371;
  int v372;
  int v374;
  int v376;
  int v378;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v391;
  int v392;
  int v394;
  int v396;
  int v398;
  int v399;
  int v400;
  int v402;
  int v404;
  int v406;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v414;
  int v416;
  int v418;
  int v420;
  int v422;
  int v423;
  int v424;
  int v426;
  int v428;
  int v430;
  int v432;
  int v434;
  int v435;
  int v437;
  int v439;
  int v441;
  int v442;
  int v444;
  int v446;
  int v448;
  int v450;
  int v452;
  int v455;
  int v457;
  int v459;
  int v461;
  int v463;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v471;
  int v473;
  int v474;
  int v476;
  int v478;
  int v480;
  int v482;
  int v483;
  int v485;
  int v487;
  int v490;
  int v491;
  int v493;
  int v495;
  int v496;
  int v497;
  int v499;
  int v501;
  int v504;
  int v505;
  int v507;
  int v508;
  int v510;
  int v511;
  int v512;
  int v514;
  int v516;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v526;
  int v528;
  int v530;
  int v532;
  int v534;
  int v535;
  int v536;
  int v537;
  int v539;
  int v541;
  int v543;
  int v544;
  int v546;
  int v548;
  int v550;
  int v552;
  int v554;
  int v556;
  int v557;
  int v558;
  int v559;
  int v561;
  int v563;
  int v565;
  int v566;
  int v568;
  int v570;
  int v572;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v580;
  int v582;
  int v584;
  int v585;
  int v587;
  int v588;
  int v589;
  int v591;
  int v593;
  int v595;
  int v597;
  int v599;
  int v602;
  int v604;
  int v606;
  int v608;
  int v610;
  int v612;
  int v614;
  int v616;
  int v617;
  int v618;
  int v620;
  int v622;
  int v624;
  int v625;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v635;
  int v637;
  int v638;
  int v640;
  int v642;
  int v644;
  int v645;
  int v646;
  int v648;
  int v650;
  int v651;
  int v652;
  int v654;
  int v655;
  int v656;
  int v657;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v666;
  int v668;
  int v670;
  int v671;
  int v673;
  int v674;
  int v676;
  int v678;
  int v680;
  int v682;
  int v683;
  int v684;
  int v686;
  int v688;
  int v690;
  int v691;
  int v693;
  uint64_t v694;
  uint64_t v695;
  float v696;
  unint64_t v697;
  float *v698;
  float *v699;
  float *v700;
  uint64_t v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  char *v705;
  char *v706;
  float *v707;
  float *v708;
  uint64_t v709;
  unint64_t v710;
  int *v711;
  int *v712;
  int *v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  char *v718;
  char *v719;
  int *v720;
  int v721;
  int v722;
  int v723;
  int v724;
  int v726;
  int v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v733;
  int v734;
  int v736;
  int v738;
  int v740;
  int v742;
  int v744;
  int v746;
  int v747;
  int v749;
  int v751;
  int v752;
  int v754;
  int v756;
  int v757;
  int v758;
  int v760;
  int v762;
  int v763;
  int v764;
  int v765;
  int v766;
  int v767;
  int v768;
  int v769;
  int v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  int v777;
  int v778;
  int v779;
  int v780;
  int v781;
  int v783;
  int v784;
  int v786;
  int v787;
  int v788;
  int v790;
  int v791;
  int v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  int v798;
  int v799;
  int v800;
  int v801;
  int v802;
  int v803;
  int v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  int v810;
  int v811;
  int v812;
  int v813;
  int v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  int v825;
  int v826;
  int v827;
  int v828;
  int v829;
  int v830;
  int v831;
  int v832;
  int v833;
  int v834;
  int v835;
  int v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  int v843;
  int v844;
  int v845;
  int v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  int v852;
  int v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  float **v898;
  int **v899;

  v5 = a2[2] - 4;
  if (v5 >= 5)
  {
    v8 = a2[3];
    v9 = -3 * v8;
    v10 = 2 - 2 * v8;
    v11 = -3 * v8 + 1;
    v12 = 3 - v8;
    v13 = v8 + 3;
    v14 = 2 * v8 + 2;
    v15 = 3 * v8;
    v16 = 3 * v8 + 1;
    v17 = 3 * v8 - 1;
    v18 = 2 * v8 - 2;
    v19 = v8 - 3;
    v20 = -3 - v8;
    v21 = (2 * v8) ^ 0xFFFFFFFFFFFFFFFELL;
    v22 = -3 * v8 - 1;
    v23 = *a2;
    v24 = a2[1] - 4;
    v883 = (uint64_t)(a5 + 2);
    v884 = (uint64_t)(a4 + 2);
    v25 = 4;
    v899 = a5;
    v897 = -3 - v8;
    v898 = a4;
    v895 = v5;
    v896 = result;
    v893 = v11;
    v894 = v10;
    v891 = v8 + 3;
    v892 = 3 - v8;
    v889 = 3 * v8;
    v890 = v14;
    v887 = v18;
    v888 = v16;
    v885 = v21;
    v886 = v8 - 3;
    while (v24 < 5)
    {
LABEL_2432:
      if (++v25 == v5)
        return result;
    }
    v26 = (float)v25;
    v27 = 4;
    while (1)
    {
      v28 = (unsigned __int8 *)(v23 + v27 + a2[3] * v25);
      v29 = *v28;
      v30 = v29 - a3;
      v31 = v29 + a3;
      v32 = v28[3];
      if (v30 <= v32)
      {
        if (v31 >= v32)
        {
          v52 = *(v28 - 3);
          if (v30 > v52)
          {
            if (v30 <= v28[v20] || v30 <= v28[v19])
              goto LABEL_1943;
            v53 = v28[v17];
            if (v30 <= v53)
            {
              v203 = v28[v10];
              if (v31 >= v53)
              {
                if (v30 <= v203 || v30 <= v28[v9] || v30 <= v28[v21] || v30 <= v28[v11])
                  goto LABEL_1943;
                if (v30 <= v28[v12])
                {
                  v40 = v28[v18];
                  goto LABEL_1473;
                }
LABEL_1905:
                v268 = v28[v22];
                goto LABEL_1906;
              }
              if (v30 <= v203 || v30 <= v28[v9])
                goto LABEL_1943;
              v204 = v28[v12];
              if (v30 <= v204)
              {
                v558 = v28[v18];
                if (v31 >= v204)
                {
                  if (v30 <= v558 || v30 <= v28[v21])
                    goto LABEL_1943;
                }
                else if (v30 <= v558 || v30 <= v28[v21])
                {
                  goto LABEL_1943;
                }
              }
              else if (v30 <= v28[v21])
              {
                goto LABEL_1943;
              }
            }
            else
            {
              v54 = v28[v21];
              if (v30 <= v54)
              {
                v270 = v28[v13];
                if (v31 >= v54)
                {
                  if (v30 <= v270 || v30 <= v28[v14] || v30 <= v28[v18])
                    goto LABEL_1943;
                }
                else if (v30 <= v270 || v30 <= v28[v14] || v30 <= v28[v18])
                {
                  goto LABEL_1943;
                }
                v324 = v28[v16];
                goto LABEL_1885;
              }
              v55 = v28[v9];
              if (v30 <= v55)
              {
                v342 = v28[v16];
                if (v31 < v55)
                {
                  if (v30 <= v342)
                    goto LABEL_1943;
                  v343 = v28[v14];
                  if (v30 <= v343)
                  {
                    v344 = v28[v22];
                    if (v31 >= v343)
                    {
                      if (v30 <= v344)
                        goto LABEL_1943;
                    }
                    else if (v30 <= v344)
                    {
                      goto LABEL_1943;
                    }
                  }
                  v324 = v28[v18];
                  goto LABEL_1885;
                }
                if (v30 <= v342 || v30 <= v28[v18] || v30 <= v28[v14] && v30 <= v28[v22])
                  goto LABEL_1943;
LABEL_1886:
                v268 = v28[v15];
                goto LABEL_1906;
              }
              v56 = v28[v18];
              if (v30 > v56)
              {
                if (v30 > v28[v15])
                {
                  if (v30 > v28[v22])
                    goto LABEL_1907;
                  if (v30 <= v28[v14])
                    goto LABEL_1943;
                  goto LABEL_1517;
                }
                v40 = v28[v11];
LABEL_1473:
                if (v30 <= v40)
                  goto LABEL_1943;
                goto LABEL_1905;
              }
              v467 = v28[v12];
              if (v31 >= v56)
              {
                if (v30 <= v467 || v30 <= v28[v10])
                  goto LABEL_1943;
              }
              else if (v30 <= v467 || v30 <= v28[v10])
              {
                goto LABEL_1943;
              }
            }
            if (v30 <= v28[v11])
              goto LABEL_1943;
            goto LABEL_1905;
          }
          if (v31 >= v52)
            goto LABEL_1943;
          v67 = v28[v20];
          if (v30 > v67 || v31 >= v67)
            goto LABEL_1943;
          v69 = v28[v19];
          if (v30 > v69 || v31 >= v69)
            goto LABEL_1943;
          v71 = v28[v17];
          if (v30 > v71)
          {
            v72 = v28[v10];
            if (v30 > v72 || v31 >= v72)
              goto LABEL_1943;
            v74 = v28[v22];
            if (v30 > v74 || v31 >= v74)
              goto LABEL_1943;
            v76 = v28[v11];
            if (v30 > v76 || v31 >= v76)
              goto LABEL_1943;
            v78 = v28[v12];
            if (v30 <= v78)
            {
              if (v31 >= v78)
              {
                v731 = v28[v18];
                if (v30 > v731 || v31 >= v731)
                  goto LABEL_1943;
                v733 = v28[v21];
                if (v30 > v733 || v31 >= v733)
                  goto LABEL_1943;
              }
              else
              {
                v625 = v28[v21];
                if (v30 > v625 || v31 >= v625)
                  goto LABEL_1943;
              }
            }
            else
            {
              v79 = v28[v18];
              if (v30 > v79 || v31 >= v79)
                goto LABEL_1943;
              v81 = v28[v21];
              if (v30 > v81 || v31 >= v81)
                goto LABEL_1943;
            }
            v231 = v28[v9];
            goto LABEL_2277;
          }
          if (v31 >= v71)
          {
            v412 = v28[v10];
            if (v30 > v412 || v31 >= v412)
              goto LABEL_1943;
            v414 = v28[v9];
            if (v30 > v414 || v31 >= v414)
              goto LABEL_1943;
            v416 = v28[v21];
            if (v30 > v416 || v31 >= v416)
              goto LABEL_1943;
            v418 = v28[v11];
            if (v30 > v418 || v31 >= v418)
              goto LABEL_1943;
            v420 = v28[v22];
            if (v30 > v420 || v31 >= v420)
              goto LABEL_1943;
            v422 = v28[v12];
            if (v30 <= v422 && v31 < v422)
              goto LABEL_1907;
            v231 = v28[v18];
            goto LABEL_2277;
          }
          v276 = v28[v21];
          if (v30 <= v276)
          {
            if (v31 >= v276)
            {
              v602 = v28[v13];
              if (v30 > v602 || v31 >= v602)
                goto LABEL_1943;
              v604 = v28[v14];
              if (v30 > v604 || v31 >= v604)
                goto LABEL_1943;
              v606 = v28[v18];
              if (v30 > v606 || v31 >= v606)
                goto LABEL_1943;
              v608 = v28[v16];
              if (v30 > v608 || v31 >= v608)
                goto LABEL_1943;
            }
            else
            {
              v504 = v28[v9];
              if (v30 <= v504)
              {
                if (v31 >= v504)
                {
                  v752 = v28[v16];
                  if (v30 > v752 || v31 >= v752)
                    goto LABEL_1943;
                  v754 = v28[v18];
                  if (v30 > v754 || v31 >= v754)
                    goto LABEL_1943;
                  v756 = v28[v15];
                  if (v30 > v756 || v31 >= v756)
                    goto LABEL_1943;
                  v757 = v28[v14];
                  if (v30 <= v757 && v31 < v757)
                    goto LABEL_1907;
                }
                else
                {
                  v651 = v28[v18];
                  if (v30 <= v651)
                  {
                    if (v31 >= v651)
                    {
                      v808 = v28[v12];
                      if (v30 > v808)
                        goto LABEL_1943;
                      if (v31 >= v808)
                        goto LABEL_1943;
                      v809 = v28[v10];
                      if (v30 > v809)
                        goto LABEL_1943;
                      if (v31 >= v809)
                        goto LABEL_1943;
                      v810 = v28[v11];
                      if (v30 > v810 || v31 >= v810)
                        goto LABEL_1943;
                    }
                    else
                    {
                      v774 = v28[v15];
                      if (v30 <= v774)
                      {
                        if (v31 < v774)
                        {
                          v828 = v28[v22];
                          if (v30 <= v828)
                          {
                            if (v31 < v828)
                              goto LABEL_1907;
                            v859 = v28[v14];
                            if (v30 > v859 || v31 >= v859)
                              goto LABEL_1943;
                          }
                          else
                          {
                            v829 = v28[v14];
                            if (v30 > v829 || v31 >= v829)
                              goto LABEL_1943;
                          }
                          v231 = v28[v16];
                          goto LABEL_2277;
                        }
                        v849 = v28[v11];
                        if (v30 > v849 || v31 >= v849)
                          goto LABEL_1943;
                      }
                      else
                      {
                        v775 = v28[v11];
                        if (v30 > v775 || v31 >= v775)
                          goto LABEL_1943;
                      }
                    }
                  }
                  else
                  {
                    v652 = v28[v12];
                    if (v30 > v652 || v31 >= v652)
                      goto LABEL_1943;
                    v654 = v28[v10];
                    if (v30 > v654)
                      goto LABEL_1943;
                    if (v31 >= v654)
                      goto LABEL_1943;
                    v655 = v28[v11];
                    if (v30 > v655 || v31 >= v655)
                      goto LABEL_1943;
                  }
                }
                v231 = v28[v22];
LABEL_2277:
                if (v30 <= v231 && v31 < v231)
                  goto LABEL_1907;
                goto LABEL_1943;
              }
              v505 = v28[v16];
              if (v30 > v505 || v31 >= v505)
                goto LABEL_1943;
              v507 = v28[v14];
              if (v30 <= v507)
              {
                if (v31 >= v507)
                {
                  v804 = v28[v22];
                  if (v30 > v804)
                    goto LABEL_1943;
                  if (v31 >= v804)
                    goto LABEL_1943;
                  v805 = v28[v18];
                  if (v30 > v805 || v31 >= v805)
                    goto LABEL_1943;
                }
                else
                {
                  v770 = v28[v18];
                  if (v30 > v770 || v31 >= v770)
                    goto LABEL_1943;
                }
              }
              else
              {
                v508 = v28[v22];
                if (v30 > v508 || v31 >= v508)
                  goto LABEL_1943;
                v510 = v28[v18];
                if (v30 > v510 || v31 >= v510)
                  goto LABEL_1943;
              }
            }
          }
          else
          {
            v277 = v28[v13];
            if (v30 > v277 || v31 >= v277)
              goto LABEL_1943;
            v279 = v28[v14];
            if (v30 > v279 || v31 >= v279)
              goto LABEL_1943;
            v281 = v28[v18];
            if (v30 > v281 || v31 >= v281)
              goto LABEL_1943;
            v283 = v28[v16];
            if (v30 > v283 || v31 >= v283)
              goto LABEL_1943;
          }
          goto LABEL_2190;
        }
        v41 = v28[v9];
        if (v30 > v41)
        {
          v42 = v28[v18];
          if (v30 > v42)
          {
            v43 = v28[v20];
            if (v30 > v43)
            {
              v44 = v28[v15];
              if (v30 > v44)
              {
                if (v30 <= *(v28 - 3))
                  goto LABEL_1943;
                v45 = v28[v21];
                if (v30 > v45)
                {
                  if (v30 <= v28[v19])
                    goto LABEL_1943;
                  if (v30 <= v28[v22])
                  {
                    if (v30 <= v28[v14])
                      goto LABEL_1943;
                    goto LABEL_25;
                  }
LABEL_309:
                  if (v30 > v28[v17])
                    goto LABEL_1907;
                  if (v30 <= v28[v10])
                    goto LABEL_1943;
                  goto LABEL_1237;
                }
                v341 = v28[v13];
                if (v31 < v45)
                {
                  if (v30 <= v341 || v30 <= v28[v14])
                    goto LABEL_1943;
                  v186 = v28[v17];
                  goto LABEL_857;
                }
                if (v30 <= v341)
                  goto LABEL_1943;
                v63 = v28[v14];
LABEL_1366:
                if (v30 <= v63 || v30 <= v28[v16])
                  goto LABEL_1943;
                v46 = v28[v19];
LABEL_1877:
                if (v30 <= v46)
                  goto LABEL_1943;
LABEL_1878:
                v268 = v28[v17];
                goto LABEL_1906;
              }
              if (v31 >= v44)
              {
                if (v30 <= v28[v11] || v30 <= *(v28 - 3) || v30 <= v28[v21] || v30 <= v28[v17] && v30 <= v28[v10])
                  goto LABEL_1943;
                goto LABEL_744;
              }
              v187 = v28[v10];
              if (v30 > v187)
              {
                if (v30 <= v28[v19] || v30 <= v28[v21])
                  goto LABEL_1943;
                v188 = v28[v11];
                goto LABEL_442;
              }
              v364 = v28[v17];
              if (v31 >= v187)
              {
                if (v30 <= v364)
                  goto LABEL_1943;
LABEL_1403:
                if (v30 <= v28[v11] || v30 <= v28[v21])
                  goto LABEL_1943;
                v321 = v28[v19];
                goto LABEL_1406;
              }
              if (v30 > v364)
                goto LABEL_1403;
              if (v31 >= v364)
                goto LABEL_1943;
              v365 = v28[v11];
              if (v30 > v365 || v31 >= v365)
                goto LABEL_1943;
              v367 = v28[v14];
              if (v30 > v367 || v31 >= v367)
                goto LABEL_1943;
              v369 = v28[v13];
              if (v30 > v369 || v31 >= v369)
                goto LABEL_1943;
              v371 = v28[v12];
LABEL_1769:
              if (v30 > v371 || v31 >= v371)
                goto LABEL_1943;
              goto LABEL_2262;
            }
            v112 = v28[v11];
            v114 = v30 <= v112 && v31 < v112;
            if (v31 >= v43)
            {
              if (!v114)
                goto LABEL_1943;
              v219 = v28[v17];
              if (v30 > v219 || v31 >= v219)
                goto LABEL_1943;
              v221 = v28[v16];
              if (v30 > v221 || v31 >= v221)
                goto LABEL_1943;
              v223 = v28[v10];
              if (v30 > v223 || v31 >= v223)
                goto LABEL_1943;
              v225 = v28[v13];
              if (v30 > v225 || v31 >= v225)
                goto LABEL_1943;
              v227 = v28[v12];
              if (v30 > v227 || v31 >= v227)
                goto LABEL_1943;
              v229 = v28[v15];
              if (v30 > v229 || v31 >= v229)
                goto LABEL_1943;
              v231 = v28[v14];
              goto LABEL_2277;
            }
            if (!v114)
              goto LABEL_1943;
            v115 = v28[v17];
            if (v30 > v115 || v31 >= v115)
              goto LABEL_1943;
            v117 = v28[v14];
            if (v30 > v117 || v31 >= v117)
              goto LABEL_1943;
            v119 = v28[v10];
            if (v30 > v119 || v31 >= v119)
              goto LABEL_1943;
            v121 = v28[v16];
            if (v30 > v121 || v31 >= v121)
              goto LABEL_1943;
            v123 = v28[v13];
            if (v30 > v123 || v31 >= v123)
              goto LABEL_1943;
            v107 = v28[v12];
            goto LABEL_612;
          }
          if (v31 >= v42)
          {
            v156 = v28[v11];
            if (v30 > v156)
            {
              if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v10])
                goto LABEL_1943;
              goto LABEL_317;
            }
            if (v31 >= v156)
              goto LABEL_1943;
            v256 = v28[v17];
            if (v30 > v256 || v31 >= v256)
              goto LABEL_1943;
            v258 = v28[v14];
            if (v30 > v258 || v31 >= v258)
              goto LABEL_1943;
            v260 = v28[v10];
            if (v30 > v260 || v31 >= v260)
              goto LABEL_1943;
            v262 = v28[v16];
            if (v30 > v262 || v31 >= v262)
              goto LABEL_1943;
            v264 = v28[v12];
            if (v30 > v264 || v31 >= v264)
              goto LABEL_1943;
            v107 = v28[v13];
LABEL_612:
            if (v30 > v107 || v31 >= v107)
              goto LABEL_1943;
            goto LABEL_2276;
          }
          v85 = v28[v16];
          if (v30 > v85)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v21])
              goto LABEL_1943;
            v86 = v28[v10];
            goto LABEL_973;
          }
          if (v31 >= v85)
          {
            if (v30 <= v28[v19] || v30 <= v28[v12] || v30 <= *(v28 - 3))
              goto LABEL_1943;
            v325 = v28[v10];
LABEL_971:
            if (v30 <= v325)
              goto LABEL_1943;
            v86 = v28[v21];
LABEL_973:
            if (v30 <= v86)
              goto LABEL_1943;
            v388 = v28[v20];
LABEL_1042:
            if (v30 <= v388)
              goto LABEL_1943;
            v141 = v28[v22];
LABEL_1236:
            if (v30 <= v141)
              goto LABEL_1943;
LABEL_1237:
            v268 = v28[v11];
            goto LABEL_1906;
          }
          v210 = v28[v17];
          if (v30 > v210)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= v28[v10] || v30 <= *(v28 - 3) || v30 <= v28[v21])
              goto LABEL_1943;
            v157 = v28[v11];
            goto LABEL_318;
          }
          if (v31 >= v210)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v10] || v30 <= v28[v21])
              goto LABEL_1943;
            v536 = v28[v20];
            goto LABEL_1902;
          }
          v385 = *(v28 - 3);
          if (v30 <= v385)
          {
            if (v31 >= v385)
            {
              v676 = v28[v12];
              if (v30 > v676 || v31 >= v676)
                goto LABEL_1943;
              v678 = v28[v13];
              if (v30 > v678 || v31 >= v678)
                goto LABEL_1943;
              v680 = v28[v14];
              if (v30 > v680 || v31 >= v680)
                goto LABEL_1943;
              v682 = v28[v19];
              if (v30 > v682 || v31 >= v682)
              {
                v683 = v28[v10];
                goto LABEL_2274;
              }
              goto LABEL_2276;
            }
            v577 = v28[v14];
            if (v30 <= v577)
            {
              if (v31 >= v577)
              {
                v788 = v28[v22];
                if (v30 > v788 || v31 >= v788)
                  goto LABEL_1943;
                v790 = v28[v21];
                if (v30 > v790)
                  goto LABEL_1943;
              }
              else
              {
                v728 = v28[v13];
                if (v30 > v728)
                {
                  v729 = v28[v21];
                  if (v30 > v729)
                    goto LABEL_1943;
                  if (v31 >= v729)
                    goto LABEL_1943;
                  v730 = v28[v19];
                  if (v30 > v730 || v31 >= v730)
                    goto LABEL_1943;
                  v683 = v28[v20];
                  goto LABEL_2274;
                }
                if (v31 < v728)
                {
                  v800 = v28[v15];
                  if (v30 > v800 || v31 >= v800)
                    goto LABEL_1943;
                  v801 = v28[v19];
                  if (v30 <= v801 && v31 < v801)
                    goto LABEL_1907;
                  v802 = v28[v10];
                  goto LABEL_2255;
                }
                v790 = v28[v21];
                if (v30 > v790)
                  goto LABEL_1943;
              }
              if (v31 >= v790)
                goto LABEL_1943;
            }
            else
            {
              v578 = v28[v22];
              if (v30 > v578 || v31 >= v578)
                goto LABEL_1943;
              v580 = v28[v21];
              if (v30 > v580 || v31 >= v580)
                goto LABEL_1943;
            }
            v834 = v28[v20];
            if (v30 > v834 || v31 >= v834)
              goto LABEL_1943;
            goto LABEL_2273;
          }
          v386 = v28[v10];
          if (v30 <= v386)
          {
            if (v31 >= v386)
            {
              v742 = v28[v19];
              if (v30 > v742 || v31 >= v742)
                goto LABEL_1943;
              goto LABEL_2011;
            }
            v638 = v28[v14];
            if (v30 > v638 || v31 >= v638)
              goto LABEL_1943;
            v640 = v28[v12];
            if (v30 > v640 || v31 >= v640)
              goto LABEL_1943;
          }
          else
          {
            v387 = v28[v19];
            if (v30 > v387)
            {
              v325 = v28[v12];
              goto LABEL_971;
            }
            if (v31 >= v387)
              goto LABEL_1943;
LABEL_2011:
            v744 = v28[v12];
            if (v30 > v744 || v31 >= v744)
              goto LABEL_1943;
            v746 = v28[v14];
            if (v30 > v746 || v31 >= v746)
              goto LABEL_1943;
          }
          v683 = v28[v13];
          goto LABEL_2274;
        }
        if (v31 >= v41)
        {
          v91 = v28[v17];
          if (v30 > v91)
          {
            if (v30 <= v28[v16] || v30 <= v28[v20] || v30 <= *(v28 - 3))
              goto LABEL_1943;
            v92 = v28[v21];
            if (v30 <= v92)
            {
              v468 = v28[v13];
              if (v31 >= v92)
              {
                if (v30 <= v468)
                  goto LABEL_1943;
              }
              else if (v30 <= v468)
              {
                goto LABEL_1943;
              }
              if (v30 <= v28[v14] || v30 <= v28[v18])
                goto LABEL_1943;
            }
            else
            {
              if (v30 <= v28[v18])
                goto LABEL_1943;
              if (v30 > v28[v22])
              {
                v93 = v28[v15];
                goto LABEL_1051;
              }
              if (v30 <= v28[v14])
                goto LABEL_1943;
            }
            goto LABEL_1701;
          }
          if (v31 >= v91)
            goto LABEL_1943;
          v170 = v28[v16];
          if (v30 > v170 || v31 >= v170)
            goto LABEL_1943;
          v172 = v28[v14];
          if (v30 > v172)
          {
            v173 = v28[v22];
            if (v30 > v173 || v31 >= v173)
              goto LABEL_1943;
            v175 = v28[v21];
            if (v30 > v175 || v31 >= v175)
              goto LABEL_1943;
            v177 = v28[v19];
            if (v30 > v177 || v31 >= v177)
              goto LABEL_1943;
            v179 = v28[v20];
            if (v30 > v179 || v31 >= v179)
              goto LABEL_1943;
            v181 = v28[v18];
            if (v30 > v181 || v31 >= v181)
              goto LABEL_1943;
            v183 = *(v28 - 3);
            if (v30 > v183)
              goto LABEL_1943;
LABEL_1531:
            if (v31 >= v183)
              goto LABEL_1943;
            goto LABEL_2276;
          }
          if (v31 >= v172)
          {
            v524 = v28[v22];
            if (v30 > v524 || v31 >= v524)
              goto LABEL_1943;
            v526 = v28[v21];
            if (v30 > v526 || v31 >= v526)
              goto LABEL_1943;
            v528 = v28[v19];
            if (v30 > v528 || v31 >= v528)
              goto LABEL_1943;
            v530 = v28[v20];
            if (v30 > v530 || v31 >= v530)
              goto LABEL_1943;
            v532 = v28[v18];
            if (v30 > v532 || v31 >= v532)
              goto LABEL_1943;
            v534 = *(v28 - 3);
            if (v30 > v534 || v31 >= v534)
              goto LABEL_1943;
          }
          else
          {
            v355 = v28[v18];
            if (v30 > v355)
            {
              v356 = v28[v11];
              if (v30 > v356 || v31 >= v356)
                goto LABEL_1943;
              v358 = v28[v10];
              if (v30 > v358 || v31 >= v358)
                goto LABEL_1943;
              v360 = v28[v12];
              if (v30 > v360 || v31 >= v360)
                goto LABEL_1943;
              v362 = v28[v13];
              if (v30 > v362 || v31 >= v362)
                goto LABEL_1943;
              goto LABEL_2276;
            }
            if (v31 >= v355)
            {
              v664 = v28[v11];
              if (v30 > v664 || v31 >= v664)
                goto LABEL_1943;
              v666 = v28[v10];
              if (v30 > v666 || v31 >= v666)
                goto LABEL_1943;
              v668 = v28[v12];
              if (v30 > v668 || v31 >= v668)
                goto LABEL_1943;
              v670 = v28[v13];
              if (v30 > v670 || v31 >= v670)
                goto LABEL_1943;
            }
            else
            {
              v565 = v28[v19];
              if (v30 > v565)
              {
                v566 = v28[v10];
                if (v30 > v566 || v31 >= v566)
                  goto LABEL_1943;
                v568 = v28[v13];
                if (v30 > v568 || v31 >= v568)
                  goto LABEL_1943;
                v183 = v28[v12];
                if (v30 > v183)
                  goto LABEL_1943;
                goto LABEL_1531;
              }
              if (v31 < v565)
              {
                v724 = v28[v15];
                if (v30 > v724 || v31 >= v724)
                  goto LABEL_1943;
                v726 = v28[v13];
                if (v30 > v726)
                {
                  v727 = v28[v21];
                  if (v30 > v727)
                    goto LABEL_1943;
                  if (v31 >= v727)
                    goto LABEL_1943;
                  v556 = v28[v20];
                  if (v30 > v556)
                    goto LABEL_1943;
                  goto LABEL_1470;
                }
                if (v31 >= v726)
                {
                  v844 = v28[v21];
                  if (v30 > v844)
                    goto LABEL_1943;
                  if (v31 >= v844)
                    goto LABEL_1943;
                  v845 = v28[v20];
                  if (v30 > v845 || v31 >= v845)
                    goto LABEL_1943;
                  v231 = *(v28 - 3);
                  goto LABEL_2277;
                }
                v823 = *(v28 - 3);
                if (v30 <= v823 && v31 < v823)
                  goto LABEL_1907;
LABEL_1197:
                v231 = v28[v12];
                goto LABEL_2277;
              }
              v784 = v28[v10];
              if (v30 > v784 || v31 >= v784)
                goto LABEL_1943;
              v786 = v28[v12];
              if (v30 > v786)
                goto LABEL_1943;
              if (v31 >= v786)
                goto LABEL_1943;
              v787 = v28[v13];
              if (v30 > v787 || v31 >= v787)
                goto LABEL_1943;
            }
          }
LABEL_2190:
          v231 = v28[v15];
          goto LABEL_2277;
        }
        v60 = v28[v15];
        if (v30 > v60)
        {
          v61 = v28[v21];
          if (v30 > v61)
          {
            v62 = v28[v14];
            if (v30 > v62)
            {
              if (v30 <= *(v28 - 3) || v30 <= v28[v18])
                goto LABEL_1943;
              v63 = v28[v20];
              goto LABEL_1366;
            }
            if (v31 >= v62)
            {
              if (v30 <= v28[v22] || v30 <= v28[v16] || v30 <= *(v28 - 3) || v30 <= v28[v18])
                goto LABEL_1943;
              v323 = v28[v20];
              goto LABEL_1049;
            }
            v272 = v28[v16];
            if (v30 > v272)
            {
              if (v30 <= v28[v22] || v30 <= v28[v19] || v30 <= v28[v18] || v30 <= v28[v20])
                goto LABEL_1943;
              v273 = v28[v17];
              goto LABEL_1479;
            }
            if (v31 >= v272)
              goto LABEL_1943;
            v497 = v28[v22];
            if (v30 > v497 || v31 >= v497)
              goto LABEL_1943;
            v499 = v28[v10];
            if (v30 > v499 || v31 >= v499)
              goto LABEL_1943;
            v501 = v28[v13];
            if (v30 > v501 || v31 >= v501)
              goto LABEL_1943;
            v138 = v28[v12];
            goto LABEL_1314;
          }
          if (v31 >= v61)
          {
            v322 = v28[v16];
            if (v30 > v322)
            {
              if (v30 <= v28[v13] || v30 <= v28[v20] || v30 <= *(v28 - 3) || v30 <= v28[v14])
                goto LABEL_1943;
LABEL_788:
              v323 = v28[v18];
LABEL_1049:
              if (v30 <= v323)
                goto LABEL_1943;
              v93 = v28[v17];
LABEL_1051:
              if (v30 <= v93)
                goto LABEL_1943;
LABEL_1052:
              v268 = v28[v19];
              goto LABEL_1906;
            }
            if (v31 >= v322)
              goto LABEL_1943;
            v455 = v28[v22];
            if (v30 > v455 || v31 >= v455)
              goto LABEL_1943;
            v457 = v28[v14];
            if (v30 > v457 || v31 >= v457)
              goto LABEL_1943;
            v459 = v28[v10];
            if (v30 > v459 || v31 >= v459)
              goto LABEL_1943;
            v461 = v28[v13];
            if (v30 > v461 || v31 >= v461)
              goto LABEL_1943;
            v463 = v28[v11];
            if (v30 > v463 || v31 >= v463)
              goto LABEL_1943;
            goto LABEL_1197;
          }
          v206 = v28[v10];
          if (v30 > v206)
          {
            v207 = v28[v17];
            if (v30 > v207)
            {
              if (v30 <= v28[v13] || v30 <= v28[v20] || v30 <= *(v28 - 3) || v30 <= v28[v18])
                goto LABEL_1943;
              v186 = v28[v14];
              goto LABEL_857;
            }
            if (v31 >= v207)
              goto LABEL_1943;
            v476 = v28[v11];
            if (v30 > v476 || v31 >= v476)
              goto LABEL_1943;
            v478 = v28[v19];
            if (v30 > v478 || v31 >= v478)
              goto LABEL_1943;
            v480 = v28[v20];
            if (v30 > v480 || v31 >= v480)
              goto LABEL_1943;
            v482 = v28[v18];
LABEL_1622:
            if (v30 > v482 || v31 >= v482)
              goto LABEL_1943;
LABEL_1627:
            v202 = *(v28 - 3);
LABEL_2150:
            if (v30 > v202 || v31 >= v202)
              goto LABEL_1943;
            goto LABEL_2152;
          }
          if (v31 >= v206)
          {
            v535 = v28[v17];
            if (v30 > v535)
            {
              if (v30 <= v28[v20] || v30 <= v28[v13] || v30 <= *(v28 - 3) || v30 <= v28[v14])
                goto LABEL_1943;
              v384 = v28[v18];
              goto LABEL_1414;
            }
            if (v31 >= v535)
              goto LABEL_1943;
            v618 = v28[v11];
            if (v30 > v618 || v31 >= v618)
              goto LABEL_1943;
            v620 = v28[v19];
            if (v30 > v620 || v31 >= v620)
              goto LABEL_1943;
            v622 = v28[v18];
            if (v30 > v622 || v31 >= v622)
              goto LABEL_1943;
            v624 = v28[v20];
            if (v30 > v624 || v31 >= v624)
              goto LABEL_1943;
            goto LABEL_1627;
          }
          v381 = *(v28 - 3);
          if (v30 > v381)
          {
            v382 = v28[v14];
            if (v30 > v382)
            {
              v383 = v28[v13];
              if (v30 > v383)
              {
                if (v30 <= v28[v20] || v30 <= v28[v18])
                  goto LABEL_1943;
                v384 = v28[v17];
LABEL_1414:
                if (v30 <= v384)
                  goto LABEL_1943;
                v214 = v28[v19];
LABEL_1512:
                if (v30 <= v214)
                  goto LABEL_1943;
LABEL_1517:
                v268 = v28[v16];
                goto LABEL_1906;
              }
              if (v31 >= v383)
                goto LABEL_1943;
              v691 = v28[v20];
              if (v30 > v691 || v31 >= v691)
                goto LABEL_1943;
              v693 = v28[v12];
              if (v30 > v693)
                goto LABEL_1943;
              goto LABEL_2148;
            }
            if (v31 < v382)
            {
              v633 = v28[v13];
              if (v30 > v633 || v31 >= v633)
                goto LABEL_1943;
              v635 = v28[v22];
              if (v30 > v635 || v31 >= v635)
                goto LABEL_1943;
              goto LABEL_1732;
            }
            v738 = v28[v20];
            if (v30 > v738 || v31 >= v738)
              goto LABEL_1943;
            v740 = v28[v13];
            if (v30 > v740 || v31 >= v740)
              goto LABEL_1943;
LABEL_2112:
            v495 = v28[v12];
LABEL_2113:
            if (v30 > v495 || v31 >= v495)
              goto LABEL_1943;
            v637 = v28[v22];
LABEL_2116:
            if (v30 > v637 || v31 >= v637)
              goto LABEL_1943;
            goto LABEL_2268;
          }
          if (v31 >= v381)
          {
            v671 = v28[v13];
            if (v30 > v671 || v31 >= v671)
              goto LABEL_1943;
            v673 = v28[v20];
            if (v30 > v673)
            {
              v674 = v28[v14];
              if (v30 > v674 || v31 >= v674)
                goto LABEL_1943;
              goto LABEL_2112;
            }
            if (v31 < v673)
              goto LABEL_2112;
            v818 = v28[v14];
            if (v30 > v818)
              goto LABEL_1943;
            if (v31 >= v818)
              goto LABEL_1943;
            v819 = v28[v22];
            if (v30 > v819 || v31 >= v819)
              goto LABEL_1943;
LABEL_1732:
            v637 = v28[v12];
            goto LABEL_2116;
          }
          v570 = v28[v11];
          if (v30 > v570 || v31 >= v570)
            goto LABEL_1943;
          v572 = v28[v22];
          if (v30 > v572 || v31 >= v572)
            goto LABEL_1943;
          v574 = v28[v20];
          if (v30 > v574)
          {
            v575 = v28[v14];
            if (v30 > v575)
              goto LABEL_1943;
            if (v31 >= v575)
              goto LABEL_1943;
            v576 = v28[v12];
            if (v30 > v576 || v31 >= v576)
              goto LABEL_1943;
            goto LABEL_2239;
          }
          if (v31 < v574)
          {
            v792 = v28[v12];
            if (v30 <= v792 && v31 < v792)
              goto LABEL_1907;
            v769 = v28[v18];
            goto LABEL_2157;
          }
          v831 = v28[v14];
          if (v30 > v831 || v31 >= v831)
            goto LABEL_1943;
          v802 = v28[v13];
LABEL_2255:
          if (v30 > v802 || v31 >= v802)
            goto LABEL_1943;
          goto LABEL_1197;
        }
        if (v31 >= v60)
        {
          v243 = v28[v22];
          if (v30 > v243 || v31 >= v243)
            goto LABEL_1943;
          v245 = v28[v10];
          if (v30 > v245)
          {
            v246 = v28[v17];
            if (v30 > v246 || v31 >= v246)
              goto LABEL_1943;
            v248 = v28[v11];
            if (v30 > v248 || v31 >= v248)
              goto LABEL_1943;
            v250 = v28[v19];
            if (v30 > v250 || v31 >= v250)
              goto LABEL_1943;
            v252 = v28[v20];
            if (v30 > v252 || v31 >= v252)
              goto LABEL_1943;
            v254 = v28[v18];
            if (v30 > v254 || v31 >= v254)
              goto LABEL_1943;
LABEL_1468:
            v556 = v28[v21];
LABEL_1469:
            if (v30 > v556)
              goto LABEL_1943;
LABEL_1470:
            if (v31 >= v556)
              goto LABEL_1943;
LABEL_1508:
            v231 = *(v28 - 3);
            goto LABEL_2277;
          }
          if (v31 >= v245)
          {
            v546 = v28[v17];
            if (v30 > v546 || v31 >= v546)
              goto LABEL_1943;
            v548 = v28[v18];
            if (v30 > v548 || v31 >= v548)
              goto LABEL_1943;
            v550 = v28[v11];
            if (v30 > v550 || v31 >= v550)
              goto LABEL_1943;
            v552 = v28[v20];
            if (v30 > v552 || v31 >= v552)
              goto LABEL_1943;
            v554 = v28[v19];
            if (v30 > v554 || v31 >= v554)
              goto LABEL_1943;
            goto LABEL_1468;
          }
          v399 = v28[v21];
          if (v30 > v399)
          {
            v400 = v28[v16];
            if (v30 > v400 || v31 >= v400)
              goto LABEL_1943;
            v402 = v28[v14];
            if (v30 > v402 || v31 >= v402)
              goto LABEL_1943;
            v404 = v28[v13];
            if (v30 > v404 || v31 >= v404)
              goto LABEL_1943;
            v406 = v28[v11];
            if (v30 > v406 || v31 >= v406)
              goto LABEL_1943;
            goto LABEL_1197;
          }
          if (v31 >= v399)
          {
            v684 = v28[v16];
            if (v30 > v684 || v31 >= v684)
              goto LABEL_1943;
            v686 = v28[v14];
            if (v30 > v686 || v31 >= v686)
              goto LABEL_1943;
            v688 = v28[v13];
            if (v30 > v688 || v31 >= v688)
              goto LABEL_1943;
            goto LABEL_2265;
          }
          v582 = v28[v11];
          if (v30 > v582 || v31 >= v582)
            goto LABEL_1943;
          v584 = v28[v20];
          if (v30 > v584)
          {
            v585 = v28[v14];
            if (v30 > v585 || v31 >= v585)
              goto LABEL_1943;
            v587 = v28[v12];
            if (v30 > v587 || v31 >= v587)
              goto LABEL_1943;
            goto LABEL_2239;
          }
          if (v31 >= v584)
          {
            v806 = v28[v14];
            if (v30 > v806)
              goto LABEL_1943;
            if (v31 >= v806)
              goto LABEL_1943;
            v807 = v28[v13];
            if (v30 > v807 || v31 >= v807)
              goto LABEL_1943;
            goto LABEL_1197;
          }
          v772 = v28[v12];
          if (v30 <= v772)
          {
            if (v31 < v772)
            {
              v827 = *(v28 - 3);
              if (v30 <= v827 && v31 < v827)
                goto LABEL_1907;
LABEL_2239:
              v231 = v28[v13];
              goto LABEL_2277;
            }
            v848 = v28[v18];
            if (v30 > v848 || v31 >= v848)
              goto LABEL_1943;
          }
          else
          {
            v773 = v28[v18];
            if (v30 > v773 || v31 >= v773)
              goto LABEL_1943;
          }
          v556 = v28[v19];
          goto LABEL_1469;
        }
        v142 = v28[v14];
        if (v30 > v142)
        {
          v143 = v28[v20];
          if (v30 > v143 || v31 >= v143)
            goto LABEL_1943;
          v145 = v28[v21];
          if (v30 > v145 || v31 >= v145)
            goto LABEL_1943;
          v147 = v28[v22];
          if (v30 > v147 || v31 >= v147)
            goto LABEL_1943;
          v149 = *(v28 - 3);
          if (v30 > v149)
          {
            v150 = v28[v13];
            if (v30 > v150 || v31 >= v150)
              goto LABEL_1943;
            v152 = v28[v10];
            if (v30 > v152 || v31 >= v152)
              goto LABEL_1943;
            v154 = v28[v12];
            if (v30 > v154 || v31 >= v154)
              goto LABEL_1943;
            goto LABEL_2268;
          }
          if (v31 >= v149)
          {
            v734 = v28[v13];
            if (v30 > v734 || v31 >= v734)
              goto LABEL_1943;
          }
          else
          {
            v627 = v28[v18];
            if (v30 <= v627)
            {
              if (v31 < v627)
              {
                v628 = v28[v19];
                if (v30 <= v628 && v31 < v628)
                {
                  v629 = v28[v17];
                  if (v30 <= v629 && v31 < v629)
                    goto LABEL_1907;
                  v630 = v28[v10];
                  goto LABEL_2266;
                }
              }
              v791 = v28[v10];
              if (v30 > v791 || v31 >= v791)
                goto LABEL_1943;
LABEL_2146:
              v630 = v28[v12];
              goto LABEL_2266;
            }
          }
          v736 = v28[v10];
          if (v30 > v736 || v31 >= v736)
            goto LABEL_1943;
          goto LABEL_2146;
        }
        if (v31 >= v142)
        {
          v435 = v28[v21];
          if (v30 > v435 || v31 >= v435)
            goto LABEL_1943;
          v437 = v28[v20];
          if (v30 > v437 || v31 >= v437)
            goto LABEL_1943;
          v439 = v28[v22];
          if (v30 > v439 || v31 >= v439)
            goto LABEL_1943;
          v441 = *(v28 - 3);
          if (v30 > v441)
          {
            v442 = v28[v13];
            if (v30 > v442 || v31 >= v442)
              goto LABEL_1943;
            v444 = v28[v10];
            if (v30 > v444 || v31 >= v444)
              goto LABEL_1943;
            goto LABEL_2265;
          }
          if (v31 >= v441)
          {
            v781 = v28[v13];
            if (v30 > v781 || v31 >= v781)
              goto LABEL_1943;
            v783 = v28[v10];
            if (v30 > v783 || v31 >= v783)
              goto LABEL_1943;
            goto LABEL_2265;
          }
          v722 = v28[v18];
          if (v30 <= v722)
          {
            if (v31 >= v722)
            {
              v833 = v28[v10];
              if (v30 > v833 || v31 >= v833)
                goto LABEL_1943;
              goto LABEL_2265;
            }
            v798 = v28[v19];
            if (v30 > v798)
            {
              v799 = v28[v10];
              if (v30 > v799 || v31 >= v799)
                goto LABEL_1943;
              goto LABEL_2265;
            }
            if (v31 >= v798)
            {
              v864 = v28[v10];
              if (v30 > v864 || v31 >= v864)
                goto LABEL_1943;
              goto LABEL_2265;
            }
            v840 = v28[v17];
            if (v30 <= v840 && v31 < v840)
              goto LABEL_1907;
            v630 = v28[v10];
          }
          else
          {
            v723 = v28[v10];
            if (v30 > v723 || v31 >= v723)
              goto LABEL_1943;
LABEL_2265:
            v630 = v28[v12];
          }
LABEL_2266:
          if (v30 > v630 || v31 >= v630)
            goto LABEL_1943;
          goto LABEL_2268;
        }
        v299 = v28[v10];
        if (v30 <= v299)
        {
          if (v31 >= v299)
          {
            v610 = v28[v18];
            if (v30 > v610 || v31 >= v610)
              goto LABEL_1943;
            v612 = v28[v19];
            if (v30 > v612 || v31 >= v612)
              goto LABEL_1943;
            v614 = v28[v17];
            if (v30 > v614 || v31 >= v614)
              goto LABEL_1943;
            v616 = *(v28 - 3);
            if (v30 <= v616)
            {
              if (v31 < v616)
              {
                v793 = v28[v13];
                if (v30 <= v793)
                {
                  if (v31 < v793)
                  {
                    v838 = v28[v16];
                    if (v30 <= v838)
                    {
                      if (v31 < v838)
                        goto LABEL_1907;
                      v869 = v28[v21];
                      if (v30 > v869 || v31 >= v869)
                        goto LABEL_1943;
                    }
                    else
                    {
                      v839 = v28[v21];
                      if (v30 > v839 || v31 >= v839)
                        goto LABEL_1943;
                    }
                    v826 = v28[v20];
                    if (v30 > v826)
                      goto LABEL_1943;
                    goto LABEL_2250;
                  }
                  v862 = v28[v21];
                  if (v30 > v862)
                    goto LABEL_1943;
                  if (v31 >= v862)
                    goto LABEL_1943;
                  v863 = v28[v20];
                  if (v30 > v863 || v31 >= v863)
                    goto LABEL_1943;
LABEL_2357:
                  v796 = v28[v22];
                  if (v30 > v796)
                    goto LABEL_2262;
                }
                else
                {
                  v794 = v28[v21];
                  if (v30 > v794)
                    goto LABEL_1943;
                  if (v31 >= v794)
                    goto LABEL_1943;
                  v795 = v28[v20];
                  if (v30 > v795 || v31 >= v795)
                    goto LABEL_1943;
LABEL_2166:
                  v796 = v28[v22];
                  if (v30 > v796)
                  {
                    v797 = v28[v16];
                    goto LABEL_2398;
                  }
                }
                if (v31 < v796)
                  goto LABEL_1907;
                goto LABEL_2262;
              }
              v832 = v28[v12];
              if (v30 > v832 || v31 >= v832)
                goto LABEL_1943;
            }
            else
            {
              v617 = v28[v12];
              if (v30 > v617 || v31 >= v617)
                goto LABEL_1943;
            }
            v521 = v28[v13];
            if (v30 > v521)
              goto LABEL_1943;
            goto LABEL_2261;
          }
          v511 = v28[v13];
          if (v30 > v511)
          {
            v512 = *(v28 - 3);
            if (v30 > v512 || v31 >= v512)
              goto LABEL_1943;
            v514 = v28[v21];
            if (v30 > v514 || v31 >= v514)
              goto LABEL_1943;
            v516 = v28[v20];
            if (v30 > v516 || v31 >= v516)
              goto LABEL_1943;
            v518 = v28[v22];
            if (v30 > v518)
            {
              v519 = v28[v19];
              if (v30 > v519)
                goto LABEL_1943;
              if (v31 >= v519)
                goto LABEL_1943;
              v520 = v28[v18];
              if (v30 > v520 || v31 >= v520)
                goto LABEL_1943;
              v521 = v28[v17];
              goto LABEL_2184;
            }
            if (v31 < v518)
            {
              v820 = v28[v12];
              if (v30 > v820)
              {
                v821 = v28[v19];
                if (v30 > v821)
                  goto LABEL_1943;
                if (v31 >= v821)
                  goto LABEL_1943;
                v822 = v28[v18];
                if (v30 > v822)
                  goto LABEL_1943;
                goto LABEL_2394;
              }
              if (v31 >= v820)
              {
                v872 = v28[v19];
                if (v30 > v872)
                  goto LABEL_1943;
                if (v31 >= v872)
                  goto LABEL_1943;
                v822 = v28[v18];
                if (v30 > v822)
                  goto LABEL_1943;
LABEL_2394:
                if (v31 >= v822)
                  goto LABEL_1943;
LABEL_2395:
                v873 = v28[v17];
                if (v30 <= v873 && v31 < v873)
                  goto LABEL_1907;
LABEL_2397:
                v797 = v28[v11];
                goto LABEL_2398;
              }
              v856 = v28[v11];
              if (v30 > v856)
              {
                v857 = v28[v19];
                if (v30 > v857)
                  goto LABEL_1943;
                if (v31 >= v857)
                  goto LABEL_1943;
                v858 = v28[v17];
                if (v30 > v858 || v31 >= v858)
                  goto LABEL_1943;
                v231 = v28[v18];
                goto LABEL_2277;
              }
              if (v31 < v856)
                goto LABEL_1907;
              v875 = v28[v19];
              if (v30 > v875 || v31 >= v875)
                goto LABEL_1943;
LABEL_2411:
              v843 = v28[v18];
              goto LABEL_2301;
            }
            v841 = v28[v19];
            if (v30 > v841)
              goto LABEL_1943;
            if (v31 >= v841)
              goto LABEL_1943;
            v842 = v28[v18];
            if (v30 > v842 || v31 >= v842)
              goto LABEL_1943;
LABEL_2300:
            v843 = v28[v16];
            goto LABEL_2301;
          }
          if (v31 >= v511)
          {
            v758 = v28[v20];
            if (v30 > v758 || v31 >= v758)
              goto LABEL_1943;
            v760 = v28[v21];
            if (v30 > v760 || v31 >= v760)
              goto LABEL_1943;
            v762 = *(v28 - 3);
            if (v30 > v762 || v31 >= v762)
              goto LABEL_1943;
            v763 = v28[v22];
            if (v30 > v763)
            {
              v764 = v28[v19];
              if (v30 > v764)
                goto LABEL_1943;
              if (v31 >= v764)
                goto LABEL_1943;
              v765 = v28[v18];
              if (v30 > v765 || v31 >= v765)
                goto LABEL_1943;
              goto LABEL_2300;
            }
            if (v31 >= v763)
            {
              v860 = v28[v19];
              if (v30 > v860)
                goto LABEL_1943;
              if (v31 >= v860)
                goto LABEL_1943;
              v861 = v28[v18];
              if (v30 > v861 || v31 >= v861)
                goto LABEL_1943;
              v843 = v28[v16];
              goto LABEL_2301;
            }
            v835 = v28[v12];
            if (v30 > v835)
            {
              v836 = v28[v18];
              if (v30 > v836)
                goto LABEL_1943;
              if (v31 >= v836)
                goto LABEL_1943;
              v837 = v28[v19];
              if (v30 > v837 || v31 >= v837)
                goto LABEL_1943;
              goto LABEL_2395;
            }
            if (v31 < v835)
            {
              v867 = v28[v11];
              if (v30 > v867)
              {
                v868 = v28[v19];
                if (v30 > v868 || v31 >= v868)
                  goto LABEL_1943;
                goto LABEL_2411;
              }
              if (v31 < v867)
                goto LABEL_1907;
              v882 = v28[v19];
              if (v30 > v882 || v31 >= v882)
                goto LABEL_1943;
              v843 = v28[v18];
LABEL_2301:
              if (v30 > v843 || v31 >= v843)
                goto LABEL_1943;
              goto LABEL_2034;
            }
            v878 = v28[v18];
            if (v30 > v878)
              goto LABEL_1943;
            if (v31 >= v878)
              goto LABEL_1943;
            v879 = v28[v19];
            if (v30 > v879 || v31 >= v879)
              goto LABEL_1943;
            v880 = v28[v17];
            if (v30 > v880)
              goto LABEL_2397;
            if (v31 < v880)
              goto LABEL_1907;
LABEL_2268:
            v231 = v28[v11];
            goto LABEL_2277;
          }
          v656 = v28[v12];
          if (v30 <= v656)
          {
            if (v31 >= v656)
            {
              v811 = v28[v19];
              if (v30 > v811)
                goto LABEL_1943;
              if (v31 >= v811)
                goto LABEL_1943;
              v812 = v28[v18];
              if (v30 > v812)
                goto LABEL_1943;
              if (v31 >= v812)
                goto LABEL_1943;
              v813 = *(v28 - 3);
              if (v30 > v813 || v31 >= v813)
                goto LABEL_1943;
              v814 = v28[v17];
              if (v30 > v814)
              {
                v815 = v28[v20];
                if (v30 > v815)
                  goto LABEL_1943;
                if (v31 >= v815)
                  goto LABEL_1943;
                v816 = v28[v21];
                if (v30 > v816 || v31 >= v816)
                  goto LABEL_1943;
                v817 = v28[v11];
LABEL_2373:
                if (v30 > v817 || v31 >= v817)
                  goto LABEL_1943;
                goto LABEL_2375;
              }
              if (v31 >= v814)
              {
                v876 = v28[v20];
                if (v30 > v876)
                  goto LABEL_1943;
                if (v31 >= v876)
                  goto LABEL_1943;
                v877 = v28[v21];
                if (v30 > v877 || v31 >= v877)
                  goto LABEL_1943;
                goto LABEL_2416;
              }
              v865 = v28[v16];
              if (v30 > v865)
              {
                v866 = v28[v21];
                if (v30 > v866 || v31 >= v866)
                  goto LABEL_1943;
                v817 = v28[v20];
                goto LABEL_2373;
              }
              if (v31 < v865)
                goto LABEL_1907;
              v881 = v28[v20];
              if (v30 <= v881 && v31 < v881)
                goto LABEL_2248;
            }
            else
            {
              v776 = v28[v11];
              if (v30 > v776)
              {
                v777 = v28[v18];
                if (v30 > v777)
                  goto LABEL_1943;
                if (v31 >= v777)
                  goto LABEL_1943;
                v778 = v28[v17];
                if (v30 > v778 || v31 >= v778)
                  goto LABEL_1943;
                v779 = v28[v16];
                if (v30 <= v779)
                {
                  if (v31 < v779)
                    goto LABEL_1907;
                  if (v31 >= *(v28 - 3) || v31 >= v28[v21] || v31 >= v28[v19])
                    goto LABEL_1943;
                  v797 = v28[v20];
                }
                else
                {
                  if (v31 >= v28[v20] || v31 >= v28[v21])
                    goto LABEL_1943;
                  v780 = v28[v19];
LABEL_2328:
                  if (v31 >= v780)
                    goto LABEL_1943;
                  v797 = *(v28 - 3);
                }
                goto LABEL_2398;
              }
              if (v31 < v776)
              {
                v830 = v28[v16];
                if (v30 <= v830 && v31 < v830)
                  goto LABEL_1907;
LABEL_2248:
                v826 = v28[v21];
                goto LABEL_2249;
              }
              v850 = v28[v18];
              if (v30 > v850)
                goto LABEL_1943;
              if (v31 >= v850)
                goto LABEL_1943;
              v851 = v28[v17];
              if (v30 > v851 || v31 >= v851)
                goto LABEL_1943;
              v852 = v28[v16];
              if (v30 > v852)
              {
                if (v31 >= v28[v20] || v31 >= v28[v19])
                  goto LABEL_1943;
                v780 = v28[v21];
                goto LABEL_2328;
              }
              if (v31 < v852)
                goto LABEL_1907;
              if (v31 < v28[v20] && v31 < v28[v21])
              {
                v855 = v28[v19];
LABEL_2335:
                if (v31 >= v855)
                  goto LABEL_1943;
LABEL_2375:
                v797 = v28[v22];
LABEL_2398:
                if (v31 < v797)
                  goto LABEL_1907;
              }
            }
          }
          else
          {
            v657 = *(v28 - 3);
            if (v30 > v657 || v31 >= v657)
              goto LABEL_1943;
            v659 = v28[v18];
            if (v30 > v659)
              goto LABEL_1943;
            if (v31 >= v659)
              goto LABEL_1943;
            v660 = v28[v19];
            if (v30 > v660 || v31 >= v660)
              goto LABEL_1943;
            v661 = v28[v17];
            if (v30 > v661)
            {
              v662 = v28[v20];
              if (v30 > v662)
                goto LABEL_1943;
              if (v31 >= v662)
                goto LABEL_1943;
              v663 = v28[v21];
              if (v30 > v663 || v31 >= v663)
                goto LABEL_1943;
              v630 = v28[v22];
              goto LABEL_2266;
            }
            if (v31 >= v661)
            {
              v870 = v28[v20];
              if (v30 > v870)
                goto LABEL_1943;
              if (v31 >= v870)
                goto LABEL_1943;
              v871 = v28[v21];
              if (v30 > v871 || v31 >= v871)
                goto LABEL_1943;
LABEL_2416:
              v826 = v28[v11];
LABEL_2249:
              if (v30 > v826)
                goto LABEL_1943;
LABEL_2250:
              if (v31 >= v826)
                goto LABEL_1943;
LABEL_2152:
              v231 = v28[v22];
              goto LABEL_2277;
            }
            v853 = v28[v16];
            if (v30 > v853)
            {
              v854 = v28[v20];
              if (v30 > v854 || v31 >= v854)
                goto LABEL_1943;
              v855 = v28[v21];
              goto LABEL_2335;
            }
            if (v31 < v853)
              goto LABEL_1907;
            v874 = v28[v20];
            if (v30 <= v874 && v31 < v874)
              goto LABEL_2248;
          }
        }
        else
        {
          v300 = v28[v19];
          if (v30 > v300 || v31 >= v300)
            goto LABEL_1943;
          v302 = v28[v18];
          if (v30 > v302 || v31 >= v302)
            goto LABEL_1943;
          v304 = v28[v17];
          if (v30 > v304 || v31 >= v304)
            goto LABEL_1943;
          v306 = *(v28 - 3);
          if (v30 > v306)
          {
            v307 = v28[v12];
            if (v30 > v307 || v31 >= v307)
              goto LABEL_1943;
            goto LABEL_2183;
          }
          if (v31 >= v306)
          {
            v803 = v28[v12];
            if (v30 > v803 || v31 >= v803)
              goto LABEL_1943;
LABEL_2183:
            v521 = v28[v13];
LABEL_2184:
            if (v30 > v521)
              goto LABEL_1943;
LABEL_2261:
            if (v31 >= v521)
              goto LABEL_1943;
LABEL_2262:
            v231 = v28[v16];
            goto LABEL_2277;
          }
          v766 = v28[v13];
          if (v30 > v766)
          {
            v767 = v28[v21];
            if (v30 > v767)
              goto LABEL_1943;
            if (v31 >= v767)
              goto LABEL_1943;
            v768 = v28[v20];
            if (v30 > v768 || v31 >= v768)
              goto LABEL_1943;
            goto LABEL_2166;
          }
          if (v31 >= v766)
          {
            v846 = v28[v21];
            if (v30 > v846)
              goto LABEL_1943;
            if (v31 >= v846)
              goto LABEL_1943;
            v847 = v28[v20];
            if (v30 > v847 || v31 >= v847)
              goto LABEL_1943;
            goto LABEL_2357;
          }
          v824 = v28[v16];
          if (v30 <= v824 && v31 < v824)
            goto LABEL_1907;
          v825 = v28[v21];
          if (v30 <= v825 && v31 < v825)
          {
            v826 = v28[v20];
            goto LABEL_2249;
          }
        }
      }
      else
      {
        v33 = v28[v9];
        if (v30 <= v33)
        {
          if (v31 < v33)
          {
            v47 = v28[v18];
            if (v30 <= v47)
            {
              if (v31 >= v47)
              {
                v158 = v28[v11];
                if (v30 > v158)
                  goto LABEL_801;
                if (v31 >= v158)
                  goto LABEL_1943;
                v159 = v28[v12];
                if (v30 > v159 || v31 >= v159)
                  goto LABEL_1943;
                v161 = v28[v19];
                if (v30 > v161 || v31 >= v161)
                  goto LABEL_1943;
                v163 = *(v28 - 3);
                if (v30 > v163 || v31 >= v163)
                  goto LABEL_1943;
                v165 = v28[v10];
                if (v30 > v165 || v31 >= v165)
                  goto LABEL_1943;
                v167 = v28[v21];
                if (v30 > v167 || v31 >= v167)
                  goto LABEL_1943;
                v169 = v28[v20];
              }
              else
              {
                v87 = v28[v20];
                if (v30 > v87)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v10])
                    goto LABEL_1943;
                  v88 = v28[v16];
LABEL_1055:
                  if (v30 <= v88)
                    goto LABEL_1943;
                  goto LABEL_1056;
                }
                if (v31 >= v87)
                {
                  if (v30 <= v28[v11])
                    goto LABEL_1943;
LABEL_801:
                  if (v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v10])
                    goto LABEL_1943;
                  v275 = v28[v16];
                  goto LABEL_805;
                }
                v211 = v28[v15];
                if (v30 <= v211)
                {
                  if (v31 >= v211)
                  {
                    v537 = v28[v11];
                    if (v30 > v537 || v31 >= v537)
                      goto LABEL_1943;
                    v539 = *(v28 - 3);
                    if (v30 > v539 || v31 >= v539)
                      goto LABEL_1943;
                    v541 = v28[v21];
                    if (v30 > v541 || v31 >= v541)
                      goto LABEL_1943;
                    v543 = v28[v17];
                    if (v30 <= v543)
                    {
                      if (v31 >= v543)
                      {
                        v771 = v28[v10];
                        if (v30 > v771 || v31 >= v771)
                          goto LABEL_1943;
                      }
                    }
                    else
                    {
                      v544 = v28[v10];
                      if (v30 > v544 || v31 >= v544)
                        goto LABEL_1943;
                    }
                    v202 = v28[v19];
                    goto LABEL_2150;
                  }
                  v389 = *(v28 - 3);
                  if (v30 > v389 || v31 >= v389)
                    goto LABEL_1943;
                  v391 = v28[v21];
                  if (v30 <= v391)
                  {
                    if (v31 < v391)
                    {
                      v642 = v28[v19];
                      if (v30 > v642 || v31 >= v642)
                        goto LABEL_1943;
                      v644 = v28[v17];
                      if (v30 <= v644 && v31 < v644)
                      {
                        v645 = v28[v22];
                        if (v30 <= v645 && v31 < v645)
                          goto LABEL_1907;
                        v371 = v28[v14];
                        goto LABEL_1769;
                      }
                      v693 = v28[v10];
                      if (v30 > v693)
                        goto LABEL_1943;
LABEL_2148:
                      if (v31 >= v693)
                        goto LABEL_1943;
                      goto LABEL_2149;
                    }
                    v747 = v28[v13];
                    if (v30 > v747 || v31 >= v747)
                      goto LABEL_1943;
                    v749 = v28[v14];
                    if (v30 > v749 || v31 >= v749)
                      goto LABEL_1943;
                    v751 = v28[v19];
                    if (v30 > v751 || v31 >= v751)
                      goto LABEL_1943;
                    v398 = v28[v16];
                  }
                  else
                  {
                    v392 = v28[v13];
                    if (v30 > v392 || v31 >= v392)
                      goto LABEL_1943;
                    v394 = v28[v14];
                    if (v30 > v394 || v31 >= v394)
                      goto LABEL_1943;
                    v396 = v28[v16];
                    if (v30 > v396 || v31 >= v396)
                      goto LABEL_1943;
                    v398 = v28[v19];
                  }
                  if (v30 > v398 || v31 >= v398)
                    goto LABEL_1943;
                  goto LABEL_2034;
                }
                v212 = v28[v10];
                if (v30 > v212)
                {
                  v213 = v28[v11];
                  if (v30 > v213)
                  {
                    if (v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v13])
                      goto LABEL_1943;
                    v214 = v28[v12];
                    goto LABEL_1512;
                  }
                  if (v31 >= v213)
                    goto LABEL_1943;
                  v559 = v28[v17];
                  if (v30 > v559 || v31 >= v559)
                    goto LABEL_1943;
                  v561 = v28[v21];
                  if (v30 > v561 || v31 >= v561)
                    goto LABEL_1943;
                  v563 = v28[v19];
                  if (v30 > v563 || v31 >= v563)
                    goto LABEL_1943;
                  v434 = v28[v22];
LABEL_1506:
                  if (v30 > v434 || v31 >= v434)
                    goto LABEL_1943;
                  goto LABEL_1508;
                }
                if (v31 >= v212)
                {
                  v595 = v28[v17];
                  if (v30 > v595 || v31 >= v595)
                    goto LABEL_1943;
                  v597 = v28[v11];
                  if (v30 > v597 || v31 >= v597)
                    goto LABEL_1943;
                  v599 = v28[v21];
                  if (v30 > v599 || v31 >= v599)
                    goto LABEL_1943;
                  v482 = v28[v19];
                  goto LABEL_1622;
                }
                v483 = v28[v19];
                if (v30 > v483 || v31 >= v483)
                  goto LABEL_1943;
                v485 = v28[v21];
                if (v30 > v485 || v31 >= v485)
                  goto LABEL_1943;
                v487 = v28[v11];
                if (v30 > v487 || v31 >= v487)
                  goto LABEL_1943;
                v169 = *(v28 - 3);
              }
            }
            else
            {
              v48 = v28[v16];
              if (v30 > v48)
              {
                v49 = v28[v17];
                if (v30 > v49)
                {
                  v50 = *(v28 - 3);
                  if (v30 > v50)
                  {
                    if (v30 <= v28[v14])
                    {
                      if (v30 <= v28[v22] || v30 <= v28[v21])
                        goto LABEL_1943;
                    }
                    else
                    {
                      v51 = v28[v13];
                      if (v30 > v51)
                      {
                        if (v30 <= v28[v15])
                          goto LABEL_1943;
                        if (v30 > v28[v19])
                          goto LABEL_1907;
                        if (v30 <= v28[v10])
                          goto LABEL_1943;
                        goto LABEL_1874;
                      }
                      v466 = v28[v21];
                      if (v31 < v51)
                      {
                        if (v30 <= v466 || v30 <= v28[v19])
                          goto LABEL_1943;
                        v324 = v28[v20];
                        goto LABEL_1885;
                      }
                      if (v30 <= v466)
                        goto LABEL_1943;
                    }
                    if (v30 <= v28[v20])
                      goto LABEL_1943;
LABEL_1701:
                    v324 = v28[v19];
                    goto LABEL_1885;
                  }
                  if (v31 >= v50)
                  {
                    if (v30 <= v28[v12] || v30 <= v28[v14] || v30 <= v28[v19] && v30 <= v28[v10])
                      goto LABEL_1943;
                    goto LABEL_1058;
                  }
                  v269 = v28[v10];
                  if (v30 > v269)
                  {
                    v88 = v28[v14];
                    goto LABEL_1055;
                  }
                  v490 = v28[v19];
                  if (v31 >= v269)
                  {
                    if (v30 <= v490)
                      goto LABEL_1943;
LABEL_1629:
                    if (v30 <= v28[v12])
                      goto LABEL_1943;
                    v411 = v28[v14];
                    goto LABEL_1057;
                  }
                  if (v30 > v490)
                    goto LABEL_1629;
                  if (v31 >= v490)
                    goto LABEL_1943;
                  v491 = v28[v12];
                  if (v30 > v491 || v31 >= v491)
                    goto LABEL_1943;
                  v493 = v28[v21];
                  if (v30 > v493 || v31 >= v493)
                    goto LABEL_1943;
                  v495 = v28[v20];
                  goto LABEL_2113;
                }
                v189 = v28[v12];
                v191 = v30 <= v189 && v31 < v189;
                if (v31 < v49)
                {
                  if (!v191)
                    goto LABEL_1943;
                  v192 = v28[v19];
                  if (v30 > v192 || v31 >= v192)
                    goto LABEL_1943;
                  v194 = *(v28 - 3);
                  if (v30 > v194 || v31 >= v194)
                    goto LABEL_1943;
                  v196 = v28[v10];
                  if (v30 > v196 || v31 >= v196)
                    goto LABEL_1943;
                  v198 = v28[v21];
                  if (v30 > v198 || v31 >= v198)
                    goto LABEL_1943;
                  v200 = v28[v11];
                  if (v30 > v200 || v31 >= v200)
                    goto LABEL_1943;
                  v202 = v28[v20];
                  goto LABEL_2150;
                }
                if (!v191)
                  goto LABEL_1943;
                v311 = v28[v19];
                if (v30 > v311 || v31 >= v311)
                  goto LABEL_1943;
                v313 = *(v28 - 3);
                if (v30 > v313 || v31 >= v313)
                  goto LABEL_1943;
                v315 = v28[v10];
                if (v30 > v315 || v31 >= v315)
                  goto LABEL_1943;
                v317 = v28[v21];
                if (v30 > v317 || v31 >= v317)
                  goto LABEL_1943;
                v319 = v28[v20];
                if (v30 > v319 || v31 >= v319)
                  goto LABEL_1943;
LABEL_2149:
                v202 = v28[v11];
                goto LABEL_2150;
              }
              v125 = v28[v12];
              v127 = v30 <= v125 && v31 < v125;
              if (v31 < v48)
              {
                if (!v127)
                  goto LABEL_1943;
                v128 = v28[v19];
                if (v30 > v128 || v31 >= v128)
                  goto LABEL_1943;
                v130 = v28[v21];
                if (v30 > v130 || v31 >= v130)
                  goto LABEL_1943;
                v132 = v28[v10];
                if (v30 > v132 || v31 >= v132)
                  goto LABEL_1943;
                v134 = *(v28 - 3);
                if (v30 > v134 || v31 >= v134)
                  goto LABEL_1943;
                v136 = v28[v20];
                if (v30 > v136 || v31 >= v136)
                  goto LABEL_1943;
                v138 = v28[v22];
LABEL_1314:
                if (v30 > v138 || v31 >= v138)
                  goto LABEL_1943;
                goto LABEL_2268;
              }
              if (!v127)
                goto LABEL_1943;
              v232 = v28[v19];
              if (v30 > v232 || v31 >= v232)
                goto LABEL_1943;
              v234 = *(v28 - 3);
              if (v30 > v234 || v31 >= v234)
                goto LABEL_1943;
              v236 = v28[v10];
              if (v30 > v236 || v31 >= v236)
                goto LABEL_1943;
              v238 = v28[v21];
              if (v30 > v238 || v31 >= v238)
                goto LABEL_1943;
              v240 = v28[v20];
              if (v30 > v240 || v31 >= v240)
                goto LABEL_1943;
              v169 = v28[v11];
            }
            if (v30 > v169 || v31 >= v169)
              goto LABEL_1943;
            goto LABEL_2152;
          }
          v64 = v28[v17];
          if (v30 <= v64)
          {
            if (v31 >= v64)
              goto LABEL_1943;
            v94 = v28[v16];
            if (v30 > v94 || v31 >= v94)
              goto LABEL_1943;
            v96 = v28[v20];
            if (v30 > v96 || v31 >= v96)
              goto LABEL_1943;
            v98 = *(v28 - 3);
            if (v30 > v98 || v31 >= v98)
              goto LABEL_1943;
            v100 = v28[v21];
            if (v30 > v100)
            {
              v101 = v28[v13];
              if (v30 > v101 || v31 >= v101)
                goto LABEL_1943;
              v103 = v28[v14];
              if (v30 > v103 || v31 >= v103)
                goto LABEL_1943;
              v105 = v28[v18];
              if (v30 > v105 || v31 >= v105)
                goto LABEL_1943;
              v107 = v28[v19];
              goto LABEL_612;
            }
            if (v31 < v100)
            {
              v469 = v28[v18];
              if (v30 > v469 || v31 >= v469)
                goto LABEL_1943;
              v471 = v28[v15];
              if (v30 > v471 || v31 >= v471)
                goto LABEL_1943;
              v473 = v28[v22];
              if (v30 > v473)
              {
                v474 = v28[v14];
                if (v30 > v474 || v31 >= v474)
                  goto LABEL_1943;
                goto LABEL_2159;
              }
              if (v31 < v473)
              {
LABEL_2159:
                v231 = v28[v19];
                goto LABEL_2277;
              }
              v769 = v28[v14];
LABEL_2157:
              if (v30 > v769 || v31 >= v769)
                goto LABEL_1943;
              goto LABEL_2159;
            }
            v589 = v28[v13];
            if (v30 > v589 || v31 >= v589)
              goto LABEL_1943;
            v591 = v28[v14];
            if (v30 > v591 || v31 >= v591)
              goto LABEL_1943;
            v593 = v28[v18];
            if (v30 > v593 || v31 >= v593)
              goto LABEL_1943;
LABEL_2273:
            v683 = v28[v19];
LABEL_2274:
            if (v30 > v683 || v31 >= v683)
              goto LABEL_1943;
LABEL_2276:
            v231 = v28[v15];
            goto LABEL_2277;
          }
          if (v30 <= v28[v16])
            goto LABEL_1943;
          v65 = v28[v14];
          if (v30 > v65)
          {
            v66 = v28[v18];
            if (v30 <= v66)
            {
              v274 = v28[v11];
              if (v31 >= v66)
              {
                if (v30 <= v274)
                  goto LABEL_1943;
                v88 = v28[v10];
                goto LABEL_1055;
              }
              if (v30 <= v274)
                goto LABEL_1943;
              v275 = v28[v10];
LABEL_805:
              if (v30 <= v275 || v30 <= v28[v13])
                goto LABEL_1943;
              v324 = v28[v12];
            }
            else
            {
              if (v30 > v28[v19])
              {
                if (v30 <= v28[v15])
                  goto LABEL_1943;
                if (v30 > v28[v13])
                {
                  if (v30 > *(v28 - 3))
                    goto LABEL_1907;
                  goto LABEL_1874;
                }
                if (v30 <= v28[v21])
                  goto LABEL_1943;
                v273 = v28[v20];
LABEL_1479:
                if (v30 <= v273)
                  goto LABEL_1943;
                v268 = *(v28 - 3);
LABEL_1906:
                if (v30 > v268)
                  goto LABEL_1907;
                goto LABEL_1943;
              }
              if (v30 <= v28[v10])
                goto LABEL_1943;
LABEL_1056:
              v411 = v28[v12];
LABEL_1057:
              if (v30 <= v411)
                goto LABEL_1943;
LABEL_1058:
              v324 = v28[v13];
            }
LABEL_1885:
            if (v30 <= v324)
              goto LABEL_1943;
            goto LABEL_1886;
          }
          v208 = v28[v22];
          if (v31 >= v65)
          {
            if (v30 <= v208 || v30 <= v28[v21] || v30 <= v28[v19])
              goto LABEL_1943;
            v209 = v28[v20];
          }
          else
          {
            if (v30 <= v208 || v30 <= v28[v20] || v30 <= v28[v19])
              goto LABEL_1943;
            v209 = v28[v21];
          }
          if (v30 > v209 && v30 > v28[v18])
          {
            v324 = *(v28 - 3);
            goto LABEL_1885;
          }
        }
        else
        {
          v34 = v28[v15];
          if (v30 > v34)
          {
            v35 = v28[v14];
            if (v30 > v35)
            {
              v36 = v28[v10];
              if (v30 > v36)
              {
                v37 = v28[v13];
                if (v30 > v37)
                {
                  v38 = v28[v12];
                  if (v30 > v38)
                  {
                    v39 = v28[v11];
                    if (v30 > v39)
                    {
                      if (v30 > v28[v16])
                        goto LABEL_1907;
                      v40 = v28[v21];
                      goto LABEL_1473;
                    }
                    v338 = v28[v18];
                    if (v31 < v39)
                    {
                      if (v30 <= v338 || v30 <= v28[v17])
                        goto LABEL_1943;
                      v339 = v28[v16];
                      if (v30 > v339)
                        goto LABEL_1907;
                      v340 = v28[v20];
                      if (v31 >= v339)
                      {
                        if (v30 <= v340 || v30 <= *(v28 - 3))
                          goto LABEL_1943;
                        v93 = v28[v21];
                        goto LABEL_1051;
                      }
                      if (v30 <= v340)
                        goto LABEL_1943;
                      goto LABEL_812;
                    }
                    if (v30 <= v338 || v30 <= v28[v17])
                      goto LABEL_1943;
                    v522 = v28[v16];
                    if (v30 > v522)
                      goto LABEL_1907;
                    v523 = v28[v20];
                    if (v31 >= v522)
                    {
                      if (v30 <= v523 || v30 <= v28[v21])
                        goto LABEL_1943;
LABEL_744:
                      v111 = v28[v19];
                    }
                    else
                    {
                      if (v30 <= v523)
                        goto LABEL_1943;
                      v188 = v28[v21];
LABEL_442:
                      if (v30 <= v188)
                        goto LABEL_1943;
                      v111 = *(v28 - 3);
                    }
                    goto LABEL_1904;
                  }
                  if (v31 < v38)
                  {
                    if (v30 <= *(v28 - 3) || v30 <= v28[v18] || v30 <= v28[v19])
                      goto LABEL_1943;
                    if (v30 > v28[v17])
                    {
                      v267 = v28[v16];
                      if (v30 > v267)
                        goto LABEL_1907;
                      if (v31 >= v267)
                      {
                        if (v30 <= v28[v20] || v30 <= v28[v22])
                          goto LABEL_1943;
                        v268 = v28[v21];
                        goto LABEL_1906;
                      }
                      goto LABEL_317;
                    }
                    v690 = v28[v20];
LABEL_1900:
                    if (v30 <= v690)
                      goto LABEL_1943;
                    v536 = v28[v21];
LABEL_1902:
                    if (v30 <= v536)
                      goto LABEL_1943;
                    v111 = v28[v11];
LABEL_1904:
                    if (v30 <= v111)
                      goto LABEL_1943;
                    goto LABEL_1905;
                  }
                  if (v30 <= v28[v19] || v30 <= v28[v18] || v30 <= *(v28 - 3))
                    goto LABEL_1943;
                  v408 = v28[v17];
                  if (v30 <= v408)
                  {
                    v690 = v28[v20];
                    if (v31 < v408)
                    {
                      if (v30 <= v690)
                        goto LABEL_1943;
                      v388 = v28[v21];
                      goto LABEL_1042;
                    }
                    goto LABEL_1900;
                  }
                  v409 = v28[v16];
                  if (v30 > v409)
                    goto LABEL_1907;
                  v218 = v28[v21];
                  if (v31 < v409)
                  {
LABEL_1027:
                    if (v30 <= v218 || v30 <= v28[v22])
                      goto LABEL_1943;
                    v268 = v28[v20];
                    goto LABEL_1906;
                  }
LABEL_486:
                  if (v30 <= v218)
                    goto LABEL_1943;
LABEL_319:
                  v111 = v28[v20];
                  goto LABEL_1904;
                }
                if (v31 >= v37)
                {
                  if (v30 <= v28[v20] || v30 <= v28[v21] || v30 <= *(v28 - 3))
                    goto LABEL_1943;
                  v309 = v28[v22];
                  if (v30 <= v309)
                  {
                    if (v31 < v309)
                    {
                      if (v30 <= v28[v18] || v30 <= v28[v19])
                        goto LABEL_1943;
                      v214 = v28[v17];
                      goto LABEL_1512;
                    }
                    if (v30 <= v28[v19] || v30 <= v28[v18])
                      goto LABEL_1943;
LABEL_25:
                    v46 = v28[v16];
                    goto LABEL_1877;
                  }
                  if (v30 > v28[v12])
                  {
                    v310 = v28[v11];
                    if (v30 > v310)
                      goto LABEL_1907;
                    if (v31 < v310)
                      goto LABEL_788;
                    goto LABEL_737;
                  }
                  if (v30 <= v28[v18] || v30 <= v28[v19])
                    goto LABEL_1943;
                }
                else
                {
                  if (v30 <= *(v28 - 3) || v30 <= v28[v21] || v30 <= v28[v20])
                    goto LABEL_1943;
                  v184 = v28[v12];
                  if (v30 > v184)
                  {
                    if (v30 <= v28[v11])
                    {
                      if (v30 <= v28[v19])
                        goto LABEL_1943;
                    }
                    else
                    {
                      v185 = v28[v22];
                      if (v30 > v185)
                        goto LABEL_1907;
                      if (v31 < v185)
                      {
                        v186 = v28[v18];
LABEL_857:
                        if (v30 <= v186)
                          goto LABEL_1943;
                        v93 = v28[v16];
                        goto LABEL_1051;
                      }
LABEL_737:
                      if (v30 <= v28[v19])
                        goto LABEL_1943;
                    }
                    v46 = v28[v18];
                    goto LABEL_1877;
                  }
                  v631 = v28[v18];
                  if (v31 < v184)
                  {
                    if (v30 <= v631 || v30 <= v28[v19])
                      goto LABEL_1943;
                    if (v30 > v28[v22])
                    {
                      v632 = v28[v11];
                      if (v30 > v632 || v31 < v632)
                        goto LABEL_1907;
                      goto LABEL_1878;
                    }
LABEL_2179:
                    if (v30 <= v28[v16])
                      goto LABEL_1943;
                    goto LABEL_1878;
                  }
                  if (v30 <= v631 || v30 <= v28[v19])
                    goto LABEL_1943;
                  if (v30 <= v28[v22])
                    goto LABEL_2179;
                }
                if (v30 > v28[v17])
                  goto LABEL_1907;
                goto LABEL_1237;
              }
              v108 = v28[v19];
              if (v31 >= v36)
              {
                if (v30 <= v108 || v30 <= v28[v18] || v30 <= v28[v17])
                  goto LABEL_1943;
                if (v30 > *(v28 - 3))
                {
                  if (v30 > v28[v13])
                  {
                    v217 = v28[v16];
                    if (v30 > v217)
                      goto LABEL_1907;
                    v218 = v28[v21];
                    if (v31 >= v217)
                      goto LABEL_1027;
                    goto LABEL_486;
                  }
                  goto LABEL_1514;
                }
                v557 = v28[v12];
              }
              else
              {
                if (v30 <= v108 || v30 <= v28[v18] || v30 <= v28[v17])
                  goto LABEL_1943;
                v109 = *(v28 - 3);
                if (v30 > v109)
                {
                  if (v30 > v28[v13])
                  {
                    v110 = v28[v16];
                    if (v30 > v110)
                      goto LABEL_1907;
                    if (v31 < v110)
                    {
                      if (v30 <= v28[v20])
                        goto LABEL_1943;
                      v111 = v28[v21];
                      goto LABEL_1904;
                    }
LABEL_317:
                    v157 = v28[v21];
LABEL_318:
                    if (v30 <= v157)
                      goto LABEL_1943;
                    goto LABEL_319;
                  }
LABEL_1514:
                  if (v30 <= v28[v21] || v30 <= v28[v20])
                    goto LABEL_1943;
                  if (v30 > v28[v22])
                    goto LABEL_1907;
                  goto LABEL_1517;
                }
                v557 = v28[v12];
                if (v31 < v109)
                {
                  if (v30 <= v557 || v30 <= v28[v16])
                    goto LABEL_1943;
                  goto LABEL_1484;
                }
              }
              if (v30 <= v557)
                goto LABEL_1943;
              v214 = v28[v13];
              goto LABEL_1512;
            }
            if (v31 >= v35)
            {
              if (v30 <= v28[v21] || v30 <= v28[v20] || v30 <= v28[v22])
                goto LABEL_1943;
              if (v30 <= *(v28 - 3))
              {
                v84 = v28[v13];
                goto LABEL_1232;
              }
            }
            else
            {
              if (v30 <= v28[v20] || v30 <= v28[v21] || v30 <= v28[v22])
                goto LABEL_1943;
              v83 = *(v28 - 3);
              if (v30 <= v83)
              {
                v84 = v28[v13];
                if (v31 < v83)
                {
                  if (v30 <= v84)
                    goto LABEL_1943;
                  goto LABEL_1233;
                }
LABEL_1232:
                if (v30 <= v84)
                  goto LABEL_1943;
LABEL_1233:
                v286 = v28[v10];
                goto LABEL_1234;
              }
            }
            if (v30 <= v28[v18] || v30 <= v28[v19])
            {
              if (v30 <= v28[v10])
                goto LABEL_1943;
              goto LABEL_1235;
            }
            goto LABEL_309;
          }
          if (v31 >= v34)
          {
            if (v30 <= v28[v22])
              goto LABEL_1943;
            v89 = v28[v10];
            if (v30 > v89)
            {
              v90 = v28[v21];
              if (v30 > v90)
              {
                if (v30 <= v28[v11])
                  goto LABEL_1943;
                if (v30 <= v28[v20])
                {
LABEL_1198:
                  if (v30 <= v28[v14])
                    goto LABEL_1943;
                  goto LABEL_1199;
                }
                if (v30 <= v28[v12])
                {
                  if (v30 <= v28[v18])
                    goto LABEL_1943;
                  v273 = v28[v19];
                  goto LABEL_1479;
                }
                if (v30 > *(v28 - 3))
                  goto LABEL_1907;
LABEL_1484:
                v268 = v28[v13];
                goto LABEL_1906;
              }
              v285 = v28[v16];
              if (v31 >= v90)
              {
                if (v30 <= v285 || v30 <= v28[v14])
                  goto LABEL_1943;
                v423 = v28[v13];
                goto LABEL_1871;
              }
              if (v30 <= v285 || v30 <= v28[v14])
                goto LABEL_1943;
              v286 = v28[v13];
LABEL_1234:
              if (v30 <= v286)
                goto LABEL_1943;
LABEL_1235:
              v141 = v28[v12];
              goto LABEL_1236;
            }
            v215 = v28[v17];
            if (v31 < v89)
            {
              if (v30 <= v215 || v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v20])
                goto LABEL_1943;
              v216 = v28[v18];
              goto LABEL_813;
            }
            if (v30 <= v215 || v30 <= v28[v18] || v30 <= v28[v20] || v30 <= v28[v11])
              goto LABEL_1943;
LABEL_812:
            v216 = v28[v19];
LABEL_813:
            if (v30 <= v216)
              goto LABEL_1943;
            v273 = v28[v21];
            goto LABEL_1479;
          }
          v57 = v28[v21];
          if (v30 > v57)
          {
            v58 = v28[v10];
            if (v30 <= v58)
            {
              v205 = v28[v17];
              if (v31 >= v58)
              {
                if (v30 > v205)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v18])
                    goto LABEL_1943;
                  v321 = v28[v20];
LABEL_1406:
                  if (v30 <= v321)
                    goto LABEL_1943;
                  v273 = v28[v22];
                  goto LABEL_1479;
                }
                if (v31 >= v205)
                  goto LABEL_1943;
                v446 = v28[v20];
                if (v30 > v446 || v31 >= v446)
                  goto LABEL_1943;
                v448 = v28[v13];
                if (v30 > v448 || v31 >= v448)
                  goto LABEL_1943;
                v450 = *(v28 - 3);
                if (v30 > v450 || v31 >= v450)
                  goto LABEL_1943;
                v452 = v28[v14];
                if (v30 > v452 || v31 >= v452)
                  goto LABEL_1943;
                v380 = v28[v18];
              }
              else
              {
                if (v30 > v205)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v20])
                    goto LABEL_1943;
                  v188 = v28[v18];
                  goto LABEL_442;
                }
                if (v31 >= v205)
                  goto LABEL_1943;
                v372 = v28[v13];
                if (v30 > v372 || v31 >= v372)
                  goto LABEL_1943;
                v374 = v28[v20];
                if (v30 > v374 || v31 >= v374)
                  goto LABEL_1943;
                v376 = *(v28 - 3);
                if (v30 > v376 || v31 >= v376)
                  goto LABEL_1943;
                v378 = v28[v18];
                if (v30 > v378 || v31 >= v378)
                  goto LABEL_1943;
                v380 = v28[v14];
              }
              if (v30 > v380 || v31 >= v380)
                goto LABEL_1943;
              v371 = v28[v19];
            }
            else
            {
              v59 = *(v28 - 3);
              if (v30 > v59)
              {
                if (v30 <= v28[v11] || v30 <= v28[v22])
                  goto LABEL_1943;
                if (v30 > v28[v20])
                {
                  if (v30 > v28[v12])
                    goto LABEL_1907;
                  if (v30 <= v28[v18])
                    goto LABEL_1943;
                  goto LABEL_1052;
                }
                goto LABEL_1198;
              }
              if (v31 >= v59)
              {
                if (v30 <= v28[v13])
                  goto LABEL_1943;
                v410 = v28[v20];
                if (v30 > v410)
                {
                  v388 = v28[v12];
                  goto LABEL_1042;
                }
                v588 = v28[v14];
                if (v31 < v410)
                {
                  if (v30 <= v588)
                    goto LABEL_1943;
                  v286 = v28[v22];
                  goto LABEL_1234;
                }
                if (v30 <= v588)
                  goto LABEL_1943;
LABEL_1870:
                v423 = v28[v22];
LABEL_1871:
                if (v30 <= v423)
                  goto LABEL_1943;
                v465 = v28[v11];
LABEL_1873:
                if (v30 <= v465)
                  goto LABEL_1943;
LABEL_1874:
                v268 = v28[v12];
                goto LABEL_1906;
              }
              v271 = v28[v14];
              if (v30 > v271)
              {
                if (v30 <= v28[v13])
                  goto LABEL_1943;
                goto LABEL_1870;
              }
              v496 = v28[v20];
              if (v31 >= v271)
              {
                if (v30 <= v496 || v30 <= v28[v13])
                  goto LABEL_1943;
                v536 = v28[v12];
                goto LABEL_1902;
              }
              if (v30 > v496)
              {
                if (v30 <= v28[v13] || v30 <= v28[v11])
                  goto LABEL_1943;
                v111 = v28[v12];
                goto LABEL_1904;
              }
              if (v31 >= v496)
                goto LABEL_1943;
              v646 = v28[v13];
              if (v30 > v646 || v31 >= v646)
                goto LABEL_1943;
              v648 = v28[v18];
              if (v30 > v648 || v31 >= v648)
                goto LABEL_1943;
              v650 = v28[v19];
              if (v30 > v650 || v31 >= v650)
                goto LABEL_1943;
              v371 = v28[v17];
            }
            goto LABEL_1769;
          }
          if (v31 >= v57)
          {
            v242 = v28[v16];
            if (v30 > v242)
            {
              if (v30 <= v28[v22] || v30 <= v28[v14] || v30 <= v28[v10] || v30 <= v28[v11])
                goto LABEL_1943;
LABEL_1199:
              v465 = v28[v13];
              goto LABEL_1873;
            }
            if (v31 >= v242)
              goto LABEL_1943;
            v326 = v28[v13];
            if (v30 > v326 || v31 >= v326)
              goto LABEL_1943;
            v328 = v28[v20];
            if (v30 > v328 || v31 >= v328)
              goto LABEL_1943;
            v330 = *(v28 - 3);
            if (v30 > v330 || v31 >= v330)
              goto LABEL_1943;
            v332 = v28[v14];
            if (v30 > v332 || v31 >= v332)
              goto LABEL_1943;
            v334 = v28[v18];
            if (v30 > v334 || v31 >= v334)
              goto LABEL_1943;
            v336 = v28[v19];
            if (v30 > v336 || v31 >= v336)
              goto LABEL_1943;
LABEL_2034:
            v231 = v28[v17];
            goto LABEL_2277;
          }
          v139 = v28[v14];
          if (v30 > v139)
          {
            v140 = v28[v16];
            if (v30 > v140)
            {
              if (v30 <= v28[v22] || v30 <= v28[v10] || v30 <= v28[v12])
                goto LABEL_1943;
              v141 = v28[v13];
              goto LABEL_1236;
            }
            if (v31 >= v140)
              goto LABEL_1943;
            v345 = v28[v22];
            if (v30 > v345 || v31 >= v345)
              goto LABEL_1943;
            v347 = v28[v19];
            if (v30 > v347 || v31 >= v347)
              goto LABEL_1943;
            v349 = v28[v18];
            if (v30 > v349 || v31 >= v349)
              goto LABEL_1943;
            v351 = v28[v20];
            if (v30 > v351 || v31 >= v351)
              goto LABEL_1943;
            v353 = v28[v17];
            if (v30 > v353 || v31 >= v353)
              goto LABEL_1943;
            goto LABEL_1508;
          }
          if (v31 >= v139)
          {
            v424 = v28[v22];
            if (v30 > v424 || v31 >= v424)
              goto LABEL_1943;
            v426 = v28[v16];
            if (v30 > v426 || v31 >= v426)
              goto LABEL_1943;
            v428 = v28[v19];
            if (v30 > v428 || v31 >= v428)
              goto LABEL_1943;
            v430 = v28[v18];
            if (v30 > v430 || v31 >= v430)
              goto LABEL_1943;
            v432 = v28[v20];
            if (v30 > v432 || v31 >= v432)
              goto LABEL_1943;
            v434 = v28[v17];
            goto LABEL_1506;
          }
          v287 = *(v28 - 3);
          if (v30 <= v287 && v31 < v287)
          {
            v289 = v28[v18];
            if (v30 <= v289 && v31 < v289)
            {
              v291 = v28[v20];
              if (v30 <= v291 && v31 < v291)
              {
                v293 = v28[v16];
                if (v30 <= v293 && v31 < v293)
                {
                  v295 = v28[v19];
                  if (v30 <= v295 && v31 < v295)
                  {
                    v297 = v28[v17];
                    if (v30 <= v297 && v31 < v297)
                    {
LABEL_1907:
                      if (*(unsigned __int8 *)(result + 8) <= a3)
                      {
                        v694 = v17;
                        v695 = v22;
                        v696 = (float)v27;
                        v698 = a4[1];
                        v697 = (unint64_t)a4[2];
                        if ((unint64_t)v698 >= v697)
                        {
                          v700 = *a4;
                          v701 = ((char *)v698 - (char *)*a4) >> 3;
                          v702 = v701 + 1;
                          if ((unint64_t)(v701 + 1) >> 61)
                            sub_1D4D5DFA8();
                          v703 = v697 - (_QWORD)v700;
                          if (v703 >> 2 > v702)
                            v702 = v703 >> 2;
                          if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFF8)
                            v704 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v704 = v702;
                          if (v704)
                          {
                            v705 = (char *)sub_1D4D5E2CC(v884, v704);
                            a4 = v898;
                            v706 = v705;
                            v700 = *v898;
                            v698 = v898[1];
                          }
                          else
                          {
                            v706 = 0;
                          }
                          v707 = (float *)&v706[8 * v701];
                          *v707 = v696;
                          v707[1] = v26;
                          v708 = v707;
                          if (v698 != v700)
                          {
                            do
                            {
                              v709 = *((_QWORD *)v698 - 1);
                              v698 -= 2;
                              *((_QWORD *)v708 - 1) = v709;
                              v708 -= 2;
                            }
                            while (v698 != v700);
                            v700 = *a4;
                          }
                          v699 = v707 + 2;
                          *a4 = v708;
                          a4[1] = v707 + 2;
                          a4[2] = (float *)&v706[8 * v704];
                          if (v700)
                          {
                            operator delete(v700);
                            a4 = v898;
                          }
                          a5 = v899;
                          v5 = v895;
                          result = v896;
                          v11 = v893;
                          v10 = v894;
                          v13 = v891;
                          v12 = v892;
                          v15 = v889;
                          v14 = v890;
                          v18 = v887;
                          v16 = v888;
                          v21 = v885;
                          v19 = v886;
                        }
                        else
                        {
                          *v698 = v696;
                          v698[1] = v26;
                          v699 = v698 + 2;
                        }
                        a4[1] = v699;
                        v711 = a5[1];
                        v710 = (unint64_t)a5[2];
                        if ((unint64_t)v711 >= v710)
                        {
                          v713 = *a5;
                          v714 = v711 - *a5;
                          v715 = v714 + 1;
                          if ((unint64_t)(v714 + 1) >> 62)
                            sub_1D4D5DFA8();
                          v716 = v710 - (_QWORD)v713;
                          if (v716 >> 1 > v715)
                            v715 = v716 >> 1;
                          if ((unint64_t)v716 >= 0x7FFFFFFFFFFFFFFCLL)
                            v717 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v717 = v715;
                          if (v717)
                          {
                            v718 = (char *)sub_1D4D5EA14(v883, v717);
                            a5 = v899;
                            v719 = v718;
                            v713 = *v899;
                            v711 = v899[1];
                          }
                          else
                          {
                            v719 = 0;
                          }
                          v720 = (int *)&v719[4 * v714];
                          *v720 = a3;
                          v712 = v720 + 1;
                          while (v711 != v713)
                          {
                            v721 = *--v711;
                            *--v720 = v721;
                          }
                          *a5 = v720;
                          a5[1] = v712;
                          a5[2] = (int *)&v719[4 * v717];
                          if (v713)
                          {
                            operator delete(v713);
                            a5 = v899;
                          }
                          a4 = v898;
                          v5 = v895;
                          result = v896;
                          v11 = v893;
                          v10 = v894;
                          v13 = v891;
                          v12 = v892;
                          v15 = v889;
                          v14 = v890;
                          v18 = v887;
                          v16 = v888;
                          v21 = v885;
                          v19 = v886;
                        }
                        else
                        {
                          *v711 = a3;
                          v712 = v711 + 1;
                        }
                        a5[1] = v712;
                        v22 = v695;
                        v17 = v694;
                        v20 = v897;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_1943:
      if (++v27 == v24)
        goto LABEL_2432;
    }
  }
  return result;
}

void sub_1D4D9D1E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  _BOOL4 v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  _BOOL4 v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  _BOOL4 v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  uint64_t v636;

  v5 = *a4;
  v6 = a4[1];
  v7 = v6 - *a4;
  if (v6 != *a4)
  {
    v8 = 0;
    v9 = a2[3];
    v10 = 2 - 2 * v9;
    v11 = v9 + 3;
    v12 = 2 * v9 + 2;
    v13 = 3 * v9 + 1;
    v14 = 3 * v9 - 1;
    v15 = 2 * v9 - 2;
    v636 = *a2;
    v16 = v7 >> 3;
    v17 = *a5;
    do
    {
      v18 = 0;
      v19 = (unsigned __int8 *)(v636
                              + (unint64_t)*(float *)(v5 + 8 * v8)
                              + v9 * (unint64_t)*(float *)(v5 + 8 * v8 + 4));
      v20 = *v19;
      v21 = &v19[-3 - v9];
      v22 = &v19[v9 - 3];
      v23 = &v19[(2 * v9) ^ 0xFFFFFFFFFFFFFFFELL];
      v24 = v19[3];
      v25 = &v19[-3 * v9 + 1];
      v26 = &v19[-3 * v9 - 1];
      v27 = &v19[3 - v9];
      v28 = 255;
      do
      {
        v29 = v18;
        v30 = __OFADD__((_DWORD)v18, v28);
        v31 = v18 + v28;
        if (v31 < 0 != v30)
          v32 = v31 + 1;
        else
          v32 = v31;
        v18 = (v32 >> 1);
        v33 = v20 - (v32 >> 1);
        v34 = v20 + (v32 >> 1);
        if (v33 <= v24)
        {
          if (v34 >= v24)
          {
            v56 = *(v19 - 3);
            if (v33 <= v56)
            {
              if (v34 >= v56)
                goto LABEL_1733;
              v76 = *v21;
              if (v33 > v76)
                goto LABEL_1733;
              if (v34 >= v76)
                goto LABEL_1733;
              v77 = *v22;
              if (v33 > v77 || v34 >= v77)
                goto LABEL_1733;
              v78 = v19[v14];
              if (v33 > v78)
              {
                v79 = v19[v10];
                if (v33 > v79)
                  goto LABEL_1733;
                if (v34 >= v79)
                  goto LABEL_1733;
                v80 = *v26;
                if (v33 > v80)
                  goto LABEL_1733;
                if (v34 >= v80)
                  goto LABEL_1733;
                v81 = *v25;
                if (v33 > v81 || v34 >= v81)
                  goto LABEL_1733;
                v82 = *v27;
                if (v33 <= v82)
                {
                  if (v34 >= v82)
                  {
                    v529 = v19[v15];
                    if (v33 > v529)
                      goto LABEL_1733;
                    if (v34 >= v529)
                      goto LABEL_1733;
                    v530 = *v23;
                    if (v33 > v530 || v34 >= v530)
                      goto LABEL_1733;
                  }
                  else
                  {
                    v490 = *v23;
                    if (v33 > v490 || v34 >= v490)
                      goto LABEL_1733;
                  }
                }
                else
                {
                  v83 = v19[v15];
                  if (v33 > v83)
                    goto LABEL_1733;
                  if (v34 >= v83)
                    goto LABEL_1733;
                  v84 = *v23;
                  if (v33 > v84 || v34 >= v84)
                    goto LABEL_1733;
                }
                v315 = v19[-3 * v9];
                goto LABEL_1704;
              }
              if (v34 >= v78)
              {
                v309 = v19[v10];
                if (v33 > v309)
                  goto LABEL_1733;
                if (v34 >= v309)
                  goto LABEL_1733;
                v310 = v19[-3 * v9];
                if (v33 > v310)
                  goto LABEL_1733;
                if (v34 >= v310)
                  goto LABEL_1733;
                v311 = *v23;
                if (v33 > v311)
                  goto LABEL_1733;
                if (v34 >= v311)
                  goto LABEL_1733;
                v312 = *v25;
                if (v33 > v312)
                  goto LABEL_1733;
                if (v34 >= v312)
                  goto LABEL_1733;
                v313 = *v26;
                if (v33 > v313 || v34 >= v313)
                  goto LABEL_1733;
                v314 = *v27;
                if (v33 > v314 || v34 >= v314)
                {
                  v315 = v19[v15];
                  goto LABEL_1704;
                }
              }
              else
              {
                v224 = *v23;
                if (v33 > v224)
                {
                  v225 = v19[v11];
                  if (v33 > v225)
                    goto LABEL_1733;
                  if (v34 >= v225)
                    goto LABEL_1733;
                  v226 = v19[v12];
                  if (v33 > v226)
                    goto LABEL_1733;
                  if (v34 >= v226)
                    goto LABEL_1733;
                  v227 = v19[v15];
                  if (v33 > v227)
                    goto LABEL_1733;
                  if (v34 >= v227)
                    goto LABEL_1733;
                  v228 = v19[v13];
                  if (v33 > v228 || v34 >= v228)
                    goto LABEL_1733;
LABEL_1572:
                  v315 = v19[3 * v9];
                  goto LABEL_1704;
                }
                if (v34 >= v224)
                {
                  v432 = v19[v11];
                  if (v33 > v432)
                    goto LABEL_1733;
                  if (v34 >= v432)
                    goto LABEL_1733;
                  v433 = v19[v12];
                  if (v33 > v433)
                    goto LABEL_1733;
                  if (v34 >= v433)
                    goto LABEL_1733;
                  v434 = v19[v15];
                  if (v33 > v434)
                    goto LABEL_1733;
                  if (v34 >= v434)
                    goto LABEL_1733;
                  v435 = v19[v13];
                  if (v33 > v435 || v34 >= v435)
                    goto LABEL_1733;
                  goto LABEL_1572;
                }
                v360 = v19[-3 * v9];
                if (v33 > v360)
                {
                  v361 = v19[v13];
                  if (v33 > v361 || v34 >= v361)
                    goto LABEL_1733;
                  v362 = v19[v12];
                  if (v33 <= v362)
                  {
                    if (v34 >= v362)
                    {
                      v563 = *v26;
                      if (v33 > v563)
                        goto LABEL_1733;
                      if (v34 >= v563)
                        goto LABEL_1733;
                      v564 = v19[v15];
                      if (v33 > v564 || v34 >= v564)
                        goto LABEL_1733;
                    }
                    else
                    {
                      v533 = v19[v15];
                      if (v33 > v533 || v34 >= v533)
                        goto LABEL_1733;
                    }
                  }
                  else
                  {
                    v363 = *v26;
                    if (v33 > v363)
                      goto LABEL_1733;
                    if (v34 >= v363)
                      goto LABEL_1733;
                    v364 = v19[v15];
                    if (v33 > v364 || v34 >= v364)
                      goto LABEL_1733;
                  }
                  goto LABEL_1572;
                }
                if (v34 < v360)
                {
                  v464 = v19[v15];
                  if (v33 <= v464)
                  {
                    if (v34 >= v464)
                    {
                      v566 = *v27;
                      if (v33 > v566)
                        goto LABEL_1733;
                      if (v34 >= v566)
                        goto LABEL_1733;
                      v567 = v19[v10];
                      if (v33 > v567)
                        goto LABEL_1733;
                      if (v34 >= v567)
                        goto LABEL_1733;
                      v568 = *v25;
                      if (v33 > v568 || v34 >= v568)
                        goto LABEL_1733;
                    }
                    else
                    {
                      v540 = v19[3 * v9];
                      if (v33 <= v540)
                      {
                        if (v34 < v540)
                        {
                          v586 = *v26;
                          if (v33 <= v586)
                          {
                            if (v34 < v586)
                              continue;
                            v616 = v19[v12];
                            if (v33 > v616 || v34 >= v616)
                              goto LABEL_1733;
                          }
                          else
                          {
                            v587 = v19[v12];
                            if (v33 > v587 || v34 >= v587)
                              goto LABEL_1733;
                          }
                          v315 = v19[v13];
                          goto LABEL_1704;
                        }
                        v607 = *v25;
                        if (v33 > v607 || v34 >= v607)
                          goto LABEL_1733;
                      }
                      else
                      {
                        v541 = *v25;
                        if (v33 > v541 || v34 >= v541)
                          goto LABEL_1733;
                      }
                    }
                  }
                  else
                  {
                    v465 = *v27;
                    if (v33 > v465)
                      goto LABEL_1733;
                    if (v34 >= v465)
                      goto LABEL_1733;
                    v466 = v19[v10];
                    if (v33 > v466)
                      goto LABEL_1733;
                    if (v34 >= v466)
                      goto LABEL_1733;
                    v467 = *v25;
                    if (v33 > v467 || v34 >= v467)
                      goto LABEL_1733;
                  }
LABEL_1703:
                  v315 = *v26;
LABEL_1704:
                  if (v33 > v315 || v34 >= v315)
                    goto LABEL_1733;
                  continue;
                }
                v517 = v19[v13];
                if (v33 > v517)
                  goto LABEL_1733;
                if (v34 >= v517)
                  goto LABEL_1733;
                v518 = v19[v15];
                if (v33 > v518)
                  goto LABEL_1733;
                if (v34 >= v518)
                  goto LABEL_1733;
                v519 = v19[3 * v9];
                if (v33 > v519 || v34 >= v519)
                  goto LABEL_1733;
                v520 = v19[v12];
                if (v33 > v520 || v34 >= v520)
                  goto LABEL_1703;
              }
            }
            else
            {
              if (v33 <= *v21 || v33 <= *v22)
                goto LABEL_1733;
              v57 = v19[v14];
              if (v33 > v57)
              {
                v58 = *v23;
                if (v33 <= v58)
                {
                  v218 = v19[v11];
                  if (v34 >= v58)
                  {
                    if (v33 <= v218 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= v19[v13])
                      goto LABEL_1733;
                  }
                  else if (v33 <= v218 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= v19[v13])
                  {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  v59 = v19[-3 * v9];
                  if (v33 > v59)
                  {
                    v60 = v19[v15];
                    if (v33 <= v60)
                    {
                      v338 = *v27;
                      if (v34 >= v60)
                      {
                        if (v33 <= v338 || v33 <= v19[v10] || v33 <= *v25)
                          goto LABEL_1733;
                      }
                      else if (v33 <= v338 || v33 <= v19[v10] || v33 <= *v25)
                      {
                        goto LABEL_1733;
                      }
                    }
                    else
                    {
                      v61 = v19[3 * v9];
                      if (v33 > v61)
                      {
                        v62 = *v26;
                        if (v33 > v62)
                          continue;
                        v63 = v19[v12];
                        if (v34 >= v62)
                        {
                          if (v33 > v63)
                            goto LABEL_1303;
                        }
                        else if (v33 > v63)
                        {
LABEL_1303:
                          v96 = v19[v13];
                          goto LABEL_1464;
                        }
                        goto LABEL_1733;
                      }
                      v398 = *v25;
                      if (v34 >= v61)
                      {
                        if (v33 <= v398)
                          goto LABEL_1733;
                      }
                      else if (v33 <= v398)
                      {
                        goto LABEL_1733;
                      }
                    }
                    v96 = *v26;
LABEL_1464:
                    if (v33 > v96)
                      continue;
                    goto LABEL_1733;
                  }
                  v267 = v19[v13];
                  if (v34 >= v59)
                  {
                    if (v33 <= v267 || v33 <= v19[v15])
                      goto LABEL_1733;
                    v378 = v19[v12];
                    if (v33 <= v378)
                    {
                      v379 = *v26;
                      if (v34 >= v378)
                      {
                        if (v33 <= v379)
                          goto LABEL_1733;
                      }
                      else if (v33 <= v379)
                      {
                        goto LABEL_1733;
                      }
                    }
                  }
                  else
                  {
                    if (v33 <= v267)
                      goto LABEL_1733;
                    v268 = v19[v12];
                    if (v33 <= v268)
                    {
                      v451 = *v26;
                      if (v34 >= v268)
                      {
                        if (v33 <= v451 || v33 <= v19[v15])
                          goto LABEL_1733;
                      }
                      else if (v33 <= v451 || v33 <= v19[v15])
                      {
                        goto LABEL_1733;
                      }
                    }
                    else if (v33 <= v19[v15])
                    {
                      goto LABEL_1733;
                    }
                  }
                }
LABEL_1463:
                v96 = v19[3 * v9];
                goto LABEL_1464;
              }
              v166 = v19[v10];
              if (v34 >= v57)
              {
                if (v33 <= v166 || v33 <= v19[-3 * v9] || v33 <= *v23 || v33 <= *v25 || v33 <= *v27 && v33 <= v19[v15])
                  goto LABEL_1733;
              }
              else
              {
                if (v33 <= v166 || v33 <= v19[-3 * v9])
                  goto LABEL_1733;
                v167 = *v27;
                if (v33 <= v167)
                {
                  v401 = v19[v15];
                  if (v34 >= v167)
                  {
                    if (v33 <= v401 || v33 <= *v23)
                      goto LABEL_1733;
                  }
                  else if (v33 <= v401 || v33 <= *v23)
                  {
                    goto LABEL_1733;
                  }
                }
                else if (v33 <= *v23)
                {
                  goto LABEL_1733;
                }
                if (v33 <= *v25)
                  goto LABEL_1733;
              }
              if (v33 <= *v26)
                goto LABEL_1733;
            }
          }
          else
          {
            v44 = v19[-3 * v9];
            if (v33 <= v44)
            {
              if (v34 >= v44)
              {
                v93 = v19[v14];
                if (v33 <= v93)
                {
                  if (v34 >= v93)
                    goto LABEL_1733;
                  v143 = v19[v13];
                  if (v33 > v143 || v34 >= v143)
                    goto LABEL_1733;
                  v144 = v19[v12];
                  if (v33 <= v144)
                  {
                    if (v34 >= v144)
                    {
                      v380 = *v26;
                      if (v33 > v380)
                        goto LABEL_1733;
                      if (v34 >= v380)
                        goto LABEL_1733;
                      v381 = *v23;
                      if (v33 > v381)
                        goto LABEL_1733;
                      if (v34 >= v381)
                        goto LABEL_1733;
                      v382 = *v22;
                      if (v33 > v382)
                        goto LABEL_1733;
                      if (v34 >= v382)
                        goto LABEL_1733;
                      v383 = *v21;
                      if (v33 > v383)
                        goto LABEL_1733;
                      if (v34 >= v383)
                        goto LABEL_1733;
                      v384 = v19[v15];
                      if (v33 > v384)
                        goto LABEL_1733;
                      if (v34 >= v384)
                        goto LABEL_1733;
                      v385 = *(v19 - 3);
                      if (v33 > v385)
                        goto LABEL_1733;
                      if (v34 >= v385)
                        goto LABEL_1733;
                      v151 = v19[3 * v9];
                      if (v33 > v151)
                        goto LABEL_1733;
                    }
                    else
                    {
                      v276 = v19[v15];
                      if (v33 <= v276)
                      {
                        if (v34 >= v276)
                        {
                          v476 = *v25;
                          if (v33 > v476)
                            goto LABEL_1733;
                          if (v34 >= v476)
                            goto LABEL_1733;
                          v477 = v19[v10];
                          if (v33 > v477)
                            goto LABEL_1733;
                          if (v34 >= v477)
                            goto LABEL_1733;
                          v478 = *v27;
                          if (v33 > v478)
                            goto LABEL_1733;
                          if (v34 >= v478)
                            goto LABEL_1733;
                          v479 = v19[v11];
                          if (v33 > v479)
                            goto LABEL_1733;
                          if (v34 >= v479)
                            goto LABEL_1733;
                          v151 = v19[3 * v9];
                          if (v33 > v151)
                            goto LABEL_1733;
                        }
                        else
                        {
                          v406 = *v22;
                          if (v33 <= v406)
                          {
                            if (v34 >= v406)
                            {
                              v549 = v19[v10];
                              if (v33 > v549)
                                goto LABEL_1733;
                              if (v34 >= v549)
                                goto LABEL_1733;
                              v550 = *v27;
                              if (v33 > v550)
                                goto LABEL_1733;
                              if (v34 >= v550)
                                goto LABEL_1733;
                              v551 = v19[v11];
                              if (v33 > v551)
                                goto LABEL_1733;
                              if (v34 >= v551)
                                goto LABEL_1733;
                              v151 = v19[3 * v9];
                              if (v33 > v151)
                                goto LABEL_1733;
                            }
                            else
                            {
                              v502 = v19[3 * v9];
                              if (v33 > v502 || v34 >= v502)
                                goto LABEL_1733;
                              v503 = v19[v11];
                              if (v33 <= v503)
                              {
                                if (v34 >= v503)
                                {
                                  v605 = *v23;
                                  if (v33 > v605)
                                    goto LABEL_1733;
                                  if (v34 >= v605)
                                    goto LABEL_1733;
                                  v606 = *v21;
                                  if (v33 > v606)
                                    goto LABEL_1733;
                                  if (v34 >= v606)
                                    goto LABEL_1733;
                                  v151 = *(v19 - 3);
                                  if (v33 > v151)
                                    goto LABEL_1733;
                                }
                                else
                                {
                                  v585 = *(v19 - 3);
                                  if (v33 <= v585)
                                  {
                                    if (v34 < v585)
                                      continue;
                                    v151 = *v27;
                                    if (v33 > v151)
                                      goto LABEL_1733;
                                  }
                                  else
                                  {
                                    v151 = *v27;
                                    if (v33 > v151)
                                      goto LABEL_1733;
                                  }
                                }
                              }
                              else
                              {
                                v504 = *v23;
                                if (v33 > v504)
                                  goto LABEL_1733;
                                if (v34 >= v504)
                                  goto LABEL_1733;
                                v505 = *v21;
                                if (v33 > v505)
                                  goto LABEL_1733;
                                if (v34 >= v505)
                                  goto LABEL_1733;
                                v151 = *(v19 - 3);
                                if (v33 > v151)
                                  goto LABEL_1733;
                              }
                            }
                          }
                          else
                          {
                            v407 = v19[v10];
                            if (v33 > v407)
                              goto LABEL_1733;
                            if (v34 >= v407)
                              goto LABEL_1733;
                            v408 = v19[v11];
                            if (v33 > v408)
                              goto LABEL_1733;
                            if (v34 >= v408)
                              goto LABEL_1733;
                            v409 = *v27;
                            if (v33 > v409)
                              goto LABEL_1733;
                            if (v34 >= v409)
                              goto LABEL_1733;
                            v151 = v19[3 * v9];
                            if (v33 > v151)
                              goto LABEL_1733;
                          }
                        }
                      }
                      else
                      {
                        v277 = *v25;
                        if (v33 > v277)
                          goto LABEL_1733;
                        if (v34 >= v277)
                          goto LABEL_1733;
                        v278 = v19[v10];
                        if (v33 > v278)
                          goto LABEL_1733;
                        if (v34 >= v278)
                          goto LABEL_1733;
                        v279 = *v27;
                        if (v33 > v279)
                          goto LABEL_1733;
                        if (v34 >= v279)
                          goto LABEL_1733;
                        v280 = v19[v11];
                        if (v33 > v280)
                          goto LABEL_1733;
                        if (v34 >= v280)
                          goto LABEL_1733;
                        v151 = v19[3 * v9];
                        if (v33 > v151)
                          goto LABEL_1733;
                      }
                    }
                  }
                  else
                  {
                    v145 = *v26;
                    if (v33 > v145)
                      goto LABEL_1733;
                    if (v34 >= v145)
                      goto LABEL_1733;
                    v146 = *v23;
                    if (v33 > v146)
                      goto LABEL_1733;
                    if (v34 >= v146)
                      goto LABEL_1733;
                    v147 = *v22;
                    if (v33 > v147)
                      goto LABEL_1733;
                    if (v34 >= v147)
                      goto LABEL_1733;
                    v148 = *v21;
                    if (v33 > v148)
                      goto LABEL_1733;
                    if (v34 >= v148)
                      goto LABEL_1733;
                    v149 = v19[v15];
                    if (v33 > v149)
                      goto LABEL_1733;
                    if (v34 >= v149)
                      goto LABEL_1733;
                    v150 = *(v19 - 3);
                    if (v33 > v150)
                      goto LABEL_1733;
                    if (v34 >= v150)
                      goto LABEL_1733;
                    v151 = v19[3 * v9];
                    if (v33 > v151)
                      goto LABEL_1733;
                  }
                  if (v34 < v151)
                    continue;
                  goto LABEL_1733;
                }
                if (v33 <= v19[v13] || v33 <= *v21 || v33 <= *(v19 - 3))
                  goto LABEL_1733;
                v94 = *v23;
                if (v33 <= v94)
                {
                  v339 = v19[v11];
                  if (v34 >= v94)
                  {
                    if (v33 <= v339 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= *v22)
                      goto LABEL_1733;
                  }
                  else if (v33 <= v339 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= *v22)
                  {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  if (v33 <= v19[v15])
                    goto LABEL_1733;
                  v95 = *v26;
                  if (v33 > v95)
                  {
                    if (v33 <= v19[3 * v9])
                      goto LABEL_1733;
                    v96 = *v22;
                    goto LABEL_1464;
                  }
                  v447 = v19[v12];
                  if (v34 >= v95)
                  {
                    if (v33 <= v447 || v33 <= *v22)
                      goto LABEL_1733;
                  }
                  else if (v33 <= v447 || v33 <= *v22)
                  {
                    goto LABEL_1733;
                  }
                }
                goto LABEL_1463;
              }
              v68 = v19[3 * v9];
              if (v33 > v68)
              {
                v69 = *v23;
                if (v33 > v69)
                {
                  v70 = v19[v12];
                  if (v33 > v70)
                  {
                    if (v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= *v21 || v33 <= v19[v13] || v33 <= *v22)
                      goto LABEL_1733;
                    v71 = v19[v14];
                    goto LABEL_250;
                  }
                  if (v34 >= v70)
                  {
                    if (v33 <= *v26
                      || v33 <= v19[v13]
                      || v33 <= *(v19 - 3)
                      || v33 <= v19[v15]
                      || v33 <= *v21
                      || v33 <= v19[v14])
                    {
                      goto LABEL_1733;
                    }
                    v71 = *v22;
                    goto LABEL_250;
                  }
                  v221 = v19[v13];
                  if (v33 > v221)
                  {
                    if (v33 <= *v26 || v33 <= *v22 || v33 <= v19[v15] || v33 <= *v21 || v33 <= v19[v14])
                      goto LABEL_1733;
                    v71 = *(v19 - 3);
                    goto LABEL_250;
                  }
                  if (v34 >= v221)
                    goto LABEL_1733;
                  v355 = *v26;
                  if (v33 > v355)
                    goto LABEL_1733;
                  if (v34 >= v355)
                    goto LABEL_1733;
                  v356 = v19[v10];
                  if (v33 > v356)
                    goto LABEL_1733;
                  if (v34 >= v356)
                    goto LABEL_1733;
                  v357 = v19[v11];
                  if (v33 > v357)
                    goto LABEL_1733;
                  if (v34 >= v357)
                    goto LABEL_1733;
                  v358 = *v27;
                  if (v33 > v358 || v34 >= v358)
                    goto LABEL_1733;
                  v359 = *v25;
                  goto LABEL_1213;
                }
                if (v34 >= v69)
                {
                  v252 = v19[v13];
                  if (v33 > v252)
                  {
                    if (v33 <= v19[v11] || v33 <= *v21 || v33 <= *(v19 - 3) || v33 <= v19[v12] || v33 <= v19[v15])
                      goto LABEL_1733;
                    v171 = v19[v14];
                    goto LABEL_559;
                  }
                  if (v34 >= v252)
                    goto LABEL_1733;
                  v331 = *v26;
                  if (v33 > v331)
                    goto LABEL_1733;
                  if (v34 >= v331)
                    goto LABEL_1733;
                  v332 = v19[v12];
                  if (v33 > v332)
                    goto LABEL_1733;
                  if (v34 >= v332)
                    goto LABEL_1733;
                  v333 = v19[v10];
                  if (v33 > v333)
                    goto LABEL_1733;
                  if (v34 >= v333)
                    goto LABEL_1733;
                  v334 = v19[v11];
                  if (v33 > v334 || v34 >= v334)
                    goto LABEL_1733;
                  v335 = *v25;
                  goto LABEL_807;
                }
                v169 = v19[v10];
                if (v33 > v169)
                {
                  v170 = v19[v14];
                  if (v33 > v170)
                  {
                    if (v33 <= v19[v11] || v33 <= *v21 || v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= v19[v12])
                      goto LABEL_1733;
                    v171 = v19[v13];
LABEL_559:
                    if (v33 <= v171)
                      goto LABEL_1733;
                    v253 = *v22;
                    goto LABEL_965;
                  }
                  if (v34 >= v170)
                    goto LABEL_1733;
                  v344 = *v25;
                  if (v33 > v344)
                    goto LABEL_1733;
                  if (v34 >= v344)
                    goto LABEL_1733;
                  v345 = *v22;
                  if (v33 > v345)
                    goto LABEL_1733;
                  if (v34 >= v345)
                    goto LABEL_1733;
                  v346 = *v21;
                  if (v33 > v346 || v34 >= v346)
                    goto LABEL_1733;
                  v347 = v19[v15];
LABEL_1173:
                  if (v33 > v347 || v34 >= v347)
                    goto LABEL_1733;
                  v446 = *(v19 - 3);
LABEL_1317:
                  if (v33 > v446 || v34 >= v446)
                    goto LABEL_1733;
                  v336 = *v26;
LABEL_1610:
                  if (v33 > v336 || v34 >= v336)
                    goto LABEL_1733;
                  continue;
                }
                if (v34 >= v169)
                {
                  v386 = v19[v14];
                  if (v33 > v386)
                  {
                    if (v33 <= *v21 || v33 <= v19[v11] || v33 <= *(v19 - 3) || v33 <= v19[v12])
                      goto LABEL_1733;
                    v291 = v19[v15];
LABEL_962:
                    if (v33 <= v291 || v33 <= *v22)
                      goto LABEL_1733;
                    v253 = v19[v13];
LABEL_965:
                    if (v33 <= v253)
                      goto LABEL_1733;
                    continue;
                  }
                  if (v34 >= v386)
                    goto LABEL_1733;
                  v443 = *v25;
                  if (v33 > v443)
                    goto LABEL_1733;
                  if (v34 >= v443)
                    goto LABEL_1733;
                  v444 = *v22;
                  if (v33 > v444)
                    goto LABEL_1733;
                  if (v34 >= v444)
                    goto LABEL_1733;
                  v445 = v19[v15];
                  if (v33 > v445 || v34 >= v445)
                    goto LABEL_1733;
                  v347 = *v21;
                  goto LABEL_1173;
                }
                v288 = *(v19 - 3);
                if (v33 > v288)
                {
                  v289 = v19[v12];
                  if (v33 > v289)
                  {
                    v290 = v19[v11];
                    if (v33 > v290)
                    {
                      if (v33 <= *v21 || v33 <= v19[v15])
                        goto LABEL_1733;
                      v291 = v19[v14];
                      goto LABEL_962;
                    }
                    if (v34 >= v290)
                      goto LABEL_1733;
                    v494 = *v21;
                    if (v33 > v494)
                      goto LABEL_1733;
                    if (v34 >= v494)
                      goto LABEL_1733;
                    v495 = *v27;
                    if (v33 > v495 || v34 >= v495)
                      goto LABEL_1733;
                    v446 = *v25;
                    goto LABEL_1317;
                  }
                  if (v34 < v289)
                  {
                    v452 = v19[v11];
                    goto LABEL_1602;
                  }
                  v511 = *v21;
                  if (v33 > v511 || v34 >= v511)
                    goto LABEL_1733;
                  v482 = v19[v11];
LABEL_1385:
                  if (v33 > v482 || v34 >= v482)
                    goto LABEL_1733;
                  goto LABEL_1503;
                }
                if (v34 < v288)
                {
                  v414 = *v25;
                  if (v33 > v414)
                    goto LABEL_1733;
                  if (v34 >= v414)
                    goto LABEL_1733;
                  v415 = *v26;
                  if (v33 > v415 || v34 >= v415)
                    goto LABEL_1733;
                  v416 = *v21;
                  if (v33 > v416)
                  {
                    v417 = v19[v12];
                    if (v33 > v417)
                      goto LABEL_1733;
                    if (v34 >= v417)
                      goto LABEL_1733;
                    v418 = *v27;
                    if (v33 > v418 || v34 >= v418)
                      goto LABEL_1733;
                    v336 = v19[v11];
                    goto LABEL_1610;
                  }
                  if (v34 < v416)
                  {
                    v554 = *v27;
                    if (v33 <= v554 && v34 < v554)
                      continue;
                    v555 = v19[v15];
                    if (v33 > v555 || v34 >= v555)
                      goto LABEL_1733;
                    v336 = *v22;
                    goto LABEL_1610;
                  }
                  v590 = v19[v12];
                  if (v33 > v590 || v34 >= v590)
                    goto LABEL_1733;
                  v335 = v19[v11];
LABEL_807:
                  if (v33 > v335 || v34 >= v335)
                    goto LABEL_1733;
                  v336 = *v27;
                  goto LABEL_1610;
                }
                v480 = v19[v11];
                if (v33 > v480 || v34 >= v480)
                  goto LABEL_1733;
                v481 = *v21;
                if (v33 > v481)
                {
                  v482 = v19[v12];
                  goto LABEL_1385;
                }
                if (v34 < v481)
                {
LABEL_1503:
                  v547 = *v27;
                  if (v33 > v547 || v34 >= v547)
                    goto LABEL_1733;
                  v548 = *v26;
                  goto LABEL_1607;
                }
                v452 = v19[v12];
LABEL_1602:
                if (v33 > v452)
                  goto LABEL_1733;
                if (v34 >= v452)
                  goto LABEL_1733;
                v576 = *v26;
                if (v33 > v576 || v34 >= v576)
                  goto LABEL_1733;
LABEL_1606:
                v548 = *v27;
LABEL_1607:
                if (v33 > v548 || v34 >= v548)
                  goto LABEL_1733;
                v336 = *v25;
                goto LABEL_1610;
              }
              if (v34 >= v68)
              {
                v197 = *v26;
                if (v33 > v197 || v34 >= v197)
                  goto LABEL_1733;
                v198 = v19[v10];
                if (v33 > v198)
                {
                  v199 = v19[v14];
                  if (v33 > v199)
                    goto LABEL_1733;
                  if (v34 >= v199)
                    goto LABEL_1733;
                  v200 = *v25;
                  if (v33 > v200)
                    goto LABEL_1733;
                  if (v34 >= v200)
                    goto LABEL_1733;
                  v201 = *v22;
                  if (v33 > v201)
                    goto LABEL_1733;
                  if (v34 >= v201)
                    goto LABEL_1733;
                  v202 = *v21;
                  if (v33 > v202 || v34 >= v202)
                    goto LABEL_1733;
                  v203 = v19[v15];
                  goto LABEL_994;
                }
                if (v34 >= v198)
                {
                  v392 = v19[v14];
                  if (v33 > v392)
                    goto LABEL_1733;
                  if (v34 >= v392)
                    goto LABEL_1733;
                  v393 = v19[v15];
                  if (v33 > v393)
                    goto LABEL_1733;
                  if (v34 >= v393)
                    goto LABEL_1733;
                  v394 = *v25;
                  if (v33 > v394)
                    goto LABEL_1733;
                  if (v34 >= v394)
                    goto LABEL_1733;
                  v395 = *v21;
                  if (v33 > v395 || v34 >= v395)
                    goto LABEL_1733;
                  v203 = *v22;
LABEL_994:
                  if (v33 > v203 || v34 >= v203)
                    goto LABEL_1733;
                  v396 = *v23;
                  goto LABEL_997;
                }
                v301 = *v23;
                if (v33 > v301)
                {
                  v302 = v19[v13];
                  if (v33 > v302)
                    goto LABEL_1733;
                  if (v34 >= v302)
                    goto LABEL_1733;
                  v303 = v19[v12];
                  if (v33 > v303)
                    goto LABEL_1733;
                  if (v34 >= v303)
                    goto LABEL_1733;
                  v304 = v19[v11];
                  if (v33 > v304 || v34 >= v304)
                    goto LABEL_1733;
                  v305 = *v25;
                  goto LABEL_1576;
                }
                if (v34 < v301)
                {
                  v422 = *v25;
                  if (v33 > v422 || v34 >= v422)
                    goto LABEL_1733;
                  v423 = *v21;
                  if (v33 > v423)
                  {
                    v424 = v19[v12];
                    if (v33 > v424)
                      goto LABEL_1733;
                    if (v34 >= v424)
                      goto LABEL_1733;
                    v425 = *v27;
                    if (v33 > v425 || v34 >= v425)
                      goto LABEL_1733;
                    goto LABEL_1471;
                  }
                  if (v34 >= v423)
                  {
                    v565 = v19[v12];
                    if (v33 > v565 || v34 >= v565)
                      goto LABEL_1733;
                    v305 = v19[v11];
LABEL_1576:
                    if (v33 > v305 || v34 >= v305)
                      goto LABEL_1733;
                    v397 = *v27;
                    goto LABEL_1579;
                  }
                  v534 = *v27;
                  if (v33 <= v534 && v34 < v534)
                  {
                    v535 = *(v19 - 3);
                    if (v33 <= v535 && v34 < v535)
                      continue;
LABEL_1471:
                    v397 = v19[v11];
LABEL_1579:
                    if (v33 > v397 || v34 >= v397)
                      goto LABEL_1733;
                    continue;
                  }
                  v577 = v19[v15];
                  if (v33 > v577 || v34 >= v577)
                    goto LABEL_1733;
                  v396 = *v22;
LABEL_997:
                  if (v33 > v396 || v34 >= v396)
                    goto LABEL_1733;
                  v397 = *(v19 - 3);
                  goto LABEL_1579;
                }
                v487 = v19[v13];
                if (v33 > v487)
                  goto LABEL_1733;
                if (v34 >= v487)
                  goto LABEL_1733;
                v488 = v19[v12];
                if (v33 > v488 || v34 >= v488)
                  goto LABEL_1733;
                v489 = v19[v11];
LABEL_1513:
                if (v33 > v489 || v34 >= v489)
                  goto LABEL_1733;
                v501 = *v27;
LABEL_1516:
                if (v33 > v501 || v34 >= v501)
                  goto LABEL_1733;
                v397 = *v25;
                goto LABEL_1579;
              }
              v132 = v19[v12];
              if (v33 > v132)
              {
                v133 = *v21;
                if (v33 > v133)
                  goto LABEL_1733;
                if (v34 >= v133)
                  goto LABEL_1733;
                v134 = *v23;
                if (v33 > v134)
                  goto LABEL_1733;
                if (v34 >= v134)
                  goto LABEL_1733;
                v135 = *v26;
                if (v33 > v135 || v34 >= v135)
                  goto LABEL_1733;
                v136 = *(v19 - 3);
                if (v33 <= v136)
                {
                  if (v34 >= v136)
                  {
                    v509 = v19[v11];
                    if (v33 > v509 || v34 >= v509)
                      goto LABEL_1733;
                    goto LABEL_1478;
                  }
                  v448 = v19[v15];
                  if (v33 <= v448)
                  {
                    if (v34 < v448)
                    {
                      v536 = *v22;
                      if (v33 <= v536 && v34 < v536)
                      {
                        v537 = v19[v14];
                        if (v33 <= v537 && v34 < v537)
                          continue;
                        v538 = v19[v10];
                        goto LABEL_1481;
                      }
                    }
LABEL_1478:
                    v539 = v19[v10];
                    if (v33 > v539 || v34 >= v539)
                      goto LABEL_1733;
                    v538 = *v27;
LABEL_1481:
                    if (v33 > v538 || v34 >= v538)
                      goto LABEL_1733;
                    v243 = *v25;
                    goto LABEL_1484;
                  }
                  v138 = v19[v10];
                  if (v33 > v138)
                    goto LABEL_1733;
                }
                else
                {
                  v137 = v19[v11];
                  if (v33 > v137)
                    goto LABEL_1733;
                  if (v34 >= v137)
                    goto LABEL_1733;
                  v138 = v19[v10];
                  if (v33 > v138)
                    goto LABEL_1733;
                }
                if (v34 >= v138)
                  goto LABEL_1733;
                goto LABEL_1606;
              }
              if (v34 >= v132)
              {
                v321 = *v23;
                if (v33 > v321)
                  goto LABEL_1733;
                if (v34 >= v321)
                  goto LABEL_1733;
                v322 = *v21;
                if (v33 > v322)
                  goto LABEL_1733;
                if (v34 >= v322)
                  goto LABEL_1733;
                v323 = *v26;
                if (v33 > v323 || v34 >= v323)
                  goto LABEL_1733;
                v324 = *(v19 - 3);
                if (v33 <= v324)
                {
                  if (v34 >= v324)
                  {
                    v325 = v19[v11];
                    if (v33 > v325)
                      goto LABEL_1733;
                    goto LABEL_1511;
                  }
                  v498 = v19[v15];
                  if (v33 <= v498 && v34 < v498)
                  {
                    v499 = *v22;
                    if (v33 <= v499 && v34 < v499)
                    {
                      v500 = v19[v14];
                      if (v33 <= v500 && v34 < v500)
                        continue;
                      v501 = v19[v10];
                      goto LABEL_1516;
                    }
                  }
                }
                else
                {
                  v325 = v19[v11];
                  if (v33 > v325)
                    goto LABEL_1733;
LABEL_1511:
                  if (v34 >= v325)
                    goto LABEL_1733;
                }
                v489 = v19[v10];
                goto LABEL_1513;
              }
              v234 = v19[v10];
              if (v33 <= v234)
              {
                if (v34 >= v234)
                {
                  v436 = v19[v15];
                  if (v33 > v436)
                    goto LABEL_1733;
                  if (v34 >= v436)
                    goto LABEL_1733;
                  v437 = *v22;
                  if (v33 > v437)
                    goto LABEL_1733;
                  if (v34 >= v437)
                    goto LABEL_1733;
                  v438 = v19[v14];
                  if (v33 > v438 || v34 >= v438)
                    goto LABEL_1733;
                  v439 = *(v19 - 3);
                  if (v33 > v439)
                  {
                    v440 = *v27;
                    if (v33 > v440)
                      goto LABEL_1733;
                    if (v34 >= v440)
                      goto LABEL_1733;
                    v441 = v19[v11];
                    if (v33 > v441 || v34 >= v441)
                      goto LABEL_1733;
                    goto LABEL_1164;
                  }
                  if (v34 >= v439)
                  {
                    v591 = *v27;
                    if (v33 > v591)
                      goto LABEL_1733;
                    if (v34 >= v591)
                      goto LABEL_1733;
                    v592 = v19[v11];
                    if (v33 > v592 || v34 >= v592)
                      goto LABEL_1733;
LABEL_1657:
                    v397 = v19[v13];
                    goto LABEL_1579;
                  }
                  v556 = v19[v11];
                  if (v33 > v556)
                  {
                    v557 = *v23;
                    if (v33 > v557)
                      goto LABEL_1733;
                    if (v34 >= v557)
                      goto LABEL_1733;
                    v558 = *v21;
                    if (v33 > v558 || v34 >= v558)
                      goto LABEL_1733;
                    v559 = *v26;
                    if (v33 <= v559)
                    {
                      if (v34 < v559)
                        continue;
LABEL_1164:
                      v442 = v19[v13];
                      goto LABEL_1671;
                    }
                    v442 = v19[v13];
LABEL_1672:
                    if (v34 >= v442)
                      goto LABEL_1733;
                    continue;
                  }
                  if (v34 < v556)
                  {
                    v597 = v19[v13];
                    if (v33 <= v597 && v34 < v597)
                      continue;
                    v598 = *v23;
                    if (v33 > v598 || v34 >= v598)
                      goto LABEL_1733;
                    v589 = *v21;
                    goto LABEL_1647;
                  }
                  v617 = *v23;
                  if (v33 > v617)
                    goto LABEL_1733;
                  if (v34 >= v617)
                    goto LABEL_1733;
                  v618 = *v21;
                  if (v33 > v618 || v34 >= v618)
                    goto LABEL_1733;
                  v619 = *v26;
                  if (v33 > v619 || v34 >= v619)
                    goto LABEL_1657;
                }
                else
                {
                  v365 = v19[v11];
                  if (v33 <= v365)
                  {
                    if (v34 < v365)
                    {
                      v468 = *v27;
                      if (v33 <= v468)
                      {
                        if (v34 >= v468)
                        {
                          v569 = *v22;
                          if (v33 > v569)
                            goto LABEL_1733;
                          if (v34 >= v569)
                            goto LABEL_1733;
                          v570 = v19[v15];
                          if (v33 > v570)
                            goto LABEL_1733;
                          if (v34 >= v570)
                            goto LABEL_1733;
                          v571 = *(v19 - 3);
                          if (v33 > v571 || v34 >= v571)
                            goto LABEL_1733;
                          v572 = v19[v14];
                          if (v33 <= v572)
                          {
                            if (v34 >= v572)
                            {
                              v633 = *v21;
                              if (v33 > v633 || v34 >= v633)
                                goto LABEL_1733;
                              goto LABEL_1798;
                            }
                            v622 = v19[v13];
                            if (v33 <= v622)
                            {
                              if (v34 < v622)
                                continue;
                              v635 = *v21;
                              if (v33 > v635 || v34 >= v635)
                                goto LABEL_1733;
LABEL_1646:
                              v589 = *v23;
                              goto LABEL_1647;
                            }
                            v623 = *v23;
                            if (v33 > v623 || v34 >= v623)
                              goto LABEL_1733;
                            v575 = *v21;
                          }
                          else
                          {
                            v573 = *v21;
                            if (v33 > v573)
                              goto LABEL_1733;
                            if (v34 >= v573)
                              goto LABEL_1733;
                            v574 = *v23;
                            if (v33 > v574 || v34 >= v574)
                              goto LABEL_1733;
                            v575 = *v25;
                          }
                          if (v33 > v575)
                            goto LABEL_1733;
                        }
                        else
                        {
                          v542 = *v25;
                          if (v33 > v542)
                          {
                            v543 = v19[v15];
                            if (v33 > v543)
                              goto LABEL_1733;
                            if (v34 >= v543)
                              goto LABEL_1733;
                            v544 = v19[v14];
                            if (v33 > v544 || v34 >= v544)
                              goto LABEL_1733;
                            v545 = v19[v13];
                            if (v33 <= v545)
                            {
                              if (v34 < v545)
                                continue;
                              if (v34 >= *(v19 - 3) || v34 >= *v23 || v34 >= *v22)
                                goto LABEL_1733;
                              v442 = *v21;
                              goto LABEL_1672;
                            }
                            if (v34 >= *v21 || v34 >= *v23)
                              goto LABEL_1733;
                            v546 = *v22;
                            goto LABEL_1715;
                          }
                          if (v34 < v542)
                          {
                            v588 = v19[v13];
                            if (v33 <= v588 && v34 < v588)
                              continue;
                            goto LABEL_1646;
                          }
                          v608 = v19[v15];
                          if (v33 > v608)
                            goto LABEL_1733;
                          if (v34 >= v608)
                            goto LABEL_1733;
                          v609 = v19[v14];
                          if (v33 > v609 || v34 >= v609)
                            goto LABEL_1733;
                          v610 = v19[v13];
                          if (v33 > v610)
                          {
                            if (v34 >= *v21 || v34 >= *v22)
                              goto LABEL_1733;
                            v546 = *v23;
LABEL_1715:
                            if (v34 >= v546)
                              goto LABEL_1733;
                            v442 = *(v19 - 3);
                            goto LABEL_1672;
                          }
                          if (v34 < v610)
                            continue;
                          if (v34 >= *v21 || v34 >= *v23)
                            goto LABEL_1733;
                          v575 = *v22;
                        }
                        if (v34 >= v575)
                          goto LABEL_1733;
                        v442 = *v26;
                        goto LABEL_1672;
                      }
                      v469 = *(v19 - 3);
                      if (v33 > v469)
                        goto LABEL_1733;
                      if (v34 >= v469)
                        goto LABEL_1733;
                      v470 = v19[v15];
                      if (v33 > v470)
                        goto LABEL_1733;
                      if (v34 >= v470)
                        goto LABEL_1733;
                      v471 = *v22;
                      if (v33 > v471 || v34 >= v471)
                        goto LABEL_1733;
                      v472 = v19[v14];
                      if (v33 <= v472)
                      {
                        if (v34 < v472)
                        {
                          v611 = v19[v13];
                          if (v33 > v611)
                          {
                            v612 = *v21;
                            if (v33 > v612 || v34 >= v612 || v34 >= *v23)
                              goto LABEL_1733;
                            v243 = *v26;
                            goto LABEL_1485;
                          }
                          if (v34 < v611)
                            continue;
                          v628 = *v21;
                          if (v33 > v628 || v34 >= v628)
                            goto LABEL_1733;
                          v580 = *v23;
                          goto LABEL_1622;
                        }
                        v624 = *v21;
                        if (v33 > v624 || v34 >= v624)
                          goto LABEL_1733;
LABEL_1798:
                        v634 = *v23;
                        if (v33 > v634 || v34 >= v634)
                          goto LABEL_1733;
                        v589 = *v25;
LABEL_1647:
                        if (v33 > v589 || v34 >= v589)
                          goto LABEL_1733;
                        v442 = *v26;
                        goto LABEL_1671;
                      }
                      v473 = *v21;
                      if (v33 > v473)
                        goto LABEL_1733;
                      if (v34 >= v473)
                        goto LABEL_1733;
                      v474 = *v23;
                      if (v33 > v474)
                        goto LABEL_1733;
                      if (v34 >= v474)
                        goto LABEL_1733;
                      v475 = *v26;
                      if (v33 > v475 || v34 >= v475)
                        goto LABEL_1733;
                      v373 = *v25;
                      goto LABEL_914;
                    }
                    v521 = *v21;
                    if (v33 > v521)
                      goto LABEL_1733;
                    if (v34 >= v521)
                      goto LABEL_1733;
                    v522 = *v23;
                    if (v33 > v522)
                      goto LABEL_1733;
                    if (v34 >= v522)
                      goto LABEL_1733;
                    v523 = *(v19 - 3);
                    if (v33 > v523 || v34 >= v523)
                      goto LABEL_1733;
                    v524 = *v26;
                    if (v33 > v524 || v34 >= v524)
                    {
                      v594 = *v22;
                      if (v33 > v594)
                        goto LABEL_1733;
                      if (v34 >= v594)
                        goto LABEL_1733;
                      v595 = v19[v15];
                      if (v33 > v595 || v34 >= v595)
                        goto LABEL_1733;
                      v596 = v19[v13];
                      goto LABEL_1668;
                    }
                    v525 = *v27;
                    if (v33 <= v525)
                    {
                      if (v34 >= v525)
                      {
                        v630 = v19[v15];
                        if (v33 > v630)
                          goto LABEL_1733;
                        if (v34 >= v630)
                          goto LABEL_1733;
                        v631 = *v22;
                        if (v33 > v631 || v34 >= v631)
                          goto LABEL_1733;
                        v632 = v19[v14];
                        if (v33 <= v632)
                        {
                          if (v34 < v632)
                            continue;
                          v442 = *v25;
                          goto LABEL_1671;
                        }
LABEL_1795:
                        v442 = *v25;
                      }
                      else
                      {
                        v620 = *v25;
                        if (v33 <= v620 && v34 < v620)
                          continue;
                        v621 = *v22;
                        if (v33 > v621 || v34 >= v621)
                          goto LABEL_1733;
                        v596 = v19[v15];
LABEL_1668:
                        if (v33 > v596 || v34 >= v596)
                          goto LABEL_1733;
                        v442 = v19[v14];
LABEL_1671:
                        if (v33 > v442)
                          goto LABEL_1733;
                      }
                      goto LABEL_1672;
                    }
                    v526 = v19[v15];
                    if (v33 > v526)
                      goto LABEL_1733;
                    if (v34 >= v526)
                      goto LABEL_1733;
                    v527 = *v22;
                    if (v33 > v527 || v34 >= v527)
                      goto LABEL_1733;
                    v528 = v19[v14];
                    if (v33 > v528 || v34 >= v528)
                      goto LABEL_1795;
                  }
                  else
                  {
                    v366 = *(v19 - 3);
                    if (v33 > v366)
                      goto LABEL_1733;
                    if (v34 >= v366)
                      goto LABEL_1733;
                    v367 = *v23;
                    if (v33 > v367)
                      goto LABEL_1733;
                    if (v34 >= v367)
                      goto LABEL_1733;
                    v368 = *v21;
                    if (v33 > v368 || v34 >= v368)
                      goto LABEL_1733;
                    v369 = *v26;
                    if (v33 > v369)
                    {
                      v370 = *v22;
                      if (v33 > v370)
                        goto LABEL_1733;
                      if (v34 >= v370)
                        goto LABEL_1733;
                      v371 = v19[v15];
                      if (v33 > v371)
                        goto LABEL_1733;
                      if (v34 >= v371)
                        goto LABEL_1733;
                      v372 = v19[v14];
                      if (v33 > v372 || v34 >= v372)
                        goto LABEL_1733;
                      v373 = v19[v13];
LABEL_914:
                      if (v34 >= v373 || v33 > v373)
                        goto LABEL_1733;
                      continue;
                    }
                    if (v34 >= v369)
                    {
                      v602 = *v22;
                      if (v33 > v602)
                        goto LABEL_1733;
                      if (v34 >= v602)
                        goto LABEL_1733;
                      v603 = v19[v15];
                      if (v33 > v603 || v34 >= v603)
                        goto LABEL_1733;
                      v604 = v19[v13];
                      goto LABEL_1692;
                    }
                    v581 = *v27;
                    if (v33 <= v581)
                    {
                      if (v34 < v581)
                      {
                        v613 = *v25;
                        if (v33 > v613)
                        {
                          v614 = *v22;
                          if (v33 > v614)
                            goto LABEL_1733;
                          if (v34 >= v614)
                            goto LABEL_1733;
                          v615 = v19[v14];
                          if (v33 > v615 || v34 >= v615)
                            goto LABEL_1733;
                          v243 = v19[v15];
                          goto LABEL_1484;
                        }
                        if (v34 < v613)
                          continue;
                        v629 = *v22;
                        if (v33 > v629 || v34 >= v629)
                          goto LABEL_1733;
                        v604 = v19[v15];
LABEL_1692:
                        if (v33 > v604 || v34 >= v604)
                          goto LABEL_1733;
                        v243 = v19[v14];
                        goto LABEL_1484;
                      }
                      v625 = *v22;
                      if (v33 > v625)
                        goto LABEL_1733;
                      if (v34 >= v625)
                        goto LABEL_1733;
                      v626 = v19[v15];
                      if (v33 > v626 || v34 >= v626)
                        goto LABEL_1733;
                      v627 = v19[v14];
                      if (v33 > v627 || v34 >= v627)
                      {
LABEL_1775:
                        v243 = *v25;
                        goto LABEL_1485;
                      }
                    }
                    else
                    {
                      v582 = *v22;
                      if (v33 > v582)
                        goto LABEL_1733;
                      if (v34 >= v582)
                        goto LABEL_1733;
                      v583 = v19[v15];
                      if (v33 > v583 || v34 >= v583)
                        goto LABEL_1733;
                      v584 = v19[v14];
                      if (v33 > v584 || v34 >= v584)
                        goto LABEL_1775;
                    }
                  }
                }
              }
              else
              {
                v235 = *v22;
                if (v33 > v235)
                  goto LABEL_1733;
                if (v34 >= v235)
                  goto LABEL_1733;
                v236 = v19[v15];
                if (v33 > v236)
                  goto LABEL_1733;
                if (v34 >= v236)
                  goto LABEL_1733;
                v237 = v19[v14];
                if (v33 > v237 || v34 >= v237)
                  goto LABEL_1733;
                v238 = *(v19 - 3);
                if (v33 > v238 || v34 >= v238)
                {
                  v531 = *v27;
                  if (v33 > v531)
                    goto LABEL_1733;
                  if (v34 >= v531)
                    goto LABEL_1733;
                  v532 = v19[v11];
                  if (v33 > v532 || v34 >= v532)
                    goto LABEL_1733;
                  goto LABEL_1437;
                }
                v239 = v19[v11];
                if (v33 > v239)
                {
                  v240 = *v23;
                  if (v33 > v240)
                    goto LABEL_1733;
                  if (v34 >= v240)
                    goto LABEL_1733;
                  v241 = *v21;
                  if (v33 > v241 || v34 >= v241)
                    goto LABEL_1733;
                  v242 = *v26;
                  if (v33 > v242)
                  {
                    v243 = v19[v13];
                    goto LABEL_1485;
                  }
                  if (v34 < v242)
                    continue;
LABEL_1437:
                  v243 = v19[v13];
LABEL_1484:
                  if (v33 > v243)
                    goto LABEL_1733;
LABEL_1485:
                  if (v34 >= v243)
                    goto LABEL_1733;
                  continue;
                }
                if (v34 < v239)
                {
                  v578 = v19[v13];
                  if (v33 <= v578 && v34 < v578)
                    continue;
                  v579 = *v23;
                  if (v33 > v579 || v34 >= v579)
                    goto LABEL_1733;
                  v580 = *v21;
LABEL_1622:
                  if (v33 > v580 || v34 >= v580)
                    goto LABEL_1733;
                  v243 = *v26;
                  goto LABEL_1484;
                }
                v599 = *v23;
                if (v33 > v599)
                  goto LABEL_1733;
                if (v34 >= v599)
                  goto LABEL_1733;
                v600 = *v21;
                if (v33 > v600 || v34 >= v600)
                  goto LABEL_1733;
                v601 = *v26;
                if (v33 > v601 || v34 >= v601)
                  goto LABEL_1437;
              }
            }
            else
            {
              v45 = v19[v15];
              if (v33 > v45)
              {
                v46 = *v21;
                if (v33 <= v46)
                {
                  v110 = *v25;
                  v112 = v33 <= v110 && v34 < v110;
                  if (v34 < v46)
                  {
                    if (!v112)
                      goto LABEL_1733;
                    v113 = v19[v14];
                    if (v33 > v113)
                      goto LABEL_1733;
                    if (v34 >= v113)
                      goto LABEL_1733;
                    v114 = v19[v12];
                    if (v33 > v114)
                      goto LABEL_1733;
                    if (v34 >= v114)
                      goto LABEL_1733;
                    v115 = v19[v10];
                    if (v33 > v115)
                      goto LABEL_1733;
                    if (v34 >= v115)
                      goto LABEL_1733;
                    v116 = v19[v13];
                    if (v33 > v116)
                      goto LABEL_1733;
                    if (v34 >= v116)
                      goto LABEL_1733;
                    v117 = v19[v11];
                    if (v33 > v117 || v34 >= v117)
                      goto LABEL_1733;
                    v118 = *v27;
                    goto LABEL_1326;
                  }
                  if (!v112)
                    goto LABEL_1733;
                  v183 = v19[v14];
                  if (v33 > v183)
                    goto LABEL_1733;
                  if (v34 >= v183)
                    goto LABEL_1733;
                  v184 = v19[v13];
                  if (v33 > v184)
                    goto LABEL_1733;
                  if (v34 >= v184)
                    goto LABEL_1733;
                  v185 = v19[v10];
                  if (v33 > v185)
                    goto LABEL_1733;
                  if (v34 >= v185)
                    goto LABEL_1733;
                  v186 = v19[v11];
                  if (v33 > v186)
                    goto LABEL_1733;
                  if (v34 >= v186)
                    goto LABEL_1733;
                  v187 = *v27;
                  if (v33 > v187)
                    goto LABEL_1733;
                  if (v34 >= v187)
                    goto LABEL_1733;
                  v188 = v19[3 * v9];
                  if (v33 > v188 || v34 >= v188)
                    goto LABEL_1733;
                  v189 = v19[v12];
                }
                else
                {
                  v47 = v19[3 * v9];
                  if (v33 > v47)
                  {
                    if (v33 <= *(v19 - 3))
                      goto LABEL_1733;
                    v48 = *v23;
                    if (v33 <= v48)
                    {
                      v265 = v19[v11];
                      if (v34 < v48)
                      {
                        if (v33 <= v265 || v33 <= v19[v12] || v33 <= v19[v14] || v33 <= v19[v13])
                          goto LABEL_1733;
                        v87 = *v22;
                        goto LABEL_1004;
                      }
                      if (v33 <= v265 || v33 <= v19[v12] || v33 <= v19[v13])
                        goto LABEL_1733;
                      v377 = *v22;
                    }
                    else
                    {
                      if (v33 <= *v22)
                        goto LABEL_1733;
                      if (v33 > *v26)
                      {
                        if (v33 > v19[v14])
                          continue;
                        v49 = v19[v10];
                        goto LABEL_120;
                      }
                      if (v33 <= v19[v12])
                        goto LABEL_1733;
                      v377 = v19[v13];
                    }
                    if (v33 <= v377)
                      goto LABEL_1733;
                    v87 = v19[v14];
LABEL_1004:
                    if (v33 > v87)
                      continue;
                    goto LABEL_1733;
                  }
                  if (v34 >= v47)
                  {
                    if (v33 <= *v25 || v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= v19[v14] && v33 <= v19[v10])
                      goto LABEL_1733;
                    v156 = *v22;
                    goto LABEL_525;
                  }
                  v155 = v19[v10];
                  if (v33 > v155)
                  {
                    if (v33 <= *v22 || v33 <= *v23 || v33 <= *v25)
                      goto LABEL_1733;
                    v156 = *(v19 - 3);
                    goto LABEL_525;
                  }
                  v281 = v19[v14];
                  if (v34 >= v155)
                  {
                    if (v33 <= v281 || v33 <= *v25)
                      goto LABEL_1733;
LABEL_952:
                    if (v33 <= *v23 || v33 <= *v22 || v33 <= *v26)
                      goto LABEL_1733;
                    v87 = *(v19 - 3);
                    goto LABEL_1004;
                  }
                  if (v33 > v281)
                  {
                    if (v33 <= *v25)
                      goto LABEL_1733;
                    goto LABEL_952;
                  }
                  if (v34 >= v281)
                    goto LABEL_1733;
                  v410 = *v25;
                  if (v33 > v410)
                    goto LABEL_1733;
                  if (v34 >= v410)
                    goto LABEL_1733;
                  v411 = v19[v12];
                  if (v33 > v411)
                    goto LABEL_1733;
                  if (v34 >= v411)
                    goto LABEL_1733;
                  v412 = v19[v11];
                  if (v33 > v412)
                    goto LABEL_1733;
                  if (v34 >= v412)
                    goto LABEL_1733;
                  v413 = *v27;
                  if (v33 > v413 || v34 >= v413)
                    goto LABEL_1733;
                  v189 = v19[v13];
                }
LABEL_1329:
                if (v33 > v189 || v34 >= v189)
                  goto LABEL_1733;
                continue;
              }
              if (v34 >= v45)
              {
                v140 = *v25;
                if (v33 > v140)
                {
                  if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= v19[v10] || v33 <= *v23)
                    goto LABEL_1733;
                  v141 = *v21;
LABEL_248:
                  if (v33 <= v141)
                    goto LABEL_1733;
                  v71 = *v26;
LABEL_250:
                  if (v33 <= v71)
                    goto LABEL_1733;
                  continue;
                }
                if (v34 >= v140)
                  goto LABEL_1733;
                v204 = v19[v14];
                if (v33 > v204)
                  goto LABEL_1733;
                if (v34 >= v204)
                  goto LABEL_1733;
                v205 = v19[v12];
                if (v33 > v205)
                  goto LABEL_1733;
                if (v34 >= v205)
                  goto LABEL_1733;
                v206 = v19[v10];
                if (v33 > v206)
                  goto LABEL_1733;
                if (v34 >= v206)
                  goto LABEL_1733;
                v207 = v19[v13];
                if (v33 > v207)
                  goto LABEL_1733;
LABEL_1205:
                if (v34 >= v207)
                  goto LABEL_1733;
                v453 = *v27;
                goto LABEL_1207;
              }
              v85 = v19[v13];
              if (v33 > v85)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= *v23)
                  goto LABEL_1733;
                v86 = v19[v10];
                goto LABEL_117;
              }
              if (v34 >= v85)
              {
                if (v33 <= *v22
                  || v33 <= *v27
                  || v33 <= *(v19 - 3)
                  || v33 <= v19[v10]
                  || v33 <= *v23
                  || v33 <= *v21
                  || v33 <= *v26)
                {
                  goto LABEL_1733;
                }
                v71 = *v25;
                goto LABEL_250;
              }
              v174 = v19[v14];
              if (v33 > v174)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= v19[v10] || v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= *v25)
                  goto LABEL_1733;
                v156 = *v21;
LABEL_525:
                if (v33 <= v156)
                  goto LABEL_1733;
                v87 = *v26;
                goto LABEL_1004;
              }
              if (v34 >= v174)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= v19[v10] || v33 <= *v23 || v33 <= *v21)
                  goto LABEL_1733;
                v141 = *v25;
                goto LABEL_248;
              }
              v292 = *(v19 - 3);
              if (v33 > v292)
              {
                v293 = v19[v10];
                if (v33 > v293)
                {
                  v294 = *v22;
                  if (v33 > v294)
                  {
                    if (v33 <= *v27)
                      goto LABEL_1733;
                    v86 = *v23;
LABEL_117:
                    if (v33 <= v86 || v33 <= *v21)
                      goto LABEL_1733;
                    v49 = *v26;
LABEL_120:
                    if (v33 <= v49)
                      goto LABEL_1733;
                    v87 = *v25;
                    goto LABEL_1004;
                  }
                  if (v34 >= v294)
                    goto LABEL_1733;
                  v496 = *v27;
                  if (v33 > v496)
                    goto LABEL_1733;
                  if (v34 >= v496)
                    goto LABEL_1733;
                  v497 = v19[v12];
                  if (v33 > v497 || v34 >= v497)
                    goto LABEL_1733;
                  v118 = v19[v11];
LABEL_1326:
                  if (v33 > v118 || v34 >= v118)
                    goto LABEL_1733;
                  v189 = v19[3 * v9];
                  goto LABEL_1329;
                }
                if (v34 < v293)
                {
                  v207 = v19[v12];
                  if (v33 > v207)
                    goto LABEL_1733;
                  goto LABEL_1205;
                }
                v512 = *v22;
                if (v33 > v512)
                  goto LABEL_1733;
                if (v34 >= v512)
                  goto LABEL_1733;
                v513 = *v27;
                if (v33 > v513 || v34 >= v513)
                  goto LABEL_1733;
                v453 = v19[v12];
LABEL_1207:
                if (v33 > v453 || v34 >= v453)
                  goto LABEL_1733;
                v454 = v19[v11];
LABEL_1210:
                if (v33 > v454 || v34 >= v454)
                  goto LABEL_1733;
                goto LABEL_1212;
              }
              if (v34 >= v292)
              {
                v483 = *v27;
                if (v33 > v483)
                  goto LABEL_1733;
                if (v34 >= v483)
                  goto LABEL_1733;
                v484 = v19[v11];
                if (v33 > v484)
                  goto LABEL_1733;
                if (v34 >= v484)
                  goto LABEL_1733;
                v485 = v19[v12];
                if (v33 > v485 || v34 >= v485)
                  goto LABEL_1733;
                v486 = *v22;
                if (v33 > v486 || v34 >= v486)
                {
                  v454 = v19[v10];
                  goto LABEL_1210;
                }
LABEL_1212:
                v359 = v19[3 * v9];
LABEL_1213:
                if (v33 > v359 || v34 >= v359)
                  goto LABEL_1733;
                continue;
              }
              v419 = v19[v12];
              if (v33 > v419)
              {
                v420 = *v26;
                if (v33 > v420)
                  goto LABEL_1733;
                if (v34 >= v420)
                  goto LABEL_1733;
                v421 = *v23;
                if (v33 > v421)
                  goto LABEL_1733;
                goto LABEL_1659;
              }
              if (v34 >= v419)
              {
                v552 = *v26;
                if (v33 > v552)
                  goto LABEL_1733;
                if (v34 >= v552)
                  goto LABEL_1733;
                v421 = *v23;
                if (v33 > v421)
                  goto LABEL_1733;
                goto LABEL_1659;
              }
              v506 = v19[v11];
              if (v33 > v506)
              {
                v507 = *v23;
                if (v33 > v507)
                  goto LABEL_1733;
                if (v34 >= v507)
                  goto LABEL_1733;
                v508 = *v22;
                if (v33 > v508 || v34 >= v508)
                  goto LABEL_1733;
                v454 = *v21;
                goto LABEL_1210;
              }
              if (v34 >= v506)
              {
                v421 = *v23;
                if (v33 > v421)
                  goto LABEL_1733;
LABEL_1659:
                if (v34 >= v421)
                  goto LABEL_1733;
                v593 = *v21;
                if (v33 > v593 || v34 >= v593)
                  goto LABEL_1733;
                v454 = *v22;
                goto LABEL_1210;
              }
              v560 = v19[3 * v9];
              if (v33 > v560 || v34 >= v560)
                goto LABEL_1733;
              v561 = *v22;
              if (v33 > v561 || v34 >= v561)
              {
                v562 = v19[v10];
                if (v33 > v562 || v34 >= v562)
                  goto LABEL_1733;
                v359 = *v27;
                goto LABEL_1213;
              }
            }
          }
        }
        else
        {
          v35 = v19[-3 * v9];
          if (v33 <= v35)
          {
            if (v34 < v35)
            {
              v50 = v19[v15];
              if (v33 > v50)
              {
                v51 = v19[v13];
                if (v33 <= v51)
                {
                  v119 = *v27;
                  v121 = v33 <= v119 && v34 < v119;
                  if (v34 < v51)
                  {
                    if (!v121)
                      goto LABEL_1733;
                    v122 = *v22;
                    if (v33 > v122)
                      goto LABEL_1733;
                    if (v34 >= v122)
                      goto LABEL_1733;
                    v123 = *v23;
                    if (v33 > v123)
                      goto LABEL_1733;
                    if (v34 >= v123)
                      goto LABEL_1733;
                    v124 = v19[v10];
                    if (v33 > v124)
                      goto LABEL_1733;
                    if (v34 >= v124)
                      goto LABEL_1733;
                    v125 = *(v19 - 3);
                    if (v33 > v125)
                      goto LABEL_1733;
                    if (v34 >= v125)
                      goto LABEL_1733;
                    v126 = *v21;
                    if (v33 > v126)
                      goto LABEL_1733;
LABEL_209:
                    if (v34 >= v126)
                      goto LABEL_1733;
                    v127 = *v26;
                    if (v33 > v127 || v34 >= v127)
                      goto LABEL_1733;
                    v128 = *v25;
                    goto LABEL_1128;
                  }
                  if (!v121)
                    goto LABEL_1733;
                  v190 = *v22;
                  if (v33 > v190)
                    goto LABEL_1733;
                  if (v34 >= v190)
                    goto LABEL_1733;
                  v191 = *(v19 - 3);
                  if (v33 > v191)
                    goto LABEL_1733;
                  if (v34 >= v191)
                    goto LABEL_1733;
                  v192 = v19[v10];
                  if (v33 > v192)
                    goto LABEL_1733;
                  if (v34 >= v192)
                    goto LABEL_1733;
                  v193 = *v23;
                  if (v33 > v193)
                    goto LABEL_1733;
                  if (v34 >= v193)
                    goto LABEL_1733;
                  v194 = *v21;
                  if (v33 > v194)
                    goto LABEL_1733;
                }
                else
                {
                  v52 = v19[v14];
                  if (v33 > v52)
                  {
                    v53 = *(v19 - 3);
                    if (v33 > v53)
                    {
                      if (v33 <= v19[v12])
                      {
                        if (v33 <= *v26)
                          goto LABEL_1733;
                        v266 = *v23;
                      }
                      else
                      {
                        v54 = v19[v11];
                        if (v33 > v54)
                        {
                          if (v33 <= v19[3 * v9])
                            goto LABEL_1733;
                          if (v33 > *v22)
                            continue;
                          v55 = v19[v10];
                          goto LABEL_831;
                        }
                        v266 = *v23;
                        if (v34 < v54)
                        {
                          if (v33 <= v266 || v33 <= *v22 || v33 <= *v21)
                            goto LABEL_1733;
                          v92 = v19[3 * v9];
                          goto LABEL_1018;
                        }
                      }
                      if (v33 <= v266 || v33 <= *v21)
                        goto LABEL_1733;
                      v337 = *v22;
                      goto LABEL_1136;
                    }
                    if (v34 >= v53)
                    {
                      if (v33 <= *v27 || v33 <= v19[v12])
                        goto LABEL_1733;
                      if (v33 <= *v22)
                      {
                        v217 = v19[v10];
                        goto LABEL_1134;
                      }
                      goto LABEL_1135;
                    }
                    v216 = v19[v10];
                    if (v33 > v216)
                    {
                      v89 = v19[v12];
LABEL_443:
                      if (v33 <= v89)
                        goto LABEL_1733;
                      v217 = *v27;
LABEL_1134:
                      if (v33 <= v217)
                        goto LABEL_1733;
LABEL_1135:
                      v337 = v19[v11];
LABEL_1136:
                      if (v33 <= v337)
                        goto LABEL_1733;
                      v178 = v19[3 * v9];
LABEL_1138:
                      if (v33 > v178)
                        continue;
                      goto LABEL_1733;
                    }
                    v351 = *v22;
                    if (v34 >= v216)
                    {
                      if (v33 <= v351)
                        goto LABEL_1733;
LABEL_1132:
                      if (v33 <= *v27)
                        goto LABEL_1733;
                      v217 = v19[v12];
                      goto LABEL_1134;
                    }
                    if (v33 > v351)
                      goto LABEL_1132;
                    if (v34 >= v351)
                      goto LABEL_1733;
                    v352 = *v27;
                    if (v33 > v352)
                      goto LABEL_1733;
                    if (v34 >= v352)
                      goto LABEL_1733;
                    v353 = *v23;
                    if (v33 > v353)
                      goto LABEL_1733;
                    if (v34 >= v353)
                      goto LABEL_1733;
                    v126 = *v21;
                    if (v33 > v126)
                      goto LABEL_1733;
                    goto LABEL_209;
                  }
                  v157 = *v27;
                  v159 = v33 <= v157 && v34 < v157;
                  if (v34 < v52)
                  {
                    if (!v159)
                      goto LABEL_1733;
                    v160 = *v22;
                    if (v33 > v160)
                      goto LABEL_1733;
                    if (v34 >= v160)
                      goto LABEL_1733;
                    v161 = *(v19 - 3);
                    if (v33 > v161)
                      goto LABEL_1733;
                    if (v34 >= v161)
                      goto LABEL_1733;
                    v162 = v19[v10];
                    if (v33 > v162)
                      goto LABEL_1733;
                    if (v34 >= v162)
                      goto LABEL_1733;
                    v163 = *v23;
                    if (v33 > v163)
                      goto LABEL_1733;
                    if (v34 >= v163)
                      goto LABEL_1733;
                    v164 = *v25;
                    if (v33 > v164 || v34 >= v164)
                      goto LABEL_1733;
                    v165 = *v21;
                    goto LABEL_1125;
                  }
                  if (!v159)
                    goto LABEL_1733;
                  v247 = *v22;
                  if (v33 > v247)
                    goto LABEL_1733;
                  if (v34 >= v247)
                    goto LABEL_1733;
                  v248 = *(v19 - 3);
                  if (v33 > v248)
                    goto LABEL_1733;
                  if (v34 >= v248)
                    goto LABEL_1733;
                  v249 = v19[v10];
                  if (v33 > v249)
                    goto LABEL_1733;
                  if (v34 >= v249)
                    goto LABEL_1733;
                  v250 = *v23;
                  if (v33 > v250)
                    goto LABEL_1733;
                  if (v34 >= v250)
                    goto LABEL_1733;
                  v194 = *v21;
                  if (v33 > v194)
                    goto LABEL_1733;
                }
                if (v34 >= v194)
                  goto LABEL_1733;
                v165 = *v25;
                goto LABEL_1125;
              }
              if (v34 < v50)
              {
                v88 = *v21;
                if (v33 > v88)
                {
                  if (v33 <= *v25 || v33 <= v19[v14] || v33 <= v19[v12] || v33 <= v19[v10])
                    goto LABEL_1733;
                  v89 = v19[v13];
                  goto LABEL_443;
                }
                if (v34 >= v88)
                {
                  if (v33 <= *v25 || v33 <= v19[v14])
                    goto LABEL_1733;
LABEL_578:
                  if (v33 <= v19[v12] || v33 <= v19[v10])
                    goto LABEL_1733;
                  v223 = v19[v13];
LABEL_581:
                  if (v33 <= v223 || v33 <= v19[v11])
                    goto LABEL_1733;
                  v254 = *v27;
LABEL_737:
                  if (v33 <= v254)
                    goto LABEL_1733;
                  v75 = v19[3 * v9];
LABEL_739:
                  if (v33 <= v75)
                    goto LABEL_1733;
                  continue;
                }
                v175 = v19[3 * v9];
                if (v33 > v175)
                {
                  v176 = v19[v10];
                  if (v33 > v176)
                  {
                    v177 = *v25;
                    if (v33 > v177)
                    {
                      if (v33 <= v19[v14] || v33 <= v19[v12] || v33 <= v19[v11] || v33 <= *v27)
                        goto LABEL_1733;
                      v178 = v19[v13];
                      goto LABEL_1138;
                    }
                    if (v34 >= v177)
                      goto LABEL_1733;
                    v402 = v19[v14];
                    if (v33 > v402)
                      goto LABEL_1733;
                    if (v34 >= v402)
                      goto LABEL_1733;
                    v403 = *v23;
                    if (v33 > v403)
                      goto LABEL_1733;
                    if (v34 >= v403)
                      goto LABEL_1733;
                    v404 = *v22;
                    if (v33 > v404)
                      goto LABEL_1733;
                    if (v34 >= v404)
                      goto LABEL_1733;
                    v405 = *v26;
                    if (v33 > v405 || v34 >= v405)
                      goto LABEL_1733;
                    v128 = *(v19 - 3);
                    goto LABEL_1128;
                  }
                  if (v34 >= v176)
                  {
                    v429 = v19[v14];
                    if (v33 > v429)
                      goto LABEL_1733;
                    if (v34 >= v429)
                      goto LABEL_1733;
                    v430 = *v25;
                    if (v33 > v430)
                      goto LABEL_1733;
                    if (v34 >= v430)
                      goto LABEL_1733;
                    v431 = *v23;
                    if (v33 > v431)
                      goto LABEL_1733;
                    if (v34 >= v431)
                      goto LABEL_1733;
                    v350 = *v22;
                    if (v33 > v350)
                      goto LABEL_1733;
                  }
                  else
                  {
                    v348 = *v22;
                    if (v33 > v348)
                      goto LABEL_1733;
                    if (v34 >= v348)
                      goto LABEL_1733;
                    v349 = *v23;
                    if (v33 > v349)
                      goto LABEL_1733;
                    if (v34 >= v349)
                      goto LABEL_1733;
                    v350 = *v25;
                    if (v33 > v350)
                      goto LABEL_1733;
                  }
                  if (v34 >= v350)
                    goto LABEL_1733;
                  v165 = *(v19 - 3);
LABEL_1125:
                  if (v33 > v165 || v34 >= v165)
                    goto LABEL_1733;
                  v128 = *v26;
LABEL_1128:
                  if (v33 > v128 || v34 >= v128)
                    goto LABEL_1733;
                  continue;
                }
                if (v34 >= v175)
                {
                  v387 = *v25;
                  if (v33 > v387)
                    goto LABEL_1733;
                  if (v34 >= v387)
                    goto LABEL_1733;
                  v388 = *(v19 - 3);
                  if (v33 > v388)
                    goto LABEL_1733;
                  if (v34 >= v388)
                    goto LABEL_1733;
                  v389 = *v23;
                  if (v33 > v389 || v34 >= v389)
                    goto LABEL_1733;
                  v390 = v19[v14];
                  if (v33 > v390 || v34 >= v390)
                  {
                    v391 = v19[v10];
                    if (v33 > v391 || v34 >= v391)
                      goto LABEL_1733;
                  }
                  v213 = *v22;
                  goto LABEL_1534;
                }
                v295 = *(v19 - 3);
                if (v33 > v295 || v34 >= v295)
                  goto LABEL_1733;
                v296 = *v23;
                if (v33 > v296)
                {
                  v297 = v19[v11];
                  if (v33 > v297)
                    goto LABEL_1733;
                  if (v34 >= v297)
                    goto LABEL_1733;
                  v298 = v19[v12];
                  if (v33 > v298)
                    goto LABEL_1733;
                  if (v34 >= v298)
                    goto LABEL_1733;
                  v299 = v19[v13];
                  if (v33 > v299 || v34 >= v299)
                    goto LABEL_1733;
                  v300 = *v22;
                  goto LABEL_1400;
                }
                if (v34 >= v296)
                {
                  v514 = v19[v11];
                  if (v33 > v514)
                    goto LABEL_1733;
                  if (v34 >= v514)
                    goto LABEL_1733;
                  v515 = v19[v12];
                  if (v33 > v515)
                    goto LABEL_1733;
                  if (v34 >= v515)
                    goto LABEL_1733;
                  v516 = *v22;
                  if (v33 > v516 || v34 >= v516)
                    goto LABEL_1733;
                  v300 = v19[v13];
LABEL_1400:
                  if (v33 > v300 || v34 >= v300)
                    goto LABEL_1733;
                  v105 = v19[v14];
                }
                else
                {
                  v455 = *v22;
                  if (v33 > v455 || v34 >= v455)
                    goto LABEL_1733;
                  v456 = v19[v14];
                  if (v33 <= v456 && v34 < v456)
                  {
                    v457 = *v26;
                    if (v33 <= v457 && v34 < v457)
                      continue;
                    v458 = v19[v12];
                    if (v33 > v458 || v34 >= v458)
                      goto LABEL_1733;
                    v105 = v19[v13];
                    goto LABEL_1537;
                  }
                  v553 = v19[v10];
                  if (v33 > v553 || v34 >= v553)
                    goto LABEL_1733;
                  v213 = *v25;
LABEL_1534:
                  if (v33 > v213 || v34 >= v213)
                    goto LABEL_1733;
                  v105 = *v26;
                }
LABEL_1537:
                if (v33 > v105 || v34 >= v105)
                  goto LABEL_1733;
                continue;
              }
              v142 = *v25;
              if (v33 > v142)
              {
                if (v33 <= v19[v14])
                  goto LABEL_1733;
                goto LABEL_578;
              }
              if (v34 >= v142)
                goto LABEL_1733;
              v208 = *v27;
              if (v33 > v208)
                goto LABEL_1733;
              if (v34 >= v208)
                goto LABEL_1733;
              v209 = *v22;
              if (v33 > v209)
                goto LABEL_1733;
              if (v34 >= v209)
                goto LABEL_1733;
              v210 = *(v19 - 3);
              if (v33 > v210)
                goto LABEL_1733;
              if (v34 >= v210)
                goto LABEL_1733;
              v211 = v19[v10];
              if (v33 > v211)
                goto LABEL_1733;
              if (v34 >= v211)
                goto LABEL_1733;
              v212 = *v23;
              if (v33 > v212 || v34 >= v212)
                goto LABEL_1733;
              v213 = *v21;
              goto LABEL_1534;
            }
            v72 = v19[v14];
            if (v33 > v72)
            {
              if (v33 <= v19[v13])
                goto LABEL_1733;
              v73 = v19[v12];
              if (v33 <= v73)
              {
                v172 = *v26;
                if (v34 >= v73)
                {
                  if (v33 <= v172 || v33 <= *v23 || v33 <= *v22)
                    goto LABEL_1733;
                  v173 = *v21;
                }
                else
                {
                  if (v33 <= v172 || v33 <= *v21 || v33 <= *v22)
                    goto LABEL_1733;
                  v173 = *v23;
                }
                if (v33 <= v173 || v33 <= v19[v15])
                  goto LABEL_1733;
                v254 = *(v19 - 3);
                goto LABEL_737;
              }
              v74 = v19[v15];
              if (v33 <= v74)
              {
                v222 = *v25;
                if (v34 < v74)
                {
                  if (v33 <= v222)
                    goto LABEL_1733;
                  v223 = v19[v10];
                  goto LABEL_581;
                }
                if (v33 <= v222)
                  goto LABEL_1733;
                v269 = v19[v10];
              }
              else
              {
                if (v33 > *v22)
                {
                  if (v33 <= v19[3 * v9])
                    goto LABEL_1733;
                  if (v33 <= v19[v11])
                  {
                    if (v33 <= *v23 || v33 <= *v21)
                      goto LABEL_1733;
                    v75 = *(v19 - 3);
                  }
                  else
                  {
                    if (v33 > *(v19 - 3))
                      continue;
                    v75 = *v27;
                  }
                  goto LABEL_739;
                }
                v269 = v19[v10];
              }
              if (v33 <= v269 || v33 <= *v27)
                goto LABEL_1733;
              v254 = v19[v11];
              goto LABEL_737;
            }
            if (v34 >= v72)
              goto LABEL_1733;
            v97 = v19[v13];
            if (v33 > v97)
              goto LABEL_1733;
            if (v34 >= v97)
              goto LABEL_1733;
            v98 = *v21;
            if (v33 > v98)
              goto LABEL_1733;
            if (v34 >= v98)
              goto LABEL_1733;
            v99 = *(v19 - 3);
            if (v33 > v99 || v34 >= v99)
              goto LABEL_1733;
            v100 = *v23;
            if (v33 > v100)
            {
              v101 = v19[v11];
              if (v33 > v101)
                goto LABEL_1733;
              if (v34 >= v101)
                goto LABEL_1733;
              v102 = v19[v12];
              if (v33 > v102)
                goto LABEL_1733;
              if (v34 >= v102)
                goto LABEL_1733;
              v103 = v19[v15];
              if (v33 > v103)
                goto LABEL_1733;
              if (v34 >= v103)
                goto LABEL_1733;
              v104 = *v22;
              if (v33 > v104 || v34 >= v104)
                goto LABEL_1733;
              v105 = v19[3 * v9];
              goto LABEL_1537;
            }
            if (v34 >= v100)
            {
              v426 = v19[v11];
              if (v33 > v426)
                goto LABEL_1733;
              if (v34 >= v426)
                goto LABEL_1733;
              v427 = v19[v12];
              if (v33 > v427)
                goto LABEL_1733;
              if (v34 >= v427)
                goto LABEL_1733;
              v428 = v19[v15];
              if (v33 > v428 || v34 >= v428)
                goto LABEL_1733;
              v118 = *v22;
              goto LABEL_1326;
            }
            v340 = v19[v15];
            if (v33 > v340)
              goto LABEL_1733;
            if (v34 >= v340)
              goto LABEL_1733;
            v341 = v19[3 * v9];
            if (v33 > v341 || v34 >= v341)
              goto LABEL_1733;
            v342 = *v26;
            if (v33 > v342 || v34 >= v342)
            {
              v343 = v19[v12];
              if (v33 > v343 || v34 >= v343)
                goto LABEL_1733;
            }
            v189 = *v22;
            goto LABEL_1329;
          }
          v36 = v19[3 * v9];
          if (v33 <= v36)
          {
            if (v34 >= v36)
            {
              if (v33 <= *v26)
                goto LABEL_1733;
              v90 = v19[v10];
              if (v33 <= v90)
              {
                v179 = v19[v14];
                if (v34 >= v90)
                {
                  if (v33 <= v179 || v33 <= v19[v15] || v33 <= *v21 || v33 <= *v25)
                    goto LABEL_1733;
                  v180 = *v22;
                }
                else
                {
                  if (v33 <= v179 || v33 <= *v25 || v33 <= *v22 || v33 <= *v21)
                    goto LABEL_1733;
                  v180 = v19[v15];
                }
                if (v33 <= v180)
                {
LABEL_1733:
                  v28 = v18;
                  v18 = v29;
                  continue;
                }
                v251 = *v23;
              }
              else
              {
                v91 = *v23;
                if (v33 <= v91)
                {
                  v229 = v19[v13];
                  if (v34 >= v91)
                  {
                    if (v33 <= v229 || v33 <= v19[v12] || v33 <= v19[v11])
                      goto LABEL_1733;
                    v55 = *v25;
                    goto LABEL_831;
                  }
                  if (v33 <= v229 || v33 <= v19[v12] || v33 <= v19[v11])
                    goto LABEL_1733;
                  v131 = *v27;
                  goto LABEL_481;
                }
                if (v33 <= *v25)
                  goto LABEL_1733;
                if (v33 <= *v21)
                {
                  v196 = v19[v12];
                  goto LABEL_829;
                }
                if (v33 > *v27)
                {
                  if (v33 > *(v19 - 3))
                    continue;
                  v92 = v19[v11];
                  goto LABEL_1018;
                }
                if (v33 <= v19[v15])
                  goto LABEL_1733;
                v251 = *v22;
              }
LABEL_1016:
              if (v33 <= v251)
                goto LABEL_1733;
              v92 = *(v19 - 3);
              goto LABEL_1018;
            }
            v64 = *v23;
            if (v33 <= v64)
            {
              if (v34 >= v64)
              {
                v195 = v19[v13];
                if (v33 > v195)
                {
                  if (v33 <= *v26 || v33 <= v19[v12] || v33 <= v19[v10])
                    goto LABEL_1733;
                  v196 = *v25;
LABEL_829:
                  if (v33 <= v196)
                    goto LABEL_1733;
                  v55 = v19[v11];
LABEL_831:
                  if (v33 <= v55)
                    goto LABEL_1733;
                  v92 = *v27;
LABEL_1018:
                  if (v33 > v92)
                    continue;
                  goto LABEL_1733;
                }
                if (v34 >= v195)
                  goto LABEL_1733;
                v255 = v19[v11];
                if (v33 > v255)
                  goto LABEL_1733;
                if (v34 >= v255)
                  goto LABEL_1733;
                v256 = *v21;
                if (v33 > v256)
                  goto LABEL_1733;
                if (v34 >= v256)
                  goto LABEL_1733;
                v257 = *(v19 - 3);
                if (v33 > v257)
                  goto LABEL_1733;
                if (v34 >= v257)
                  goto LABEL_1733;
                v258 = v19[v12];
                if (v33 > v258)
                  goto LABEL_1733;
                if (v34 >= v258)
                  goto LABEL_1733;
                v259 = v19[v15];
                if (v33 > v259 || v34 >= v259)
                  goto LABEL_1733;
              }
              else
              {
                v129 = v19[v12];
                if (v33 > v129)
                {
                  v130 = v19[v13];
                  if (v33 > v130)
                  {
                    if (v33 <= *v26 || v33 <= v19[v10] || v33 <= *v27)
                      goto LABEL_1733;
                    v131 = v19[v11];
LABEL_481:
                    if (v33 <= v131)
                      goto LABEL_1733;
                    v92 = *v25;
                    goto LABEL_1018;
                  }
                  if (v34 >= v130)
                    goto LABEL_1733;
                  v270 = *v26;
                  if (v33 > v270)
                    goto LABEL_1733;
                  if (v34 >= v270)
                    goto LABEL_1733;
                  v271 = *v22;
                  if (v33 > v271)
                    goto LABEL_1733;
                  if (v34 >= v271)
                    goto LABEL_1733;
                  v272 = v19[v15];
                  if (v33 > v272)
                    goto LABEL_1733;
                  if (v34 >= v272)
                    goto LABEL_1733;
                  v273 = *v21;
                  if (v33 > v273)
                    goto LABEL_1733;
                  if (v34 >= v273)
                    goto LABEL_1733;
                  v274 = v19[v14];
                  if (v33 > v274)
                    goto LABEL_1733;
LABEL_769:
                  if (v34 >= v274)
                    goto LABEL_1733;
                  v261 = *(v19 - 3);
LABEL_794:
                  if (v33 > v261 || v34 >= v261)
                    goto LABEL_1733;
                  continue;
                }
                if (v34 >= v129)
                {
                  v316 = *v26;
                  if (v33 > v316)
                    goto LABEL_1733;
                  if (v34 >= v316)
                    goto LABEL_1733;
                  v317 = v19[v13];
                  if (v33 > v317)
                    goto LABEL_1733;
                  if (v34 >= v317)
                    goto LABEL_1733;
                  v318 = *v22;
                  if (v33 > v318)
                    goto LABEL_1733;
                  if (v34 >= v318)
                    goto LABEL_1733;
                  v319 = v19[v15];
                  if (v33 > v319)
                    goto LABEL_1733;
                  if (v34 >= v319)
                    goto LABEL_1733;
                  v320 = *v21;
                  if (v33 > v320)
                    goto LABEL_1733;
                  if (v34 >= v320)
                    goto LABEL_1733;
                  v274 = v19[v14];
                  if (v33 > v274)
                    goto LABEL_1733;
                  goto LABEL_769;
                }
                v230 = *(v19 - 3);
                if (v33 > v230)
                  goto LABEL_1733;
                if (v34 >= v230)
                  goto LABEL_1733;
                v231 = v19[v15];
                if (v33 > v231)
                  goto LABEL_1733;
                if (v34 >= v231)
                  goto LABEL_1733;
                v232 = *v21;
                if (v33 > v232)
                  goto LABEL_1733;
                if (v34 >= v232)
                  goto LABEL_1733;
                v233 = v19[v13];
                if (v33 > v233 || v34 >= v233)
                  goto LABEL_1733;
              }
              v260 = *v22;
              if (v33 > v260 || v34 >= v260)
                goto LABEL_1733;
              v261 = v19[v14];
              goto LABEL_794;
            }
            v65 = v19[v10];
            if (v33 <= v65)
            {
              v168 = v19[v14];
              if (v34 >= v65)
              {
                if (v33 > v168)
                {
                  if (v33 <= *v25 || v33 <= *v22 || v33 <= v19[v15] || v33 <= *v21)
                    goto LABEL_1733;
                  v251 = *v26;
                  goto LABEL_1016;
                }
                if (v34 >= v168)
                  goto LABEL_1733;
                v326 = *v21;
                if (v33 > v326)
                  goto LABEL_1733;
                if (v34 >= v326)
                  goto LABEL_1733;
                v327 = v19[v11];
                if (v33 > v327)
                  goto LABEL_1733;
                if (v34 >= v327)
                  goto LABEL_1733;
                v328 = *(v19 - 3);
                if (v33 > v328)
                  goto LABEL_1733;
                if (v34 >= v328)
                  goto LABEL_1733;
                v329 = v19[v12];
                if (v33 > v329)
                  goto LABEL_1733;
                if (v34 >= v329)
                  goto LABEL_1733;
                v330 = v19[v15];
                if (v33 > v330)
                  goto LABEL_1733;
                if (v34 >= v330)
                  goto LABEL_1733;
                v287 = *v22;
                if (v33 > v287)
                  goto LABEL_1733;
              }
              else
              {
                if (v33 > v168)
                {
                  if (v33 <= *v25 || v33 <= *v22 || v33 <= *v21 || v33 <= v19[v15])
                    goto LABEL_1733;
                  v109 = *(v19 - 3);
                  goto LABEL_1441;
                }
                if (v34 >= v168)
                  goto LABEL_1733;
                v282 = v19[v11];
                if (v33 > v282)
                  goto LABEL_1733;
                if (v34 >= v282)
                  goto LABEL_1733;
                v283 = *v21;
                if (v33 > v283)
                  goto LABEL_1733;
                if (v34 >= v283)
                  goto LABEL_1733;
                v284 = *(v19 - 3);
                if (v33 > v284)
                  goto LABEL_1733;
                if (v34 >= v284)
                  goto LABEL_1733;
                v285 = v19[v15];
                if (v33 > v285)
                  goto LABEL_1733;
                if (v34 >= v285)
                  goto LABEL_1733;
                v286 = v19[v12];
                if (v33 > v286)
                  goto LABEL_1733;
                if (v34 >= v286)
                  goto LABEL_1733;
                v287 = *v22;
                if (v33 > v287)
                  goto LABEL_1733;
              }
              if (v34 >= v287)
                goto LABEL_1733;
              v261 = v19[v13];
              goto LABEL_794;
            }
            v66 = *(v19 - 3);
            if (v33 > v66)
            {
              if (v33 <= *v25 || v33 <= *v26)
                goto LABEL_1733;
              if (v33 <= *v21)
              {
                if (v33 <= v19[v12])
                  goto LABEL_1733;
                v399 = v19[v11];
                goto LABEL_1098;
              }
              if (v33 > *v27)
                continue;
              if (v33 <= v19[v15])
                goto LABEL_1733;
              v67 = *v22;
LABEL_1443:
              if (v33 > v67)
                continue;
              goto LABEL_1733;
            }
            if (v34 >= v66)
            {
              if (v33 <= v19[v11])
                goto LABEL_1733;
              v308 = *v21;
              if (v33 > v308)
              {
                if (v33 <= *v27)
                  goto LABEL_1733;
                v139 = *v26;
                goto LABEL_813;
              }
              v220 = v19[v12];
              if (v34 >= v308)
                goto LABEL_1095;
              if (v33 <= v220)
                goto LABEL_1733;
              v275 = *v26;
LABEL_811:
              if (v33 <= v275)
                goto LABEL_1733;
              v139 = *v27;
LABEL_813:
              if (v33 <= v139)
                goto LABEL_1733;
              v67 = *v25;
              goto LABEL_1443;
            }
            v219 = v19[v12];
            if (v33 > v219)
            {
              v220 = v19[v11];
LABEL_1095:
              if (v33 <= v220 || v33 <= *v26)
                goto LABEL_1733;
              v399 = *v25;
LABEL_1098:
              if (v33 <= v399)
                goto LABEL_1733;
              v67 = *v27;
              goto LABEL_1443;
            }
            v354 = *v21;
            if (v34 >= v219)
            {
              if (v33 <= v354 || v33 <= v19[v11] || v33 <= *v27)
                goto LABEL_1733;
              v109 = *v25;
              goto LABEL_1441;
            }
            if (v33 > v354)
            {
              if (v33 <= v19[v11] || v33 <= *v25)
                goto LABEL_1733;
              v109 = *v27;
              goto LABEL_1441;
            }
            if (v34 >= v354)
              goto LABEL_1733;
            v459 = v19[v11];
            if (v33 > v459)
              goto LABEL_1733;
            if (v34 >= v459)
              goto LABEL_1733;
            v460 = v19[v15];
            if (v33 > v460)
              goto LABEL_1733;
            if (v34 >= v460)
              goto LABEL_1733;
            v461 = *v22;
            if (v33 > v461)
              goto LABEL_1733;
            if (v34 >= v461)
              goto LABEL_1733;
            v462 = v19[v14];
            if (v33 > v462)
              goto LABEL_1733;
            if (v34 >= v462)
              goto LABEL_1733;
            v463 = v19[v13];
            if (v33 > v463 || v34 >= v463)
              goto LABEL_1733;
          }
          else
          {
            v37 = v19[v12];
            if (v33 <= v37)
            {
              if (v34 >= v37)
              {
                if (v33 <= *v23 || v33 <= *v21 || v33 <= *v26)
                  goto LABEL_1733;
                if (v33 > *(v19 - 3))
                {
                  if (v33 > v19[v15] && v33 > *v22)
                  {
                    if (v33 > v19[v14])
                      continue;
                    goto LABEL_240;
                  }
LABEL_810:
                  v275 = v19[v10];
                  goto LABEL_811;
                }
              }
              else
              {
                if (v33 <= *v21 || v33 <= *v23 || v33 <= *v26)
                  goto LABEL_1733;
                if (v33 > *(v19 - 3))
                {
                  if (v33 > v19[v15] && v33 > *v22)
                  {
                    if (v33 > v19[v14])
                      continue;
LABEL_240:
                    v139 = v19[v10];
                    goto LABEL_813;
                  }
                  goto LABEL_810;
                }
              }
              if (v33 <= v19[v11])
                goto LABEL_1733;
              v275 = v19[v10];
              goto LABEL_811;
            }
            v38 = v19[v10];
            if (v33 <= v38)
            {
              v106 = *v22;
              if (v34 >= v38)
              {
                if (v33 <= v106 || v33 <= v19[v15] || v33 <= v19[v14])
                  goto LABEL_1733;
                if (v33 <= *(v19 - 3))
                {
                  v400 = *v27;
                  goto LABEL_1039;
                }
                if (v33 > v19[v11])
                {
                  v181 = v19[v13];
                  if (v33 > v181)
                    continue;
                  v182 = *v23;
                  if (v34 >= v181)
                  {
                    if (v33 <= v182 || v33 <= *v26)
                      goto LABEL_1733;
                    v67 = *v21;
                    goto LABEL_1443;
                  }
                  goto LABEL_1439;
                }
LABEL_1042:
                if (v33 <= *v23 || v33 <= *v21)
                  goto LABEL_1733;
                if (v33 > *v26)
                  continue;
              }
              else
              {
                if (v33 <= v106 || v33 <= v19[v15] || v33 <= v19[v14])
                  goto LABEL_1733;
                v107 = *(v19 - 3);
                if (v33 > v107)
                {
                  if (v33 > v19[v11])
                  {
                    v108 = v19[v13];
                    if (v33 > v108)
                      continue;
                    if (v34 < v108)
                    {
                      if (v33 <= *v21)
                        goto LABEL_1733;
                      v109 = *v23;
                      goto LABEL_1441;
                    }
                    v182 = *v23;
LABEL_1439:
                    if (v33 <= v182)
                      goto LABEL_1733;
                    v109 = *v21;
LABEL_1441:
                    if (v33 <= v109)
                      goto LABEL_1733;
                    v67 = *v26;
                    goto LABEL_1443;
                  }
                  goto LABEL_1042;
                }
                v400 = *v27;
                if (v34 < v107)
                {
                  if (v33 <= v400 || v33 <= v19[v13])
                    goto LABEL_1733;
                  v67 = v19[v11];
                  goto LABEL_1443;
                }
LABEL_1039:
                if (v33 <= v400 || v33 <= v19[v11])
                  goto LABEL_1733;
              }
              v67 = v19[v13];
              goto LABEL_1443;
            }
            v39 = v19[v11];
            if (v33 > v39)
            {
              v40 = *v27;
              if (v33 > v40)
              {
                v41 = *v25;
                if (v33 <= v41)
                {
                  v262 = v19[v15];
                  if (v34 < v41)
                  {
                    if (v33 <= v262 || v33 <= v19[v14])
                      goto LABEL_1733;
                    v263 = v19[v13];
                    if (v33 > v263)
                      continue;
                    v264 = *v21;
                    if (v34 >= v263)
                    {
                      if (v33 <= v264 || v33 <= *(v19 - 3))
                        goto LABEL_1733;
                      v154 = *v23;
                      goto LABEL_1451;
                    }
                    if (v33 <= v264 || v33 <= *v22 || v33 <= *v23)
                      goto LABEL_1733;
                    v43 = *(v19 - 3);
                    goto LABEL_19;
                  }
                  if (v33 <= v262 || v33 <= v19[v14])
                    goto LABEL_1733;
                  v375 = v19[v13];
                  if (v33 > v375)
                    continue;
                  v376 = *v21;
                  if (v34 >= v375)
                  {
                    if (v33 <= v376 || v33 <= *v23)
                      goto LABEL_1733;
                    v42 = *v22;
                  }
                  else
                  {
                    if (v33 <= v376 || v33 <= *v23)
                      goto LABEL_1733;
                    v42 = *(v19 - 3);
                  }
                }
                else
                {
                  if (v33 > v19[v13])
                    continue;
                  v42 = *v23;
                }
LABEL_17:
                if (v33 <= v42)
                  goto LABEL_1733;
                v43 = *v26;
                goto LABEL_19;
              }
              if (v34 >= v40)
              {
                if (v33 <= *v22 || v33 <= v19[v15] || v33 <= *(v19 - 3))
                  goto LABEL_1733;
                v306 = v19[v14];
                if (v33 > v306)
                {
                  v307 = v19[v13];
                  if (v33 > v307)
                    continue;
                  v215 = *v23;
                  if (v34 < v307)
                  {
                    if (v33 <= v215 || v33 <= *v26)
                      goto LABEL_1733;
                    v43 = *v21;
                    goto LABEL_19;
                  }
LABEL_1453:
                  if (v33 <= v215)
                    goto LABEL_1733;
                  v42 = *v21;
                  goto LABEL_17;
                }
                v492 = *v21;
                if (v34 < v306)
                {
                  if (v33 <= v492 || v33 <= *v23 || v33 <= *v26)
                    goto LABEL_1733;
                  goto LABEL_1509;
                }
              }
              else
              {
                if (v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= *v22)
                  goto LABEL_1733;
                if (v33 > v19[v14])
                {
                  v214 = v19[v13];
                  if (v33 > v214)
                    continue;
                  if (v34 >= v214)
                  {
                    if (v33 <= *v21 || v33 <= *v26)
                      goto LABEL_1733;
                    v43 = *v23;
                    goto LABEL_19;
                  }
                  v215 = *v23;
                  goto LABEL_1453;
                }
                v492 = *v21;
              }
              if (v33 <= v492 || v33 <= *v23)
                goto LABEL_1733;
              v42 = *v25;
              goto LABEL_17;
            }
            if (v34 >= v39)
            {
              if (v33 <= *v21 || v33 <= *v23 || v33 <= *(v19 - 3))
                goto LABEL_1733;
              v244 = *v26;
              if (v33 <= v244)
              {
                if (v34 < v244)
                {
                  if (v33 <= v19[v15] || v33 <= *v22 || v33 <= v19[v14])
                    goto LABEL_1733;
                  v43 = v19[v13];
                  goto LABEL_19;
                }
                if (v33 <= *v22 || v33 <= v19[v15])
                  goto LABEL_1733;
                v510 = v19[v13];
                goto LABEL_1566;
              }
              v245 = *v27;
              if (v33 > v245)
              {
                v246 = *v25;
                if (v33 > v246)
                  continue;
                if (v34 < v246)
                {
                  if (v33 <= v19[v15])
                    goto LABEL_1733;
                  v154 = v19[v14];
                  goto LABEL_1451;
                }
                goto LABEL_1445;
              }
              v493 = v19[v15];
              if (v34 >= v245)
              {
                if (v33 <= v493 || v33 <= *v22)
                  goto LABEL_1733;
                if (v33 > v19[v14])
                  continue;
              }
              else
              {
                if (v33 <= v493 || v33 <= *v22)
                  goto LABEL_1733;
                if (v33 > v19[v14])
                  continue;
              }
              goto LABEL_1509;
            }
            if (v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= *v21)
              goto LABEL_1733;
            v152 = *v27;
            if (v33 > v152)
            {
              if (v33 <= *v25)
              {
                v491 = *v22;
              }
              else
              {
                v153 = *v26;
                if (v33 > v153)
                  continue;
                if (v34 < v153)
                {
                  if (v33 <= v19[v15])
                    goto LABEL_1733;
                  v154 = v19[v13];
LABEL_1451:
                  if (v33 <= v154)
                    goto LABEL_1733;
                  v43 = *v22;
LABEL_19:
                  if (v33 > v43)
                    continue;
                  goto LABEL_1733;
                }
LABEL_1445:
                v491 = *v22;
              }
              if (v33 <= v491)
                goto LABEL_1733;
              v510 = v19[v15];
LABEL_1566:
              if (v33 <= v510)
                goto LABEL_1733;
LABEL_1567:
              v43 = v19[v14];
              goto LABEL_19;
            }
            v449 = v19[v15];
            if (v34 >= v152)
            {
              if (v33 <= v449 || v33 <= *v22)
                goto LABEL_1733;
              if (v33 <= *v26)
              {
LABEL_1565:
                v510 = v19[v13];
                goto LABEL_1566;
              }
              if (v33 > v19[v14])
                continue;
LABEL_1509:
              v43 = *v25;
              goto LABEL_19;
            }
            if (v33 <= v449 || v33 <= *v22)
              goto LABEL_1733;
            if (v33 <= *v26)
              goto LABEL_1565;
            v450 = *v25;
            if (v33 <= v450 && v34 >= v450)
              goto LABEL_1567;
          }
        }
      }
      while (v28 - (int)v18 > 1);
      *(_DWORD *)(v17 + 4 * v8++) = v18;
    }
    while (v16 != v8);
  }
}

int *sub_1D4DA15AC(unsigned int a1, unsigned int a2)
{
  int *v4;
  int *v5;
  signed int v6;
  unsigned int v7;
  __CLPK_integer *__iwork;
  float *v9;
  int v10;
  __CLPK_integer v12;
  __CLPK_integer __n;
  __CLPK_integer __lda;

  __n = a2;
  __lda = a1;
  v4 = (int *)malloc_type_malloc(0x50uLL, 0xFE76FDC7uLL);
  v5 = v4;
  *v4 = a1;
  v4[1] = a2;
  if (a1 >= a2)
    v6 = a2;
  else
    v6 = a1;
  v4[4] = v6;
  *((_QWORD *)v4 + 1) = malloc_type_malloc(4 * v6, 0xFE76FDC7uLL);
  v5[8] = a1;
  v7 = a2 * a1;
  if (a2 * a1 <= 1)
    v7 = 1;
  *((_QWORD *)v5 + 3) = malloc_type_malloc(4 * v7, 0xFE76FDC7uLL);
  v5[12] = a2;
  *((_QWORD *)v5 + 5) = malloc_type_malloc(4 * a2 * (unint64_t)a2, 0xFE76FDC7uLL);
  *((_QWORD *)v5 + 7) = malloc_type_malloc(4uLL, 0xFE76FDC7uLL);
  v5[16] = -1;
  __iwork = (__CLPK_integer *)malloc_type_malloc(32 * v5[4], 0xFE76FDC7uLL);
  *((_QWORD *)v5 + 9) = __iwork;
  v12 = 0;
  sgesdd_("S", &__lda, &__n, 0, &__lda, *((__CLPK_real **)v5 + 1), *((__CLPK_real **)v5 + 3), v5 + 8, *((__CLPK_real **)v5 + 5), v5 + 12, *((__CLPK_real **)v5 + 7), v5 + 16, __iwork, &v12);
  if (v12)
  {
    free(*((void **)v5 + 1));
    free(*((void **)v5 + 3));
    free(*((void **)v5 + 5));
    free(*((void **)v5 + 7));
    free(*((void **)v5 + 9));
    free(v5);
    return 0;
  }
  else
  {
    v9 = (float *)*((_QWORD *)v5 + 7);
    v10 = (int)*v9;
    v5[16] = v10;
    *((_QWORD *)v5 + 7) = malloc_type_realloc(v9, 4 * v10, 0x626B1B9uLL);
  }
  return v5;
}

void sub_1D4DA1744(void **a1)
{
  free(a1[1]);
  free(a1[3]);
  free(a1[5]);
  free(a1[7]);
  free(a1[9]);
  free(a1);
}

uint64_t sub_1D4DA178C(uint64_t result, uint64_t a2, uint64_t a3, float *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  if (a5)
  {
    v5 = 0;
    do
    {
      v6 = 4 * v5;
      v7 = *(float *)(a2 + v6);
      v8 = *(float *)(a2 + 4 * (v5 + 1));
      v9 = *(float *)(a3 + v6);
      v10 = *(float *)(a3 + 4 * (v5 + 1));
      v11 = *a4++;
      *(float *)(result + v6) = v11 * 0.0;
      LODWORD(v6) = 2 * a5 + v5;
      *(float *)(result + 4 * v6) = v11 * 0.0;
      v12 = 4 * a5 + v5;
      *(float *)(result + 4 * v12) = v11 * 0.0;
      v13 = 6 * a5 + v5;
      *(float *)(result + 4 * v13) = -(float)(v7 * v11);
      v14 = 8 * a5 + v5;
      *(float *)(result + 4 * v14) = -(float)(v8 * v11);
      v15 = 10 * a5 + v5;
      *(float *)(result + 4 * v15) = -v11;
      v16 = 12 * a5 + v5;
      *(float *)(result + 4 * v16) = (float)(v7 * v10) * v11;
      v17 = 14 * a5 + v5;
      *(float *)(result + 4 * v17) = (float)(v8 * v10) * v11;
      v18 = 16 * a5 + v5;
      *(float *)(result + 4 * v18) = v10 * v11;
      *(float *)(result + 4 * (v5 + 1)) = v7 * v11;
      *(float *)(result + 4 * (v6 + 1)) = v8 * v11;
      *(float *)(result + 4 * (v12 + 1)) = v11;
      *(float *)(result + 4 * (v13 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v14 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v15 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v16 + 1)) = (float)-(float)(v9 * v7) * v11;
      *(float *)(result + 4 * (v17 + 1)) = (float)-(float)(v9 * v8) * v11;
      *(float *)(result + 4 * (v18 + 1)) = -(float)(v9 * v11);
      v5 += 2;
    }
    while (2 * a5 != v5);
  }
  return result;
}

BOOL sub_1D4DA18D0(uint64_t a1, __CLPK_real *a2, unsigned int a3, unsigned int a4)
{
  char v8;
  signed int v9;
  unsigned int v10;
  __CLPK_integer *__iwork;
  float *v13;
  int v14;
  __CLPK_real *__work;
  __CLPK_integer v16;
  char __jobz;
  __CLPK_integer __n;
  __CLPK_integer __lda;

  __lda = a3;
  __n = a4;
  if (a3 >= a4)
    v8 = 83;
  else
    v8 = 65;
  __jobz = v8;
  if (*(_DWORD *)a1 >= a3 && *(_DWORD *)(a1 + 4) >= a4)
  {
    __work = *(__CLPK_real **)(a1 + 56);
  }
  else
  {
    *(_DWORD *)a1 = a3;
    *(_DWORD *)(a1 + 4) = a4;
    if (a3 >= a4)
      v9 = a4;
    else
      v9 = a3;
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 48) = a4;
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v9, 0x626B1B9uLL);
    v10 = a4 * a3;
    if (a4 * a3 <= 1)
      v10 = 1;
    *(_QWORD *)(a1 + 24) = malloc_type_realloc(*(void **)(a1 + 24), 4 * v10, 0x626B1B9uLL);
    *(_QWORD *)(a1 + 40) = malloc_type_realloc(*(void **)(a1 + 40), 4 * a4 * (unint64_t)a4, 0x626B1B9uLL);
    __iwork = (__CLPK_integer *)malloc_type_realloc(*(void **)(a1 + 72), 32 * *(int *)(a1 + 16), 0x626B1B9uLL);
    *(_DWORD *)(a1 + 64) = -1;
    *(_QWORD *)(a1 + 72) = __iwork;
    v16 = 0;
    sgesdd_(&__jobz, &__lda, &__n, a2, &__lda, *(__CLPK_real **)(a1 + 8), *(__CLPK_real **)(a1 + 24), (__CLPK_integer *)(a1 + 32), *(__CLPK_real **)(a1 + 40), (__CLPK_integer *)(a1 + 48), *(__CLPK_real **)(a1 + 56), (__CLPK_integer *)(a1 + 64), __iwork, &v16);
    if (v16)
      return 0;
    v13 = *(float **)(a1 + 56);
    v14 = (int)*v13;
    *(_DWORD *)(a1 + 64) = v14;
    __work = (__CLPK_real *)malloc_type_realloc(v13, 4 * v14, 0x626B1B9uLL);
    *(_QWORD *)(a1 + 56) = __work;
  }
  v16 = 0;
  sgesdd_(&__jobz, &__lda, &__n, a2, &__lda, *(__CLPK_real **)(a1 + 8), *(__CLPK_real **)(a1 + 24), &__lda, *(__CLPK_real **)(a1 + 40), &__n, __work, (__CLPK_integer *)(a1 + 64), *(__CLPK_integer **)(a1 + 72), &v16);
  return v16 == 0;
}

float sub_1D4DA1AB4(uint64_t a1, __CLPK_real *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  float result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (sub_1D4DA18D0(a1, a2, a3, a4) && a4)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = -1;
    do
    {
      v11 += a4;
      result = *(float *)(v10 + 4 * v11);
      *(float *)(a5 + 4 * v9++) = result;
    }
    while (a4 != v9);
  }
  return result;
}

BOOL sub_1D4DA1B18(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;

  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v9 = a2[2];
  v8 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a1[6];
  v15 = a1[7];
  v16 = a2[6];
  v17 = a2[7];
  v18 = v6 * (v11 - v15) + v14 * (v7 - v11) + v10 * (v15 - v7);
  v19 = *a1 * v18;
  v20 = v3 * v18;
  v21 = (v11 - v3) * v14 + *a1 * (v15 - v11) + v10 * (v3 - v15);
  v22 = v6 * v21;
  v23 = v7 * v21;
  v24 = v6 * (v15 - v3) + *a1 * (v7 - v15) + v14 * (v3 - v7);
  v25 = v10 * v24;
  v26 = v11 * v24;
  v27 = v26 * v26 + v25 * v25 + v24 * v24 + v23 * v23 + v22 * v22 + v21 * v21 + v20 * v20 + v19 * v19 + v18 * v18;
  v28 = 0.0;
  v29 = 0.0;
  if (v27 >= 1.0e-15)
    v29 = 1.0 / sqrt(v27);
  v30 = v19 * v29;
  v31 = v20 * v29;
  v32 = v18 * v29;
  v33 = v22 * v29;
  v34 = v23 * v29;
  v35 = v21 * v29;
  v36 = v25 * v29;
  v37 = v26 * v29;
  v38 = v24 * v29;
  v39 = v9 * (v13 - v17) + v16 * (v8 - v13) + v12 * (v17 - v8);
  v40 = v4 * v39;
  v41 = v5 * v39;
  v42 = (v13 - v5) * v16 + v4 * (v17 - v13) + v12 * (v5 - v17);
  v43 = v9 * v42;
  v44 = v8 * v42;
  v45 = v9 * (v17 - v5) + v4 * (v8 - v17) + v16 * (v5 - v8);
  v46 = v12 * v45;
  v47 = v13 * v45;
  v48 = v47 * v47 + v46 * v46 + v45 * v45 + v44 * v44 + v43 * v43 + v42 * v42 + v41 * v41 + v40 * v40 + v39 * v39;
  if (v48 >= 1.0e-15)
    v28 = 1.0 / sqrt(v48);
  v49 = v40 * v28;
  v50 = v41 * v28;
  v51 = v39 * v28;
  v52 = v43 * v28;
  v53 = v44 * v28;
  v54 = v42 * v28;
  v55 = v46 * v28;
  v56 = v47 * v28;
  v57 = v45 * v28;
  v58 = v34 * v38 - v35 * v37;
  v59 = v35 * v36 - v33 * v38;
  v60 = v33 * v37 - v34 * v36;
  v61 = v37 * v32 - v38 * v31;
  v62 = v38 * v30 - v36 * v32;
  v63 = v36 * v31 - v37 * v30;
  v64 = v31 * v35 - v32 * v34;
  v65 = v32 * v33 - v30 * v35;
  v66 = v30 * v34 - v31 * v33;
  v67 = v58 * v50;
  v68 = v58 * v51 + v61 * v54;
  v69 = v64 * v55 + v58 * v49 + v61 * v52;
  v70 = v64 * v56 + v67 + v61 * v53;
  v71 = v64 * v57 + v68;
  v72 = v59 * v50;
  v73 = v59 * v51 + v62 * v54;
  v74 = v65 * v55 + v59 * v49 + v62 * v52;
  v75 = v65 * v56 + v72 + v62 * v53;
  v76 = v65 * v57 + v73;
  v77 = v60 * v50;
  v78 = v66 * v57;
  v79 = v66 * v55 + v60 * v49 + v63 * v52;
  v80 = v66 * v56 + v77 + v63 * v53;
  v81 = v78 + v60 * v51 + v63 * v54;
  v82 = v80 * v80 + v79 * v79 + v81 * v81 + v70 * v70 + v69 * v69 + v71 * v71 + v75 * v75 + v74 * v74 + v76 * v76;
  v83 = 0.0;
  if (v82 >= 1.0e-15)
    v83 = 1.0 / sqrt(v82);
  *a3 = v69 * v83;
  a3[1] = v70 * v83;
  a3[2] = v71 * v83;
  a3[3] = v74 * v83;
  a3[4] = v75 * v83;
  a3[5] = v76 * v83;
  a3[6] = v79 * v83;
  a3[7] = v80 * v83;
  a3[8] = v81 * v83;
  return fabs(v81 * v83) > 1.0e-10;
}

uint64_t *sub_1D4DA1E6C(uint64_t *a1, int a2, int a3, int a4)
{
  uint64_t v8;

  v8 = operator new();
  sub_1D4D80BAC(v8, a2, a3, a4);
  *a1 = v8;
  return a1;
}

void sub_1D4DA1ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826897C](v1, 0x10F1C40D3EDF7B4);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4DA1EFC(uint64_t *a1, int a2, int a3, int a4)
{
  return sub_1D4DA1E6C(a1, a2, a3, a4);
}

uint64_t *sub_1D4DA1F04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = sub_1D4D971F8(v2);
    MEMORY[0x1D826897C](v3, 0x10F1C40D3EDF7B4);
  }
  return a1;
}

uint64_t *sub_1D4DA1F48(uint64_t *result, int a2, int a3)
{
  uint64_t v3;

  v3 = *result;
  *(_DWORD *)(v3 + 40) = a2;
  *(_DWORD *)(v3 + 44) = a3;
  return result;
}

uint64_t sub_1D4DA1F54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)result + 288) = a2;
  return result;
}

uint64_t *sub_1D4DA1F60(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *result;
  *(_DWORD *)(v3 + 236) = a2;
  *(_QWORD *)(v3 + 240) = a3;
  return result;
}

uint64_t sub_1D4DA1F70(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 144) = a2;
  return result;
}

uint64_t sub_1D4DA1F7C(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)result + 232) = a2;
  return result;
}

BOOL sub_1D4DA1F88(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return sub_1D4D972B8(*a1, a2, a3, a4, a5);
}

float sub_1D4DA1F90(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float result;

  v7 = *a1 * a5;
  v8 = a1[1] * a5;
  v9 = a3[2] + (float)((float)(v8 * a3[1]) + (float)(*a3 * v7));
  v10 = a3[5] + (float)((float)(v8 * a3[4]) + (float)(a3[3] * v7));
  v11 = a3[8] + (float)((float)(v8 * a3[7]) + (float)(a3[6] * v7));
  v12 = v9 / v11;
  v13 = v10 / v11;
  v14 = v12 - (float)(*a2 * a5);
  v15 = v13 - (float)(a2[1] * a5);
  *a4 = v14;
  a4[1] = v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = a3[4];
  v19 = a3[5];
  v20 = a3[6];
  v21 = (float)(v18 * v17) - (float)(v16 * v19);
  v22 = *a3;
  v23 = a3[1];
  v25 = a3[2];
  v24 = a3[3];
  v26 = (float)(v16 * v25) - (float)(v23 * v17);
  v27 = (float)(v23 * v19) - (float)(v18 * v25);
  v28 = (float)((float)(v26 * v24) + (float)(*a3 * v21)) + (float)(v20 * v27);
  v29 = -2.2204e-16;
  if (v28 >= 2.2204e-16 || v28 <= -2.2204e-16)
  {
    v21 = v21 / v28;
    v26 = v26 / v28;
    v27 = v27 / v28;
    v5 = (float)((float)(v20 * v19) - (float)(v24 * v17)) / v28;
    v29 = (float)((float)(v24 * v16) - (float)(v20 * v18)) / v28;
    v6 = (float)((float)(v22 * v17) - (float)(v20 * v25)) / v28;
    v17 = (float)((float)(v24 * v25) - (float)(v22 * v19)) / v28;
    v16 = (float)((float)(v20 * v23) - (float)(v22 * v16)) / v28;
    v18 = (float)((float)(v22 * v18) - (float)(v24 * v23)) / v28;
  }
  v31 = a2[1] * a5;
  v32 = *a2 * a5;
  v33 = (float)(v15 * v15) + (float)(v14 * v14);
  v34 = v27 + (float)((float)(v31 * v26) + (float)(v21 * v32));
  v35 = v17 + (float)((float)(v31 * v6) + (float)(v5 * v32));
  v36 = v18 + (float)((float)(v31 * v16) + (float)(v29 * v32));
  result = (float)((float)((float)(v35 / v36) - (float)(a1[1] * a5)) * (float)((float)(v35 / v36) - (float)(a1[1] * a5)))
         + (float)((float)((float)(v34 / v36) - (float)(*a1 * a5)) * (float)((float)(v34 / v36) - (float)(*a1 * a5)));
  if (v33 >= result)
    return v33;
  return result;
}

float sub_1D4DA20F8(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    std::__sort<std::__less<float,float> &,float *>();
    v5 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v5 - 4);
    v16 = 0;
    v17 = 0;
    v15 = 0;
    sub_1D4D5E95C(&v15, *(const void **)a1, v5, (v5 - *(_QWORD *)a1) >> 2);
    v6 = v15;
    v7 = v16;
    v8 = (v16 - v15) >> 2;
    if (v16 == v15)
    {
      v14 = 0.0 / (double)v8;
      *(float *)(a2 + 20) = v14;
      if (!v7)
      {
LABEL_11:
        result = *(float *)(*(_QWORD *)a1
                          + (((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
        *(float *)(a2 + 24) = result;
        return result;
      }
    }
    else
    {
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = (v16 - v15) >> 2;
      v10 = 0.0;
      v11 = (float *)v15;
      do
      {
        v12 = *v11++;
        v10 = v10 + v12;
        --v9;
      }
      while (v9);
      v13 = v10 / (double)v8;
      *(float *)(a2 + 20) = v13;
    }
    v16 = v6;
    operator delete(v6);
    goto LABEL_11;
  }
  return result;
}

unint64_t sub_1D4DA21DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  _QWORD *v7;
  float *v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 272);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 280) - v2) >> 4) <= a2)
LABEL_23:
    sub_1D4D5DDC8();
  v4 = *(__int16 *)(v2 + 48 * a2 + 40);
  if (v4 > 0)
    return a2;
  v7 = (_QWORD *)(a1 + 32);
  v8 = (float *)sub_1D4DA23C4((_QWORD *)(a1 + 32), a2);
  v9 = *v8;
  v10 = v8[1];
  v11 = *(unsigned int *)(a1 + 48);
  if (a2)
  {
    v12 = a2 - 1;
    v13 = 48 * a2 - 8;
    v14 = 6.25;
    v5 = a2;
    do
    {
      v15 = (float *)sub_1D4DA23C4(v7, v12);
      v16 = v10 - v15[1];
      if ((float)(v16 * v16) >= v14)
        break;
      v17 = (float)((float)(v9 - *v15) * (float)(v9 - *v15)) + (float)(v16 * v16);
      if (v17 < v14)
      {
        v18 = *(_QWORD *)(a1 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 280) - v18) >> 4) <= v12)
          goto LABEL_23;
        if (*(__int16 *)(v18 + v13) > v4)
        {
          v5 = v12;
          v14 = v17;
        }
      }
      --v12;
      v13 -= 48;
    }
    while (v12 != -1);
  }
  else
  {
    v5 = 0;
    v14 = 6.25;
  }
  if (v11 - 1 > a2)
  {
    v19 = a2 + 1;
    v20 = 48 * a2 + 88;
    do
    {
      v21 = (float *)sub_1D4DA23C4(v7, v19);
      v22 = v10 - v21[1];
      if ((float)(v22 * v22) >= v14)
        break;
      v23 = (float)((float)(v9 - *v21) * (float)(v9 - *v21)) + (float)(v22 * v22);
      if (v23 < v14)
      {
        v24 = *(_QWORD *)(a1 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 280) - v24) >> 4) <= v19)
          goto LABEL_23;
        if (*(__int16 *)(v24 + v20) > v4)
        {
          v5 = v19;
          v14 = v23;
        }
      }
      ++v19;
      v20 += 48;
    }
    while (v11 != v19);
  }
  return v5;
}

uint64_t sub_1D4DA23C4(_QWORD *a1, unint64_t a2)
{
  std::logic_error *exception;

  if (a1[2] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "idx");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  return *a1 + 8 * a2;
}

void sub_1D4DA2420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DA2434(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *__p;
  unint64_t *v30;
  unint64_t *v31;

  __p = 0;
  v30 = 0;
  v31 = 0;
  sub_1D4D78AF4(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 4));
  if (*(_QWORD *)(a1 + 280) == *(_QWORD *)(a1 + 272))
  {
    v18 = (unint64_t *)__p;
  }
  else
  {
    v2 = 0;
    do
    {
      v3 = sub_1D4DA21DC(a1, v2);
      v4 = v3;
      v5 = v30;
      if (v30 >= v31)
      {
        v7 = (unint64_t *)__p;
        v8 = ((char *)v30 - (_BYTE *)__p) >> 3;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61)
          sub_1D4D5DFA8();
        v10 = (char *)v31 - (_BYTE *)__p;
        if (((char *)v31 - (_BYTE *)__p) >> 2 > v9)
          v9 = v10 >> 2;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)sub_1D4D5E2CC((uint64_t)&v31, v11);
          v7 = (unint64_t *)__p;
          v5 = v30;
        }
        else
        {
          v12 = 0;
        }
        v13 = (unint64_t *)&v12[8 * v8];
        *v13 = v4;
        v6 = v13 + 1;
        while (v5 != v7)
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        __p = v13;
        v30 = v6;
        v31 = (unint64_t *)&v12[8 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v30 = v3;
        v6 = v5 + 1;
      }
      v30 = v6;
      ++v2;
      v15 = *(_QWORD *)(a1 + 272);
      v16 = *(_QWORD *)(a1 + 280);
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4);
    }
    while (v2 < v17);
    v18 = (unint64_t *)__p;
    if (v16 != v15)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = v18[v20];
        if (v20 != v22)
        {
          if (v17 <= v22)
            sub_1D4D5DDC8();
          v23 = (__int128 *)(v15 + 48 * v22);
          v24 = (_OWORD *)(v15 + v19);
          v25 = *v23;
          v26 = v23[2];
          v24[1] = v23[1];
          v24[2] = v26;
          *v24 = v25;
          v21 = (v21 + 1);
          v15 = *(_QWORD *)(a1 + 272);
          v16 = *(_QWORD *)(a1 + 280);
        }
        ++v20;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4);
        v19 += 48;
      }
      while (v20 < v17);
      goto LABEL_29;
    }
  }
  v21 = 0;
  v27 = 0;
  if (v18)
  {
LABEL_29:
    v30 = v18;
    operator delete(v18);
    return v21;
  }
  return v27;
}

void sub_1D4DA2644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4DA266C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 20) * *(_DWORD *)(*(_QWORD *)result + 24))
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    do
    {
      result = sub_1D4DA2434(*(_QWORD *)(v1 + 56) + v3);
      ++v4;
      v1 = *(_QWORD *)v2;
      v3 += 296;
    }
    while (v4 < (*(_DWORD *)(*(_QWORD *)v2 + 20) * *(_DWORD *)(*(_QWORD *)v2 + 24)));
  }
  return result;
}

void sub_1D4DA26D0(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float *v12;
  unint64_t i;
  float v14;

  sub_1D4D74670((uint64_t)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4), 0);
  v4 = (_QWORD *)*a2;
  v5 = a2[1];
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = v5 + 1;
    v8 = (_QWORD *)*a2;
    do
    {
      *v8 &= ~(1 << v6);
      v8 += v6 == 63;
      if (v6 == 63)
        v6 = 0;
      else
        ++v6;
      --v7;
    }
    while (v7 > 1);
  }
  v9 = *a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  if (v10 >= 2)
  {
    v11 = *(float *)(v9 + 12);
    v12 = (float *)(v9 + 96);
    for (i = 1; i != v10; ++i)
    {
      v14 = v11;
      v11 = *(v12 - 1);
      if (v14 == v11 && *(v12 - 20) == *v12)
        *(_QWORD *)((char *)v4 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
      v12 += 20;
    }
  }
}

void sub_1D4DA27CC(void **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  char v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  BOOL v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  char v45;
  int v46;
  uint64_t v47;
  _WORD *v48;
  __int16 v49;
  int v50;
  __int128 v51;
  float *v52;
  float v53;
  float *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  float *v62;
  int v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  __int128 *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v97;
  int16x4_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  float v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v123;
  char v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  int v129;
  float64x2_t v130;
  uint64_t v131;
  _QWORD v132[2];
  _BYTE v133[32];
  __int128 v134;
  void *__p;
  float *v136;
  char *v137;
  float v138[9];
  uint64_t v139;

  v17 = 0;
  v139 = *MEMORY[0x1E0C80C00];
  v18 = *(float *)(*a3 + 16);
  do
  {
    v19 = *(double *)(a5 + 8 * v17);
    v138[v17++] = v19;
  }
  while (v17 != 9);
  __p = 0;
  v136 = 0;
  v137 = 0;
  sub_1D4DA3110(&__p, 0x2EEuLL);
  v123 = a7;
  v120 = a2;
  v121 = (*(_DWORD *)(*(_QWORD *)a4 + 20) * *(_DWORD *)(*(_QWORD *)a4 + 24));
  if ((int)v121 < 1)
  {
    v126 = 0;
    v131 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v131 = 0;
    v126 = 0;
    v22 = a8 * a8;
    v23 = 1.0 / v18;
    do
    {
      v24 = *(_QWORD *)(*a3 + 56);
      v25 = v24 + 296 * v20;
      v26 = *(_QWORD *)(v25 + 48);
      v127 = (unint64_t *)(v25 + 48);
      if (v26)
      {
        v27 = 0;
        v28 = v24 + 296 * v20;
        v29 = (_QWORD *)(v28 + 272);
        v30 = (_QWORD *)(v28 + 280);
        do
        {
          v31 = *a6;
          v32 = a6[1];
          v33 = v32 - *a6;
          if (v32 == *a6)
            goto LABEL_26;
          v34 = 0;
          v35 = 0;
          v36 = v33 / 80;
          v37 = v36 <= 1 ? 1 : v36;
          v38 = (_DWORD *)(v31 + 8);
          v39 = 1;
          while (v20 != *(v38 - 2) || v27 != *v38)
          {
            v39 = v36 > ++v35;
            v34 += 0x100000000;
            v38 += 20;
            if (v37 == v35)
              goto LABEL_26;
          }
          if (!v39)
          {
LABEL_26:
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27)
LABEL_119:
              sub_1D4D5DDC8();
            v47 = *v29 + 48 * v27;
            v50 = *(__int16 *)(v47 + 42);
            v48 = (_WORD *)(v47 + 42);
            v49 = v50;
            if (v50 <= 4094)
              *v48 = v49 + 1;
            v11 = v10;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27)
              goto LABEL_119;
            v40 = *v29 + 48 * v27;
            *(_WORD *)(v40 + 42) = 0;
            v41 = *(_OWORD *)(v40 + 32);
            *(_OWORD *)&v133[16] = *(_OWORD *)(v40 + 16);
            v134 = v41;
            *(_OWORD *)v133 = *(_OWORD *)v40;
            if (SWORD4(v41) <= 4094)
              WORD4(v134) = WORD4(v41) + 1;
            *(_QWORD *)v133 *= 2;
            v42 = *(_QWORD *)&v133[24];
            *(_OWORD *)&v133[16] = *(_OWORD *)&v133[8];
            *(_QWORD *)&v134 = v42;
            v43 = v34 >> 32;
            v44 = sub_1D4DA1F90((float *)(v31 + 80 * SHIDWORD(v34) + 12), (float *)(v31 + 80 * SHIDWORD(v34) + 20), v138, (float *)&v133[8], v23);
            v45 = v133[0];
            if (v44 <= v22)
            {
              v45 = v133[0] | 1;
              *(_QWORD *)v133 |= 1uLL;
              ++v126;
            }
            v46 = v45 & 1;
            v128 = v45 & 2;
            if ((v45 & 2) == 0)
              v46 = 0;
            v129 = v46;
            if (SWORD4(v134) >= 2)
              __asm { BR              X9 }
            v51 = *(_OWORD *)&v133[16];
            *(_OWORD *)v40 = *(_OWORD *)v133;
            *(_OWORD *)(v40 + 16) = v51;
            *(_OWORD *)(v40 + 32) = v134;
            if (v44 > v22)
            {
              v11 = v10;
            }
            else
            {
              v125 = v21;
              v52 = (float *)(*a6 + 80 * (int)v43);
              v53 = sqrtf((float)((float)(v52[4] - v52[6]) * (float)(v52[4] - v52[6]))+ (float)((float)(v52[3] - v52[5]) * (float)(v52[3] - v52[5])));
              v54 = v136;
              if (v136 >= (float *)v137)
              {
                v56 = (float *)__p;
                v57 = ((char *)v136 - (_BYTE *)__p) >> 2;
                v58 = v57 + 1;
                if ((unint64_t)(v57 + 1) >> 62)
                  sub_1D4D5DFA8();
                v59 = v137 - (_BYTE *)__p;
                if ((v137 - (_BYTE *)__p) >> 1 > v58)
                  v58 = v59 >> 1;
                if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                  v60 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v60 = v58;
                if (v60)
                {
                  v61 = (char *)sub_1D4D5EA14((uint64_t)&v137, v60);
                  v56 = (float *)__p;
                  v54 = v136;
                }
                else
                {
                  v61 = 0;
                }
                v62 = (float *)&v61[4 * v57];
                *v62 = v53;
                v55 = v62 + 1;
                while (v54 != v56)
                {
                  v63 = *((_DWORD *)v54-- - 1);
                  *((_DWORD *)v62-- - 1) = v63;
                }
                __p = v62;
                v136 = v55;
                v137 = &v61[4 * v60];
                if (v56)
                  operator delete(v56);
              }
              else
              {
                *v136 = v53;
                v55 = v54 + 1;
              }
              v136 = v55;
              v64 = (_QWORD *)(*a6 + 80 * (int)v43 + 12);
              v66 = a1[1];
              v65 = (unint64_t)a1[2];
              if ((unint64_t)v66 >= v65)
              {
                v69 = ((char *)v66 - (_BYTE *)*a1) >> 3;
                if ((unint64_t)(v69 + 1) >> 61)
                  sub_1D4D5DFA8();
                v70 = v65 - (_QWORD)*a1;
                v71 = v70 >> 2;
                if (v70 >> 2 <= (unint64_t)(v69 + 1))
                  v71 = v69 + 1;
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                  v72 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v72 = v71;
                if (v72)
                  v73 = (char *)sub_1D4D5E2CC((uint64_t)(a1 + 2), v72);
                else
                  v73 = 0;
                v74 = &v73[8 * v69];
                *(_QWORD *)v74 = *v64;
                v67 = v74 + 8;
                v68 = a1;
                v76 = (char *)*a1;
                v75 = (char *)a1[1];
                if (v75 != *a1)
                {
                  do
                  {
                    v77 = *((_QWORD *)v75 - 1);
                    v75 -= 8;
                    *((_QWORD *)v74 - 1) = v77;
                    v74 -= 8;
                  }
                  while (v75 != v76);
                  v75 = (char *)*a1;
                }
                *a1 = v74;
                a1[1] = v67;
                a1[2] = &v73[8 * v72];
                if (v75)
                  operator delete(v75);
              }
              else
              {
                *v66 = *v64;
                v67 = v66 + 1;
                v68 = a1;
              }
              v68[1] = v67;
              v78 = *a6 + 80 * (int)v43;
              v80 = *(float *)(v78 + 12);
              v79 = v78 + 12;
              v11 = v80;
              if ((v125 & 1) != 0)
              {
                if (v11 < v9)
                  v9 = v11;
                v81 = *a6 + 80 * (int)v43;
                v82 = *(float *)(v81 + 16);
                if (v82 < v8)
                  v8 = *(float *)(v81 + 16);
                if (v10 >= v11)
                  v11 = v10;
                if (v18 < v82)
                  v18 = *(float *)(v81 + 16);
                v21 = 1;
              }
              else
              {
                v18 = *(float *)(v79 + 4);
                v21 = 1;
                v8 = v18;
                v9 = v11;
              }
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27)
              sub_1D4D5DDC8();
            LODWORD(v131) = v131 + (v128 >> 1);
            HIDWORD(v131) += v129;
            v83 = (__int128 *)(*v29 + 48 * v27);
            v84 = (_OWORD *)(*a6 + 80 * (int)v43);
            v85 = *v83;
            v86 = v83[2];
            v84[3] = v83[1];
            v84[4] = v86;
            v84[2] = v85;
            v26 = *v127;
          }
          ++v27;
          v10 = v11;
        }
        while (v26 > v27);
      }
      else
      {
        v11 = v10;
      }
      ++v20;
      v10 = v11;
    }
    while (v20 != v121);
  }
  if (v123)
  {
    v87 = (char *)*v123;
    if (*v123 != v123[1])
      v123[1] = v87;
    v88 = *a6;
    if (a6[1] != *a6)
    {
      v89 = 0;
      v90 = 0;
      v91 = v123 + 2;
      __asm { FMOV            V0.2D, #0.5 }
      v130 = _Q0;
      do
      {
        v97 = v88 + 80 * v89;
        v98 = vmovn_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)(v97 + 12)), v130)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(vcvt_hight_f64_f32(*(float32x4_t *)(v97 + 12)), v130))));
        v99 = *(_OWORD *)(v97 + 48);
        *(_OWORD *)v133 = *(_OWORD *)(v97 + 32);
        *(_OWORD *)&v133[16] = v99;
        v134 = *(_OWORD *)(v97 + 64);
        if ((unint64_t)v87 >= *v91)
        {
          v102 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v87[-*v123] >> 3);
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) > 0x492492492492492)
            sub_1D4D5DFA8();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v91 - *v123) >> 3) > v103)
            v103 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v91 - *v123) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v91 - *v123) >> 3)) >= 0x249249249249249)
            v104 = 0x492492492492492;
          else
            v104 = v103;
          if (v104)
            v105 = (char *)sub_1D4DA8A00((uint64_t)v91, v104);
          else
            v105 = 0;
          v106 = &v105[56 * v102];
          *(int16x4_t *)v106 = v98;
          v107 = *(_OWORD *)&v133[16];
          *(_OWORD *)(v106 + 8) = *(_OWORD *)v133;
          *(_OWORD *)(v106 + 24) = v107;
          *(_OWORD *)(v106 + 40) = v134;
          v109 = (char *)*v123;
          v108 = (char *)v123[1];
          v110 = v106;
          if (v108 != (char *)*v123)
          {
            do
            {
              v111 = *(_OWORD *)(v108 - 56);
              v112 = *(_OWORD *)(v108 - 40);
              v113 = *(_OWORD *)(v108 - 24);
              *((_QWORD *)v110 - 1) = *((_QWORD *)v108 - 1);
              *(_OWORD *)(v110 - 24) = v113;
              *(_OWORD *)(v110 - 40) = v112;
              *(_OWORD *)(v110 - 56) = v111;
              v110 -= 56;
              v108 -= 56;
            }
            while (v108 != v109);
            v108 = (char *)*v123;
          }
          v87 = v106 + 56;
          *v123 = v110;
          v123[1] = v106 + 56;
          v123[2] = &v105[56 * v104];
          if (v108)
            operator delete(v108);
        }
        else
        {
          *(int16x4_t *)v87 = v98;
          v100 = *(_OWORD *)v133;
          v101 = *(_OWORD *)&v133[16];
          *(_OWORD *)(v87 + 40) = v134;
          *(_OWORD *)(v87 + 24) = v101;
          *(_OWORD *)(v87 + 8) = v100;
          v87 += 56;
        }
        v123[1] = v87;
        v88 = *a6;
        v89 = ++v90;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 4) > v90);
    }
  }
  v114 = (std::__shared_weak_count *)a3[1];
  v132[0] = *a3;
  v132[1] = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldxr(p_shared_owners);
    while (__stxr(v116 + 1, p_shared_owners));
  }
  sub_1D4DA266C((uint64_t)v132);
  if (!v114)
    goto LABEL_112;
  v118 = (unint64_t *)&v114->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (v119)
  {
LABEL_112:
    if (!v120)
      goto LABEL_114;
    goto LABEL_113;
  }
  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
  std::__shared_weak_count::__release_weak(v114);
  if (v120)
  {
LABEL_113:
    *(_DWORD *)v120 = -858993459 * ((unint64_t)(a6[1] - *a6) >> 4);
    *(_DWORD *)(v120 + 4) = v126;
    *(_QWORD *)(v120 + 8) = v131;
    *(float *)(v120 + 48) = v11;
    *(float *)(v120 + 52) = v18;
    *(float *)(v120 + 40) = v9;
    *(float *)(v120 + 44) = v8;
    *(_DWORD *)(v120 + 32) = 0;
    *(_DWORD *)(v120 + 36) = 0;
    sub_1D4DA20F8((uint64_t)&__p, v120, v117);
  }
LABEL_114:
  if (__p)
  {
    v136 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1D4DA30C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4DA3110(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1D4D5DFA8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D4D5EA14(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D4DA31A4(char **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  _QWORD *v15;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  int *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  int v41;
  unint64_t v42;
  int v43;
  float v44;
  float *v45;
  float v46;
  float *v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  float *v55;
  int v56;
  _QWORD *v57;
  char **v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float v76;
  int v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int16x4_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  __int128 v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char **v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  float v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  _BYTE v117[32];
  __int128 v118;
  void *__p;
  float *v120;
  float *v121;
  void *v122[3];
  float v123[9];
  uint64_t v124;

  v15 = a3;
  v17 = 0;
  v124 = *MEMORY[0x1E0C80C00];
  v18 = *(float *)(*a3 + 16);
  do
  {
    v19 = *(double *)(a5 + 8 * v17);
    v123[v17++] = v19;
  }
  while (v17 != 9);
  memset(v122, 0, sizeof(v122));
  sub_1D4DA26D0(a6, v122);
  __p = 0;
  v120 = 0;
  v121 = 0;
  sub_1D4DA3110(&__p, 0x2EEuLL);
  v108 = a2;
  v20 = a6[1];
  v109 = v15;
  if (v20 == *a6)
  {
    LODWORD(v115) = 0;
    v114 = 0;
    v113 = 0;
    v78 = a6[1];
  }
  else
  {
    v21 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v22 = a8 * a8;
    v20 = *a6;
    v23 = 1.0 / v18;
    v110 = a4;
    do
    {
      v24 = (int *)(v20 + 80 * v21);
      v25 = *v24;
      v26 = v24[2];
      v27 = *(_QWORD *)(*(_QWORD *)a4 + 56) + 296 * *v24;
      v28 = *(_QWORD *)(v27 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v27 + 280) - v28) >> 4) <= v26)
        sub_1D4D5DDC8();
      v29 = v24[1];
      v30 = (_OWORD *)(v28 + 48 * (int)v26);
      v31 = v30[2];
      *(_OWORD *)&v117[16] = v30[1];
      v118 = v31;
      *(_OWORD *)v117 = *v30;
      if (SWORD4(v31) <= 4094)
        WORD4(v118) = WORD4(v31) + 1;
      *(_QWORD *)v117 *= 2;
      v32 = *(_QWORD *)&v117[24];
      *(_OWORD *)&v117[16] = *(_OWORD *)&v117[8];
      *(_QWORD *)&v118 = v32;
      v33 = sub_1D4DA1F90((float *)(v20 + 80 * v21 + 12), (float *)(v20 + 80 * v21 + 20), v123, (float *)&v117[8], v23);
      if (v33 <= v22)
        *(_QWORD *)v117 |= 1uLL;
      v34 = *(_QWORD *)(*v15 + 56) + 296 * v25;
      v35 = *(_QWORD *)(v34 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v34 + 280) - v35) >> 4) <= v29)
        sub_1D4D5DDC8();
      v36 = (_OWORD *)(v35 + 48 * (int)v29);
      v37 = *(_OWORD *)v117;
      v38 = *(_OWORD *)&v117[16];
      *v36 = *(_OWORD *)v117;
      v36[1] = v38;
      v39 = v118;
      v36[2] = v118;
      v40 = (_OWORD *)(*a6 + 80 * v21);
      v40[2] = v37;
      v40[3] = v38;
      v40[4] = v39;
      if (((*(_QWORD *)((char *)v122[0] + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      {
        v41 = v117[0] & 1;
        v42 = v117[0] & 2;
        if ((v117[0] & 2) != 0)
          v43 = v117[0] & 1;
        else
          v43 = 0;
        if (SWORD4(v118) > 1)
          __asm { BR              X9 }
        if ((v117[0] & 1) != 0)
        {
          v45 = (float *)(*a6 + 80 * v21);
          v46 = sqrtf((float)((float)(v45[4] - v45[6]) * (float)(v45[4] - v45[6]))+ (float)((float)(v45[3] - v45[5]) * (float)(v45[3] - v45[5])));
          v47 = v120;
          if (v120 >= v121)
          {
            v49 = (float *)__p;
            v50 = ((char *)v120 - (_BYTE *)__p) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
              sub_1D4D5DFA8();
            v52 = (char *)v121 - (_BYTE *)__p;
            if (((char *)v121 - (_BYTE *)__p) >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)sub_1D4D5EA14((uint64_t)&v121, v53);
              v49 = (float *)__p;
              v47 = v120;
            }
            else
            {
              v54 = 0;
            }
            v55 = (float *)&v54[4 * v50];
            *v55 = v46;
            v48 = v55 + 1;
            while (v47 != v49)
            {
              v56 = *((_DWORD *)v47-- - 1);
              *((_DWORD *)v55-- - 1) = v56;
            }
            __p = v55;
            v120 = v48;
            v121 = (float *)&v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *v120 = v46;
            v48 = v47 + 1;
          }
          v120 = v48;
          v57 = (_QWORD *)(*a6 + 80 * v21 + 12);
          v58 = a1;
          v60 = a1[1];
          v59 = (unint64_t)a1[2];
          if ((unint64_t)v60 >= v59)
          {
            v62 = (v60 - *a1) >> 3;
            if ((unint64_t)(v62 + 1) >> 61)
              sub_1D4D5DFA8();
            v63 = v59 - (_QWORD)*a1;
            v64 = v63 >> 2;
            if (v63 >> 2 <= (unint64_t)(v62 + 1))
              v64 = v62 + 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            if (v65)
              v66 = (char *)sub_1D4D5E2CC((uint64_t)(a1 + 2), v65);
            else
              v66 = 0;
            v67 = &v66[8 * v62];
            *(_QWORD *)v67 = *v57;
            v61 = v67 + 8;
            v69 = *a1;
            v68 = a1[1];
            if (v68 == *a1)
            {
              v15 = v109;
              v71 = a1;
            }
            else
            {
              v15 = v109;
              do
              {
                v70 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v67 - 1) = v70;
                v67 -= 8;
              }
              while (v68 != v69);
              v71 = a1;
              v68 = *a1;
            }
            *v71 = v67;
            v71[1] = v61;
            v71[2] = &v66[8 * v65];
            if (v68)
            {
              operator delete(v68);
              v58 = a1;
            }
            else
            {
              v58 = v71;
            }
          }
          else
          {
            *(_QWORD *)v60 = *v57;
            v61 = v60 + 8;
            v15 = v109;
          }
          v58[1] = v61;
          v72 = *a6 + 80 * v21;
          v74 = *(float *)(v72 + 12);
          v73 = v72 + 12;
          v44 = v74;
          if ((v115 & 0x100000000) != 0)
          {
            if (v44 < v9)
              v9 = v44;
            v75 = *a6 + 80 * v21;
            v76 = *(float *)(v75 + 16);
            if (v76 < v8)
              v8 = *(float *)(v75 + 16);
            if (v11 >= v44)
              v44 = v11;
            if (v10 < v76)
              v10 = *(float *)(v75 + 16);
          }
          else
          {
            v10 = *(float *)(v73 + 4);
            v8 = v10;
            v9 = v44;
          }
        }
        else
        {
          v44 = v11;
        }
        ++v113;
        LODWORD(v114) = v114 + v41;
        LODWORD(v115) = v43 + v115;
        HIDWORD(v114) += v42 >> 1;
        v77 = HIDWORD(v115);
        if (v33 <= v22)
          v77 = 1;
        HIDWORD(v115) = v77;
        v11 = v44;
        a4 = v110;
      }
      ++v21;
      v20 = *a6;
      v78 = a6[1];
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v78 - *a6) >> 4) > v21);
  }
  if (a7)
  {
    v79 = (char *)*a7;
    a7[1] = *a7;
    if (v78 != v20)
    {
      v80 = 0;
      v81 = a7 + 2;
      while (((*(_QWORD *)((char *)v122[0] + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) != 0)
      {
LABEL_94:
        if (0xCCCCCCCCCCCCCCCDLL * ((v78 - v20) >> 4) <= ++v80)
          goto LABEL_95;
      }
      v82 = v20 + 80 * v80;
      v83 = vmovn_s32(vcvtq_s32_f32(*(float32x4_t *)(v82 + 12)));
      v84 = *(_OWORD *)(v82 + 32);
      v85 = *(_OWORD *)(v82 + 64);
      *(_OWORD *)&v117[16] = *(_OWORD *)(v82 + 48);
      v118 = v85;
      *(_OWORD *)v117 = v84;
      if ((unint64_t)v79 >= *v81)
      {
        v88 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v79[-*a7] >> 3);
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) > 0x492492492492492)
          sub_1D4D5DFA8();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v81 - *a7) >> 3) > v89)
          v89 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v81 - *a7) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v81 - *a7) >> 3)) >= 0x249249249249249)
          v90 = 0x492492492492492;
        else
          v90 = v89;
        if (v90)
          v91 = (char *)sub_1D4DA8A00((uint64_t)v81, v90);
        else
          v91 = 0;
        v92 = &v91[56 * v88];
        *(int16x4_t *)v92 = v83;
        v93 = *(_OWORD *)&v117[16];
        *(_OWORD *)(v92 + 8) = *(_OWORD *)v117;
        *(_OWORD *)(v92 + 24) = v93;
        *(_OWORD *)(v92 + 40) = v118;
        v95 = (char *)*a7;
        v94 = (char *)a7[1];
        v96 = v92;
        if (v94 == (char *)*a7)
        {
          v100 = (char **)a7;
        }
        else
        {
          do
          {
            v97 = *(_OWORD *)(v94 - 56);
            v98 = *(_OWORD *)(v94 - 40);
            v99 = *(_OWORD *)(v94 - 24);
            *((_QWORD *)v96 - 1) = *((_QWORD *)v94 - 1);
            *(_OWORD *)(v96 - 24) = v99;
            *(_OWORD *)(v96 - 40) = v98;
            *(_OWORD *)(v96 - 56) = v97;
            v96 -= 56;
            v94 -= 56;
          }
          while (v94 != v95);
          v100 = (char **)a7;
          v94 = (char *)*a7;
        }
        v79 = v92 + 56;
        *v100 = v96;
        v100[1] = v92 + 56;
        v100[2] = &v91[56 * v90];
        if (!v94)
          goto LABEL_93;
        operator delete(v94);
      }
      else
      {
        *(int16x4_t *)v79 = v83;
        v86 = *(_OWORD *)v117;
        v87 = *(_OWORD *)&v117[16];
        *(_OWORD *)(v79 + 40) = v118;
        *(_OWORD *)(v79 + 24) = v87;
        *(_OWORD *)(v79 + 8) = v86;
        v79 += 56;
      }
      v100 = (char **)a7;
LABEL_93:
      v100[1] = v79;
      v20 = *a6;
      v78 = a6[1];
      goto LABEL_94;
    }
  }
LABEL_95:
  v101 = (std::__shared_weak_count *)v109[1];
  v116[0] = *v109;
  v116[1] = v101;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(p_shared_owners);
    while (__stxr(v103 + 1, p_shared_owners));
  }
  sub_1D4DA266C((uint64_t)v116);
  if (!v101)
    goto LABEL_102;
  v105 = (unint64_t *)&v101->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (v106)
  {
LABEL_102:
    if (!v108)
      goto LABEL_104;
    goto LABEL_103;
  }
  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
  std::__shared_weak_count::__release_weak(v101);
  if (v108)
  {
LABEL_103:
    v107 = *(_DWORD *)(*v109 + 12);
    *(_DWORD *)v108 = v113;
    *(_QWORD *)(v108 + 4) = v114;
    *(_DWORD *)(v108 + 12) = v115;
    *(_DWORD *)(v108 + 16) = v107;
    *(_DWORD *)(v108 + 32) = 0;
    *(_DWORD *)(v108 + 36) = 0;
    *(float *)(v108 + 48) = v11;
    *(float *)(v108 + 52) = v10;
    *(float *)(v108 + 40) = v9;
    *(float *)(v108 + 44) = v8;
    sub_1D4DA20F8((uint64_t)&__p, v108, v104);
  }
LABEL_104:
  if (__p)
  {
    v120 = (float *)__p;
    operator delete(__p);
  }
  if (v122[0])
    operator delete(v122[0]);
}

void sub_1D4DA39E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33)
{
  sub_1D4D6C1D0((uint64_t)&a21);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
    operator delete(a33);
  _Unwind_Resume(a1);
}

BOOL sub_1D4DA3A38(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) < *(float *)(a2 + 16);
}

uint64_t sub_1D4DA3A4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  char *v42;
  char *v43;

  __p = 0;
  v42 = 0;
  v43 = 0;
  sub_1D4D72500(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = 0;
    do
    {
      v7 = 0;
      v8 = 1;
      while ((v8 & *(_QWORD *)(v5 + 80 * v6 + 32)) != 0)
      {
        ++v7;
        v8 *= 2;
        if (v7 == 64)
          goto LABEL_8;
      }
      if (!v7)
        goto LABEL_25;
LABEL_8:
      v9 = v42;
      if (v42 >= v43)
      {
        v11 = (char *)__p;
        v12 = (v42 - (_BYTE *)__p) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          sub_1D4D5DFA8();
        v14 = v43 - (_BYTE *)__p;
        if ((v43 - (_BYTE *)__p) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_1D4D5EA14((uint64_t)&v43, v15);
          v11 = (char *)__p;
          v9 = v42;
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = v7;
        v10 = v17 + 4;
        while (v9 != v11)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        __p = v17;
        v42 = v10;
        v43 = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v42 = v7;
        v10 = v9 + 4;
      }
      v42 = v10;
      v5 = *a1;
      v4 = a1[1];
LABEL_25:
      ++v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) > v6);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v19 = (char *)__p;
  if (v42 == __p)
    v20 = 0;
  else
    v20 = *(_DWORD *)((char *)__p + (((v42 - (_BYTE *)__p) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
  v22 = *a1;
  v21 = a1[1];
  if (v21 != *a1)
  {
    v23 = 0;
    do
    {
      v24 = 0;
      v25 = 1;
      do
      {
        if ((v25 & *(_QWORD *)(v22 + 80 * v23 + 32)) == 0)
          break;
        ++v24;
        v25 *= 2;
      }
      while (v24 != 64);
      if (v24 >= v20)
      {
        v27 = *(_DWORD **)(a2 + 8);
        v26 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v27 >= v26)
        {
          v29 = *(_DWORD **)a2;
          v30 = ((uint64_t)v27 - *(_QWORD *)a2) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            sub_1D4D5DFA8();
          v32 = v26 - (_QWORD)v29;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)sub_1D4D5EA14(a2 + 16, v33);
            v29 = *(_DWORD **)a2;
            v27 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v30];
          *(_DWORD *)v35 = v23;
          v28 = v35 + 4;
          while (v27 != v29)
          {
            v36 = *--v27;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)a2 = v35;
          *(_QWORD *)(a2 + 8) = v28;
          *(_QWORD *)(a2 + 16) = &v34[4 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v27 = v23;
          v28 = v27 + 1;
        }
        *(_QWORD *)(a2 + 8) = v28;
        v22 = *a1;
        v21 = a1[1];
      }
      ++v23;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v21 - v22) >> 4) > v23);
    v19 = (char *)__p;
  }
  v39 = a2;
  v37 = *(_DWORD **)a2;
  v38 = *(_QWORD *)(v39 + 8);
  if (v19)
  {
    v42 = v19;
    operator delete(v19);
  }
  return (v38 - (uint64_t)v37) >> 2;
}

void sub_1D4DA3D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D4DA3D6C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  float v6;
  float v7;
  _BOOL8 v8;
  float v9;
  float v10;

  v2 = byte_1D4DB2A18[*(unsigned __int8 *)(a1 + 32)];
  v3 = byte_1D4DB2A18[*(unsigned __int8 *)(a2 + 32)];
  if (v2 != v3)
    return v2 > v3;
  v4 = *(unsigned __int16 *)(a1 + 72);
  v5 = *(unsigned __int16 *)(a2 + 72);
  if (v4 != v5)
    return (__int16)v4 > (__int16)v5;
  v6 = (float)(*(float *)(a1 + 44) * *(float *)(a1 + 44)) + (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40));
  v7 = (float)(*(float *)(a2 + 44) * *(float *)(a2 + 44)) + (float)(*(float *)(a2 + 40) * *(float *)(a2 + 40));
  v8 = v6 < v7;
  if (v6 == v7)
  {
    v9 = *(float *)(a1 + 28);
    v10 = *(float *)(a2 + 28);
    return v9 == v10 || v9 < v10;
  }
  return v8;
}

void sub_1D4DA3DFC(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t i;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  void *__p[3];

  v4 = a1;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v60 = 0;
  sub_1D4DA9F74(__p, v5, &v60);
  v7 = *v4;
  v6 = v4[1];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 4);
  if (v6 == *v4)
  {
    v57 = 0;
  }
  else
  {
    v9 = 0;
    v57 = 0;
    v58 = v4;
    v10 = a3 * a3;
    v11 = 80;
    v12 = 1;
    do
    {
      v13 = v7 + 80 * v9;
      v14 = *(float *)(v13 + 20);
      v15 = *(float *)(v13 + 24);
      v59 = v6;
      if (v9)
      {
        v16 = v11;
        v17 = __p[0];
        v18 = v12;
        while (1)
        {
          v19 = (v18 - 2);
          v20 = v7 + 80 * v19;
          v21 = *(float *)(v20 + 24);
          if (v21 < (float)(v15 - a3))
          {
LABEL_10:
            v23 = v9;
            goto LABEL_11;
          }
          if (!v17[v19])
          {
            v22 = v14 - *(float *)(v7 + 80 * v19 + 20);
            if ((float)((float)((float)(v15 - v21) * (float)(v15 - v21)) + (float)(v22 * v22)) < v10
              && sub_1D4DA3D6C(v20, v7 + 80 * v9))
            {
              break;
            }
          }
          if (--v18 <= 1)
            goto LABEL_10;
        }
        v23 = v18 - 2;
LABEL_11:
        v11 = v16;
        v4 = v58;
      }
      else
      {
        v23 = 0;
      }
      v24 = v23;
      v25 = v9 + 1;
      if (v23 == v9 && v8 > v25)
      {
        v56 = v11;
        v26 = __p[0];
        v27 = v7 + v11;
        for (i = v12; v8 != i; ++i)
        {
          v29 = *(float *)(v27 + 24);
          if (v29 > (float)(v15 + a3))
            break;
          if (!v26[i]
            && (float)((float)((float)(v15 - v29) * (float)(v15 - v29))
                     + (float)((float)(v14 - *(float *)(v27 + 20)) * (float)(v14 - *(float *)(v27 + 20)))) < v10
            && sub_1D4DA3D6C(v27, v7 + 80 * v9))
          {
            v24 = i;
            break;
          }
          v27 += 80;
        }
        v4 = v58;
        v25 = v9 + 1;
        v11 = v56;
      }
      if (v9 == v24)
      {
        v6 = v59;
      }
      else
      {
        *((_BYTE *)__p[0] + v9) = 1;
        ++v57;
        v7 = *v4;
        v6 = v4[1];
      }
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4);
      ++v12;
      v11 += 80;
      v9 = v25;
    }
    while (v8 > v25);
  }
  sub_1D4DA4204((void **)a2, v8 - v57);
  v31 = *v4;
  v30 = v4[1];
  if (v30 != *v4)
  {
    v32 = 0;
    do
    {
      if (!*((_BYTE *)__p[0] + v32))
      {
        v33 = (_OWORD *)(v31 + 80 * v32);
        v35 = *(_OWORD **)(a2 + 8);
        v34 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v35 >= v34)
        {
          v40 = *(_OWORD **)a2;
          v41 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v35 - *(_QWORD *)a2) >> 4);
          v42 = v41 + 1;
          if (v41 + 1 > 0x333333333333333)
            sub_1D4D5DFA8();
          v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (_QWORD)v40) >> 4);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x199999999999999)
            v44 = 0x333333333333333;
          else
            v44 = v42;
          if (v44)
          {
            v45 = (char *)sub_1D4DAA030(a2 + 16, v44);
            v40 = *(_OWORD **)a2;
            v35 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[80 * v41];
          *(_OWORD *)v46 = *v33;
          v47 = v33[1];
          v48 = v33[2];
          v49 = v33[4];
          *((_OWORD *)v46 + 3) = v33[3];
          *((_OWORD *)v46 + 4) = v49;
          *((_OWORD *)v46 + 1) = v47;
          *((_OWORD *)v46 + 2) = v48;
          if (v35 == v40)
          {
            v54 = &v45[80 * v41];
          }
          else
          {
            v50 = &v45[80 * v41];
            do
            {
              *((_OWORD *)v50 - 5) = *(v35 - 5);
              v51 = *(v35 - 4);
              v52 = *(v35 - 3);
              v53 = *(v35 - 1);
              v54 = v50 - 80;
              *((_OWORD *)v50 - 2) = *(v35 - 2);
              *((_OWORD *)v50 - 1) = v53;
              *((_OWORD *)v50 - 4) = v51;
              *((_OWORD *)v50 - 3) = v52;
              v35 -= 5;
              v50 -= 80;
            }
            while (v35 != v40);
          }
          v39 = v46 + 80;
          *(_QWORD *)a2 = v54;
          *(_QWORD *)(a2 + 8) = v46 + 80;
          *(_QWORD *)(a2 + 16) = &v45[80 * v44];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v35 = *v33;
          v36 = v33[1];
          v37 = v33[2];
          v38 = v33[4];
          v35[3] = v33[3];
          v35[4] = v38;
          v35[1] = v36;
          v35[2] = v37;
          v39 = v35 + 5;
        }
        *(_QWORD *)(a2 + 8) = v39;
        v31 = *v4;
        v30 = v4[1];
      }
      ++v32;
    }
    while (v32 < 0xCCCCCCCCCCCCCCCDLL * ((v30 - v31) >> 4));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D4DA41C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (__p)
    operator delete(__p);
  v18 = *(void **)a9;
  if (*(_QWORD *)a9)
  {
    *(_QWORD *)(a9 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4DA4204(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_1D4D5DFA8();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 80;
    v6 = (char *)sub_1D4DAA030(v3, a2);
    v7 = &v6[80 * v5];
    v9 = &v6[80 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 5) = *((_OWORD *)v10 - 5);
        v13 = *((_OWORD *)v10 - 4);
        v14 = *((_OWORD *)v10 - 3);
        v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 80;
        v10 -= 80;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unint64_t sub_1D4DA42E4(_QWORD *a1, _QWORD *a2, _QWORD *a3, int **a4, unint64_t a5, unint64_t a6, int a7, int a8, int *a9)
{
  unint64_t v16;
  unint64_t i;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  unint64_t j;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t k;
  int v42;
  unint64_t v43;
  int *v44;
  int *v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int *v52;
  int v53;
  unint64_t v54;
  int v56;
  void *__p[3];
  _DWORD v58[256];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a2[2])
    a2[2] = 0;
  if (a3[1] != *a3)
    a3[1] = *a3;
  if (a4[1] != *a4)
    a4[1] = *a4;
  sub_1D4DAA074(__p, a1[2]);
  v16 = a1[2];
  if (a8 > a7)
  {
    bzero(v58, 0x400uLL);
    if (v16)
    {
      for (i = 0; i < v16; ++i)
      {
        v18 = a1[1];
        v19 = (unsigned int *)(*a1 + a1[3] * i);
        if (v18)
          v20 = (v19 & 3) == 0;
        else
          v20 = 1;
        if (v20)
        {
          LODWORD(j) = 0;
          v23 = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          do
          {
            v24 = *((unsigned __int8 *)v19 + v22);
            if ((int)v24 >= a7)
            {
              if (v23 <= v24)
                v23 = *((_BYTE *)v19 + v22);
              ++v58[v24];
            }
            v25 = v22 + 1;
            if (v18 <= v22 + 1)
              break;
            v26 = (_BYTE)v19 + 1 + v22++;
          }
          while ((v26 & 3) != 0);
          v19 = (unsigned int *)((char *)v19 + v25);
          LODWORD(j) = v25;
        }
        for (; v18 - 4 > (int)j; LODWORD(j) = j + 4)
        {
          v28 = *v19++;
          v27 = v28;
          if (v28)
          {
            do
            {
              if (v27 >= a7)
              {
                if (v27 >= v23)
                  v23 = v27;
                ++v58[v27];
              }
              v29 = v27 >= 0x100;
              v27 >>= 8;
            }
            while (v29);
          }
        }
        for (j = (int)j; v18 > j; ++j)
        {
          v31 = *(unsigned __int8 *)v19;
          v19 = (unsigned int *)((char *)v19 + 1);
          v30 = v31;
          if (v31 >= a7)
          {
            if (v23 <= v30)
              v23 = v30;
            ++v58[v30];
          }
        }
        *((_BYTE *)__p[0] + i) = v23;
        v16 = a1[2];
      }
    }
    v32 = 0;
    v33 = 257;
    v34 = 255;
    do
    {
      v35 = v32;
      v32 += v58[v34];
      --v33;
      if (v34 <= a7)
        break;
      if ((unint64_t)(v34 + 1) < 2)
        break;
      --v34;
    }
    while (v32 < a5);
    a8 = v33 - 1;
    v37 = v32 > a6;
    v36 = v32 - a6;
    if (v37)
    {
      v37 = v36 <= (uint64_t)(a5 - v35) || (uint64_t)(a5 - v35) <= 0;
      if (!v37)
        a8 = v33;
    }
  }
  if (v16)
  {
    v56 = a5;
    v38 = 0;
    v39 = 0;
    do
    {
      if (a8 <= *((unsigned __int8 *)__p[0] + v38))
      {
        v40 = a1[1];
        if (v40)
        {
          for (k = 0; k < v40; ++k)
          {
            v42 = *(unsigned __int8 *)(*a1 + k + a1[3] * v38);
            if (a8 <= v42)
            {
              ++v39;
              if (a2[2] < a2[1])
              {
                sub_1D4DA4704(a2, (float)(int)k, (float)(int)v38);
                v44 = a4[1];
                v43 = (unint64_t)a4[2];
                if ((unint64_t)v44 >= v43)
                {
                  v46 = *a4;
                  v47 = v44 - *a4;
                  v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62)
                    sub_1D4D5DFA8();
                  v49 = v43 - (_QWORD)v46;
                  if (v49 >> 1 > v48)
                    v48 = v49 >> 1;
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                    v50 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v50 = v48;
                  if (v50)
                  {
                    v51 = (char *)sub_1D4D5EA14((uint64_t)(a4 + 2), v50);
                    v46 = *a4;
                    v44 = a4[1];
                  }
                  else
                  {
                    v51 = 0;
                  }
                  v52 = (int *)&v51[4 * v47];
                  *v52 = v42;
                  v45 = v52 + 1;
                  while (v44 != v46)
                  {
                    v53 = *--v44;
                    *--v52 = v53;
                  }
                  *a4 = v52;
                  a4[1] = v45;
                  a4[2] = (int *)&v51[4 * v50];
                  if (v46)
                    operator delete(v46);
                }
                else
                {
                  *v44 = v42;
                  v45 = v44 + 1;
                }
                a4[1] = v45;
                v40 = a1[1];
              }
            }
          }
          v16 = a1[2];
        }
      }
      ++v38;
    }
    while (v16 > v38);
    v54 = a2[1];
    if (v39 > v54)
      printf("count : %d > keypoints.capacity() : %d (maxFeatures: %d, minFeatures: %d)\n", v39, v54, a6, v56);
  }
  else
  {
    v39 = 0;
  }
  *a9 = a8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v39;
}

void sub_1D4DA46D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4DA4704(_QWORD *result, float a2, float a3)
{
  unint64_t v3;
  float *v4;
  std::logic_error *exception;

  v3 = result[2];
  if (v3 >= result[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  v4 = (float *)(*result + 8 * v3);
  *v4 = a2;
  v4[1] = a3;
  result[2] = v3 + 1;
  return result;
}

void sub_1D4DA476C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D4DA4780(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  double result;

  *(_QWORD *)a1 = a4;
  *(_BYTE *)(a1 + 112) = 0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 304) = *a2;
  *(_QWORD *)(a1 + 312) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  *(_QWORD *)(a1 + 320) = *a3;
  *(_QWORD *)(a1 + 328) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 336) = *a2 + 56;
  *(_QWORD *)(a1 + 344) = *a3 + 56;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(int32x2_t *)(a1 + 268) = vrev64_s32(*(int32x2_t *)(*a2 + 20));
  *(_QWORD *)(a1 + 296) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 100) = result;
  *(_DWORD *)(a1 + 108) = -1082130432;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_1D4DA483C(uint64_t a1)
{
  uint64_t v1;
  const double *v2;
  const double *v3;
  const double *v4;
  const double *v5;
  const double *v6;
  const double *v7;
  const double *v8;
  const double *v9;
  float64x2_t v10;
  const double *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v23;
  const double *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  unint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v38;
  int v39;
  unsigned int v40;
  float v41;
  uint64_t i;
  double v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  double v52[16];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  float64x2x3_t v61;

  v1 = 0;
  v60 = *MEMORY[0x1E0C80C00];
  v53 = xmmword_1D4DB2B18;
  v55 = xmmword_1D4DB2B50;
  v56 = xmmword_1D4DB16B0;
  v57 = xmmword_1D4DB2B60;
  v58 = xmmword_1D4DB2B70;
  v54 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v2 = (const double *)(a1 + 256);
  v3 = (const double *)(a1 + 192);
  v4 = (const double *)(a1 + 248);
  v5 = (const double *)(a1 + 240);
  v6 = (const double *)(a1 + 232);
  v7 = (const double *)(a1 + 224);
  v8 = (const double *)(a1 + 216);
  v9 = (const double *)(a1 + 200);
  v10 = vld1q_dup_f64(v9);
  v11 = (const double *)(a1 + 208);
  v12 = vld1q_dup_f64(v3);
  v13 = vld1q_dup_f64(v11);
  v14 = vld1q_dup_f64(v7);
  v15 = vld1q_dup_f64(v8);
  v16 = vld1q_dup_f64(v6);
  v17 = vld1q_dup_f64(v4);
  v18 = vld1q_dup_f64(v5);
  __asm { FMOV            V18.2D, #1.0 }
  v23 = vld1q_dup_f64(v2);
  do
  {
    v24 = (const double *)((char *)&v53 + v1 * 8);
    v61 = vld3q_f64(v24);
    v25 = vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[1], v17), v61.val[0], v18), v61.val[2], v23);
    v26 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v10, v61.val[1]), v61.val[0], v12), v61.val[2], v13), v25);
    v27 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[1], v14), v61.val[0], v15), v61.val[2], v16), v25);
    v28 = &v52[v1 + 4];
    vst3q_f64(v28, *(float64x2x3_t *)(&_Q18 - 2));
    v1 += 6;
  }
  while (v1 != 12);
  v29 = 0;
  v30 = 0;
  v31 = 1;
  do
  {
    v32 = 0;
    v34 = 0.0;
    v35 = 1.0e11;
    do
    {
      v33 = (double *)&v53 + 3 * v30;
      v36 = sqrt((v33[1] - v52[v32 / 8 + 5]) * (v33[1] - v52[v32 / 8 + 5])+ (*v33 - v52[v32 / 8 + 4]) * (*v33 - v52[v32 / 8 + 4]));
      if (v35 >= v36 && v29 != v32)
        v35 = v36;
      if (v29 == v32)
        v34 = v36;
      v32 += 24;
    }
    while (v32 != 96);
    v52[v30] = v34;
    if (v35 < v34)
      break;
    v31 = v30 < 3;
    v29 += 24;
    ++v30;
  }
  while (v30 != 4);
  v38 = 0;
  v39 = 0;
  do
    v39 |= v52[v38++] > 324.0;
  while (v38 != 4);
  v40 = 0;
  v41 = v52[0];
  for (i = 1; i != 4; ++i)
  {
    v43 = v52[i];
    if (v43 > v41)
    {
      v40 = i;
      v44 = v43;
      v41 = v44;
    }
  }
  v45 = 0;
  v46 = 8 * v40;
  v47 = 0.0;
  do
  {
    if (v46 != v45)
      v47 = v52[v45 / 8] + v47;
    v45 += 8;
  }
  while (v45 != 32);
  v48 = (v31 | v39) ^ 1;
  v49 = v41 <= 384.0;
  if (v41 <= v47)
    v49 = 1;
  v50 = v49 & v48;
  *(_BYTE *)(a1 + 264) = v50;
  return v50;
}

double sub_1D4DA4AD8(_QWORD *a1, float a2)
{
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1D4DA3DFC(a1 + 44, (uint64_t)&v5, a2);
  v3 = (void *)a1[47];
  if (v3)
  {
    a1[48] = v3;
    operator delete(v3);
  }
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 47) = v5;
  a1[49] = v6;
  return result;
}

void sub_1D4DA4B30(uint64_t a1)
{
  int v2;
  __n128 v3;
  __int128 *v4;
  __n128 *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL (*v8)(uint64_t, uint64_t);

  v2 = *(_DWORD *)(a1 + 120);
  if (v2 <= *(_DWORD *)(a1 + 116))
    v2 = *(_DWORD *)(a1 + 116);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  sub_1D4DA4BC8(a1, a1 + 352, *(float *)(a1 + 80), (float)*(unsigned int *)(a1 + 84), *(float *)(a1 + 88) * (float)v2);
  v4 = *(__int128 **)(a1 + 352);
  v5 = *(__n128 **)(a1 + 360);
  v6 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (char *)v4) >> 4));
  v8 = sub_1D4DA3A38;
  if (v5 == (__n128 *)v4)
    v7 = 0;
  else
    v7 = v6;
  sub_1D4DA8A48(v4, v5, (uint64_t (**)(__int128 *, __int128 *))&v8, v7, 1, v3);
}

void sub_1D4DA4BC8(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  unint64_t v10;
  qos_class_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD block[6];
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  uint64_t v25[3];
  void **v26;

  v10 = (*(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 268));
  v20 = 0;
  v21 = &v20;
  v22 = 0x4002000000;
  v23 = sub_1D4DA5820;
  v24 = sub_1D4DA5844;
  memset(v25, 0, sizeof(v25));
  sub_1D4DA586C(v25, v10);
  v11 = qos_class_self();
  v12 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], v11, 0);
  v13 = dispatch_queue_create("feature match queue", v12);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1D4DA5900;
  block[3] = &unk_1E988B628;
  block[4] = &v20;
  block[5] = a1;
  v17 = a5;
  v18 = a4;
  v19 = a3;
  dispatch_apply(v10, v13, block);
  dispatch_release(v13);
  if ((_DWORD)v10)
  {
    v14 = 0;
    v15 = 24 * v10;
    do
    {
      sub_1D4DAA428(a2, *(_QWORD *)(a2 + 8), *(char **)(v21[5] + v14), *(char **)(v21[5] + v14 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v21[5] + v14 + 8) - *(_QWORD *)(v21[5] + v14)) >> 4));
      v14 += 24;
    }
    while (v15 != v14);
  }
  _Block_object_dispose(&v20, 8);
  v26 = (void **)v25;
  sub_1D4D60C20(&v26);
}

void sub_1D4DA4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v11 - 88) = v10;
  sub_1D4D60C20((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

void sub_1D4DA4D78(int a1, uint64_t *a2, float *a3)
{
  uint64_t v5;
  unint64_t v6;
  float *v7;
  double v8;
  double *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  double *v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double *v30;
  float v31;
  float v32;
  double v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  float v40;
  float v41;
  double v42;
  uint64_t v43;
  double *v44;
  double v45;
  float v46;
  double *v47;
  double *v48;
  double *v49;
  void *__p;
  double *v51;
  char *v52;

  __p = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  bzero(a3, 0x14uLL);
  sub_1D4D78B88(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v7 = (float *)(v5 + 80 * v6);
      v8 = sqrtf((float)((float)(v7[4] - v7[6]) * (float)(v7[4] - v7[6]))+ (float)((float)(v7[3] - v7[5]) * (float)(v7[3] - v7[5])));
      v9 = v51;
      if (v51 >= (double *)v52)
      {
        v11 = (double *)__p;
        v12 = ((char *)v51 - (_BYTE *)__p) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          sub_1D4D5DFA8();
        v14 = v52 - (_BYTE *)__p;
        if ((v52 - (_BYTE *)__p) >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_1D4D5E2CC((uint64_t)&v52, v15);
          v11 = (double *)__p;
          v9 = v51;
        }
        else
        {
          v16 = 0;
        }
        v17 = (double *)&v16[8 * v12];
        *v17 = v8;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9-- - 1);
          *((_QWORD *)v17-- - 1) = v18;
        }
        __p = v17;
        v51 = v10;
        v52 = &v16[8 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v51 = v8;
        v10 = v9 + 1;
      }
      v51 = v10;
      v5 = *a2;
      if ((*(_BYTE *)(*a2 + 80 * v6 + 32) & 3) != 0)
      {
        v19 = v48;
        if (v48 >= v49)
        {
          v21 = v47;
          v22 = v48 - v47;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_1D4D5DFA8();
          v24 = (char *)v49 - (char *)v47;
          if (((char *)v49 - (char *)v47) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)sub_1D4D5E2CC((uint64_t)&v49, v25);
            v21 = v47;
            v19 = v48;
          }
          else
          {
            v26 = 0;
          }
          v27 = (double *)&v26[8 * v22];
          *v27 = v8;
          v20 = v27 + 1;
          while (v19 != v21)
          {
            v28 = *((_QWORD *)v19-- - 1);
            *((_QWORD *)v27-- - 1) = v28;
          }
          v47 = v27;
          v49 = (double *)&v26[8 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v48 = v8;
          v20 = v48 + 1;
        }
        v48 = v20;
        v5 = *a2;
      }
      ++v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v5) >> 4) > v6);
  }
  v29 = v51;
  if (v51 != __p)
  {
    std::__sort<std::__less<double,double> &,double *>();
    v29 = (double *)__p;
    v30 = v51;
    v31 = *(double *)__p;
    *a3 = v31;
    v32 = *(v30 - 1);
    a3[3] = v32;
    v33 = 0.0;
    v34 = 0.0;
    v35 = v30 - v29;
    if (v30 != v29)
    {
      if (v35 <= 1)
        v36 = 1;
      else
        v36 = v30 - v29;
      v37 = v29;
      do
      {
        v38 = *v37++;
        v34 = v34 + v38;
        --v36;
      }
      while (v36);
    }
    v39 = (double)v35;
    v40 = v34 / (double)v35;
    a3[1] = v40;
    v41 = *(double *)((char *)v29 + ((4 * v35) & 0xFFFFFFFFFFFFFFF8));
    a3[2] = v41;
    if (v30 != v29)
    {
      v42 = v40;
      if (v35 <= 1)
        v43 = 1;
      else
        v43 = v30 - v29;
      v33 = 0.0;
      v44 = v29;
      do
      {
        v45 = *v44++;
        v33 = v33 + (v45 - v42) * (v45 - v42);
        --v43;
      }
      while (v43);
    }
    v46 = sqrt(v33 / v39);
    a3[4] = v46;
  }
  if (v47)
  {
    operator delete(v47);
    v29 = (double *)__p;
  }
  if (v29)
  {
    v51 = v29;
    operator delete(v29);
  }
}

void sub_1D4DA50C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

float sub_1D4DA5108(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t i;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  float v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  float v28;
  _QWORD v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  *(_BYTE *)(a1 + 264) = 0;
  sub_1D4DA53DC(a1);
  sub_1D4DA5488(a1, (uint64_t *)(a1 + 376), *(float *)(*(_QWORD *)(a1 + 304) + 16), *(float *)(*(_QWORD *)(a1 + 320) + 16));
  if (*(_BYTE *)(a1 + 264) && (v4 = sub_1D4DA483C(a1), *(_BYTE *)(a1 + 264) = v4, (v4 & 1) != 0))
  {
    for (i = 0; i != 72; i += 8)
      *(_QWORD *)(a2 + i) = *(_QWORD *)(a1 + 192 + i);
  }
  else
  {
    *(_QWORD *)(a1 + 192) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = *(std::__shared_weak_count **)(a1 + 312);
    v34 = *(_QWORD *)(a1 + 304);
    v35 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = *(std::__shared_weak_count **)(a1 + 328);
    v33[0] = *(_QWORD *)(a1 + 320);
    v33[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
    if (*(float *)(a1 + 108) < v12)
      v12 = *(float *)(a1 + 108);
    sub_1D4DA27CC(&v36, a1 + 136, &v34, (uint64_t)v33, a1 + 192, (uint64_t *)(a1 + 352), *(_QWORD **)(a1 + 296), v12);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v15 = v35;
    if (v35)
    {
      v16 = (unint64_t *)&v35->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_41;
    }
  }
  else
  {
    v18 = *(std::__shared_weak_count **)(a1 + 312);
    v31 = *(_QWORD *)(a1 + 304);
    v32 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(std::__shared_weak_count **)(a1 + 328);
    v30[0] = *(_QWORD *)(a1 + 320);
    v30[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
    if (*(float *)(a1 + 108) < v24)
      v24 = *(float *)(a1 + 108);
    sub_1D4DA31A4((char **)&v36, a1 + 136, &v31, (uint64_t)v30, a1 + 192, (uint64_t *)(a1 + 352), *(_QWORD **)(a1 + 296), v24);
    if (v21)
    {
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v15 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(v27);
      while (__stlxr(v17 - 1, v27));
LABEL_41:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v28 = sub_1D4DA5780(a1);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  return v28;
}

void sub_1D4DA5390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D4D6C1D0((uint64_t)va);
  sub_1D4D6C1D0((uint64_t)va1);
  v4 = *(void **)(v2 - 56);
  if (v4)
  {
    *(_QWORD *)(v2 - 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1D4DA53DC(uint64_t a1)
{
  int v2;
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  sub_1D4DA5D50(a1);
  sub_1D4DA4AD8((_QWORD *)a1, *(float *)(a1 + 92));
  sub_1D4DA4D78(v2, (uint64_t *)(a1 + 376), (float *)(a1 + 276));
  v4 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 376);
    v6 = *(_QWORD *)(a1 + 384);
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4);
    if (v7 > v4)
    {
      v8 = 126 - 2 * __clz(v7);
      if (v6 == v5)
        v9 = 0;
      else
        v9 = v8;
      sub_1D4DAA7BC(v5, (__n128 *)(v5 + 16 * ((v6 - v5) >> 4)), (uint64_t)&v11, v9, 1, v3);
      v10 = *(_QWORD *)(a1 + 376) + 80 * *(unsigned int *)(a1 + 96);
      if (v10 != *(_QWORD *)(a1 + 384))
        *(_QWORD *)(a1 + 384) = v10;
    }
  }
}

BOOL sub_1D4DA5488(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float32x2_t *v12;
  float32x2_t *v13;
  _OWORD *v14;
  uint64_t v15;
  float32x2_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  float v20;
  _BOOL8 v21;
  _BOOL8 v22;
  uint64_t i;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28[3];
  void *v29[3];
  void *v30[3];
  float v31[9];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a2 + 1;
  sub_1D4DAA0E4(v30, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  sub_1D4D844A0(v29, 0x999999999999999ALL * ((*v8 - *a2) >> 4));
  sub_1D4D844A0(v28, 0x999999999999999ALL * ((a2[1] - *a2) >> 4));
  v9 = *a2;
  if (a2[1] != *a2)
  {
    v10 = 0;
    v11 = 0;
    v12 = (float32x2_t *)v29[0];
    v13 = (float32x2_t *)v28[0];
    v14 = v30[0];
    do
    {
      v15 = v9 + v10;
      v16 = *(float32x2_t *)(v15 + 20);
      v12[v11] = vmul_n_f32(*(float32x2_t *)(v15 + 12), 1.0 / a3);
      v13[v11] = vmul_n_f32(v16, 1.0 / a4);
      v17 = *(_OWORD *)(v15 + 32);
      v18 = *(_OWORD *)(v15 + 64);
      v14[1] = *(_OWORD *)(v15 + 48);
      v14[2] = v18;
      *v14 = v17;
      v14 += 3;
      ++v11;
      v9 = *a2;
      v10 += 80;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4) > v11);
  }
  sub_1D4DA1F48(*(uint64_t **)a1, *(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 120));
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_1D4D72500(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  v19 = sub_1D4DA3A4C((uint64_t *)(a1 + 376), (uint64_t)&__p);
  sub_1D4DA1F54(*(_QWORD *)a1, (uint64_t)v30[0]);
  sub_1D4DA1F60(*(uint64_t **)a1, v19, (uint64_t)__p);
  sub_1D4DA1F70(*(_QWORD *)a1, 1600);
  v20 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
  if (*(float *)(a1 + 108) < v20)
    v20 = *(float *)(a1 + 108);
  sub_1D4DA1F7C(*(_QWORD *)a1, v20);
  v21 = sub_1D4DA1F88(*(uint64_t **)a1, (uint64_t)v29[0], (uint64_t)v28[0], -858993459 * ((unint64_t)(a2[1] - *a2) >> 4), (uint64_t)v31);
  v22 = v21;
  if (v21)
  {
    for (i = 0; i != 9; ++i)
      *(double *)(a1 + 192 + 8 * i) = v31[i];
  }
  *(_BYTE *)(a1 + 264) = v21;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return v22;
}

void sub_1D4DA570C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

float sub_1D4DA5780(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  float v5;
  float v6;
  unsigned int v7;
  float v8;

  v2 = *(_DWORD *)(a1 + 148);
  if (v2)
    v3 = 0;
  else
    v3 = **(_QWORD **)(a1 + 304) == 1;
  if (v3 && **(_QWORD **)(a1 + 320) == 0)
  {
    v2 = *(_DWORD *)(a1 + 140);
    v8 = (double)v2 * -0.01;
    v6 = __exp10f(v8);
    v7 = *(_DWORD *)(a1 + 136);
  }
  else
  {
    v5 = (double)v2 * -0.01;
    v6 = __exp10f(v5);
    v7 = *(_DWORD *)(a1 + 144) + 1;
  }
  return sqrtf((float)(1.0 - v6) * (float)((float)v2 / (float)v7));
}

__n128 sub_1D4DA5820(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_1D4DA5844(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_1D4D60C20(&v1);
}

void sub_1D4DA586C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D4DAA17C(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1D4DA5900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int8x16_t **v8;
  _QWORD *v9;
  void *v11;
  unint64_t v12;
  char **v13;
  unint64_t v14;
  char **v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  char **v45;
  _QWORD *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = **(_QWORD **)(v2 + 336);
  v4 = v3 + 296 * a2;
  if (*(_QWORD *)(v4 + 216))
  {
    v6 = **(_QWORD **)(v2 + 344);
    if (*(_QWORD *)(v6 + 296 * a2 + 216))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v8 = (int8x16_t **)(v4 + 200);
      v9 = (_QWORD *)(v6 + 296 * a2 + 200);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      __p = 0;
      v48 = 0;
      v49 = 0;
      sub_1D4D83C18((_QWORD *)(v4 + 200), v9, (_QWORD *)(v3 + 296 * a2 + 32), (_QWORD *)(v6 + 296 * a2 + 32), *(float *)(a1 + 52), (uint64_t)&v50, *(float *)(a1 + 48));
      sub_1D4D83EC8(v8, v9, (uint64_t *)(**(_QWORD **)(v2 + 336) + 296 * a2 + 32), (_QWORD *)(**(_QWORD **)(v2 + 344) + 296 * a2 + 32), *(float *)(a1 + 48), *(float *)(a1 + 52), (uint64_t *)&v50, (uint64_t)&__p);
      v11 = v48;
      if (v48 != __p)
      {
        v12 = 0;
        v13 = (char **)(v7 + 24 * a2);
        v14 = ((_BYTE *)v48 - (_BYTE *)__p) >> 4;
        v15 = v13 + 1;
        v45 = v13;
        v46 = v13 + 2;
        if (v14 <= 1)
          v14 = 1;
        v44 = v14;
        v16 = a1;
        do
        {
          if (v12 >= ((_BYTE *)v48 - (_BYTE *)__p) >> 4)
            sub_1D4D5DDC8();
          v17 = (int *)((char *)__p + 16 * v12);
          v18 = *v17;
          v19 = v17[1];
          v20 = v17[3];
          v21 = *(float *)(v16 + 56);
          if (v21 < 0.0)
            goto LABEL_20;
          v22 = **(_QWORD **)(v2 + 336) + 296 * a2;
          v23 = *(_QWORD *)(v22 + 176);
          v24 = 0.0;
          v25 = 0.0;
          v26 = *(_QWORD *)(v22 + 184) - v23;
          if (v26)
          {
            if (v18 >= (unint64_t)(v26 >> 2))
              goto LABEL_45;
            v25 = *(float *)(v23 + 4 * v18);
          }
          v27 = **(_QWORD **)(v2 + 344) + 296 * a2;
          v28 = *(_QWORD *)(v27 + 176);
          v29 = *(_QWORD *)(v27 + 184) - v28;
          if (v29)
          {
            if (v19 >= (unint64_t)(v29 >> 2))
LABEL_45:
              sub_1D4D5DDC8();
            v24 = *(float *)(v28 + 4 * v19);
          }
          v30 = v25 - v24;
          if (v30 < 0.0)
            v30 = -v30;
          if (v30 > 180.0)
            v30 = 360.0 - v30;
          if (v30 <= v21)
          {
LABEL_20:
            v31 = *v15;
            if ((unint64_t)*v15 >= *v46)
            {
              v33 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - *v13) >> 4);
              v34 = v33 + 1;
              if (v33 + 1 > 0x333333333333333)
                sub_1D4D5DFA8();
              if (0x999999999999999ALL * ((uint64_t)(*v46 - (_QWORD)*v13) >> 4) > v34)
                v34 = 0x999999999999999ALL * ((uint64_t)(*v46 - (_QWORD)*v13) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v46 - (_QWORD)*v13) >> 4) >= 0x199999999999999)
                v35 = 0x333333333333333;
              else
                v35 = v34;
              if (v35)
                v36 = (char *)sub_1D4DAA030((uint64_t)v46, v35);
              else
                v36 = 0;
              v37 = &v36[80 * v33];
              *((_OWORD *)v37 + 3) = 0u;
              *((_OWORD *)v37 + 4) = 0u;
              *((_OWORD *)v37 + 1) = 0u;
              *((_OWORD *)v37 + 2) = 0u;
              *(_OWORD *)v37 = 0u;
              v38 = *v15;
              v39 = *v45;
              v40 = v37;
              if (*v15 != *v45)
              {
                do
                {
                  *((_OWORD *)v40 - 5) = *((_OWORD *)v38 - 5);
                  v41 = *((_OWORD *)v38 - 4);
                  v42 = *((_OWORD *)v38 - 3);
                  v43 = *((_OWORD *)v38 - 1);
                  *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
                  *((_OWORD *)v40 - 1) = v43;
                  *((_OWORD *)v40 - 4) = v41;
                  *((_OWORD *)v40 - 3) = v42;
                  v40 -= 80;
                  v38 -= 80;
                }
                while (v38 != v39);
                v38 = *v45;
              }
              *v45 = v40;
              v32 = v37 + 80;
              *v15 = v37 + 80;
              *v46 = &v36[80 * v35];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *((_OWORD *)v31 + 3) = 0u;
              *((_OWORD *)v31 + 4) = 0u;
              *((_OWORD *)v31 + 1) = 0u;
              *((_OWORD *)v31 + 2) = 0u;
              v32 = v31 + 80;
              *(_OWORD *)v31 = 0u;
            }
            *v15 = v32;
            *(_QWORD *)(v32 - 68) = *(_QWORD *)sub_1D4DA23C4((_QWORD *)(**(_QWORD **)(v2 + 336) + 296 * a2 + 32), v18);
            *(_QWORD *)(v32 - 60) = *(_QWORD *)sub_1D4DA23C4((_QWORD *)(**(_QWORD **)(v2 + 344) + 296 * a2 + 32), v19);
            *((_DWORD *)v32 - 13) = v20;
            bzero(v32 - 48, 0x30uLL);
            *((_DWORD *)v32 - 19) = v18;
            *((_DWORD *)v32 - 18) = v19;
            *((_DWORD *)v32 - 20) = a2;
            v16 = a1;
            v13 = v45;
          }
          ++v12;
        }
        while (v12 != v44);
        v11 = __p;
      }
      if (v11)
      {
        v48 = v11;
        operator delete(v11);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
    }
  }
}

void sub_1D4DA5D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

__n128 sub_1D4DA5D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v1 = *(_QWORD *)(a1 + 352);
  if (*(_QWORD *)(a1 + 360) != v1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (int *)(v1 + v2);
      v5 = v4[2];
      v6 = **(_QWORD **)(a1 + 344) + 296 * *v4;
      v7 = *(_QWORD *)(v6 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 280) - v7) >> 4) <= v5)
        sub_1D4D5DDC8();
      v8 = v7 + 48 * (int)v5;
      result = *(__n128 *)v8;
      v10 = *(_OWORD *)(v8 + 32);
      *((_OWORD *)v4 + 3) = *(_OWORD *)(v8 + 16);
      *((_OWORD *)v4 + 4) = v10;
      *((__n128 *)v4 + 2) = result;
      ++v3;
      v1 = *(_QWORD *)(a1 + 352);
      v2 += 80;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 360) - v1) >> 4) > v3);
  }
  return result;
}

uint64_t sub_1D4DA5DF8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 52);
}

__n128 sub_1D4DA5E04(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a1 + 136);
  v3 = *(_OWORD *)(a1 + 152);
  v4 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void sub_1D4DA5E24(uint64_t a1@<X0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __CVBuffer *v14;
  unsigned int *v15;
  unsigned int v16;
  __CVBuffer *v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  int32_t divisor;
  size_t v23;
  int8x16_t v24;
  size_t v25;
  __CVBuffer *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __CVBuffer *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __CVBuffer *v43;
  void *Attachment;
  _BOOL4 v45;
  __CVBuffer *v46;
  char *v47;
  qos_class_t v48;
  NSObject *v49;
  NSObject *v50;
  _BYTE *v51;
  int v52;
  int v53;
  __CVBuffer *v54;
  unsigned int *v55;
  unsigned int v56;
  void **v57;
  __CVBuffer *v58;
  unsigned int *v59;
  unsigned int v60;
  __CVBuffer *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  __CVBuffer *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  __CVBuffer *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  __CVBuffer *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  void **v77;
  __CVBuffer *v78;
  unsigned int *v79;
  unsigned int v80;
  __CVBuffer *v81;
  unsigned int *v82;
  unsigned int v83;
  char *v84;
  char *v85;
  size_t v86;
  size_t v87;
  __CVBuffer *v88;
  unsigned int *v89;
  unsigned int v90;
  _QWORD *v91;
  __CVBuffer *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  __CVBuffer *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  __CVBuffer *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  _DWORD *v105;
  uint64_t *v106;
  unsigned int *v107;
  uint64_t v108;
  vImagePixelCount height;
  uint64_t v110;
  __int128 v111;
  _OWORD *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[24];
  _QWORD v123[10];
  int v124;
  _QWORD v125[5];
  _QWORD v126[5];
  vImage_Buffer v127;
  void (*v128)(uint64_t);
  uint64_t v129[3];
  vImage_Buffer dest;
  vImage_Buffer kernel;
  uint64_t v132;

  v9 = a1;
  v132 = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  v12 = a3[1];
  if (a2)
  {
    v13 = sub_1D4D7DA90(a4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v14 = (__CVBuffer *)v13[6];
    if (v14)
    {
      CVPixelBufferLockBaseAddress(v14, 0);
      v15 = (unsigned int *)(v13 + 7);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      *v13 = (char *)v13[5] + (_QWORD)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v13[6], 0);
    }
    v17 = *(__CVBuffer **)(v9 + 48);
    if (v17)
    {
      CVPixelBufferLockBaseAddress(v17, 0);
      v18 = (unsigned int *)(v9 + 56);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v9 + 48), 0) + *(_QWORD *)(v9 + 40);
      *(_QWORD *)v9 = v20;
    }
    else
    {
      v20 = *(char **)v9;
    }
    v21 = 0;
    divisor = 0;
    *(int8x16_t *)&v127.height = vextq_s8(*(int8x16_t *)(v9 + 8), *(int8x16_t *)(v9 + 8), 8uLL);
    v23 = *(_QWORD *)(v9 + 24);
    v127.data = v20;
    v127.rowBytes = v23;
    v24 = vextq_s8(*(int8x16_t *)(v13 + 1), *(int8x16_t *)(v13 + 1), 8uLL);
    v25 = (size_t)v13[3];
    dest.data = *v13;
    dest.rowBytes = v25;
    *(int8x16_t *)&dest.height = v24;
    *(_OWORD *)&kernel.data = xmmword_1D4DB2B30;
    LOWORD(kernel.width) = 3;
    do
    {
      divisor += *(__int16 *)((char *)&kernel.data + v21);
      v21 += 2;
    }
    while (v21 != 18);
    vImageConvolve_Planar8(&v127, &dest, 0, 0, 0, (const int16_t *)&kernel, 3u, 3u, divisor, 0, 8u);
    v26 = *(__CVBuffer **)(v9 + 48);
    if (v26)
    {
      CVPixelBufferUnlockBaseAddress(v26, 0);
      v27 = (unsigned int *)(v9 + 56);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
        *(_QWORD *)v9 = 0;
    }
    v30 = (__CVBuffer *)v13[6];
    if (v30)
    {
      CVPixelBufferUnlockBaseAddress(v30, 0);
      v31 = (unsigned int *)(v13 + 7);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        *v13 = 0;
    }
    v9 = (uint64_t)v13;
  }
  else
  {
    v13 = 0;
  }
  v120 = v12;
  v121 = v11;
  v34 = (v12 * v11);
  v127.data = 0;
  v127.height = (vImagePixelCount)&v127;
  v127.width = 0x4002000000;
  v127.rowBytes = (size_t)sub_1D4DA6820;
  v128 = sub_1D4DA6844;
  memset(v129, 0, sizeof(v129));
  v118 = v129;
  sub_1D4DA686C(v129, v34);
  v117 = &v115;
  MEMORY[0x1E0C80A78](v35);
  v36 = &v115 - 4 * v34;
  sub_1D4D808C8(v36, v34, a3[2], v37, v38, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
  if ((_DWORD)v34)
  {
    v39 = 0;
    do
    {
      v40 = (_OWORD *)(*(_QWORD *)(v127.height + 40) + v39);
      v41 = *(_OWORD *)v36;
      v42 = *((_OWORD *)v36 + 1);
      v36 += 4;
      *v40 = v41;
      v40[1] = v42;
      v39 += 296;
    }
    while (296 * v34 != v39);
  }
  v43 = *(__CVBuffer **)(v9 + 48);
  if (v43
    && ((Attachment = (void *)CVBufferGetAttachment(v43, CFSTR("metalOpHandle"), 0)) == 0
     || (v45 = sub_1D4D6FB8C(Attachment),
         CVBufferRemoveAttachment(*(CVBufferRef *)(v9 + 48), CFSTR("metalOpHandle")),
         v45))
    && (v46 = (__CVBuffer *)CVBufferGetAttachment(*(CVBufferRef *)(v9 + 48), CFSTR("fast9"), 0)) != 0)
  {
    v47 = (char *)sub_1D4D98E38(v46);
    CVBufferRemoveAttachment(*(CVBufferRef *)(v9 + 48), CFSTR("fast9"));
  }
  else
  {
    v47 = 0;
  }
  v119 = a3;
  v116 = a5;
  v48 = qos_class_self();
  v49 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], v48, 0);
  v50 = dispatch_queue_create("feature match queue", v49);
  v51 = (_BYTE *)operator new();
  sub_1D4D99528((uint64_t)v51);
  v51[8] = 5;
  v52 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v51 + 32))(v51);
  if (v47)
    v53 = 0;
  else
    v53 = v52;
  if (v53 == 1)
  {
    v47 = (char *)sub_1D4D7DA90(a4, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
    v54 = (__CVBuffer *)*((_QWORD *)v47 + 6);
    if (v54)
    {
      CVPixelBufferLockBaseAddress(v54, 0);
      v55 = (unsigned int *)(v47 + 56);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 + 1, v55));
      *(_QWORD *)v47 = (char *)CVPixelBufferGetBaseAddressOfPlane(*((CVPixelBufferRef *)v47 + 6), 0)
                     + *((_QWORD *)v47 + 5);
    }
    sub_1D4D98D60((uint64_t)v47);
    v57 = sub_1D4D7DA90(a4, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
    v58 = (__CVBuffer *)v57[6];
    if (v58)
    {
      CVPixelBufferLockBaseAddress(v58, 0);
      v59 = (unsigned int *)(v57 + 7);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 + 1, v59));
      *v57 = (char *)v57[5] + (_QWORD)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v57[6], 0);
    }
    sub_1D4D98D60((uint64_t)v57);
    v61 = *(__CVBuffer **)(v9 + 48);
    if (v61)
    {
      CVPixelBufferLockBaseAddress(v61, 0);
      v62 = (unsigned int *)(v9 + 56);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
      *(_QWORD *)v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v9 + 48), 0)
                    + *(_QWORD *)(v9 + 40);
    }
    v64 = MEMORY[0x1E0C809B0];
    v126[0] = MEMORY[0x1E0C809B0];
    v126[1] = 0x40000000;
    v126[2] = sub_1D4DA69A4;
    v126[3] = &unk_1E988B648;
    v126[4] = v51;
    sub_1D4DA6904(v50, 3, v9, (uint64_t)v57, (uint64_t)v126);
    v125[0] = v64;
    v125[1] = 0x40000000;
    v125[2] = sub_1D4DA69B4;
    v125[3] = &unk_1E988B668;
    v125[4] = v51;
    sub_1D4DA6904(v50, 2, (uint64_t)v57, (uint64_t)v47, (uint64_t)v125);
    v65 = *(__CVBuffer **)(v9 + 48);
    if (v65)
    {
      CVPixelBufferUnlockBaseAddress(v65, 0);
      v66 = (unsigned int *)(v9 + 56);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
        *(_QWORD *)v9 = 0;
    }
    v69 = (__CVBuffer *)v57[6];
    if (v69)
    {
      CVPixelBufferUnlockBaseAddress(v69, 0);
      v70 = (unsigned int *)(v57 + 7);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
        *v57 = 0;
    }
    v73 = (__CVBuffer *)*((_QWORD *)v47 + 6);
    if (v73)
    {
      CVPixelBufferUnlockBaseAddress(v73, 0);
      v74 = (unsigned int *)(v47 + 56);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
        *(_QWORD *)v47 = 0;
    }
    sub_1D4D7DB18(a4, v57);
  }
  v77 = sub_1D4D7DA90(a4, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
  v78 = *(__CVBuffer **)(v9 + 48);
  if (v78)
  {
    CVPixelBufferLockBaseAddress(v78, 0);
    v79 = (unsigned int *)(v9 + 56);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 + 1, v79));
    *(_QWORD *)v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v9 + 48), 0)
                  + *(_QWORD *)(v9 + 40);
  }
  v81 = (__CVBuffer *)v77[6];
  if (v81)
  {
    CVPixelBufferLockBaseAddress(v81, 0);
    v82 = (unsigned int *)(v77 + 7);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
    v84 = (char *)v77[5] + (_QWORD)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v77[6], 0);
    *v77 = v84;
  }
  else
  {
    v84 = (char *)*v77;
  }
  v85 = *(char **)v9;
  *(int8x16_t *)&dest.height = vextq_s8(*(int8x16_t *)(v9 + 8), *(int8x16_t *)(v9 + 8), 8uLL);
  v86 = *(_QWORD *)(v9 + 24);
  dest.data = v85;
  dest.rowBytes = v86;
  *(int8x16_t *)&kernel.height = vextq_s8(*(int8x16_t *)(v77 + 1), *(int8x16_t *)(v77 + 1), 8uLL);
  v87 = (size_t)v77[3];
  kernel.data = v84;
  kernel.rowBytes = v87;
  vImageBoxConvolve_Planar8(&dest, &kernel, 0, 0, 0, 5u, 5u, 0, 2u);
  if (v47)
  {
    v88 = (__CVBuffer *)*((_QWORD *)v47 + 6);
    if (v88)
    {
      CVPixelBufferLockBaseAddress(v88, 0);
      v89 = (unsigned int *)(v47 + 56);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 + 1, v89));
      *(_QWORD *)v47 = (char *)CVPixelBufferGetBaseAddressOfPlane(*((CVPixelBufferRef *)v47 + 6), 0)
                     + *((_QWORD *)v47 + 5);
    }
  }
  v91 = sub_1D4D7D700((uint64_t)v77);
  v123[0] = MEMORY[0x1E0C809B0];
  v123[1] = 0x40000000;
  v123[2] = sub_1D4DA69C4;
  v123[3] = &unk_1E988B690;
  v123[6] = v77;
  v123[7] = v47;
  v123[4] = &v127;
  v123[5] = v9;
  v124 = v34;
  v123[8] = v119;
  v123[9] = v91;
  dispatch_apply(v34, v50, v123);
  dispatch_release(v50);
  if (v47)
  {
    v92 = (__CVBuffer *)*((_QWORD *)v47 + 6);
    if (v92)
    {
      CVPixelBufferUnlockBaseAddress(v92, 0);
      v93 = (unsigned int *)(v47 + 56);
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
        *(_QWORD *)v47 = 0;
    }
  }
  v96 = (__CVBuffer *)v77[6];
  if (v96)
  {
    CVPixelBufferUnlockBaseAddress(v96, 0);
    v97 = (unsigned int *)(v77 + 7);
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
      *v77 = 0;
  }
  v100 = *(__CVBuffer **)(v9 + 48);
  if (v100)
  {
    CVPixelBufferUnlockBaseAddress(v100, 0);
    v101 = (unsigned int *)(v9 + 56);
    do
    {
      v102 = __ldaxr(v101);
      v103 = v102 - 1;
    }
    while (__stlxr(v103, v101));
    if (!v103)
      *(_QWORD *)v9 = 0;
  }
  sub_1D4D7DB18(a4, v77);
  if (v47)
    sub_1D4D7DB18(a4, v47);
  if (v91)
    sub_1D4D7D7F8((uint64_t)v91);
  (*(void (**)(_BYTE *))(*(_QWORD *)v51 + 8))(v51);
  v104 = 0;
  if ((_DWORD)v34)
  {
    v105 = (_DWORD *)(*(_QWORD *)(v127.height + 40) + 48);
    v106 = v116;
    v107 = v119;
    do
    {
      v104 += *v105;
      v105 += 74;
      --v34;
    }
    while (v34);
  }
  else
  {
    v106 = v116;
    v107 = v119;
  }
  v108 = operator new();
  height = v127.height;
  v110 = *(_QWORD *)(v127.height + 56);
  v111 = *(_OWORD *)(v127.height + 40);
  *(_QWORD *)(v127.height + 48) = 0;
  *(_QWORD *)(height + 56) = 0;
  *(_QWORD *)(height + 40) = 0;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = 0;
  *(_DWORD *)(v108 + 24) = 0;
  *(_QWORD *)v108 = 0;
  v112 = (_OWORD *)MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v108 + 44) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)(v108 + 28) = *v112;
  *(_BYTE *)(v108 + 52) = 0;
  *(_OWORD *)(v108 + 56) = v111;
  *(_QWORD *)(v108 + 72) = v110;
  memset(v122, 0, sizeof(v122));
  sub_1D4D5EF04(v106, v108);
  dest.data = v122;
  sub_1D4D5EE80((void ***)&dest);
  v113 = *v106;
  v114 = v120;
  *(_DWORD *)(v113 + 20) = v121;
  *(_DWORD *)(v113 + 24) = v114;
  *(float *)(v113 + 16) = a6;
  *(_DWORD *)(v113 + 8) = v104;
  *(_DWORD *)(v113 + 12) = v107[9];
  if (v13)
    sub_1D4D7DB18(a4, v13);
  _Block_object_dispose(&v127, 8);
  dest.data = v118;
  sub_1D4D5EE80((void ***)&dest);
}

void sub_1D4DA6774(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1D4D6C1D0(v2);
  _Block_object_dispose((const void *)(v1 + 248), 8);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v1 + 24);
  sub_1D4D5EE80((void ***)(v3 - 168));
  _Unwind_Resume(a1);
}

__n128 sub_1D4DA6820(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_1D4DA6844(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_1D4D5EE80(&v1);
}

void sub_1D4DA686C(uint64_t *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1[1];
  v4 = 0x14C1BACF914C1BADLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D4DABB10(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 296 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v3 -= 37;
      sub_1D4D5EE30((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void sub_1D4DA6904(dispatch_queue_t queue, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD block[9];

  v7 = *(_QWORD *)(a3 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1D4DA7728;
  block[3] = &unk_1E988B6B8;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  block[4] = a5;
  block[5] = (unint64_t)(v7 + 7) >> 3;
  dispatch_apply(8uLL, queue, block);
  bzero(*(void **)a4, *(_QWORD *)(a4 + 24) * a2);
  bzero((void *)(*(_QWORD *)a4 + (*(_QWORD *)(a4 + 16) - a2) * *(_QWORD *)(a4 + 24)), *(_QWORD *)(a4 + 24) * a2);
}

uint64_t sub_1D4DA69A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D4DA69B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
}

void sub_1D4DA69C4(uint64_t a1, uint64_t a2)
{
  sub_1D4DA69F0(*(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48), *(_QWORD **)(a1 + 56), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 296 * a2), *(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), *(_QWORD *)(a1 + 72));
}

void sub_1D4DA69F0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  void *v22;
  uint64_t v23;
  float *v24;
  float v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t i;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  size_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  float v70;
  float v71;
  BOOL v72;
  unsigned int v73;
  float v74;
  int v75;
  uint64_t v76;
  unint64_t j;
  float *v78;
  float v79;
  float v80;
  unsigned int v81;
  float v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char **v92;
  void *v93;
  char *v94;
  unint64_t v95;
  _QWORD *v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  char **v116;
  char *v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  _QWORD v122[8];
  void *v123;
  void *v124;
  uint64_t v125;
  int v126;
  char v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _QWORD v132[2];
  uint64_t v133;
  char v134;
  uint64_t v135;
  _QWORD v136[9];
  char *v137;
  char *v138;
  char *v139;
  _QWORD v140[2];
  unint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;

  v111 = a2;
  v112 = a7;
  v110 = a1;
  v144 = *MEMORY[0x1E0C80C00];
  LODWORD(v114) = *(_DWORD *)(a5 + 32);
  v9 = *(_DWORD *)(a5 + 36);
  LODWORD(v115) = a6;
  v10 = v9 / a6;
  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  if (*a4 <= 3uLL)
    v14 = 3;
  else
    v14 = *a4;
  v15 = a3[2];
  v116 = (char **)a3[1];
  if (v12 <= 3)
    v16 = 3;
  else
    v16 = v12;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  sub_1D4D72500(&v123, (2 * v10));
  v17 = v15 - 3;
  if (v15 - 3 >= v13)
    v17 = v13;
  v18 = (char *)v116 - 3;
  if ((unint64_t)v116 - 3 >= v11)
    v18 = (char *)v11;
  v122[1] = &v18[-v14];
  v122[2] = v17 - v16;
  v122[4] = 1;
  v126 = 40;
  v113 = operator new();
  sub_1D4D99528(v113);
  v143 = 0;
  v140[1] = 0;
  v141 = 0;
  v140[0] = 0;
  v142 = 0;
  v120 = 0uLL;
  v121 = 0;
  do
  {
    *((_QWORD *)&v120 + 1) = v120;
    sub_1D4D5E7FC((uint64_t)&v137, 0, (2 * v10), 0);
    sub_1D4DA77AC((uint64_t)v140, (uint64_t)&v137);
    sub_1D4D5ED08((uint64_t)&v137);
    v19 = a3[3];
    v122[0] = *a3 + v19 * v16 + v14;
    v122[3] = v19;
    v20 = sub_1D4DA42E4(v122, v140, &v120, (int **)&v123, v114 / v115, v10, 5, 150, &v126);
  }
  while (v20 <= 0xF9F && v20 > v141);
  v21 = (char **)(a4 + 4);
  sub_1D4DA77AC((uint64_t)(a4 + 4), (uint64_t)v140);
  v22 = (void *)a4[22];
  if (v22)
  {
    a4[23] = v22;
    operator delete(v22);
    a4[22] = 0;
    a4[23] = 0;
    a4[24] = 0;
  }
  *((_OWORD *)a4 + 11) = v120;
  a4[24] = v121;
  v121 = 0;
  v120 = 0uLL;
  v23 = a4[6];
  v114 = a4 + 22;
  if (!v23)
  {
    v115 = &v110;
    v39 = &v128;
LABEL_49:
    v38 = 0;
    v137 = *v21;
    v44 = v39;
    v46 = 0;
    v45 = 1;
    goto LABEL_50;
  }
  v24 = (float *)(*v21 + 4);
  do
  {
    v25 = *v24 + (float)v16;
    *(v24 - 1) = *(v24 - 1) + (float)v14;
    *v24 = v25;
    v24 += 2;
    --v23;
  }
  while (v23);
  v26 = 0;
  v27 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  do
  {
    v28 = *(_QWORD *)&(*v21)[8 * v27];
    if (v26 >= v139)
    {
      v29 = (v26 - v137) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        sub_1D4D5DFA8();
      v30 = (v139 - v137) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if ((unint64_t)(v139 - v137) >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)sub_1D4D5E2CC((uint64_t)&v139, v31);
      else
        v32 = 0;
      v33 = &v32[8 * v29];
      *(_QWORD *)v33 = v28;
      v26 = v33 + 8;
      v35 = v137;
      v34 = v138;
      if (v138 != v137)
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v33 - 1) = v36;
          v33 -= 8;
        }
        while (v34 != v35);
        v34 = v137;
      }
      v137 = v33;
      v138 = v26;
      v139 = &v32[8 * v31];
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v26 = v28;
      v26 += 8;
    }
    v138 = v26;
    ++v27;
  }
  while (a4[6] > v27);
  sub_1D4D96934(v110, (uint64_t)v137, (unint64_t)(v26 - v137) >> 3, 2, 3, 0.1, 3.0);
  if (a4[6])
  {
    v37 = 0;
    do
    {
      *(_QWORD *)(a4[4] + 8 * v37) = *(_QWORD *)&v137[8 * v37];
      ++v37;
      v38 = a4[6];
    }
    while (v38 > v37);
  }
  else
  {
    v38 = 0;
  }
  v40 = v137;
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
    v38 = a4[6];
  }
  MEMORY[0x1E0C80A78](v40);
  v39 = (int *)((char *)&v110 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = v42;
  if (!v38)
    goto LABEL_49;
  for (i = 0; i != v38; ++i)
    v39[i] = i;
  v44 = &v39[v38];
  v137 = *v21;
  v45 = 0;
  v46 = 126 - 2 * __clz(v38);
LABEL_50:
  sub_1D4DA7C88((uint64_t)v39, v44, (uint64_t *)&v137, v46, 1);
  sub_1D4D5E7FC((uint64_t)&v137, 0, v38, 0);
  v117 = 0;
  v118 = 0;
  v119 = 0;
  sub_1D4D5E8AC((uint64_t)v136, 0, v38, 0);
  sub_1D4DA3110((void **)&v117, v38);
  if ((v45 & 1) == 0)
  {
    LODWORD(v110) = v45;
    v47 = 0;
    v116 = &v119;
    do
    {
      v48 = (float *)sub_1D4DA23C4(a4 + 4, v39[v47]);
      sub_1D4DA4704(&v137, *v48, v48[1]);
      v49 = a4[22];
      v50 = a4[23] - v49;
      if (v50)
      {
        v51 = v39[v47];
        if (v51 >= v50 >> 2)
          sub_1D4D5DDC8();
        v52 = v118;
        if (v118 >= v119)
        {
          v54 = v117;
          v55 = (v118 - v117) >> 2;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            sub_1D4D5DFA8();
          v57 = v119 - v117;
          if ((v119 - v117) >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)sub_1D4D5EA14((uint64_t)v116, v58);
            v54 = v117;
            v52 = v118;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[4 * v55];
          *(_DWORD *)v60 = *(_DWORD *)(v49 + 4 * v51);
          v53 = v60 + 4;
          while (v52 != v54)
          {
            v61 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v60 - 1) = v61;
            v60 -= 4;
          }
          v117 = v60;
          v118 = v53;
          v119 = &v59[4 * v58];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_DWORD *)v118 = *(_DWORD *)(v49 + 4 * v51);
          v53 = v52 + 4;
        }
        v118 = v53;
      }
      if (a4[15])
      {
        v62 = (int *)sub_1D4DA7918(a4 + 13, v39[v47]);
        sub_1D4DA78A0(v136, *v62);
      }
      ++v47;
    }
    while (v47 != v38);
    if ((v110 & 1) == 0)
    {
      v63 = 0;
      do
      {
        *(_QWORD *)(a4[4] + 8 * v63) = *(_QWORD *)sub_1D4DA23C4(&v137, v63);
        v64 = a4[22];
        if (a4[23] != v64)
        {
          if (v63 >= (v118 - v117) >> 2)
            sub_1D4D5DDC8();
          *(_DWORD *)(v64 + 4 * v63) = *(_DWORD *)&v117[4 * v63];
        }
        if (a4[15])
          *(_DWORD *)(a4[13] + 4 * v63) = *(_DWORD *)sub_1D4DA7918(v136, v63);
        ++v63;
      }
      while (v38 != v63);
    }
  }
  v135 = 0;
  v132[1] = 0;
  v133 = 0;
  v132[0] = 0;
  v134 = 0;
  v65 = a4[6];
  v127 = 0;
  sub_1D4DA9F74(&v129, v65, &v127);
  v66 = a4[6];
  if (v66)
  {
    v67 = 0;
    do
    {
      if (*(_BYTE *)(v129 + v67))
      {
        v68 = v67 + 1;
        goto LABEL_103;
      }
      v68 = v67 + 1;
      if (v67 + 1 < v66)
      {
        v69 = (float *)&(*v21)[8 * v67];
        v70 = *v69;
        v71 = v69[1];
        v72 = *v69 == truncf(*v69);
        v73 = v72;
        v74 = truncf(v71);
        if (v72)
          v75 = 2;
        else
          v75 = 1;
        if (v71 == v74)
          v73 = v75;
        v76 = 8 * v67;
        for (j = v67 + 1; j < v66; ++j)
        {
          if (!*(_BYTE *)(v129 + j))
          {
            v78 = (float *)&(*v21)[v76];
            v80 = v78[2];
            v79 = v78[3];
            if ((float)((float)((float)(v71 - v79) * (float)(v71 - v79))
                       + (float)((float)(v70 - v80) * (float)(v70 - v80))) < 2.25)
            {
              v72 = v80 == truncf(v80);
              v81 = v72;
              v82 = truncf(v79);
              if (v72)
                v83 = 2;
              else
                v83 = 1;
              if (v79 == v82)
                v81 = v83;
              if (v81 < v73)
              {
                *(_BYTE *)(v129 + v67) = 1;
                v66 = a4[6];
                break;
              }
              *(_BYTE *)(v129 + j) = 1;
              v66 = a4[6];
            }
          }
          v76 += 8;
        }
      }
LABEL_103:
      v67 = v68;
    }
    while (v68 < v66);
    if (v66)
    {
      v84 = v66 - 1;
      v85 = -4 * v66;
      v86 = 8 * v66 - 8;
      v87 = -32 * v66;
      v88 = 32 * v66 - 32;
      v89 = 4 * v66 - 4;
      v90 = -8 * v66;
      do
      {
        if (*(_BYTE *)(v129 + v84))
        {
          memmove((void *)(a4[4] + v86), (const void *)(a4[4] + v86 + 8), v90 + 8 * a4[6]--);
          if (v133)
            memmove((void *)(v132[0] + v88), (const void *)(v132[0] + v88 + 32), v87 + 32 * v133--);
          v91 = a4[15];
          if (v91)
          {
            memmove((void *)(a4[13] + v89), (const void *)(a4[13] + v89 + 4), v85 + 4 * v91);
            --a4[15];
          }
        }
        --v84;
        v85 += 4;
        v86 -= 8;
        v87 += 32;
        v88 -= 32;
        v90 += 8;
        v89 -= 4;
      }
      while (v84 != -1);
    }
  }
  if ((_QWORD)v129)
  {
    *((_QWORD *)&v129 + 1) = v129;
    operator delete((void *)v129);
  }
  sub_1D4D5EA48((uint64_t)&v129, 0, a4[6], 0);
  sub_1D4DA7988((uint64_t)(a4 + 25), (uint64_t)&v129);
  sub_1D4D5EBC0((uint64_t)&v129);
  if (v112)
    sub_1D4D7D8A4(v111, v112, a4 + 4, a4 + 25);
  else
    sub_1D4D7D4E8(v111, a4 + 4, a4 + 25);
  v92 = (char **)(a4 + 34);
  v93 = (void *)a4[34];
  if (v93)
  {
    a4[35] = v93;
    operator delete(v93);
    *v92 = 0;
    a4[35] = 0;
    a4[36] = 0;
  }
  *v92 = 0;
  a4[35] = 0;
  a4[36] = 0;
  if (a4[6])
  {
    v94 = 0;
    v95 = 0;
    v96 = a4 + 36;
    do
    {
      bzero(&v129, 0x30uLL);
      if ((unint64_t)v94 >= *v96)
      {
        v99 = 0xAAAAAAAAAAAAAAABLL * ((v94 - *v92) >> 4);
        v100 = v99 + 1;
        if (v99 + 1 > 0x555555555555555)
          sub_1D4D5DFA8();
        if (0x5555555555555556 * ((uint64_t)(*v96 - (_QWORD)*v92) >> 4) > v100)
          v100 = 0x5555555555555556 * ((uint64_t)(*v96 - (_QWORD)*v92) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v96 - (_QWORD)*v92) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v101 = 0x555555555555555;
        else
          v101 = v100;
        if (v101)
          v102 = (char *)sub_1D4D5E030((uint64_t)(a4 + 36), v101);
        else
          v102 = 0;
        v103 = &v102[48 * v99];
        *(_OWORD *)v103 = v129;
        *((_OWORD *)v103 + 1) = v130;
        *((_OWORD *)v103 + 2) = v131;
        v105 = (char *)a4[34];
        v104 = (char *)a4[35];
        v106 = v103;
        if (v104 != v105)
        {
          do
          {
            v107 = *((_OWORD *)v104 - 3);
            v108 = *((_OWORD *)v104 - 1);
            *((_OWORD *)v106 - 2) = *((_OWORD *)v104 - 2);
            *((_OWORD *)v106 - 1) = v108;
            *((_OWORD *)v106 - 3) = v107;
            v106 -= 48;
            v104 -= 48;
          }
          while (v104 != v105);
          v104 = *v92;
        }
        v94 = v103 + 48;
        a4[34] = v106;
        a4[35] = v103 + 48;
        a4[36] = &v102[48 * v101];
        if (v104)
          operator delete(v104);
      }
      else
      {
        v97 = v129;
        v98 = v131;
        *((_OWORD *)v94 + 1) = v130;
        *((_OWORD *)v94 + 2) = v98;
        *(_OWORD *)v94 = v97;
        v94 += 48;
      }
      a4[35] = v94;
      ++v95;
    }
    while (a4[6] > v95);
  }
  sub_1D4D5EBC0((uint64_t)v132);
  sub_1D4D5EC64((uint64_t)v136);
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  sub_1D4D5ED08((uint64_t)&v137);
  v109 = v113;
  if ((_QWORD)v120)
    operator delete((void *)v120);
  sub_1D4D5ED08((uint64_t)v140);
  (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
}

void sub_1D4DA745C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v4 = *(void **)(v2 - 248);
  if (v4)
  {
    *(_QWORD *)(v2 - 240) = v4;
    operator delete(v4);
  }
  v5 = v1[3];
  v6 = (void *)v1[10];
  if (v6)
    operator delete(v6);
  sub_1D4D5ED08(v2 - 176);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = (void *)v1[21];
  if (v7)
  {
    v1[22] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DA7570(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;

  v16 = operator new();
  v17 = v16;
  v18 = (std::__shared_weak_count *)a1[1];
  v32 = *a1;
  v33 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a2[1];
  v31[0] = v21;
  v31[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25.n128_f64[0] = sub_1D4DA4780(v16, &v32, v31, a3);
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 - 1, v23));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v25);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v25.n128_f64[0] = sub_1D4DA4780(v16, &v32, v31, a3);
  }
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v25);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(float *)(v17 + 80) = a5;
  *(_DWORD *)(v17 + 84) = a6;
  *(float *)(v17 + 88) = a7;
  *(float *)(v17 + 92) = a8;
  *(_DWORD *)(v17 + 96) = a4;
  return v17;
}

double sub_1D4DA76D4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x400000005;
  *(_DWORD *)(a1 + 8) = 60;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = 0x3E00000000000000;
  *(_DWORD *)(a1 + 24) = 1119879168;
  *(_QWORD *)(a1 + 28) = 0x7D000000320;
  *(_DWORD *)(a1 + 36) = 2500;
  result = 0.0437499957;
  *(_OWORD *)(a1 + 40) = xmmword_1D4DB2B80;
  return result;
}

uint64_t sub_1D4DA7728(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[8];
  _QWORD v16[8];

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = (_QWORD *)a1[7];
  if (v3 * a2 <= v4)
    v6 = a1[6];
  else
    v6 = v3 * a2;
  v7 = v6 - v4;
  v8 = v3 + v4 + v3 * a2;
  v9 = v5[3];
  if (v5[2] < v8)
    v8 = v5[2];
  v10 = (_QWORD *)a1[8];
  v11 = v10[3];
  v12 = v5[1];
  v13 = *v10 + v11 * v7;
  v16[0] = *v5 + v9 * v7;
  v16[1] = v12;
  v16[2] = v8 - v7;
  v16[3] = v9;
  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v8 - v7;
  v15[3] = v11;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(v2 + 16))(v2, v16, v15);
}

uint64_t sub_1D4DA77AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  if (a1 != a2)
  {
    if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
      MEMORY[0x1D8268964]();
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 && *(_QWORD *)(a1 + 64))
    {
      v8 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8);
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    sub_1D4DA7A7C((_QWORD *)(a1 + 32), a2 + 32);
    v5 = *(_QWORD **)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    if (v5 == (_QWORD *)(a2 + 32))
    {
      v6 = 4;
      v5 = (_QWORD *)(a2 + 32);
    }
    else
    {
      if (!v5)
      {
LABEL_13:
        *(_QWORD *)(a2 + 64) = 0;
        return a1;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_13;
  }
  return a1;
}

_QWORD *sub_1D4DA78A0(_QWORD *result, int a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = result[2];
  if (v2 >= result[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  *(_DWORD *)(*result + 4 * v2) = a2;
  result[2] = v2 + 1;
  return result;
}

void sub_1D4DA7904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DA7918(_QWORD *a1, unint64_t a2)
{
  std::logic_error *exception;

  if (a1[2] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4D5DE2C(exception, "idx");
    __cxa_throw(exception, (struct type_info *)off_1E9889B50, MEMORY[0x1E0DE42E0]);
  }
  return *a1 + 4 * a2;
}

void sub_1D4DA7974(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DA7988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  if (a1 != a2)
  {
    if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
      MEMORY[0x1D8268964]();
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 && *(_QWORD *)(a1 + 64))
    {
      v8 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8);
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    sub_1D4DA7A7C((_QWORD *)(a1 + 32), a2 + 32);
    v5 = *(_QWORD **)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    if (v5 == (_QWORD *)(a2 + 32))
    {
      v6 = 4;
      v5 = (_QWORD *)(a2 + 32);
    }
    else
    {
      if (!v5)
      {
LABEL_13:
        *(_QWORD *)(a2 + 64) = 0;
        return a1;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_13;
  }
  return a1;
}

_QWORD *sub_1D4DA7A7C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1D4D62E6C((uint64_t)v6, a2);
  sub_1D4DA7B14(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1D4DA7B14(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D4DA7C7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D4D5DF98(a1);
}

uint64_t sub_1D4DA7C88(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 8 * v20 + 4) < *(float *)(*a3 + 8 * v21 + 4))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_1D4DA80DC(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_1D4DA8510(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_1D4DA85D0(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1D4DA7FE0(v9, a2, a3);
          else
            return (uint64_t)sub_1D4DA8070(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            sub_1D4DA80DC(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1D4DA80DC(v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_1D4DA80DC(v9 + 1, v15 - 1, a2 - 2, a3);
            sub_1D4DA80DC(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            sub_1D4DA80DC(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 8 * *(v9 - 1) + 4) >= *(float *)(*a3 + 8 * *v9 + 4))
          {
            result = (uint64_t)sub_1D4DA8198(v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1D4DA8284(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1D4DA8370(v9, v17, a3);
          v9 = v17 + 1;
          result = sub_1D4DA8370(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1D4DA7C88(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1D4DA86BC(v9, a2, a2, a3);
        return result;
    }
  }
}

int *sub_1D4DA7FE0(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _DWORD *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(float *)(v5 + 8 * v7 + 4);
        if (v9 < *(float *)(v5 + 8 * v8 + 4))
        {
          v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10)
              break;
            v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 8 * v8 + 4))
            {
              v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v7;
        }
        v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *sub_1D4DA8070(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(float *)(v4 + 8 * v5 + 4);
        if (v7 < *(float *)(v4 + 8 * v6 + 4))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 8 * v6 + 4));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1D4DA80DC(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  v6 = *a4;
  v7 = *(float *)(*a4 + 8 * v4 + 4);
  v8 = *(float *)(*a4 + 8 * v5 + 4);
  v9 = *a3;
  v10 = *(float *)(*a4 + 8 * v9 + 4);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v13 = *a3;
    if (*(float *)(v6 + 8 * v13 + 4) >= v8)
      return 1;
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v6 + 8 * v11 + 4) >= *(float *)(v6 + 8 * v12 + 4))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *sub_1D4DA8198(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 8 * v3 + 4);
  if (v5 >= *(float *)(*a3 + 8 * *(a2 - 1) + 4))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 8 * *v6 + 4));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 8 * v7 + 4));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 8 * v9 + 4));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 8 * v12 + 4));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 8 * v13 + 4));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

int *sub_1D4DA8284(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 8 * v4 + 4);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 8 * v7 + 4) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 8 * v11 + 4) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 8 * v10 + 4) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = v7;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v12;
      *v15 = v13;
      do
      {
        v16 = v14[1];
        ++v14;
        v13 = v16;
      }
      while (*(float *)(v5 + 8 * v16 + 4) < v6);
      do
      {
        v17 = *--v15;
        v12 = v17;
      }
      while (*(float *)(v5 + 8 * v17 + 4) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL sub_1D4DA8370(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 8 * v8 + 4) < *(float *)(*a3 + 8 * v9 + 4))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1D4DA80DC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1D4DA8510(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1D4DA85D0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1D4DA80DC(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 8 * v15 + 4);
    if (v17 < *(float *)(v13 + 8 * v16 + 4))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 8 * v16 + 4))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t sub_1D4DA8510(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1D4DA80DC(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 8 * v11 + 4) < *(float *)(*a5 + 8 * v12 + 4))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 8 * v14 + 4) < *(float *)(v13 + 8 * v15 + 4))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 8 * v16 + 4) < *(float *)(v13 + 8 * v17 + 4))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1D4DA85D0(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1D4DA8510(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 8 * v13 + 4) < *(float *)(*a6 + 8 * v14 + 4))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 8 * v16 + 4) < *(float *)(v15 + 8 * v17 + 4))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 8 * v18 + 4) < *(float *)(v15 + 8 * v19 + 4))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 8 * v20 + 4) < *(float *)(v15 + 8 * v21 + 4))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *sub_1D4DA86BC(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1D4DA8818((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 8 * v15 + 4) < *(float *)(*a4 + 8 * v16 + 4))
        {
          *v14 = v16;
          *a1 = v15;
          sub_1D4DA8818((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = sub_1D4DA8914(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          sub_1D4DA8994((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1D4DA8818(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 + 1;
      v7 = (int *)(result + 4 * (v5 + 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 8 * *v7 + 4) < *(float *)(v9 + 8 * v7[1] + 4))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 8 * v11 + 4);
      if (*(float *)(v9 + 8 * v10 + 4) >= v12)
      {
        do
        {
          v13 = v7;
          *a4 = v10;
          if (v4 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 8 * *v7 + 4) < *(float *)(v9 + 8 * v7[1] + 4))
          {
            ++v7;
            v6 = v15;
          }
          v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 8 * v10 + 4) >= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

int *sub_1D4DA8914(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && *(float *)(v6 + 8 * *result + 4) < *(float *)(v6 + 8 * result[1] + 4))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1D4DA8994(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(int *)(a2 - 4);
    v7 = (_DWORD *)(a2 - 4);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 8 * v9 + 4);
    if (*(float *)(*a3 + 8 * v6 + 4) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 8 * v6 + 4) < v11);
      *v12 = v8;
    }
  }
  return result;
}

void *sub_1D4DA8A00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_1D4D5E074();
  return operator new(56 * a2);
}

void sub_1D4DA8A48(__int128 *a1, __n128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  char v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

uint64_t sub_1D4DA8E20(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  if ((_OWORD *)result != a2)
  {
    v26 = v3;
    v27 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = v10[3];
          v23 = v10[2];
          v24 = v12;
          v25 = v10[4];
          v13 = v10[1];
          v21 = *v10;
          v22 = v13;
          v14 = v9;
          while (1)
          {
            v15 = (_OWORD *)((char *)v6 + v14);
            v16 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[7] = *(_OWORD *)((char *)v6 + v14 + 32);
            v15[8] = v16;
            v15[9] = *(_OWORD *)((char *)v6 + v14 + 64);
            v17 = *(_OWORD *)((char *)v6 + v14 + 16);
            v15[5] = *(_OWORD *)((char *)v6 + v14);
            v15[6] = v17;
            if (!v14)
              break;
            v14 -= 80;
            result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              v18 = (_OWORD *)((char *)v6 + v14 + 80);
              goto LABEL_10;
            }
          }
          v18 = v6;
LABEL_10:
          v19 = v24;
          v18[2] = v23;
          v18[3] = v19;
          v18[4] = v25;
          v20 = v22;
          *v18 = v21;
          v18[1] = v20;
        }
        v7 = v10 + 5;
        v9 += 80;
      }
      while (v10 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1D4DA8F1C(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if ((_OWORD *)result != a2)
  {
    v23 = v3;
    v24 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      v9 = (_OWORD *)(result - 80);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = v6[3];
          v20 = v6[2];
          v21 = v11;
          v22 = v6[4];
          v12 = v6[1];
          v18 = *v6;
          v19 = v12;
          v13 = v9;
          do
          {
            v14 = v13[8];
            v13[12] = v13[7];
            v13[13] = v14;
            v13[14] = v13[9];
            v15 = v13[6];
            v13[10] = v13[5];
            v13[11] = v15;
            result = (*a3)(&v18, v13);
            v13 -= 5;
          }
          while ((result & 1) != 0);
          v16 = v21;
          v13[12] = v20;
          v13[13] = v16;
          v13[14] = v22;
          v17 = v19;
          v13[10] = v18;
          v13[11] = v17;
        }
        v7 = v6 + 5;
        v9 += 5;
      }
      while (v6 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1D4DA8FFC(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v37 = a1[2];
      v42 = a1[3];
      v47 = a1[4];
      v27 = *a1;
      v32 = a1[1];
      *a1 = *a3;
      v10 = a3[4];
      v12 = a3[1];
      v11 = a3[2];
      a1[3] = a3[3];
      a1[4] = v10;
      a1[1] = v12;
      a1[2] = v11;
      a3[3] = v42;
      a3[4] = v47;
      a3[2] = v37;
      v13 = v27;
      v14 = v32;
      result = 1;
LABEL_9:
      *a3 = v13;
      a3[1] = v14;
      return result;
    }
    v40 = a1[2];
    v45 = a1[3];
    v50 = a1[4];
    v30 = *a1;
    v35 = a1[1];
    *a1 = *a2;
    v21 = a2[4];
    v23 = a2[1];
    v22 = a2[2];
    a1[3] = a2[3];
    a1[4] = v21;
    a1[1] = v23;
    a1[2] = v22;
    a2[3] = v45;
    a2[4] = v50;
    *a2 = v30;
    a2[1] = v35;
    a2[2] = v40;
    if ((*a4)(a3, a2))
    {
      v41 = a2[2];
      v46 = a2[3];
      v51 = a2[4];
      v31 = *a2;
      v36 = a2[1];
      *a2 = *a3;
      v24 = a3[4];
      v26 = a3[1];
      v25 = a3[2];
      a2[3] = a3[3];
      a2[4] = v24;
      a2[1] = v26;
      a2[2] = v25;
      a3[3] = v46;
      a3[4] = v51;
      a3[2] = v41;
      v13 = v31;
      v14 = v36;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v38 = a2[2];
    v43 = a2[3];
    v48 = a2[4];
    v28 = *a2;
    v33 = a2[1];
    *a2 = *a3;
    v15 = a3[4];
    v17 = a3[1];
    v16 = a3[2];
    a2[3] = a3[3];
    a2[4] = v15;
    a2[1] = v17;
    a2[2] = v16;
    a3[3] = v43;
    a3[4] = v48;
    *a3 = v28;
    a3[1] = v33;
    a3[2] = v38;
    if ((*a4)(a2, a1))
    {
      v39 = a1[2];
      v44 = a1[3];
      v49 = a1[4];
      v29 = *a1;
      v34 = a1[1];
      *a1 = *a2;
      v18 = a2[4];
      v20 = a2[1];
      v19 = a2[2];
      a1[3] = a2[3];
      a1[4] = v18;
      a1[1] = v20;
      a1[2] = v19;
      a2[3] = v44;
      a2[4] = v49;
      result = 2;
      *a2 = v29;
      a2[1] = v34;
      a2[2] = v39;
      return result;
    }
  }
  return 1;
}

__int128 *sub_1D4DA9214(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = a2;
  v6 = a1[3];
  v30 = a1[2];
  v31 = v6;
  v32 = a1[4];
  v7 = a1[1];
  v28 = *a1;
  v29 = v7;
  if (((*a3)(&v28, a2 - 5) & 1) != 0)
  {
    v8 = a1;
    do
      v8 += 5;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 5;
    do
    {
      v8 = v9;
      if (v9 >= v4)
        break;
      v10 = (*a3)(&v28, v9);
      v9 = v8 + 5;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 5;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    v33 = *v8;
    v11 = v8[1];
    v12 = v8[2];
    v13 = v8[4];
    v36 = v8[3];
    v37 = v13;
    v34 = v11;
    v35 = v12;
    v14 = v4[4];
    v16 = v4[1];
    v15 = v4[2];
    v8[3] = v4[3];
    v8[4] = v14;
    v8[1] = v16;
    v8[2] = v15;
    *v8 = *v4;
    v17 = v37;
    v19 = v34;
    v18 = v35;
    v4[3] = v36;
    v4[4] = v17;
    v4[1] = v19;
    v4[2] = v18;
    *v4 = v33;
    do
      v8 += 5;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 5;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  v20 = v8 - 5;
  if (v8 - 5 != a1)
  {
    *a1 = *v20;
    v21 = *(v8 - 4);
    v22 = *(v8 - 3);
    v23 = *(v8 - 1);
    a1[3] = *(v8 - 2);
    a1[4] = v23;
    a1[1] = v21;
    a1[2] = v22;
  }
  *v20 = v28;
  v24 = v29;
  v25 = v30;
  v26 = v32;
  *(v8 - 2) = v31;
  *(v8 - 1) = v26;
  *(v8 - 4) = v24;
  *(v8 - 3) = v25;
  return v8;
}

__int128 *sub_1D4DA93A0(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = 0;
  v7 = a1[3];
  v30 = a1[2];
  v31 = v7;
  v32 = a1[4];
  v8 = a1[1];
  v28 = *a1;
  v29 = v8;
  do
    v6 += 5;
  while (((*a3)(&a1[v6], &v28) & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 5];
  if (v6 == 5)
  {
    do
    {
      if (v9 >= a2)
        break;
      a2 -= 5;
    }
    while (((*a3)(a2, &v28) & 1) == 0);
  }
  else
  {
    do
      a2 -= 5;
    while (!(*a3)(a2, &v28));
  }
  if (v9 < a2)
  {
    v11 = &a1[v6];
    v12 = a2;
    do
    {
      v13 = v11[3];
      v35 = v11[2];
      v36 = v13;
      v37 = v11[4];
      v14 = v11[1];
      v33 = *v11;
      v34 = v14;
      v16 = v12[1];
      v15 = v12[2];
      v17 = v12[4];
      v11[3] = v12[3];
      v11[4] = v17;
      v11[1] = v16;
      v11[2] = v15;
      *v11 = *v12;
      *v12 = v33;
      v18 = v34;
      v19 = v35;
      v20 = v37;
      v12[3] = v36;
      v12[4] = v20;
      v12[1] = v18;
      v12[2] = v19;
      do
        v11 += 5;
      while (((*a3)(v11, &v28) & 1) != 0);
      do
        v12 -= 5;
      while (!(*a3)(v12, &v28));
    }
    while (v11 < v12);
    v10 = v11 - 5;
  }
  if (v10 != a1)
  {
    *a1 = *v10;
    v21 = v10[1];
    v22 = v10[2];
    v23 = v10[4];
    a1[3] = v10[3];
    a1[4] = v23;
    a1[1] = v21;
    a1[2] = v22;
  }
  *v10 = v28;
  v24 = v29;
  v25 = v30;
  v26 = v32;
  v10[3] = v31;
  v10[4] = v26;
  v10[1] = v24;
  v10[2] = v25;
  return v10;
}

BOOL sub_1D4DA9534(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 5;
      if (!(*a3)(a2 - 5, a1))
        return 1;
      v9 = a1[3];
      v32 = a1[2];
      v33 = v9;
      v34 = a1[4];
      v10 = a1[1];
      v30 = *a1;
      v31 = v10;
      *a1 = *v8;
      v11 = *(a2 - 1);
      v13 = *(a2 - 4);
      v12 = *(a2 - 3);
      a1[3] = *(a2 - 2);
      a1[4] = v11;
      a1[1] = v13;
      a1[2] = v12;
      v14 = v34;
      v15 = v32;
      *(a2 - 2) = v33;
      *(a2 - 1) = v14;
      v16 = v31;
      result = 1;
      *v8 = v30;
      *(a2 - 4) = v16;
      *(a2 - 3) = v15;
      return result;
    case 3uLL:
      sub_1D4DA8FFC(a1, a1 + 5, a2 - 5, a3);
      return 1;
    case 4uLL:
      sub_1D4DA9764(a1, a1 + 5, a1 + 10, a2 - 5, a3);
      return 1;
    case 5uLL:
      sub_1D4DA98C4(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, a3);
      return 1;
    default:
      v17 = a1 + 10;
      sub_1D4DA8FFC(a1, a1 + 5, a1 + 10, a3);
      v18 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v18, v17))
    {
      v21 = v18[3];
      v32 = v18[2];
      v33 = v21;
      v34 = v18[4];
      v22 = v18[1];
      v30 = *v18;
      v31 = v22;
      v23 = v19;
      while (1)
      {
        v24 = (__int128 *)((char *)a1 + v23);
        v25 = *(__int128 *)((char *)a1 + v23 + 208);
        v24[17] = *(__int128 *)((char *)a1 + v23 + 192);
        v24[18] = v25;
        v24[19] = *(__int128 *)((char *)a1 + v23 + 224);
        v26 = *(__int128 *)((char *)a1 + v23 + 176);
        v24[15] = *(__int128 *)((char *)a1 + v23 + 160);
        v24[16] = v26;
        if (v23 == -160)
          break;
        v23 -= 80;
        if (((*a3)(&v30, v24 + 5) & 1) == 0)
        {
          v27 = (__int128 *)((char *)a1 + v23 + 240);
          goto LABEL_12;
        }
      }
      v27 = a1;
LABEL_12:
      v28 = v33;
      v27[2] = v32;
      v27[3] = v28;
      v27[4] = v34;
      v29 = v31;
      *v27 = v30;
      v27[1] = v29;
      if (++v20 == 8)
        return v18 + 5 == a2;
    }
    v17 = v18;
    v19 += 80;
    v18 += 5;
    if (v18 == a2)
      return 1;
  }
}

__n128 sub_1D4DA9764(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  sub_1D4DA8FFC(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v26 = a3[2];
    v29 = a3[3];
    v32 = a3[4];
    v20 = *a3;
    v23 = a3[1];
    *a3 = *a4;
    v11 = a4[4];
    v13 = a4[1];
    v12 = a4[2];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v13;
    a3[2] = v12;
    a4[3] = v29;
    a4[4] = v32;
    *a4 = v20;
    a4[1] = v23;
    a4[2] = v26;
    if ((*a5)(a3, a2))
    {
      v27 = a2[2];
      v30 = a2[3];
      v33 = a2[4];
      v21 = *a2;
      v24 = a2[1];
      *a2 = *a3;
      v14 = a3[4];
      v16 = a3[1];
      v15 = a3[2];
      a2[3] = a3[3];
      a2[4] = v14;
      a2[1] = v16;
      a2[2] = v15;
      a3[3] = v30;
      a3[4] = v33;
      *a3 = v21;
      a3[1] = v24;
      a3[2] = v27;
      if ((*a5)(a2, a1))
      {
        v28 = a1[2];
        v31 = a1[3];
        v34 = a1[4];
        v22 = (__n128)*a1;
        v25 = a1[1];
        *a1 = *a2;
        v17 = a2[4];
        v19 = a2[1];
        v18 = a2[2];
        a1[3] = a2[3];
        a1[4] = v17;
        a1[1] = v19;
        a1[2] = v18;
        a2[3] = v31;
        a2[4] = v34;
        result = v22;
        *a2 = (__int128)v22;
        a2[1] = v25;
        a2[2] = v28;
      }
    }
  }
  return result;
}

__n128 sub_1D4DA98C4(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v12 = sub_1D4DA9764(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v34 = a4[2];
    v38 = a4[3];
    v42 = a4[4];
    v26 = *a4;
    v30 = a4[1];
    *a4 = *a5;
    v14 = a5[4];
    v16 = a5[1];
    v15 = a5[2];
    a4[3] = a5[3];
    a4[4] = v14;
    a4[1] = v16;
    a4[2] = v15;
    a5[3] = v38;
    a5[4] = v42;
    *a5 = v26;
    a5[1] = v30;
    a5[2] = v34;
    if ((*a6)(a4, a3))
    {
      v35 = a3[2];
      v39 = a3[3];
      v43 = a3[4];
      v27 = *a3;
      v31 = a3[1];
      *a3 = *a4;
      v17 = a4[4];
      v19 = a4[1];
      v18 = a4[2];
      a3[3] = a4[3];
      a3[4] = v17;
      a3[1] = v19;
      a3[2] = v18;
      a4[3] = v39;
      a4[4] = v43;
      *a4 = v27;
      a4[1] = v31;
      a4[2] = v35;
      if ((*a6)(a3, a2))
      {
        v36 = a2[2];
        v40 = a2[3];
        v44 = a2[4];
        v28 = *a2;
        v32 = a2[1];
        *a2 = *a3;
        v20 = a3[4];
        v22 = a3[1];
        v21 = a3[2];
        a2[3] = a3[3];
        a2[4] = v20;
        a2[1] = v22;
        a2[2] = v21;
        a3[3] = v40;
        a3[4] = v44;
        *a3 = v28;
        a3[1] = v32;
        a3[2] = v36;
        if ((*a6)(a2, a1))
        {
          v37 = a1[2];
          v41 = a1[3];
          v45 = a1[4];
          v29 = (__n128)*a1;
          v33 = a1[1];
          *a1 = *a2;
          v23 = a2[4];
          v25 = a2[1];
          v24 = a2[2];
          a1[3] = a2[3];
          a1[4] = v23;
          a1[1] = v25;
          a1[2] = v24;
          a2[3] = v41;
          a2[4] = v45;
          result = v29;
          *a2 = (__int128)v29;
          a2[1] = v33;
          a2[2] = v37;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1D4DA9A84(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __n128 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  int64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 *v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)(a1 + 80 * v11);
      do
      {
        a5 = sub_1D4DA9D14(a1, a4, v10, v13);
        v13 -= 5;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v39 = v15[2];
          v41 = v15[3];
          v43 = v15[4];
          v35 = *v15;
          v37 = v15[1];
          *v15 = *(__n128 *)a1;
          v16 = *(__n128 *)(a1 + 64);
          v18 = *(__n128 *)(a1 + 16);
          v17 = *(__n128 *)(a1 + 32);
          v15[3] = *(__n128 *)(a1 + 48);
          v15[4] = v16;
          v15[1] = v18;
          v15[2] = v17;
          *(__n128 *)(a1 + 48) = v41;
          *(__n128 *)(a1 + 64) = v43;
          *(__n128 *)a1 = v35;
          *(__n128 *)(a1 + 16) = v37;
          *(__n128 *)(a1 + 32) = v39;
          a5 = sub_1D4DA9D14(a1, a4, v10, (__n128 *)a1);
        }
        v15 += 5;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 81)
    {
      return v14;
    }
    else
    {
      v33 = v14;
      v19 = v9 / 0x50uLL;
      do
      {
        v34 = v7;
        v20 = 0;
        v40 = *(__n128 *)(a1 + 32);
        v42 = *(__n128 *)(a1 + 48);
        v44 = *(__n128 *)(a1 + 64);
        v36 = *(__n128 *)a1;
        v38 = *(__n128 *)(a1 + 16);
        v21 = (_OWORD *)a1;
        do
        {
          v22 = (__n128 *)&v21[5 * v20 + 5];
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)((uint64_t)&v21[5 * v20 + 5], (__n128 *)&v21[5 * v20 + 10]))
          {
            v22 += 5;
            v23 = v24;
          }
          *v21 = *v22;
          v25 = v22[1];
          v26 = v22[2];
          v27 = v22[4];
          v21[3] = v22[3];
          v21[4] = v27;
          v21[1] = v25;
          v21[2] = v26;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = v34 - 5;
        if (v22 == &v34[-5])
        {
          *v22 = v36;
          v22[3] = v42;
          v22[4] = v44;
          v22[1] = v38;
          v22[2] = v40;
        }
        else
        {
          *v22 = *v7;
          v28 = v34[-4];
          v29 = v34[-3];
          v30 = v34[-1];
          v22[3] = v34[-2];
          v22[4] = v30;
          v22[1] = v28;
          v22[2] = v29;
          v34[-3] = v40;
          v34[-2] = v42;
          v34[-1] = v44;
          *v7 = v36;
          v34[-4] = v38;
          sub_1D4DA9E90(a1, (uint64_t)&v22[5], (uint64_t (**)(__n128 *, __n128 *))a4, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)&v22[5] - a1) >> 4));
        }
      }
      while (v19-- > 2);
      return v33;
    }
  }
  return a3;
}

__n128 sub_1D4DA9D14(uint64_t a1, unsigned int (**a2)(uint64_t, __n128 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __n128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v31 = v4;
    v32 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      v13 = (__n128 *)(a1 + 80 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && (*a2)(a1 + 80 * v12, v13 + 5))
      {
        v13 += 5;
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v16 = v7[3];
        v28 = v7[2];
        v29 = v16;
        v30 = v7[4];
        v17 = v7[1];
        v26 = *v7;
        v27 = v17;
        do
        {
          v18 = v13;
          *v7 = *v13;
          v19 = v13[1];
          v20 = v13[2];
          v21 = v13[4];
          v7[3] = v13[3];
          v7[4] = v21;
          v7[1] = v19;
          v7[2] = v20;
          if (v9 < v12)
            break;
          v22 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 80 * v22);
          v23 = 2 * v12 + 2;
          if (v23 < a3)
          {
            if ((*a2)(a1 + 80 * v22, v13 + 5))
            {
              v13 += 5;
              v22 = v23;
            }
          }
          v7 = v18;
          v12 = v22;
        }
        while (!(*a2)((uint64_t)v13, &v26));
        *v18 = v26;
        result = v27;
        v24 = v28;
        v25 = v30;
        v18[3] = v29;
        v18[4] = v25;
        v18[1] = result;
        v18[2] = v24;
      }
    }
  }
  return result;
}

__n128 sub_1D4DA9E90(uint64_t a1, uint64_t a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __n128 *v10;
  __n128 *v11;
  __n128 result;
  __n128 v13;
  __n128 v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v9 = v6 >> 1;
    v10 = (__n128 *)(a1 + 80 * (v6 >> 1));
    v11 = (__n128 *)(a2 - 80);
    if ((*a3)(v10, (__n128 *)(a2 - 80)))
    {
      v13 = v11[3];
      v22 = v11[2];
      v23 = v13;
      v24 = v11[4];
      v14 = v11[1];
      v20 = *v11;
      v21 = v14;
      do
      {
        v15 = v10;
        *v11 = *v10;
        v16 = v10[1];
        v17 = v10[2];
        v18 = v10[4];
        v11[3] = v10[3];
        v11[4] = v18;
        v11[1] = v16;
        v11[2] = v17;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__n128 *)(a1 + 80 * v9);
        v11 = v15;
      }
      while (((*a3)(v10, &v20) & 1) != 0);
      v19 = v23;
      v15[2] = v22;
      v15[3] = v19;
      v15[4] = v24;
      result = v21;
      *v15 = v20;
      v15[1] = result;
    }
  }
  return result;
}

_QWORD *sub_1D4DA9F74(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_1D4DA9FF0(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4DA9FD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4DA9FF0(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_1D4D5DFA8();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *sub_1D4DAA030(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_1D4D5E074();
  return operator new(80 * a2);
}

_QWORD *sub_1D4DAA074(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4DA9FF0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D4DAA0C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4DAA0E4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4D5EB70(a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4DAA160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4DAA17C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4D5DFA8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1D4D60A34(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1D4DAA2E0(a1, &v15);
    sub_1D4D6BB34((uint64_t)&v15);
  }
}

void sub_1D4DAA2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4D6BB34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DAA2E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4DAA354((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4DAA354(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D4DAA3F4((uint64_t)v11);
  return v9;
}

uint64_t sub_1D4DAA3F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4D6BAF0(a1);
  return a1;
}

char *sub_1D4DAA428(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x333333333333333)
      sub_1D4D5DFA8();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x199999999999999)
      v18 = 0x333333333333333;
    else
      v18 = v17;
    v41 = v9;
    if (v18)
      v19 = (char *)sub_1D4DAA030(v9, v18);
    else
      v19 = 0;
    v30 = &v19[80 * v15];
    __p = v19;
    v38 = v30;
    v40 = &v19[80 * v18];
    v31 = &v30[80 * a5];
    v32 = 80 * a5;
    do
    {
      *(_OWORD *)v30 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v34 = *((_OWORD *)v7 + 2);
      v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    v39 = v31;
    v5 = (char *)sub_1D4DAA6D8((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38)
      v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    v21 = &__src[80 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[80 * a5];
    v25 = &v23[-80 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        *(_OWORD *)v26 = *(_OWORD *)v25;
        v27 = *((_OWORD *)v25 + 1);
        v28 = *((_OWORD *)v25 + 2);
        v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[80 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D4DAA68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1D4DAA6D8(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  void *v17;
  void *v18;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 80) = *((_OWORD *)v8 - 5);
      v10 = *((_OWORD *)v8 - 4);
      v11 = *((_OWORD *)v8 - 3);
      v12 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v14 + v15;
  v16 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v17;
  v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_1D4DAA7BC(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;

uint64_t sub_1D4DAAB8C(uint64_t result, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  float *v4;
  _OWORD *v5;
  float v6;
  uint64_t v7;
  float *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[28];

  if ((_OWORD *)result != a2)
  {
    v2 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      v3 = 0;
      v4 = (float *)result;
      do
      {
        v5 = v2;
        v6 = v4[27];
        if (v6 < v4[7])
        {
          *(_OWORD *)v15 = *v2;
          *(_OWORD *)&v15[12] = *(_OWORD *)((char *)v2 + 12);
          v12 = *((_OWORD *)v4 + 7);
          v13 = *((_OWORD *)v4 + 8);
          v14 = *((_OWORD *)v4 + 9);
          v7 = v3;
          while (1)
          {
            v8 = (float *)(result + v7);
            v9 = *(_OWORD *)(result + v7 + 48);
            *((_OWORD *)v8 + 7) = *(_OWORD *)(result + v7 + 32);
            *((_OWORD *)v8 + 8) = v9;
            *((_OWORD *)v8 + 9) = *(_OWORD *)(result + v7 + 64);
            v10 = *(_OWORD *)(result + v7 + 16);
            *((_OWORD *)v8 + 5) = *(_OWORD *)(result + v7);
            *((_OWORD *)v8 + 6) = v10;
            if (!v7)
              break;
            v7 -= 80;
            if (v6 >= *(v8 - 13))
            {
              v11 = result + v7 + 80;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(_OWORD *)v11 = *(_OWORD *)v15;
          *(_OWORD *)(v11 + 12) = *(_OWORD *)&v15[12];
          *(float *)(v11 + 28) = v6;
          *(_OWORD *)(v11 + 32) = v12;
          *(_OWORD *)(v11 + 48) = v13;
          *(_OWORD *)(v11 + 64) = v14;
        }
        v2 = v5 + 5;
        v3 += 80;
        v4 = (float *)v5;
      }
      while (v5 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1D4DAAC64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[28];

  if (result != a2)
  {
    v2 = result + 80;
    if (result + 80 != a2)
    {
      do
      {
        v3 = v2;
        v4 = *(float *)(result + 108);
        if (v4 < *(float *)(result + 28))
        {
          *(_OWORD *)v10 = *(_OWORD *)v2;
          *(_OWORD *)&v10[12] = *(_OWORD *)(v2 + 12);
          v7 = *(_OWORD *)(result + 112);
          v8 = *(_OWORD *)(result + 128);
          v9 = *(_OWORD *)(result + 144);
          do
          {
            v5 = *(_OWORD *)(v2 - 32);
            *(_OWORD *)(v2 + 32) = *(_OWORD *)(v2 - 48);
            *(_OWORD *)(v2 + 48) = v5;
            *(_OWORD *)(v2 + 64) = *(_OWORD *)(v2 - 16);
            v6 = *(_OWORD *)(v2 - 64);
            *(_OWORD *)v2 = *(_OWORD *)(v2 - 80);
            *(_OWORD *)(v2 + 16) = v6;
            LODWORD(v6) = *(_DWORD *)(v2 - 132);
            v2 -= 80;
          }
          while (v4 < *(float *)&v6);
          *(_OWORD *)v2 = *(_OWORD *)v10;
          *(_OWORD *)(v2 + 12) = *(_OWORD *)&v10[12];
          *(float *)(v2 + 28) = v4;
          *(_OWORD *)(v2 + 32) = v7;
          *(_OWORD *)(v2 + 48) = v8;
          *(_OWORD *)(v2 + 64) = v9;
        }
        v2 = v3 + 80;
        result = v3;
      }
      while (v3 + 80 != a2);
    }
  }
  return result;
}

uint64_t sub_1D4DAAD18(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v3 = a2[7];
  v4 = a3[7];
  if (v3 >= a1[7])
  {
    if (v4 >= v3)
      return 0;
    v34 = *((_OWORD *)a2 + 2);
    v39 = *((_OWORD *)a2 + 3);
    v44 = *((_OWORD *)a2 + 4);
    v24 = *(_OWORD *)a2;
    v29 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v11 = *((_OWORD *)a3 + 4);
    v13 = *((_OWORD *)a3 + 1);
    v12 = *((_OWORD *)a3 + 2);
    *((_OWORD *)a2 + 3) = *((_OWORD *)a3 + 3);
    *((_OWORD *)a2 + 4) = v11;
    *((_OWORD *)a2 + 1) = v13;
    *((_OWORD *)a2 + 2) = v12;
    *((_OWORD *)a3 + 3) = v39;
    *((_OWORD *)a3 + 4) = v44;
    *(_OWORD *)a3 = v24;
    *((_OWORD *)a3 + 1) = v29;
    *((_OWORD *)a3 + 2) = v34;
    if (a2[7] < a1[7])
    {
      v35 = *((_OWORD *)a1 + 2);
      v40 = *((_OWORD *)a1 + 3);
      v45 = *((_OWORD *)a1 + 4);
      v25 = *(_OWORD *)a1;
      v30 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = *((_OWORD *)a2 + 4);
      v16 = *((_OWORD *)a2 + 1);
      v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v14;
      *((_OWORD *)a1 + 1) = v16;
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a2 + 3) = v40;
      *((_OWORD *)a2 + 4) = v45;
      result = 2;
      *(_OWORD *)a2 = v25;
      *((_OWORD *)a2 + 1) = v30;
      *((_OWORD *)a2 + 2) = v35;
      return result;
    }
  }
  else
  {
    if (v4 < v3)
    {
      v33 = *((_OWORD *)a1 + 2);
      v38 = *((_OWORD *)a1 + 3);
      v43 = *((_OWORD *)a1 + 4);
      v23 = *(_OWORD *)a1;
      v28 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v5 = *((_OWORD *)a3 + 4);
      v7 = *((_OWORD *)a3 + 1);
      v6 = *((_OWORD *)a3 + 2);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a1 + 4) = v5;
      *((_OWORD *)a1 + 1) = v7;
      *((_OWORD *)a1 + 2) = v6;
      *((_OWORD *)a3 + 3) = v38;
      *((_OWORD *)a3 + 4) = v43;
      *((_OWORD *)a3 + 2) = v33;
      v8 = v23;
      v9 = v28;
      result = 1;
LABEL_9:
      *(_OWORD *)a3 = v8;
      *((_OWORD *)a3 + 1) = v9;
      return result;
    }
    v36 = *((_OWORD *)a1 + 2);
    v41 = *((_OWORD *)a1 + 3);
    v46 = *((_OWORD *)a1 + 4);
    v26 = *(_OWORD *)a1;
    v31 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 4);
    v19 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v17;
    *((_OWORD *)a1 + 1) = v19;
    *((_OWORD *)a1 + 2) = v18;
    *((_OWORD *)a2 + 3) = v41;
    *((_OWORD *)a2 + 4) = v46;
    *(_OWORD *)a2 = v26;
    *((_OWORD *)a2 + 1) = v31;
    *((_OWORD *)a2 + 2) = v36;
    if (a3[7] < a2[7])
    {
      v37 = *((_OWORD *)a2 + 2);
      v42 = *((_OWORD *)a2 + 3);
      v47 = *((_OWORD *)a2 + 4);
      v27 = *(_OWORD *)a2;
      v32 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v20 = *((_OWORD *)a3 + 4);
      v22 = *((_OWORD *)a3 + 1);
      v21 = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a2 + 4) = v20;
      *((_OWORD *)a2 + 1) = v22;
      *((_OWORD *)a2 + 2) = v21;
      *((_OWORD *)a3 + 3) = v42;
      *((_OWORD *)a3 + 4) = v47;
      *((_OWORD *)a3 + 2) = v37;
      v8 = v27;
      v9 = v32;
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_1D4DAAEF0(uint64_t a1, float *a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;
  float v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[28];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *(_OWORD *)v23 = *(_OWORD *)a1;
  *(_OWORD *)&v23[12] = *(_OWORD *)(a1 + 12);
  v2 = *(float *)(a1 + 28);
  v20 = *(_OWORD *)(a1 + 32);
  v21 = *(_OWORD *)(a1 + 48);
  v22 = *(_OWORD *)(a1 + 64);
  if (v2 >= *(a2 - 13))
  {
    v6 = a1 + 80;
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(float *)(v6 + 28);
      v6 += 80;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3 + 80;
      v5 = *(float *)(v3 + 108);
      v3 += 80;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 20;
      v9 = *(a2 - 13);
      a2 -= 20;
    }
    while (v2 < v9);
  }
  while (v4 < (unint64_t)v8)
  {
    v24 = *(_OWORD *)v4;
    v27 = *(_OWORD *)(v4 + 48);
    v28 = *(_OWORD *)(v4 + 64);
    v25 = *(_OWORD *)(v4 + 16);
    v26 = *(_OWORD *)(v4 + 32);
    v10 = *((_OWORD *)v8 + 4);
    v12 = *((_OWORD *)v8 + 1);
    v11 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(v4 + 48) = *((_OWORD *)v8 + 3);
    *(_OWORD *)(v4 + 64) = v10;
    *(_OWORD *)(v4 + 16) = v12;
    *(_OWORD *)(v4 + 32) = v11;
    *(_OWORD *)v4 = *(_OWORD *)v8;
    *((_OWORD *)v8 + 3) = v27;
    *((_OWORD *)v8 + 4) = v28;
    *((_OWORD *)v8 + 1) = v25;
    *((_OWORD *)v8 + 2) = v26;
    *(_OWORD *)v8 = v24;
    do
    {
      v13 = *(float *)(v4 + 108);
      v4 += 80;
    }
    while (v2 >= v13);
    do
    {
      v14 = *(v8 - 13);
      v8 -= 20;
    }
    while (v2 < v14);
  }
  v15 = (_OWORD *)(v4 - 80);
  if (v4 - 80 != a1)
  {
    *(_OWORD *)a1 = *v15;
    v16 = *(_OWORD *)(v4 - 64);
    v17 = *(_OWORD *)(v4 - 48);
    v18 = *(_OWORD *)(v4 - 16);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v4 - 32);
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
  }
  *(_OWORD *)(v4 - 68) = *(_OWORD *)&v23[12];
  *v15 = *(_OWORD *)v23;
  *(float *)(v4 - 52) = v2;
  *(_OWORD *)(v4 - 32) = v21;
  *(_OWORD *)(v4 - 16) = v22;
  *(_OWORD *)(v4 - 48) = v20;
  return v4;
}

unint64_t sub_1D4DAB04C(uint64_t a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  float *v6;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float v14;
  float v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[28];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v2 = 0;
  *(_OWORD *)v24 = *(_OWORD *)a1;
  *(_OWORD *)&v24[12] = *(_OWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 28);
  v21 = *(_OWORD *)(a1 + 32);
  v22 = *(_OWORD *)(a1 + 48);
  v23 = *(_OWORD *)(a1 + 64);
  do
  {
    v4 = *(float *)(a1 + v2 + 108);
    v2 += 80;
  }
  while (v4 < v3);
  v5 = a1 + v2;
  if (v2 == 80)
  {
    while (v5 < (unint64_t)a2)
    {
      v6 = a2 - 20;
      v8 = *(a2 - 13);
      a2 -= 20;
      if (v8 < v3)
        goto LABEL_9;
    }
    v6 = a2;
  }
  else
  {
    do
    {
      v6 = a2 - 20;
      v7 = *(a2 - 13);
      a2 -= 20;
    }
    while (v7 >= v3);
  }
LABEL_9:
  v9 = a1 + v2;
  if (v5 < (unint64_t)v6)
  {
    v10 = v6;
    do
    {
      v27 = *(_OWORD *)(v9 + 32);
      v28 = *(_OWORD *)(v9 + 48);
      v29 = *(_OWORD *)(v9 + 64);
      v25 = *(_OWORD *)v9;
      v26 = *(_OWORD *)(v9 + 16);
      v12 = *((_OWORD *)v10 + 1);
      v11 = *((_OWORD *)v10 + 2);
      v13 = *((_OWORD *)v10 + 4);
      *(_OWORD *)(v9 + 48) = *((_OWORD *)v10 + 3);
      *(_OWORD *)(v9 + 64) = v13;
      *(_OWORD *)(v9 + 16) = v12;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_OWORD *)v10 = v25;
      *((_OWORD *)v10 + 3) = v28;
      *((_OWORD *)v10 + 4) = v29;
      *((_OWORD *)v10 + 1) = v26;
      *((_OWORD *)v10 + 2) = v27;
      do
      {
        v14 = *(float *)(v9 + 108);
        v9 += 80;
      }
      while (v14 < v3);
      do
      {
        v15 = *(v10 - 13);
        v10 -= 20;
      }
      while (v15 >= v3);
    }
    while (v9 < (unint64_t)v10);
  }
  v16 = (_OWORD *)(v9 - 80);
  if (v9 - 80 != a1)
  {
    *(_OWORD *)a1 = *v16;
    v17 = *(_OWORD *)(v9 - 64);
    v18 = *(_OWORD *)(v9 - 48);
    v19 = *(_OWORD *)(v9 - 16);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v9 - 32);
    *(_OWORD *)(a1 + 64) = v19;
    *(_OWORD *)(a1 + 16) = v17;
    *(_OWORD *)(a1 + 32) = v18;
  }
  *(_OWORD *)(v9 - 68) = *(_OWORD *)&v24[12];
  *v16 = *(_OWORD *)v24;
  *(float *)(v9 - 52) = v3;
  *(_OWORD *)(v9 - 32) = v22;
  *(_OWORD *)(v9 - 16) = v23;
  *(_OWORD *)(v9 - 48) = v21;
  return v9 - 80;
}

BOOL sub_1D4DAB1AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[28];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 52) < *(float *)(a1 + 28))
      {
        v24 = *(_OWORD *)(a1 + 32);
        v26 = *(_OWORD *)(a1 + 48);
        v27 = *(_OWORD *)(a1 + 64);
        v20 = *(_OWORD *)a1;
        v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v6 = *(_OWORD *)(a2 - 16);
        v8 = *(_OWORD *)(a2 - 64);
        v7 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a2 - 32) = v26;
        *(_OWORD *)(a2 - 16) = v27;
        *(_OWORD *)(a2 - 80) = v20;
        *(_OWORD *)(a2 - 64) = v22;
        *(_OWORD *)(a2 - 48) = v24;
      }
      return result;
    case 3uLL:
      sub_1D4DAAD18((float *)a1, (float *)(a1 + 80), (float *)(a2 - 80));
      return 1;
    case 4uLL:
      sub_1D4DAB3C4(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      sub_1D4DAB50C(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      v9 = a1 + 160;
      sub_1D4DAAD18((float *)a1, (float *)(a1 + 80), (float *)(a1 + 160));
      v10 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 28);
    if (v13 < *(float *)(v9 + 28))
    {
      *(_OWORD *)v19 = *(_OWORD *)v10;
      *(_OWORD *)&v19[12] = *(_OWORD *)(v10 + 12);
      v21 = *(_OWORD *)(v10 + 32);
      v23 = *(_OWORD *)(v10 + 48);
      v25 = *(_OWORD *)(v10 + 64);
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        v16 = *(_OWORD *)(a1 + v14 + 208);
        *(_OWORD *)(v15 + 272) = *(_OWORD *)(a1 + v14 + 192);
        *(_OWORD *)(v15 + 288) = v16;
        *(_OWORD *)(v15 + 304) = *(_OWORD *)(a1 + v14 + 224);
        v17 = *(_OWORD *)(a1 + v14 + 176);
        *(_OWORD *)(v15 + 240) = *(_OWORD *)(a1 + v14 + 160);
        *(_OWORD *)(v15 + 256) = v17;
        if (v14 == -160)
          break;
        v14 -= 80;
        if (v13 >= *(float *)(v15 + 108))
        {
          v18 = a1 + v14 + 240;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 12) = *(_OWORD *)&v19[12];
      *(float *)(v18 + 28) = v13;
      *(_OWORD *)(v18 + 32) = v21;
      *(_OWORD *)(v18 + 48) = v23;
      ++v12;
      *(_OWORD *)(v18 + 64) = v25;
      if (v12 == 8)
        return v10 + 80 == a2;
    }
    v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_1D4DAB3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  sub_1D4DAAD18((float *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 28);
  if (result.n128_f32[0] < *(float *)(a3 + 28))
  {
    v24 = *(_OWORD *)(a3 + 32);
    v27 = *(_OWORD *)(a3 + 48);
    v30 = *(_OWORD *)(a3 + 64);
    v18 = *(__n128 *)a3;
    v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v9 = *(_OWORD *)(a4 + 64);
    v11 = *(_OWORD *)(a4 + 16);
    v10 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a4 + 48) = v27;
    *(_OWORD *)(a4 + 64) = v30;
    result = v18;
    *(__n128 *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v24;
    result.n128_u32[0] = *(_DWORD *)(a3 + 28);
    if (result.n128_f32[0] < *(float *)(a2 + 28))
    {
      v25 = *(_OWORD *)(a2 + 32);
      v28 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 64);
      v19 = *(__n128 *)a2;
      v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v12 = *(_OWORD *)(a3 + 64);
      v14 = *(_OWORD *)(a3 + 16);
      v13 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a3 + 48) = v28;
      *(_OWORD *)(a3 + 64) = v31;
      result = v19;
      *(__n128 *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v22;
      *(_OWORD *)(a3 + 32) = v25;
      result.n128_u32[0] = *(_DWORD *)(a2 + 28);
      if (result.n128_f32[0] < *(float *)(a1 + 28))
      {
        v26 = *(_OWORD *)(a1 + 32);
        v29 = *(_OWORD *)(a1 + 48);
        v32 = *(_OWORD *)(a1 + 64);
        v20 = *(__n128 *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v15 = *(_OWORD *)(a2 + 64);
        v17 = *(_OWORD *)(a2 + 16);
        v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 48) = v29;
        *(_OWORD *)(a2 + 64) = v32;
        result = v20;
        *(__n128 *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v26;
      }
    }
  }
  return result;
}

__n128 sub_1D4DAB50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  result = sub_1D4DAB3C4(a1, a2, a3, a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 28);
  if (result.n128_f32[0] < *(float *)(a4 + 28))
  {
    v31 = *(_OWORD *)(a4 + 32);
    v35 = *(_OWORD *)(a4 + 48);
    v39 = *(_OWORD *)(a4 + 64);
    v23 = *(__n128 *)a4;
    v27 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v11 = *(_OWORD *)(a5 + 64);
    v13 = *(_OWORD *)(a5 + 16);
    v12 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v11;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = v12;
    *(_OWORD *)(a5 + 48) = v35;
    *(_OWORD *)(a5 + 64) = v39;
    result = v23;
    *(__n128 *)a5 = v23;
    *(_OWORD *)(a5 + 16) = v27;
    *(_OWORD *)(a5 + 32) = v31;
    result.n128_u32[0] = *(_DWORD *)(a4 + 28);
    if (result.n128_f32[0] < *(float *)(a3 + 28))
    {
      v32 = *(_OWORD *)(a3 + 32);
      v36 = *(_OWORD *)(a3 + 48);
      v40 = *(_OWORD *)(a3 + 64);
      v24 = *(__n128 *)a3;
      v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v14 = *(_OWORD *)(a4 + 64);
      v16 = *(_OWORD *)(a4 + 16);
      v15 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = v14;
      *(_OWORD *)(a3 + 16) = v16;
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)(a4 + 48) = v36;
      *(_OWORD *)(a4 + 64) = v40;
      result = v24;
      *(__n128 *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v28;
      *(_OWORD *)(a4 + 32) = v32;
      result.n128_u32[0] = *(_DWORD *)(a3 + 28);
      if (result.n128_f32[0] < *(float *)(a2 + 28))
      {
        v33 = *(_OWORD *)(a2 + 32);
        v37 = *(_OWORD *)(a2 + 48);
        v41 = *(_OWORD *)(a2 + 64);
        v25 = *(__n128 *)a2;
        v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v17 = *(_OWORD *)(a3 + 64);
        v19 = *(_OWORD *)(a3 + 16);
        v18 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = v17;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = v18;
        *(_OWORD *)(a3 + 48) = v37;
        *(_OWORD *)(a3 + 64) = v41;
        result = v25;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v29;
        *(_OWORD *)(a3 + 32) = v33;
        result.n128_u32[0] = *(_DWORD *)(a2 + 28);
        if (result.n128_f32[0] < *(float *)(a1 + 28))
        {
          v34 = *(_OWORD *)(a1 + 32);
          v38 = *(_OWORD *)(a1 + 48);
          v42 = *(_OWORD *)(a1 + 64);
          v26 = *(__n128 *)a1;
          v30 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v20 = *(_OWORD *)(a2 + 64);
          v22 = *(_OWORD *)(a2 + 16);
          v21 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a2 + 48) = v38;
          *(_OWORD *)(a2 + 64) = v42;
          result = v26;
          *(__n128 *)a2 = v26;
          *(_OWORD *)(a2 + 16) = v30;
          *(_OWORD *)(a2 + 32) = v34;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1D4DAB6B8(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = a1 + 80 * v11;
      do
      {
        a5 = sub_1D4DAB91C(a1, a5, a4, v10, v13);
        v13 -= 80;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (v15[1].n128_f32[3] < *(float *)(a1 + 28))
        {
          v38 = v15[2];
          v40 = v15[3];
          v42 = v15[4];
          v34 = *v15;
          v36 = v15[1];
          *v15 = *(__n128 *)a1;
          v16 = *(__n128 *)(a1 + 64);
          v18 = *(__n128 *)(a1 + 16);
          v17 = *(__n128 *)(a1 + 32);
          v15[3] = *(__n128 *)(a1 + 48);
          v15[4] = v16;
          v15[1] = v18;
          v15[2] = v17;
          *(__n128 *)(a1 + 48) = v40;
          *(__n128 *)(a1 + 64) = v42;
          *(__n128 *)a1 = v34;
          *(__n128 *)(a1 + 16) = v36;
          *(__n128 *)(a1 + 32) = v38;
          sub_1D4DAB91C(a1, v34, a4, v10, a1);
        }
        v15 += 5;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 81)
    {
      v19 = v9 / 0x50uLL;
      do
      {
        v20 = 0;
        v39 = *(__n128 *)(a1 + 32);
        v41 = *(__n128 *)(a1 + 48);
        v43 = *(__n128 *)(a1 + 64);
        v35 = *(__n128 *)a1;
        v37 = *(__n128 *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = (_OWORD *)v21;
          v23 = v20 + 1;
          v21 += 80 * (v20 + 1);
          v24 = 2 * v20;
          v20 = (2 * v20) | 1;
          v25 = v24 + 2;
          if (v25 < v19 && *((float *)&v22[5 * v23 + 1] + 3) < *(float *)(v21 + 108))
          {
            v21 += 80;
            v20 = v25;
          }
          *v22 = *(_OWORD *)v21;
          v26 = *(_OWORD *)(v21 + 16);
          v27 = *(_OWORD *)(v21 + 32);
          v28 = *(_OWORD *)(v21 + 64);
          v22[3] = *(_OWORD *)(v21 + 48);
          v22[4] = v28;
          v22[1] = v26;
          v22[2] = v27;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 -= 5;
        if ((__n128 *)v21 == v7)
        {
          *(__n128 *)v21 = v35;
          *(__n128 *)(v21 + 48) = v41;
          *(__n128 *)(v21 + 64) = v43;
          *(__n128 *)(v21 + 16) = v37;
          *(__n128 *)(v21 + 32) = v39;
        }
        else
        {
          *(__n128 *)v21 = *v7;
          v29 = v7[1];
          v30 = v7[2];
          v31 = v7[4];
          *(__n128 *)(v21 + 48) = v7[3];
          *(__n128 *)(v21 + 64) = v31;
          *(__n128 *)(v21 + 16) = v29;
          *(__n128 *)(v21 + 32) = v30;
          v7[2] = v39;
          v7[3] = v41;
          v7[4] = v43;
          *v7 = v35;
          v7[1] = v37;
          sub_1D4DABA58(a1, v21 + 80, v37, a4, 0xCCCCCCCCCCCCCCCDLL * ((v21 + 80 - a1) >> 4));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_1D4DAB91C(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  _BYTE v17[28];

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a5 - a1) >> 4)))
    {
      v6 = (0x999999999999999ALL * ((a5 - a1) >> 4)) | 1;
      v7 = a1 + 80 * v6;
      if ((uint64_t)(0x999999999999999ALL * ((a5 - a1) >> 4) + 2) < a4
        && *(float *)(a1 + 80 * v6 + 28) < *(float *)(v7 + 108))
      {
        v7 += 80;
        v6 = 0x999999999999999ALL * ((a5 - a1) >> 4) + 2;
      }
      result.n128_u32[0] = *(_DWORD *)(a5 + 28);
      if (*(float *)(v7 + 28) >= result.n128_f32[0])
      {
        *(_OWORD *)v17 = *(_OWORD *)a5;
        *(_OWORD *)&v17[12] = *(_OWORD *)(a5 + 12);
        v14 = *(_OWORD *)(a5 + 32);
        v15 = *(_OWORD *)(a5 + 48);
        v16 = *(__n128 *)(a5 + 64);
        do
        {
          v8 = (_OWORD *)a5;
          a5 = v7;
          *v8 = *(_OWORD *)v7;
          v9 = *(_OWORD *)(v7 + 16);
          v10 = *(_OWORD *)(v7 + 32);
          v11 = *(_OWORD *)(v7 + 64);
          v8[3] = *(_OWORD *)(v7 + 48);
          v8[4] = v11;
          v8[1] = v9;
          v8[2] = v10;
          if (v5 < v6)
            break;
          v12 = (2 * v6) | 1;
          v7 = a1 + 80 * v12;
          v13 = 2 * v6 + 2;
          if (v13 < a4 && *(float *)(a1 + 80 * v12 + 28) < *(float *)(v7 + 108))
          {
            v7 += 80;
            v12 = v13;
          }
          v6 = v12;
        }
        while (*(float *)(v7 + 28) >= result.n128_f32[0]);
        *(_OWORD *)(a5 + 12) = *(_OWORD *)&v17[12];
        *(_OWORD *)a5 = *(_OWORD *)v17;
        *(_DWORD *)(a5 + 28) = result.n128_u32[0];
        result = v16;
        *(_OWORD *)(a5 + 32) = v14;
        *(_OWORD *)(a5 + 48) = v15;
        *(__n128 *)(a5 + 64) = v16;
      }
    }
  }
  return result;
}

__n128 sub_1D4DABA58(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  _BYTE v15[28];

  v5 = a5 - 2;
  if (a5 >= 2)
  {
    v6 = v5 >> 1;
    result.n128_u32[0] = *(_DWORD *)(a2 - 52);
    if (*(float *)(a1 + 80 * (v5 >> 1) + 28) < result.n128_f32[0])
    {
      v7 = a2 - 80;
      *(_OWORD *)v15 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 - 68);
      v12 = *(_OWORD *)(a2 - 48);
      v13 = *(_OWORD *)(a2 - 32);
      v14 = *(__n128 *)(a2 - 16);
      do
      {
        v8 = (_OWORD *)v7;
        v7 = a1 + 80 * v6;
        *v8 = *(_OWORD *)v7;
        v9 = *(_OWORD *)(v7 + 16);
        v10 = *(_OWORD *)(v7 + 32);
        v11 = *(_OWORD *)(v7 + 64);
        v8[3] = *(_OWORD *)(v7 + 48);
        v8[4] = v11;
        v8[1] = v9;
        v8[2] = v10;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
      }
      while (*(float *)(a1 + 80 * v6 + 28) < result.n128_f32[0]);
      *(_OWORD *)v7 = *(_OWORD *)v15;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v15[12];
      *(_DWORD *)(v7 + 28) = result.n128_u32[0];
      *(_OWORD *)(v7 + 32) = v12;
      *(_OWORD *)(v7 + 48) = v13;
      result = v14;
      *(__n128 *)(v7 + 64) = v14;
    }
  }
  return result;
}

void sub_1D4DABB10(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x14C1BACF914C1BADLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 296 * ((296 * a2 - 296) / 0x128) + 296;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x14C1BACF914C1BADLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xDD67C8A60DD67CLL)
      sub_1D4D5DFA8();
    v10 = 0x14C1BACF914C1BADLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x6EB3E45306EB3ELL)
      v11 = 0xDD67C8A60DD67CLL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1D4D5E5CC(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[296 * v8];
    v18 = &v12[296 * v11];
    v14 = 296 * ((296 * a2 - 296) / 0x128) + 296;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1D4DABCB4(a1, &v15);
    sub_1D4DABE64(&v15);
  }
}

void sub_1D4DABCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4DABE64((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DABCB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4DABD28((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4DABD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 296;
      sub_1D4D5E6B4(v7 - 296, v9);
      v7 = *((_QWORD *)&v15 + 1) - 296;
      *((_QWORD *)&v15 + 1) -= 296;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1D4DABDE0((uint64_t)v12);
  return v10;
}

void sub_1D4DABDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4DABDE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4DABDE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4DABE14((uint64_t *)a1);
  return a1;
}

uint64_t *sub_1D4DABE14(uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_1D4D5EE30(v3, v1);
      v1 += 37;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1D4DABE64(void **a1)
{
  sub_1D4DABE94((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1D4DABE94(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 296;
      result = sub_1D4D5EE30(v4, (_QWORD *)(v1 - 296));
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1D4DABED8(uint64_t a1)
{
  uint64_t result;

  result = sub_1D4D7CAC8(a1);
  *(_QWORD *)result = &off_1E988AD50;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1D4DABF04()
{
  nullsub_2();
  JUMPOUT(0x1D826897CLL);
}

_QWORD *sub_1D4DABF28(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v6;

  if (*(_DWORD *)(a1 + 12))
    v6 = 12;
  else
    v6 = 9;
  return sub_1D4DABF4C(a2, a3, v6, a4, a5);
}

_QWORD *sub_1D4DABF4C(_QWORD *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float v22;
  unint64_t i;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  signed int v28;
  signed int v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  signed int v41;
  signed int v42;
  int v43;
  int v44;
  int v45;
  int8x16_t v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x8_t v49;
  BOOL v50;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  signed int v56;
  unsigned int v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int8x8_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  signed int v67;
  unsigned int v68;
  int8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x8_t v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int *v77;
  _DWORD *v78;
  unsigned int *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  float v87;
  unint64_t v88;
  float *v89;
  float *v90;
  float *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  float *v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  _QWORD v105[16];
  uint8x16_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v6 = result[2];
  v5 = result[3];
  v105[0] = -3 * v5;
  v105[1] = -3 * v5 + 1;
  v105[2] = 2 - 2 * v5;
  v105[3] = 3 - v5;
  v105[4] = 3;
  v105[5] = v5 + 3;
  v105[6] = 2 * v5 + 2;
  v105[7] = 3 * v5 + 1;
  v105[8] = 3 * v5;
  v105[9] = 3 * v5 - 1;
  v105[10] = 2 * v5 - 2;
  v105[11] = v5 - 3;
  v105[12] = -3;
  v105[13] = -3 - v5;
  v105[14] = (2 * v5) ^ 0xFFFFFFFFFFFFFFFELL;
  v105[15] = -3 * v5 - 1;
  v100 = v6 - 4;
  if ((unint64_t)(v6 - 4) >= 5)
  {
    v10 = ~(-1 << a3);
    v11 = *result;
    v12 = result[1] - 4;
    v13 = 4;
    v14 = xmmword_1D4DB2BC0;
    v15 = xmmword_1D4DB2550;
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    v17.i64[0] = 0x800000008;
    v17.i64[1] = 0x800000008;
    v18 = (int8x16_t)xmmword_1D4DB2BD0;
    v19 = (int8x16_t)xmmword_1D4DB2BE0;
    v20 = (int8x16_t)xmmword_1D4DB2BF0;
    v21 = (int8x16_t)xmmword_1D4DB2C00;
    v104 = a3;
    v102 = *result;
    v103 = result;
    v101 = v12;
    do
    {
      if (v12 >= 5)
      {
        v22 = (float)v13;
        for (i = 4; i != v12; ++i)
        {
          v24 = 0;
          v25 = (unsigned __int8 *)(v11 + i + result[3] * v13);
          do
          {
            v106.i8[v24] = v25[v105[v24]];
            ++v24;
          }
          while (v24 != 16);
          v26 = 0;
          v27 = *v25;
          v28 = v27 - a2;
          v29 = v27 + a2;
          v30 = vdupq_n_s32(v27 + a2);
          v31 = vdupq_n_s32(v27 - a2);
          v32 = 0uLL;
          v33 = 0uLL;
          v34 = 0uLL;
          v35 = 0uLL;
          v36 = (int32x4_t)v15;
          v37 = (int32x4_t)v14;
          do
          {
            v38 = vmovl_u8(*(uint8x8_t *)&v106.i8[v26]);
            v39 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8);
            v40 = (int32x4_t)vmovl_high_u16(v38);
            v35 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v40, v30), v16), (uint32x4_t)v37), v35);
            v34 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v39, v30), v16), (uint32x4_t)v36), v34);
            v33 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v31, v40), v16), (uint32x4_t)v37), v33);
            v32 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v31, v39), v16), (uint32x4_t)v36), v32);
            v26 += 8;
            v36 = vaddq_s32(v36, v17);
            v37 = vaddq_s32(v37, v17);
          }
          while (v26 != 16);
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = vorrq_s8(v34, v35);
          v47 = vorr_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
          v48 = vorrq_s8(v32, v33);
          v49 = vorr_s8(*(int8x8_t *)v48.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
          do
          {
            v41 = (v41 + (((v47.i32[0] | v47.i32[1] | ((v47.i32[0] | v47.i32[1]) << 16)) >> v45) & 1))
                * (((v47.i32[0] | v47.i32[1] | ((v47.i32[0] | v47.i32[1]) << 16)) >> v45) & 1);
            v50 = v41 <= v44;
            if (v41 > v44)
              v44 = v41;
            v42 = (v42 + (((v49.i32[0] | v49.i32[1] | ((v49.i32[0] | v49.i32[1]) << 16)) >> v45) & 1))
                * (((v49.i32[0] | v49.i32[1] | ((v49.i32[0] | v49.i32[1]) << 16)) >> v45) & 1);
            if (!v50 || v42 > v44)
              v43 = v45;
            if (v42 > v44)
              v44 = v42;
            ++v45;
          }
          while (v45 != 32);
          if (v44 >= a3)
          {
            if (v43 <= 0)
              v52 = -(-v43 & 0xF);
            else
              v52 = v43 & 0xF;
            v53 = v106.u8[v52];
            v54 = v43 - v44;
            if (v53 <= v27)
            {
              if (v44 >= 1)
              {
                do
                {
                  if (v43 <= 0)
                    v66 = -(-v43 & 0xF);
                  else
                    v66 = v43 & 0xF;
                  v67 = v106.u8[v66];
                  if (v28 > v67)
                  {
                    v68 = 0;
                    v69 = (int8x16_t)vcgtq_u8(v106, (uint8x16_t)vdupq_n_s8(v67));
                    v70 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v69.i8);
                    v71 = (uint16x8_t)vmovl_high_s8(v69);
                    v72 = vorrq_s8(vorrq_s8(vbicq_s8(v19, (int8x16_t)vmovl_u16(*(uint16x4_t *)v70.i8)), vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v71.i8))), vorrq_s8(vbicq_s8(v21, (int8x16_t)vmovl_high_u16(v70)), vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v71))));
                    v73 = vorr_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
                    v74 = v67 + 1;
                    do
                    {
                      v75 = ((v73.i32[0] | v73.i32[1] | ((v73.i32[0] | v73.i32[1]) << 16)) >> v68) & v10;
                      if (v68 > 0xE)
                        break;
                      ++v68;
                    }
                    while (v75 != v10);
                    if (v75 == v10)
                      v28 = v74;
                  }
                  --v43;
                }
                while (v43 > v54);
              }
              v65 = v27 - v28;
            }
            else
            {
              if (v44 >= 1)
              {
                do
                {
                  if (v43 <= 0)
                    v55 = -(-v43 & 0xF);
                  else
                    v55 = v43 & 0xF;
                  v56 = v106.u8[v55];
                  if (v29 < v56)
                  {
                    v57 = 0;
                    v58 = (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v56), v106);
                    v59 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v58.i8);
                    v60 = (uint16x8_t)vmovl_high_s8(v58);
                    v61 = vorrq_s8(vorrq_s8(vbicq_s8(v19, (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8)), vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8))), vorrq_s8(vbicq_s8(v21, (int8x16_t)vmovl_high_u16(v59)), vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v60))));
                    v62 = vorr_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
                    v63 = v56 - 1;
                    do
                    {
                      v64 = ((v62.i32[0] | v62.i32[1] | ((v62.i32[0] | v62.i32[1]) << 16)) >> v57) & v10;
                      if (v57 > 0xE)
                        break;
                      ++v57;
                    }
                    while (v64 != v10);
                    if (v64 == v10)
                      v29 = v63;
                  }
                  --v43;
                }
                while (v43 > v54);
              }
              v65 = v29 - v27;
            }
            v77 = *(unsigned int **)(a5 + 8);
            v76 = *(_QWORD *)(a5 + 16);
            if ((unint64_t)v77 >= v76)
            {
              v79 = *(unsigned int **)a5;
              v80 = ((uint64_t)v77 - *(_QWORD *)a5) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
                sub_1D4D5DFA8();
              v82 = v76 - (_QWORD)v79;
              if (v82 >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)sub_1D4D5EA14(a5 + 16, v83);
                v79 = *(unsigned int **)a5;
                v77 = *(unsigned int **)(a5 + 8);
              }
              else
              {
                v84 = 0;
              }
              v85 = &v84[4 * v80];
              *(_DWORD *)v85 = v65;
              v78 = v85 + 4;
              while (v77 != v79)
              {
                v86 = *--v77;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(_QWORD *)a5 = v85;
              *(_QWORD *)(a5 + 8) = v78;
              *(_QWORD *)(a5 + 16) = &v84[4 * v83];
              if (v79)
                operator delete(v79);
              a3 = v104;
              v11 = v102;
              result = v103;
              v12 = v101;
              v15 = xmmword_1D4DB2550;
              v14 = xmmword_1D4DB2BC0;
              v16.i64[0] = 0x100000001;
              v16.i64[1] = 0x100000001;
              v17.i64[0] = 0x800000008;
              v17.i64[1] = 0x800000008;
              v19 = (int8x16_t)xmmword_1D4DB2BE0;
              v18 = (int8x16_t)xmmword_1D4DB2BD0;
              v21 = (int8x16_t)xmmword_1D4DB2C00;
              v20 = (int8x16_t)xmmword_1D4DB2BF0;
            }
            else
            {
              *v77 = v65;
              v78 = v77 + 1;
            }
            *(_QWORD *)(a5 + 8) = v78;
            v87 = (float)i;
            v89 = *(float **)(a4 + 8);
            v88 = *(_QWORD *)(a4 + 16);
            if ((unint64_t)v89 >= v88)
            {
              v91 = *(float **)a4;
              v92 = ((uint64_t)v89 - *(_QWORD *)a4) >> 3;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
                sub_1D4D5DFA8();
              v94 = v88 - (_QWORD)v91;
              if (v94 >> 2 > v93)
                v93 = v94 >> 2;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                v96 = (char *)sub_1D4D5E2CC(a4 + 16, v95);
                v91 = *(float **)a4;
                v89 = *(float **)(a4 + 8);
              }
              else
              {
                v96 = 0;
              }
              v97 = (float *)&v96[8 * v92];
              *v97 = v87;
              v97[1] = v22;
              v98 = v97;
              if (v89 != v91)
              {
                do
                {
                  v99 = *((_QWORD *)v89 - 1);
                  v89 -= 2;
                  *((_QWORD *)v98 - 1) = v99;
                  v98 -= 2;
                }
                while (v89 != v91);
                v91 = *(float **)a4;
              }
              v90 = v97 + 2;
              *(_QWORD *)a4 = v98;
              *(_QWORD *)(a4 + 8) = v97 + 2;
              *(_QWORD *)(a4 + 16) = &v96[8 * v95];
              if (v91)
                operator delete(v91);
              a3 = v104;
              v11 = v102;
              result = v103;
              v12 = v101;
              v15 = xmmword_1D4DB2550;
              v14 = xmmword_1D4DB2BC0;
              v16.i64[0] = 0x100000001;
              v16.i64[1] = 0x100000001;
              v17.i64[0] = 0x800000008;
              v17.i64[1] = 0x800000008;
              v19 = (int8x16_t)xmmword_1D4DB2BE0;
              v18 = (int8x16_t)xmmword_1D4DB2BD0;
              v21 = (int8x16_t)xmmword_1D4DB2C00;
              v20 = (int8x16_t)xmmword_1D4DB2BF0;
            }
            else
            {
              *v89 = v87;
              v89[1] = v22;
              v90 = v89 + 2;
            }
            *(_QWORD *)(a4 + 8) = v90;
          }
        }
      }
      ++v13;
    }
    while (v13 != v100);
  }
  return result;
}

uint64_t sub_1D4DAC584()
{
  return 1;
}

void sub_1D4DAC58C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(_DWORD *)(a1 + 12))
    sub_1D4DAC5BC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *a3, *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a1 + 8));
}

void sub_1D4DAC5BC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  if ((((a1 | a5) | a4) & 0xF) != 0 || a2 < 0x20 || (a6 & 0xF) != 0)
    sub_1D4DAC5F0(a1, a2, a3, a4, a5, a6, 9, a7);
  else
    sub_1D4DACABC((char *)a1, a2, a3, a4, a5, a6, a7);
}

void sub_1D4DAC5F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, signed int a8)
{
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  signed int v26;
  signed int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint8x16_t v31;
  int8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  int8x16_t v38;
  int8x8_t v39;
  int8x16_t v40;
  int8x8_t v41;
  BOOL v42;
  int v44;
  unsigned int v45;
  int v46;
  signed int v47;
  int v48;
  signed int v49;
  unsigned int v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  int8x16_t v54;
  int8x8_t v55;
  int v56;
  unsigned int v57;
  signed int v58;
  int v59;
  signed int v60;
  unsigned int v61;
  int8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x8_t v66;
  int v67;
  unsigned int v68;
  signed int v69;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[16];
  uint8x16_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v78[0] = -3 * a4;
  v78[1] = -3 * a4 + 1;
  v78[2] = 2 - 2 * a4;
  v78[3] = 3 - a4;
  v78[4] = 3;
  v78[5] = a4 + 3;
  v78[6] = 2 * a4 + 2;
  v78[7] = 3 * a4 + 1;
  v78[8] = 3 * a4;
  v78[9] = 3 * a4 - 1;
  v78[10] = 2 * a4 - 2;
  v78[11] = a4 - 3;
  v78[12] = -3;
  v78[13] = -3 - a4;
  v78[14] = (2 * a4) ^ 0xFFFFFFFFFFFFFFFELL;
  v78[15] = -3 * a4 - 1;
  v77 = a3 - 7;
  if ((unint64_t)(a3 - 7) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    v12 = 0;
    v13 = ~(-1 << a7);
    v14 = a2 - 3;
    v15 = -2;
    if (a2 - 2 < a2)
      v15 = 0;
    v16 = 3;
    v74 = a5 + a2 - 3 + 3 * a6;
    v75 = v15 + 3;
    v17 = (int8x16_t)xmmword_1D4DB2BD0;
    v18 = (int8x16_t)xmmword_1D4DB2BE0;
    v76 = a5 + 3 * a6;
    v19 = (int8x16_t)xmmword_1D4DB2BF0;
    v20 = (int8x16_t)xmmword_1D4DB2C00;
    do
    {
      v21 = v76 + v12 * a6;
      *(_BYTE *)(v21 + 2) = 0;
      *(_WORD *)v21 = 0;
      if (v14 <= 3)
        goto LABEL_60;
      for (i = 3; i != v14; ++i)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)(a1 + v16 * a4 + i);
        do
        {
          v79.i8[v23] = v24[v78[v23]];
          ++v23;
        }
        while (v23 != 16);
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = *v24;
        v31 = (uint8x16_t)vdupq_n_s8(v30);
        v32 = (int8x16_t)vcgtq_u8(v79, v31);
        v33 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v32.i8);
        v34 = (uint16x8_t)vmovl_high_s8(v32);
        v35 = (int8x16_t)vcgtq_u8(v31, v79);
        v36 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v35.i8);
        v37 = (uint16x8_t)vmovl_high_s8(v35);
        v38 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v33.i8), v18), vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v17)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v33), v20), vandq_s8((int8x16_t)vmovl_high_u16(v34), v19)));
        v39 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
        v40 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v36.i8), v18), vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8), v17)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v36), v20), vandq_s8((int8x16_t)vmovl_high_u16(v37), v19)));
        v41 = vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
        do
        {
          v26 = ((((v39.i32[0] | v39.i32[1] | ((v39.i32[0] | v39.i32[1]) << 16)) >> v25) & 1) + v26)
              * (((v39.i32[0] | v39.i32[1] | ((v39.i32[0] | v39.i32[1]) << 16)) >> v25) & 1);
          v42 = v26 <= v29;
          if (v26 > v29)
            v29 = v26;
          v27 = ((((v41.i32[0] | v41.i32[1] | ((v41.i32[0] | v41.i32[1]) << 16)) >> v25) & 1) + v27)
              * (((v41.i32[0] | v41.i32[1] | ((v41.i32[0] | v41.i32[1]) << 16)) >> v25) & 1);
          if (!v42 || v27 > v29)
            v28 = v25;
          if (v27 > v29)
            v29 = v27;
          ++v25;
        }
        while (v25 != 32);
        if (v29 >= a7)
        {
          if (v28 <= 0)
            v44 = -(-v28 & 0xF);
          else
            v44 = v28 & 0xF;
          v45 = v79.u8[v44];
          v46 = v28 - v29;
          if (v45 <= v30)
          {
            if (v29 < 1)
            {
              v58 = v30;
            }
            else
            {
              v58 = v30;
              do
              {
                if (v28 <= 0)
                  v59 = -(-v28 & 0xF);
                else
                  v59 = v28 & 0xF;
                v60 = v79.u8[v59];
                if (v58 > v60)
                {
                  v61 = 0;
                  v62 = (int8x16_t)vcgtq_u8(v79, (uint8x16_t)vdupq_n_s8(v60));
                  v63 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v62.i8);
                  v64 = (uint16x8_t)vmovl_high_s8(v62);
                  v65 = vorrq_s8(vorrq_s8(vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8)), vbicq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8))), vorrq_s8(vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v63)), vbicq_s8(v19, (int8x16_t)vmovl_high_u16(v64))));
                  v66 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
                  v67 = v60 + 1;
                  do
                  {
                    v68 = ((v66.i32[0] | v66.i32[1] | ((v66.i32[0] | v66.i32[1]) << 16)) >> v61) & v13;
                    if (v61 > 0xE)
                      break;
                    ++v61;
                  }
                  while (v68 != v13);
                  if (v68 == v13)
                    v58 = v67;
                }
                --v28;
              }
              while (v28 > v46);
            }
            v69 = v30 - v58;
          }
          else
          {
            if (v29 < 1)
            {
              v47 = v30;
            }
            else
            {
              v47 = v30;
              do
              {
                if (v28 <= 0)
                  v48 = -(-v28 & 0xF);
                else
                  v48 = v28 & 0xF;
                v49 = v79.u8[v48];
                if (v47 < v49)
                {
                  v50 = 0;
                  v51 = (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v49), v79);
                  v52 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v51.i8);
                  v53 = (uint16x8_t)vmovl_high_s8(v51);
                  v54 = vorrq_s8(vorrq_s8(vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8)), vbicq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8))), vorrq_s8(vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v52)), vbicq_s8(v19, (int8x16_t)vmovl_high_u16(v53))));
                  v55 = vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
                  v56 = v49 - 1;
                  do
                  {
                    v57 = ((v55.i32[0] | v55.i32[1] | ((v55.i32[0] | v55.i32[1]) << 16)) >> v50) & v13;
                    if (v50 > 0xE)
                      break;
                    ++v50;
                  }
                  while (v57 != v13);
                  if (v57 == v13)
                    v47 = v56;
                }
                --v28;
              }
              while (v28 > v46);
            }
            v69 = v47 - v30;
          }
          if (v69 < a8)
            LOBYTE(v69) = 0;
          *(_BYTE *)(a5 + i + v16 * a6) = v69;
        }
      }
      if (a2 >= 3)
      {
LABEL_60:
        bzero((void *)(v74 + v12 * a6), v75);
        v20 = (int8x16_t)xmmword_1D4DB2C00;
        v19 = (int8x16_t)xmmword_1D4DB2BF0;
        v18 = (int8x16_t)xmmword_1D4DB2BE0;
        v17 = (int8x16_t)xmmword_1D4DB2BD0;
      }
      ++v16;
    }
    while (v12++ != v77);
  }
}

char *sub_1D4DACABC(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v9;
  char *v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  uint8x16_t v101;
  uint8x16_t v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  uint8x16_t v109;
  uint8x16_t v110;
  uint8x16_t v111;
  uint8x16_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  int8x16_t v124;
  uint64_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  uint8x16_t v133;
  uint8x16_t v134;
  uint8x16_t v135;
  uint8x16_t v136;
  uint8x16_t v137;
  uint8x16_t v138;
  int8x16_t v140;
  _OWORD v141[2];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (a3 <= 3)
    v9 = 3;
  else
    v9 = a3;
  if (((a6 | a4) & 0xF) == 0)
  {
    v11 = result;
    v12 = -(int)a2;
    bzero((char *)&v141[1] - (v12 & 0xF) + 13, (v12 & 0xF) + 3);
    result = (char *)memset((char *)&v141[1] + -(28 - (v12 & 0xF)) - (v12 & 0xF) + 12, 255, 29 - (v12 & 0xFu));
    if ((unint64_t)(v9 - 3) >= 4)
    {
      v128 = (int8x16_t)v141[0];
      v129 = (uint8x16_t)vdupq_n_s8(a7);
      v127 = (int8x16_t)v141[1];
      v14 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
      v15 = 3 * a4 - 16;
      v16 = &v11[v15 - 48 * (a4 >> 4)];
      v17 = a5 + 3 * a6;
      v18 = &v11[v15 - 32 * (a4 >> 4)];
      v19 = &v11[48 * (a4 >> 4) + 3 * a4];
      v20 = &v11[32 * (a4 >> 4) + 3 * a4];
      v21 = &v11[v15 - 16 * (a4 >> 4)];
      v22 = &v11[16 * (a4 >> 4) + 3 * a4];
      result = &v11[3 * a4];
      v23 = 3;
      do
      {
        if (v14)
        {
          v24 = 0;
          v25 = 0;
          v26 = xmmword_1D4DB2C30;
          do
          {
            if (v23 > 3 || (v27 = 0uLL, (int)v24 >= 1))
              v27 = *(int8x16_t *)&v16[v24];
            v140 = (int8x16_t)v26;
            v28 = *(int8x16_t *)&v16[v24 + 16];
            v29 = (uint8x16_t)vextq_s8(v27, v28, 0xFuLL);
            v30 = (uint8x16_t)vextq_s8(v28, *(int8x16_t *)&v16[v24 + 32], 1uLL);
            v31 = *(int8x16_t *)&v18[v24 + 16];
            v32 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v18[v24], v31, 0xEuLL);
            v33 = (uint8x16_t)vextq_s8(v31, *(int8x16_t *)&v18[v24 + 32], 2uLL);
            v34 = *(int8x16_t *)&v21[v24 + 16];
            v35 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v21[v24], v34, 0xDuLL);
            v36 = (uint8x16_t)vextq_s8(v34, *(int8x16_t *)&v21[v24 + 32], 3uLL);
            v37 = *(int8x16_t *)&result[v24];
            v38 = (uint8x16_t)vextq_s8(*(int8x16_t *)&result[v24 - 16], v37, 0xDuLL);
            v39 = (uint8x16_t)vextq_s8(v37, *(int8x16_t *)&result[v24 + 16], 3uLL);
            v40 = *(int8x16_t *)&v22[v24];
            v41 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v22[v24 - 16], v40, 0xDuLL);
            v42 = (uint8x16_t)vextq_s8(v40, *(int8x16_t *)&v22[v24 + 16], 3uLL);
            v43 = *(int8x16_t *)&v20[v24];
            v44 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v20[v24 - 16], v43, 0xEuLL);
            v45 = (uint8x16_t)vextq_s8(v43, *(int8x16_t *)&v20[v24 + 16], 2uLL);
            v46 = (int8x16_t *)&v19[v24];
            if (a2 - 16 > v25 || (v47 = 0uLL, v9 - 4 > v23))
              v47 = v46[1];
            v48 = (uint8x16_t)vextq_s8(v46[-1], *v46, 0xFuLL);
            v49 = (uint8x16_t)vextq_s8(*v46, v47, 1uLL);
            v50 = vqsubq_u8((uint8x16_t)v37, v29);
            v51 = vqsubq_u8((uint8x16_t)v37, (uint8x16_t)v28);
            v137 = vqsubq_u8((uint8x16_t)v28, (uint8x16_t)v37);
            v138 = vqsubq_u8(v29, (uint8x16_t)v37);
            v52 = vqsubq_u8((uint8x16_t)v37, v30);
            v53 = vqsubq_u8((uint8x16_t)v37, v33);
            v135 = vqsubq_u8(v33, (uint8x16_t)v37);
            v136 = vqsubq_u8(v30, (uint8x16_t)v37);
            v54 = vqsubq_u8((uint8x16_t)v37, v36);
            v55 = vqsubq_u8((uint8x16_t)v37, v39);
            v133 = vqsubq_u8(v39, (uint8x16_t)v37);
            v134 = vqsubq_u8(v36, (uint8x16_t)v37);
            v56 = vqsubq_u8((uint8x16_t)v37, v42);
            v57 = vqsubq_u8(v42, (uint8x16_t)v37);
            v58 = vqsubq_u8((uint8x16_t)v37, v45);
            v131 = vqsubq_u8(v45, (uint8x16_t)v37);
            v132 = v57;
            v59 = vqsubq_u8((uint8x16_t)v37, v49);
            v60 = vqsubq_u8(v49, (uint8x16_t)v37);
            v61 = vqsubq_u8((uint8x16_t)v37, *(uint8x16_t *)v46);
            v130 = vqsubq_u8(*(uint8x16_t *)v46, (uint8x16_t)v37);
            v62 = vqsubq_u8((uint8x16_t)v37, v48);
            v63 = vqsubq_u8(v48, (uint8x16_t)v37);
            v64 = vqsubq_u8((uint8x16_t)v37, v44);
            v65 = vqsubq_u8(v44, (uint8x16_t)v37);
            v66 = vqsubq_u8((uint8x16_t)v37, v41);
            v67 = vqsubq_u8(v41, (uint8x16_t)v37);
            v68 = vqsubq_u8((uint8x16_t)v37, v38);
            v69 = vqsubq_u8(v38, (uint8x16_t)v37);
            v70 = vqsubq_u8((uint8x16_t)v37, v35);
            v71 = vqsubq_u8(v35, (uint8x16_t)v37);
            v72 = vqsubq_u8((uint8x16_t)v37, v32);
            v73 = vqsubq_u8(v32, (uint8x16_t)v37);
            v74 = vminq_u8(v51, v52);
            v75 = vminq_u8(v53, v54);
            v76 = vminq_u8(v55, v56);
            v77 = vminq_u8(v74, v75);
            v78 = vminq_u8(v75, v76);
            v79 = vminq_u8(v58, v59);
            v80 = vminq_u8(v76, v79);
            v81 = vminq_u8(v61, v62);
            v82 = vminq_u8(v79, v81);
            v83 = vminq_u8(v64, v66);
            v84 = vminq_u8(v81, v83);
            v85 = vminq_u8(v68, v70);
            v86 = vminq_u8(v83, v85);
            v87 = vminq_u8(v72, v50);
            v88 = vminq_u8(v85, v87);
            v89 = vminq_u8(v87, v74);
            v90 = vminq_u8(v77, v80);
            v91 = vminq_u8(v80, v84);
            v92 = vminq_u8(v84, v88);
            v93 = vminq_u8(v88, v77);
            v94 = vminq_u8(v78, v82);
            v95 = vminq_u8(v82, v86);
            v96 = vminq_u8(v86, v89);
            v97 = vminq_u8(v89, v78);
            v98 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v90, v61), vminq_u8(v52, v94)), vmaxq_u8(vminq_u8(v94, v64), vminq_u8(v54, v91))), vmaxq_u8(vmaxq_u8(vminq_u8(v91, v68), vminq_u8(v56, v95)), vmaxq_u8(vminq_u8(v95, v72), vminq_u8(v59, v92)))), vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v92, v51), vminq_u8(v62, v96)), vmaxq_u8(vminq_u8(v96, v53), vminq_u8(v66, v93))), vmaxq_u8(vmaxq_u8(vminq_u8(v93, v55), vminq_u8(v70, v97)), vmaxq_u8(vminq_u8(v97, v58), vminq_u8(v50, v90)))));
            v99 = vminq_u8(v137, v136);
            v100 = vminq_u8(v135, v134);
            v101 = vminq_u8(v133, v132);
            v102 = vminq_u8(v131, v60);
            v103 = vminq_u8(v130, v63);
            v104 = vminq_u8(v65, v67);
            v105 = vminq_u8(v69, v71);
            v106 = vminq_u8(v73, v138);
            v107 = vminq_u8(v99, v100);
            v108 = vminq_u8(v100, v101);
            v109 = vminq_u8(v101, v102);
            v110 = vminq_u8(v102, v103);
            v111 = vminq_u8(v103, v104);
            v112 = vminq_u8(v104, v105);
            v113 = vminq_u8(v105, v106);
            v114 = vminq_u8(v106, v99);
            v115 = vminq_u8(v107, v109);
            v116 = vminq_u8(v109, v111);
            v117 = vminq_u8(v111, v113);
            v118 = vminq_u8(v113, v107);
            v119 = vminq_u8(v108, v110);
            v120 = vminq_u8(v110, v112);
            v121 = vminq_u8(v112, v114);
            v122 = vminq_u8(v114, v108);
            v123 = vmaxq_u8(v98, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v115, v130), vminq_u8(v136, v119)), vmaxq_u8(vminq_u8(v119, v65), vminq_u8(v134, v116))), vmaxq_u8(vmaxq_u8(vminq_u8(v116, v69), vminq_u8(v132, v120)), vmaxq_u8(vminq_u8(v120, v73), vminq_u8(v60, v117)))), vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v117, v137), vminq_u8(v63, v121)), vmaxq_u8(vminq_u8(v121, v135), vminq_u8(v67, v118))), vmaxq_u8(vmaxq_u8(vminq_u8(v118, v133), vminq_u8(v71, v122)), vmaxq_u8(vminq_u8(v122, v131), vminq_u8(v138, v115))))));
            v122.i64[0] = 0x101010101010101;
            v122.i64[1] = 0x101010101010101;
            v124 = (int8x16_t)vqsubq_u8(v123, v122);
            *(int8x16_t *)(v17 + v24) = vandq_s8(vbicq_s8(v140, (int8x16_t)vcgtq_u8(v129, (uint8x16_t)v124)), v124);
            v24 += 16;
            v25 = (int)v24;
            *(_QWORD *)&v26 = -1;
            *((_QWORD *)&v26 + 1) = -1;
          }
          while (v14 > (int)v24);
          v125 = v17 + v24;
        }
        else
        {
          v125 = a5 + v23 * a6;
        }
        v126 = vandq_s8(*(int8x16_t *)(v125 - 16), v127);
        ++v23;
        v16 += a4;
        v17 += a6;
        v18 += a4;
        v19 += a4;
        v20 += a4;
        *(int8x16_t *)(v125 - 32) = vandq_s8(*(int8x16_t *)(v125 - 32), v128);
        *(int8x16_t *)(v125 - 16) = v126;
        v21 += a4;
        v22 += a4;
        result += a4;
      }
      while (v23 != v9 - 3);
    }
  }
  return result;
}

uint64_t sub_1D4DAD004(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((unint64_t)(a3 - 5) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v6 = a3 - 1;
    v7 = a2 - 1;
    v8 = 2;
    v9 = 4;
    v10 = result;
    do
    {
      if (v9 >= v6)
        v11 = a3 - 1;
      else
        v11 = v9;
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFCLL)
      {
        v12 = v8 * a4;
        v13 = v8 + 2;
        if (v8 + 2 >= v6)
          v13 = a3 - 1;
        v14 = v10;
        v15 = 1;
        v16 = 4;
        v17 = 2;
        do
        {
          if (v16 >= v7)
            v18 = a2 - 1;
          else
            v18 = v16;
          v19 = *(unsigned __int8 *)(result + v17 + v12);
          if (*(_BYTE *)(result + v17 + v12))
            v20 = v8 - 2 <= v13;
          else
            v20 = 0;
          if (v20)
          {
            v21 = v18 + v15;
            v22 = v17 + 2;
            if (v17 + 2 >= v7)
              v22 = a2 - 1;
            v23 = v14;
            v24 = v8 - 2;
            while (v17 - 2 > v22)
            {
LABEL_27:
              v23 += a4;
              if (v24++ == v11)
                goto LABEL_31;
            }
            v25 = 0;
            while (v24 == v8 && v25 == 2 || *(unsigned __int8 *)(v23 + v25) <= v19)
            {
              if (v21 == ++v25)
                goto LABEL_27;
            }
            LOBYTE(v19) = 0;
          }
LABEL_31:
          *(_BYTE *)(a5 + v17 + v8 * a6) = v19;
          ++v17;
          ++v16;
          --v15;
          ++v14;
        }
        while (v16 != a2);
      }
      ++v8;
      ++v9;
      v10 += a4;
    }
    while (v9 != a3);
  }
  return result;
}

char *sub_1D4DAD150(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((result | a5) | a4) & 0xF) != 0
    || (unint64_t)a2 < 0x20
    || (a6 & 0xF) != 0)
  {
    return (char *)sub_1D4DAD004(result, a2, a3, a4, a5, a6);
  }
  else
  {
    return sub_1D4DAD178(result, a2, a3, a4, a5, a6);
  }
}

char *sub_1D4DAD178(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *result;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  int8x16_t v50;
  _OWORD v52[2];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v10 = a3 - 2;
  if (a3 >= 2)
    v11 = 2;
  else
    v11 = a3;
  v12 = -(int)a2;
  bzero((char *)&v52[1] - (v12 & 0xF) + 14, (v12 & 0xF) + 2);
  if (v10 <= v11)
    v13 = v11;
  else
    v13 = v10;
  result = (char *)memset((char *)&v52[1] + -(unint64_t)(29 - (v12 & 0xFu)) - (v12 & 0xF) + 13, 255, 30 - (v12 & 0xFu));
  if (v11 < v10)
  {
    v15 = a4 >> 4;
    v16 = (int8x16_t)v52[0];
    v17 = (int8x16_t)v52[1];
    v18 = 2;
    if (a2 < 2)
      v18 = a2;
    v19 = v18 & 0xFFFFFFFFFFFFFFF0;
    v20 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
    v21 = a2 - 16;
    v22 = a5 + a6 * v11;
    v23 = a4 * v11 + 16;
    v24 = a1 + v23 - 32 * v15;
    v25 = a1 + v23;
    v26 = a1 + v23 - 16 * v15;
    v27 = a1 + a4 * v11 + 32 * v15;
    result = (char *)(a4 * v11 + 16 * v15 + a1 + 16);
    do
    {
      if (v19 >= v20)
      {
        v49 = a5 + v19 + v11 * a6;
      }
      else
      {
        v28 = 0;
        v29 = result;
        v30 = v27;
        v31 = v26;
        v32 = v25;
        v33 = v24;
        v34 = v22;
        v35 = (int8x16_t)xmmword_1D4DB2C40;
        do
        {
          v36 = *(int8x16_t *)(v32 + v19 - 16);
          v37 = (uint32x2_t)vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
          if (vpmax_u32(v37, v37).u32[0])
          {
            v38 = v19 + v28;
            v39 = v33 + v19;
            if (v11 > 2 || (v40 = 0uLL, v38 >= 1))
              v40 = *(int8x16_t *)(v39 - 32);
            v41 = (int8x16_t *)(v30 + v19);
            if (v38 < v21 || (v42 = 0uLL, v11 < v13 - 1))
              v42 = v41[1];
            v43 = *(int8x16_t *)(v39 - 16);
            v44 = *(int8x16_t *)(v31 + v19 - 16);
            v45 = *(int8x16_t *)&v29[v19 - 16];
            v46 = *(int8x16_t *)&v29[v19];
            v47 = v41[-1];
            v48 = vandq_s8(vbicq_s8(v35, (int8x16_t)vcgtq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v40, v43, 0xEuLL), (uint8x16_t)vextq_s8(v40, v43, 0xFuLL)), vmaxq_u8((uint8x16_t)v43, (uint8x16_t)vextq_s8(v43, *(int8x16_t *)(v33 + v19), 1uLL))), vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v43, *(int8x16_t *)(v33 + v19), 2uLL), (uint8x16_t)vextq_s8(*(int8x16_t *)(v31 + v19 - 32), v44, 0xEuLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)(v31 + v19 - 32), v44, 0xFuLL),
                                             (uint8x16_t)v44))),
                                       vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v44, *(int8x16_t *)(v31 + v19), 1uLL), (uint8x16_t)vextq_s8(v44, *(int8x16_t *)(v31 + v19), 2uLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)(v32 + v19 - 32), v36, 0xEuLL), (uint8x16_t)vextq_s8(*(int8x16_t *)(v32 + v19 - 32), v36, 0xFuLL))), vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v36, *(int8x16_t *)(v32 + v19), 1uLL), (uint8x16_t)vextq_s8(v36, *(int8x16_t *)(v32 + v19), 2uLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)&v29[v19 - 32], v45, 0xEuLL), (uint8x16_t)vextq_s8(*(int8x16_t *)&v29[v19 - 32], v45, 0xFuLL))))), vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)v45, (uint8x16_t)vextq_s8(v45, v46, 1uLL)), vmaxq_u8((uint8x16_t)vextq_s8(v45, v46, 2uLL),
                                           (uint8x16_t)vextq_s8(v47, *v41, 0xEuLL))),
                                       vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v47, *v41, 0xFuLL), *(uint8x16_t *)v41), vmaxq_u8((uint8x16_t)vextq_s8(*v41, v42, 1uLL), (uint8x16_t)vextq_s8(*v41, v42, 2uLL))))), (uint8x16_t)v36)), v36);
          }
          else
          {
            v48 = 0uLL;
          }
          *(int8x16_t *)(v34 + v19) = v48;
          v28 += 16;
          v34 += 16;
          v33 += 16;
          v32 += 16;
          v31 += 16;
          v30 += 16;
          v29 += 16;
          v35.i64[0] = -1;
          v35.i64[1] = -1;
        }
        while (v19 + v28 < v20);
        v49 = v34 + v19;
      }
      v50 = vandq_s8(*(int8x16_t *)(v49 - 16), v17);
      ++v11;
      v22 += a6;
      v24 += a4;
      v25 += a4;
      *(int8x16_t *)(v49 - 32) = vandq_s8(*(int8x16_t *)(v49 - 32), v16);
      *(int8x16_t *)(v49 - 16) = v50;
      v26 += a4;
      v27 += a4;
      result += a4;
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t sub_1D4DAD4BC(uint64_t result, float *a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *(float **)result;
  v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if (!v3)
  {
    v13 = 0.0;
    if (!a2)
      return result;
    goto LABEL_12;
  }
  v4 = v3 >> 2;
  if ((unint64_t)(v3 >> 2) <= 1)
    v5 = 1;
  else
    v5 = v3 >> 2;
  v6 = 0.0;
  v7 = v5;
  v8 = *(float **)result;
  do
  {
    v9 = *v8++;
    v6 = v6 + v9;
    --v7;
  }
  while (v7);
  v10 = v6 / (float)(unint64_t)v4;
  if (a2)
  {
    v11 = 0.0;
    do
    {
      v12 = *v2++;
      v11 = v11 + (float)((float)(v10 - v12) * (float)(v10 - v12));
      --v5;
    }
    while (v5);
    v13 = sqrtf(v11 / (float)(unint64_t)v4);
LABEL_12:
    *a2 = v13;
  }
  return result;
}

float sub_1D4DAD534(uint64_t *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  unint64_t v20;
  float Seconds;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  float *v46;
  int v47;
  float v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  float *v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float *v69;
  int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int *v96;
  float *v97;
  float v98;
  float v99;
  float *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float v105;
  float *v106;
  float v107;
  float v108;
  int v109;
  const __CFAllocator *v110;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFNumberRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  CFNumberRef v119;
  CFNumberRef v120;
  CFNumberRef v121;
  CFNumberRef v122;
  CFNumberRef v123;
  CFNumberRef v124;
  CFNumberRef v125;
  CFNumberRef v126;
  CFNumberRef v127;
  CFNumberRef v128;
  CFNumberRef v129;
  CFNumberRef v130;
  CFNumberRef v131;
  CFNumberRef v132;
  CFNumberRef v133;
  CFNumberRef v134;
  CFNumberRef v135;
  CFNumberRef v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  CFNumberRef v140;
  CFNumberRef v141;
  CFNumberRef v142;
  CFNumberRef v143;
  CFNumberRef v144;
  __CFDictionary *v145;
  CFNumberRef v146;
  CFNumberRef v147;
  CFNumberRef v148;
  CFNumberRef v149;
  CFNumberRef v150;
  CFNumberRef v151;
  CFNumberRef v152;
  CFNumberRef v153;
  CFNumberRef v154;
  CFNumberRef v155;
  CFNumberRef v156;
  CFNumberRef v157;
  CFNumberRef v158;
  CFNumberRef v159;
  CFNumberRef v160;
  CFNumberRef v161;
  CFNumberRef v162;
  CFNumberRef v163;
  CFNumberRef v164;
  CFNumberRef v165;
  CFNumberRef v166;
  CFNumberRef v167;
  CFNumberRef v168;
  CFNumberRef v169;
  CFNumberRef v170;
  CFNumberRef v171;
  CFNumberRef v172;
  CFNumberRef v173;
  CFNumberRef v174;
  CFNumberRef v175;
  float v176;
  CFNumberRef v177;
  CFTypeRef v178;
  float v179;
  float v181;
  int v182;
  float v183;
  int v184;
  float v185;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  id v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  int v202;
  int v203;
  uint64_t v204;
  id valuePtr;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  void *v211;
  float *v212;
  float *v213;
  void *v214;
  float *v215;
  float *v216;
  void *__p;
  float *v218;
  float *v219;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v223;
  CMTime v224;
  float v225[5];

  v225[0] = 1.0;
  v5 = *a1;
  v6 = (a1[1] - *a1) >> 4;
  v7 = 0x86BCA1AF286BCA1BLL * v6;
  v8 = 0;
  if (678152731 * (int)v6 < 1)
  {
    v19 = NAN;
    v184 = 2143289344;
    v185 = 1.0;
  }
  else
  {
    v9 = 0;
    v10 = (678152731 * v6);
    v11 = (float *)(v5 + 168);
    v12 = 1.0;
    v13 = 0.0;
    v14 = v7;
    do
    {
      if (*((_BYTE *)v11 - 95))
      {
        ++v8;
      }
      else
      {
        if (*v11 < v12)
          v12 = *v11;
        v13 = v13 + *v11;
        ++v9;
      }
      v11 += 76;
      --v14;
    }
    while (v14);
    v15 = (float)v9;
    v16 = v13 / (float)v9;
    v17 = (float *)(v5 + 168);
    v18 = 0.0;
    do
    {
      if (!*((_BYTE *)v17 - 95))
        v18 = v18 + (float)((float)(v16 - *v17) * (float)(v16 - *v17));
      v17 += 76;
      --v10;
    }
    while (v10);
    v184 = LODWORD(v16);
    v185 = v12;
    v19 = v18 / v15;
  }
  v182 = v7;
  v224 = *(CMTime *)(v5 + 304 * v7 - 192);
  v183 = sqrtf(v19);
  memset(&v223, 0, sizeof(v223));
  lhs = v224;
  rhs = *(CMTime *)(v5 + 112);
  CMTimeSubtract(&v223, &lhs, &rhs);
  time = v223;
  v20 = 0;
  Seconds = CMTimeGetSeconds(&time);
  v181 = Seconds;
  __p = 0;
  v218 = 0;
  v219 = 0;
  v214 = 0;
  v215 = 0;
  v22 = 0.0;
  v216 = 0;
  v23 = 0.0;
  v24 = 0.0;
  v211 = 0;
  v212 = 0;
  v25 = 0.0;
  v26 = 0.0;
  v213 = 0;
  v188 = 0.0;
  v27 = 0.0;
  v28 = *a1;
  v29 = 0.0;
  v30 = 0.0;
  do
  {
    sub_1D4D8FC84((double *)(v28 + 304 * v20), a2, (uint64_t)&valuePtr);
    v31 = *(float *)&valuePtr;
    if (v20)
    {
      v187 = v27;
      v32 = v29;
      v33 = v30;
      v34 = v22 - *(float *)&valuePtr;
      v35 = v218;
      if (v218 >= v219)
      {
        v40 = (float *)__p;
        v41 = ((char *)v218 - (_BYTE *)__p) >> 2;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
          sub_1D4D5DFA8();
        v43 = (char *)v219 - (_BYTE *)__p;
        if (((char *)v219 - (_BYTE *)__p) >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (char *)sub_1D4D5EA14((uint64_t)&v219, v44);
          v40 = (float *)__p;
          v35 = v218;
        }
        else
        {
          v45 = 0;
        }
        v46 = (float *)&v45[4 * v41];
        *v46 = v34;
        v36 = v46 + 1;
        while (v35 != v40)
        {
          v47 = *((_DWORD *)v35-- - 1);
          *((_DWORD *)v46-- - 1) = v47;
        }
        __p = v46;
        v218 = v36;
        v219 = (float *)&v45[4 * v44];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v218 = v34;
        v36 = v35 + 1;
      }
      v218 = v36;
      v48 = v23 - *((float *)&valuePtr + 1);
      v49 = v215;
      if (v215 >= v216)
      {
        v51 = (float *)v214;
        v52 = ((char *)v215 - (_BYTE *)v214) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
          sub_1D4D5DFA8();
        v54 = (char *)v216 - (_BYTE *)v214;
        if (((char *)v216 - (_BYTE *)v214) >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)sub_1D4D5EA14((uint64_t)&v216, v55);
          v51 = (float *)v214;
          v49 = v215;
        }
        else
        {
          v56 = 0;
        }
        v57 = (float *)&v56[4 * v52];
        *v57 = v48;
        v50 = v57 + 1;
        v30 = v33;
        while (v49 != v51)
        {
          v58 = *((_DWORD *)v49-- - 1);
          *((_DWORD *)v57-- - 1) = v58;
        }
        v214 = v57;
        v215 = v50;
        v216 = (float *)&v56[4 * v55];
        v29 = v32;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v215 = v48;
        v50 = v49 + 1;
        v30 = v33;
        v29 = v32;
      }
      v27 = v187;
      v215 = v50;
      v59 = v26 - v210;
      v60 = v212;
      if (v212 >= v213)
      {
        v63 = (float *)v211;
        v64 = ((char *)v212 - (_BYTE *)v211) >> 2;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62)
          sub_1D4D5DFA8();
        v66 = (char *)v213 - (_BYTE *)v211;
        if (((char *)v213 - (_BYTE *)v211) >> 1 > v65)
          v65 = v66 >> 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          v68 = (char *)sub_1D4D5EA14((uint64_t)&v213, v67);
          v63 = (float *)v211;
          v60 = v212;
        }
        else
        {
          v68 = 0;
        }
        v69 = (float *)&v68[4 * v64];
        *v69 = v59;
        v61 = v69 + 1;
        if (v60 == v63)
        {
          v62 = v199;
        }
        else
        {
          v62 = v199;
          do
          {
            v70 = *((_DWORD *)v60-- - 1);
            *((_DWORD *)v69-- - 1) = v70;
          }
          while (v60 != v63);
        }
        v211 = v69;
        v212 = v61;
        v213 = (float *)&v68[4 * v67];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v212 = v59;
        v61 = v60 + 1;
        v62 = v199;
      }
      v212 = v61;
      v37 = *((float *)&valuePtr + 1);
      v31 = *(float *)&valuePtr;
      v71 = vabds_f32(v22, *(float *)&valuePtr);
      v72 = v188;
      if (v188 < v71)
        v72 = v71;
      v188 = v72;
      v73 = vabds_f32(v23, *((float *)&valuePtr + 1));
      if (v187 < v73)
        v27 = v73;
      v38 = v208;
      v39 = v209;
      v74 = vabds_f32(v24, v208);
      if (v29 < v74)
        v29 = v74;
      v75 = vabds_f32(v25, v209);
      if (v30 < v75)
        v30 = v75;
      v76 = v200;
      if (*(float *)&valuePtr >= v201)
        v77 = v201;
      else
        v77 = *(float *)&valuePtr;
      if (*((float *)&valuePtr + 1) < v62)
        v62 = *((float *)&valuePtr + 1);
      if (v206 < v200)
        v76 = v206;
      v200 = v76;
      v201 = v77;
      if (v207 >= v197)
        v78 = v197;
      else
        v78 = v207;
      v79 = v198;
      if (v208 < v198)
        v79 = v208;
      v198 = v79;
      v199 = v62;
      v80 = v196;
      if (v209 < v196)
        v80 = v209;
      v196 = v80;
      v197 = v78;
      v26 = v210;
      if (v210 >= v195)
        v81 = v195;
      else
        v81 = v210;
      v82 = *(float *)&v194;
      if (*(float *)&v194 < *(float *)&valuePtr)
        v82 = *(float *)&valuePtr;
      *(float *)&v194 = v82;
      v83 = *((float *)&v194 + 1);
      if (*((float *)&v194 + 1) < *((float *)&valuePtr + 1))
        v83 = *((float *)&valuePtr + 1);
      *((float *)&v194 + 1) = v83;
      v195 = v81;
      v84 = v193;
      if (v193 < v206)
        v84 = v206;
      v85 = v192;
      if (v192 < v207)
        v85 = v207;
      v192 = v85;
      v193 = v84;
      if (v190 >= v208)
        v86 = v190;
      else
        v86 = v208;
      v87 = v191;
      if (v191 < v209)
        v87 = v209;
      v190 = v86;
      v191 = v87;
      v88 = v189;
      if (v189 < v210)
        v88 = v210;
      v189 = v88;
    }
    else
    {
      v37 = *((float *)&valuePtr + 1);
      v38 = v208;
      v200 = v206;
      v201 = *(float *)&valuePtr;
      v198 = v208;
      v199 = *((float *)&valuePtr + 1);
      v39 = v209;
      v26 = v210;
      v195 = v210;
      v196 = v209;
      v194 = valuePtr;
      v192 = v207;
      v193 = v206;
      v197 = v207;
      v190 = v208;
      v191 = v209;
      v189 = v210;
    }
    v28 = *a1;
    v22 = v31;
    v23 = v37;
    v24 = v38;
    v25 = v39;
  }
  while (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1 > v20++);
  v204 = 0;
  v203 = 0;
  sub_1D4DAD4BC((uint64_t)&__p, (float *)&v204 + 1);
  v91 = v90;
  sub_1D4DAD4BC((uint64_t)&v214, (float *)&v204);
  v93 = v92;
  sub_1D4DAD4BC((uint64_t)&v211, (float *)&v203);
  v95 = v94;
  v96 = (int *)v211;
  if (v212 == v211)
  {
    v98 = 0.0;
    v109 = 0;
  }
  else
  {
    v97 = (float *)((char *)v211 + 4);
    v98 = *(float *)v211;
    if ((char *)v211 + 4 != (char *)v212)
    {
      v99 = *(float *)v211;
      v100 = (float *)((char *)v211 + 4);
      v101 = (float *)v211;
      v102 = (float *)((char *)v211 + 4);
      do
      {
        v103 = *v102++;
        v104 = v103;
        if (v103 < v99)
        {
          v99 = v104;
          v101 = v100;
        }
        v100 = v102;
      }
      while (v102 != v212);
      v105 = *v101;
      v106 = (float *)((char *)v211 + 4);
      do
      {
        v107 = *v106++;
        v108 = v107;
        if (v98 < v107)
        {
          v98 = v108;
          v96 = (int *)v97;
        }
        v97 = v106;
      }
      while (v106 != v212);
      v98 = v105;
    }
    v109 = *v96;
  }
  v110 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
  {
    Mutable = 0;
    v112 = a3;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
    v112 = Mutable;
  }
  *(float *)&valuePtr = v201;
  v113 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v113);
  CFDictionaryAddValue(v112, CFSTR("det_min"), v113);
  *(float *)&valuePtr = v199;
  v114 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v114);
  CFDictionaryAddValue(v112, CFSTR("shear_min"), v114);
  *(float *)&valuePtr = v200;
  v115 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v115);
  CFDictionaryAddValue(v112, CFSTR("key1_min"), v115);
  *(float *)&valuePtr = v197;
  v116 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v116);
  CFDictionaryAddValue(v112, CFSTR("key2_min"), v116);
  *(float *)&valuePtr = v198;
  v117 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v117);
  CFDictionaryAddValue(v112, CFSTR("translationX_min"), v117);
  *(float *)&valuePtr = v196;
  v118 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v118);
  CFDictionaryAddValue(v112, CFSTR("translationY_min"), v118);
  *(float *)&valuePtr = v195;
  v119 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v119);
  CFDictionaryAddValue(v112, CFSTR("rotation_min"), v119);
  LODWORD(valuePtr) = (_DWORD)v194;
  v120 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v120);
  CFDictionaryAddValue(v112, CFSTR("det_max"), v120);
  LODWORD(valuePtr) = HIDWORD(v194);
  v121 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v121);
  CFDictionaryAddValue(v112, CFSTR("shear_max"), v121);
  *(float *)&valuePtr = v193;
  v122 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v122);
  CFDictionaryAddValue(v112, CFSTR("key1_max"), v122);
  *(float *)&valuePtr = v192;
  v123 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v123);
  CFDictionaryAddValue(v112, CFSTR("key2_max"), v123);
  *(float *)&valuePtr = v190;
  v124 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v124);
  CFDictionaryAddValue(v112, CFSTR("translationX_max"), v124);
  *(float *)&valuePtr = v191;
  v125 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v125);
  CFDictionaryAddValue(v112, CFSTR("translationY_max"), v125);
  *(float *)&valuePtr = v189;
  v126 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v126);
  CFDictionaryAddValue(v112, CFSTR("rotation_max"), v126);
  *(float *)&valuePtr = v185;
  v127 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v127);
  CFDictionaryAddValue(v112, CFSTR("confidence_min"), v127);
  LODWORD(valuePtr) = v184;
  v128 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v128);
  CFDictionaryAddValue(v112, CFSTR("confidence_mean"), v128);
  *(float *)&valuePtr = v183;
  v129 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v129);
  CFDictionaryAddValue(v112, CFSTR("confidence_stdDev"), v129);
  *(float *)&valuePtr = v188;
  v130 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v130);
  CFDictionaryAddValue(v112, CFSTR("deltaDet_max"), v130);
  LODWORD(valuePtr) = v91;
  v131 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v131);
  CFDictionaryAddValue(v112, CFSTR("deltaDet_mean"), v131);
  LODWORD(valuePtr) = HIDWORD(v204);
  v132 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v132);
  CFDictionaryAddValue(v112, CFSTR("deltaDet_stdDev"), v132);
  *(float *)&valuePtr = v27;
  v133 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v133);
  CFDictionaryAddValue(v112, CFSTR("deltaShear_max"), v133);
  LODWORD(valuePtr) = v93;
  v134 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v134);
  CFDictionaryAddValue(v112, CFSTR("deltaShear_mean"), v134);
  LODWORD(valuePtr) = v204;
  v135 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v135);
  CFDictionaryAddValue(v112, CFSTR("deltaShear_stdDev"), v135);
  LODWORD(valuePtr) = v95;
  v136 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v136);
  CFDictionaryAddValue(v112, CFSTR("deltaRotation_mean"), v136);
  LODWORD(valuePtr) = v203;
  v137 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v137);
  CFDictionaryAddValue(v112, CFSTR("deltaRotation_stdDev"), v137);
  *(float *)&valuePtr = v98;
  v138 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v138);
  CFDictionaryAddValue(v112, CFSTR("deltaRotation_min"), v138);
  LODWORD(valuePtr) = v109;
  v139 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v139);
  CFDictionaryAddValue(v112, CFSTR("deltaRotation_max"), v139);
  *(float *)&valuePtr = v29;
  v140 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v140);
  CFDictionaryAddValue(v112, CFSTR("deltaTransX_max"), v140);
  *(float *)&valuePtr = v30;
  v141 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v141);
  CFDictionaryAddValue(v112, CFSTR("deltaTransY_max"), v141);
  *(float *)&valuePtr = (float)v8;
  v142 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v142);
  CFDictionaryAddValue(v112, CFSTR("interpCount"), v142);
  *(float *)&valuePtr = (float)v182;
  v143 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v143);
  CFDictionaryAddValue(v112, CFSTR("numFrames"), v143);
  *(float *)&valuePtr = v181;
  v144 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v144);
  CFDictionaryAddValue(v112, CFSTR("duration"), v144);
  v145 = CFDictionaryCreateMutable(0, 0, 0, 0);
  LODWORD(valuePtr) = -1082682570;
  v146 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v146);
  CFDictionaryAddValue(v145, CFSTR("_intercept"), v146);
  LODWORD(valuePtr) = -1067287335;
  v147 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v147);
  CFDictionaryAddValue(v145, CFSTR("confidence_mean"), v147);
  LODWORD(valuePtr) = -1075653319;
  v148 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v148);
  CFDictionaryAddValue(v145, CFSTR("confidence_min"), v148);
  LODWORD(valuePtr) = 1084166481;
  v149 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v149);
  CFDictionaryAddValue(v145, CFSTR("confidence_stdDev"), v149);
  LODWORD(valuePtr) = 1112189614;
  v150 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v150);
  CFDictionaryAddValue(v145, CFSTR("deltaDet_mean"), v150);
  LODWORD(valuePtr) = -1046656612;
  v151 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v151);
  CFDictionaryAddValue(v145, CFSTR("deltaRotation_max"), v151);
  LODWORD(valuePtr) = -1031636091;
  v152 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v152);
  CFDictionaryAddValue(v145, CFSTR("deltaRotation_mean"), v152);
  LODWORD(valuePtr) = 1101279657;
  v153 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v153);
  CFDictionaryAddValue(v145, CFSTR("deltaRotation_min"), v153);
  LODWORD(valuePtr) = 1119772248;
  v154 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v154);
  CFDictionaryAddValue(v145, CFSTR("deltaRotation_stdDev"), v154);
  LODWORD(valuePtr) = -1051649519;
  v155 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v155);
  CFDictionaryAddValue(v145, CFSTR("deltaShear_max"), v155);
  LODWORD(valuePtr) = 1135447685;
  v156 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v156);
  CFDictionaryAddValue(v145, CFSTR("deltaShear_stdDev"), v156);
  LODWORD(valuePtr) = -1058771072;
  v157 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v157);
  CFDictionaryAddValue(v145, CFSTR("deltaTransX_max"), v157);
  LODWORD(valuePtr) = -1045786170;
  v158 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v158);
  CFDictionaryAddValue(v145, CFSTR("deltaTransY_max"), v158);
  LODWORD(valuePtr) = 1082605271;
  v159 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v159);
  CFDictionaryAddValue(v145, CFSTR("det_max"), v159);
  LODWORD(valuePtr) = -1080542569;
  v160 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v160);
  CFDictionaryAddValue(v145, CFSTR("det_min"), v160);
  LODWORD(valuePtr) = -1084242549;
  v161 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v161);
  CFDictionaryAddValue(v145, CFSTR("duration"), v161);
  LODWORD(valuePtr) = 1051730553;
  v162 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v162);
  CFDictionaryAddValue(v145, CFSTR("interpCount"), v162);
  LODWORD(valuePtr) = -1076546773;
  v163 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v163);
  CFDictionaryAddValue(v145, CFSTR("key1_max"), v163);
  LODWORD(valuePtr) = 1086929716;
  v164 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v164);
  CFDictionaryAddValue(v145, CFSTR("key1_min"), v164);
  LODWORD(valuePtr) = 1090144503;
  v165 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v165);
  CFDictionaryAddValue(v145, CFSTR("key2_max"), v165);
  LODWORD(valuePtr) = 1074996114;
  v166 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v166);
  CFDictionaryAddValue(v145, CFSTR("key2_min"), v166);
  LODWORD(valuePtr) = 1022943098;
  v167 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v167);
  CFDictionaryAddValue(v145, CFSTR("numFrames"), v167);
  LODWORD(valuePtr) = 1086103107;
  v168 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v168);
  CFDictionaryAddValue(v145, CFSTR("rotation_max"), v168);
  LODWORD(valuePtr) = -1063704775;
  v169 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v169);
  CFDictionaryAddValue(v145, CFSTR("rotation_min"), v169);
  LODWORD(valuePtr) = 1074153369;
  v170 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v170);
  CFDictionaryAddValue(v145, CFSTR("shear_max"), v170);
  LODWORD(valuePtr) = -1048838389;
  v171 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v171);
  CFDictionaryAddValue(v145, CFSTR("shear_min"), v171);
  LODWORD(valuePtr) = 1067963415;
  v172 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v172);
  CFDictionaryAddValue(v145, CFSTR("translationX_max"), v172);
  LODWORD(valuePtr) = -1123026574;
  v173 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v173);
  CFDictionaryAddValue(v145, CFSTR("translationX_min"), v173);
  LODWORD(valuePtr) = 1085744035;
  v174 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v174);
  CFDictionaryAddValue(v145, CFSTR("translationY_max"), v174);
  LODWORD(valuePtr) = -1090249665;
  v175 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v175);
  CFDictionaryAddValue(v145, CFSTR("translationY_min"), v175);
  sub_1D4D840DC(&valuePtr, v145);
  *(float *)&v202 = 0.0;
  if (sub_1D4D84140(&valuePtr, v112, (float *)&v202))
  {
    *(float *)&v202 = 1.0;
    v176 = 1.0;
  }
  else
  {
    v176 = *(float *)&v202;
  }
  v225[0] = 1.0 - v176;
  if (a3)
  {
    v177 = CFNumberCreate(v110, kCFNumberFloat32Type, v225);
    v178 = CFAutorelease(v177);
    CFDictionaryAddValue(a3, CFSTR("stabConfResult"), v178);
  }
  CFRelease(v145);
  if (Mutable)
    CFRelease(Mutable);
  v179 = v225[0];
  sub_1D4D8413C(&valuePtr);
  if (v211)
  {
    v212 = (float *)v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = (float *)v214;
    operator delete(v214);
  }
  if (__p)
  {
    v218 = (float *)__p;
    operator delete(__p);
  }
  return v179;
}

void sub_1D4DAE9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  if (a35)
    operator delete(a35);
  if (a38)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

void sub_1D4DAEB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4DAED4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4DAEE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4DAF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_1D4DAF7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796A0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Matrix purports to be symmetric, but rowCount != columnCount.\n", a5, a6, a7, a8, 0);
  sub_1D4D796DC();
}

void sub_1D4DAF7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796A0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Requested symmetric factorization of unsymmetric matrix.\n", a5, a6, a7, a8, 0);
  sub_1D4D796DC();
}

void sub_1D4DAF814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796A0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, ".structure.columnCount must be greater than 0.\n", a5, a6, a7, a8, 0);
  sub_1D4D796DC();
}

void sub_1D4DAF848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796A0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Bad symbolic factor.\n", a5, a6, a7, a8, 0);
  sub_1D4D796DC();
}

void sub_1D4DAF87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796B0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Failed to allocate factor storage of size %ld bytes.", a5, a6, a7, a8, 0);
  sub_1D4D796E4();
}

void sub_1D4DAF8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796B0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Failed to allocate workspace of size %ld bytes.", a5, a6, a7, a8, 0);
  sub_1D4D796E4();
}

void sub_1D4DAF95C()
{
  int v0;
  const char *v1;
  __int16 v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = 136315394;
  v1 = "Matrix";
  v2 = 2080;
  v3 = "symbolicFactor";
  _os_log_error_impl(&dword_1D4D4F000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s does not match that used for symbolic factorization stored in %s.\n", (uint8_t *)&v0, 0x16u);
  sub_1D4D796E4();
}

void sub_1D4DAF9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796A0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Factored does not hold a completed matrix factorization.\n", a5, a6, a7, a8, 0);
  sub_1D4D796DC();
}

void sub_1D4DAFA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796B0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "%s does not hold a completed matrix factorization.\n", a5, a6, a7, a8, 2u);
  sub_1D4D796E4();
}

void sub_1D4DAFA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D4D796B0(&dword_1D4D4F000, MEMORY[0x1E0C81028], a3, "Failed to allocate workspace of size %ld for SparseSolve().\n", a5, a6, a7, a8, 0);
  sub_1D4D796E4();
}

void sub_1D4DAFB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4D796FC();
  sub_1D4D796C0();
  sub_1D4D796EC(&dword_1D4D4F000, MEMORY[0x1E0C81028], v0, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n", v1, v2, v3, v4, 2u);
}

void sub_1D4DAFB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4D796FC();
  sub_1D4D796C0();
  sub_1D4D796EC(&dword_1D4D4F000, MEMORY[0x1E0C81028], v0, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n", v1, v2, v3, v4, 2u);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BB68](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C210](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C538](c, x, y);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1E0C9D530](dict, point);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D808]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1E0C9D818](dict, size);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDE0](desc);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1E0C9EFD8](sbuf);
}

OSStatus CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef sbuf, CMItemIndex sampleIndex, CMSampleTimingInfo *timingInfoOut)
{
  return MEMORY[0x1E0C9F028](sbuf, sampleIndex, timingInfoOut);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x1E0C9F558](videoDesc);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B10](name, size);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EE0](line, context);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8910](buffer, key, attachmentMode);
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x1E0CA8928](sourceBuffer, destinationBuffer);
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  MEMORY[0x1E0CA8940](buffer, key);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CGRect CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0CA89D8](imageBuffer);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  double v1;
  double v2;
  CGSize result;

  MEMORY[0x1E0CA89F0](imageBuffer);
  result.height = v2;
  result.width = v1;
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B68](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8BA8](pool);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _SparseDestroyOpaqueNumeric_Double(SparseOpaqueFactorization_Double *toFree)
{
  MEMORY[0x1E0C8BA70](toFree);
}

void _SparseDestroyOpaqueSymbolic(SparseOpaqueSymbolicFactorization *toFree)
{
  MEMORY[0x1E0C8BA78](toFree);
}

SparseSymbolicFactorOptions *__cdecl _SparseGetOptionsFromSymbolicFactor(SparseSymbolicFactorOptions *__return_ptr retstr, SparseOpaqueSymbolicFactorization *factor)
{
  return (SparseSymbolicFactorOptions *)MEMORY[0x1E0C8BA80](retstr, factor);
}

SparseOpaqueFactorization_Double *__cdecl _SparseNumericFactorQR_Double(SparseOpaqueFactorization_Double *__return_ptr retstr, SparseOpaqueSymbolicFactorization *symbolicFactor, const SparseMatrix_Double *Matrix, const SparseNumericFactorOptions *options, void *factorStorage, void *workspace)
{
  return (SparseOpaqueFactorization_Double *)MEMORY[0x1E0C8BA88](retstr, symbolicFactor, Matrix, options, factorStorage, workspace);
}

SparseOpaqueFactorization_Double *__cdecl _SparseNumericFactorSymmetric_Double(SparseOpaqueFactorization_Double *__return_ptr retstr, SparseOpaqueSymbolicFactorization *symbolicFactor, const SparseMatrix_Double *Matrix, const SparseNumericFactorOptions *options, void *factorStorage, void *workspace)
{
  return (SparseOpaqueFactorization_Double *)MEMORY[0x1E0C8BA90](retstr, symbolicFactor, Matrix, options, factorStorage, workspace);
}

void _SparseSolveOpaque_Double(const SparseOpaqueFactorization_Double *Factored, const DenseMatrix_Double *RHS, const DenseMatrix_Double *Soln, void *workspace)
{
  MEMORY[0x1E0C8BA98](Factored, RHS, Soln, workspace);
}

SparseOpaqueSymbolicFactorization *__cdecl _SparseSymbolicFactorSymmetric(SparseOpaqueSymbolicFactorization *__return_ptr retstr, SparseFactorization_t factorType, const SparseMatrixStructure *Matrix, const SparseSymbolicFactorOptions *options)
{
  return (SparseOpaqueSymbolicFactorization *)MEMORY[0x1E0C8BAA8](retstr, factorType, Matrix, options);
}

void _SparseTrap(void)
{
  MEMORY[0x1E0C8BAB0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4718]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1E0DE4AE0]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1E0DE4AE8]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1E0DE4B28]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E9889B78();
}

void operator delete(void *__p)
{
  off_1E9889B80(__p);
}

uint64_t operator delete()
{
  return off_1E9889B88();
}

uint64_t operator new[]()
{
  return off_1E9889B90();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E9889B98(__sz);
}

uint64_t operator new()
{
  return off_1E9889BA0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

clock_t clock(void)
{
  return MEMORY[0x1E0C82650]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int dgeev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__wr, __CLPK_doublereal *__wi, __CLPK_doublereal *__vl, __CLPK_integer *__ldvl, __CLPK_doublereal *__vr, __CLPK_integer *__ldvr, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BCB0](__jobvl, __jobvr, __n, __a, __lda, __wr, __wi, __vl);
}

int dgerqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BCE0](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

int dorgrq_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD50](__m, __n, __k, __a, __lda, __tau, __work, __lwork);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

void perror(const char *a1)
{
  MEMORY[0x1E0C84AF0](a1);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84CD0](__attr, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_detach(pthread_t a1)
{
  return MEMORY[0x1E0C84D78](a1);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int sgesdd_(char *__jobz, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__vt, __CLPK_integer *__ldvt, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BDE8](__jobz, __m, __n, __a, __lda, __s, __u, __ldu);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

sparse_status sparse_commit(void *A)
{
  return MEMORY[0x1E0C8BE20](A);
}

sparse_status sparse_extract_sparse_row_double(sparse_matrix_double A, sparse_index row, sparse_index column_start, sparse_index *column_end, sparse_dimension nz, double *val, sparse_index *jndx)
{
  return MEMORY[0x1E0C8BE30](A, row, column_start, column_end, nz, val, jndx);
}

uint64_t sparse_get_matrix_nonzero_count(void *A)
{
  return MEMORY[0x1E0C8BE40](A);
}

uint64_t sparse_get_matrix_nonzero_count_for_column(void *A, sparse_index j)
{
  return MEMORY[0x1E0C8BE48](A, j);
}

sparse_dimension sparse_get_matrix_number_of_columns(void *A)
{
  return MEMORY[0x1E0C8BE58](A);
}

sparse_dimension sparse_get_matrix_number_of_rows(void *A)
{
  return MEMORY[0x1E0C8BE60](A);
}

sparse_status sparse_insert_entry_double(sparse_matrix_double A, double val, sparse_index i, sparse_index j)
{
  return MEMORY[0x1E0C8BE88](A, i, j, val);
}

sparse_matrix_double sparse_matrix_create_double(sparse_dimension M, sparse_dimension N)
{
  return (sparse_matrix_double)MEMORY[0x1E0C8BEA8](M, N);
}

sparse_status sparse_matrix_destroy(void *A)
{
  return MEMORY[0x1E0C8BEB8](A);
}

sparse_status sparse_matrix_vector_product_dense_double(CBLAS_TRANSPOSE transa, double alpha, sparse_matrix_double A, const double *x, sparse_stride incx, double *y, sparse_stride incy)
{
  return MEMORY[0x1E0C8BEC8](*(_QWORD *)&transa, A, x, incx, y, incy, alpha);
}

sparse_status sparse_set_matrix_property(void *A, sparse_matrix_property pname)
{
  return MEMORY[0x1E0C8BEE0](A, *(_QWORD *)&pname);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x1E0C8C050](__A, __IA, __F, __IF, __C, __IC, __N, __P);
}

vImage_Error vImageBoxConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CBC8](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width, backgroundColor);
}

vImage_Error vImageConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1D0](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

int zgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8DBD8](__m, __n, __a, __lda, __ipiv, __info);
}

int zgetri_(__CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublecomplex *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8DBE0](__n, __a, __lda, __ipiv, __work, __lwork, __info);
}

