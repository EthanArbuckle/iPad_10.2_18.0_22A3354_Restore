uint64_t sub_1A57B9A34(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1A57BCBB0();
  result = sub_1A594BBD4();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57B8124(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1A57B9AC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  const void *v47;
  int v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD **v59;
  _QWORD *v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  const void *v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _QWORD v70[13];
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[184];
  _BYTE v100[184];
  _BYTE v101[184];
  _BYTE v102[584];
  _DWORD v103[146];
  _BYTE v104[184];
  _BYTE v105[184];
  _BYTE v106[184];
  _BYTE v107[184];
  _BYTE v108[184];
  _BYTE v109[264];
  _BYTE v110[184];
  _QWORD v111[74];
  uint64_t v112;

  MEMORY[0x1E0C80A78](a1);
  v112 = v1;
  v3 = v2;
  v5 = v4;
  v74 = v6;
  v7 = sub_1A594AE60();
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  MEMORY[0x1E0C80A78](v7);
  v78 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v80 = (char *)v70 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
  MEMORY[0x1E0C80A78](v11);
  v82 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v79 = (char *)v70 - v14;
  MEMORY[0x1E0C80A78](v15);
  v77 = (char *)v70 - v16;
  MEMORY[0x1E0C80A78](v17);
  v95 = (char *)v70 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE797D50);
  MEMORY[0x1E0C80A78](v19);
  v81 = (char *)v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v75 = (char *)v70 - v22;
  v23 = type metadata accessor for MessageData.BodySection();
  v87 = *(_QWORD *)(v23 - 8);
  v88 = v23;
  MEMORY[0x1E0C80A78](v23);
  v92 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v86 = (char *)v70 - v26;
  MEMORY[0x1E0C80A78](v27);
  v76 = (char *)v70 - v28;
  v97 = type metadata accessor for StreamedBodySection();
  v29 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v91 = (char *)v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v90 = (char *)v70 - v32;
  MEMORY[0x1E0C80A78](v33);
  v89 = (char *)v70 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE797E08);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v85 = (char *)v70 - v39;
  MEMORY[0x1E0C80A78](v40);
  v84 = (char *)v70 - v41;
  MEMORY[0x1E0C80A78](v42);
  v83 = (char *)v70 - v43;
  MEMORY[0x1E0C80A78](v44);
  v98 = (uint64_t)v70 - v45;
  sub_1A55D935C((uint64_t)v110);
  BYTE4(v111[0]) = 1;
  LODWORD(v111[0]) = 0;
  LODWORD(v111[1]) = 0;
  BYTE4(v111[1]) = 1;
  sub_1A55032A0((uint64_t)v110, (uint64_t)&v111[2], &qword_1EE7A03D8);
  v111[25] = MEMORY[0x1E0DEE9D8];
  sub_1A55032A0((uint64_t)v110, (uint64_t)&v111[26], &qword_1EE7A03D8);
  memset(&v111[49], 0, 144);
  LOBYTE(v111[67]) = 1;
  HIDWORD(v111[67]) = 0;
  LOBYTE(v111[68]) = 1;
  v111[69] = 0;
  LOBYTE(v111[70]) = 1;
  v46 = (_QWORD *)v5;
  *(_OWORD *)&v111[71] = 0u;
  memcpy(v103, v111, sizeof(v103));
  v96 = v3;
  sub_1A57B52D8(v5, v3, (uint64_t)v104);
  sub_1A55032A0((uint64_t)v104, (uint64_t)v105, &qword_1EE7971C8);
  if (sub_1A56F1164((uint64_t)v105) != 1)
  {
    sub_1A5715EC4(v105, v106);
    sub_1A5715EC4(v106, v107);
    if (sub_1A56EFC28((uint64_t)v107) == 1)
    {
      nullsub_1(v107);
      sub_1A57B1194(v47, v108);
      sub_1A57B1194(v108, v109);
      v48 = sub_1A56EFCB0((uint64_t)v109);
      if (v48 == 1)
      {
        v54 = *(_DWORD *)sub_1A56EFCCC((uint64_t)v109);
        sub_1A57BC84C((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A57B77DC);
        v103[2] = v54;
        v50 = &v103[3];
LABEL_10:
        *(_BYTE *)v50 = 0;
        v73 = v29;
        v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
        v71(v98, 1, 1, v97);
        if (*(uint64_t *)(*(_QWORD *)v5 + 24) >= 1)
        {
          v70[12] = 0;
          v70[3] = &v103[4];
          v70[4] = &v103[134];
          v70[2] = &v103[52];
          v72 = v5;
          v70[5] = v37;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1A57B7C4C();
          v55 = *(_QWORD **)v5;
          v56 = *(_QWORD *)(*(_QWORD *)v5 + 32);
          sub_1A5715EC4((const void *)(*v46 + 184 * v56 + 40), v101);
          v57 = v56 + 1;
          if (__OFADD__(v56, 1))
          {
            __break(1u);
          }
          else
          {
            v58 = v55[3];
            if (v57 >= v55[2])
              v57 = 0;
            v55[4] = v57;
            if (!__OFSUB__(v58, 1))
            {
              v55[3] = v58 - 1;
              v59 = (_QWORD **)v96;
              swift_beginAccess();
              v60 = *v59;
              sub_1A57B773C((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A57B7138);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *v59 = v60;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v60 = sub_1A57B2558(0, v60[2] + 1, 1, v60);
                *v96 = v60;
              }
              v63 = v60[2];
              v62 = v60[3];
              if (v63 >= v62 >> 1)
              {
                v60 = sub_1A57B2558((_QWORD *)(v62 > 1), v63 + 1, 1, v60);
                *v96 = v60;
              }
              v60[2] = v63 + 1;
              sub_1A5715EC4(v101, &v60[23 * v63 + 4]);
              swift_endAccess();
              sub_1A5715EC4(v101, v100);
              if (sub_1A56EFC28((uint64_t)v100) == 1)
              {
                nullsub_1(v100);
                sub_1A57B1194(v64, v99);
                v65 = (char *)&loc_1A57BA28C + *((int *)qword_1A57BB588 + sub_1A56EFCB0((uint64_t)v99));
                __asm { BR              X9 }
              }
              sub_1A57BC988();
              v68 = swift_allocError();
              *v69 = 2;
              v112 = v68;
              swift_willThrow();
              sub_1A57B773C((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A57B1238);
              goto LABEL_25;
            }
          }
          __break(1u);
          JUMPOUT(0x1A57BB578);
        }
        sub_1A57BC988();
        v66 = swift_allocError();
        *v67 = 0;
        v112 = v66;
        swift_willThrow();
LABEL_25:
        sub_1A5510284(v98, &qword_1EE797E08);
        goto LABEL_8;
      }
      if (!v48)
      {
        v49 = *(_DWORD *)sub_1A56EFCCC((uint64_t)v109);
        sub_1A57BC84C((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A57B77DC);
        v103[0] = v49;
        v50 = &v103[1];
        goto LABEL_10;
      }
    }
    sub_1A57BC84C((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A57B77DC);
  }
  sub_1A57BC988();
  v51 = swift_allocError();
  *v52 = 2;
  v112 = v51;
  swift_willThrow();
LABEL_8:
  memcpy(v102, v103, sizeof(v102));
  return sub_1A5620944((uint64_t)v102);
}

__n128 sub_1A57BB5D8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[4];
  uint64_t v10;
  char v11;

  type metadata accessor for ParsedStringCache();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A59BA3F0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE797DF0);
  v3 = sub_1A594BA18();
  *(_QWORD *)(v3 + 16) = 32;
  bzero((void *)(v3 + 32), 0x300uLL);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = v3;
  ResponseParser.init(bufferLimit:messageAttributeLimit:bodySizeLimit:literalSizeLimit:parsedStringCache:)(0x2000, 100, 1966080, 4096, (uint64_t)sub_1A57BC944, v2, (uint64_t)v9);
  v4 = v10;
  v5 = v11;
  result = (__n128)v9[2];
  v7 = v9[3];
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 95) = 0;
  return result;
}

uint64_t sub_1A57BB6AC(uint64_t a1, uint64_t a2)
{
  return sub_1A57B56F8(a1, a2);
}

uint64_t sub_1A57BB6B4(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int16 *)(a1 + 176);
  result = a1 + 176;
  v3 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFF87FFFF | 0x200000;
  *(_WORD *)result = v2;
  *(_BYTE *)(result + 2) = BYTE2(v3);
  return result;
}

uint64_t sub_1A57BB6D8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[7];
  *(_OWORD *)(a2 + 96) = a1[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  *(_DWORD *)(a2 + 175) = *(_DWORD *)((char *)a1 + 175);
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v10;
  *(_OWORD *)(a2 + 128) = v8;
  return a2;
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder()
{
  return &type metadata for ServerResponseTranscoder;
}

uint64_t destroy for ServerResponseFramingParser(uint64_t a1)
{
  sub_1A5685DEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_1A5685D98(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 163) = *(_DWORD *)(a2 + 163);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v12 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_retain();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_1A5685D98(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  sub_1A5685DEC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  v12 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy192_8_1(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1A5685DEC(v4, v5, v6);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseFramingParser(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseFramingParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseFramingParser()
{
  return &type metadata for ServerResponseFramingParser;
}

void *sub_1A57BBBC0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int a23)
{
  int v23;
  id v24;

  v23 = (a23 >> 21) & 3;
  if (v23 == 2 || v23 == 1)
  {
    v24 = result;
    return (void *)swift_retain();
  }
  else if (!v23)
  {
    return (void *)sub_1A56EFB98((uint64_t)result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                     a20,
                     a21,
                     a22,
                     a23,
                     (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57BBC94,
                     (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57B7138);
  }
  return result;
}

uint64_t sub_1A57BBC94(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_retain();
  sub_1A579F800(a1);
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

void *destroy for ServerResponseFramingParser.Frame(uint64_t a1)
{
  return sub_1A57BBD20(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
}

void *sub_1A57BBD20(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int a23)
{
  int v23;

  v23 = (a23 >> 21) & 3;
  if (v23 == 2 || v23 == 1)
  {

    return (void *)swift_release();
  }
  else if (!v23)
  {
    return (void *)sub_1A56EFB98((uint64_t)result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                     a20,
                     a21,
                     a22,
                     a23,
                     (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57BBDF4,
                     (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57B1238);
  }
  return result;
}

uint64_t sub_1A57BBDF4(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_release();
  sub_1A579F7B0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerResponseFramingParser.Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v26 = *(unsigned __int8 *)(a2 + 178);
  v27 = *(unsigned __int16 *)(a2 + 176);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 56);
  sub_1A57BBBC0(*(void **)a2, v8, v9, v10, v3, v4, v5, v11, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v27 | (v26 << 16));
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_BYTE *)(a1 + 178) = v26;
  *(_WORD *)(a1 + 176) = v27;
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser.Frame(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v35 = *(_QWORD *)(a2 + 112);
  v36 = *(_QWORD *)(a2 + 120);
  v37 = *(_QWORD *)(a2 + 128);
  v38 = *(_QWORD *)(a2 + 136);
  v39 = *(_QWORD *)(a2 + 144);
  v43 = *(unsigned __int8 *)(a2 + 178);
  v44 = *(unsigned __int16 *)(a2 + 176);
  v40 = *(_QWORD *)(a2 + 152);
  v41 = *(_QWORD *)(a2 + 160);
  v42 = *(_QWORD *)(a2 + 168);
  sub_1A57BBBC0(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v44 | (v43 << 16));
  v12 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v13 = *(void **)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v23 = *(_OWORD *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v25 = *(_OWORD *)(a1 + 128);
  v26 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  *(_BYTE *)(a1 + 178) = v43;
  *(_WORD *)(a1 + 176) = v44;
  v27 = *(_QWORD *)(a1 + 160);
  v28 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  sub_1A57BBD20(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    *((uint64_t *)&v26 + 1),
    v27,
    v28,
    v12);
  return a1;
}

__n128 __swift_memcpy179_8_0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)a2 + 175);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ServerResponseFramingParser.Frame(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_WORD *)(a2 + 176);
  v4 = *(_BYTE *)(a2 + 178);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 168);
  v21 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v22;
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v23;
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v24;
  v25 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v25;
  v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v26;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 178) = v4;
  *(_WORD *)(a1 + 176) = v3;
  sub_1A57BBD20(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    v20,
    v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseFramingParser.Frame(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xE && *(_BYTE *)(a1 + 179))
    return (*(_DWORD *)a1 + 14);
  v3 = ((*(unsigned __int8 *)(a1 + 178) >> 1) & 0xC | (*(unsigned __int8 *)(a1 + 178) >> 5) & 3) ^ 0xF;
  if (v3 >= 0xD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ServerResponseFramingParser.Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 178) = 0;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 14;
    if (a3 >= 0xE)
      *(_BYTE *)(result + 179) = 1;
  }
  else
  {
    if (a3 >= 0xE)
      *(_BYTE *)(result + 179) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 178) = 8 * ((((-a2 >> 2) & 3) - 4 * a2) & 0xF);
      *(_WORD *)(result + 176) = 0;
    }
  }
  return result;
}

uint64_t sub_1A57BC318(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 178) >> 5) & 3;
}

uint64_t sub_1A57BC324(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(a1 + 176);
  result = a1 + 176;
  v3 = *(unsigned __int8 *)(result + 2);
  *(_WORD *)result = v2;
  *(_BYTE *)(result + 2) = ((v2 | (v3 << 16)) & 0xFF9FFFFF) >> 16;
  return result;
}

uint64_t sub_1A57BC344(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 176);
  result = a1 + 176;
  v4 = (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFF87FFFF | ((a2 & 3) << 21);
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseFramingParser.Frame()
{
  return &type metadata for ServerResponseFramingParser.Frame;
}

uint64_t destroy for ServerResponseFramingParser.ResponseParser()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 99) = *(_DWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
  return a1;
}

__n128 __swift_memcpy103_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseFramingParser.ResponseParser(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 103))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseFramingParser.ResponseParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 102) = 0;
    *(_WORD *)(result + 100) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 103) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 103) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseFramingParser.ResponseParser()
{
  return &type metadata for ServerResponseFramingParser.ResponseParser;
}

uint64_t getEnumTagSinglePayload for ServerResponseTranscoder.Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseTranscoder.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1A57BC71C + 4 * byte_1A59BA04D[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1A57BC750 + 4 * byte_1A59BA048[v4]))();
}

uint64_t sub_1A57BC750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57BC758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57BC760);
  return result;
}

uint64_t sub_1A57BC76C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57BC774);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1A57BC778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57BC780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder.Error()
{
  return &type metadata for ServerResponseTranscoder.Error;
}

unint64_t sub_1A57BC7A0()
{
  unint64_t result;

  result = qword_1EE7AA4D8;
  if (!qword_1EE7AA4D8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59BA138, &type metadata for ServerResponseTranscoder.Error);
    atomic_store(result, (unint64_t *)&qword_1EE7AA4D8);
  }
  return result;
}

unint64_t sub_1A57BC7E4()
{
  unint64_t result;

  result = qword_1EE7AA4E0;
  if (!qword_1EE7AA4E0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59BA214, &type metadata for ParseError);
    atomic_store(result, (unint64_t *)&qword_1EE7AA4E0);
  }
  return result;
}

uint64_t sub_1A57BC828(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int16 *)(a1 + 176);
  result = a1 + 176;
  v3 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFF87FFFF | 0x400000;
  *(_WORD *)result = v2;
  *(_BYTE *)(result + 2) = BYTE2(v3);
  return result;
}

uint64_t sub_1A57BC84C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

uint64_t sub_1A57BC8C0(uint64_t a1)
{
  if (((*(unsigned __int8 *)(a1 + 178) >> 2) & 0x1E) != 0)
    return 32 - ((*(unsigned __int8 *)(a1 + 178) >> 2) & 0x1E | (*(unsigned __int8 *)(a1 + 178) >> 7));
  else
    return 0;
}

void *sub_1A57BC8E8(const void *a1, void *a2)
{
  __swift_memcpy179_8(a2, a1);
  return a2;
}

uint64_t sub_1A57BC924(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(a1 + 176);
  result = a1 + 176;
  v3 = *(unsigned __int8 *)(result + 2);
  *(_WORD *)result = v2;
  *(_BYTE *)(result + 2) = ((v2 | (v3 << 16)) & 0xFF87FFFF) >> 16;
  return result;
}

uint64_t sub_1A57BC944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A57B5604(a1, a2, v2);
}

uint64_t type metadata accessor for StreamedBodySection()
{
  uint64_t result;

  result = qword_1EE797DF8;
  if (!qword_1EE797DF8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1A57BC988()
{
  unint64_t result;

  result = qword_1EE797E10;
  if (!qword_1EE797E10)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59BA0B8, &type metadata for ServerResponseTranscoder.Error);
    atomic_store(result, (unint64_t *)&qword_1EE797E10);
  }
  return result;
}

int8x16_t sub_1A57BC9CC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x9800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCA08(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 0xF800000000000001;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

uint64_t sub_1A57BCA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamedBodySection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57BCA84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StreamedBodySection();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A57BCAC0()
{
  unint64_t result;

  result = qword_1EE7AA4E8;
  if (!qword_1EE7AA4E8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59BA1D4, &type metadata for ServerResponseTranscoder.UnknownServerResponse);
    atomic_store(result, (unint64_t *)&qword_1EE7AA4E8);
  }
  return result;
}

unint64_t sub_1A57BCB04()
{
  unint64_t result;

  result = qword_1EE7AA4F0;
  if (!qword_1EE7AA4F0)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for GmailLabel, &type metadata for GmailLabel);
    atomic_store(result, (unint64_t *)&qword_1EE7AA4F0);
  }
  return result;
}

uint64_t sub_1A57BCB48(uint64_t a1)
{
  sub_1A5524104(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_BYTE *)(a1 + 176));
  return a1;
}

unint64_t sub_1A57BCBB0()
{
  unint64_t result;

  result = qword_1EE7970A8;
  if (!qword_1EE7970A8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Flag, &type metadata for Flag);
    atomic_store(result, (unint64_t *)&qword_1EE7970A8);
  }
  return result;
}

int8x16_t sub_1A57BCBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x2000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

uint64_t sub_1A57BCC30(uint64_t a1, uint64_t a2)
{
  __swift_memcpy36_8_0(a2, a1);
  return a2;
}

int8x16_t sub_1A57BCC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x3000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCCA8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0xA800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCCE4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0xA000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCD20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x2800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCD5C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x9000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCD98(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x8800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCDD4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x8000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

void *sub_1A57BCE10(const void *a1, void *a2)
{
  __swift_memcpy105_8(a2, a1);
  return a2;
}

int8x16_t sub_1A57BCE4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x5000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCE88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x7800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x6000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCF00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x7000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x4800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x5800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x4000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BCFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x3800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BD02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x6800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

uint64_t sub_1A57BD068(uint64_t a1, uint64_t a2)
{
  __swift_memcpy25_8_0(a2, a1);
  return a2;
}

int8x16_t sub_1A57BD0A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x1800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BD0E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x1000000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BD11C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1 | 0x800000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

int8x16_t sub_1A57BD158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 1;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

uint64_t sub_1A57BD190(uint64_t a1)
{
  sub_1A579FAC4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

int8x16_t sub_1A57BD1C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(unsigned __int8 *)(a1 + 384);
  v2 = *(_QWORD *)(a1 + 560) & 0xF800000000000001 | 0x400000000000000;
  *(_QWORD *)(a1 + 192) = *(unsigned __int8 *)(a1 + 192);
  *(_QWORD *)(a1 + 384) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 536), (int8x16_t)xmmword_1A59AC060);
  *(int8x16_t *)(a1 + 536) = result;
  *(_QWORD *)(a1 + 560) = v2;
  return result;
}

void destroy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1)
{
  sub_1A57B161C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_WORD *)(a1 + 176));
}

uint64_t initializeWithCopy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_WORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_1A57B7510(*(_QWORD *)a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = v26;
  return a1;
}

uint64_t assignWithCopy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v35 = *(_QWORD *)(a2 + 112);
  v36 = *(_QWORD *)(a2 + 120);
  v37 = *(_QWORD *)(a2 + 128);
  v38 = *(_QWORD *)(a2 + 136);
  v39 = *(_QWORD *)(a2 + 144);
  v40 = *(_QWORD *)(a2 + 152);
  v41 = *(_QWORD *)(a2 + 160);
  v42 = *(_QWORD *)(a2 + 168);
  v43 = *(_WORD *)(a2 + 176);
  sub_1A57B7510(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  v26 = *(_QWORD *)(a1 + 160);
  v27 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  v28 = *(_WORD *)(a1 + 176);
  *(_WORD *)(a1 + 176) = v43;
  sub_1A57B161C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    v27,
    v28);
  return a1;
}

__n128 __swift_memcpy178_8_0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = *(_WORD *)(a2 + 176);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 160);
  v19 = *(_QWORD *)(a1 + 168);
  v20 = *(_WORD *)(a1 + 176);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = v3;
  sub_1A57B161C(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    v19,
    v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 178))
    return (*(_DWORD *)a1 + 3);
  v3 = *(unsigned __int16 *)(a1 + 176);
  if ((~(v3 >> 9) & 6) != 0)
    v4 = -1;
  else
    v4 = ~(v3 >> 9) & 7;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseTranscoder.UnknownServerResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 3;
    if (a3 >= 3)
      *(_BYTE *)(result + 178) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 178) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_WORD *)(result + 176) = (-512 * a2) & 0xE00;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder.UnknownServerResponse()
{
  return &type metadata for ServerResponseTranscoder.UnknownServerResponse;
}

uint64_t sub_1A57BD708(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A55DC724(v8, v9);
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v10 = *(int *)(a3 + 24);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_1A594AE60();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t sub_1A57BD820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  sub_1A55DC738(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1A594AE60();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_1A57BD8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A55DC724(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1A594AE60();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_1A57BD998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  sub_1A55DC724(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v7;
  sub_1A55DC738(v8, v9);
  v10 = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_1A594AE60();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_1A57BDAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_1A594AE60();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1A57BDBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1A55DC738(v7, v8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(a3 + 24);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_1A594AE60();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_1A57BDD08()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57BDD14(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1A57BDD94()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A57BDDA0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE798F58);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1A57BDE18()
{
  unint64_t v0;

  sub_1A57BDE94();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A57BDE94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE798F78)
  {
    sub_1A594AE60();
    v0 = sub_1A594C354();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE798F78);
  }
}

uint64_t sub_1A57BDEEC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

uint64_t destroy for ParseError(uint64_t a1)
{
  return sub_1A57BDF10(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1A57BDF10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s13IMAP2Protocol10ParseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A57BDEEC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A57BDEEC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A57BDF10(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParseError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A57BDF10(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A57BE090(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1A57BE0A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ParseError()
{
  return &type metadata for ParseError;
}

uint64_t Tag.debugDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = sub_1A594B478();
  MEMORY[0x1E0C80A78](v2);
  sub_1A57BE3B4(a1 & 0xFFFFFFFF000000FFLL);
  sub_1A594B460();
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796028);
  sub_1A579FA78();
  v3 = sub_1A594B430();
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if (v5)
    return v3;
  __break(1u);
  return result;
}

BOOL static Tag.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2 && HIDWORD(a1) == HIDWORD(a2);
}

char *Tag.init(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1A57BED14(a1, a2);
}

uint64_t Tag.connectionIdentifier.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*Tag.connectionIdentifier.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t Tag.commandCounter.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t Tag.commandCounter.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

double (*Tag.commandCounter.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t Tag.init(connectionIdentifier:commandCounter:)(unsigned __int8 a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t Tag.hash(into:)()
{
  sub_1A594CE94();
  return sub_1A594CEAC();
}

uint64_t Tag.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE94();
  sub_1A594CEAC();
  return sub_1A594CED0();
}

uint64_t sub_1A57BE298()
{
  sub_1A594CE64();
  sub_1A594CE94();
  sub_1A594CEAC();
  return sub_1A594CED0();
}

uint64_t sub_1A57BE2F4()
{
  sub_1A594CE94();
  return sub_1A594CEAC();
}

uint64_t sub_1A57BE330()
{
  sub_1A594CE64();
  sub_1A594CE94();
  sub_1A594CEAC();
  return sub_1A594CED0();
}

BOOL sub_1A57BE388(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t sub_1A57BE3B4(unint64_t a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  __int16 v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  size_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int64_t v12;
  BOOL v13;
  uint64_t result;
  char *v15;

  v1 = a1;
  v2 = HIDWORD(a1);
  v15 = sub_1A57B2460(0, 10, 0, MEMORY[0x1E0DEE9D8]);
  v3 = v1 / 0x1Au;
  sub_1A57BE8CC(0, 0, v1 % 0x1Au + 65);
  v4 = v15;
  if ((v1 & 0xFEu) > 0x19uLL)
  {
    v6 = *((_QWORD *)v15 + 2);
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v6 >= *((_QWORD *)v15 + 3) >> 1)
      v4 = sub_1A57B2460(isUniquelyReferenced_nonNull_native, v6 + 1, 1, v15);
    v8 = *((_QWORD *)v4 + 2);
    memmove(v4 + 33, v4 + 32, v8);
    v5 = v8 + 1;
    *((_QWORD *)v4 + 2) = v5;
    v4[32] = (unsigned __int16)(v3 - 1) % 0x1Au + 65;
    v15 = v4;
  }
  else
  {
    v5 = *((_QWORD *)v15 + 2);
  }
  sub_1A57BE8CC(v5, v5, (v2 % 0xA) | 0x30);
  v9 = v15;
  if (v2 < 0xA)
    return (uint64_t)v9;
  while (1)
  {
    v10 = *((_QWORD *)v9 + 2);
    if (v10 < v5)
      break;
    v11 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)v11 || v10 >= *((_QWORD *)v9 + 3) >> 1)
      v9 = sub_1A57B2460(v11, v10 + 1, 1, v9);
    v12 = *((_QWORD *)v9 + 2) - v5;
    if (v12 < 0)
      goto LABEL_16;
    memmove(&v9[v5 + 33], &v9[v5 + 32], v12);
    ++*((_QWORD *)v9 + 2);
    v9[v5 + 32] = (v2 / 0xA - 10 * ((429496730 * (unint64_t)(v2 / 0xA)) >> 32)) | 0x30;
    v13 = v2 > 0x63;
    LODWORD(v2) = v2 / 0xA;
    if (!v13)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_16:
  result = sub_1A594CA68();
  __break(1u);
  return result;
}

uint64_t sub_1A57BE5E4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = sub_1A594B478();
  MEMORY[0x1E0C80A78](v1);
  sub_1A57BE3B4(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32));
  sub_1A594B460();
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796028);
  sub_1A579FA78();
  v2 = sub_1A594B430();
  v4 = v3;
  result = swift_bridgeObjectRelease();
  if (v4)
    return v2;
  __break(1u);
  return result;
}

uint64_t sub_1A57BE6A8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1A594B718();
  v4 = sub_1A57BE724(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A57BE724(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1A5540DC8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1A57BE868(v9, 0);
      v12 = sub_1A5540EB4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1A85AD9BC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1A85AD9BCLL);
LABEL_9:
      sub_1A594C7D4();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1A85AD9BC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

_QWORD *sub_1A57BE868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B358);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1A57BE8CC(uint64_t a1, int64_t a2, char a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = sub_1A57B2460(result, v13, 1, v5);
    v5 = result;
  }
  v14 = v5 + 32;
  v15 = &v5[a1 + 32];
  if (!v9)
    goto LABEL_20;
  v16 = *((_QWORD *)v5 + 2);
  v17 = v16 - a2;
  if (__OFSUB__(v16, a2))
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v15 + 1;
    v18 = &v14[a2];
    if (v15 + 1 != &v14[a2] || result >= &v18[v17])
      result = (char *)memmove(result, v18, v17);
    v19 = *((_QWORD *)v5 + 2);
    v20 = __OFADD__(v19, v9);
    v21 = v19 + v9;
    if (!v20)
    {
      *((_QWORD *)v5 + 2) = v21;
LABEL_20:
      *v15 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)sub_1A594CA68();
  __break(1u);
  return result;
}

char *sub_1A57BEA28(char *result, uint64_t a2)
{
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (a2 < 0)
    goto LABEL_55;
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  if (!a2)
  {
    v7 = (char *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_29;
    goto LABEL_19;
  }
  v4 = result;
  v5 = *result;
  if ((*result - 91) >= 0xE6u)
  {
    v8 = 1;
    result = sub_1A57B2460(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v3 = result;
    do
    {
      if (v8 - 1 >= a2)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      v10 = *((_QWORD *)v3 + 2);
      v9 = *((_QWORD *)v3 + 3);
      if (v10 >= v9 >> 1)
      {
        result = sub_1A57B2460((char *)(v9 > 1), v10 + 1, 1, v3);
        v3 = result;
      }
      *((_QWORD *)v3 + 2) = v10 + 1;
      v3[v10 + 32] = v5 - 65;
      if (a2 == v8)
        goto LABEL_18;
      v5 = v4[v8++];
    }
    while ((v5 - 91) >= 0xE6u);
    v6 = v8 - 1;
    if (v6 == a2)
      goto LABEL_18;
  }
  else
  {
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_29;
    v6 = 0;
  }
  v11 = v4[v6];
  if ((v11 - 58) < 0xF6u)
  {
LABEL_18:
    v7 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_19:
    v12 = *((_QWORD *)v7 + 2);
    if (v12)
    {
      v13 = *((_QWORD *)v3 + 2);
      if (v13)
      {
        v14 = 0;
        v15 = (unsigned __int8 *)(v3 + 32);
        do
        {
          v16 = 26 * v14;
          if ((unsigned __int128)(v14 * (__int128)26) >> 64 != (26 * v14) >> 63)
          {
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          v17 = *v15 + 1;
          v18 = __OFADD__(v16, v17);
          v14 = v16 + v17;
          if (v18)
            goto LABEL_50;
          ++v15;
          --v13;
        }
        while (v13);
        v19 = v14 - 1;
        if (!__OFSUB__(v14, 1))
          goto LABEL_26;
        __break(1u);
LABEL_32:
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = 10 * v21;
          if ((unsigned __int128)((uint64_t)v21 * (__int128)10) >> 64 != (uint64_t)(10 * v21) >> 63)
            break;
          v23 = v7[v20 + 32];
          v21 = v22 + v23;
          if (__OFADD__(v22, v23))
            goto LABEL_53;
          if (v12 == ++v20)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (HIDWORD(v21))
              return 0;
            else
              return (char *)(v19 | (v21 << 32));
          }
        }
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v19 = -1;
LABEL_26:
      if ((v19 & 0x8000000000000000) == 0 && v19 <= 0xFF)
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  result = sub_1A57B2460(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v7 = result;
  while (1)
  {
    if (v6 == a2)
      v6 = a2;
    else
      ++v6;
    if (v6 > a2)
      break;
    v25 = *((_QWORD *)v7 + 2);
    v24 = *((_QWORD *)v7 + 3);
    if (v25 >= v24 >> 1)
    {
      result = sub_1A57B2460((char *)(v24 > 1), v25 + 1, 1, v7);
      v7 = result;
    }
    *((_QWORD *)v7 + 2) = v25 + 1;
    v7[v25 + 32] = v11 - 48;
    if (v6 != a2)
    {
      v11 = v4[v6];
      if ((v11 - 58) > 0xF5u)
        continue;
    }
    goto LABEL_19;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

char *sub_1A57BED14(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD v10[2];

  v2 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v5 = HIBYTE(v2) & 0xF;
    v10[0] = a1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v4 = (char *)v10;
    goto LABEL_7;
  }
  a1 = sub_1A57BE6A8();
  v7 = v6;
  swift_bridgeObjectRelease();
  v2 = v7;
  if ((v7 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v4 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = (char *)sub_1A594C7D4();
  }
LABEL_7:
  v8 = sub_1A57BEA28(v4, v5);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1A57BEDC4()
{
  unint64_t result;

  result = qword_1EE7AA500;
  if (!qword_1EE7AA500)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Tag, &type metadata for Tag);
    atomic_store(result, (unint64_t *)&qword_1EE7AA500);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tag()
{
  return &type metadata for Tag;
}

id MessageIdentifierSet<>.makeNSArrayOfNSNumber()(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  unsigned int v16;

  v4 = HIDWORD(a2);
  sub_1A579713C();
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_initWithCapacity_, MessageIdentifierSet.count.getter(a1, a2 & 0xFFFFFFFFFFLL));
  MessageIdentifierSet.startIndex.getter();
  v7 = v6;
  v9 = v8;
  sub_1A54E4334(a1, a2, v4);
  while (1)
  {
    MessageIdentifierSet.endIndex.getter();
    if (v7 == v11 && v9 == v10)
      break;
    MessageIdentifierSet.subscript.getter();
    sub_1A54E4334(a1, a2, v4);
    v7 = MessageIdentifierSet.index(_:offsetBy:)(v7, v9, 1, a1, a2 & 0xFFFFFFFFFFLL);
    v9 = v13;
    sub_1A54E3458(a1, a2, v4);
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInt_, v16);
    objc_msgSend(v5, sel_addObject_, v14);

  }
  sub_1A54E3458(a1, a2, v4);
  return v5;
}

uint64_t CompactEncDet_detectEncoding(int8x8_t *a1, int a2, char *a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  unsigned int v7;
  int v9;

  if (a4)
    v7 = 0;
  else
    v7 = 2;
  v9 = 0;
  return CompactEncDet::DetectEncoding(a1, a2, 0, a3, 0, a5, a6, v7, 0, &v9, a7);
}

BOOL CompactEncDet_EncodingFromName(_BOOL8 a1, _BYTE *a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = EncodingFromName(a1, &v4);
  *a2 = v4;
  return result;
}

uint64_t CompactEncDet_EncodingNameAliasToEncoding(char *a1)
{
  return EncodingNameAliasToEncoding(a1);
}

uint64_t CompactEncDet_LanguageFromCode(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  int v4;

  v4 = 0;
  result = LanguageFromCode(a1, &v4);
  *a2 = v4;
  return result;
}

BOOL CompactEncDet_IS_LANGUAGE_UNKNOWN(int a1)
{
  return (a1 - 25) < 2;
}

void *SetDetailsEncProb(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v5;
  _DWORD *v6;
  void *result;

  v5 = *(_DWORD *)(a1 + 40);
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 304 * v5);
  *v6 = a2;
  v6[1] = a3;
  MEMORY[0x1A85B04D0](v6 + 2, a4);
  result = memcpy((void *)(*(_QWORD *)(a1 + 32) + 304 * v5 + 32), (const void *)(a1 + 532), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void *SetDetailsEncProbCopyOffset(uint64_t a1, int a2, uint64_t a3)
{
  int v4;
  _DWORD *v5;
  void *result;

  v4 = *(_DWORD *)(a1 + 40);
  v5 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 304 * v4);
  *v5 = *(v5 - 76);
  v5[1] = a2;
  MEMORY[0x1A85B04D0](v5 + 2, a3);
  result = memcpy((void *)(*(_QWORD *)(a1 + 32) + 304 * v4 + 32), (const void *)(a1 + 532), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void *SetDetailsEncLabel(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  void *result;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 304 * v2);
  *v3 = *(v3 - 76);
  v3[1] = -1;
  MEMORY[0x1A85B04D0](v3 + 2);
  result = memcpy((void *)(*(_QWORD *)(a1 + 32) + 304 * v2 + 32), (const void *)(a1 + 532), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void *SetDetailsLabel(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  void *result;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 304 * v2 - 304;
  v5 = *(_DWORD *)(v3 + v4);
  v6 = (_DWORD *)(v3 + 304 * v2);
  *v6 = v5;
  v6[1] = -1;
  MEMORY[0x1A85B04D0](v6 + 2);
  result = memcpy((void *)(*(_QWORD *)(a1 + 32) + 304 * v2 + 32), (const void *)(*(_QWORD *)(a1 + 32) + v4 + 32), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t UTF88Sub(int a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (a2 >> 4) & 3;
  v3 = v2 | 4;
  if (a1 != 226)
    v3 = (a2 >> 4) & 3;
  v4 = v2 | 8;
  if (((1 << (a1 + 62)) & 0x219) == 0)
    v4 = (a2 >> 4) & 3;
  if (a1 - 194 <= 9)
    v5 = v4;
  else
    v5 = (a2 >> 4) & 3;
  if ((a1 & 0xF0) != 0xC0)
    v5 = v3;
  v6 = v2 | 0xC;
  if (a1 == -61)
    return v6;
  else
    return v5;
}

uint64_t CompactEncDet::BackmapEncodingToRankedEncoding(int a1)
{
  uint64_t result;

  result = 0;
  while (kMapToEncoding[result] != a1)
  {
    if (++result == 67)
      return 0xFFFFFFFFLL;
  }
  return result;
}

std::string *DecodeActive@<X0>(__int16 a1@<W0>, std::string *a2@<X8>)
{
  std::string *result;

  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  if ((a1 & 0x80) != 0)
    result = std::string::append(a2, "Binary ");
  if ((a1 & 0x40) != 0)
    result = std::string::append(a2, "UTF1632 ");
  if ((a1 & 0x20) != 0)
    result = std::string::append(a2, "UTF8UTF8 ");
  if ((a1 & 0x10) != 0)
    result = std::string::append(a2, "UTF8 ");
  if ((a1 & 8) != 0)
    result = std::string::append(a2, "Iso2022 ");
  if ((a1 & 4) != 0)
    result = std::string::append(a2, "Hz ");
  if ((a1 & 2) != 0)
    result = std::string::append(a2, "UTF7A ");
  if ((a1 & 1) != 0)
    result = std::string::append(a2, "SevenBit ");
  if ((a1 & 0x200) != 0)
    result = std::string::append(a2, "Indic ");
  if ((a1 & 0x400) != 0)
    result = std::string::append(a2, "HighAlpha ");
  if ((a1 & 0x800) != 0)
    result = std::string::append(a2, "HighAccent ");
  if ((a1 & 0x1000) != 0)
    return std::string::append(a2, "EUCJP ");
  return result;
}

void sub_1A57BF424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double PsSourceInit(int a1)
{
  char *v1;
  size_t v2;
  double result;

  pssourcenext = 0;
  pssourcewidth = a1;
  if (pssource_mark_buffer)
    MEMORY[0x1A85B04E8](pssource_mark_buffer, 0x1000C8077774924);
  v1 = (char *)operator new[]();
  pssource_mark_buffer = (uint64_t)v1;
  v2 = 2 * pssourcewidth;
  memset(v1, 32, v2);
  *(_QWORD *)&v1[v2] = 0;
  next_do_src_line = 0;
  result = 0.0;
  do_src_offset = 0u;
  unk_1EE7F9FF8 = 0u;
  xmmword_1EE7FA008 = 0u;
  unk_1EE7FA018 = 0u;
  return result;
}

uint64_t PsSourceFinish(void)
{
  uint64_t v0;
  const char *v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  size_t v7;
  uint64_t result;

  v0 = (2 * pssourcewidth);
  v1 = (const char *)pssource_mark_buffer;
  v2 = v0 & ((int)v0 >> 31);
  v3 = v0 - 1;
  while (1)
  {
    v4 = __OFSUB__((_DWORD)v0, 1);
    LODWORD(v0) = v0 - 1;
    if ((int)v0 < 0 != v4)
      break;
    v5 = *(unsigned __int8 *)(pssource_mark_buffer + v3--);
    if (v5 != 32)
    {
      v2 = v0 + 1;
      break;
    }
  }
  *(_BYTE *)(pssource_mark_buffer + v2) = 0;
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "(      %s) do-src\n", v1);
  v6 = pssource_mark_buffer;
  v7 = 2 * pssourcewidth;
  memset((void *)pssource_mark_buffer, 32, v7);
  *(_QWORD *)(v6 + v7) = 0;
  result = MEMORY[0x1A85B04E8](v6, 0x1000C8077774924);
  pssource_mark_buffer = 0;
  return result;
}

size_t PsSource(size_t result, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  FILE **v12;
  uint64_t v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  FILE *v19;
  const char *v20;
  FILE *v21;
  int v22;

  v4 = ((int)result - (int)a2) / pssourcewidth * pssourcewidth;
  if (v4 >= pssourcenext)
  {
    v5 = (int)a3;
    pssourcenext = v4 + pssourcewidth;
    v6 = (2 * pssourcewidth);
    v7 = (const char *)pssource_mark_buffer;
    v8 = v6 & ((int)v6 >> 31);
    v9 = v6 - 1;
    while (1)
    {
      v10 = __OFSUB__((_DWORD)v6, 1);
      LODWORD(v6) = v6 - 1;
      if ((int)v6 < 0 != v10)
        break;
      v11 = *(unsigned __int8 *)(pssource_mark_buffer + v9--);
      if (v11 != 32)
      {
        v8 = v6 + 1;
        break;
      }
    }
    *(_BYTE *)(pssource_mark_buffer + v8) = 0;
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "(      %s) do-src\n", v7);
    v13 = pssource_mark_buffer;
    v14 = pssourcewidth;
    memset((void *)pssource_mark_buffer, 32, 2 * pssourcewidth);
    *(_QWORD *)(v13 + 2 * v14) = 0;
    v15 = &a2[v4];
    if ((int)v14 >= v5 - (int)v15)
      v16 = (v5 - (_DWORD)v15);
    else
      v16 = v14;
    fprintf(*v12, "(%05x ", v4);
    if ((int)v16 >= 1)
    {
      do
      {
        v18 = *v15++;
        v17 = v18;
        if (v18 == 10)
          v17 = 32;
        if (v17 == 13)
          v17 = 32;
        if (v17 == 9)
          v17 = 32;
        switch(v17)
        {
          case '\\':
            v19 = *v12;
            v20 = "\\\\ ";
            break;
          case ')':
            v19 = *v12;
            v20 = "\\) ";
            break;
          case '(':
            v19 = *v12;
            v20 = "\\( ";
            break;
          default:
            v21 = *v12;
            if (((char)v17 - 32) > 0x5E)
              fprintf(v21, "%02x");
            else
              fprintf(v21, "%c ");
            goto LABEL_26;
        }
        fputs(v20, v19);
LABEL_26:
        --v16;
      }
      while (v16);
    }
    result = fwrite(") do-src\n", 9uLL, 1uLL, *v12);
    v22 = next_do_src_line;
    *((_DWORD *)&do_src_offset + (next_do_src_line & 0xF)) = v4;
    next_do_src_line = v22 + 1;
  }
  return result;
}

void *PsMark(void *result, int a2, const unsigned __int8 *a3, int a4)
{
  uint64_t v4;
  int v5;
  size_t v6;
  int v7;

  v4 = pssource_mark_buffer;
  v5 = 2 * (((int)result - (int)a3) % pssourcewidth);
  *(_WORD *)(pssource_mark_buffer + v5) = 15677;
  if (a2 >= 2)
  {
    v6 = 2 * (a2 - 1);
    if (a4)
      v7 = 120;
    else
      v7 = 45;
    return memset((void *)(v4 + v5 + 2), v7, v6);
  }
  return result;
}

uint64_t PsHighlight(uint64_t result, const unsigned __int8 *a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  v4 = result - (_DWORD)a2 + 1;
  v5 = v4 / pssourcewidth * pssourcewidth;
  v6 = v4 % pssourcewidth;
  v7 = -1;
  while (*((_DWORD *)&do_src_offset + (((_BYTE)next_do_src_line + (_BYTE)v7) & 0xF)) != v5)
  {
    if (--v7 == -17)
      return result;
  }
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%d %d %d do-highlight%d\n", -v7, v6 - 1, a3, a4);
}

void InitDetectEncodingState(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = 0;
  v2 = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_OWORD *)(a1 + 196) = xmmword_1A59BA410;
  *(_OWORD *)(a1 + 240) = xmmword_1A59BA420;
  *(_DWORD *)(a1 + 256) = 1200;
  *(_DWORD *)(a1 + 236) = -1;
  *(_QWORD *)(a1 + 228) = -1;
  *(_QWORD *)(a1 + 220) = -1;
  *(_QWORD *)(a1 + 212) = 23;
  do
  {
    if ((kSpecialMask[kMapToEncoding[v1]] & 0x200) == 0)
    {
      v3 = a1 + 4 * v2++;
      *(_DWORD *)(v3 + 264) = v1;
    }
    ++v1;
  }
  while (v1 != 67);
  *(_DWORD *)(a1 + 260) = v2;
  bzero((void *)(a1 + 532), 0x334uLL);
}

uint64_t ApplyCompressedProb(unsigned __int8 *a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int *v18;
  _DWORD *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;

  if (a2 < 1)
    return 0;
  result = 0;
  v6 = (_DWORD *)(a4 + 1068);
  v7 = a4 + 532;
  v8 = -1;
  v9 = (int *)(a4 + 532);
  v10 = &a1[a2];
  do
  {
    v12 = *a1++;
    v11 = v12;
    if (!v12)
      break;
    v13 = v11 & 0xF;
    if ((v11 & 0xF) != 0)
    {
      v14 = v11 >> 4;
      v9 += v14;
      v6 += v14;
      v15 = ((unint64_t)v9 - v7) >> 2;
      v16 = v13;
      v17 = a1;
      v18 = v9;
      v19 = v6;
      do
      {
        v21 = *v17++;
        v20 = v21;
        v22 = v8 < v21;
        if (v8 <= v21)
          v8 = v20;
        if (v22)
          result = v15;
        else
          result = result;
        if (a3 >= 1)
        {
          v23 = 3 * a3 * v20 / 100;
          if (*v18 > v23)
            v23 = *v18;
          *v18 = v23;
          *v19 = 1;
        }
        LODWORD(v15) = v15 + 1;
        ++v19;
        ++v18;
        --v16;
      }
      while (v16);
      a1 += v13;
    }
    else
    {
      v13 = v11 & 0xF0;
    }
    v9 += v13;
    v6 += v13;
  }
  while (a1 < v10);
  return result;
}

uint64_t TopCompressedProb(const char *a1, int a2)
{
  uint64_t result;
  int v4;
  int v5;
  const char *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;

  if (a2 < 1)
    return 0;
  result = 0;
  v4 = 0;
  v5 = 0;
  v6 = &a1[a2];
  do
  {
    v8 = *(unsigned __int8 *)a1++;
    v7 = v8;
    if (!v8)
      break;
    v9 = v7 & 0xF;
    if ((v7 & 0xF) != 0)
    {
      v10 = (v7 >> 4) + v5;
      v11 = v7 & 0xF;
      v12 = a1;
      v13 = v10;
      do
      {
        v15 = *(unsigned __int8 *)v12++;
        v14 = v15;
        v16 = v4 < v15;
        if (v4 <= v15)
          v4 = v14;
        if (v16)
          result = v13;
        else
          result = result;
        ++v13;
        --v11;
      }
      while (v11);
      a1 += v9;
      v5 = v10 + v9;
    }
    else
    {
      v5 += v7 & 0xF0;
    }
  }
  while (a1 < v6);
  return result;
}

uint64_t HintBinaryLookup8(uint64_t a1, int a2, unint64_t *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  int v9;
  int v10;

  if (a2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = ((a2 + v3) >> 1);
      v5 = bswap64(*(_QWORD *)(a1 + 20 * (int)v4));
      v6 = bswap64(*a3);
      v7 = v5 >= v6;
      v8 = v5 > v6;
      v9 = !v7;
      v10 = v8 - v9;
      if (v10 < 0)
      {
        v3 = v4 + 1;
      }
      else
      {
        a2 = (a2 + v3) >> 1;
        if (!v10)
          return v4;
      }
    }
    while (v3 < a2);
  }
  return 0xFFFFFFFFLL;
}

uint64_t HintBinaryLookup4(uint64_t a1, int a2, unsigned int *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  int v9;
  int v10;

  if (a2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = ((a2 + v3) >> 1);
      v5 = bswap32(*(_DWORD *)(a1 + 20 * (int)v4));
      v6 = bswap32(*a3);
      v7 = v5 >= v6;
      v8 = v5 > v6;
      v9 = !v7;
      v10 = v8 - v9;
      if (v10 < 0)
      {
        v3 = v4 + 1;
      }
      else
      {
        a2 = (a2 + v3) >> 1;
        if (!v10)
          return v4;
      }
    }
    while (v3 < a2);
  }
  return 0xFFFFFFFFLL;
}

uint64_t ApplyTldHint(char *__s, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  if (*__s == 126)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  MakeChar4((uint64_t *)__p, v17);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 >= 0)
    v7 = (unsigned int *)v17;
  else
    v7 = (unsigned int *)v17[0];
  v8 = HintBinaryLookup4((uint64_t)kTLDHintProbs, 247, v7);
  if (v8 < 0)
  {
    v3 = 0;
  }
  else
  {
    v9 = ApplyCompressedProb(&kTLDHintProbs[20 * v8 + 4], 16, a2, a3);
    if (v9)
      v10 = v9;
    else
      v10 = 4;
    *(_DWORD *)(a3 + 48) = v10;
    v11 = *(_QWORD *)(a3 + 32);
    if (v11)
    {
      v12 = *(_DWORD *)(a3 + 40);
      v13 = (_DWORD *)(v11 + 304 * v12);
      *v13 = 0;
      v13[1] = v10;
      MEMORY[0x1A85B04D0](v13 + 2, __s);
      memcpy((void *)(*(_QWORD *)(a3 + 32) + 304 * v12 + 32), (const void *)(a3 + 532), 0x10CuLL);
      ++*(_DWORD *)(a3 + 40);
    }
    v3 = 1;
  }
  if (v18 < 0)
    operator delete(v17[0]);
  return v3;
}

void sub_1A57BFCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ApplyCharsetHint(char *__s, int a2, uint64_t a3)
{
  uint64_t v3;
  std::string *p_str;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v22;
  std::string __p;
  std::string __str;
  char v26;

  if (*__s == 126)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  MakeChar44((uint64_t *)&__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v8 = HintBinaryLookup8((uint64_t)kCharsetHintProbs, 438, (unint64_t *)p_str);
  if (v8 < 0)
  {
    v3 = 0;
    goto LABEL_62;
  }
  v9 = ApplyCompressedProb(&kCharsetHintProbs[20 * v8 + 8], 12, a2, a3);
  if (v9)
    v10 = v9;
  else
    v10 = 4;
  *(_DWORD *)(a3 + 48) = v10;
  if (*(_DWORD *)(a3 + 204) == 23 && *(_DWORD *)(a3 + 208) == 23)
  {
    switch(v10)
    {
      case 9u:
        v11 = 12;
        goto LABEL_20;
      case 0xAu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 572);
        goto LABEL_44;
      case 0xBu:
        v13 = 34;
        goto LABEL_41;
      case 0xCu:
        v11 = 9;
LABEL_20:
        *(_DWORD *)(a3 + 52) = v11;
        *(_DWORD *)(a3 + 568) += 120;
        v12 = (_DWORD *)(a3 + 580);
        goto LABEL_44;
      case 0xDu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 584);
        goto LABEL_44;
      case 0xEu:
        v14 = 28;
        goto LABEL_36;
      case 0xFu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 592);
        goto LABEL_44;
      case 0x10u:
        v15 = 29;
        goto LABEL_38;
      case 0x11u:
        v16 = 25;
        goto LABEL_32;
      case 0x12u:
        v12 = (_DWORD *)(a3 + 604);
        goto LABEL_44;
      case 0x14u:
        v17 = 23;
        goto LABEL_30;
      case 0x16u:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 620);
        goto LABEL_44;
      case 0x17u:
        v17 = 20;
LABEL_30:
        *(_DWORD *)(a3 + 52) = v17;
        *(_DWORD *)(a3 + 612) += 120;
        v12 = (_DWORD *)(a3 + 624);
        goto LABEL_44;
      case 0x19u:
        v16 = 17;
LABEL_32:
        *(_DWORD *)(a3 + 52) = v16;
        *(_DWORD *)(a3 + 632) += 120;
        v12 = (_DWORD *)(a3 + 600);
        goto LABEL_44;
      case 0x1Au:
        v12 = (_DWORD *)(a3 + 636);
        goto LABEL_44;
      case 0x1Bu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 640);
        goto LABEL_44;
      case 0x1Cu:
        v14 = 14;
LABEL_36:
        *(_DWORD *)(a3 + 52) = v14;
        *(_DWORD *)(a3 + 588) += 120;
        v12 = (_DWORD *)(a3 + 644);
        goto LABEL_44;
      case 0x1Du:
        v15 = 16;
LABEL_38:
        *(_DWORD *)(a3 + 52) = v15;
        *(_DWORD *)(a3 + 648) += 120;
        v12 = (_DWORD *)(a3 + 596);
        goto LABEL_44;
      case 0x1Eu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 652);
        goto LABEL_44;
      case 0x22u:
        v13 = 11;
LABEL_41:
        *(_DWORD *)(a3 + 52) = v13;
        *(_DWORD *)(a3 + 668) += 120;
        v12 = (_DWORD *)(a3 + 576);
        goto LABEL_44;
      case 0x26u:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 684);
        goto LABEL_44;
      case 0x2Bu:
        *(_DWORD *)(a3 + 52) = 0;
        v12 = (_DWORD *)(a3 + 704);
LABEL_44:
        *v12 += 120;
        break;
      default:
        break;
    }
  }
  v18 = *(_QWORD *)(a3 + 32);
  if (v18)
  {
    v19 = *(_DWORD *)(a3 + 40);
    v20 = (_DWORD *)(v18 + 304 * v19);
    *v20 = 0;
    v20[1] = v10;
    MEMORY[0x1A85B04D0](v20 + 2, __s);
    memcpy((void *)(*(_QWORD *)(a3 + 32) + 304 * v19 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  if (v10 > 4 || ((1 << v10) & 0x16) == 0)
    *(_DWORD *)(a3 + 768) -= 2400;
  std::string::basic_string(&__p, &__str, 0, 4uLL, (std::allocator<char> *)&v26);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1919251317)
      goto LABEL_61;
LABEL_59:
    *(_DWORD *)(a3 + 764) += 7200;
    goto LABEL_61;
  }
  if (__p.__r_.__value_.__l.__size_ != 4)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v22 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 == 1919251317)
    goto LABEL_59;
LABEL_61:
  v3 = 1;
LABEL_62:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1A57C0064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ApplyEncodingHint(int a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  int v10;
  _QWORD *v11;

  v5 = 0;
  v6 = a1 ^ (a1 >> 31);
  while (kMapToEncoding[v5] != v6)
  {
    if (++v5 == 67)
    {
      v5 = -1;
      break;
    }
  }
  v7 = a3 + 4 * v5;
  if (a1 >= 0)
    v8 = 6 * a2;
  else
    v8 = -6 * a2;
  *(_DWORD *)(v7 + 532) += v8;
  if (*(_QWORD *)(a3 + 32))
  {
    v9 = MyEncodingName(v6);
    v10 = *(_DWORD *)(a3 + 40);
    v11 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 304 * v10);
    *v11 = 0xFFFFFFFF00000000;
    MEMORY[0x1A85B04D0](v11 + 1, v9);
    memcpy((void *)(*(_QWORD *)(a3 + 32) + 304 * v10 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  return 1;
}

uint64_t ApplyUILanguageHint(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  char *v6;
  char v7;
  unint64_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  void **v13;
  int v14;
  _DWORD *v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  if (a1 == 26)
    return 0;
  v6 = (char *)LanguageName(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  MakeChar8((uint64_t *)__p, v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v7 = v20;
  if (v20 >= 0)
    v8 = (unint64_t *)v19;
  else
    v8 = (unint64_t *)v19[0];
  v9 = HintBinaryLookup8((uint64_t)kLangHintProbs, 151, v8);
  if (v9 < 0)
  {
    v3 = 0;
    if ((v7 & 0x80) == 0)
      return v3;
    goto LABEL_19;
  }
  v10 = ApplyCompressedProb(&kLangHintProbs[20 * v9 + 8], 12, a2, a3);
  if (v10)
    v11 = v10;
  else
    v11 = 4;
  *(_DWORD *)(a3 + 48) = v11;
  v12 = *(_QWORD *)(a3 + 32);
  if (!v12)
  {
    v3 = 1;
    if ((v20 & 0x80) == 0)
      return v3;
    goto LABEL_19;
  }
  if (v20 >= 0)
    v13 = v19;
  else
    v13 = (void **)v19[0];
  v14 = *(_DWORD *)(a3 + 40);
  v15 = (_DWORD *)(v12 + 304 * v14);
  *v15 = 0;
  v15[1] = v11;
  MEMORY[0x1A85B04D0](v15 + 2, v13);
  memcpy((void *)(*(_QWORD *)(a3 + 32) + 304 * v14 + 32), (const void *)(a3 + 532), 0x10CuLL);
  ++*(_DWORD *)(a3 + 40);
  v3 = 1;
  if (v20 < 0)
LABEL_19:
    operator delete(v19[0]);
  return v3;
}

void sub_1A57C02B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ApplyDefaultHint(unsigned int a1, uint64_t a2)
{
  uint64_t i;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  for (i = 0; i != 67; ++i)
  {
    v4 = 3 * kDefaultProb[i];
    if ((kSpecialMask[kMapToEncoding[i]] & 1) != 0)
      v4 = 0;
    *(_DWORD *)(a2 + 532 + 4 * i) = v4;
  }
  if (a1 < 2)
    *(_DWORD *)(a2 + 768) = *(_DWORD *)(a2 + 540) - 60;
  if (FLAGS_demo_nodefault)
  {
    *(_OWORD *)(a2 + 784) = 0u;
    *(_OWORD *)(a2 + 756) = 0u;
    *(_OWORD *)(a2 + 772) = 0u;
    *(_OWORD *)(a2 + 724) = 0u;
    *(_OWORD *)(a2 + 740) = 0u;
    *(_OWORD *)(a2 + 692) = 0u;
    *(_OWORD *)(a2 + 708) = 0u;
    *(_OWORD *)(a2 + 660) = 0u;
    *(_OWORD *)(a2 + 676) = 0u;
    *(_OWORD *)(a2 + 628) = 0u;
    *(_OWORD *)(a2 + 644) = 0u;
    *(_OWORD *)(a2 + 596) = 0u;
    *(_OWORD *)(a2 + 612) = 0u;
    *(_OWORD *)(a2 + 564) = 0u;
    *(_OWORD *)(a2 + 580) = 0u;
    *(_OWORD *)(a2 + 532) = 0u;
    *(_OWORD *)(a2 + 548) = 0u;
  }
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v7 = (_QWORD *)(v5 + 304 * v6);
    *v7 = 0xFFFFFFFF00000000;
    MEMORY[0x1A85B04D0](v7 + 1, "Default");
    memcpy((void *)(*(_QWORD *)(a2 + 32) + 304 * v6 + 32), (const void *)(a2 + 532), 0x10CuLL);
    ++*(_DWORD *)(a2 + 40);
  }
  return 1;
}

const char *MyMemrchr(const char *a1, unsigned __int8 a2, uint64_t a3)
{
  const char *v3;
  int v4;

  v3 = &a1[a3 - 1];
  while (v3 >= a1)
  {
    v4 = *(unsigned __int8 *)v3--;
    if (v4 == a2)
      return v3 + 1;
  }
  return 0;
}

uint64_t ExtractTLD(char *a1, char *__dst, int a3, const char **a4, int *a5)
{
  size_t v10;
  uint64_t result;
  size_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  const char *v18;
  int64_t v19;
  int v20;
  int64_t v21;
  int v22;
  int v23;

  v10 = a3;
  result = (uint64_t)strncpy(__dst, "~", a3);
  v12 = v10 - 1;
  __dst[v10 - 1] = 0;
  *a4 = 0;
  *a5 = 0;
  if (a1)
  {
    result = strlen(a1);
    v13 = result;
    if ((_DWORD)result)
    {
      if ((int)result < 11)
      {
        result = (uint64_t)strncpy(__dst, a1, v10);
        __dst[v12] = 0;
      }
      else
      {
        result = (uint64_t)strchr(a1, 47);
        if (result)
        {
          v14 = result;
          if ((char *)result != a1 && *(_BYTE *)(result - 1) == 58 && *(_BYTE *)(result + 1) == 47)
          {
            v15 = result - (_QWORD)a1;
            if ((char *)result == a1)
            {
LABEL_11:
              v16 = (const char *)(result + 2);
              v17 = strchr((char *)(result + 2), 47);
              v18 = &a1[v13];
              if (v17)
                v18 = v17;
              v19 = v18 - v16;
              result = (uint64_t)memchr((void *)(v14 + 2), 58, v18 - v16);
              if (result)
                v19 = result - (_QWORD)v16;
              v20 = -1;
              v21 = v19;
              while (v21 + 2 >= 3)
              {
                v22 = *(unsigned __int8 *)(v14 + v21-- + 1);
                ++v20;
                if (v22 == 46)
                {
                  if (v20 >= a3)
                    v23 = v12;
                  else
                    v23 = v20;
                  result = (uint64_t)memcpy(__dst, (const void *)(v14 + v21 + 3), v23);
                  __dst[v23] = 0;
                  break;
                }
              }
              *a4 = v16;
              *a5 = v19;
            }
            else
            {
              while (a1[v15 - 1] != 46)
              {
                if (!--v15)
                  goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *ApplyHints(char *a1, char *a2, char *a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  int v31;
  char *v32;
  char __dst[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  ExtractTLD(a1, __dst, 16, (const char **)&v32, &v31);
  *(_QWORD *)(a7 + 48) = 4;
  if (a2)
  {
    LODWORD(v15) = 4;
    if (*a2 == 126)
    {
      LODWORD(a2) = 0;
    }
    else
    {
      *(_DWORD *)(a7 + 52) = 4;
      LODWORD(a2) = ApplyCharsetHint(a2, 100, a7);
      v15 = *(int *)(a7 + 48);
      *(_DWORD *)(a7 + 204) = kMapToEncoding[v15];
      if ((_DWORD)v15 == 4 || (_DWORD)v15 == 1)
        *(_BYTE *)(a7 + 64) = 1;
    }
  }
  else
  {
    LODWORD(v15) = 4;
  }
  if (a3)
  {
    if (*a3 != 126)
    {
      *(_DWORD *)(a7 + 52) = v15;
      LODWORD(a2) = ApplyCharsetHint(a3, 100, a7) + (_DWORD)a2;
      v16 = *(int *)(a7 + 48);
      LODWORD(v15) = *(_DWORD *)(a7 + 48);
      *(_DWORD *)(a7 + 208) = kMapToEncoding[v16];
      if ((_DWORD)v16 == 4 || (_DWORD)v15 == 1)
        *(_BYTE *)(a7 + 64) = 1;
    }
  }
  if (a4 != 23)
  {
    *(_DWORD *)(a7 + 52) = v15;
    ApplyEncodingHint(a4, 50, a7);
    LODWORD(a2) = (_DWORD)a2 + 1;
  }
  if (a5 != 26)
  {
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    LODWORD(a2) = ApplyUILanguageHint(a5, 50, a7) + (_DWORD)a2;
  }
  if (a1)
  {
    *(_DWORD *)(a7 + 200) = CompactEncDet::TopEncodingOfTLDHint((CompactEncDet *)__dst, v14);
    if ((_DWORD)a2 == 1)
    {
      if (*(_DWORD *)__dst != 7171939)
      {
        *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
        ApplyTldHint(__dst, 50, a7);
        v19 = *(_DWORD *)(a7 + 48);
        if (v19 == 4 || v19 == 1)
          *(_BYTE *)(a7 + 64) = 1;
      }
      goto LABEL_31;
    }
    if ((_DWORD)a2)
      goto LABEL_31;
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    v17 = ApplyTldHint(__dst, 100, a7);
    LODWORD(a2) = v17;
    v18 = *(_DWORD *)(a7 + 48);
    if (v18 == 4 || v18 == 1)
      *(_BYTE *)(a7 + 64) = 1;
    if (!(*(unsigned __int16 *)__dst ^ 0x7568 | __dst[2]))
    {
      *(_BYTE *)(a7 + 64) = 1;
      if (v17)
        goto LABEL_31;
      goto LABEL_25;
    }
  }
  if (!(_DWORD)a2)
  {
LABEL_25:
    *(_BYTE *)(a7 + 64) = 1;
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    ApplyDefaultHint(a6, a7);
  }
LABEL_31:
  *(_DWORD *)(a7 + 628) = *(_DWORD *)(a7 + 556) - 60;
  v20 = *(_DWORD *)(a7 + 544) - 60;
  *(_DWORD *)(a7 + 608) = v20;
  *(_DWORD *)(a7 + 660) = v20;
  v21 = *(_DWORD *)(a7 + 564);
  *(_DWORD *)(a7 + 564) = v21 - 60;
  *(_DWORD *)(a7 + 672) = v21 - 120;
  v22 = *(_QWORD *)(a7 + 32);
  if (v22)
  {
    v23 = *(_DWORD *)(a7 + 40);
    v24 = (_QWORD *)(v22 + 304 * v23);
    *v24 = 0xFFFFFFFF00000000;
    MEMORY[0x1A85B04D0](v24 + 1, "Endhints");
    memcpy((void *)(*(_QWORD *)(a7 + 32) + 304 * v23 + 32), (const void *)(a7 + 532), 0x10CuLL);
    v25 = *(int *)(a7 + 40) + 1;
    *(_DWORD *)(a7 + 40) = v25;
    if (FLAGS_enc_detect_detail2)
    {
      v26 = watch1_rankedenc;
      if ((watch1_rankedenc & 0x80000000) == 0)
      {
        v25 *= 304;
        v27 = (_DWORD *)(*(_QWORD *)(a7 + 32) + v25);
        *v27 = 0;
        v27[1] = v26;
        MEMORY[0x1A85B04D0](v27 + 2, "");
        memcpy((void *)(*(_QWORD *)(a7 + 32) + v25 + 32), (const void *)(a7 + 532), 0x10CuLL);
        LODWORD(v25) = *(_DWORD *)(a7 + 40) + 1;
        *(_DWORD *)(a7 + 40) = v25;
      }
      v28 = watch2_rankedenc;
      if ((watch2_rankedenc & 0x80000000) == 0)
      {
        v29 = (_DWORD *)(*(_QWORD *)(a7 + 32) + 304 * (int)v25);
        *v29 = 0;
        v29[1] = v28;
        MEMORY[0x1A85B04D0](v29 + 2, "");
        memcpy((void *)(*(_QWORD *)(a7 + 32) + 304 * (int)v25 + 32), (const void *)(a7 + 532), 0x10CuLL);
        ++*(_DWORD *)(a7 + 40);
      }
    }
  }
  if (*(_DWORD *)(a7 + 48) == *(_DWORD *)(a7 + 52))
    *(_DWORD *)(a7 + 52) = 0;
  if (FLAGS_force127)
  {
    *(_BYTE *)(a7 + 65) = 1;
    if (FLAGS_enc_detect_source)
      PsHighlight(0, *(const unsigned __int8 **)a7, 0, 2);
  }
  if (FLAGS_counts)
  {
    if (*(_BYTE *)(a7 + 64))
      ++looking_used;
    if (*(_BYTE *)(a7 + 65))
      ++doing_used;
  }
  return memcpy((void *)(a7 + 800), (const void *)(a7 + 532), 0x10CuLL);
}

uint64_t CompactEncDet::TopEncodingOfTLDHint(CompactEncDet *this, const char *a2)
{
  int v2;
  void *v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  MakeChar4((uint64_t *)__p, v10);
  if (v9 < 0)
    operator delete(__p[0]);
  v2 = v11;
  v3 = (void *)v10[0];
  if (v11 >= 0)
    v4 = (unsigned int *)v10;
  else
    v4 = (unsigned int *)v10[0];
  v5 = HintBinaryLookup4((uint64_t)kTLDHintProbs, 247, v4);
  if (v5 < 0)
  {
    v6 = 23;
    if ((v2 & 0x80000000) == 0)
      return v6;
    goto LABEL_8;
  }
  v6 = kMapToEncoding[(int)TopCompressedProb((const char *)&kTLDHintProbs[20 * v5 + 4], 16)];
  if (v2 < 0)
LABEL_8:
    operator delete(v3);
  return v6;
}

void sub_1A57C0AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *InitialBytesBoost(unsigned __int8 *result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  _DWORD *v18;
  int v19;
  BOOL v21;
  BOOL v23;
  char __str[16];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 < 4)
    return result;
  v4 = *result;
  v5 = result[1];
  v6 = v5 | ((_DWORD)v4 << 8);
  v7 = result[3] | (result[2] << 8);
  v8 = (result[2] << 8) | (v6 << 16);
  if (v8 != -272908544)
  {
    v11 = _byteswap_ushort(*((_WORD *)result + 1)) | ((unsigned __int16)v6 << 16);
    if (v11 == -131072)
    {
      *(_DWORD *)(a3 + 212) = 60;
      v9 = (_DWORD *)(a3 + 760);
      v10 = 57;
      goto LABEL_8;
    }
    if (v11 == 65279)
    {
      *(_DWORD *)(a3 + 212) = 59;
      v9 = (_DWORD *)(a3 + 756);
      v10 = 56;
      goto LABEL_8;
    }
    if (v6 == 65534)
    {
      *(_DWORD *)(a3 + 212) = 58;
      v9 = (_DWORD *)(a3 + 688);
      v10 = 39;
      goto LABEL_31;
    }
    if (v6 == 65279)
    {
      *(_DWORD *)(a3 + 212) = 57;
      v9 = (_DWORD *)(a3 + 680);
      v10 = 37;
LABEL_31:
      v12 = 1800;
      goto LABEL_9;
    }
    if (!v8 && kIsPrintableAscii[result[3]])
    {
      *(_DWORD *)(a3 + 756) += 600;
      v9 = (_DWORD *)(a3 + 760);
      v10 = 56;
LABEL_51:
      v12 = -600;
      goto LABEL_9;
    }
    if ((v11 & 0xFFFFFF) == 0 && kIsPrintableAscii[v4])
    {
      *(_DWORD *)(a3 + 760) += 600;
      v9 = (_DWORD *)(a3 + 756);
      v10 = 57;
      goto LABEL_51;
    }
    if (!*result && kIsPrintableAscii[v5])
    {
      v9 = (_DWORD *)(a3 + 680);
      v10 = 37;
LABEL_47:
      v12 = 600;
      goto LABEL_9;
    }
    if (!result[1] && kIsPrintableAscii[v4])
    {
      v9 = (_DWORD *)(a3 + 688);
      v10 = 39;
      goto LABEL_47;
    }
    if (v11 == -1 || !v11)
    {
      v12 = -600;
      *(int32x2_t *)(a3 + 756) = vadd_s32(*(int32x2_t *)(a3 + 756), vdup_n_s32(0xFFFFFDA8));
      *(_DWORD *)(a3 + 680) -= 600;
      v9 = (_DWORD *)(a3 + 688);
      v10 = -1;
      goto LABEL_9;
    }
    if (v6 == 0xFFFF || !v6)
    {
      *(_DWORD *)(a3 + 680) -= 600;
      v9 = (_DWORD *)(a3 + 688);
      v10 = -1;
      goto LABEL_51;
    }
    if (v8 == -2556160
      || v11 == 1347093252
      || v11 == 1195984440
      || v11 == -1991225785
      || v8 == 529205248
      || v6 == 30938
      || v11 == 626017350
      || (_byteswap_ushort(*((_WORD *)result + 1)) & 0xFF1F | ((unsigned __int16)v6 << 16)) == 0x63535700
      || (_byteswap_ushort(*((_WORD *)result + 1)) & 0xFF1F | ((unsigned __int16)v6 << 16)) == 0x66535700)
    {
      v9 = (_DWORD *)(a3 + 764);
      v10 = -1;
LABEL_62:
      v12 = 7200;
      goto LABEL_9;
    }
    v10 = -1;
    if (v11 <= 1213681695)
    {
      if (v11 > 943870034)
      {
        if (v11 == 943870035)
          goto LABEL_76;
        v19 = 1128485700;
      }
      else
      {
        if (v11 == 23487344)
          goto LABEL_76;
        v19 = 704662861;
      }
    }
    else
    {
      if (v11 > 1346655070)
      {
        if (v11 != 1346655071)
        {
          if (v11 != 1397312848)
          {
            v19 = 2135247942;
            goto LABEL_75;
          }
LABEL_76:
          v9 = (_DWORD *)(a3 + 764);
          goto LABEL_62;
        }
        if (a2 >= 0xE
          && *(_QWORD *)result == 0x535245565F534450
          && *(_QWORD *)(result + 6) == 0x44495F4E4F495352)
        {
          goto LABEL_76;
        }
LABEL_99:
        v9 = (_DWORD *)(a3 + 764);
        v12 = 2400;
        goto LABEL_9;
      }
      if (v11 == 1213681696)
      {
        if (a2 >= 0x13)
        {
          v21 = *(_QWORD *)result == 0x75636F442E505748 && *((_QWORD *)result + 1) == 0x6C69462E746E656DLL;
          if (v21 && *(_QWORD *)(result + 11) == 0x562E656C69462E74)
            goto LABEL_76;
          v23 = *(_QWORD *)result == 0x75636F4420505748 && *((_QWORD *)result + 1) == 0x6C694620746E656DLL;
          if (v23 && *(_QWORD *)(result + 11) == 0x5620656C69462074)
            goto LABEL_76;
        }
        goto LABEL_99;
      }
      v19 = 1296891946;
    }
LABEL_75:
    if (v11 != v19)
      goto LABEL_10;
    goto LABEL_76;
  }
  *(_DWORD *)(a3 + 212) = 22;
  *(_DWORD *)(a3 + 540) += 1200;
  v9 = (_DWORD *)(a3 + 768);
  v10 = 2;
LABEL_8:
  v12 = 1200;
LABEL_9:
  *v9 += v12;
LABEL_10:
  v13 = *(_DWORD *)(a3 + 680);
  v14 = v13 > 0 || *(int *)(a3 + 688) >= 1;
  v15 = *(_DWORD *)(a3 + 756);
  if (v15 <= 0 && *(int *)(a3 + 760) < 1)
  {
    v16 = 0;
    if (v14)
      goto LABEL_17;
    goto LABEL_16;
  }
  v16 = 1;
  if (!v14)
  {
LABEL_16:
    *(_DWORD *)(a3 + 680) = v13 - 4800;
    *(_DWORD *)(a3 + 688) -= 9600;
  }
LABEL_17:
  if ((v16 & 1) == 0)
  {
    *(_DWORD *)(a3 + 756) = v15 - 4800;
    *(_DWORD *)(a3 + 760) -= 4800;
  }
  if (!FLAGS_ced_allow_utf8utf8)
    *(_DWORD *)(a3 + 768) -= 4800;
  *(_DWORD *)(a3 + 796) -= 4800;
  if (*(_QWORD *)(a3 + 32))
  {
    snprintf(__str, 0x10uLL, "%04x%04x", v6, v7);
    v17 = *(_DWORD *)(a3 + 40);
    v18 = (_DWORD *)(*(_QWORD *)(a3 + 32) + 304 * v17);
    *v18 = 0;
    v18[1] = v10;
    MEMORY[0x1A85B04D0](v18 + 2, __str);
    result = (unsigned __int8 *)memcpy((void *)(*(_QWORD *)(a3 + 32) + 304 * v17 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  return result;
}

uint64_t IntCompare(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;

  if (*a1 <= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 < *a2)
    return 1;
  else
    return v2;
}

BOOL Base64Char(int a1)
{
  _BOOL4 v1;

  v1 = ((a1 & 0xDF) - 65) < 0x1Au || (((_BYTE)a1 - 43) & 0xFB) == 0;
  return (a1 - 48) < 0xA || v1;
}

uint64_t Base64ScanLen(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *v3;
  int v4;

  if (a2 - a1 >= 4 && *a1 == 43 && a1[1] == 43 && a1[2] == 43)
    return 81;
  v3 = a1;
  do
  {
    if (v3 >= a2)
      break;
    v4 = *v3++;
  }
  while ((kBase64Value[v4] & 0x80000000) == 0);
  return (~(_DWORD)a1 + (_DWORD)v3);
}

BOOL GoodUnicodeFromBase64(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v23;
  uint64_t v24;

  v2 = (_DWORD)a2 - (_DWORD)a1;
  if (a2 <= a1)
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = a2 - a1;
    v8 = a1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = v10 - 97;
      v12 = v10 - 65;
      if (v10 == 48)
        v13 = v3 + 1;
      else
        v13 = v3;
      v14 = v9 == 43;
      if (v9 == 43)
        v15 = v6 + 1;
      else
        v15 = v6;
      if (v14)
        v13 = v3;
      v16 = v12 > 0x19;
      if (v12 > 0x19)
      {
        v17 = v4;
      }
      else
      {
        v15 = v6;
        v17 = v4 + 1;
      }
      if (!v16)
        v13 = v3;
      if (v11 <= 0x19)
        ++v5;
      else
        v6 = v15;
      if (v11 > 0x19)
      {
        v4 = v17;
        v3 = v13;
      }
      --v7;
    }
    while (v7);
  }
  v18 = v2 >> 4;
  if (v6 > (v2 >> 4) + 1 || v5 <= v18 || v4 <= v18 || v3 <= v2 >> 5)
    return 0;
  v23 = v2 & 7;
  v24 = a1[v2 - 1];
  if (v23 != 6)
    return v23 != 3 || (kBase64Value[v24] & 3) == 0;
  return (kBase64Value[v24] & 0xF) == 0;
}

uint64_t UTF7BoostWhack(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const unsigned __int8 *v6;
  int v8;

  v3 = *(int *)(result + 4 * a2 + 1544);
  if ((int)v3 >= *(_DWORD *)(result + 88))
  {
    v4 = result;
    ++*(_DWORD *)(result + 84);
    if (a3 != 45)
    {
      if ((a3 - 48) >= 0xA
        && ((a3 & 0xDF) - 65) >= 0x1Au
        && (((_BYTE)a3 - 43) & 0xFB) != 0)
      {
        goto LABEL_6;
      }
      v6 = (const unsigned __int8 *)(*(_QWORD *)result + v3 + 1);
      result = Base64ScanLen(v6, *(const unsigned __int8 **)(result + 8));
      if ((_DWORD)result != 3 && (_DWORD)result != 6)
      {
        v8 = result;
        if ((result & 7) != 7 && ((1 << (result & 7)) & 0x49) != 0)
        {
          result = GoodUnicodeFromBase64(v6, &v6[(int)result]);
          v5 = *(_DWORD *)(v4 + 708);
          if ((_DWORD)result)
          {
            *(_DWORD *)(v4 + 708) = v5 + 600;
            *(_DWORD *)(v4 + 88) = v3 + v8 + 1;
            return result;
          }
          goto LABEL_17;
        }
LABEL_6:
        v5 = *(_DWORD *)(v4 + 708);
LABEL_17:
        *(_DWORD *)(v4 + 708) = v5 - 600;
      }
    }
  }
  return result;
}

uint64_t HzBoostWhack(uint64_t result, int a2)
{
  int v2;

  v2 = 600;
  if (a2 > 124)
  {
    if (a2 == 125)
      goto LABEL_9;
    if (a2 != 126)
    {
LABEL_8:
      v2 = -600;
      goto LABEL_9;
    }
  }
  else if (a2 != 10)
  {
    if (a2 != 123)
      goto LABEL_8;
LABEL_9:
    *(_DWORD *)(result + 692) += v2;
  }
  return result;
}

_DWORD *BinaryBoostWhack(_DWORD *result, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = 1 << ((a2 >> 6) & 2 | (a3 >> 7));
  v4 = 1 << ((a2 >> 3) & 0x1C | (a3 >> 6));
  v5 = result[19];
  if ((v5 & v3) == 0)
  {
    result[19] = v5 | v3;
    v6 = result[17] + 1;
    result[17] = v6;
    if (v6 == 4)
      result[191] += 1200;
  }
  v7 = result[20];
  if ((v7 & v4) == 0)
  {
    result[20] = v7 | v4;
    v8 = result[18];
    result[18] = v8 + 1;
    if (v8 >= 10)
      result[191] += 2400;
  }
  return result;
}

uint64_t UTF1632BoostWhack(uint64_t result, char a2, int a3)
{
  int v3;
  _DWORD *v4;

  if (a3)
  {
    v3 = -600;
    *(int32x2_t *)(result + 756) = vadd_s32(*(int32x2_t *)(result + 756), vdup_n_s32(0xFFFFFDA8));
    *(_DWORD *)(result + 680) -= 600;
    v4 = (_DWORD *)(result + 688);
  }
  else
  {
    *(_DWORD *)(result + 680) -= 600;
    *(_DWORD *)(result + 688) -= 600;
    if ((a2 & 3u) - 1 >= 2)
    {
      if ((a2 & 3) != 0)
        return result;
      *(_DWORD *)(result + 760) -= 600;
      v4 = (_DWORD *)(result + 756);
    }
    else
    {
      *(_DWORD *)(result + 756) -= 600;
      v4 = (_DWORD *)(result + 760);
    }
    v3 = 60;
  }
  *v4 += v3;
  return result;
}

uint64_t UTF16MakeEven(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4 * a2 + 1736) &= ~1u;
  return result;
}

BOOL ConsecutivePair(uint64_t a1, int a2)
{
  return a2 >= 1
      && *(_DWORD *)(a1 + 1736 + 4 * a2) == *(_DWORD *)(a1 + 1736 + 4 * (a2 - 1)) + 2;
}

uint64_t CheckUTF8Seq(_DWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char *v10;
  _DWORD *v11;
  int16x4_t v12;
  int16x4_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v2 = (int)a1[335];
  v3 = (int)a1[337];
  if ((int)v2 >= (int)v3)
  {
    v4 = 0;
    goto LABEL_12;
  }
  v4 = 0;
  v5 = 2 * v2;
  do
  {
    v6 = (char *)a1 + v5;
    v7 = v6[1448];
    v8 = v6[1449];
    if (v2 <= 0)
    {
      v9 = a1[23];
LABEL_7:
      v10 = &kMiniUTF8Count[16 * v9];
      v9 = 0;
      v11 = &a1[v10[2]];
      ++v11[24];
      a1[23] = 0;
      goto LABEL_8;
    }
    v9 = a1[23];
    if (a1[v2 + 434] != a1[(v2 - 1) + 434] + 2)
      goto LABEL_7;
LABEL_8:
    v12 = vuzp1_s16((int16x4_t)vceq_s32(vdup_n_s32(v7), (int32x2_t)0xDF000000C9), (int16x4_t)0xDF000000C9);
    v13 = (int16x4_t)vand_s8((int8x8_t)vzip1_s16(v12, vdup_lane_s16(v12, 1)), vand_s8((int8x8_t)vceq_s16(vdup_n_s16(v8), (int16x4_t)0xAB0093009200AELL), (int8x8_t)0x8000400020001));
    v13.i32[0] = vaddv_s16(v13) & 0xF;
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v7 >> 4;
    v16 = kMiniUTF8Count[16 * v9 + v15];
    ++a1[v16 + 24];
    v17 = kMiniUTF8State[16 * a1[23] + v15];
    a1[23] = v17;
    v18 = v8 >> 4;
    v19 = kMiniUTF8Count[16 * v17 + v18];
    v4 += v14.i32[0];
    ++a1[v19 + 24];
    a1[23] = kMiniUTF8State[16 * a1[23] + v18];
    ++v2;
    v5 += 2;
  }
  while (v3 != v2);
  if (v4 > 0)
  {
    a1[134] += 120 * v4;
    a1[137] += 120 * v4;
  }
LABEL_12:
  v20 = a1[27];
  v21 = a1[28];
  v23 = a1[25];
  v22 = a1[26];
  v24 = (120 * (4 * v21 + 2 * v22 + 3 * (v20 - v4))) >> a2;
  v25 = v24 + a1[135];
  v26 = a1[192];
  v27 = v20 + v22;
  v28 = a1[29];
  a1[28] = 0;
  a1[29] = v27 + v21 + v28;
  v29 = (120 * v23) >> a2;
  a1[135] = v25 - v29;
  a1[192] = v24 + v26 - v29;
  *((_QWORD *)a1 + 13) = 0;
  a1[25] = 0;
  return (v24 - v29);
}

uint64_t CheckUTF8UTF8Seq(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *(int *)(a1 + 1340);
  v3 = *(int *)(a1 + 1348);
  if (2 * (int)v2 < 2 * (int)v3)
  {
    v4 = a1 + 2 * v3 + 1448;
    v5 = a1 + 2 * v2 + 1448;
    do
    {
      v6 = *(_DWORD *)(a1 + 120);
      if ((int)v2 < 1
        || *(_DWORD *)(a1 + 1736 + 4 * v2) != *(_DWORD *)(a1 + 1736 + 4 * (v2 - 1)) + 2)
      {
        *(_DWORD *)(a1 + 124) = 0;
        v7 = a1 + 4 * kMiniUTF8UTF8Count[16 * v6 + 2];
        ++*(_DWORD *)(v7 + 128);
        v6 = kMiniUTF8UTF8State[16 * v6 + 2];
      }
      v8 = *(int *)(a1 + 124);
      if (v5 + v8 + 1 < v4)
      {
        v9 = *(unsigned __int8 *)(v5 + v8);
        v10 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        v11 = v10 | 4;
        if (v9 != 226)
          v11 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        v12 = (v9 - 194) > 9 || ((1 << (v9 + 62)) & 0x219) == 0;
        v13 = v10 | 8;
        if (v12)
          v13 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        if ((v9 & 0xF0) == 0xC0)
          v14 = v13;
        else
          v14 = v11;
        v15 = v10 | 0xC;
        if (v9 == 195)
          v16 = v15;
        else
          v16 = v14;
        *(_DWORD *)(a1 + 124) = v8 ^ kMiniUTF8UTF8Odd[16 * v6 + v16];
        v17 = a1 + 4 * kMiniUTF8UTF8Count[16 * v6 + v16];
        ++*(_DWORD *)(v17 + 128);
        *(_DWORD *)(a1 + 120) = kMiniUTF8UTF8State[16 * v6 + v16];
        LODWORD(v2) = v2 + 1;
      }
      v5 += 2;
    }
    while (v5 < v4);
  }
  v18 = *(_DWORD *)(a1 + 148);
  v19 = *(_DWORD *)(a1 + 140) + *(_DWORD *)(a1 + 136) + *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 768) += (240 * v19) >> a2;
  *(_DWORD *)(a1 + 148) = v19 + v18;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  return ((240 * v19) >> a2);
}

_DWORD *CheckIso2022ActiveSeq(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *i;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v13;
  int v14;

  v1 = 2 * (int)result[335];
  v2 = (int)result[337];
  if ((int)v1 < 2 * (int)v2)
  {
    v3 = (unint64_t)result + 2 * v2 + 1448;
    for (i = (unsigned __int8 *)result + v1 + 1448; (unint64_t)i < v3; i += 2)
    {
      v5 = *i;
      switch(v5)
      {
        case 0xEu:
          result[154] -= 600;
          if (!result[38])
            goto LABEL_22;
          break;
        case 0xFu:
          result[154] -= 600;
          v8 = result[38];
          if (v8)
          {
            if (v8 == 3)
            {
              v9 = 60;
            }
            else
            {
              if (v8 != 2)
                goto LABEL_31;
              v9 = -60;
            }
            result[178] += v9;
            result[175] += v9;
            goto LABEL_31;
          }
LABEL_22:
          result[178] -= 2400;
          v7 = result[175] - 2400;
LABEL_23:
          result[175] = v7;
          result[38] = 1;
          continue;
        case 0x1Bu:
          v6 = i[1];
          if (v6 == 40)
          {
            v13 = result[38];
            if (v13 == 3)
            {
              v14 = 60;
LABEL_30:
              result[154] += v14;
            }
            else if (v13 == 2)
            {
              v14 = -60;
              goto LABEL_30;
            }
LABEL_31:
            result[38] = 2;
            continue;
          }
          if (v6 != 36)
          {
            result[154] -= 600;
            result[178] -= 600;
            v7 = result[175] - 600;
            goto LABEL_23;
          }
          break;
        default:
          if ((char)v5 <= 31)
          {
            v10 = v5 > 0xD;
            v11 = (1 << v5) & 0x3600;
            if (v10 || v11 == 0)
            {
              result[154] -= 600;
              result[178] -= 600;
              result[175] -= 600;
            }
          }
          continue;
      }
      result[38] = 3;
    }
  }
  if (!result[38])
  {
    result[178] &= (int)result[178] >> 31;
    result[175] &= (int)result[175] >> 31;
    result[154] &= (int)result[154] >> 31;
  }
  return result;
}

_DWORD *CheckHzActiveSeq(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE *i;
  int v5;
  int v6;
  int v7;

  v1 = 2 * (int)result[334];
  v2 = (int)result[336];
  if ((int)v1 < 2 * (int)v2)
  {
    v3 = (unint64_t)result + 2 * v2 + 1352;
    for (i = (char *)result + v1 + 1352; (unint64_t)i < v3; i += 2)
    {
      if (*i == 126)
      {
        v5 = i[1];
        if (v5 == 123)
        {
          result[39] = 3;
          if (*i != 126)
            continue;
          v5 = i[1];
        }
        if (v5 == 125)
        {
          v6 = result[39];
          if (v6 == 3)
          {
            v7 = 60;
LABEL_12:
            result[173] += v7;
          }
          else if (v6 == 2)
          {
            v7 = -60;
            goto LABEL_12;
          }
          result[39] = 2;
        }
      }
    }
  }
  if (!result[39])
    result[173] &= (int)result[173] >> 31;
  return result;
}

uint64_t CheckEucJpSeq(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  int v5;
  int v6;
  int v7;

  v1 = 2 * *(int *)(result + 1340);
  v2 = *(int *)(result + 1348);
  if ((int)v1 < 2 * (int)v2)
  {
    v3 = result + 2 * v2 + 1448;
    v4 = (char *)(result + v1 + 1448);
    v5 = *(unsigned __int8 *)(result + 160);
    do
    {
      if (v5)
        *(_DWORD *)(result + 560) += 120;
      v6 = *v4;
      v7 = v4[1];
      if (v6 < 0)
      {
        if (v6 != -113)
          goto LABEL_10;
        v5 ^= 1u;
      }
      else
      {
        v5 = 0;
      }
      *(_BYTE *)(result + 160) = v5;
LABEL_10:
      if ((v7 & 0x80000000) == 0)
      {
        v5 = 0;
LABEL_14:
        *(_BYTE *)(result + 160) = v5;
        goto LABEL_15;
      }
      if (v7 == -113)
      {
        v5 ^= 1u;
        goto LABEL_14;
      }
LABEL_15:
      v4 += 2;
    }
    while ((unint64_t)v4 < v3);
  }
  return result;
}

int32x2_t CheckBinaryDensity(int a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int32x2_t result;

  if (a3)
  {
    v3 = *(_DWORD *)(a2 + 1736);
    v4 = -2400;
    if (v3 > 6143)
      goto LABEL_10;
    v5 = a1 - *(_DWORD *)a2;
    if (v5 >= 0x2000)
      goto LABEL_10;
    v6 = *(_DWORD *)(a2 + 1348);
    v7 = v5 - v3;
    if (v7 > 32 * v6)
    {
      *(_DWORD *)(a2 + 764) -= 2400;
      result = vadd_s32(*(int32x2_t *)(a2 + 756), vdup_n_s32(0xFFFFF6A0));
      *(int32x2_t *)(a2 + 756) = result;
      *(_DWORD *)(a2 + 680) -= 2400;
      *(_DWORD *)(a2 + 688) -= 2400;
    }
    if (v6 >= 8 && 8 * v6 >= v7 && *(int *)(a2 + 68) >= 2)
    {
      v4 = 60;
LABEL_10:
      *(_DWORD *)(a2 + 764) += v4;
      result = vadd_s32(*(int32x2_t *)(a2 + 756), vdup_n_s32(v4));
      *(int32x2_t *)(a2 + 756) = result;
      *(_DWORD *)(a2 + 680) += v4;
      *(_DWORD *)(a2 + 688) += v4;
    }
  }
  return result;
}

void ActiveSpecialBoostWhack(int a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  int v38;
  char __str[16];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 1344) - *(_DWORD *)(a2 + 1336);
  v4 = *(_DWORD *)(a2 + 1348) - *(_DWORD *)(a2 + 1340);
  if ((*(_BYTE *)(a2 + 196) & 6) == 0 || v3 < 1)
    goto LABEL_25;
  v6 = 0;
  v7 = a2 + 1352;
  v8 = a2 + 1544;
  do
  {
    v9 = *(_DWORD *)(a2 + 1336);
    v10 = v9;
    v11 = v6 + v9;
    v12 = 2 * ((int)v6 + v9);
    v13 = *(unsigned __int8 *)(v7 + v12);
    v14 = *(unsigned __int8 *)(v7 + (int)v12 + 1);
    if (v13 == 126)
    {
      v18 = 600;
      if (*(unsigned __int8 *)(v7 + (int)v12 + 1) > 0x7Cu)
      {
        if ((_DWORD)v14 == 125)
          goto LABEL_17;
        if ((_DWORD)v14 != 126)
        {
LABEL_16:
          v18 = -600;
          goto LABEL_17;
        }
      }
      else if ((_DWORD)v14 != 10)
      {
        if ((_DWORD)v14 != 123)
          goto LABEL_16;
LABEL_17:
        *(_DWORD *)(a2 + 692) += v18;
      }
      if (!*(_QWORD *)(a2 + 32))
        goto LABEL_21;
      snprintf(__str, 0x10uLL, "%02x%02x~", 126, v14);
      v15 = *(_DWORD *)(v8 + 4 * (v6 + v10));
      v16 = &kMostLikelyEncoding[v14];
      v17 = 32256;
      goto LABEL_20;
    }
    if (v13 == 43)
    {
      UTF7BoostWhack(a2, v11, *(unsigned __int8 *)(v7 + (int)v12 + 1));
      if (*(_QWORD *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02x+", 43, v14);
        v15 = *(_DWORD *)(v8 + 4 * (v6 + v10));
        v16 = &kMostLikelyEncoding[v14];
        v17 = 11008;
LABEL_20:
        v19 = v16[v17];
        v20 = *(_DWORD *)(a2 + 40);
        v21 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 304 * v20);
        *v21 = v15;
        v21[1] = v19;
        MEMORY[0x1A85B04D0](v21 + 2, __str);
        memcpy((void *)(*(_QWORD *)(a2 + 32) + 304 * v20 + 32), (const void *)(a2 + 532), 0x10CuLL);
        ++*(_DWORD *)(a2 + 40);
      }
    }
LABEL_21:
    ++v6;
  }
  while (v3 != (_DWORD)v6);
  if (*(int *)(a2 + 84) > 7 && !*(_DWORD *)(a2 + 88))
    *(_DWORD *)(a2 + 708) -= 4800;
LABEL_25:
  if ((*(_WORD *)(a2 + 196) & 0x10F8) == 0 || v4 < 1)
    goto LABEL_59;
  v23 = 0;
  v24 = 0;
  while (2)
  {
    v25 = v23 + *(int *)(a2 + 1340);
    v26 = 2 * (int)v25;
    v27 = *(unsigned __int8 *)(a2 + 1448 + v26);
    v28 = *(unsigned __int8 *)(a2 + 1448 + (int)v26 + 1);
    v29 = a2 + 4 * v25;
    v30 = (unsigned int *)(v29 + 1736);
    v31 = *(_DWORD *)(v29 + 1736);
    v32 = *(_DWORD *)(v29 + 2120);
    if (v24 <= v32)
      v24 = v32;
    if (v27 == 255)
    {
      if ((_DWORD)v28 == 255)
        UTF1632BoostWhack(a2, v31, 255);
      if (*(_QWORD *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02xF", 255, v28);
        v34 = *v30;
        v35 = kMostLikelyEncoding[v28 + 65280];
        goto LABEL_47;
      }
    }
    else if (!*(_BYTE *)(a2 + 1448 + v26))
    {
      if (*(_BYTE *)(a2 + 1448 + (int)v26 + 1))
      {
        if (kIsPrintableAscii[v28])
          v33 = (v31 & 1) == 0;
        else
          v33 = 1;
        if (!v33)
          *v30 = v31 & 0xFFFFFFFE;
      }
      else
      {
        UTF1632BoostWhack(a2, v31, 0);
      }
      if (*(_QWORD *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02xZ", 0, v28);
        v34 = *v30;
        v35 = kMostLikelyEncoding[v28];
LABEL_47:
        v36 = *(_DWORD *)(a2 + 40);
        v37 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 304 * v36);
        *v37 = v34;
        v37[1] = v35;
        MEMORY[0x1A85B04D0](v37 + 2, __str);
        memcpy((void *)(*(_QWORD *)(a2 + 32) + 304 * v36 + 32), (const void *)(a2 + 532), 0x10CuLL);
        ++*(_DWORD *)(a2 + 40);
      }
    }
    if ((*(_BYTE *)(a2 + 196) & 0x80) != 0)
      BinaryBoostWhack((_DWORD *)a2, v27, v28);
    if (v4 != (_DWORD)++v23)
      continue;
    break;
  }
  v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 0x10) == 0)
  {
    if ((v38 & 0x20) == 0)
      goto LABEL_53;
LABEL_63:
    CheckUTF8UTF8Seq(a2, v24);
    v38 = *(_DWORD *)(a2 + 196);
    if ((v38 & 8) != 0)
      goto LABEL_64;
LABEL_54:
    if ((v38 & 4) == 0)
      goto LABEL_55;
LABEL_65:
    CheckHzActiveSeq((_DWORD *)a2);
    v38 = *(_DWORD *)(a2 + 196);
    if ((v38 & 0x1000) == 0)
      goto LABEL_57;
LABEL_56:
    CheckEucJpSeq(a2);
    v38 = *(_DWORD *)(a2 + 196);
    goto LABEL_57;
  }
  CheckUTF8Seq((_DWORD *)a2, v24);
  v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 0x20) != 0)
    goto LABEL_63;
LABEL_53:
  if ((v38 & 8) == 0)
    goto LABEL_54;
LABEL_64:
  CheckIso2022ActiveSeq((_DWORD *)a2);
  v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 4) != 0)
    goto LABEL_65;
LABEL_55:
  if ((v38 & 0x1000) != 0)
    goto LABEL_56;
LABEL_57:
  if ((v38 & 0xC0) != 0)
    CheckBinaryDensity(a1, a2, v4);
LABEL_59:
  if (*(_QWORD *)(a2 + 32))
    SetDetailsEncLabel(a2);
}

uint64_t PrintTopEnc(uint64_t a1, int a2)
{
  int v4;
  int *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  const char *v16;
  _DWORD __base[67];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 260);
  if (v4 >= 1)
  {
    v5 = (int *)(a1 + 264);
    v6 = __base;
    v7 = *(unsigned int *)(a1 + 260);
    do
    {
      v8 = *v5++;
      *v6++ = *(_DWORD *)(a1 + 4 * v8 + 532);
      --v7;
    }
    while (v7);
  }
  qsort(__base, v4, 4uLL, (int (__cdecl *)(const void *, const void *))IntCompare);
  v9 = *(_DWORD *)(a1 + 260);
  if (a2 < v9)
    v9 = a2;
  v10 = __base[v9 - 1];
  printf("rankedencodingList top %d: ", v9);
  v11 = *(_DWORD *)(a1 + 260);
  if (v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
    {
      v13 = *(int *)(a1 + 264 + 4 * i);
      v14 = a1 + 4 * v13;
      if (v10 <= *(_DWORD *)(v14 + 532))
      {
        v15 = (_DWORD *)(v14 + 532);
        v16 = MyEncodingName(kMapToEncoding[v13]);
        printf("%s=%d ", v16, *v15);
        v11 = *(_DWORD *)(a1 + 260);
      }
    }
  }
  return puts("\n");
}

uint64_t RepeatedBigram(int *a1, unsigned int a2, int a3)
{
  int v3;
  uint64_t result;

  v3 = a3 | (a2 << 8);
  if (a2 < 0x20)
    v3 = a3 & 0xFFF0 | (unsigned __int16)((_WORD)a2 << 8);
  if (v3 == a1[55] || v3 == a1[56] || v3 == a1[57] || v3 == a1[58])
    return 1;
  result = 0;
  a1[a1[54] + 55] = v3;
  a1[54] = (a1[54] + 1) & 3;
  return result;
}

BOOL RepeatedBinary(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;

  v3 = 1 << ((a2 >> 3) & 0x1C | (a3 >> 6));
  v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & v3) == 0)
  {
    *(_DWORD *)(a1 + 80) = v4 | v3;
    ++*(_DWORD *)(a1 + 72);
  }
  return (v4 & v3) != 0;
}

uint64_t ReRank(uint64_t result)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(result + 248) = -1;
  v1 = *(unsigned int *)(result + 260);
  if ((int)v1 >= 1)
  {
    v2 = (int *)(result + 264);
    v3 = 0xFFFFFFFFLL;
    v4 = 0xFFFFFFFFLL;
    do
    {
      v6 = *v2++;
      v5 = v6;
      v7 = v6;
      v8 = result + 4 * v6;
      v9 = *(unsigned int *)(v8 + 532);
      if ((int)v4 >= (int)v9)
      {
        if ((int)v3 < (int)v9
          && kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 240)]] != kMapEncToBaseEncoding[kMapToEncoding[v7]])
        {
          *(_DWORD *)(result + 252) = v9;
          *(_DWORD *)(result + 244) = v5;
          goto LABEL_10;
        }
      }
      else
      {
        v10 = *(int *)(result + 240);
        if (kMapEncToBaseEncoding[kMapToEncoding[v10]] != kMapEncToBaseEncoding[kMapToEncoding[v7]])
        {
          *(_DWORD *)(result + 252) = v4;
          *(_DWORD *)(result + 244) = v10;
          v9 = *(unsigned int *)(v8 + 532);
          v3 = v4;
        }
        v4 = v9;
        *(_DWORD *)(result + 248) = v9;
        *(_DWORD *)(result + 240) = v5;
      }
      v9 = v3;
LABEL_10:
      v3 = v9;
      --v1;
    }
    while (v1);
  }
  return result;
}

_DWORD *SimplePrune(_DWORD *result, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;

  v2 = result[62];
  result[49] = 0;
  v3 = result[65];
  if (v3 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = v2 - a2;
    do
    {
      v7 = result[v4 + 66];
      if (result[v7 + 133] >= v6)
      {
        result[49] |= kSpecialMask[kMapToEncoding[v7]];
        v8 = &result[v5++];
        v8[66] = v7;
        v3 = result[65];
      }
      ++v4;
    }
    while (v4 < v3);
  }
  result[65] = v5;
  return result;
}

uint64_t CalcReliable(uint64_t result)
{
  int v1;
  int v2;
  int v3;

  *(_BYTE *)(result + 45) = 0;
  v1 = *(_DWORD *)(result + 1348);
  if (!v1
    || *(_DWORD *)(result + 248) - *(_DWORD *)(result + 252) >= FLAGS_ced_reliable_difference
    || v1 == 1 && *(_DWORD *)(result + 240) == kMostLikelyEncoding[__rev16(*(unsigned __int16 *)(result + 1448))])
  {
    *(_BYTE *)(result + 45) = 1;
    return result;
  }
  v2 = *(_DWORD *)(result + 260);
  if (v2 == 3)
  {
    v3 = kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 264)]];
    if (v3 != kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 268)]]
      || v3 != kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 272)]])
    {
      return result;
    }
    goto LABEL_14;
  }
  if (v2 != 2)
  {
    if (v2 != 1)
      return result;
LABEL_15:
    *(_WORD *)(result + 44) = 257;
    return result;
  }
  if (kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 264)]] == kMapEncToBaseEncoding[kMapToEncoding[*(int *)(result + 268)]])
  {
LABEL_14:
    if (*(int *)(result + 56) >= 3)
      goto LABEL_15;
  }
  return result;
}

uint64_t FindTop2(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;

  *a4 = -1;
  *a5 = -1;
  *a2 = 0;
  *a3 = 0;
  if (*(int *)(result + 260) >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(int *)(result + 264 + 4 * v5);
      v7 = result + 4 * v6;
      v8 = *(_DWORD *)(v7 + 532);
      if (*a4 < v8)
        break;
      if (*a5 < v8)
      {
        *a5 = v8;
        v9 = a3;
        goto LABEL_7;
      }
LABEL_8:
      if (++v5 >= *(int *)(result + 260))
        return result;
    }
    *a5 = *a4;
    *a3 = *a2;
    *a4 = *(_DWORD *)(v7 + 532);
    v9 = a2;
LABEL_7:
    *v9 = v6;
    goto LABEL_8;
  }
  return result;
}

uint64_t PrintRankedEncodingList(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;

  printf("Current ranked encoding list %s\n", a2);
  if (*(int *)(a1 + 260) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(unsigned int *)(a1 + 264 + 4 * v3);
      if (v4 < 0x44)
      {
        MyEncodingName(kMapToEncoding[v4]);
        printf(" [%d] rankedencoding = %d %-12.12s enc_prob = %d\n");
      }
      else
      {
        printf(" [%d] BOGUS rankedencoding = %d\n");
      }
      ++v3;
    }
    while (v3 < *(int *)(a1 + 260));
  }
  return puts("End current ranked encoding list\n");
}

char *Latin127Str(unint64_t a1)
{
  tri_string = aAbcdefghijklmn[(a1 >> 10) & 0x1F];
  byte_1EE7E6809 = aAbcdefghijklmn[(a1 >> 5) & 0x1F];
  byte_1EE7E680A = aAbcdefghijklmn[a1 & 0x1F];
  byte_1EE7E680B = 0;
  return &tri_string;
}

uint64_t TrigramValue(const unsigned __int8 *a1)
{
  return (kLatin127Trigrams[kMapToFiveBits[a1[1]] | (32 * kMapToFiveBits[*a1])] >> (2 * kMapToFiveBits[a1[2]])) & 3;
}

BOOL BoostLatin127Trigrams(int a1, uint64_t a2)
{
  const unsigned __int8 *v2;
  int v3;
  int v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  _DWORD *v8;
  _DWORD *v9;
  const unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v2 = *(const unsigned __int8 **)a2;
  v3 = *(_DWORD *)(a2 + 8) - *(_QWORD *)a2 - 2;
  if (a1 + 32 < v3)
    v3 = a1 + 32;
  if (v3 > a1)
  {
    v5 = 0;
    v6 = &v2[v3];
    v7 = &v2[a1];
    v20 = (_DWORD *)(a2 + 652);
    v21 = (_DWORD *)(a2 + 596);
    v22 = (_DWORD *)(a2 + 580);
    v23 = (_DWORD *)(a2 + 568);
    v18 = (_DWORD *)(a2 + 536);
    v19 = (_DWORD *)(a2 + 704);
    v8 = (_DWORD *)(a2 + 548);
    v9 = (_DWORD *)(a2 + 592);
    v10 = v7;
    while (1)
    {
      v11 = *++v10;
      v12 = (kLatin127Trigrams[kMapToFiveBits[v11] | (32 * kMapToFiveBits[*v7])] >> (2 * kMapToFiveBits[v7[2]])) & 3;
      if (((kLatin127Trigrams[kMapToFiveBits[v11] | (32 * kMapToFiveBits[*v7])] >> (2 * kMapToFiveBits[v7[2]])) & 3) != 0)
      {
        if (FLAGS_enc_detect_source)
          PsHighlight((uint64_t)v7, *(const unsigned __int8 **)a2, v12, 1);
        switch((_DWORD)v12)
        {
          case 1:
            v13 = -1;
            v15 = v18;
            v14 = v8;
            v16 = v9;
LABEL_14:
            *v15 += 60;
LABEL_15:
            *v14 += 60;
            *v16 += 60;
            v5 += v13;
            break;
          case 2:
            v13 = 1;
            v16 = v22;
            v14 = v23;
            goto LABEL_15;
          case 3:
            *(_DWORD *)(a2 + 648) += 60;
            v13 = 1;
            v14 = v20;
            v15 = v21;
            v16 = v19;
            goto LABEL_14;
        }
      }
      v7 = v10;
      if (v10 >= v6)
        return v5 > 0;
    }
  }
  v5 = 0;
  return v5 > 0;
}

uint64_t BoostPrune(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  _BOOL4 v49;
  int v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t i;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  _DWORD *v76;
  int v77;
  char v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v89;
  int v90;
  unsigned int v91;
  int v92;
  _DWORD *v93;
  int v94;
  BOOL v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int *v103;
  BOOL v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  int v113;
  char v114;
  unint64_t v115;
  char __str[32];
  uint64_t v117;

  v3 = a3;
  v5 = result;
  v117 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 1348);
  v109 = v6 - *(_DWORD *)(a2 + 1340);
  if (a3 == 2)
  {
    if (*(_BYTE *)(a2 + 46))
      v7 = 0;
    else
      v7 = v6 <= 11;
    if (v7)
    {
      v8 = 0;
      if (v6 <= 2)
        v6 = 2;
      v9 = v6 + 1;
      do
      {
        *(_DWORD *)(a2 + v8 + 532) = *(_DWORD *)(a2 + v8 + 532)
                                   - *(_DWORD *)(a2 + v8 + 800)
                                   + *(_DWORD *)(a2 + v8 + 800) * v9 / 12;
        v8 += 4;
      }
      while (v8 != 268);
      *(_BYTE *)(a2 + 46) = 1;
      if (*(_QWORD *)(a2 + 32))
      {
        snprintf(__str, 0x20uLL, "Hints %d/%d", v9, 12);
        SetDetailsEncLabel(a2);
      }
    }
    v10 = (int *)(a2 + 56);
    ++*(_DWORD *)(a2 + 56);
  }
  else
  {
    v61 = *(_DWORD *)(a2 + 1344);
    v62 = *(_DWORD *)(a2 + 1336);
    v10 = (int *)(a2 + 56);
    v63 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = v63 + 1;
    if (*(int *)(a2 + 260) < 2)
      goto LABEL_227;
    if ((v63 & 0x80000000) == 0 && v61 - v62 == -v109)
      return result;
  }
  if (v109 < 1)
  {
    v64 = 0;
    goto LABEL_116;
  }
  v101 = v3;
  v102 = v5;
  v103 = v10;
  LOBYTE(v11) = 0;
  v108 = 0;
  LODWORD(v10) = 0;
  v12 = 0;
  v105 = 32;
  v106 = 32;
  do
  {
    v113 = v12;
    v114 = v11;
    v13 = *(_DWORD *)(a2 + 1340) + v12;
    v14 = 2 * v13;
    v15 = *(unsigned __int8 *)(a2 + 1448 + v14);
    v16 = (int)v10;
    v17 = *(unsigned __int8 *)(a2 + 1448 + (int)v14 + 1);
    v10 = (int *)(v15 & 0xF0 | (v17 >> 4));
    if (v13 >= 1
      && *(_DWORD *)(a2 + 1736 + 4 * v13) == *(_DWORD *)(a2 + 1736 + 4 * (v13 - 1)) + 2)
    {
      v18 = (~(_DWORD)v10 & 0xCC) == 0 || (~v16 & 0xCC) == 0;
    }
    else
    {
      v18 = 0;
    }
    v19 = a2 + 4 * v13;
    v20 = *(_DWORD *)(v19 + 2120);
    v112 = v19;
    v110 = (unsigned __int8 *)*(int *)(v19 + 1736);
    v115 = *(unsigned __int8 *)(a2 + 1448 + 2 * v13);
    v21 = RepeatedBigram((int *)a2, v15, v17);
    if ((v21 & 1) != 0)
    {
      v22 = 0;
      v23 = 0;
      v24 = v113;
      v25 = v115;
      goto LABEL_81;
    }
    v26 = 0xFu >> v20;
    if (!FLAGS_demo_nodefault)
    {
      *(_DWORD *)(a2 + 532 + 4 * *(int *)(a2 + 48)) += v26;
      *(_DWORD *)(a2 + 532 + 4 * *(int *)(a2 + 52)) += v26;
    }
    v25 = v115;
    v107 = v21;
    if (*(int *)(a2 + 260) < 1)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v27 = 0;
      v23 = 0;
      v22 = 0;
      v28 = 0;
      v29 = 1 << ((v115 >> 3) & 0x1C | (v17 >> 6));
      v30 = FLAGS_enc_detect_detail2;
      v31 = watch1_rankedenc;
      v32 = watch2_rankedenc;
      v34 = (_DWORD)v115 == v106 && (_DWORD)v17 == v105;
      do
      {
        v35 = *(int *)(a2 + 264 + 4 * v27);
        v36 = (int)kMapToEncoding[v35];
        if ((_DWORD)v35 == 58)
        {
          v37 = *(_DWORD *)(a2 + 80);
          if ((v37 & v29) != 0)
          {
            v38 = 2;
          }
          else
          {
            v38 = 0;
            *(_DWORD *)(a2 + 80) = v37 | v29;
            ++*(_DWORD *)(a2 + 72);
          }
        }
        else
        {
          v38 = 0;
        }
        v39 = *((unsigned __int8 *)v10 + (_QWORD)&unigram_table + 808 * (int)v35 + 552);
        if (*((_BYTE *)v10 + (_QWORD)&unigram_table + 808 * (int)v35 + 552))
        {
          if ((v39 & 1) != 0)
            v40 = *(unsigned __int8 *)(*((_QWORD *)&unigram_table + 101 * (int)v35 + ((v17 >> 5) & 3))
                                     + (v17 & 0x1F | (32 * (v115 & 0x1F))));
          else
            v40 = *((_DWORD *)&unigram_table + 202 * (int)v35 + 9);
          v41 = (*((unsigned __int8 *)&unigram_table + 808 * (int)v35 + (v17 & 0x80 ^ v115) + 40)
               + v39
               + *((unsigned __int8 *)&unigram_table + 808 * (int)v35 + v17 + 296)
               + v40) >> v38 >> v20;
          *(_DWORD *)(a2 + 4 * v35 + 532) += v41;
          if (v30)
          {
            if (v31 == (_DWORD)v35)
              v23 = v41;
            if (v32 == (_DWORD)v35)
              v22 = v41;
          }
        }
        else if (!v34)
        {
          *(_DWORD *)(a2 + 4 * v35 + 532) -= 0x258u >> v20;
          v28 = 1;
        }
        if (v18 && (kSpecialMask[v36] & 0x400) != 0)
          *(_DWORD *)(a2 + 4 * v35 + 532) += v26;
        ++v27;
      }
      while (v27 < *(int *)(a2 + 260));
      v42 = (v28 & 1) == 0;
      if ((v28 & 1) != 0)
        v43 = v17;
      else
        v43 = v105;
      v44 = v106;
      v25 = v115;
      if (!v42)
        v44 = v115;
      v105 = v43;
      v106 = v44;
    }
    v24 = v113;
    v45 = (int)v110;
    if (v13 < 16)
    {
      v46 = a2 + 4 * kMostLikelyEncoding[v17 | (v25 << 8)];
      *(_DWORD *)(v46 + 532) += v26;
    }
    ++v108;
    if (*(_BYTE *)(a2 + 65))
    {
      v47 = &v110[*(_QWORD *)a2 - 1];
    }
    else
    {
      if (!*(_BYTE *)(a2 + 64))
        goto LABEL_81;
      v47 = (unsigned __int8 *)(*(_QWORD *)a2 + (int)v110 - 1);
      if ((v113 & 7) != 0
        && (unint64_t)(v47 + 3) <= *(_QWORD *)(a2 + 8)
        && ((kLatin127Trigrams[kMapToFiveBits[v47[1]] | (32 * kMapToFiveBits[*v47])] >> (2 * kMapToFiveBits[v47[2]])) & 2) == 0)
      {
        goto LABEL_81;
      }
    }
    v48 = v110 & 0xFFFFFFE0;
    if (*(_DWORD *)(a2 + 60) <= (signed int)(v110 & 0xFFFFFFE0))
    {
      v111 = v47;
      v49 = BoostLatin127Trigrams(v45 & 0xFFFFFFE0, a2);
      v50 = *(unsigned __int8 *)(a2 + 65);
      if (FLAGS_counts && !*(_BYTE *)(a2 + 65) && v49)
        ++doing_used;
      if (FLAGS_enc_detect_source)
        v51 = v50 == 0;
      else
        v51 = 0;
      if (v51 && v49)
      {
        v104 = v49;
        PsHighlight((uint64_t)v111, *(const unsigned __int8 **)a2, 0, 2);
        LOBYTE(v49) = v104;
        LOBYTE(v50) = *(_BYTE *)(a2 + 65);
      }
      *(_BYTE *)(a2 + 65) = v50 | v49;
      *(_DWORD *)(a2 + 60) = v48 + 32;
      v25 = v115;
      v21 = v107;
    }
LABEL_81:
    ++*(_DWORD *)(a2 + ((v25 >> 3) & 0x1C) + 164);
    if (*(_QWORD *)(a2 + 32))
    {
      if (v20)
        v53 = 45;
      else
        v53 = 32;
      v54 = 93;
      if (!v21)
        v54 = 32;
      v100 = v54;
      v55 = 91;
      if (!v21)
        v55 = 32;
      snprintf(__str, 0x10uLL, "%c%02x%02x%c%c", v55, v25, v17, v100, v53);
      v56 = kMostLikelyEncoding[v17 | (v115 << 8)];
      v57 = *(_DWORD *)(a2 + 40);
      v58 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 304 * v57);
      *v58 = *(_DWORD *)(v112 + 1736);
      v58[1] = v56;
      MEMORY[0x1A85B04D0](v58 + 2, __str);
      memcpy((void *)(*(_QWORD *)(a2 + 32) + 304 * v57 + 32), (const void *)(a2 + 532), 0x10CuLL);
      LOBYTE(v25) = v115;
      ++*(_DWORD *)(a2 + 40);
    }
    if (FLAGS_enc_detect_detail2 && v23 | v22)
    {
      if (v22 >= 0)
        v59 = 43;
      else
        v59 = 45;
      v99 = v59;
      if (v23 >= 0)
        v60 = 43;
      else
        v60 = 45;
      snprintf(__str, 0x20uLL, "%c%d %c%d", v60, v23, v99, v22);
      SetDetailsEncLabel(a2);
      LOBYTE(v25) = v115;
    }
    v11 = (char)(v25 | v114);
    v12 = v24 + 1;
  }
  while (v12 != v109);
  v64 = v108;
  if (v108 < 1)
  {
    v5 = v102;
    v10 = v103;
    v3 = v101;
  }
  else
  {
    v5 = v102;
    v10 = v103;
    v3 = v101;
    if ((v11 & 0x80000000) == 0)
    {
      v65 = *(_DWORD *)(a2 + 260);
      if (v65 >= 1)
      {
        for (i = 0; i < v65; ++i)
        {
          v67 = *(int *)(a2 + 264 + 4 * i);
          if ((kSpecialMask[kMapToEncoding[v67]] & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 4 * v67 + 532) -= 60 * v108;
            v65 = *(_DWORD *)(a2 + 260);
          }
        }
      }
      v64 = 1;
    }
  }
LABEL_116:
  if (*(_DWORD *)(a2 + 196))
    ActiveSpecialBoostWhack(v5, a2);
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 1336) = *(_DWORD *)(a2 + 1344);
  v68 = *(_DWORD *)(a2 + 1348);
  *(_DWORD *)(a2 + 1340) = v68;
  if (v3 == 2)
  {
    if (*(_DWORD *)(a2 + 92))
      *(_DWORD *)(a2 + 540) -= 120;
    if (*(_DWORD *)(a2 + 120))
      *(_DWORD *)(a2 + 768) -= 120;
    if (!*(_DWORD *)(a2 + 116))
    {
      *(_DWORD *)(a2 + 540) -= 4800;
      *(_DWORD *)(a2 + 768) -= 4800;
    }
    if (!*(_DWORD *)(a2 + 148))
      *(_DWORD *)(a2 + 768) -= 4800;
    v69 = *(_DWORD *)(a2 + 68);
    if (v69 <= 3)
    {
      if (v69 == 3)
        v70 = -1200;
      else
        v70 = -2400;
      *(_DWORD *)(a2 + 764) += v70;
    }
    if (v68 < 1 || (*(_BYTE *)(a2 + 196) & 8) == 0 || *(_BYTE *)(a2 + 1448) != 27 || *(_BYTE *)(a2 + 1449) != 36)
      goto LABEL_152;
    v71 = *(_QWORD *)a2 + *(int *)(a2 + 1736);
    if (v71 >= *(_QWORD *)(a2 + 8) - 3)
    {
      v75 = *(_DWORD *)(a2 + 616) - 600;
    }
    else
    {
      v72 = *(unsigned __int8 *)(v71 + 2);
      if (v72 != 66 && v72 != 64)
      {
        if (v72 != 41)
          goto LABEL_152;
        v73 = *(unsigned __int8 *)(v71 + 3);
        if (v73 != 65 && v73 != 71)
        {
          if (v73 == 67)
          {
            *(_DWORD *)(a2 + 700) += 600;
            *(_DWORD *)(a2 + 712) -= 600;
            goto LABEL_231;
          }
LABEL_152:
          if (*(_QWORD *)(a2 + 32))
            SetDetailsEncLabel(a2);
          result = ReRank(a2);
LABEL_155:
          v74 = 0;
          goto LABEL_156;
        }
        *(_DWORD *)(a2 + 712) += 600;
        *(_DWORD *)(a2 + 700) -= 600;
LABEL_231:
        v76 = (_DWORD *)(a2 + 616);
LABEL_151:
        *v76 -= 600;
        goto LABEL_152;
      }
      v75 = *(_DWORD *)(a2 + 616) + 600;
    }
    *(_DWORD *)(a2 + 616) = v75;
    *(_DWORD *)(a2 + 712) -= 600;
    v76 = (_DWORD *)(a2 + 700);
    goto LABEL_151;
  }
  result = ReRank(a2);
  if (v3 != 1)
    goto LABEL_155;
  if (*(_QWORD *)(a2 + 32))
    result = (uint64_t)SetDetailsEncLabel(a2);
  v74 = 1;
LABEL_156:
  v77 = *(_DWORD *)(a2 + 256);
  v78 = *(_DWORD *)(a2 + 240) == 58;
  if (v77 >= 301)
  {
    if (v64)
      v79 = -300;
    else
      v79 = -150;
    *(_DWORD *)(a2 + 256) = v77 + v79;
  }
  v80 = v77 << v78;
  v81 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 196) = 0;
  v82 = *(_DWORD *)(a2 + 260);
  if (v82 >= 1)
  {
    v83 = 0;
    v84 = 0;
    v85 = v81 - v80;
    while (1)
    {
      v86 = *(_DWORD *)(a2 + 264 + 4 * v83);
      result = *(unsigned int *)(a2 + 4 * v86 + 532);
      if (v74)
      {
        v87 = (int)kMapToEncoding[v86];
        if ((kSpecialMask[v87] & 1) != 0 && (int)result <= 0)
          break;
      }
      if ((int)result >= v85)
      {
        LODWORD(v87) = kMapToEncoding[v86];
LABEL_174:
        *(_DWORD *)(a2 + 196) |= kSpecialMask[v87];
        v89 = a2 + 4 * v84++;
        *(_DWORD *)(v89 + 264) = v86;
        v82 = *(_DWORD *)(a2 + 260);
      }
LABEL_175:
      if (++v83 >= v82)
        goto LABEL_178;
    }
    if (v86 != *(_DWORD *)(a2 + 240) || (int)result < v85)
      goto LABEL_175;
    goto LABEL_174;
  }
  v84 = 0;
LABEL_178:
  if (*(_QWORD *)(a2 + 32))
  {
    snprintf(__str, 0x20uLL, "%d prune", v80 / 30);
    result = (uint64_t)SetDetailsEncLabel(a2);
  }
  *(_DWORD *)(a2 + 260) = v84;
  v90 = *(_DWORD *)(a2 + 1348);
  if (v3 != 2)
    goto LABEL_208;
  if (!v90)
  {
    v91 = *(_DWORD *)(a2 + 240);
    if (v91 > 0x3A || ((1 << v91) & 0x400350000200000) == 0)
    {
      *(_DWORD *)(a2 + 240) = 0;
      *(_DWORD *)(a2 + 532) += 1200;
    }
  }
  v92 = *(_DWORD *)(a2 + 240);
  if (*(int *)(a2 + 180) < 1)
  {
    switch(v92)
    {
      case 28:
        *(_DWORD *)(a2 + 240) = 14;
        v93 = (_DWORD *)(a2 + 588);
        break;
      case 22:
        *(_DWORD *)(a2 + 240) = 13;
        v93 = (_DWORD *)(a2 + 584);
        break;
      case 4:
        *(_DWORD *)(a2 + 240) = 1;
        v93 = (_DWORD *)(a2 + 536);
        break;
      default:
        goto LABEL_201;
    }
LABEL_200:
    *v93 += 1200;
    goto LABEL_201;
  }
  if (v92 > 13)
  {
    if (v92 == 14)
    {
      *(_DWORD *)(a2 + 240) = 28;
      v93 = (_DWORD *)(a2 + 644);
    }
    else
    {
      if (v92 != 34)
        goto LABEL_201;
      *(_DWORD *)(a2 + 240) = 11;
      v93 = (_DWORD *)(a2 + 576);
    }
    goto LABEL_200;
  }
  if (v92 == 1)
  {
    *(_DWORD *)(a2 + 240) = 4;
    v93 = (_DWORD *)(a2 + 548);
    goto LABEL_200;
  }
  if (v92 == 13)
  {
    *(_DWORD *)(a2 + 240) = 22;
    v93 = (_DWORD *)(a2 + 620);
    goto LABEL_200;
  }
LABEL_201:
  if (*(_QWORD *)(a2 + 32))
  {
    snprintf(__str, 0x20uLL, "final %d", v5 - *(_DWORD *)a2);
    SetDetailsEncLabel(a2);
    v94 = *(_DWORD *)(a2 + 248) - *(_DWORD *)(a2 + 252);
    if (v94 > 59)
    {
      if (v94 > 0x5DB)
      {
        MyEncodingName(kMapToEncoding[*(int *)(a2 + 240)]);
        snprintf(__str, 0x20uLL, "%s");
      }
      else
      {
        MyEncodingName(kMapToEncoding[*(int *)(a2 + 240)]);
        snprintf(__str, 0x20uLL, "+%d %s");
      }
    }
    else
    {
      MyEncodingName(kMapToEncoding[*(int *)(a2 + 240)]);
      snprintf(__str, 0x20uLL, "+%d.%d %s ");
    }
    result = (uint64_t)SetDetailsEncProbCopyOffset(a2, *(_DWORD *)(a2 + 240), (uint64_t)__str);
    v90 = *(_DWORD *)(a2 + 1348);
  }
LABEL_208:
  v96 = *(_DWORD *)(a2 + 248) - *(_DWORD *)(a2 + 252) >= FLAGS_ced_reliable_difference || v90 == 0;
  *(_BYTE *)(a2 + 45) = v96;
  if (v90 == 1 && *(_DWORD *)(a2 + 240) == kMostLikelyEncoding[__rev16(*(unsigned __int16 *)(a2 + 1448))])
    *(_BYTE *)(a2 + 45) = 1;
  v97 = *(_DWORD *)(a2 + 260);
  if (v97 == 1)
    goto LABEL_226;
  if (v97 != 3)
  {
    if (v97 != 2
      || kMapEncToBaseEncoding[kMapToEncoding[*(int *)(a2 + 264)]] != kMapEncToBaseEncoding[kMapToEncoding[*(int *)(a2 + 268)]]
      || *v10 <= 2)
    {
      return result;
    }
LABEL_226:
    *(_BYTE *)(a2 + 45) = 1;
LABEL_227:
    *(_BYTE *)(a2 + 44) = 1;
    return result;
  }
  v98 = kMapEncToBaseEncoding[kMapToEncoding[*(int *)(a2 + 264)]];
  if (v98 == kMapEncToBaseEncoding[kMapToEncoding[*(int *)(a2 + 268)]]
    && v98 == kMapEncToBaseEncoding[kMapToEncoding[*(int *)(a2 + 272)]]
    && *v10 >= 3)
  {
    goto LABEL_226;
  }
  return result;
}

uint64_t IncrementAndBoostPrune(unsigned __int8 *a1, int a2, uint64_t a3, int a4, int a5)
{
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(a3 + 24) = a1;
  if (a2 < 2)
    v5 = 32;
  else
    v5 = a1[1];
  v6 = *a1;
  v7 = a5 - 1;
  v8 = a3 + 4 * v7;
  v9 = *(_DWORD *)(v8 + 1344);
  if (v9 < 17)
    goto LABEL_11;
  v10 = 0;
  if (!*a1 || v6 == 43 || v6 == 126)
    return v10;
  if (v9 < 0x30)
  {
LABEL_11:
    v11 = *(_DWORD *)a3;
    v12 = 2 * v9;
    v13 = a3 + 96 * v7 + 1352;
    *(_BYTE *)(v13 + v12) = v6;
    *(_BYTE *)(v13 + (int)v12 + 1) = v5;
    v14 = a3 + 192 * v7 + 4 * v9;
    *(_DWORD *)(v14 + 1544) = (_DWORD)a1 - v11;
    *(_DWORD *)(v14 + 1928) = a4;
    ++*(_DWORD *)(v8 + 1344);
    LOBYTE(v9) = v9 + 1;
  }
  else if (a5 == 2)
  {
    *(_BYTE *)(a3 + 44) = 1;
  }
  if (!*(_BYTE *)(a3 + 44) && (v9 & 7) != 0)
    return 0;
  BoostPrune((uint64_t)(a1 + 2), a3, 0);
  return 1;
}

uint64_t DumpSummary(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;

  LODWORD(v3) = a3;
  v6 = a1 + 4 * a2;
  printf("  %sSummary[%2d]: ", kWhatSetName[a2], *(_DWORD *)(v6 + 1344));
  v7 = *(_DWORD *)(v6 + 1344);
  if ((int)v3 >= v7)
    v3 = v7;
  else
    v3 = v3;
  if ((int)v3 >= 1)
  {
    v8 = 0;
    v9 = (char *)(a1 + 96 * a2 + 1353);
    do
    {
      printf("%02x%02x ", *(v9 - 1), *v9);
      if ((~(_DWORD)v8 & 7) == 0)
        printf("  ");
      v9 += 2;
      ++v8;
    }
    while (v3 != v8);
  }
  return putchar(10);
}

size_t BeginDetail(uint64_t a1)
{
  FILE **v2;
  uint64_t i;
  FILE *v4;
  const char *v5;
  unint64_t v6;
  size_t result;

  v2 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%d [", 67);
  for (i = 0; i != 67; ++i)
  {
    v4 = *v2;
    v5 = MyEncodingName(kMapToEncoding[i]);
    fprintf(v4, "(%s)", v5);
    HIDWORD(v6) = -858993459 * (i - 9);
    LODWORD(v6) = HIDWORD(v6);
    if ((v6 >> 1) <= 0x19999998)
      fwrite("\n    ", 5uLL, 1uLL, *v2);
  }
  result = fwrite("] size-detail\n", 0xEuLL, 1uLL, *v2);
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t DetailOffsetChar(int a1)
{
  int v1;
  int v2;
  unsigned int v3;

  if (a1 >= 0x20)
    v1 = 32;
  else
    v1 = 43;
  if (a1 >= 0x10)
    v2 = v1;
  else
    v2 = 95;
  if (a1 >= 3)
    v3 = v2;
  else
    v3 = 61;
  if (a1)
    return v3;
  else
    return 32;
}

size_t DumpDetail(uint64_t a1)
{
  FILE **v2;
  size_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t j;
  unint64_t v23;

  v2 = (FILE **)MEMORY[0x1E0C80C10];
  result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%d count-detail\n", *(_DWORD *)(a1 + 40));
  v4 = *(unsigned int *)(a1 + 40);
  v5 = v4 - 1;
  if ((int)v4 > 1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v4 - 2;
    do
    {
      v8 = v4;
      v9 = v6 + 304 * v5;
      *(_DWORD *)(v6 + 304 * --v4) -= *(_DWORD *)(v6 + 304 * (v8 - 2));
      for (i = 32; i != 300; i += 4)
      {
        result = *(unsigned int *)(v9 + i);
        *(_DWORD *)(v9 + i) = result - *(_DWORD *)(v6 + 304 * v7 + i);
      }
      --v7;
      --v5;
    }
    while (v8 > 2);
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
  }
  if ((int)v4 >= 1)
  {
    v11 = 0;
    v12 = 32;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 32);
      v15 = v13 + 304 * v11;
      v14 = (_QWORD *)(v15 + 8);
      LODWORD(v15) = *(char *)(v15 + 31);
      v16 = v15;
      if ((v15 & 0x80000000) != 0)
        break;
      LODWORD(v15) = v15;
      if ((v15 & 0x80) != 0)
        goto LABEL_11;
LABEL_12:
      if (*((_BYTE *)v14 + (int)v15 - 1) == 33)
      {
        fwrite("1 0.9 0.9 do-flag\n", 0x12uLL, 1uLL, *v2);
        v13 = *(_QWORD *)(a1 + 32);
      }
      v17 = *(_DWORD *)(v13 + 304 * v11);
      if (v17 >= 0x20)
        v18 = 32;
      else
        v18 = 43;
      if (v17 < 0x10)
        v18 = 95;
      if (v17 < 3)
        v18 = 61;
      if (v17)
        v19 = v18;
      else
        v19 = 32;
      v20 = v13 + 304 * v11;
      v21 = (const char *)(v20 + 8);
      if (*(char *)(v20 + 31) < 0)
        v21 = *(const char **)v21;
      fprintf(*v2, "(%c%s) %d [", v19, v21, *(_DWORD *)(v13 + 304 * v11 + 4));
      for (j = 0; j != 67; ++j)
      {
        fprintf(*v2, "%d ", *(_DWORD *)(*(_QWORD *)(a1 + 32) + v12 + 4 * j));
        HIDWORD(v23) = -858993459 * (j - 9);
        LODWORD(v23) = HIDWORD(v23);
        if ((v23 >> 1) <= 0x19999998)
          fwrite("  ", 2uLL, 1uLL, *v2);
      }
      result = fwrite("] do-detail-e\n", 0xEuLL, 1uLL, *v2);
      ++v11;
      v12 += 304;
      if (v11 >= *(int *)(a1 + 40))
        goto LABEL_34;
    }
    v15 = v14[1];
    if ((v16 & 0x80) == 0)
      goto LABEL_12;
LABEL_11:
    v14 = (_QWORD *)*v14;
    goto LABEL_12;
  }
LABEL_34:
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t PsRecurse(const char *a1)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "() end-detail (%s) start-detail\n\n", a1);
}

uint64_t DumpReliable(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  const char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  double v19;
  uint64_t v20;
  const char *v21;

  printf("Not reliable: ");
  v2 = *(_DWORD *)(a1 + 1348);
  if (v2 < 1)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 1449);
    v6 = *(unsigned int *)(a1 + 1348);
    do
    {
      v7 = *(v5 - 1);
      v8 = *v5;
      v5 += 2;
      v3 += v8;
      v4 += v7;
      --v6;
    }
    while (v6);
  }
  if (v2 <= 1)
    v2 = 1;
  v9 = v3 / v2;
  v10 = v4 / v2;
  printf("center %02X,%02X\n", v3 / v2, v4 / v2);
  if (*(int *)(a1 + 260) < 1)
  {
    v20 = 0;
    v13 = 999.0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 999.0;
    do
    {
      v14 = *(int *)(a1 + 264 + 4 * v11);
      v15 = MyEncodingName(kMapToEncoding[v14]);
      v16 = (unsigned __int8 *)&unigram_table + 808 * (int)v14;
      v17 = v16[32];
      v18 = v16[33];
      printf("  %8s = %4d at %02x,%02x +/- %02X,%02X ", v15, *(_DWORD *)(a1 + 4 * v14 + 532), v17, v18, v16[34], v16[35]);
      v19 = sqrt((double)(v10 - v18) * (double)(v10 - v18) + (double)(v9 - v17) * (double)(v9 - v17));
      printf("(%3.1f)\n", v19);
      if (v13 > v19)
      {
        v13 = v19;
        v12 = v14;
      }
      ++v11;
    }
    while (v11 < *(int *)(a1 + 260));
    v20 = v12;
  }
  v21 = MyEncodingName(kMapToEncoding[v20]);
  return printf("Closest=%s (%3.1f)\n", v21, v13);
}

BOOL QuickPrintableAsciiScan(int8x8_t *a1, int a2)
{
  const char *v2;
  int8x8_t *v3;
  int8x8_t v4;
  int8x8_t *v5;

  v2 = (char *)a1 + a2;
  do
  {
    v3 = a1;
    if (a1 >= (int8x8_t *)(v2 - 7))
      break;
    ++a1;
    v4 = vorr_s8(vadd_s8(*v3, (int8x8_t)0x101010101010101), vadd_s8(*v3, (int8x8_t)0xE0E0E0E0E0E0E0E0));
  }
  while (((v4.i32[0] | v4.i32[1] | ((*(_QWORD *)&v4 | HIDWORD(*(_QWORD *)&v4)) >> 16) | ((v4.i32[0] | v4.i32[1] | ((*(_QWORD *)&v4 | HIDWORD(*(_QWORD *)&v4)) >> 16)) >> 8)) & 0x80) == 0);
  do
  {
    v5 = v3;
    if (v3 >= (int8x8_t *)v2)
      break;
    v3 = (int8x8_t *)((char *)v3 + 1);
  }
  while (kIsPrintableAscii[v5->u8[0]]);
  return v5 >= (int8x8_t *)v2;
}

BOOL TextInsideTag(const unsigned __int8 *a1, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  const unsigned __int8 *v3;
  const unsigned __int8 *v4;
  int v5;
  BOOL v6;
  int v7;

  v3 = a2 - 192;
  if (a2 - 192 < a1)
    v3 = a1;
  v4 = a2 - 1;
  while (1)
  {
    if (v3 > v4)
      return 0;
    v5 = *(a2 - 1);
    if ((v5 & 0xFFFFFFFD) == 0x3C)
      break;
    v6 = v5 != 47 || a2 >= a3;
    if (!v6 && *a2 == 42)
      return 1;
    v4 = a2 - 2;
    --a2;
  }
  if (v5 == 60)
    return 1;
  if (v5 != 62 || a2 - 7 < a1)
    return 0;
  v7 = *(a2 - 7);
  if (v7 == 115)
    return (*(a2 - 6) & 0xDF) == 0x43
        && (*(a2 - 5) & 0xDF) == 0x52
        && (*(a2 - 4) & 0xDF) == 0x49
        && (*(a2 - 3) & 0xDF) == 0x50
        && (*(a2 - 2) & 0xDF) == 0x54;
  return v7 == 60
      && (*(a2 - 6) & 0xDF) == 0x54
      && (*(a2 - 5) & 0xDF) == 0x49
      && (*(a2 - 4) & 0xDF) == 0x54
      && (*(a2 - 3) & 0xDF) == 0x4C
      && (*(a2 - 2) & 0xDF) == 0x45;
}

const unsigned __int8 *SkipToTagEnd(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *result;
  int v4;

  result = a1 + 1;
  while (result <= a2)
  {
    v4 = *result++;
    if ((v4 & 0xFFFFFFFD) == 0x3C)
      return result;
  }
  return a1 + 2;
}

uint64_t LookupWatchEnc(uint64_t **a1)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != (uint64_t *)8)
    {
      a1 = (uint64_t **)*a1;
      goto LABEL_9;
    }
    a1 = (uint64_t **)*a1;
  }
  else if (v1 != 8)
  {
    goto LABEL_9;
  }
  if (*a1 == (uint64_t *)0x3846545538465455)
    return 59;
LABEL_9:
  v3 = 0;
  if (!EncodingFromName((_BOOL8)a1, &v3))
    return 0xFFFFFFFFLL;
  result = 0;
  while (kMapToEncoding[result] != v3)
  {
    if (++result == 67)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CompatibleEnc(unsigned int a1, unsigned int a2)
{
  uint64_t result;
  int v4;
  int v5;

  result = 0;
  if (a1 > 0x4A)
    return result;
  if (a2 > 0x4A)
    return result;
  result = 1;
  if (a1 == a2)
    return result;
  if (a2 == 23)
    return result;
  if (a1 == 23)
    return result;
  if (a2 == 24)
    return result;
  if (a1 == 24)
    return result;
  v4 = kMapEncToBaseEncoding[a1];
  v5 = kMapEncToBaseEncoding[a2];
  if (v4 == v5)
    return result;
  if (a1 == 63)
  {
    if (a2 == 22 || !v5)
      return result;
    if (a2 != 63)
      return 0;
    goto LABEL_17;
  }
  if (a2 != 63)
    return 0;
  if (a1 != 22)
  {
LABEL_17:
    if (v4)
      return 0;
  }
  return result;
}

uint64_t SupersetEnc(uint64_t result, unsigned int a2)
{
  if (kMapEncToSuperLevel[result] >= kMapEncToSuperLevel[a2])
    return result;
  else
    return a2;
}

uint64_t Rescore(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  char __str[32];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (FLAGS_counts)
    ++rescore_used;
  v6 = *(unsigned int *)(a4 + 1348);
  if ((int)v6 < 1)
    return a1;
  v7 = 0;
  v8 = 0;
  v9 = a3 - a2;
  v10 = a4 + 264;
  do
  {
    v11 = *(int *)(a4 + 4 * v7 + 1736);
    if ((int)v11 < 1)
      v12 = 32;
    else
      v12 = *(_BYTE *)(a2 + (v11 - 1));
    if ((int)v11 + 1 >= v9)
      v13 = 32;
    else
      v13 = *(unsigned __int8 *)(a2 + v11 + 1);
    if ((int)v11 + 2 >= v9)
      v14 = 32;
    else
      v14 = *(unsigned __int8 *)(a2 + v11 + 2);
    v15 = (*(unsigned __int8 *)(a2 + v11) >> 1) & 0x20 | v12 & 0x80 | (v13 >> 4) & 8 | (v14 >> 6) & 2;
    if (v15 == 32)
    {
      v16 = *(_DWORD *)(a4 + 260);
      if (v16 < 1)
        goto LABEL_26;
      for (i = 0; i < v16; ++i)
      {
        v18 = *(int *)(v10 + 4 * i);
        if ((kSpecialMask[kMapToEncoding[v18]] & 0x800) != 0)
        {
          *(_DWORD *)(a4 + 4 * v18 + 532) += 60;
          v16 = *(_DWORD *)(a4 + 260);
          v8 = 1;
        }
      }
    }
    if (v15 == 170)
    {
      v19 = *(_DWORD *)(a4 + 260);
      if (v19 >= 1)
      {
        for (j = 0; j < v19; ++j)
        {
          v21 = *(int *)(v10 + 4 * j);
          if ((kSpecialMask[kMapToEncoding[v21]] & 0x800) != 0)
          {
            *(_DWORD *)(a4 + 4 * v21 + 532) -= 60;
            v19 = *(_DWORD *)(a4 + 260);
            v8 = 1;
          }
        }
      }
    }
LABEL_26:
    ++v7;
  }
  while (v7 != v6);
  if ((v8 & 1) != 0)
  {
    ReRank(a4);
    a1 = kMapToEncoding[*(int *)(a4 + 240)];
    if (*(_QWORD *)(a4 + 32))
    {
      v22 = MyEncodingName(kMapToEncoding[*(int *)(a4 + 240)]);
      snprintf(__str, 0x20uLL, "=Rescore %s", v22);
      v23 = 0;
      while (kMapToEncoding[v23] != (_DWORD)a1)
      {
        if (++v23 == 67)
        {
          LODWORD(v23) = -1;
          break;
        }
      }
      v24 = *(_DWORD *)(a4 + 40);
      v25 = (_DWORD *)(*(_QWORD *)(a4 + 32) + 304 * v24);
      *v25 = 0;
      v25[1] = v23;
      MEMORY[0x1A85B04D0](v25 + 2, __str);
      memcpy((void *)(*(_QWORD *)(a4 + 32) + 304 * v24 + 32), (const void *)(a4 + 532), 0x10CuLL);
      ++*(_DWORD *)(a4 + 40);
    }
    SimplePrune((_DWORD *)a4, 300);
    CalcReliable(a4);
  }
  return a1;
}

uint64_t AddToSet(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;

  v3 = 0;
  while (kMapToEncoding[v3] != (_DWORD)result)
  {
    if (++v3 == 67)
    {
      LODWORD(v3) = -1;
      break;
    }
  }
  v4 = *a2;
  if (*a2 < 1)
  {
LABEL_9:
    *a2 = v4 + 1;
    a3[v4] = v3;
  }
  else
  {
    v5 = *a2;
    v6 = a3;
    while (1)
    {
      v7 = *v6++;
      if (v7 == (_DWORD)v3)
        break;
      if (!--v5)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t RobustScan(const char *a1, int a2, int a3, int *a4, _DWORD *a5)
{
  _DWORD *v5;
  int v10;
  const char *v11;
  unint64_t v12;
  FILE **v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  _DWORD *v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  FILE *v33;
  uint64_t v34;
  const char *v35;

  v5 = a5;
  if (FLAGS_counts)
    ++robust_used;
  if (a3 >= 1)
    bzero(a5, 4 * a3);
  if (a2 >= 0x40000)
    v10 = 0x40000;
  else
    v10 = a2;
  v11 = &a1[v10];
  v12 = (unint64_t)(v11 - 1);
  if (a2 >= 0x10000)
    a2 = 0x10000;
  v13 = (FILE **)MEMORY[0x1E0C80C10];
  if (FLAGS_enc_detect_source)
  {
    PsSourceInit(32);
    fwrite("(RobustScan) do-src\n", 0x14uLL, 1uLL, *v13);
  }
  if (v12 > (unint64_t)a1)
  {
    v14 = 0;
    v15 = &a1[a2 - 1];
    v16 = &a1[v10 - 1];
    while (1)
    {
      while (a1 < v11 - 3 && (((a1[1] | *a1) | (a1[2] | a1[3])) & 0x80) == 0)
        a1 += 4;
      if ((unint64_t)a1 >= v12)
      {
        v19 = v14;
      }
      else
      {
        v17 = v16 - a1;
        a1 += 2;
        while (1)
        {
          v18 = *(a1 - 2);
          if (v18 < 0)
            break;
          ++a1;
          if (!--v17)
          {
            v19 = v14;
            a1 = v16;
            goto LABEL_23;
          }
        }
        if (a3 >= 1)
        {
          v20 = *((unsigned __int8 *)a1 - 1);
          v21 = v18 & 0xF0 | (v20 >> 4);
          v22 = v20 & 0x80 ^ v18;
          v23 = (32 * (v18 & 0x1Fu)) & 0xFFFFFFFFFFFFFFE0 | v20 & 0x1F;
          v24 = a3;
          v25 = a4;
          v26 = v5;
          do
          {
            v28 = *v25++;
            v27 = v28;
            v29 = (char *)&unigram_table + 808 * v28;
            v30 = v29[v21 + 552];
            if ((v30 & 1) != 0)
              v31 = *(unsigned __int8 *)(*((_QWORD *)&unigram_table + 101 * v27 + ((v20 >> 5) & 3)) + v23);
            else
              v31 = *((_DWORD *)&unigram_table + 202 * v27 + 9);
            *v26++ += v29[v20 + 296] + v29[v22 + 40] + v30 + v31;
            --v24;
          }
          while (v24);
        }
        v19 = (v14 + 1);
        if ((int)v14 >= 1000 && a1 > v15)
          goto LABEL_35;
      }
LABEL_23:
      v14 = v19;
      if ((unint64_t)a1 >= v12)
        goto LABEL_35;
    }
  }
  v19 = 0;
LABEL_35:
  if (FLAGS_enc_detect_source)
  {
    fprintf(*v13, "(  bigram_count = %d) do-src\n", v19);
    if (v19 <= 1)
      v19 = 1;
    else
      v19 = v19;
    if (a3 >= 1)
    {
      v32 = a3;
      do
      {
        v33 = *v13;
        v34 = *a4++;
        v35 = MyEncodingName(kMapToEncoding[v34]);
        LODWORD(v34) = *v5++;
        fprintf(v33, "(  enc[%-12.12s] = %7d (avg %d)) do-src\n", v35, v34, (int)v34 / (int)v19);
        --v32;
      }
      while (v32);
    }
    PsSourceFinish();
  }
  return v19;
}

uint64_t Rescan(uint64_t a1, const char *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, char a11, uint64_t a12)
{
  const char *v12;
  int v14;
  unsigned int v15;
  int v16;
  signed int v17;
  const char *v18;
  unint64_t v19;
  int v20;
  const char *v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  FILE **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  int v67;
  _DWORD *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v77;
  unsigned __int8 v78;
  char v79[4];
  char v80[32];
  char v81[268];
  char __str[4];
  int v83;
  uint64_t v84;

  v12 = a2;
  v84 = *MEMORY[0x1E0C80C00];
  if (FLAGS_counts)
    ++rescan_used;
  if (a4 - (int)a3 >= 801)
  {
    v14 = a4 - (_DWORD)a2;
    v15 = *(_DWORD *)(a12 + 204);
    if (v15 == 23)
    {
      v15 = *(_DWORD *)(a12 + 208);
      if (v15 == 23)
        v15 = *(_DWORD *)(a12 + 212);
    }
    v16 = kMapToEncoding[*(int *)(a12 + 244)];
    v17 = (a3 - (_DWORD)a2 + ((a4 - a3) >> 1)) & 0xFFFFFFFE;
    v18 = &a2[v17];
    if ((unint64_t)(v18 - 192) >= a3)
      v19 = (unint64_t)(v18 - 192);
    else
      v19 = a3;
    v20 = v17 | 1;
    v21 = v18 - 1;
    v75 = *(unsigned __int8 *)(a12 + 45);
    while (v19 <= (unint64_t)v21)
    {
      v22 = *v21--;
      --v20;
      if ((v22 & 0x80000000) == 0)
      {
        v17 = v20 & 0xFFFFFFFE;
        break;
      }
    }
    if (*(_QWORD *)(a12 + 32))
    {
      v74 = a8;
      v72 = a6;
      v73 = a7;
      v71 = a5;
      SetDetailsEncLabel(a12);
      DumpDetail(a12);
      snprintf(__str, 0x20uLL, ">> Rescan[%d..%d]", v17, v14);
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "() end-detail (%s) start-detail\n\n", __str);
      a5 = v71;
      a6 = v72;
      a7 = v73;
      a8 = v74;
      v12 = a2;
    }
    v78 = 0;
    v77 = 0;
    BYTE4(v70) = a11;
    LODWORD(v70) = a10;
    v23 = InternalDetectEncoding(5, &v12[v17], (v14 - v17), a5, a6, a7, a8, a9, v70, v79, &v78, &v77);
    v24 = v78;
    *(_BYTE *)(a12 + 45) = v78;
    v25 = a1;
    v26 = v14;
    if (v23 == 24)
      goto LABEL_29;
    v27 = CompatibleEnc(v15, v23);
    v25 = a1;
    if (v27)
    {
      if (kMapEncToSuperLevel[v15] >= kMapEncToSuperLevel[v23])
        v25 = v15;
      else
        v25 = v23;
    }
    if (v75 && v24)
    {
      if ((CompatibleEnc(a1, v23) & 1) != 0)
      {
        if (kMapEncToSuperLevel[a1] >= kMapEncToSuperLevel[v23])
          return a1;
        else
          return v23;
      }
    }
    else if (!v24)
    {
      goto LABEL_29;
    }
    if ((CompatibleEnc(a1, v23) & v27 & 1) != 0)
      return v25;
LABEL_29:
    v28 = 0;
    while (kMapToEncoding[v28] != (_DWORD)a1)
    {
      if (++v28 == 67)
      {
        LODWORD(v28) = -1;
        break;
      }
    }
    v29 = 0;
    *(_DWORD *)__str = v28;
    while (kMapToEncoding[v29] != v16)
    {
      if (++v29 == 67)
      {
        LODWORD(v29) = -1;
        break;
      }
    }
    if ((_DWORD)v28 == (_DWORD)v29)
    {
      v30 = 1;
    }
    else
    {
      v83 = v29;
      v30 = 2;
    }
    v31 = 0;
    while (kMapToEncoding[v31] != v23)
    {
      if (++v31 == 67)
      {
        LODWORD(v31) = -1;
        break;
      }
    }
    v32 = 0;
    v33 = v30;
    v34 = (FILE **)MEMORY[0x1E0C80C10];
    while (*(_DWORD *)&__str[v32] != (_DWORD)v31)
    {
      v32 += 4;
      if (4 * v30 == v32)
      {
        ++v30;
        *(_DWORD *)&__str[4 * v33] = v31;
        break;
      }
    }
    v35 = 0;
    while (kMapToEncoding[v35] != v77)
    {
      if (++v35 == 67)
      {
        LODWORD(v35) = -1;
        break;
      }
    }
    v36 = 0;
    v37 = v30;
    while (*(_DWORD *)&__str[v36] != (_DWORD)v35)
    {
      v36 += 4;
      if (4 * v30 == v36)
      {
        ++v30;
        *(_DWORD *)&__str[4 * v37] = v35;
        break;
      }
    }
    v38 = *(_DWORD *)(a12 + 204);
    if (v38 != 23)
    {
      v39 = 0;
      while (kMapToEncoding[v39] != v38)
      {
        if (++v39 == 67)
        {
          LODWORD(v39) = -1;
          break;
        }
      }
      v40 = v30;
      v41 = __str;
      v42 = v30;
      while (1)
      {
        v43 = *(_DWORD *)v41;
        v41 += 4;
        if (v43 == (_DWORD)v39)
          break;
        if (!--v42)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v40] = v39;
          break;
        }
      }
    }
    v44 = *(_DWORD *)(a12 + 208);
    if (v44 != 23)
    {
      v45 = 0;
      while (kMapToEncoding[v45] != v44)
      {
        if (++v45 == 67)
        {
          LODWORD(v45) = -1;
          break;
        }
      }
      v46 = v30;
      v47 = __str;
      v48 = v30;
      while (1)
      {
        v49 = *(_DWORD *)v47;
        v47 += 4;
        if (v49 == (_DWORD)v45)
          break;
        if (!--v48)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v46] = v45;
          break;
        }
      }
    }
    v50 = *(_DWORD *)(a12 + 212);
    if (v50 != 23)
    {
      v51 = 0;
      while (kMapToEncoding[v51] != v50)
      {
        if (++v51 == 67)
        {
          LODWORD(v51) = -1;
          break;
        }
      }
      v52 = v30;
      v53 = __str;
      v54 = v30;
      while (1)
      {
        v55 = *(_DWORD *)v53;
        v53 += 4;
        if (v55 == (_DWORD)v51)
          break;
        if (!--v54)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v52] = v51;
          break;
        }
      }
    }
    v56 = *(_DWORD *)(a12 + 200);
    if (v56 != 23)
    {
      v57 = 0;
      while (kMapToEncoding[v57] != v56)
      {
        if (++v57 == 67)
        {
          LODWORD(v57) = -1;
          break;
        }
      }
      v58 = v30;
      v59 = __str;
      v60 = v30;
      while (1)
      {
        v61 = *(_DWORD *)v59;
        v59 += 4;
        if (v61 == (_DWORD)v57)
          break;
        if (!--v60)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v58] = v57;
          break;
        }
      }
    }
    if (*(_QWORD *)(a12 + 32))
    {
      SetDetailsEncLabel(a12);
      DumpDetail(a12);
      snprintf(v81, 0x20uLL, ">> RobustScan[0..%d]", v26);
      fprintf(*v34, "() end-detail (%s) start-detail\n\n", v81);
    }
    v62 = RobustScan(a2, v26, v30, (int *)__str, v81);
    v63 = 0;
    v64 = -1;
    do
    {
      if (v64 < *(_DWORD *)&v81[v63])
      {
        v25 = kMapToEncoding[*(int *)&__str[v63]];
        v64 = *(_DWORD *)&v81[v63];
      }
      v63 += 4;
    }
    while (4 * v30 != v63);
    if (*(_QWORD *)(a12 + 32))
    {
      v65 = MyEncodingName(v25);
      snprintf(v80, 0x20uLL, "=Robust[%d] %s", v62, v65);
      v66 = 0;
      while (kMapToEncoding[v66] != (_DWORD)v25)
      {
        if (++v66 == 67)
        {
          LODWORD(v66) = -1;
          break;
        }
      }
      v67 = *(_DWORD *)(a12 + 40);
      v68 = (_DWORD *)(*(_QWORD *)(a12 + 32) + 304 * v67);
      *v68 = 0;
      v68[1] = v66;
      MEMORY[0x1A85B04D0](v68 + 2, v80);
      memcpy((void *)(*(_QWORD *)(a12 + 32) + 304 * v67 + 32), (const void *)(a12 + 532), 0x10CuLL);
      ++*(_DWORD *)(a12 + 40);
    }
    return v25;
  }
  return a1;
}

uint64_t InternalDetectEncoding(char a1, int8x8_t *a2, int a3, char *a4, char *a5, char *a6, unsigned int a7, unsigned int a8, unsigned int a9, char a10, _DWORD *a11, unsigned __int8 *a12, _DWORD *a13)
{
  uint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  const unsigned __int8 *v28;
  _BYTE *v29;
  uint64_t **v30;
  int v31;
  FILE **v32;
  uint64_t **v33;
  int v34;
  const unsigned __int8 *v35;
  uint64_t v36;
  int8x8_t *v37;
  int v38;
  const unsigned __int8 *v39;
  int v40;
  int8x8_t *v41;
  uint64_t v42;
  int8x8_t *v43;
  int8x8_t *v44;
  const unsigned __int8 *v45;
  int v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  int v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v79;
  unsigned int v80;
  unsigned int v82;
  int v83;
  BOOL v84;
  int v85;
  char v86;
  uint64_t v87;
  char v89;
  _BOOL4 v91;
  uint64_t v92;
  char v93;
  char *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  char *v99;
  unsigned int v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unint64_t v106;
  int v107;
  const unsigned __int8 *v108;
  _OWORD *v110;
  _QWORD v111[4];
  _OWORD *v112;
  int v113;
  char v114;
  unsigned __int8 v115;
  char v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  _BYTE v124[268];
  int v125;
  char __str[23];
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  *a11 = 0;
  *a12 = 0;
  *a13 = 24;
  if (!a3)
  {
    v19 = 0;
    *a12 = 1;
    return v19;
  }
  if (a3 <= 500 && a10 && QuickPrintableAsciiScan(a2, a3))
  {
    *a12 = 1;
    return 24;
  }
  InitDetectEncodingState((uint64_t)v111);
  v110 = 0;
  v98 = a7;
  v96 = (uint64_t)a5;
  v97 = a6;
  v95 = a8;
  v94 = a4;
  if (FLAGS_enc_detect_detail)
  {
    v20 = (_OWORD *)operator new[]();
    *v20 = xmmword_1A59BA430;
    v21 = (_QWORD *)v20 + 3;
    v22 = v20 + 1;
    v23 = 145920;
    do
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      v21 += 38;
      v23 -= 304;
    }
    while (v23);
    v24 = (uint64_t)v110;
    v110 = v20 + 1;
    if (v24)
    {
      std::default_delete<DetailEntry []>::operator()[abi:ne180100]<DetailEntry>((uint64_t)&v110, v24);
      v22 = v110;
    }
    v112 = v22;
  }
  else
  {
    v22 = v112;
  }
  if (a3 >= FLAGS_enc_detect_slow_max_kb << 10)
    v25 = FLAGS_enc_detect_slow_max_kb << 10;
  else
    v25 = a3;
  if (a3 >= FLAGS_enc_detect_fast_max_kb << 10)
    v26 = FLAGS_enc_detect_fast_max_kb << 10;
  else
    v26 = a3;
  v27 = (char *)a2 + v26;
  v104 = v25;
  v106 = (unint64_t)(v27 - 1);
  if (v25 <= v26)
    v28 = (const unsigned __int8 *)a2 + v25 - 1;
  else
    v28 = (const unsigned __int8 *)(v27 - 1);
  v111[0] = a2;
  v111[1] = (char *)a2 + v26;
  v111[2] = a2;
  v111[3] = (char *)a2 - 2;
  if (a10)
    v29 = &kTestPrintableAscii;
  else
    v29 = &kTestPrintableAsciiTildePlus;
  if (v22)
  {
    BeginDetail((uint64_t)v111);
    v30 = (uint64_t **)std::string::basic_string[abi:ne180100]<0>(__str, "");
    v31 = LookupWatchEnc(v30);
    watch1_rankedenc = v31;
    if (v127 < 0)
    {
      operator delete(*(void **)__str);
      v31 = watch1_rankedenc;
    }
    v32 = (FILE **)MEMORY[0x1E0C80C10];
    if ((v31 & 0x80000000) == 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "/track-me %d def\n", v31);
    v33 = (uint64_t **)std::string::basic_string[abi:ne180100]<0>(__str, "");
    v34 = LookupWatchEnc(v33);
    watch2_rankedenc = v34;
    if (v127 < 0)
    {
      operator delete(*(void **)__str);
      v34 = watch2_rankedenc;
    }
    if ((v34 & 0x80000000) == 0)
      fprintf(*v32, "/track-me2 %d def\n", v34);
    fprintf(*v32, "%% kDerateHintsBelow = %d\n", 12);
  }
  v35 = (const unsigned __int8 *)a2 + a3;
  if (FLAGS_enc_detect_source)
  {
    PsSourceInit(32);
    PsSource((size_t)a2, (const unsigned __int8 *)a2, v35);
    *(_QWORD *)pssource_mark_buffer = 0x2D2D2D2D2D2D3D3DLL;
  }
  ApplyHints(v94, a5, v97, v98, a8, a9, (uint64_t)v111);
  InitialBytesBoost((unsigned __int8 *)a2, a3, (uint64_t)v111);
  v93 = 0;
  v107 = 0;
  v36 = v26;
  v99 = v27 - 3;
  v37 = a2;
  v102 = v36;
  v103 = (unsigned __int8 *)(v35 - 1);
  v101 = a3;
  v38 = a3 + (_DWORD)a2 + 1;
  v108 = (const unsigned __int8 *)a2 + a3;
  v39 = (const unsigned __int8 *)v106;
  v40 = v104;
  while (1)
  {
    if (v37 < (int8x8_t *)v28)
    {
      v105 = v40;
      while (1)
      {
        v41 = v37;
LABEL_42:
        v42 = 0;
        v43 = v41;
        do
        {
          v44 = v43;
          v45 = (const unsigned __int8 *)v41 + v42;
          if (&v41->i8[v42] >= (__int8 *)v28)
            goto LABEL_57;
          v46 = (char)v29[*v45];
          v43 = (int8x8_t *)((char *)v44 + 1);
          ++v42;
        }
        while (!v46);
        if (FLAGS_enc_detect_source)
          PsSource((size_t)v41 + v42 - 1, (const unsigned __int8 *)a2, v108);
        if (a1 & 4 | a9 || !TextInsideTag((const unsigned __int8 *)a2, (const unsigned __int8 *)v41 + v42 - 1, v28))
          break;
        if (v107 < 12)
        {
          ++v107;
          v47 = 4;
          v48 = 120;
          goto LABEL_52;
        }
        v37 = (int8x8_t *)((char *)v41 + v42);
        while (v37 <= (int8x8_t *)v28)
        {
          v52 = v37->u8[0];
          v37 = (int8x8_t *)((char *)v37 + 1);
          if ((v52 & 0xFFFFFFFD) == 0x3C)
            goto LABEL_64;
        }
        v37 = (int8x8_t *)((char *)v41 + v42 + 1);
LABEL_64:
        v93 = 1;
        v35 = v108;
        v39 = (const unsigned __int8 *)v106;
        v40 = v105;
        if (v37 >= (int8x8_t *)v28)
          goto LABEL_67;
      }
      v47 = 0;
      v48 = 45;
LABEL_52:
      if (FLAGS_enc_detect_source)
      {
        v49 = pssource_mark_buffer;
        v50 = 2 * ((~(_DWORD)a2 + (int)v41 + (int)v42) % pssourcewidth);
        *(_WORD *)(pssource_mark_buffer + v50) = 15677;
        *(_WORD *)(v49 + v50 + 2) = v48 | (v48 << 8);
      }
      v51 = IncrementAndBoostPrune((unsigned __int8 *)v41 + v42 - 1, v38 - (int)v41 - (int)v42, (uint64_t)v111, v47, v46);
      v45 = (const unsigned __int8 *)v41 + v46 + v42 - 1;
      if (!v51)
        goto LABEL_57;
      if (v114)
      {
        v37 = (int8x8_t *)((char *)v44 + v46);
      }
      else
      {
        if ((v117 & 1) != 0)
        {
LABEL_57:
          v41 = (int8x8_t *)v45;
          if (v45 < v28)
            goto LABEL_42;
          v37 = (int8x8_t *)v45;
          goto LABEL_66;
        }
        v37 = (int8x8_t *)((char *)v41 + v46 + v42 - 1);
      }
LABEL_66:
      v35 = v108;
      v39 = (const unsigned __int8 *)v106;
      v40 = v105;
    }
LABEL_67:
    if (v37 == (int8x8_t *)v103 && (v54 = *v103, v29[v54]))
    {
      v53 = 1;
      IncrementAndBoostPrune(v103, 1, (uint64_t)v111, 0, (char)v29[v54]);
    }
    else
    {
      v53 = 0;
    }
    if (FLAGS_enc_detect_source)
    {
      PsSource((size_t)v37, (const unsigned __int8 *)a2, v35);
      v55 = pssource_mark_buffer;
      v56 = 2 * (((int)v37 - (int)a2) % pssourcewidth);
      *(_WORD *)(pssource_mark_buffer + v56) = 15677;
      *(_WORD *)(v55 + v56 + 2) = 11565;
    }
    BoostPrune((uint64_t)v37, (uint64_t)v111, 1);
    if (v114)
    {
      v57 = v101;
      v58 = a9;
      goto LABEL_112;
    }
    if ((v117 & 1) == 0 || v37 >= (int8x8_t *)v39)
      break;
    v40 += FLAGS_enc_detect_slow_max_kb << 10;
    if (v40 <= (int)v102)
      v28 = (const unsigned __int8 *)&a2[-1] + v40 + 7;
    else
      v28 = v39;
    if ((v117 & 6) == 0)
      v29 = &kTestPrintableAscii;
  }
  if (v37 >= (int8x8_t *)v39)
  {
    v57 = v101;
  }
  else
  {
    v57 = v101;
    v59 = (unint64_t)v99;
    do
    {
      while ((unint64_t)v37 < v59
           && (((v37->i8[1] | v37->i8[0]) | (v37->i8[2] | v37->i8[3])) & 0x80) == 0)
        v37 = (int8x8_t *)((char *)v37 + 4);
      if ((unint64_t)v37 < v106)
      {
        v60 = 0;
        while ((v37->i8[v60] & 0x80000000) == 0)
        {
          ++v60;
          if (!&v37->i8[1 - ((_QWORD)a2 + v102) + v60])
          {
            v37 = (int8x8_t *)((char *)a2 + v102 - 1);
            v57 = v101;
            goto LABEL_101;
          }
        }
        if (FLAGS_enc_detect_source)
        {
          PsSource((size_t)v37 + v60, (const unsigned __int8 *)a2, v108);
          v61 = pssource_mark_buffer;
          v62 = 2 * (((int)v37 - (int)a2 + (int)v60) % pssourcewidth);
          *(_WORD *)(pssource_mark_buffer + v62) = 15677;
          *(_WORD *)(v61 + v62 + 2) = 11565;
        }
        v63 = IncrementAndBoostPrune((unsigned __int8 *)v37 + v60, (int)v108 - ((int)v37 + (int)v60), (uint64_t)v111, 0, 2);
        v37 = (int8x8_t *)((char *)v37 + v60 + 2);
        v64 = v114 ? v63 : 0;
        v57 = v101;
        v59 = (unint64_t)v99;
        if (v64 == 1)
          break;
      }
LABEL_101:
      ;
    }
    while ((unint64_t)v37 < v106);
  }
  if (v37 == (int8x8_t *)v103)
    v65 = v53;
  else
    v65 = 1;
  v58 = a9;
  v35 = v108;
  if ((v65 & 1) == 0)
  {
    v66 = *v103;
    if (v29[v66])
      IncrementAndBoostPrune(v103, 1, (uint64_t)v111, 0, (char)v29[v66]);
    v37 = (int8x8_t *)v103;
  }
LABEL_112:
  if (FLAGS_enc_detect_source)
  {
    PsSource((size_t)v37, (const unsigned __int8 *)a2, v35);
    v67 = pssource_mark_buffer;
    v68 = 2 * (((int)v37 - (int)a2) % pssourcewidth);
    *(_WORD *)(pssource_mark_buffer + v68) = 15677;
    *(_WORD *)(v67 + v68 + 2) = 11565;
  }
  BoostPrune((uint64_t)v37, (uint64_t)v111, 2);
  if (FLAGS_enc_detect_summary)
  {
    DumpSummary((uint64_t)v111, 0, 32);
    DumpSummary((uint64_t)v111, 1, 32);
  }
  if (FLAGS_enc_detect_source)
    PsSourceFinish();
  v69 = v122;
  if (v122 != 0 || (v93 & 1) == 0)
  {
    v19 = kMapToEncoding[v122];
    v77 = v120;
    if (v120 != 23 && v119 == 23)
      v79 = v120;
    else
      v79 = v119;
    v80 = v121;
    if (v121 != 23 && v79 == 23)
      v82 = v121;
    else
      v82 = v79;
    if (v82 == 23)
    {
      if (v122 == 1)
      {
        if (!v116)
        {
          v83 = v115;
          v84 = v115 == 0;
LABEL_161:
          v85 = 1;
          goto LABEL_162;
        }
LABEL_160:
        v84 = 0;
        v83 = 1;
        v115 = 1;
        goto LABEL_161;
      }
      if (!kMapEncToBaseEncoding[v19] || v19 <= 0x3F && ((1 << v19) & 0x8000000001800000) != 0)
      {
        v85 = 1;
        goto LABEL_153;
      }
      v82 = v118;
      if (v118 == 23)
      {
LABEL_152:
        v85 = 0;
        goto LABEL_153;
      }
    }
    else if (!CompatibleEnc(v82, v119)
           || !CompatibleEnc(v82, v77)
           || !CompatibleEnc(v82, v80))
    {
      goto LABEL_152;
    }
    v85 = CompatibleEnc(v82, v19);
LABEL_153:
    if (!v116
      || v69 != 1
      && kMapEncToBaseEncoding[v19]
      && (v19 > 0x3F || ((1 << v19) & 0x8000000001800000) == 0)
      && (v69 > 0x29 || ((1 << v69) & 0x20020011200) == 0))
    {
      v83 = v115;
      v84 = v115 == 0;
      if (v115)
        v89 = v85;
      else
        v89 = 1;
      if ((v89 & 1) == 0)
      {
        v91 = (v19 - 10) < 0x36 && ((0x20000000007803uLL >> (v19 - 10)) & 1) != 0
           || v69 == 5
           || (kMapEncToBaseEncoding[v19] - 13) < 2;
        LOBYTE(v85) = 0;
        if (!v91 || v125 < 6)
          goto LABEL_164;
        v84 = 0;
        v85 = a1 & 1;
        v83 = 1;
      }
LABEL_162:
      if (!v84 && v85)
      {
LABEL_165:
        *a13 = kMapToEncoding[v123];
        if (v83)
          v86 = v85;
        else
          v86 = 0;
        if ((a1 & 1) != 0 || (v86 & 1) != 0 || (kSpecialMask[(int)v19] & 1) != 0)
        {
          if ((v85 & 1) == 0)
            v115 = 0;
        }
        else
        {
          v19 = Rescan(v19, (const char *)a2, (unint64_t)v37, (int)v35, (uint64_t)v94, v96, (uint64_t)v97, v98, v95, a9, a10, (uint64_t)v111);
        }
        if (v112)
          DumpDetail((uint64_t)v111);
        *a11 = (_DWORD)v37 - (_DWORD)a2 + 1;
        *a12 = v115;
        goto LABEL_177;
      }
LABEL_164:
      v19 = Rescore(v19, (uint64_t)a2, (int)v35, (uint64_t)v111);
      v83 = v115;
      goto LABEL_165;
    }
    goto LABEL_160;
  }
  if (v112)
  {
    v70 = v113;
    v71 = &v112[19 * v113];
    *v71 = *(v71 - 76);
    v71[1] = -1;
    MEMORY[0x1A85B04D0](v71 + 2, ">> Recurse/tags");
    memcpy(&v112[19 * v70 + 2], v124, 0x10CuLL);
    ++v113;
    DumpDetail((uint64_t)v111);
    strcpy(__str, ">> Recurse for tags");
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "() end-detail (%s) start-detail\n\n", __str);
  }
  BYTE4(v92) = a10;
  LODWORD(v92) = v58;
  v72 = InternalDetectEncoding(4, a2, v57, v94, v96, v97, v98, v95, v92, a11, a12, a13);
  v19 = v72;
  if (v112)
  {
    v73 = MyEncodingName(v72);
    snprintf(__str, 0x20uLL, "=2 %s", v73);
    v74 = 0;
    while (kMapToEncoding[v74] != (_DWORD)v19)
    {
      if (++v74 == 67)
      {
        LODWORD(v74) = -1;
        break;
      }
    }
    v75 = v113;
    v76 = &v112[19 * v113];
    *v76 = 0;
    v76[1] = v74;
    MEMORY[0x1A85B04D0](v76 + 2, __str);
    memcpy(&v112[19 * v75 + 2], v124, 0x10CuLL);
    ++v113;
    DumpDetail((uint64_t)v111);
  }
LABEL_177:
  v87 = (uint64_t)v110;
  v110 = 0;
  if (v87)
    std::default_delete<DetailEntry []>::operator()[abi:ne180100]<DetailEntry>((uint64_t)&v110, v87);
  return v19;
}

void sub_1A57C5918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v34;

  v34 = a33;
  a33 = 0;
  if (v34)
    std::default_delete<DetailEntry []>::operator()[abi:ne180100]<DetailEntry>((uint64_t)&a33, v34);
  _Unwind_Resume(exception_object);
}

BOOL NoHintsCloseEnoughCompatible(unsigned int a1)
{
  if (a1 <= 0x4A && a1 - 10 < 0x36 && ((0x20000000007803uLL >> (a1 - 10)) & 1) != 0)
    return 1;
  return a1 == 16 || (kMapEncToBaseEncoding[a1] - 13) < 2;
}

uint64_t CompactEncDet::DetectEncoding(int8x8_t *__src, int a2, char *a3, char *a4, char *a5, unsigned int a6, unsigned int a7, unsigned int a8, char a9, int *a10, unsigned __int8 *a11)
{
  char *v15;
  unsigned int v18;
  char *v20;
  char *v21;
  int *v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _DWORD v53[67];
  int __dst[5];
  char v55;
  uint64_t v56;

  v15 = a3;
  v56 = *MEMORY[0x1E0C80C00];
  if (FLAGS_ced_echo_input)
  {
    v18 = a8;
    v20 = a4;
    v21 = a5;
    std::string::basic_string[abi:ne180100](__dst, __src, a2);
    if (v55 >= 0)
      v22 = __dst;
    else
      v22 = *(int **)__dst;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CompactEncDet::DetectEncoding()\n%s\n\n", (const char *)v22);
    if (v55 < 0)
      operator delete(*(void **)__dst);
    a5 = v21;
    a4 = v20;
    v15 = a3;
    a8 = v18;
  }
  if (FLAGS_counts)
  {
    rescore_used = 0;
    rescan_used = 0;
    robust_used = 0;
    looking_used = 0;
    doing_used = 0;
    encdet_used = 1;
  }
  if (FLAGS_dirtsimple)
  {
    for (i = 0; i != 67; ++i)
      __dst[i] = i;
    RobustScan((const char *)__src, a2, 67, __dst, v53);
    v24 = 0;
    v25 = -1;
    v26 = 23;
    do
    {
      if (v25 < v53[v24])
      {
        v26 = kMapToEncoding[__dst[v24]];
        v25 = v53[v24];
      }
      ++v24;
    }
    while (v24 != 67);
    if (a2 >= 0x40000)
      v27 = 0x40000;
    else
      v27 = a2;
    *a10 = v27;
    *a11 = 1;
    if (FLAGS_counts)
    {
      printf("CEDcounts ");
      while (encdet_used--)
        printf("encdet ");
      while (rescore_used--)
        printf("rescore ");
      while (rescan_used--)
        printf("rescan ");
      while (robust_used--)
        printf("robust ");
      while (looking_used--)
        printf("looking ");
      while (doing_used--)
        printf("doing ");
LABEL_47:
      putchar(10);
    }
  }
  else
  {
    v26 = InternalDetectEncoding(0, __src, a2, v15, a4, a5, a6, a7, a8, a9, a10, a11, __dst);
    if (FLAGS_counts)
    {
      printf("CEDcounts ");
      while (encdet_used--)
        printf("encdet ");
      while (rescore_used--)
        printf("rescore ");
      while (rescan_used--)
        printf("rescan ");
      while (robust_used--)
        printf("robust ");
      while (looking_used--)
        printf("looking ");
      while (doing_used--)
        printf("doing ");
      goto LABEL_47;
    }
  }
  return v26;
}

uint64_t CompactEncDet::TopEncodingOfLangHint(CompactEncDet *this, const char *a2)
{
  int v2;
  void *v3;
  unint64_t *v4;
  int v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  MakeChar8((uint64_t *)__p, v10);
  if (v9 < 0)
    operator delete(__p[0]);
  v2 = v11;
  v3 = (void *)v10[0];
  if (v11 >= 0)
    v4 = v10;
  else
    v4 = (unint64_t *)v10[0];
  v5 = HintBinaryLookup8((uint64_t)kLangHintProbs, 151, v4);
  if (v5 < 0)
  {
    v6 = 23;
    if ((v2 & 0x80000000) == 0)
      return v6;
    goto LABEL_8;
  }
  v6 = kMapToEncoding[(int)TopCompressedProb((const char *)&kLangHintProbs[20 * v5 + 8], 12)];
  if (v2 < 0)
LABEL_8:
    operator delete(v3);
  return v6;
}

void sub_1A57C5F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CompactEncDet::TopEncodingOfCharsetHint(CompactEncDet *this, const char *a2)
{
  int v2;
  void *v3;
  unint64_t *v4;
  int v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  MakeChar44((uint64_t *)__p, v10);
  if (v9 < 0)
    operator delete(__p[0]);
  v2 = v11;
  v3 = (void *)v10[0];
  if (v11 >= 0)
    v4 = v10;
  else
    v4 = (unint64_t *)v10[0];
  v5 = HintBinaryLookup8((uint64_t)kCharsetHintProbs, 438, v4);
  if (v5 < 0)
  {
    v6 = 23;
    if ((v2 & 0x80000000) == 0)
      return v6;
    goto LABEL_8;
  }
  v6 = kMapToEncoding[(int)TopCompressedProb((const char *)&kCharsetHintProbs[20 * v5 + 8], 12)];
  if (v2 < 0)
LABEL_8:
    operator delete(v3);
  return v6;
}

void sub_1A57C6008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *CompactEncDet::Version(CompactEncDet *this)
{
  return "2.2";
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4E59BF0, MEMORY[0x1E0DE42D0]);
}

void sub_1A57C6130(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::default_delete<DetailEntry []>::operator()[abi:ne180100]<DetailEntry>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 - 8);
    if (v3)
    {
      v4 = 304 * v3;
      do
      {
        if (*(char *)(a2 + v4 - 273) < 0)
          operator delete(*(void **)(a2 + v4 - 296));
        v4 -= 304;
      }
      while (v4);
    }
    JUMPOUT(0x1A85B04E8);
  }
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

const char *MyEncodingName(unsigned int a1)
{
  unsigned int v2;
  char **v3;

  if ((a1 & 0x80000000) == 0)
  {
    if (!a1)
      return "Latin1";
    if (a1 <= 0x4A)
      return EncodingName(a1);
    if (a1 <= 0x4E)
    {
      v2 = a1 - 75;
      v3 = kFakeEncodingName2;
      return v3[v2];
    }
    v2 = a1 - 100;
    if (a1 - 100 <= 0x13)
    {
      v3 = kFakeEncodingName;
      return v3[v2];
    }
  }
  return "~";
}

_QWORD *MakeChar44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;

  result = std::string::basic_string[abi:ne180100]<0>(a2, "________");
  v4 = *((char *)a1 + 23) < 0;
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    do
    {
      if (v4)
        v10 = (uint64_t *)*a1;
      else
        v10 = a1;
      v11 = *((unsigned __int8 *)v10 + v6);
      if (kIsAlpha[v11])
      {
        if (v8 <= 3)
        {
          v12 = kCharsetToLowerTbl[v11];
          if (*((char *)result + 23) >= 0)
            v13 = result;
          else
            v13 = (_QWORD *)*result;
          *((_BYTE *)v13 + v8++) = v12;
        }
      }
      else if (kIsDigit[v11])
      {
        if (v7 > 3)
        {
          if (*((char *)result + 23) >= 0)
            v15 = result;
          else
            v15 = (_QWORD *)*result;
          *((_BYTE *)v15 + 4) = *((_BYTE *)v15 + 5);
          if (*((char *)result + 23) >= 0)
            v16 = result;
          else
            v16 = (_QWORD *)*result;
          *((_BYTE *)v16 + 5) = *((_BYTE *)v16 + 6);
          if (*((char *)result + 23) >= 0)
            v17 = result;
          else
            v17 = (_QWORD *)*result;
          *((_BYTE *)v17 + 6) = *((_BYTE *)v17 + 7);
          v14 = 7;
        }
        else
        {
          v14 = v7 + 4;
        }
        v18 = kCharsetToLowerTbl[v11];
        if (*((char *)result + 23) >= 0)
          v19 = result;
        else
          v19 = (_QWORD *)*result;
        *((_BYTE *)v19 + v14) = v18;
        ++v7;
      }
      v6 = v9;
      v4 = *((char *)a1 + 23) < 0;
      v20 = *((unsigned __int8 *)a1 + 23);
      if ((v20 & 0x80u) != 0)
        v20 = a1[1];
    }
    while (v20 > v9++);
  }
  return result;
}

_QWORD *MakeChar4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;

  result = std::string::basic_string[abi:ne180100]<0>(a2, "____");
  v4 = *((char *)a1 + 23);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = v4 < 0;
  v7 = a1[1];
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = a1[1];
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      if (v6)
        v12 = (uint64_t *)*a1;
      else
        v12 = a1;
      v13 = *((unsigned __int8 *)v12 + v9);
      if (kIsDigit[v13] | kIsAlpha[v13])
        v14 = v10 <= 3;
      else
        v14 = 0;
      if (v14)
      {
        if (*((char *)result + 23) >= 0)
          v15 = result;
        else
          v15 = (_QWORD *)*result;
        *((_BYTE *)v15 + v10++) = kCharsetToLowerTbl[v13];
        v5 = *((unsigned __int8 *)a1 + 23);
        v7 = a1[1];
      }
      v9 = v11;
      v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0)
        v16 = v5;
      else
        v16 = v7;
      v14 = v16 > v11++;
    }
    while (v14);
  }
  return result;
}

_QWORD *MakeChar8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;

  result = std::string::basic_string[abi:ne180100]<0>(a2, "________");
  v4 = *((char *)a1 + 23);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = v4 < 0;
  v7 = a1[1];
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = a1[1];
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      if (v6)
        v12 = (uint64_t *)*a1;
      else
        v12 = a1;
      v13 = *((unsigned __int8 *)v12 + v9);
      if (kIsDigit[v13] | kIsAlpha[v13])
        v14 = v10 <= 7;
      else
        v14 = 0;
      if (v14)
      {
        if (*((char *)result + 23) >= 0)
          v15 = result;
        else
          v15 = (_QWORD *)*result;
        *((_BYTE *)v15 + v10++) = kCharsetToLowerTbl[v13];
        v5 = *((unsigned __int8 *)a1 + 23);
        v7 = a1[1];
      }
      v9 = v11;
      v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0)
        v16 = v5;
      else
        v16 = v7;
      v14 = v16 > v11++;
    }
    while (v14);
  }
  return result;
}

uint64_t default_encoding(void)
{
  return 0;
}

BOOL IsValidEncoding(unsigned int a1)
{
  return a1 < 0x4B;
}

unint64_t IsEncEncCompatible(unsigned int a1, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;

  v2 = 0;
  if (a1 <= 0x4A && a2 <= 0x4A)
  {
    v2 = 1;
    if (a2 != a1 && a2 != 23)
    {
      if (a1 == 23)
      {
        return 0;
      }
      else if (a1 == 24)
      {
        if (a2 >= 0x36)
          return 0;
        else
          return (0x20EEFFFFFDEFFFuLL >> a2) & 1;
      }
      else if ((a1 || a2 != 27)
             && (a1 != 7 || a2 != 38)
             && (a1 != 38 || a2 != 7)
             && (a1 != 8 || a2 != 31)
             && (a1 != 33 || a2 != 34)
             && (a1 != 11 || a2 != 21)
             && (a1 != 13 || a2 != 20))
      {
        if (a1 == 14 && a2 - 45 < 2)
          return 1;
        if (a1 == 15 && a2 == 18)
          return 1;
        if (a1 == 15 && a2 == 19)
          return 1;
        v3 = a2 == 15 || a2 == 19;
        v4 = v3;
        return a1 == 18 && v4 || (a2 == 15 || a2 == 18) && a1 == 19;
      }
    }
  }
  return v2;
}

uint64_t IsSupersetOfAscii7Bit(unsigned int a1)
{
  return (a1 < 0x36) & (0x20EEFFFFFDEFFFuLL >> a1);
}

uint64_t Is8BitEncoding(unsigned int a1)
{
  return (a1 < 0x2C) & (0xE3BDB0003FFuLL >> a1);
}

uint64_t IsCJKEncoding(unsigned int a1)
{
  return (a1 < 0x3F) & (0x4001F000003DFC00uLL >> a1);
}

uint64_t IsHebrewEncoding(unsigned int a1)
{
  return (a1 < 0x27) & (0x7000000080uLL >> a1);
}

uint64_t IsRightToLeftEncoding(unsigned int a1)
{
  return (a1 < 0x27) & (0x78000000A0uLL >> a1);
}

uint64_t IsLogicalRightToLeftEncoding(unsigned int a1)
{
  return (a1 < 0x27) & (0x3800000020uLL >> a1);
}

BOOL IsVisualRightToLeftEncoding(int a1)
{
  return a1 == 7 || a1 == 38;
}

uint64_t IsIso2022Encoding(int a1)
{
  unsigned int v1;

  v1 = ((a1 - 12) < 0x3F) & (0x6000000000000001uLL >> (a1 - 12));
  if (a1 == 44)
    v1 = 1;
  if (a1 == 48)
    return 1;
  else
    return v1;
}

uint64_t IsIso2022JpOrVariant(int a1)
{
  return ((a1 - 12) < 0x3F) & (0x6000000000000001uLL >> (a1 - 12));
}

uint64_t IsShiftJisOrVariant(int a1)
{
  return ((a1 - 11) < 0x3E) & (0x3800000000000401uLL >> (a1 - 11));
}

BOOL IsJapaneseCellPhoneCarrierSpecificEncoding(int a1)
{
  return (a1 - 70) < 5;
}

const char *EncodingName(unsigned int a1)
{
  if (a1 <= 0x4A)
    return kEncodingInfoTable[3 * a1];
  else
    return "invalid_encoding";
}

const char *invalid_encoding_name(void)
{
  return "invalid_encoding";
}

const char *MimeEncodingName(unsigned int a1)
{
  if (a1 <= 0x4A)
    return kEncodingInfoTable[3 * a1 + 1];
  else
    return "";
}

BOOL EncodingFromName(_BOOL8 result, _DWORD *a2)
{
  const char *v3;
  unint64_t v4;
  const char **v5;
  const char *v6;
  int v7;

  *a2 = 23;
  if (result)
  {
    v3 = (const char *)result;
    if (!strcasecmp((const char *)result, "ASCII"))
    {
      v7 = 0;
      result = 1;
LABEL_8:
      *a2 = v7;
    }
    else
    {
      v4 = -1;
      v5 = (const char **)off_1E4F12990;
      while (v4 != 73)
      {
        v6 = *v5;
        v5 += 3;
        ++v4;
        if (!strcasecmp(v3, v6))
        {
          result = v4 < 0x4A;
          v7 = v4 + 1;
          goto LABEL_8;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t EncodingNameAliasToEncoding(char *a1)
{
  unsigned __int8 v1;
  uint64_t **v2;
  char *v4;

  v4 = a1;
  if (!a1)
    return 23;
  {
    GetEncodingMap(void)::encoding_map = 0u;
    unk_1EE7BA4C8 = 0u;
    dword_1EE7BA4D8 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<char const*,Encoding,CStringAlnumCaseHash,CStringAlnumCaseEqual,std::allocator<std::pair<char const* const,Encoding>>>::~unordered_map[abi:ne180100], &GetEncodingMap(void)::encoding_map, &dword_1A4F90000);
  }
  if (GetEncodingMap(void)::onceToken != -1)
    dispatch_once(&GetEncodingMap(void)::onceToken, &__block_literal_global_63);
  v2 = std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::find<char const*>(&GetEncodingMap(void)::encoding_map, &v4);
  if (v2)
    return *((unsigned int *)v2 + 6);
  else
    return 23;
}

const char *default_encoding_name(void)
{
  return "ASCII";
}

uint64_t PreferredWebOutputEncoding(unsigned int a1)
{
  if (a1 > 0x4A)
    return 22;
  else
    return LODWORD(kEncodingInfoTable[3 * a1 + 2]);
}

uint64_t **std::unordered_map<char const*,Encoding,CStringAlnumCaseHash,CStringAlnumCaseEqual,std::allocator<std::pair<char const* const,Encoding>>>::operator[](_QWORD *a1, char **a2)
{
  uint64_t **inserted;
  _QWORD *v5;

  inserted = std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::find<char const*>(a1, a2);
  if (!inserted)
  {
    v5 = operator new(0x20uLL);
    v5[2] = *a2;
    *((_DWORD *)v5 + 6) = 0;
    inserted = std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique(a1, (uint64_t)v5);
  }
  return inserted + 3;
}

void sub_1A57C8940(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char **v4;
  unint64_t v5;
  uint64_t **v6;

  v2 = (_QWORD *)a2;
  v4 = (char **)(a2 + 16);
  v5 = CStringAlnumCaseHash::operator()((uint64_t)(a1 + 3), *(_BYTE **)(a2 + 16));
  *(v4 - 1) = (char *)v5;
  v6 = std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (uint64_t **)v2;
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::find<char const*>(_QWORD *a1, char **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;

  v4 = CStringAlnumCaseHash::operator()((uint64_t)(a1 + 3), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (CStringAlnumCaseEqual::operator()(v12, (char *)v11[2], *a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;

  v4 = CStringAlnumCaseHash::operator()((uint64_t)(a1 + 3), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (CStringAlnumCaseEqual::operator()(v12, (char *)v11[2], *a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t CStringAlnumCaseHash::operator()(uint64_t a1, _BYTE *a2)
{
  char v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = 0;
    v4 = a2 + 1;
    v5 = MEMORY[0x1E0C80978];
    while ((v2 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v5 + 4 * v2 + 60) & 0x500) != 0)
        goto LABEL_5;
LABEL_6:
      v6 = *v4++;
      v2 = v6;
      if (!v6)
        return v3;
    }
    if (!__maskrune(v2, 0x500uLL))
      goto LABEL_6;
LABEL_5:
    v3 = 5 * v3 + __tolower((char)*(v4 - 1));
    goto LABEL_6;
  }
  return 0;
}

BOOL CStringAlnumCaseEqual::operator()(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  __darwin_ct_rune_t v8;
  __darwin_ct_rune_t v9;

  v5 = MEMORY[0x1E0C80978];
  do
  {
    while (1)
    {
      v6 = *a2++;
      if ((v6 & 0x80000000) != 0)
      {
        if (__maskrune(v6, 0x500uLL))
          goto LABEL_7;
        goto LABEL_6;
      }
      if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x500) != 0)
        break;
LABEL_6:
      if (!*(a2 - 1))
        goto LABEL_7;
    }
    do
    {
LABEL_7:
      v7 = *a3++;
      if ((v7 & 0x80000000) != 0)
      {
        if (__maskrune(v7, 0x500uLL))
          break;
      }
      else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x500) != 0)
      {
        break;
      }
    }
    while (*(a3 - 1));
    v8 = __tolower(*(a2 - 1));
    v9 = __tolower(*(a3 - 1));
  }
  while (v8 == v9 && *(a2 - 1));
  return v8 == v9;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, char **a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == a2)
        {
          if (CStringAlnumCaseEqual::operator()(a1 + 32, (char *)i[2], *a3))
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::__erase_unique<char const*>(_QWORD *a1, char **a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::find<char const*>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<char const*,Encoding>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseHash,CStringAlnumCaseEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,Encoding>,CStringAlnumCaseEqual,CStringAlnumCaseHash,true>,std::allocator<std::__hash_value_type<char const*,Encoding>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t default_language(void)
{
  return 0;
}

const char *default_language_name(void)
{
  return "ENGLISH";
}

const char *invalid_language_name(void)
{
  return "invalid_language";
}

const char *LanguageName(unsigned int a1)
{
  if (a1 > 0xA0)
    return "invalid_language";
  else
    return kLanguageInfoTable[4 * a1];
}

const char *invalid_language_code(void)
{
  return " invalid_language_code";
}

const char *LanguageCode(unsigned int a1)
{
  const char *result;
  char **v3;
  char *v4;

  result = " invalid_language_code";
  if (a1 <= 0xA0)
  {
    v3 = &kLanguageInfoTable[4 * a1];
    result = v3[1];
    if (!result)
    {
      result = v3[2];
      if (!result)
      {
        v4 = kLanguageInfoTable[4 * a1 + 3];
        if (v4)
          return v4;
        else
          return " invalid_language_code";
      }
    }
  }
  return result;
}

const char *default_language_code(void)
{
  return "en";
}

const char *LanguageCodeISO639_1(unsigned int a1)
{
  const char *result;
  char *v3;

  result = " invalid_language_code";
  if (a1 <= 0xA0)
  {
    v3 = kLanguageInfoTable[4 * a1 + 1];
    if (v3)
      return v3;
  }
  return result;
}

const char *LanguageCodeISO639_2(unsigned int a1)
{
  const char *result;
  char *v3;

  result = " invalid_language_code";
  if (a1 <= 0xA0)
  {
    v3 = kLanguageInfoTable[4 * a1 + 2];
    if (v3)
      return v3;
  }
  return result;
}

const char *LanguageCodeWithDialects(unsigned int a1)
{
  const char *result;
  char **v3;
  char *v4;

  if (a1 == 16)
    return "zh-CN";
  result = " invalid_language_code";
  if (a1 <= 0xA0)
  {
    v3 = &kLanguageInfoTable[4 * a1];
    result = v3[1];
    if (!result)
    {
      result = v3[2];
      if (!result)
      {
        v4 = kLanguageInfoTable[4 * a1 + 3];
        if (v4)
          return v4;
        else
          return " invalid_language_code";
      }
    }
  }
  return result;
}

uint64_t LanguageFromCode(uint64_t result, _DWORD *a2)
{
  const char *v3;
  uint64_t v4;
  const char **v5;
  const char *v6;
  const char *v7;

  *a2 = 26;
  if (result)
  {
    v3 = (const char *)result;
    v4 = 0;
    v5 = (const char **)&qword_1E4F130B8;
    while (1)
    {
      v6 = *(v5 - 2);
      if (v6)
      {
        if (!strcasecmp(v3, v6))
          break;
      }
      v7 = *(v5 - 1);
      if (v7)
      {
        if (!strcasecmp(v3, v7))
          break;
      }
      if (*v5 && !strcasecmp(v3, *v5))
        break;
      ++v4;
      v5 += 4;
      if (v4 == 161)
      {
        if (!strcasecmp(v3, "zh-cn") || !strcasecmp(v3, "zh_cn"))
        {
          LODWORD(v4) = 16;
        }
        else if (!strcasecmp(v3, "zh-tw") || !strcasecmp(v3, "zh_tw"))
        {
          LODWORD(v4) = 69;
        }
        else if (!strcasecmp(v3, "sr-me") || !strcasecmp(v3, "sr_me"))
        {
          LODWORD(v4) = 160;
        }
        else if (!strcasecmp(v3, "he"))
        {
          LODWORD(v4) = 6;
        }
        else if (!strcasecmp(v3, "in"))
        {
          LODWORD(v4) = 38;
        }
        else if (!strcasecmp(v3, "ji"))
        {
          LODWORD(v4) = 91;
        }
        else
        {
          if (strcasecmp(v3, "fil"))
            return 0;
          LODWORD(v4) = 32;
        }
        break;
      }
    }
    *a2 = v4;
    return 1;
  }
  return result;
}

id IMAP2EmailCore_ECEmailAddressesFromHeader(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (listClass_onceToken[0] != -1)
    dispatch_once(listClass_onceToken, &__block_literal_global_64);
  if (!listClass_cls)
    IMAP2EmailCore_ECEmailAddressesFromHeader_cold_1();
  objc_msgSend(objc_retainAutorelease((id)listClass_cls), "addressListFromHeaderValue:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v2, "count"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "emailAddressValue", (_QWORD)v12);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (v10)
            objc_msgSend(v4, "addObject:", v10);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v7);
    }

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v4;
}

Class __listClass_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("ECEmailAddressLists"));
  listClass_cls = (uint64_t)result;
  return result;
}

void IMAP2EmailCore_ECEmailAddressesFromHeader_cold_1()
{
  __assert_rtn("listClass", "EmailAddress.m", 44, "cls");
}

uint64_t BodyStructure.isAttachment.getter()
{
  const void *v0;
  int v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  char v39;
  char v40;
  _BYTE v41[184];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[96];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[72];
  uint64_t v67;
  unint64_t v68;

  sub_1A55DC3E0(v0, v41);
  v1 = sub_1A55DC430((uint64_t)v41);
  nullsub_1(v41);
  if (v1 == 1)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = v2[3];
    v44 = v2[2];
    v45 = v5;
    v42 = v3;
    v43 = v4;
    v6 = v2[4];
    v7 = v2[5];
    v8 = v2[6];
    *(_QWORD *)&v49 = *((_QWORD *)v2 + 14);
    v47 = v7;
    v48 = v8;
    v46 = v6;
    sub_1A55032A0((uint64_t)&v43 + 8, (uint64_t)v53, &qword_1EE796940);
    sub_1A55032A0((uint64_t)v53, (uint64_t)&v54, &qword_1EE796940);
    if (*((_QWORD *)&v54 + 1))
    {
      v62 = v56;
      v63 = v57;
      v64 = v58;
      v65 = v59;
      v9 = v54;
      v10 = v55;
      v11 = (char *)&v61 + 8;
      goto LABEL_6;
    }
LABEL_16:
    v30 = 0;
    return v30 & 1;
  }
  v12 = *v2;
  v13 = v2[2];
  v43 = v2[1];
  v44 = v13;
  v42 = v12;
  v14 = v2[3];
  v15 = v2[4];
  v16 = v2[6];
  v47 = v2[5];
  v48 = v16;
  v45 = v14;
  v46 = v15;
  v17 = v2[7];
  v18 = v2[8];
  v19 = v2[10];
  v51 = v2[9];
  v52 = v19;
  v49 = v17;
  v50 = v18;
  sub_1A55032A0((uint64_t)&v47 + 8, (uint64_t)v53, &qword_1EE7968E8);
  sub_1A55032A0((uint64_t)v53, (uint64_t)&v54, &qword_1EE7968E8);
  if (*((_QWORD *)&v54 + 1) == 1)
    goto LABEL_16;
  v62 = v56;
  v63 = v57;
  v64 = v58;
  *(_QWORD *)&v65 = v59;
  v9 = v54;
  v10 = v55;
  v11 = (char *)&v61;
LABEL_6:
  v60 = v9;
  v61 = v10;
  sub_1A55032A0((uint64_t)v11, (uint64_t)v66, &qword_1EE796928);
  sub_1A55032A0((uint64_t)v66, (uint64_t)&v67, &qword_1EE796928);
  v20 = v68;
  if (v68 < 2)
    goto LABEL_16;
  v21 = v67;
  swift_retain();
  swift_retain();
  swift_retain();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v22 = BodyStructure.DispositionKind.attachment.unsafeMutableAddressor();
  if ((*v22 != v21 || v20 != v22[1]) && (sub_1A594CD38() & 1) == 0)
  {
    v32 = BodyStructure.DispositionKind.inline.unsafeMutableAddressor();
    if ((*v32 != v21 || v20 != v32[1]) && (sub_1A594CD38() & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
    v33 = BodyStructure.mediaType.getter();
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = Media.TopLevelType.text.unsafeMutableAddressor();
    if (*v36 == v33 && v36[1] == v35)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v30 = 0;
    return v30 & 1;
  }
LABEL_10:
  v23 = BodyStructure.mediaType.getter();
  v25 = v24;
  swift_bridgeObjectRelease();
  v26 = Media.TopLevelType.multipart.unsafeMutableAddressor();
  if ((*v26 != v23 || v26[1] != v25) && (sub_1A594CD38() & 1) == 0)
  {
    v37 = Media.TopLevelType.application.unsafeMutableAddressor();
    if (*v37 == v23 && v37[1] == v25)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v30 = 1;
        return v30 & 1;
      }
    }
    BodyStructure.mediaType.getter();
    swift_bridgeObjectRelease();
    sub_1A594B49C();
    swift_bridgeObjectRelease();
    if ((sub_1A594B6AC() & 1) == 0)
    {
      v40 = sub_1A594B6AC();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = v40 ^ 1;
      return v30 & 1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_36:
    swift_bridgeObjectRelease();
    v30 = 0;
    return v30 & 1;
  }
  swift_bridgeObjectRelease();
  BodyStructure.mediaType.getter();
  swift_bridgeObjectRelease();
  v27 = sub_1A594B49C();
  v29 = v28;
  swift_bridgeObjectRelease();
  if (v27 == 0x756F64656C707061 && v29 == 0xEB00000000656C62)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = 1;
  }
  else
  {
    v30 = sub_1A594CD38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  return v30 & 1;
}

uint64_t sub_1A57C9DF0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[40];
  _BYTE v28[32];
  char v29;
  _BYTE v30[24];

  sub_1A55032A0(a5, (uint64_t)v19, &qword_1EE799008);
  v9 = 0;
  if (!a4 || (a3 & 1) != 0)
    return v9 & 1;
  if (!a1)
  {
    v11 = v19[0];
    v12 = v19[1];
    v13 = v20;
    v16 = v21;
    sub_1A55032A0(a5, (uint64_t)v22, &qword_1EE799008);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_16;
    v24 = v22[0];
    v25 = v22[1];
    v26 = v23;
    sub_1A57CACB8((uint64_t)&v24, (uint64_t)v27);
    result = sub_1A57CACB8((uint64_t)v27, (uint64_t)v28);
    if ((v29 & 0xF0) != 0x50)
    {
      v14 = v16;
      if (v16 <= 0xFu)
        goto LABEL_7;
      goto LABEL_18;
    }
    v29 &= 0xFu;
    sub_1A55032A0((uint64_t)v28, (uint64_t)v30, (uint64_t *)&unk_1EE799400);
LABEL_25:
    v9 = 0;
    return v9 & 1;
  }
  if (a1 != 1)
    goto LABEL_25;
  result = sub_1A55032A0(a5, (uint64_t)&v24, &qword_1EE799008);
  if (!*((_QWORD *)&v26 + 1))
  {
LABEL_16:
    v9 = 1;
    return v9 & 1;
  }
  v12 = *((_QWORD *)&v24 + 1);
  v11 = v24;
  v13 = v25;
  v14 = v26;
  if (v26 <= 0xFu)
  {
LABEL_7:
    v9 = (v13 & 0x80) == 0 && v11 == 1;
    return v9 & 1;
  }
LABEL_18:
  v17 = v14 & 0xF0;
  v9 = 1;
  if (v17 != 16 || (v13 & 1) != 0)
    return v9 & 1;
  if (v11)
    v18 = v12 - v11;
  else
    v18 = 0;
  if ((v18 & 0x8000000000000000) == 0)
  {
    if ((sub_1A580AB98((unint64_t)"pkcs7-", 6, 2, 0, v18, v11, v12) & 1) == 0)
    {
      v9 = sub_1A580AB98((unint64_t)"x-pkcs7-", 8, 2, 0, v18, v11, v12) ^ 1;
      return v9 & 1;
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

unint64_t BodyStructure.makeAttachmentFilenames(cache:)(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v4;

  v2 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1A57CA010(MEMORY[0x1E0DEE9D8]);
  sub_1A57CA22C((int64_t *)&v4, v2, a1);
  return v4;
}

unint64_t sub_1A57CA010(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB60);
  v2 = (_QWORD *)sub_1A594CA5C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    result = sub_1A5802E10(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A57CA124(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB58);
  v2 = (_QWORD *)sub_1A594CA5C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *(v4 - 1);
    v5 = *v4;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A54E7028(v5);
    result = sub_1A5802E10(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1A57CA22C(int64_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  NIOIMAPCore2::SectionSpecifier::Part v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[11];
  _OWORD v41[5];
  _OWORD v42[6];
  _BYTE v43[184];
  _BYTE v44[184];
  _BYTE v45[17];
  int64_t v46;
  uint64_t v47;
  _OWORD v48[5];
  uint64_t v49;
  __int128 v50;
  _OWORD v51[4];
  uint64_t v52;
  _BYTE v53[72];
  _OWORD v54[4];
  uint64_t v55;
  _OWORD v56[4];
  uint64_t v57;
  _BYTE v58[40];
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[200];

  sub_1A55DC3E0(v3, v43);
  sub_1A55DC3E0(v43, v63);
  sub_1A55DC3E0(v3, v44);
  if (sub_1A55DC430((uint64_t)v44) == 1)
  {
    nullsub_1(v44);
    sub_1A55DC3E0(v63, v41);
    nullsub_1(v41);
    v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
    if (v8)
    {
      v9 = (char *)(*(_QWORD *)v7 + 32);
      sub_1A55DC438((uint64_t)v3, sub_1A552370C);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v10 = 0;
      do
      {
        sub_1A55DC3E0(v9, &v46);
        ++v10;
        sub_1A55DC438((uint64_t)&v46, sub_1A552370C);
        v11.array._rawValue = SectionSpecifier.Part.appending(_:)(v10).array._rawValue;
        sub_1A57CA22C(a1, v11.array._rawValue, a3);
        swift_bridgeObjectRelease();
        sub_1A55DC438((uint64_t)&v46, sub_1A55241F0);
        v9 += 184;
      }
      while (v8 != v10);
      swift_bridgeObjectRelease();
      sub_1A55DC438((uint64_t)v3, sub_1A55241F0);
    }
  }
  else
  {
    nullsub_1(v44);
    v14 = v12[1];
    v13 = v12[2];
    v41[0] = *v12;
    v41[1] = v14;
    v41[2] = v13;
    v15 = v12[6];
    v17 = v12[3];
    v16 = v12[4];
    v42[0] = v12[5];
    v42[1] = v15;
    v41[3] = v17;
    v41[4] = v16;
    v18 = v12[10];
    v20 = v12[7];
    v19 = v12[8];
    v42[4] = v12[9];
    v42[5] = v18;
    v42[2] = v20;
    v42[3] = v19;
    sub_1A55032A0((uint64_t)v42 + 8, (uint64_t)v45, &qword_1EE7968E8);
    sub_1A55032A0((uint64_t)v45, (uint64_t)v48, &qword_1EE7968E8);
    if (*((_QWORD *)&v48[0] + 1) != 1)
    {
      v51[1] = v48[2];
      v51[2] = v48[3];
      v51[3] = v48[4];
      v52 = v49;
      v50 = v48[0];
      v51[0] = v48[1];
      sub_1A55032A0((uint64_t)v51, (uint64_t)v53, &qword_1EE796928);
      sub_1A55032A0((uint64_t)v53, (uint64_t)v54, &qword_1EE796928);
      if (*((_QWORD *)&v54[0] + 1) != 1)
      {
        v56[1] = v54[1];
        v56[2] = v54[2];
        v56[3] = v54[3];
        v57 = v55;
        v56[0] = v54[0];
        sub_1A55032A0((uint64_t)v56, (uint64_t)v58, &qword_1EE7968F8);
        sub_1A55032A0((uint64_t)v58, (uint64_t)v59, &qword_1EE7968F8);
        if (v60)
        {
          v21 = v61;
          v22 = v62;
          v47 = 0;
          v46 = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          sub_1A55DC438((uint64_t)v3, sub_1A552370C);
          v23 = swift_retain();
          sub_1A57FEA50(v23, v21, v22, &v46, a3, v24);
          swift_release();
          swift_release();
          swift_release();
          sub_1A55DC438((uint64_t)v3, sub_1A55241F0);
          v25 = v47;
          if (v47)
          {
            v26 = v46;
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v46 = *a1;
            *a1 = 0x8000000000000000;
            sub_1A57FB0FC(v26, v25, a2, isUniquelyReferenced_nonNull_native);
            *a1 = v46;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    sub_1A55DC3E0(v63, &v46);
    nullsub_1(&v46);
    v29 = v28[6];
    v30 = v28[7];
    v31 = v28[8];
    v32 = v28[9];
    v33 = v28[10];
    v34 = v28[2];
    v35 = v28[3];
    v36 = v28[4];
    v37 = v28[5];
    v38 = v28[1];
    v40[0] = *v28;
    v40[1] = v38;
    v40[2] = v34;
    v40[3] = v35;
    v40[4] = v36;
    v40[5] = v37;
    v40[6] = v29;
    v40[7] = v30;
    v40[8] = v31;
    v40[9] = v32;
    v40[10] = v33;
    sub_1A55DC3E0(v63, &v46);
    nullsub_1(&v46);
    sub_1A56974D0(v39);
    sub_1A571ED44((uint64_t)v40);
  }
}

uint64_t Message.makeAttachmentFilenames(cache:)(char *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_1A57F79A0(v1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57CA8D0, a1);
  if (*((_QWORD *)v2 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB60);
    v3 = sub_1A594CA5C();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v5 = v3;
  sub_1A57CAA20(v2, 1, &v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A57CA6C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[16];
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  v11 = &v17;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  sub_1A57DC054(3, 0, 0, (uint64_t (*)(_OWORD *))sub_1A57CACF4, (uint64_t)v10, (uint64_t)nullsub_1, 0, a1, a2, a3, a4);
  v8 = v17;
  if (*(_QWORD *)(v17 + 16))
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    __asm { BR              X8 }
  }
  result = swift_bridgeObjectRelease();
  *a6 = v7;
  return result;
}

uint64_t sub_1A57CA8D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_1A57CA6C8(a1, a2, a3, a4, v5, a5);
}

uint64_t variable initialization expression of Cache._allCanonicalNames()
{
  return 0;
}

uint64_t variable initialization expression of Cache._utf8CanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._eucCnCanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._gb2312CanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._gbk95CanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._gb18030CanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._big5CanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._big5HkscsCanonicalName()
{
  return 0;
}

uint64_t variable initialization expression of Cache._converters()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t variable initialization expression of Cache._idna()
{
  return 0;
}

uint64_t variable initialization expression of EmailAddress.name()
{
  return 0;
}

uint64_t variable initialization expression of DisplayPart.Attachment.contentID()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeExtractedAttachment.filename()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeExtractedAttachment.encoding()
{
  return 5;
}

double variable initialization expression of UnsafeExtractedAttachment.mediaType@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
  return result;
}

uint64_t variable initialization expression of IndexableMessageInfo.date@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_1A594A0EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double variable initialization expression of IndexableMessageInfo.from@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of IndexableMessageInfo.messageID()
{
  return 0;
}

uint64_t variable initialization expression of IndexableMessageInfo.subject()
{
  return 0;
}

uint64_t variable initialization expression of IndexableMessageInfo.priority()
{
  return 256;
}

uint64_t variable initialization expression of IndexableMessageInfo.content()
{
  return 0;
}

uint64_t variable initialization expression of IndexableMessageInfo.Attachment.filename()
{
  return 0;
}

uint64_t variable initialization expression of WatchOSHeaderInfo.from()
{
  return 0;
}

_QWORD *sub_1A57CAA20(_QWORD *result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *i;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = result[2];
  if (v3)
  {
    v6 = result;
    v7 = result[4];
    v43 = result[5];
    v8 = result[6];
    v9 = (_QWORD *)*a3;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v11 = sub_1A5802E10(v7);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v15 = v10;
    if (v9[3] < v14)
    {
      sub_1A57FAAF0(v14, a2 & 1);
      v16 = sub_1A5802E10(v7);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_28:
        result = (_QWORD *)sub_1A594CDF8();
        __break(1u);
        return result;
      }
      v11 = v16;
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      swift_bridgeObjectRelease();
      v19 = (_QWORD *)(v18[7] + 16 * v11);
      swift_bridgeObjectRelease();
      *v19 = v43;
      v19[1] = v8;
      v20 = v3 - 1;
      if (v3 == 1)
        return (_QWORD *)swift_bridgeObjectRelease();
LABEL_16:
      for (i = v6 + 9; ; i += 3)
      {
        v28 = *(i - 2);
        v27 = *(i - 1);
        v29 = *i;
        v30 = (_QWORD *)*a3;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v32 = sub_1A5802E10(v28);
        v33 = v30[2];
        v34 = (v31 & 1) == 0;
        v35 = v33 + v34;
        if (__OFADD__(v33, v34))
          break;
        v36 = v31;
        if (v30[3] < v35)
        {
          sub_1A57FAAF0(v35, 1);
          v37 = sub_1A5802E10(v28);
          if ((v36 & 1) != (v38 & 1))
            goto LABEL_28;
          v32 = v37;
        }
        v39 = (_QWORD *)*a3;
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v26 = (_QWORD *)(v39[7] + 16 * v32);
          swift_bridgeObjectRelease();
          *v26 = v27;
          v26[1] = v29;
        }
        else
        {
          v39[(v32 >> 6) + 8] |= 1 << v32;
          *(_QWORD *)(v39[6] + 8 * v32) = v28;
          v40 = (_QWORD *)(v39[7] + 16 * v32);
          *v40 = v27;
          v40[1] = v29;
          v41 = v39[2];
          v23 = __OFADD__(v41, 1);
          v42 = v41 + 1;
          if (v23)
            goto LABEL_27;
          v39[2] = v42;
        }
        if (!--v20)
          return (_QWORD *)swift_bridgeObjectRelease();
      }
      goto LABEL_26;
    }
    if ((a2 & 1) != 0)
    {
      v18 = (_QWORD *)*a3;
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1A57FB3A0();
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    *(_QWORD *)(v18[6] + 8 * v11) = v7;
    v21 = (_QWORD *)(v18[7] + 16 * v11);
    *v21 = v43;
    v21[1] = v8;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v18[2] = v24;
    v20 = v3 - 1;
    if (v3 == 1)
      return (_QWORD *)swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1A57CACB8(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8_1(a2, a1);
  return a2;
}

uint64_t sub_1A57CACF4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A58068C4(a1, *(char ***)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1A57CAD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5 || a5 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1A57CAD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5 || a5 == 2)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

void type metadata accessor for CompactEncDet_Encoding(uint64_t a1)
{
  sub_1A5658218(a1, &qword_1EE7AA558);
}

void type metadata accessor for UErrorCode(uint64_t a1)
{
  sub_1A5658218(a1, &qword_1EE7AA560);
}

_QWORD *sub_1A57CAD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  if (a3)
    v7 = a3 + a2;
  else
    v7 = 0;
  if (a3)
    v8 = a3 + a1;
  else
    v8 = 0;
  if (a5)
  {
    v9 = a6 - (_QWORD)a5;
    v10 = a5;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  result = sub_1A57CADEC(v10, v9, v8, v7, 1, &v12, (uint64_t)&v13);
  if (!v6)
    return (_QWORD *)v13;
  return result;
}

_QWORD *sub_1A57CADEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (a3)
  {
    v11 = a4 - a3;
    result = sub_1A57CAEBC(a3, a4 - a3, a1, a2, a5 & 1, (uint64_t)&v17);
    if (!v7)
    {
      v13 = v17;
      if (v17 < 0)
        goto LABEL_13;
      goto LABEL_8;
    }
LABEL_6:
    *a6 = v16;
    return result;
  }
  result = sub_1A57CAEBC(0, 0, a1, a2, a5 & 1, (uint64_t)&v17);
  if (v7)
    goto LABEL_6;
  v11 = 0;
  v13 = v17;
  if (v17 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
LABEL_8:
  if (v11 < v13)
    goto LABEL_13;
  v14 = v18;
  v15 = a3 + v13;
  if (!a3)
    v15 = 0;
  *(_QWORD *)a7 = a3;
  *(_QWORD *)(a7 + 8) = v15;
  *(_BYTE *)(a7 + 16) = v14;
  return result;
}

_QWORD *sub_1A57CAEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *result;

  result = sub_1A57CAF94(a3, a4, a5, a1, a2);
  *(_QWORD *)a6 = 0;
  *(_BYTE *)(a6 + 8) = 0;
  return result;
}

_QWORD *sub_1A57CAF94(_QWORD *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  unsigned __int8 *v37;
  void (*v38)();
  unint64_t v39;
  unsigned int v40;
  int v41;
  void (*v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = result;
  if (a2 < 1 || (*(_BYTE *)(v5 + 1) & 1) != 0)
  {
    v9 = 0;
    v10 = a2;
    if (a2 > 0)
      goto LABEL_59;
    return result;
  }
  v9 = 0;
  v12 = a5 - 3;
  v13 = a2 - 2;
  result = &unk_1EE7AA000;
  v14 = (_QWORD *)&unk_1EE7AA000;
  v15 = (_QWORD *)&unk_1EE7AA000;
  v16 = (_BYTE *)&unk_1EE7AA000;
  while (1)
  {
    while (1)
    {
      v18 = *((char *)v8 + v9);
      if ((v18 & 0x80000000) == 0)
      {
        if (result[164] != -1)
        {
          v44 = a5;
          v35 = v12;
          swift_once();
          v16 = (_BYTE *)&unk_1EE7AA000;
          v15 = &unk_1EE7AA000;
          v14 = &unk_1EE7AA000;
          result = (_QWORD *)&unk_1EE7AA000;
          v12 = v35;
          a5 = v44;
        }
        v19 = v14[173];
        if (*(_QWORD *)(v19 + 16) <= (unint64_t)v18)
          goto LABEL_79;
        v20 = *(char *)(v19 + v18 + 32);
        if ((v20 & 0x80000000) == 0)
          break;
      }
      if ((a3 & 1) == 0)
      {
        v36 = 1;
        goto LABEL_57;
      }
      if (++v9 >= a2)
        goto LABEL_58;
    }
    if (v15[165] != -1)
    {
      v43 = v12;
      v45 = a5;
      swift_once();
      v16 = (unsigned __int8 *)&unk_1EE7AA000;
      v15 = (_QWORD *)&unk_1EE7AA000;
      v14 = (_QWORD *)&unk_1EE7AA000;
      result = (_QWORD *)&unk_1EE7AA000;
      v12 = v43;
      a5 = v45;
    }
    v21 = v16[1392];
    v22 = *(_QWORD *)(v5 + 24);
    if (v18 != v21)
      break;
    v17 = __OFADD__(v22++, 1);
    if (v17)
      goto LABEL_84;
    *(_QWORD *)(v5 + 24) = v22;
LABEL_24:
    v23 = *(_DWORD *)(v5 + 32);
    v24 = v20 + (v23 << 6);
    if (__CFADD__(v20, v23 << 6))
      goto LABEL_81;
    *(_DWORD *)(v5 + 32) = v24;
    v25 = *(_QWORD *)(v5 + 16);
    v17 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v17)
      goto LABEL_82;
    *(_QWORD *)(v5 + 16) = v26;
    if (v26 == 4)
    {
      if (a5 < 3 || (v27 = *(_QWORD *)(v5 + 8), v12 < v27))
      {
        v36 = 3;
        goto LABEL_57;
      }
      if (v22 == 3)
        goto LABEL_56;
      v28 = v9 + 1 >= a2;
      if (v9 + 1 < a2 && v22 >= 1)
      {
        v29 = v14[173];
        v30 = v9;
        do
        {
          v31 = *((unsigned __int8 *)v8 + v30 + 1);
          if ((_DWORD)v31 != v21)
          {
            if ((a3 & 1) == 0)
              goto LABEL_49;
            if ((v31 & 0x80) == 0)
            {
              if (*(_QWORD *)(v29 + 16) <= v31)
                goto LABEL_80;
              if ((*(char *)(v29 + 32 + v31) & 0x80000000) == 0)
              {
LABEL_49:
                v34 = (_BYTE *)(a4 + v27);
                *v34 = BYTE2(v24);
                v34[1] = BYTE1(v24);
                v32 = v27 + 2;
                goto LABEL_50;
              }
            }
          }
          if (v13 == v30)
          {
            v28 = 1;
            goto LABEL_42;
          }
          ++v30;
        }
        while (v30 + 1 < a2);
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        return result;
      }
LABEL_42:
      *(_BYTE *)(a4 + v27) = BYTE2(v24);
      *(_QWORD *)(v5 + 8) = v27 + 1;
      if (!v28 || v22 <= 1)
      {
        *(_BYTE *)(a4 + v27 + 1) = BYTE1(v24);
        v32 = v27 + 2;
        *(_QWORD *)(v5 + 8) = v27 + 2;
        if (v22 <= 0 || !v28)
        {
LABEL_50:
          *(_BYTE *)(a4 + v32) = v24;
          *(_QWORD *)(v5 + 8) = v32 + 1;
        }
      }
      *(_QWORD *)(v5 + 16) = 0;
      if (v22 >= 1 && (a3 & 1) == 0)
      {
        *(_BYTE *)(v5 + 1) = 1;
        v10 = a2 - v9;
        if (a2 > v9)
          goto LABEL_59;
        return result;
      }
      *(_QWORD *)(v5 + 24) = 0;
    }
    v17 = __OFADD__(v9++, 1);
    if (v17)
      goto LABEL_83;
    if (v9 >= a2)
      goto LABEL_58;
  }
  if (v22 < 1 || (a3 & 1) != 0)
    goto LABEL_24;
LABEL_56:
  v36 = 2;
LABEL_57:
  *(_BYTE *)v5 = v36;
LABEL_58:
  v10 = a2 - v9;
  if (a2 <= v9)
    return result;
LABEL_59:
  if (!*(_BYTE *)v5)
  {
    v37 = (unsigned __int8 *)v8 + v9;
    v38 = sub_1A57CB3D0;
    while (1)
    {
      v40 = *v37++;
      v39 = v40;
      if ((a3 & 1) != 0)
      {
        if ((v39 & 0x80) != 0)
        {
          v41 = 1;
        }
        else
        {
          if (qword_1EE7AA520 != -1)
          {
            v42 = v38;
            result = (_QWORD *)swift_once();
            v38 = v42;
          }
          if (*((_QWORD *)off_1EE7AA568 + 2) <= v39)
            goto LABEL_78;
          v41 = *((char *)off_1EE7AA568 + v39 + 32) < 0;
        }
      }
      else
      {
        v41 = 0;
      }
      if (qword_1EE7AA528 != -1)
      {
        result = (_QWORD *)swift_once();
        v38 = sub_1A57CB3D0;
      }
      if ((((_DWORD)v39 != byte_1EE7AA570) & ~v41) != 0)
        break;
      if (!--v10)
        return result;
    }
    *(_BYTE *)v5 = 4;
  }
  return result;
}

void sub_1A57CB3D0()
{
  off_1EE7AA568 = &unk_1E4E83F60;
}

unint64_t sub_1A57CB3E4()
{
  unint64_t result;

  if ((sub_1A594CD38() & 1) != 0)
  {
    result = 10;
    goto LABEL_7;
  }
  result = sub_1A594B1B4();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = sub_1A57A76A0(0x3DuLL, 0xE100000000000000);
  if ((result & 0x100000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((result & 0xFFFFFF80) != 0)
    goto LABEL_10;
  result = sub_1A57A76A0(0x3DuLL, 0xE100000000000000);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF00) == 0)
    {
LABEL_7:
      byte_1EE7AA570 = result;
      return result;
    }
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *sub_1A57CB474(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    result = sub_1A57CADEC(a1, a2 - (_QWORD)a1, a3, a4, a5 & 1, &v7, (uint64_t)&v8);
    if (v5)
      return result;
    return (_QWORD *)v8;
  }
  result = sub_1A57CADEC(0, 0, a3, a4, a5 & 1, &v7, (uint64_t)&v8);
  if (!v5)
    return (_QWORD *)v8;
  return result;
}

unint64_t sub_1A57CB4D0()
{
  unint64_t result;

  result = qword_1EE7AA578;
  if (!qword_1EE7AA578)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D6DD4, &type metadata for Base64.InvalidBase64Data);
    atomic_store(result, (unint64_t *)&qword_1EE7AA578);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base64.InvalidBase64Data()
{
  return &type metadata for Base64.InvalidBase64Data;
}

uint64_t sub_1A57CB524@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = v1[2];
  v3 = v1[3];
  if ((int64_t)v3 >= *(_QWORD *)(v4 + 16))
  {
    v12 = 0;
    v8 = 0;
    v7 = 0;
    v11 = 0;
    v10 = 0;
    goto LABEL_7;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = v1[1];
  if (v3 >= *(_QWORD *)(v5 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = v5 + 16 * v3;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v9 = v4 + 16 * v3;
  v11 = *(_QWORD *)(v9 + 32);
  v10 = *(_QWORD *)(v9 + 40);
  v1[3] = v3 + 1;
  v12 = v1[4];
  if (!__OFADD__(v12, 1))
  {
    v1[4] = v12 + 1;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_7:
    *a1 = v12;
    a1[1] = v8;
    a1[2] = v7;
    a1[3] = v11;
    a1[4] = v10;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t static Message.makeSparse(messageHeaders:bodyStructure:lineEnding:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799078);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = xmmword_1A59ABE10;
  v14 = 0;
  sub_1A57CB6E0(a1, (uint64_t)v10);
  v11 = type metadata accessor for Message(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  sub_1A57CB780((uint64_t)v10, a3, &v14, a2, (uint64_t)&v15);
  sub_1A57CB8F0((uint64_t)v10);
  *a4 = v15;
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1A57CB6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57CB724(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = a1;
  v3[1] = a2;
  __swift_project_boxed_opaque_existential_1_0(v3, MEMORY[0x1E0DEAC20]);
  sub_1A5949F60();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void sub_1A57CB780(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;

  v10 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799078);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = &v18[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a5;
  sub_1A57D01A8(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1A57CB8F0((uint64_t)v12);
    sub_1A57CB930(a2, a4, a5);
  }
  else
  {
    sub_1A57D01F0((uint64_t)v12, (uint64_t)v16);
    sub_1A55DC438((uint64_t)a4, sub_1A552370C);
    sub_1A57F527C((uint64_t)v16, 3u, a4, a2, (uint64_t (*)(char *, char *))sub_1A57D01A0, (uint64_t)v18, v17);
    sub_1A57D0234((uint64_t)v16);
  }
  sub_1A57CC32C(a2, a3, a4, a5);
}

uint64_t sub_1A57CB8F0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A57CB930(char a1, const void *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[16];
  uint64_t v55;
  _BYTE v56[184];
  char v57[8];
  uint64_t v58;
  char v59[8];
  uint64_t v60;
  char v61[8];
  uint64_t v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71[8];
  uint64_t v72;
  _BYTE v73[96];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];
  _BYTE v83[16];
  _QWORD v84[5];
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[184];
  char v88[8];
  uint64_t v89;

  sub_1A55DC3E0(a2, v56);
  sub_1A55DC3E0(v56, v87);
  v55 = a3;
  sub_1A55DC438((uint64_t)a2, sub_1A552370C);
  v71[0] = a1;
  sub_1A57CB724((uint64_t)"Content-Type", (uint64_t)"");
  sub_1A57CB724((uint64_t)": ", (uint64_t)"");
  v72 = 14;
  sub_1A57CD1D4((uint64_t)v71, a2, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v54);
  sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
  sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
  sub_1A55DC3E0(a2, v71);
  if (sub_1A55DC430((uint64_t)v71) == 1)
  {
    nullsub_1(v71);
    sub_1A55DC3E0(v87, &v67);
    nullsub_1(&v67);
    if (!v6[4])
    {
LABEL_19:
      sub_1A55DC3E0(v87, v61);
      nullsub_1(v61);
      goto LABEL_20;
    }
    v7 = v6[9];
    v8 = v6[10];
    v9 = v6[7];
    v10 = v6[8];
    v11 = v6[6];
  }
  else
  {
    nullsub_1(v71);
    v13 = v12[9];
    v76 = v12[8];
    v77 = v13;
    v78 = v12[10];
    v14 = v12[5];
    *(_OWORD *)&v73[64] = v12[4];
    *(_OWORD *)&v73[80] = v14;
    v15 = v12[6];
    v75 = v12[7];
    v74 = v15;
    v16 = v12[1];
    *(_OWORD *)v73 = *v12;
    *(_OWORD *)&v73[16] = v16;
    v17 = v12[2];
    *(_OWORD *)&v73[48] = v12[3];
    *(_OWORD *)&v73[32] = v17;
    v82[0] = *(_OWORD *)&v73[56];
    v81 = *(_OWORD *)&v73[40];
    v82[1] = *(_OWORD *)&v73[72];
    v80 = *(_OWORD *)&v73[24];
    v79 = *(_OWORD *)&v73[8];
    sub_1A55032A0((uint64_t)v82 + 8, (uint64_t)v83, &qword_1EE796930);
    sub_1A55032A0((uint64_t)v83, (uint64_t)&v85, &qword_1EE796930);
    v18 = v86;
    if (v86)
    {
      v19 = v85;
      if (v19 == sub_1A594B4B4() && v20 == v18)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v21 = sub_1A594CD38();
        sub_1A55DC438((uint64_t)a2, sub_1A552370C);
        sub_1A5524B84((uint64_t)v83);
        swift_bridgeObjectRelease();
        if ((v21 & 1) == 0)
        {
          LOBYTE(v63) = a1;
          v22 = MEMORY[0x1E0DEAC20];
          v23 = MEMORY[0x1E0CB1AA8];
          v69 = MEMORY[0x1E0DEAC20];
          v70 = MEMORY[0x1E0CB1AA8];
          v67 = "Content-Transfer-Encoding";
          v68 = "";
          __swift_project_boxed_opaque_existential_1_0(&v67, MEMORY[0x1E0DEAC20]);
          sub_1A5524B84((uint64_t)v83);
          sub_1A5949F60();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          v69 = v22;
          v70 = v23;
          v67 = ": ";
          v68 = "";
          __swift_project_boxed_opaque_existential_1_0(&v67, v22);
          sub_1A5949F60();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          v64 = (char *)27;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A57D1A98((uint64_t)sub_1A57D2440, (uint64_t)v54, 160, 0, (uint64_t)&v63, v19, v18, (void (*)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57CE734);
          sub_1A5503278((uint64_t)v83);
          sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
          sub_1A5503278((uint64_t)v83);
        }
        sub_1A5503278((uint64_t)v83);
        sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
      }
    }
    sub_1A55DC3E0(v87, &v67);
    nullsub_1(&v67);
    v11 = v24[13];
    v9 = v24[14];
    v10 = v24[15];
    v7 = v24[16];
    v8 = v24[17];
    if (v24[12] == 1)
    {
      sub_1A55DC3E0(v87, &v67);
      nullsub_1(&v67);
      goto LABEL_16;
    }
  }
  if (v9 >= 2)
  {
    v84[0] = v11;
    v84[1] = v9;
    v84[2] = v10;
    v84[3] = v7;
    v84[4] = v8;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    sub_1A57D1964((uint64_t *)"Content-Disposition", 19, 2, a1, (uint64_t (*)(uint64_t *, char *))sub_1A57D2440, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v54, (unint64_t)v84, (uint64_t)v84);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  sub_1A55DC3E0(a2, &v67);
  v26 = sub_1A55DC430((uint64_t)&v67);
  nullsub_1(&v67);
  if (v26 == 1)
    goto LABEL_19;
LABEL_16:
  v28 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v25 + 40);
  if (!v27)
  {
    sub_1A55DC3E0(v87, &v63);
    nullsub_1(&v63);
    goto LABEL_23;
  }
  v61[0] = a1;
  v29 = MEMORY[0x1E0DEAC20];
  v30 = MEMORY[0x1E0CB1AA8];
  v65 = MEMORY[0x1E0DEAC20];
  v66 = MEMORY[0x1E0CB1AA8];
  v63 = "Content-ID";
  v64 = "";
  __swift_project_boxed_opaque_existential_1_0(&v63, MEMORY[0x1E0DEAC20]);
  sub_1A55DC438((uint64_t)a2, sub_1A552370C);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5949F60();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  v65 = v29;
  v66 = v30;
  v63 = ": ";
  v64 = "";
  __swift_project_boxed_opaque_existential_1_0(&v63, v29);
  sub_1A5949F60();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  v62 = 12;
  result = sub_1A594B5A4();
  v32 = result + 2;
  if (!__OFADD__(result, 2))
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57D1A98((uint64_t)sub_1A57D2440, (uint64_t)v54, v32, 0, (uint64_t)v61, v28, v27, (void (*)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57CE270);
    swift_bridgeObjectRelease();
    sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
    swift_bridgeObjectRelease();
    sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
    sub_1A55DC3E0(a2, &v63);
    v33 = sub_1A55DC430((uint64_t)&v63);
    nullsub_1(&v63);
    if (v33 == 1)
      goto LABEL_19;
LABEL_23:
    v41 = *(_QWORD *)(v34 + 48);
    v40 = *(_QWORD *)(v34 + 56);
    if (v40)
    {
      sub_1A55DC438((uint64_t)a2, sub_1A552370C);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v61[0] = a1;
      sub_1A57CB724((uint64_t)"Content-Description", (uint64_t)"");
      sub_1A57CB724((uint64_t)": ", (uint64_t)"");
      v62 = 21;
      sub_1A57CC898(v41, v40, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v54);
      sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
      swift_bridgeObjectRelease();
      sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
      sub_1A55DC3E0(a2, v61);
      v42 = sub_1A55DC430((uint64_t)v61);
      nullsub_1(v61);
      if (v42 == 1)
      {
LABEL_20:
        v36 = *(_QWORD *)(v35 + 56);
        v37 = *(_OWORD *)(v35 + 104);
        v38 = *(_OWORD *)(v35 + 88);
        if (!*(_QWORD *)(v35 + 32))
        {
          sub_1A55DC3E0(v87, v59);
          nullsub_1(v59);
LABEL_35:
          if (!*(_QWORD *)(v39 + 32))
            return sub_1A57EEA4C(a1);
          v45 = *(_QWORD *)(v39 + 56);
          v46 = *(_OWORD *)(v39 + 104);
          v47 = *(_OWORD *)(v39 + 88);
          goto LABEL_39;
        }
        goto LABEL_29;
      }
    }
    else
    {
      sub_1A55DC3E0(v87, v61);
      nullsub_1(v61);
    }
    v36 = *(_QWORD *)(v35 + 112);
    v38 = *(_OWORD *)(v35 + 144);
    v37 = *(_OWORD *)(v35 + 160);
    if (*(_QWORD *)(v35 + 96) == 1)
    {
      sub_1A55DC3E0(v87, v59);
      nullsub_1(v59);
      goto LABEL_37;
    }
LABEL_29:
    if (v36 != 1)
    {
      v43 = (_QWORD *)v38;
      if ((_QWORD)v38)
      {
        v50 = *((_QWORD *)&v38 + 1);
        v52 = v37;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A5523A00(v50, v52, *((uint64_t *)&v52 + 1));
        sub_1A55244E4(v50, v52, *((uint64_t *)&v52 + 1));
        if (v43[2])
        {
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v59[0] = a1;
          sub_1A57CB724((uint64_t)"Content-Language", (uint64_t)"");
          sub_1A57CB724((uint64_t)": ", (uint64_t)"");
          v60 = 18;
          sub_1A57CCFE0((uint64_t)v59, v43, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v54);
          sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
    }
    sub_1A55DC3E0(a2, v59);
    v44 = sub_1A55DC430((uint64_t)v59);
    nullsub_1(v59);
    if (v44 == 1)
      goto LABEL_35;
LABEL_37:
    v45 = *(_QWORD *)(v39 + 112);
    v47 = *(_OWORD *)(v39 + 144);
    v46 = *(_OWORD *)(v39 + 160);
    if (*(_QWORD *)(v39 + 96) == 1)
    {
      sub_1A55DC3E0(v87, v57);
      nullsub_1(v57);
LABEL_45:
      if (*(uint64_t *)(v48 + 80) >= 1)
      {
        sub_1A55DC438((uint64_t)a2, sub_1A552370C);
        v88[0] = a1;
        sub_1A57CB724((uint64_t)"X-Apple-Content-Length", (uint64_t)"");
        sub_1A57CB724((uint64_t)": ", (uint64_t)"");
        v89 = 24;
        sub_1A57CCA5C((uint64_t)sub_1A57D2440, (uint64_t)v54, 70, 0, (uint64_t)v88);
        sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
        sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
      }
      return sub_1A57EEA4C(a1);
    }
LABEL_39:
    if (v45 != 1)
    {
      if ((_QWORD)v47)
      {
        v51 = *((_QWORD *)&v47 + 1);
        v53 = v46;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A5523A00(v51, v53, *((uint64_t *)&v53 + 1));
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v53 + 1))
        {
          swift_bridgeObjectRelease();
          if ((_QWORD)v53)
          {
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            v57[0] = a1;
            sub_1A57CB724((uint64_t)"Content-Location", (uint64_t)"");
            sub_1A57CB724((uint64_t)": ", (uint64_t)"");
            v58 = 18;
            sub_1A57CC898(v51, v53, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v54);
            sub_1A57EEB1C(a1, (uint64_t (*)(char *, char *))sub_1A57D2440);
            swift_bridgeObjectRelease_n();
          }
        }
      }
    }
    sub_1A55DC3E0(a2, v57);
    v49 = sub_1A55DC430((uint64_t)v57);
    nullsub_1(v57);
    if (v49 == 1)
      return sub_1A57EEA4C(a1);
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

void sub_1A57CC32C(uint64_t a1, _QWORD *a2, const void *a3, uint64_t a4)
{
  const void *v5;
  int v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  const void *v50;
  const void *v51;
  _OWORD v52[12];
  _BYTE v53[184];
  _BYTE v54[145];
  __int128 v55;
  _OWORD v56[6];
  uint64_t v57;
  _BYTE v58[96];
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[8];
  _BYTE v64[192];

  v5 = a3;
  sub_1A55DC3E0(a3, v53);
  sub_1A55DC3E0(v53, v64);
  sub_1A55DC3E0(v5, v54);
  v8 = sub_1A55DC430((uint64_t)v54);
  nullsub_1(v54);
  if (v8 != 1)
    return;
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[3];
  v56[1] = v9[2];
  v56[2] = v12;
  v55 = v10;
  v56[0] = v11;
  v13 = v9[4];
  v14 = v9[5];
  v15 = v9[6];
  v57 = *((_QWORD *)v9 + 14);
  v56[4] = v14;
  v56[5] = v15;
  v56[3] = v13;
  sub_1A55032A0((uint64_t)v56 + 8, (uint64_t)v58, &qword_1EE796940);
  sub_1A55032A0((uint64_t)v58, (uint64_t)&v59, &qword_1EE796940);
  if (!*((_QWORD *)&v59 + 1))
  {
    sub_1A55DC3E0(v64, v52);
    nullsub_1(v52);
    v28 = *(_QWORD *)(v27 + 24);
    v29 = *(_QWORD *)(v27 + 32);
    v30 = *(_QWORD *)(v27 + 40);
    v49 = a2;
    v51 = v5;
    v47 = a1;
    v31 = *(_QWORD *)(v27 + 48);
    v32 = *(_QWORD *)(v27 + 56);
    v33 = *(_QWORD *)(v27 + 72);
    v43 = *(_QWORD *)(v27 + 80);
    v45 = *(_QWORD *)(v27 + 64);
    v42 = *(_OWORD *)(v27 + 88);
    v34 = a4;
    v35 = *(_QWORD *)(v27 + 104);
    v36 = *(_QWORD *)(v27 + 112);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v41 = v36;
    a4 = v34;
    v37 = v31;
    v38 = v32;
    a1 = v47;
    v39 = v33;
    a2 = v49;
    v5 = v51;
    sub_1A5523A30(v28, v29, v30, v37, v38, v45, v39, v43, v42, *((uint64_t *)&v42 + 1), v35, v41);
    goto LABEL_15;
  }
  v16 = v60;
  v61 = v60;
  v17 = *(_QWORD *)(v60 + 16);
  if (!v17)
  {
    sub_1A55DC438((uint64_t)v5, sub_1A552370C);
LABEL_15:
    v23 = sub_1A57CC7D0(a2);
    v22 = v40;
LABEL_18:
    sub_1A57D1E30(a1, v55, (uint64_t)v23, v22, (uint64_t)a2, a4);
    swift_bridgeObjectRelease();
    sub_1A55DC438((uint64_t)v5, sub_1A55241F0);
    return;
  }
  v46 = a1;
  v48 = a2;
  v44 = a4;
  v52[0] = v59;
  sub_1A55032A0((uint64_t)v52, (uint64_t)v63, &qword_1EE7986B8);
  v18 = *((_QWORD *)&v52[0] + 1);
  v62 = *((_QWORD *)&v52[0] + 1);
  v19 = *(_QWORD *)(*((_QWORD *)&v52[0] + 1) + 16);
  sub_1A553E5B4((uint64_t)v63);
  sub_1A553E5B4((uint64_t)&v62);
  sub_1A553E5B4((uint64_t)&v61);
  v50 = v5;
  sub_1A55DC438((uint64_t)v5, sub_1A552370C);
  sub_1A553E5B4((uint64_t)v63);
  sub_1A553E5B4((uint64_t)&v62);
  sub_1A553E5B4((uint64_t)&v61);
  v20 = v18 + 40;
  v21 = (unint64_t *)(v16 + 40);
  while (v19)
  {
    v23 = (_QWORD *)*(v21 - 1);
    v22 = *v21;
    if (sub_1A594B49C() == 0x797261646E756F62 && v24 == 0xE800000000000000)
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
LABEL_17:
      sub_1A553E5DC((uint64_t)v63);
      sub_1A553E5DC((uint64_t)&v62);
      sub_1A553E5DC((uint64_t)&v61);
      sub_1A553E5DC((uint64_t)v63);
      sub_1A553E5DC((uint64_t)&v62);
      sub_1A553E5DC((uint64_t)&v61);
      swift_bridgeObjectRelease();
      a2 = v48;
      v5 = v50;
      a4 = v44;
      a1 = v46;
      goto LABEL_18;
    }
    v26 = sub_1A594CD38();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v19;
    v20 += 16;
    v21 += 2;
    if (!--v17)
    {
      sub_1A553E5DC((uint64_t)v63);
      sub_1A553E5DC((uint64_t)&v62);
      sub_1A553E5DC((uint64_t)&v61);
      sub_1A553E5DC((uint64_t)v63);
      sub_1A553E5DC((uint64_t)&v62);
      sub_1A553E5DC((uint64_t)&v61);
      a2 = v48;
      v5 = v50;
      a4 = v44;
      a1 = v46;
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_1A57CC6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t (*a8)(char *, char *), uint64_t a9)
{
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  _BYTE v30[192];

  sub_1A57F0164(a5);
  if ((v18 & 1) != 0)
    v19 = a2;
  else
    v19 = v17;
  sub_1A57F972C(a5, a1, a2, a3, a4, v19);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  sub_1A55DC3E0(a6, v30);
  v28 = sub_1A55DC430((uint64_t)v30) != 1;
  nullsub_1(v30);
  return sub_1A580403C(a7, v28, 1, a8, a9, v21, v23, v25, v27);
}

_QWORD *sub_1A57CC7D0(_QWORD *result)
{
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    ++*result;
    sub_1A594C720();
    swift_bridgeObjectRelease();
    sub_1A594CC9C();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    return (_QWORD *)0xD000000000000020;
  }
  return result;
}

uint64_t sub_1A57CC898(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = 0;
  v13[5] = v7;
  v14 = 256;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  do
  {
    while (1)
    {
      isStackAllocationSafe = sub_1A594B5A4();
      if (isStackAllocationSafe < 0)
        __break(1u);
      v10 = isStackAllocationSafe;
      if (isStackAllocationSafe >= 1025)
      {
        isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
        if ((isStackAllocationSafe & 1) == 0)
          break;
      }
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      sub_1A57CD938((uint64_t)v13 - v8, (uint64_t)v13 + v10 - v8, 0, v4, a3, a4, (char *)&v14);
      if ((v14 & 0x100) != 0)
        return swift_bridgeObjectRelease();
    }
    v11 = swift_slowAlloc();
    sub_1A57CD938(v11, v11 + v10, 0, v4, a3, a4, (char *)&v14);
    MEMORY[0x1A85B1964](v11, -1, -1);
  }
  while ((v14 & 0x100) == 0);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1A57CCA5C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t (*v8)(char *, char *);
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
  }
  if (v6 < 0)
    goto LABEL_8;
  v8 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  if (v6 >= 1025)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v11 = swift_slowAlloc();
      sub_1A57CF35C(v11, v11 + v6, a4 & 1, a5, v8);
      JUMPOUT(0x1A85B1964);
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  return sub_1A57CF35C((uint64_t)v12 - v9, (uint64_t)v12 + v6 - v9, a4 & 1, a5, v8);
}

uint64_t sub_1A57CCBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *), uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t (*v31)(char *, char *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  _QWORD v47[2];
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v32 = a5;
  v31 = a4;
  v5 = a3;
  v51 = *MEMORY[0x1E0C80C00];
  v41 = a1;
  v42 = a2;
  v44 = 0;
  v45 = 0;
  v43 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A57CB524(v46);
  sub_1A55032A0((uint64_t)v46, (uint64_t)v47, &qword_1EE7A0F40);
  v6 = v48;
  if (v48)
  {
    v30 = v5;
    do
    {
      v10 = v47[0] + 1;
      if (__OFADD__(v47[0], 1))
        goto LABEL_17;
      v11 = v47[1];
      v13 = v49;
      v12 = v50;
      v14 = *(_QWORD *)(v5 + 16);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v15 = sub_1A57CF6C4(v11, v6, v13, v12, v10 == v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15 <= 78)
      {
        v7 = v10 == v14;
        v8 = v12;
        v9 = v7;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57D0AA8(v31, v32, 160, 1, v33, v11, v6, v13, v8, v9);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v16 = sub_1A594B718();
        v18 = v17;
        v20 = v19;
        v22 = v21;
        swift_bridgeObjectRelease();
        v37 = v16;
        v38 = v18;
        v39 = v20;
        v40 = v22;
        if ((v16 ^ v18) >= 0x4000)
        {
          v29[2] = v12;
          v23 = 0;
          while (1)
          {
            v35 = v11;
            v36 = v6;
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            sub_1A594B5F8();
            v34 = v23;
            sub_1A594CC9C();
            sub_1A594B5F8();
            swift_bridgeObjectRelease();
            v24 = v35;
            v25 = v36;
            v35 = 77;
            v26 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            MEMORY[0x1E0C80A78](v26);
            sub_1A57CDB1C((uint64_t)&v28, (uint64_t)v29 + 1, 1, v33, v31, v32, &v35, v24, v25, (unint64_t *)&v37, v10 == v14);
            swift_bridgeObjectRelease();
            if (__OFADD__(v23, 1))
              break;
            ++v23;
            if (!((v38 ^ v37) >> 14))
              goto LABEL_14;
          }
          __break(1u);
LABEL_17:
          __break(1u);
        }
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v30;
        swift_bridgeObjectRelease();
      }
      sub_1A57CB524(v46);
      sub_1A55032A0((uint64_t)v46, (uint64_t)v47, &qword_1EE7A0F40);
      v6 = v48;
    }
    while (v48);
  }
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1A57CCFE0(uint64_t a1, _QWORD *a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[7];
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, char *);
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (v4)
  {
    v9 = a2[5];
    v19 = a2[4];
    swift_bridgeObjectRetain_n();
    v20 = a2;
    v10 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    MEMORY[0x1E0C80A78](v10);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v21 = a1;
    v22 = a3;
    sub_1A57CE4C4((uint64_t)&v17, (uint64_t)&v19, 0, a1, a3, a4, v19, v9, v4 == 1);
    swift_bridgeObjectRelease_n();
    v11 = v4 - 1;
    if (v11)
    {
      v12 = v20 + 7;
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        v15 = swift_bridgeObjectRetain_n();
        MEMORY[0x1E0C80A78](v15);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57CE4C4((uint64_t)v16, (uint64_t)v18, 1, v21, v22, a4, v13, v14, v11 == 1);
        v12 += 2;
        swift_bridgeObjectRelease_n();
        --v11;
      }
      while (v11);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A57CD1D4(uint64_t a1, const void *a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  int v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[184];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[12];
  uint64_t v53;
  __int128 __dst[21];

  sub_1A55DC3E0(a2, v40);
  v8 = sub_1A55DC430((uint64_t)v40);
  nullsub_1(v40);
  if (v8 != 1)
  {
    v20 = *v9;
    v21 = v9[2];
    v42 = v9[1];
    v43 = v21;
    v41 = v20;
    v22 = v9[3];
    v23 = v9[4];
    v24 = v9[6];
    v46 = v9[5];
    v47 = v24;
    v44 = v22;
    v45 = v23;
    v25 = v9[7];
    v26 = v9[8];
    v27 = v9[10];
    v50 = v9[9];
    v51 = v27;
    v48 = v25;
    v49 = v26;
    sub_1A569D030(&v41, &v53);
    sub_1A569D030(&v53, v52);
    v28 = (_QWORD *)v52[0];
    if (v52[0] >> 62)
    {
      if (v52[0] >> 62 == 1)
      {
        v52[0] &= 0x3FFFFFFFFFFFFFFFuLL;
        memcpy(__dst, (const void *)(v52[0] + 16), 0x148uLL);
        sub_1A55DC438((uint64_t)a2, sub_1A552370C);
        sub_1A56DBA9C((uint64_t)&v53);
        sub_1A5692040((uint64_t)__dst);
        sub_1A57D0FC4(a3, a4, 160, 0, a1, __dst, (uint64_t)&v41);
        sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
        v29 = *((_QWORD *)&v41 + 1);
        v30 = v42;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1A57CCBFC(v29, v30, *((uint64_t *)&v30 + 1), a3, a4);
        swift_release();
        swift_release();
        swift_release();
        sub_1A56921B8((uint64_t)__dst);
        return sub_1A56DBAC8((uint64_t)&v53);
      }
      v52[0] &= 0x3FFFFFFFFFFFFFFFuLL;
      v35 = v28[2];
      v36 = v28[3];
      v37 = v28[4];
      sub_1A55DC438((uint64_t)a2, sub_1A552370C);
      sub_1A56DBA9C((uint64_t)&v53);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57D1200(a3, a4, 160, 0, a1, v35, v36, v37, (uint64_t)&v41);
      sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
    }
    else
    {
      v52[0] &= 0x3FFFFFFFFFFFFFFFuLL;
      v31 = v28[2];
      v32 = v28[3];
      v33 = v28[4];
      v34 = v28[5];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A55DC438((uint64_t)a2, sub_1A552370C);
      sub_1A56DBA9C((uint64_t)&v53);
      sub_1A57D040C(a3, a4, 160, 0, a1, v31, v32, v33, v34, (uint64_t)&v41);
      sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v38 = *((_QWORD *)&v41 + 1);
    v39 = v42;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1A57CCBFC(v38, v39, *((uint64_t *)&v39 + 1), a3, a4);
    swift_release();
    swift_release();
    swift_release();
    return sub_1A56DBAC8((uint64_t)&v53);
  }
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[3];
  __dst[2] = v9[2];
  __dst[3] = v12;
  __dst[0] = v10;
  __dst[1] = v11;
  v13 = v9[4];
  v14 = v9[5];
  v15 = v9[6];
  *(_QWORD *)&__dst[7] = *((_QWORD *)v9 + 14);
  __dst[5] = v14;
  __dst[6] = v15;
  __dst[4] = v13;
  sub_1A57D22EC((uint64_t)__dst);
  sub_1A57D1460(a3, a4, 160, 0, a1, (uint64_t)__dst);
  sub_1A55DC438((uint64_t)a2, sub_1A55241F0);
  sub_1A55032A0((uint64_t)&__dst[1] + 8, (uint64_t)v52, &qword_1EE796940);
  result = sub_1A55032A0((uint64_t)v52, (uint64_t)&v41, &qword_1EE796940);
  v17 = *((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v18 = v41;
    v19 = v42;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1A57CCBFC(v18, v17, v19, a3, a4);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_1A57CD5A0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t result;
  __int16 v5;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  while (1)
  {
    v0 = sub_1A594B634();
    v2 = v1;
    if (!v1)
      goto LABEL_15;
    v3 = v0;
    if ((v0 != 2573 || v1 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
    {
      if ((sub_1A594B1B4() & 1) == 0)
        goto LABEL_16;
      result = sub_1A57A76A0(v3, v2);
      if ((result & 0x100000000) != 0)
        goto LABEL_18;
      if ((result & 0xFFFFFF80) != 0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
LABEL_15:
        swift_bridgeObjectRelease();
        return v2 == 0;
      }
      result = sub_1A57A76A0(v3, v2);
      if ((result & 0x100000000) != 0)
        goto LABEL_19;
      if ((result & 0xFFFFFF00) != 0)
        break;
    }
    v5 = sub_1A57CD6F4(v3, v2);
    swift_bridgeObjectRelease();
    if ((v5 & 0x100) != 0
      || v5 - 127 < 0xFFFFFFA2
      || v5 - 34 <= 0x3B
      && ((1 << (v5 - 34)) & 0xE0000007F0024C1) != 0)
    {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1A57CD6F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v4 = sub_1A594B670();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v4 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      else
        v4 = *(_BYTE *)sub_1A594C7D4();
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

uint64_t sub_1A57CD784(void (*a1)(char *, char *), uint64_t a2, char *a3)
{
  char v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((a3[1] & 1) == 0)
  {
    v5 = *a3;
    *(_WORD *)a3 = 256;
    v14 = v5;
    a1(&v14, &v15);
  }
  result = sub_1A594B634();
  if (v7)
  {
    v8 = result;
    v9 = v7;
    do
    {
      if ((v8 != 2573 || v9 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
      {
        if ((sub_1A594B1B4() & 1) == 0)
          goto LABEL_5;
        v11 = sub_1A57A76A0(v8, v9);
        if ((v11 & 0x100000000) != 0)
          goto LABEL_23;
        if ((v11 & 0xFFFFFF80) != 0)
        {
LABEL_5:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        v12 = sub_1A57A76A0(v8, v9);
        if ((v12 & 0x100000000) != 0)
          goto LABEL_24;
        if ((v12 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
        }
      }
      v13 = sub_1A57CD6F4(v8, v9);
      result = swift_bridgeObjectRelease();
      if ((v13 & 0x100) == 0)
      {
        if (v13 == 32 || v13 == 9)
        {
          *(_WORD *)a3 = v13;
          return result;
        }
        if (v13 - 127 >= 0xFFFFFFA2)
        {
          v15 = v13;
          a1(&v15, (char *)&v16);
        }
      }
LABEL_6:
      result = sub_1A594B634();
      v8 = result;
      v9 = v10;
    }
    while (v10);
  }
  return result;
}

uint64_t *sub_1A57CD938(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, char *a7)
{
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  if (a1)
    v12 = a2 - a1;
  else
    v12 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v12 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14 = (uint64_t)result;
  result[2] = 0;
  result[3] = v12;
  result[4] = a1;
  result[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  sub_1A57CD784((void (*)(char *, char *))sub_1A57D0154, v14, a7);
  result = (uint64_t *)swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(a4 + 8);
  if (v16 < 1)
    goto LABEL_13;
  v17 = __OFADD__(v16, v15);
  v18 = v16 + v15;
  if (v17)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v18 < 79)
  {
LABEL_13:
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (a1)
        v20 = a1 + v15;
      else
        v20 = 0;
      a5((char *)a1, (char *)v20);
      result = (uint64_t *)sub_1A56F12C4(0, v15, a1, a2);
      v21 = *(_QWORD *)(a4 + 8);
      v17 = __OFADD__(v21, result);
      v22 = (char *)result + v21;
      if (!v17)
        goto LABEL_29;
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1A57EEB1C(*(_BYTE *)a4, a5);
  result = (uint64_t *)a5("\t", "");
  if ((a3 & 1) != 0)
  {
    if (v15 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v19 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v15 & 0x8000000000000000) == 0)
  {
    v19 = 0;
LABEL_22:
    if (a1)
      v23 = a1 + v15;
    else
      v23 = 0;
    if (a1)
      v24 = a1 + v19;
    else
      v24 = 0;
    a5((char *)v24, (char *)v23);
    result = (uint64_t *)sub_1A56F12C4(v19, v15, a1, a2);
    v22 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(_QWORD *)(a4 + 8) = v22;
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t *sub_1A57CDB1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t *a7, uint64_t a8, unint64_t a9, unint64_t *a10, char a11)
{
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1)
    v17 = a2 - a1;
  else
    v17 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v17 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v19 = (uint64_t)result;
  v30 = a4;
  result[2] = 0;
  result[3] = v17;
  result[4] = a1;
  result[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  sub_1A57CFAF8((void (*)(char *, uint64_t *))sub_1A57D0154, v19, a7, a8, a9, a10, a11 & 1);
  result = (uint64_t *)swift_beginAccess();
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(a4 + 8);
  if (v21 < 1)
    goto LABEL_13;
  v22 = __OFADD__(v21, v20);
  v23 = v21 + v20;
  if (v22)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v23 < 79)
  {
LABEL_13:
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (a1)
        v25 = a1 + v20;
      else
        v25 = 0;
      a5((char *)a1, (char *)v25);
      result = (uint64_t *)sub_1A56F12C4(0, v20, a1, a2);
      v26 = *(_QWORD *)(a4 + 8);
      v22 = __OFADD__(v26, result);
      v27 = (char *)result + v26;
      if (!v22)
        goto LABEL_29;
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1A57EEB1C(*(_BYTE *)a4, a5);
  result = (uint64_t *)a5("\t", "");
  if ((a3 & 1) != 0)
  {
    if (v20 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v24 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v20 & 0x8000000000000000) == 0)
  {
    v24 = 0;
LABEL_22:
    if (a1)
      v28 = a1 + v20;
    else
      v28 = 0;
    if (a1)
      v29 = a1 + v24;
    else
      v29 = 0;
    a5((char *)v29, (char *)v28);
    result = (uint64_t *)sub_1A56F12C4(v24, v20, a1, a2);
    v27 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(_QWORD *)(v30 + 8) = v27;
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1A57CDD28(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v34;
  _BYTE v35[31];

  *(_QWORD *)&v35[23] = *MEMORY[0x1E0C80C00];
  if (a1)
    v16 = a2 - a1;
  else
    v16 = 0;
  v17 = (uint64_t *)swift_allocObject();
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v18 = v17;
  v17[2] = 0;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v17);
  sub_1A57D0270(a7, a8, (void (*)(char *, _QWORD *))sub_1A57D0154);
  v34 = 61;
  sub_1A57CF55C((uint64_t)&v34, (uint64_t)v35, v18);
  sub_1A57D08E0(a9, a10, (void (*)(char *, char *))sub_1A57D0154);
  if ((a11 & 1) == 0)
  {
    v34 = 59;
    sub_1A57CF55C((uint64_t)&v34, (uint64_t)v35, v18);
  }
  swift_beginAccess();
  v19 = v18[2];
  v20 = *(_QWORD *)(a4 + 8);
  if (v20 >= 1)
  {
    v21 = __OFADD__(v20, v19);
    v22 = v20 + v19;
    if (v21)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((a3 & 1) != 0)
      {
        if (v19 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        v23 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0)
        goto LABEL_37;
      v23 = 0;
LABEL_24:
      if (a1)
        v28 = (char *)(a1 + v19);
      else
        v28 = 0;
      if (a1)
        v29 = (char *)(a1 + v23);
      else
        v29 = 0;
      a5(v29, v28);
      v30 = sub_1A56F12C4(v23, v19, a1, a2);
      v27 = v30 + 1;
      if (!__OFADD__(v30, 1))
        goto LABEL_31;
      goto LABEL_35;
    }
  }
  if (v19 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1)
    v24 = (char *)(a1 + v19);
  else
    v24 = 0;
  a5((char *)a1, v24);
  v25 = sub_1A56F12C4(0, v19, a1, a2);
  v26 = *(_QWORD *)(a4 + 8);
  v21 = __OFADD__(v26, v25);
  v27 = v26 + v25;
  if (v21)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(_QWORD *)(a4 + 8) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57CDFB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, __int128 *a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  v14 = (uint64_t *)swift_allocObject();
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v15 = v14;
  v14[2] = 0;
  v14[3] = v13;
  v14[4] = a1;
  v14[5] = a2;
  v33 = a3;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v14);
  v16 = *a7;
  v38 = a7[1];
  v17 = *((_QWORD *)a7 + 4);
  v34 = v16;
  v36 = v17;
  v37 = v16;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v18 = sub_1A594B70C();
  sub_1A57D0270(v18, v19, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v17 + 16))
  {
    LOBYTE(v37) = 59;
    sub_1A57CF55C((uint64_t)&v37, (uint64_t)&v37 + 1, v15);
  }
  swift_beginAccess();
  v20 = v15[2];
  v21 = *(_QWORD *)(a4 + 8);
  if (v21 >= 1)
  {
    v22 = __OFADD__(v21, v20);
    v23 = v21 + v20;
    if (v22)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v23 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((v33 & 1) != 0)
      {
        if (v20 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        v24 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v20 < 0)
        goto LABEL_37;
      v24 = 0;
LABEL_24:
      if (a1)
        v29 = (char *)(a1 + v20);
      else
        v29 = 0;
      if (a1)
        v30 = (char *)(a1 + v24);
      else
        v30 = 0;
      a5(v30, v29);
      v31 = sub_1A56F12C4(v24, v20, a1, a2);
      v28 = v31 + 1;
      if (!__OFADD__(v31, 1))
        goto LABEL_31;
      goto LABEL_35;
    }
  }
  if (v20 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1)
    v25 = (char *)(a1 + v20);
  else
    v25 = 0;
  a5((char *)a1, v25);
  v26 = sub_1A56F12C4(0, v20, a1, a2);
  v27 = *(_QWORD *)(a4 + 8);
  v22 = __OFADD__(v27, v26);
  v28 = v27 + v26;
  if (v22)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(_QWORD *)(a4 + 8) = v28;
  swift_release();
  sub_1A5503278((uint64_t)&v34);
  v39 = v38;
  sub_1A55032A0((uint64_t)&v39, (uint64_t)v40, &qword_1EE7986B8);
  sub_1A553E5DC((uint64_t)v40);
  v35 = *((_QWORD *)&v39 + 1);
  sub_1A553E5DC((uint64_t)&v35);
  return sub_1A553E5DC((uint64_t)&v36);
}

uint64_t sub_1A57CE270(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v31;
  _BYTE v32[31];

  *(_QWORD *)&v32[23] = *MEMORY[0x1E0C80C00];
  if (a1)
    v14 = a2 - a1;
  else
    v14 = 0;
  v15 = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v16 = v15;
  v15[2] = 0;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v15);
  v31 = 60;
  sub_1A57CF55C((uint64_t)&v31, (uint64_t)v32, v16);
  sub_1A57CFF04(a7, a8, (void (*)(char *, _QWORD *))sub_1A57D0154);
  v31 = 62;
  sub_1A57CF55C((uint64_t)&v31, (uint64_t)v32, v16);
  swift_beginAccess();
  v17 = v16[2];
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 >= 1)
  {
    v19 = __OFADD__(v18, v17);
    v20 = v18 + v17;
    if (v19)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v20 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((a3 & 1) != 0)
      {
        if (v17 < 1)
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
        v21 = 1;
        goto LABEL_22;
      }
LABEL_20:
      if (v17 < 0)
        goto LABEL_35;
      v21 = 0;
LABEL_22:
      if (a1)
        v26 = (char *)(a1 + v17);
      else
        v26 = 0;
      if (a1)
        v27 = (char *)(a1 + v21);
      else
        v27 = 0;
      a5(v27, v26);
      v28 = sub_1A56F12C4(v21, v17, a1, a2);
      v25 = v28 + 1;
      if (!__OFADD__(v28, 1))
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a1)
    v22 = (char *)(a1 + v17);
  else
    v22 = 0;
  a5((char *)a1, v22);
  v23 = sub_1A56F12C4(0, v17, a1, a2);
  v24 = *(_QWORD *)(a4 + 8);
  v19 = __OFADD__(v24, v23);
  v25 = v24 + v23;
  if (v19)
  {
    __break(1u);
    goto LABEL_20;
  }
LABEL_29:
  *(_QWORD *)(a4 + 8) = v25;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1A57CE4C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  if (a1)
    v14 = a2 - a1;
  else
    v14 = 0;
  v15 = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v16 = v15;
  v15[2] = 0;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v15);
  v35[0] = a7;
  v35[1] = a8;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v17 = sub_1A594B70C();
  sub_1A57D0270(v17, v18, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  if ((a9 & 1) == 0)
  {
    LOBYTE(v35[0]) = 44;
    sub_1A57CF55C((uint64_t)v35, (uint64_t)v35 + 1, v16);
  }
  swift_beginAccess();
  v19 = v16[2];
  v20 = a4;
  v21 = *(_QWORD *)(a4 + 8);
  if (v21 >= 1)
  {
    v22 = __OFADD__(v21, v19);
    v23 = v21 + v19;
    if (v22)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((a3 & 1) != 0)
      {
        if (v19 < 1)
        {
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
        }
        v24 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0)
        goto LABEL_38;
      v24 = 0;
LABEL_24:
      if (a1)
        v29 = (char *)(a1 + v19);
      else
        v29 = 0;
      if (a1)
        v30 = (char *)(a1 + v24);
      else
        v30 = 0;
      a5(v30, v29);
      v31 = sub_1A56F12C4(v24, v19, a1, a2);
      v28 = v31 + 1;
      if (!__OFADD__(v31, 1))
      {
        v20 = a4;
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (a1)
    v25 = (char *)(a1 + v19);
  else
    v25 = 0;
  a5((char *)a1, v25);
  v26 = sub_1A56F12C4(0, v19, a1, a2);
  v27 = *(_QWORD *)(a4 + 8);
  v22 = __OFADD__(v27, v26);
  v28 = v27 + v26;
  if (v22)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_32:
  *(_QWORD *)(v20 + 8) = v28;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t *sub_1A57CE734(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v14;
  uint64_t *result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  if (a1)
    v14 = a2 - a1;
  else
    v14 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v16 = result;
  result[2] = 0;
  result[3] = v14;
  result[4] = a1;
  result[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D0270(a7, a8, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_beginAccess();
  v17 = v16[2];
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 < 1)
    goto LABEL_13;
  v19 = __OFADD__(v18, v17);
  v20 = v18 + v17;
  if (v19)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v20 < 79)
  {
LABEL_13:
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (a1)
        v22 = a1 + v17;
      else
        v22 = 0;
      a5((char *)a1, (char *)v22);
      result = (uint64_t *)sub_1A56F12C4(0, v17, a1, a2);
      v23 = *(_QWORD *)(a4 + 8);
      v19 = __OFADD__(v23, result);
      v24 = (char *)result + v23;
      if (!v19)
        goto LABEL_29;
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1A57EEB1C(*(_BYTE *)a4, a5);
  result = (uint64_t *)a5("\t", "");
  if ((a3 & 1) != 0)
  {
    if (v17 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v21 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v21 = 0;
LABEL_22:
    if (a1)
      v25 = a1 + v17;
    else
      v25 = 0;
    if (a1)
      v26 = a1 + v21;
    else
      v26 = 0;
    a5((char *)v26, (char *)v25);
    result = (uint64_t *)sub_1A56F12C4(v21, v17, a1, a2);
    v24 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(_QWORD *)(a4 + 8) = v24;
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t *sub_1A57CE934(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *result;
  uint64_t *v14;
  char v15;
  uint64_t (*v16)(char *, char *);
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[96];
  __int128 v35;
  char v36[8];
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  if (a1)
    v12 = a2 - a1;
  else
    v12 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v12 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v14 = result;
  v15 = a3;
  v16 = a5;
  result[2] = 0;
  result[3] = v12;
  result[4] = a1;
  result[5] = a2;
  v17 = v15;
  if ((v15 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  sub_1A57CF55C((uint64_t)"multipart/", (uint64_t)"", v14);
  v35 = *(_OWORD *)(a7 + 8);
  v32 = a7;
  v19 = *((_QWORD *)&v35 + 1);
  v18 = v35;
  sub_1A5524B84((uint64_t)&v35);
  v20 = v19;
  v21 = v32;
  sub_1A57D0270(v18, v20, (void (*)(char *, _QWORD *))sub_1A57D0154);
  sub_1A5503278((uint64_t)&v35);
  sub_1A55032A0(v32 + 24, (uint64_t)v34, &qword_1EE796940);
  sub_1A55032A0((uint64_t)v34, (uint64_t)v36, &qword_1EE796940);
  if (v37 && *(_QWORD *)(v38 + 16))
  {
    v39 = 59;
    sub_1A57CF55C((uint64_t)&v39, (uint64_t)&v40, v14);
  }
  result = (uint64_t *)swift_beginAccess();
  v22 = v14[2];
  v23 = *(_QWORD *)(a4 + 8);
  if (v23 < 1)
    goto LABEL_16;
  v24 = __OFADD__(v23, v22);
  v25 = v23 + v22;
  if (v24)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v25 < 79)
  {
LABEL_16:
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (a1)
        v27 = a1 + v22;
      else
        v27 = 0;
      v16((char *)a1, (char *)v27);
      result = (uint64_t *)sub_1A56F12C4(0, v22, a1, a2);
      v28 = *(_QWORD *)(a4 + 8);
      v24 = __OFADD__(v28, result);
      v29 = (char *)result + v28;
      if (!v24)
        goto LABEL_33;
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_35;
  }
  sub_1A57EEB1C(*(_BYTE *)a4, v16);
  result = (uint64_t *)v16("\t", "");
  if ((v17 & 1) != 0)
  {
    if (v22 < 1)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v26 = 1;
    goto LABEL_25;
  }
LABEL_23:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v26 = 0;
LABEL_25:
    if (a1)
      v30 = a1 + v22;
    else
      v30 = 0;
    if (a1)
      v31 = a1 + v26;
    else
      v31 = 0;
    v16((char *)v31, (char *)v30);
    result = (uint64_t *)sub_1A56F12C4(v26, v22, a1, a2);
    v29 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
      v21 = v32;
LABEL_33:
      *(_QWORD *)(a4 + 8) = v29;
      swift_release();
      return (uint64_t *)sub_1A57D2394(v21);
    }
    goto LABEL_37;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1A57CEBB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v33;
  _BYTE v34[31];

  *(_QWORD *)&v34[23] = *MEMORY[0x1E0C80C00];
  if (a1)
    v16 = a2 - a1;
  else
    v16 = 0;
  v17 = (uint64_t *)swift_allocObject();
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v18 = v17;
  v17[2] = 0;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v17);
  sub_1A57CF55C((uint64_t)"text/", (uint64_t)"", v18);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D0270(a7, a8, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(a10 + 24) + 16))
  {
    v33 = 59;
    sub_1A57CF55C((uint64_t)&v33, (uint64_t)v34, v18);
  }
  swift_beginAccess();
  v19 = v18[2];
  v20 = *(_QWORD *)(a4 + 8);
  if (v20 >= 1)
  {
    v21 = __OFADD__(v20, v19);
    v22 = v20 + v19;
    if (v21)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((a3 & 1) != 0)
      {
        if (v19 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        v23 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0)
        goto LABEL_37;
      v23 = 0;
LABEL_24:
      if (a1)
        v28 = (char *)(a1 + v19);
      else
        v28 = 0;
      if (a1)
        v29 = (char *)(a1 + v23);
      else
        v29 = 0;
      a5(v29, v28);
      v30 = sub_1A56F12C4(v23, v19, a1, a2);
      v27 = v30 + 1;
      if (!__OFADD__(v30, 1))
        goto LABEL_31;
      goto LABEL_35;
    }
  }
  if (v19 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1)
    v24 = (char *)(a1 + v19);
  else
    v24 = 0;
  a5((char *)a1, v24);
  v25 = sub_1A56F12C4(0, v19, a1, a2);
  v26 = *(_QWORD *)(a4 + 8);
  v21 = __OFADD__(v26, v25);
  v27 = v26 + v25;
  if (v21)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(_QWORD *)(a4 + 8) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1A571ED44(a10);
}

uint64_t sub_1A57CEE30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, __int128 *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v31;
  char v32;
  _BYTE v33[31];

  *(_QWORD *)&v33[23] = *MEMORY[0x1E0C80C00];
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  v14 = (uint64_t *)swift_allocObject();
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v15 = v14;
  v14[2] = 0;
  v14[3] = v13;
  v14[4] = a1;
  v14[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", v14);
  sub_1A57CF55C((uint64_t)"message/", (uint64_t)"", v15);
  v31 = *a7;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D0270(v31, *((unint64_t *)&v31 + 1), (void (*)(char *, _QWORD *))sub_1A57D0154);
  sub_1A5503278((uint64_t)&v31);
  if (*(_QWORD *)(*(_QWORD *)(a8 + 24) + 16))
  {
    v32 = 59;
    sub_1A57CF55C((uint64_t)&v32, (uint64_t)v33, v15);
  }
  swift_beginAccess();
  v16 = v15[2];
  v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= 1)
  {
    v18 = __OFADD__(v17, v16);
    v19 = v17 + v16;
    if (v18)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v19 >= 79)
    {
      sub_1A57EEB1C(*(_BYTE *)a4, a5);
      a5("\t", "");
      if ((a3 & 1) != 0)
      {
        if (v16 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        v20 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v16 < 0)
        goto LABEL_37;
      v20 = 0;
LABEL_24:
      if (a1)
        v25 = (char *)(a1 + v16);
      else
        v25 = 0;
      if (a1)
        v26 = (char *)(a1 + v20);
      else
        v26 = 0;
      a5(v26, v25);
      v27 = sub_1A56F12C4(v20, v16, a1, a2);
      v24 = v27 + 1;
      if (!__OFADD__(v27, 1))
        goto LABEL_31;
      goto LABEL_35;
    }
  }
  if (v16 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1)
    v21 = (char *)(a1 + v16);
  else
    v21 = 0;
  a5((char *)a1, v21);
  v22 = sub_1A56F12C4(0, v16, a1, a2);
  v23 = *(_QWORD *)(a4 + 8);
  v18 = __OFADD__(v23, v22);
  v24 = v23 + v22;
  if (v18)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(_QWORD *)(a4 + 8) = v24;
  swift_release();
  sub_1A56921B8((uint64_t)a7);
  return sub_1A571ED44(a8);
}

uint64_t *sub_1A57CF0BC(char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t (*v24)(char *, char *);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  _BYTE v32[23];
  uint64_t (*v33)(char *, char *);

  v33 = a5;
  if (a1)
    v17 = a2 - (_QWORD)a1;
  else
    v17 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v17 < 0)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v19 = result;
  result[2] = 0;
  result[3] = v17;
  result[4] = (uint64_t)a1;
  result[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D0270(a7, a8, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  v31 = 47;
  sub_1A57CF55C((uint64_t)&v31, (uint64_t)v32, v19);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D0270(a9, a10, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(a11 + 24) + 16))
  {
    v31 = 59;
    sub_1A57CF55C((uint64_t)&v31, (uint64_t)v32, v19);
  }
  result = (uint64_t *)swift_beginAccess();
  v20 = v19[2];
  v21 = *(_QWORD *)(a4 + 8);
  if (v21 < 1)
    goto LABEL_15;
  v22 = __OFADD__(v21, v20);
  v23 = v21 + v20;
  if (v22)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v23 < 79)
  {
LABEL_15:
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (a1)
        v26 = &a1[v20];
      else
        v26 = 0;
      v33(a1, v26);
      result = (uint64_t *)sub_1A56F12C4(0, v20, (uint64_t)a1, a2);
      v27 = *(_QWORD *)(a4 + 8);
      v22 = __OFADD__(v27, result);
      v28 = (char *)result + v27;
      if (!v22)
        goto LABEL_31;
      __break(1u);
      goto LABEL_22;
    }
    goto LABEL_33;
  }
  v24 = v33;
  sub_1A57EEB1C(*(_BYTE *)a4, v33);
  result = (uint64_t *)v24("\t", "");
  if ((a3 & 1) != 0)
  {
    if (v20 < 1)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = 1;
    goto LABEL_24;
  }
LABEL_22:
  if ((v20 & 0x8000000000000000) == 0)
  {
    v25 = 0;
LABEL_24:
    if (a1)
      v29 = &a1[v20];
    else
      v29 = 0;
    if (a1)
      v30 = &a1[v25];
    else
      v30 = 0;
    v33(v30, v29);
    result = (uint64_t *)sub_1A56F12C4(v25, v20, (uint64_t)a1, a2);
    v28 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_31:
      *(_QWORD *)(a4 + 8) = v28;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t *)sub_1A571ED44(a11);
    }
    goto LABEL_35;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *sub_1A57CF35C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *))
{
  uint64_t v9;
  uint64_t *result;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
    v9 = a2 - a1;
  else
    v9 = 0;
  result = (uint64_t *)swift_allocObject();
  if (v9 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v11 = result;
  result[2] = 0;
  result[3] = v9;
  result[4] = a1;
  result[5] = a2;
  if ((a3 & 1) != 0)
    sub_1A57CF55C((uint64_t)" ", (uint64_t)"", result);
  v12 = sub_1A594CC9C();
  sub_1A57CFF04(v12, v13, (void (*)(char *, _QWORD *))sub_1A57D0154);
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_beginAccess();
  v14 = v11[2];
  v15 = *(_QWORD *)(a4 + 8);
  if (v15 < 1)
    goto LABEL_13;
  v16 = __OFADD__(v15, v14);
  v17 = v15 + v14;
  if (v16)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v17 < 79)
  {
LABEL_13:
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (a1)
        v19 = a1 + v14;
      else
        v19 = 0;
      a5((char *)a1, (char *)v19);
      result = (uint64_t *)sub_1A56F12C4(0, v14, a1, a2);
      v20 = *(_QWORD *)(a4 + 8);
      v16 = __OFADD__(v20, result);
      v21 = (char *)result + v20;
      if (!v16)
        goto LABEL_29;
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1A57EEB1C(*(_BYTE *)a4, a5);
  result = (uint64_t *)a5("\t", "");
  if ((a3 & 1) != 0)
  {
    if (v14 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v18 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v18 = 0;
LABEL_22:
    if (a1)
      v22 = a1 + v14;
    else
      v22 = 0;
    if (a1)
      v23 = a1 + v18;
    else
      v23 = 0;
    a5((char *)v23, (char *)v22);
    result = (uint64_t *)sub_1A56F12C4(v18, v14, a1, a2);
    v21 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(_QWORD *)(a4 + 8) = v21;
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1A57CF55C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a3 + 2;
  if (a1)
    v5 = a2 - a1;
  else
    v5 = 0;
  swift_beginAccess();
  if (sub_1A56F12C4(a3[2], a3[3], a3[4], a3[5]) < v5)
    goto LABEL_12;
  swift_beginAccess();
  sub_1A57D015C();
  sub_1A5949B4C();
  swift_beginAccess();
  v6 = *v4 + v5;
  if (__OFADD__(*v4, v5))
  {
    __break(1u);
  }
  else
  {
    v7 = a3[3];
    if (v7 >= v6)
    {
      if (v6 >= *v4)
      {
        v9 = a3[4];
        v8 = a3[5];
        result = swift_beginAccess();
        a3[2] = v6;
        a3[3] = v7;
        a3[4] = v9;
        a3[5] = v8;
        return result;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  result = sub_1A594C9C0();
  __break(1u);
  return result;
}

uint64_t sub_1A57CF6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v6 = sub_1A594B634();
  if (!v7)
    goto LABEL_23;
  v8 = v6;
  v9 = v7;
  v10 = 0;
  while (1)
  {
    if ((v8 != 2573 || v9 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
    {
      if ((sub_1A594B1B4() & 1) == 0)
        goto LABEL_3;
      v12 = sub_1A57A76A0(v8, v9);
      if ((v12 & 0x100000000) != 0)
        goto LABEL_82;
      if ((v12 & 0xFFFFFF80) != 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v13 = sub_1A57A76A0(v8, v9);
      if ((v13 & 0x100000000) != 0)
        goto LABEL_83;
      if ((v13 & 0xFFFFFF00) != 0)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
    }
    v14 = sub_1A57CD6F4(v8, v9);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100) != 0 || v14 - 127 < 0xFFFFFFA1)
      goto LABEL_4;
    v15 = __OFADD__(v10++, 1);
    v16 = v15;
    if (v14 - 91 > 0xFFFFFFE5)
      break;
    if (v16)
      goto LABEL_79;
LABEL_4:
    v8 = sub_1A594B634();
    v9 = v11;
    if (!v11)
      goto LABEL_24;
  }
  if (!v16)
    goto LABEL_4;
  __break(1u);
LABEL_23:
  v10 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  v17 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if ((sub_1A57CD5A0() & 1) == 0)
    goto LABEL_43;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v18 = sub_1A594B634();
  if (!v19)
    goto LABEL_67;
  v20 = v18;
  v21 = v19;
  while (2)
  {
    if ((v20 != 2573 || v21 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
    {
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v24 = sub_1A57A76A0(v20, v21);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_84;
        if ((v24 & 0xFFFFFF80) == 0)
        {
          v25 = sub_1A57A76A0(v20, v21);
          if ((v25 & 0x100000000) != 0)
            goto LABEL_85;
          if ((v25 & 0xFFFFFF00) != 0)
            goto LABEL_73;
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_29:
      v20 = sub_1A594B634();
      v21 = v23;
      if (!v23)
        goto LABEL_67;
      continue;
    }
    break;
  }
  v22 = sub_1A57CD6F4(v20, v21);
  swift_bridgeObjectRelease();
  if ((v22 & 0x100) != 0)
    goto LABEL_29;
  v15 = __OFADD__(v17++, 1);
  if (!v15)
    goto LABEL_29;
  __break(1u);
LABEL_43:
  v15 = __OFADD__(v17++, 1);
  if (v15)
    goto LABEL_76;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v26 = sub_1A594B634();
  if (!v27)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    v15 = __OFADD__(v17++, 1);
    if (!v15)
      goto LABEL_69;
    goto LABEL_77;
  }
  v28 = v26;
  v29 = v27;
  while (1)
  {
    if ((v28 != 2573 || v29 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
    {
      if ((sub_1A594B1B4() & 1) == 0)
        goto LABEL_46;
      v31 = sub_1A57A76A0(v28, v29);
      if ((v31 & 0x100000000) != 0)
        goto LABEL_86;
      if ((v31 & 0xFFFFFF80) != 0)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      v32 = sub_1A57A76A0(v28, v29);
      if ((v32 & 0x100000000) != 0)
        goto LABEL_87;
      if ((v32 & 0xFFFFFF00) != 0)
        goto LABEL_74;
    }
    v33 = sub_1A57CD6F4(v28, v29);
    swift_bridgeObjectRelease();
    if ((v33 & 0x100) != 0)
      goto LABEL_47;
    if (v33 == 92 || v33 == 34)
      break;
    if (v33 - 127 >= 0xFFFFFFA1)
    {
      v15 = __OFADD__(v17++, 1);
      if (v15)
        goto LABEL_81;
    }
LABEL_47:
    v28 = sub_1A594B634();
    v29 = v30;
    if (!v30)
      goto LABEL_68;
  }
  v34 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_80;
  v17 += 2;
  if (!__OFADD__(v34, 1))
    goto LABEL_47;
  __break(1u);
LABEL_67:
  swift_bridgeObjectRelease();
LABEL_69:
  if ((a5 & 1) == 0)
  {
    v15 = __OFADD__(v17++, 1);
    if (v15)
    {
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
    }
  }
  return v17;
}

uint64_t sub_1A57CFAF8(void (*a1)(char *, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, unint64_t *a6, char a7)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  _BYTE v36[79];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v11 = HIBYTE(a5) & 0xF;
  *(_QWORD *)&v36[71] = a4;
  v37 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v11 = a4 & 0xFFFFFFFFFFFFLL;
  v38 = 0;
  v39 = v11;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_beginAccess();
  swift_beginAccess();
  v12 = sub_1A594B634();
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    do
    {
      if ((v14 != 2573 || v15 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
      {
        if ((sub_1A594B1B4() & 1) == 0)
          goto LABEL_5;
        v17 = sub_1A57A76A0(v14, v15);
        if ((v17 & 0x100000000) != 0)
          goto LABEL_34;
        if ((v17 & 0xFFFFFF80) != 0)
        {
LABEL_5:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        v18 = sub_1A57A76A0(v14, v15);
        if ((v18 & 0x100000000) != 0)
          goto LABEL_35;
        if ((v18 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
      }
      v19 = sub_1A57CD6F4(v14, v15);
      swift_bridgeObjectRelease();
      if ((v19 & 0x100) == 0 && v19 - 127 >= 0xFFFFFFA1)
      {
        if (v19 - 91 > 0xFFFFFFE5)
        {
          v35 = v19 | 0x20;
          v20 = *a3 - 1;
          if (__OFSUB__(*a3, 1))
            goto LABEL_31;
        }
        else
        {
          v35 = v19;
          v20 = *a3 - 1;
          if (__OFSUB__(*a3, 1))
            goto LABEL_30;
        }
        *a3 = v20;
        a1(&v35, (uint64_t *)v36);
      }
LABEL_6:
      v14 = sub_1A594B634();
      v15 = v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  v35 = 61;
  swift_beginAccess();
  if (__OFSUB__(*a3, 1))
    goto LABEL_32;
  --*a3;
  a1(&v35, (uint64_t *)v36);
  swift_beginAccess();
  v21 = *a3 - 1;
  if (__OFSUB__(*a3, 1))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  v22 = *a6;
  v23 = a6[1];
  v24 = a6[2];
  v25 = a6[3];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v26 = sub_1A57D0D0C(v22, v23, v24, v25, v21, a1);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_bridgeObjectRelease();
  *a6 = v26;
  a6[1] = v28;
  a6[2] = v30;
  a6[3] = v32;
  result = swift_bridgeObjectRelease();
  if ((a7 & 1) == 0 || (a6[1] ^ *a6) >> 14)
  {
    v34 = 59;
    return ((uint64_t (*)(char *, char *))a1)(&v34, &v35);
  }
  return result;
}

uint64_t sub_1A57CFDF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(uint64_t *, char *)@<X3>, unint64_t a5@<X8>)
{
  int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  if ((a3 & 1) != 0)
  {
    a5 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(a5) = a1 >> 11;
      if (a1 >> 11 == 27)
      {
        __break(1u);
        goto LABEL_17;
      }
      LODWORD(a5) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if (a1 <= 0x7F)
        {
          v7 = (_DWORD)a1 + 1;
LABEL_9:
          v8 = 4 - (__clz(v7) >> 3);
          v13 = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * v8));
          v6 = (char *)&v13 + v8;
          a1 = &v13;
          return a4(a1, v6);
        }
        goto LABEL_14;
      }
LABEL_13:
      __break(1u);
LABEL_14:
      v5 = (a1 & 0x3F) << 8;
      if (a1 <= 0x7FF)
      {
        v7 = (v5 | (a1 >> 6)) + 33217;
        goto LABEL_9;
      }
LABEL_17:
      v10 = (v5 | (a1 >> 6) & 0x3F) << 8;
      v11 = (((v10 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v12 = (v10 | (a1 >> 12)) + 8487393;
      if ((_DWORD)a5)
        v7 = v11;
      else
        v7 = v12;
      goto LABEL_9;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = (char *)a1 + a2;
  return a4(a1, v6);
}

uint64_t sub_1A57CFF04(uint64_t a1, unint64_t a2, void (*a3)(char *, _QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  char v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v4 = HIBYTE(a2) & 0xF;
  v15[0] = a1;
  v15[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v15[2] = 0;
  v15[3] = v4;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v5 = sub_1A594B634();
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    while (1)
    {
      if (v7 == 2573 && v8 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_15;
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v10 = sub_1A57A76A0(v7, v8);
        if ((v10 & 0x100000000) != 0)
          goto LABEL_20;
        if ((v10 & 0xFFFFFF80) == 0)
          break;
      }
      swift_bridgeObjectRelease();
LABEL_6:
      v7 = sub_1A594B634();
      v8 = v9;
      if (!v9)
        return swift_bridgeObjectRelease();
    }
    v11 = sub_1A57A76A0(v7, v8);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_21;
    if ((v11 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
LABEL_15:
    v12 = sub_1A57CD6F4(v7, v8);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0 && v12 - 127 >= 0xFFFFFFA1)
    {
      v14 = v12;
      a3(&v14, v15);
    }
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D008C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t (*a5)(uint64_t *, char *)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t a8@<X8>)
{
  uint64_t result;
  char v15[8];
  uint64_t v16;

  v15[0] = a4;
  sub_1A57CFDF0(a1, a2, a3, a5, a8);
  result = a5((uint64_t *)": ", "");
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else if (!__OFADD__(a2, 2))
  {
    v16 = a2 + 2;
    sub_1A57CCA5C(a6, a7, 70, 0, (uint64_t)v15);
    return sub_1A57EEB1C(a4, (uint64_t (*)(char *, char *))a5);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57D0144()
{
  return swift_deallocObject();
}

uint64_t sub_1A57D0154(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A57CF55C(a1, a2, v2);
}

unint64_t sub_1A57D015C()
{
  unint64_t result;

  result = qword_1EE7990D8;
  if (!qword_1EE7990D8)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&qword_1EE7990D8);
  }
  return result;
}

uint64_t sub_1A57D01A0(uint64_t a1, uint64_t a2)
{
  return sub_1A57CB724(a1, a2);
}

uint64_t sub_1A57D01A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57D01F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57D0234(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A57D0270(uint64_t a1, unint64_t a2, void (*a3)(char *, _QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  char v13;
  char v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v4 = HIBYTE(a2) & 0xF;
  v16[0] = a1;
  v16[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v16[2] = 0;
  v16[3] = v4;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v5 = sub_1A594B634();
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    while (1)
    {
      if (v7 == 2573 && v8 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_15;
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v10 = sub_1A57A76A0(v7, v8);
        if ((v10 & 0x100000000) != 0)
          goto LABEL_22;
        if ((v10 & 0xFFFFFF80) == 0)
          break;
      }
      swift_bridgeObjectRelease();
LABEL_6:
      v7 = sub_1A594B634();
      v8 = v9;
      if (!v9)
        return swift_bridgeObjectRelease();
    }
    v11 = sub_1A57A76A0(v7, v8);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_23;
    if ((v11 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
LABEL_15:
    v12 = sub_1A57CD6F4(v7, v8);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0)
    {
      v13 = v12;
      if (v12 - 127 >= 0xFFFFFFA1)
      {
        if (v12 - 91 >= 0xFFFFFFE6)
          v13 = v12 | 0x20;
        v15 = v13;
        a3(&v15, v16);
      }
    }
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D040C(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a6;
  v26 = *MEMORY[0x1E0C80C00];
  v11 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < 0)
    goto LABEL_9;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A56974D0(a10);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  isStackAllocationSafe = sub_1A56974D0(a10);
  if (v11 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v24 = (uint64_t)&v24;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v18 = a8;
    v20 = (char *)&v24 - v19;
    v21 = (char *)&v24 + v11 - v19;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A56974D0(a10);
    sub_1A57CF0BC(v20, (uint64_t)v21, a4 & 1, a5, a1, a2, v25, a7, v18, a9, a10);
  }
  else
  {
    v22 = (char *)swift_slowAlloc();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A56974D0(a10);
    sub_1A57CF0BC(v22, (uint64_t)&v22[v11], a4 & 1, a5, a1, a2, v25, a7, a8, a9, a10);
    MEMORY[0x1A85B1964](v22, -1, -1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A571ED44(a10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1A571ED44(a10);
}

uint64_t sub_1A57D06D0(uint64_t a1, unint64_t a2, void (*a3)(char *, char *))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  char v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  LOBYTE(v17[0]) = 34;
  a3((char *)v17, (char *)v17 + 1);
  v6 = HIBYTE(a2) & 0xF;
  v17[0] = a1;
  v17[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v17[2] = 0;
  v17[3] = v6;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v7 = sub_1A594B634();
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    while (1)
    {
      if (v9 == 2573 && v10 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_15;
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v12 = sub_1A57A76A0(v9, v10);
        if ((v12 & 0x100000000) != 0)
          goto LABEL_23;
        if ((v12 & 0xFFFFFF80) == 0)
          break;
      }
      swift_bridgeObjectRelease();
LABEL_6:
      v9 = sub_1A594B634();
      v10 = v11;
      if (!v11)
        goto LABEL_21;
    }
    v13 = sub_1A57A76A0(v9, v10);
    if ((v13 & 0x100000000) != 0)
      goto LABEL_24;
    if ((v13 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
LABEL_15:
    v14 = sub_1A57CD6F4(v9, v10);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100) == 0)
    {
      if (v14 == 92 || v14 == 34)
      {
        v16 = 92;
        a3(&v16, (char *)v17);
        v16 = v14;
        a3(&v16, (char *)v17);
      }
      else if (v14 - 127 >= 0xFFFFFFA1)
      {
        v16 = v14;
        a3(&v16, (char *)v17);
      }
    }
    goto LABEL_6;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  LOBYTE(v17[0]) = 34;
  return ((uint64_t (*)(_QWORD *, char *))a3)(v17, (char *)v17 + 1);
}

uint64_t sub_1A57D08E0(uint64_t a1, unint64_t a2, void (*a3)(char *, char *))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  char v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  if ((sub_1A57CD5A0() & 1) == 0)
    return sub_1A57D06D0(a1, a2, a3);
  v6 = HIBYTE(a2) & 0xF;
  v17[0] = a1;
  v17[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v17[2] = 0;
  v17[3] = v6;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v7 = sub_1A594B634();
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    while (1)
    {
      if (v9 == 2573 && v10 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_16;
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v12 = sub_1A57A76A0(v9, v10);
        if ((v12 & 0x100000000) != 0)
          goto LABEL_21;
        if ((v12 & 0xFFFFFF80) == 0)
          break;
      }
      swift_bridgeObjectRelease();
LABEL_7:
      v9 = sub_1A594B634();
      v10 = v11;
      if (!v11)
        return swift_bridgeObjectRelease();
    }
    v13 = sub_1A57A76A0(v9, v10);
    if ((v13 & 0x100000000) != 0)
      goto LABEL_22;
    if ((v13 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
LABEL_16:
    v14 = sub_1A57CD6F4(v9, v10);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100) == 0)
    {
      v16 = v14;
      a3(&v16, (char *)v17);
    }
    goto LABEL_7;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D0AA8(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(char *, char *);
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v11 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < 0)
    goto LABEL_9;
  v24 = a1;
  swift_bridgeObjectRetain_n();
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v11 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v23 = (uint64_t)&v23;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v19 = (char *)&v23 - v18;
    v20 = (char *)&v23 + v11 - v18;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57CDD28((uint64_t)v19, (uint64_t)v20, a4 & 1, a5, v24, a2, a6, a7, a8, a9, a10 & 1);
  }
  else
  {
    v21 = swift_slowAlloc();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57CDD28(v21, v21 + v11, a4 & 1, a5, v24, a2, a6, a7, a8, a9, a10 & 1);
    MEMORY[0x1A85B1964](v21, -1, -1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D0D0C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t *))
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  BOOL v16;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a5 < 3)
    goto LABEL_28;
  v25 = 34;
  a6(&v25, &v26);
  v8 = a1 >> 14;
  v20 = a2 >> 14;
  if (a1 >> 14 < a2 >> 14)
  {
    v9 = 2;
    do
    {
      v11 = sub_1A594C3A8();
      v12 = v10;
      if ((v11 != 2573 || v10 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
      {
        if ((sub_1A594B1B4() & 1) == 0)
          goto LABEL_4;
        v13 = sub_1A57A76A0(v11, v12);
        if ((v13 & 0x100000000) != 0)
          goto LABEL_31;
        if ((v13 & 0xFFFFFF80) != 0)
        {
LABEL_4:
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        v14 = sub_1A57A76A0(v11, v12);
        if ((v14 & 0x100000000) != 0)
          goto LABEL_32;
        if ((v14 & 0xFFFFFF00) != 0)
          goto LABEL_27;
      }
      v15 = sub_1A57CD6F4(v11, v12);
      swift_bridgeObjectRelease();
      if ((v15 & 0x100) == 0)
      {
        if (v15 == 92 || v15 == 34)
        {
          v16 = __OFADD__(v9, 2);
          v9 += 2;
          if (v16)
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
          }
          if (v9 >= a5)
            break;
          v22 = 92;
          a6(&v22, (uint64_t *)&v23);
          v21 = v15;
          a6(&v21, (uint64_t *)&v22);
        }
        else if (v15 - 127 >= 0xFFFFFFA1)
        {
          v16 = __OFADD__(v9++, 1);
          if (v16)
            goto LABEL_30;
          if (v9 >= a5)
            break;
          v23 = v15;
          a6(&v23, (uint64_t *)&v24);
        }
      }
LABEL_5:
      v8 = (unint64_t)sub_1A594C378() >> 14;
    }
    while (v8 < v20);
  }
  v24 = 34;
  a6(&v24, (uint64_t *)&v25);
  if (v20 < v8)
    goto LABEL_29;
  return sub_1A594C3B4();
}

uint64_t sub_1A57D0FC4(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v8 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v8 < 0)
    goto LABEL_9;
  sub_1A5692040((uint64_t)a6);
  sub_1A56974D0(a7);
  sub_1A5692040((uint64_t)a6);
  isStackAllocationSafe = sub_1A56974D0(a7);
  if (v8 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v16 = (char *)v20 - v15;
    v17 = (char *)v20 + v8 - v15;
    sub_1A5692040((uint64_t)a6);
    sub_1A56974D0(a7);
    sub_1A57CEE30((uint64_t)v16, (uint64_t)v17, a4 & 1, a5, a1, a2, a6, a7);
  }
  else
  {
    v18 = swift_slowAlloc();
    sub_1A5692040((uint64_t)a6);
    sub_1A56974D0(a7);
    sub_1A57CEE30(v18, v18 + v8, a4 & 1, a5, a1, a2, a6, a7);
    MEMORY[0x1A85B1964](v18, -1, -1);
  }
  sub_1A56921B8((uint64_t)a6);
  sub_1A571ED44(a7);
  sub_1A56921B8((uint64_t)a6);
  return sub_1A571ED44(a7);
}

uint64_t sub_1A57D1200(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v10 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v10 < 0)
    goto LABEL_9;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A56974D0(a9);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  isStackAllocationSafe = sub_1A56974D0(a9);
  if (v10 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v23[1] = v23;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v19 = (char *)v23 - v18;
    v20 = (char *)v23 + v10 - v18;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A56974D0(a9);
    sub_1A57CEBB8((uint64_t)v19, (uint64_t)v20, a4 & 1, a5, a1, a2, a6, a7, a8, a9);
  }
  else
  {
    v21 = swift_slowAlloc();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A56974D0(a9);
    sub_1A57CEBB8(v21, v21 + v10, a4 & 1, a5, a1, a2, a6, a7, a8, a9);
    MEMORY[0x1A85B1964](v21, -1, -1);
  }
  swift_bridgeObjectRelease();
  sub_1A571ED44(a9);
  swift_bridgeObjectRelease();
  return sub_1A571ED44(a9);
}

uint64_t sub_1A57D1460(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v7 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
  }
  if (v7 < 0)
    goto LABEL_8;
  sub_1A57D22EC(a6);
  isStackAllocationSafe = sub_1A57D22EC(a6);
  if (v7 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (char *)v18 - v13;
    v15 = (char *)v18 + v7 - v13;
    sub_1A57D22EC(a6);
    sub_1A57CE934((uint64_t)v14, (uint64_t)v15, a4 & 1, a5, a1, a2, a6);
    sub_1A57D2394(a6);
    return sub_1A57D2394(a6);
  }
  else
  {
    v17 = swift_slowAlloc();
    sub_1A57D22EC(a6);
    sub_1A57CE934(v17, v17 + v7, a4 & 1, a5, a1, a2, a6);
    MEMORY[0x1A85B1964](v17, -1, -1);
    sub_1A57D2394(a6);
    return sub_1A57D2394(a6);
  }
}

uint64_t sub_1A57D1674(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  __int128 v12;
  uint64_t v13;
  uint64_t isStackAllocationSafe;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[8];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v7 < 0)
    goto LABEL_9;
  v12 = *(_OWORD *)(a6 + 16);
  v23 = *(_OWORD *)a6;
  v24 = v12;
  v13 = *(_QWORD *)(a6 + 32);
  sub_1A55032A0((uint64_t)&v24, (uint64_t)v25, &qword_1EE7986B8);
  v21 = v13;
  v22 = *((_QWORD *)&v24 + 1);
  sub_1A5524B84((uint64_t)&v23);
  sub_1A553E5B4((uint64_t)v25);
  sub_1A553E5B4((uint64_t)&v22);
  sub_1A553E5B4((uint64_t)&v21);
  sub_1A5524B84((uint64_t)&v23);
  sub_1A553E5B4((uint64_t)v25);
  sub_1A553E5B4((uint64_t)&v22);
  isStackAllocationSafe = sub_1A553E5B4((uint64_t)&v21);
  if (v7 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v16 = &v20[-v15];
    v17 = &v20[v7 - v15];
    sub_1A5524B84((uint64_t)&v23);
    sub_1A553E5B4((uint64_t)v25);
    sub_1A553E5B4((uint64_t)&v22);
    sub_1A553E5B4((uint64_t)&v21);
    sub_1A57CDFB8((uint64_t)v16, (uint64_t)v17, a4 & 1, a5, a1, a2, (__int128 *)a6);
  }
  else
  {
    v18 = swift_slowAlloc();
    sub_1A5524B84((uint64_t)&v23);
    sub_1A553E5B4((uint64_t)v25);
    sub_1A553E5B4((uint64_t)&v22);
    sub_1A553E5B4((uint64_t)&v21);
    sub_1A57CDFB8(v18, v18 + v7, a4 & 1, a5, a1, a2, (__int128 *)a6);
    MEMORY[0x1A85B1964](v18, -1, -1);
  }
  sub_1A5503278((uint64_t)&v23);
  sub_1A553E5DC((uint64_t)v25);
  sub_1A553E5DC((uint64_t)&v22);
  sub_1A553E5DC((uint64_t)&v21);
  sub_1A5503278((uint64_t)&v23);
  sub_1A553E5DC((uint64_t)v25);
  sub_1A553E5DC((uint64_t)&v22);
  return sub_1A553E5DC((uint64_t)&v21);
}

uint64_t sub_1A57D1964@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t (*a5)(uint64_t *, char *)@<X4>, uint64_t (*a6)(char *, char *)@<X6>, uint64_t a7@<X7>, unint64_t a8@<X8>, uint64_t a9)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19[8];
  uint64_t v20;
  __int128 v21;

  v19[0] = a4;
  sub_1A57CFDF0(a1, a2, a3, a5, a8);
  result = a5((uint64_t *)": ", "");
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else if (!__OFADD__(a2, 2))
  {
    v20 = a2 + 2;
    v21 = *(_OWORD *)a9;
    v16 = *(_QWORD *)(a9 + 16);
    v17 = *(_QWORD *)(a9 + 24);
    v18 = *(_QWORD *)(a9 + 32);
    sub_1A5524B84((uint64_t)&v21);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1A57D1674(a6, a7, 160, 0, (uint64_t)v19, a9);
    sub_1A5503278((uint64_t)&v21);
    swift_release();
    swift_release();
    swift_release();
    sub_1A57CCBFC(v16, v17, v18, a6, a7);
    return sub_1A57EEB1C(a4, (uint64_t (*)(char *, char *))a5);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57D1A98(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v9 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v9 < 0)
    goto LABEL_9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v9 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v18 = (char *)v22 - v17;
    v19 = (char *)v22 + v9 - v17;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    a8(v18, v19, a4 & 1, a5, a1, a2, a6, a7);
  }
  else
  {
    v20 = swift_slowAlloc();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    a8((char *)v20, (char *)(v20 + v9), a4 & 1, a5, a1, a2, a6, a7);
    MEMORY[0x1A85B1964](v20, -1, -1);
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1A57D1C78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  char v14;
  _QWORD v15[4];
  _QWORD v16[6];

  v16[5] = *MEMORY[0x1E0C80C00];
  v2 = HIBYTE(a2) & 0xF;
  v15[0] = a1;
  v15[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  v15[2] = 0;
  v15[3] = v2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v3 = sub_1A594B634();
  if (v4)
  {
    v5 = v3;
    v6 = v4;
    v7 = MEMORY[0x1E0DEAC20];
    v8 = MEMORY[0x1E0CB1AA8];
    while (1)
    {
      if (v5 == 2573 && v6 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_15;
      if ((sub_1A594B1B4() & 1) != 0)
      {
        v10 = sub_1A57A76A0(v5, v6);
        if ((v10 & 0x100000000) != 0)
          goto LABEL_20;
        if ((v10 & 0xFFFFFF80) == 0)
          break;
      }
      swift_bridgeObjectRelease();
LABEL_6:
      v5 = sub_1A594B634();
      v6 = v9;
      if (!v9)
        return swift_bridgeObjectRelease();
    }
    v11 = sub_1A57A76A0(v5, v6);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_21;
    if ((v11 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
LABEL_15:
    v12 = sub_1A57CD6F4(v5, v6);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0 && v12 - 127 >= 0xFFFFFFA1)
    {
      v14 = v12;
      v16[3] = v7;
      v16[4] = v8;
      v16[0] = &v14;
      v16[1] = v15;
      __swift_project_boxed_opaque_existential_1_0(v16, v7);
      sub_1A5949F60();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

void sub_1A57D1E30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  _QWORD v40[4];
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[25];

  v35 = a5;
  v36 = a3;
  v37 = a4;
  v45[23] = *MEMORY[0x1E0C80C00];
  v9 = type metadata accessor for Message(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x1E0C80A78](v9);
  v30 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799078);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - v15;
  v40[2] = a6;
  v32 = *(_QWORD *)(a2 + 16);
  if (v32)
  {
    v17 = (char *)(a2 + 32);
    v38 = (char *)v40;
    v29 = a2;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v18 = 0;
    v31 = a1;
    do
    {
      sub_1A55DC3E0(v17, v45);
      if (v18)
      {
        if ((_BYTE)a1)
        {
          if (a1 == 1)
            v19 = 13;
          else
            v19 = 10;
          v39 = v19;
          v43 = MEMORY[0x1E0DEAC20];
          v44 = MEMORY[0x1E0CB1AA8];
          v41 = &v39;
          v42 = v38;
          __swift_project_boxed_opaque_existential_1_0(&v41, MEMORY[0x1E0DEAC20]);
          sub_1A55DC438((uint64_t)v45, sub_1A552370C);
        }
        else
        {
          v43 = MEMORY[0x1E0DEAC20];
          v44 = MEMORY[0x1E0CB1AA8];
          v41 = "\r\n";
          v42 = "";
          __swift_project_boxed_opaque_existential_1_0(&v41, MEMORY[0x1E0DEAC20]);
          sub_1A55DC438((uint64_t)v45, sub_1A552370C);
        }
        sub_1A5949F60();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
        a1 = v31;
      }
      else
      {
        sub_1A55DC438((uint64_t)v45, sub_1A552370C);
      }
      v43 = MEMORY[0x1E0DEAC20];
      v44 = MEMORY[0x1E0CB1AA8];
      v41 = "--";
      v42 = "";
      __swift_project_boxed_opaque_existential_1_0(&v41, MEMORY[0x1E0DEAC20]);
      sub_1A5949F60();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
      sub_1A57D1C78(v36, v37);
      if ((_BYTE)a1)
      {
        if (a1 == 1)
          v20 = 13;
        else
          v20 = 10;
        v39 = v20;
        v21 = MEMORY[0x1E0DEAC20];
        v43 = MEMORY[0x1E0DEAC20];
        v44 = MEMORY[0x1E0CB1AA8];
        v41 = &v39;
        v22 = v38;
      }
      else
      {
        v21 = MEMORY[0x1E0DEAC20];
        v43 = MEMORY[0x1E0DEAC20];
        v44 = MEMORY[0x1E0CB1AA8];
        v22 = "";
        v41 = "\r\n";
      }
      v42 = v22;
      __swift_project_boxed_opaque_existential_1_0(&v41, v21);
      sub_1A5949F60();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
      v24 = v33;
      v23 = v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v16, 1, 1, v34);
      sub_1A57D01A8((uint64_t)v16, (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v23) == 1)
      {
        sub_1A57CB8F0((uint64_t)v13);
        sub_1A57CB930(a1, v45, a6);
      }
      else
      {
        v25 = v30;
        sub_1A57D01F0((uint64_t)v13, v30);
        sub_1A55DC438((uint64_t)v45, sub_1A552370C);
        sub_1A57F527C(v25, 3u, v45, a1, (uint64_t (*)(char *, char *))sub_1A57D2440, (uint64_t)v40, v26);
        sub_1A57D0234(v25);
      }
      ++v18;
      sub_1A57CC32C(a1, v35, v45, a6);
      sub_1A55DC438((uint64_t)v45, sub_1A55241F0);
      sub_1A57CB8F0((uint64_t)v16);
      v17 += 184;
    }
    while (v32 != v18);
    swift_bridgeObjectRelease();
    sub_1A57EEA4C(a1);
    v27 = MEMORY[0x1E0DEAC20];
    v43 = MEMORY[0x1E0DEAC20];
    v28 = MEMORY[0x1E0CB1AA8];
    v44 = MEMORY[0x1E0CB1AA8];
    v41 = "--";
    v42 = "";
    __swift_project_boxed_opaque_existential_1_0(&v41, MEMORY[0x1E0DEAC20]);
    sub_1A5949F60();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    sub_1A57D1C78(v36, v37);
    v43 = v27;
    v44 = v28;
    v41 = "--";
    v42 = "";
    __swift_project_boxed_opaque_existential_1_0(&v41, v27);
    sub_1A5949F60();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    sub_1A57EEA4C(a1);
  }
}

uint64_t sub_1A57D22EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5523A30(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

uint64_t sub_1A57D2394(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5524514(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

uint64_t sub_1A57D2444@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a1;
  if (a1)
    v6 = a2 - a1;
  else
    v6 = 0;
  result = MEMORY[0x1A85AD968](v6);
  v8 = 0;
  v9 = 0xE000000000000000;
  if (v4)
    goto LABEL_7;
  if (a2)
  {
    v4 = 0;
    do
    {
      v10 = *v4++;
      result = v10;
      if (v10 - 1 <= 0x7D)
      {
        v11 = v8;
        v12 = v9;
        result = sub_1A594B52C();
        v8 = v11;
        v9 = v12;
      }
LABEL_7:
      ;
    }
    while (!a2 || v4 != a2);
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

unsigned __int8 *sub_1A57D24EC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *result;

  v1 = *(unsigned __int8 **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16) != 1)
    return (unsigned __int8 *)sub_1A57D2554(*(unsigned __int8 **)v0, *(unsigned __int8 **)(v0 + 8));
  if (v1)
    v3 = v2 - (_QWORD)v1;
  else
    v3 = 0;
  if ((v3 & 0x8000000000000000) == 0)
    return sub_1A57F0378(0, v3, (uint64_t)v1, v2);
  __break(1u);
  return result;
}

uint64_t sub_1A57D2554(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int64_t v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v3 = a1;
  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  MEMORY[0x1A85AD968](v4);
  result = 0;
  v6 = 0xE000000000000000;
  if (v3)
    goto LABEL_7;
  if (a2)
  {
    v3 = 0;
    do
    {
      v7 = *v3++;
      if ((v7 - 1) <= 0x7D)
      {
        v8 = result;
        v9 = v6;
        sub_1A594B52C();
        result = v8;
        v6 = v9;
      }
LABEL_7:
      ;
    }
    while (!a2 || v3 != a2);
  }
  return result;
}

uint64_t sub_1A57D25E8(unsigned __int8 *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v5;
  int64_t v6;
  uint64_t result;
  unint64_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v5 = a1;
  if (a1)
    v6 = a2 - a1;
  else
    v6 = 0;
  MEMORY[0x1A85AD968](v6);
  result = 0;
  v8 = 0xE000000000000000;
  if (v5)
    goto LABEL_7;
  if (a2)
  {
    v9 = 0;
    v5 = 0;
    do
    {
      v11 = *v5++;
      v10 = v11;
      if ((v11 - 1) >= 0x7E)
      {
LABEL_7:
        v9 = 0;
      }
      else if ((v9 & 1) != 0 || (a3 & 1) == 0 || (v9 = 1, v10 != 92))
      {
        v12 = result;
        v13 = v8;
        sub_1A594B52C();
        v9 = 0;
        result = v12;
        v8 = v13;
      }
    }
    while (!a2 || v5 != a2);
  }
  return result;
}

uint64_t sub_1A57D26A0()
{
  unsigned __int8 **v0;

  return sub_1A57D2554(*v0, v0[1]);
}

BOOL sub_1A57D26A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;
  _BOOL4 v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)a1 == *(_QWORD *)a2 && v2 == v3;
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    v5 = 0;
  v7 = *(_QWORD *)a1 == *(_QWORD *)a2 && v2 == v3;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v7 = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return v5;
  else
    return v7;
}

uint64_t sub_1A57D26EC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;

  if ((a3 & 1) != 0)
  {
    v3 = 0x28646E652ELL;
  }
  else
  {
    sub_1A594C720();
    swift_bridgeObjectRelease();
    v3 = 0x28656C6464696D2ELL;
  }
  v5 = v3;
  sub_1A594CC9C();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  sub_1A594CC9C();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  return v5;
}

uint64_t sub_1A57D27F8()
{
  uint64_t v0;

  return sub_1A57D26EC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void *sub_1A57D2804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *__little, uint64_t a7)
{
  void *result;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;

  result = 0;
  if (__little && a3)
  {
    v14 = a7 - (_QWORD)__little;
    v15 = a1;
    do
    {
      v16 = a3 + v15;
      result = memmem((const void *)(a3 + v15), a2 - v15, __little, v14);
      if (!result)
        break;
      v17 = (uint64_t)result - v16;
      if ((uint64_t)result - v16 < 0)
        return 0;
      v18 = v17 + v14;
      if (__OFADD__(v17, v14))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      if (a2 - v15 < v18)
        return 0;
      v19 = v17 + v15;
      if (__OFADD__(v17, v15))
        goto LABEL_20;
      v20 = __OFADD__(v18, v15);
      v15 += v18;
      if (v20)
        goto LABEL_21;
      if (v18 < v17 || v15 < v19)
        goto LABEL_22;
      if (v19 < a1)
        goto LABEL_23;
      if (v15 > a2)
        goto LABEL_24;
      result = (void *)sub_1A57D2940(a1, a2, a3, a4, a5, v19, v15);
    }
    while (v21 == -1);
  }
  return result;
}

uint64_t sub_1A57D2940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v21;

  if (__OFADD__(a1, 2))
  {
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v7 = a7;
  if (a1 + 2 != a6)
    __asm { BR              X10 }
  v12 = a6 - 2;
  if (__OFSUB__(a6, 2))
    goto LABEL_59;
  if (v12 < a1 || v12 >= a2)
    goto LABEL_60;
  if (*(_BYTE *)(a3 + v12) != 45)
    return 0;
  if (a6 <= a1 || a6 > a2)
    goto LABEL_62;
  if (*(_BYTE *)(a6 + a3 - 1) != 45)
    return 0;
  if (__OFADD__(a7, 2))
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a7 + 2 == a2)
  {
    if (a7 < a1 || a7 >= a2)
    {
LABEL_64:
      __break(1u);
      JUMPOUT(0x1A57D2CDCLL);
    }
    if (*(_BYTE *)(a3 + a7) == 45)
    {
      if (a7 + 1 >= a2)
        goto LABEL_67;
      if (*(_BYTE *)(a3 + a7 + 1) == 45)
      {
        if (v12 <= a2)
          return v12;
LABEL_68:
        __break(1u);
        JUMPOUT(0x1A57D2D08);
      }
    }
  }
  sub_1A57D31BC(a5);
  if (v14 == -1)
  {
    if (a2 < v7)
    {
      __break(1u);
    }
    else if (v7 >= a1)
    {
      v21 = v7;
      if (v7 == a2)
        goto LABEL_26;
      if (v7 >= a2)
      {
        __break(1u);
        goto LABEL_68;
      }
      v15 = *(unsigned __int8 *)(a3 + v7);
      if (v15 == 45)
      {
        if (v7 + 1 == a2)
          return 0;
        if (v7 + 1 >= a2)
        {
          __break(1u);
          JUMPOUT(0x1A57D2D14);
        }
        if (*(_BYTE *)(a3 + v7 + 1) != 45)
          return 0;
        v7 += 2;
        v21 = v7;
        if (v7 == a2)
          goto LABEL_54;
      }
      if (v7 <= a2)
        v16 = a2;
      else
        v16 = v7;
      if (v7 < a2)
      {
        v17 = *(unsigned __int8 *)(a3 + v7);
        if (v17 == 32 || v17 == 9)
        {
          if (++v7 != a2)
          {
            while (v16 != v7)
            {
              v18 = *(unsigned __int8 *)(a3 + v7);
              if (v18 != 32 && v18 != 9)
                goto LABEL_52;
              if (a2 == ++v7)
                goto LABEL_50;
            }
            goto LABEL_63;
          }
LABEL_50:
          v21 = a2;
          if (v15 == 45)
          {
LABEL_54:
            if (v21 >= v12)
              return v12;
            __break(1u);
            return 0;
          }
        }
        else
        {
LABEL_52:
          v21 = v7;
          if (v15 == 45)
          {
            if ((sub_1A57F074C(a5) & 1) == 0)
              return 0;
            goto LABEL_54;
          }
        }
LABEL_26:
        if ((sub_1A57F074C(a5) & 1) == 0)
          return 0;
        goto LABEL_54;
      }
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    __break(1u);
LABEL_67:
    __break(1u);
    JUMPOUT(0x1A57D2CF0);
  }
  return v13;
}

uint64_t sub_1A57D2D24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (__OFADD__(result, 4))
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (result + 4 > a4)
    return 0;
  v4 = result;
  result = a4 - 4;
  if (__OFSUB__(a4, 4))
    goto LABEL_16;
  if (result < v4 || result >= a2)
    goto LABEL_17;
  if (*(_BYTE *)(a3 + result) != 13)
    return 0;
  v5 = a4 - 3;
  if (a4 - 3 < v4 || v5 >= a2)
    goto LABEL_18;
  if (*(_BYTE *)(a3 + v5) != 10)
    return 0;
  if (a4 - 2 >= a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(_BYTE *)(a3 + a4 - 2) != 45)
    return 0;
  if (a4 <= a2)
  {
    if (*(_BYTE *)(a4 + a3 - 1) == 45)
      return result;
    return 0;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1A57D2DD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (__OFADD__(result, 3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result + 3 > a4)
    return 0;
  v4 = result;
  result = a4 - 3;
  if (__OFSUB__(a4, 3))
    goto LABEL_14;
  if (result < v4 || result >= a2)
    goto LABEL_15;
  if (*(_BYTE *)(a3 + result) != 10)
    return 0;
  v5 = a4 - 2;
  if (a4 - 2 < v4 || v5 >= a2)
    goto LABEL_16;
  if (*(_BYTE *)(a3 + v5) != 45)
    return 0;
  if (a4 <= a2)
  {
    if (*(_BYTE *)(a4 + a3 - 1) == 45)
      return result;
    return 0;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A57D2E70(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = a5 + 4;
  if (__OFADD__(a5, 4))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (result > a7)
    return 0;
  if (a5 < a6 || a5 >= a7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a8 + a5) != a1)
    return 0;
  if (a5 + 1 >= a7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a8 + a5 + 1) != a2)
    return 0;
  if (a5 + 2 >= a7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(unsigned __int8 *)(a8 + a5 + 2) != a3)
    return 0;
  if (a5 + 3 < a7)
  {
    if (*(unsigned __int8 *)(a8 + a5 + 3) == a4)
      return result;
    return 0;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A57D2F10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v6 <= a3)
  {
    if (result < a2 || result >= a3)
      goto LABEL_23;
    if (*(_BYTE *)(a4 + result) == 13)
    {
      if (v6 >= a5)
        return a5;
      goto LABEL_25;
    }
  }
  v7 = result + 3;
  if (__OFADD__(result, 3))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v7 > a3)
    return 0;
  if (result < a2 || result >= a3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(_BYTE *)(a4 + result) != 45)
    return 0;
  if (v6 < a2 || v6 >= a3)
    goto LABEL_26;
  if (*(_BYTE *)(a4 + v6) != 45)
    return 0;
  if (result + 2 < a3)
  {
    if (*(_BYTE *)(a4 + result + 2) == 13)
    {
      if (v7 >= a5)
        return a5;
      goto LABEL_28;
    }
    return 0;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A57D2FFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v6 <= a3)
  {
    if (result < a2 || result >= a3)
      goto LABEL_23;
    if (*(_BYTE *)(a4 + result) == 10)
    {
      if (v6 >= a5)
        return a5;
      goto LABEL_25;
    }
  }
  v7 = result + 3;
  if (__OFADD__(result, 3))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v7 > a3)
    return 0;
  if (result < a2 || result >= a3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(_BYTE *)(a4 + result) != 2)
    return 0;
  if (v6 < a2 || v6 >= a3)
    goto LABEL_26;
  if (*(_BYTE *)(a4 + v6) != 45)
    return 0;
  if (result + 2 < a3)
  {
    if (*(_BYTE *)(a4 + result + 2) == 10)
    {
      if (v7 >= a5)
        return a5;
      goto LABEL_28;
    }
    return 0;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A57D30E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  v5 = result + 2;
  if (__OFADD__(result, 2))
  {
    __break(1u);
    goto LABEL_16;
  }
  v6 = a5;
  if (v5 > a3)
  {
LABEL_10:
    result = sub_1A57D2E70(0x2Du, 0x2Du, 0xDu, 0xAu, result, a2, a3, a4);
    if ((v7 & 1) != 0)
      return 0;
    if (result >= v6)
      return v6;
    goto LABEL_17;
  }
  if (result < a2 || result >= a3)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(_BYTE *)(a4 + result) != 13)
    goto LABEL_10;
  if (result + 1 >= a3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_BYTE *)(a4 + result + 1) != 10)
    goto LABEL_10;
  if (v5 >= a5)
    return v6;
LABEL_19:
  __break(1u);
  return result;
}

void sub_1A57D31BC(char a1)
{
  __asm { BR              X10 }
}

__n128 __swift_memcpy17_8_3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeBoundary()
{
  return &type metadata for UnsafeBoundary;
}

__n128 __swift_memcpy16_8_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeBoundary.PatchedBoundary()
{
  return &type metadata for UnsafeBoundary.PatchedBoundary;
}

uint64_t getEnumTagSinglePayload for UnsafeDelimiterLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeDelimiterLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A57D341C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeDelimiterLine()
{
  return &type metadata for UnsafeDelimiterLine;
}

double Cache.__allocating_init()()
{
  uint64_t v0;
  double result;
  uint64_t v2;

  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  return result;
}

double Cache.init()()
{
  uint64_t v0;
  double result;
  uint64_t v2;

  result = 0.0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  return result;
}

uint64_t Cache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  UIDNA *v3;

  swift_beginAccess();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  if (v1)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v2 = 40;
    do
    {
      ucnv_close();
      v2 += 16;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 96) & 1) == 0)
  {
    v3 = *(UIDNA **)(v0 + 88);
    if (v3)
      uidna_close(v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Cache.__deallocating_deinit()
{
  Cache.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Cache()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for Cache.CachedConverter(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Cache.CachedConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Cache.CachedConverter()
{
  return &type metadata for Cache.CachedConverter;
}

uint64_t sub_1A57D3608(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  char **v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = (char **)(a2 + 80);
  swift_beginAccess();
  v8 = *(_QWORD **)(a2 + 80);
  v9 = v8[2];
  if (v9)
  {
    v10 = v8 + 4;
    if (v8[4] == a1)
    {
      v18 = v8[5];
      goto LABEL_23;
    }
    if (v9 != 1)
    {
      if (v8[6] == a1)
      {
        v18 = v8[7];
        v12 = 1;
LABEL_22:
        v19 = v10[2 * v12];
        sub_1A57D38B4(v12);
        sub_1A57D393C(0, 0, v19, v18);
        goto LABEL_23;
      }
      if (v9 != 2)
      {
        v11 = v8 + 9;
        v12 = 2;
        while (*(v11 - 1) != a1)
        {
          v13 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
LABEL_28:
            __break(1u);
          }
          ++v12;
          v11 += 2;
          if (v13 == v9)
            goto LABEL_10;
        }
        if (v12 >= v9)
          goto LABEL_28;
        v18 = *v11;
        if (v12)
          goto LABEL_22;
LABEL_23:
        ucnv_reset();
        ucnv_setFallback();
        v22 = v18;
        goto LABEL_24;
      }
    }
  }
LABEL_10:
  LODWORD(v22) = 0;
  v14 = ucnv_open();
  ucnv_setFallback();
  swift_beginAccess();
  sub_1A57D393C(0, 0, a1, v14);
  v15 = *v7;
  if (*((_QWORD *)*v7 + 2) < 3uLL)
    goto LABEL_17;
  while (1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v7 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      break;
    v17 = *((_QWORD *)v15 + 2);
    if (!v17)
      goto LABEL_16;
LABEL_13:
    *((_QWORD *)v15 + 2) = v17 - 1;
    *v7 = v15;
    ucnv_close();
    v15 = *v7;
    if (*((_QWORD *)*v7 + 2) <= 2uLL)
      goto LABEL_17;
  }
  v15 = sub_1A57D3A54((uint64_t)v15);
  *v7 = v15;
  v17 = *((_QWORD *)v15 + 2);
  if (v17)
    goto LABEL_13;
LABEL_16:
  __break(1u);
LABEL_17:
  swift_endAccess();
  v22 = v14;
LABEL_24:
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0xE000000000000000;
  a3(&v21, &v22);
  result = swift_bridgeObjectRelease();
  if (!v3)
    return v21;
  return result;
}

uint64_t sub_1A57D38B4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1A57D3A54(v3);
    v3 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v3 + 16 * a1;
    v8 = *(_QWORD *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return v8;
  }
  return result;
}

unint64_t sub_1A57D393C(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = result;
  v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v11 > *(_QWORD *)(v6 + 24) >> 1)
  {
    if (v7 <= v11)
      v14 = v7 + v10;
    else
      v14 = v7;
    result = (unint64_t)sub_1A58111DC((char *)result, v14, 1, (char *)v6);
    v6 = result;
  }
  v15 = (_QWORD *)(v6 + 32 + 16 * v8);
  if (!v10)
    goto LABEL_19;
  v16 = *(_QWORD *)(v6 + 16);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_25;
  result = (unint64_t)(v15 + 2);
  v19 = (_QWORD *)(v6 + 32 + 16 * a2);
  if (v15 + 2 != v19 || result >= (unint64_t)&v19[2 * v18])
    result = (unint64_t)memmove((void *)result, v19, 16 * v18);
  v20 = *(_QWORD *)(v6 + 16);
  v17 = __OFADD__(v20, v10);
  v21 = v20 + v10;
  if (!v17)
  {
    *(_QWORD *)(v6 + 16) = v21;
LABEL_19:
    *v15 = a3;
    v15[1] = a4;
    *v4 = v6;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_1A57D3A54(uint64_t a1)
{
  return sub_1A58111DC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1A57D3A68(uint64_t a1)
{
  return sub_1A5811534(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_1A57D3A7C(_QWORD *a1)
{
  return sub_1A5811B90(0, a1[2], 0, a1);
}

uint64_t ContentDisposition.kind.getter(uint64_t a1, unint64_t a2)
{
  sub_1A57D3ABC(a1, a2);
  return a1;
}

uint64_t sub_1A57D3ABC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

uint64_t ContentDisposition.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A57D3B04(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1A57D3B04(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

double (*ContentDisposition.kind.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ContentDisposition.attributes.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t ContentDisposition.attributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

double (*ContentDisposition.attributes.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static ContentDisposition.Kind.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_1A594CD38();
}

uint64_t sub_1A57D3BDC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  return sub_1A594CD38();
}

uint64_t ContentDisposition.Attribute.key.getter(uint64_t a1, unint64_t a2)
{
  sub_1A57D3C80(a1, a2);
  return a1;
}

uint64_t sub_1A57D3C80(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

uint64_t ContentDisposition.Attribute.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A57D3CC8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1A57D3CC8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRelease();
  return result;
}

double (*ContentDisposition.Attribute.key.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ContentDisposition.Attribute.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a3;
}

uint64_t ContentDisposition.Attribute.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

double (*ContentDisposition.Attribute.value.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1A57D3D68(uint64_t *a1, uint64_t a2)
{
  return _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO21__derived_enum_equalsySbAG_AGtFZ_0(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1A57D3D80(uint64_t *a1, uint64_t a2)
{
  return _s9IMAP2MIME18ContentDispositionV9AttributeV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], a1[2], a1[3], *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t static ContentDisposition.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a5 != 1)
        return 0;
    }
    else if (a2 == 2)
    {
      if (a5 != 2)
        return 0;
    }
    else if (a5 < 3 || (a1 != a4 || a2 != a5) && (sub_1A594CD38() & 1) == 0)
    {
      return 0;
    }
    return sub_1A57D4070(a3, a6);
  }
  if (!a5)
    return sub_1A57D4070(a3, a6);
  return 0;
}

uint64_t sub_1A57D3E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a2 + 64);
    for (i = (unint64_t *)(a1 + 64); ; i += 12)
    {
      v5 = *(i - 3);
      v6 = *(i - 2);
      v8 = *(i - 1);
      v7 = *i;
      v10 = i[1];
      v9 = i[2];
      v11 = i[3];
      v46 = i[7];
      v12 = *(v3 - 3);
      v13 = *(v3 - 2);
      v15 = *(v3 - 1);
      v14 = *v3;
      v17 = v3[1];
      v16 = v3[2];
      v18 = v3[3];
      v45 = v3[6];
      v43 = v3[4];
      v44 = v3[7];
      v41 = i[6];
      v42 = v3[5];
      v39 = i[4];
      v40 = i[5];
      if (v5)
      {
        if (!v12)
          return 0;
        if (*(i - 4) != *(v3 - 4) || v5 != v12)
        {
          v36 = i[2];
          v37 = v3[2];
          v19 = i[3];
          v34 = v3[3];
          v35 = i[1];
          v20 = *i;
          v21 = *v3;
          v33 = v3[1];
          v22 = sub_1A594CD38();
          v17 = v33;
          v18 = v34;
          v14 = v21;
          v10 = v35;
          v9 = v36;
          v7 = v20;
          v16 = v37;
          v11 = v19;
          if ((v22 & 1) == 0)
            return 0;
        }
      }
      else if (v12)
      {
        return 0;
      }
      if (v6 != v13 || v8 != v15)
      {
        v38 = v16;
        v23 = v9;
        v24 = v11;
        v25 = v18;
        v26 = v7;
        v27 = v10;
        v28 = v14;
        v29 = v2;
        v30 = v17;
        v31 = sub_1A594CD38();
        v17 = v30;
        v2 = v29;
        v14 = v28;
        v10 = v27;
        v7 = v26;
        v18 = v25;
        v16 = v38;
        v11 = v24;
        v9 = v23;
        if ((v31 & 1) == 0)
          break;
      }
      if ((v9 != v16 || v11 != v18 || v7 >> 16 != v14 >> 16 || v10 >> 16 != v17 >> 16) && (sub_1A594CC84() & 1) == 0
        || (v41 != v45 || v46 != v44 || v39 >> 16 != v43 >> 16 || v40 >> 16 != v42 >> 16) && (sub_1A594CC84() & 1) == 0)
      {
        break;
      }
      v3 += 12;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A57D4070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 2);
      v6 = *(i - 1);
      v7 = *i;
      v8 = *(v3 - 2);
      v9 = *(v3 - 1);
      v10 = *v3;
      switch(v5)
      {
        case 0:
          if (v8)
            return 0;
          break;
        case 1:
          if (v8 != 1)
            return 0;
          break;
        case 2:
          if (v8 != 2)
            return 0;
          break;
        case 3:
          if (v8 != 3)
            return 0;
          break;
        case 4:
          if (v8 != 4)
            return 0;
          break;
        case 5:
          if (v8 != 5)
            return 0;
          break;
        default:
          if (v8 < 6)
            return 0;
          v11 = *(i - 3) == *(v3 - 3) && v5 == v8;
          if (!v11 && (sub_1A594CD38() & 1) == 0)
            return 0;
          break;
      }
      v12 = v6 == v9 && v7 == v10;
      if (!v12 && (sub_1A594CD38() & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A57D41A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 1);
      v6 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_1A594CD38() & 1) == 0)
        break;
      v10 = v5 == v7 && v6 == v8;
      if (!v10 && (sub_1A594CD38() & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A57D426C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v12[40];
  _BYTE v13[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 80);
    for (i = (uint64_t *)(a1 + 80); ; i += 7)
    {
      sub_1A57D6944((uint64_t)(i - 6), (uint64_t)v12);
      v7 = *(i - 1);
      v6 = *i;
      sub_1A57D6944((uint64_t)(v3 - 6), (uint64_t)v13);
      v9 = *(v3 - 1);
      v8 = *v3;
      sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v12, (uint64_t)v13);
      if ((v10 & 1) == 0)
        break;
      if (v6)
      {
        if (!v8)
        {
          sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          goto LABEL_18;
        }
        if (v7 == v9 && v6 == v8)
        {
          sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          swift_bridgeObjectRelease();
          sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = sub_1A594CD38();
          sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          swift_bridgeObjectRelease();
          sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0)
            return 0;
        }
      }
      else
      {
        sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
        if (v8)
        {
          swift_bridgeObjectRelease();
          sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
          return 0;
        }
        sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
      }
      v3 += 7;
      if (!--v2)
        return 1;
    }
    sub_1A57D6A08((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    swift_bridgeObjectRelease();
LABEL_18:
    sub_1A57D6A08((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t sub_1A57D4468(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v3 == 1)
    {
      if (v5 != 1)
        return 0;
    }
    else if (v3 == 2)
    {
      if (v5 != 2)
        return 0;
    }
    else if (v5 < 3 || (*a1 != *a2 || v3 != v5) && (sub_1A594CD38() & 1) == 0)
    {
      return 0;
    }
    return sub_1A57D4070(v4, v6);
  }
  if (!v5)
    return sub_1A57D4070(v4, v6);
  return 0;
}

uint64_t ContentDisposition.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1A57D3ABC(a1, a2);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(a1, a2, a3);
}

uint64_t sub_1A57D454C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  sub_1A57D3ABC(v1, v2);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(v1, v2, v3);
}

uint64_t ContentDisposition.Kind.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0x656D686361747461;
  v3 = 0x7461642D6D726F66;
  if (a2 != 2)
    v3 = a1;
  if (a2 != 1)
    v2 = v3;
  if (a2)
    v4 = v2;
  else
    v4 = 0x656E696C6E69;
  sub_1A57D3ABC(a1, a2);
  return v4;
}

uint64_t String.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0x656D686361747461;
  v3 = 0x7461642D6D726F66;
  if (a2 != 2)
    v3 = a1;
  if (a2 != 1)
    v2 = v3;
  if (a2)
    return v2;
  else
    return 0x656E696C6E69;
}

{
  uint64_t result;

  result = 0x646578696DLL;
  switch(a2)
  {
    case 0:
      sub_1A57D6AA0(a1, 0);
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 0x747365676964;
      break;
    case 3:
      result = 0x74616E7265746C61;
      break;
    case 4:
      result = 0x646574616C6572;
      break;
    case 5:
      result = 0x74726F706572;
      break;
    case 6:
      result = 0x64656E676973;
      break;
    case 7:
      result = 0x6574707972636E65;
      break;
    case 8:
      result = 0x7461642D6D726F66;
      break;
    case 9:
      result = 0x2D646578696D2D78;
      break;
    case 10:
      result = 0x676E617265747962;
      break;
    case 11:
      result = 0x756F64656C707061;
      break;
    default:
      result = a1;
      break;
  }
  return result;
}

uint64_t sub_1A57D4684()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[1];
  v2 = 0x656D686361747461;
  v3 = 0x7461642D6D726F66;
  if (v1 != 2)
    v3 = *v0;
  if (v1 != 1)
    v2 = v3;
  if (v1)
    v4 = v2;
  else
    v4 = 0x656E696C6E69;
  sub_1A57D3ABC(*v0, v1);
  return v4;
}

uint64_t ContentDisposition.Attribute.description.getter(uint64_t a1, unint64_t a2)
{
  sub_1A57D3C80(a1, a2);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(a1, a2);
}

uint64_t sub_1A57D4760()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A57D3C80(*v0, v2);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(v1, v2);
}

unint64_t ContentDisposition.Attribute.Key.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = 0x656D616E656C6966;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v2 = 0x6E6F697461657263;
      break;
    case 2uLL:
      v2 = 0xD000000000000011;
      break;
    case 3uLL:
      v2 = 0x7461642D64616572;
      break;
    case 4uLL:
      v2 = 1702521203;
      break;
    case 5uLL:
      v2 = 1701667182;
      break;
    default:
      v2 = a1;
      break;
  }
  sub_1A57D3C80(a1, a2);
  return v2;
}

unint64_t String.init(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = 0x656D616E656C6966;
  switch(a2)
  {
    case 1:
      result = 0x6E6F697461657263;
      break;
    case 2:
      result = 0xD000000000000011;
      break;
    case 3:
      result = 0x7461642D64616572;
      break;
    case 4:
      result = 1702521203;
      break;
    case 5:
      result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1A57D4944()
{
  uint64_t v0;

  return ContentDisposition.Attribute.Key.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1A57D4954@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A57D4974(a1, (uint64_t (*)(_QWORD, _QWORD))_s9IMAP2MIME18ContentDispositionV4KindO13stringLiteralAESS_tcfC_0, a2);
}

uint64_t sub_1A57D4968@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A57D4974(a1, (uint64_t (*)(_QWORD, _QWORD))_s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO13stringLiteralAGSS_tcfC_0, a2);
}

uint64_t sub_1A57D4974@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*a1, a1[1]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t ContentDisposition.filename.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return 0;
  for (i = a3 + 56; *(_QWORD *)(i - 16); i += 32)
  {
    if (!--v3)
      return 0;
  }
  v5 = *(_QWORD *)(i - 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v5;
}

uint64_t sub_1A57D49F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)(a5 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    v7 = a5 + 80;
    do
    {
      if ((*(_BYTE *)(v7 - 32) & 1) == 0)
        __asm { BR              X9 }
      v7 += 56;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void sub_1A57D4BA4()
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  JUMPOUT(0x1A57D4B50);
}

uint64_t sub_1A57D4BBC()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57D4C60()
{
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D4CE0()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57D4D80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57D70E0();
  *a1 = result;
  return result;
}

void sub_1A57D4DAC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xEA0000000000746ELL;
  v5 = 0x656D686361747461;
  if (v2 != 1)
  {
    v5 = 0x7461642D6D726F66;
    v4 = 0xE900000000000061;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656E696C6E69;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1A57D4E10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A57E5D90(*a1, *a2);
}

void sub_1A57D4E1C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4E83840;
}

uint64_t sub_1A57D4E2C()
{
  unsigned __int8 *v0;

  return sub_1A57D7A0C(*v0);
}

uint64_t sub_1A57D4E34(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1A57D7BCC(a1, *v1);
}

uint64_t sub_1A57D4E3C(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1A57D7CA0(a1, *v1);
}

uint64_t sub_1A57D4E44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57D7128();
  *a1 = result;
  return result;
}

uint64_t sub_1A57D4E7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A57E5D8C(*a1, *a2);
}

void sub_1A57D4E88(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4E838F8;
}

uint64_t sub_1A57D4E98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57D7128();
  *a1 = result;
  return result;
}

uint64_t sub_1A57D4ECC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A57D4EFC + 4 * byte_1A59D6F98[*v0]))();
}

void sub_1A57D4EFC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creation-date");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1A57D4F24(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001A5A12520;
}

void sub_1A57D4F44(_QWORD *a1@<X8>)
{
  *a1 = 0x7461642D64616572;
  a1[1] = 0xE900000000000065;
}

void sub_1A57D4F64(_QWORD *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

void sub_1A57D4F78(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

void sub_1A57D4F8C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4E82850;
}

void sub_1A57D4F9C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  switch(v4)
  {
    case 'c':
      if (v5 == 114 && v6 == 101 && v7 == 97)
      {
        v8 = a1;
        v9 = a2;
        v10 = 1;
        goto LABEL_26;
      }
      break;
    case 'f':
      if (v5 == 105 && v6 == 108 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 0;
        goto LABEL_26;
      }
      break;
    case 'm':
      if (v5 == 111 && v6 == 100 && v7 == 105)
      {
        v8 = a1;
        v9 = a2;
        v10 = 2;
        goto LABEL_26;
      }
      break;
    case 'n':
      if (v5 == 97 && v6 == 109 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 5;
        goto LABEL_26;
      }
      break;
    case 'r':
      if (v5 == 101 && v6 == 97 && v7 == 100)
      {
        v8 = a1;
        v9 = a2;
        v10 = 3;
        goto LABEL_26;
      }
      break;
    case 's':
      if (v5 == 105 && v6 == 122 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 4;
LABEL_26:
        sub_1A57D7554(v8, v9, v10);
      }
      break;
    default:
      return;
  }
}

uint64_t sub_1A57D5188(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  if (v4 == 97)
  {
    if (v5 != 116 || v6 != 116 || v7 != 97)
      return 3;
    v8 = (char *)a1;
    v9 = (char *)a2;
    v10 = 1;
    goto LABEL_16;
  }
  if (v4 == 102)
  {
    if (v5 != 111 || v6 != 114 || v7 != 109)
      return 3;
    v8 = (char *)a1;
    v9 = (char *)a2;
    v10 = 2;
LABEL_16:
    result = sub_1A57D7380(v8, v9, v10);
    if (result != 3)
      return result;
    return 3;
  }
  if (v4 == 105 && v5 == 110 && v6 == 108 && v7 == 105)
  {
    v8 = (char *)a1;
    v9 = (char *)a2;
    v10 = 0;
    goto LABEL_16;
  }
  return 3;
}

uint64_t _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO21__derived_enum_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_18;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_18;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_18;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_18;
      result = 1;
      break;
    case 4:
      if (a4 != 4)
        goto LABEL_18;
      result = 1;
      break;
    case 5:
      if (a4 != 5)
        goto LABEL_18;
      result = 1;
      break;
    default:
      if (a4 < 6)
      {
LABEL_18:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = sub_1A594CD38();
      }
      break;
  }
  return result;
}

uint64_t _s9IMAP2MIME18ContentDispositionV9AttributeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a6)
        return 0;
      goto LABEL_18;
    case 1:
      if (a6 == 1)
        goto LABEL_18;
      return 0;
    case 2:
      if (a6 == 2)
        goto LABEL_18;
      return 0;
    case 3:
      if (a6 == 3)
        goto LABEL_18;
      return 0;
    case 4:
      if (a6 == 4)
        goto LABEL_18;
      return 0;
    case 5:
      if (a6 == 5)
        goto LABEL_18;
      return 0;
    default:
      if (a6 < 6)
        return 0;
      if (a1 == a5 && a2 == a6 || (v12 = sub_1A594CD38(), result = 0, (v12 & 1) != 0))
      {
LABEL_18:
        if (a3 == a7 && a4 == a8)
          return 1;
        else
          return sub_1A594CD38();
      }
      return result;
  }
}

uint64_t _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v4 = qword_1EE7AA530;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v4 != -1)
    swift_once();
  v5 = sub_1A5949B40();
  __swift_project_value_buffer_0(v5, (uint64_t)qword_1EE7AA5F0);
  sub_1A57D6AB8();
  sub_1A594C450();
  v7 = v6;
  swift_bridgeObjectRelease();
  sub_1A57D3C80(a1, a2);
  sub_1A57D3C80(a1, a2);
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A57D3CC8(a1, a2);
  sub_1A594B5F8();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B5F8();
  sub_1A57D3CC8(a1, a2);
  swift_bridgeObjectRelease_n();
  if ((v7 & 1) == 0)
    sub_1A594B5F8();
  return 0;
}

uint64_t _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = 0x656D686361747461;
  v4 = 0x7461642D6D726F66;
  if (a2 != 2)
    v4 = a1;
  if (a2 != 1)
    v3 = v4;
  if (a2)
    v5 = v3;
  else
    v5 = 0x656E696C6E69;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = a3 + 56;
    do
    {
      v8 = *(_QWORD *)(v7 - 24);
      v9 = *(_QWORD *)(v7 - 16);
      sub_1A57D3C80(v8, v9);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57D3C80(v8, v9);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(v8, v9);
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      sub_1A57D3CC8(v8, v9);
      swift_bridgeObjectRelease();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindO13stringLiteralAESS_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  char v8;

  v3 = sub_1A594B49C();
  v4 = v2;
  if (v3 == 0x656E696C6E69 && v2 == 0xE600000000000000)
    goto LABEL_3;
  v5 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    goto LABEL_5;
  if (v3 == 0x656D686361747461 && v4 == 0xEA0000000000746ELL)
    goto LABEL_3;
  v7 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_5;
  if (v3 == 0x7461642D6D726F66 && v4 == 0xE900000000000061)
  {
LABEL_3:
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = sub_1A594CD38();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
LABEL_5:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO13stringLiteralAGSS_tcfC_0()
{
  sub_1A594B49C();
  __asm { BR              X10; loc_1A57D5C70 }
}

unint64_t sub_1A57D6188()
{
  unint64_t result;

  result = qword_1EE7AA580;
  if (!qword_1EE7AA580)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ContentDisposition.Kind, &type metadata for ContentDisposition.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA580);
  }
  return result;
}

unint64_t sub_1A57D61D0()
{
  unint64_t result;

  result = qword_1EE7AA588;
  if (!qword_1EE7AA588)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ContentDisposition.Kind, &type metadata for ContentDisposition.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA588);
  }
  return result;
}

unint64_t sub_1A57D6218()
{
  unint64_t result;

  result = qword_1EE7AA590;
  if (!qword_1EE7AA590)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ContentDisposition.Attribute.Key, &type metadata for ContentDisposition.Attribute.Key);
    atomic_store(result, (unint64_t *)&qword_1EE7AA590);
  }
  return result;
}

unint64_t sub_1A57D6260()
{
  unint64_t result;

  result = qword_1EE7AA598;
  if (!qword_1EE7AA598)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ContentDisposition.Attribute.Key, &type metadata for ContentDisposition.Attribute.Key);
    atomic_store(result, (unint64_t *)&qword_1EE7AA598);
  }
  return result;
}

uint64_t destroy for ContentDisposition(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) >= 3uLL)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9IMAP2MIME18ContentDispositionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (v4 >= 3)
  {
    *a1 = *a2;
    a1[1] = v4;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

_QWORD *assignWithCopy for ContentDisposition(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] >= 3uLL)
  {
    if (v4 >= 3)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1A57D63D8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_8:
  a1[2] = a2[2];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57D63D8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEA968] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy24_8_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for ContentDisposition(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  if (a1[1] >= 3uLL)
  {
    v4 = a2[1];
    if (v4 >= 3)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1A57D63D8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentDisposition()
{
  return &type metadata for ContentDisposition;
}

unint64_t destroy for ContentDisposition.Kind(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t getEnumTagSinglePayload for ContentDisposition.Kind(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContentDisposition.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Kind()
{
  return &type metadata for ContentDisposition.Kind;
}

uint64_t destroy for ContentDisposition.Attribute(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) >= 6uLL)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ContentDisposition.Attribute(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (v4 >= 6)
  {
    *a1 = *a2;
    a1[1] = v4;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

_QWORD *assignWithCopy for ContentDisposition.Attribute(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] >= 6uLL)
  {
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1A57D63D8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ContentDisposition.Attribute(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (a1[1] >= 6uLL)
  {
    v4 = a2[1];
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1A57D63D8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute()
{
  return &type metadata for ContentDisposition.Attribute;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return a1;
}

_QWORD *_s9IMAP2MIME18ContentDispositionV4KindOwca_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindOwta_0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDisposition.Attribute.Key(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContentDisposition.Attribute.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute.Key()
{
  return &type metadata for ContentDisposition.Attribute.Key;
}

uint64_t sub_1A57D6944(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8_1(a2, a1);
  return a2;
}

uint64_t sub_1A57D6980(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      result = sub_1A57D69F0(result, a2);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_2;
    case 10:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_2:
      result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1A57D69F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 0xB)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

uint64_t sub_1A57D6A08(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_1A57D6A40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      result = sub_1A57D6AA0(result, a2);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_2;
    case 10:
      swift_bridgeObjectRelease();
LABEL_2:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1A57D6AA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 0xB)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1A57D6AB8()
{
  unint64_t result;

  result = qword_1EE799098;
  if (!qword_1EE799098)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE799098);
  }
  return result;
}

uint64_t initializeWithCopy for RFC_2231.UnsafeAttributeValue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for RFC_2231.UnsafeAttributeValue(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RFC_2231.UnsafeAttributeValue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition()
{
  return &type metadata for UnsafeContentDisposition;
}

uint64_t destroy for UnsafeContentDisposition.Attribute()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnsafeContentDisposition.Attribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for UnsafeContentDisposition.Attribute(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v3;
  v4 = *(__int128 *)((char *)a2 + 24);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UnsafeContentDisposition.Attribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsafeContentDisposition.Attribute(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeContentDisposition.Attribute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute()
{
  return &type metadata for UnsafeContentDisposition.Attribute;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Kind()
{
  return &type metadata for UnsafeContentDisposition.Kind;
}

_BYTE *__swift_memcpy1_1_5(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for UnsafeContentDisposition.Kind.Known(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A57D6DFC + 4 * byte_1A59D7006[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A57D6E30 + 4 * byte_1A59D7001[v4]))();
}

uint64_t sub_1A57D6E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D6E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57D6E40);
  return result;
}

uint64_t sub_1A57D6E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57D6E54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A57D6E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D6E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Kind.Known()
{
  return &type metadata for UnsafeContentDisposition.Kind.Known;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute.Key.Known()
{
  return &type metadata for UnsafeContentDisposition.Attribute.Key.Known;
}

uint64_t _s9IMAP2MIME24UnsafeContentDispositionV9AttributeV3KeyO5KnownOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A57D6EDC + 4 * byte_1A59D7010[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A57D6F10 + 4 * byte_1A59D700B[v4]))();
}

uint64_t sub_1A57D6F10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D6F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57D6F20);
  return result;
}

uint64_t sub_1A57D6F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57D6F34);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A57D6F38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D6F40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute.Key.Known()
{
  return &type metadata for ContentDisposition.Attribute.Key.Known;
}

uint64_t sub_1A57D6F5C()
{
  return sub_1A57D7058(&qword_1EE7AA5A0, &qword_1EE7AA5A8);
}

unint64_t sub_1A57D6F84()
{
  unint64_t result;

  result = qword_1EE7AA5B0;
  if (!qword_1EE7AA5B0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7388, &type metadata for ContentDisposition.Attribute.Key.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA5B0);
  }
  return result;
}

uint64_t sub_1A57D6FC8()
{
  return sub_1A57D7058(&qword_1EE7AA5B8, &qword_1EE7AA5C0);
}

unint64_t sub_1A57D6FF0()
{
  unint64_t result;

  result = qword_1EE7AA5C8;
  if (!qword_1EE7AA5C8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7460, &type metadata for UnsafeContentDisposition.Attribute.Key.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA5C8);
  }
  return result;
}

uint64_t sub_1A57D7034()
{
  return sub_1A57D7058(&qword_1EE7AA5D0, &qword_1EE7AA5D8);
}

uint64_t sub_1A57D7058(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0(a2);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A57D709C()
{
  unint64_t result;

  result = qword_1EE7AA5E0;
  if (!qword_1EE7AA5E0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7538, &type metadata for UnsafeContentDisposition.Kind.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA5E0);
  }
  return result;
}

uint64_t sub_1A57D70E0()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1A57D7128()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute.Key()
{
  return &type metadata for UnsafeContentDisposition.Attribute.Key;
}

void sub_1A57D7190(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D71D8()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  swift_bridgeObjectRelease();
  if (!v2)
    return 11;
  if (v1 - v2 != 6)
    return 11;
  v3 = sub_1A57F1E44(v0);
  v5 = sub_1A57FECC4(v3, v4, v2, v1, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    return 11;
  return v0;
}

void sub_1A57D72AC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D72EC()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  swift_bridgeObjectRelease();
  if (!v2)
    return 10;
  if (v1 - v2 != 5)
    return 10;
  v3 = sub_1A57F206C(v0);
  v5 = sub_1A57FECC4(v3, v4, v2, v1, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    return 10;
  return v0;
}

uint64_t sub_1A57D7380(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v3 = a3;
  if ((_BYTE)a3)
  {
    if (a3 == 1)
      v6 = 0xEA0000000000746ELL;
    else
      v6 = 0xE900000000000061;
  }
  else
  {
    v6 = 0xE600000000000000;
  }
  swift_bridgeObjectRelease();
  v7 = HIBYTE(v6) & 0xF;
  if (a1)
  {
    if (v7 != a2 - a1)
      return 3;
  }
  else if (v7)
  {
    return 3;
  }
  if ((_BYTE)v3)
  {
    if (v3 == 1)
      v8 = 0x656D686361747461;
    else
      v8 = 0x7461642D6D726F66;
    if (v3 == 1)
      v9 = 0xEA0000000000746ELL;
    else
      v9 = 0xE900000000000061;
  }
  else
  {
    v9 = 0xE600000000000000;
    v8 = 0x656E696C6E69;
  }
  v10 = sub_1A57FECC4(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
    return 3;
  return v3;
}

uint64_t sub_1A57D7484(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v3 = a3;
  v6 = sub_1A580D598(a3);
  v8 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = sub_1A594B640();
    swift_bridgeObjectRelease();
    if (a1)
      goto LABEL_6;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v8 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v8) & 0xF;
    else
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (a1)
    {
LABEL_6:
      if (v9 != a2 - a1)
        return 20;
      goto LABEL_10;
    }
  }
  if (v9)
    return 20;
LABEL_10:
  v10 = sub_1A580D598(v3);
  v12 = sub_1A57FECC4(v10, v11, a1, a2, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468);
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
    return 20;
  return v3;
}

void sub_1A57D7554(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D75B8()
{
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  if (v2 && v1 - v2 == 13)
    __asm { BR              X10 }
  return 6;
}

void sub_1A57D7770(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D77C4()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((v4 & 0x1000000000000000) != 0)
  {
    v5 = sub_1A594B640();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_6;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v4 & 0x2000000000000000) != 0)
      v5 = HIBYTE(v4) & 0xF;
    else
      v5 = (v3 + 1) & 0x7D76757F6B7FLL;
    if (v2)
    {
LABEL_6:
      if (v5 != v1 - v2)
        return 5;
LABEL_10:
      __asm { BR              X10 }
    }
  }
  if (!v5)
    goto LABEL_10;
  return 5;
}

void sub_1A57D791C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D7958()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  swift_bridgeObjectRelease();
  if (!v2)
    return 13;
  if (v1 - v2 != 6)
    return 13;
  v3 = sub_1A57D96E0(v0);
  v5 = sub_1A57FECC4(v3, v4, v2, v1, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    return 13;
  return v0;
}

void sub_1A57D7A10(char a1)
{
  sub_1A594CE64();
  __asm { BR              X10 }
}

uint64_t sub_1A57D7A60()
{
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

void sub_1A57D7B04(char a1)
{
  sub_1A594CE64();
  __asm { BR              X10 }
}

uint64_t sub_1A57D7B50()
{
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

void sub_1A57D7BD0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D7C10()
{
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

void sub_1A57D7CA4(uint64_t a1, char a2)
{
  sub_1A594CE64();
  __asm { BR              X10 }
}

uint64_t sub_1A57D7CEC()
{
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

void sub_1A57D7D68(uint64_t a1, char a2)
{
  sub_1A594CE64();
  __asm { BR              X10 }
}

uint64_t sub_1A57D7DB4()
{
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t ContentTransferEncoding.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A57D7E88 + 4 * byte_1A59D7634[a1]))(1953063479, 0xE400000000000000);
}

uint64_t sub_1A57D7E88(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1A57D7E90()
{
  return 0x7972616E6962;
}

unint64_t sub_1A57D7EA4()
{
  return 0xD000000000000010;
}

uint64_t sub_1A57D7EC0()
{
  return 0x343665736162;
}

uint64_t sub_1A57D7ED4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A57E5C60(*a1, *a2);
}

void sub_1A57D7EE0()
{
  char *v0;

  sub_1A57D7B04(*v0);
}

void sub_1A57D7EE8()
{
  __asm { BR              X10 }
}

uint64_t sub_1A57D7F1C()
{
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

void sub_1A57D7F7C(uint64_t a1)
{
  char *v1;

  sub_1A57D7CA4(a1, *v1);
}

uint64_t sub_1A57D7F84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s9IMAP2MIME23ContentTransferEncodingO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_1A57D7FB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A57D7FD8 + 4 * byte_1A59D763E[*v0]))();
}

void sub_1A57D7FD8(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1 + 1;
  a1[1] = v2;
}

void sub_1A57D7FE4(_QWORD *a1@<X8>)
{
  *a1 = 0x7972616E6962;
  a1[1] = 0xE600000000000000;
}

void sub_1A57D7FFC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001A5A12560;
}

void sub_1A57D801C(_QWORD *a1@<X8>)
{
  *a1 = 0x343665736162;
  a1[1] = 0xE600000000000000;
}

uint64_t ContentTransferEncoding.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  if (sub_1A594B4B4() == a1 && v4 == a2)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  v6 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (sub_1A594B4B4() == a1 && v9 == a2)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    v10 = sub_1A594CD38();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (sub_1A594B4B4() == a1 && v11 == a2)
    {
      v7 = 2;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v12 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (sub_1A594B4B4() == a1 && v13 == a2)
      {
        swift_bridgeObjectRelease_n();
        return 4;
      }
      else
      {
        v14 = sub_1A594CD38();
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          if (sub_1A594B4B4() == a1 && v15 == a2)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v16 = sub_1A594CD38();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v16 & 1) == 0)
              return 5;
          }
          return 3;
        }
      }
    }
  }
  return v7;
}

uint64_t BodyStructure.Encoding.init(_:)(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_1A57D82AC + 4 * byte_1A59D7643[a1]))();
}

uint64_t sub_1A57D82AC()
{
  return sub_1A594B4B4();
}

uint64_t sub_1A57D82BC()
{
  return sub_1A594B4B4();
}

uint64_t sub_1A57D82D0()
{
  return sub_1A594B4B4();
}

uint64_t sub_1A57D82E4()
{
  return sub_1A594B4B4();
}

uint64_t sub_1A57D8300()
{
  return sub_1A594B4B4();
}

Swift::String __swiftcall String.init(_:)(IMAP2MIME::ContentTransferEncoding a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A57D8340
                                                          + 4 * byte_1A59D7648[a1]))(1953063479, 0xE400000000000000);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_1A57D8340(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1A57D8348()
{
  return 0x7972616E6962;
}

unint64_t sub_1A57D835C()
{
  return 0xD000000000000010;
}

uint64_t sub_1A57D8378()
{
  return 0x343665736162;
}

uint64_t sub_1A57D838C(uint64_t result, unsigned __int8 a2)
{
  double v2;

  if (a2 >= 4u)
  {
    v2 = ceil((double)result * 3.0 * 0.25);
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          result = (uint64_t)v2 + 10;
          if (!__OFADD__((uint64_t)v2, 10))
            return result;
LABEL_10:
          __break(1u);
          return result;
        }
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1A57D8404(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
      v4 = a3 - a2;
    else
      v4 = 0;
    result = sub_1A57D8714(0, result, v4, a2, a3, a4);
    if ((v5 & 1) != 0)
      v6 = v4;
    else
      v6 = result;
    if ((v6 & 0x8000000000000000) == 0)
      return 0;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A57D8478(_QWORD *result, void *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (result >= 3u)
  {
    if (result == 3)
    {
      if (a2)
        v18 = a3 - (_QWORD)a2;
      else
        v18 = 0;
      if ((v18 & 0x8000000000000000) == 0)
        return (_QWORD *)sub_1A57FC8C4(0, v18, (uint64_t)a2, a3, (uint64_t)a4, a5);
      __break(1u);
    }
    else
    {
      if (a2)
        v19 = a3 - (_QWORD)a2;
      else
        v19 = 0;
      if ((v19 & 0x8000000000000000) == 0)
        return sub_1A57CAD7C(0, v19, (uint64_t)a2, a3, a4, a5);
    }
    __break(1u);
  }
  else
  {
    v7 = a3 - (_QWORD)a2;
    if (!a2)
      v7 = 0;
    v8 = v7 & (v7 >> 63);
    if (a5 - (uint64_t)a4 < v7)
      v7 = a5 - (_QWORD)a4;
    if (a4)
      v9 = v7;
    else
      v9 = v8;
    v10 = sub_1A57D8404(v9, (uint64_t)a4, a5, sub_1A56F12C4);
    v13 = v12;
    if (v11)
      v14 = (const void *)(v11 + v10);
    else
      v14 = 0;
    if (a2 && v14)
    {
      v15 = v11 + v13;
      if (!v11)
        v15 = 0;
      memmove(a2, v14, v15 - (_QWORD)v14);
    }
    v16 = sub_1A57D8404(v9, (uint64_t)a2, a3, sub_1A56F12C4);
    if (v17)
      return (_QWORD *)(v17 + v16);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1A57D85DC(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  BOOL v11;
  int64_t v12;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (result < 0 || v4 < result)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a2 < 0 || v4 < a2)
    goto LABEL_27;
  if (a2 - result < 100)
    return result;
  v5 = a2 - 99;
  if ((unint64_t)a2 < 0x63)
    goto LABEL_28;
  if (a2 - 2 < v5)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v6 = 0;
  v7 = a3 + a2;
  while (1)
  {
    if ((uint64_t)(v5 + v6) >= a2 || (uint64_t)v5 < result || (uint64_t)(v5 + v6) >= a2 - 2)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (*(unsigned __int8 *)(v7 + v6 - 99) <= 0x7Eu && *(unsigned __int8 *)(v7 + v6 - 98) < 0x7Fu)
      break;
    if (++v6 == 97)
      return result;
  }
  v10 = v5 + v6;
  v11 = __OFADD__(v10, 2);
  v12 = v10 + 2;
  if (v11)
    goto LABEL_30;
  if (v12 < result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v12 > a2)
LABEL_32:
    __break(1u);
  return result;
}

uint64_t sub_1A57D86AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v5 = a3 - a2;
  if (a2)
    v6 = a3 - a2;
  else
    v6 = 0;
  v7 = sub_1A57D8714(0, a1, v6, a2, a3, sub_1A56F12C4);
  if ((v8 & 1) == 0)
  {
    if (a2)
    {
      if (v7 < v5)
        return *(unsigned __int8 *)(a2 + v7) | 0x20u;
    }
    else if (v7 < 0)
    {
      return *(unsigned __int8 *)(a2 + v7) | 0x20u;
    }
  }
  return 0;
}

uint64_t sub_1A57D8714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v10 = a6(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2)
      goto LABEL_8;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_8:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v12 = a5 - a4;
  if (!a4)
    v12 = 0;
  if (result < 0 || v12 < result)
    goto LABEL_15;
  return result;
}

uint64_t _s9IMAP2MIME23ContentTransferEncodingO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

unint64_t sub_1A57D8800()
{
  unint64_t result;

  result = qword_1EE7AA5E8;
  if (!qword_1EE7AA5E8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ContentTransferEncoding, &type metadata for ContentTransferEncoding);
    atomic_store(result, (unint64_t *)&qword_1EE7AA5E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentTransferEncoding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A57D8890 + 4 * byte_1A59D7652[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A57D88C4 + 4 * byte_1A59D764D[v4]))();
}

uint64_t sub_1A57D88C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D88CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57D88D4);
  return result;
}

uint64_t sub_1A57D88E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57D88E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A57D88EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57D88F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransferEncoding()
{
  return &type metadata for ContentTransferEncoding;
}

void sub_1A57D8910(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  if (v4 == 56)
  {
    if (v5 == 98 && v6 == 105 && v7 == 116)
    {
      v8 = a1;
      v9 = a2;
      v10 = 1;
      goto LABEL_26;
    }
  }
  else if (v4 == 55 && v5 == 98 && v6 == 105 && v7 == 116)
  {
    v8 = a1;
    v9 = a2;
    v10 = 0;
LABEL_26:
    sub_1A57D7770(v8, v9, v10);
    return;
  }
  if (v4 == 98 && v5 == 105 && v6 == 110 && v7 == 97)
  {
    v8 = a1;
    v9 = a2;
    v10 = 2;
    goto LABEL_26;
  }
  if (v4 == 113 && v5 == 117 && v6 == 111 && v7 == 116)
  {
    v8 = a1;
    v9 = a2;
    v10 = 3;
    goto LABEL_26;
  }
  if (v4 == 98 && v5 == 97 && v6 == 115 && v7 == 101)
  {
    v8 = a1;
    v9 = a2;
    v10 = 4;
    goto LABEL_26;
  }
}

uint64_t sub_1A57D8AD4(uint64_t isStackAllocationSafe, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v12 = isStackAllocationSafe == 3;
  if (isStackAllocationSafe >= 3u)
  {
LABEL_6:
    if (v12)
    {
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (a2 < 1025
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v15 = sub_1A57FC8C4(0, a2, (uint64_t)&v29 - v14, (uint64_t)&v29 + a2 - v14, (uint64_t)a3, a4);
          if (!v6)
            goto LABEL_28;
          goto LABEL_29;
        }
        v24 = swift_slowAlloc();
        v25 = sub_1A57FC8C4(0, a2, v24, v24 + a2, (uint64_t)a3, a4);
        if (!v6)
        {
LABEL_33:
          sub_1A57DD6E4(v25, v26, v27 & 1, a5, a6, (uint64_t *)&v30);
          a6 = v30;
          MEMORY[0x1A85B1964](v24, -1, -1);
          goto LABEL_35;
        }
LABEL_34:
        MEMORY[0x1A85B1964](v24, -1, -1);
        goto LABEL_35;
      }
      __break(1u);
    }
    else if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v15 = (uint64_t)sub_1A57CAD7C(0, a2, (uint64_t)&v29 - v23, (uint64_t)&v29 + a2 - v23, a3, a4);
        if (!v6)
        {
LABEL_28:
          sub_1A57DD6E4(v15, v16, v17 & 1, a5, a6, (uint64_t *)&v30);
          a6 = v30;
          goto LABEL_35;
        }
LABEL_29:
        swift_willThrow();
        goto LABEL_35;
      }
      v24 = swift_slowAlloc();
      v25 = (uint64_t)sub_1A57CAD7C(0, a2, v24, v24 + a2, a3, a4);
      if (!v6)
        goto LABEL_33;
      goto LABEL_34;
    }
    __break(1u);
  }
  if (a3)
  {
    v13 = a4 - (_QWORD)a3;
    v12 = a4 - (_QWORD)a3 == a2;
    if (a4 - (uint64_t)a3 <= a2)
    {
      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_6;
      }
LABEL_15:
      sub_1A57D8E30(a5);
      swift_retain();
      a6 = (uint64_t *)sub_1A580A88C(a5, 0, v13, (uint64_t)a3, a6);
LABEL_35:
      sub_1A57D8E08(a5);
      return (uint64_t)a6;
    }
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    goto LABEL_15;
  }
  v18 = sub_1A57D8404(a2, (uint64_t)a3, a4, sub_1A56F12C4);
  if (v20)
    v21 = v20 + v19;
  else
    v21 = 0;
  if (v20)
    v22 = v20 + v18;
  else
    v22 = 0;
  sub_1A57DD6E4(v22, v21, 1, a5, a6, v31);
  sub_1A57D8E08(a5);
  if (!v6)
    return v31[0];
  return (uint64_t)a6;
}

uint64_t sub_1A57D8E08(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57D8E30(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t ContentType.mediaType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A57D8E64(v1, a1);
}

uint64_t sub_1A57D8E64(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MediaType(a2, a1);
  return a2;
}

uint64_t ContentType.mediaType.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57D8EA8(a1, v1);
}

uint64_t sub_1A57D8EA8(uint64_t a1, uint64_t a2)
{
  assignWithTake for MediaType(a2, a1);
  return a2;
}

double (*ContentType.mediaType.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ContentType.attributes.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t ContentType.attributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

double (*ContentType.attributes.modify())(_QWORD)
{
  return nullsub_1;
}

double ContentType.init(mediaType:attributes:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1A57D6944(a1, (uint64_t)v8);
  v5 = v9;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 32) = v5;
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t ContentType.Attribute.key.getter(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t ContentType.Attribute.key.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

double (*ContentType.Attribute.key.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ContentType.Attribute.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a3;
}

uint64_t ContentType.Attribute.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

double (*ContentType.Attribute.value.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static ContentType.Attribute.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6 || (v12 = sub_1A594CD38(), result = 0, (v12 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return sub_1A594CD38();
  }
  return result;
}

uint64_t sub_1A57D90F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_1A594CD38(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_1A594CD38();
  }
  return result;
}

uint64_t static ContentType.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  _BYTE v7[40];
  _BYTE v8[40];

  sub_1A57D6944(a1, (uint64_t)v8);
  sub_1A57D6944(a2, (uint64_t)v7);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v7);
  if ((v4 & 1) != 0)
    v5 = sub_1A57D41A8(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  else
    v5 = 0;
  return v5 & 1;
}

uint64_t sub_1A57D91EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[40];
  _BYTE v10[40];

  sub_1A57D6944(a1, (uint64_t)v9);
  v4 = *(_QWORD *)(a1 + 40);
  sub_1A57D6944(a2, (uint64_t)v10);
  v5 = *(_QWORD *)(a2 + 40);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v10);
  if ((v6 & 1) != 0)
    v7 = sub_1A57D41A8(v4, v5);
  else
    v7 = 0;
  return v7 & 1;
}

uint64_t ContentType.description.getter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[40];

  sub_1A57D6944(v0, (uint64_t)v3);
  v2 = *(_QWORD *)(v0 + 40);
  sub_1A57DA69C((uint64_t)v3);
  sub_1A54FCA28((uint64_t)&v2);
  return _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0(v0);
}

uint64_t sub_1A57D92A0()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[2];
  __int128 v4;
  _BYTE v5[40];
  uint64_t v6;

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v4 = v0[2];
  sub_1A57D6944((uint64_t)v3, (uint64_t)v5);
  v6 = *((_QWORD *)&v4 + 1);
  sub_1A57DA69C((uint64_t)v5);
  sub_1A54FCA28((uint64_t)&v6);
  return _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0((uint64_t)v3);
}

uint64_t ContentType.Attribute.description.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v7;

  v2 = qword_1EE7AA530;
  swift_bridgeObjectRetain_n();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v2 != -1)
    swift_once();
  v3 = sub_1A5949B40();
  __swift_project_value_buffer_0(v3, (uint64_t)qword_1EE7AA5F0);
  sub_1A57D6AB8();
  sub_1A594C450();
  v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v7 = 8251;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = a1;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
  }
  return v7;
}

Swift::String __swiftcall String.init(_:)(IMAP2MIME::ContentType::Attribute a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  void *v8;
  Swift::String result;
  uint64_t v10;
  unint64_t v11;

  object = a1.key._object;
  countAndFlagsBits = a1.key._countAndFlagsBits;
  v3 = qword_1EE7AA530;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v3 != -1)
    swift_once();
  v4 = sub_1A5949B40();
  __swift_project_value_buffer_0(v4, (uint64_t)qword_1EE7AA5F0);
  sub_1A57D6AB8();
  sub_1A594C450();
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    v10 = 8251;
    v11 = 0xE200000000000000;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = countAndFlagsBits;
    v11 = (unint64_t)object;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
  }
  v7 = v10;
  v8 = (void *)v11;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t sub_1A57D9620()
{
  uint64_t *v0;

  return ContentType.Attribute.description.getter(*v0);
}

uint64_t sub_1A57D962C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_1A5949B40();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer_0(v4, qword_1EE7AA5F0);
  __swift_project_value_buffer_0(v0, (uint64_t)qword_1EE7AA5F0);
  sub_1A5949B04();
  sub_1A5949B34();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1A57D96E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A57D970C + 4 * aC_12[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1A57D970C()
{
  return 0x742D737365636361;
}

uint64_t sub_1A57D972C()
{
  return 0x797261646E756F62;
}

uint64_t sub_1A57D9744()
{
  return 0x74657372616863;
}

uint64_t sub_1A57D975C()
{
  return 0x70736C6564;
}

uint64_t sub_1A57D9770()
{
  return 0x7265626D756ELL;
}

uint64_t sub_1A57D9784()
{
  return 0x6C61746F74;
}

uint64_t sub_1A57D9798()
{
  return 25705;
}

uint64_t sub_1A57D97A4()
{
  return 0x7469736F70736964;
}

uint64_t sub_1A57D97C4()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_1A57D97DC()
{
  return 0x636C6167696DLL;
}

uint64_t sub_1A57D97F0()
{
  return 0x746E656D6D6F63;
}

uint64_t sub_1A57D9808()
{
  return 0x74616D726F66;
}

uint64_t sub_1A57D981C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1A594CE64();
  sub_1A57D96E0(v1);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57D987C()
{
  unsigned __int8 *v0;

  sub_1A57D96E0(*v0);
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57D98BC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1A594CE64();
  sub_1A57D96E0(v1);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57D9918@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57DABC4();
  *a1 = result;
  return result;
}

uint64_t sub_1A57D9944@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1A57D96E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A57D996C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1A57D96E0(*a1);
  v5 = v4;
  if (v3 == sub_1A57D96E0(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A57D99F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    v3 = (_BYTE *)(v1 + 48);
    do
    {
      if ((*v3 & 1) == 0)
        __asm { BR              X9 }
      v3 += 56;
      --v2;
    }
    while (v2);
    sub_1A57D8E08(v0);
    sub_1A57D8E08(v0);
  }
  return 0;
}

uint64_t sub_1A57D9C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    v3 = (_BYTE *)(v1 + 48);
    do
    {
      if ((*v3 & 1) == 0)
        __asm { BR              X9 }
      v3 += 56;
      --v2;
    }
    while (v2);
    sub_1A57D8E08(v0);
    sub_1A57D8E08(v0);
  }
  return 0;
}

void sub_1A57D9E5C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL4 v11;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  if (v4 == 110 && v5 == 97 && v6 == 109 && v7 == 101)
  {
    v8 = a1;
    v9 = a2;
    v10 = 0;
LABEL_31:
    sub_1A57D791C(v8, v9, v10);
    return;
  }
  if (v4 == 98)
  {
    if (v5 == 111 && v6 == 117 && v7 == 110)
    {
      v8 = a1;
      v9 = a2;
      v10 = 2;
      goto LABEL_31;
    }
  }
  else if (v4 == 97 && v5 == 99 && v6 == 99 && v7 == 101)
  {
    v8 = a1;
    v9 = a2;
    v10 = 1;
    goto LABEL_31;
  }
  if (v4 == 99 && v5 == 104 && v6 == 97 && v7 == 114)
  {
    v8 = a1;
    v9 = a2;
    v10 = 3;
    goto LABEL_31;
  }
  if (v4 == 100 && v5 == 101 && v6 == 108 && v7 == 115)
  {
    v8 = a1;
    v9 = a2;
    v10 = 4;
    goto LABEL_31;
  }
  if (v4 == 110 && v5 == 117 && v6 == 109 && v7 == 98)
  {
    v8 = a1;
    v9 = a2;
    v10 = 5;
    goto LABEL_31;
  }
  if (v4 == 105)
  {
    if (v5 == 100 && !v6 && !v7)
    {
      v8 = a1;
      v9 = a2;
      v10 = 7;
      goto LABEL_31;
    }
LABEL_43:
    v11 = v5 == 105;
    goto LABEL_44;
  }
  if (v4 == 116)
  {
    if (v5 == 111 && v6 == 116 && v7 == 97)
    {
      v8 = a1;
      v9 = a2;
      v10 = 6;
      goto LABEL_31;
    }
    goto LABEL_43;
  }
  v11 = v5 == 105;
  if (v4 == 100 && v5 == 105 && v6 == 115 && v7 == 112)
  {
    v8 = a1;
    v9 = a2;
    v10 = 8;
    goto LABEL_31;
  }
LABEL_44:
  if (v4 == 109)
  {
    if (v6 != 103)
      v11 = 0;
    if (v11 && v7 == 97)
    {
      v8 = a1;
      v9 = a2;
      v10 = 10;
      goto LABEL_31;
    }
  }
  else if (v4 == 112)
  {
    if (v5 == 114 && v6 == 111 && v7 == 116)
    {
      v8 = a1;
      v9 = a2;
      v10 = 9;
      goto LABEL_31;
    }
  }
  else
  {
    if (v4 == 99 && v5 == 111 && v6 == 109 && v7 == 109)
    {
      v8 = a1;
      v9 = a2;
      v10 = 11;
      goto LABEL_31;
    }
    if (v4 == 102 && v5 == 111 && v6 == 114 && v7 == 109)
    {
      v8 = a1;
      v9 = a2;
      v10 = 12;
      goto LABEL_31;
    }
  }
}

uint64_t sub_1A57DA214@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  __int128 v17;
  char *v18;
  _BYTE v19[40];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 v23;

  v7 = (_BYTE *)sub_1A5801228(a1, a2, a3);
  if (!v9)
  {
LABEL_4:
    sub_1A57F2E2C(a1, a2);
    __asm { BR              X11 }
  }
  v10 = v9;
  sub_1A57F3664(v7, v8, (uint64_t)v19);
  sub_1A57DA8A4((uint64_t)v19, (uint64_t)&v20);
  v11 = v23;
  if (v23 > 0xFDu)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v13 = v20;
  v17 = v21;
  v14 = v22;
  v18 = (char *)MEMORY[0x1E0DEE9D8];
  sub_1A57FDF58(v10, &v18);
  result = swift_bridgeObjectRelease();
  v16 = v18;
  *(_QWORD *)a4 = v13;
  *(_OWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 24) = v14;
  *(_BYTE *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v16;
  return result;
}

void sub_1A57DA330()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA350()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA370()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA390()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA3B0()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA3D0()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA3F0()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA410()
{
  JUMPOUT(0x1A57DA304);
}

void sub_1A57DA430()
{
  JUMPOUT(0x1A57DA304);
}

uint64_t _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];

  sub_1A57D6944(a1, (uint64_t)v14);
  _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0((uint64_t)v14);
  v12 = v2;
  v3 = *(_QWORD *)(a1 + 40);
  v13 = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 56;
    do
    {
      v6 = qword_1EE7AA530;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (v6 != -1)
        swift_once();
      v7 = sub_1A5949B40();
      __swift_project_value_buffer_0(v7, (uint64_t)qword_1EE7AA5F0);
      sub_1A57D6AB8();
      sub_1A594C450();
      v9 = v8;
      swift_bridgeObjectRelease();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      if ((v9 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1A594B5F8();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A594B5F8();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A594B5F8();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_1A594B5F8();
      }
      v5 += 32;
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
    sub_1A54F81BC((uint64_t)&v13);
    return v12;
  }
  else
  {
    v10 = v2;
    sub_1A54F81BC((uint64_t)&v13);
  }
  return v10;
}

uint64_t sub_1A57DA69C(uint64_t a1)
{
  sub_1A57D6980(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t destroy for ContentType(uint64_t a1)
{
  sub_1A57D6A40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ContentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  sub_1A57D6A40(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8_3(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContentType(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_1A57D6A40(v5, v6, v7, v8, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentType()
{
  return &type metadata for ContentType;
}

ValueMetadata *type metadata accessor for ContentType.Attribute()
{
  return &type metadata for ContentType.Attribute;
}

uint64_t sub_1A57DA8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for UnsafeContentType()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnsafeContentType(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for UnsafeContentType(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  v4 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UnsafeContentType(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7ElementVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UnsafeContentType()
{
  return &type metadata for UnsafeContentType;
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute()
{
  return &type metadata for UnsafeContentType.Attribute;
}

uint64_t getEnumTagSinglePayload for UnsafeContentType.Attribute.Key.Known(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeContentType.Attribute.Key.Known(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1A57DAAFC + 4 * byte_1A59D776D[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1A57DAB30 + 4 * byte_1A59D7768[v4]))();
}

uint64_t sub_1A57DAB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DAB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57DAB40);
  return result;
}

uint64_t sub_1A57DAB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57DAB54);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1A57DAB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DAB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute.Key.Known()
{
  return &type metadata for UnsafeContentType.Attribute.Key.Known;
}

unint64_t sub_1A57DAB80()
{
  unint64_t result;

  result = qword_1EE7AA608;
  if (!qword_1EE7AA608)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D786C, &type metadata for UnsafeContentType.Attribute.Key.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA608);
  }
  return result;
}

uint64_t sub_1A57DABC4()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute.Key()
{
  return &type metadata for UnsafeContentType.Attribute.Key;
}

uint64_t EmailAddress.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t EmailAddress.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

double (*EmailAddress.name.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t EmailAddress.address.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t EmailAddress.localPart.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t EmailAddress.domainPart.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

double EmailAddress.init(name:localPart:domainPart:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[6];

  sub_1A57DBB78(a1, a2, a3, a4, v10);
  v6 = v10[3];
  a5[2] = v10[2];
  a5[3] = v6;
  v7 = v10[5];
  a5[4] = v10[4];
  a5[5] = v7;
  result = *(double *)v10;
  v9 = v10[1];
  *a5 = v10[0];
  a5[1] = v9;
  return result;
}

uint64_t sub_1A57DAD80(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return _s9IMAP2MIME12EmailAddressV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10) & 1;
}

uint64_t sub_1A57DADD8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26[3];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  if (v1[9] >> 14 < v1[8] >> 14)
    __break(1u);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v3 = sub_1A594C3B4();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v10 = sub_1A5808E2C(v3, v5, v7, v9);
  v13 = v11;
  if (v11)
  {
    v14 = v10;
  }
  else
  {
    v14 = MEMORY[0x1A85AD950](v3, v5, v7, v9);
    v13 = v15;
  }
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    LODWORD(v26[0]) = 0;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v12 = MEMORY[0x1A85B1BB0](60, v26);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 88);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v27[0] = v12;
  sub_1A57E6840((uint64_t)v27, v14, v13, v26);
  *(_QWORD *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 96) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v16 = v1[4];
  v17 = v1[5];
  v19 = v1[6];
  v18 = v1[7];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v20 = sub_1A5808E2C(v16, v17, v19, v18);
  v22 = v21;
  if (v21)
  {
    v23 = v20;
  }
  else
  {
    v23 = MEMORY[0x1A85AD950](v16, v17, v19, v18);
    v22 = v24;
  }
  swift_bridgeObjectRelease();
  v26[0] = v23;
  v26[1] = v22;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26[0];
}

uint64_t sub_1A57DB07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = sub_1A580AA5C(a1, a2);
  v8 = v7;
  swift_retain();
  sub_1A57FDD00(v6, v8, a3);
  v9 = sub_1A57DB1B4();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 56);
    v22 = *(_OWORD *)(v9 + 64);
    v13 = *(_QWORD *)(v9 + 80);
    v12 = *(_QWORD *)(v9 + 88);
    v20 = *(_OWORD *)(v9 + 40);
    v21 = *(_OWORD *)(v9 + 96);
    v15 = *(_QWORD *)(v9 + 112);
    v14 = *(_QWORD *)(v9 + 120);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    result = swift_release();
    v18 = v21;
    v17 = v22;
    v19 = v20;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    v10 = 0;
    v11 = 0;
    v13 = 0;
    v12 = 0;
    v15 = 0;
    v14 = 0;
    v19 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  *(_QWORD *)a4 = v10;
  *(_OWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 24) = v11;
  *(_OWORD *)(a4 + 32) = v17;
  *(_QWORD *)(a4 + 48) = v13;
  *(_QWORD *)(a4 + 56) = v12;
  *(_OWORD *)(a4 + 64) = v18;
  *(_QWORD *)(a4 + 80) = v15;
  *(_QWORD *)(a4 + 88) = v14;
  return result;
}

uint64_t sub_1A57DB1B4()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v0 = (void *)sub_1A594B3F4();
  v1 = IMAP2EmailCore_ECEmailAddressesFromHeader(v0);

  sub_1A57DBFF8();
  v2 = sub_1A594B958();

  if (v2 >> 62)
    goto LABEL_27;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v3)
  {
    do
    {
      if (v3 < 1)
      {
        __break(1u);
        return result;
      }
      v5 = 0;
      v6 = (char *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v7 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A85AEC04](v5, v2) : *(id *)(v2 + 8 * v5 + 32);
        v8 = v7;
        v9 = sub_1A57DB39C((uint64_t)v7, 0);

        v10 = *(_QWORD *)(v9 + 16);
        v11 = *((_QWORD *)v6 + 2);
        v12 = v11 + v10;
        if (__OFADD__(v11, v10))
          break;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v12 <= *((_QWORD *)v6 + 3) >> 1)
        {
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_19;
        }
        else
        {
          if (v11 <= v12)
            v14 = v11 + v10;
          else
            v14 = v11;
          v6 = sub_1A581141C(isUniquelyReferenced_nonNull_native, v14, 1, v6);
          if (*(_QWORD *)(v9 + 16))
          {
LABEL_19:
            if ((*((_QWORD *)v6 + 3) >> 1) - *((_QWORD *)v6 + 2) < v10)
              goto LABEL_25;
            swift_arrayInitWithCopy();
            if (v10)
            {
              v15 = *((_QWORD *)v6 + 2);
              v16 = __OFADD__(v15, v10);
              v17 = v15 + v10;
              if (v16)
                goto LABEL_26;
              *((_QWORD *)v6 + 2) = v17;
            }
            goto LABEL_6;
          }
        }
        if (v10)
          goto LABEL_24;
LABEL_6:
        swift_bridgeObjectRelease();
        if (v3 == ++v5)
          goto LABEL_29;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      result = sub_1A594CA38();
      v3 = result;
    }
    while (result);
  }
  v6 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_29:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v6;
}

uint64_t sub_1A57DB39C(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[6];

  if (a2 > 3)
    return MEMORY[0x1E0DEE9D8];
  v3 = (id)IMAP2EmailCore_ECEmailAddress_groupList();
  if (v3)
  {
    v4 = v3;
    sub_1A57DBFF8();
    v5 = sub_1A594B958();

  }
  else
  {
    v5 = 0;
  }
  v6 = (id)IMAP2EmailCore_ECEmailAddress_displayName(a1);
  if (v6)
  {
    v7 = v6;
    v8 = sub_1A594B40C();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = (id)IMAP2EmailCore_ECEmailAddress_localPart(a1);
  if (v11)
  {
    v12 = v11;
    v13 = sub_1A594B40C();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (id)IMAP2EmailCore_ECEmailAddress_domain(a1);
  if (v16)
  {
    v17 = v16;
    sub_1A594B40C();
    v19 = v18;

    if (v5)
      goto LABEL_13;
LABEL_34:
    if (v15)
    {
      if (v19)
      {
        __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE7A12E8);
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_1A59ABD10;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57DBB78(v8, v10, v13, v15, v46);
        v33 = v46[3];
        *(_OWORD *)(v23 + 64) = v46[2];
        *(_OWORD *)(v23 + 80) = v33;
        v34 = v46[5];
        *(_OWORD *)(v23 + 96) = v46[4];
        *(_OWORD *)(v23 + 112) = v34;
        v35 = v46[1];
        *(_OWORD *)(v23 + 32) = v46[0];
        *(_OWORD *)(v23 + 48) = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v23;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_67;
    }
    swift_bridgeObjectRelease_n();
LABEL_66:
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v19 = 0;
  if (!v5)
    goto LABEL_34;
LABEL_13:
  if (v5 >> 62)
    goto LABEL_64;
  v20 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n();
  if (!v20)
  {
LABEL_65:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  while (v20 >= 1)
  {
    if ((v5 & 0xC000000000000001) == 0)
    {
      v36 = (id *)(v5 + 32);
      v23 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v37 = *v36;
        v38 = sub_1A57DB39C();

        v39 = *(_QWORD *)(v38 + 16);
        v40 = *(_QWORD *)(v23 + 16);
        v41 = v40 + v39;
        if (__OFADD__(v40, v39))
          goto LABEL_60;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v41 <= *(_QWORD *)(v23 + 24) >> 1)
        {
          if (*(_QWORD *)(v38 + 16))
            goto LABEL_49;
        }
        else
        {
          if (v40 <= v41)
            v43 = v40 + v39;
          else
            v43 = v40;
          v23 = (uint64_t)sub_1A581141C(isUniquelyReferenced_nonNull_native, v43, 1, (char *)v23);
          if (*(_QWORD *)(v38 + 16))
          {
LABEL_49:
            if ((*(_QWORD *)(v23 + 24) >> 1) - *(_QWORD *)(v23 + 16) < v39)
              goto LABEL_62;
            swift_arrayInitWithCopy();
            if (v39)
            {
              v44 = *(_QWORD *)(v23 + 16);
              v31 = __OFADD__(v44, v39);
              v45 = v44 + v39;
              if (v31)
                goto LABEL_63;
              *(_QWORD *)(v23 + 16) = v45;
            }
            goto LABEL_39;
          }
        }
        if (v39)
          goto LABEL_59;
LABEL_39:
        swift_bridgeObjectRelease();
        ++v36;
        if (!--v20)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v23;
        }
      }
    }
    v22 = 0;
    v23 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      MEMORY[0x1A85AEC04](v22, v5);
      v24 = sub_1A57DB39C();
      swift_unknownObjectRelease();
      v25 = *(_QWORD *)(v24 + 16);
      v26 = *(_QWORD *)(v23 + 16);
      v27 = v26 + v25;
      if (__OFADD__(v26, v25))
        break;
      v28 = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)v28 && v27 <= *(_QWORD *)(v23 + 24) >> 1)
      {
        if (*(_QWORD *)(v24 + 16))
          goto LABEL_29;
      }
      else
      {
        if (v26 <= v27)
          v29 = v26 + v25;
        else
          v29 = v26;
        v23 = (uint64_t)sub_1A581141C(v28, v29, 1, (char *)v23);
        if (*(_QWORD *)(v24 + 16))
        {
LABEL_29:
          if ((*(_QWORD *)(v23 + 24) >> 1) - *(_QWORD *)(v23 + 16) < v25)
            goto LABEL_58;
          swift_arrayInitWithCopy();
          if (v25)
          {
            v30 = *(_QWORD *)(v23 + 16);
            v31 = __OFADD__(v30, v25);
            v32 = v30 + v25;
            if (v31)
              goto LABEL_61;
            *(_QWORD *)(v23 + 16) = v32;
          }
          goto LABEL_19;
        }
      }
      if (v25)
      {
        __break(1u);
        break;
      }
LABEL_19:
      swift_bridgeObjectRelease();
      if (v20 == ++v22)
        goto LABEL_53;
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain_n();
    result = sub_1A594CA38();
    v20 = result;
    if (!result)
      goto LABEL_65;
  }
  __break(1u);
  return result;
}

uint64_t _s9IMAP2MIME12EmailAddressV23__derived_struct_equalsySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *a1 == *a2 && v4 == v5;
    if (!v6 && (sub_1A594CD38() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = a1[2] == a2[2] && a1[3] == a2[3];
  if ((v7 || (sub_1A594CD38() & 1) != 0)
    && (sub_1A57E6DA4(a1[4], a1[5], a1[6], a1[7], a2[4], a2[5], a2[6], a2[7]) & 1) != 0)
  {
    return sub_1A57E6DA4(a1[8], a1[9], a1[10], a1[11], a2[8], a2[9], a2[10], a2[11]);
  }
  return 0;
}

unint64_t sub_1A57DB8FC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v0 = sub_1A594B634();
  if (!v1)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v7 = 1;
LABEL_17:
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v8 = sub_1A594B634();
    if (v9)
    {
      v10 = v8;
      v11 = v9;
      do
      {
        if (v10 == 34 && v11 == 0xE100000000000000
          || (sub_1A594CD38() & 1) != 0
          || v10 == 92 && v11 == 0xE100000000000000
          || (sub_1A594CD38() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_1A594B5F8();
        }
        else
        {
          MEMORY[0x1A85ADA64](v10, v11);
          swift_bridgeObjectRelease();
        }
        v10 = sub_1A594B634();
        v11 = v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      sub_1A594B5F8();
    return sub_1A58096D0(0);
  }
  v2 = v0;
  v3 = v1;
  while (1)
  {
    if (v2 == 2573 && v3 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0 || (sub_1A594B1B4() & 1) == 0)
      goto LABEL_3;
    result = sub_1A57A76A0(v2, v3);
    if ((result & 0x100000000) != 0)
      goto LABEL_34;
    if ((result & 0xFFFFFF80) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    result = sub_1A57A76A0(v2, v3);
    if ((result & 0x100000000) != 0)
      goto LABEL_35;
    v6 = result;
    result = swift_bridgeObjectRelease();
    if ((v6 & 0xFFFFFF00) != 0)
      break;
    if (v6 - 34 <= 0x3A
      && ((1 << (v6 - 34)) & 0x4000000540004C1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1A594B5F8();
      v7 = 0;
      goto LABEL_17;
    }
LABEL_4:
    v2 = sub_1A594B634();
    v3 = v4;
    if (!v4)
      goto LABEL_16;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1A57DBB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B5F8();
  if ((a4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a4) & 0xF;
  else
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  result = sub_1A594B718();
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7)
  {
    __break(1u);
  }
  else
  {
    v13 = v11;
    v14 = result;
    v22 = v9;
    v23 = v10;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v15 = sub_1A594B718();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease_n();
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    a5[4] = v14;
    a5[5] = v22;
    a5[6] = v23;
    a5[7] = v13;
    a5[8] = v15;
    a5[9] = v17;
    a5[10] = v19;
    a5[11] = v21;
  }
  return result;
}

_QWORD *assignWithCopy for EmailAddress(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8_1(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for EmailAddress(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmailAddress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

unint64_t sub_1A57DBFF8()
{
  unint64_t result;

  result = qword_1EE79A608;
  if (!qword_1EE79A608)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE79A608);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeEmailAddress()
{
  return &type metadata for UnsafeEmailAddress;
}

ValueMetadata *type metadata accessor for UnsafeEmailAddressValue()
{
  return &type metadata for UnsafeEmailAddressValue;
}

uint64_t sub_1A57DC054(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3, uint64_t (*a4)(_OWORD *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_OWORD *);
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[12];

  v15 = swift_allocObject();
  sub_1A57DC1DC(v40);
  sub_1A57DC200((uint64_t)v40, v15 + 16);
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = 2;
  v31 = v15;
  v32 = v16;
  v33 = a4;
  v34 = a5;
  v27 = v15 + 16;
  v28 = a6;
  v29 = a7;
  v17 = sub_1A57F978C(a1, a8, a9, a10, a11);
  v35 = MEMORY[0x1E0DEE9D8];
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  sub_1A57F8F6C((uint64_t (*)(uint64_t))sub_1A57DC53C, (uint64_t)v30, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57DC7C0, (uint64_t)v26, a2, a3);
  sub_1A57DC258(v15, v16, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_1A57DC1A4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

double sub_1A57DC1DC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 169) = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1A57DC200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57DC248()
{
  return swift_deallocObject();
}

uint64_t *sub_1A57DC258(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  char v9;
  char v10;
  _OWORD v12[12];
  _BYTE v13[192];
  _BYTE v14[192];
  uint64_t v15[24];
  _OWORD v16[10];
  _OWORD v17[2];
  _OWORD v18[10];
  _OWORD v19[2];

  v6 = a1 + 16;
  v7 = (_BYTE *)(a2 + 16);
  swift_beginAccess();
  if (*(_BYTE *)(a2 + 16) == 2
    && (swift_beginAccess(),
        sub_1A57DC200(v6, (uint64_t)v15),
        sub_1A57DC200((uint64_t)v15, (uint64_t)v16),
        sub_1A5522E34((uint64_t *)v16) != 1))
  {
    v18[8] = v16[8];
    v18[9] = v16[9];
    v19[0] = v17[0];
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)v17 + 9);
    v18[4] = v16[4];
    v18[5] = v16[5];
    v18[6] = v16[6];
    v18[7] = v16[7];
    v18[0] = v16[0];
    v18[1] = v16[1];
    v18[2] = v16[2];
    v18[3] = v16[3];
    sub_1A57DC200((uint64_t)v15, (uint64_t)v14);
    sub_1A57DCED4((uint64_t)v14);
    v9 = a3(v18);
    if (v3)
    {
      sub_1A57DCE2C(v15);
    }
    else
    {
      v10 = v9;
      sub_1A57DCE2C(v15);
      swift_beginAccess();
      *v7 = v10;
    }
    sub_1A57DC1DC(v12);
    swift_beginAccess();
    sub_1A57DC200(v6, (uint64_t)v13);
    sub_1A57DC200((uint64_t)v12, v6);
    v8 = (uint64_t *)v13;
  }
  else
  {
    sub_1A57DC1DC(v15);
    swift_beginAccess();
    sub_1A57DC200(v6, (uint64_t)v16);
    sub_1A57DC200((uint64_t)v15, v6);
    v8 = (uint64_t *)v16;
  }
  return sub_1A57DCE2C(v8);
}

uint64_t *sub_1A57DC420(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31[25];

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  result = sub_1A57DC258(a2, a3, a4);
  if (!v4)
  {
    v14 = v7;
    v13 = a2 + 16;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 2;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 2;
    v28 = 0;
    v29 = 0;
    v30 = 2;
    nullsub_1(&v14);
    swift_beginAccess();
    sub_1A57DC200(v13, (uint64_t)v31);
    sub_1A57DC200((uint64_t)&v14, v13);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57DCE2C(v31);
    swift_beginAccess();
    return (uint64_t *)*(unsigned __int8 *)(a3 + 16);
  }
  return result;
}

uint64_t *sub_1A57DC53C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A57DC420(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_OWORD *))(v1 + 32));
}

uint64_t sub_1A57DC558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[192];
  uint64_t v31[24];
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v38[192];
  uint64_t v39[25];

  sub_1A57DCF1C(a1, (uint64_t)v32);
  swift_beginAccess();
  sub_1A57DC200(a6, (uint64_t)v38);
  sub_1A57DC200((uint64_t)v38, (uint64_t)v39);
  if (sub_1A5522E34(v39) != 1)
  {
    sub_1A57DCF1C(a1, (uint64_t)&v33);
    v17 = v36;
    switch(v36 >> 59)
    {
      case 0uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        v18 = v34;
        *(_OWORD *)(a6 + 168) = v33;
        *(_BYTE *)(a6 + 184) = v18;
        break;
      case 5uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        v28 = v33;
        v24 = v34;
        v26 = *((_QWORD *)&v33 + 1);
        v22 = v35;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a6 + 40) = v28;
        *(_QWORD *)(a6 + 48) = v26;
        *(_QWORD *)(a6 + 56) = v24;
        *(_QWORD *)(a6 + 64) = v22;
        break;
      case 6uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        v19 = v34;
        *(_OWORD *)(a6 + 144) = v33;
        *(_BYTE *)(a6 + 160) = v19;
        break;
      case 8uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        v20 = v34;
        *(_OWORD *)(a6 + 72) = v33;
        *(_BYTE *)(a6 + 88) = v20;
        break;
      case 9uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        v27 = v33;
        v23 = v35;
        v25 = v34;
        v29 = v37;
        v21 = v17;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 96) = v27;
        *(_QWORD *)(a6 + 112) = v25;
        *(_QWORD *)(a6 + 120) = v23;
        *(_QWORD *)(a6 + 128) = v21;
        *(_QWORD *)(a6 + 136) = v29;
        break;
      default:
        break;
    }
  }
  swift_beginAccess();
  sub_1A57DC200(a6, (uint64_t)v30);
  sub_1A57DC200((uint64_t)v30, (uint64_t)v31);
  result = sub_1A5522E34(v31);
  if ((_DWORD)result != 1)
  {
    v15 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v16 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v15, MEMORY[0x1E0DEE9D8]);
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      return a7(a1, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_1A57DC7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return sub_1A57DC558(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 24));
}

uint64_t sub_1A57DC7CC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (*(_BYTE *)(v0 + 184) == 2)
    return 0;
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  if (v2)
    v4 = v3 - v2;
  else
    v4 = 0;
  if (v4 < 0)
  {
    __break(1u);
LABEL_60:
    swift_bridgeObjectRelease();
    return 0;
  }
  v32 = sub_1A580AA68(0, v4, v2, v3);
  v33 = v5;
  v34 = v6;
  v35 = v7;
  MEMORY[0x1E0C80A78](v32);
  result = (uint64_t)sub_1A580A084(v9, v8, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A57DCF58);
  v11 = v10;
  v12 = HIBYTE(v10) & 0xF;
  v13 = result & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v14 = v12;
  else
    v14 = result & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_60;
  if ((v11 & 0x1000000000000000) == 0)
  {
    if ((v11 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v15 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v15 = (unsigned __int8 *)sub_1A594C7D4();
      v16 = (uint64_t)sub_1A554098C(v15, v13, 10);
      v18 = v17 & 1;
      goto LABEL_50;
    }
    v32 = result;
    v33 = v11 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v12)
        goto LABEL_64;
      if (v12 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_37;
      v16 = (BYTE1(result) - 48);
      if (v12 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_37;
        v16 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v19 = v12 - 3;
        if (v19)
        {
          v20 = (unsigned __int8 *)&v32 + 3;
          while (1)
          {
            v21 = *v20 - 48;
            if (v21 > 9)
              goto LABEL_37;
            v22 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
              goto LABEL_37;
            v16 = v22 + v21;
            if (__OFADD__(v22, v21))
              goto LABEL_37;
            v18 = 0;
            ++v20;
            if (!--v19)
              goto LABEL_50;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v12)
        {
          if (v12 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              v18 = 0;
              v16 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_50;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v16 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v27 = v12 - 3;
              if (!v27)
                goto LABEL_49;
              v28 = (unsigned __int8 *)&v32 + 3;
              while (1)
              {
                v29 = *v28 - 48;
                if (v29 > 9)
                  break;
                v30 = 10 * v16;
                if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
                  break;
                v16 = v30 - v29;
                if (__OFSUB__(v30, v29))
                  break;
                v18 = 0;
                ++v28;
                if (!--v27)
                  goto LABEL_50;
              }
            }
          }
LABEL_37:
          v16 = 0;
          v18 = 1;
          goto LABEL_50;
        }
        __break(1u);
LABEL_64:
        __break(1u);
        return result;
      }
      if (!v12 || (result - 48) > 9u)
        goto LABEL_37;
      v16 = (result - 48);
      if (v12 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_37;
        v16 = 10 * (result - 48) + (BYTE1(result) - 48);
        v23 = v12 - 2;
        if (v23)
        {
          v24 = (unsigned __int8 *)&v32 + 2;
          while (1)
          {
            v25 = *v24 - 48;
            if (v25 > 9)
              goto LABEL_37;
            v26 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63)
              goto LABEL_37;
            v16 = v26 + v25;
            if (__OFADD__(v26, v25))
              goto LABEL_37;
            v18 = 0;
            ++v24;
            if (!--v23)
              goto LABEL_50;
          }
        }
      }
    }
LABEL_49:
    v18 = 0;
    goto LABEL_50;
  }
  v16 = (uint64_t)sub_1A57DCB24(result, v11, 10);
  v18 = v31;
LABEL_50:
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    return 0;
  else
    return v16;
}

unsigned __int8 *sub_1A57DCB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v5 = sub_1A594B70C();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1A57DCC08();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1A594C7D4();
  }
LABEL_7:
  v11 = sub_1A554098C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1A57DCC08()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1A594B718();
  v4 = sub_1A57DCC84(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A57DCC84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1A5540DC8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1A57DCDC8(v9, 0);
      v12 = sub_1A5540EB4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1A85AD9BC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1A85AD9BCLL);
LABEL_9:
      sub_1A594C7D4();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1A85AD9BC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

_QWORD *sub_1A57DCDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B360);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t *sub_1A57DCE2C(uint64_t *a1)
{
  sub_1A57DCE9C(*a1);
  return a1;
}

uint64_t sub_1A57DCE9C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A57DCED4(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t sub_1A57DCF1C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy48_8_3(a2, a1);
  return a2;
}

_QWORD *sub_1A57DCF58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1A580A19C(a1, *(uint64_t **)(v2 + 16), *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(v2 + 24), a2);
}

uint64_t destroy for ContentPart()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentPart(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_OWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ContentPart(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v8 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  v9 = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  return a1;
}

__n128 __swift_memcpy185_8_0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ContentPart(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentPart(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 185))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentPart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 185) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPart()
{
  return &type metadata for ContentPart;
}

uint64_t Message.enumerateDecodedPlainText(input:outputLimit:cache:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[16] = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  return sub_1A57F5864(v6, sub_1A57DD340, (uint64_t)v8, a6);
}

uint64_t sub_1A57DD340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char v15;

  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(unsigned __int8 *)(v4 + 16);
  v15 = 0;
  v10[16] = 0;
  v11 = v6;
  v12 = v7;
  v13 = &v15;
  v14 = *(_OWORD *)(v4 + 40);
  return sub_1A57DC054(v8, 0, 0, (uint64_t (*)(_OWORD *))sub_1A57DD938, (uint64_t)v10, (uint64_t)nullsub_1, 0, a1, a2, a3, a4);
}

uint64_t Message.enumerateDecodedHTMLText(input:outputLimit:cache:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[16] = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  return sub_1A57F5864(v6, sub_1A57DD7A4, (uint64_t)v8, a6);
}

uint64_t TextPartEnumerationResult.hash(into:)()
{
  return sub_1A594CE88();
}

BOOL static TextPartEnumerationResult.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t TextPartEnumerationResult.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A57DD478(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, _BYTE *a5, uint64_t (*a6)(uint64_t, unint64_t))
{
  void *v6;
  void *v7;
  uint64_t v8;
  char v10;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  __int128 v38;
  _BYTE v40[24];
  _QWORD v41[2];
  __int128 v42;
  char v43;
  uint64_t v44;
  uint64_t v45[2];
  char v46;
  _BYTE *v47;

  v7 = v6;
  v8 = *(_QWORD *)(a1 + 136);
  if (!v8)
    goto LABEL_36;
  v10 = *(_BYTE *)(a1 + 128);
  if ((v10 & 0xF0) != 0x50 || (*(_OWORD *)(a1 + 112) & 1) != 0)
    goto LABEL_36;
  v38 = *(_OWORD *)(a1 + 112);
  v47 = a5;
  v15 = *(unsigned __int8 **)(a1 + 96);
  v14 = *(unsigned __int8 **)(a1 + 104);
  v17 = sub_1A57E2C20(v15, v14);
  if ((a2 & 1) == 0)
  {
    if (v17 != 0x6E69616C70 || v16 != 0xE500000000000000)
      goto LABEL_17;
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v17 == 1819112552 && v16 == 0xE400000000000000)
    goto LABEL_19;
LABEL_17:
  v20 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
    goto LABEL_32;
LABEL_20:
  v41[0] = v15;
  v41[1] = v14;
  v42 = v38;
  v43 = v10;
  v44 = v8;
  sub_1A57DD94C(a1 + 72, (uint64_t)v40);
  sub_1A57DD94C((uint64_t)v40, (uint64_t)v45);
  if (v46 == 2 || (v21 = sub_1A580AA5C(v45[0], v45[1]), sub_1A57D8910(v21, v22), v24 = v23, v23 == 5))
    v24 = 0;
  if (a3 < 1)
  {
    v34 = 0;
    v35 = 0xE000000000000000;
  }
  else
  {
    result = sub_1A57F88A8(*(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    v27 = v26 - result;
    if (!result)
      v27 = 0;
    if (v27 + 0x4000000000000000 < 0)
    {
      __break(1u);
      return result;
    }
    v28 = (_QWORD *)result;
    v29 = v26;
    v30 = 2 * v27;
    if (v30 >= a3)
      v31 = a3;
    else
      v31 = v30;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_retain();
    v32 = sub_1A57D8AD4(v24, v31, v28, v29, (uint64_t)v41, a4);
    if (v7)
    {
      swift_release();

LABEL_32:
      a5 = v47;
      goto LABEL_36;
    }
    v34 = v32;
    v35 = v33;
    swift_release();
    if (!v35)
      goto LABEL_32;
  }
  v36 = a6(v34, v35) & 1;
  swift_bridgeObjectRelease();
  a5 = v47;
  *v47 = v36;
LABEL_36:
  if (*a5)
    return 0;
  else
    return 2;
}

uint64_t sub_1A57DD6E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a2;
  v9 = result;
  if ((a3 & 1) == 0)
    goto LABEL_8;
  if (result)
    v11 = a2 - result;
  else
    v11 = 0;
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = sub_1A57D85DC(0, v11, result, v8);
    if (!v14)
    {
      v15 = 0;
      v9 = 0;
      goto LABEL_13;
    }
    v9 = v14 + v12;
    v8 = v14 + v13;
LABEL_8:
    if (v9)
    {
      v15 = v8 - v9;
      if (v8 - v9 >= 0)
      {
LABEL_13:
        sub_1A57D8E30(a4);
        swift_retain();
        result = sub_1A580A88C(a4, 0, v15, v9, a5);
        *a6 = result;
        a6[1] = v16;
        return result;
      }
      __break(1u);
    }
    v15 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57DD7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char v15;

  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(unsigned __int8 *)(v4 + 16);
  v15 = 0;
  v10[16] = 1;
  v11 = v6;
  v12 = v7;
  v13 = &v15;
  v14 = *(_OWORD *)(v4 + 40);
  return sub_1A57DC054(v8, 0, 0, (uint64_t (*)(_OWORD *))sub_1A57DD938, (uint64_t)v10, (uint64_t)nullsub_1, 0, a1, a2, a3, a4);
}

unint64_t sub_1A57DD828()
{
  unint64_t result;

  result = qword_1EE7AA610;
  if (!qword_1EE7AA610)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for TextPartEnumerationResult, &type metadata for TextPartEnumerationResult);
    atomic_store(result, (unint64_t *)&qword_1EE7AA610);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TextPartEnumerationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A57DD8B8 + 4 * byte_1A59D79C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A57DD8EC + 4 * asc_1A59D79C0[v4]))();
}

uint64_t sub_1A57DD8EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DD8F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57DD8FCLL);
  return result;
}

uint64_t sub_1A57DD908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57DD910);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A57DD914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DD91C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextPartEnumerationResult()
{
  return &type metadata for TextPartEnumerationResult;
}

uint64_t sub_1A57DD938(uint64_t a1)
{
  return sub_1A57DD994(a1);
}

uint64_t sub_1A57DD94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57DD994(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57DD478(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), *(_BYTE **)(v1 + 40), *(uint64_t (**)(uint64_t, unint64_t))(v1 + 48));
}

uint64_t sub_1A57DD9C0(__int128 *a1, __int128 *a2)
{
  __int128 v4[8];
  __int128 v5[8];

  sub_1A57DF868(a1, v4);
  sub_1A57DF868(a2, v5);
  return _s9IMAP2MIME11DisplayPartO21__derived_enum_equalsySbAC_ACtFZ_0(v4, v5) & 1;
}

uint64_t DisplayPart.Attachment.part.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t DisplayPart.Attachment.part.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

double (*DisplayPart.Attachment.part.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.contentType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 40);
  sub_1A57D6980(v3, v4, v5, v6, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

__n128 DisplayPart.Attachment.contentType.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __n128 result;

  sub_1A57D6A40(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  swift_bridgeObjectRelease();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 40) = result;
  return result;
}

double (*DisplayPart.Attachment.contentType.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.contentDisposition.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1A57D3ABC(v1, *(_QWORD *)(v0 + 64));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t DisplayPart.Attachment.contentDisposition.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  sub_1A57D3B04(v3[7], v3[8]);
  result = swift_bridgeObjectRelease();
  v3[7] = a1;
  v3[8] = a2;
  v3[9] = a3;
  return result;
}

double (*DisplayPart.Attachment.contentDisposition.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.contentID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t DisplayPart.Attachment.contentID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

double (*DisplayPart.Attachment.contentID.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.contentTransferEncoding.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t DisplayPart.Attachment.contentTransferEncoding.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

double (*DisplayPart.Attachment.contentTransferEncoding.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.estimatedDecodedSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t DisplayPart.Attachment.estimatedDecodedSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

double (*DisplayPart.Attachment.estimatedDecodedSize.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DisplayPart.Attachment.encodedBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t DisplayPart.Attachment.encodedBytes.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = result;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

double (*DisplayPart.Attachment.encodedBytes.modify())(_QWORD)
{
  return nullsub_1;
}

__n128 DisplayPart.Attachment.init(part:contentDisposition:contentType:contentTransferEncoding:estimatedDecodedSize:encodedBytes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  __n128 result;
  __int128 v11;
  char v12;
  uint64_t v13;

  result = *(__n128 *)a5;
  v11 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a5;
  v12 = *(_BYTE *)(a5 + 32);
  v13 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)a9 = a1;
  *(_OWORD *)(a9 + 24) = v11;
  *(_BYTE *)(a9 + 40) = v12;
  *(_QWORD *)(a9 + 48) = v13;
  *(_QWORD *)(a9 + 56) = a2;
  *(_QWORD *)(a9 + 64) = a3;
  *(_QWORD *)(a9 + 72) = a4;
  *(_QWORD *)(a9 + 80) = 0;
  *(_QWORD *)(a9 + 88) = 0;
  *(_BYTE *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = a7;
  *(_QWORD *)(a9 + 112) = a8;
  *(_QWORD *)(a9 + 120) = a10;
  return result;
}

BOOL sub_1A57DDCB8(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  _OWORD v14[8];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v14);
}

uint64_t DisplayPart.AlternativePartStrategy.hash(into:)()
{
  return sub_1A594CE88();
}

BOOL static DisplayPart.AlternativePartStrategy.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t DisplayPart.AlternativePartStrategy.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t Message.enumeratePartsForDisplay(strategy:maximumByteCountPerPart:cache:closure:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[16] = a1 & 1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  return sub_1A57F5864(v5, sub_1A57DED7C, (uint64_t)v7, a1 & 1);
}

uint64_t sub_1A57DDDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v15;
  uint64_t v16;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v15 = sub_1A57FBC00(a5 & 1, a1, a2, a3, a4);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a9;
  sub_1A57DC054(3, (uint64_t (*)(_QWORD *))sub_1A57E00A0, v16, (uint64_t (*)(_OWORD *))sub_1A57E00A8, (uint64_t)v19, (uint64_t)nullsub_1, 0, a1, a2, a3, a4);
  return swift_release();
}

uint64_t Message.decodedAttachmentByteCountUpperBound(attachment:)(uint64_t a1)
{
  uint64_t result;
  double v3;
  __int128 v4;
  _BYTE v5[8];
  uint64_t v6;

  v4 = *(_OWORD *)(a1 + 112);
  sub_1A55032A0((uint64_t)&v4, (uint64_t)v5, &qword_1EE7AA618);
  sub_1A55032A0((uint64_t)v5, (uint64_t)&v6, &qword_1EE7AA618);
  if (v6)
    result = *((_QWORD *)&v4 + 1) - v6;
  else
    result = 0;
  if (*(unsigned __int8 *)(a1 + 96) >= 4u)
  {
    v3 = ceil((double)result * 3.0 * 0.25);
    if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          result = (uint64_t)v3 + 10;
          if (!__OFADD__((uint64_t)v3, 10))
            return result;
LABEL_13:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

_QWORD *Message.decode(attachment:into:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  char v5;

  result = sub_1A57D8478((_QWORD *)*(unsigned __int8 *)(a1 + 96), a2, a3, *(_QWORD **)(a1 + 112), *(_QWORD *)(a1 + 120));
  if (!v3 && (v5 & 1) != 0)
  {
    sub_1A57DEDA8();
    swift_allocError();
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

unint64_t sub_1A57DE00C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v4 = sub_1A5802E10(v3);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v4);
    sub_1A54E7028(v6);
  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1A57DE06C(uint64_t *a1, uint64_t a2, uint64_t *a3, void (*a4)(_OWORD *))
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21[8];
  _BYTE v22[128];
  _BYTE v23[128];
  _BYTE v24[128];
  _BYTE v25[40];
  _OWORD v26[2];
  unsigned __int8 v27;
  _BYTE v28[48];
  _BYTE v29[24];
  _OWORD v30[8];
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE v35[40];
  uint64_t v36;

  sub_1A55032A0((uint64_t)(a1 + 21), (uint64_t)v29, &qword_1EE798FB8);
  sub_1A55032A0((uint64_t)v29, (uint64_t)v34, &qword_1EE798FB8);
  if (v34[16] != 2)
    return 2;
  sub_1A55032A0((uint64_t)(a1 + 12), (uint64_t)v28, &qword_1EE799008);
  sub_1A55032A0((uint64_t)v28, (uint64_t)v35, &qword_1EE799008);
  if (v36)
  {
    sub_1A57DCED4((uint64_t)a1);
    swift_retain();
    sub_1A57DE330((uint64_t)v28, (uint64_t)a1, a2, a3, (uint64_t)v24);
  }
  else
  {
    v8 = *a1;
    sub_1A57DCED4((uint64_t)a1);
    swift_retain();
    sub_1A57DCED4((uint64_t)a1);
    swift_retain();
    v9 = MEMORY[0x1E0DEE9D8];
    if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v8, MEMORY[0x1E0DEE9D8]) & 1) == 0)
    {
      swift_release();
      sub_1A57DFE24((uint64_t)a1);
      sub_1A57DFE24((uint64_t)a1);
      swift_release();
      sub_1A57DF890((uint64_t)v30);
      sub_1A55032A0((uint64_t)v30, (uint64_t)v24, &qword_1EE798FB0);
      goto LABEL_13;
    }
    v10 = (_BYTE *)sub_1A5801228((unint64_t)"text/plain", (uint64_t)"", 0);
    v13 = 0uLL;
    if (v12)
    {
      v14 = v12;
      sub_1A57F3664(v10, v11, (uint64_t)v25);
      sub_1A55032A0((uint64_t)v25, (uint64_t)v26, &qword_1EE799000);
      v15 = v27;
      if (v27 <= 0xFDuLL)
      {
        v19 = v26[1];
        v20 = v26[0];
        *(_QWORD *)&v30[0] = v9;
        sub_1A57FDF58(v14, (char **)v30);
        swift_bridgeObjectRelease();
        v17 = v19;
        v13 = v20;
        v16 = *(_QWORD *)&v30[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        v15 = 0;
        v16 = 0;
        v17 = 0uLL;
        v13 = 0uLL;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0uLL;
    }
    v31[0] = v13;
    v31[1] = v17;
    v32 = v15;
    v33 = v16;
    sub_1A57DE330((uint64_t)v31, (uint64_t)a1, a2, a3, (uint64_t)v24);
    swift_bridgeObjectRelease();
    sub_1A57DFE24((uint64_t)a1);
    swift_release();
  }
  sub_1A57DFE24((uint64_t)a1);
  swift_release();
LABEL_13:
  sub_1A55032A0((uint64_t)v24, (uint64_t)v22, &qword_1EE798FB0);
  sub_1A55032A0((uint64_t)v22, (uint64_t)v23, &qword_1EE798FB0);
  if (sub_1A57E00C4((uint64_t)v23) != 1)
  {
    sub_1A55032A0((uint64_t)v22, (uint64_t)v21, &qword_1EE798FB0);
    sub_1A57DF868(v21, v30);
    a4(v30);
    sub_1A57E00DC((uint64_t)v22);
  }
  return 2;
}

uint64_t sub_1A57DE330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26[8];
  __int128 v27[2];
  _BYTE v28[9];
  _OWORD v29[8];
  _OWORD v30[8];
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD v34[2];
  __int128 v35;
  _OWORD v36[3];
  _BYTE v37[40];
  _BYTE v38[24];
  uint64_t v39[2];
  char v40;

  sub_1A55032A0(a1, (uint64_t)v34, &qword_1EE799008);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_1A57DF890((uint64_t)v30);
    goto LABEL_12;
  }
  v36[0] = v34[0];
  v36[1] = v34[1];
  v36[2] = v35;
  sub_1A55032A0(a2 + 72, (uint64_t)v38, &qword_1EE798FB8);
  sub_1A55032A0((uint64_t)v38, (uint64_t)v39, &qword_1EE798FB8);
  if (v40 == 2 || (v10 = sub_1A580AA5C(v39[0], v39[1]), sub_1A57D8910(v10, v11), v13 = v12, v12 == 5))
    v13 = 0;
  sub_1A57CACB8((uint64_t)v36, (uint64_t)v37);
  sub_1A57F47DC((uint64_t)v37);
  sub_1A57D6944((uint64_t)v28, (uint64_t)&v31);
  if (v33 != 5)
    goto LABEL_24;
  v14 = v32;
  if (!v32)
    goto LABEL_24;
  v15 = v31;
  if (v31 == 0x6E69616C70 && v32 == 0xE500000000000000 || (sub_1A594CD38() & 1) != 0)
  {
    sub_1A57DE6F8(0, a2, (uint64_t)v36, v13, a3, a4, (uint64_t)v30);
    sub_1A57D6A08((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
LABEL_12:
    v16 = v30;
    return sub_1A55032A0((uint64_t)v16, a5, &qword_1EE798FB0);
  }
  if ((v15 != 1819112552 || v14 != 0xE400000000000000) && (sub_1A594CD38() & 1) == 0)
  {
LABEL_24:
    sub_1A57D6A08((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    swift_retain();
    sub_1A57DCED4(a2);
    sub_1A57DF8B0(a2, v13, a4, (uint64_t)v29);
    sub_1A55032A0((uint64_t)v29, (uint64_t)v30, &qword_1EE798FA8);
    if (sub_1A5522E34((uint64_t *)v30) == 1)
    {
      sub_1A57DF890((uint64_t)v27);
    }
    else
    {
      v26[4] = v30[4];
      v26[5] = v30[5];
      v26[6] = v30[6];
      v26[7] = v30[7];
      v26[0] = v30[0];
      v26[1] = v30[1];
      v26[2] = v30[2];
      v26[3] = v30[3];
      sub_1A57DFDE4((uint64_t)v26);
      sub_1A57DF868(v26, v27);
      nullsub_1(v27);
    }
    v16 = v27;
    return sub_1A55032A0((uint64_t)v16, a5, &qword_1EE798FB0);
  }
  if (a3 < 1)
  {
    v23 = 0;
    v25 = 0xE000000000000000;
    goto LABEL_31;
  }
  result = sub_1A57F88A8(*(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  v19 = v18 - result;
  if (!result)
    v19 = 0;
  if (v19 + 0x4000000000000000 >= 0)
  {
    v20 = (_QWORD *)result;
    v21 = v18;
    v22 = 2 * v19;
    if (v22 < a3)
      a3 = v22;
    sub_1A57D8E30(a1);
    swift_retain();
    v23 = sub_1A57D8AD4(v13, a3, v20, v21, (uint64_t)v36, a4);
    v25 = v24;
    swift_release();
    if (!v25)
    {
      sub_1A57D6A08((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
      sub_1A57DF890((uint64_t)v29);
LABEL_32:
      sub_1A55032A0((uint64_t)v29, (uint64_t)v30, &qword_1EE798FB0);
      goto LABEL_12;
    }
LABEL_31:
    sub_1A57D6A08((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    *(_QWORD *)&v27[0] = v23;
    *((_QWORD *)&v27[0] + 1) = v25;
    sub_1A57DFE04((uint64_t)v27);
    sub_1A57DF868(v27, v29);
    nullsub_1(v29);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57DE6F8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  _OWORD v48[8];
  _BYTE v49[136];

  if (a5 < 1)
  {
    v20 = 0;
    v22 = 0xE000000000000000;
    goto LABEL_11;
  }
  v11 = a5;
  result = sub_1A57F88A8(*(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  v16 = v15 - result;
  if (!result)
    v16 = 0;
  if (v16 + 0x4000000000000000 >= 0)
  {
    v17 = (_QWORD *)result;
    v18 = v15;
    v19 = 2 * v16;
    if (v19 < v11)
      v11 = v19;
    sub_1A57D8E30(a3);
    swift_retain();
    v20 = sub_1A57D8AD4(a4, v11, v17, v18, a3, a6);
    v22 = v21;
    swift_release();
    if (!v22)
    {
      sub_1A57DF890((uint64_t)v48);
LABEL_27:
      sub_1A55032A0((uint64_t)v48, (uint64_t)v49, &qword_1EE798FB0);
      return sub_1A55032A0((uint64_t)v49, a7, &qword_1EE798FB0);
    }
LABEL_11:
    if ((a1 & 1) != 0)
    {
      *(_QWORD *)&v46 = v20;
      *((_QWORD *)&v46 + 1) = v22;
      sub_1A57DFE04((uint64_t)&v46);
    }
    else
    {
      v23 = *(_QWORD *)(a2 + 136);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 16);
        if (v24)
        {
          v39 = a7;
          v44 = 0;
          v45 = 0;
          v42 = 0;
          v43 = 0;
          v25 = 0;
          v40 = 0;
          v41 = 0;
          v26 = 0;
          v27 = (uint64_t *)(_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0() + 80);
          do
          {
            if ((*(_BYTE *)(v27 - 4) & 1) == 0)
            {
              v28 = *(v27 - 3);
              v29 = *(v27 - 2);
              v30 = *((unsigned __int8 *)v27 - 8);
              v31 = *v27;
              v32 = *((unsigned __int8 *)v27 - 48);
              if (v32 == 4)
              {
                _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
                swift_bridgeObjectRelease();
                v44 = v29;
                v45 = v28;
                v43 = v30;
                v25 = v31;
              }
              else if (v32 == 12)
              {
                _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
                swift_bridgeObjectRelease();
                v41 = v29;
                v42 = v28;
                v40 = v30;
                v26 = v31;
              }
            }
            v27 += 7;
            --v24;
          }
          while (v24);
          swift_bridgeObjectRelease();
          a7 = v39;
          v33 = v40;
          v35 = v44;
          v34 = v45;
          v36 = v42;
          v37 = v43;
          v38 = v41;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v37 = 0;
          v25 = 0;
          v36 = 0;
          v38 = 0;
          v33 = 0;
          v26 = 0;
        }
        LOBYTE(v23) = sub_1A57FC7A8(v36, v38, v33, v26, v34, v35, v37, v25);
      }
      *(_QWORD *)&v46 = v20;
      *((_QWORD *)&v46 + 1) = v22;
      v47 = v23;
      sub_1A57E0060((uint64_t)&v46);
    }
    sub_1A57DF868(&v46, v48);
    nullsub_1(v48);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

BOOL _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  _OWORD v24[2];
  __int128 v25;
  _BYTE v26[40];
  _OWORD v27[2];
  __int128 v28;
  _BYTE v29[40];
  __n128 v30;
  __n128 v31;

  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(_QWORD *)a1) & 1) == 0)
    return 0;
  v4 = *(_OWORD *)(a1 + 24);
  v27[0] = *(_OWORD *)(a1 + 8);
  v27[1] = v4;
  v28 = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a2 + 24);
  v24[0] = *(_OWORD *)(a2 + 8);
  v24[1] = v5;
  v25 = *(_OWORD *)(a2 + 40);
  sub_1A57D6944((uint64_t)v27, (uint64_t)v29);
  sub_1A57D6944((uint64_t)v24, (uint64_t)v26);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v29, (uint64_t)v26);
  if ((v6 & 1) == 0 || (sub_1A57D41A8(*((uint64_t *)&v28 + 1), *((uint64_t *)&v25 + 1)) & 1) == 0)
    return 0;
  v21 = *(__n128 *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 72);
  v18 = *(__n128 *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  sub_1A57E0170(&v21, &v23);
  sub_1A57E0170(&v18, &v20);
  sub_1A57E0170(&v23, &v30);
  v7 = v30.n128_u64[1];
  if (v30.n128_u64[1] == 2)
  {
    sub_1A57E0170(&v20, &v31);
    if (v31.n128_u64[1] != 2)
      return 0;
  }
  else if (v30.n128_u64[1] == 1)
  {
    sub_1A57E0170(&v20, &v31);
    if (v31.n128_u64[1] != 1)
      return 0;
  }
  else if (v30.n128_u64[1])
  {
    v8 = v30.n128_u64[0];
    sub_1A57E0170(&v20, &v31);
    if (v31.n128_u64[1] < 3)
      return 0;
    if (__PAIR128__(v7, v8) != *(_OWORD *)&v31)
    {
      v9 = sub_1A594CD38();
      result = 0;
      if ((v9 & 1) == 0)
        return result;
    }
  }
  else
  {
    sub_1A57E0170(&v20, &v31);
    if (v31.n128_u64[1])
      return 0;
  }
  if ((sub_1A57D4070(v22, v19) & 1) == 0)
    return 0;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a2 + 88);
  if (!v11)
  {
    if (!v12)
      goto LABEL_24;
    return 0;
  }
  if (!v12)
    return 0;
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80) || v11 != v12)
  {
    v13 = sub_1A594CD38();
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
LABEL_24:
  if ((sub_1A57E5C60(*(unsigned __int8 *)(a1 + 96), *(unsigned __int8 *)(a2 + 96)) & 1) == 0
    || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 112);
  if (v14)
    v15 = *(_QWORD *)(a1 + 120) - v14;
  else
    v15 = 0;
  v16 = *(_QWORD *)(a2 + 112);
  if (!v16)
    return (v15 | v14) == 0;
  result = 0;
  if (v14 && v15 == *(_QWORD *)(a2 + 120) - v16)
    return v14 == v16;
  return result;
}

uint64_t _s9IMAP2MIME11DisplayPartO21__derived_enum_equalsySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[8];
  _OWORD v25[8];
  _OWORD v26[8];
  _OWORD v27[8];

  sub_1A57DF868(a1, v26);
  v3 = sub_1A57DF390((uint64_t)v26);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = (uint64_t *)sub_1A57DF39C((uint64_t)v26);
      v5 = *v4;
      v6 = v4[1];
      sub_1A57DF868(a2, v27);
      if (sub_1A57DF390((uint64_t)v27) == 1)
      {
        v7 = (_QWORD *)sub_1A57DF39C((uint64_t)v27);
        if (v5 == *v7 && v6 == v7[1])
          v8 = 1;
        else
          v8 = sub_1A594CD38();
        return v8 & 1;
      }
    }
    else
    {
      v17 = (_OWORD *)sub_1A57DF39C((uint64_t)v26);
      v27[4] = v17[4];
      v27[5] = v17[5];
      v27[6] = v17[6];
      v27[7] = v17[7];
      v27[0] = *v17;
      v27[1] = v17[1];
      v27[2] = v17[2];
      v27[3] = v17[3];
      sub_1A57DF868(a2, v24);
      if (sub_1A57DF390((uint64_t)v24) == 2)
      {
        v18 = (_OWORD *)sub_1A57DF39C((uint64_t)v24);
        v19 = v18[5];
        v25[4] = v18[4];
        v25[5] = v19;
        v20 = v18[7];
        v25[6] = v18[6];
        v25[7] = v20;
        v21 = v18[1];
        v25[0] = *v18;
        v25[1] = v21;
        v22 = v18[3];
        v25[2] = v18[2];
        v25[3] = v22;
        v8 = _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0((uint64_t)v27, (uint64_t)v25);
        return v8 & 1;
      }
    }
LABEL_16:
    v8 = 0;
    return v8 & 1;
  }
  v9 = sub_1A57DF39C((uint64_t)v26);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(unsigned __int8 *)(v9 + 16);
  sub_1A57DF868(a2, v27);
  if (sub_1A57DF390((uint64_t)v27))
    goto LABEL_16;
  v13 = sub_1A57DF39C((uint64_t)v27);
  v14 = *(unsigned __int8 *)(v13 + 16);
  v15 = v10 == *(_QWORD *)v13 && v11 == *(_QWORD *)(v13 + 8);
  if (v15 || (v16 = sub_1A594CD38(), v8 = 0, (v16 & 1) != 0))
    v8 = v12 == v14;
  return v8 & 1;
}

uint64_t sub_1A57DED7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A57DDDE8(a1, a2, a3, a4, *(_BYTE *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
}

unint64_t sub_1A57DEDA8()
{
  unint64_t result;

  result = qword_1EE7AA620;
  if (!qword_1EE7AA620)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7B88, &_s20OutputBufferTooSmallVN);
    atomic_store(result, (unint64_t *)&qword_1EE7AA620);
  }
  return result;
}

unint64_t sub_1A57DEDF0()
{
  unint64_t result;

  result = qword_1EE7AA628;
  if (!qword_1EE7AA628)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for DisplayPart.AlternativePartStrategy, &type metadata for DisplayPart.AlternativePartStrategy);
    atomic_store(result, (unint64_t *)&qword_1EE7AA628);
  }
  return result;
}

uint64_t sub_1A57DEE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t result;

  if ((a13 >> 62) >= 2)
  {
    if (a13 >> 62 != 2)
      return result;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57D6980(a2, a3, a4, a5, a6);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57D3ABC(a8, a9);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t destroy for DisplayPart(uint64_t *a1)
{
  return sub_1A57DEF48(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
}

uint64_t sub_1A57DEF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t result;

  if ((a13 >> 62) >= 2)
  {
    if (a13 >> 62 != 2)
      return result;
    swift_bridgeObjectRelease();
    sub_1A57D6A40(a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    sub_1A57D3B04(a8, a9);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for DisplayPart(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  sub_1A57DEE34(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for DisplayPart(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v24 = a2[9];
  v25 = a2[10];
  v26 = a2[11];
  v27 = a2[12];
  v28 = a2[13];
  v29 = a2[14];
  v30 = a2[15];
  sub_1A57DEE34(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v29;
  *(_QWORD *)(a1 + 120) = v30;
  sub_1A57DEF48(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return a1;
}

__n128 __swift_memcpy128_8_1(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for DisplayPart(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  sub_1A57DEF48(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayPart(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40) >> 4;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for DisplayPart(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 16 * -a2;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A57DF390(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) >> 62;
}

uint64_t sub_1A57DF39C(uint64_t result)
{
  *(_QWORD *)(result + 96) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1A57DF3AC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 96) & 7 | (a2 << 62);
  *(_QWORD *)(result + 40) &= 0xFuLL;
  *(_QWORD *)(result + 96) = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart()
{
  return &type metadata for DisplayPart;
}

uint64_t destroy for DisplayPart.Attachment(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A57D6A40(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D6980(v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = (_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v10 >= 3)
  {
    *(_QWORD *)(a1 + 56) = *v9;
    *(_QWORD *)(a1 + 64) = v10;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v9;
  }
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1A57D6980(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v13 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_1A57D6A40(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
  {
    if (v14 >= 3)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1A57D63D8(a1 + 56);
    goto LABEL_6;
  }
  if (v14 < 3)
  {
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_8:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_1A57D6A40(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
  {
    v11 = *(_QWORD *)(a2 + 64);
    if (v11 >= 3)
    {
      *(_QWORD *)(a1 + 56) = *v10;
      *(_QWORD *)(a1 + 64) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1A57D63D8(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
LABEL_6:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayPart.Attachment()
{
  return &type metadata for DisplayPart.Attachment;
}

uint64_t storeEnumTagSinglePayload for DisplayPart.AlternativePartStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A57DF7D8 + 4 * byte_1A59D7A6B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A57DF80C + 4 * asc_1A59D7A66[v4]))();
}

uint64_t sub_1A57DF80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DF814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57DF81CLL);
  return result;
}

uint64_t sub_1A57DF828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57DF830);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A57DF834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57DF83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart.AlternativePartStrategy()
{
  return &type metadata for DisplayPart.AlternativePartStrategy;
}

ValueMetadata *_s20OutputBufferTooSmallVMa()
{
  return &_s20OutputBufferTooSmallVN;
}

_OWORD *sub_1A57DF868(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  return a2;
}

double sub_1A57DF890(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFF0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t sub_1A57DF8B0@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[9];
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[4];
  char v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[32];
  _OWORD v84[2];
  char v85;
  __n128 v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  __n128 v90;
  __n128 v91;
  char v92;
  _QWORD v93[17];

  v7 = *(_QWORD *)(a1 + 136);
  if (!v7)
  {
    swift_release();
    sub_1A57DFE24(a1);
LABEL_7:
    sub_1A57DFE6C(&v63);
    sub_1A55032A0((uint64_t)&v63, (uint64_t)v93, &qword_1EE798FA8);
    return sub_1A55032A0((uint64_t)v93, a4, &qword_1EE798FA8);
  }
  v50 = *(_OWORD *)(a1 + 112);
  v52 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 128);
  sub_1A55032A0(a1 + 40, (uint64_t)v83, &qword_1EE799048);
  sub_1A55032A0((uint64_t)v83, (uint64_t)&v86, &qword_1EE799048);
  if (!*((_QWORD *)&v87 + 1))
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_release();
    sub_1A57DFE24(a1);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v88 = v86;
  v89 = v87;
  v84[0] = v52;
  v84[1] = v50;
  v85 = v9;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_retain();
  sub_1A57DFE84((uint64_t)v83);
  sub_1A57F47DC((uint64_t)v84);
  v53 = v78[0];
  v49 = v78[2];
  v51 = v78[1];
  v48 = v78[3];
  v47 = v79;
  swift_retain();
  v10 = sub_1A57E4668(v7, a3);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_1A57DFEAC(&v88, &v90);
  sub_1A57DFEAC(&v90, &v91);
  if ((v92 & 1) != 0)
  {
    v11 = v10;
    v13 = v91.n128_u64[1];
    v12 = (unsigned __int8 *)v91.n128_u64[0];
    swift_retain();
    v14 = (unsigned __int8 *)v13;
    v10 = v11;
    v16 = sub_1A57E2C20(v12, v14);
  }
  else if (v91.n128_u8[0])
  {
    if (v91.n128_u8[0] == 1)
    {
      swift_retain();
      v16 = 0;
      v15 = 1;
    }
    else
    {
      swift_retain();
      v16 = 0;
      v15 = 2;
    }
  }
  else
  {
    swift_retain();
    v16 = 0;
    v15 = 0;
  }
  v46 = v15;
  v17 = *((_QWORD *)&v89 + 1);
  swift_retain();
  v18 = sub_1A57E41A8(v17, a3);
  swift_release();
  sub_1A57DFEE8((uint64_t)v83);
  result = swift_release();
  v20 = *(_OWORD *)(a1 + 16);
  v80 = *(_OWORD *)a1;
  v81 = v20;
  v82 = *(_QWORD *)(a1 + 32);
  v21 = v80;
  v43 = a4;
  v44 = v18;
  v42 = a2;
  v41 = v10;
  if (*(_BYTE *)(a1 + 160) == 2)
  {
    v22 = v80;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A54FCA28((uint64_t)&v80);
    sub_1A57D6A08((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57D3ABC(v16, v46);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v45 = 0;
    v23 = 0;
    v24 = v16;
LABEL_20:
    v40 = v23;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    v34 = sub_1A57F88A8(BYTE8(v80), v81, *((uint64_t *)&v81 + 1), v82);
    v36 = v34;
    v37 = v35;
    if (v34)
      v38 = v35 - v34;
    else
      v38 = 0;
    v39 = sub_1A57D838C(v38, v42);
    swift_release();
    sub_1A57DFE24(a1);
    *(_QWORD *)&v54 = v22;
    *((_QWORD *)&v54 + 1) = v53;
    *(_QWORD *)&v55 = v51;
    *((_QWORD *)&v55 + 1) = v49;
    *(_QWORD *)&v56 = v48;
    BYTE8(v56) = v47;
    *(_QWORD *)&v57 = v41;
    *((_QWORD *)&v57 + 1) = v24;
    *(_QWORD *)&v58 = v46;
    *((_QWORD *)&v58 + 1) = v44;
    *(_QWORD *)&v59 = v45;
    *((_QWORD *)&v59 + 1) = v40;
    LOBYTE(v60) = v42;
    *((_QWORD *)&v60 + 1) = v39;
    *(_QWORD *)&v61 = v36;
    *((_QWORD *)&v61 + 1) = v37;
    sub_1A57DFF10((uint64_t)&v54);
    swift_bridgeObjectRelease();
    sub_1A57D3B04(v24, v46);
    swift_bridgeObjectRelease();
    sub_1A57D6A08((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    swift_bridgeObjectRelease();
    sub_1A54F81BC((uint64_t)&v80);
    v62[4] = v58;
    v62[5] = v59;
    v62[6] = v60;
    v62[7] = v61;
    v62[0] = v54;
    v62[1] = v55;
    v62[2] = v56;
    v62[3] = v57;
    nullsub_1(v62);
    *(_QWORD *)&v63 = v22;
    *((_QWORD *)&v63 + 1) = v53;
    v64 = v51;
    v65 = v49;
    v66 = v48;
    v67 = v47;
    v68 = v41;
    v69 = v24;
    v70 = v46;
    v71 = v44;
    v72 = v45;
    v73 = v40;
    v74 = v42;
    v75 = v39;
    v76 = v36;
    v77 = v37;
    sub_1A57DFFB8((uint64_t)&v63);
    sub_1A55032A0((uint64_t)v62, (uint64_t)v93, &qword_1EE798FA8);
    a4 = v43;
    return sub_1A55032A0((uint64_t)v93, a4, &qword_1EE798FA8);
  }
  v25 = *(_QWORD *)(a1 + 144);
  v26 = *(_QWORD *)(a1 + 152);
  if (v25)
    v27 = v26 - v25;
  else
    v27 = 0;
  if ((v27 & 0x8000000000000000) == 0)
  {
    v28 = sub_1A580AA68(0, v27, v25, v26);
    v30 = v29;
    v32 = v31;
    v93[0] = v28;
    v93[1] = v33;
    v93[2] = v29;
    v93[3] = v31;
    MEMORY[0x1E0C80A78](v28);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A54FCA28((uint64_t)&v80);
    sub_1A57D6A08((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v24 = v16;
    sub_1A57D3ABC(v16, v46);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v22 = v21;
    v45 = sub_1A580A084(v30, v32, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A57DCF58);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57DFDE4(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 96) & 7 | 0x8000000000000000;
  *(_QWORD *)(result + 40) &= 0xFuLL;
  *(_QWORD *)(result + 96) = v1;
  return result;
}

uint64_t sub_1A57DFE04(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 96) & 7 | 0x4000000000000000;
  *(_QWORD *)(result + 40) &= 0xFuLL;
  *(_QWORD *)(result + 96) = v1;
  return result;
}

uint64_t sub_1A57DFE24(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

double sub_1A57DFE6C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1A57DFE84(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

__n128 *sub_1A57DFEAC(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8_3(a2, a1);
  return a2;
}

uint64_t sub_1A57DFEE8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57DFF10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D6980(v2, v3, v4, v5, v8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D3ABC(v6, v7);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t sub_1A57DFFB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1A57D6A40(v2, v3, v4, v5, v8);
  swift_bridgeObjectRelease();
  sub_1A57D3B04(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57E0060(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 96) & 7;
  *(_QWORD *)(result + 40) &= 0xFuLL;
  *(_QWORD *)(result + 96) = v1;
  return result;
}

uint64_t sub_1A57E007C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A57E00A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57DE00C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A57E00A8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A57DE06C(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void (**)(_OWORD *))(v1 + 32));
}

uint64_t sub_1A57E00C4(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 40) >> 4) > 0x80000000)
    return -(*(_QWORD *)(a1 + 40) >> 4);
  else
    return 0;
}

uint64_t sub_1A57E00DC(uint64_t a1)
{
  sub_1A57E0134(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  return a1;
}

uint64_t sub_1A57E0134(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a6 >> 4 != 0xFFFFFFFF || a13 >= 8)
    return sub_1A57DEF48(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

__n128 *sub_1A57E0170(__n128 *a1, __n128 *a2)
{
  __swift_memcpy16_8_4(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for MIMEError()
{
  return &type metadata for MIMEError;
}

uint64_t Message.extractAttachments(lineEnding:writeAttachment:writeWithoutAttachments:cache:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9[16] = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  return sub_1A57F5864(v7, sub_1A57E01F8, (uint64_t)v9, a7);
}

uint64_t sub_1A57E01F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A57E0240(3u, *(unsigned __int8 *)(v4 + 16), *(void (**)(_QWORD *))(v4 + 24), *(_QWORD *)(v4 + 32), *(uint64_t (**)(char *, char *))(v4 + 40), *(_QWORD *)(v4 + 48), *(uint64_t **)(v4 + 56), a1, a2, a3, a4);
}

uint64_t sub_1A57E0240(unsigned int a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  void (*v30)(_QWORD *);
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;

  result = sub_1A57E1950(a1, a8, a9, a10, a11, a7, (uint64_t)&v31);
  if (!v11)
  {
    v18 = v38;
    *(_QWORD *)&v39 = v31;
    BYTE8(v39) = v32;
    v40 = v33;
    v41 = v34;
    *(_QWORD *)&v42 = v35;
    WORD4(v42) = v36;
    v43 = v37;
    sub_1A57E08DC();
    v52[2] = v41;
    v52[3] = v42;
    v53 = v43;
    v52[0] = v39;
    v52[1] = v40;
    sub_1A57E05BC(a1, a2, a5, a6);
    sub_1A57E1C6C((uint64_t)v52);
    v30 = a3;
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v20 = (_OWORD *)(v18 + 104);
      do
      {
        v21 = *((_QWORD *)v20 - 8);
        v22 = *((_QWORD *)v20 - 7);
        v23 = *((_BYTE *)v20 - 48);
        v24 = *((_QWORD *)v20 - 5);
        v25 = *((_QWORD *)v20 - 4);
        v27 = *((_QWORD *)v20 - 3);
        v26 = *((_QWORD *)v20 - 2);
        v44[0] = *((_QWORD *)v20 - 9);
        v44[1] = v21;
        v44[2] = v22;
        v45 = v23;
        v46 = v24;
        v47 = v25;
        v48 = v27;
        v49 = v26;
        v54 = v26;
        v50 = *((_BYTE *)v20 - 8);
        v28 = v50;
        v29 = *v20;
        v20 = (_OWORD *)((char *)v20 + 88);
        v51 = v29;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57E1CA0(v24, v25, v27, v26, v28);
        v30(v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A57E1CB4(v24, v25, v27, v54, v28);
        --v19;
      }
      while (v19);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UnsafeExtractedAttachment.part.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t UnsafeExtractedAttachment.part.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

double (*UnsafeExtractedAttachment.part.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t UnsafeExtractedAttachment.filename.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t UnsafeExtractedAttachment.filename.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

double (*UnsafeExtractedAttachment.filename.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t UnsafeExtractedAttachment.encoding.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t UnsafeExtractedAttachment.encoding.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

double (*UnsafeExtractedAttachment.encoding.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t UnsafeExtractedAttachment.mediaType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A57E12C0(v1 + 32, a1);
}

uint64_t UnsafeExtractedAttachment.mediaType.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57E1308(a1, v1 + 32);
}

double (*UnsafeExtractedAttachment.mediaType.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t UnsafeExtractedAttachment.unsafeBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t UnsafeExtractedAttachment.unsafeBytes.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

double (*UnsafeExtractedAttachment.unsafeBytes.modify())(_QWORD)
{
  return nullsub_1;
}

__n128 UnsafeExtractedAttachment.init(part:filename:encoding:mediaType:unsafeBytes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v15;
  __n128 result;
  __int128 v17;
  _OWORD v18[2];
  char v19;

  sub_1A55032A0(a5, (uint64_t)v18, &qword_1EE799088);
  v15 = v19;
  result = (__n128)v18[0];
  v17 = v18[1];
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4;
  *(__n128 *)(a8 + 32) = result;
  *(_OWORD *)(a8 + 48) = v17;
  *(_BYTE *)(a8 + 64) = v15;
  *(_QWORD *)(a8 + 72) = a6;
  *(_QWORD *)(a8 + 80) = a7;
  return result;
}

uint64_t sub_1A57E05BC(unsigned int a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  _BYTE v42[24];
  _OWORD v43[4];
  uint64_t v44;
  _QWORD v45[2];
  unsigned __int8 v46;
  uint64_t v47;

  v41 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v4[8];
  v47 = v12;
  v40 = *(_QWORD *)(v12 + 16);
  if (v40)
  {
    sub_1A55032A0((uint64_t)(v4 + 5), (uint64_t)v42, &qword_1EE798FC0);
    sub_1A55032A0((uint64_t)v42, (uint64_t)v45, &qword_1EE798FC0);
    v39 = v46;
    if (v46 == 2)
    {
      v13 = *v4;
      sub_1A57E1CC8();
      swift_allocError();
      *v14 = v13;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return swift_willThrow();
    }
    else
    {
      v37 = v45[1];
      v38 = v45[0];
      v24 = *((unsigned __int8 *)v4 + 57);
      if (v24 == 1)
      {
        v25 = sub_1A57F88A8(*((unsigned __int8 *)v4 + 8), v4[2], v4[3], v4[4]);
        if (v25)
          v27 = v26 - v25;
        else
          v27 = 0;
      }
      else
      {
        v27 = 1;
      }
      sub_1A580403C(a2, v27, v24 ^ 1, a3, a4, *((unsigned __int8 *)v4 + 8), v4[2], v4[3], v4[4]);
      v29 = v12 + 32;
      result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      for (i = 0; ; ++i)
      {
        v43[0] = *(_OWORD *)v29;
        v31 = *(_OWORD *)(v29 + 16);
        v32 = *(_OWORD *)(v29 + 32);
        v33 = *(_OWORD *)(v29 + 48);
        v44 = *(_QWORD *)(v29 + 64);
        v43[2] = v32;
        v43[3] = v33;
        v43[1] = v31;
        v34 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v35 = v39 & 1;
        sub_1A57E1D0C((uint64_t)v43);
        sub_1A580458C(i == 0, v38, v37, v35, a2, (void (*)(char *, uint64_t *, __n128))a3);
        sub_1A57E05BC(v41, a2, a3, a4);
        if (v5)
        {
          sub_1A54F81BC((uint64_t)&v47);
          return sub_1A57E1C6C((uint64_t)v43);
        }
        result = sub_1A57E1C6C((uint64_t)v43);
        v29 += 72;
        if (v34 == v40)
        {
          v36 = v39 & 1;
          sub_1A54F81BC((uint64_t)&v47);
          return sub_1A58048AC(v38, v37, v36, a2, (void (*)(char *, uint64_t *, __n128))a3);
        }
      }
      __break(1u);
    }
  }
  else
  {
    v16 = *((unsigned __int8 *)v4 + 57);
    v17 = *((unsigned __int8 *)v4 + 8);
    v19 = v4[2];
    v18 = v4[3];
    v20 = v4[4];
    if (v16 == 1)
    {
      v21 = sub_1A57F88A8(v17, v19, v18, v20);
      if (v21)
        v23 = v22 - v21;
      else
        v23 = 0;
      return sub_1A580403C(a2, v23, 0, a3, a4, v17, v19, v18, v20);
    }
    else
    {
      v28 = type metadata accessor for PartReplacement();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 1, 1, v28);
      sub_1A580438C(a2, (uint64_t)v11, a3, a4, v17, v19, v18, v20);
      return sub_1A57E1D40((uint64_t)v11);
    }
  }
  return result;
}

void sub_1A57E08DC()
{
  uint64_t v0;
  char *v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v1 = *(char **)(v0 + 64);
  v2 = *((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = 0;
    v4 = 1;
LABEL_3:
    if (v3 <= v2)
      v5 = v2;
    else
      v5 = v3;
    v6 = -(uint64_t)v5;
    v7 = 72 * v3++ + 89;
    do
    {
      if (v6 + v3 == 1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v1 = sub_1A57D3A68((uint64_t)v1);
      if (v3 - 1 >= *((_QWORD *)v1 + 2))
        goto LABEL_27;
      sub_1A57E08DC();
      if (v3 - 1 >= *((_QWORD *)v1 + 2))
        goto LABEL_28;
      if (v1[v7] == 1)
      {
        v4 = 0;
        if (v3 != v2)
          goto LABEL_3;
        goto LABEL_24;
      }
      ++v3;
      v7 += 72;
    }
    while (v3 - v2 != 1);
    *(_QWORD *)(v0 + 64) = v1;
    if ((v4 & 1) == 0)
      return;
  }
  if ((*(_BYTE *)(v0 + 57) & 1) == 0)
  {
    v8 = *((_QWORD *)v1 + 2);
    if (v8)
    {
      v9 = v1 + 96;
      while (!*(_QWORD *)(*(_QWORD *)v9 + 16))
      {
        v9 += 72;
        if (!--v8)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      swift_bridgeObjectRelease();
      v1 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_24:
      *(_QWORD *)(v0 + 64) = v1;
    }
  }
}

uint64_t sub_1A57E0A34(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  Swift::Bool v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[2];
  _OWORD v13[2];
  _BYTE v14[48];
  _OWORD v15[2];
  __int128 v16;
  _OWORD v17[3];
  _BYTE v18[40];
  __n128 v19[2];
  unsigned __int8 v20;
  __n128 v21;
  __n128 v22;
  char v23;
  _BYTE v24[24];

  v4 = (_QWORD *)(a2 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(a2 + 16)
    || (v5 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0(),
        v6 = SectionSpecifier.Part.isSubPart(of:)((NIOIMAPCore2::SectionSpecifier::Part)v5),
        swift_bridgeObjectRelease(),
        !v6))
  {
    v8 = *(_OWORD *)(a1 + 11);
    v9 = *(_OWORD *)(a1 + 15);
    v12[1] = *(_OWORD *)(a1 + 13);
    v13[0] = v9;
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)a1 + 129);
    *((_QWORD *)&v12[0] + 1) = *((_QWORD *)&v8 + 1);
    sub_1A55032A0((uint64_t)v12 + 8, (uint64_t)v14, &qword_1EE799008);
    sub_1A55032A0((uint64_t)v14, (uint64_t)v15, &qword_1EE799008);
    if (*((_QWORD *)&v16 + 1))
    {
      v17[0] = v15[0];
      v17[1] = v15[1];
      v17[2] = v16;
      sub_1A57CACB8((uint64_t)v17, (uint64_t)v18);
      sub_1A57CACB8((uint64_t)v18, (uint64_t)v19);
      if (v20 <= 0xFu)
      {
        sub_1A57E1F38(v19, &v21);
        sub_1A57E1F38(&v21, &v22);
        if (v23 < 0)
        {
          v23 &= ~0x80u;
          sub_1A55032A0((uint64_t)&v22, (uint64_t)v24, (uint64_t *)&unk_1EE799400);
        }
        else if (v22.n128_u8[0] == 10 || v22.n128_u8[0] == 4)
        {
          v10 = *a1;
          v7 = 1;
          swift_beginAccess();
          *v4 = v10;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_12:
          swift_bridgeObjectRelease();
          return v7;
        }
      }
    }
    swift_beginAccess();
    v7 = 0;
    *v4 = 0;
    goto LABEL_12;
  }
  return 1;
}

uint64_t sub_1A57E0BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44[20];

  v11 = *(_QWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = a2 + 16;
  sub_1A57E13D0(a2, a3, a8, a9, (uint64_t)a10);
  v31 = v11;
  v32 = v12;
  v33 = v14;
  v34 = v13;
  v35 = v15;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 2;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  nullsub_1(&v31);
  swift_beginAccess();
  sub_1A55032A0(v16, (uint64_t)v44, &qword_1EE799010);
  sub_1A55032A0((uint64_t)&v31, v16, &qword_1EE799010);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57E1ED8(v44);
  v22 = v11;
  v23 = v12;
  v24 = v14;
  v25 = v13;
  v27 = 0;
  v28 = 0;
  v26 = v15;
  v29 = 2;
  v17 = MEMORY[0x1E0DEE9D8];
  v30 = MEMORY[0x1E0DEE9D8];
  v18 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v18, v17) & 1) != 0)
  {
    swift_beginAccess();
    v19 = a10[2];
    a10[2] = v11;
    a10[3] = v12;
    a10[4] = v14;
    a10[5] = v13;
    a10[6] = v15;
    a10[7] = 0;
    a10[8] = 0;
    a10[9] = 2;
    a10[10] = v17;
    sub_1A57E1F74(v19);
  }
  else
  {
    swift_beginAccess();
    if (a10[2])
    {
      v20 = (2 * *(_QWORD *)(v11 + 16)) | 1;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57E0F64((uint64_t)&v22, v11, v11 + 32, 0, v20);
      sub_1A54F81BC(a1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 2;
}

uint64_t sub_1A57E0DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned __int8 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[24];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v25[152];
  uint64_t v26[19];

  sub_1A57DCF1C(a1, (uint64_t)v19);
  swift_beginAccess();
  sub_1A55032A0(a6, (uint64_t)v25, &qword_1EE799010);
  sub_1A55032A0((uint64_t)v25, (uint64_t)v26, &qword_1EE799010);
  result = sub_1A5522E34(v26);
  if ((_DWORD)result != 1)
  {
    result = sub_1A57DCF1C(a1, (uint64_t)&v20);
    v9 = v23;
    switch(v23 >> 59)
    {
      case 0uLL:
        *(_BYTE *)(a6 + 144) = 1;
        break;
      case 5uLL:
        v23 &= 0x7FFFFFFFFFFFFFFuLL;
        v10 = v20;
        v11 = v21;
        v12 = v22;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        result = swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 40) = v10;
        *(_QWORD *)(a6 + 56) = v11;
        *(_QWORD *)(a6 + 64) = v12;
        break;
      case 8uLL:
        v13 = v21;
        *(_OWORD *)(a6 + 72) = v20;
        *(_BYTE *)(a6 + 88) = v13;
        break;
      case 9uLL:
        v23 &= 0x7FFFFFFFFFFFFFFuLL;
        v18 = v20;
        v14 = v21;
        v15 = v22;
        v16 = v24;
        v17 = v9;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        result = swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 96) = v18;
        *(_QWORD *)(a6 + 112) = v14;
        *(_QWORD *)(a6 + 120) = v15;
        *(_QWORD *)(a6 + 128) = v17;
        *(_QWORD *)(a6 + 136) = v16;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1A57E0F64(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a5 >> 1 == a4)
    return result;
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    v7 = sub_1A5811534(0, v8, 1, v7);
LABEL_8:
    v15 = *((_QWORD *)v7 + 2);
    v14 = *((_QWORD *)v7 + 3);
    if (v15 >= v14 >> 1)
      v7 = sub_1A5811534((char *)(v14 > 1), v15 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v15 + 1;
    v16 = &v7[72 * v15];
    *((_OWORD *)v16 + 2) = *(_OWORD *)v9;
    v17 = *(_OWORD *)(v9 + 16);
    v18 = *(_OWORD *)(v9 + 32);
    v19 = *(_OWORD *)(v9 + 48);
    *((_QWORD *)v16 + 12) = *(_QWORD *)(v9 + 64);
    *((_OWORD *)v16 + 4) = v18;
    *((_OWORD *)v16 + 5) = v19;
    *((_OWORD *)v16 + 3) = v17;
    result = swift_unknownObjectRelease();
    *(_QWORD *)(v5 + 64) = v7;
    return result;
  }
  v5 = v6;
  v9 = result;
  v8 = *(_QWORD *)(a3 + 8 * a4);
  v13 = a4 + 1;
  result = sub_1A5802FF0(a3, a4 + 1, a5, MEMORY[0x1E0DEE9D8] + 32, 0, 1uLL);
  if ((result & 1) != 0)
  {
    v7 = *(char **)(v6 + 64);
    if (*((_QWORD *)v7 + 2) + 1 != v8)
      return result;
    swift_unknownObjectRetain();
    sub_1A57E1D0C(v9);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_8;
    goto LABEL_19;
  }
  if (v8 >= 1)
  {
    v20 = *(_QWORD *)(v6 + 64);
    if ((unint64_t)v8 <= *(_QWORD *)(v20 + 16))
    {
      swift_unknownObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1A57D3A68(v20);
        v20 = result;
      }
      if ((unint64_t)(v8 - 1) >= *(_QWORD *)(v20 + 16))
      {
        __break(1u);
      }
      else
      {
        sub_1A57E0F64(v9, a2, a3, v13, a5);
        result = swift_unknownObjectRelease();
        *(_QWORD *)(v6 + 64) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_1A57E1138(uint64_t result, uint64_t a2, int64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20;

  if (a4 >> 1 == a3)
  {
    *(_BYTE *)(a5 + 57) = a6 & 1;
    v16 = *(_BYTE *)(a7 + 16);
    *(_OWORD *)(a5 + 40) = *(_OWORD *)a7;
    *(_BYTE *)(a5 + 56) = v16;
    return result;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = a2;
  v17 = *(_QWORD *)(a2 + 8 * a3);
  v12 = v17 - 1;
  if (v17 >= 1)
  {
    v8 = *(char **)(a5 + 64);
    if ((unint64_t)v17 <= *((_QWORD *)v8 + 2))
    {
      v9 = a4;
      v7 = result;
      v11 = a3 + 1;
      v18 = sub_1A5802FF0(a2, a3 + 1, a4, MEMORY[0x1E0DEE9D8] + 32, 0, 1uLL);
      swift_unknownObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((v18 & 1) == 0)
      {
        if ((result & 1) != 0)
        {
LABEL_12:
          if (v12 >= *((_QWORD *)v8 + 2))
          {
            __break(1u);
            return result;
          }
          sub_1A57E1138(v7, v10, v11, v9, &v8[72 * v12 + 32], a6 & 1, a7);
          goto LABEL_14;
        }
LABEL_20:
        result = (uint64_t)sub_1A57D3A68((uint64_t)v8);
        v8 = (char *)result;
        goto LABEL_12;
      }
      if ((result & 1) != 0)
      {
LABEL_9:
        if (v12 < *((_QWORD *)v8 + 2))
        {
          v19 = &v8[72 * v12];
          v19[89] = a6 & 1;
          v20 = *(_BYTE *)(a7 + 16);
          *(_OWORD *)(v19 + 72) = *(_OWORD *)a7;
          v19[88] = v20;
LABEL_14:
          result = swift_unknownObjectRelease();
          *(_QWORD *)(a5 + 64) = v8;
          return result;
        }
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      v8 = sub_1A57D3A68((uint64_t)v8);
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1A57E12C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57E1308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57E135C(uint64_t a1)
{
  destroy for MediaType(a1);
  return a1;
}

__n128 __swift_memcpy88_8_2(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeExtractedAttachment()
{
  return &type metadata for UnsafeExtractedAttachment;
}

uint64_t *sub_1A57E13D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[152];
  _BYTE v60[152];
  uint64_t v61;
  uint64_t v62;
  char v63;
  _BYTE v64[152];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  _OWORD v74[2];
  char v75;
  _OWORD v76[3];
  _OWORD v77[9];
  char v78;
  uint64_t v79[19];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;

  v9 = a1 + 16;
  swift_beginAccess();
  sub_1A55032A0(v9, (uint64_t)v79, &qword_1EE799010);
  sub_1A55032A0((uint64_t)v79, (uint64_t)&v80, &qword_1EE799010);
  if (sub_1A5522E34((uint64_t *)&v80) != 1)
  {
    v77[6] = v86;
    v77[7] = v87;
    v77[8] = v88;
    v78 = v89;
    v77[2] = v82;
    v77[3] = v83;
    v77[4] = v84;
    v77[5] = v85;
    v77[0] = v80;
    v77[1] = v81;
    v61 = 0;
    v62 = 0;
    v63 = 2;
    sub_1A55032A0((uint64_t)v79, (uint64_t)v64, &qword_1EE799010);
    sub_1A57DCED4((uint64_t)v64);
    if ((sub_1A57E0A34((uint64_t *)v77, a2) & 1) != 0
      || (v89 & 1) != 0
      || (v76[0] = v86,
          v76[1] = v87,
          v76[2] = v88,
          (sub_1A57C9DF0(SBYTE8(v82), v83, SBYTE8(v83), v84, (uint64_t)v76) & 1) == 0))
    {
      v14 = 0;
      v15 = *((_QWORD *)&v88 + 1);
      if (!*((_QWORD *)&v88 + 1))
        goto LABEL_11;
LABEL_10:
      v70 = v86;
      v71 = v87;
      v72 = v88;
      v73 = v15;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v16 = sub_1A57D9C2C();
      v18 = v17;
      v20 = v19;
      v21 = v19;
      swift_bridgeObjectRelease();
      if (v21 != 2)
      {
        v61 = v16;
        v62 = v18;
        v63 = v20;
        goto LABEL_14;
      }
LABEL_11:
      if (!v14)
      {
LABEL_16:
        sub_1A57E1ED8(v79);
        sub_1A57E1DE8((uint64_t)v59);
        swift_beginAccess();
        sub_1A55032A0(v9, (uint64_t)v60, &qword_1EE799010);
        sub_1A55032A0((uint64_t)v59, v9, &qword_1EE799010);
        v10 = (uint64_t *)v60;
        return sub_1A57E1ED8(v10);
      }
LABEL_14:
      v22 = a5 + 16;
      swift_beginAccess();
      if (*(_QWORD *)(a5 + 16))
      {
        v23 = v80;
        v24 = (2 * *(_QWORD *)(v80 + 16)) | 1;
        v25 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57E1138(v25, v23 + 32, 0, v24, v22, v14, (uint64_t)&v61);
        swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
    v48 = *((_QWORD *)&v82 + 1);
    v11 = v84;
    v45 = BYTE8(v83);
    v46 = v83;
    v55 = v87;
    v57 = v86;
    v12 = v88;
    if (BYTE8(v85) == 2)
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v51 = 5;
      if (*((_QWORD *)&v12 + 1))
      {
LABEL_8:
        v74[0] = v57;
        v74[1] = v55;
        v75 = v12;
        swift_retain();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57F47DC((uint64_t)v74);
        v58 = v65;
        v54 = v67;
        v56 = v66;
        v53 = v68;
        v52 = v69;
        swift_retain();
        v13 = sub_1A57E4668(*((uint64_t *)&v12 + 1), a3);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    else
    {
      v27 = sub_1A580AA5C(*((uint64_t *)&v84 + 1), v85);
      v29 = v28;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A57D8910(v27, v29);
      v51 = v30;
      if (*((_QWORD *)&v12 + 1))
        goto LABEL_8;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = 0;
    v54 = 0;
    v56 = 0;
    v53 = 0;
    v52 = 0;
    v13 = 0;
LABEL_20:
    v31 = BYTE8(v80);
    v32 = *((_QWORD *)&v81 + 1);
    v47 = v81;
    v33 = v82;
    v50 = v80;
    if (v11)
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v60[0] = v45 & 1;
      v49 = sub_1A57D49F8((uint64_t)a3, v48, v46, v45 & 1, v11);
      v35 = v34;
      swift_bridgeObjectRelease();
      v36 = (char **)(a4 + 16);
      if (v13)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v49 = 0;
      v35 = 0;
      v36 = (char **)(a4 + 16);
      if (v13)
        goto LABEL_22;
    }
    v58 = 0;
    v54 = 0;
    v56 = 0;
    v53 = 0;
    v52 = -1;
LABEL_25:
    v37 = sub_1A57F88A8(v31, v47, v32, v33);
    v39 = v38;
    swift_beginAccess();
    v40 = *v36;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v36 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v40 = sub_1A5811650(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
      *v36 = v40;
    }
    v43 = *((_QWORD *)v40 + 2);
    v42 = *((_QWORD *)v40 + 3);
    if (v43 >= v42 >> 1)
    {
      v40 = sub_1A5811650((char *)(v42 > 1), v43 + 1, 1, v40);
      *v36 = v40;
    }
    *((_QWORD *)v40 + 2) = v43 + 1;
    v44 = &v40[88 * v43];
    *((_QWORD *)v44 + 4) = v50;
    *((_QWORD *)v44 + 5) = v49;
    *((_QWORD *)v44 + 6) = v35;
    v44[56] = v51;
    *((_QWORD *)v44 + 8) = v58;
    *((_QWORD *)v44 + 9) = v56;
    *((_QWORD *)v44 + 10) = v54;
    *((_QWORD *)v44 + 11) = v53;
    v44[96] = v52;
    *((_QWORD *)v44 + 13) = v37;
    *((_QWORD *)v44 + 14) = v39;
    v14 = 1;
    v15 = *((_QWORD *)&v88 + 1);
    if (!*((_QWORD *)&v88 + 1))
      goto LABEL_11;
    goto LABEL_10;
  }
  swift_beginAccess();
  sub_1A55032A0(v9, (uint64_t)v77, &qword_1EE799010);
  sub_1A55032A0((uint64_t)v79, v9, &qword_1EE799010);
  v10 = (uint64_t *)v77;
  return sub_1A57E1ED8(v10);
}

uint64_t sub_1A57E1950@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[160];
  uint64_t v52;

  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 80) = 0;
  v12 = swift_allocObject();
  sub_1A57E1DE8((uint64_t)v51);
  sub_1A55032A0((uint64_t)v51, v12 + 16, &qword_1EE799010);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = MEMORY[0x1E0DEE9D8];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v52 = v12;
  v37 = v12;
  v38 = v14;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = a6;
  v44 = v13;
  v45 = v11;
  v35 = v12 + 16;
  v15 = sub_1A57F978C(a1, a2, a3, a4, a5);
  if (v33)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v46 = MEMORY[0x1E0DEE9D8];
    v47 = v15;
    v48 = v16;
    v49 = v17;
    v50 = v18;
    sub_1A57F8F6C(sub_1A57E1E2C, (uint64_t)v36, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A57E1E60, (uint64_t)v34, 0, 0);
    sub_1A57E13D0(v52, v14, a6, v13, v11);
    swift_beginAccess();
    v20 = *(_QWORD *)(v11 + 16);
    if (v20)
    {
      v32 = *(_QWORD *)(v11 + 80);
      v25 = *(_QWORD *)(v11 + 64);
      v23 = *(_QWORD *)(v11 + 48);
      v24 = *(_QWORD *)(v11 + 56);
      v30 = *(_QWORD *)(v11 + 40);
      v21 = *(_QWORD *)(v11 + 32);
      v27 = *(_QWORD *)(v11 + 72);
      v28 = *(_QWORD *)(v11 + 24);
      swift_beginAccess();
      v22 = *(_QWORD *)(v13 + 16);
      sub_1A57E1EAC(v20);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_release();
      swift_release();
      swift_release();
      result = swift_release();
      *(_QWORD *)a7 = v20;
      *(_BYTE *)(a7 + 8) = v28;
      *(_QWORD *)(a7 + 16) = v21;
      *(_QWORD *)(a7 + 24) = v30;
      *(_QWORD *)(a7 + 32) = v23;
      *(_QWORD *)(a7 + 40) = v24;
      *(_QWORD *)(a7 + 48) = v25;
      *(_BYTE *)(a7 + 56) = v27;
      *(_BYTE *)(a7 + 57) = BYTE1(v27) & 1;
      *(_QWORD *)(a7 + 64) = v32;
      *(_QWORD *)(a7 + 72) = v22;
      return result;
    }
    sub_1A57E1E68();
    swift_allocError();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1A57E1C6C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57E1CA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return sub_1A57D6980(result, a2, a3, a4, a5);
  return result;
}

uint64_t sub_1A57E1CB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return sub_1A57D6A40(result, a2, a3, a4, a5);
  return result;
}

unint64_t sub_1A57E1CC8()
{
  unint64_t result;

  result = qword_1EE7AA630;
  if (!qword_1EE7AA630)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8D4C, &type metadata for MultipartWithoutBoundary);
    atomic_store(result, (unint64_t *)&qword_1EE7AA630);
  }
  return result;
}

uint64_t sub_1A57E1D0C(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t sub_1A57E1D40(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A57E1D80()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1A57E1DB0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

double sub_1A57E1DE8(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1A57E1E08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A57E1E2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57E0BF8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(uint64_t **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD **)(v1 + 80));
}

uint64_t sub_1A57E1E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1A57E0DFC(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

unint64_t sub_1A57E1E68()
{
  unint64_t result;

  result = qword_1EE7AA638;
  if (!qword_1EE7AA638)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7CA8, &type metadata for ExtractAttachments.Node.NoTopNodeFound);
    atomic_store(result, (unint64_t *)&qword_1EE7AA638);
  }
  return result;
}

uint64_t sub_1A57E1EAC(uint64_t result)
{
  if (result)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return result;
}

uint64_t *sub_1A57E1ED8(uint64_t *a1)
{
  sub_1A57DCE9C(*a1);
  return a1;
}

__n128 *sub_1A57E1F38(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8_3(a2, a1);
  return a2;
}

uint64_t sub_1A57E1F74(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwxx_0(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 != 255)
    return sub_1A57D6A40(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v3);
  return result;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v5 == 255)
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    sub_1A57D6980(v6, v7, v8, v9, v5);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = v5;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwca_0(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (__int128 *)(a1 + 32);
  v5 = (__int128 *)(a2 + 32);
  v6 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v6 == 255)
    {
      v22 = *v5;
      v23 = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v4 = v22;
      *(_OWORD *)(a1 + 48) = v23;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 56);
      sub_1A57D6980(v16, v17, v18, v19, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v19;
      *(_BYTE *)(a1 + 64) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_1A57E135C(a1 + 32);
    v20 = *(_BYTE *)(a2 + 64);
    v21 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v21;
    *(_BYTE *)(a1 + 64) = v20;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    sub_1A57D6980(v7, v8, v9, v10, *(_BYTE *)(a2 + 64));
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    v15 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v6;
    sub_1A57D6A40(v11, v12, v13, v14, v15);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a1 + 64);
  if (v5 == 255)
    goto LABEL_5;
  v6 = *(unsigned __int8 *)(a2 + 64);
  if (v6 == 255)
  {
    sub_1A57E135C(a1 + 32);
LABEL_5:
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 64) = v6;
  sub_1A57D6A40(v7, v8, v9, v10, v5);
LABEL_6:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A57E22F0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.UnsafeAttachment()
{
  return &type metadata for ExtractAttachments.UnsafeAttachment;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node.NoTopNodeFound()
{
  return &type metadata for ExtractAttachments.Node.NoTopNodeFound;
}

uint64_t initializeWithCopy for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_OWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractAttachments.Current(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractAttachments.Current(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Current()
{
  return &type metadata for ExtractAttachments.Current;
}

ValueMetadata *type metadata accessor for ExtractAttachments()
{
  return &type metadata for ExtractAttachments;
}

uint64_t destroy for ExtractAttachments.Node()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node()
{
  return &type metadata for ExtractAttachments.Node;
}

uint64_t storeEnumTagSinglePayload for ExtractAttachments.Node.Action(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A57E2888 + 4 * byte_1A59D7C35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A57E28BC + 4 * byte_1A59D7C30[v4]))();
}

uint64_t sub_1A57E28BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57E28C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57E28CCLL);
  return result;
}

uint64_t sub_1A57E28D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57E28E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A57E28E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57E28EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node.Action()
{
  return &type metadata for ExtractAttachments.Node.Action;
}

uint64_t destroy for ExtractAttachments.UnsafeNodeHeaders()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v5 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 72);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8_0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractAttachments.UnsafeNodeHeaders(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.UnsafeNodeHeaders()
{
  return &type metadata for ExtractAttachments.UnsafeNodeHeaders;
}

unint64_t sub_1A57E2BD8()
{
  unint64_t result;

  result = qword_1EE7AA640;
  if (!qword_1EE7AA640)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7D44, &type metadata for ExtractAttachments.Node.Action);
    atomic_store(result, (unint64_t *)&qword_1EE7AA640);
  }
  return result;
}

uint64_t sub_1A57E2C20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int64_t v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v3 = a1;
  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  MEMORY[0x1A85AD968](v4);
  result = 0;
  v6 = 0xE000000000000000;
  if (v3)
    goto LABEL_7;
  if (a2)
  {
    v3 = 0;
    do
    {
      v7 = *v3++;
      if ((v7 - 1) < 0x7E)
      {
        v8 = result;
        v9 = v6;
        sub_1A594B52C();
        result = v8;
        v6 = v9;
      }
LABEL_7:
      ;
    }
    while (!a2 || v3 != a2);
  }
  return result;
}

uint64_t sub_1A57E2CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t NFCInstance;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _WORD *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t isStackAllocationSafe;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[16];
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v67 = 0xE000000000000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1;
    v59 = a2;
    v60 = 0;
    v4 = 32;
    v58 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    while (1)
    {
      v10 = *(_OWORD *)(v3 + v4 + 48);
      v71 = *(_OWORD *)(v3 + v4 + 32);
      v72 = v10;
      v11 = *(_OWORD *)(v3 + v4 + 80);
      v73 = *(_OWORD *)(v3 + v4 + 64);
      v74 = v11;
      v12 = *(_OWORD *)(v3 + v4 + 16);
      v69 = *(_OWORD *)(v3 + v4);
      v70 = v12;
      sub_1A57E5B74((uint64_t)&v69);
      if (v4 != 32)
        sub_1A594B5F8();
      sub_1A55032A0((uint64_t)&v69, (uint64_t)v75, (uint64_t *)&unk_1EE7993C0);
      sub_1A55032A0((uint64_t)v75, (uint64_t)&v76, (uint64_t *)&unk_1EE7993C0);
      if (!*((_QWORD *)&v76 + 1))
        break;
      v13 = HIBYTE(*((_QWORD *)&v76 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v76 + 1) & 0x2000000000000000) == 0)
        v13 = v76 & 0xFFFFFFFFFFFFLL;
      if (!v13 || v70 == v76 || (sub_1A594CD38() & 1) != 0)
        break;
      v64 = sub_1A57DB8FC();
      v65 = v53;
      sub_1A594B5F8();
      sub_1A57DADD8(v59);
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      sub_1A594B5F8();
      sub_1A57E5C0C((uint64_t)&v69);
LABEL_5:
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      v4 += 96;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v66;
      }
    }
    if (*((_QWORD *)&v73 + 1) >> 14 < (unint64_t)v73 >> 14)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
    }
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v14 = sub_1A594C3B4();
    v16 = v15;
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRelease();
    LODWORD(v64) = 0;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    NFCInstance = unorm2_getNFCInstance();
    v22 = v64;
    v63 = v2;
    v62 = v4;
    if (!NFCInstance || (int)v64 > 0)
    {
      sub_1A57E5BC8();
      v31 = (void *)swift_allocError();
      *(_DWORD *)v32 = v22;
      *(_BYTE *)(v32 + 4) = 0;
      swift_willThrow();
LABEL_29:
      v33 = MEMORY[0x1A85AD950](v14, v16, v18, v20);
      v34 = v39;
      swift_bridgeObjectRelease();

LABEL_30:
      v40 = v59;
      if ((*(_BYTE *)(v59 + 96) & 1) != 0)
      {
        LODWORD(v64) = 0;
        v41 = MEMORY[0x1A85B1BB0](60, &v64);
      }
      else
      {
        v41 = *(_QWORD *)(v59 + 88);
      }
      v68 = v41;
      sub_1A57E6840((uint64_t)&v68, v33, v34, (uint64_t *)&v64);
      v42 = v71;
      v43 = v72;
      *(_QWORD *)(v40 + 88) = v41;
      *(_BYTE *)(v40 + 96) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = v64;
      LODWORD(v64) = 0;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v45 = unorm2_getNFCInstance();
      v46 = v64;
      v61 = v44;
      if (v45 && (int)v64 <= 0)
      {
        v47 = sub_1A58094C0(v42, *((unint64_t *)&v42 + 1), v43, *((unint64_t *)&v43 + 1));
        if ((uint64_t)(v47 + 0x4000000000000000) < 0)
          goto LABEL_54;
        if (((2 * v47) & 0x8000000000000000) != 0)
          goto LABEL_57;
        if ((uint64_t)(2 * v47 + 0x4000000000000000) < 0)
          goto LABEL_58;
        v48 = 4 * v47;
        isStackAllocationSafe = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        if (v48 < 1025
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v7 = sub_1A580A5E4((uint64_t *)((char *)&v58 - v50), v42, *((unint64_t *)&v42 + 1), v43, *((unint64_t *)&v43 + 1));
          v9 = v51;
        }
        else
        {
          v52 = (_WORD *)swift_slowAlloc();
          v7 = sub_1A580A5E4(v52, v42, *((unint64_t *)&v42 + 1), v43, *((unint64_t *)&v43 + 1));
          v9 = v55;
          MEMORY[0x1A85B1964](v52, -1, -1);
        }
        swift_bridgeObjectRelease();
        v60 = 0;
        if (!v9)
        {
          v7 = MEMORY[0x1A85AD950](v42, *((_QWORD *)&v42 + 1), v43, *((_QWORD *)&v43 + 1));
          v9 = v56;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1A57E5BC8();
        v5 = (void *)swift_allocError();
        *(_DWORD *)v6 = v46;
        *(_BYTE *)(v6 + 4) = 0;
        swift_willThrow();
        v60 = 0;
        v7 = MEMORY[0x1A85AD950](v42, *((_QWORD *)&v42 + 1), v43, *((_QWORD *)&v43 + 1));
        v9 = v8;
        swift_bridgeObjectRelease();

      }
      v2 = v63;
      v64 = v7;
      v65 = v9;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A57E5C0C((uint64_t)&v69);
      v3 = v58;
      v4 = v62;
      goto LABEL_5;
    }
    v23 = sub_1A58094C0(v14, v16, v18, v20);
    if ((uint64_t)(v23 + 0x4000000000000000) < 0)
      goto LABEL_53;
    if (((2 * v23) & 0x8000000000000000) != 0)
      goto LABEL_55;
    if ((uint64_t)(2 * v23 + 0x4000000000000000) < 0)
      goto LABEL_56;
    v24 = 4 * v23;
    v25 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v24 < 1025 || (v25 = swift_stdlib_isStackAllocationSafe(), (v25 & 1) != 0))
    {
      MEMORY[0x1E0C80A78](v25);
      v27 = v60;
      v28 = sub_1A580A5E4((uint64_t *)((char *)&v58 - v26), v14, v16, v18, v20);
      v30 = v27;
      if (v27)
      {
        swift_willThrow();
LABEL_28:
        swift_bridgeObjectRelease();
        v31 = v30;
        goto LABEL_29;
      }
      v33 = v28;
      v34 = v29;
    }
    else
    {
      v35 = (_WORD *)swift_slowAlloc();
      v36 = v60;
      v37 = sub_1A580A5E4(v35, v14, v16, v18, v20);
      v30 = v36;
      if (v36)
      {
        MEMORY[0x1A85B1964](v35, -1, -1);
        goto LABEL_28;
      }
      v33 = v37;
      v34 = v38;
      MEMORY[0x1A85B1964](v35, -1, -1);
    }
    swift_bridgeObjectRelease();
    if (!v34)
    {
      v33 = MEMORY[0x1A85AD950](v14, v16, v18, v20);
      v34 = v54;
    }
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  return 0;
}

uint64_t sub_1A57E3458(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[6];
  _BYTE v6[104];

  sub_1A57E4178(a1, (uint64_t)v5);
  sub_1A57E4178(a2, (uint64_t)v6);
  _s9IMAP2MIME6HeaderO21__derived_enum_equalsySbAC_ACtFZ_0(v5);
  return v3 & 1;
}

void Header.field.getter()
{
  __int128 *v0;
  _BYTE v1[104];

  sub_1A57E4178(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1A57E34F8()
{
  return 0x6275732D6F747561;
}

void Header.value(cache:)()
{
  __int128 *v0;
  _BYTE v1[8];
  _BYTE v2[264];

  sub_1A57E4178(v0, (uint64_t)v1);
  sub_1A57E4178(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_1A57E373C()
{
  uint64_t v1;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

void sub_1A57E3998()
{
  JUMPOUT(0x1A57E3740);
}

void sub_1A57E39A0()
{
  JUMPOUT(0x1A57E3978);
}

void sub_1A57E39B4()
{
  JUMPOUT(0x1A57E3978);
}

void sub_1A57E39D0()
{
  JUMPOUT(0x1A57E3978);
}

void sub_1A57E39E4()
{
  JUMPOUT(0x1A57E3978);
}

void _s9IMAP2MIME6HeaderO21__derived_enum_equalsySbAC_ACtFZ_0(__int128 *a1)
{
  _BYTE v1[280];

  sub_1A57E4178(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1A57E3A94()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  _QWORD v6[12];
  char v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v8;
  v2 = v9;
  sub_1A57E4178(v0, (uint64_t)v6);
  if (v7)
  {
    v4 = 0;
  }
  else if (v1 == v6[0] && v2 == v6[1])
  {
    v4 = 1;
  }
  else
  {
    v4 = sub_1A594CD38();
  }
  return v4 & 1;
}

uint64_t sub_1A57E4178(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *(_BYTE *)(a2 + 96) = *((_BYTE *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

uint64_t sub_1A57E41A8(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *i;
  unsigned __int8 *v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isStackAllocationSafe;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  char v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v43 = a2;
  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v47 = MEMORY[0x1E0DEE9D8];
    sub_1A5811E18(0, v2, 0);
    v3 = v47;
    for (i = (uint64_t *)(a1 + 80); ; i += 7)
    {
      v6 = (unsigned __int8 *)*(i - 6);
      v7 = *((_BYTE *)i - 32);
      v8 = (unsigned __int8 *)*(i - 3);
      v9 = *((unsigned __int8 *)i - 8);
      v10 = *i;
      v42 = (unsigned __int8 *)*(i - 2);
      if ((v7 & 1) == 0)
        __asm { BR              X9 }
      v41 = v8;
      v11 = (unsigned __int8 *)*(i - 5);
      v48 = 0;
      v49 = 0xE000000000000000;
      v12 = v6 ? v11 - v6 : 0;
      swift_bridgeObjectRetain_n();
      swift_retain();
      MEMORY[0x1A85AD968](v12);
      v13 = v48;
      v14 = v49;
      if (v6)
      {
        while (!v11 || v6 != v11)
        {
LABEL_11:
          v15 = *v6++;
          if ((v15 - 1) <= 0x7D)
          {
            v45 = v13;
            v46 = v14;
            sub_1A594B52C();
            v13 = v45;
            v14 = v46;
          }
        }
      }
      else if (v11)
      {
        v6 = 0;
        goto LABEL_11;
      }
      if (v9 && *(_QWORD *)(v10 + 16) == 1 && (*(_WORD *)(v10 + 48) & 0x8100) == 0x8000)
        break;
      v48 = 0;
      v49 = 0xE000000000000000;
      v29 = v13;
      sub_1A57FFD60((uint64_t)v41, (uint64_t)v42, v9, v10, v41, v42, v9, v10, v43, (uint64_t)&v48);
      swift_bridgeObjectRelease_n();
      v30 = v29;
      swift_release();
      v31 = (int64_t)v48;
      v32 = v49;
LABEL_38:
      v47 = v3;
      v34 = *(_QWORD *)(v3 + 16);
      v33 = *(_QWORD *)(v3 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1A5811E18((char *)(v33 > 1), v34 + 1, 1);
        v3 = v47;
      }
      *(_QWORD *)(v3 + 16) = v34 + 1;
      v35 = (_QWORD *)(v3 + 32 * v34);
      v35[4] = v30;
      v35[5] = v14;
      v35[6] = v31;
      v35[7] = v32;
      if (!--v2)
        return v3;
    }
    v16 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v10 + 40);
    if (v16)
      v18 = v17 - v16;
    else
      v18 = 0;
    if (v18 < 0)
    {
      __break(1u);
LABEL_48:
      __break(1u);
    }
    v42 = v13;
    v19 = sub_1A580AE6C(0, v18, v16, v17);
    if (v21)
      v22 = v21 + v20;
    else
      v22 = 0;
    if (v21)
      v23 = v21 + v19;
    else
      v23 = 0;
    v45 = 0;
    v46 = 0xE000000000000000;
    v24 = v22 - v23;
    if (v23)
      v25 = v22 - v23;
    else
      v25 = 0;
    isStackAllocationSafe = MEMORY[0x1A85AD968](v25);
    v44 = 0;
    if (v23)
    {
      if (v24 < 0)
        goto LABEL_48;
      if (v24 >= 1025)
      {
        isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
        if ((isStackAllocationSafe & 1) == 0)
        {
          v27 = swift_slowAlloc();
          v48 = (unsigned __int8 *)v27;
          v49 = v22 - v23;
          v50 = 0;
          v28 = v40;
          sub_1A57FD16C((int64_t)&v48, (int64_t *)&v45, v23, v22, v43, &v44);
          if (v28)
          {
            MEMORY[0x1A85B1964](v27, -1, -1);
            goto LABEL_51;
          }
          v40 = 0;
          MEMORY[0x1A85B1964](v27, -1, -1);
LABEL_45:
          v30 = v42;
          swift_release();
          swift_bridgeObjectRelease_n();
          v31 = (int64_t)v45;
          v32 = v46;
          goto LABEL_38;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v48 = (unsigned __int8 *)&v39 - v36;
    v49 = v24;
    v50 = 0;
    v37 = v40;
    sub_1A57FD16C((int64_t)&v48, (int64_t *)&v45, v23, v22, v43, &v44);
    if (v37)
    {
      swift_willThrow();
LABEL_51:
      swift_release();
      __break(1u);
      JUMPOUT(0x1A57E4650);
    }
    v40 = 0;
    goto LABEL_45;
  }
  return v3;
}

uint64_t sub_1A57E4668(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *i;
  unsigned __int8 *v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int64_t v12;
  unsigned __int8 *v13;
  int64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isStackAllocationSafe;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  char v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v43 = a2;
  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v47 = MEMORY[0x1E0DEE9D8];
    sub_1A5811E34(0, v2, 0);
    v3 = v47;
    for (i = (uint64_t *)(a1 + 80); ; i += 7)
    {
      v6 = (unsigned __int8 *)*(i - 6);
      v7 = *((_BYTE *)i - 32);
      v8 = (unsigned __int8 *)*(i - 3);
      v9 = *((unsigned __int8 *)i - 8);
      v10 = *i;
      v42 = (unsigned __int8 *)*(i - 2);
      if ((v7 & 1) == 0)
        __asm { BR              X9 }
      v41 = v8;
      v11 = (unsigned __int8 *)*(i - 5);
      v48 = 0;
      v49 = 0xE000000000000000;
      v12 = v6 ? v11 - v6 : 0;
      swift_bridgeObjectRetain_n();
      swift_retain();
      MEMORY[0x1A85AD968](v12);
      v14 = (int64_t)v48;
      v13 = (unsigned __int8 *)v49;
      if (v6)
      {
        while (!v11 || v6 != v11)
        {
LABEL_11:
          v15 = *v6++;
          if ((v15 - 1) <= 0x7D)
          {
            v45 = v14;
            v46 = (unint64_t)v13;
            sub_1A594B52C();
            v14 = v45;
            v13 = (unsigned __int8 *)v46;
          }
        }
      }
      else if (v11)
      {
        v6 = 0;
        goto LABEL_11;
      }
      if (v9 && *(_QWORD *)(v10 + 16) == 1 && (*(_WORD *)(v10 + 48) & 0x8100) == 0x8000)
        break;
      v48 = 0;
      v49 = 0xE000000000000000;
      v29 = v13;
      sub_1A57FFD60((uint64_t)v41, (uint64_t)v42, v9, v10, v41, v42, v9, v10, v43, (uint64_t)&v48);
      swift_bridgeObjectRelease_n();
      v30 = v29;
      swift_release();
      v31 = (int64_t)v48;
      v32 = v49;
LABEL_38:
      v47 = v3;
      v34 = *(_QWORD *)(v3 + 16);
      v33 = *(_QWORD *)(v3 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1A5811E34((char *)(v33 > 1), v34 + 1, 1);
        v3 = v47;
      }
      *(_QWORD *)(v3 + 16) = v34 + 1;
      v35 = (_QWORD *)(v3 + 32 * v34);
      v35[4] = v14;
      v35[5] = v30;
      v35[6] = v31;
      v35[7] = v32;
      if (!--v2)
        return v3;
    }
    v16 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v10 + 40);
    if (v16)
      v18 = v17 - v16;
    else
      v18 = 0;
    if (v18 < 0)
    {
      __break(1u);
LABEL_48:
      __break(1u);
    }
    v42 = v13;
    v19 = sub_1A580AE6C(0, v18, v16, v17);
    if (v21)
      v22 = v21 + v20;
    else
      v22 = 0;
    if (v21)
      v23 = v21 + v19;
    else
      v23 = 0;
    v45 = 0;
    v46 = 0xE000000000000000;
    v24 = v22 - v23;
    if (v23)
      v25 = v22 - v23;
    else
      v25 = 0;
    isStackAllocationSafe = MEMORY[0x1A85AD968](v25);
    v44 = 0;
    if (v23)
    {
      if (v24 < 0)
        goto LABEL_48;
      if (v24 >= 1025)
      {
        isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
        if ((isStackAllocationSafe & 1) == 0)
        {
          v27 = swift_slowAlloc();
          v48 = (char *)v27;
          v49 = v22 - v23;
          v50 = 0;
          v28 = v40;
          sub_1A57FD16C((int64_t)&v48, &v45, v23, v22, v43, &v44);
          if (v28)
          {
            MEMORY[0x1A85B1964](v27, -1, -1);
            goto LABEL_51;
          }
          v40 = 0;
          MEMORY[0x1A85B1964](v27, -1, -1);
LABEL_45:
          v30 = v42;
          swift_release();
          swift_bridgeObjectRelease_n();
          v31 = v45;
          v32 = v46;
          goto LABEL_38;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v48 = (char *)&v39 - v36;
    v49 = v24;
    v50 = 0;
    v37 = v40;
    sub_1A57FD16C((int64_t)&v48, &v45, v23, v22, v43, &v44);
    if (v37)
    {
      swift_willThrow();
LABEL_51:
      swift_release();
      __break(1u);
      JUMPOUT(0x1A57E4C90);
    }
    v40 = 0;
    goto LABEL_45;
  }
  return v3;
}

uint64_t sub_1A57E4CC4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  switch(a13)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_6;
    case 5:
      sub_1A57D3ABC(result, a2);
      goto LABEL_6;
    case 9:
      sub_1A57D6980(result, a2, a3, a4, a5);
      goto LABEL_6;
    case 11:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      goto LABEL_6;
    case 20:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_6:
      result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for Header(uint64_t a1)
{
  return sub_1A57E4DCC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t sub_1A57E4DCC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  switch(a13)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_6;
    case 5:
      sub_1A57D3B04(result, a2);
      goto LABEL_6;
    case 9:
      sub_1A57D6A40(result, a2, a3, a4, a5);
      goto LABEL_6;
    case 11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 20:
      swift_bridgeObjectRelease();
LABEL_6:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  sub_1A57E4CC4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_BYTE *)(a2 + 96);
  sub_1A57E4CC4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_BYTE *)(a1 + 96) = v28;
  sub_1A57E4DCC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Header(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 96) = v3;
  sub_1A57E4DCC(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Header(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEC && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 236);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 0x14)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEB)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 236;
    if (a3 >= 0xEC)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xEC)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A57E51B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_1A57E51C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Header()
{
  return &type metadata for Header;
}

void sub_1A57E51D8(uint64_t a1)
{
  _BYTE v1[32];

  sub_1A57DCF1C(a1, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_1A57E522C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *(_QWORD *)(v2 - 96) = a1 & 0x7FFFFFFFFFFFFFFLL;
  v3 = sub_1A580BBF8(*(_QWORD **)(v2 - 128), *(_QWORD *)(v2 - 120), *(_BYTE *)(v2 - 112) & 1);
  v5 = v4;
  result = swift_release();
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  return result;
}

uint64_t sub_1A57E5B1C(uint64_t a1)
{
  sub_1A57E5B50(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1A57E5B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a5 >> 59 == 5 || a5 >> 59 == 9)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1A57E5B74(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

unint64_t sub_1A57E5BC8()
{
  unint64_t result;

  result = qword_1EE7AA648;
  if (!qword_1EE7AA648)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D9260, &type metadata for ICUError);
    atomic_store(result, (unint64_t *)&qword_1EE7AA648);
  }
  return result;
}

uint64_t sub_1A57E5C0C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57E5C64(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E65672D6F747561;
    else
      v3 = 0x7065722D6F747561;
    if (v2 == 1)
      v4 = 0xEE00646574617265;
    else
      v4 = 0xEC0000006465696CLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E65672D6F747561;
      else
        v6 = 0x7065722D6F747561;
      if (v5 == 1)
        v7 = 0xEE00646574617265;
      else
        v7 = 0xEC0000006465696CLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 28526;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE200000000000000;
  if (v3 != 28526)
  {
LABEL_21:
    v8 = sub_1A594CD38();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A57E5D90(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656D686361747461;
    else
      v3 = 0x7461642D6D726F66;
    if (v2 == 1)
      v4 = 0xEA0000000000746ELL;
    else
      v4 = 0xE900000000000061;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x656D686361747461;
      else
        v6 = 0x7461642D6D726F66;
      if (v5 == 1)
        v7 = 0xEA0000000000746ELL;
      else
        v7 = 0xE900000000000061;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x656E696C6E69;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x656E696C6E69)
  {
LABEL_21:
    v8 = sub_1A594CD38();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1A57E5EB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57E5F00(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A57E5F98 + 4 * byte_1A59D7E4E[a2]))(0x6E6F697461657263);
}

uint64_t sub_1A57E5F98(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F697461657263 && v1 == 0xED0000657461642DLL)
    v2 = 1;
  else
    v2 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A57E6080(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57E60C0(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A57E6128 + 4 * byte_1A59D7E59[a2]))(a3 + 1);
}

uint64_t sub_1A57E6128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == a3 + 1 && v3 == v4)
    v5 = 1;
  else
    v5 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t Header.AutoSubmitted.rawValue.getter(char a1)
{
  if (!a1)
    return 28526;
  if (a1 == 1)
    return 0x6E65672D6F747561;
  return 0x7065722D6F747561;
}

uint64_t sub_1A57E623C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A57E5C64(*a1, *a2);
}

uint64_t sub_1A57E6248@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s9IMAP2MIME6HeaderO13AutoSubmittedO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_1A57E6274(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 0xEE00646574617265;
  v5 = 0x6E65672D6F747561;
  if (v2 != 1)
  {
    v5 = 0x7065722D6F747561;
    v4 = 0xEC0000006465696CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 28526;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1A57E62DC()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57E6384()
{
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57E6408()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t _s9IMAP2MIME6HeaderO13AutoSubmittedO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_1A57E64F8()
{
  unint64_t result;

  result = qword_1EE7AA650;
  if (!qword_1EE7AA650)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Header.AutoSubmitted, &type metadata for Header.AutoSubmitted);
    atomic_store(result, (unint64_t *)&qword_1EE7AA650);
  }
  return result;
}

uint64_t _s13AutoSubmittedOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A57E6588 + 4 * byte_1A59D7E63[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A57E65BC + 4 * byte_1A59D7E5E[v4]))();
}

uint64_t sub_1A57E65BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57E65C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57E65CCLL);
  return result;
}

uint64_t sub_1A57E65D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57E65E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A57E65E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57E65EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Header.AutoSubmitted()
{
  return &type metadata for Header.AutoSubmitted;
}

BOOL static Header.Priority.__derived_struct_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Header.Priority.init(_:)(unint64_t a1)
{
  int v1;
  int v3;

  v1 = a1;
  v3 = a1 > 0xFF || a1 - 6 < 0xFFFFFFFB;
  if (v3)
    v1 = 0;
  return v1 | (v3 << 8);
}

uint64_t Header.Priority.hash(into:)()
{
  return sub_1A594CE94();
}

uint64_t Header.Priority.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE94();
  return sub_1A594CED0();
}

uint64_t Header.Priority.description.getter()
{
  return sub_1A594CC9C();
}

uint64_t sub_1A57E66E8()
{
  return sub_1A594CC9C();
}

uint64_t Int.init(_:)(uint64_t result)
{
  return result;
}

unint64_t sub_1A57E6734()
{
  unint64_t result;

  result = qword_1EE7AA658;
  if (!qword_1EE7AA658)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Header.Priority, &type metadata for Header.Priority);
    atomic_store(result, (unint64_t *)&qword_1EE7AA658);
  }
  return result;
}

ValueMetadata *type metadata accessor for Header.Priority()
{
  return &type metadata for Header.Priority;
}

void sub_1A57E6788(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  if (v3 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  v6 = sub_1A580AA68(0, v3, a1, a2);
  v7 = v4;
  sub_1A57F0970();
  if ((v5 & 1) == 0 && v6 != v7 && v6 >= v7)
    goto LABEL_11;
}

ValueMetadata *type metadata accessor for IDNA()
{
  return &type metadata for IDNA;
}

void sub_1A57E6840(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v4;
  UIDNA **v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = (UIDNA **)isStackAllocationSafe;
  v19 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = sub_1A594B640();
    v9 = isStackAllocationSafe;
    if (isStackAllocationSafe < 0)
      __break(1u);
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    v9 = HIBYTE(a3) & 0xF;
  }
  else
  {
    v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 > 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!(_DWORD)isStackAllocationSafe)
    {
      v13 = (char *)swift_slowAlloc();
      sub_1A57E6A08(v13, v9, v7, &v17);
      if (!v4)
      {
        MEMORY[0x1A85B1964](v13, -1, -1);
        v11 = v17;
        v12 = v18;
        goto LABEL_13;
      }
      MEMORY[0x1A85B1964](v13, -1, -1);
      goto LABEL_12;
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  sub_1A57E6A08((char *)&v16[-1] - v10, v9, v7, v16);
  if (v4)
  {
    swift_willThrow();
LABEL_12:
    v17 = a2;
    v18 = a3;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v11 = sub_1A594B70C();
    v12 = v14;

    goto LABEL_13;
  }
  v11 = v16[0];
  v12 = v16[1];
LABEL_13:
  *a4 = v11;
  a4[1] = v12;
}

uint64_t sub_1A57E6A08@<X0>(char *a1@<X0>, uint64_t a2@<X1>, UIDNA **a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  char v9;
  UIDNA *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_16;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594C72C();
  if ((v9 & 1) != 0)
    goto LABEL_17;
  swift_bridgeObjectRelease();
  v10 = *a3;
  result = sub_1A57E6C14(a1, a2, 0, 0, 1, v10);
  if (v4)
    return result;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v12 = (int)result;
  if ((int)result >= 1025)
  {
    result = swift_stdlib_isStackAllocationSafe();
    if ((result & 1) == 0)
    {
      v17 = (char *)swift_slowAlloc();
      if ((sub_1A57E6C14(a1, a2, v17, v12, 0, v10) & 0x80000000) == 0)
      {
        v14 = sub_1A594B538();
        v16 = v18;
        result = MEMORY[0x1A85B1964](v17, -1, -1);
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  MEMORY[0x1E0C80A78](result);
  if ((sub_1A57E6C14(a1, a2, (char *)v19 - v13, v12, 0, v10) & 0x80000000) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  result = sub_1A594B538();
  v14 = result;
  v16 = v15;
LABEL_11:
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1A57E6C14(char *name, uint64_t length, char *dest, uint64_t capacity, char a5, UIDNA *idna)
{
  uint64_t v9;
  UErrorCode v10;
  UErrorCode *v11;
  UIDNAInfo pInfo;
  UErrorCode pErrorCode;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  pErrorCode = U_ZERO_ERROR;
  pInfo.size = 16;
  *(_QWORD *)&pInfo.isTransitionalDifferent = 0;
  *(_QWORD *)&pInfo.reservedI2 = 0;
  if (length < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (length > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a5 & 1) == 0)
  {
    if (capacity >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (capacity <= 0x7FFFFFFF)
        goto LABEL_7;
LABEL_16:
      __break(1u);
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  LODWORD(capacity) = 0;
  dest = 0;
LABEL_7:
  v9 = uidna_nameToASCII_UTF8(idna, name, length, dest, capacity, &pInfo, &pErrorCode);
  v10 = pErrorCode;
  if (((a5 & 1) == 0 || pErrorCode != U_BUFFER_OVERFLOW_ERROR) && (pErrorCode > U_ZERO_ERROR || pInfo.errors))
  {
    sub_1A57E6D50();
    swift_allocError();
    *v11 = v10;
    swift_willThrow();
  }
  return v9;
}

unint64_t sub_1A57E6D50()
{
  unint64_t result;

  result = qword_1EE7AA660;
  if (!qword_1EE7AA660)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7FD8, &type metadata for UIDNAError);
    atomic_store(result, (unint64_t *)&qword_1EE7AA660);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIDNAError()
{
  return &type metadata for UIDNAError;
}

uint64_t sub_1A57E6DA4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16)
    return 1;
  else
    return sub_1A594CC84() & 1;
}

uint64_t IndexableMessageInfo.bcc.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t IndexableMessageInfo.bcc.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

double (*IndexableMessageInfo.bcc.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t IndexableMessageInfo.cc.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t IndexableMessageInfo.cc.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

double (*IndexableMessageInfo.cc.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t IndexableMessageInfo.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1A54E330C(v1 + *(int *)(v3 + 24), a1, &qword_1EE796470);
}

uint64_t type metadata accessor for IndexableMessageInfo(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE799028);
}

uint64_t IndexableMessageInfo.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1A57A0648(a1, v1 + *(int *)(v3 + 24), &qword_1EE796470);
}

double (*IndexableMessageInfo.date.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1A54E330C(v1 + *(int *)(v3 + 28), a1, &qword_1EE7A0C30);
}

uint64_t IndexableMessageInfo.from.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1A57A0648(a1, v1 + *(int *)(v3 + 28), &qword_1EE7A0C30);
}

double (*IndexableMessageInfo.from.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.messageID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 32));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t IndexableMessageInfo.messageID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*IndexableMessageInfo.messageID.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.subject.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 36));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t IndexableMessageInfo.subject.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*IndexableMessageInfo.subject.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.to.getter()
{
  type metadata accessor for IndexableMessageInfo(0);
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t IndexableMessageInfo.to.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 40);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*IndexableMessageInfo.to.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.priority.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for IndexableMessageInfo(0);
  return *(unsigned __int8 *)(v0 + *(int *)(v1 + 44)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 44) + 1) << 8);
}

uint64_t IndexableMessageInfo.priority.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE *v4;

  result = type metadata accessor for IndexableMessageInfo(0);
  v4 = (_BYTE *)(v1 + *(int *)(result + 44));
  *v4 = a1;
  v4[1] = HIBYTE(a1) & 1;
  return result;
}

double (*IndexableMessageInfo.priority.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.hasDistributionListInTo.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 48));
}

uint64_t IndexableMessageInfo.hasDistributionListInTo.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for IndexableMessageInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

double (*IndexableMessageInfo.hasDistributionListInTo.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.hasDistributionListInCC.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 52));
}

uint64_t IndexableMessageInfo.hasDistributionListInCC.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for IndexableMessageInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

double (*IndexableMessageInfo.hasDistributionListInCC.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.isAutoReplied.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 56));
}

uint64_t IndexableMessageInfo.isAutoReplied.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for IndexableMessageInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

double (*IndexableMessageInfo.isAutoReplied.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.content.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
  v2 = *(_QWORD *)v1;
  sub_1A57E740C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t sub_1A57E740C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return OUTLINED_FUNCTION_266_0();
  return result;
}

uint64_t IndexableMessageInfo.content.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = v3 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
  result = sub_1A57E7474(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = a3;
  return result;
}

uint64_t sub_1A57E7474(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return sub_1A567FE60();
  return result;
}

double (*IndexableMessageInfo.content.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.attachments.getter()
{
  type metadata accessor for IndexableMessageInfo(0);
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t IndexableMessageInfo.attachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 64);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*IndexableMessageInfo.attachments.modify())(_QWORD)
{
  type metadata accessor for IndexableMessageInfo(0);
  return nullsub_1;
}

uint64_t IndexableMessageInfo.init(bcc:cc:date:from:messageID:subject:to:priority:hasDistributionListInTo:hasDistributionListInCC:isAutoReplied:content:attachments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t result;

  v21 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v22 = (uint64_t)a9 + v21[6];
  v23 = sub_1A594A0EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = (_OWORD *)((char *)a9 + v21[7]);
  v24[4] = 0u;
  v24[5] = 0u;
  v24[2] = 0u;
  v24[3] = 0u;
  *v24 = 0u;
  v24[1] = 0u;
  v25 = (_QWORD *)((char *)a9 + v21[8]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (_QWORD *)((char *)a9 + v21[9]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (char *)a9 + v21[11];
  *(_WORD *)v27 = 256;
  v28 = (char *)a9 + v21[15];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = -1;
  *a9 = a1;
  a9[1] = a2;
  sub_1A57A0648(a3, v22, &qword_1EE796470);
  sub_1A57A0648(a4, (uint64_t)v24, &qword_1EE7A0C30);
  swift_bridgeObjectRelease();
  *v25 = a5;
  v25[1] = a6;
  swift_bridgeObjectRelease();
  *v26 = a7;
  v26[1] = a8;
  *(_QWORD *)((char *)a9 + v21[10]) = a10;
  *v27 = a11;
  v27[1] = a12 & 1;
  *((_BYTE *)a9 + v21[12]) = a13;
  *((_BYTE *)a9 + v21[13]) = a14;
  *((_BYTE *)a9 + v21[14]) = a15;
  result = sub_1A57E7474(*(_QWORD *)v28, *((_QWORD *)v28 + 1), v28[16]);
  *(_QWORD *)v28 = a16;
  *((_QWORD *)v28 + 1) = a17;
  v28[16] = a18;
  *(_QWORD *)((char *)a9 + v21[16]) = a19;
  return result;
}

uint64_t IndexableMessageInfo.Content.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_1A594B478();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A594B460();
  v4 = sub_1A594B418();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t static IndexableMessageInfo.Content.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_1A57E9BC0(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t sub_1A57E77D8(uint64_t a1, uint64_t a2)
{
  return sub_1A57E9BC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t IndexableMessageInfo.Content.byteCount.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
    return sub_1A594B640();
  if ((a2 & 0x2000000000000000) != 0)
    return HIBYTE(a2) & 0xF;
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t IndexableMessageInfo.Attachment.mediaType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A57D8E64(v1, a1);
}

uint64_t IndexableMessageInfo.Attachment.mediaType.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57D8EA8(a1, v1);
}

double (*IndexableMessageInfo.Attachment.mediaType.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t IndexableMessageInfo.Attachment.filename.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t IndexableMessageInfo.Attachment.filename.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

double (*IndexableMessageInfo.Attachment.filename.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static IndexableMessageInfo.Attachment.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];
  _BYTE v9[40];

  sub_1A57D6944(a1, (uint64_t)v9);
  sub_1A57D6944(a2, (uint64_t)v8);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v8);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5)
    {
      if (v6 && (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && v5 == v6 || (sub_1A594CD38() & 1) != 0))
        return 1;
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1A57E7934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[40];
  _BYTE v11[40];

  sub_1A57D6944(a1, (uint64_t)v10);
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  sub_1A57D6944(a2, (uint64_t)v11);
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v10, (uint64_t)v11);
  if ((v8 & 1) != 0)
  {
    if (v4)
    {
      if (v6 && (v5 == v7 && v4 == v6 || (sub_1A594CD38() & 1) != 0))
        return 1;
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t IndexableMessageInfo.init(message:maximumTextCount:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;

  v40 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE795EA8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - v11;
  v13 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = MEMORY[0x1E0C80A78](v13);
  v36 = (uint64_t)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v35 = (uint64_t)&v35 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v22 = (char *)&v35 + *(int *)(v19 + 24) - v20;
  v23 = sub_1A594A0EC();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v37 = v22;
  v24(v22, 1, 1, v23);
  v25 = &v21[v13[7]];
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 5) = 0u;
  *((_OWORD *)v25 + 2) = 0u;
  *((_OWORD *)v25 + 3) = 0u;
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  v26 = &v21[v13[8]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v38 = v26;
  v27 = &v21[v13[9]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v39 = v27;
  *(_WORD *)&v21[v13[11]] = 256;
  v28 = &v21[v13[15]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = -1;
  v42 = a2;
  v43 = a3;
  sub_1A57F5BE0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1A57EA434, (uint64_t)v41, (uint64_t)v12);
  v29 = v14;
  sub_1A55034FC(a1, type metadata accessor for Message);
  swift_release();
  sub_1A55032A0((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_1EE795EA8);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v10, 1, v13) == 1)
  {
    sub_1A5510284((uint64_t)v10, (uint64_t *)&unk_1EE795EA8);
    sub_1A5510284((uint64_t)v37, &qword_1EE796470);
    sub_1A57EA4AC(*(_QWORD *)v25, *((_QWORD *)v25 + 1), *((_QWORD *)v25 + 2), *((_QWORD *)v25 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A57E7474(*(_QWORD *)v28, *((_QWORD *)v28 + 1), v28[16]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v14 + 56))(v40, 1, 1, v13);
  }
  else
  {
    v31 = v35;
    sub_1A57EA4FC((uint64_t)v10, v35);
    v32 = v31;
    v33 = v36;
    sub_1A57EA4FC(v32, v36);
    sub_1A5510284((uint64_t)v37, &qword_1EE796470);
    sub_1A57EA4AC(*(_QWORD *)v25, *((_QWORD *)v25 + 1), *((_QWORD *)v25 + 2), *((_QWORD *)v25 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A57E7474(*(_QWORD *)v28, *((_QWORD *)v28 + 1), v28[16]);
    sub_1A57EA4FC(v33, (uint64_t)v21);
    v34 = v40;
    sub_1A57EA540((uint64_t)v21, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v29 + 56))(v34, 0, 1, v13);
    return sub_1A55034FC((uint64_t)v21, type metadata accessor for IndexableMessageInfo);
  }
}

uint64_t sub_1A57E7D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  BOOL v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  _QWORD *v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  _QWORD v92[6];
  _QWORD v93[15];
  char v94;
  _OWORD v95[7];

  v89 = a5;
  v90 = a6;
  v85 = a2;
  v86 = a4;
  v87 = (char *)a1;
  v88 = a3;
  v83 = a7;
  v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IndexableMessageInfo.InfoAndListID(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v82 = *((_QWORD *)v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v77 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v76 - v17;
  v19 = (char *)&v76 + *(int *)(v16 + 24) - v17;
  v20 = sub_1A594A0EC();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v84 = v19;
  v21(v19, 1, 1, v20);
  v22 = (uint64_t *)&v18[v13[7]];
  memset(v95, 0, 96);
  sub_1A55032A0((uint64_t)v95, (uint64_t)v22, &qword_1EE7A0C30);
  v23 = &v18[v13[8]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v79 = v23;
  v24 = &v18[v13[9]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v80 = v24;
  *(_WORD *)&v18[v13[11]] = 256;
  v91 = v13;
  v25 = &v18[v13[15]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v81 = v25;
  v25[16] = -1;
  v21(v9, 1, 1, v20);
  v26 = (uint64_t)v12;
  IndexableMessageInfo.init(bcc:cc:date:from:messageID:subject:to:priority:hasDistributionListInTo:hasDistributionListInCC:isAutoReplied:content:attachments:)(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], (uint64_t)v9, (uint64_t)v95, 0, 0, 0, 0, v12, MEMORY[0x1E0DEE9D8], 0, 1, 0, 0, 0, 0, 0, 255, MEMORY[0x1E0DEE9D8]);
  v78 = *(int *)(v10 + 20);
  *(_QWORD *)((char *)v12 + v78) = MEMORY[0x1E0DEE9E8];
  v94 = 0;
  v28 = (uint64_t)v87;
  v27 = v88;
  v30 = v85;
  v29 = v86;
  v31 = sub_1A57FBC00(0, (uint64_t)v87, v85, (uint64_t)v88, v86);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v31;
  v93[2] = v26;
  v93[3] = v89;
  v93[4] = v90;
  v92[2] = &v94;
  v92[3] = v26;
  v92[4] = v90;
  sub_1A57DC054(3, (uint64_t (*)(_QWORD *))sub_1A57E00A0, v32, (uint64_t (*)(_OWORD *))sub_1A57EB94C, (uint64_t)v93, (uint64_t)sub_1A57EB984, (uint64_t)v92, v28, v30, (uint64_t)v27, v29);
  swift_release();
  if (v94 == 1)
  {
    v87 = v18;
    v88 = v22;
    v33 = v91;
    v34 = *(_QWORD *)(v26 + v91[10]);
    v35 = *(_QWORD *)(v34 + 16);
    v36 = v78;
    v76 = v26;
    if (v35)
    {
      v89 = v34 + 32;
      v37 = *(_QWORD *)(v26 + v78);
      v38 = v37 + 56;
      v86 = v34;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      for (i = 0; i != v35; ++i)
      {
        if (*(_QWORD *)(v37 + 16))
        {
          v40 = v89 + 96 * i;
          v42 = *(_QWORD *)(v40 + 16);
          v41 = *(_QWORD *)(v40 + 24);
          sub_1A594CE64();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A594B1D8();
          v43 = sub_1A594CED0();
          v44 = -1 << *(_BYTE *)(v37 + 32);
          v45 = v43 & ~v44;
          if (((*(_QWORD *)(v38 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) != 0)
          {
            v46 = *(_QWORD *)(v37 + 48);
            v47 = (_QWORD *)(v46 + 16 * v45);
            v48 = *v47 == v42 && v47[1] == v41;
            if (v48 || (sub_1A594CD38() & 1) != 0)
            {
LABEL_20:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v33 = v91;
              v26 = v76;
              v36 = v78;
              swift_bridgeObjectRelease();
              *(_BYTE *)(v26 + v33[12]) = 1;
              goto LABEL_21;
            }
            v49 = ~v44;
            while (1)
            {
              v45 = (v45 + 1) & v49;
              if (((*(_QWORD *)(v38 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
                break;
              v50 = (_QWORD *)(v46 + 16 * v45);
              v51 = *v50 == v42 && v50[1] == v41;
              if (v51 || (sub_1A594CD38() & 1) != 0)
                goto LABEL_20;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v33 = v91;
      v26 = v76;
      v36 = v78;
    }
LABEL_21:
    v52 = *(_QWORD *)(v26 + 8);
    v53 = *(_QWORD *)(v52 + 16);
    if (v53)
    {
      v89 = v52 + 32;
      v54 = *(_QWORD *)(v26 + v36);
      v55 = v54 + 56;
      v86 = v52;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      for (j = 0; j != v53; ++j)
      {
        if (*(_QWORD *)(v54 + 16))
        {
          v57 = v89 + 96 * j;
          v59 = *(_QWORD *)(v57 + 16);
          v58 = *(_QWORD *)(v57 + 24);
          sub_1A594CE64();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A594B1D8();
          v60 = sub_1A594CED0();
          v61 = -1 << *(_BYTE *)(v54 + 32);
          v62 = v60 & ~v61;
          if (((*(_QWORD *)(v55 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
          {
            v63 = *(_QWORD *)(v54 + 48);
            v64 = (_QWORD *)(v63 + 16 * v62);
            v65 = *v64 == v59 && v64[1] == v58;
            if (v65 || (sub_1A594CD38() & 1) != 0)
            {
LABEL_39:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v70 = v82;
              v69 = v83;
              v33 = v91;
              v71 = (uint64_t)v87;
              v72 = (uint64_t)v77;
              v73 = v81;
              swift_release();
              swift_bridgeObjectRelease();
              v74 = v76;
              *(_BYTE *)(v76 + v33[13]) = 1;
              goto LABEL_43;
            }
            v66 = ~v61;
            while (1)
            {
              v62 = (v62 + 1) & v66;
              if (((*(_QWORD *)(v55 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
                break;
              v67 = (_QWORD *)(v63 + 16 * v62);
              v68 = *v67 == v59 && v67[1] == v58;
              if (v68 || (sub_1A594CD38() & 1) != 0)
                goto LABEL_39;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      v70 = v82;
      v69 = v83;
      v33 = v91;
      v74 = v76;
    }
    else
    {
      swift_release();
      v74 = v26;
      v70 = v82;
      v69 = v83;
    }
    v71 = (uint64_t)v87;
    v72 = (uint64_t)v77;
    v73 = v81;
LABEL_43:
    sub_1A57EA540(v74, v72);
    sub_1A5510284((uint64_t)v84, &qword_1EE796470);
    sub_1A57EA4AC(*v88, v88[1], v88[2], v88[3]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A57E7474(*(_QWORD *)v73, *((_QWORD *)v73 + 1), v73[16]);
    sub_1A57EA4FC(v72, v71);
    sub_1A55034FC(v74, type metadata accessor for IndexableMessageInfo.InfoAndListID);
    sub_1A57EA540(v71, v69);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v70 + 56))(v69, 0, 1, v33);
    return sub_1A55034FC(v71, type metadata accessor for IndexableMessageInfo);
  }
  else
  {
    swift_release();
    sub_1A55034FC(v26, type metadata accessor for IndexableMessageInfo.InfoAndListID);
    sub_1A5510284((uint64_t)v84, &qword_1EE796470);
    sub_1A57EA4AC(*v22, v22[1], v22[2], v22[3]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A57E7474(*(_QWORD *)v81, *((_QWORD *)v81 + 1), v81[16]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v82 + 56))(v83, 1, 1, v91);
  }
}

uint64_t sub_1A57E84B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46[8];
  _OWORD v47[8];
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[40];
  _OWORD v52[3];
  uint64_t v53;
  _OWORD v54[2];
  unsigned __int8 v55;
  _BYTE v56[48];
  _BYTE v57[24];
  _OWORD v58[8];
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  char v63[40];
  uint64_t v64;

  if (a1 <= 1000000000)
  {
    v6 = a1;
    v7 = v3 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 255)
    {
      v12 = v6;
    }
    else
    {
      v10 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      OUTLINED_FUNCTION_266_0();
      v11 = sub_1A594B5A4();
      sub_1A57E7474(v10, v9, v8);
      v12 = v6 - v11;
      if (__OFSUB__(v6, v11))
      {
        __break(1u);
        goto LABEL_12;
      }
    }
    v13 = (unsigned __int128)(v12 * (__int128)5) >> 64;
    v14 = 5 * v12;
    if (v13 != v14 >> 63)
    {
      __break(1u);
LABEL_41:
      result = (uint64_t)sub_1A581176C(0, *(_QWORD *)(a3 + 16) + 1, 1, (char *)a3);
      a3 = result;
      goto LABEL_32;
    }
    v6 = v14 & ~(v14 >> 63);
  }
  else
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_1A55032A0((uint64_t)(a2 + 21), (uint64_t)v57, &qword_1EE798FB8);
  result = sub_1A55032A0((uint64_t)v57, (uint64_t)v62, &qword_1EE798FB8);
  if (v62[16] != 2)
    return result;
  sub_1A55032A0((uint64_t)(a2 + 12), (uint64_t)v56, &qword_1EE799008);
  sub_1A55032A0((uint64_t)v56, (uint64_t)v63, &qword_1EE799008);
  if (v64)
  {
    sub_1A57DCED4((uint64_t)a2);
    swift_retain();
    sub_1A57DE330((uint64_t)v56, (uint64_t)a2, v6, (uint64_t *)a3, (uint64_t)v50);
    goto LABEL_20;
  }
LABEL_12:
  v16 = *a2;
  sub_1A57DCED4((uint64_t)a2);
  swift_retain();
  sub_1A57DCED4((uint64_t)a2);
  swift_retain();
  v17 = MEMORY[0x1E0DEE9D8];
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v16, MEMORY[0x1E0DEE9D8]) & 1) == 0)
  {
    swift_release();
    sub_1A57DFE24((uint64_t)a2);
    sub_1A57DFE24((uint64_t)a2);
    swift_release();
    sub_1A57DF890((uint64_t)v58);
    sub_1A55032A0((uint64_t)v58, (uint64_t)v50, &qword_1EE798FB0);
    goto LABEL_21;
  }
  v18 = (_BYTE *)sub_1A5801228((unint64_t)"text/plain", (uint64_t)"", 0);
  v21 = 0uLL;
  if (v20)
  {
    v22 = v20;
    sub_1A57F3664(v18, v19, (uint64_t)v51);
    sub_1A55032A0((uint64_t)v51, (uint64_t)v54, &qword_1EE799000);
    v23 = v55;
    if (v55 <= 0xFDuLL)
    {
      v44 = v54[1];
      v45 = v54[0];
      *(_QWORD *)&v58[0] = v17;
      sub_1A57FDF58(v22, (char **)v58);
      swift_bridgeObjectRelease();
      v25 = v44;
      v21 = v45;
      v24 = *(_QWORD *)&v58[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      v23 = 0;
      v24 = 0;
      v25 = 0uLL;
      v21 = 0uLL;
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0uLL;
  }
  v59[0] = v21;
  v59[1] = v25;
  v60 = v23;
  v61 = v24;
  sub_1A57DE330((uint64_t)v59, (uint64_t)a2, v6, (uint64_t *)a3, (uint64_t)v50);
  swift_bridgeObjectRelease();
  sub_1A57DFE24((uint64_t)a2);
  swift_release();
LABEL_20:
  sub_1A57DFE24((uint64_t)a2);
  swift_release();
LABEL_21:
  sub_1A55032A0((uint64_t)v50, (uint64_t)v48, &qword_1EE798FB0);
  sub_1A55032A0((uint64_t)v48, (uint64_t)v49, &qword_1EE798FB0);
  result = sub_1A57E00C4((uint64_t)v49);
  if ((_DWORD)result == 1)
    return result;
  sub_1A55032A0((uint64_t)v48, (uint64_t)v46, &qword_1EE798FB0);
  v26 = type metadata accessor for IndexableMessageInfo(0);
  v27 = v3 + *(int *)(v26 + 60);
  v29 = *(_QWORD *)v27;
  v28 = *(_QWORD *)(v27 + 8);
  v30 = *(unsigned __int8 *)(v27 + 16);
  sub_1A57DF868(v46, v47);
  v31 = sub_1A57DF390((uint64_t)v47);
  if (!v31)
  {
    result = sub_1A57DF39C((uint64_t)v47);
    v34 = *(_QWORD *)(result + 8);
    if (v30 == 255)
    {
      *(_QWORD *)v27 = *(_QWORD *)result;
      *(_QWORD *)(v27 + 8) = v34;
      *(_BYTE *)(v27 + 16) = 0;
    }
    else if ((v30 & 1) != 0)
    {
      return sub_1A57E00DC((uint64_t)v48);
    }
    else
    {
      *(_QWORD *)&v58[0] = v29;
      *((_QWORD *)&v58[0] + 1) = v28;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      sub_1A57E00DC((uint64_t)v48);
      swift_bridgeObjectRelease();
      result = sub_1A57E7474(v29, v28, v30);
      v35 = *((_QWORD *)&v58[0] + 1);
      *(_QWORD *)v27 = *(_QWORD *)&v58[0];
      *(_QWORD *)(v27 + 8) = v35;
      *(_BYTE *)(v27 + 16) = 0;
    }
    return result;
  }
  if (v31 == 1)
  {
    result = sub_1A57DF39C((uint64_t)v47);
    v33 = *(_QWORD *)result;
    v32 = *(_QWORD *)(result + 8);
    if (v30 != 255)
    {
      if ((v30 & 1) != 0)
      {
        *(_QWORD *)&v58[0] = v29;
        *((_QWORD *)&v58[0] + 1) = v28;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A594B5F8();
        sub_1A57E00DC((uint64_t)v48);
        result = sub_1A57E7474(v29, v28, v30);
        v43 = *((_QWORD *)&v58[0] + 1);
        *(_QWORD *)v27 = *(_QWORD *)&v58[0];
        *(_QWORD *)(v27 + 8) = v43;
        goto LABEL_37;
      }
      result = sub_1A57E7474(v29, v28, v30);
    }
    *(_QWORD *)v27 = v33;
    *(_QWORD *)(v27 + 8) = v32;
LABEL_37:
    *(_BYTE *)(v27 + 16) = 1;
    return result;
  }
  v36 = (_OWORD *)sub_1A57DF39C((uint64_t)v47);
  v58[4] = v36[4];
  v58[5] = v36[5];
  v58[6] = v36[6];
  v58[7] = v36[7];
  v58[0] = *v36;
  v58[1] = v36[1];
  v58[2] = v36[2];
  v58[3] = v36[3];
  sub_1A57EBA10((uint64_t)v58, (uint64_t)v52);
  sub_1A57E00DC((uint64_t)v48);
  v6 = *(int *)(v26 + 64);
  a3 = *(_QWORD *)(v3 + v6);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_41;
LABEL_32:
  v38 = *(_QWORD *)(a3 + 16);
  v37 = *(_QWORD *)(a3 + 24);
  if (v38 >= v37 >> 1)
  {
    result = (uint64_t)sub_1A581176C((char *)(v37 > 1), v38 + 1, 1, (char *)a3);
    a3 = result;
  }
  *(_QWORD *)(a3 + 16) = v38 + 1;
  v39 = a3 + 56 * v38;
  v40 = v52[0];
  v41 = v52[1];
  v42 = v52[2];
  *(_QWORD *)(v39 + 80) = v53;
  *(_OWORD *)(v39 + 48) = v41;
  *(_OWORD *)(v39 + 64) = v42;
  *(_OWORD *)(v39 + 32) = v40;
  *(_QWORD *)(v3 + v6) = a3;
  return result;
}

uint64_t sub_1A57E8A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  _BYTE v8[104];
  __int128 v9[6];
  unsigned __int8 v10;
  __int128 v11[6];
  _BYTE v12[32];
  unint64_t v13;

  *a6 = 1;
  result = sub_1A57DCF1C(a1, (uint64_t)v12);
  if (((1 << (v13 >> 59)) & 0x1343F1) == 0)
  {
    v13 &= 0x7FFFFFFFFFFFFFFuLL;
    swift_retain();
    sub_1A57EB990(a1);
    sub_1A57E51D8(a1);
    result = sub_1A55032A0((uint64_t)v8, (uint64_t)v9, &qword_1EE7A0C70);
    if (v10 != 255)
    {
      sub_1A57E4178(v9, (uint64_t)v11);
      sub_1A57E8B00(v11);
      return sub_1A57EBAB8((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1A57EB9E8);
    }
  }
  return result;
}

void sub_1A57E8B00(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[56];
  _BYTE v8[104];

  sub_1A57E4178(a1, (uint64_t)v7);
  v2 = sub_1A594A0EC();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  v4 = MEMORY[0x1E0C80A78](v3);
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  sub_1A57E4178(a1, (uint64_t)v8);
  __asm { BR              X10 }
}

void sub_1A57E8C78()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 - 192);
  v2 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 56);
  if (v1)
    *(_BYTE *)(*(_QWORD *)(v0 - 328) + v2) = 1;
  else
    *(_BYTE *)(*(_QWORD *)(v0 - 328) + v2) = 0;
  sub_1A57E8C58();
}

uint64_t sub_1A57E9108(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  v8 = sub_1A594CED0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1A594CD38() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1A594CD38() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57E95B0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1A57E92C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA668);
  v3 = sub_1A594C6CC();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1A594CE64();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B1D8();
      swift_bridgeObjectRelease();
      result = sub_1A594CED0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A57E95B0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1A57E92C4();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1A57E9758();
      goto LABEL_22;
    }
    sub_1A57E9908();
  }
  v11 = *v4;
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  result = sub_1A594CED0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1A594CD38(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1A594CDEC();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1A594CD38();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_1A57E9758()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA668);
  v2 = *v0;
  v3 = sub_1A594C6C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A57E9908()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA668);
  v3 = sub_1A594C6CC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1A594CE64();
    swift_bridgeObjectRetain_n();
    sub_1A594B1D8();
    swift_bridgeObjectRelease();
    result = sub_1A594CED0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A57E9BC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return sub_1A594CD38();
}

uint64_t _s9IMAP2MIME20IndexableMessageInfoV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  int *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unsigned __int8 *v85;
  char v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  _QWORD *v92;
  int v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  int *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112[24];

  v4 = sub_1A594A0EC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7964D0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v95 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v95 - v18;
  if ((sub_1A57D3E34(*a1, *a2) & 1) == 0 || (sub_1A57D3E34(a1[1], a2[1]) & 1) == 0)
    goto LABEL_20;
  v108 = v7;
  v20 = type metadata accessor for IndexableMessageInfo(0);
  v21 = *(int *)(v20 + 24);
  v110 = a1;
  sub_1A54E330C((uint64_t)a1 + v21, (uint64_t)v19, &qword_1EE796470);
  v109 = (int *)v20;
  v22 = *(int *)(v20 + 24);
  v111 = a2;
  sub_1A54E330C((uint64_t)a2 + v22, (uint64_t)v16, &qword_1EE796470);
  v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1A54E330C((uint64_t)v19, (uint64_t)v10, &qword_1EE796470);
  sub_1A54E330C((uint64_t)v16, v23, &qword_1EE796470);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v10, 1, v4) == 1)
  {
    sub_1A5510284((uint64_t)v16, &qword_1EE796470);
    sub_1A5510284((uint64_t)v19, &qword_1EE796470);
    if (v24(v23, 1, v4) == 1)
    {
      sub_1A5510284((uint64_t)v10, &qword_1EE796470);
      goto LABEL_10;
    }
LABEL_8:
    sub_1A5510284((uint64_t)v10, &qword_1EE7964D0);
    goto LABEL_20;
  }
  sub_1A54E330C((uint64_t)v10, (uint64_t)v13, &qword_1EE796470);
  if (v24(v23, 1, v4) == 1)
  {
    sub_1A5510284((uint64_t)v16, &qword_1EE796470);
    sub_1A5510284((uint64_t)v19, &qword_1EE796470);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_8;
  }
  v25 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v108, v23, v4);
  sub_1A57EBC24();
  v26 = sub_1A594B37C();
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v25, v4);
  sub_1A5510284((uint64_t)v16, &qword_1EE796470);
  sub_1A5510284((uint64_t)v19, &qword_1EE796470);
  v27(v13, v4);
  sub_1A5510284((uint64_t)v10, &qword_1EE796470);
  if ((v26 & 1) == 0)
    goto LABEL_20;
LABEL_10:
  v28 = v109;
  v29 = v109[7];
  v30 = v110;
  v31 = *(uint64_t *)((char *)v110 + v29);
  v32 = *(uint64_t *)((char *)v110 + v29 + 8);
  v33 = *(uint64_t *)((char *)v110 + v29 + 16);
  v34 = *(uint64_t *)((char *)v110 + v29 + 24);
  v36 = *(uint64_t *)((char *)v110 + v29 + 32);
  v35 = *(uint64_t *)((char *)v110 + v29 + 40);
  v38 = *(uint64_t *)((char *)v110 + v29 + 48);
  v37 = *(uint64_t *)((char *)v110 + v29 + 56);
  v39 = *(uint64_t *)((char *)v110 + v29 + 64);
  v40 = *(uint64_t *)((char *)v110 + v29 + 72);
  v42 = *(uint64_t *)((char *)v110 + v29 + 80);
  v41 = *(uint64_t *)((char *)v110 + v29 + 88);
  v43 = v111;
  v44 = (uint64_t *)((char *)v111 + v29);
  v45 = *v44;
  v46 = v44[1];
  v47 = v44[2];
  v48 = v44[3];
  v49 = v44[4];
  v50 = v44[5];
  v51 = v44[6];
  v52 = v44[7];
  v53 = v44[8];
  v54 = v44[9];
  v56 = v44[10];
  v55 = v44[11];
  if (!v34)
  {
    if (!v48)
    {
LABEL_28:
      v72 = v28[8];
      v73 = (uint64_t *)((char *)v30 + v72);
      v74 = *(uint64_t *)((char *)v30 + v72 + 8);
      v75 = (uint64_t *)((char *)v43 + v72);
      v76 = v75[1];
      if (v74)
      {
        if (!v76)
          goto LABEL_20;
        if (*v73 != *v75 || v74 != v76)
        {
          v77 = sub_1A594CD38();
          v62 = 0;
          if ((v77 & 1) == 0)
            return v62 & 1;
        }
      }
      else if (v76)
      {
        goto LABEL_20;
      }
      v78 = v28[9];
      v79 = (uint64_t *)((char *)v30 + v78);
      v80 = *(uint64_t *)((char *)v30 + v78 + 8);
      v81 = (uint64_t *)((char *)v43 + v78);
      v82 = v81[1];
      if (v80)
      {
        if (!v82)
          goto LABEL_20;
        if (*v79 != *v81 || v80 != v82)
        {
          v83 = sub_1A594CD38();
          v62 = 0;
          if ((v83 & 1) == 0)
            return v62 & 1;
        }
      }
      else if (v82)
      {
        goto LABEL_20;
      }
      if ((sub_1A57D3E34(*(uint64_t *)((char *)v30 + v28[10]), *(uint64_t *)((char *)v43 + v28[10])) & 1) != 0)
      {
        v84 = v28[11];
        v85 = (unsigned __int8 *)v30 + v84;
        v86 = *((_BYTE *)v30 + v84 + 1);
        v87 = (unsigned __int8 *)v43 + v84;
        v88 = *((unsigned __int8 *)v43 + v84 + 1);
        if ((v86 & 1) != 0)
        {
          if (!v88)
            goto LABEL_20;
        }
        else
        {
          if (*v85 != *v87)
            LOBYTE(v88) = 1;
          if ((v88 & 1) != 0)
            goto LABEL_20;
        }
        if (*((unsigned __int8 *)v30 + v28[12]) != *((unsigned __int8 *)v43 + v28[12])
          || *((unsigned __int8 *)v30 + v28[13]) != *((unsigned __int8 *)v43 + v28[13])
          || *((unsigned __int8 *)v30 + v28[14]) != *((unsigned __int8 *)v43 + v28[14]))
        {
          goto LABEL_20;
        }
        v89 = v28[15];
        v90 = (uint64_t *)((char *)v30 + v89);
        v91 = *((unsigned __int8 *)v30 + v89 + 16);
        v92 = (uint64_t *)((char *)v43 + v89);
        v93 = *((unsigned __int8 *)v43 + v89 + 16);
        if (v91 == 255)
        {
          if (v93 == 255)
            goto LABEL_63;
        }
        else if (v93 != 255)
        {
          if ((v91 & 1) != 0)
          {
            if ((v93 & 1) == 0)
              goto LABEL_20;
          }
          else if ((v93 & 1) != 0)
          {
            goto LABEL_20;
          }
          v43 = v111;
          v30 = v110;
          v28 = v109;
          if (*v90 != *v92 || v90[1] != v92[1])
          {
            v94 = sub_1A594CD38();
            v62 = 0;
            if ((v94 & 1) == 0)
              return v62 & 1;
          }
LABEL_63:
          v62 = sub_1A57D426C(*(uint64_t *)((char *)v30 + v28[16]), *(uint64_t *)((char *)v43 + v28[16]));
          return v62 & 1;
        }
      }
LABEL_20:
      v62 = 0;
      return v62 & 1;
    }
LABEL_19:
    v112[0] = v31;
    v112[1] = v32;
    v112[2] = v33;
    v112[3] = v34;
    v112[4] = v36;
    v112[5] = v35;
    v112[6] = v38;
    v112[7] = v37;
    v112[8] = v39;
    v112[9] = v40;
    v112[10] = v42;
    v112[11] = v41;
    v112[12] = v45;
    v112[13] = v46;
    v112[14] = v47;
    v112[15] = v48;
    v112[16] = v49;
    v112[17] = v50;
    v112[18] = v51;
    v112[19] = v52;
    v112[20] = v53;
    v112[21] = v54;
    v112[22] = v56;
    v112[23] = v55;
    v107 = v47;
    v108 = (char *)v52;
    v63 = v45;
    sub_1A57EBB14(v31, v32, v33, v34);
    sub_1A57EBB14(v63, v46, v107, v48);
    sub_1A57EBB64(v112);
    goto LABEL_20;
  }
  if (!v48)
    goto LABEL_19;
  if (!v32)
  {
    v101 = v40;
    v102 = v55;
    v103 = v39;
    v104 = v56;
    v105 = v54;
    v106 = v53;
    if (v46)
      goto LABEL_20;
    goto LABEL_23;
  }
  if (!v46)
    goto LABEL_20;
  v101 = v40;
  v102 = v55;
  v103 = v39;
  v104 = v56;
  v105 = v54;
  v106 = v53;
  if (v31 == v45 && v32 == v46)
    goto LABEL_23;
  v107 = v47;
  v100 = v49;
  v108 = (char *)v52;
  v99 = v41;
  v57 = v51;
  v98 = v42;
  v96 = v50;
  v58 = v37;
  v97 = v38;
  v59 = v35;
  v60 = sub_1A594CD38();
  v47 = v107;
  v35 = v59;
  v38 = v97;
  v49 = v100;
  v37 = v58;
  v50 = v96;
  v42 = v98;
  v51 = v57;
  v41 = v99;
  v52 = (uint64_t)v108;
  v61 = v60;
  v62 = 0;
  if ((v61 & 1) != 0)
  {
LABEL_23:
    if (v33 != v47 || v34 != v48)
    {
      v100 = v49;
      v108 = (char *)v52;
      v65 = v51;
      v66 = v50;
      v99 = v41;
      v67 = v37;
      v68 = v38;
      v69 = v35;
      v70 = sub_1A594CD38();
      v35 = v69;
      v38 = v68;
      v49 = v100;
      v37 = v67;
      v41 = v99;
      v50 = v66;
      v51 = v65;
      v52 = (uint64_t)v108;
      v71 = v70;
      v62 = 0;
      if ((v71 & 1) == 0)
        return v62 & 1;
    }
    if ((sub_1A57E6DA4(v36, v35, v38, v37, v49, v50, v51, v52) & 1) == 0
      || (sub_1A57E6DA4(v103, v101, v42, v41, v106, v105, v104, v102) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_28;
  }
  return v62 & 1;
}

uint64_t sub_1A57EA434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 24);
  swift_retain();
  return sub_1A57E7D34(a1, a2, a3, a4, v12, v11, a5);
}

uint64_t sub_1A57EA4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A57EA4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexableMessageInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57EA540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexableMessageInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for IndexableMessageInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A594A0EC();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[7];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 3);
    if (v18)
    {
      v19 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v19;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v18;
      *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
      v20 = *((_QWORD *)v17 + 7);
      *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
      *((_QWORD *)v16 + 7) = v20;
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      v21 = *((_QWORD *)v17 + 11);
      *((_QWORD *)v16 + 10) = *((_QWORD *)v17 + 10);
      *((_QWORD *)v16 + 11) = v21;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
    else
    {
      v22 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
      *((_OWORD *)v16 + 3) = v22;
      v23 = *((_OWORD *)v17 + 5);
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      *((_OWORD *)v16 + 5) = v23;
      v24 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v24;
    }
    v25 = a3[8];
    v26 = a3[9];
    v27 = (_QWORD *)((char *)v7 + v25);
    v28 = (_QWORD *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (_QWORD *)((char *)v7 + v26);
    v31 = (_QWORD *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[11];
    *(_QWORD *)((char *)v7 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
    *(_WORD *)((char *)v7 + v33) = *(_WORD *)((char *)a2 + v33);
    v34 = a3[13];
    *((_BYTE *)v7 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v7 + v34) = *((_BYTE *)a2 + v34);
    v35 = a3[15];
    *((_BYTE *)v7 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v36 = (char *)v7 + v35;
    v37 = (char *)a2 + v35;
    v38 = *((unsigned __int8 *)a2 + v35 + 16);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v38 == 255)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
      v36[16] = v37[16];
    }
    else
    {
      v39 = *(_QWORD *)v37;
      v40 = *((_QWORD *)v37 + 1);
      OUTLINED_FUNCTION_266_0();
      *(_QWORD *)v36 = v39;
      *((_QWORD *)v36 + 1) = v40;
      v36[16] = v38 & 1;
    }
    *(_QWORD *)((char *)v7 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return v7;
}

uint64_t destroy for IndexableMessageInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1A594A0EC();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (*(_QWORD *)(a1 + a2[7] + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + a2[15] + 16) != 255)
    sub_1A567FE60();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IndexableMessageInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 3);
  if (v17)
  {
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 3) = v17;
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    v19 = *((_QWORD *)v16 + 7);
    *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
    *((_QWORD *)v15 + 7) = v19;
    *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
    v20 = *((_QWORD *)v16 + 11);
    *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
    *((_QWORD *)v15 + 11) = v20;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    v21 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v21;
    v22 = *((_OWORD *)v16 + 5);
    *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
    *((_OWORD *)v15 + 5) = v22;
    v23 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v23;
  }
  v24 = a3[8];
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)((char *)a1 + v25);
  v30 = (_QWORD *)((char *)a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_WORD *)((char *)a1 + v32) = *(_WORD *)((char *)a2 + v32);
  v33 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  v34 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *((unsigned __int8 *)a2 + v34 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v37 == 255)
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
  }
  else
  {
    v38 = *(_QWORD *)v36;
    v39 = *((_QWORD *)v36 + 1);
    OUTLINED_FUNCTION_266_0();
    *(_QWORD *)v35 = v38;
    *((_QWORD *)v35 + 1) = v39;
    v35[16] = v37 & 1;
  }
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

_QWORD *assignWithCopy for IndexableMessageInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  char v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A0EC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = *(_QWORD *)((char *)a1 + v15 + 24);
  v19 = *(_QWORD *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      *v16 = *v17;
      v16[1] = v17[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v16[2] = v17[2];
      v16[3] = v17[3];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v16[4] = v17[4];
      v16[5] = v17[5];
      v16[6] = v17[6];
      v16[7] = v17[7];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v16[8] = v17[8];
      v16[9] = v17[9];
      v16[10] = v17[10];
      v16[11] = v17[11];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A57EAF2C((uint64_t)v16);
      v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
      v21 = *((_OWORD *)v17 + 5);
      v23 = *((_OWORD *)v17 + 2);
      v22 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      *((_OWORD *)v16 + 5) = v21;
      *((_OWORD *)v16 + 2) = v23;
      *((_OWORD *)v16 + 3) = v22;
    }
  }
  else if (v19)
  {
    *v16 = *v17;
    v16[1] = v17[1];
    v16[2] = v17[2];
    v16[3] = v17[3];
    v16[4] = v17[4];
    v16[5] = v17[5];
    v16[6] = v17[6];
    v16[7] = v17[7];
    v16[8] = v17[8];
    v16[9] = v17[9];
    v16[10] = v17[10];
    v16[11] = v17[11];
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    v24 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v24;
    v25 = *((_OWORD *)v17 + 2);
    v26 = *((_OWORD *)v17 + 3);
    v27 = *((_OWORD *)v17 + 5);
    *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
    *((_OWORD *)v16 + 5) = v27;
    *((_OWORD *)v16 + 2) = v25;
    *((_OWORD *)v16 + 3) = v26;
  }
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v31 = a3[9];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v34 = a3[15];
  v35 = (uint64_t)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *((unsigned __int8 *)a1 + v34 + 16);
  v38 = *((unsigned __int8 *)a2 + v34 + 16);
  if (v37 == 255)
  {
    if (v38 == 255)
    {
      v40 = *(_OWORD *)v36;
      *(_BYTE *)(v35 + 16) = v36[16];
      *(_OWORD *)v35 = v40;
    }
    else
    {
      v44 = v38 & 1;
      v45 = *(_QWORD *)v36;
      v46 = *((_QWORD *)v36 + 1);
      OUTLINED_FUNCTION_266_0();
      *(_QWORD *)v35 = v45;
      *(_QWORD *)(v35 + 8) = v46;
      *(_BYTE *)(v35 + 16) = v44;
    }
  }
  else if (v38 == 255)
  {
    sub_1A57EAF60(v35);
    v39 = v36[16];
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *(_BYTE *)(v35 + 16) = v39;
  }
  else
  {
    v41 = v38 & 1;
    v42 = *(_QWORD *)v36;
    v43 = *((_QWORD *)v36 + 1);
    OUTLINED_FUNCTION_266_0();
    *(_QWORD *)v35 = v42;
    *(_QWORD *)(v35 + 8) = v43;
    *(_BYTE *)(v35 + 16) = v41;
    sub_1A567FE60();
  }
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57EAF2C(uint64_t a1)
{
  destroy for EmailAddress();
  return a1;
}

uint64_t sub_1A57EAF60(uint64_t a1)
{
  sub_1A567FE60();
  return a1;
}

_OWORD *initializeWithTake for IndexableMessageInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A0EC();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  v17 = v15[5];
  v14[4] = v15[4];
  v14[5] = v17;
  v18 = v15[1];
  *v14 = *v15;
  v14[1] = v18;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v19 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[12];
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
  v21 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  v22 = a3[15];
  v23 = a3[16];
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  return a1;
}

_QWORD *assignWithTake for IndexableMessageInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A0EC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (uint64_t)a1 + v15;
  v17 = (char *)a2 + v15;
  if (*(_QWORD *)((char *)a1 + v15 + 24))
  {
    if (*((_QWORD *)v17 + 3))
    {
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = v18;
      swift_bridgeObjectRelease();
      v19 = *((_QWORD *)v17 + 3);
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
      *(_QWORD *)(v16 + 24) = v19;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
      v20 = *((_QWORD *)v17 + 7);
      *(_QWORD *)(v16 + 48) = *((_QWORD *)v17 + 6);
      *(_QWORD *)(v16 + 56) = v20;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
      v21 = *((_QWORD *)v17 + 11);
      *(_QWORD *)(v16 + 80) = *((_QWORD *)v17 + 10);
      *(_QWORD *)(v16 + 88) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1A57EAF2C(v16);
  }
  v22 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
  *(_OWORD *)(v16 + 48) = v22;
  v23 = *((_OWORD *)v17 + 5);
  *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
  *(_OWORD *)(v16 + 80) = v23;
  v24 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v24;
LABEL_12:
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[9];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  v35 = a3[12];
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  v36 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + v36) = *((_BYTE *)a2 + v36);
  v37 = a3[15];
  v38 = (uint64_t)a1 + v37;
  v39 = (char *)a2 + v37;
  if (*((unsigned __int8 *)a1 + v37 + 16) != 255)
  {
    v40 = v39[16];
    if (v40 != 255)
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
      *(_BYTE *)(v38 + 16) = v40 & 1;
      sub_1A567FE60();
      goto LABEL_17;
    }
    sub_1A57EAF60(v38);
  }
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *(_BYTE *)(v38 + 16) = v39[16];
LABEL_17:
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableMessageInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57EB398(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for IndexableMessageInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A57EB424(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1A57EB49C()
{
  unint64_t v0;

  sub_1A57EB550();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A57EB550()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE7964B8)
  {
    sub_1A594A0EC();
    v0 = sub_1A594C354();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE7964B8);
  }
}

uint64_t destroy for IndexableMessageInfo.Content()
{
  return sub_1A567FE60();
}

uint64_t _s9IMAP2MIME20IndexableMessageInfoV7ContentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  OUTLINED_FUNCTION_266_0();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IndexableMessageInfo.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  OUTLINED_FUNCTION_266_0();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A567FE60();
  return a1;
}

uint64_t assignWithTake for IndexableMessageInfo.Content(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A567FE60();
  return a1;
}

ValueMetadata *type metadata accessor for IndexableMessageInfo.Content()
{
  return &type metadata for IndexableMessageInfo.Content;
}

uint64_t destroy for IndexableMessageInfo.Attachment(uint64_t a1)
{
  sub_1A57D6A40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  sub_1A57D6A40(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_1A57D6A40(v5, v6, v7, v8, v10);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableMessageInfo.Attachment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexableMessageInfo.Attachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexableMessageInfo.Attachment()
{
  return &type metadata for IndexableMessageInfo.Attachment;
}

uint64_t type metadata accessor for IndexableMessageInfo.InfoAndListID(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE7A0C58);
}

uint64_t sub_1A57EB928()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A57EB94C(uint64_t *a1)
{
  uint64_t v1;

  sub_1A57E84B0(*(_QWORD *)(v1 + 24), a1, *(_QWORD *)(v1 + 32));
  return 2;
}

uint64_t sub_1A57EB984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1A57E8A2C(a1, a2, a3, a4, a5, *(_BYTE **)(v5 + 16));
}

uint64_t sub_1A57EB990(uint64_t a1)
{
  sub_1A57EB9C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1A57EB9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a5 >> 59 == 5 || a5 >> 59 == 9)
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return result;
}

uint64_t sub_1A57EB9E8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  if (a13 != 255)
    return sub_1A57E4DCC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_1A57EBA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while (*(v6 - 2))
    {
      v6 += 4;
      if (!--v5)
        goto LABEL_5;
    }
    v7 = *(v6 - 1);
    v8 = *v6;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  result = sub_1A57D6980(v9, v10, v11, v12, v13);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_1A57EBAB8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 96);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
  return a1;
}

uint64_t sub_1A57EBB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return result;
}

uint64_t *sub_1A57EBB64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = a1[13];
  v6 = a1[12];
  v3 = a1[14];
  v4 = a1[15];
  sub_1A57EA4AC(*a1, a1[1], a1[2], a1[3]);
  sub_1A57EA4AC(v6, v2, v3, v4);
  return a1;
}

unint64_t sub_1A57EBC24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE796430;
  if (!qword_1EE796430)
  {
    v1 = sub_1A594A0EC();
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0CB08B8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE796430);
  }
  return result;
}

_QWORD *sub_1A57EBC6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a1;
    a1[1] = a2[1];
    v7 = (int *)type metadata accessor for IndexableMessageInfo(0);
    v8 = v7[6];
    v9 = (char *)v6 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A594A0EC();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = v7[7];
    v16 = (char *)v6 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 3);
    if (v18)
    {
      v19 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v19;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v18;
      *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
      v20 = *((_QWORD *)v17 + 7);
      *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
      *((_QWORD *)v16 + 7) = v20;
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      v21 = *((_QWORD *)v17 + 11);
      *((_QWORD *)v16 + 10) = *((_QWORD *)v17 + 10);
      *((_QWORD *)v16 + 11) = v21;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
    else
    {
      v22 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
      *((_OWORD *)v16 + 3) = v22;
      v23 = *((_OWORD *)v17 + 5);
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      *((_OWORD *)v16 + 5) = v23;
      v24 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v24;
    }
    v25 = v7[8];
    v26 = (_QWORD *)((char *)v6 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v7[9];
    v30 = (_QWORD *)((char *)v6 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    *(_QWORD *)((char *)v6 + v7[10]) = *(_QWORD *)((char *)a2 + v7[10]);
    *(_WORD *)((char *)v6 + v7[11]) = *(_WORD *)((char *)a2 + v7[11]);
    *((_BYTE *)v6 + v7[12]) = *((_BYTE *)a2 + v7[12]);
    *((_BYTE *)v6 + v7[13]) = *((_BYTE *)a2 + v7[13]);
    *((_BYTE *)v6 + v7[14]) = *((_BYTE *)a2 + v7[14]);
    v33 = v7[15];
    v34 = (char *)v6 + v33;
    v35 = (char *)a2 + v33;
    v36 = *((unsigned __int8 *)a2 + v33 + 16);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v36 == 255)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
    }
    else
    {
      v37 = *(_QWORD *)v35;
      v38 = *((_QWORD *)v35 + 1);
      OUTLINED_FUNCTION_266_0();
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v38;
      v34[16] = v36 & 1;
    }
    *(_QWORD *)((char *)v6 + v7[16]) = *(_QWORD *)((char *)a2 + v7[16]);
    *(_QWORD *)((char *)v6 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return v6;
}

uint64_t sub_1A57EBEFC(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v3 = a1 + v2[6];
  v4 = sub_1A594A0EC();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (*(_QWORD *)(a1 + v2[7] + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + v2[15] + 16) != 255)
    sub_1A567FE60();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A57EC018(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 3);
  if (v17)
  {
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 3) = v17;
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    v19 = *((_QWORD *)v16 + 7);
    *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
    *((_QWORD *)v15 + 7) = v19;
    *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
    v20 = *((_QWORD *)v16 + 11);
    *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
    *((_QWORD *)v15 + 11) = v20;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    v21 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v21;
    v22 = *((_OWORD *)v16 + 5);
    *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
    *((_OWORD *)v15 + 5) = v22;
    v23 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v23;
  }
  v24 = v6[8];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v6[9];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
  *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
  v32 = v6[15];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *((unsigned __int8 *)a2 + v32 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v35 == 255)
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
    v33[16] = v34[16];
  }
  else
  {
    v36 = *(_QWORD *)v34;
    v37 = *((_QWORD *)v34 + 1);
    OUTLINED_FUNCTION_266_0();
    *(_QWORD *)v33 = v36;
    *((_QWORD *)v33 + 1) = v37;
    v33[16] = v35 & 1;
  }
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)((char *)a2 + v6[16]);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

_QWORD *sub_1A57EC278(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  char v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[7];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a1 + v16 + 24);
  v20 = *(_QWORD *)((char *)a2 + v16 + 24);
  if (v19)
  {
    if (v20)
    {
      *v17 = *v18;
      v17[1] = v18[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v17[2] = v18[2];
      v17[3] = v18[3];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v17[4] = v18[4];
      v17[5] = v18[5];
      v17[6] = v18[6];
      v17[7] = v18[7];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v17[8] = v18[8];
      v17[9] = v18[9];
      v17[10] = v18[10];
      v17[11] = v18[11];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A57EAF2C((uint64_t)v17);
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v21;
      v22 = *((_OWORD *)v18 + 5);
      v24 = *((_OWORD *)v18 + 2);
      v23 = *((_OWORD *)v18 + 3);
      *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
      *((_OWORD *)v17 + 5) = v22;
      *((_OWORD *)v17 + 2) = v24;
      *((_OWORD *)v17 + 3) = v23;
    }
  }
  else if (v20)
  {
    *v17 = *v18;
    v17[1] = v18[1];
    v17[2] = v18[2];
    v17[3] = v18[3];
    v17[4] = v18[4];
    v17[5] = v18[5];
    v17[6] = v18[6];
    v17[7] = v18[7];
    v17[8] = v18[8];
    v17[9] = v18[9];
    v17[10] = v18[10];
    v17[11] = v18[11];
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    v25 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v25;
    v26 = *((_OWORD *)v18 + 2);
    v27 = *((_OWORD *)v18 + 3);
    v28 = *((_OWORD *)v18 + 5);
    *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
    *((_OWORD *)v17 + 5) = v28;
    *((_OWORD *)v17 + 2) = v26;
    *((_OWORD *)v17 + 3) = v27;
  }
  v29 = v6[8];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v32 = v6[9];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
  *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
  v35 = v6[15];
  v36 = (uint64_t)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *((unsigned __int8 *)a1 + v35 + 16);
  v39 = *((unsigned __int8 *)a2 + v35 + 16);
  if (v38 == 255)
  {
    if (v39 == 255)
    {
      v41 = *(_OWORD *)v37;
      *(_BYTE *)(v36 + 16) = v37[16];
      *(_OWORD *)v36 = v41;
    }
    else
    {
      v45 = v39 & 1;
      v46 = *(_QWORD *)v37;
      v47 = *((_QWORD *)v37 + 1);
      OUTLINED_FUNCTION_266_0();
      *(_QWORD *)v36 = v46;
      *(_QWORD *)(v36 + 8) = v47;
      *(_BYTE *)(v36 + 16) = v45;
    }
  }
  else if (v39 == 255)
  {
    sub_1A57EAF60(v36);
    v40 = v37[16];
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *(_BYTE *)(v36 + 16) = v40;
  }
  else
  {
    v42 = v39 & 1;
    v43 = *(_QWORD *)v37;
    v44 = *((_QWORD *)v37 + 1);
    OUTLINED_FUNCTION_266_0();
    *(_QWORD *)v36 = v43;
    *(_QWORD *)(v36 + 8) = v44;
    *(_BYTE *)(v36 + 16) = v42;
    sub_1A567FE60();
  }
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)((char *)a2 + v6[16]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1A57EC6CC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = v6[7];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  v17 = v15[5];
  v14[4] = v15[4];
  v14[5] = v17;
  v18 = v15[1];
  *v14 = *v15;
  v14[1] = v18;
  *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
  *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
  *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
  *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
  v19 = v6[15];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v20[16] = v21[16];
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)((char *)a2 + v6[16]);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1A57EC850(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = v6[7];
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  if (*(_QWORD *)((char *)a1 + v16 + 24))
  {
    if (*((_QWORD *)v18 + 3))
    {
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v19;
      swift_bridgeObjectRelease();
      v20 = *((_QWORD *)v18 + 3);
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
      *(_QWORD *)(v17 + 24) = v20;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v17 + 32) = *((_OWORD *)v18 + 2);
      v21 = *((_QWORD *)v18 + 7);
      *(_QWORD *)(v17 + 48) = *((_QWORD *)v18 + 6);
      *(_QWORD *)(v17 + 56) = v21;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v17 + 64) = *((_OWORD *)v18 + 4);
      v22 = *((_QWORD *)v18 + 11);
      *(_QWORD *)(v17 + 80) = *((_QWORD *)v18 + 10);
      *(_QWORD *)(v17 + 88) = v22;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1A57EAF2C(v17);
  }
  v23 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v17 + 32) = *((_OWORD *)v18 + 2);
  *(_OWORD *)(v17 + 48) = v23;
  v24 = *((_OWORD *)v18 + 5);
  *(_OWORD *)(v17 + 64) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v17 + 80) = v24;
  v25 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v25;
LABEL_12:
  v26 = v6[8];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = v6[9];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
  *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
  v36 = v6[15];
  v37 = (uint64_t)a1 + v36;
  v38 = (char *)a2 + v36;
  if (*((unsigned __int8 *)a1 + v36 + 16) != 255)
  {
    v39 = v38[16];
    if (v39 != 255)
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *(_BYTE *)(v37 + 16) = v39 & 1;
      sub_1A567FE60();
      goto LABEL_17;
    }
    sub_1A57EAF60(v37);
  }
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_BYTE *)(v37 + 16) = v38[16];
LABEL_17:
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)((char *)a2 + v6[16]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A57ECB1C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57ECB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for IndexableMessageInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1A57ECBA4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57ECBB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IndexableMessageInfo(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1A57ECC28()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexableMessageInfo(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t InternetMessageDate.parse()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57EDFFC(a1, a2, v8);
  swift_bridgeObjectRelease();
  v9 = sub_1A594A0EC();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1A57ECDB0(a1, a3);
    return sub_1A5510284((uint64_t)v8, &qword_1EE796470);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(a3, v8, v9);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
  }
}

uint64_t sub_1A57ECDB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  v48 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v43 - v7;
  v9 = sub_1A594A0EC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v43 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v43 - v16;
  v18 = qword_1EE7AA540;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v18 != -1)
    swift_once();
  v19 = *((_QWORD *)off_1EE7AA678 + 2);
  if (!v19)
    goto LABEL_17;
  v43 = v17;
  v46 = a2;
  v47 = v5;
  v45 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v20 = v45 + 40;
  do
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v21 = sub_1A57EE3F8();
    v22 = (void *)sub_1A594B3F4();
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setDateFormat_, v22);

    objc_msgSend(v21, sel_setLenient_, 0);
    v23 = (void *)sub_1A594B3F4();
    v24 = objc_msgSend(v21, sel_dateFromString_, v23);

    if (v24)
    {
      sub_1A594A0C8();

      v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v25(v8, v14, v9);
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
      v26(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v43;
        v25(v43, v8, v9);
        v28 = v46;
        v25(v46, v27, v9);
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v26)(v28, 0, 1, v9);
      }
    }
    else
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    v20 += 16;
    sub_1A5510284((uint64_t)v8, &qword_1EE796470);
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  v30 = *((_QWORD *)off_1EE7AA678 + 2);
  a2 = v46;
  if (v30)
  {
    v45 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v31 = v45 + 40;
    do
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v34 = sub_1A57EE3F8();
      v35 = (void *)sub_1A594B3F4();
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setDateFormat_, v35);

      objc_msgSend(v34, sel_setLenient_, 1);
      v36 = (void *)sub_1A594B3F4();
      v37 = objc_msgSend(v34, sel_dateFromString_, v36);

      if (v37)
      {
        sub_1A594A0C8();

        v38 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v33 = (uint64_t)v47;
        v38(v47, v14, v9);
        v32 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
        v32((char *)v33, 0, 1, v9);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33, 1, v9) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v39 = v44;
          v38(v44, (char *)v33, v9);
          v40 = v46;
          v38(v46, v39, v9);
          v41 = v40;
          v42 = 0;
          return v32(v41, v42, 1, v9);
        }
      }
      else
      {

        v32 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
        v33 = (uint64_t)v47;
        v32(v47, 1, 1, v9);
      }
      v31 += 16;
      sub_1A5510284(v33, &qword_1EE796470);
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v46;
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  }
  v41 = a2;
  v42 = 1;
  return v32(v41, v42, 1, v9);
}

uint64_t InternetMessageDate.init(from:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1A57ED2DC(a2);
  v5 = sub_1A594A1C4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  v6 = sub_1A594A0EC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return v4;
}

uint64_t sub_1A57ED2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  tm v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = sub_1A594BA18();
  *(_QWORD *)(v2 + 16) = 80;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  sub_1A57ED404(a1, (uint64_t)&v6);
  sub_1A57ED900(v2 + 32, &v6, 0x50uLL, &v5);
  if (v5 && *(_QWORD *)(v2 + 16) >= v5)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v3 = sub_1A594B61C();
    swift_bridgeObjectRelease_n();
    return v3;
  }
  else
  {
    result = sub_1A594C9C0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A57ED404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(unint64_t, _QWORD, uint64_t);
  uint64_t result;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v3 = v2;
  v59 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796538);
  MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A594A2A8();
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  MEMORY[0x1E0C80A78](v7);
  v51 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A5949C90();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79ADB0);
  v12 = sub_1A594A1B8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1A59AC380;
  v17 = *(void (**)(unint64_t, _QWORD, uint64_t))(v13 + 104);
  v17(v16 + v15, *MEMORY[0x1E0CB1188], v12);
  v17(v16 + v15 + v14, *MEMORY[0x1E0CB1178], v12);
  v17(v16 + v15 + 2 * v14, *MEMORY[0x1E0CB1140], v12);
  v17(v16 + v15 + 3 * v14, *MEMORY[0x1E0CB1130], v12);
  v17(v16 + v15 + 4 * v14, *MEMORY[0x1E0CB1160], v12);
  v17(v16 + v15 + 5 * v14, *MEMORY[0x1E0CB1158], v12);
  v17(v16 + v15 + 6 * v14, *MEMORY[0x1E0CB1198], v12);
  v17(v16 + v15 + 7 * v14, *MEMORY[0x1E0CB11A8], v12);
  sub_1A57EE724(v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v52 = v3;
  sub_1A594A194();
  swift_bridgeObjectRelease();
  result = sub_1A5949C60();
  if ((v19 & 1) != 0)
    v20 = 0;
  else
    v20 = result;
  if (v20 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v20 > 0x7FFFFFFF)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  result = sub_1A5949C54();
  if ((v21 & 1) != 0)
    v22 = 0;
  else
    v22 = result;
  if (v22 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_44;
  if (v22 > 0x7FFFFFFF)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  result = sub_1A5949C30();
  if ((v23 & 1) != 0)
    v24 = 0;
  else
    v24 = result;
  if (v24 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_46;
  if (v24 > 0x7FFFFFFF)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  result = sub_1A5949C24();
  if ((v25 & 1) != 0)
    v26 = 1;
  else
    v26 = result;
  if (v26 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_48;
  if (v26 > 0x7FFFFFFF)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  result = sub_1A5949C48();
  if ((v27 & 1) != 0)
    v28 = 1;
  else
    v28 = result;
  if (v28 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_50;
  if (v28 > 0x7FFFFFFF)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v29 = v28 - 1;
  if (__OFSUB__((_DWORD)v28, 1))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  result = sub_1A5949C3C();
  v31 = 100;
  if ((v30 & 1) == 0)
    v31 = result;
  if (v31 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_53;
  if (v31 > 0x7FFFFFFF)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v32 = v31 - 1900;
  if (__OFSUB__((_DWORD)v31, 1900))
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  result = sub_1A5949C6C();
  if ((v33 & 1) != 0)
    v34 = 1;
  else
    v34 = result;
  if (v34 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_56;
  if (v34 > 0x7FFFFFFF)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v35 = __OFSUB__((_DWORD)v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
LABEL_58:
    __break(1u);
    return result;
  }
  v53 = v36;
  LODWORD(v59) = v32;
  v37 = (uint64_t)v58;
  sub_1A5949C84();
  v39 = v56;
  v38 = v57;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v37, 1, v57) == 1)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v55);
    result = sub_1A5510284(v37, (uint64_t *)&unk_1EE796538);
    v40 = 0;
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
    v50 = a2;
    v42 = v26;
    v43 = v24;
    v44 = v29;
    v45 = v22;
    v46 = v20;
    v20 = (uint64_t)v51;
    v41(v51, v37, v38);
    v47 = v38;
    v40 = sub_1A594A284();
    v48 = v20;
    LODWORD(v20) = v46;
    LODWORD(v22) = v45;
    v29 = v44;
    LODWORD(v24) = v43;
    LODWORD(v26) = v42;
    a2 = v50;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v48, v47);
    result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v11, v55);
  }
  *(_DWORD *)a2 = v20;
  *(_DWORD *)(a2 + 4) = v22;
  *(_DWORD *)(a2 + 8) = v24;
  *(_DWORD *)(a2 + 12) = v26;
  v49 = v59;
  *(_DWORD *)(a2 + 16) = v29;
  *(_DWORD *)(a2 + 20) = v49;
  *(_DWORD *)(a2 + 24) = v53;
  *(_QWORD *)(a2 + 28) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a2 + 40) = v40;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_1A57ED900@<X0>(uint64_t result@<X0>, tm *a2@<X2>, size_t a3@<X1>, uint64_t *a4@<X8>)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (!result)
    goto LABEL_16;
  v6 = (char *)result;
  if (qword_1EE7AA538 != -1)
    swift_once();
  result = strftime_l(v6, a3, "%a, %d %b %Y %H:%M:%S %z", a2, (locale_t)qword_1EE7AA670);
  if (!result)
    goto LABEL_11;
  v8 = result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
  }
  else
  {
    v9 = a2->tm_gmtoff / 60 % 60 + 100 * (a2->tm_gmtoff / 3600);
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A1330);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1A59ABD10;
    v10 = MEMORY[0x1E0DEDC38];
    *(_QWORD *)(result + 56) = MEMORY[0x1E0DEDBC8];
    *(_QWORD *)(result + 64) = v10;
    if (v9 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v9 <= 0x7FFFFFFF)
      {
        *(_DWORD *)(result + 32) = v9;
        v11 = sub_1A594A860();
        result = swift_bridgeObjectRelease();
        v12 = v8 + v11;
        if (!__OFADD__(v8, v11))
          goto LABEL_12;
        __break(1u);
LABEL_11:
        v12 = 0;
LABEL_12:
        *a4 = v12;
        return result;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

locale_t sub_1A57EDA9C()
{
  locale_t result;

  result = newlocale(63, 0, 0);
  if (result)
    qword_1EE7AA670 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

uint64_t sub_1A57EDACC@<X0>(const char *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (**v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  void (**v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *p_tm_gmtoff;
  const char *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54[8];
  uint64_t v55;
  tm v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  sub_1A5949B40();
  v39 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v39);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A594A0EC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v45 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v44 = (char *)&v38 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v38 - v13;
  if (qword_1EE799020 != -1)
    swift_once();
  v15 = *((_QWORD *)off_1EE799018 + 2);
  if (v15)
  {
    v43 = v14;
    v41 = a2;
    v42 = v2;
    p_tm_gmtoff = &v56.tm_gmtoff;
    v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v17 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v40 = v17;
    v18 = (unint64_t *)(v17 + 40);
    v48 = a1;
    v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    while (1)
    {
      v49 = &v38;
      v19 = *(v18 - 1);
      v20 = *v18;
      MEMORY[0x1E0C80A78](v17);
      *(&v38 - 4) = (uint64_t)a1;
      *(&v38 - 3) = v19;
      *(&v38 - 2) = v20;
      if ((v20 & 0x1000000000000000) == 0)
      {
        if ((v20 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)v54 = v19;
          v55 = v20 & 0xFFFFFFFFFFFFFFLL;
          memset(&v56, 0, 36);
          v25 = p_tm_gmtoff;
          *p_tm_gmtoff = 0;
          v25[1] = 0;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v26 = strptime_l(a1, v54, &v56, 0);
          if (v26)
          {
            v27 = v26;
            v28 = v8;
            mktime(&v56);
            v29 = v45;
            sub_1A594A0A4();
            if (*v27)
            {
              v52 = v19;
              v53 = v20;
              v50 = 31269;
              v51 = 0xE200000000000000;
              sub_1A57D6AB8();
              if ((sub_1A594C498() & 1) == 0 || (sub_1A57EE228() & 1) == 0)
              {
                v8 = v28;
                (*(void (**)(char *, uint64_t))(v28 + 8))(v45, v7);
                goto LABEL_23;
              }
              v8 = v28;
              (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v45, v7);
            }
            else
            {
              v31 = v29;
              v8 = v28;
              (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v31, v7);
            }
            goto LABEL_26;
          }
LABEL_20:
          v30 = 1;
          goto LABEL_28;
        }
        if ((v19 & 0x1000000000000000) != 0)
        {
          memset(&v56, 0, 36);
          v21 = p_tm_gmtoff;
          *p_tm_gmtoff = 0;
          v21[1] = 0;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v22 = strptime_l(a1, (const char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32), &v56, 0);
          if (v22)
          {
            v23 = v22;
            mktime(&v56);
            v24 = v44;
            sub_1A594A0A4();
            if (*v23)
            {
              *(_QWORD *)v54 = v19;
              v55 = v20;
              v52 = 31269;
              v53 = 0xE200000000000000;
              sub_1A57D6AB8();
              if ((sub_1A594C498() & 1) != 0 && (sub_1A57EE228() & 1) != 0)
              {
                (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v6, v44, v7);
                goto LABEL_26;
              }
              (*(void (**)(char *, uint64_t))(v8 + 8))(v44, v7);
LABEL_23:
              v30 = 1;
LABEL_27:
              v16 = v46;
LABEL_28:
              (*v16)(v6, v30, 1, v7);
              swift_bridgeObjectRelease();
              a1 = v48;
              goto LABEL_29;
            }
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v6, v24, v7);
LABEL_26:
            v30 = 0;
            goto LABEL_27;
          }
          goto LABEL_20;
        }
      }
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v35 = v42;
      sub_1A594C6FC();
      v42 = v35;
      swift_bridgeObjectRelease();
LABEL_29:
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        v17 = sub_1A5510284((uint64_t)v6, &qword_1EE796470);
      }
      else
      {
        v32 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v33 = v43;
        v32(v43, v6, v7);
        sub_1A594A044();
        if (v34 > -900000000.0)
        {
          swift_bridgeObjectRelease();
          a2 = v41;
          v32(v41, v33, v7);
          v36 = 0;
          return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))*v16)(a2, v36, 1, v7);
        }
        v17 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v33, v7);
      }
      v18 += 2;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        a2 = v41;
        break;
      }
    }
  }
  v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v36 = 1;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))*v16)(a2, v36, 1, v7);
}

uint64_t sub_1A57EDFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  const char *v3;
  _QWORD v5[2];

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_8;
  if ((a2 & 0x2000000000000000) != 0)
  {
    v5[0] = a1;
    v5[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v3 = (const char *)v5;
    return sub_1A57EDACC(v3, a3);
  }
  if ((a1 & 0x1000000000000000) == 0)
  {
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
    return sub_1A594C6FC();
  }
  v3 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  return sub_1A57EDACC(v3, a3);
}

uint64_t sub_1A57EE098@<X0>(const char *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[4];
  tm v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v10 = sub_1A594A0EC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(&v19, 0, 36);
  v19.tm_gmtoff = 0;
  v19.tm_zone = 0;
  v14 = strptime_l(a2, a1, &v19, 0);
  if (!v14)
    goto LABEL_7;
  v15 = v14;
  mktime(&v19);
  sub_1A594A0A4();
  if (*v15)
  {
    v18[2] = a3;
    v18[3] = a4;
    v18[0] = 31269;
    v18[1] = 0xE200000000000000;
    sub_1A57D6AB8();
    if ((sub_1A594C498() & 1) == 0 || (sub_1A57EE228() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_7:
      v16 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, v16, 1, v10);
    }
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
  v16 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, v16, 1, v10);
}

id sub_1A57EE228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v0 = sub_1A5949B40();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A594B610();
  v4 = objc_allocWithZone(MEMORY[0x1E0CB3900]);
  v5 = (void *)sub_1A594B3F4();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithString_, v5);

  sub_1A594C30C();
  swift_bridgeObjectRelease();
  sub_1A594C2F4();
  v8 = v7;
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_5;
  sub_1A5949B1C();
  sub_1A594C300();
  v10 = v9;
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v3, v0);
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_5;
  sub_1A594C2F4();
  v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    sub_1A5949B28();
    sub_1A594C300();
    swift_bridgeObjectRelease();
    v11(v3, v0);
    v14 = objc_msgSend(v6, sel_isAtEnd);

  }
  else
  {
LABEL_5:

    return 0;
  }
  return v14;
}

void sub_1A57EE3B4()
{
  off_1EE7AA678 = &unk_1E4E833E8;
}

void sub_1A57EE3C8()
{
  off_1EE799018 = &unk_1E4E82F78;
}

uint64_t sub_1A57EE3DC@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A57EE098(a1, *(const char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

id sub_1A57EE3F8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  _QWORD v22[2];
  _OWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;

  v0 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796538);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1A594A170();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A57EEA04(0, (unint64_t *)&unk_1EE79A618);
  v7 = (void *)sub_1A594C2DC();
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_currentThread);
  v10 = objc_msgSend(v9, sel_threadDictionary);

  v11 = v7;
  v12 = objc_msgSend(v10, sel_objectForKeyedSubscript_, v11);

  if (v12)
  {
    sub_1A594C534();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_1A57EE9BC((uint64_t)v23, (uint64_t)v24);
  if (v25)
  {
    sub_1A57EEA04(0, (unint64_t *)&unk_1EE79A050);
    if ((swift_dynamicCast() & 1) != 0)
    {

      return (id)v22[1];
    }
  }
  else
  {
    sub_1A5510284((uint64_t)v24, &qword_1EE79B528);
  }
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  sub_1A594A134();
  v14 = (void *)sub_1A594A140();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v13, sel_setLocale_, v14);

  sub_1A594A290();
  v15 = sub_1A594A2A8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v2, 1, v15) != 1)
  {
    v17 = (void *)sub_1A594A29C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v2, v15);
  }
  objc_msgSend(v13, sel_setTimeZone_, v17);

  v18 = objc_msgSend(v8, sel_currentThread);
  v19 = objc_msgSend(v18, sel_threadDictionary);

  v20 = v11;
  objc_msgSend(v19, sel_setObject_forKeyedSubscript_, v13, v20);

  return v13;
}

uint64_t sub_1A57EE724(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1A594A1B8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79A680);
    v10 = sub_1A594C6E4();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1A57EE97C(&qword_1EE7964F0, MEMORY[0x1E0CB11D0]);
      v14 = sub_1A594B148();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v5, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1A57EE97C(&qword_1EE796500, MEMORY[0x1E0CB11D8]);
          v20 = sub_1A594B37C();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1A57EE97C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A594A1B8();
    result = MEMORY[0x1A85B1874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A57EE9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57EEA04(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeInternetMessageDate()
{
  return &type metadata for UnsafeInternetMessageDate;
}

uint64_t sub_1A57EEA4C(char a1)
{
  char v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  char v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
      v1 = 13;
    else
      v1 = 10;
    v6 = v1;
    v3 = &v6;
    v4 = (char *)v7;
    v2 = MEMORY[0x1E0DEAC20];
    v8 = MEMORY[0x1E0DEAC20];
    v9 = MEMORY[0x1E0CB1AA8];
  }
  else
  {
    v2 = MEMORY[0x1E0DEAC20];
    v8 = MEMORY[0x1E0DEAC20];
    v9 = MEMORY[0x1E0CB1AA8];
    v3 = "\r\n";
    v4 = "";
  }
  v7[0] = v3;
  v7[1] = v4;
  __swift_project_boxed_opaque_existential_1_0(v7, v2);
  sub_1A5949F60();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t sub_1A57EEB1C(char a1, uint64_t (*a2)(char *, char *))
{
  return sub_1A57EEB60(a1, a2);
}

uint64_t sub_1A57EEB60(char a1, uint64_t (*a2)(char *, char *))
{
  char *v3;
  char *v4;
  char v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
    {
      v6 = 13;
      v3 = &v7;
      v4 = &v6;
    }
    else
    {
      v7 = 10;
      v3 = (char *)&v8;
      v4 = &v7;
    }
  }
  else
  {
    v4 = "\r\n";
    v3 = "";
  }
  return a2(v4, v3);
}

BOOL static LineEnding.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t LineEnding.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t _s9IMAP2MIME15InputLineEndingO9hashValueSivg_0()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t Message.streamWithConvertedLineEndings(input:output:ensureTrailingNewline:_:)(int a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = sub_1A594AE60();
  v11 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[2] = a1;
  v21[3] = a2;
  v25[16] = a1;
  v25[17] = a2;
  v25[18] = a3;
  v22 = a4;
  v23 = a5;
  v26 = a4;
  v27 = a5;
  result = Message.isEmpty.getter();
  if ((result & 1) == 0)
  {
    sub_1A57EF8F4(v5, (uint64_t)v16);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v18 = v24;
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v24);
    MEMORY[0x1E0C80A78](v19);
    *(_QWORD *)&v21[-8] = v13;
    *(_QWORD *)&v21[-6] = sub_1A57EF048;
    v20 = v25;
    sub_1A594ADE8();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  }
  return result;
}

uint64_t sub_1A57EF048(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
    v3 = a2 - result;
  else
    v3 = 0;
  if ((v3 & 0x8000000000000000) == 0)
    return sub_1A57EF0A0(*(unsigned __int8 *)(v2 + 16), *(_BYTE *)(v2 + 17), *(unsigned __int8 *)(v2 + 18), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), 0, v3);
  __break(1u);
  return result;
}

uint64_t sub_1A57EF0A0(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6 != a7)
  {
    if (a2 != 2)
    {
      if (a2 == 1)
        __asm { BR              X8 }
      __asm { BR              X8 }
    }
    __asm { BR              X8 }
  }
  return result;
}

uint64_t sub_1A57EF8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Message.Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A57EF938(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;

  v5 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return a3(a1, a1 + v5);
}

uint64_t sub_1A57EF994(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24);
  v4 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return v3(a1, a1 + v4);
}

unint64_t sub_1A57EF9F4()
{
  unint64_t result;

  result = qword_1EE7AA680;
  if (!qword_1EE7AA680)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for InputLineEnding, &type metadata for InputLineEnding);
    atomic_store(result, (unint64_t *)&qword_1EE7AA680);
  }
  return result;
}

unint64_t sub_1A57EFA3C()
{
  unint64_t result;

  result = qword_1EE7AA688;
  if (!qword_1EE7AA688)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for LineEnding, &type metadata for LineEnding);
    atomic_store(result, (unint64_t *)&qword_1EE7AA688);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InputLineEnding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A57EFACC + 4 * byte_1A59D81A1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A57EFB00 + 4 * asc_1A59D819C[v4]))();
}

uint64_t sub_1A57EFB00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57EFB08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57EFB10);
  return result;
}

uint64_t sub_1A57EFB1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57EFB24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A57EFB28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57EFB30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputLineEnding()
{
  return &type metadata for InputLineEnding;
}

uint64_t storeEnumTagSinglePayload for LineEnding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A57EFB98 + 4 * byte_1A59D81AB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A57EFBCC + 4 * byte_1A59D81A6[v4]))();
}

uint64_t sub_1A57EFBCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57EFBD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57EFBDCLL);
  return result;
}

uint64_t sub_1A57EFBE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57EFBF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A57EFBF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57EFBFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineEnding()
{
  return &type metadata for LineEnding;
}

uint64_t sub_1A57EFC18(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return sub_1A57EF938(a1, a2, a3);
}

uint64_t static ListID.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_1A594CD38();
}

uint64_t sub_1A57EFC58(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2 - result;
  if (!result)
    v2 = 0;
  if (v2 < 0)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    return result;
  }
  if (!v2)
    return 0;
  v3 = 0;
  while (1)
  {
    if (v3 >= v2)
    {
      __break(1u);
      goto LABEL_70;
    }
    v4 = *(unsigned __int8 *)(result + v3);
    if (v4 == 34 || v4 == 60)
      goto LABEL_10;
    v9 = v3 + 1;
    v5 = v2;
    if (v3 + 1 == v2)
      break;
    if (v3 + 1 >= v2)
      goto LABEL_81;
    LODWORD(v5) = *(unsigned __int8 *)(result + v9);
    if ((_DWORD)v5 != 34 && (_DWORD)v5 != 60)
    {
      v10 = v3;
      while (1)
      {
        v5 = v10 + 2;
        if (__OFADD__(v10 + 1, 1))
          goto LABEL_72;
        if (v2 < v5)
          goto LABEL_73;
        if (v5 < ++v10)
          goto LABEL_74;
        if (v5 == v2)
        {
          v5 = v2;
          goto LABEL_18;
        }
        v11 = *(unsigned __int8 *)(result + v5);
        if (v11 == 34 || v11 == 60)
          goto LABEL_18;
      }
    }
LABEL_23:
    v3 = v9;
    if (v2 < v9)
      goto LABEL_51;
LABEL_10:
    if (v3 == v2)
      return 0;
    if (v3 >= v2)
      goto LABEL_71;
    LODWORD(v5) = *(unsigned __int8 *)(result + v3);
    if ((_DWORD)v5 != 34)
      goto LABEL_52;
    v6 = v3 + 1;
    v7 = v2;
    if (v3 + 1 != v2)
    {
      if (v3 + 1 >= v2)
        goto LABEL_80;
      if (*(_BYTE *)(result + v6) == 34)
      {
        v8 = v3 + 1;
      }
      else
      {
        v8 = v2;
        if (v3 + 2 == v2)
        {
LABEL_26:
          if (v8 <= v3)
            goto LABEL_75;
        }
        else
        {
          if (v3 + 2 >= v2)
            goto LABEL_83;
          v8 = v3 + 2;
          if (*(_BYTE *)(result + v3 + 2) != 34)
          {
            while (1)
            {
              v8 = v6 + 2;
              if (__OFADD__(v6 + 1, 1))
                goto LABEL_77;
              if (v2 < v8)
                goto LABEL_78;
              if (v8 < ++v6)
                goto LABEL_79;
              if (v8 == v2)
              {
                v8 = v2;
                goto LABEL_26;
              }
              if (*(_BYTE *)(result + v8) == 34)
                goto LABEL_26;
            }
          }
        }
      }
      if (v2 < v8)
        goto LABEL_76;
      v7 = v2;
      if (v8 != v2)
      {
        if (v8 >= v2)
          goto LABEL_82;
        v7 = v8 + 1;
      }
    }
    v3 = v7;
    if (v7 == v2)
      return 0;
  }
LABEL_18:
  v9 = v5;
  if (v5 >= v3)
    goto LABEL_23;
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  if ((_DWORD)v5 == 60)
  {
    v25 = v3 + 1;
    v26 = v2;
    v27 = result;
    v28 = a2;
    result = sub_1A57F0BF0(0x3Eu);
    if (result != v12 && v25 != v26)
    {
      if (v25 >= v26)
        goto LABEL_86;
      if (*(_BYTE *)(v27 + v25) == 62)
      {
        v15 = result;
        v16 = v12;
        v17 = v13;
        v23 = 0;
        v24 = 0xE000000000000000;
        ++v25;
        if (v13)
          v18 = v14 - v13;
        else
          v18 = 0;
        v19 = result;
        while (v19 < v16)
        {
          if (v15 < 0 || v19 >= v18)
            goto LABEL_85;
          v20 = *(unsigned __int8 *)(v17 + v19);
          if ((v20 - 127) < 0xFFFFFFA2)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          ++v19;
          v22 = v20;
          v21 = MEMORY[0x1A85AD9BC](&v22, 1);
          MEMORY[0x1A85ADA64](v21);
          result = swift_bridgeObjectRelease();
          if (v16 == v19)
            return v23;
        }
        goto LABEL_84;
      }
    }
  }
  return 0;
}

uint64_t ListID.hash(into:)()
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t ListID.hashValue.getter()
{
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57F0010()
{
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57F0068()
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57F00AC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1A594CD38();
}

uint64_t ListID.description.getter(uint64_t a1)
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

unint64_t sub_1A57F0110()
{
  unint64_t result;

  result = qword_1EE7AA690;
  if (!qword_1EE7AA690)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ListID, &type metadata for ListID);
    atomic_store(result, (unint64_t *)&qword_1EE7AA690);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListID()
{
  return &type metadata for ListID;
}

void sub_1A57F0164(char a1)
{
  __asm { BR              X10 }
}

char *sub_1A57F01A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1A57F0C7C("\r\n\r\n", 4uLL, v2, v0, v1);
}

unsigned __int8 *sub_1A57F0378(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD v20[3];

  v5 = a3;
  v7 = isStackAllocationSafe;
  v20[2] = *MEMORY[0x1E0C80C00];
  if (a2 == isStackAllocationSafe)
  {
LABEL_13:
    if (a3)
      v12 = (unsigned __int8 *)(a3 + a2);
    else
      v12 = 0;
    if (a3)
      v13 = (unsigned __int8 *)(a3 + isStackAllocationSafe);
    else
      v13 = 0;
    sub_1A57D2444(v13, v12, v20);
    if (!v4)
      return (unsigned __int8 *)v20[0];
    return (unsigned __int8 *)v5;
  }
  v8 = a4 - a3;
  if (!a3)
    v8 = 0;
  v9 = isStackAllocationSafe;
  while (1)
  {
    if (v9 >= a2)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (isStackAllocationSafe < 0 || v9 >= v8)
      goto LABEL_33;
    v10 = *(unsigned __int8 *)(a3 + v9);
    if (v10 == 13 || v10 == 10)
      break;
    if (a2 == ++v9)
      goto LABEL_13;
  }
  if (v8 < a2)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  if (a2 - isStackAllocationSafe < 0)
    goto LABEL_35;
  if (a2 - isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v15 = sub_1A57F13EC((unsigned __int8 *)&v20[-1] - v14, v7, a2, v5);
    if (v4)
      swift_willThrow();
    else
      return v15;
  }
  else
  {
    v16 = (unsigned __int8 *)swift_slowAlloc();
    v17 = sub_1A57F13EC(v16, v7, a2, v5);
    if (!v4)
      v5 = (uint64_t)v17;
    MEMORY[0x1A85B1964](v16, -1, -1);
  }
  return (unsigned __int8 *)v5;
}

uint64_t sub_1A57F0560(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v9 = isStackAllocationSafe;
  v21[1] = *MEMORY[0x1E0C80C00];
  if (a2 == isStackAllocationSafe)
  {
LABEL_13:
    if (a3)
      v15 = a3 + a2;
    else
      v15 = 0;
    if (a3)
      v16 = a3 + isStackAllocationSafe;
    else
      v16 = 0;
    return a5(v16, v15);
  }
  v11 = a4 - a3;
  if (!a3)
    v11 = 0;
  v12 = isStackAllocationSafe;
  while (1)
  {
    if (v12 >= a2)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (isStackAllocationSafe < 0 || v12 >= v11)
      goto LABEL_29;
    v13 = *(unsigned __int8 *)(a3 + v12);
    if (v13 == 13 || v13 == 10)
      break;
    if (a2 == ++v12)
      goto LABEL_13;
  }
  if (v11 < a2)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  v18 = a2 - isStackAllocationSafe;
  if (a2 - isStackAllocationSafe < 0)
    goto LABEL_31;
  if (v18 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = sub_1A57F10F4((uint64_t)v21 - v19, (uint64_t)v21 + v18 - v19, v9, a2, a3, a4, a5);
    if (v5)
      return swift_willThrow();
  }
  else
  {
    v20 = swift_slowAlloc();
    sub_1A57F10F4(v20, v20 + v18, v9, a2, a3, a4, a5);
    return MEMORY[0x1A85B1964](v20, -1, -1);
  }
  return result;
}

uint64_t sub_1A57F074C(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)&loc_1A57F0758 + *((int *)qword_1A57F0960 + a1)))();
}

uint64_t sub_1A57F0768()
{
  int64_t *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = v0[2];
  v3 = v0[3] - v2;
  if (!v2)
    v3 = 0;
  if (v1 < 0 || v3 < v1)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = v0[1];
  if (v4 < 0 || v3 < v4)
  {
LABEL_21:
    __break(1u);
    JUMPOUT(0x1A57F091CLL);
  }
  if (v4 - v1 < 2)
    return 0;
  if (v4 <= (unint64_t)v1)
  {
    __break(1u);
    JUMPOUT(0x1A57F092CLL);
  }
  if (*(_BYTE *)(v2 + v1) != 13)
    return 0;
  v5 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v5 < v1 || v5 >= v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x1A57F094CLL);
  }
  if (*(_BYTE *)(v2 + v5) != 10)
    return 0;
  v6 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v4 < v6)
  {
LABEL_26:
    __break(1u);
    JUMPOUT(0x1A57F0958);
  }
  if (v6 < v1)
  {
    __break(1u);
    JUMPOUT(0x1A57F07F8);
  }
  *v0 = v6;
  return 1;
}

void sub_1A57F0970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *v0;
  if (*v0 == v2)
    goto LABEL_7;
  if (*v0 >= v2)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v5 = *v0;
  if (*(unsigned __int8 *)(v3 + v1) - 58 < 0xFFFFFFF6)
    goto LABEL_7;
  v5 = v1 + 1;
  if (v1 + 1 == v2)
  {
LABEL_5:
    v5 = v2;
LABEL_6:
    *v0 = v5;
    if (v5 < v1)
      goto LABEL_38;
LABEL_7:
    if (v2 >= v5)
      goto LABEL_8;
    goto LABEL_27;
  }
  if (v1 + 1 >= v2)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if (*(unsigned __int8 *)(v3 + v5) - 58 >= 0xFFFFFFF6)
    goto LABEL_28;
  *v0 = v5;
  if (v2 < v5)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    v12 = v1;
    while (1)
    {
      v5 = v12 + 2;
      if (__OFADD__(v12 + 1, 1))
        goto LABEL_39;
      if (v2 < v5)
        goto LABEL_40;
      if (v5 < ++v12)
        goto LABEL_41;
      if (v5 == v2)
        goto LABEL_5;
      if (*(unsigned __int8 *)(v3 + v5) - 58 < 0xFFFFFFF6)
        goto LABEL_6;
    }
  }
LABEL_8:
  v6 = v5 - v1;
  if (v5 == v1)
    return;
  v7 = v4 - v3;
  if (!v3)
    v7 = 0;
  if (v1 < 0 || v7 < v1)
    goto LABEL_43;
  if (v5 < 0 || v7 < v5)
    goto LABEL_44;
  if (v6 > 8)
  {
    *v0 = v1;
    return;
  }
  v8 = 0;
  if (v3)
  {
    v9 = (unsigned __int8 *)(v3 + v1);
    while (is_mul_ok(v8, 0xAuLL))
    {
      v10 = *v9 - 48;
      if ((v10 & 0xFFFFFF00) != 0)
        goto LABEL_36;
      v11 = __CFADD__(10 * v8, v10);
      v8 = 10 * v8 + v10;
      if (v11)
        goto LABEL_37;
      ++v9;
      if (!--v6)
        return;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
}

void sub_1A57F0AF0(char a1)
{
  __asm { BR              X10 }
}

char *sub_1A57F0B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1A57F0C7C("\r\n", 2uLL, v2, v1, v0);
}

uint64_t sub_1A57F0BF0(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = *v1;
  if (*v1 != v4)
  {
    if (*v1 >= v4)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    v6 = *v1;
    if (*(unsigned __int8 *)(v5 + result) != a1)
    {
      v6 = *v1;
      while (1)
      {
        if (v4 <= v6)
        {
          __break(1u);
          goto LABEL_14;
        }
        if (v4 - 1 == v6)
          break;
        v7 = *(unsigned __int8 *)(v5 + 1 + v6++);
        if (v7 == a1)
          goto LABEL_10;
      }
      v6 = v1[1];
LABEL_10:
      *v1 = v6;
      if (v6 >= result)
        goto LABEL_11;
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
LABEL_11:
  if (v4 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

char *sub_1A57F0C7C(void *__little, size_t __little_len, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  char *v10;
  char *v11;

  if (!a5)
    return 0;
  v7 = a5 + a3;
  v8 = a4 - a3;
  result = (char *)memmem((const void *)(a5 + a3), a4 - a3, __little, __little_len);
  if (!result)
    return result;
  v10 = &result[-v7];
  if ((uint64_t)&result[-v7] < 0)
    return 0;
  v11 = &v10[__little_len];
  if (__OFADD__(v10, __little_len))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < (uint64_t)v11)
    return 0;
  result = &v10[a3];
  if (__OFADD__(v10, a3))
    goto LABEL_14;
  if (__OFADD__(v11, a3))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if ((uint64_t)v11 < (uint64_t)v10 || (uint64_t)&v11[a3] < (uint64_t)result)
    goto LABEL_16;
  return result;
}

char *sub_1A57F0D24(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  char *v9;

  if (!a4)
    return 0;
  v5 = a4 + a2;
  v6 = a3 - a2;
  result = (char *)memchr((void *)(a4 + a2), a1, a3 - a2);
  if (!result)
    return result;
  v8 = &result[-v5];
  if ((uint64_t)&result[-v5] < 0)
    return 0;
  v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 < (uint64_t)v9)
    return 0;
  result = &v8[a2];
  if (__OFADD__(v8, a2))
    goto LABEL_14;
  if (__OFADD__(v9, a2))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if ((uint64_t)v9 < (uint64_t)v8 || (uint64_t)&v9[a2] < (uint64_t)result)
    goto LABEL_16;
  return result;
}

void sub_1A57F0DC4(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  v2 = *v1;
  v3 = v1[1];
  v4 = 0uLL;
  if (*v1 == v3)
  {
LABEL_9:
    v2 = 0;
    v12 = 0;
    v13 = 1;
LABEL_10:
    *(_QWORD *)a1 = v2;
    *(_QWORD *)(a1 + 8) = v12;
    *(_OWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 32) = v13;
    return;
  }
  if (*v1 < v3)
  {
    v5 = *((_OWORD *)v1 + 1);
    v6 = v1[2];
    v7 = *(unsigned __int8 *)(v6 + v2);
    if ((v7 - 127) >= 0xFFFFFFA2)
    {
      v8 = v7 - 34;
      v9 = v8 > 0x3B;
      v10 = (1 << v8) & 0xE0000007F0024C1;
      if (v9 || v10 == 0)
      {
        v14 = v2 + 1;
        v15 = *v1;
        while (1)
        {
          v12 = v14;
          if (v3 <= v14 - 1)
            goto LABEL_24;
          if (v3 == v14)
            break;
          ++v15;
          v16 = *(unsigned __int8 *)(v6 + v14);
          if ((v16 - 127) < 0xFFFFFFA2)
          {
            v12 = v15;
LABEL_19:
            *v1 = v12;
            if (v2 == v12)
              goto LABEL_9;
            if (v12 >= v2)
            {
              v13 = 0;
              v4 = v5;
              goto LABEL_10;
            }
            goto LABEL_25;
          }
          ++v14;
          v17 = v16 - 34;
          v9 = v17 > 0x3B;
          v18 = (1 << v17) & 0xE0000007F0024C1;
          if (!v9 && v18 != 0)
            goto LABEL_19;
        }
        v12 = v1[1];
        goto LABEL_19;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_1A57F0EC4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A57F0EF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[2];
  if (v2)
    v3 = v0[3] - v2;
  else
    v3 = 0;
  if (v1 < 0 || v3 < v1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = v0[1];
  if (v4 < 0 || v3 < v4)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x1A57F10C0);
  }
  if (v4 - v1 < 2)
    return 0;
  v5 = v4 - 2;
  if (v4 - 2 < v1)
  {
    __break(1u);
    JUMPOUT(0x1A57F10CCLL);
  }
  if (*(_BYTE *)(v2 + v5) != 13 || *(_BYTE *)(v4 + v2 - 1) != 10)
    return 0;
  v0[1] = v5;
  return 1;
}

uint64_t sub_1A57F10F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v14;

  v7 = a4 - a3;
  if (a4 <= a3)
  {
LABEL_11:
    if (!result)
    {
      v14 = 0;
      return a7(result, v14);
    }
    v8 = 0;
LABEL_15:
    v14 = result + v8;
    return a7(result, v14);
  }
  v8 = 0;
  v9 = (unsigned __int8 *)(a5 + a3);
  do
  {
    v11 = *v9++;
    v10 = v11;
    if (v11 != 13 && v10 != 10)
    {
      *(_BYTE *)(result + v8) = v10;
      if (__OFADD__(v8++, 1))
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    --v7;
  }
  while (v7);
  if (result)
  {
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_15;
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    v14 = 0;
    result = 0;
    return a7(result, v14);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A57F1188(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t var1;

  v6 = 0;
  v7 = a3 - a2;
  if (a3 <= a2)
    goto LABEL_12;
  v8 = (unsigned __int8 *)(a4 + a2);
  while (1)
  {
    v10 = *v8++;
    v9 = v10;
    if (v10 != 13 && v9 != 10)
    {
      *((_BYTE *)result + v6) = v9;
      if (__OFADD__(v6++, 1))
        break;
    }
    if (!--v7)
      goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
LABEL_12:
    result = a5(&var1);
    if (!v5)
      return (_QWORD *)var1;
  }
  return result;
}

_QWORD *sub_1A57F1208(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t), _QWORD *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  v11 = isStackAllocationSafe;
  v23 = *MEMORY[0x1E0C80C00];
  if (a2 == isStackAllocationSafe)
  {
LABEL_13:
    if (a3)
      v16 = a3 + a2;
    else
      v16 = 0;
    if (a3)
      v17 = a3 + isStackAllocationSafe;
    else
      v17 = 0;
    a5((uint64_t *)((char *)&v22 + 7), v17, v16);
    if (!v6)
      return (_QWORD *)HIBYTE(v22);
    return a6;
  }
  v12 = a4 - a3;
  if (!a3)
    v12 = 0;
  v13 = isStackAllocationSafe;
  while (1)
  {
    if (v13 >= a2)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (isStackAllocationSafe < 0 || v13 >= v12)
      goto LABEL_31;
    v14 = *(unsigned __int8 *)(a3 + v13);
    if (v14 == 13 || v14 == 10)
      break;
    if (a2 == ++v13)
      goto LABEL_13;
  }
  if (v12 < a2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  if (a2 - isStackAllocationSafe < 0)
    goto LABEL_33;
  if (a2 - isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v19 = sub_1A57F1188((uint64_t *)((char *)&v22 - v18), v11, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr))a5);
    if (v6)
      swift_willThrow();
    else
      return v19;
  }
  else
  {
    v20 = (_QWORD *)swift_slowAlloc();
    a6 = sub_1A57F1188(v20, v11, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr))a5);
    MEMORY[0x1A85B1964](v20, -1, -1);
  }
  return a6;
}

unsigned __int8 *sub_1A57F13EC(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  v5 = 0;
  v6 = a3 - a2;
  if (a3 <= a2)
    goto LABEL_12;
  v7 = (unsigned __int8 *)(a4 + a2);
  while (1)
  {
    v9 = *v7++;
    v8 = v9;
    if (v9 != 13 && v8 != 10)
    {
      result[v5] = v8;
      if (__OFADD__(v5++, 1))
        break;
    }
    if (!--v6)
      goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
LABEL_12:
    v12 = &result[v5];
    if (result)
      v13 = v12;
    else
      v13 = 0;
    result = (unsigned __int8 *)sub_1A57D2444(result, v13, &v14);
    if (!v4)
      return (unsigned __int8 *)v14;
  }
  return result;
}

_BYTE *sub_1A57F1468@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result | 0x20;
  return result;
}

uint64_t MediaType.init(type:subtype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v11 = sub_1A594B49C();
  v12 = v10;
  if ((v11 != 0x72617069746C756DLL || v10 != 0xE900000000000074) && (sub_1A594CD38() & 1) == 0)
  {
    if (v11 == 0x746163696C707061 && v12 == 0xEB000000006E6F69 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 1;
    }
    else if (v11 == 0x6F69647561 && v12 == 0xE500000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 2;
    }
    else if (v11 == 0x6567616D69 && v12 == 0xE500000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 3;
    }
    else if (v11 == 0x6567617373656DLL && v12 == 0xE700000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 4;
    }
    else if (v11 == 1954047348 && v12 == 0xE400000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 5;
    }
    else if (v11 == 0x6F65646976 && v12 == 0xE500000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 6;
    }
    else if (v11 == 1953394534 && v12 == 0xE400000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 7;
    }
    else if (v11 == 0x656C706D617865 && v12 == 0xE700000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 8;
    }
    else
    {
      if (v11 == 0x6C65646F6DLL && v12 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = sub_1A594CD38();
        result = swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          v17 = 10;
          goto LABEL_25;
        }
      }
      result = swift_bridgeObjectRelease();
      v17 = 9;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (a4)
  {
    v15 = sub_1A594B49C();
    v16 = v14;
    if (v15 == 0x646578696DLL && v14 == 0xE500000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 1;
      goto LABEL_25;
    }
    if (v15 == 0x747365676964 && v16 == 0xE600000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 2;
      goto LABEL_25;
    }
    if (v15 == 0x74616E7265746C61 && v16 == 0xEB00000000657669 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 3;
      goto LABEL_25;
    }
    if (v15 == 0x646574616C6572 && v16 == 0xE700000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 4;
      goto LABEL_25;
    }
    if (v15 == 0x74726F706572 && v16 == 0xE600000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 5;
      goto LABEL_25;
    }
    if (v15 == 0x64656E676973 && v16 == 0xE600000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 6;
      goto LABEL_25;
    }
    if (v15 == 0x6574707972636E65 && v16 == 0xE900000000000064 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 7;
      goto LABEL_25;
    }
    if (v15 == 0x7461642D6D726F66 && v16 == 0xE900000000000061 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 8;
      goto LABEL_25;
    }
    if (v15 == 0x2D646578696D2D78 && v16 == 0xEF6563616C706572 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 9;
      goto LABEL_25;
    }
    if (v15 == 0x676E617265747962 && v16 == 0xE900000000000065)
    {
      swift_bridgeObjectRelease();
LABEL_103:
      result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      v17 = 0;
      a2 = 10;
      goto LABEL_25;
    }
    v19 = sub_1A594CD38();
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      goto LABEL_103;
    v17 = 0;
LABEL_16:
    a1 = a3;
    a2 = a4;
    a3 = 0;
    a4 = 0;
    goto LABEL_25;
  }
  a2 = 0;
  v17 = 0;
  a1 = a3;
  a3 = 0;
LABEL_25:
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_BYTE *)(a5 + 32) = v17;
  return result;
}

uint64_t sub_1A57F1E44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A57F1E84
                                                            + 4 * asc_1A59D8380[a1]))(0x74616E7265746C61, 0xEB00000000657669);
}

uint64_t sub_1A57F1E84()
{
  return 0x756F64656C707061;
}

uint64_t sub_1A57F1EA4()
{
  return 0x676E617265747962;
}

uint64_t sub_1A57F1EC4()
{
  return 0x747365676964;
}

uint64_t sub_1A57F1ED8()
{
  return 0x6574707972636E65;
}

uint64_t sub_1A57F1EF8()
{
  return 0x7461642D6D726F66;
}

uint64_t sub_1A57F1F14()
{
  return 0x646578696DLL;
}

uint64_t sub_1A57F1F28()
{
  return 0x2D646578696D2D78;
}

uint64_t sub_1A57F1F4C()
{
  return 0x74726F706572;
}

uint64_t sub_1A57F1F60()
{
  return 0x64656E676973;
}

uint64_t sub_1A57F1F74()
{
  return 0x646574616C6572;
}

uint64_t sub_1A57F1F8C(uint64_t *a1, uint64_t *a2)
{
  return _s9IMAP2MIME9MediaTypeO9MultipartO21__derived_enum_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1A57F1FA0(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[40];
  _BYTE v6[40];

  sub_1A57CACB8(a1, (uint64_t)v5);
  sub_1A57CACB8(a2, (uint64_t)v6);
  _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v6);
  return v3 & 1;
}

uint64_t sub_1A57F1FE8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A57F2170(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1A57F1E44);
}

uint64_t sub_1A57F1FF4(uint64_t a1, uint64_t a2)
{
  return sub_1A57F2208(a1, a2, (void (*)(uint64_t))sub_1A57F1E44);
}

uint64_t sub_1A57F2000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A57F2278(a1, a2, a3, (void (*)(_QWORD))sub_1A57F1E44);
}

uint64_t sub_1A57F200C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A57F22C4(a1, a2, a3, (void (*)(uint64_t))sub_1A57F1E44);
}

uint64_t sub_1A57F2018@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57F4DCC();
  *a1 = result;
  return result;
}

uint64_t sub_1A57F2044@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1A57F1E44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A57F206C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A57F20A4 + 4 * byte_1A59D838B[a1]))(0x72617069746C756DLL, 0xE900000000000074);
}

uint64_t sub_1A57F20A4()
{
  return 0x746163696C707061;
}

uint64_t sub_1A57F20C4()
{
  return 0x6F69647561;
}

uint64_t sub_1A57F20D8()
{
  return 0x6567616D69;
}

uint64_t sub_1A57F20EC()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1A57F2104()
{
  return 1954047348;
}

uint64_t sub_1A57F2114()
{
  return 0x6F65646976;
}

uint64_t sub_1A57F2128()
{
  return 1953394534;
}

uint64_t sub_1A57F2138()
{
  return 0x656C706D617865;
}

uint64_t sub_1A57F2150()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1A57F2164(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A57F2170(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1A57F206C);
}

uint64_t sub_1A57F2170(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1A57F21FC(uint64_t a1, uint64_t a2)
{
  return sub_1A57F2208(a1, a2, (void (*)(uint64_t))sub_1A57F206C);
}

uint64_t sub_1A57F2208(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  sub_1A594CE64();
  a3(v5);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57F226C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A57F2278(a1, a2, a3, (void (*)(_QWORD))sub_1A57F206C);
}

uint64_t sub_1A57F2278(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57F22B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A57F22C4(a1, a2, a3, (void (*)(uint64_t))sub_1A57F206C);
}

uint64_t sub_1A57F22C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  sub_1A594CE64();
  a4(v6);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A57F2324@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A57F4E14();
  *a1 = result;
  return result;
}

uint64_t sub_1A57F2350@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1A57F206C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static MediaType.uniformType(filename:mimeType:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A4068);
  v6 = MEMORY[0x1E0C80A78](v5);
  v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v45 - v8;
  v10 = sub_1A594A5B4();
  v51 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v50 = (char *)&v45 - v14;
  MEMORY[0x1E0C80A78](v13);
  v48 = (char *)&v45 - v15;
  v16 = (void *)sub_1A594B3F4();
  v17 = objc_msgSend(v16, sel_pathExtension);

  sub_1A594B40C();
  v46 = sub_1A594B49C();
  v53 = v18;
  swift_bridgeObjectRelease();
  v19 = (void *)sub_1A594B3F4();
  v20 = objc_msgSend(v19, sel_pathExtension);

  sub_1A594B40C();
  v21 = sub_1A594B49C();
  v23 = v22;
  swift_bridgeObjectRelease();
  v54 = a1;
  if ((a1 != 0x746163696C707061 || a2 != 0xEF70697A2F6E6F69) && (sub_1A594CD38() & 1) == 0)
    goto LABEL_17;
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v24 || v21 == 7367034 && v23 == 0xE300000000000000 || (sub_1A594CD38() & 1) != 0)
  {
    v25 = (void *)sub_1A594B3F4();
    v26 = objc_msgSend(v25, sel_stringByDeletingPathExtension);

    if (!v26)
    {
      sub_1A594B40C();
      v26 = (id)sub_1A594B3F4();
      swift_bridgeObjectRelease();
    }
    v27 = objc_msgSend(v26, sel_pathExtension);

    sub_1A594B40C();
    v21 = sub_1A594B49C();
    v29 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v29;
    v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v30 = v21 & 0xFFFFFFFFFFFFLL;
    v31 = v53;
    if (!v30)
    {
      v21 = 7367034;
      swift_bridgeObjectRelease();
      v23 = 0xE300000000000000;
    }
    v33 = v50;
    v32 = v51;
  }
  else
  {
LABEL_17:
    v33 = v50;
    v32 = v51;
    v31 = v53;
  }
  v34 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v34 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v34)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  String.declaredUTTypeFromExtension.getter(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1A57F4300((uint64_t)v9);
LABEL_31:
    v41 = (uint64_t)v49;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594A530();
    sub_1A594A488();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v41, 1, v10) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1A57F4300(v41);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v52, 1, 1, v10);
    }
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
    v42 = v47;
    v35(v47, v41, v10);
    v43 = sub_1A594A59C();
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v42, v10);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v52, 1, 1, v10);
    }
    v38 = v52;
    v39 = v52;
    v40 = v42;
    goto LABEL_37;
  }
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
  v35(v48, (uint64_t)v9, v10);
  sub_1A594A590();
  v36 = sub_1A594A578();
  v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v33, v10);
  if ((v36 & 1) == 0 && (v21 != v46 || v23 != v31) && (sub_1A594CD38() & 1) == 0)
  {
    if ((sub_1A594CD38() & 1) == 0)
    {
      String.declaredUTTypeFromExtension.getter(v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v37)(v48, v10);
    }
    v37(v48, v10);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v52;
  v39 = v52;
  v40 = v48;
LABEL_37:
  v35(v39, (uint64_t)v40, v10);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v38, 0, 1, v10);
}

uint64_t String.declaredUTTypeFromExtension.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A4068);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A594A5B4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - v8;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A594A530();
  sub_1A594A4B8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1A57F4300((uint64_t)v4);
LABEL_5:
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594A56C();
    return sub_1A594A4B8();
  }
  v10 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v10(v9, v4, v5);
  if ((sub_1A594A59C() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    goto LABEL_5;
  }
  v10(a1, v9, v5);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
}

void MediaType.description.getter()
{
  uint64_t v0;

  sub_1A57D6A08(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
  _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0(v0);
}

void sub_1A57F2AD8()
{
  uint64_t v0;
  _BYTE v1[40];

  sub_1A57CACB8(v0, (uint64_t)v1);
  sub_1A57D6A08((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6980);
  _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0((uint64_t)v1);
}

uint64_t MediaType.Multipart.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 0x646578696DLL;
  switch(a2)
  {
    case 0:
      sub_1A57D6AA0(a1, 0);
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 0x747365676964;
      break;
    case 3:
      result = 0x74616E7265746C61;
      break;
    case 4:
      result = 0x646574616C6572;
      break;
    case 5:
      result = 0x74726F706572;
      break;
    case 6:
      result = 0x64656E676973;
      break;
    case 7:
      result = 0x6574707972636E65;
      break;
    case 8:
      result = 0x7461642D6D726F66;
      break;
    case 9:
      result = 0x2D646578696D2D78;
      break;
    case 10:
      result = 0x676E617265747962;
      break;
    case 11:
      result = 0x756F64656C707061;
      break;
    default:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      result = a1;
      break;
  }
  return result;
}

uint64_t sub_1A57F2E24()
{
  uint64_t *v0;

  return MediaType.Multipart.description.getter(*v0, v0[1]);
}

void sub_1A57F2E2C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL4 v11;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  if (v4 == 109 && v5 == 117 && v6 == 108 && v7 == 116)
  {
    v8 = a1;
    v9 = a2;
    v10 = 0;
LABEL_6:
    sub_1A57D72AC(v8, v9, v10);
    return;
  }
  if (v4 == 105)
  {
    if (v5 == 109 && v6 == 97 && v7 == 103)
    {
      v8 = a1;
      v9 = a2;
      v10 = 3;
      goto LABEL_6;
    }
LABEL_27:
    v11 = v5 == 101;
    goto LABEL_28;
  }
  if (v4 == 97)
  {
    if (v5 == 117)
    {
      if (v6 == 100 && v7 == 105)
      {
        v8 = a1;
        v9 = a2;
        v10 = 2;
        goto LABEL_6;
      }
    }
    else if (v5 == 112 && v6 == 112 && v7 == 108)
    {
      v8 = a1;
      v9 = a2;
      v10 = 1;
      goto LABEL_6;
    }
    goto LABEL_27;
  }
  v11 = v5 == 101;
  if (v4 == 109 && v5 == 101 && v6 == 115 && v7 == 115)
  {
    v8 = a1;
    v9 = a2;
    v10 = 4;
    goto LABEL_6;
  }
LABEL_28:
  switch(v4)
  {
    case 'e':
      if (v5 == 120 && v6 == 97 && v7 == 109)
      {
        v8 = a1;
        v9 = a2;
        v10 = 8;
        goto LABEL_6;
      }
      break;
    case 'f':
      if (v5 == 111 && v6 == 110 && v7 == 116)
      {
        v8 = a1;
        v9 = a2;
        v10 = 7;
        goto LABEL_6;
      }
      break;
    case 't':
      if (v6 != 120)
        v11 = 0;
      if (v11 && v7 == 116)
      {
        v8 = a1;
        v9 = a2;
        v10 = 5;
        goto LABEL_6;
      }
      break;
    case 'v':
      if (v5 == 105 && v6 == 100 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 6;
        goto LABEL_6;
      }
      break;
    default:
      if (v4 == 109 && v5 == 111 && v6 == 100 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 9;
        goto LABEL_6;
      }
      break;
  }
}

void sub_1A57F3124(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  if (v4 == 100)
  {
    if (v5 == 105 && v6 == 103 && v7 == 101)
    {
      v8 = a1;
      v9 = a2;
      v10 = 3;
      goto LABEL_16;
    }
  }
  else if (v4 == 109 && v5 == 105 && v6 == 120 && v7 == 101)
  {
    v8 = a1;
    v9 = a2;
    v10 = 6;
LABEL_16:
    sub_1A57D7190(v8, v9, v10);
    return;
  }
  if (v4 == 97 && v5 == 108 && v6 == 116 && v7 == 101)
  {
    v8 = a1;
    v9 = a2;
    v10 = 0;
    goto LABEL_16;
  }
  switch(v4)
  {
    case 'b':
      if (v5 == 121 && v6 == 116 && v7 == 101)
      {
        v8 = a1;
        v9 = a2;
        v10 = 2;
        goto LABEL_16;
      }
      break;
    case 'e':
      if (v5 == 110 && v6 == 99 && v7 == 114)
      {
        v8 = a1;
        v9 = a2;
        v10 = 4;
        goto LABEL_16;
      }
      break;
    case 'f':
      if (v5 == 111 && v6 == 114 && v7 == 109)
      {
        v8 = a1;
        v9 = a2;
        v10 = 5;
        goto LABEL_16;
      }
      break;
    case 'r':
      if (v5 == 101)
      {
        if (v6 == 112)
        {
          if (v7 == 111)
          {
            v8 = a1;
            v9 = a2;
            v10 = 9;
            goto LABEL_16;
          }
        }
        else if (v6 == 108 && v7 == 97)
        {
          v8 = a1;
          v9 = a2;
          v10 = 8;
          goto LABEL_16;
        }
      }
      break;
    case 's':
      if (v5 == 105 && v6 == 103 && v7 == 110)
      {
        v8 = a1;
        v9 = a2;
        v10 = 10;
        goto LABEL_16;
      }
      break;
    case 'x':
      if (v5 == 45 && v6 == 109 && v7 == 105)
      {
        v8 = a1;
        v9 = a2;
        v10 = 7;
        goto LABEL_16;
      }
      break;
    default:
      if (v4 == 97 && v5 == 112 && v6 == 112 && v7 == 108)
      {
        v8 = a1;
        v9 = a2;
        v10 = 1;
        goto LABEL_16;
      }
      break;
  }
}

void sub_1A57F342C(uint64_t a1, uint64_t a2)
{
  sub_1A57F2E2C(a1, a2);
  __asm { BR              X10 }
}

void sub_1A57F3478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (!v3)
  {
    sub_1A57F3124(v2, v1);
    __asm { BR              X11 }
  }
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v3 | 0x80u;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 0;
}

void sub_1A57F358C()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F35A4()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F35BC()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F35D4()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F35EC()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F3604()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F361C()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F3634()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F364C()
{
  JUMPOUT(0x1A57F3540);
}

void sub_1A57F3664(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[40];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _BYTE v20[40];
  _QWORD v21[4];
  char v22;

  v4 = a2 - (_QWORD)a1;
  if (!a1)
    v4 = 0;
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v4;
    sub_1A57F0DC4((uint64_t)v15);
    sub_1A55032A0((uint64_t)v15, (uint64_t)v21, (uint64_t *)&unk_1EE79B418);
    v5 = 0uLL;
    if ((v22 & 1) != 0)
      goto LABEL_5;
    v8 = v21[0];
    v9 = v21[1];
    v10 = v21[2];
    if (!v13)
    {
LABEL_13:
      if (v10)
        v11 = v10 + v9;
      else
        v11 = 0;
      if (v10)
        v12 = v10 + v8;
      else
        v12 = 0;
      sub_1A57F342C(v12, v11);
      v5 = v17;
      v7 = v18;
      v6 = v19;
      goto LABEL_20;
    }
    if (v13 > 0)
    {
      if (*a1 != 47)
        goto LABEL_5;
      sub_1A57F0DC4((uint64_t)&v16);
      sub_1A55032A0((uint64_t)&v16, (uint64_t)v20, (uint64_t *)&unk_1EE79B418);
      if ((v20[32] & 1) != 0)
      {
        v6 = -2;
        v7 = 0uLL;
        v5 = 0uLL;
        goto LABEL_20;
      }
      v5 = 0uLL;
      if (v13 != 1)
      {
LABEL_5:
        v6 = -2;
        v7 = 0uLL;
LABEL_20:
        *(_OWORD *)a3 = v5;
        *(_OWORD *)(a3 + 16) = v7;
        *(_BYTE *)(a3 + 32) = v6;
        return;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
}

void _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BYTE v3[8];
  _BYTE v4[72];

  sub_1A57CACB8(a2, (uint64_t)v3);
  sub_1A57CACB8(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t sub_1A57F3858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  char v8;
  __int128 v9;

  sub_1A57F4930(&v9, (_OWORD *)(v2 - 80));
  sub_1A57CACB8(v0, (uint64_t)v7);
  if (!v8)
  {
    v4 = v7[0];
    v3 = v7[1];
    sub_1A57F4930((_OWORD *)(v2 - 80), (_OWORD *)(v2 - 64));
    v5 = *(_QWORD *)(v2 - 56);
    switch(v5)
    {
      case 1:
        return v3 == 1;
      case 2:
        return v3 == 2;
      case 3:
        return v3 == 3;
      case 4:
        return v3 == 4;
      case 5:
        return v3 == 5;
      case 6:
        return v3 == 6;
      case 7:
        return v3 == 7;
      case 8:
        return v3 == 8;
      case 9:
        return v3 == 9;
      case 10:
        return v3 == 10;
      case 11:
        return v3 == 11;
      default:
        if ((unint64_t)(v3 - 1) < 0xB)
          return 0;
        if (v5)
        {
          if (v3 && (*(_QWORD *)(v2 - 64) == v4 && v5 == v3 || (sub_1A594CD38() & 1) != 0))
            return 1;
        }
        else
        {
          if (!v3)
            return 1;
          sub_1A57D6A08(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
        }
        break;
    }
  }
  return 0;
}

uint64_t _s9IMAP2MIME9MediaTypeO9MultipartO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
    case 3:
      return a4 == 3;
    case 4:
      return a4 == 4;
    case 5:
      return a4 == 5;
    case 6:
      return a4 == 6;
    case 7:
      return a4 == 7;
    case 8:
      return a4 == 8;
    case 9:
      return a4 == 9;
    case 10:
      return a4 == 10;
    case 11:
      return a4 == 11;
    default:
      if ((unint64_t)(a4 - 1) < 0xB)
        return 0;
      if (a2)
        return a4 && (a1 == a3 && a2 == a4 || (sub_1A594CD38() & 1) != 0);
      if (!a4)
        return 1;
      sub_1A57D6AA0(a1, 0);
      return 0;
  }
}

void _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0(uint64_t a1)
{
  _BYTE v1[72];

  sub_1A57CACB8(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1A57F3CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (v4)
  {
    *(_QWORD *)(v1 - 64) = 0x72617069746C756DLL;
    *(_QWORD *)(v1 - 56) = 0xEA00000000002F74;
    switch(v4)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        break;
      default:
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        break;
    }
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A57D6A08(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
    return *(_QWORD *)(v1 - 64);
  }
  else
  {
    v3 = 0x72617069746C756DLL;
    sub_1A57D6A08(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A57D6A40);
  }
  return v3;
}

uint64_t sub_1A57F4300(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A4068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for MediaType(uint64_t a1)
{
  return sub_1A57D6A40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for MediaType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for MediaType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1A57D6980(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1A57D6A40(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8_1(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MediaType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1A57D6A40(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 246;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A57F4510(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MediaType()
{
  return &type metadata for MediaType;
}

unint64_t destroy for UnauthenticatedState.Error(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s15IMAP2Connection20UnauthenticatedStateO5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return a1;
}

_QWORD *assignWithCopy for UnauthenticatedState.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UnauthenticatedState.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if ((v5 + 1) > 1)
    goto LABEL_9;
  v6 = *(_QWORD *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(a2 + 8);
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaType.Multipart(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483636);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 0xC)
    return (v3 - 11);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MediaType.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF4)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 11;
  }
  return result;
}

uint64_t sub_1A57F477C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_1A57F479C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    result[1] = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaType.Multipart()
{
  return &type metadata for MediaType.Multipart;
}

void sub_1A57F47DC(uint64_t a1)
{
  _BYTE v1[136];

  sub_1A57CACB8(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1A57F4820@<X0>(char a1@<W8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[88];
  _BYTE v9[112];

  v8[32] = a1 & 0xF;
  sub_1A55032A0((uint64_t)v8, (uint64_t)v9, (uint64_t *)&unk_1EE799400);
  sub_1A55032A0((uint64_t)v9, v3 - 72, (uint64_t *)&unk_1EE799400);
  if ((*(_BYTE *)(v3 - 56) & 1) != 0)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v4 = sub_1A57E2C20(*(unsigned __int8 **)(v3 - 72), *(unsigned __int8 **)(v3 - 64));
    v5 = v6;
  }
  result = 0;
  *(_QWORD *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

void sub_1A57F48A0(char a1@<W8>, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, char a6, __n128 a7, uint64_t a8, __n128 a9, char a10)
{
  a6 = a1 & 0xF;
  sub_1A57E1F38(&a3, &a7);
  sub_1A57E1F38(&a7, &a9);
  if (a10 < 0)
  {
    a10 &= ~0x80u;
    JUMPOUT(0x1A57F4834);
  }
  JUMPOUT(0x1A57F487CLL);
}

_OWORD *sub_1A57F4930(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType.Multipart(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_1A57F49E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t sub_1A57F49F0(uint64_t result)
{
  *(_BYTE *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t sub_1A57F4A00(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Multipart()
{
  return &type metadata for UnsafeMediaType.Multipart;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x76 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 118);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x75)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x75)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 118;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x76)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x76)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1A57F4AD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 4;
}

uint64_t sub_1A57F4AE0(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0xFu;
  return result;
}

uint64_t sub_1A57F4AF0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType()
{
  return &type metadata for UnsafeMediaType;
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A57F4B60 + 4 * byte_1A59D8446[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A57F4B94 + 4 * byte_1A59D8441[v4]))();
}

uint64_t sub_1A57F4B94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57F4B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57F4BA4);
  return result;
}

uint64_t sub_1A57F4BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57F4BB8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A57F4BBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57F4BC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Kind()
{
  return &type metadata for UnsafeMediaType.Kind;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType.Multipart.Known(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType.Multipart.Known(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1A57F4CBC + 4 * byte_1A59D8450[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1A57F4CF0 + 4 * byte_1A59D844B[v4]))();
}

uint64_t sub_1A57F4CF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57F4CF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57F4D00);
  return result;
}

uint64_t sub_1A57F4D0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57F4D14);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1A57F4D18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57F4D20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Multipart.Known()
{
  return &type metadata for UnsafeMediaType.Multipart.Known;
}

unint64_t sub_1A57F4D40()
{
  unint64_t result;

  result = qword_1EE7AA698;
  if (!qword_1EE7AA698)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D85D0, &type metadata for UnsafeMediaType.Multipart.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA698);
  }
  return result;
}

unint64_t sub_1A57F4D88()
{
  unint64_t result;

  result = qword_1EE7AA6A0;
  if (!qword_1EE7AA6A0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8670, &type metadata for UnsafeMediaType.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6A0);
  }
  return result;
}

uint64_t sub_1A57F4DCC()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

uint64_t sub_1A57F4E14()
{
  unint64_t v0;

  v0 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_1A57F4E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v5[6];

  v5[2] = a3;
  v5[3] = a1;
  v5[4] = a2;
  return sub_1A57F62E8(sub_1A57F8248, (uint64_t)v5, a3, a4);
}

uint64_t Message.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Message.Data(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE799050);
}

uint64_t sub_1A57F4ED4(void (*a1)(char *__return_ptr, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  _BYTE v16[7];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = sub_1A594AE60();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (Message.isEmpty.getter())
  {
    a1(&v17, 0, 0);
    if (v3)
      return v13 & 1;
    goto LABEL_9;
  }
  sub_1A57EF8F4(v2, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  v14 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v12, v6);
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)&v16[-32] = v9;
  *(_QWORD *)&v16[-24] = a1;
  *(_QWORD *)&v16[-16] = a2;
  sub_1A594ADE8();
  if (!v3)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
LABEL_9:
    v13 = v17;
    return v13 & 1;
  }
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return v13 & 1;
}

uint64_t sub_1A57F527C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, const void *a3@<X2>, unsigned int a4@<W3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BOOL8 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t (*v33)(char *, char *);
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  _BYTE v37[24];
  const void *v38;
  char v39;
  uint64_t (*v40)(char *, char *);
  uint64_t v41;
  _QWORD v42[71];

  v35 = a1;
  v31 = a7;
  v42[69] = *MEMORY[0x1E0C80C00];
  v12 = sub_1A594AE60();
  v29 = *(_QWORD *)(v12 - 8);
  v30 = v12;
  MEMORY[0x1E0C80A78](v12);
  v28 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A55DC438((uint64_t)a3, sub_1A552370C);
  sub_1A55DC438((uint64_t)a3, sub_1A552370C);
  sub_1A55DC438((uint64_t)a3, sub_1A552370C);
  v37[16] = a2;
  v38 = a3;
  v32 = a4;
  v39 = a4;
  v33 = a5;
  v34 = a6;
  v40 = a5;
  v41 = a6;
  v17 = v35;
  v36[2] = sub_1A57F83B4;
  v36[3] = v37;
  sub_1A55DC438((uint64_t)a3, sub_1A552370C);
  sub_1A55DC438((uint64_t)a3, sub_1A552370C);
  if (Message.isEmpty.getter())
  {
    sub_1A55DC438((uint64_t)a3, sub_1A552370C);
    sub_1A57F0164(a2);
    if ((v19 & 1) == 0 && v18)
    {
      __break(1u);
      JUMPOUT(0x1A57F584CLL);
    }
    sub_1A55DC3E0(a3, v42);
    v20 = sub_1A55DC430((uint64_t)v42) != 1;
    nullsub_1(v42);
    sub_1A580403C(v32, v20, 1, v33, v34, a2, 0, 0, 0);
    sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  }
  else
  {
    sub_1A57EF8F4(v17, (uint64_t)v16);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v21 = v28;
    v22 = v29;
    v23 = v30;
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v28, v16, v30);
    MEMORY[0x1E0C80A78](v24);
    *(&v27 - 4) = (uint64_t)v21;
    *(&v27 - 3) = (uint64_t)sub_1A57F7698;
    v26 = v36;
    sub_1A594ADE8();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v23);
  }
  sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
  return sub_1A55DC438((uint64_t)a3, sub_1A55241F0);
}

uint64_t sub_1A57F5864@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = sub_1A594AE60();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  if (Message.isEmpty.getter())
    return a2(0, 0, 0, 0);
  v17[1] = a3;
  v17[2] = a4;
  sub_1A57EF8F4(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  v15 = v18;
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v18);
  MEMORY[0x1E0C80A78](v16);
  v17[-4] = v10;
  v17[-3] = sub_1A57F7698;
  v17[-2] = &v19;
  sub_1A594ADE8();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v15);
}

uint64_t sub_1A57F5BE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = sub_1A594AE60();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  if (Message.isEmpty.getter())
    return a2(0, 0, 0, 0);
  v17[1] = a3;
  v17[2] = a4;
  sub_1A57EF8F4(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  v15 = v18;
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v18);
  MEMORY[0x1E0C80A78](v16);
  v17[-4] = v10;
  v17[-3] = sub_1A57F7698;
  v17[-2] = &v19;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE795EA8);
  sub_1A594ADE8();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v15);
}

uint64_t sub_1A57F5F64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = sub_1A594AE60();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  if (Message.isEmpty.getter())
    return a2(0, 0, 0, 0);
  v17[1] = a3;
  v17[2] = a4;
  sub_1A57EF8F4(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  v15 = v18;
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v18);
  MEMORY[0x1E0C80A78](v16);
  v17[-4] = v10;
  v17[-3] = sub_1A57F7698;
  v17[-2] = &v19;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA6A8);
  sub_1A594ADE8();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v15);
}

uint64_t sub_1A57F62E8@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD);
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t (*v21)(_QWORD, _QWORD);
  uint64_t v22;

  v22 = a3;
  v8 = sub_1A594AE60();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (_QWORD *)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (Message.isEmpty.getter())
    return a1(0, 0);
  v20[1] = a4;
  v21 = a1;
  sub_1A57EF8F4(v4, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    MEMORY[0x1E0C80A78](v16);
    v17 = v21;
    v20[-4] = v22;
    v20[-3] = v11;
    v20[-2] = v17;
    v20[-1] = a2;
    sub_1A594ADE8();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v18 = *v14;
    v19 = v14[1];
    sub_1A5949F6C();
    return sub_1A54E46E8(v18, v19);
  }
}

uint64_t Message.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1A594AE60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static Message.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[2] = a2;
  return sub_1A57F4ED4((void (*)(char *__return_ptr, _QWORD, _QWORD))sub_1A57F68BC, (uint64_t)v3) & 1;
}

uint64_t sub_1A57F654C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  BOOL *v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v8 = sub_1A594AE60();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  v22 = a2;
  result = Message.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v16 = a1 == 0;
  }
  else
  {
    sub_1A57EF8F4(a3, (uint64_t)v14);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    MEMORY[0x1E0C80A78](v17);
    *(&v18 - 4) = (BOOL *)v11;
    *(&v18 - 3) = (BOOL *)sub_1A57F82A0;
    *(&v18 - 2) = (BOOL *)&v20;
    sub_1A594ADE8();
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      __break(1u);
      JUMPOUT(0x1A57F6888);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v16 = v19;
  }
  *v18 = v16;
  return result;
}

uint64_t sub_1A57F68BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return sub_1A57F654C(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_1A57F68D4(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[2] = a2;
  return sub_1A57F4ED4((void (*)(char *__return_ptr, _QWORD, _QWORD))sub_1A57F84B0, (uint64_t)v3) & 1;
}

BOOL Message.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v9;
  _QWORD v11[2];

  v1 = v0;
  v2 = sub_1A594AE60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A57EF8F4(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_1A57F6AC0();
  sub_1A594BD60();
  sub_1A594BDB4();
  v9 = v11[1] == v11[0];
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

unint64_t sub_1A57F6AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE798F30;
  if (!qword_1EE798F30)
  {
    v1 = sub_1A594AE60();
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEF670], v1);
    atomic_store(result, (unint64_t *)&qword_1EE798F30);
  }
  return result;
}

uint64_t Message.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = sub_1A594AE60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A57EF8F4(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    __asm { BR              X10 }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  v9 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t *initializeBufferWithCopyOfBuffer for Message(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for Message.Data(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      v8 = *a2;
      v7 = a2[1];
      sub_1A54E42B4(v8, v7);
      *a1 = v8;
      a1[1] = v7;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Message(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_1A54E46E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t *initializeWithCopy for Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1A594AE60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v6 = *a2;
    v5 = a2[1];
    sub_1A54E42B4(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A57F6F0C((uint64_t)a1);
    type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v6 = *a2;
      v5 = a2[1];
      sub_1A54E42B4(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1A57F6F0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Message.Data(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Message(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1A594AE60();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Message(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_1A57F6F0C((uint64_t)a1);
    v4 = type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = sub_1A594AE60();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Message()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57F708C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Message.Data(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Message()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A57F70D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Message.Data(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for Message(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE799060);
}

uint64_t sub_1A57F7128()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Message.Data(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A57F7190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v9 = *a2;
      v8 = a2[1];
      sub_1A54E42B4(v9, v8);
      *a1 = v9;
      a1[1] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1A57F7254(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_1A54E46E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t *sub_1A57F72A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1A594AE60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v6 = *a2;
    v5 = a2[1];
    sub_1A54E42B4(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_1A57F733C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A57F6F0C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v6 = *a2;
      v5 = a2[1];
      sub_1A54E42B4(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1A57F73E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1A594AE60();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1A57F7470(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A57F6F0C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1A594AE60();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A57F750C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A594AE60();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1A57F757C(uint64_t result, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t (*a6)(char *, char *), uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  _BYTE v27[192];

  if (result)
    v7 = a2 - result;
  else
    v7 = 0;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    sub_1A57F0164(a3);
    if ((v16 & 1) != 0)
      v17 = v7;
    else
      v17 = v15;
    sub_1A57F972C(a3, 0, v7, v11, a2, v17);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v25 = v24;
    sub_1A55DC3E0(a4, v27);
    v26 = sub_1A55DC430((uint64_t)v27) != 1;
    nullsub_1(v27);
    sub_1A580403C(a5, v26, 1, a6, a7, v19, v21, v23, v25);
    return sub_1A55DC438((uint64_t)a4, sub_1A55241F0);
  }
  return result;
}

uint64_t sub_1A57F7698(uint64_t a1, uint64_t a2)
{
  return sub_1A57F8354(a1, a2);
}

uint64_t sub_1A57F76AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57EFC18(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t sub_1A57F76C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  result = sub_1A5949BE8();
  v8 = result;
  if (result)
  {
    result = sub_1A5949C0C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = sub_1A5949C00();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = v8 + v12;
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  a3(&v16, v8, v14);
  if (!v3)
    v15 = v16;
  return v15 & 1;
}

uint64_t sub_1A57F7774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t (*a7)(char *, char *), uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1A55DC438((uint64_t)a5, sub_1A552370C);
  result = sub_1A5949BE8();
  v15 = result;
  if (result)
  {
    result = sub_1A5949C0C();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  v16 = __OFSUB__(a2, a1);
  v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = sub_1A5949C00();
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = v15 + v19;
  if (v15)
    v21 = v20;
  else
    v21 = 0;
  sub_1A55DC438((uint64_t)a5, sub_1A552370C);
  sub_1A57F757C(v15, v21, a4, a5, a6, a7, a8);
  sub_1A55DC438((uint64_t)a5, sub_1A55241F0);
  return sub_1A55DC438((uint64_t)a5, sub_1A55241F0);
}

uint64_t sub_1A57F788C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_1A5949BE8();
  v8 = result;
  if (result)
  {
    result = sub_1A5949C0C();
    if (__OFSUB__(a1, result))
      goto LABEL_15;
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    result = sub_1A5949C00();
    if (result >= v10)
      v11 = v10;
    else
      v11 = result;
    if (v8)
      v12 = v11;
    else
      v12 = 0;
    if ((v12 & 0x8000000000000000) == 0)
      return a4(0);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1A57F7944(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  v4 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return v3(a1, a1 + v4);
}

char *sub_1A57F79A0(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD), char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[3];
  char v19;
  void (*v20)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = sub_1A594AE60();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v18[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  if (Message.isEmpty.getter())
  {
    v14 = a3;
    a2(v18, 0, 0, 0, 0);
    if (!v3)
      return (char *)v18[0];
  }
  else
  {
    sub_1A57EF8F4(a1, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    MEMORY[0x1E0C80A78](v15);
    *(&v17 - 4) = (uint64_t)v10;
    *(&v17 - 3) = (uint64_t)sub_1A57F8220;
    *(&v17 - 2) = (uint64_t)&v19;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA6B0);
    v14 = v10;
    sub_1A594ADE8();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (!v3)
      return (char *)v18[2];
  }
  return v14;
}

_QWORD *sub_1A57F7D80(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD))
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  result = (_QWORD *)sub_1A5949BE8();
  v9 = result;
  if (result)
  {
    result = (_QWORD *)sub_1A5949C0C();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    v9 = (_QWORD *)((char *)v9 + a1 - (_QWORD)result);
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (_QWORD *)sub_1A5949C00();
  if ((uint64_t)result >= v11)
    v12 = (_QWORD *)v11;
  else
    v12 = result;
  if (v9)
    v13 = (unint64_t)v12;
  else
    v13 = 0;
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_16;
  result = a4(&v14, 0);
  if (!v4)
    return (_QWORD *)v14;
  return result;
}

char *sub_1A57F7E40(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD), char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[3];
  char v19;
  void (*v20)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = sub_1A594AE60();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v18[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v21 = a3;
  if (Message.isEmpty.getter())
  {
    v14 = a3;
    a2(v18, 0, 0, 0, 0);
    if (!v3)
      return (char *)v18[0];
  }
  else
  {
    sub_1A57EF8F4(a1, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    MEMORY[0x1E0C80A78](v15);
    *(&v17 - 4) = (uint64_t)v10;
    *(&v17 - 3) = (uint64_t)sub_1A57F8220;
    *(&v17 - 2) = (uint64_t)&v19;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799A18);
    v14 = v10;
    sub_1A594ADE8();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (!v3)
      return (char *)v18[2];
  }
  return v14;
}

_QWORD *sub_1A57F8220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A57F83E4(a1, a2, a3);
}

_QWORD *sub_1A57F8234@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A57F8440(a1, a2);
}

uint64_t sub_1A57F8248(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
    v3 = a2 - result;
  else
    v3 = 0;
  if ((v3 & 0x8000000000000000) == 0)
    return (*(uint64_t (**)(_QWORD))(v2 + 24))(0);
  __break(1u);
  return result;
}

_QWORD *sub_1A57F828C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1A57F82E4(a1, a2);
}

uint64_t sub_1A57F82A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24) - v4;
  if (!v4)
    v5 = 0;
  v6 = (v5 | v4) == 0;
  if (v4)
    v7 = v5 == a2 - result;
  else
    v7 = 0;
  v8 = v7 && v4 == result;
  if (!result)
    v8 = v6;
  *a3 = v8;
  return result;
}

_QWORD *sub_1A57F82E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  v7 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  result = v6(&v9, a1, a1 + v7);
  if (!v3)
    *a2 = v9;
  return result;
}

uint64_t sub_1A57F8354(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
    v3 = a2 - result;
  else
    v3 = 0;
  if ((v3 & 0x8000000000000000) == 0)
    return (*(uint64_t (**)(_QWORD))(v2 + 16))(0);
  __break(1u);
  return result;
}

uint64_t sub_1A57F8398(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57EF938(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t sub_1A57F83B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A57CC6D0(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(const void **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(uint64_t (**)(char *, char *))(v4 + 40), *(_QWORD *)(v4 + 48));
}

_QWORD *sub_1A57F83E4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result)
    v6 = a2 - (_QWORD)result;
  else
    v6 = 0;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(v3 + 16))(&v7, 0);
    if (!v4)
      *a3 = v7;
  }
  return result;
}

_QWORD *sub_1A57F8440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  v7 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  result = v6(&v9, a1, a1 + v7);
  if (!v3)
    *a2 = v9;
  return result;
}

uint64_t sub_1A57F84B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_1A57F68BC(a1, a2, a3);
}

uint64_t sub_1A57F84C4(uint64_t a1)
{
  return sub_1A57F8398(a1);
}

uint64_t Message.withMessageHeader<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v5[6];

  v5[2] = a3;
  v5[3] = a1;
  v5[4] = a2;
  return sub_1A57F4E5C((uint64_t)sub_1A57F8508, (uint64_t)v5, a3, a4);
}

uint64_t sub_1A57F8508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A57F8530(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24), *(_QWORD *)(v4 + 32), a1, a2, a3, a4);
}

uint64_t sub_1A57F8530(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1A57F978C(3, a3, a4, a5, a6);
  if (!v6)
  {
    if (v10 < 0)
    {
      __break(1u);
    }
    else
    {
      if (v9)
        v11 = v9 + v10;
      else
        v11 = 0;
      return a1(v9, v11);
    }
  }
  return result;
}

uint64_t sub_1A57F859C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = a2 - isStackAllocationSafe;
  if (isStackAllocationSafe)
    v3 = a2 - isStackAllocationSafe;
  else
    v3 = 0;
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (v4 < 0)
    goto LABEL_18;
  v5 = (const void *)isStackAllocationSafe;
  if (v4 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v7 = (char *)v12 - v6;
    if (v5)
      memmove((char *)v12 - v6, v5, v2);
    else
      v2 = 0;
    v7[v2] = 0;
    return CompactEncDet_EncodingNameAliasToEncoding(v7);
  }
  else
  {
    v9 = (char *)swift_slowAlloc();
    v10 = v9;
    if (v5)
      memmove(v9, v5, v2);
    else
      v2 = 0;
    v10[v2] = 0;
    v8 = CompactEncDet_EncodingNameAliasToEncoding(v10);
    MEMORY[0x1A85B1964](v10, -1, -1);
  }
  return v8;
}

uint64_t sub_1A57F86DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 8);
  sub_1A594B5F8();
  sub_1A594C924();
  sub_1A594B5F8();
  sub_1A57F88E0(v4, v1, v2, v3);
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t initializeWithCopy for Part(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for Part(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Part(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for Part()
{
  return &type metadata for Part;
}

uint64_t sub_1A57F88A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    if (a3 - a2 >= a4)
      return a2 + a4;
    __break(1u);
  }
  else if (a4 <= 0)
  {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57F88E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!a2)
    return 0x3E6C696E3CLL;
  if (a3 - a2 < a4)
  {
    __break(1u);
  }
  else
  {
    sub_1A594C924();
    sub_1A594B5F8();
    sub_1A594C924();
    sub_1A594B5F8();
    sub_1A594C924();
    return 0;
  }
  return result;
}

uint64_t sub_1A57F89E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A57F88E0(a1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1A57F89EC(char a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X8 }
  return 0;
}

uint64_t sub_1A57F8F6C(uint64_t (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(_QWORD *), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48[6];
  char v49[8];
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  _BYTE v53[48];
  _OWORD v54[2];
  __int128 v55;
  _OWORD v56[3];
  _QWORD *v57;
  uint64_t v58;
  char v59;
  _BYTE v60[40];
  __n128 v61[2];
  unsigned __int8 v62;
  __n128 v63;
  __n128 v64;
  char v65;
  char v66[32];
  _QWORD *v67;

  v8 = v6;
  result = a1(v6);
  if (!v7 && (_BYTE)result)
  {
    if (result == 1)
    {
      if ((*(_QWORD *)(v6 + 32) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        if (*(_QWORD *)(v6 + 16))
          v17 = *(_QWORD *)(v6 + 32);
        else
          v17 = 0;
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = sub_1A580E7F0();
          if (v21 != 2)
          {
            v22 = v18;
            v23 = v19;
            v24 = v20;
            do
            {
              v25 = v21 & 1;
              sub_1A580E020(v22, v23, v24, v21 & 1, v48);
              a3(v48, v22, v23, v24, v25);
              sub_1A57E5B1C((uint64_t)v48);
              v22 = sub_1A580E7F0();
              v23 = v26;
              v24 = v27;
            }
            while (v21 != 2);
          }
          return 2;
        }
      }
      __break(1u);
      return result;
    }
    sub_1A57F9984(*(unsigned __int8 *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 32), a3, (uint64_t)v49);
    sub_1A55032A0((uint64_t)&v50, (uint64_t)v53, &qword_1EE799008);
    sub_1A55032A0((uint64_t)v53, (uint64_t)v54, &qword_1EE799008);
    if (!*((_QWORD *)&v55 + 1))
      return 2;
    v56[0] = v54[0];
    v56[1] = v54[1];
    v56[2] = v55;
    sub_1A57CACB8((uint64_t)v56, (uint64_t)v60);
    sub_1A57CACB8((uint64_t)v60, (uint64_t)v61);
    if (v62 >= 0x10u)
    {
      sub_1A57F9BC8((uint64_t)v49);
      return 2;
    }
    sub_1A57E1F38(v61, &v63);
    sub_1A57F9BC8((uint64_t)v49);
    sub_1A55032A0((uint64_t)&v51, (uint64_t)v52, &qword_1EE798FC0);
    sub_1A55032A0((uint64_t)v52, (uint64_t)&v57, &qword_1EE798FC0);
    v28 = v59;
    if (v59 == 2)
      return 2;
    v29 = v57;
    v30 = v58;
    if (!a5)
    {
      v33 = 0;
      v34 = 1;
      return (uint64_t)sub_1A57F93BC(v29, v30, v28 & 1, v33, v34, (uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
    }
    v46 = v59;
    v47 = v58;
    v67 = v57;
    sub_1A57E1F38(&v63, &v64);
    if (v65 < 0)
    {
      v65 &= ~0x80u;
      sub_1A55032A0((uint64_t)&v64, (uint64_t)v66, (uint64_t *)&unk_1EE799400);
    }
    else if (!v64.n128_u8[0])
    {
      v31 = *(_QWORD **)v6;
      swift_retain();
      v32 = a5(v31);
      v33 = v32;
      if (v32)
      {
        if (v32 != 1)
        {
          if (v32 == 2)
          {
            sub_1A55113D8((uint64_t)a5);
            return 0;
          }
          v35 = v31[2];
          if (v35 + 1 != *(_QWORD *)(v32 + 16))
            goto LABEL_44;
          v45 = v32;
          if (v35)
          {
            if (v31[4] != *(_QWORD *)(v32 + 32))
            {
LABEL_43:
              sub_1A54FCA28(v8);
              v33 = v45;
              sub_1A54E31DC(v45);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
LABEL_44:
              sub_1A55113D8((uint64_t)a5);
              sub_1A54E3278(v33);
              return 2;
            }
            if (v35 != 1)
            {
              v36 = v31 + 5;
              v37 = v35 - 2;
              v38 = (uint64_t *)(v32 + 40);
              do
              {
                v39 = v37;
                v41 = *v36++;
                v40 = v41;
                v42 = *v38++;
                if (v40 != v42)
                  goto LABEL_43;
                v37 = v39 - 1;
              }
              while (v39);
            }
          }
          v44 = v32 + 32;
          sub_1A54FCA28(v8);
          sub_1A54E31DC(v45);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v43 = *(_QWORD *)(v45 + 16);
          if (!v43)
          {
            sub_1A55113D8((uint64_t)a5);
            sub_1A54E3278(v45);
            return 2;
          }
          v33 = *(_QWORD *)(v44 + 8 * v43 - 8);
          sub_1A55113D8((uint64_t)a5);
          sub_1A54E3278(v45);
          v34 = 0;
          goto LABEL_30;
        }
        sub_1A55113D8((uint64_t)a5);
        return 2;
      }
      sub_1A55113D8((uint64_t)a5);
LABEL_29:
      v34 = 1;
LABEL_30:
      v29 = v67;
      v30 = v47;
      v28 = v46;
      return (uint64_t)sub_1A57F93BC(v29, v30, v28 & 1, v33, v34, (uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
    }
    v33 = 0;
    goto LABEL_29;
  }
  return result;
}

_QWORD *sub_1A57F93BC(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  _QWORD v13[4];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13[3] = a4;
  v14 = a5 & 1;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  v19 = a10;
  v20 = a11;
  if ((a3 & 1) == 0)
    return (_QWORD *)sub_1A57F9464((Swift::Int)result, a2, a4, a5 & 1, a6, a7, a8, a9, a10, a11);
  if (result)
    v12 = a2 - (_QWORD)result;
  else
    v12 = 0;
  if ((v12 & 0x8000000000000000) == 0)
    return sub_1A57F1208(0, v12, (uint64_t)result, a2, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A57F9BF0, v13);
  __break(1u);
  return result;
}

Swift::Int sub_1A57F9464(Swift::Int result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v39;
  void *v40;
  unsigned int v43;

  v13 = v11;
  v40 = (void *)result;
  v43 = *(unsigned __int8 *)(v10 + 8);
  v14 = *(_QWORD *)(v10 + 16);
  v15 = *(_QWORD *)(v10 + 32);
  if (v14)
  {
    v16 = *(_QWORD *)(v10 + 24) - v14;
    if (v16 < v15)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v17 = v16 - v15;
    if (v16 - v15 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v18 = v14 + v15;
    v19 = *(_QWORD *)(v10 + 24);
  }
  else
  {
    if (v15 >= 1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v17 = 0;
    v19 = 0;
    v18 = 0;
  }
  result = (Swift::Int)sub_1A57D2804(0, v17, v18, v19, v43, (void *)result, a2);
  if (v21 == -1)
    return 2;
  v22 = v20;
  if ((v21 & 1) != 0)
    goto LABEL_26;
  v39 = v19;
  if (v17 < v20)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v20 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    v32 = 0;
    if (v17 < v22)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      result = swift_bridgeObjectRelease();
      if (v33 >= v12)
      {
        if (v12 >= v22)
          return result;
        __break(1u);
        if (v33 >= v12)
        {
          if (v12 >= v22)
            return result;
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
LABEL_27:
    if (v22 >= v32)
      return 2;
    goto LABEL_45;
  }
  v23 = 0;
  v33 = v17;
  while (1)
  {
    v24 = v13;
    v25 = v18;
    result = (Swift::Int)sub_1A57D2804(v22, v17, v18, v39, v43, v40, a2);
    if (v27 == -1)
      return 2;
    v28 = result;
    if (result < v22)
      goto LABEL_41;
    result = v23 + 1;
    if (__OFADD__(v23, 1))
      goto LABEL_42;
    v12 = v26;
    v29 = v27;
    if ((a4 & 1) == 0 && result != a3)
    {
      v13 = v24;
      if ((v27 & 1) != 0)
        goto LABEL_30;
      goto LABEL_22;
    }
    SectionSpecifier.Part.appending(_:)(result);
    sub_1A57F978C(v43, v22, v28, v25, v39);
    if (v24)
      goto LABEL_32;
    v30 = sub_1A57F8F6C(a5, a6, a7, a8, a9, a10);
    v13 = 0;
    result = swift_bridgeObjectRelease();
    if (!v30)
      break;
    v17 = v33;
    if ((v29 & 1) != 0)
    {
LABEL_30:
      v32 = v22;
      v22 = v12;
      if (v17 >= v12)
        goto LABEL_27;
      goto LABEL_31;
    }
LABEL_22:
    if (v17 < v12)
      goto LABEL_40;
    v18 = v25;
    ++v23;
    v31 = v12 < v22;
    v22 = v12;
    if (v31)
      goto LABEL_25;
  }
  if (v33 < v12)
    goto LABEL_50;
  if (v12 >= v22)
    return 0;
LABEL_51:
  __break(1u);
  return result;
}

void sub_1A57F972C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a5 - a4;
  if (a4)
  {
    v8 = a4 + a3;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (a4)
    v9 = a4 + a2;
  else
    v9 = 0;
  if (a2 < 0 || v7 < a2)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  if (a6 < 0 || v7 < a6)
    goto LABEL_16;
  v10 = a6 - a2;
  v11 = v8 - v9;
  if (!v9)
    v11 = 0;
  if (v11 < v10)
    goto LABEL_17;
}

uint64_t sub_1A57F978C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;

  v8 = result;
  if (a2 != a3)
  {
    if (a2 >= a3)
      goto LABEL_32;
    v11 = *(unsigned __int8 *)(a4 + a2);
    if (v11 == 10 || v11 == 13)
    {
      sub_1A57F074C(result);
      v13 = a2;
    }
    else
    {
      sub_1A57F0164(result);
      if ((v21 & 1) != 0)
      {
        sub_1A57F0EC4(v8);
        if ((v22 & 1) != 0 && sub_1A56F12C4(a2, a3, a4, a5) <= 1499)
        {
          v14 = v8;
          v15 = a2;
          v16 = a3;
          v17 = a4;
          v18 = a5;
          v13 = a3;
          goto LABEL_15;
        }
        v23 = sub_1A57F89EC(v8, a2, a3);
        if ((v24 & 1) != 0)
        {
          if (a4)
            v25 = a4 + a3;
          else
            v25 = 0;
          if (a4)
            v8 = a4 + a2;
          else
            v8 = 0;
          sub_1A57F9940();
          swift_allocError();
          *v26 = v8;
          v26[1] = v25;
          swift_willThrow();
          return v8;
        }
        v13 = v23;
      }
      else
      {
        v13 = v20;
      }
    }
    v14 = v8;
    v15 = a2;
    v16 = a3;
    v17 = a4;
    v18 = a5;
LABEL_15:
    sub_1A57F972C(v14, v15, v16, v17, v18, v13);
    return v19;
  }
  v9 = a5 - a4;
  if (!a4)
    v9 = 0;
  if ((a2 & 0x8000000000000000) == 0 && v9 >= a2)
    return v8;
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_1A57F9940()
{
  unint64_t result;

  result = qword_1EE7AA6B8;
  if (!qword_1EE7AA6B8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D7BDC, &type metadata for MIMEError);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6B8);
  }
  return result;
}

uint64_t sub_1A57F9984@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39[6];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (a3 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (a2)
    v6 = a3;
  else
    v6 = 0;
  if (v6 < 0)
    goto LABEL_20;
  result = sub_1A580E7F0();
  if (v10 == 2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 2;
    goto LABEL_18;
  }
  v19 = result;
  v20 = v8;
  v21 = v9;
  v22 = 0;
  v15 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 2;
  while (2)
  {
    v33 = v15;
    v34 = v22;
    v35 = v17;
    v37 = v16;
    v32 = v12;
    while (1)
    {
      v25 = v10 & 1;
      sub_1A580E020(v19, v20, v21, v10 & 1, v39);
      a4(v39, v19, v20, v21, v25);
      sub_1A57DCF1C((uint64_t)v39, (uint64_t)&v40);
      v26 = v42;
      if ((unint64_t)v42 >> 59 != 14)
        break;
      *(_QWORD *)&v42 = v42 & 0x7FFFFFFFFFFFFFFLL;
      v11 = 1;
LABEL_11:
      result = sub_1A580E7F0();
      v19 = result;
      v20 = v23;
      v21 = v24;
      if (v10 == 2)
      {
        v15 = v33;
        v14 = v34;
        v17 = v35;
        v16 = v37;
        v12 = v32;
        goto LABEL_18;
      }
    }
    if ((unint64_t)v42 >> 59 != 9)
    {
      sub_1A57E5B1C((uint64_t)v39);
      goto LABEL_11;
    }
    *(_QWORD *)&v42 = v42 & 0x7FFFFFFFFFFFFFFLL;
    v36 = v41;
    v38 = v40;
    v43 = v40;
    v44 = v41;
    v45 = v42;
    v14 = *((_QWORD *)&v42 + 1);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    v13 = sub_1A57D9C2C();
    v28 = v27;
    v18 = v29;
    sub_1A57E5B1C((uint64_t)v39);
    result = sub_1A580E7F0();
    v17 = v36;
    v16 = v38;
    v15 = v26;
    v19 = result;
    v20 = v30;
    v12 = v28;
    v21 = v31;
    v22 = v14;
    if (v10 != 2)
      continue;
    break;
  }
LABEL_18:
  *(_BYTE *)a5 = v11 & 1;
  *(_OWORD *)(a5 + 8) = v16;
  *(_OWORD *)(a5 + 24) = v17;
  *(_QWORD *)(a5 + 40) = v15;
  *(_QWORD *)(a5 + 48) = v14;
  *(_QWORD *)(a5 + 56) = v13;
  *(_QWORD *)(a5 + 64) = v12;
  *(_BYTE *)(a5 + 72) = v18;
  return result;
}

uint64_t sub_1A57F9BC8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

Swift::Int sub_1A57F9BF0@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;

  result = sub_1A57F9464(a1, a2, *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80));
  if (!v4)
    *a3 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for UnsafePartBuffer(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[32])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafePartBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafePartBuffer()
{
  return &type metadata for UnsafePartBuffer;
}

unint64_t sub_1A57F9CD8()
{
  unint64_t result;

  result = qword_1EE7AA6C0;
  if (!qword_1EE7AA6C0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8868, &type metadata for DisplayPartTree.ChildNodes.Iterator);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6C0);
  }
  return result;
}

uint64_t sub_1A57F9D1C(uint64_t a1, char **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE v17[48];
  _OWORD v18[2];
  uint64_t v19;

  v3 = a1;
  v4 = *(_OWORD *)(a1 + 16);
  v18[0] = *(_OWORD *)a1;
  v18[1] = v4;
  v5 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)&v18[0];
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  sub_1A55032A0(a1 + 96, (uint64_t)v17, &qword_1EE799008);
  LOBYTE(v3) = *(_BYTE *)(v3 + 184) != 2;
  sub_1A54FCA28((uint64_t)v18);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57D8E30((uint64_t)v17);
  v10 = sub_1A57FBD50(v5, v7, v8, v9, (uint64_t)v17, v3);
  v11 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = sub_1A5811988(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    *a2 = v11;
  }
  v14 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  if (v14 >= v13 >> 1)
  {
    v11 = sub_1A5811988((char *)(v13 > 1), v14 + 1, 1, v11);
    *a2 = v11;
  }
  *((_QWORD *)v11 + 2) = v14 + 1;
  v15 = &v11[16 * v14];
  *((_QWORD *)v15 + 4) = v6;
  v15[40] = v10;
  return 2;
}

uint64_t sub_1A57F9E58(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (!v2)
    return !v3;
  if (v2 == 1)
    return v3 == 1;
  if (v3 < 2)
    return 0;
  return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v2, v3);
}

uint64_t sub_1A57F9E98(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & (v2 == v3);
}

uint64_t sub_1A57F9ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = v2 - 1;
    v5 = a2 + 32;
    result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v7 = 0;
    while (!__OFSUB__(v4, v7))
    {
      v8 = v7 + (v4 - v7) / 2;
      if (__OFADD__(v7, (v4 - v7) / 2))
        goto LABEL_16;
      if (v8 >= v2)
        goto LABEL_17;
      v9 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v10 = static SectionSpecifier.Part.< infix(_:_:)(v9, a1);
      result = swift_bridgeObjectRelease();
      if (v10)
      {
        v7 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_18;
        if (v4 < v7)
          goto LABEL_11;
      }
      else
      {
        v11 = *(_QWORD *)(v5 + 16 * v8);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v12 = static SectionSpecifier.Part.< infix(_:_:)(a1, v11);
        result = swift_bridgeObjectRelease();
        if (!v12)
          goto LABEL_13;
        v4 = v8 - 1;
        if ((uint64_t)(v8 - 1) < v7)
        {
LABEL_11:
          v8 = 0;
LABEL_13:
          swift_bridgeObjectRelease();
          return v8;
        }
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

Swift::Int sub_1A57FA000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  NIOIMAPCore2::SectionSpecifier::Part v11;
  char v12;

  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 8 * v8 + 24);
    SectionSpecifier.Part.dropLast()();
    result = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return result;
    }
    v11.array._rawValue = SectionSpecifier.Part.appending(_:)(result).array._rawValue;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11.array._rawValue = 0;
  }
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  result = sub_1A57F9ED8(a2, a1);
  if ((v12 & 1) != 0)
    result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = result;
  *(NIOIMAPCore2::SectionSpecifier::Part *)(a4 + 24) = v11;
  *(_BYTE *)(a4 + 32) = a3 & 1;
  return result;
}

void sub_1A57FA0B0()
{
  uint64_t *v0;
  int64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  NIOIMAPCore2::SectionSpecifier::Part v8;

  v1 = v0[2];
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 16);
  if (v1 < v3)
  {
    v4 = v0[3];
    v5 = v2 + 16 * v1 + 40;
    while (v1 < (unint64_t)v3)
    {
      v6 = *(_QWORD *)(v5 - 8);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      if (v4)
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v7 = static SectionSpecifier.Part.< infix(_:_:)(v6, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v7)
        {
          swift_bridgeObjectRelease();
LABEL_11:
          v0[2] = v1 + 1;
          return;
        }
      }
      if (*((_BYTE *)v0 + 32) != 1)
        goto LABEL_11;
      v8.array._rawValue = (void *)v0[1];
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      LOBYTE(v8.array._rawValue) = SectionSpecifier.Part.isChildPart(of:)(v8);
      swift_bridgeObjectRelease();
      if (((uint64_t)v8.array._rawValue & 1) != 0)
        goto LABEL_11;
      swift_bridgeObjectRelease();
      v0[2] = ++v1;
      v3 = *(_QWORD *)(v2 + 16);
      v5 += 16;
      if (v1 >= v3)
        return;
    }
    __break(1u);
  }
}

void sub_1A57FA1D4(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_1A57FA0B0();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

double sub_1A57FA1FC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  sub_1A57FA000(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_1A57FA264()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1A57FB6FC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1A57FA2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A57FB9EC(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
}

Swift::Int sub_1A57FA2BC(Swift::Int result, unsigned __int8 a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  NIOIMAPCore2::SectionSpecifier::Part v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  Swift::Bool v19;
  uint64_t v20;
  uint64_t v21;
  NIOIMAPCore2::SectionSpecifier::Part v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  NIOIMAPCore2::SectionSpecifier::Part v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  Swift::Bool v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void *rawValue;
  char v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79[8];
  uint64_t v80;
  _QWORD v81[2];

  if (a2 - 2 < 5)
    return result;
  v7 = result;
  v71 = a3 & 1;
  if (a2)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v74 = *a4;
    *a4 = 0x8000000000000000;
    sub_1A57FB250(0, v7, isUniquelyReferenced_nonNull_native);
    v66 = a4;
    *a4 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v40 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A57FA000(v40, v7, 1, (uint64_t)&v74);
    swift_bridgeObjectRelease();
    v41 = a5;
    swift_bridgeObjectRelease();
    v43 = v74;
    v42.array._rawValue = v75;
    v80 = v74;
    v44 = v76;
    result = sub_1A55032A0((uint64_t)&v77, (uint64_t)v79, &qword_1EE796AA8);
    v45 = *(_QWORD *)(v43 + 16);
    if (v44 >= v45)
    {
LABEL_84:
      sub_1A54F81BC((uint64_t)&v80);
      swift_bridgeObjectRelease();
      return sub_1A54F81BC((uint64_t)v79);
    }
    if (v44 < 0)
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    v46 = v78;
    while (1)
    {
      if ((unint64_t)v44 >= *(_QWORD *)(v43 + 16))
        goto LABEL_94;
      v47 = v43 + 32 + 16 * v44;
      v48 = *(_QWORD *)v47;
      v49 = *(unsigned __int8 *)(v47 + 8);
      sub_1A55032A0((uint64_t)v79, (uint64_t)v81, &qword_1EE796AA8);
      v50 = v81[0];
      if (v81[0])
      {
        swift_bridgeObjectRetain_n();
        sub_1A54FCA28((uint64_t)v79);
        v51 = static SectionSpecifier.Part.< infix(_:_:)(v48, v50);
        sub_1A54F81BC((uint64_t)v79);
        swift_bridgeObjectRelease();
        if (!v51)
        {
          swift_bridgeObjectRelease();
          goto LABEL_84;
        }
        if ((v46 & 1) == 0)
        {
LABEL_71:
          ++v44;
          sub_1A57FA2BC(v48, v49, v71, v66, v41);
          result = swift_bridgeObjectRelease();
          if (v44 >= v45)
            goto LABEL_84;
          goto LABEL_72;
        }
      }
      else
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        if ((v46 & 1) == 0)
          goto LABEL_71;
      }
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v52 = SectionSpecifier.Part.isChildPart(of:)(v42);
      swift_bridgeObjectRelease();
      if (v52)
        goto LABEL_71;
      result = swift_bridgeObjectRelease();
      if (++v44 >= v45)
        goto LABEL_84;
LABEL_72:
      if (v44 < 0)
        goto LABEL_93;
    }
  }
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v8 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57FA000(v8, v7, 1, (uint64_t)&v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9.array._rawValue = v75;
  v80 = v74;
  v10 = v76;
  result = sub_1A55032A0((uint64_t)&v77, (uint64_t)v79, &qword_1EE796AA8);
  v11 = v80;
  v69 = *(_QWORD *)(v80 + 16);
  if (v10 >= v69)
    goto LABEL_84;
  v12 = 0;
  v62 = 0;
  v68 = v78;
  v13 = v80 + 40;
  v58 = a5 + 56;
  rawValue = v9.array._rawValue;
  v63 = a5 + 32;
  v64 = v80 + 40;
  while (2)
  {
    v14 = (unsigned __int8 *)(v13 + 16 * v10);
    v15 = v10;
    v70 = v10;
    while (1)
    {
      if (v10 < 0)
        goto LABEL_95;
      if (v15 >= *(_QWORD *)(v11 + 16))
        goto LABEL_96;
      v16 = *((_QWORD *)v14 - 1);
      v67 = *v14;
      sub_1A55032A0((uint64_t)v79, (uint64_t)v81, &qword_1EE796AA8);
      v17 = v81[0];
      if (v81[0])
      {
        swift_bridgeObjectRetain_n();
        sub_1A54FCA28((uint64_t)v79);
        v18 = static SectionSpecifier.Part.< infix(_:_:)(v16, v17);
        sub_1A54F81BC((uint64_t)v79);
        swift_bridgeObjectRelease();
        if (!v18)
        {
          swift_bridgeObjectRelease();
LABEL_87:
          v29 = v62;
          goto LABEL_88;
        }
        if ((v68 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        if ((v68 & 1) == 0)
          goto LABEL_17;
      }
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v19 = SectionSpecifier.Part.isChildPart(of:)(v9);
      swift_bridgeObjectRelease();
      if (v19)
        break;
      result = swift_bridgeObjectRelease();
      ++v15;
      v14 += 16;
      v10 = v70;
      if ((uint64_t)v15 >= v69)
        goto LABEL_87;
    }
    v70 = v15;
LABEL_17:
    v20 = *(_QWORD *)(v16 + 16);
    v13 = v64;
    if (v20)
    {
      v21 = *(_QWORD *)(v16 + 8 * v20 + 24);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      SectionSpecifier.Part.dropLast()();
      result = v21 + 1;
      if (__OFADD__(v21, 1))
      {
LABEL_98:
        __break(1u);
        return result;
      }
      v22.array._rawValue = SectionSpecifier.Part.appending(_:)(result).array._rawValue;
      swift_bridgeObjectRelease();
    }
    else
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v22.array._rawValue = 0;
    }
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v23 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v24 = sub_1A57F9ED8(v23, a5);
    v61 = v12;
    if ((v25 & 1) != 0)
      v26 = *(_QWORD *)(a5 + 16);
    else
      v26 = v24;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(a5 + 16);
    if (v26 >= v27)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v29 = v62;
      v12 = v61;
      goto LABEL_28;
    }
    v55 = v7;
    v56 = a5;
    v65 = a4;
    if (v26 >= (unint64_t)v27)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    v57 = 0;
    v60 = 0;
    v28 = *(_QWORD *)(a5 + 16);
    while (1)
    {
      v31 = v63 + 16 * v26;
      v32 = *(unsigned __int8 *)(v31 + 8);
      if (v22.array._rawValue)
      {
        v33 = *(_QWORD *)v31;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v34 = static SectionSpecifier.Part.< infix(_:_:)(v33, (uint64_t)v22.array._rawValue);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (!v34)
          goto LABEL_62;
      }
      v30 = v26 + 1;
      if (!v71)
      {
        if (v32 == 2)
          goto LABEL_57;
        if (v32 != 3)
          goto LABEL_30;
        goto LABEL_44;
      }
      if (v32 != 2)
        break;
LABEL_44:
      if (v30 >= v27)
      {
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a5 = v56;
        swift_bridgeObjectRelease();
        a4 = v65;
        v7 = v55;
        if ((v60 & 1) != 0)
          goto LABEL_92;
LABEL_64:
        result = swift_bridgeObjectRelease();
        v12 = v16;
        v9.array._rawValue = rawValue;
        v29 = v67;
        goto LABEL_65;
      }
      v35 = (unsigned __int8 *)(v58 + 16 * v26);
      while (1)
      {
        if (v28 == v30)
          goto LABEL_97;
        v36 = *v35;
        if (v22.array._rawValue)
        {
          v37 = *((_QWORD *)v35 - 1);
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v38 = static SectionSpecifier.Part.< infix(_:_:)(v37, (uint64_t)v22.array._rawValue);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if (!v38)
          {
            v57 = 1;
            v13 = v64;
            goto LABEL_62;
          }
        }
        if (!v71)
          break;
        if (v36 != 2)
        {
          if (v36 == 3)
            goto LABEL_56;
LABEL_29:
          ++v30;
          v57 = 1;
          v13 = v64;
          goto LABEL_30;
        }
LABEL_47:
        ++v30;
        v35 += 16;
        v13 = v64;
        if (v30 >= v27)
          goto LABEL_59;
      }
      if (v36 == 3)
        goto LABEL_47;
      if (v36 != 2)
        goto LABEL_29;
LABEL_56:
      ++v30;
      v57 = 1;
      v13 = v64;
LABEL_57:
      if (v30 >= v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a5 = v56;
        swift_bridgeObjectRelease();
        a4 = v65;
        v7 = v55;
        goto LABEL_92;
      }
      v60 = 1;
LABEL_31:
      v26 = v30;
      if (v30 <= (unint64_t)v27)
        v28 = v27;
      else
        v28 = v30;
      if (v30 >= (unint64_t)v27)
        goto LABEL_97;
    }
    if (v32 == 3)
      goto LABEL_57;
LABEL_30:
    if (v30 < v27)
      goto LABEL_31;
LABEL_62:
    swift_bridgeObjectRelease();
    a5 = v56;
    swift_bridgeObjectRelease();
    a4 = v65;
    v7 = v55;
    v12 = v61;
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      if ((v57 & 1) != 0)
        goto LABEL_64;
      result = swift_bridgeObjectRelease();
      v29 = v62;
LABEL_28:
      v9.array._rawValue = rawValue;
LABEL_65:
      v10 = v70 + 1;
      v62 = v29;
      if ((uint64_t)(v70 + 1) >= v69)
      {
LABEL_88:
        sub_1A54F81BC((uint64_t)&v80);
        swift_bridgeObjectRelease();
        result = sub_1A54F81BC((uint64_t)v79);
        if (v12)
        {
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v53 = swift_isUniquelyReferenced_nonNull_native();
          v72 = *a4;
          *a4 = 0x8000000000000000;
          sub_1A57FB250(v12, v7, v53);
          *a4 = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1A57FA2BC(v12, v29, v71, a4, a5);
          return swift_bridgeObjectRelease();
        }
        return result;
      }
      continue;
    }
    break;
  }
LABEL_92:
  sub_1A54F81BC((uint64_t)&v80);
  swift_bridgeObjectRelease();
  sub_1A54F81BC((uint64_t)v79);
  swift_bridgeObjectRelease();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v54 = swift_isUniquelyReferenced_nonNull_native();
  v73 = *a4;
  *a4 = 0x8000000000000000;
  sub_1A57FB250(v16, v7, v54);
  *a4 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A57FA2BC(v16, v67, v71, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57FAAF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  char v38[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB60);
  v37 = a2;
  v6 = sub_1A594CA50();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    v31 = *v30;
    v32 = v30[1];
    if ((v37 & 1) == 0)
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
    sub_1A594CE64();
    SectionSpecifier.Part.hash(into:)((uint64_t)v38, v29);
    result = sub_1A594CED0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v29;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17);
    *v18 = v31;
    v18[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A57FADFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB58);
  v36 = a2;
  v6 = sub_1A594CA50();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v2;
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A54E7028(v32);
    }
    sub_1A594CE64();
    SectionSpecifier.Part.hash(into:)((uint64_t)v37, v31);
    result = sub_1A594CED0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A57FB0FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1A5802E10(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1A57FB3A0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v23 = (_QWORD *)(v18[7] + 16 * v12);
    *v23 = a1;
    v23[1] = a2;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
    goto LABEL_14;
  }
  sub_1A57FAAF0(v15, a4 & 1);
  v21 = sub_1A5802E10(a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A594CDF8();
  __break(1u);
  return result;
}

uint64_t sub_1A57FB250(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1A5802E10(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1A57FB554();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = sub_1A54E7074(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v21 = 8 * v10;
    *(_QWORD *)(v16[6] + v21) = a2;
    *(_QWORD *)(v16[7] + v21) = a1;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
    goto LABEL_14;
  }
  sub_1A57FADFC(v13, a3 & 1);
  v19 = sub_1A5802E10(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    v10 = v19;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A594CDF8();
  __break(1u);
  return result;
}

void *sub_1A57FB3A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB60);
  v2 = *v0;
  v3 = sub_1A594CA44();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A57FB554()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AB58);
  v2 = *v0;
  v3 = sub_1A594CA44();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    result = (void *)sub_1A54E7028(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A57FB6FC(uint64_t a1, uint64_t a2, char a3)
{
  NIOIMAPCore2::SectionSpecifier::Part v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  Swift::Bool v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD v42[3];
  _BYTE v43[16];
  char v44[8];
  uint64_t v45;
  uint64_t v46;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57FA000(a1, a2, a3, (uint64_t)v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v42[0];
  v6.array._rawValue = (void *)v42[1];
  v45 = v42[0];
  v8 = v42[2];
  result = sub_1A55032A0((uint64_t)v43, (uint64_t)v44, &qword_1EE796AA8);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  if (v8 >= v10)
  {
    v12 = 0;
    goto LABEL_34;
  }
  v12 = 0;
  v13 = v43[8];
  v14 = v7 + 40;
  v38 = MEMORY[0x1E0DEE9D8] + 32;
  while (2)
  {
    v39 = v12;
    v41 = v11;
    v15 = (_BYTE *)(v14 + 16 * v8);
    v16 = v8;
    while (1)
    {
      if (v8 < 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v16 >= *(_QWORD *)(v7 + 16))
        goto LABEL_39;
      v17 = *((_QWORD *)v15 - 1);
      v18 = *v15;
      sub_1A55032A0((uint64_t)v44, (uint64_t)&v46, &qword_1EE796AA8);
      v19 = v46;
      if (v46)
      {
        swift_bridgeObjectRetain_n();
        sub_1A54FCA28((uint64_t)v44);
        v20 = static SectionSpecifier.Part.< infix(_:_:)(v17, v19);
        sub_1A54F81BC((uint64_t)v44);
        result = swift_bridgeObjectRelease();
        if (!v20)
        {
          swift_bridgeObjectRelease();
LABEL_33:
          v12 = v39;
          v11 = v41;
          goto LABEL_34;
        }
        if ((v13 & 1) == 0)
          goto LABEL_15;
      }
      else
      {
        result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        if ((v13 & 1) == 0)
          goto LABEL_15;
      }
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v21 = SectionSpecifier.Part.isChildPart(of:)(v6);
      result = swift_bridgeObjectRelease();
      if (v21)
        break;
      result = swift_bridgeObjectRelease();
      ++v16;
      v15 += 16;
      if ((uint64_t)v16 >= v10)
        goto LABEL_33;
    }
    v8 = v16;
LABEL_15:
    v22 = v39;
    v11 = v41;
    v14 = v7 + 40;
    if (!v39)
    {
      v23 = *((_QWORD *)v41 + 3);
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_42;
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1)
        v25 = 1;
      else
        v25 = v24;
      __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B250);
      v26 = (char *)swift_allocObject();
      v27 = _swift_stdlib_malloc_size_0(v26);
      v28 = v27 - 32;
      if (v27 < 32)
        v28 = v27 - 17;
      v29 = v28 >> 4;
      *((_QWORD *)v26 + 2) = v25;
      *((_QWORD *)v26 + 3) = 2 * (v28 >> 4);
      v30 = v26 + 32;
      v31 = *((_QWORD *)v41 + 3) >> 1;
      v32 = 16 * v31;
      if (*((_QWORD *)v41 + 2))
      {
        v33 = v41 + 32;
        if (v26 != v41 || v30 >= &v33[v32])
        {
          v40 = v28 >> 4;
          memmove(v26 + 32, v33, v32);
          v30 = v26 + 32;
          v29 = v40;
        }
        *((_QWORD *)v41 + 2) = 0;
      }
      v38 = (uint64_t)&v30[v32];
      v22 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
      result = swift_release();
      v11 = v26;
      v14 = v7 + 40;
    }
    v34 = __OFSUB__(v22, 1);
    v12 = v22 - 1;
    if (v34)
      goto LABEL_40;
    ++v8;
    *(_QWORD *)v38 = v17;
    *(_BYTE *)(v38 + 8) = v18;
    v38 += 16;
    if (v8 < v10)
      continue;
    break;
  }
LABEL_34:
  sub_1A54F81BC((uint64_t)&v45);
  swift_bridgeObjectRelease();
  result = sub_1A54F81BC((uint64_t)v44);
  v35 = *((_QWORD *)v11 + 3);
  if (v35 < 2)
    return (uint64_t)v11;
  v36 = v35 >> 1;
  v34 = __OFSUB__(v36, v12);
  v37 = v36 - v12;
  if (!v34)
  {
    *((_QWORD *)v11 + 2) = v37;
    return (uint64_t)v11;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1A57FB9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  Swift::Bool v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;

  sub_1A57FA000(a4, a5, a6, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!a2)
  {
    a3 = 0;
    v24 = v34;
    *(_OWORD *)a1 = v33;
    *(_OWORD *)(a1 + 16) = v24;
    v25 = v35;
LABEL_26:
    *(_BYTE *)(a1 + 32) = v25;
    return a3;
  }
  v10 = v33;
  v11 = *((_QWORD *)&v34 + 1);
  v12 = v34;
  v32 = v35;
  if (!a3)
  {
LABEL_25:
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v11;
    v25 = v32;
    goto LABEL_26;
  }
  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v31 = a1;
  v13 = *(_QWORD *)(v33 + 16);
  if ((uint64_t)v34 >= v13)
  {
    v23 = 0;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = v33 + 40;
  v16 = 1;
  v26 = v33 + 40;
  v27 = a3;
  while (2)
  {
    v28 = v14;
    v29 = v16;
    v30 = a2;
    v17 = (_BYTE *)(v15 + 16 * v12);
    v18 = v12;
    while (1)
    {
      if (v12 < 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if ((unint64_t)v18 >= *(_QWORD *)(v10 + 16))
        goto LABEL_29;
      v19 = *((_QWORD *)v17 - 1);
      v20 = *v17;
      result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      if (v11)
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v21 = static SectionSpecifier.Part.< infix(_:_:)(v19, v11);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (!v21)
        {
          swift_bridgeObjectRelease();
          v12 = v18 + 1;
          goto LABEL_22;
        }
      }
      if (!v32)
        goto LABEL_16;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v22 = SectionSpecifier.Part.isChildPart(of:)(*(NIOIMAPCore2::SectionSpecifier::Part *)((char *)&v10 + 8));
      result = swift_bridgeObjectRelease();
      if (v22)
        break;
      result = swift_bridgeObjectRelease();
      ++v18;
      v17 += 16;
      if (v18 >= v13)
      {
        v12 = v18;
LABEL_22:
        v23 = v28;
        goto LABEL_23;
      }
    }
    v12 = v18;
LABEL_16:
    ++v12;
    v23 = v29;
    *(_QWORD *)v30 = v19;
    *(_BYTE *)(v30 + 8) = v20;
    v15 = v26;
    a3 = v27;
    if (v29 == v27)
    {
      a1 = v31;
      goto LABEL_25;
    }
    v16 = v29 + 1;
    a2 = v30 + 16;
    v14 = v29;
    if (v12 < v13)
      continue;
    break;
  }
LABEL_23:
  *(_OWORD *)v31 = v10;
  *(_QWORD *)(v31 + 16) = v12;
  *(_QWORD *)(v31 + 24) = v11;
  a3 = v23;
  *(_BYTE *)(v31 + 32) = v32;
  return a3;
}

unint64_t sub_1A57FBC00(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unint64_t v10;
  Swift::Int v11;
  unsigned __int8 v12;
  unint64_t v13;
  _BYTE v14[16];
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = MEMORY[0x1E0DEE9D8];
  v21 = MEMORY[0x1E0DEE9D8];
  v15 = &v21;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  sub_1A57DC054(3, (uint64_t (*)(_QWORD *))OUTLINED_FUNCTION_6_1, 0, (uint64_t (*)(_OWORD *))sub_1A57FBD30, (uint64_t)v14, (uint64_t)nullsub_1, 0, a2, a3, a4, a5);
  v7 = v21;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  result = sub_1A57F9ED8(v6, v7);
  if ((v9 & 1) != 0)
  {
    v13 = sub_1A57CA124(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease_n();
    return v13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v7 + 16))
  {
    v10 = v7 + 16 * result;
    v11 = *(_QWORD *)(v10 + 32);
    v12 = *(_BYTE *)(v10 + 40);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v20 = sub_1A57CA124(MEMORY[0x1E0DEE9D8]);
    sub_1A57FA2BC(v11, v12, a1 & 1, &v20, v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57FBD30(uint64_t a1)
{
  uint64_t v1;

  return sub_1A57F9D1C(a1, *(char ***)(v1 + 16));
}

uint64_t sub_1A57FBD50(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  __int128 v20;
  _OWORD v21[3];
  _BYTE v22[40];
  __n128 v23[2];
  unsigned __int8 v24;
  __n128 v25;
  __n128 v26;
  char v27;
  unsigned __int8 *v28[2];
  char v29;

  if ((a6 & 1) != 0)
  {
    sub_1A57D8E08(a5);
    swift_bridgeObjectRelease();
    return 5;
  }
  sub_1A55032A0(a5, (uint64_t)v19, &qword_1EE799008);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_10;
  v21[0] = v19[0];
  v21[1] = v19[1];
  v21[2] = v20;
  sub_1A57CACB8((uint64_t)v21, (uint64_t)v22);
  sub_1A57CACB8((uint64_t)v22, (uint64_t)v23);
  v12 = v24 >> 4;
  if (v12 == 5)
  {
    v24 &= 0xFu;
    sub_1A55032A0((uint64_t)v23, (uint64_t)&v26, (uint64_t *)&unk_1EE799400);
    sub_1A55032A0((uint64_t)&v26, (uint64_t)v28, (uint64_t *)&unk_1EE799400);
    if ((v29 & 1) != 0)
      goto LABEL_10;
    v16 = sub_1A57E2C20(v28[0], v28[1]);
    v17 = v15;
    if (v16 == 1819112552 && v15 == 0xE400000000000000 || (sub_1A594CD38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1A57D8E08(a5);
      swift_bridgeObjectRelease();
      return 2;
    }
    if (v16 == 0x6E69616C70 && v17 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
LABEL_10:
        v14 = sub_1A57C9DF0(a1, a2, a3, a4, a5);
        sub_1A57D8E08(a5);
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          return 4;
        else
          return 6;
      }
    }
    sub_1A57D8E08(a5);
    swift_bridgeObjectRelease();
    return 3;
  }
  if (v12)
    goto LABEL_10;
  v24 &= 0xFu;
  sub_1A57E1F38(v23, &v25);
  sub_1A57E1F38(&v25, &v26);
  if (v27 < 0)
  {
    v27 &= ~0x80u;
    sub_1A55032A0((uint64_t)&v26, (uint64_t)v28, (uint64_t *)&unk_1EE799400);
    sub_1A57D8E08(a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v26.n128_u8[0];
    sub_1A57D8E08(a5);
    swift_bridgeObjectRelease();
    if (!v13)
      return 0;
  }
  return 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConnectionUsage.NonMailboxUsage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  *a1 = v3;
  return a1;
}

unint64_t destroy for MailboxOfInterest.LocalModification(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for ConnectionUsage.NonMailboxUsage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
  }
  return a1;
}

_QWORD *__swift_memcpy8_8_2(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for ConnectionUsage.NonMailboxUsage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionUsage.NonMailboxUsage(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionUsage.NonMailboxUsage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *sub_1A57FC1E0(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MultipartChoice()
{
  return &type metadata for MultipartChoice;
}

uint64_t sub_1A57FC214(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for DisplayPartTree.ChildNodes(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DisplayPartTree.ChildNodes(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayPartTree.ChildNodes()
{
  return &type metadata for DisplayPartTree.ChildNodes;
}

ValueMetadata *type metadata accessor for DisplayPartTree()
{
  return &type metadata for DisplayPartTree;
}

uint64_t __swift_memcpy9_8_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.Node()
{
  return &type metadata for DisplayPartTree.Node;
}

uint64_t initializeWithCopy for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayPartTree.ChildNodes.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayPartTree.ChildNodes.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.ChildNodes.Iterator()
{
  return &type metadata for DisplayPartTree.ChildNodes.Iterator;
}

uint64_t storeEnumTagSinglePayload for DisplayPartTree.Node.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1A57FC550 + 4 * byte_1A59D87F9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1A57FC584 + 4 * asc_1A59D87F4[v4]))();
}

uint64_t sub_1A57FC584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FC58C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57FC594);
  return result;
}

uint64_t sub_1A57FC5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57FC5A8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1A57FC5AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FC5B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.Node.Kind()
{
  return &type metadata for DisplayPartTree.Node.Kind;
}

unint64_t sub_1A57FC5D4()
{
  unint64_t result;

  result = qword_1EE7AA6C8;
  if (!qword_1EE7AA6C8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8974, &type metadata for DisplayPartTree.Node.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6C8);
  }
  return result;
}

BOOL static DisplayPart.PlainTextLineKind.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t DisplayPart.PlainTextLineKind.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t DisplayPart.PlainTextLineKind.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

unint64_t sub_1A57FC698()
{
  unint64_t result;

  result = qword_1EE7AA6D0;
  if (!qword_1EE7AA6D0)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for DisplayPart.PlainTextLineKind, &type metadata for DisplayPart.PlainTextLineKind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6D0);
  }
  return result;
}

uint64_t _s17PlainTextLineKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A57FC728 + 4 * byte_1A59D89A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A57FC75C + 4 * byte_1A59D89A0[v4]))();
}

uint64_t sub_1A57FC75C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FC764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57FC76CLL);
  return result;
}

uint64_t sub_1A57FC778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57FC780);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A57FC784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FC78C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart.PlainTextLineKind()
{
  return &type metadata for DisplayPart.PlainTextLineKind;
}

uint64_t sub_1A57FC7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;

  if (a4)
  {
    if (*(_QWORD *)(a4 + 16) == 1)
    {
      v9 = *(_QWORD *)(a4 + 32);
      v10 = *(_QWORD *)(a4 + 40);
      v11 = *(__int16 *)(a4 + 48);
      result = swift_bridgeObjectRelease();
      if (v11 < 0)
      {
        if (v9)
          v13 = v10 - v9;
        else
          v13 = 0;
        if (v13 < 0)
        {
          __break(1u);
LABEL_24:
          __break(1u);
          return result;
        }
        sub_1A580ADB8("flowed", 6, 0, v13, v9, v10, &v19);
        if (v19 == 1)
        {
          if (a8)
          {
            if (*(_QWORD *)(a8 + 16) == 1)
            {
              v14 = *(_QWORD *)(a8 + 32);
              v15 = *(_QWORD *)(a8 + 40);
              v16 = *(__int16 *)(a8 + 48);
              result = swift_bridgeObjectRelease();
              if (v16 < 0)
              {
                if (v14)
                  v17 = v15 - v14;
                else
                  v17 = 0;
                if ((v17 & 0x8000000000000000) == 0)
                {
                  sub_1A580ADB8("yes", 3, 0, v17, v14, v15, &v18);
                  if ((v18 & 1) != 0)
                    return 2;
                  return 1;
                }
                goto LABEL_24;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          return 1;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1A57FC8C4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;

  v6 = a2 - result;
  if (a3)
    v7 = (char *)(a3 + result);
  else
    v7 = 0;
  if (a3)
    v8 = a2 - result;
  else
    v8 = 0;
  if (v8 < 0)
  {
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v53 = 0;
  v54 = v8;
  v55 = v7;
  v56 = v8;
  v9 = a6 - a5;
  if (a5)
    v10 = a6 - a5;
  else
    v10 = 0;
  if (v10 < 0)
    goto LABEL_128;
  v11 = a3;
  if (v10)
  {
    v46 = a4;
    v47 = a2 - result;
    v48 = result;
    v49 = a2;
    v12 = 0;
    v13 = 0;
    v14 = 2;
    v52 = v7;
    do
    {
      if (!a5)
      {
        v12 = 0;
        v18 = 0;
        v14 = 2;
        goto LABEL_82;
      }
      v15 = a5;
      v16 = (unsigned __int8 *)&v13[a5];
      v17 = v9;
      v18 = (uint64_t)v13;
      v19 = v9 - (_QWORD)v13;
      result = (uint64_t)memchr(&v13[a5], 10, v9 - (_QWORD)v13);
      if (!result)
        goto LABEL_80;
      v20 = (char *)(result - (_QWORD)v16);
      if (result - (uint64_t)v16 < 0)
        goto LABEL_80;
      v21 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_116;
      if (v19 < (uint64_t)v21)
        goto LABEL_80;
      v22 = &v20[v18];
      if (__OFADD__(v20, v18))
        goto LABEL_117;
      v13 = &v21[v18];
      if (__OFADD__(v21, v18))
      {
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if ((uint64_t)v21 < (uint64_t)v20 || (uint64_t)v13 < (uint64_t)v22)
        goto LABEL_119;
      v9 = v17;
      a5 = v15;
      v7 = v52;
      if (v18 < (uint64_t)v22)
      {
        if ((uint64_t)v22 > v9)
          goto LABEL_124;
        if (v22[v15 - 1] == 13)
          --v22;
      }
      v23 = (uint64_t)&v22[-v18];
      if ((uint64_t)v22 < v18)
        goto LABEL_120;
      if (v9 < (uint64_t)v22)
        goto LABEL_121;
      if (v14 != 2 && (v14 & 1) == 0 && v12 != v8)
      {
        v52[v12++] = 10;
        if (v8 < v12)
          goto LABEL_125;
      }
      v24 = (unsigned __int8 *)&v22[v15];
      if (v22 == (char *)v18)
      {
        v14 = 0;
      }
      else
      {
        if (v23 < 1)
          goto LABEL_126;
        v25 = &v16[v23 - 1];
        v26 = *v25;
        v14 = v26 == 61;
        if (v26 == 61)
          v24 = v25;
      }
      v27 = (unsigned __int8 *)(v24 - v16);
      if (v24 - v16 < 0)
        goto LABEL_122;
      if (v24 != v16)
      {
        v28 = 0;
        do
        {
          v29 = v28 + 1;
          if ((uint64_t)v27 < (uint64_t)(v28 + 1))
          {
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
          v30 = v28[(_QWORD)v16];
          if (v30 == 9 || v30 == 32)
          {
            if (v12 == v8)
            {
              v12 = v8;
LABEL_62:
              ++v28;
              continue;
            }
            v52[v12++] = 32;
            ++v28;
            if (v8 < v12)
              goto LABEL_111;
          }
          else if (v30 == 61)
          {
            if (v29 == v27)
              break;
            v31 = v28 + 2;
            if ((uint64_t)v27 < (uint64_t)(v28 + 2))
              goto LABEL_112;
            if (v31 == v27)
              break;
            v28 += 3;
            if ((uint64_t)v27 < (uint64_t)v28)
              goto LABEL_113;
            v32 = v29[(_QWORD)v16];
            v33 = v31[(_QWORD)v16];
            if ((v32 - 58) > 0xF5u)
            {
              v34 = -48;
            }
            else if ((v32 - 71) > 0xF9u)
            {
              v34 = -55;
            }
            else
            {
              if ((v32 - 103) <= 0xF9u)
                continue;
              v34 = -87;
            }
            if ((v33 - 58) > 0xF5u)
            {
              v36 = -48;
              if (v12 == v8)
                goto LABEL_73;
            }
            else if ((v33 - 71) > 0xF9u)
            {
              v36 = -55;
              if (v12 == v8)
              {
LABEL_73:
                v12 = v8;
                continue;
              }
            }
            else
            {
              if ((v33 - 103) < 0xFAu)
                continue;
              v36 = -87;
              if (v12 == v8)
                goto LABEL_73;
            }
            v52[v12++] = (v33 + v36) | (16 * (v32 + v34));
            if (v8 < v12)
              goto LABEL_115;
          }
          else
          {
            if ((v30 - 127) < 0xFFFFFFA1 || v12 == v8)
              goto LABEL_62;
            v52[v12++] = v30;
            ++v28;
            if (v8 < v12)
              goto LABEL_114;
          }
        }
        while (v28 != v27);
      }
      if (v10 < (uint64_t)v13)
        goto LABEL_123;
    }
    while ((uint64_t)v13 >= v18);
    __break(1u);
LABEL_80:
    a5 = v15;
    v7 = v52;
LABEL_82:
    v57 = v14;
    v53 = v12;
    if (v18 != v10)
    {
      if (a5)
        v37 = a5 + v10;
      else
        v37 = 0;
      if (a5)
        v38 = a5 + v18;
      else
        v38 = 0;
      sub_1A57FD09C(v38, v37, 1, &v57, &v53);
      if (v51)
        return (uint64_t)v7;
      v14 = v57;
    }
    if (v14 == 2 || (v14 & 1) != 0 || (v39 = v53, v40 = v54, v53 == v54))
    {
      a2 = v49;
      v11 = v50;
      v6 = v47;
      result = v48;
      a4 = v46;
      goto LABEL_97;
    }
    v55[v53] = 10;
    v41 = v39 + 1;
    a2 = v49;
    v11 = v50;
    v6 = v47;
    result = v48;
    a4 = v46;
    if (v40 >= v41)
    {
      v53 = v41;
      goto LABEL_97;
    }
    goto LABEL_136;
  }
LABEL_97:
  v42 = a4 - v11;
  if (!v11)
    v42 = 0;
  if (result < 0 || v42 < result)
    goto LABEL_129;
  if ((a2 & 0x8000000000000000) != 0 || v42 < (uint64_t)a2)
    goto LABEL_130;
  v43 = v6 - (v54 - v53);
  if (__OFSUB__(v6, v54 - v53))
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v44 = __OFADD__(result, v43);
  v45 = result + v43;
  if (v44)
  {
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if ((v45 & 0x8000000000000000) != 0 || v42 < (uint64_t)v45)
    goto LABEL_133;
  if (v45 >= result)
  {
    if (v45 <= a2)
      return (uint64_t)v7;
    goto LABEL_135;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

uint64_t sub_1A57FCD90(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v7 = a2 - result;
  if (a3)
    v8 = a3 + result;
  else
    v8 = 0;
  if (a3)
    v9 = a2 - result;
  else
    v9 = 0;
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = result;
  v18 = 0;
  v19 = v9;
  v20 = v8;
  v21 = v9;
  result = sub_1A57FCE98(1, &v18, a5, a6);
  if (v6)
    return v8;
  v14 = a4 - a3;
  if (!a3)
    v14 = 0;
  if (v13 < 0 || v14 < v13)
    goto LABEL_23;
  if ((a2 & 0x8000000000000000) != 0 || v14 < (uint64_t)a2)
    goto LABEL_24;
  v15 = v7 - (v19 - v18);
  if (__OFSUB__(v7, v19 - v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = __OFADD__(v13, v15);
  v17 = v13 + v15;
  if (v16)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v17 & 0x8000000000000000) != 0 || v14 < (uint64_t)v17)
    goto LABEL_27;
  if (v17 < v13)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v17 <= a2)
    return v8;
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1A57FCE98(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (v4 < 0)
    goto LABEL_54;
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = v5 + 1;
      if (v4 < v5 + 1)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        return result;
      }
      v7 = *(unsigned __int8 *)(a3 + v5);
      if (v7 == 61)
      {
        if (v6 == v4)
          return result;
        v8 = v5 + 2;
        if (v4 < v5 + 2)
          goto LABEL_50;
        if (v8 == v4)
          return result;
        v9 = v5 + 3;
        if (v4 < v5 + 3)
          goto LABEL_51;
        v10 = *(_BYTE *)(a3 + v6);
        v11 = *(_BYTE *)(a3 + v8);
        if ((v10 - 58) > 0xF5u)
        {
          v12 = -48;
        }
        else
        {
          if ((v10 - 71) <= 0xF9u)
          {
            if ((v10 - 103) >= 0xFAu)
            {
              v12 = -87;
              goto LABEL_39;
            }
LABEL_6:
            v6 = v9;
            goto LABEL_7;
          }
          v12 = -55;
        }
LABEL_39:
        if ((v11 - 58) > 0xF5u)
        {
          v20 = -48;
        }
        else if ((v11 - 71) > 0xF9u)
        {
          v20 = -55;
        }
        else
        {
          if ((v11 - 103) < 0xFAu)
            goto LABEL_6;
          v20 = -87;
        }
        v21 = *a2;
        v14 = a2[1];
        if (*a2 != v14)
        {
          v22 = (v11 + v20) | (16 * (v10 + v12));
          v15 = a2[2];
          *(_BYTE *)(v15 + v21) = v22;
          v16 = v21 + 1;
          if (v14 < v21 + 1)
            goto LABEL_52;
          goto LABEL_47;
        }
        goto LABEL_6;
      }
      if ((result & 1) != 0)
      {
        if (v7 != 9 && v7 != 32)
        {
          if (v7 != 95)
            goto LABEL_34;
          v13 = *a2;
          v14 = a2[1];
          if (*a2 != v14)
          {
            v15 = a2[2];
            *(_BYTE *)(v15 + v13) = 32;
            v16 = v13 + 1;
            if (v14 < v13 + 1)
              goto LABEL_56;
            goto LABEL_32;
          }
          goto LABEL_7;
        }
      }
      else if (v7 != 32 && v7 != 9)
      {
LABEL_34:
        if ((v7 - 127) < 0xFFFFFFA1)
          goto LABEL_7;
        v19 = *a2;
        v14 = a2[1];
        if (*a2 == v14)
          goto LABEL_7;
        v15 = a2[2];
        *(_BYTE *)(v15 + v19) = v7;
        v16 = v19 + 1;
        if (v14 < v16)
          goto LABEL_55;
LABEL_32:
        v9 = v6;
LABEL_47:
        *a2 = v16;
        a2[1] = v14;
        v6 = v9;
        a2[2] = v15;
        goto LABEL_7;
      }
      v18 = *a2;
      v14 = a2[1];
      if (*a2 != v14)
      {
        v15 = a2[2];
        *(_BYTE *)(v15 + v18) = 32;
        v16 = v18 + 1;
        if (v14 < v18 + 1)
          goto LABEL_53;
        goto LABEL_32;
      }
LABEL_7:
      v5 = v6;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_1A57FD09C(uint64_t result, uint64_t a2, char a3, _BYTE *a4, uint64_t *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v5 = a2;
  v6 = *a4;
  if (v6 != 2 && (v6 & 1) == 0)
  {
    v9 = *a5;
    v8 = a5[1];
    if (*a5 != v8)
    {
      v10 = a5[2];
      *(_BYTE *)(v10 + v9) = 10;
      v11 = v9 + 1;
      if (v8 < v11)
        goto LABEL_22;
      *a5 = v11;
      a5[1] = v8;
      a5[2] = v10;
    }
  }
  if (!result)
    goto LABEL_16;
  v12 = a2 - result;
  if (a2 == result)
    goto LABEL_16;
  v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else if ((v13 & 0x8000000000000000) == 0 && v13 < v12)
  {
    v14 = (_BYTE *)(result + v13);
    if (*v14 == 61)
    {
      *a4 = 1;
      v5 = (uint64_t)v14;
      return sub_1A57FCE98(0, a5, result, v5);
    }
LABEL_16:
    if ((a3 & 1) != 0)
      *a4 = 2;
    else
      *a4 = 0;
    return sub_1A57FCE98(0, a5, result, v5);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A57FD16C(int64_t a1, int64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int64_t v18;
  int64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t *v23;
  uint64_t v24;
  char v25;
  int8x8_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t isStackAllocationSafe;
  unsigned __int8 **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int8x8_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t *v43;
  uint64_t v44;
  char v45;
  int8x8_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int8x8_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned __int8 *v62;
  int64_t *v63;
  unsigned __int8 *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74[5];
  _QWORD v75[2];
  char v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;

  v65 = a5;
  v79 = *MEMORY[0x1E0C80C00];
  v7 = a4 - a3;
  if (a3)
    v8 = a4 - a3;
  else
    v8 = 0;
  if (v8 < 0)
    goto LABEL_75;
  v9 = v6;
  v10 = (uint64_t)a2;
  v70 = 0;
  v71 = v8;
  v72 = a3;
  v73 = a4;
  if (v8)
  {
    v12 = 0;
    v63 = a2;
    do
    {
      if (v12 >= v7)
      {
        __break(1u);
        goto LABEL_69;
      }
      if (*(_BYTE *)(a3 + v12) != 61)
        goto LABEL_12;
      sub_1A57FD8D4(a1, a2, v74);
      sub_1A57FDC74((uint64_t)v74, (uint64_t)v75);
      v13 = v76;
      if (v76 == 2)
      {
        v12 = v70;
        v7 = v71;
LABEL_12:
        if (v12 == v7)
LABEL_19:
          __asm { BR              X11 }
        if (v12 < v7)
        {
          v14 = v73 - v72;
          if (!v72)
            v14 = 0;
          if ((v12 & 0x8000000000000000) == 0 && v12 < v14)
          {
            v70 = v12 + 1;
            goto LABEL_19;
          }
LABEL_70:
          __break(1u);
          JUMPOUT(0x1A57FD824);
        }
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v15 = (unsigned __int8 *)v75[1];
      v64 = (unsigned __int8 *)v75[0];
      v17 = v77;
      v16 = v78;
      sub_1A5807418(v10);
      if (v17)
        v18 = v16 - v17;
      else
        v18 = 0;
      v19 = v18 + 1;
      v20 = __OFADD__(v18, 1);
      if ((v13 & 1) != 0)
      {
        if (v20)
          goto LABEL_72;
        if (v19 < 0)
          goto LABEL_74;
        v30 = v15;
        isStackAllocationSafe = swift_retain();
        if (v19 < 1025
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          v32 = &v62;
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v34 = sub_1A57FCD90(0, v19, (uint64_t)&v62 - v33, (uint64_t)&v62 + v19 - v33, (uint64_t)v17, (uint64_t)v16);
          if (v9)
            goto LABEL_77;
          if ((v36 & 1) != 0)
          {
            sub_1A57FDCBC();
            swift_allocError();
            swift_willThrow();
LABEL_77:
            swift_willThrow();
            __break(1u);
LABEL_78:
            sub_1A57FDCBC();
            swift_allocError();
            swift_willThrow();
LABEL_79:
            MEMORY[0x1A85B1964](v32, -1, -1);
            __break(1u);
            JUMPOUT(0x1A57FD8C4);
          }
          v37 = (int8x8_t *)v34;
          v38 = v35;
          v39 = v65;
          swift_retain();
          sub_1A580A260(v64, v30, 0, 0, 0, v39, v37, v38);
          v41 = v40;
        }
        else
        {
          v32 = (unsigned __int8 **)swift_slowAlloc();
          v51 = sub_1A57FCD90(0, v19, (uint64_t)v32, (uint64_t)v32 + v19, (uint64_t)v17, (uint64_t)v16);
          if (v9)
            goto LABEL_79;
          if ((v53 & 1) != 0)
            goto LABEL_78;
          v54 = (int8x8_t *)v51;
          v55 = v52;
          v56 = v65;
          swift_retain();
          sub_1A580A260(v64, v30, 0, 0, 0, v56, v54, v55);
          v41 = v57;
          MEMORY[0x1A85B1964](v32, -1, -1);
        }
        v10 = (uint64_t)v63;
        if (!v41)
          sub_1A57D25E8(v17, v16, 0);
        goto LABEL_60;
      }
      if (v20)
      {
        __break(1u);
LABEL_72:
        __break(1u);
        JUMPOUT(0x1A57FD830);
      }
      if (v19 < 0)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        JUMPOUT(0x1A57FD848);
      }
      v62 = v15;
      v21 = swift_retain();
      if (v19 < 1025 || (v21 = swift_stdlib_isStackAllocationSafe(), (v21 & 1) != 0))
      {
        MEMORY[0x1E0C80A78](v21);
        v23 = (int8x8_t *)sub_1A57CB474(v17, (uint64_t)v16, (uint64_t)&v62 - v22, (uint64_t)&v62 + v19 - v22, 0);
        if (!v9)
        {
          if ((v25 & 1) == 0)
          {
            v26 = v23;
            v27 = v24;
            v28 = v65;
            swift_retain();
            sub_1A580A260(v64, v62, 0, 0, 0, v28, v26, v27);
            if (v29)
              goto LABEL_45;
            goto LABEL_56;
          }
          sub_1A57FDCBC();
          v9 = (void *)swift_allocError();
          swift_willThrow();
        }
        swift_willThrow();
      }
      else
      {
        v42 = swift_slowAlloc();
        v43 = (int8x8_t *)sub_1A57CB474(v17, (uint64_t)v16, v42, v42 + v19, 0);
        if (!v9)
        {
          if ((v45 & 1) == 0)
          {
            v46 = v43;
            v47 = v44;
            v48 = v65;
            swift_retain();
            sub_1A580A260(v64, v62, 0, 0, 0, v48, v46, v47);
            v50 = v49;
            MEMORY[0x1A85B1964](v42, -1, -1);
            if (v50)
            {
LABEL_45:
              swift_release();
              v10 = (uint64_t)v63;
              goto LABEL_61;
            }
            goto LABEL_56;
          }
          sub_1A57FDCBC();
          v9 = (void *)swift_allocError();
          swift_willThrow();
        }
        MEMORY[0x1A85B1964](v42, -1, -1);
      }

      v9 = 0;
LABEL_56:
      v68 = 0;
      v69 = 0xE000000000000000;
      MEMORY[0x1A85AD968](v18);
      v58 = v68;
      v59 = v69;
      if (v17)
      {
        v10 = (uint64_t)v63;
        goto LABEL_62;
      }
      v10 = (uint64_t)v63;
      if (v16)
      {
        v17 = 0;
        do
        {
          v60 = *v17++;
          if ((v60 - 1) <= 0x7D)
          {
            v66 = v58;
            v67 = v59;
            sub_1A594B52C();
            v58 = v66;
            v59 = v67;
          }
LABEL_62:
          ;
        }
        while (!v16 || v17 != v16);
      }
      swift_bridgeObjectRelease();
LABEL_60:
      swift_release();
LABEL_61:
      sub_1A594B5F8();
      a1 = swift_bridgeObjectRelease();
      *a6 = 1;
      v7 = v71;
      a3 = v72;
      v12 = v70;
    }
    while (v70 != v71);
  }
  return sub_1A5807418(v10);
}

int64_t sub_1A57FD8D4@<X0>(int64_t result@<X0>, int64_t *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t *v10;
  int64_t v11;
  int64_t v12;
  unsigned int v13;
  int64_t v15;
  int64_t v16;
  BOOL v17;
  unsigned int v18;
  int64_t v19;
  unsigned int v20;
  unint64_t v21;
  int64_t v23;
  BOOL v24;
  int64_t v25;

  v11 = *v10;
  v12 = v10[1];
  if (*v10 == v12)
    goto LABEL_28;
  if (*v10 >= v12)
  {
    __break(1u);
    goto LABEL_58;
  }
  v3 = v10[2];
  if (*(_BYTE *)(v3 + v11) != 61)
    goto LABEL_28;
  v4 = v10[3];
  v5 = v11 + 1;
  *v10 = v11 + 1;
  if (v11 + 1 == v12)
    goto LABEL_28;
  if (v11 + 1 >= v12)
  {
    __break(1u);
LABEL_80:
    v25 = result;
    v10 = a2;
    while (1)
    {
      v23 = v25 + 2;
      if (__OFADD__(v25 + 1, 1))
        goto LABEL_97;
      if (v12 < v23)
        goto LABEL_98;
      if (v23 < ++v25)
        goto LABEL_99;
      if (v23 == v12)
        goto LABEL_88;
      if (*(_BYTE *)(v3 + v23) == 63)
        goto LABEL_59;
    }
  }
  if (*(_BYTE *)(v3 + v5) != 63)
    goto LABEL_28;
  v6 = v11 + 2;
  *v10 = v11 + 2;
  if (v11 + 2 == v12)
    goto LABEL_28;
  if (v11 + 2 >= v12)
  {
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v5 = v3 + v6;
  v13 = *(unsigned __int8 *)(v3 + v6);
  v17 = v13 > 0x3F;
  v7 = (1 << v13) & 0x8000000000102600;
  if (!v17 && v7 != 0)
  {
    v8 = v11 + 2;
    goto LABEL_17;
  }
  v8 = v11 + 3;
  v7 = v12;
  v17 = v11 + 3 < v12;
  if (v11 + 3 == v12)
  {
LABEL_31:
    *v10 = v7;
    v8 = v7;
    v17 = v7 < v6;
    if (v7 >= v6)
      goto LABEL_17;
    __break(1u);
  }
  if (!v17)
    goto LABEL_91;
  v18 = *(unsigned __int8 *)(v3 + v8);
  if (v18 > 0x3F || (v7 = 1 << v18, v9 = 0x8000000000102600, (v7 & 0x8000000000102600) == 0))
  {
    v9 = 0x8000000000102600;
    result = v11 + 2;
    while (1)
    {
      v7 = result + 2;
      if (__OFADD__(result + 1, 1))
        goto LABEL_92;
      if (v12 < v7)
        goto LABEL_93;
      if (v7 < ++result)
        goto LABEL_94;
      if (v7 == v12)
      {
        v7 = v12;
        goto LABEL_31;
      }
      v20 = *(unsigned __int8 *)(v3 + v7);
      v17 = v20 > 0x3F;
      v21 = (1 << v20) & 0x8000000000102600;
      if (!v17 && v21 != 0)
        goto LABEL_31;
    }
  }
  *v10 = v8;
LABEL_17:
  if (v12 >= v8)
  {
    if (v8 != v12)
    {
      if (v8 >= v12)
        goto LABEL_89;
      v7 = v3 + v8;
      if (*(_BYTE *)(v3 + v8) == 63 && v6 != v8 && v8 + 1 != v12)
      {
        if (v8 + 1 >= v12)
        {
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        v6 = 0;
        result = *(unsigned __int8 *)(v3 + v8 + 1);
        v15 = v8 + 2;
        *v10 = v8 + 2;
        if ((int)result > 97)
        {
          if ((_DWORD)result == 98)
            goto LABEL_41;
          if ((_DWORD)result != 113)
            goto LABEL_78;
        }
        else
        {
          if ((_DWORD)result == 66)
            goto LABEL_41;
          if ((_DWORD)result != 81)
            goto LABEL_78;
        }
        v6 = 1;
LABEL_41:
        if (v15 != v12)
        {
          if (v15 < v12)
          {
            if (*(_BYTE *)(v3 + v15) != 63)
              goto LABEL_78;
            result = v8 + 3;
            *v10 = v8 + 3;
            v10[1] = v12;
            v10[2] = v3;
            v10[3] = v4;
            if (v8 + 3 == v12)
              goto LABEL_78;
            if (v8 + 3 >= v12)
              goto LABEL_100;
            v9 = v3 + result;
            if (*(_BYTE *)(v3 + result) == 63)
            {
              v19 = v8 + 3;
              goto LABEL_65;
            }
LABEL_58:
            v19 = v8 + 4;
            v23 = v12;
            v24 = v19 < v12;
            if (v19 != v12)
              goto LABEL_61;
            goto LABEL_59;
          }
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
LABEL_78:
        v5 = 0;
        v7 = 0;
        v9 = 0;
        v16 = 0;
        *v10 = v11;
        v10[1] = v12;
        v6 = 2;
        v10[2] = v3;
        v10[3] = v4;
        goto LABEL_29;
      }
    }
LABEL_28:
    v5 = 0;
    v7 = 0;
    v9 = 0;
    v16 = 0;
    *v10 = v11;
    v6 = 2;
LABEL_29:
    *a3 = v5;
    a3[1] = v7;
    a3[2] = v6;
    a3[3] = v9;
    a3[4] = v16;
    return result;
  }
  __break(1u);
LABEL_88:
  v23 = v12;
LABEL_59:
  *v10 = v23;
  v10[2] = v3;
  v19 = v23;
  v24 = v23 < result;
  if (v23 >= result)
    goto LABEL_65;
  __break(1u);
LABEL_61:
  if (!v24)
    goto LABEL_102;
  a2 = v10;
  if (*(_BYTE *)(v3 + v19) != 63)
    goto LABEL_80;
  *v10 = v19;
  v10[2] = v3;
LABEL_65:
  if (v12 < v19)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v19 == v12)
    goto LABEL_78;
  if (v19 >= v12)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  result = v3 + v19;
  if (*(_BYTE *)(v3 + v19) != 63)
    goto LABEL_78;
  *v10 = v19 + 1;
  v10[1] = v12;
  v10[2] = v3;
  v10[3] = v4;
  if (v19 + 1 == v12)
    goto LABEL_78;
  if (v19 + 1 < v12)
  {
    if (*(_BYTE *)(v3 + v19 + 1) == 61)
    {
      *v10 = v19 + 2;
      v10[2] = v3;
      if (v3)
      {
        v16 = v3 + v19;
      }
      else
      {
        v7 = 0;
        v5 = 0;
        v16 = 0;
      }
      if (!v3)
        v9 = 0;
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_103:
  __break(1u);
  return result;
}

uint64_t sub_1A57FDC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A0C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A57FDCBC()
{
  unint64_t result;

  result = qword_1EE7AA6D8;
  if (!qword_1EE7AA6D8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8A7C, &type metadata for OutputBufferTooSmall);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6D8);
  }
  return result;
}

int64_t sub_1A57FDD00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char v8;
  int64_t v9[2];

  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  if (a1)
    v6 = a2 - a1;
  else
    v6 = 0;
  MEMORY[0x1A85AD968](v6);
  v8 = 0;
  sub_1A58077F4(v6, v9, a1, a2, a3, &v8);
  return v9[0];
}

ValueMetadata *type metadata accessor for OutputBufferTooSmall()
{
  return &type metadata for OutputBufferTooSmall;
}

ValueMetadata *type metadata accessor for RFC_2047()
{
  return &type metadata for RFC_2047;
}

uint64_t getEnumTagSinglePayload for RFC_2047.EncodedWord(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2047.EncodedWord(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2047.EncodedWord()
{
  return &type metadata for RFC_2047.EncodedWord;
}

uint64_t storeEnumTagSinglePayload for RFC_2047.Encoding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A57FDE90 + 4 * byte_1A59D8A45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A57FDEC4 + 4 * asc_1A59D8A40[v4]))();
}

uint64_t sub_1A57FDEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FDECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A57FDED4);
  return result;
}

uint64_t sub_1A57FDEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A57FDEE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A57FDEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A57FDEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RFC_2047.Encoding()
{
  return &type metadata for RFC_2047.Encoding;
}

unint64_t sub_1A57FDF14()
{
  unint64_t result;

  result = qword_1EE7AA6E0;
  if (!qword_1EE7AA6E0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8B08, &type metadata for RFC_2047.Encoding);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6E0);
  }
  return result;
}

uint64_t sub_1A57FDF58(uint64_t a1, char **a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char v22;
  char *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  char *v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  char v69;
  char *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE v77[56];
  _QWORD v78[6];
  char v79;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v4 = (char *)(_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0() + 65);
    do
    {
      v6 = *(_BYTE **)(v4 - 33);
      v7 = *(_QWORD *)(v4 - 25);
      v8 = *(_QWORD *)(v4 - 17);
      v9 = *(_QWORD *)(v4 - 9);
      v71 = *(v4 - 1);
      v69 = *v4;
      sub_1A58006CC(v6, v7);
      if (v12 != 2)
      {
        v13 = v10;
        v14 = v11;
        v15 = v12;
        v68 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1A5810DB4(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v17 = *((_QWORD *)v3 + 2);
        v16 = *((_QWORD *)v3 + 3);
        v18 = v3;
        if (v17 >= v16 >> 1)
          v18 = sub_1A5810DB4((char *)(v16 > 1), v17 + 1, 1, v3);
        *((_QWORD *)v18 + 2) = v17 + 1;
        v3 = v18;
        v5 = &v18[64 * v17];
        *((_QWORD *)v5 + 4) = v13;
        *((_QWORD *)v5 + 5) = v14;
        v5[48] = v15 & 1;
        v5[49] = BYTE1(v15);
        v5[50] = ((v15 & 0xFFFFFFu) >> 16) & 1;
        *((_QWORD *)v5 + 7) = v6;
        *((_QWORD *)v5 + 8) = v7;
        *((_QWORD *)v5 + 9) = v68;
        *((_QWORD *)v5 + 10) = v9;
        v5[88] = v71;
        v5[89] = v69;
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v72 = *((_QWORD *)v3 + 2);
  if (v72)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v19 = 0;
    v20 = 0;
    v70 = v3;
    while (1)
    {
      v23 = &v3[v19];
      v25 = *(_QWORD *)&v3[v19 + 32];
      v24 = *(unsigned __int8 **)&v3[v19 + 40];
      if (v3[v19 + 50] == 1)
      {
        v26 = v23[48];
        v27 = (_BYTE *)*((_QWORD *)v23 + 9);
        v28 = *((_QWORD *)v23 + 10);
        v29 = v23[88];
        v30 = v23[89];
        if ((v26 & 1) != 0)
        {
          sub_1A57FFA04(v27, v28, (uint64_t)v77);
          sub_1A55032A0((uint64_t)v77, (uint64_t)v78, &qword_1EE7AA6F0);
          if ((v79 & 1) == 0)
          {
            v52 = v78[0];
            v66 = v78[1];
            v53 = v78[4];
            v54 = v78[5];
            __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
            v32 = swift_allocObject();
            *(_OWORD *)(v32 + 16) = xmmword_1A59ABD10;
            *(_QWORD *)(v32 + 32) = v53;
            *(_QWORD *)(v32 + 40) = v54;
            *(_WORD *)(v32 + 48) = 0;
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            sub_1A57D9E5C(v25, (uint64_t)v24);
            v56 = v55;
            if (v55 == 13)
              v57 = v25;
            else
              v57 = v55;
            if (v55 == 13)
              v58 = v24;
            else
              v58 = 0;
            v59 = *a2;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v59;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v59 = sub_1A58112E8(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
              *a2 = v59;
            }
            v62 = *((_QWORD *)v59 + 2);
            v61 = *((_QWORD *)v59 + 3);
            if (v62 >= v61 >> 1)
            {
              v59 = sub_1A58112E8((char *)(v61 > 1), v62 + 1, 1, v59);
              *a2 = v59;
            }
            *((_QWORD *)v59 + 2) = v62 + 1;
            v21 = &v59[56 * v62];
            *((_QWORD *)v21 + 4) = v57;
            *((_QWORD *)v21 + 5) = v58;
            v21[48] = v56 == 13;
            *((_QWORD *)v21 + 7) = v52;
            *((_QWORD *)v21 + 8) = v66;
            v21[72] = 0;
            goto LABEL_15;
          }
        }
        __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
        v31 = swift_allocObject();
        v32 = v31;
        *(_OWORD *)(v31 + 16) = xmmword_1A59ABD10;
        if (v29)
          v33 = -32512;
        else
          v33 = 0x8000;
        v34 = v33 | v30;
        if (v26)
          v34 = 0;
        *(_QWORD *)(v31 + 32) = v27;
        *(_QWORD *)(v31 + 40) = v28;
        *(_WORD *)(v31 + 48) = v34;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57D9E5C(v25, (uint64_t)v24);
        v36 = v35;
        if (v35 == 13)
          v37 = v25;
        else
          v37 = v35;
        if (v35 == 13)
          v38 = v24;
        else
          v38 = 0;
        v39 = *a2;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v39;
        if ((v40 & 1) == 0)
        {
          v39 = sub_1A58112E8(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
          *a2 = v39;
        }
        v42 = *((_QWORD *)v39 + 2);
        v41 = *((_QWORD *)v39 + 3);
        if (v42 >= v41 >> 1)
        {
          v39 = sub_1A58112E8((char *)(v41 > 1), v42 + 1, 1, v39);
          *a2 = v39;
        }
        *((_QWORD *)v39 + 2) = v42 + 1;
        v21 = &v39[56 * v42];
        *((_QWORD *)v21 + 4) = v37;
        *((_QWORD *)v21 + 5) = v38;
        v21[48] = v36 == 13;
        *((_QWORD *)v21 + 7) = 0;
        *((_QWORD *)v21 + 8) = 0;
        v22 = 1;
      }
      else
      {
        if (v23[49])
          goto LABEL_16;
        v74 = 0;
        v75 = 0;
        v76 = 1;
        v73 = MEMORY[0x1E0DEE9D8];
        sub_1A57FF370(v25, v24, v20, (uint64_t)v3, (uint64_t)&v74, &v73);
        v43 = v74;
        v65 = v75;
        v64 = v76;
        v32 = v73;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57D9E5C(v25, (uint64_t)v24);
        v45 = v44;
        if (v44 == 13)
          v46 = v25;
        else
          v46 = v44;
        if (v44 == 13)
          v47 = v24;
        else
          v47 = 0;
        v48 = *a2;
        v49 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v48;
        if ((v49 & 1) == 0)
        {
          v48 = sub_1A58112E8(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
          *a2 = v48;
        }
        v51 = *((_QWORD *)v48 + 2);
        v50 = *((_QWORD *)v48 + 3);
        if (v51 >= v50 >> 1)
        {
          v48 = sub_1A58112E8((char *)(v50 > 1), v51 + 1, 1, v48);
          *a2 = v48;
        }
        *((_QWORD *)v48 + 2) = v51 + 1;
        v21 = &v48[56 * v51];
        *((_QWORD *)v21 + 4) = v46;
        *((_QWORD *)v21 + 5) = v47;
        v21[48] = v45 == 13;
        *((_QWORD *)v21 + 7) = v43;
        *((_QWORD *)v21 + 8) = v65;
        v22 = v64;
      }
      v21[72] = v22;
LABEL_15:
      *((_QWORD *)v21 + 10) = v32;
      swift_bridgeObjectRelease();
      v3 = v70;
LABEL_16:
      ++v20;
      v19 += 64;
      if (v72 == v20)
        return swift_bridgeObjectRelease_n();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57FE4D4(uint64_t a1, char **a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char v22;
  char *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  char *v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  char v69;
  char *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE v77[56];
  _QWORD v78[6];
  char v79;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v4 = (char *)(_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0() + 65);
    do
    {
      v6 = *(_BYTE **)(v4 - 33);
      v7 = *(_QWORD *)(v4 - 25);
      v8 = *(_QWORD *)(v4 - 17);
      v9 = *(_QWORD *)(v4 - 9);
      v71 = *(v4 - 1);
      v69 = *v4;
      sub_1A58006CC(v6, v7);
      if (v12 != 2)
      {
        v13 = v10;
        v14 = v11;
        v15 = v12;
        v68 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1A5810DB4(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v17 = *((_QWORD *)v3 + 2);
        v16 = *((_QWORD *)v3 + 3);
        v18 = v3;
        if (v17 >= v16 >> 1)
          v18 = sub_1A5810DB4((char *)(v16 > 1), v17 + 1, 1, v3);
        *((_QWORD *)v18 + 2) = v17 + 1;
        v3 = v18;
        v5 = &v18[64 * v17];
        *((_QWORD *)v5 + 4) = v13;
        *((_QWORD *)v5 + 5) = v14;
        v5[48] = v15 & 1;
        v5[49] = BYTE1(v15);
        v5[50] = ((v15 & 0xFFFFFFu) >> 16) & 1;
        *((_QWORD *)v5 + 7) = v6;
        *((_QWORD *)v5 + 8) = v7;
        *((_QWORD *)v5 + 9) = v68;
        *((_QWORD *)v5 + 10) = v9;
        v5[88] = v71;
        v5[89] = v69;
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v72 = *((_QWORD *)v3 + 2);
  if (v72)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v19 = 0;
    v20 = 0;
    v70 = v3;
    while (1)
    {
      v23 = &v3[v19];
      v25 = *(_QWORD *)&v3[v19 + 32];
      v24 = *(unsigned __int8 **)&v3[v19 + 40];
      if (v3[v19 + 50] == 1)
      {
        v26 = v23[48];
        v27 = (_BYTE *)*((_QWORD *)v23 + 9);
        v28 = *((_QWORD *)v23 + 10);
        v29 = v23[88];
        v30 = v23[89];
        if ((v26 & 1) != 0)
        {
          sub_1A57FFA04(v27, v28, (uint64_t)v77);
          sub_1A55032A0((uint64_t)v77, (uint64_t)v78, &qword_1EE7AA6F0);
          if ((v79 & 1) == 0)
          {
            v52 = v78[0];
            v66 = v78[1];
            v53 = v78[4];
            v54 = v78[5];
            __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
            v32 = swift_allocObject();
            *(_OWORD *)(v32 + 16) = xmmword_1A59ABD10;
            *(_QWORD *)(v32 + 32) = v53;
            *(_QWORD *)(v32 + 40) = v54;
            *(_WORD *)(v32 + 48) = 0;
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            sub_1A57D4F9C(v25, (uint64_t)v24);
            v56 = v55;
            if (v55 == 6)
              v57 = v25;
            else
              v57 = v55;
            if (v55 == 6)
              v58 = v24;
            else
              v58 = 0;
            v59 = *a2;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v59;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v59 = sub_1A58112D4(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
              *a2 = v59;
            }
            v62 = *((_QWORD *)v59 + 2);
            v61 = *((_QWORD *)v59 + 3);
            if (v62 >= v61 >> 1)
            {
              v59 = sub_1A58112D4((char *)(v61 > 1), v62 + 1, 1, v59);
              *a2 = v59;
            }
            *((_QWORD *)v59 + 2) = v62 + 1;
            v21 = &v59[56 * v62];
            *((_QWORD *)v21 + 4) = v57;
            *((_QWORD *)v21 + 5) = v58;
            v21[48] = v56 == 6;
            *((_QWORD *)v21 + 7) = v52;
            *((_QWORD *)v21 + 8) = v66;
            v21[72] = 0;
            goto LABEL_15;
          }
        }
        __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
        v31 = swift_allocObject();
        v32 = v31;
        *(_OWORD *)(v31 + 16) = xmmword_1A59ABD10;
        if (v29)
          v33 = -32512;
        else
          v33 = 0x8000;
        v34 = v33 | v30;
        if (v26)
          v34 = 0;
        *(_QWORD *)(v31 + 32) = v27;
        *(_QWORD *)(v31 + 40) = v28;
        *(_WORD *)(v31 + 48) = v34;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57D4F9C(v25, (uint64_t)v24);
        v36 = v35;
        if (v35 == 6)
          v37 = v25;
        else
          v37 = v35;
        if (v35 == 6)
          v38 = v24;
        else
          v38 = 0;
        v39 = *a2;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v39;
        if ((v40 & 1) == 0)
        {
          v39 = sub_1A58112D4(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
          *a2 = v39;
        }
        v42 = *((_QWORD *)v39 + 2);
        v41 = *((_QWORD *)v39 + 3);
        if (v42 >= v41 >> 1)
        {
          v39 = sub_1A58112D4((char *)(v41 > 1), v42 + 1, 1, v39);
          *a2 = v39;
        }
        *((_QWORD *)v39 + 2) = v42 + 1;
        v21 = &v39[56 * v42];
        *((_QWORD *)v21 + 4) = v37;
        *((_QWORD *)v21 + 5) = v38;
        v21[48] = v36 == 6;
        *((_QWORD *)v21 + 7) = 0;
        *((_QWORD *)v21 + 8) = 0;
        v22 = 1;
      }
      else
      {
        if (v23[49])
          goto LABEL_16;
        v74 = 0;
        v75 = 0;
        v76 = 1;
        v73 = MEMORY[0x1E0DEE9D8];
        sub_1A57FF370(v25, v24, v20, (uint64_t)v3, (uint64_t)&v74, &v73);
        v43 = v74;
        v65 = v75;
        v64 = v76;
        v32 = v73;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A57D4F9C(v25, (uint64_t)v24);
        v45 = v44;
        if (v44 == 6)
          v46 = v25;
        else
          v46 = v44;
        if (v44 == 6)
          v47 = v24;
        else
          v47 = 0;
        v48 = *a2;
        v49 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v48;
        if ((v49 & 1) == 0)
        {
          v48 = sub_1A58112D4(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
          *a2 = v48;
        }
        v51 = *((_QWORD *)v48 + 2);
        v50 = *((_QWORD *)v48 + 3);
        if (v51 >= v50 >> 1)
        {
          v48 = sub_1A58112D4((char *)(v50 > 1), v51 + 1, 1, v48);
          *a2 = v48;
        }
        *((_QWORD *)v48 + 2) = v51 + 1;
        v21 = &v48[56 * v51];
        *((_QWORD *)v21 + 4) = v46;
        *((_QWORD *)v21 + 5) = v47;
        v21[48] = v45 == 6;
        *((_QWORD *)v21 + 7) = v43;
        *((_QWORD *)v21 + 8) = v65;
        v22 = v64;
      }
      v21[72] = v22;
LABEL_15:
      *((_QWORD *)v21 + 10) = v32;
      swift_bridgeObjectRelease();
      v3 = v70;
LABEL_16:
      ++v20;
      v19 += 64;
      if (v72 == v20)
        return swift_bridgeObjectRelease_n();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A57FEA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  int64_t *v34;
  uint64_t v35;

  v7 = v6;
  v33 = a1;
  v34 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
  {
    isStackAllocationSafe = swift_retain_n();
    v14 = 0;
    goto LABEL_28;
  }
  v32 = v7;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    if (!v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(a2 + v13 + 40);
    v17 = *(_QWORD *)(a3 + v13 + 32);
    v18 = *(_QWORD *)(a3 + v13 + 40);
    if ((v16 & 0x1000000000000000) != 0)
    {
      v31[1] = a6;
      v23 = sub_1A594B640();
      v20 = __OFADD__(v14, v23);
      v21 = v14 + v23;
      if (v20)
        goto LABEL_33;
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0)
        v19 = HIBYTE(v16) & 0xF;
      else
        v19 = *(_QWORD *)(a2 + v13 + 32) & 0xFFFFFFFFFFFFLL;
      v20 = __OFADD__(v14, v19);
      v21 = v14 + v19;
      if (v20)
        goto LABEL_33;
    }
    if ((v18 & 0x1000000000000000) == 0)
      break;
    v24 = sub_1A594B640();
    v20 = __OFADD__(v21, v24);
    v14 = v21 + v24;
    if (v20)
      goto LABEL_21;
LABEL_14:
    --v15;
    v13 += 16;
    if (!--v12)
      goto LABEL_22;
  }
  if ((v18 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v18) & 0xF;
  else
    v22 = v17 & 0xFFFFFFFFFFFFLL;
  v20 = __OFADD__(v21, v22);
  v14 = v21 + v22;
  if (!v20)
    goto LABEL_14;
LABEL_21:
  __break(1u);
LABEL_22:
  if (v14 < 0)
LABEL_34:
    __break(1u);
  isStackAllocationSafe = swift_retain_n();
  if (v14 < 1025)
  {
    v7 = v32;
  }
  else
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    v7 = v32;
    if ((isStackAllocationSafe & 1) == 0)
    {
      v26 = swift_slowAlloc();
      swift_retain();
      sub_1A57FF4CC(v26, v26 + v14, v33, a2, a3, v34, a5);
      MEMORY[0x1A85B1964](v26, -1, -1);
      goto LABEL_30;
    }
  }
LABEL_28:
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v28 = (char *)v31 - v27;
  v29 = (char *)v31 + v14 - v27;
  swift_retain();
  sub_1A57FF4CC((uint64_t)v28, (uint64_t)v29, v33, a2, a3, v34, a5);
  if (!v7)
    return swift_release_n();
  swift_willThrow();
LABEL_30:
  swift_release_n();
  return swift_release();
}

unint64_t sub_1A57FECC4(unint64_t a1, unint64_t a2, char *a3, char *a4, void (*a5)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  int v15;
  char v16;
  unint64_t v17;
  unint64_t result;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  uint64_t v29;

  v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  v27 = v9;
  v26 = 4 * v9;
  v10 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  v23 = a2 & 0xFFFFFFFFFFFFFFLL;
  v22 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_retain();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v12 = 15;
  v25 = a4;
  while (1)
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
        goto LABEL_17;
    }
    else if (a4)
    {
      a3 = 0;
LABEL_17:
      v14 = *a3++;
      LOBYTE(v28[0]) = v14;
      a5(&v29, v28);
      if (v26 == v12 >> 14)
        goto LABEL_37;
      v15 = v29;
      v16 = 1;
      goto LABEL_21;
    }
    if (v26 == v12 >> 14)
    {
      v21 = 1;
      goto LABEL_39;
    }
    v16 = 0;
    v15 = 0;
LABEL_21:
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v11)
      result = sub_1A55796A4(v12, a1, a2);
    v19 = result >> 16;
    if (result >> 16 >= v27)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_1A594B670();
      v20 = result;
      if (v17 == v11)
        goto LABEL_29;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v28[0] = a1;
      v28[1] = v23;
      v20 = *((_BYTE *)v28 + v19);
      if (v17 == v11)
        goto LABEL_29;
    }
    else
    {
      result = v22;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_1A594C7D4();
      v20 = *(_BYTE *)(result + v19);
      if (v17 == v11)
      {
LABEL_29:
        result = sub_1A55796A4(v12, a1, a2);
        v12 = result;
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_33;
        goto LABEL_6;
      }
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v27 <= v12 >> 16)
        goto LABEL_41;
      v12 = sub_1A594B64C();
      goto LABEL_7;
    }
LABEL_6:
    v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_7:
    if (v15 == v20)
      v13 = v16;
    else
      v13 = 0;
    a4 = v25;
    if ((v13 & 1) == 0)
    {
LABEL_37:
      v21 = 0;
LABEL_39:
      swift_release();
      swift_bridgeObjectRelease();
      return v21;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A57FEEF8(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  do
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
      {
LABEL_6:
        v5 = 0;
        v6 = *a3++;
        v4 = v6;
        if (!a1)
          goto LABEL_12;
        goto LABEL_7;
      }
      v4 = 0;
    }
    else
    {
      if (a4)
        goto LABEL_6;
      v4 = 0;
      a3 = 0;
    }
    v5 = 1;
    if (!a1)
    {
LABEL_12:
      if (a2)
        goto LABEL_13;
      v7 = 0;
      a1 = 0;
      goto LABEL_16;
    }
LABEL_7:
    if (!a2 || a1 != a2)
    {
LABEL_13:
      v8 = 0;
      v9 = *a1++;
      v7 = v9;
      if ((v5 & 1) != 0)
        return v8;
      goto LABEL_17;
    }
    v7 = 0;
LABEL_16:
    v8 = 1;
    if ((v5 & 1) != 0)
      return v8;
LABEL_17:
    if (v4 != v7)
      LODWORD(v8) = 1;
  }
  while ((_DWORD)v8 != 1);
  return 0;
}

uint64_t sub_1A57FEF84@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>, unsigned __int8 *a7, unsigned __int8 *a8, char a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t result;
  uint64_t *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v15 = a2 - isStackAllocationSafe;
  if (!isStackAllocationSafe)
    v15 = 0;
  if (v15 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v17 = isStackAllocationSafe;
  v43[0] = 0;
  v43[1] = v15;
  v43[2] = isStackAllocationSafe;
  v43[3] = a2;
  v18 = *a3;
  v19 = *a4;
  if (*a4 < *a3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v20 = v13;
  v21 = a11;
  v39 = a10;
  if (v18 == v19)
  {
    v22 = 0;
LABEL_24:
    v34 = v17 + v22;
    if (!v17)
    {
      v22 = 0;
      v34 = 0;
    }
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = v22;
    v45 = v17;
    v46 = v34;
    v47 = 0;
    v35 = sub_1A57FFBB8(&v44, a7, a8, a9 & 1, v21, a12);
    swift_bridgeObjectRelease();
    *a6 = v35 & 1;
    return swift_release();
  }
  v37 = a11;
  v38 = a6;
  v23 = *(_QWORD *)(a5 + 16);
  if (v23 <= v18)
    v23 = v18;
  v41 = v18;
  v42 = v23;
  v24 = (__int16 *)(a5 + 24 * v18 + 48);
  v25 = v18;
  v40 = v19;
  while (1)
  {
    if (v25 >= v19)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v18 < 0)
      goto LABEL_28;
    if (v42 == v25)
      goto LABEL_29;
    if (*v24 < 0)
      break;
    v29 = v17;
    v30 = *((_QWORD *)v24 - 2);
    v31 = *((_QWORD *)v24 - 1);
    if (v30)
    {
      v26 = v31 - v30;
      if (v31 - v30 < 0)
        goto LABEL_30;
      if (v26 >= 1025)
      {
        isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
        if ((isStackAllocationSafe & 1) == 0)
        {
          v12 = (_QWORD *)swift_slowAlloc();
          v32 = v31 - v30;
          v33 = v30;
          v17 = v29;
          sub_1A580AF10((uint64_t)v12, v32, v33, v31, v43, v29, a2);
          if (v20)
            goto LABEL_36;
          v20 = 0;
          isStackAllocationSafe = MEMORY[0x1A85B1964](v12, -1, -1);
          goto LABEL_12;
        }
      }
    }
    else
    {
      v26 = 0;
    }
    v12 = &v37;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v28 = v30;
    v17 = v29;
    isStackAllocationSafe = sub_1A580AF10((uint64_t)&v37 - v27, v26, v28, v31, v43, v29, a2);
    if (v20)
      goto LABEL_35;
LABEL_12:
    v19 = v40;
    v18 = v41;
    ++v25;
    v24 += 12;
    if (v40 == v25)
    {
      v22 = v43[0];
      v21 = v37;
      a6 = v38;
      if ((v43[0] & 0x8000000000000000) == 0)
        goto LABEL_24;
LABEL_33:
      __break(1u);
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_1A594C9C0();
  __break(1u);
LABEL_35:
  swift_willThrow();
  __break(1u);
LABEL_36:
  result = MEMORY[0x1A85B1964](v12, -1, -1);
  __break(1u);
  return result;
}

uint64_t sub_1A57FF270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79B400);
  sub_1A5800458();
  sub_1A5949B4C();
  v13 = *a5;
  result = sub_1A56F12C4(a1, a2, a3, a4);
  v15 = v13 + result;
  if (__OFADD__(v13, result))
  {
    __break(1u);
  }
  else
  {
    v16 = a7 - a6;
    if (!a6)
      v16 = 0;
    if (v16 >= v15)
    {
      *a5 = v15;
      a5[1] = v16;
      a5[2] = a6;
      a5[3] = a7;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57FF370(uint64_t result, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 *v23;

  v23 = (unsigned __int8 *)result;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 > a3)
  {
    result = sub_1A5800594(*(_BYTE *)(a4 + (a3 << 6) + 48), *(_BYTE **)(a4 + (a3 << 6) + 72), *(_QWORD *)(a4 + (a3 << 6) + 80), *(_BYTE *)(a4 + (a3 << 6) + 88), *(_BYTE *)(a4 + (a3 << 6) + 89), a5, a6);
    v9 = a3 + 1;
    if (a3 + 1 == v8)
      return result;
    v22 = a4;
    result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v21 = 0;
    v10 = a3 << 6;
    while (v9 < (uint64_t)v8)
    {
      v11 = *(_BYTE *)(v22 + v10 + 112);
      v12 = *(unsigned __int8 *)(v22 + v10 + 113);
      v13 = *(_BYTE *)(v22 + v10 + 114);
      v14 = *(_BYTE **)(v22 + v10 + 136);
      v15 = *(_QWORD *)(v22 + v10 + 144);
      v16 = *(_BYTE *)(v22 + v10 + 152);
      v17 = *(_BYTE *)(v22 + v10 + 153);
      result = sub_1A57FEEF8(v23, a2, *(unsigned __int8 **)(v22 + v10 + 96), *(unsigned __int8 **)(v22 + v10 + 104));
      if ((result & 1) != 0)
      {
        if ((v13 & 1) != 0)
          return swift_bridgeObjectRelease();
        v18 = v21 + 1;
        if (((v18 >> 8) & 1) != 0)
          goto LABEL_14;
        if (v12 != v18)
          return swift_bridgeObjectRelease();
        result = sub_1A5800594(v11, v14, v15, v16, v17, a5, a6);
        v21 = v12;
      }
      ++v9;
      v10 += 64;
      if (v8 == v9)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1A57FF4CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t *v8;
  int64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v7 = a2 - result;
  if (!result)
    v7 = 0;
  if (v7 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = *(_QWORD *)(a5 + 16);
  if (v11)
  {
    v12 = a4;
    v13 = *(_QWORD *)(a4 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v14 = 0;
    v37 = MEMORY[0x1E0DEE9D8];
    v34 = v10;
    while (v13)
    {
      v15 = *(_QWORD *)(v12 + v14 + 32);
      v16 = *(_QWORD *)(v12 + v14 + 40);
      v18 = *(_QWORD *)(v10 + v14 + 32);
      v17 = *(_QWORD *)(v10 + v14 + 40);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v19 = sub_1A57FF718(v15, v16);
      if ((v21 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v35 = v20;
        v36 = v19;
        v22 = v12;
        v23 = sub_1A57FF718(v18, v17);
        v25 = v24;
        v27 = v26;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v27 & 1) != 0)
        {
          v12 = v22;
          v10 = v34;
        }
        else
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1A5810EA8(0, *(_QWORD *)(v37 + 16) + 1, 1, (char *)v37);
            v37 = result;
          }
          v12 = v22;
          v29 = *(_QWORD *)(v37 + 16);
          v28 = *(_QWORD *)(v37 + 24);
          v10 = v34;
          if (v29 >= v28 >> 1)
          {
            result = (uint64_t)sub_1A5810EA8((char *)(v28 > 1), v29 + 1, 1, (char *)v37);
            v37 = result;
          }
          *(_QWORD *)(v37 + 16) = v29 + 1;
          v30 = v37 + 40 * v29;
          *(_QWORD *)(v30 + 32) = v36;
          *(_QWORD *)(v30 + 40) = v35;
          *(_QWORD *)(v30 + 48) = v23;
          *(_QWORD *)(v30 + 56) = v25;
          *(_WORD *)(v30 + 64) = 0;
        }
      }
      --v13;
      v14 += 16;
      if (!--v11)
      {
        swift_release();
        swift_release();
        swift_release();
        v8 = a7;
        v9 = a6;
        v31 = v37;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  v31 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_retain();
  sub_1A5800818(v31, v9, v8);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t sub_1A57FF718(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v5 = sub_1A594B640();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v5 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v7 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v9 = v2[3];
  if (sub_1A56F12C4(*v2, v6, v8, v9) < v5)
    return 0;
  if (v8)
    v11 = (void *)(v8 + v7);
  else
    v11 = 0;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57FF868(a1, a2, v11);
  result = swift_bridgeObjectRelease();
  v12 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = v9 - v8;
  if (!v8)
    v13 = 0;
  if (v12 < 0 || v13 < v12)
    goto LABEL_22;
  if (v12 < v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 < v12)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  *v2 = v12;
  v2[1] = v6;
  v2[2] = v8;
  v2[3] = v9;
  if (v8)
    return v8 + v7;
  else
    return 0;
}

uint64_t sub_1A57FF85C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_1A57FEEF8(*a2, a2[1], *a1, a1[1]);
}

unint64_t sub_1A57FF868(unint64_t result, unint64_t a2, void *__dst)
{
  void *v3;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD v13[2];

  if (!__dst)
    return result;
  v3 = __dst;
  v5 = result;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = result;
      v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      return (unint64_t)memcpy(__dst, v13, HIBYTE(a2) & 0xF);
    }
    else
    {
      if ((result & 0x1000000000000000) == 0)
        goto LABEL_23;
      v6 = (const void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      __dst = (void *)(result & 0xFFFFFFFFFFFFLL);
      return (unint64_t)memmove(v3, v6, (size_t)__dst);
    }
  }
  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
    return result;
  v8 = 0;
  v9 = 4 << ((result & 0x800000000000000) != 0);
  v10 = 15;
  while ((v10 & 0xC) != v9)
  {
    if (v7 <= v10 >> 16)
      goto LABEL_26;
    v11 = sub_1A594B670();
LABEL_17:
    result = sub_1A594B64C();
    if (__OFADD__(v8, 1))
      goto LABEL_27;
    v10 = result;
    *((_BYTE *)v3 + v8++) = v11;
    if (4 * v7 == result >> 14)
      return result;
  }
  result = sub_1A55796A4(v10, v5, a2);
  if (v7 <= result >> 16)
    goto LABEL_26;
  v11 = sub_1A594B670();
  if (v7 > (unint64_t)sub_1A55796A4(v10, v5, a2) >> 16)
    goto LABEL_17;
  __break(1u);
LABEL_23:
  result = sub_1A594C7D4();
  if (result)
  {
    __dst = (void *)v12;
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    v6 = (const void *)result;
    return (unint64_t)memmove(v3, v6, (size_t)__dst);
  }
  return result;
}

_BYTE *sub_1A57FFA04@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = a2 - (_QWORD)result;
  if (result)
    v4 = a2 - (_QWORD)result;
  else
    v4 = 0;
  if (v4 < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (!v4)
  {
    result = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
LABEL_37:
    v16 = 1;
LABEL_38:
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v9;
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 40) = v4;
    *(_BYTE *)(a3 + 48) = v16;
    return result;
  }
  if (*result == 39)
  {
    v5 = 0;
    v4 = a2 - (_QWORD)result;
    v6 = v3 > 0;
    if (!v3)
      goto LABEL_36;
  }
  else
  {
    v11 = 1;
    do
    {
      if (v4 <= v11 - 1)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v4 == v11)
        goto LABEL_36;
      v12 = result[v11++];
    }
    while (v12 != 39);
    v5 = v11 - 1;
    v6 = v11 - 1 < v4;
    if (v11 - 1 == v4)
      goto LABEL_36;
  }
  if (!v6)
    goto LABEL_45;
  v7 = &result[v5];
  if (result[v5] != 39)
    goto LABEL_36;
  v13 = v5 + 1;
  v14 = v4;
  if (v5 + 1 != v4)
  {
    if (v5 + 1 >= v4)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v14 = v5 + 1;
    if (result[v13] != 39)
    {
      v15 = v5;
      while (1)
      {
        v14 = v15 + 2;
        if (__OFADD__(v15 + 1, 1))
          goto LABEL_42;
        if (v4 < v14)
          goto LABEL_43;
        if (v14 < ++v15)
          goto LABEL_44;
        if (v14 == v4)
        {
          v14 = v4;
LABEL_29:
          if (v14 <= v5)
            goto LABEL_46;
          break;
        }
        if (result[v14] == 39)
          goto LABEL_29;
      }
    }
  }
  if (v4 < v14)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v14 == v4)
  {
LABEL_36:
    result = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v4 = 0;
    goto LABEL_37;
  }
  if (v14 < v4)
  {
    v9 = &result[v14];
    if (result[v14] == 39)
    {
      if (result)
      {
        v16 = 0;
        v8 = &result[v13];
        v10 = (uint64_t)&result[v14 + 1];
        v4 += (uint64_t)result;
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v4 = 0;
        v16 = 0;
      }
      goto LABEL_38;
    }
    goto LABEL_36;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1A57FFBB8(__int128 *a1, unsigned __int8 *a2, unsigned __int8 *a3, char a4, uint64_t *a5, uint64_t a6)
{
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int8x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  sub_1A58004BC(a1, (uint64_t)&v24);
  if ((v28 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      sub_1A580B0E4((uint64_t)v24, (uint64_t)v25, a6, BYTE1(v26) & 1);
      return 0;
    }
    sub_1A57D25E8(v24, v25, BYTE1(v26) & 1);
    sub_1A594B5F8();
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  v11 = a4 & 1;
  v12 = (uint64_t)v24;
  v13 = v25;
  v15 = v26;
  v14 = v27;
  if (v26)
    v16 = &v25[v26];
  else
    v16 = 0;
  if (v26)
    v17 = (int8x8_t *)&v24[v26];
  else
    v17 = 0;
  swift_retain();
  sub_1A580A260(a2, a3, v11, 0, 0, a5, v17, (uint64_t)v16);
  if (v18
    || (v19 = sub_1A56F12C4(v12, (uint64_t)v13, v15, v14),
        MEMORY[0x1A85AD968](v19),
        result = 0,
        (unsigned __int8 *)v12 == v13))
  {
LABEL_14:
    sub_1A594B5F8();
    goto LABEL_15;
  }
  if (v12 < (uint64_t)v13)
  {
    if (v15)
      v21 = v14 - v15;
    else
      v21 = 0;
    v22 = v12;
    while ((v12 & 0x8000000000000000) == 0 && v22 < v21)
    {
      if (*(unsigned __int8 *)(v15 + v22) - 1 <= 0x7D)
      {
        v23 = result;
        sub_1A594B52C();
        result = v23;
      }
      if (v13 == (unsigned __int8 *)++v22)
        goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A57FFD60(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, int a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64[3];

  v56 = a7;
  v54 = a5;
  v55 = a6;
  v53 = a3;
  v52 = a2;
  v51 = a1;
  v64[1] = *MEMORY[0x1E0C80C00];
  v64[0] = 0;
  v11 = *(_QWORD *)(a4 + 16);
  if (!v11)
  {
    swift_retain_n();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    goto LABEL_66;
  }
  v57 = a10;
  v58 = a4 + 32;
  swift_bridgeObjectRetain_n();
  isStackAllocationSafe = swift_retain_n();
  v14 = 0;
  v50 = a4 + 72;
  v49 = a4;
  v48 = a4 + 48;
  while (1)
  {
    if (v14 >= (unint64_t)v11)
      goto LABEL_69;
    v15 = (unsigned __int8 **)(v58 + 24 * v14);
    v17 = *v15;
    v16 = (uint64_t)v15[1];
    v18 = *((__int16 *)v15 + 8);
    if ((v18 & 0x80000000) == 0)
      break;
    v25 = v18;
    if ((v18 & 1) != 0)
    {
      isStackAllocationSafe = sub_1A580B0E4((uint64_t)v17, v16, v57, BYTE1(v18) & 1);
      v32 = __OFADD__(v14++, 1);
      if (v32)
        goto LABEL_63;
    }
    else
    {
      v61 = 0;
      v62 = 0xE000000000000000;
      if (v17)
        v26 = v16 - (_QWORD)v17;
      else
        v26 = 0;
      MEMORY[0x1A85AD968](v26);
      v27 = v61;
      v28 = v62;
      if (v17)
      {
LABEL_58:
        v29 = 0;
        while (!v16 || v17 != (unsigned __int8 *)v16)
        {
LABEL_53:
          v45 = *v17++;
          v44 = v45;
          if ((v45 - 1) > 0x7D)
            goto LABEL_58;
          if ((v25 & 0x100) != 0 && v44 == 92)
          {
            v46 = v29 ^ 1;
            v29 = 1;
            if ((v46 & 1) != 0)
              continue;
          }
          v59 = v27;
          v60 = v28;
          sub_1A594B52C();
          v29 = 0;
          v27 = v59;
          v28 = v60;
        }
      }
      else if (v16)
      {
        v29 = 0;
        v17 = 0;
        goto LABEL_53;
      }
      sub_1A594B5F8();
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v14 = v64[0] + 1;
      if (__OFADD__(v64[0], 1))
      {
LABEL_63:
        __break(1u);
LABEL_64:
        swift_release_n();
        swift_bridgeObjectRelease_n();
LABEL_66:
        swift_bridgeObjectRelease();
        return swift_release_n();
      }
    }
LABEL_51:
    v64[0] = v14;
    if (v14 >= v11)
      goto LABEL_64;
  }
  v19 = v14 + 1;
  v61 = v14 + 1;
  if (v14 + 1 < v11)
  {
    v20 = (__int16 *)(v50 + 24 * v14);
    while (1)
    {
      v21 = *v20;
      v20 += 12;
      if (v21 < 0)
        break;
      if (v11 == ++v19)
      {
        v19 = v11;
        break;
      }
    }
    v61 = v19;
  }
  v22 = v19 - v14;
  if (__OFSUB__(v19, v14))
    goto LABEL_70;
  if (v22 == 1)
  {
    if (!v17)
      goto LABEL_46;
    if (v16 - (uint64_t)v17 < 0)
      goto LABEL_73;
    if (v16 - (uint64_t)v17 < 1025
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
    {
LABEL_46:
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v41 = (char *)&v48 - v40;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      v42 = sub_1A580B478((uint64_t)v41, (uint64_t)v17, v16, v54, v55, v56 & 1, a8, a9, v57);
      swift_bridgeObjectRelease();
      isStackAllocationSafe = swift_release();
      if ((v42 & 1) != 0)
        goto LABEL_64;
    }
    else
    {
      v23 = swift_slowAlloc();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      v24 = sub_1A580B478(v23, (uint64_t)v17, v16, v54, v55, v56 & 1, a8, a9, v57);
      swift_bridgeObjectRelease();
      swift_release();
      isStackAllocationSafe = MEMORY[0x1A85B1964](v23, -1, -1);
      if ((v24 & 1) != 0)
        goto LABEL_64;
    }
LABEL_50:
    v32 = __OFADD__(v14++, 1);
    if (v32)
      goto LABEL_63;
    goto LABEL_51;
  }
  if (v19 < v14)
    goto LABEL_71;
  if (v14 == v19)
  {
    v30 = 0;
    v31 = v49;
LABEL_41:
    if (v30 < 0)
      goto LABEL_72;
    if (v30 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v38 = (char *)&v48 - v37;
      v39 = (char *)&v48 + v30 - v37;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      isStackAllocationSafe = sub_1A57FEF84((uint64_t)v38, (uint64_t)v39, v64, &v61, v31, &v63, v54, v55, v56 & 1, a8, a9, v57);
      if (v63 == 1)
        goto LABEL_64;
    }
    else
    {
      v43 = swift_slowAlloc();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_retain();
      sub_1A57FEF84(v43, v43 + v30, v64, &v61, v31, &v59, v54, v55, v56 & 1, a8, a9, v57);
      isStackAllocationSafe = MEMORY[0x1A85B1964](v43, -1, -1);
      if ((v59 & 1) != 0)
        goto LABEL_64;
    }
    v14 = v19 - 1;
    goto LABEL_50;
  }
  v30 = 0;
  v33 = v11 - v14;
  if (v11 < (unint64_t)v14)
    v33 = 0;
  v34 = (__int16 *)(v48 + 24 * v14);
  v31 = v49;
  while (1)
  {
    if (!v33)
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
    }
    if (*v34 < 0)
      break;
    v35 = *((_QWORD *)v34 - 2);
    v36 = *((_QWORD *)v34 - 1) - v35;
    if (!v35)
      v36 = 0;
    v32 = __OFADD__(v30, v36);
    v30 += v36;
    if (v32)
      goto LABEL_68;
    --v33;
    v34 += 12;
    if (!--v22)
      goto LABEL_41;
  }
  swift_release_n();
  swift_bridgeObjectRelease_n();
  sub_1A594C9C0();
  __break(1u);
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();

  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_willThrow();
  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = MEMORY[0x1A85B1964](v30, -1, -1);
  __break(1u);
  return result;
}

unint64_t sub_1A5800458()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EE7AA6E8;
  if (!qword_1EE7AA6E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0((uint64_t *)&unk_1EE79B400);
    v2 = sub_1A57D015C();
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0CB26A8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6E8);
  }
  return result;
}

uint64_t sub_1A58004BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

int64_t sub_1A58004D4(unsigned __int8 *a1, unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD v10[2];

  if ((a3 & 1) != 0 && *(_QWORD *)(a4 + 16) == 1 && (*(_WORD *)(a4 + 48) & 0x8100) == 0x8000)
  {
    v6 = sub_1A580AD60(*(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40));
    v8 = sub_1A57FDD00(v6, v7, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    sub_1A57FFD60((uint64_t)a1, (uint64_t)a2, a3 & 1, a4, a1, a2, a3 & 1, a4, a5, (uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_release();
    return v10[0];
  }
  return v8;
}

uint64_t sub_1A5800594(char a1, _BYTE *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  _BYTE *v9;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE v18[56];
  __int128 v19;
  _BYTE *v20;
  uint64_t v21;
  char v22;

  v8 = a3;
  v9 = a2;
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(a6 + 16) == 1
      && (sub_1A57FFA04(a2, a3, (uint64_t)v18),
          sub_1A55032A0((uint64_t)v18, (uint64_t)&v19, &qword_1EE7AA6F0),
          (v22 & 1) == 0))
    {
      v11 = 0;
      v9 = v20;
      v8 = v21;
      *(_OWORD *)a6 = v19;
      *(_BYTE *)(a6 + 16) = 0;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    if ((a4 & 1) != 0)
      v12 = -32512;
    else
      v12 = 0x8000;
    v11 = v12 & 0xFFFE | a5 & 1;
  }
  v13 = *a7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v13;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1A5811A88(0, *(_QWORD *)(v13 + 16) + 1, 1, (char *)v13);
    v13 = result;
    *a7 = result;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    result = (uint64_t)sub_1A5811A88((char *)(v15 > 1), v16 + 1, 1, (char *)v13);
    v13 = result;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  v17 = v13 + 24 * v16;
  *(_QWORD *)(v17 + 32) = v9;
  *(_QWORD *)(v17 + 40) = v8;
  *(_WORD *)(v17 + 48) = v11;
  *a7 = v13;
  return result;
}

void sub_1A58006CC(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2 - (_QWORD)a1;
  if (!a1)
    v2 = 0;
  if (v2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    return;
  }
  v3 = v2;
  sub_1A57F0BF0(0x2Au);
  if (!v3)
    return;
  if (v3 <= 0)
    goto LABEL_10;
  if (*a1 == 42)
    sub_1A57F0970();
}

uint64_t sub_1A5800818(uint64_t a1, int64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  char v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int16 v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int16 v57;
  int v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  char v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  char *v78;
  __int16 v79;
  unsigned int v80;
  char v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  __int16 v86;
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  int v98;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  _BYTE v112[56];
  _BYTE v113[56];
  _BYTE v114[56];
  _QWORD v115[6];
  char v116;
  _QWORD v117[6];
  char v118;
  _QWORD v119[6];
  char v120;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (char *)(_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0() + 65);
    v108 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v7 = *(_BYTE **)(v4 - 33);
      v8 = *(_QWORD *)(v4 - 25);
      v9 = *(_QWORD *)(v4 - 17);
      v10 = *(_QWORD *)(v4 - 9);
      v11 = *(v4 - 1);
      v12 = *v4;
      sub_1A58006CC(v7, v8);
      if (v15 != 2)
      {
        v16 = v14;
        v17 = v15;
        v103 = v13;
        v105 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v18 = v108;
        else
          v18 = sub_1A5810DB4(0, *((_QWORD *)v108 + 2) + 1, 1, v108);
        v20 = *((_QWORD *)v18 + 2);
        v19 = *((_QWORD *)v18 + 3);
        v21 = v10;
        v22 = v12;
        if (v20 < v19 >> 1)
        {
          v5 = v11;
        }
        else
        {
          v23 = sub_1A5810DB4((char *)(v19 > 1), v20 + 1, 1, v18);
          v22 = v12;
          v21 = v10;
          v5 = v11;
          v18 = v23;
        }
        *((_QWORD *)v18 + 2) = v20 + 1;
        v108 = v18;
        v6 = &v18[64 * v20];
        *((_QWORD *)v6 + 4) = v103;
        *((_QWORD *)v6 + 5) = v16;
        v6[48] = v17 & 1;
        v6[49] = BYTE1(v17);
        v6[50] = ((v17 & 0xFFFFFFu) >> 16) & 1;
        *((_QWORD *)v6 + 7) = v7;
        *((_QWORD *)v6 + 8) = v8;
        *((_QWORD *)v6 + 9) = v105;
        *((_QWORD *)v6 + 10) = v21;
        v6[88] = v5;
        v6[89] = v22;
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v24 = v108;
    v25 = *((_QWORD *)v108 + 2);
    if (v25)
      goto LABEL_13;
    return swift_bridgeObjectRelease();
  }
  v24 = (char *)MEMORY[0x1E0DEE9D8];
  v25 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v25)
    return swift_bridgeObjectRelease();
LABEL_13:
  v26 = v24 + 32;
  v109 = v24;
  result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v28 = v26;
  v29 = 0;
  v104 = v25;
  v107 = v26;
  while (1)
  {
    v30 = v29;
    v31 = &v28[64 * v29];
    v33 = *(char **)v31;
    v32 = (char *)*((_QWORD *)v31 + 1);
    v34 = v31[16];
    v35 = (_BYTE *)*((_QWORD *)v31 + 5);
    v36 = *((_QWORD *)v31 + 6);
    v37 = v31[56];
    v38 = v31[57];
    ++v29;
    if (v31[18] == 1)
    {
      v39 = v29;
      if ((v34 & 1) != 0
        && (sub_1A57FFA04(*((_BYTE **)v31 + 5), *((_QWORD *)v31 + 6), (uint64_t)v112),
            sub_1A55032A0((uint64_t)v112, (uint64_t)v115, &qword_1EE7AA6F0),
            (v116 & 1) == 0))
      {
        v51 = (unsigned __int8 *)v115[0];
        v52 = (unsigned __int8 *)v115[1];
        v53 = v115[4];
        v54 = v115[5];
        __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
        v55 = swift_allocObject();
        *(_OWORD *)(v55 + 16) = xmmword_1A59ABD10;
        *(_QWORD *)(v55 + 32) = v53;
        *(_QWORD *)(v55 + 40) = v54;
        *(_WORD *)(v55 + 48) = 0;
        if (!v33
          || v32 - v33 != 8
          || (sub_1A57FECC4(0x656D616E656C6966uLL, 0xE800000000000000, v33, v32, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468) & 1) == 0)
        {
          goto LABEL_14;
        }
        v110 = 0;
        v111 = 0xE000000000000000;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        swift_retain();
        sub_1A57FFD60((uint64_t)v51, (uint64_t)v52, 0, v55, v51, v52, 0, v55, a3, (uint64_t)&v110);
        swift_bridgeObjectRelease();
        swift_release();
        v56 = v111;
        *a2 = v110;
        a2[1] = v56;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
        v40 = swift_allocObject();
        v41 = v40;
        *(_OWORD *)(v40 + 16) = xmmword_1A59ABD10;
        if (v37)
          v42 = -32512;
        else
          v42 = 0x8000;
        v43 = v42 | v38;
        if (v34)
          v43 = 0;
        *(_QWORD *)(v40 + 32) = v35;
        *(_QWORD *)(v40 + 40) = v36;
        *(_WORD *)(v40 + 48) = v43;
        if (!v33
          || v32 - v33 != 8
          || (sub_1A57FECC4(0x656D616E656C6966uLL, 0xE800000000000000, v33, v32, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468) & 1) == 0)
        {
          goto LABEL_14;
        }
        if (*(_QWORD *)(v41 + 16) == 1 && (*(_WORD *)(v41 + 48) & 0x8100) == 0x8000)
        {
          v44 = sub_1A580AD60(*(_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 40));
          v46 = v45;
          swift_retain();
          v47 = sub_1A57FDD00(v44, v46, a3);
        }
        else
        {
          v110 = 0;
          v111 = 0xE000000000000000;
          swift_retain();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A57FFD60(0, 0, 1, v41, 0, 0, 1, v41, a3, (uint64_t)&v110);
          swift_bridgeObjectRelease();
          swift_release();
          v47 = v110;
          v48 = v111;
        }
        *a2 = v47;
        a2[1] = v48;
      }
      swift_bridgeObjectRelease();
LABEL_14:
      result = swift_bridgeObjectRelease();
      v28 = v107;
      v29 = v39;
      goto LABEL_15;
    }
    if (v31[17])
      goto LABEL_15;
    v106 = v29;
    v49 = *((_QWORD *)v109 + 2);
    if (v30 >= v49)
      goto LABEL_108;
    if ((v34 & 1) == 0)
    {
      v101 = 0;
      v102 = 0;
      if (v31[56])
        v57 = -32512;
      else
        v57 = 0x8000;
      v50 = v57 | v38;
      goto LABEL_44;
    }
    sub_1A57FFA04(v35, v36, (uint64_t)v113);
    sub_1A55032A0((uint64_t)v113, (uint64_t)v119, &qword_1EE7AA6F0);
    if (v120 == 1)
    {
      v50 = 0;
      v101 = 0;
      v102 = 0;
LABEL_44:
      v58 = 1;
      goto LABEL_46;
    }
    v50 = 0;
    v58 = 0;
    v101 = (unsigned __int8 *)v119[1];
    v102 = (unsigned __int8 *)v119[0];
    v35 = (_BYTE *)v119[4];
    v36 = v119[5];
LABEL_46:
    v59 = sub_1A5811A88(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v61 = *((_QWORD *)v59 + 2);
    v60 = *((_QWORD *)v59 + 3);
    if (v61 >= v60 >> 1)
      v59 = sub_1A5811A88((char *)(v60 > 1), v61 + 1, 1, v59);
    *((_QWORD *)v59 + 2) = v61 + 1;
    v62 = &v59[24 * v61];
    *((_QWORD *)v62 + 4) = v35;
    *((_QWORD *)v62 + 5) = v36;
    *((_WORD *)v62 + 24) = v50;
    v63 = v106;
    if (v106 == v49)
      goto LABEL_89;
    v64 = v59;
    result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v65 = (uint64_t)v64;
    v66 = 0;
    v67 = v107;
    v68 = v58;
LABEL_52:
    if (v63 >= v49)
      break;
    v70 = (unsigned __int8 **)&v67[64 * v63];
    v72 = *v70;
    v71 = v70[1];
    v73 = *((unsigned __int8 *)v70 + 16);
    v69 = *((unsigned __int8 *)v70 + 17);
    v74 = *((_BYTE *)v70 + 18);
    v75 = v70[5];
    v76 = (uint64_t)v70[6];
    v77 = *((unsigned __int8 *)v70 + 56);
    ++v63;
    v78 = v33;
    v79 = *((unsigned __int8 *)v70 + 57);
    while (1)
    {
      if (v72)
      {
        if (v71 && v72 == v71)
        {
          v82 = 0;
          v81 = 1;
          if (!v78)
            goto LABEL_54;
          goto LABEL_68;
        }
LABEL_65:
        v81 = 0;
        v83 = *v72++;
        v82 = v83;
        if (!v78)
          goto LABEL_54;
        goto LABEL_68;
      }
      if (v71)
        goto LABEL_65;
      v82 = 0;
      v72 = 0;
      v81 = 1;
      if (!v78)
      {
LABEL_54:
        if (!v32)
          break;
        v78 = 0;
        goto LABEL_56;
      }
LABEL_68:
      if (v32 && v78 == v32)
        break;
LABEL_56:
      v80 = *v78++;
      result = v80;
      if (v82 != v80)
        v81 = 1;
      if ((v81 & 1) != 0)
        goto LABEL_50;
    }
    if ((v81 & 1) == 0)
    {
LABEL_50:
      v69 = v66;
      goto LABEL_51;
    }
    if ((v74 & 1) == 0)
    {
      v84 = v66 + 1;
      if (((v84 >> 8) & 1) != 0)
        goto LABEL_107;
      if ((_DWORD)v69 == v84)
      {
        if (v73)
        {
          if ((v68 & 1) != 0)
          {
            v85 = v65;
            sub_1A57FFA04(v75, v76, (uint64_t)v114);
            result = sub_1A55032A0((uint64_t)v114, (uint64_t)v117, &qword_1EE7AA6F0);
            v86 = 0;
            if (v118 == 1)
            {
              v68 = 1;
            }
            else
            {
              v68 = 0;
              v101 = (unsigned __int8 *)v117[1];
              v102 = (unsigned __int8 *)v117[0];
              v75 = (unsigned __int8 *)v117[4];
              v76 = v117[5];
            }
            v67 = v107;
            v65 = v85;
          }
          else
          {
            v86 = 0;
            v68 = 0;
          }
        }
        else
        {
          if (v77)
            v87 = -32512;
          else
            v87 = 0x8000;
          v86 = v87 | v79;
        }
        v89 = *(_QWORD *)(v65 + 16);
        v88 = *(_QWORD *)(v65 + 24);
        if (v89 >= v88 >> 1)
        {
          v98 = v68;
          result = (uint64_t)sub_1A5811A88((char *)(v88 > 1), v89 + 1, 1, (char *)v65);
          v68 = v98;
          v67 = v107;
          v65 = result;
        }
        *(_QWORD *)(v65 + 16) = v89 + 1;
        v90 = v65 + 24 * v89;
        *(_QWORD *)(v90 + 32) = v75;
        *(_QWORD *)(v90 + 40) = v76;
        *(_WORD *)(v90 + 48) = v86;
        v25 = v104;
LABEL_51:
        v66 = v69;
        if (v63 != v49)
          goto LABEL_52;
      }
    }
    LOBYTE(v58) = v68;
    v91 = (char *)v65;
    swift_bridgeObjectRelease();
    v59 = v91;
LABEL_89:
    v29 = v106;
    if (v33 && v32 - v33 == 8)
    {
      v92 = (uint64_t)v59;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      if ((sub_1A57FECC4(0x656D616E656C6966uLL, 0xE800000000000000, v33, v32, (void (*)(uint64_t *__return_ptr, _QWORD *))sub_1A57F1468) & 1) != 0)
      {
        if ((v58 & 1) != 0 && *(_QWORD *)(v92 + 16) == 1 && (*(_WORD *)(v92 + 48) & 0x8100) == 0x8000)
        {
          v93 = sub_1A580AD60(*(_QWORD *)(v92 + 32), *(_QWORD *)(v92 + 40));
          v95 = v94;
          swift_retain();
          v96 = sub_1A57FDD00(v93, v95, a3);
        }
        else
        {
          v110 = 0;
          v111 = 0xE000000000000000;
          swift_retain();
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A57FFD60((uint64_t)v102, (uint64_t)v101, v58 & 1, v92, v102, v101, v58 & 1, v92, a3, (uint64_t)&v110);
          swift_bridgeObjectRelease();
          swift_release();
          v96 = v110;
          v97 = v111;
        }
        *a2 = v96;
        a2[1] = v97;
        swift_bridgeObjectRelease_n();
        goto LABEL_96;
      }
      result = swift_bridgeObjectRelease_n();
      v28 = v107;
    }
    else
    {
LABEL_96:
      result = swift_bridgeObjectRelease();
      v28 = v107;
    }
LABEL_15:
    if (v29 == v25)
      return swift_bridgeObjectRelease_n();
  }
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
  return result;
}

unint64_t sub_1A58010E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;

  result = swift_beginAccess();
  v11 = *a1;
  v12 = a1[1];
  if (*a1 != v12)
  {
    if (*a1 >= v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (*(_BYTE *)(a1[2] + v11) == 59)
    {
      *a1 = v11 + 1;
      return 1;
    }
  }
  result = swift_beginAccess();
  if (v11 != v12 && *(_QWORD *)(*(_QWORD *)a2 + 16) != 0)
  {
    if (__OFADD__(a3, 1))
      goto LABEL_25;
    if (a3 + 1 < v11)
    {
      v14 = v11 - 2;
      if (__OFSUB__(v11, 2))
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if (v14 < a3 || v14 >= a4)
        goto LABEL_27;
      v15 = *(unsigned __int8 *)(a5 + v14);
      v16 = v15 > 0x20;
      v17 = (1 << v15) & 0x100002600;
      if (!v16 && v17 != 0)
      {
        if (v11 <= a3 || v11 > a4)
          goto LABEL_28;
        v19 = *(unsigned __int8 *)(v11 + a5 - 1);
        if (v19 < 0x21)
          return (0x100002600uLL >> v19) & 1;
      }
    }
  }
  return 0;
}

unint64_t sub_1A5801228(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v59;
  unsigned int v60;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[40];
  _BYTE v72[40];
  _QWORD v73[4];
  char v74;
  _QWORD v75[4];
  unsigned __int8 v76;

  i = a2 - result;
  if (result)
    v12 = a2 - result;
  else
    v12 = 0;
  if (v12 < 0)
    goto LABEL_210;
  if (!v12)
    return 0;
  v9 = result;
  v13 = *(unsigned __int8 *)result;
  v14 = v13 > 0x20;
  v15 = (1 << v13) & 0x100002600;
  if (v14 || v15 == 0)
  {
    v10 = 0;
  }
  else
  {
    if (v12 == 1)
    {
      v17 = 1;
      v67 = 1;
      v10 = 1;
      v18 = 1;
      for (i = 1; ; i = v12)
      {
        while (1)
        {
          v68 = v17;
          v69 = v9;
          v70 = a2;
          if (v10 == v18)
            return 0;
LABEL_32:
          if (i != v12)
          {
            if (v12 <= i)
              v3 = i;
            else
              v3 = v12;
            if (i >= v12)
              goto LABEL_209;
            v23 = *(unsigned __int8 *)(v9 + i);
            if (v23 <= 0x20 && ((1 << v23) & 0x100002600) != 0)
            {
              v5 = i + 1;
              v70 = a2;
              v17 = v12;
              i = v12;
              if (v5 != v12)
              {
                v4 = 0x100002600;
                i = v5;
                do
                {
                  if (v3 == i)
                    goto LABEL_208;
                  v24 = *(unsigned __int8 *)(v9 + i);
                  v14 = v24 > 0x20;
                  v5 = (1 << v24) & 0x100002600;
                  if (v14 || v5 == 0)
                    goto LABEL_48;
                  ++i;
                }
                while (v12 != i);
                i = v12;
LABEL_48:
                v70 = a2;
                v17 = v12;
              }
            }
            v67 = i;
            v68 = v17;
            v69 = v9;
          }
          v62 = a3;
          v66 = MEMORY[0x1E0DEE9D8];
          result = sub_1A58010E4(&v67, (uint64_t)&v66, 0, v12, v9);
          if ((result & 1) == 0)
            goto LABEL_152;
          while (1)
          {
            v27 = v67;
            v26 = v68;
            if (v67 != v68)
            {
              v28 = v69;
              if (v68 <= v67)
                v29 = v67;
              else
                v29 = v68;
              do
              {
                if (v29 == v27)
                {
                  v67 = v27;
                  __break(1u);
LABEL_195:
                  v67 = v28;
                  v68 = v26;
                  __break(1u);
LABEL_196:
                  v3 = 0x800000100002600;
                  v4 = v10;
                  while (1)
                  {
                    i = v4 + 2;
                    if (__OFADD__(v4 + 1, 1))
                      goto LABEL_237;
                    if (v12 < i)
                      goto LABEL_238;
                    if (i < ++v4)
                      goto LABEL_239;
                    if (i == v12)
                      goto LABEL_219;
                    v60 = *(unsigned __int8 *)(v9 + i);
                    v14 = v60 > 0x3B;
                    v5 = (1 << v60) & 0x800000100002600;
                    if (!v14 && v5 != 0)
                      goto LABEL_167;
                  }
                }
                v30 = *(unsigned __int8 *)(v69 + v27);
                v14 = v30 > 0x20;
                v5 = (1 << v30) & 0x100002600;
                if (v14 || v5 == 0)
                  break;
                ++v27;
              }
              while (v68 != v27);
              v67 = v27;
            }
            sub_1A57F0DC4((uint64_t)v71);
            result = sub_1A55032A0((uint64_t)v71, (uint64_t)v75, (uint64_t *)&unk_1EE79B418);
            i = v76;
            if ((v76 & 1) != 0 || (v5 = v67, v3 = v68, v67 == v68))
            {
LABEL_152:
              if (v9)
                return v9 + v10;
              else
                return 0;
            }
            if (v67 >= v68)
              goto LABEL_211;
            i = v69;
            if (*(_BYTE *)(v69 + v67) != 61)
              goto LABEL_152;
            result = v75[0];
            v32 = v75[1];
            v33 = v75[2];
            v4 = v70;
            v34 = ++v67;
            if (v5 + 1 == v68)
              goto LABEL_76;
            if (v5 + 1 >= v68)
            {
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              v4 = v8;
              i = v7;
              v3 = v6;
              goto LABEL_223;
            }
            if (*(_BYTE *)(v69 + v34) != 34)
            {
LABEL_76:
              v36 = v75[0];
              sub_1A57F0DC4((uint64_t)v72);
              sub_1A55032A0((uint64_t)v72, (uint64_t)v73, (uint64_t *)&unk_1EE79B418);
              if (v74 == 1)
                goto LABEL_164;
              v64 = 0;
              v65 = 0;
              v34 = v73[0];
              v5 = v73[1];
              i = v73[2];
              result = v36;
              goto LABEL_99;
            }
            v34 = v5 + 2;
            v67 = v5 + 2;
            if (v5 + 2 == v68)
              goto LABEL_164;
            v6 = v68;
            v7 = v69;
            v8 = v70;
            if (v34 >= v68)
              goto LABEL_222;
            if (*(_BYTE *)(v69 + v34) != 34)
              break;
            v4 = v70;
            v35 = v5 + 2;
            v5 += 2;
LABEL_93:
            v67 = v35;
            v68 = v6;
            v69 = v7;
            v70 = v4;
            if (v5 < v34)
              goto LABEL_220;
            if (v3 < v5)
              goto LABEL_221;
            if (v5 == v3)
              goto LABEL_164;
            if (v5 >= v3)
              goto LABEL_224;
            if (*(_BYTE *)(i + v5) != 34)
              goto LABEL_164;
            v67 = v5 + 1;
            v64 = v62;
            v65 = 1;
LABEL_99:
            v37 = v33 + v32;
            if (!v33)
              v37 = 0;
            v63 = v37;
            if (v33)
              v38 = v33 + result;
            else
              v38 = 0;
            v39 = i + v34;
            if (i)
              v40 = i + v5;
            else
              v40 = 0;
            if (i)
              v41 = v39;
            else
              v41 = 0;
            v42 = v66;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              v43 = v42;
            }
            else
            {
              result = (unint64_t)sub_1A5810EA8(0, *(_QWORD *)(v42 + 16) + 1, 1, (char *)v42);
              v43 = result;
            }
            v45 = *(_QWORD *)(v43 + 16);
            v44 = *(_QWORD *)(v43 + 24);
            if (v45 >= v44 >> 1)
            {
              result = (unint64_t)sub_1A5810EA8((char *)(v44 > 1), v45 + 1, 1, (char *)v43);
              v43 = result;
            }
            *(_QWORD *)(v43 + 16) = v45 + 1;
            v46 = v43 + 40 * v45;
            *(_QWORD *)(v46 + 32) = v38;
            *(_QWORD *)(v46 + 40) = v63;
            *(_QWORD *)(v46 + 48) = v41;
            *(_QWORD *)(v46 + 56) = v40;
            *(_BYTE *)(v46 + 64) = v65;
            *(_BYTE *)(v46 + 65) = v64 & 1;
            v66 = v43;
            v28 = v67;
            v26 = v68;
            if (v67 == v68)
              goto LABEL_52;
            if (v68 <= v67)
              v5 = v67;
            else
              v5 = v68;
            v47 = v67 + 1;
            while (1)
            {
              if (v5 == v28)
                goto LABEL_195;
              v48 = *(unsigned __int8 *)(v69 + v28);
              v14 = v48 > 0x20;
              v49 = (1 << v48) & 0x100002600;
              if (v14 || v49 == 0)
                break;
              ++v28;
              ++v47;
              if (v68 == v28)
              {
                v67 = v28;
                goto LABEL_52;
              }
            }
            v67 = v28;
            if (v68 != v28)
            {
              if (v28 >= v68)
                goto LABEL_229;
              if (*(_BYTE *)(v69 + v28) == 40)
              {
                v51 = v28 + 1;
                v67 = v28 + 1;
                if (v68 - 1 == v28)
                {
                  v51 = v68;
                }
                else
                {
                  if (v51 >= v68)
                    goto LABEL_240;
                  if (*(_BYTE *)(v69 + v28 + 1) != 41)
                  {
                    if (v68 - 2 == v28)
                    {
LABEL_134:
                      v51 = v68;
LABEL_135:
                      v67 = v51;
                      if (v51 <= v28)
                        goto LABEL_234;
                    }
                    else
                    {
                      v51 = v28 + 2;
                      if (v28 + 2 >= v68)
                        goto LABEL_242;
                      if (*(_BYTE *)(v69 + v28 + 2) != 41)
                      {
                        while (1)
                        {
                          v51 = v47 + 2;
                          if (__OFADD__(v47 + 1, 1))
                            break;
                          if (v68 < v51)
                            goto LABEL_232;
                          if (v51 < ++v47)
                            goto LABEL_233;
                          if (v51 == v68)
                            goto LABEL_134;
                          if (*(_BYTE *)(v69 + v51) == 41)
                            goto LABEL_135;
                        }
LABEL_231:
                        __break(1u);
LABEL_232:
                        __break(1u);
LABEL_233:
                        __break(1u);
LABEL_234:
                        __break(1u);
LABEL_235:
                        __break(1u);
LABEL_236:
                        __break(1u);
LABEL_237:
                        __break(1u);
LABEL_238:
                        __break(1u);
LABEL_239:
                        __break(1u);
LABEL_240:
                        __break(1u);
LABEL_241:
                        __break(1u);
LABEL_242:
                        __break(1u);
                        goto LABEL_243;
                      }
                      v67 = v28 + 2;
                    }
                  }
                }
                if (v68 < v51)
                  goto LABEL_230;
                if (v51 == v68)
                  goto LABEL_164;
                if (v51 >= v68)
                  goto LABEL_235;
                if (*(_BYTE *)(v69 + v51) != 41)
                {
LABEL_164:
                  swift_bridgeObjectRelease();
                  return 0;
                }
                v67 = v51 + 1;
              }
            }
LABEL_52:
            result = sub_1A58010E4(&v67, (uint64_t)&v66, 0, v12, v9);
            if ((result & 1) == 0)
              goto LABEL_152;
          }
          v35 = v5 + 3;
          if (__OFADD__(v5, 3))
            goto LABEL_225;
          if (v68 < v35)
          {
            v4 = v70;
            i = v69;
            v3 = v68;
            goto LABEL_216;
          }
          if (v35 < v34)
          {
            v4 = v70;
            i = v69;
            v3 = v68;
            goto LABEL_218;
          }
          if (v35 == v68)
          {
LABEL_90:
            v7 = v69;
            v6 = v68;
            v5 = v68;
            goto LABEL_93;
          }
          while (1)
          {
            v6 = v5 + 3;
            if (v5 + 3 >= v68)
              goto LABEL_212;
            v7 = *(unsigned __int8 *)(v69 + v5 + 3);
            if ((_DWORD)v7 == 34)
            {
              if (v34 >= v6)
              {
                v35 = v5 + 3;
LABEL_92:
                v7 = v69;
                v6 = v68;
                v5 = v35;
                goto LABEL_93;
              }
              v7 = *(unsigned __int8 *)(v69 + v5 + 2);
              if ((_DWORD)v7 != 92)
                goto LABEL_92;
            }
            v35 = v5 + 4;
            if (__OFADD__(v6, 1))
              break;
            if (v68 < v35)
              goto LABEL_215;
            if (v35 < v6)
              goto LABEL_217;
            ++v5;
            if (v35 == v68)
              goto LABEL_90;
          }
          v34 = v5 + 3;
LABEL_214:
          v67 = v34;
          v68 = v3;
          v69 = i;
          v70 = v4;
          __break(1u);
LABEL_215:
          v34 = v5 + 3;
LABEL_216:
          v67 = v34;
          v68 = v3;
          v69 = i;
          v70 = v4;
          __break(1u);
LABEL_217:
          v34 = v5 + 3;
LABEL_218:
          v67 = v34;
          v68 = v3;
          v69 = i;
          v70 = v4;
          __break(1u);
LABEL_219:
          i = v12;
LABEL_167:
          v67 = i;
          v69 = v9;
          v18 = i;
          if (i >= v10)
            break;
          __break(1u);
LABEL_169:
          v67 = i;
          v68 = v12;
          v69 = v9;
          v70 = a2;
          if (i == v12)
            goto LABEL_31;
          if (i >= v12)
            goto LABEL_241;
          if (*(_BYTE *)(v9 + i) == 61)
          {
            v67 = ++i;
            v69 = v9;
          }
          if (i == v12)
            goto LABEL_31;
          if (v12 <= i)
            v55 = i;
          else
            v55 = v12;
          if (i >= v12)
            goto LABEL_228;
          v56 = *(unsigned __int8 *)(v9 + i);
          if (v56 <= 0x20)
          {
            v4 = 0x100002600;
            if (((1 << v56) & 0x100002600) != 0)
            {
              v5 = i + 1;
              i = v12;
              if (v5 != v12)
              {
                i = v5;
                while (v55 != i)
                {
                  v57 = *(unsigned __int8 *)(v9 + i);
                  v14 = v57 > 0x20;
                  v5 = (1 << v57) & 0x100002600;
                  if (v14 || v5 == 0)
                    goto LABEL_189;
                  if (v12 == ++i)
                  {
                    i = v12;
                    goto LABEL_189;
                  }
                }
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
                goto LABEL_231;
              }
            }
          }
LABEL_189:
          v67 = i;
          v17 = v12;
        }
LABEL_29:
        if (v12 < v18)
        {
          __break(1u);
LABEL_208:
          v70 = a2;
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          v34 = v6;
LABEL_223:
          v67 = v34;
          v68 = v3;
          v69 = i;
          v70 = v4;
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          v4 = v8;
          i = v7;
          v3 = v6;
          goto LABEL_214;
        }
        if (v18 == v12)
        {
LABEL_31:
          v17 = v12;
          i = v12;
          if (v10 == v18)
            return 0;
          goto LABEL_32;
        }
        v52 = *(unsigned __int8 *)(v9 + v18);
        i = v18;
        if (v52 > 0x20)
          goto LABEL_169;
        i = v18;
        if (((1 << v52) & 0x100002600) == 0)
          goto LABEL_169;
        i = v18 + 1;
        if (v18 + 1 != v12)
        {
          do
          {
            v53 = *(unsigned __int8 *)(v9 + i);
            v14 = v53 > 0x20;
            v4 = (1 << v53) & 0x100002600;
            if (v14 || v4 == 0)
              goto LABEL_169;
          }
          while (v12 != ++i);
        }
        v67 = v12;
        v17 = v12;
      }
    }
    v10 = 1;
    while (1)
    {
      v19 = *(unsigned __int8 *)(result + v10);
      v14 = v19 > 0x20;
      v3 = (1 << v19) & 0x100002600;
      if (v14 || v3 == 0)
        break;
      if (v12 == ++v10)
        return 0;
    }
  }
  v67 = v10;
  v68 = v12;
  v69 = result;
  v70 = a2;
  if (v10 == v12)
  {
    v18 = v12;
    goto LABEL_31;
  }
  if (v10 < v12)
  {
    v21 = *(unsigned __int8 *)(result + v10);
    v14 = v21 > 0x3B;
    i = (1 << v21) & 0x800000100002600;
    v22 = v14 || i == 0;
    v18 = v10;
    if (!v22)
      goto LABEL_29;
    v18 = v10 + 1;
    i = v12;
    if (v10 + 1 == v12)
      goto LABEL_167;
    if (v10 + 1 < v12)
    {
      v59 = *(unsigned __int8 *)(result + v18);
      if (v59 > 0x3B)
        goto LABEL_196;
      i = 1 << v59;
      if ((i & 0x800000100002600) == 0)
        goto LABEL_196;
      v67 = v10 + 1;
      v69 = result;
      goto LABEL_29;
    }
    goto LABEL_236;
  }
LABEL_243:
  __break(1u);
  return result;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeNameValuePair(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeNameValuePair(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeNameValuePair()
{
  return &type metadata for RFC_2231.UnsafeNameValuePair;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeName(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeName()
{
  return &type metadata for RFC_2231.UnsafeAttributeName;
}

uint64_t getEnumTagSinglePayload for RFC_2231.EncodedWithCharacterSetAndLanguage(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RFC_2231.EncodedWithCharacterSetAndLanguage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.EncodedWithCharacterSetAndLanguage()
{
  return &type metadata for RFC_2231.EncodedWithCharacterSetAndLanguage;
}

ValueMetadata *type metadata accessor for RFC_2231()
{
  return &type metadata for RFC_2231;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue;
}

__n128 __swift_memcpy18_8_1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (*(_WORD *)(a1 + 16) & 0xFE | (*(unsigned __int16 *)(a1 + 16) >> 15) | (*(unsigned __int16 *)(a1 + 16) >> 1) & 0x3F00) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 > 0x3FFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x3FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 1) & 0x1FFF) - (a2 << 13);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 16) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_1A5801EC0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16) >> 15;
}

uint64_t sub_1A5801ECC(uint64_t result)
{
  *(_WORD *)(result + 16) &= ~0x8000u;
  return result;
}

uint64_t sub_1A5801EDC(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = *(_WORD *)(result + 16) & 0x101 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.Element()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.Element;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.DecodedRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.DecodedRange()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.DecodedRange;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeBaseName()
{
  return &type metadata for RFC_2231.UnsafeBaseName;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element.Unencoded(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element.Unencoded(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.Element.Unencoded()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.Element.Unencoded;
}

uint64_t sub_1A5802010(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  char v17;
  char v18;
  char v19;
  int64_t v20;
  uint64_t v21;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v20 = (unint64_t)(v7 + 63) >> 6;
  result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v11++, 1))
      break;
    if (v11 >= v20)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v20)
        goto LABEL_27;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = v11 + 2;
        if (v11 + 2 >= v20)
          goto LABEL_27;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v11 + 3;
          if (v11 + 3 >= v20)
            goto LABEL_27;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
          {
            v16 = v11 + 4;
            if (v11 + 4 >= v20)
            {
LABEL_27:
              swift_release();
              v19 = 0;
              return v19 & 1;
            }
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_30;
                if (v11 >= v20)
                  goto LABEL_27;
                v15 = *(_QWORD *)(v6 + 8 * v11);
                ++v16;
                if (v15)
                  goto LABEL_18;
              }
            }
          }
        }
      }
      v11 = v16;
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_19:
    v21 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v17 = a1(&v21);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v19 & 1;
    }
    v18 = v17;
    result = swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      swift_release();
      v19 = 1;
      return v19 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A58021F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39[16];
  uint64_t *v40;
  char *v41;
  char v42[16];
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v36 = a4;
  v34 = a2;
  v35 = a3;
  v33 = a1;
  v8 = type metadata accessor for ReplacementNode();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v33 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FF8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v33 - v19;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_BYTE *)(a6 + 56) = 2;
  v21 = a6 + *(int *)(v8 + 24);
  v22 = type metadata accessor for PartReplacement();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v38 = v21;
  v23(v21, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v20, 1, 1, v8);
  v51 = 0;
  v43 = &v51;
  v44 = a5;
  v45 = v20;
  v40 = &v51;
  v41 = v20;
  v24 = (uint64_t)v37;
  v25 = sub_1A57F978C(3, v33, v34, v35, v36);
  if (v24)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = v11;
    v46 = MEMORY[0x1E0DEE9D8];
    v47 = v25;
    v48 = v26;
    v49 = v27;
    v50 = v28;
    sub_1A57F8F6C((uint64_t (*)(uint64_t))sub_1A58028E4, (uint64_t)v42, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5802A0C, (uint64_t)v39, 0, 0);
    swift_bridgeObjectRelease();
    sub_1A54E330C((uint64_t)v20, (uint64_t)v17, &qword_1EE798FF8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) != 1)
    {
      sub_1A5802FAC((uint64_t)v17, (uint64_t)v14);
      v32 = (uint64_t)v37;
      sub_1A5802FAC((uint64_t)v14, (uint64_t)v37);
      sub_1A5510284(v38, &qword_1EE798FD8);
      sub_1A5802FAC(v32, a6);
      swift_bridgeObjectRelease();
      v29 = &qword_1EE798FF8;
      v30 = (uint64_t)v20;
      return sub_1A5510284(v30, v29);
    }
    sub_1A5510284((uint64_t)v17, &qword_1EE798FF8);
    sub_1A5802F68();
    swift_allocError();
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  sub_1A5510284((uint64_t)v20, &qword_1EE798FF8);
  v29 = &qword_1EE798FD8;
  v30 = v38;
  return sub_1A5510284(v30, v29);
}

uint64_t type metadata accessor for ReplacementNode()
{
  uint64_t result;

  result = qword_1EE798FE8;
  if (!qword_1EE798FE8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A58024F4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v8);
  v47 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v42 - v11;
  v13 = type metadata accessor for ReplacementNode();
  v45 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v42 - v17;
  v19 = *a1;
  *a2 = *a1;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a3 + 16);
  v48 = v4;
  v44 = a3;
  if (v20)
  {
    v21 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v22 = sub_1A5802E10(v21);
    if ((v23 & 1) != 0)
    {
      v24 = v22;
      v43 = *(_QWORD *)(a3 + 56);
      v25 = type metadata accessor for PartReplacement();
      v26 = *(_QWORD *)(v25 - 8);
      sub_1A55034B8(v43 + *(_QWORD *)(v26 + 72) * v24, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v12, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for PartReplacement();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
    }
  }
  else
  {
    v25 = type metadata accessor for PartReplacement();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v27 = (uint64_t)&v15[*(int *)(v13 + 24)];
  type metadata accessor for PartReplacement();
  v28 = *(_QWORD *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, 1, 1, v25);
  v29 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v15 = *(_OWORD *)a1;
  *((_OWORD *)v15 + 1) = v29;
  v30 = a1[4];
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 4) = v30;
  v15[56] = 2;
  sub_1A58030C4((uint64_t)v12, v27);
  v31 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v15[*(int *)(v13 + 28)] = MEMORY[0x1E0DEE9D8];
  sub_1A5802FAC((uint64_t)v15, (uint64_t)v18);
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v19, v31) & 1) != 0)
  {
    v32 = v46;
    sub_1A5510284(v46, &qword_1EE798FF8);
    sub_1A55034B8((uint64_t)v18, v32, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v32, 0, 1, v13);
  }
  else if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v13))
  {
    v33 = *(_QWORD *)v18;
    v34 = *(_QWORD *)v18 + 32;
    v35 = (2 * *(_QWORD *)(*(_QWORD *)v18 + 16)) | 1;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A5802A14((uint64_t)v18, v33, v34, 0, v35);
    swift_bridgeObjectRelease();
  }
  v36 = v47;
  sub_1A54E330C((uint64_t)&v18[*(int *)(v13 + 24)], v47, &qword_1EE798FD8);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v36, 1, v25);
  v38 = sub_1A5510284(v36, &qword_1EE798FD8);
  if (v37 == 1)
  {
    MEMORY[0x1E0C80A78](v38);
    *(&v42 - 2) = (uint64_t)v18;
    v39 = v44;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v40 = sub_1A5802010((uint64_t (*)(uint64_t *))sub_1A580310C, (uint64_t)(&v42 - 4), v39);
    swift_bridgeObjectRelease();
    sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    if ((v40 & 1) != 0)
      return 2;
    else
      return 1;
  }
  else
  {
    sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    return 1;
  }
}

uint64_t sub_1A58028E4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A58024F4(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1A5802900(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  size_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v7 = *a6;
  if (*a6)
  {
    result = sub_1A57DCF1C(result, (uint64_t)v17);
    if ((unint64_t)v18 >> 59 == 9)
    {
      *(_QWORD *)&v18 = v18 & 0x7FFFFFFFFFFFFFFLL;
      v19 = v17[0];
      v20 = v17[1];
      v21 = v18;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v9 = sub_1A57D9C2C();
      if (v11 != 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        v15 = type metadata accessor for ReplacementNode();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(a7, 1, v15))
        {
          v16 = (2 * *(_QWORD *)(v7 + 16)) | 1;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          sub_1A5802C44(v12, v13, v14 & 1, v7, v7 + 32, 0, v16);
          swift_bridgeObjectRelease();
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1A5802A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1A5802900(a1, a2, a3, a4, a5, *(uint64_t **)(v5 + 16), *(_QWORD *)(v5 + 24));
}

void sub_1A5802A14(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, size_t a5)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = v5;
  v13 = type metadata accessor for ReplacementNode();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 >> 1 == a4)
    return;
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    a5 = sub_1A5811B90(0, v6, 1, (_QWORD *)a5);
LABEL_8:
    v19 = *(_QWORD *)(a5 + 16);
    v18 = *(_QWORD *)(a5 + 24);
    if (v19 >= v18 >> 1)
      a5 = sub_1A5811B90(v18 > 1, v19 + 1, 1, (_QWORD *)a5);
    *(_QWORD *)(a5 + 16) = v19 + 1;
    sub_1A5802FAC((uint64_t)v16, a5+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v19);
    swift_unknownObjectRelease();
    *(_QWORD *)(v7 + a3) = a5;
    return;
  }
  v6 = *(_QWORD *)(a3 + 8 * a4);
  v17 = a4 + 1;
  if ((sub_1A5802FF0(a3, v17, a5, MEMORY[0x1E0DEE9D8] + 32, 0, 1uLL) & 1) != 0)
  {
    a3 = *(int *)(v13 + 28);
    a5 = *(_QWORD *)(v7 + a3);
    if (*(_QWORD *)(a5 + 16) + 1 != v6)
      return;
    sub_1A55034B8(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_8;
    goto LABEL_19;
  }
  v20 = v6 - 1;
  if (v6 >= 1)
  {
    v21 = *(int *)(v13 + 28);
    v22 = *(_QWORD **)(v7 + v21);
    if ((unint64_t)v6 <= v22[2])
    {
      v23 = v21;
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = (_QWORD *)sub_1A57D3A7C(v22);
      if (v20 >= v22[2])
      {
        __break(1u);
      }
      else
      {
        sub_1A5802A14(a1, a2, a3, v17, a5);
        swift_unknownObjectRelease();
        *(_QWORD *)(v7 + v23) = v22;
      }
    }
  }
}

size_t sub_1A5802C44(size_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int64_t a6, unint64_t a7)
{
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v15;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;

  v12 = v7;
  v15 = result;
  if (a7 >> 1 == a6)
  {
    *(_QWORD *)(v7 + 40) = result;
    *(_QWORD *)(v7 + 48) = a2;
    *(_BYTE *)(v7 + 56) = a3 & 1;
    return result;
  }
  if ((uint64_t)(a7 >> 1) <= a6)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(a7 >> 1, a6))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = a5;
  v17 = *(_QWORD *)(a5 + 8 * a6);
  v22 = v17 - 1;
  if (v17 >= 1)
  {
    v10 = a7;
    v8 = a4;
    result = type metadata accessor for ReplacementNode();
    v9 = *(_QWORD **)(v12 + *(int *)(result + 28));
    if ((unint64_t)v17 <= v9[2])
    {
      v7 = result;
      v21 = *(int *)(result + 28);
      v20 = a6 + 1;
      v18 = sub_1A5802FF0(v11, a6 + 1, v10, MEMORY[0x1E0DEE9D8] + 32, 0, 1uLL);
      swift_unknownObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((v18 & 1) == 0)
      {
        if ((result & 1) != 0)
        {
LABEL_12:
          if (v22 >= v9[2])
          {
            __break(1u);
            return result;
          }
          sub_1A5802C44(v15, a2, a3 & 1, v8, v11, v20, v10);
          goto LABEL_14;
        }
LABEL_20:
        result = sub_1A57D3A7C(v9);
        v9 = (_QWORD *)result;
        goto LABEL_12;
      }
      if ((result & 1) != 0)
      {
LABEL_9:
        if (v22 < v9[2])
        {
          v19 = (unint64_t)v9
              + ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
              + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v22;
          *(_QWORD *)(v19 + 40) = v15;
          *(_QWORD *)(v19 + 48) = a2;
          *(_BYTE *)(v19 + 56) = a3 & 1;
LABEL_14:
          result = swift_unknownObjectRelease();
          *(_QWORD *)(v12 + v21) = v9;
          return result;
        }
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      v9 = (_QWORD *)sub_1A57D3A7C(v9);
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t sub_1A5802E10(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_1A594CE64();
  SectionSpecifier.Part.hash(into:)((uint64_t)v4, a1);
  v2 = sub_1A594CED0();
  return sub_1A5802E68(a1, v2);
}

unint64_t sub_1A5802E68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v8 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v7, a1);
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v11 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v10, a1);
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1A5802F68()
{
  unint64_t result;

  result = qword_1EE7AA6F8;
  if (!qword_1EE7AA6F8)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8C98, &type metadata for ReplacementNode.NoTopNodeFound);
    atomic_store(result, (unint64_t *)&qword_1EE7AA6F8);
  }
  return result;
}

uint64_t sub_1A5802FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplacementNode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A5802FF0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5))
      goto LABEL_20;
    if (v7 != (a6 >> 1) - a5)
      return 0;
    if (!v7)
      return 1;
    v9 = (uint64_t *)(result + 8 * a2);
    if (v9 == (uint64_t *)(a4 + 8 * a5) || v6 == a2)
      return 1;
    if (v6 <= a2)
      goto LABEL_22;
    v10 = a2 + 1;
    v11 = *v9;
    if (v6 == a2)
      return 1;
    v12 = a5;
    if (v8 == a5)
      return 0;
    while (v12 >= a5 && v12 < v8)
    {
      if (v11 != *(_QWORD *)(a4 + 8 * v12))
        return 0;
      if (v6 == v10)
        return 1;
      if (v10 >= v6)
        goto LABEL_21;
      v11 = *(_QWORD *)(result + 8 * v10++);
      if (v8 == ++v12)
        return 0;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A58030C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL sub_1A580310C()
{
  uint64_t v0;

  return SectionSpecifier.Part.isSubPart(of:)((NIOIMAPCore2::SectionSpecifier::Part)(*(NIOIMAPCore2::SectionSpecifier::Part **)(v0 + 16))->array._rawValue);
}

ValueMetadata *type metadata accessor for ReplacementNode.NoTopNodeFound()
{
  return &type metadata for ReplacementNode.NoTopNodeFound;
}

uint64_t sub_1A5803150(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  int EnumCaseMultiPayload;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for PartReplacement();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_13:
      *(_QWORD *)(v7 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return v7;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    v16 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v16 != 1)
      {
        v19 = *v10;
        v18 = v10[1];
        sub_1A54E42B4(v19, v18);
        *v9 = v19;
        v9[1] = v18;
        goto LABEL_12;
      }
    }
    else if (v16 != 1)
    {
      v20 = *v10;
      v21 = v10[1];
      sub_1A54E42B4(*v10, v21);
      *v9 = v20;
      v9[1] = v21;
      goto LABEL_12;
    }
    v17 = sub_1A594AE60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v9, v10, v17);
LABEL_12:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    goto LABEL_13;
  }
  v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v7;
}

uint64_t sub_1A580335C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PartReplacement();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1A594AE60();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    }
    else
    {
      sub_1A54E46E8(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A580341C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t v12;
  int EnumCaseMultiPayload;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(int *)(a3 + 24);
  v7 = (uint64_t *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v9 = type metadata accessor for PartReplacement();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (!v11(v8, 1, v9))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    v14 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v14 != 1)
      {
        v17 = *v8;
        v16 = v8[1];
        sub_1A54E42B4(v17, v16);
        *v7 = v17;
        v7[1] = v16;
        goto LABEL_10;
      }
    }
    else if (v14 != 1)
    {
      v18 = *v8;
      v19 = v8[1];
      sub_1A54E42B4(*v8, v19);
      *v7 = v18;
      v7[1] = v19;
      goto LABEL_10;
    }
    v15 = sub_1A594AE60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v7, v8, v15);
LABEL_10:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    goto LABEL_11;
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_11:
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t sub_1A5803600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *, uint64_t, uint64_t);
  int v13;
  int v14;
  int EnumCaseMultiPayload;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = type metadata accessor for PartReplacement();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      type metadata accessor for Message.Data(0);
      v16 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        if (v16 != 1)
        {
          v23 = *v9;
          v22 = v9[1];
          sub_1A54E42B4(v23, v22);
          *v8 = v23;
          v8[1] = v22;
          goto LABEL_17;
        }
      }
      else if (v16 != 1)
      {
        v24 = *v9;
        v25 = v9[1];
        sub_1A54E42B4(*v9, v25);
        *v8 = v24;
        v8[1] = v25;
        goto LABEL_17;
      }
      v21 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v8, v9, v21);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (!v14)
  {
    if (a1 == a2)
      goto LABEL_18;
    sub_1A55034FC((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    v18 = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    v19 = swift_getEnumCaseMultiPayload();
    if (v18 == 1)
    {
      if (v19 == 1)
      {
LABEL_12:
        v20 = sub_1A594AE60();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v8, v9, v20);
LABEL_22:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        goto LABEL_18;
      }
    }
    else if (v19 == 1)
    {
      goto LABEL_12;
    }
    v28 = *v9;
    v27 = v9[1];
    sub_1A54E42B4(v28, v27);
    *v8 = v28;
    v8[1] = v27;
    goto LABEL_22;
  }
  sub_1A55034FC((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
LABEL_8:
  v17 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
LABEL_18:
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A580394C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for PartReplacement();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v14 = type metadata accessor for Message.Data(0);
    v15 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v15 == 1)
      {
LABEL_5:
        v16 = sub_1A594AE60();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        goto LABEL_9;
      }
    }
    else if (v15 == 1)
    {
      goto LABEL_5;
    }
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_8;
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_9:
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1A5803B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = type metadata accessor for PartReplacement();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v15 = type metadata accessor for Message.Data(0);
      v16 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        if (v16 == 1)
        {
LABEL_5:
          v17 = sub_1A594AE60();
          (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v7, v8, v17);
          swift_storeEnumTagMultiPayload();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
          goto LABEL_16;
        }
      }
      else if (v16 == 1)
      {
        goto LABEL_5;
      }
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  if (!v13)
  {
    if (a1 == a2)
      goto LABEL_16;
    sub_1A55034FC((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    v19 = swift_getEnumCaseMultiPayload();
    v20 = type metadata accessor for Message.Data(0);
    v21 = swift_getEnumCaseMultiPayload();
    if (v19 == 1)
    {
      if (v21 == 1)
      {
LABEL_12:
        v22 = sub_1A594AE60();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v7, v8, v22);
        swift_storeEnumTagMultiPayload();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_16;
      }
    }
    else if (v21 == 1)
    {
      goto LABEL_12;
    }
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_20;
  }
  sub_1A55034FC((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
LABEL_8:
  v18 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_16:
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A5803E50()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5803E5C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1A5803EDC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A5803EE8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1A5803F60()
{
  unint64_t v0;

  sub_1A5803FE8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A5803FE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE798FE0)
  {
    type metadata accessor for PartReplacement();
    v0 = sub_1A594C354();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE798FE0);
  }
}

uint64_t sub_1A580403C(uint64_t result, uint64_t a2, char a3, uint64_t (*a4)(char *, char *), uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v50;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v50 = result;
  if (a9 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (a7)
    v10 = a9;
  else
    v10 = 0;
  if (v10 < 0)
    goto LABEL_37;
  LOBYTE(v11) = a3;
  v13 = sub_1A580E7F0();
  v17 = v16;
  if (v16 == 2)
    goto LABEL_33;
  v47 = v11;
  v48 = a2;
  v58 = v14;
  v18 = v13;
  sub_1A580E020(v13, v14, v15, v16 & 1, &v61);
  v20 = v61;
  v19 = v62;
  v21 = v63;
  v22 = v65;
  v57 = v64;
  if (a7 && v18 && v18 - a7 >= 1)
    sub_1A57EF0A0(a6, v50, 1, (uint64_t)a4, a5, 0, v18 - a7);
  v59 = v18;
  v23 = sub_1A580E7F0();
  if (v26 == 2)
  {
    result = v20;
    v27 = v19;
    v60 = v57;
    v28 = v22;
LABEL_13:
    v17 = v28 & 0xFFFFFFFFFFFFFF0ELL;
    LOBYTE(v11) = v47;
    if ((v28 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL)
    {
      if (v28 >> 59)
        goto LABEL_27;
      v30 = v58;
      v29 = v59;
      if ((v47 & 1) == 0 || v48)
        goto LABEL_28;
      return sub_1A57EEB1C(v50, a4);
    }
LABEL_33:
    if ((v11 & 1) == 0)
      sub_1A57D008C((uint64_t *)"X-Apple-Content-Length", 22, 2, v50, (uint64_t (*)(uint64_t *, char *))a4, (uint64_t)a4, a5, v17);
    return sub_1A57EEB1C(v50, a4);
  }
  v31 = v23;
  v32 = v24;
  v33 = v25;
  v54 = v20;
  v55 = v19;
  v56 = v21;
  while (1)
  {
    v40 = v26 & 1;
    result = sub_1A580E020(v31, v32, v33, v26 & 1, &v61);
    v37 = v61;
    v41 = v62;
    v21 = v63;
    v60 = v64;
    v28 = v65;
    if ((v22 & 0xFFFFFFFFFFFFFF0ELL) == 0x1FFFFFFF0ELL)
      goto LABEL_20;
    v42 = v22;
    v53 = v65;
    v28 = v40;
    v11 = v63;
    v43 = v61;
    v21 = v59;
    v44 = v59 ? v58 - v59 : 0;
    if (v44 < 0)
      break;
    v34 = v32;
    v35 = v31;
    v36 = v42;
    sub_1A57EF0A0(a6, v50, 1, (uint64_t)a4, a5, 0, v44);
    sub_1A5806574(v54, v55, v56, v57, v36);
    v37 = v43;
    v21 = v11;
    v31 = v35;
    v32 = v34;
    v28 = v53;
LABEL_20:
    v58 = v32;
    v59 = v31;
    v31 = sub_1A580E7F0();
    v32 = v38;
    v33 = v39;
    v22 = v28;
    v57 = v60;
    v55 = v41;
    v56 = v21;
    v54 = v37;
    result = v37;
    v27 = v41;
    if (v26 == 2)
      goto LABEL_13;
  }
  __break(1u);
LABEL_27:
  v45 = v28;
  v30 = v58;
  result = sub_1A5806574(result, v27, v21, v60, v45);
  v29 = v59;
LABEL_28:
  if (v29)
    v46 = v30 - v29;
  else
    v46 = 0;
  if ((v46 & 0x8000000000000000) == 0)
  {
    sub_1A57EF0A0(a6, v50, 1, (uint64_t)a4, a5, 0, v46);
    goto LABEL_33;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1A580438C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25[2];

  v25[0] = a8;
  v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Message(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A580635C(a2, (uint64_t)v17);
  v21 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v17, 1, v21) == 1)
  {
    sub_1A5510284((uint64_t)v17, &qword_1EE798FD8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_1A54E3394((uint64_t)v17, (uint64_t)v20, type metadata accessor for Message);
      MEMORY[0x1E0C80A78](v22);
      LOBYTE(v25[-8]) = a5;
      v25[-7] = a6;
      v25[-6] = a7;
      v25[-5] = v25[0];
      LOBYTE(v25[-4]) = a1;
      v25[-3] = (uint64_t)a3;
      v25[-2] = a4;
      sub_1A57F5864((uint64_t)v20, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1A58063A4, (uint64_t)&v25[-10], (uint64_t)v25);
      return sub_1A55034FC((uint64_t)v20, type metadata accessor for Message);
    }
    sub_1A55034FC((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
  }
  v24 = v25[0];
  sub_1A580552C(a1, a2, a3, a4, a5, a6, a7, v25[0]);
  return sub_1A5805684(a1, a2, (uint64_t)a3, a4, a5, a6, a7, v24);
}

uint64_t sub_1A580458C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(char *, uint64_t *, __n128))
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v25;
  char *v26;
  __int16 v27;
  _BYTE v28[37];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (a5 == 1)
    {
      v29 = 13;
      MEMORY[0x1E0C80A78](a1);
      v27 = 11565;
      MEMORY[0x1E0C80A78](v9);
      v12.n128_f64[0] = MEMORY[0x1E0C80A78](v10);
      if ((v13 & 1) != 0)
      {
        if (a2)
          v14 = a3 - a2;
        else
          v14 = 0;
        if ((v14 & 0x8000000000000000) == 0)
        {
          v15 = sub_1A58065A4;
          return sub_1A57F0560(0, v14, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v15);
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v29 = 10;
      MEMORY[0x1E0C80A78](a1);
      v27 = 11565;
      MEMORY[0x1E0C80A78](v21);
      v12.n128_f64[0] = MEMORY[0x1E0C80A78](v22);
      if ((v23 & 1) != 0)
      {
        if (a2)
          v14 = a3 - a2;
        else
          v14 = 0;
        if ((v14 & 0x8000000000000000) == 0)
        {
          v15 = sub_1A580641C;
          return sub_1A57F0560(0, v14, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v15);
        }
LABEL_32:
        __break(1u);
      }
    }
    if ((v11 & 1) == 0)
      a6(&v29, &v30, v12);
    a6((char *)&v27, (uint64_t *)v28, v12);
    ((void (*)(uint64_t, uint64_t))a6)(a2, a3);
    v25 = &v29;
    v26 = (char *)&v30;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v27 = 11565;
    MEMORY[0x1E0C80A78](v16);
    v19.n128_f64[0] = MEMORY[0x1E0C80A78](v17);
    if ((v20 & 1) != 0)
    {
      if (a2)
        v14 = a3 - a2;
      else
        v14 = 0;
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = sub_1A58065A4;
        return sub_1A57F0560(0, v14, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v15);
      }
      goto LABEL_31;
    }
    if ((v18 & 1) == 0)
      ((void (*)(const char *, char *, double))a6)("\r\n", "", v19.n128_f64[0]);
    a6((char *)&v27, (uint64_t *)v28, v19);
    ((void (*)(uint64_t, uint64_t))a6)(a2, a3);
    v26 = "";
    v25 = "\r\n";
  }
  return ((uint64_t (*)(char *, char *))a6)(v25, v26);
}

uint64_t sub_1A58048AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(char *, uint64_t *, __n128))
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  _BYTE v22[37];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (a4 == 1)
    {
      v23 = 13;
      MEMORY[0x1E0C80A78](a1);
      v21 = 11565;
      MEMORY[0x1E0C80A78](v8);
      v10.n128_f64[0] = MEMORY[0x1E0C80A78](v9);
      if ((v11 & 1) != 0)
      {
        if (a1)
          v12 = a2 - a1;
        else
          v12 = 0;
        if ((v12 & 0x8000000000000000) == 0)
          return sub_1A57F0560(0, v12, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1A58065A4);
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      v23 = 10;
      MEMORY[0x1E0C80A78](a1);
      v21 = 11565;
      MEMORY[0x1E0C80A78](v18);
      v10.n128_f64[0] = MEMORY[0x1E0C80A78](v19);
      if ((v20 & 1) != 0)
      {
        if (a1)
          v12 = a2 - a1;
        else
          v12 = 0;
        if ((v12 & 0x8000000000000000) == 0)
          return sub_1A57F0560(0, v12, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1A58065A4);
LABEL_25:
        __break(1u);
      }
    }
    a5(&v23, &v24, v10);
    ((void (*)(__int16 *, _BYTE *))a5)(&v21, v22);
    ((void (*)(uint64_t, uint64_t))a5)(a1, a2);
    ((void (*)(__int16 *, _BYTE *))a5)(&v21, v22);
    return ((uint64_t (*)(char *, uint64_t *))a5)(&v23, &v24);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v21 = 11565;
    MEMORY[0x1E0C80A78](v13);
    v15 = MEMORY[0x1E0C80A78](v14);
    if ((v16 & 1) != 0)
    {
      if (a1)
        v12 = a2 - a1;
      else
        v12 = 0;
      if ((v12 & 0x8000000000000000) == 0)
        return sub_1A57F0560(0, v12, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1A58065A4);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    ((void (*)(const char *, char *, double))a5)("\r\n", "", v15);
    ((void (*)(__int16 *, _BYTE *))a5)(&v21, v22);
    ((void (*)(uint64_t, uint64_t))a5)(a1, a2);
    ((void (*)(__int16 *, _BYTE *))a5)(&v21, v22);
    return ((uint64_t (*)(const char *, char *))a5)("\r\n", "");
  }
}

uint64_t PartReplacement.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v26 = sub_1A594AE60();
  v2 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Message.Data(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for Message(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - v15;
  v17 = type metadata accessor for PartReplacement();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A55034B8(v1, (uint64_t)v19, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1A54E3394((uint64_t)v19, (uint64_t)v13, type metadata accessor for Message);
    sub_1A55034B8((uint64_t)v13, (uint64_t)v7, type metadata accessor for Message.Data);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v21 = v26;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v26);
    v22 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v21);
    v16 = v13;
  }
  else
  {
    sub_1A54E3394((uint64_t)v19, (uint64_t)v16, type metadata accessor for Message);
    sub_1A55034B8((uint64_t)v16, (uint64_t)v10, type metadata accessor for Message.Data);
    if (swift_getEnumCaseMultiPayload() != 1)
      __asm { BR              X10 }
    v23 = v26;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v10, v26);
    v22 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v23);
  }
  sub_1A55034FC((uint64_t)v16, type metadata accessor for Message);
  return v22;
}

void sub_1A5804F18()
{
  unint64_t v0;
  uint64_t v1;

  sub_1A54E46E8(v1, v0);
  if (!__OFSUB__(HIDWORD(v1), (_DWORD)v1))
    JUMPOUT(0x1A5804EE4);
  __break(1u);
  JUMPOUT(0x1A5804F70);
}

void sub_1A5804F38()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  sub_1A54E46E8(v1, v0);
  if (__OFSUB__(v2, v3))
    __break(1u);
  JUMPOUT(0x1A5804EE4);
}

void sub_1A5804F54()
{
  unint64_t v0;
  uint64_t v1;

  sub_1A54E46E8(v1, v0);
  JUMPOUT(0x1A5804EE4);
}

uint64_t Message.streamWithPartsReplaced(input:output:replacements:_:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[16] = a1;
  v8[17] = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  return sub_1A57F5864(v6, sub_1A5805BA0, (uint64_t)v8, a6);
}

uint64_t sub_1A5804FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t (*a8)(char *, char *), uint64_t a9)
{
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t (*v22)(char *, char *);

  v22 = a8;
  v17 = type metadata accessor for ReplacementNode();
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  result = sub_1A58021F0(a1, a2, a3, a4, a7, (uint64_t)v19);
  if (!v9)
  {
    sub_1A58050D8(a5, a6, v19, v22, a9, a1, a2, a3, a4);
    return sub_1A55034FC((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
  }
  return result;
}

uint64_t sub_1A58050D8(unsigned int a1, unsigned int a2, uint64_t *a3, uint64_t (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, char *);
  uint64_t v36;
  void (*v37)(char *, uint64_t *, __n128);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t (*v73)(char *, char *);

  v10 = v9;
  v68 = a7;
  v69 = a8;
  v67 = a6;
  v71 = a2;
  v66 = a1;
  v14 = type metadata accessor for ReplacementNode();
  v58 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v65 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799ED8);
  v70 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v57 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799EE0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (uint64_t *)((char *)&v55 - v22);
  v24 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(int *)(v25 + 28);
  if (!*(_QWORD *)(*(uint64_t *)((char *)a3 + v28) + 16))
    return sub_1A580438C(v71, (uint64_t)a3 + *(int *)(v25 + 24), a4, a5, *((unsigned __int8 *)a3 + 8), a3[2], a3[3], a3[4]);
  v73 = a4;
  v64 = *((unsigned __int8 *)a3 + 56);
  if (v64 == 2)
  {
    v29 = *a3;
    sub_1A57E1CC8();
    swift_allocError();
    *v30 = v29;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    return swift_willThrow();
  }
  v62 = a3[6];
  v63 = (unint64_t *)v20;
  v32 = a3[3];
  v56 = a3[2];
  v33 = a3[5];
  v60 = a9;
  v61 = v33;
  v72 = a3[4];
  LODWORD(v59) = *((unsigned __int8 *)a3 + 8);
  v34 = type metadata accessor for PartReplacement();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v27, 1, 1, v34);
  v35 = v73;
  sub_1A580552C(v71, (uint64_t)v27, v73, a5, v59, v56, v32, v72);
  sub_1A5510284((uint64_t)v27, &qword_1EE798FD8);
  v36 = *(uint64_t *)((char *)a3 + v28);
  v37 = (void (*)(char *, uint64_t *, __n128))v35;
  v38 = *(_QWORD *)(v36 + 16);
  v56 = v36;
  result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v39 = 0;
  v72 = a5;
  v59 = v38;
  while (1)
  {
    if (v39 == v38)
    {
      v40 = 1;
      v39 = v38;
      v41 = v63;
      goto LABEL_10;
    }
    v41 = v63;
    if (v39 >= *(_QWORD *)(v56 + 16))
      break;
    v42 = (uint64_t)&v57[*(int *)(v16 + 48)];
    sub_1A55034B8(v56+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v39, v42, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    v43 = (uint64_t)v41 + *(int *)(v16 + 48);
    *v41 = v39;
    v44 = v42;
    v37 = (void (*)(char *, uint64_t *, __n128))v73;
    sub_1A54E3394(v44, v43, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    v40 = 0;
    ++v39;
LABEL_10:
    v45 = v70;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v41, v40, 1, v16);
    sub_1A5806314((uint64_t)v41, (uint64_t)v23);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v23, 1, v16) == 1)
    {
      v54 = v64 & 1;
      swift_bridgeObjectRelease();
      return sub_1A58048AC(v61, v62, v54, v71, v37);
    }
    v46 = v64 & 1;
    v47 = *v23;
    v48 = v65;
    sub_1A54E3394((uint64_t)v23 + *(int *)(v16 + 48), v65, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    v49 = v47 == 0;
    v50 = v72;
    v51 = v49;
    v52 = v46;
    v37 = (void (*)(char *, uint64_t *, __n128))v73;
    v53 = v71;
    sub_1A580458C(v51, v61, v62, v52, v71, (void (*)(char *, uint64_t *, __n128))v73);
    sub_1A58050D8(v66, v53, v48, v37, v50, v67, v68, v69, v60);
    result = sub_1A55034FC(v48, (uint64_t (*)(_QWORD))type metadata accessor for ReplacementNode);
    v38 = v59;
    if (v10)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A580552C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;

  v16 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A580635C(a2, (uint64_t)v18);
  v19 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19) == 1)
  {
    sub_1A5510284((uint64_t)v18, &qword_1EE798FD8);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    if (EnumCaseMultiPayload != 1)
    {
      v24 = 0;
      return sub_1A580403C(a1, v24, 1, a3, a4, a5, a6, a7, a8);
    }
  }
  v21 = sub_1A57F88A8(a5, a6, a7, a8);
  if (v21)
    v23 = v22 == v21;
  else
    v23 = 1;
  v24 = v23;
  return sub_1A580403C(a1, v24, 1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1A5805684(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];

  v16 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  MEMORY[0x1E0C80A78](v16);
  v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for Message(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = &v28[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A580635C(a2, (uint64_t)v18);
  v22 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v18, 1, v22) == 1)
  {
    result = sub_1A5510284((uint64_t)v18, &qword_1EE798FD8);
    if (a6)
    {
LABEL_3:
      v24 = a7 - a6 - a8;
      if (a7 - a6 >= a8)
      {
        if (a7 - a6 - a8 >= 0)
        {
          v25 = a7;
LABEL_10:
          v27 = v25;
          return sub_1A57EF0A0(a5, a1, 0, a3, a4, 0, v24);
        }
        __break(1u);
      }
      __break(1u);
LABEL_15:
      __break(1u);
      return result;
    }
LABEL_8:
    if (a8 <= 0)
    {
      v25 = 0;
      v24 = 0;
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    result = sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    if (a6)
      goto LABEL_3;
    goto LABEL_8;
  }
  v26 = sub_1A54E3394((uint64_t)v18, (uint64_t)v21, type metadata accessor for Message);
  MEMORY[0x1E0C80A78](v26);
  v28[-64] = a5;
  *(_QWORD *)&v28[-56] = a6;
  *(_QWORD *)&v28[-48] = a7;
  *(_QWORD *)&v28[-40] = a8;
  v28[-32] = a1;
  *(_QWORD *)&v28[-24] = a3;
  v27 = a4;
  sub_1A57F5864((uint64_t)v21, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1A58063A4, (uint64_t)&v28[-80], (uint64_t)v28);
  return sub_1A55034FC((uint64_t)v21, type metadata accessor for Message);
}

uint64_t _s9IMAP2MIME15PartReplacementO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];

  v4 = type metadata accessor for Message(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v9 = &v26[-v8];
  v10 = type metadata accessor for PartReplacement();
  MEMORY[0x1E0C80A78](v10);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  v15 = &v26[-v14];
  v16 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA700);
  MEMORY[0x1E0C80A78](v16);
  v18 = &v26[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = (uint64_t)&v18[*(int *)(v19 + 48)];
  sub_1A55034B8(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
  sub_1A55034B8(a2, v20, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1A55034B8((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v24 = sub_1A54E3394(v20, (uint64_t)v9, type metadata accessor for Message);
      MEMORY[0x1E0C80A78](v24);
      *(_QWORD *)&v26[-16] = v9;
      v22 = sub_1A57F4ED4((void (*)(char *__return_ptr, _QWORD, _QWORD))sub_1A57F84B0, (uint64_t)&v26[-32]);
      sub_1A55034FC((uint64_t)v9, type metadata accessor for Message);
      v23 = (uint64_t)v15;
      goto LABEL_6;
    }
LABEL_8:
    sub_1A55034FC((uint64_t)v15, type metadata accessor for Message);
    sub_1A5510284((uint64_t)v18, &qword_1EE7AA700);
    v22 = 0;
    return v22 & 1;
  }
  sub_1A55034B8((uint64_t)v18, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v15 = v12;
    goto LABEL_8;
  }
  v21 = sub_1A54E3394(v20, (uint64_t)v6, type metadata accessor for Message);
  MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)&v26[-16] = v6;
  v22 = sub_1A57F4ED4((void (*)(char *__return_ptr, _QWORD, _QWORD))sub_1A57F68BC, (uint64_t)&v26[-32]);
  sub_1A55034FC((uint64_t)v6, type metadata accessor for Message);
  v23 = (uint64_t)v12;
LABEL_6:
  sub_1A55034FC(v23, type metadata accessor for Message);
  sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
  return v22 & 1;
}

uint64_t type metadata accessor for PartReplacement()
{
  uint64_t result;

  result = qword_1EE798FC8;
  if (!qword_1EE798FC8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A5805BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A5804FCC(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(unsigned __int8 *)(v4 + 17), *(_QWORD *)(v4 + 24), *(uint64_t (**)(char *, char *))(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for PartReplacement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    v7 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v7 == 1)
        goto LABEL_7;
    }
    else if (v7 == 1)
    {
LABEL_7:
      v9 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v11 = *a2;
    v10 = a2[1];
    sub_1A54E42B4(v11, v10);
    *a1 = v11;
    a1[1] = v10;
    goto LABEL_9;
  }
  v8 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for PartReplacement(uint64_t a1)
{
  uint64_t v2;

  swift_getEnumCaseMultiPayload();
  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_1A54E46E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t *initializeWithCopy for PartReplacement(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for Message.Data(0);
  v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v5 == 1)
      goto LABEL_5;
LABEL_6:
    v8 = *a2;
    v7 = a2[1];
    sub_1A54E42B4(v8, v7);
    *a1 = v8;
    a1[1] = v7;
    goto LABEL_7;
  }
  if (v5 != 1)
    goto LABEL_6;
LABEL_5:
  v6 = sub_1A594AE60();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for PartReplacement(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1A55034FC((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v5 == 1)
        goto LABEL_6;
    }
    else if (v5 == 1)
    {
LABEL_6:
      v6 = sub_1A594AE60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v8 = *a2;
    v7 = a2[1];
    sub_1A54E42B4(v8, v7);
    *a1 = v8;
    a1[1] = v7;
    goto LABEL_8;
  }
  return a1;
}

void *initializeWithTake for PartReplacement(void *a1, const void *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for Message.Data(0);
  v6 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1)
  {
    if (v6 == 1)
      goto LABEL_3;
LABEL_5:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    goto LABEL_6;
  }
  if (v6 != 1)
    goto LABEL_5;
LABEL_3:
  v7 = sub_1A594AE60();
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for PartReplacement(void *a1, const void *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1A55034FC((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PartReplacement);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for Message.Data(0);
    v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v6 == 1)
      {
LABEL_4:
        v7 = sub_1A594AE60();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else if (v6 == 1)
    {
      goto LABEL_4;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1A58062B0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Message.Data(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1A5806314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A580635C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A58063A4(uint64_t a1, uint64_t a2)
{
  return sub_1A58063B8(a1, a2);
}

uint64_t sub_1A58063B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A57EF0A0(*(unsigned __int8 *)(v2 + 16), *(_BYTE *)(v2 + 48), 0, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a1, a2);
}

uint64_t sub_1A5806408(uint64_t a1, uint64_t a2)
{
  return sub_1A580643C(a1, a2);
}

uint64_t sub_1A580641C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1A580643C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = *(_QWORD *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = *(_QWORD *)(v2 + 64);
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
    v5(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  v5(v8, v9);
  v5(a1, a2);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v6, v7);
}

uint64_t sub_1A58064CC(uint64_t a1, uint64_t a2)
{
  return sub_1A58064E0(a1, a2);
}

uint64_t sub_1A58064E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (void (*)(uint64_t, uint64_t))v2[2];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v5(v6, v7);
  v5(v8, v9);
  v5(a1, a2);
  v5(v8, v9);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v6, v7);
}

uint64_t sub_1A5806574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL)
    return sub_1A57E5B50(a1, a2, a3, a4, a5);
  return a1;
}

ValueMetadata *type metadata accessor for MultipartWithoutBoundary()
{
  return &type metadata for MultipartWithoutBoundary;
}

uint64_t sub_1A58065A4()
{
  return sub_1A580641C();
}

uint64_t SparsePartInfo.part.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t SparsePartInfo.part.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

double (*SparsePartInfo.part.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t SparsePartInfo.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A5806604(v1 + 8, a1);
}

uint64_t sub_1A5806604(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  sub_1A57CAD34(*(_QWORD *)a1, v4, v5, v6, v7);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  return a2;
}

uint64_t SparsePartInfo.status.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A580666C(a1, v1 + 8);
}

uint64_t sub_1A580666C(uint64_t a1, uint64_t a2)
{
  assignWithTake for SparsePartInfo.Status(a2, a1);
  return a2;
}

double (*SparsePartInfo.status.modify())(_QWORD)
{
  return nullsub_1;
}

__n128 SparsePartInfo.init(part:status:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  __n128 result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1A58004BC(a2, (uint64_t)v8);
  v5 = v9;
  result = (__n128)v8[0];
  v7 = v8[1];
  *(_QWORD *)a3 = a1;
  *(__n128 *)(a3 + 8) = result;
  *(_OWORD *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 40) = v5;
  return result;
}

uint64_t sub_1A5806704(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  __int128 v6[2];

  sub_1A58004BC(a1, (uint64_t)v5);
  sub_1A58004BC(a2, (uint64_t)v6);
  _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v5, v6);
  return v3 & 1;
}

uint64_t static SparsePartInfo.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v6[2];
  __int128 v7[2];

  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(_QWORD *)a1) & 1) != 0)
  {
    sub_1A58004BC((__int128 *)(a1 + 8), (uint64_t)v7);
    sub_1A58004BC((__int128 *)(a2 + 8), (uint64_t)v6);
    _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v7, v6);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1A58067B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  __int128 v6[2];
  __int128 v7[2];

  v3 = *a1;
  sub_1A58004BC((__int128 *)(a1 + 1), (uint64_t)v6);
  sub_1A58004BC((__int128 *)(a2 + 8), (uint64_t)v7);
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v3) & 1) != 0)
    _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v6, v7);
  else
    v4 = 0;
  return v4 & 1;
}

BOOL SparsePartInfo.Status.isEmpty.getter()
{
  __int128 *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_1A58004BC(v0, (uint64_t)&v2);
  return v6 && (v6 != 3 || v4 | v5 | v2 | v3 && (v2 != 1 || v4 | v5 | v3));
}

char *Message.findPartsMissingData(cache:)(char *a1)
{
  uint64_t v1;

  return sub_1A57F7E40(v1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5806FB8, a1);
}

uint64_t sub_1A58068C4(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE v59[24];
  _BYTE v60[48];
  __n128 v61[2];
  uint64_t v62;
  _OWORD v63[2];
  __int128 v64;
  _OWORD v65[3];
  _BYTE v66[16];
  char v67;
  _BYTE v68[40];
  __n128 v69[2];
  unsigned __int8 v70;

  sub_1A55032A0((uint64_t)(a1 + 12), (uint64_t)v60, &qword_1EE799008);
  sub_1A55032A0((uint64_t)v60, (uint64_t)v63, &qword_1EE799008);
  if (*((_QWORD *)&v64 + 1))
  {
    v65[0] = v63[0];
    v65[1] = v63[1];
    v65[2] = v64;
    sub_1A57CACB8((uint64_t)v65, (uint64_t)v68);
    sub_1A57CACB8((uint64_t)v68, (uint64_t)v69);
    if (v70 <= 0xFu)
    {
      sub_1A57E1F38(v69, v61);
      v10 = *a1;
      v11 = *a2;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v11 = sub_1A5811D04(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        *a2 = v11;
      }
      v14 = *((_QWORD *)v11 + 2);
      v13 = *((_QWORD *)v11 + 3);
      if (v14 >= v13 >> 1)
      {
        v11 = sub_1A5811D04((char *)(v13 > 1), v14 + 1, 1, v11);
        *a2 = v11;
      }
      *((_QWORD *)v11 + 2) = v14 + 1;
      v15 = &v11[48 * v14];
      *((_QWORD *)v15 + 4) = v10;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
LABEL_23:
      v35 = 3;
LABEL_29:
      v15[72] = v35;
      return 2;
    }
  }
  v16 = a1[8];
  if (!v16
    || (v17 = a1[5], v18 = a1[6], v19 = a1[7], sub_1A55032A0((uint64_t)v60, (uint64_t)v61, &qword_1EE799008), !v62)
    || (v20 = v19 & 1, (sub_1A57C9DF0(v17, v18, v20, v16, (uint64_t)v60) & 1) == 0))
  {
    sub_1A55032A0((uint64_t)(a1 + 21), (uint64_t)v59, &qword_1EE798FB8);
    sub_1A55032A0((uint64_t)v59, (uint64_t)v66, &qword_1EE798FB8);
    if (v67 != 2)
    {
      v36 = sub_1A57DC7CC();
      v38 = v37 & 1;
      v39 = *a1;
      v40 = *a2;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v41 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v40;
      if ((v41 & 1) == 0)
      {
        v40 = sub_1A5811D04(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
        *a2 = v40;
      }
      v43 = *((_QWORD *)v40 + 2);
      v42 = *((_QWORD *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        v40 = sub_1A5811D04((char *)(v42 > 1), v43 + 1, 1, v40);
        *a2 = v40;
      }
      *((_QWORD *)v40 + 2) = v43 + 1;
      v15 = &v40[48 * v43];
      *((_QWORD *)v15 + 4) = v39;
      *((_QWORD *)v15 + 5) = v36;
      *((_QWORD *)v15 + 7) = 0;
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 6) = v38;
      v35 = 1;
      goto LABEL_29;
    }
    v30 = *a1;
    v31 = *a2;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v32 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v31;
    if ((v32 & 1) == 0)
    {
      v31 = sub_1A5811D04(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
      *a2 = v31;
    }
    v34 = *((_QWORD *)v31 + 2);
    v33 = *((_QWORD *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      v31 = sub_1A5811D04((char *)(v33 > 1), v34 + 1, 1, v31);
      *a2 = v31;
    }
    *((_QWORD *)v31 + 2) = v34 + 1;
    v15 = &v31[48 * v34];
    *((_QWORD *)v15 + 4) = v30;
    *((_QWORD *)v15 + 5) = 1;
    *((_QWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 6) = 0;
    goto LABEL_23;
  }
  v21 = sub_1A57D49F8(a7, v17, v18, v20 != 0, v16);
  v23 = v22;
  sub_1A55032A0((uint64_t)(a1 + 21), (uint64_t)v59, &qword_1EE798FB8);
  sub_1A55032A0((uint64_t)v59, (uint64_t)v66, &qword_1EE798FB8);
  if (v67 != 2)
  {
    v45 = sub_1A57DC7CC();
    v47 = v46 & 1;
    v48 = *a1;
    v49 = *a2;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v50 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v49;
    if ((v50 & 1) == 0)
    {
      v49 = sub_1A5811D04(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
      *a2 = v49;
    }
    v51 = *((_QWORD *)v49 + 2);
    v52 = *((_QWORD *)v49 + 3);
    v53 = v51 + 1;
    if (v51 >= v52 >> 1)
    {
      v58 = v47;
      v54 = v51 + 1;
      v55 = v49;
      v56 = *((_QWORD *)v49 + 2);
      v57 = sub_1A5811D04((char *)(v52 > 1), v51 + 1, 1, v55);
      v51 = v56;
      v53 = v54;
      v47 = v58;
      v49 = v57;
      *a2 = v57;
    }
    *((_QWORD *)v49 + 2) = v53;
    v15 = &v49[48 * v51];
    *((_QWORD *)v15 + 4) = v48;
    *((_QWORD *)v15 + 5) = v45;
    *((_QWORD *)v15 + 6) = v47;
    *((_QWORD *)v15 + 7) = v21;
    *((_QWORD *)v15 + 8) = v23;
    v35 = 2;
    goto LABEL_29;
  }
  v24 = *a1;
  v25 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v25;
  if ((v26 & 1) == 0)
  {
    v25 = sub_1A5811D04(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    *a2 = v25;
  }
  v28 = *((_QWORD *)v25 + 2);
  v27 = *((_QWORD *)v25 + 3);
  if (v28 >= v27 >> 1)
  {
    v25 = sub_1A5811D04((char *)(v27 > 1), v28 + 1, 1, v25);
    *a2 = v25;
  }
  *((_QWORD *)v25 + 2) = v28 + 1;
  v29 = &v25[48 * v28];
  *((_QWORD *)v29 + 4) = v24;
  *((_QWORD *)v29 + 5) = v21;
  *((_QWORD *)v29 + 7) = 0;
  *((_QWORD *)v29 + 8) = 0;
  *((_QWORD *)v29 + 6) = v23;
  v29[72] = 0;
  return 2;
}

void _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(__int128 *a1, __int128 *a2)
{
  _BYTE v3[8];
  _QWORD v4[4];

  sub_1A58004BC(a2, (uint64_t)v3);
  sub_1A58004BC(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t sub_1A5806DF4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = v8;
  sub_1A58004BC(v2, (uint64_t)&v5);
  if (!v7)
  {
    if (v3)
    {
      if (v6 && (v0 == v5 && v3 == v6 || (sub_1A594CD38() & 1) != 0))
        return 1;
    }
    else
    {
      if (!v6)
      {
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        return 1;
      }
      sub_1A58073E4(v1);
    }
  }
  return 0;
}

uint64_t sub_1A5806FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  _BYTE v7[16];
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = MEMORY[0x1E0DEE9D8];
  v8 = &v13;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  result = sub_1A57DC054(3, 0, 0, (uint64_t (*)(_OWORD *))sub_1A57CACF4, (uint64_t)v7, (uint64_t)nullsub_1, 0, a1, a2, a3, a4);
  *a5 = v13;
  return result;
}

uint64_t destroy for SparsePartInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1A57CAD14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for SparsePartInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A57CAD34(v3, v4, v5, v6, v7);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for SparsePartInfo(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_1A57CAD34(v4, v5, v6, v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v12 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  sub_1A57CAD14(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy41_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SparsePartInfo(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_1A57CAD14(v5, v6, v7, v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for SparsePartInfo()
{
  return &type metadata for SparsePartInfo;
}

uint64_t destroy for SparsePartInfo.Status(uint64_t a1)
{
  return sub_1A57CAD14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1A57CAD34(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1A57CAD34(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1A57CAD14(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1A57CAD14(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SparsePartInfo.Status(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SparsePartInfo.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A58073A0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1A58073B8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SparsePartInfo.Status()
{
  return &type metadata for SparsePartInfo.Status;
}

uint64_t sub_1A58073E4(uint64_t a1)
{
  sub_1A57CAD14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_1A5807418(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;

  v2 = v1[2];
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = (uint64_t *)result;
    LODWORD(v4) = 0;
    v5 = 0;
    v6 = 0;
    v7 = *v1;
    while (1)
    {
      while (1)
      {
        v24 = v4;
        v25 = v5;
        if ((_BYTE)v5)
          break;
        if (v6 == v2)
          goto LABEL_40;
        v10 = *(char *)(v7 + v6);
        v11 = *(unsigned __int8 *)(v7 + v6++);
        if (v10 < 0)
        {
          LODWORD(v4) = v4 & 0xFFFFFF00 | v11;
          v5 = 8;
          goto LABEL_8;
        }
LABEL_3:
        LODWORD(v4) = v24;
        v5 = v25;
        v8 = v3[1];
        v22 = *v3;
        v23 = v8;
        result = sub_1A594B52C();
        v9 = v23;
        *v3 = v22;
        v3[1] = v9;
      }
      if ((v4 & 0x80) == 0)
      {
        sub_1A5807968();
        result = (uint64_t)sub_1A570358C();
        v20 = *(_BYTE *)(v19 + 4);
        if (!v20)
          goto LABEL_42;
        *(_DWORD *)v19 >>= 8;
        *(_BYTE *)(v19 + 4) = v20 - 8;
        ((void (*)(uint64_t *, _QWORD))result)(&v22, 0);
        goto LABEL_3;
      }
LABEL_8:
      v12 = v6;
      if (v6 == v2)
      {
        v13 = v5;
        v6 = v2;
        goto LABEL_24;
      }
      ++v6;
      LODWORD(v4) = (*(unsigned __int8 *)(v7 + v12) << v5) | ((-255 << v5) - 1) & v4;
      v13 = v5 + 8;
      if ((v5 + 8) <= 0x1Fu)
      {
        if (v6 == v2)
        {
          v6 = v2;
          if ((_BYTE)v5 == 0xF8)
          {
LABEL_40:
            *(_QWORD *)(v21 + 16) = 0;
            return result;
          }
        }
        else
        {
          v14 = v12 + 2;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (*(unsigned __int8 *)(v7 + v6) << v13);
          v13 = v5 + 16;
          if ((v5 + 8) > 0x17u)
            goto LABEL_23;
          v6 = v2;
          if (v14 == v2)
            goto LABEL_24;
          v15 = *(unsigned __int8 *)(v7 + v14);
          v14 = v12 + 3;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (v15 << v13);
          v13 = v5 + 24;
          if ((v5 + 16) > 0x17u)
            goto LABEL_23;
          v6 = v2;
          if (v14 == v2)
            goto LABEL_24;
          v16 = *(unsigned __int8 *)(v7 + v14);
          v14 = v12 + 4;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (v16 << v13);
          v13 = v5 + 32;
          if (v5 < 0xE8u)
          {
LABEL_23:
            v6 = v14;
          }
          else
          {
            v6 = v2;
            if (v14 != v2)
            {
              v17 = v12 + 5;
              LODWORD(v4) = ((-255 << v13) - 1) & v4 | (*(unsigned __int8 *)(v7 + v14) << v13);
              v13 = v5 + 40;
              if ((v5 + 32) >= 0x18u)
                v6 = v17;
              else
                v6 = v2;
            }
          }
        }
      }
LABEL_24:
      if ((v4 & 0xC0E0) == 0x80C0)
      {
        if ((v4 & 0x1E) != 0)
        {
          v18 = 16;
LABEL_27:
          v24 = (unint64_t)v4 >> v18;
          v25 = v13 - v18;
          goto LABEL_3;
        }
      }
      else if ((v4 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v4 & 0x200F) != 0 && (v4 & 0x200F) != 0x200D)
        {
          v18 = 24;
          goto LABEL_27;
        }
      }
      else if ((v4 & 0xC0C0C0F8) == 0x808080F0 && (v4 & 0x3007) != 0 && __rev16(v4 & 0x3007) <= 0x400)
      {
        v18 = 32;
        goto LABEL_27;
      }
      result = sub_1A594CF48();
      v4 = (unint64_t)v4 >> ((8 * result) & 0x38);
      v5 = v13 - 8 * result;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1A58077F4(uint64_t isStackAllocationSafe, int64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (isStackAllocationSafe < 0)
    __break(1u);
  v12 = isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v16 = (char *)&v16 - v13;
    v17 = v12;
    v18 = 0;
    sub_1A57FD16C((int64_t)&v16, a2, a3, a4, a5, a6);
    if (v6)
      swift_willThrow();
  }
  else
  {
    v14 = swift_slowAlloc();
    v16 = (char *)v14;
    v17 = v12;
    v18 = 0;
    sub_1A57FD16C((int64_t)&v16, a2, a3, a4, a5, a6);
    MEMORY[0x1A85B1964](v14, -1, -1);
  }
  return swift_release();
}

unint64_t sub_1A5807968()
{
  unint64_t result;

  result = qword_1EE796330;
  if (!qword_1EE796330)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEE460], MEMORY[0x1E0DEE458]);
    atomic_store(result, (unint64_t *)&qword_1EE796330);
  }
  return result;
}

uint64_t sub_1A58079AC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = a1 + 4;
  swift_beginAccess();
  v5 = a1[4];
  if (!v5)
  {
    swift_retain();
    result = sub_1A5808AE8((uint64_t)"euc-cn", (uint64_t)a1);
    if (!result)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v5 = result;
    *v4 = result;
  }
  swift_endAccess();
  if (v5 == a2)
    goto LABEL_20;
  swift_beginAccess();
  v7 = a1[5];
  if (!v7)
  {
    swift_retain();
    result = sub_1A5808AE8((uint64_t)"gb-2312-80", (uint64_t)a1);
    if (!result)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v7 = result;
    a1[5] = result;
  }
  swift_endAccess();
  if (v7 == a2)
    goto LABEL_20;
  swift_beginAccess();
  v8 = a1[6];
  if (!v8)
  {
    swift_retain();
    result = sub_1A5808AE8((uint64_t)"gbk", (uint64_t)a1);
    if (!result)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v8 = result;
    a1[6] = result;
  }
  swift_endAccess();
  if (v8 == a2)
    goto LABEL_20;
  swift_beginAccess();
  v9 = a1[8];
  if (v9)
  {
LABEL_16:
    swift_endAccess();
    if (v9 != a2)
      return a2;
    v10 = a1 + 9;
    swift_beginAccess();
    a2 = a1[9];
    if (a2)
      goto LABEL_23;
    swift_retain();
    result = sub_1A5808AE8((uint64_t)"big5-hkscs", (uint64_t)a1);
    if (result)
    {
LABEL_22:
      a2 = result;
      *v10 = result;
      goto LABEL_23;
    }
    __break(1u);
LABEL_20:
    v10 = a1 + 7;
    swift_beginAccess();
    a2 = a1[7];
    if (!a2)
    {
      swift_retain();
      result = sub_1A5808AE8((uint64_t)"gb-18030", (uint64_t)a1);
      if (result)
        goto LABEL_22;
      goto LABEL_26;
    }
LABEL_23:
    swift_endAccess();
    return a2;
  }
  swift_retain();
  result = sub_1A5808AE8((uint64_t)"big5", (uint64_t)a1);
  if (result)
  {
    v9 = result;
    a1[8] = result;
    goto LABEL_16;
  }
LABEL_29:
  __break(1u);
  return result;
}

char *sub_1A5807BD0@<X0>(char *result@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, unsigned __int8 a6@<W5>, unsigned __int8 *a7@<X6>, _BYTE *a8@<X8>)
{
  unsigned int v9;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a5 == 74)
    v9 = 23;
  else
    v9 = byte_1A59D9145[a5];
  result = (char *)CompactEncDet_detectEncoding(a2, a3, result, a4 & 1, v9, a6, a7);
  *a8 = (_BYTE)result;
  return result;
}

uint64_t sub_1A5807C58(char *a1, char *a2)
{
  return (byte_1A59D9145[*a1] == byte_1A59D9145[*a2]) & (a1[1] ^ a2[1] ^ 1u);
}

uint64_t sub_1A5807C90(char a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = byte_1A59D9145[a1];
  result = CompactEncDet_EncodingName(v1);
  if (result)
  {
    sub_1A594B610();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    result = CompactEncDet_MimeEncodingName(v1);
    if (result)
    {
      sub_1A594B610();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      sub_1A594B5F8();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5807D98()
{
  char *v0;

  return sub_1A5807C90(*v0);
}

uint64_t sub_1A5807DB4()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C6261696C6572;
  else
    return 0x6261696C65726E75;
}

BOOL sub_1A5807DF4(char *a1, char *a2)
{
  return byte_1A59D9145[*a1] == byte_1A59D9145[*a2];
}

uint64_t sub_1A5807E18()
{
  sub_1A594CE64();
  sub_1A594CE94();
  return sub_1A594CED0();
}

uint64_t sub_1A5807E64()
{
  return sub_1A594CE94();
}

uint64_t sub_1A5807E98()
{
  sub_1A594CE64();
  sub_1A594CE94();
  return sub_1A594CED0();
}

uint64_t sub_1A5807EE0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1A5807FA0(*a1);
  *a2 = result;
  return result;
}

void sub_1A5807F08(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1A59D9145[*v1];
}

uint64_t sub_1A5807F20()
{
  char *v0;
  uint64_t result;

  result = CompactEncDet_EncodingName(byte_1A59D9145[*v0]);
  if (result)
    return sub_1A594B610();
  __break(1u);
  return result;
}

uint64_t sub_1A5807F4C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1A5808840(*a1);
  *a2 = result;
  return result;
}

void sub_1A5807F74(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1A5807F80()
{
  unsigned __int8 *v0;
  uint64_t result;

  result = CompactEncDet_LanguageName(*v0);
  if (result)
    return sub_1A594B610();
  __break(1u);
  return result;
}

uint64_t sub_1A5807FA0(unsigned __int8 a1)
{
  if (a1 > 0x4Au)
    return 74;
  else
    return byte_1A59D90FA[(char)a1];
}

uint64_t sub_1A5807FC8(int8x8_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, unsigned __int8 a7)
{
  uint64_t v7;
  int8x8_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  int v21;
  unsigned int v22;
  _QWORD v24[3];
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  if (a1)
    v7 = a2 - (_QWORD)a1;
  else
    v7 = 0;
  if (a5)
  {
    v10 = (int8x8_t *)MEMORY[0x1E0C80A78](a1);
    if ((v15 & 0x1000000000000000) != 0 || !(a5 & 0x2000000000000000 | a4 & 0x1000000000000000))
    {
      type metadata accessor for CompactEncDet_Encoding(0);
      sub_1A594C6FC();
      v17 = v25;
      goto LABEL_23;
    }
    if ((a5 & 0x2000000000000000) == 0)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v16 = (char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
        sub_1A58082E4(v16, v24);
        v17 = v24[0];
        goto LABEL_23;
      }
LABEL_33:
      v16 = (char *)sub_1A594C7D4();
      goto LABEL_10;
    }
    v24[0] = a4;
    v24[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    if (v11 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v11 <= 0x7FFFFFFF)
    {
      if (v13 == 74)
        v19 = 23;
      else
        v19 = byte_1A59D9145[v13];
      v17 = CompactEncDet_detectEncoding(v10, v11, (char *)v24, v12 & 1, v19, v14, &v26);
      goto LABEL_23;
    }
    __break(1u);
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a6 == 74)
    v18 = 23;
  else
    v18 = byte_1A59D9145[a6];
  v17 = CompactEncDet_detectEncoding(a1, v7, 0, a3 & 1, v18, a7, &v26);
LABEL_23:
  v20 = sub_1A5807FA0(v17);
  if (v26)
    v21 = 256;
  else
    v21 = 0;
  v22 = v21 & 0xFFFFFF00 | v20;
  if (v20 == 74)
    return 512;
  else
    return v22;
}

uint64_t sub_1A58081E8(unsigned __int8 *a1, unsigned __int8 *a2, char a3, int8x8_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t result;
  uint64_t v20;

  if ((a3 & 1) != 0)
  {
    v15 = 0;
    v17 = 0;
    v14 = 74;
  }
  else
  {
    v13 = sub_1A57F859C((uint64_t)a1, (uint64_t)a2);
    v14 = sub_1A5807FA0(v13);
    v15 = sub_1A57D25E8(a1, a2, 0);
    v17 = v16;
  }
  v18 = sub_1A5807FC8(a4, a5, a6 & 1, v15, v17, v14, 0x1Au);
  swift_bridgeObjectRelease();
  if ((v18 & 0xFF00) == 0x200)
    return 0;
  result = CompactEncDet_MimeEncodingName(byte_1A59D9145[(char)v18]);
  if (result)
  {
    v20 = result;
    swift_retain();
    result = sub_1A5808AE8(v20, (uint64_t)a7);
    if (result)
      return sub_1A58079AC(a7, result);
  }
  return result;
}

char *sub_1A58082E4@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5807BD0(a1, *(int8x8_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_BYTE *)(v2 + 33), *(_BYTE *)(v2 + 34), *(unsigned __int8 **)(v2 + 40), a2);
}

_WORD *__swift_memcpy2_1_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for CharacterSetDetection.DetectedEncoding(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5808364 + 4 * byte_1A59D8E15[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1A5808398 + 4 * asc_1A59D8E10[v4]))();
}

uint64_t sub_1A5808398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1A58083A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1A58083A8);
  return result;
}

uint64_t sub_1A58083B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1A58083BCLL);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_1A58083C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1A58083C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.DetectedEncoding()
{
  return &type metadata for CharacterSetDetection.DetectedEncoding;
}

uint64_t storeEnumTagSinglePayload for CharacterSetDetection.DetectedEncoding.Reliability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5808430 + 4 * byte_1A59D8E1F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A5808464 + 4 * byte_1A59D8E1A[v4]))();
}

uint64_t sub_1A5808464(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A580846C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5808474);
  return result;
}

uint64_t sub_1A5808480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5808488);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A580848C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5808494(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.DetectedEncoding.Reliability()
{
  return &type metadata for CharacterSetDetection.DetectedEncoding.Reliability;
}

uint64_t getEnumTagSinglePayload for CharacterSetDetection.Encoding(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xB7)
    goto LABEL_17;
  if (a2 + 73 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 73) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 73;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 73;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 73;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x4A;
  v8 = v6 - 74;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacterSetDetection.Encoding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 73 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 73) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xB7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xB6)
    return ((uint64_t (*)(void))((char *)&loc_1A580858C + 4 * byte_1A59D8E29[v4]))();
  *a1 = a2 + 73;
  return ((uint64_t (*)(void))((char *)sub_1A58085C0 + 4 * byte_1A59D8E24[v4]))();
}

uint64_t sub_1A58085C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58085C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A58085D0);
  return result;
}

uint64_t sub_1A58085DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A58085E4);
  *(_BYTE *)result = a2 + 73;
  return result;
}

uint64_t sub_1A58085E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58085F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.Encoding()
{
  return &type metadata for CharacterSetDetection.Encoding;
}

uint64_t getEnumTagSinglePayload for CharacterSetDetection.Language(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x60)
    goto LABEL_17;
  if (a2 + 160 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 160) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 160;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 160;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 160;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA1;
  v8 = v6 - 161;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacterSetDetection.Language(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 160 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 160) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x60)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x5F)
    return ((uint64_t (*)(void))((char *)&loc_1A58086E8 + 4 * byte_1A59D8E33[v4]))();
  *a1 = a2 - 96;
  return ((uint64_t (*)(void))((char *)sub_1A580871C + 4 * byte_1A59D8E2E[v4]))();
}

uint64_t sub_1A580871C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5808724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A580872CLL);
  return result;
}

uint64_t sub_1A5808738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5808740);
  *(_BYTE *)result = a2 - 96;
  return result;
}

uint64_t sub_1A5808744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A580874C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.Language()
{
  return &type metadata for CharacterSetDetection.Language;
}

unint64_t sub_1A580876C()
{
  unint64_t result;

  result = qword_1EE7AA708;
  if (!qword_1EE7AA708)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D8FA0, &type metadata for CharacterSetDetection.Language);
    atomic_store(result, (unint64_t *)&qword_1EE7AA708);
  }
  return result;
}

unint64_t sub_1A58087B4()
{
  unint64_t result;

  result = qword_1EE7AA710;
  if (!qword_1EE7AA710)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D9040, &type metadata for CharacterSetDetection.Encoding);
    atomic_store(result, (unint64_t *)&qword_1EE7AA710);
  }
  return result;
}

unint64_t sub_1A58087FC()
{
  unint64_t result;

  result = qword_1EE7AA718;
  if (!qword_1EE7AA718)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D9068, &type metadata for CharacterSetDetection.DetectedEncoding.Reliability);
    atomic_store(result, (unint64_t *)&qword_1EE7AA718);
  }
  return result;
}

uint64_t sub_1A5808840(uint64_t result)
{
  unsigned int v1;

  if ((char)result >= -95)
    v1 = -95;
  else
    v1 = (char)result;
  if ((result & 0x80u) == 0)
    return result;
  else
    return v1;
}

ValueMetadata *type metadata accessor for CharacterSetDetection()
{
  return &type metadata for CharacterSetDetection;
}

uint64_t getEnumTagSinglePayload for ICUCanonicalConverterName(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUCanonicalConverterName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICUCanonicalConverterName()
{
  return &type metadata for ICUCanonicalConverterName;
}

uint64_t sub_1A58088FC()
{
  int v0;
  uint64_t result;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v0 = ucnv_countAvailable();
  result = (uint64_t)sub_1A58110E4(0, v0 & ~(v0 >> 31), 0, MEMORY[0x1E0DEE9D8]);
  if ((v0 & 0x80000000) == 0)
  {
    v2 = result;
    if (!v0)
      return v2;
    v3 = 0;
    while (v0 != v3)
    {
      result = ucnv_getAvailableName();
      if (result)
      {
        v4 = result;
        v6 = *(_QWORD *)(v2 + 16);
        v5 = *(_QWORD *)(v2 + 24);
        if (v6 >= v5 >> 1)
        {
          result = (uint64_t)sub_1A58110E4((char *)(v5 > 1), v6 + 1, 1, (char *)v2);
          v2 = result;
        }
        *(_QWORD *)(v2 + 16) = v6 + 1;
        *(_QWORD *)(v2 + 8 * v6 + 32) = v4;
      }
      if (v0 == ++v3)
        return v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1A58089C8()
{
  unint64_t result;

  result = qword_1EE7AA720;
  if (!qword_1EE7AA720)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D91AC, &type metadata for ICUCanonicalConverterName);
    atomic_store(result, (unint64_t *)&qword_1EE7AA720);
  }
  return result;
}

uint64_t sub_1A5808A0C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = sub_1A594B478();
  MEMORY[0x1E0C80A78](v0);
  sub_1A594B46C();
  result = sub_1A594B448();
  if (!v2)
    return 0;
  return result;
}

uint64_t sub_1A5808A84(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5808AE8(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalName;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  CanonicalName = ucnv_getCanonicalName();
  if (CanonicalName)
  {
    v4 = CanonicalName;
    if (*(_QWORD *)(a2 + 16))
    {
      v5 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v5 = sub_1A58088FC();
      *(_QWORD *)(a2 + 16) = v5;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
    }
    v6 = sub_1A5808A84(v4, v5);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      goto LABEL_36;
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(v7 + 16);
      if (v9)
      {
LABEL_8:
        v10 = *(_QWORD *)(v8 + 32);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        if (!ucnv_compareNames())
        {
          v4 = v10;
LABEL_35:
          swift_bridgeObjectRelease_n();
LABEL_36:
          swift_release();
          return v4;
        }
        if (v9 != 1)
        {
          v11 = 5;
          while (1)
          {
            v12 = v11 - 3;
            if (__OFADD__(v11 - 4, 1))
              __break(1u);
            v13 = *(_QWORD *)(v8 + 8 * v11);
            if (!ucnv_compareNames())
              break;
            ++v11;
            if (v12 == v9)
              goto LABEL_14;
          }
          v4 = v13;
          goto LABEL_35;
        }
LABEL_14:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      v8 = sub_1A58088FC();
      *(_QWORD *)(a2 + 16) = v8;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
        goto LABEL_8;
    }
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
LABEL_17:
    swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
  {
    v15 = sub_1A58088FC();
    *(_QWORD *)(a2 + 16) = v15;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
      goto LABEL_20;
LABEL_31:
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
    goto LABEL_31;
LABEL_20:
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v17 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(v15 + 32 + 8 * v17);
    v18 = ucnv_countAliases();
    if (!v18)
      goto LABEL_22;
    v19 = v18;
    v20 = v18 + 1;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799380);
    v21 = (_QWORD *)sub_1A594BA18();
    v21[2] = v20;
    v21[4] = 0;
    bzero(v21 + 5, 8 * v19);
    ucnv_getAliases();
    v22 = v21[2];
    if (v22)
      break;
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    if (++v17 == v16)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  v23 = 0;
  while (!v21[v23 + 4] || ucnv_compareNames())
  {
    if (v22 == ++v23)
      goto LABEL_21;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_1A5808E2C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v16;
  _DWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17[1] = 0;
  if (!unorm2_getNFCInstance())
  {
    sub_1A57E5BC8();
    swift_allocError();
    *(_DWORD *)v14 = 0;
    *(_BYTE *)(v14 + 4) = 0;
    swift_willThrow();
    return a3;
  }
  v9 = sub_1A58094C0(a1, a2, a3, a4);
  if ((uint64_t)(v9 + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((2 * v9) & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if ((uint64_t)(2 * v9 + 0x4000000000000000) < 0)
    goto LABEL_16;
  v10 = 4 * v9;
  isStackAllocationSafe = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v10 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = sub_1A580A5E4((_DWORD *)((char *)v17 - v12), a1, a2, a3, a4);
    if (v4)
      swift_willThrow();
    else
      a3 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = (_WORD *)swift_slowAlloc();
    a3 = sub_1A580A5E4(v16, a1, a2, a3, a4);
    MEMORY[0x1A85B1964](v16, -1, -1);
    swift_bridgeObjectRelease();
  }
  return a3;
}

uint64_t sub_1A5809038@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = sub_1A5809274((uint64_t)a1, a2);
  if (v3)
    return result;
  v8 = result;
  if (result >= a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (2 * a2 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  if (2 * a2 + 0x4000000000000000 < 0)
    goto LABEL_17;
  if (4 * a2 <= 1024 || (result = swift_stdlib_isStackAllocationSafe(), (_DWORD)result))
  {
    MEMORY[0x1E0C80A78](result);
    v20 = sub_1A5809348(a1, a2, (char *)&v19 - v9, 2 * a2, v8);
    v21 = v10;
    v22 = v11;
    v23 = v12;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA728);
    sub_1A58097BC();
    sub_1A5809808();
    result = sub_1A594B4CC();
    if (v13)
    {
      *a3 = result;
      a3[1] = v13;
      return result;
    }
    __break(1u);
    goto LABEL_19;
  }
  v14 = (void *)swift_slowAlloc();
  v20 = sub_1A5809348(a1, a2, v14, 2 * a2, v8);
  v21 = v15;
  v22 = v16;
  v23 = v17;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA728);
  sub_1A58097BC();
  sub_1A5809808();
  result = sub_1A594B4CC();
  if (!v18)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a3 = result;
  a3[1] = v18;
  return MEMORY[0x1A85B1964](v14, -1, -1);
}

uint64_t sub_1A5809274(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (a2 > 0x7FFFFFFF)
    goto LABEL_5;
  return (int)unorm2_spanQuickCheckYes();
}

uint64_t sub_1A5809348(void *__src, uint64_t a2, void *__dst, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  if (a5 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a5 && a4)
  {
    if (a5 >= a4)
      v8 = a4;
    else
      v8 = a5;
    memcpy(__dst, __src, 2 * v8);
  }
  if (a2 < a5)
    goto LABEL_16;
  if ((unint64_t)a5 >> 31)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 - a5 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if ((unorm2_normalizeSecondAndAppend() & 0x80000000) != 0)
    goto LABEL_21;
  return 0;
}

unint64_t sub_1A58094C0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_1A57AE510(a1, a3, a4);
  result = sub_1A57AE510(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_1A594B4FC();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_1A594C7D4();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_1A594B508();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_1A594C7D4();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_1A58096D0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v2 = sub_1A594B718();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = sub_1A5808E2C(v2, v4, v6, v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRelease();
    return v9;
  }
  return a1;
}

unint64_t sub_1A58097BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE7AA730;
  if (!qword_1EE7AA730)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0(&qword_1EE7AA728);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEDE48], v1);
    atomic_store(result, (unint64_t *)&qword_1EE7AA730);
  }
  return result;
}

unint64_t sub_1A5809808()
{
  unint64_t result;

  result = qword_1EE79B518;
  if (!qword_1EE79B518)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEE4F0], MEMORY[0x1E0DEE4E8]);
    atomic_store(result, (unint64_t *)&qword_1EE79B518);
  }
  return result;
}

uint64_t sub_1A580984C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v9 = *a1;
  ucnv_setFallback();
  if (a2)
    v10 = a3;
  else
    v10 = 0;
  result = sub_1A58098CC(a2, v10, 1, v9, (uint64_t)a1, 1);
  if (!v4)
  {
    v12 = a1[3];
    *a4 = a1[2];
    a4[1] = v12;
    return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return result;
}

uint64_t sub_1A58098CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t MinCharSize;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
    v7 = a2 - a1;
  else
    v7 = 0;
  if (v7 < 0)
    goto LABEL_31;
  v12 = 0;
  v23 = 0;
  v24 = v7;
  v25 = a1;
  v26 = a2;
  while (1)
  {
    if (v25)
      v15 = v26 - v25;
    else
      v15 = 0;
    if (v12 < 0 || v15 < v12)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    if (v7 < 0 || v15 < v7)
      goto LABEL_26;
    MinCharSize = ucnv_getMinCharSize();
    if (!(_DWORD)MinCharSize)
      goto LABEL_27;
    v17 = (v7 - v12) / (int)MinCharSize;
    v18 = __OFADD__(v17, 3);
    v19 = v17 + 3;
    if (v18)
      goto LABEL_28;
    if (v19 + 0x4000000000000000 < 0)
      goto LABEL_29;
    v20 = 2 * v19;
    if (2 * v19 < 0)
      goto LABEL_30;
    if (v20 < 1025)
      break;
    MinCharSize = swift_stdlib_isStackAllocationSafe();
    if ((MinCharSize & 1) != 0)
      break;
    v21 = swift_slowAlloc();
    sub_1A5809AB4(&v23, v21, v21 + v20, a3 & 1, a4, a5, a6 & 1);
    result = MEMORY[0x1A85B1964](v21, -1, -1);
    if (v6)
      return result;
LABEL_7:
    v12 = v23;
    v7 = v24;
    if (v23 == v24)
      return result;
  }
  MEMORY[0x1E0C80A78](MinCharSize);
  result = sub_1A5809AB4(&v23, (uint64_t)&v22 - v13, (uint64_t)&v22 + v20 - v13, a3 & 1, a4, a5, a6 & 1);
  if (!v6)
    goto LABEL_7;
  return swift_willThrow();
}

uint64_t sub_1A5809AB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v12 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  if (v13)
    v15 = v13 + *a1;
  else
    v15 = 0;
  ucnv_toUnicode();
  if (v15)
  {
    v16 = v14 - v13;
    if (!v13)
      v16 = 0;
    if (v12 < 0 || v16 < v12)
    {
      __break(1u);
    }
    else if (v11 >= v12)
    {
      *a1 = v12;
      a1[1] = v11;
      a1[2] = v13;
      a1[3] = v14;
      goto LABEL_11;
    }
    __break(1u);
    __break(1u);
    goto LABEL_21;
  }
LABEL_11:
  if (a2)
  {
    if (!a2)
    {
      v17 = 0;
LABEL_16:
      result = sub_1A5809CAC(a2, v17, a6, a7 & 1);
      if (v7)
        return result;
      return 1;
    }
    if (a2 - a2 >= -1)
    {
      v17 = (a2 - a2) / 2;
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
  }
  return 1;
}

uint64_t sub_1A5809CAC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;

  v5 = (unsigned __int16 *)result;
  if (*(_BYTE *)(a3 + 13) != 1 && (a4 & 1) != 0 && a2 >= 201)
  {
    v24 = result;
    v25 = a2;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE799388);
    sub_1A54E2E30(&qword_1EE799390, &qword_1EE799388, MEMORY[0x1E0DEA5E8]);
    sub_1A5809808();
    result = sub_1A594B4CC();
    if (!v6)
      goto LABEL_43;
    sub_1A594B5F8();
    return swift_bridgeObjectRelease();
  }
  *(_BYTE *)(a3 + 13) = 1;
  if (result)
    v7 = (unsigned __int16 *)(result + 2 * a2);
  else
    v7 = 0;
  while (1)
  {
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
    v13 = *(unsigned __int8 *)(a3 + 12);
    v26 = v12;
    v27 = v13;
    if (v13)
      break;
    if (!v5 || v5 == v7)
    {
      v15 = v12;
LABEL_41:
      *(_DWORD *)(a3 + 8) = v15;
      *(_BYTE *)(a3 + 12) = 0;
      return result;
    }
    result = *v5;
    v14 = v5 + 1;
    if ((*v5 & 0xF800) != 0xD800)
    {
      v8 = 0;
      ++v5;
      goto LABEL_10;
    }
    LODWORD(v12) = v12 & 0xFFFF0000 | result;
    v13 = 16;
    ++v5;
    if (v14 == v7)
    {
LABEL_28:
      v15 = v12;
      goto LABEL_29;
    }
LABEL_16:
    v5 = v14 + 1;
    v15 = ((-65535 << v13) - 1) & v12 | (*v14 << v13);
    v16 = v13 + 16;
    if ((v13 + 16) < 0x20u)
    {
      if (v5 == v7)
        goto LABEL_21;
      v5 = v14 + 2;
      v15 = ((-65535 << v16) - 1) & v15 | (v14[1] << v16);
      v16 = v13 + 32;
      if (v13 >= 0xE0)
      {
        if (v5 == v7
          || (v15 = ((-65535 << v13) - 1) & v15 | (v14[2] << v13), v16 = v13 + 48, (v13 + 48) < 0x20u))
        {
LABEL_21:
          LOBYTE(v13) = v16;
          v5 = v7;
          if (!v16)
            goto LABEL_41;
          goto LABEL_29;
        }
        v5 = v14 + 3;
      }
    }
    LOBYTE(v13) = v16;
LABEL_29:
    v17 = v15 & 0xFC00FC00;
    if ((v15 & 0xFC00FC00) == 0xDC00D800)
      v18 = 32;
    else
      v18 = 16;
    v8 = v13 - v18;
    v19 = v17 == -603924480;
    if (v17 == -603924480)
      v20 = 32;
    else
      v20 = 16;
    v12 = (unint64_t)v15 >> v20;
    if (!v19)
    {
      *(_DWORD *)(a3 + 8) = v12;
      *(_BYTE *)(a3 + 12) = v8;
      sub_1A57E5BC8();
      swift_allocError();
      *(_DWORD *)v23 = 0;
      *(_BYTE *)(v23 + 4) = 1;
      return swift_willThrow();
    }
LABEL_10:
    *(_DWORD *)(a3 + 8) = v12;
    *(_BYTE *)(a3 + 12) = v8;
    v9 = *(_QWORD *)(a3 + 24);
    v24 = *(_QWORD *)(a3 + 16);
    v25 = v9;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0xE000000000000000;
    sub_1A594B52C();
    v11 = v24;
    v10 = v25;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v10;
    result = swift_bridgeObjectRelease();
  }
  if ((v12 & 0xF800) == 0xD800)
  {
    if (!v5)
      goto LABEL_28;
    v14 = v5;
    if (v5 == v7)
      goto LABEL_28;
    goto LABEL_16;
  }
  sub_1A580A5A0();
  result = (uint64_t)sub_1A570358C();
  v22 = *(_BYTE *)(v21 + 4);
  if (v22)
  {
    *(_DWORD *)v21 = *(unsigned __int16 *)(v21 + 2);
    *(_BYTE *)(v21 + 4) = v22 - 16;
    ((void (*)(uint64_t *, _QWORD))result)(&v24, 0);
    LODWORD(v12) = v26;
    v8 = v27;
    goto LABEL_10;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1A580A010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1A85ADD40](a1, a2, AssociatedTypeWitness);
  result = sub_1A594B538();
  *a3 = result;
  a3[1] = v8;
  return result;
}

_QWORD *sub_1A580A084(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

unint64_t sub_1A580A0D0(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = result & 0xC;
  v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11)
      result = sub_1A55796A4(result, a4, a5);
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if ((result & 1) != 0)
    {
      return result;
    }
    return result & 0xC | sub_1A57A7884(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

_QWORD *sub_1A580A19C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *(*a3)(_QWORD *__return_ptr, uint64_t, _QWORD *)@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];
  _QWORD *v18;

  v18 = a4;
  v7 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = sub_1A56F12C4(0, *a2, v10, v9);
  result = (_QWORD *)sub_1A56F12C4(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1)
    v14 = a1 + v11;
  else
    v14 = 0;
  result = a3(v17, v14, v13);
  if (!v4)
  {
    v15 = v17[1];
    v16 = v18;
    *v18 = v17[0];
    v16[1] = v15;
  }
  return result;
}

uint64_t sub_1A580A260(unsigned __int8 *a1, unsigned __int8 *a2, char a3, uint64_t a4, char a5, uint64_t *a6, int8x8_t *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;

  if (!a7
    || (v11 = a8 - (_QWORD)a7, (int8x8_t *)a8 == a7)
    || (v13 = sub_1A58081E8(a1, a2, a3 & 1, a7, a8, a5 & 1, a6)) == 0)
  {
    swift_release();
    return 0;
  }
  v14 = v13;
  swift_beginAccess();
  v15 = a6[3];
  if (v15)
  {
LABEL_8:
    v17 = swift_endAccess();
    if (v15 == v14)
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79B400);
      v26[3] = v18;
      v26[4] = sub_1A54E2E30(&qword_1EE79B3F8, (uint64_t *)&unk_1EE79B400, MEMORY[0x1E0DEDE48]);
      v19 = (_QWORD *)swift_allocObject();
      v26[0] = v19;
      v19[2] = 0;
      v19[3] = v11;
      v19[4] = a7;
      v19[5] = a8;
      v20 = __swift_project_boxed_opaque_existential_1_0(v26, v18);
      MEMORY[0x1E0C80A78](v20);
      v21 = v19[4];
      v22 = v19[5];
      v23 = *((_OWORD *)v19 + 1);
      v24 = v21;
      v25 = v22;
      sub_1A580A19C(v21, (uint64_t *)&v23, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1A580A4F4, &v27);
      v12 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      swift_release();
    }
    else
    {
      MEMORY[0x1E0C80A78](v17);
      v12 = sub_1A57D3608(v14, (uint64_t)a6, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1A580A4C8);
      swift_release();
    }
    return v12;
  }
  swift_retain();
  result = sub_1A5808AE8((uint64_t)"utf-8", (uint64_t)a6);
  if (result)
  {
    v15 = result;
    a6[3] = result;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A580A4C8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1A580984C(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1A580A4E4()
{
  return swift_deallocObject();
}

uint64_t sub_1A580A4F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A580A55C();
  return sub_1A580A010(a1, a2, a3);
}

unint64_t sub_1A580A55C()
{
  unint64_t result;

  result = qword_1EE79B508;
  if (!qword_1EE79B508)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEE480], MEMORY[0x1E0DEE478]);
    atomic_store(result, (unint64_t *)&qword_1EE79B508);
  }
  return result;
}

unint64_t sub_1A580A5A0()
{
  unint64_t result;

  result = qword_1EE7AA738;
  if (!qword_1EE7AA738)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEE4E0], MEMORY[0x1E0DEE4D8]);
    atomic_store(result, (unint64_t *)&qword_1EE7AA738);
  }
  return result;
}

uint64_t sub_1A580A5E4(_WORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;

  v31 = a1;
  v6 = a3 >> 14;
  if (a3 >> 14 != a2 >> 14)
  {
    v24 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v25 = a5 & 0xFFFFFFFFFFFFFFLL;
    v11 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v11) = 1;
    v12 = 4 << v11;
    if ((a5 & 0x2000000000000000) != 0)
      v13 = HIBYTE(a5) & 0xF;
    else
      v13 = a4 & 0xFFFFFFFFFFFFLL;
    v26 = v13;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v14 = 0;
    v15 = a2;
    while (1)
    {
      sub_1A580A0D0(v15, a2, a3, a4, a5);
      if ((a5 & 0x1000000000000000) != 0)
      {
        result = sub_1A594C714();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v28 = a4;
          v29 = v25;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          sub_1A594C7D4();
        }
        result = sub_1A594C7E0();
      }
      v17 = result;
      if ((v15 & 0xC) != v12 && (v15 & 1) != 0)
        break;
      if ((v15 & 0xC) == v12)
      {
        result = sub_1A55796A4(v15, a4, a5);
        v15 = result;
      }
      if (v26 <= v15 >> 16)
        goto LABEL_44;
      if ((v15 & 1) != 0)
        goto LABEL_24;
      v15 = v15 & 0xC | sub_1A57A7884(v15, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_25:
        v18 = v15 >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          v28 = a4;
          v29 = v25;
          v20 = *((unsigned __int8 *)&v28 + v18);
        }
        else
        {
          v19 = v24;
          if ((a4 & 0x1000000000000000) == 0)
            v19 = sub_1A594C7D4();
          v20 = *(unsigned __int8 *)(v19 + v18);
        }
        v21 = (char)v20;
        v22 = __clz(v20 ^ 0xFF) - 24;
        if (v21 >= 0)
          LOBYTE(v22) = 1;
        v15 = ((v18 + v22) << 16) | 5;
        goto LABEL_35;
      }
LABEL_34:
      v15 = sub_1A594B4FC();
LABEL_35:
      if (v17 >= 0x10000)
      {
        v17 = ((v17 + 983040) >> 10) & 0x3FF | ((v17 & 0x3FF) << 16) | 0xDC00D800;
        v31[v14 + 1] = HIWORD(v17);
        v23 = 2;
      }
      else
      {
        v23 = 1;
      }
      v7 = v14 + v23;
      v31[v14] = v17;
      v14 += v23;
      if (v6 == v15 >> 14)
      {
        result = swift_bridgeObjectRelease();
        if ((v7 & 0x8000000000000000) == 0)
          goto LABEL_41;
LABEL_45:
        __break(1u);
        return result;
      }
    }
    if (v26 <= v15 >> 16)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_24:
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_25;
    goto LABEL_34;
  }
  v7 = 0;
LABEL_41:
  result = sub_1A5809038(v31, v7, &v30);
  if (!v5)
    return v30;
  return result;
}

uint64_t sub_1A580A88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  char v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char v16;
  char v17;
  uint64_t v18;
  int8x8_t *v19;
  _BYTE v21[40];
  _BYTE v22[32];
  char v23;
  _BYTE v24[24];
  unsigned __int8 *v25[2];
  char v26;

  sub_1A57CACB8(a1, (uint64_t)v21);
  sub_1A57CACB8((uint64_t)v21, (uint64_t)v22);
  if ((v23 & 0xF0) != 0x50)
    goto LABEL_8;
  v23 &= 0xFu;
  sub_1A580A9E0((uint64_t)v22, (uint64_t)v24);
  sub_1A580A9E0((uint64_t)v24, (uint64_t)v25);
  if ((v26 & 1) != 0)
    goto LABEL_8;
  if (sub_1A57E2C20(v25[0], v25[1]) == 1819112552 && v10 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v11 = 1;
    goto LABEL_9;
  }
  v12 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    v11 = 1;
  else
LABEL_8:
    v11 = 0;
LABEL_9:
  v13 = (unsigned __int8 *)sub_1A57D99F4();
  v15 = v14;
  v17 = v16;
  sub_1A57D8E08(a1);
  if (a4)
    v18 = a4 + a3;
  else
    v18 = 0;
  if (a4)
    v19 = (int8x8_t *)(a4 + a2);
  else
    v19 = 0;
  return sub_1A580A260(v13, v15, v17 & 1, 0, v11, a5, v19, v18);
}

uint64_t sub_1A580A9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE799400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_memcpy5_4_0(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ICUError()
{
  return &type metadata for ICUError;
}

ValueMetadata *type metadata accessor for UnsafeConverter()
{
  return &type metadata for UnsafeConverter;
}

uint64_t sub_1A580AA5C(uint64_t a1, uint64_t a2)
{
  return sub_1A580AD6C(a1, a2, (uint64_t (*)(_QWORD))sub_1A580AA68);
}

uint64_t sub_1A580AA68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (result == a2)
  {
LABEL_2:
    if (result == a2)
      return result;
    v4 = a4 - a3;
    if (!a3)
      v4 = 0;
    while (1)
    {
      v5 = a2 - 1;
      if (__OFSUB__(a2, 1))
        break;
      if (v5 >= a2 || v5 < result || v5 < 0 || v5 >= v4)
        goto LABEL_28;
      v6 = *(unsigned __int8 *)(a3 + v5);
      v7 = v6 > 0x20;
      v8 = (1 << v6) & 0x100002600;
      if (!v7 && v8 != 0)
      {
        --a2;
        if (result != v5)
          continue;
      }
      return result;
    }
  }
  else
  {
    if (a2 <= result)
      v10 = result;
    else
      v10 = a2;
    while (v10 != result)
    {
      v11 = *(unsigned __int8 *)(a3 + result);
      v7 = v11 > 0x20;
      v12 = (1 << v11) & 0x100002600;
      if (v7 || v12 == 0)
        goto LABEL_2;
      if (a2 == ++result)
        return a2;
    }
    __break(1u);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A580AB34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (result == a2)
  {
    v4 = 0;
    return v4 | ((result == a2) << 8);
  }
  v5 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = a4 - a3;
    if (!a3)
      v6 = 0;
    if (v5 < a2 && v5 >= result && (v5 & 0x8000000000000000) == 0 && v5 < v6)
    {
      v4 = *(unsigned __int8 *)(a3 + v5);
      return v4 | ((result == a2) << 8);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1A580AB98(unint64_t result, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;

  if ((a3 & 1) != 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a6)
    v7 = a7 - a6;
  else
    v7 = 0;
  if (a4 < 0 || v7 < a4)
    goto LABEL_18;
  if ((a5 & 0x8000000000000000) != 0 || v7 < (uint64_t)a5)
    goto LABEL_19;
  if ((uint64_t)(a5 - a4) < a2)
    return 0;
  v8 = a4 + a2;
  if (__OFADD__(a4, a2))
    goto LABEL_20;
  if ((v8 & 0x8000000000000000) != 0 || v7 < (uint64_t)v8)
    goto LABEL_21;
  if (v8 < a4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= a5)
    return sub_1A580AC1C(result, a2, a3, a4, a4 + a2, a6, a7, v8);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t sub_1A580AC1C@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a3 & 1) == 0)
  {
    if (result)
    {
      sub_1A580ADB8((unsigned __int8 *)result, a2, a4, a5, a6, a7, &v17);
      return v17;
    }
    __break(1u);
    goto LABEL_13;
  }
  a8 = HIDWORD(result);
  if (HIDWORD(result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >> 11 == 27)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  LODWORD(a8) = WORD1(result);
  if (WORD1(result) > 0x10u)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_15:
    v10 = (result & 0x3F) << 8;
    v11 = (v10 | (result >> 6)) + 33217;
    v12 = (v10 | (result >> 6) & 0x3F) << 8;
    v13 = (((v12 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    v14 = (v12 | (result >> 12)) + 8487393;
    if ((_DWORD)a8)
      v8 = v13;
    else
      v8 = v14;
    if (result < 0x800)
      v8 = v11;
    goto LABEL_10;
  }
  if (result > 0xFF)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = (result + 1);
LABEL_10:
  v9 = __clz(v8);
  v16 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v9 >> 3)) & 7)));
  sub_1A580ADB8((unsigned __int8 *)&v16, 4 - (v9 >> 3), a4, a5, a6, a7, &v15);
  return v15;
}

uint64_t sub_1A580AD60(uint64_t a1, uint64_t a2)
{
  return sub_1A580AD6C(a1, a2, (uint64_t (*)(_QWORD))sub_1A580AE6C);
}

uint64_t sub_1A580AD6C(uint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
    v3 = a2 - result;
  else
    v3 = 0;
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = a3(0);
    if (v5)
      return v5 + v4;
    else
      return 0;
  }
  return result;
}

unsigned __int8 *sub_1A580ADB8@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v7 = &result[a2];
  if (!result)
    v7 = 0;
  v8 = a6 - a5;
  if (!a5)
    v8 = 0;
  v9 = a3;
  while (1)
  {
    if (v9 == a4)
    {
      v10 = 0;
      v11 = a4;
      if (!result)
        goto LABEL_17;
      goto LABEL_14;
    }
    if (v9 < a3 || v9 >= a4)
      break;
    if (v9 < 0 || v9 >= v8)
      goto LABEL_25;
    v11 = v9 + 1;
    v10 = *(unsigned __int8 *)(a5 + v9) | 0x20;
    if (!result)
    {
LABEL_17:
      v13 = 0;
      v12 = 1;
      if (v9 == a4)
        goto LABEL_23;
      goto LABEL_18;
    }
LABEL_14:
    if (result == v7)
      goto LABEL_17;
    v12 = 0;
    v14 = *result++;
    v13 = v14;
    if (v9 == a4)
      goto LABEL_23;
LABEL_18:
    if (v10 == v13)
      v15 = v12;
    else
      v15 = 1;
    v9 = v11;
    if (v15 == 1)
    {
      LOBYTE(v12) = 0;
LABEL_23:
      *a7 = v12;
      return result;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A580AE6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;

  if (result == a2)
  {
LABEL_2:
    if (result == a2)
      return result;
    v4 = a4 - a3;
    if (!a3)
      v4 = 0;
    while (1)
    {
      v5 = a2 - 1;
      if (__OFSUB__(a2, 1))
        break;
      if (v5 >= a2 || v5 < result || v5 < 0 || v5 >= v4)
        goto LABEL_30;
      v6 = *(unsigned __int8 *)(a3 + v5);
      if (v6 == 32 || v6 == 9)
      {
        --a2;
        if (result != v5)
          continue;
      }
      return result;
    }
  }
  else
  {
    if (a2 <= result)
      v8 = result;
    else
      v8 = a2;
    while (v8 != result)
    {
      v9 = *(unsigned __int8 *)(a3 + result);
      if (v9 != 32 && v9 != 9)
        goto LABEL_2;
      if (a2 == ++result)
        return a2;
    }
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A580AF10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  if (a3)
    v7 = a4 - a3;
  else
    v7 = 0;
  if (v7 < 0)
    goto LABEL_47;
  v8 = result;
  v9 = 0;
  if (!v7)
  {
LABEL_35:
    if (v8)
      v18 = v9;
    else
      v18 = 0;
    if (v8)
      v19 = v8 + v9;
    else
      v19 = 0;
    return sub_1A57FF270(0, v18, v8, v19, a5, a6, a7);
  }
  v10 = 0;
  v11 = a3 + 2;
  while (1)
  {
    if (v7 < v10 + 1)
      goto LABEL_44;
    v12 = *(unsigned __int8 *)(a3 + v10);
    if (v12 == 37)
      break;
    ++v10;
LABEL_32:
    *(_BYTE *)(v8 + v9) = v12;
    if (__OFADD__(v9++, 1))
      goto LABEL_45;
    if (v10 == v7)
      goto LABEL_34;
  }
  if (v10 + 1 == v7)
    goto LABEL_34;
  if (v7 < v10 + 2)
    goto LABEL_46;
  if (v10 + 2 == v7)
  {
LABEL_34:
    if (v9 < 0)
      goto LABEL_48;
    goto LABEL_35;
  }
  v13 = v10 + 4;
  while (1)
  {
    v10 = v13 - 1;
    if (v7 < v13 - 1)
      break;
    v14 = *(_BYTE *)(v11 + v13 - 5);
    v15 = *(_BYTE *)(v11 + v13 - 4);
    if ((v14 - 58) > 0xF5u)
    {
      result = 208;
    }
    else if ((v14 - 71) > 0xF9u)
    {
      result = 201;
    }
    else
    {
      result = (v14 - 103);
      if (result <= 0xF9)
        goto LABEL_23;
      result = 169;
    }
    if ((v15 - 58) > 0xF5u)
    {
      v16 = -48;
LABEL_31:
      LOBYTE(v12) = (v15 + v16) | (16 * (v14 + result));
      goto LABEL_32;
    }
    if ((v15 - 71) > 0xF9u)
    {
      v16 = -55;
      goto LABEL_31;
    }
    if ((v15 - 103) >= 0xFAu)
    {
      v16 = -87;
      goto LABEL_31;
    }
LABEL_23:
    if (v13 - v7 == 1)
      goto LABEL_34;
    if (v7 < v13)
      goto LABEL_43;
    v13 += 2;
    if (v13 - v7 == 2)
      goto LABEL_34;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1A580B0B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A594B538();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A580B0E4(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;

  if (result)
    v4 = a2 - result;
  else
    v4 = 0;
  if (v4 < 0)
    goto LABEL_121;
  if (v4)
  {
    v6 = result;
    v7 = 0;
    do
    {
      if (v7 >= v4)
      {
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        return result;
      }
      v8 = *(unsigned __int8 *)(v6 + v7);
      v9 = v8 == 10 || v8 == 13;
      v10 = v7;
      if (!v9)
      {
        v10 = v4;
        if (v7 + 1 != v4)
        {
          if (v7 + 1 >= v4)
            goto LABEL_128;
          v26 = *(unsigned __int8 *)(v6 + v7 + 1);
          v27 = v26 == 10 || v26 == 13;
          v10 = v7 + 1;
          if (v27)
            goto LABEL_13;
          v28 = v7 + 2;
          while (v4 != v28)
          {
            v29 = *(unsigned __int8 *)(v6 + v28++);
            if (v29 == 10 || v29 == 13)
            {
              v10 = v28 - 1;
              goto LABEL_71;
            }
          }
          v10 = v4;
        }
LABEL_71:
        if (v10 < v7)
        {
          __break(1u);
          goto LABEL_111;
        }
      }
LABEL_13:
      if (v4 < v10)
        goto LABEL_117;
      result = v10 - v7;
      if (v10 == v7)
      {
        v11 = 0;
      }
      else
      {
        v12 = v10 - 1;
        if (__OFSUB__(v10, 1))
          goto LABEL_122;
        if (v12 >= v10 || v12 < v7 || v12 < 0 || v12 >= v4)
          goto LABEL_123;
        v13 = *(unsigned __int8 *)(v6 + v12);
        v11 = v13 == 32 || v13 == 9;
      }
      if (v7 < 0)
        goto LABEL_118;
      if (v10 < 0)
        goto LABEL_119;
      MEMORY[0x1A85AD968](result);
      result = 0;
      v15 = v7;
      if (v10 != v7)
      {
        while (v15 >= v7 && v15 < v10)
        {
          v23 = *(unsigned __int8 *)(v6 + v15);
          v24 = v15 + 1;
          if ((v23 - 1) <= 0x7D)
          {
            if (v23 != 92 || (a4 & 1) == 0)
              goto LABEL_59;
            if (v24 == v10)
              goto LABEL_30;
            if (v24 >= v10)
              break;
            v25 = *(unsigned __int8 *)(v6 + v24);
            v24 = v15 + 2;
            if ((v25 - 1) <= 0x7D)
            {
LABEL_59:
              v35 = result;
              sub_1A594B52C();
              result = v35;
            }
          }
          v15 = v24;
          if (v24 == v10)
            goto LABEL_30;
        }
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
LABEL_30:
      sub_1A594B5F8();
      result = swift_bridgeObjectRelease();
      v16 = v4;
      if (v10 == v4)
        goto LABEL_45;
      if (v10 >= v4)
        goto LABEL_124;
      v17 = *(unsigned __int8 *)(v6 + v10);
      if (v17 == 10 || v17 == 13)
      {
        v16 = v4;
        if (v10 + 1 != v4)
        {
          v16 = v10 + 1;
          while (v16 < v4)
          {
            v18 = *(unsigned __int8 *)(v6 + v16);
            if (v18 != 13 && v18 != 10)
              goto LABEL_44;
            if (v4 == ++v16)
            {
              v16 = v4;
              goto LABEL_44;
            }
          }
          goto LABEL_113;
        }
LABEL_44:
        if (v16 < v10)
          goto LABEL_120;
LABEL_45:
        if (v11)
          goto LABEL_46;
        goto LABEL_87;
      }
      v16 = v10;
      if (v11)
      {
LABEL_46:
        if (v16 == v4)
          return result;
        if (v16 >= v4)
          goto LABEL_126;
        v20 = *(unsigned __int8 *)(v6 + v16);
        if (v20 == 9 || v20 == 32)
        {
          v7 = v16 + 1;
          if (v16 + 1 == v4)
            return result;
          while (v7 < v4)
          {
            v21 = *(unsigned __int8 *)(v6 + v7);
            if (v21 != 32 && v21 != 9)
            {
              if (v7 >= v16)
                goto LABEL_106;
              goto LABEL_114;
            }
            if (v4 == ++v7)
              return result;
          }
          goto LABEL_112;
        }
        v7 = v16;
        continue;
      }
LABEL_87:
      v31 = v4;
      if (v16 != v4)
      {
        if (v16 >= v4)
          goto LABEL_127;
        v32 = *(unsigned __int8 *)(v6 + v16);
        if (v32 == 9 || (v31 = v16, v32 == 32))
        {
          v31 = v4;
          if (v16 + 1 != v4)
          {
            v31 = v16 + 1;
            while (v31 < v4)
            {
              v33 = *(unsigned __int8 *)(v6 + v31);
              if (v33 != 32 && v33 != 9)
              {
                if (v31 < v16)
                  goto LABEL_125;
                goto LABEL_105;
              }
              if (v4 == ++v31)
              {
                v31 = v4;
                goto LABEL_105;
              }
            }
            goto LABEL_115;
          }
        }
      }
LABEL_105:
      v7 = v31 - (v16 < v31);
LABEL_106:
      ;
    }
    while (v7 != v4);
  }
  return result;
}

uint64_t sub_1A580B478(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, char a6, uint64_t a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  if (a2)
    v9 = a3 - a2;
  else
    v9 = 0;
  if (v9 < 0)
    goto LABEL_43;
  v13 = 0;
  if (!v9)
  {
LABEL_35:
    v23 = a6 & 1;
    v24 = result + v13;
    if (!result)
    {
      v13 = 0;
      v24 = 0;
    }
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = v13;
    v27 = result;
    v28 = v24;
    v29 = 0;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_retain();
    v25 = sub_1A57FFBB8(&v26, a4, a5, v23, a8, a9);
    swift_release();
    swift_bridgeObjectRelease();
    return v25 & 1;
  }
  v14 = 0;
  v15 = a2 + 2;
  while (1)
  {
    if (v9 < v14 + 1)
      goto LABEL_40;
    v16 = *(unsigned __int8 *)(a2 + v14);
    if (v16 == 37)
      break;
    ++v14;
LABEL_32:
    *(_BYTE *)(result + v13) = v16;
    if (__OFADD__(v13++, 1))
      goto LABEL_41;
    if (v14 == v9)
      goto LABEL_34;
  }
  if (v14 + 1 == v9)
    goto LABEL_34;
  if (v9 < v14 + 2)
    goto LABEL_42;
  if (v14 + 2 == v9)
  {
LABEL_34:
    if (v13 < 0)
      goto LABEL_44;
    goto LABEL_35;
  }
  v17 = v14 + 4;
  while (1)
  {
    v14 = v17 - 1;
    if (v9 < v17 - 1)
      break;
    v18 = *(_BYTE *)(v15 + v17 - 5);
    v19 = *(_BYTE *)(v15 + v17 - 4);
    if ((v18 - 58) > 0xF5u)
    {
      v20 = -48;
    }
    else if ((v18 - 71) > 0xF9u)
    {
      v20 = -55;
    }
    else
    {
      if ((v18 - 103) <= 0xF9u)
        goto LABEL_23;
      v20 = -87;
    }
    if ((v19 - 58) > 0xF5u)
    {
      v21 = -48;
LABEL_31:
      LOBYTE(v16) = (v19 + v21) | (16 * (v18 + v20));
      goto LABEL_32;
    }
    if ((v19 - 71) > 0xF9u)
    {
      v21 = -55;
      goto LABEL_31;
    }
    if ((v19 - 103) >= 0xFAu)
    {
      v21 = -87;
      goto LABEL_31;
    }
LABEL_23:
    if (v17 - v9 == 1)
      goto LABEL_34;
    if (v9 < v17)
      goto LABEL_39;
    v17 += 2;
    if (v17 - v9 == 2)
      goto LABEL_34;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1A580B698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  double (*v27)(_QWORD);
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38;

  v8 = sub_1A594CF78();
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v38 = 0xE000000000000000;
  v11 = sub_1A56F12C4(a1, a2, a3, a4);
  result = MEMORY[0x1A85AD968](v11);
  v13 = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  v16 = a4 - a3;
  if (!a3)
    v16 = 0;
  v32 = v16;
  v29 = 8 * a2;
  v17 = a1;
  while (1)
  {
    while (1)
    {
      v18 = v13;
      v35 = v14;
      v36 = v15;
      if (!(_BYTE)v15)
        break;
      if ((v14 & 0x80) == 0)
      {
        sub_1A5807968();
        v27 = sub_1A570358C();
        sub_1A579E094(0);
        ((void (*)(uint64_t *, _QWORD))v27)(&v33, 0);
        goto LABEL_53;
      }
LABEL_13:
      if (a1 == a2)
      {
        a1 = a2;
        goto LABEL_49;
      }
      if (a1 < v17 || a1 >= a2)
        goto LABEL_71;
      if (a1 < 0 || a1 >= v32)
        goto LABEL_72;
      v20 = a1 + 1;
      LODWORD(v14) = (*(unsigned __int8 *)(a3 + a1) << v15) | ((-255 << v15) - 1) & v14;
      v21 = v15 + 8;
      if ((v15 + 8) > 0x1Fu)
      {
LABEL_47:
        v15 = v21;
LABEL_48:
        a1 = v20;
        goto LABEL_49;
      }
      if (v20 != a2)
      {
        if (a1 < v17 || v20 >= a2)
          goto LABEL_71;
        if (a1 < 0 || v20 >= v32)
          goto LABEL_72;
        v22 = *(unsigned __int8 *)(a3 + v20);
        v20 = a1 + 2;
        LODWORD(v14) = (v22 << v21) | ((-255 << v21) - 1) & v14;
        v21 = v15 + 16;
        if ((v15 + 16) > 0x1Fu)
          goto LABEL_47;
        if (v20 != a2)
        {
          if (a1 < v17 || v20 >= a2)
            goto LABEL_71;
          if (a1 < 0 || v20 >= v32)
            goto LABEL_72;
          v23 = *(unsigned __int8 *)(a3 + v20);
          v20 = a1 + 3;
          LODWORD(v14) = (v23 << v21) | ((-255 << v21) - 1) & v14;
          v21 = v15 + 24;
          if ((v15 + 24) > 0x1Fu)
            goto LABEL_47;
          if (v20 != a2)
          {
            if (a1 < v17 || v20 >= a2)
              goto LABEL_71;
            if (a1 < 0 || v20 >= v32)
              goto LABEL_72;
            v24 = *(unsigned __int8 *)(a3 + v20);
            v20 = a1 + 4;
            LODWORD(v14) = (v24 << v21) | ((-255 << v21) - 1) & v14;
            if (v15 < 0xE0u)
            {
              v15 += 32;
              goto LABEL_48;
            }
            if (v20 != a2)
            {
              if (a1 < v17 || v20 >= a2)
                goto LABEL_71;
              if (a1 < 0 || v20 >= v32)
                goto LABEL_72;
              LODWORD(v14) = (*(unsigned __int8 *)(a3 + v20) << v15) | ((-255 << v15) - 1) & v14;
              if ((v15 + 40) >= 0x20u)
              {
                a1 += 5;
                v15 += 40;
                goto LABEL_49;
              }
            }
          }
        }
      }
      v15 = v29 + v15 - 8 * a1;
      a1 = a2;
      if (!(_BYTE)v15)
        return v37;
LABEL_49:
      if ((v14 & 0xC0E0) == 0x80C0)
      {
        if ((v14 & 0x1E) != 0)
        {
          v25 = 16;
LABEL_52:
          v35 = (unint64_t)v14 >> v25;
          v36 = v15 - v25;
          goto LABEL_53;
        }
      }
      else if ((v14 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v14 & 0x200F) != 0 && (v14 & 0x200F) != 0x200D)
        {
          v25 = 24;
          goto LABEL_52;
        }
      }
      else if ((v14 & 0xC0C0C0F8) == 0x808080F0 && (v14 & 0x3007) != 0 && __rev16(v14 & 0x3007) <= 0x400)
      {
        v25 = 32;
        goto LABEL_52;
      }
      result = sub_1A594CF48();
      v13 = 0;
      v14 = (unint64_t)v14 >> ((8 * result) & 0x38);
      v15 -= 8 * result;
    }
    if (a1 == a2)
      return v37;
    if (a1 < v17 || a1 >= a2)
      break;
    if (a1 < 0 || a1 >= v32)
      goto LABEL_70;
    v19 = *(unsigned __int8 *)(a3 + a1++);
    if ((v19 & 0x80) != 0)
    {
      LODWORD(v14) = v14 & 0xFFFFFF00 | v19;
      v15 = 8;
      goto LABEL_13;
    }
LABEL_53:
    LODWORD(v14) = v35;
    v15 = v36;
    sub_1A594CF84();
    v26 = sub_1A594CF6C();
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v10, v31);
    if ((v26 & 1) != 0)
    {
      v13 = 1;
      if ((v18 & 1) == 0)
      {
        result = sub_1A594B5F8();
        v13 = 1;
      }
    }
    else
    {
      v33 = v37;
      v34 = v38;
      result = sub_1A594B52C();
      v13 = 0;
      v37 = v33;
      v38 = v34;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

_QWORD *sub_1A580BBF8(_QWORD *result, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
    v4 = a2 - (_QWORD)result;
  else
    v4 = 0;
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = sub_1A580AA68(0, v4, (uint64_t)result, a2);
    if ((a3 & 1) != 0)
    {
      return (_QWORD *)sub_1A580B698(v6, v7, v8, v9);
    }
    else
    {
      MEMORY[0x1E0C80A78](v6);
      return sub_1A580A084(v10, v11, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A57DCF58);
    }
  }
  return result;
}

uint64_t sub_1A580BCC0()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (unint64_t)v0[1] >> 14;
  if (v1 == (unint64_t)*v0 >> 14)
    return 0;
  v2 = sub_1A594C3A8();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v3 = sub_1A594C378();
  result = swift_bridgeObjectRelease();
  if (v1 >= v3 >> 14)
  {
    v5 = sub_1A594C3B4();
    v7 = v6;
    v9 = v8;
    v11 = v10;
    swift_bridgeObjectRelease();
    *v0 = v5;
    v0[1] = v7;
    v0[2] = v9;
    v0[3] = v11;
    return v2;
  }
  __break(1u);
  return result;
}

void sub_1A580BDB4()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v2 = *v0;
  v1 = v0[1];
  if ((v1 ^ *v0) >= 0x4000)
  {
    v4 = v0[2];
    v3 = v0[3];
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v5 = sub_1A594C3A8();
    v7 = v6;
    swift_bridgeObjectRelease();
    if (v5 == 91 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        return;
    }
    v33 = v4;
    v34 = v1;
    v35 = v3;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A580BCC0();
    swift_bridgeObjectRelease();
    v10 = v0[1] >> 14;
    if (v10 == *v0 >> 14)
      goto LABEL_32;
    v11 = sub_1A594C3A8();
    v13 = v12;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v14 = sub_1A594C378();
    swift_bridgeObjectRelease();
    if (v10 < v14 >> 14)
    {
LABEL_39:
      __break(1u);
    }
    else
    {
      v15 = sub_1A594C3B4();
      v17 = v16;
      v19 = v18;
      v21 = v20;
      swift_bridgeObjectRelease();
      *v0 = v15;
      v0[1] = v17;
      v0[2] = v19;
      v0[3] = v21;
      if (v11 == 2573 && v13 == 0xE200000000000000 || (sub_1A594CD38() & 1) != 0 || (sub_1A594B1B4() & 1) == 0)
      {
LABEL_31:
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRelease();
        *v0 = v2;
        v0[1] = v34;
        v0[2] = v33;
        v0[3] = v35;
        return;
      }
      v22 = 0;
      while (1)
      {
        v23 = sub_1A57A76A0(v11, v13);
        if ((v23 & 0x100000000) != 0)
          break;
        if ((v23 & 0xFFFFFF80) != 0)
          goto LABEL_31;
        v24 = sub_1A57A76A0(v11, v13);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_41;
        v25 = v24;
        swift_bridgeObjectRelease();
        if ((v25 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (v25 == 93)
        {
          if ((v22 & 1) == 0)
            goto LABEL_32;
          swift_bridgeObjectRelease();
          return;
        }
        if (v25 <= 0x2Fu || v25 >= 0x40u || v17 >> 14 == v15 >> 14)
          goto LABEL_32;
        v11 = sub_1A594C3A8();
        v13 = v26;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v27 = sub_1A594C378();
        swift_bridgeObjectRelease();
        if (v17 >> 14 < v27 >> 14)
          goto LABEL_38;
        v15 = sub_1A594C3B4();
        v17 = v28;
        v30 = v29;
        v32 = v31;
        swift_bridgeObjectRelease();
        *v0 = v15;
        v0[1] = v17;
        v0[2] = v30;
        v0[3] = v32;
        if ((v11 != 2573 || v13 != 0xE200000000000000) && (sub_1A594CD38() & 1) == 0)
        {
          v22 = 1;
          if ((sub_1A594B1B4() & 1) != 0)
            continue;
        }
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
  }
}

uint64_t sub_1A580C13C()
{
  uint64_t v0;

  v0 = sub_1A594A170();
  __swift_allocate_value_buffer_0(v0, qword_1EE7A0C10);
  __swift_project_value_buffer_0(v0, (uint64_t)qword_1EE7A0C10);
  return sub_1A594A134();
}

void sub_1A580C1A0()
{
  off_1EE7A0C48 = &unk_1E4E82130;
}

void sub_1A580C1B4()
{
  off_1EE7A0C38 = &unk_1E4E814C0;
}

uint64_t sub_1A580C1C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t *v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *i;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v0 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A03A0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v131 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1A594B718();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  v132 = 0;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v131 = 1;
  v11 = (unint64_t)&unk_1EE7A0000;
  for (i = v2; ; v2 = i)
  {
LABEL_2:
    v12 = v7;
    v133 = v10;
LABEL_3:
    v13 = v5;
    v14 = v3;
    v15 = v5 >> 14;
    if (v5 >> 14 == v3 >> 14)
    {
      v16 = v12;
      v17 = v9;
      goto LABEL_13;
    }
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v18 = v12;
    sub_1A594C3A8();
    v19 = v13;
    swift_bridgeObjectRelease();
    v20 = sub_1A594B1A8();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      break;
    v16 = v18;
    v17 = v9;
LABEL_10:
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v29 = sub_1A594C3A8();
    v31 = v30;
    swift_bridgeObjectRelease();
    v13 = v19;
    if (v29 == 91 && v31 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = sub_1A594CD38();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
        goto LABEL_13;
    }
    v11 = v19 >> 14;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v141 = v14 >> 14;
    if (v14 >> 14 == v19 >> 14)
    {
      v87 = v14 >> 14;
      v34 = v14;
      v140 = v19;
      v38 = v16;
      v39 = v13;
      v142 = v38;
      v143 = v14;
      v35 = v17;
    }
    else
    {
      sub_1A594C3A8();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v88 = sub_1A594C378();
      result = swift_bridgeObjectRelease();
      if (v11 < v88 >> 14)
        goto LABEL_141;
      v142 = v16;
      v143 = v14;
      v140 = v19;
      v34 = sub_1A594C3B4();
      v39 = v89;
      v38 = v90;
      v35 = v91;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v39 >> 14;
      v87 = v34 >> 14;
    }
    v139 = v87;
    if (v87 == v11)
      goto LABEL_131;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (sub_1A594C3A8() == 93 && v92 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_88:
      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
    v93 = sub_1A594CD38();
    swift_bridgeObjectRelease();
    if ((v93 & 1) != 0)
      goto LABEL_88;
    if (v11 == (unint64_t)sub_1A594C378() >> 14)
    {
LABEL_137:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    }
    if (sub_1A594C3A8() == 93 && v109 == 0xE100000000000000)
    {
LABEL_99:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = v11;
      while (1)
      {
        v111 = sub_1A594CD38();
        swift_bridgeObjectRelease();
        if ((v111 & 1) != 0)
          break;
        v11 = v110;
        if (v110 == (unint64_t)sub_1A594C378() >> 14)
          goto LABEL_137;
        if (sub_1A594C3A8() == 93 && v112 == 0xE100000000000000)
          goto LABEL_99;
      }
      swift_bridgeObjectRelease();
      v11 = v110;
    }
LABEL_89:
    v94 = (unint64_t)sub_1A594C378() >> 14;
    if (v11 < v94)
      goto LABEL_131;
    v3 = sub_1A594C3B4();
    v136 = v95;
    v97 = v96;
    v9 = v98;
    result = swift_bridgeObjectRelease();
    if (v94 < v141)
      goto LABEL_140;
    v99 = sub_1A594C3B4();
    v143 = v100;
    v102 = v101;
    v104 = v103;
    swift_bridgeObjectRelease();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1A5811888(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v106 = *((_QWORD *)v10 + 2);
    v105 = *((_QWORD *)v10 + 3);
    if (v106 >= v105 >> 1)
      v10 = sub_1A5811888((char *)(v105 > 1), v106 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v106 + 1;
    v107 = &v10[32 * v106];
    v108 = v143;
    *((_QWORD *)v107 + 4) = v99;
    *((_QWORD *)v107 + 5) = v108;
    *((_QWORD *)v107 + 6) = v102;
    *((_QWORD *)v107 + 7) = v104;
    swift_bridgeObjectRelease();
    v131 = v132;
    v11 = 0x1EE7A0000;
    v7 = v97;
    v5 = v136;
  }
  sub_1A594C3A8();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v21 = sub_1A594C378();
  result = swift_bridgeObjectRelease();
  if (v15 < v21 >> 14)
    goto LABEL_139;
  v14 = sub_1A594C3B4();
  v24 = v23;
  v26 = v25;
  v17 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v24 >> 14;
  if (v24 >> 14 == v14 >> 14)
  {
    v13 = v24;
    v16 = v26;
    goto LABEL_13;
  }
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v19 = v24;
  sub_1A594C3A8();
  swift_bridgeObjectRelease();
  v59 = sub_1A594B1A8();
  swift_bridgeObjectRelease();
  v16 = v26;
  if ((v59 & 1) == 0)
  {
    v10 = v133;
    goto LABEL_10;
  }
  v10 = v133;
  while (1)
  {
    sub_1A594C3A8();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v60 = sub_1A594C378();
    result = swift_bridgeObjectRelease();
    if (v28 < v60 >> 14)
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
      return result;
    }
    v14 = sub_1A594C3B4();
    v19 = v61;
    v16 = v62;
    v64 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v64;
    v28 = v19 >> 14;
    if (v19 >> 14 == v14 >> 14)
      break;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594C3A8();
    swift_bridgeObjectRelease();
    v65 = sub_1A594B1A8();
    swift_bridgeObjectRelease();
    if ((v65 & 1) == 0)
      goto LABEL_10;
  }
  v13 = v19;
LABEL_13:
  if (qword_1EE7A0C50 != -1)
    swift_once();
  v10 = (char *)*((_QWORD *)off_1EE7A0C48 + 2);
  v138 = v13 >> 14;
  v139 = v14 >> 14;
  v140 = v13;
  v141 = v17;
  v142 = v16;
  v143 = v14;
  if (!v10)
  {
LABEL_50:
    if (qword_1EE7A0C40 != -1)
      swift_once();
    v10 = (char *)*((_QWORD *)off_1EE7A0C38 + 2);
    if (v10)
    {
      v134 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v66 = (unint64_t *)(v134 + 40);
      do
      {
        v35 = *(v66 - 1);
        v34 = *v66;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A594B5A4();
        v67 = sub_1A594C390();
        if ((v68 & 1) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v38 = v67;
          v39 = v67 >> 14;
          if (v67 >> 14 < v139)
            goto LABEL_128;
          v146 = v143;
          v147 = v13;
          v148 = v142;
          v149 = v17;
          v144 = v35;
          v145 = v34;
          v69 = *(_QWORD *)(v11 + 3112);
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          if (v69 != -1)
            swift_once();
          v70 = sub_1A594A170();
          v71 = __swift_project_value_buffer_0(v70, (uint64_t)qword_1EE7A0C10);
          v72 = *(_QWORD *)(v70 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v2, v71, v70);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v2, 0, 1, v70);
          sub_1A580D4E8();
          sub_1A57D6AB8();
          v35 = sub_1A594C48C();
          sub_1A580D52C((uint64_t)v2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v13 = v140;
          v17 = v141;
          if (!v35)
          {
            if (v138 < v39)
              goto LABEL_130;
            _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
            v73 = sub_1A594C3B4();
            v75 = v74;
            v77 = v76;
            v79 = v78;
            swift_bridgeObjectRelease();
            v146 = v73;
            v147 = v75;
            v148 = v77;
            v149 = v79;
            sub_1A580BDB4();
            v34 = v146;
            v39 = v147;
            v80 = v147 >> 14;
            if (v147 >> 14 == v146 >> 14)
            {
              v17 = v141;
            }
            else
            {
              v38 = sub_1A594C3A8();
              v35 = v81;
              _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
              v11 = sub_1A594C378();
              swift_bridgeObjectRelease();
              if (v80 < v11 >> 14)
                goto LABEL_136;
              v135 = sub_1A594C3B4();
              v136 = v82;
              v7 = v83;
              v9 = v84;
              swift_bridgeObjectRelease();
              if (v38 == 58 && v35 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v2 = i;
                v11 = 0x1EE7A0000;
LABEL_74:
                v3 = v135;
                swift_bridgeObjectRelease();
                v132 = v131;
                v10 = v133;
                v5 = v136;
                goto LABEL_2;
              }
              v85 = sub_1A594CD38();
              v2 = i;
              v11 = 0x1EE7A0000;
              v17 = v141;
              if ((v85 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_74;
              }
              if (v38 == 10140911 && v35 == 0xA300000000000000)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_77:
                swift_bridgeObjectRelease();
                v132 = v131;
                v10 = v133;
                v3 = v135;
                v5 = v136;
                goto LABEL_2;
              }
              v86 = sub_1A594CD38();
              swift_bridgeObjectRelease();
              if ((v86 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                goto LABEL_77;
              }
            }
            swift_bridgeObjectRelease();
            v13 = v140;
          }
        }
        v66 += 2;
        --v10;
        v16 = v142;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v34 = v143;
    }
    else
    {
      v34 = v14;
    }
    v38 = v16;
    v39 = v13;
    v35 = v17;
    v10 = v133;
    v11 = v138;
    goto LABEL_109;
  }
  v134 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v33 = (unint64_t *)(v134 + 40);
  while (2)
  {
    v35 = *(v33 - 1);
    v34 = *v33;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5A4();
    v36 = sub_1A594C390();
    if ((v37 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      v33 += 2;
      --v10;
      v16 = v142;
      if (!v10)
      {
        swift_bridgeObjectRelease();
        v14 = v143;
        goto LABEL_50;
      }
      continue;
    }
    break;
  }
  v38 = v36;
  v39 = v36 >> 14;
  if (v36 >> 14 >= v139)
  {
    v146 = v143;
    v147 = v13;
    v148 = v142;
    v149 = v17;
    v144 = v35;
    v145 = v34;
    v40 = *(_QWORD *)(v11 + 3112);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v40 != -1)
      swift_once();
    v41 = sub_1A594A170();
    v42 = __swift_project_value_buffer_0(v41, (uint64_t)qword_1EE7A0C10);
    v43 = *(_QWORD *)(v41 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v2, v42, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v2, 0, 1, v41);
    sub_1A580D4E8();
    sub_1A57D6AB8();
    v35 = sub_1A594C48C();
    sub_1A580D52C((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v140;
    v17 = v141;
    if (!v35)
    {
      if (v138 < v39)
        goto LABEL_129;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v44 = sub_1A594C3B4();
      v46 = v45;
      v48 = v47;
      v50 = v49;
      swift_bridgeObjectRelease();
      v146 = v44;
      v147 = v46;
      v148 = v48;
      v149 = v50;
      sub_1A580BDB4();
      v34 = v146;
      v39 = v147;
      v51 = v147 >> 14;
      if (v147 >> 14 == v146 >> 14)
      {
        v17 = v141;
      }
      else
      {
        v38 = sub_1A594C3A8();
        v35 = v52;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v11 = sub_1A594C378();
        swift_bridgeObjectRelease();
        if (v51 < v11 >> 14)
        {
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v135 = sub_1A594C3B4();
        v136 = v53;
        v55 = v54;
        v9 = v56;
        swift_bridgeObjectRelease();
        if (v38 == 58 && v35 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v2 = i;
          v11 = 0x1EE7A0000;
LABEL_43:
          v3 = v135;
          v12 = v55;
          swift_bridgeObjectRelease();
          v131 = v132;
          v10 = v133;
          v5 = v136;
          goto LABEL_3;
        }
        v57 = sub_1A594CD38();
        v2 = i;
        v11 = 0x1EE7A0000;
        v17 = v141;
        if ((v57 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        if (v38 == 10140911 && v35 == 0xA300000000000000)
        {
          v12 = v55;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_47:
          swift_bridgeObjectRelease();
          v131 = v132;
          v10 = v133;
          v3 = v135;
          v5 = v136;
          goto LABEL_3;
        }
        v58 = sub_1A594CD38();
        swift_bridgeObjectRelease();
        if ((v58 & 1) != 0)
        {
          v12 = v55;
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
      }
      swift_bridgeObjectRelease();
      v13 = v140;
    }
    goto LABEL_18;
  }
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  swift_bridgeObjectRelease();
LABEL_109:
  if (v139 != v11)
  {
    do
    {
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594C3A8();
      swift_bridgeObjectRelease();
      v113 = sub_1A594B1A8();
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
        break;
      sub_1A594C3A8();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v114 = sub_1A594C378();
      swift_bridgeObjectRelease();
      if (v11 < v114 >> 14)
      {
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      v34 = sub_1A594C3B4();
      v39 = v115;
      v38 = v116;
      v118 = v117;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = v118;
      v11 = v39 >> 14;
    }
    while (v39 >> 14 != v34 >> 14);
  }
  for (; (v34 ^ v39) >= 0x4000; v35 = v123)
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594C384();
    sub_1A594C3A8();
    swift_bridgeObjectRelease();
    v119 = sub_1A594B1A8();
    swift_bridgeObjectRelease();
    if ((v119 & 1) == 0)
      break;
    if (v34 >> 14 == v39 >> 14)
      goto LABEL_133;
    sub_1A594C384();
    sub_1A594C3A8();
    if (v34 >> 14 > (unint64_t)sub_1A594C384() >> 14)
      goto LABEL_134;
    v34 = sub_1A594C3B4();
    v39 = v120;
    v38 = v121;
    v123 = v122;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v124 = MEMORY[0x1A85AD950](v34, v39, v38, v35);
  v126 = v125;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v10 + 2))
  {
    v127 = HIBYTE(v126) & 0xF;
    if ((v126 & 0x2000000000000000) == 0)
      v127 = v124 & 0xFFFFFFFFFFFFLL;
    if (v127)
    {
      v146 = (unint64_t)v10;
      __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA740);
      sub_1A580D49C();
      sub_1A580D4E8();
      v128 = sub_1A594B868();
      v130 = v129;
      swift_bridgeObjectRelease();
      v146 = v128;
      v147 = v130;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v146;
    }
    swift_bridgeObjectRelease();
    v146 = (unint64_t)v10;
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA740);
    sub_1A580D49C();
    sub_1A580D4E8();
    v124 = sub_1A594B868();
  }
  swift_bridgeObjectRelease();
  return v124;
}

unint64_t sub_1A580D49C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE7AA748;
  if (!qword_1EE7AA748)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0(&qword_1EE7AA740);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE7AA748);
  }
  return result;
}

unint64_t sub_1A580D4E8()
{
  unint64_t result;

  result = qword_1EE7A0C88;
  if (!qword_1EE7A0C88)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE7A0C88);
  }
  return result;
}

uint64_t sub_1A580D52C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7A03A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A580D56C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = a2 - result;
  if (!result)
    v4 = 0;
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v4;
    *(_QWORD *)(a4 + 16) = result;
    *(_QWORD *)(a4 + 24) = a2;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = v4;
    *(_QWORD *)(a4 + 48) = result;
    *(_QWORD *)(a4 + 56) = a2;
    *(_BYTE *)(a4 + 64) = a3;
  }
  return result;
}

uint64_t sub_1A580D598(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A580D5D4 + 4 * byte_1A59D92A0[a1]))(0xD000000000000016, 0x80000001A5A12BA0);
}

uint64_t sub_1A580D5D4()
{
  return 0x6275732D6F747561;
}

uint64_t sub_1A580D5F8()
{
  return 6513506;
}

uint64_t sub_1A580D608()
{
  return 25443;
}

unint64_t sub_1A580D614()
{
  return 0xD000000000000013;
}

uint64_t sub_1A580D63C()
{
  return 0x2D746E65746E6F63;
}

uint64_t sub_1A580D6EC()
{
  return 0x7265762D656D696DLL;
}

uint64_t sub_1A580D70C()
{
  return 0x69726F6972702D78;
}

uint64_t sub_1A580D728()
{
  return 0x6465766965636572;
}

uint64_t sub_1A580D740()
{
  return 0x702D6E7275746572;
}

uint64_t sub_1A580D760()
{
  return 0x7463656A627573;
}

uint64_t sub_1A580D778()
{
  return 28532;
}

uint64_t sub_1A580D784()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1A594CE64();
  sub_1A580D598(v1);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A580D7E4()
{
  unsigned __int8 *v0;

  sub_1A580D598(*v0);
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A580D824()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1A594CE64();
  sub_1A580D598(v1);
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A580D880@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A580E790();
  *a1 = result;
  return result;
}

uint64_t sub_1A580D8AC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1A580D598(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A580D8D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1A580D598(*a1);
  v5 = v4;
  if (v3 == sub_1A580D598(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1A594CD38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A580D95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
    __asm { BR              X8 }
  return 20;
}

uint64_t sub_1A580DC5C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  BOOL v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v4 = sub_1A57D86AC(0, a1, a2);
  v5 = sub_1A57D86AC(1, a1, a2);
  v6 = sub_1A57D86AC(2, a1, a2);
  v7 = sub_1A57D86AC(3, a1, a2);
  v8 = v4 == 120 && v5 == 45;
  v9 = v8;
  if (v8 && v6 == 97 && v7 == 112)
  {
    v10 = (char *)a1;
    v11 = (char *)a2;
    v12 = 0;
  }
  else
  {
    switch(v4)
    {
      case 'a':
        if (v5 != 117 || v6 != 116 || v7 != 111)
          goto LABEL_48;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 1;
        break;
      case 'b':
        if (v5 != 99 || v6 != 99 || v7)
          goto LABEL_48;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 2;
        break;
      case 'c':
        if (v5 == 111)
        {
          if (v6 == 110 && v7 == 116)
          {
            result = sub_1A580D95C(a1, a2, (uint64_t)&unk_1E4E812F8);
            goto LABEL_54;
          }
        }
        else if (v5 == 99 && !(v6 | v7))
        {
          v10 = (char *)a1;
          v11 = (char *)a2;
          v12 = 3;
          break;
        }
        goto LABEL_48;
      case 'd':
        if (v5 != 97 || v6 != 116 || v7 != 101)
          goto LABEL_48;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 10;
        break;
      case 'f':
        if (v5 != 114 || v6 != 111 || v7 != 109)
          goto LABEL_48;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 11;
        break;
      case 'l':
        if (v5 != 105 || v6 != 115 || v7 != 116)
          goto LABEL_48;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 12;
        break;
      case 'm':
        if (v5 == 105)
        {
          if (v6 == 109 && v7 == 101)
          {
            v10 = (char *)a1;
            v11 = (char *)a2;
            v12 = 14;
            break;
          }
        }
        else if (v5 == 101 && v6 == 115 && v7 == 115)
        {
          v10 = (char *)a1;
          v11 = (char *)a2;
          v12 = 13;
          break;
        }
LABEL_48:
        if (v6 != 112)
          v9 = 0;
        if (v9 == 1 && v7 == 114)
        {
          v10 = (char *)a1;
          v11 = (char *)a2;
          v12 = 15;
          break;
        }
        if (v4 == 116)
        {
          if (v5 == 111 && !v6 && !v7)
          {
            v10 = (char *)a1;
            v11 = (char *)a2;
            v12 = 19;
            break;
          }
          return 20;
        }
        if (v4 == 115)
        {
          if (v5 == 117 && v6 == 98 && v7 == 106)
          {
            v10 = (char *)a1;
            v11 = (char *)a2;
            v12 = 18;
            break;
          }
          return 20;
        }
        if (v4 != 114 || v5 != 101)
          return 20;
        if (v6 != 116)
        {
          if (v6 == 99 && v7 == 101)
          {
            v10 = (char *)a1;
            v11 = (char *)a2;
            v12 = 16;
            break;
          }
          return 20;
        }
        if (v7 != 117)
          return 20;
        v10 = (char *)a1;
        v11 = (char *)a2;
        v12 = 17;
        break;
      default:
        goto LABEL_48;
    }
  }
  result = sub_1A57D7484(v10, v11, v12);
LABEL_54:
  if (result == 20)
    return 20;
  return result;
}

uint64_t sub_1A580E020@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = result;
  if (!result)
  {
    if (!a3)
    {
      v10 = 0;
      v13 = 0;
      a2 = 0;
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  v10 = result;
  if (a3)
  {
    v11 = a3 - 1;
    if (__OFSUB__(a3, 1))
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v11 < 0 || v11 >= a3)
    {
LABEL_20:
      __break(1u);
      JUMPOUT(0x1A580E350);
    }
    v12 = result + v11;
    v10 = result + a3;
    if (*(_BYTE *)(result + v11) == 58)
    {
      result = sub_1A580DC5C(result, v12);
      v10 = v12;
      if (result != 20)
      {
        if (a2 - v7 >= a3)
          __asm { BR              X11 }
        goto LABEL_17;
      }
    }
  }
  if (a2 - v7 < a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v13 = v7 + a3;
LABEL_13:
  *a5 = v7;
  a5[1] = v10;
  a5[2] = v13;
  a5[3] = a2;
  a5[4] = a4 & 1 | 0xA000000000000000;
  a5[5] = 0;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader.Value()
{
  return &type metadata for UnsafeHeader.Value;
}

uint64_t destroy for UnsafeHeader(uint64_t a1)
{
  return sub_1A57E5B50(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *initializeWithCopy for UnsafeHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  sub_1A57EB9C4(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for UnsafeHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  sub_1A57EB9C4(*a2, v4, v5, v6, v7);
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  sub_1A57E5B50(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for UnsafeHeader(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v8;
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1A57E5B50(v3, v5, v4, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsafeHeader(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 32) >> 5) & 0xFFFFFFF8 | (*(_QWORD *)(a1 + 32) >> 1) & 7;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UnsafeHeader(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (32 * -a2) & 0x1FFFFFFF00 | (2 * (-a2 & 7));
      *(_QWORD *)(a1 + 40) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A580E5A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >> 59;
}

uint64_t sub_1A580E5B4(uint64_t result)
{
  *(_QWORD *)(result + 32) &= 0x7FFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1A580E5C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(result + 32) & 0xF1 | (a2 << 59);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader()
{
  return &type metadata for UnsafeHeader;
}

uint64_t getEnumTagSinglePayload for UnsafeHeader.Field.Known(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeHeader.Field.Known(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1A580E6C8 + 4 * byte_1A59D92DA[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1A580E6FC + 4 * byte_1A59D92D5[v4]))();
}

uint64_t sub_1A580E6FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A580E704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A580E70CLL);
  return result;
}

uint64_t sub_1A580E718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A580E720);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1A580E724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A580E72C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader.Field.Known()
{
  return &type metadata for UnsafeHeader.Field.Known;
}

unint64_t sub_1A580E74C()
{
  unint64_t result;

  result = qword_1EE7AA750;
  if (!qword_1EE7AA750)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59D931C, &type metadata for UnsafeHeader.Field.Known);
    atomic_store(result, (unint64_t *)&qword_1EE7AA750);
  }
  return result;
}

uint64_t sub_1A580E790()
{
  unint64_t v0;

  v0 = sub_1A594CD8C();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14)
    return 20;
  else
    return v0;
}

ValueMetadata *type metadata accessor for UnsafeHeader.Field()
{
  return &type metadata for UnsafeHeader.Field;
}

uint64_t sub_1A580E7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v12;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(unsigned __int8 *)(v0 + 64);
  sub_1A57F0AF0(*(_BYTE *)(v0 + 64));
  if ((v7 & 1) == 0)
  {
    v8 = v6;
    if (v6 < v1)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v2 >= v6)
      goto LABEL_6;
    __break(1u);
  }
  v8 = v2;
  if (v2 < v1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_6:
  *(_QWORD *)(v0 + 32) = v8;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v4;
  sub_1A57F0D24(0x3Au, v1, v8, v3);
  if ((v10 & 1) != 0)
    return 0;
  if (v8 != v2)
  {
    if (v2 <= v8)
    {
      __break(1u);
      JUMPOUT(0x1A580EB28);
    }
    v12 = *(unsigned __int8 *)(v3 + v8);
    if (v12 == 32 || v12 == 9)
      __asm { BR              X8 }
  }
  if (__OFSUB__(v9, v1))
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x1A580EB48);
  }
  if (v3)
    return v3 + v1;
  else
    return 0;
}

uint64_t WatchOSHeaderInfo.from.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t WatchOSHeaderInfo.from.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

double (*WatchOSHeaderInfo.from.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.to.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t WatchOSHeaderInfo.to.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

double (*WatchOSHeaderInfo.to.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.cc.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t WatchOSHeaderInfo.cc.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

double (*WatchOSHeaderInfo.cc.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.bcc.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t WatchOSHeaderInfo.bcc.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

double (*WatchOSHeaderInfo.bcc.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.subject.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t WatchOSHeaderInfo.subject.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

double (*WatchOSHeaderInfo.subject.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.messageIDHeader.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t WatchOSHeaderInfo.messageIDHeader.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

double (*WatchOSHeaderInfo.messageIDHeader.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  v4 = sub_1A594A0EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WatchOSHeaderInfo()
{
  uint64_t result;

  result = qword_1EE7AA758;
  if (!qword_1EE7AA758)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t WatchOSHeaderInfo.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  v4 = sub_1A594A0EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*WatchOSHeaderInfo.date.modify())(_QWORD)
{
  type metadata accessor for WatchOSHeaderInfo();
  return nullsub_1;
}

uint64_t WatchOSHeaderInfo.init(from:to:cc:bcc:subject:messageIDHeader:date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  char *v11;
  uint64_t v12;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  v11 = (char *)a9 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  v12 = sub_1A594A0EC();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a11, v12);
}

uint64_t WatchOSHeaderInfo.init(message:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE v20[16];

  v6 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA6A8);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v11 = &v20[-v10];
  v12 = type metadata accessor for WatchOSHeaderInfo();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = &v20[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v18 = &v20[-v17];
  *v18 = 0;
  v18[1] = 0;
  sub_1A57F5F64(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1A580F0E4, a2, (uint64_t)v11);
  sub_1A55034FC(a1, type metadata accessor for Message);
  swift_release();
  sub_1A55032A0((uint64_t)v11, (uint64_t)v8, &qword_1EE7AA6A8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
  {
    sub_1A5510284((uint64_t)v8, &qword_1EE7AA6A8);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1, 1, v12);
  }
  else
  {
    sub_1A580F14C((uint64_t)v8, (uint64_t)v15);
    swift_bridgeObjectRelease();
    sub_1A580F14C((uint64_t)v15, (uint64_t)v18);
    sub_1A580F190((uint64_t)v18, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, v12);
    return sub_1A55034FC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for WatchOSHeaderInfo);
  }
}

uint64_t sub_1A580F0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;

  swift_retain();
  return sub_1A580F7E4(a1, a2, a3, a4, v5, a5);
}

uint64_t sub_1A580F14C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WatchOSHeaderInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A580F190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WatchOSHeaderInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for WatchOSHeaderInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = *(int *)(a3 + 40);
    v15 = (char *)a1 + v9;
    v10 = (char *)a2 + v9;
    a1[8] = a2[8];
    v11 = sub_1A594A0EC();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v12(v15, v10, v11);
  }
  return v3;
}

uint64_t destroy for WatchOSHeaderInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_1A594A0EC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for WatchOSHeaderInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = *(int *)(a3 + 40);
  v13 = (char *)a1 + v8;
  v9 = (char *)a2 + v8;
  a1[8] = a2[8];
  v10 = sub_1A594A0EC();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v11(v13, v9, v10);
  return a1;
}

_QWORD *assignWithCopy for WatchOSHeaderInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A0EC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for WatchOSHeaderInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A594A0EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for WatchOSHeaderInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 40);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1A594A0EC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchOSHeaderInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A580F658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A594A0EC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WatchOSHeaderInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A580F6E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A594A0EC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A580F754()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A594A0EC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A580F7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t isStackAllocationSafe;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  char *v111;
  int64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  id v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  id v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  int64_t v132;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  id v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  int64_t v152;
  char *v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  id v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  id v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  int64_t v169;
  int64_t v170;
  char *v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(char *, _QWORD, uint64_t, uint64_t);
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t *v219;
  char v220;
  int64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227[6];
  _BYTE v228[104];
  _BYTE v229[104];
  _BYTE v230[104];
  __int128 v231[6];
  unsigned __int8 v232;
  __int128 v233[6];
  _QWORD v234[12];
  char v235;
  __int128 v236[6];
  unsigned __int8 v237;
  __int128 v238[6];
  _QWORD v239[12];
  char v240;
  __int128 v241[6];
  unsigned __int8 v242;
  __int128 v243[6];
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _BYTE v256[16];
  __int128 v257;
  uint64_t v258;

  v219 = a5;
  v217 = (char *)a4;
  v215 = a6;
  v258 = *MEMORY[0x1E0C80C00];
  v214 = sub_1A594A0EC();
  v218 = *(_QWORD *)(v214 - 8);
  MEMORY[0x1E0C80A78](v214);
  v10 = (char *)&v199 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796470);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v199 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v199 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v199 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v199 - v21;
  v23 = a3;
  v24 = 0;
  v25 = sub_1A57F978C(3, a1, a2, v23, (uint64_t)v217);
  v27 = v26;
  v29 = v28;
  LODWORD(v213) = v25;
  v216 = v13;
  v217 = v10;
  v203 = v19;
  v204 = v16;
  v201 = v11;
  v30 = v218;
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56);
  v208 = v22;
  v202 = v31;
  v31(v22, 1, 1, v214);
  if (v29 < 0)
    goto LABEL_255;
  if (v27)
    v32 = v27 + v29;
  else
    v32 = 0;
  sub_1A580D56C(v27, v32, v213, (uint64_t)&v226);
  v33 = sub_1A580E7F0();
  if (v36 == 2)
  {
    swift_release();
    v37 = (uint64_t)v208;
    goto LABEL_231;
  }
  v210 = 0;
  v206 = 0;
  v207 = 0;
  v199 = 0;
  v200 = 0;
  v205 = 0;
  v211 = MEMORY[0x1E0DEE9D8];
  v212 = MEMORY[0x1E0DEE9D8];
  v213 = MEMORY[0x1E0DEE9D8];
  v39 = (uint64_t)v216;
  v38 = (uint64_t)v217;
  v40 = v30;
  v41 = v219;
  while (2)
  {
    sub_1A580E020(v33, v34, v35, v36 & 1, v227);
    sub_1A57DCF1C((uint64_t)v227, (uint64_t)&v247);
    switch(v249 >> 59)
    {
      case 2uLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        v42 = v247;
        v43 = v248;
        swift_bridgeObjectRelease();
        if (v42)
          v44 = v43 - v42;
        else
          v44 = 0;
        if (v44 < 0)
          goto LABEL_251;
        v45 = sub_1A580AA68(0, v44, v42, v43);
        if (v47)
          v48 = v47 + v46;
        else
          v48 = 0;
        if (v47)
          v49 = v47 + v45;
        else
          v49 = 0;
        v221 = 0;
        v222 = 0xE000000000000000;
        v50 = v48 - v49;
        if (v49)
          v51 = v48 - v49;
        else
          v51 = 0;
        swift_retain();
        isStackAllocationSafe = MEMORY[0x1A85AD968](v51);
        v220 = 0;
        if (v49)
        {
          if (v50 < 0)
            goto LABEL_260;
          if (v50 >= 1025)
          {
            isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
            if ((isStackAllocationSafe & 1) == 0)
            {
              v53 = swift_slowAlloc();
              v223 = (char *)v53;
              v224 = v48 - v49;
              v225 = 0;
              sub_1A57FD16C((int64_t)&v223, &v221, v49, v48, v41, &v220);
              MEMORY[0x1A85B1964](v53, -1, -1);
              goto LABEL_122;
            }
          }
        }
        else
        {
          v50 = 0;
        }
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v223 = (char *)&v199 - v116;
        v224 = v50;
        v225 = 0;
        sub_1A57FD16C((int64_t)&v223, &v221, v49, v48, v41, &v220);
        if (v24)
          goto LABEL_264;
LABEL_122:
        swift_release();
        v117 = v222;
        v118 = (void *)sub_1A594B3F4();
        v119 = IMAP2EmailCore_ECEmailAddressesFromHeader(v118);

        sub_1A57DBFF8();
        v120 = sub_1A594B958();

        if (v120 >> 62)
        {
          v122 = v120;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v121 = sub_1A594CA38();
        }
        else
        {
          v121 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
          v122 = v120;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        }
        v213 = v24;
        v209 = v117;
        if (v121)
        {
          if (v121 < 1)
            goto LABEL_257;
          v123 = 0;
          v124 = v122;
          v125 = v122 & 0xC000000000000001;
          v126 = (char *)MEMORY[0x1E0DEE9D8];
          while (2)
          {
            if (v125)
              v127 = (id)MEMORY[0x1A85AEC04](v123, v124);
            else
              v127 = *(id *)(v124 + 8 * v123 + 32);
            v128 = v127;
            v129 = sub_1A57DB39C((uint64_t)v127, 0);

            v130 = *(_QWORD *)(v129 + 16);
            v131 = *((_QWORD *)v126 + 2);
            v132 = v131 + v130;
            if (__OFADD__(v131, v130))
              goto LABEL_237;
            isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
            if ((_DWORD)isUniquelyReferenced_nonNull_native && v132 <= *((_QWORD *)v126 + 3) >> 1)
            {
              if (!*(_QWORD *)(v129 + 16))
              {
LABEL_127:
                if (v130)
                  goto LABEL_240;
LABEL_128:
                swift_bridgeObjectRelease();
                if (v121 == ++v123)
                  goto LABEL_196;
                continue;
              }
            }
            else
            {
              if (v131 <= v132)
                v134 = v131 + v130;
              else
                v134 = v131;
              v126 = sub_1A581141C(isUniquelyReferenced_nonNull_native, v134, 1, v126);
              if (!*(_QWORD *)(v129 + 16))
                goto LABEL_127;
            }
            break;
          }
          if ((*((_QWORD *)v126 + 3) >> 1) - *((_QWORD *)v126 + 2) < v130)
            goto LABEL_244;
          swift_arrayInitWithCopy();
          if (v130)
          {
            v135 = *((_QWORD *)v126 + 2);
            v114 = __OFADD__(v135, v130);
            v136 = v135 + v130;
            if (v114)
              goto LABEL_247;
            *((_QWORD *)v126 + 2) = v136;
          }
          goto LABEL_128;
        }
        v126 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_196:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v41 = v219;
        swift_retain();
        v24 = v213;
        v213 = sub_1A581216C((uint64_t)v126, (uint64_t)v41);
        goto LABEL_211;
      case 3uLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        v55 = v247;
        v56 = v248;
        swift_bridgeObjectRelease();
        if (v55)
          v57 = v56 - v55;
        else
          v57 = 0;
        if (v57 < 0)
          goto LABEL_252;
        v58 = sub_1A580AA68(0, v57, v55, v56);
        if (v60)
          v61 = v60 + v59;
        else
          v61 = 0;
        if (v60)
          v62 = v60 + v58;
        else
          v62 = 0;
        v221 = 0;
        v222 = 0xE000000000000000;
        v63 = v61 - v62;
        if (v62)
          v64 = v61 - v62;
        else
          v64 = 0;
        swift_retain();
        v65 = MEMORY[0x1A85AD968](v64);
        v220 = 0;
        if (v62)
        {
          if (v63 < 0)
            goto LABEL_261;
          if (v63 >= 1025)
          {
            v65 = swift_stdlib_isStackAllocationSafe();
            if ((v65 & 1) == 0)
            {
              v66 = swift_slowAlloc();
              v223 = (char *)v66;
              v224 = v61 - v62;
              v225 = 0;
              sub_1A57FD16C((int64_t)&v223, &v221, v62, v61, v41, &v220);
              MEMORY[0x1A85B1964](v66, -1, -1);
              goto LABEL_97;
            }
          }
        }
        else
        {
          v63 = 0;
        }
        MEMORY[0x1E0C80A78](v65);
        v223 = (char *)&v199 - v94;
        v224 = v63;
        v225 = 0;
        sub_1A57FD16C((int64_t)&v223, &v221, v62, v61, v41, &v220);
        if (v24)
          goto LABEL_264;
LABEL_97:
        swift_release();
        v95 = v222;
        v96 = (void *)sub_1A594B3F4();
        v97 = IMAP2EmailCore_ECEmailAddressesFromHeader(v96);

        sub_1A57DBFF8();
        v98 = sub_1A594B958();

        if (v98 >> 62)
        {
          v100 = v98;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v99 = sub_1A594CA38();
        }
        else
        {
          v99 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
          v100 = v98;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        }
        v212 = v24;
        v209 = v95;
        if (v99)
        {
          if (v99 < 1)
            goto LABEL_256;
          v101 = 0;
          v102 = v100;
          v103 = v100 & 0xC000000000000001;
          v104 = (char *)MEMORY[0x1E0DEE9D8];
          while (2)
          {
            if (v103)
              v105 = (id)MEMORY[0x1A85AEC04](v101, v102);
            else
              v105 = *(id *)(v102 + 8 * v101 + 32);
            v106 = v105;
            v107 = sub_1A57DB39C((uint64_t)v105, 0);

            v108 = *(_QWORD *)(v107 + 16);
            v109 = *((_QWORD *)v104 + 2);
            v110 = v109 + v108;
            if (__OFADD__(v109, v108))
              goto LABEL_236;
            v111 = (char *)swift_isUniquelyReferenced_nonNull_native();
            if ((_DWORD)v111 && v110 <= *((_QWORD *)v104 + 3) >> 1)
            {
              if (!*(_QWORD *)(v107 + 16))
              {
LABEL_102:
                if (v108)
                  goto LABEL_239;
LABEL_103:
                swift_bridgeObjectRelease();
                if (v99 == ++v101)
                  goto LABEL_194;
                continue;
              }
            }
            else
            {
              if (v109 <= v110)
                v112 = v109 + v108;
              else
                v112 = v109;
              v104 = sub_1A581141C(v111, v112, 1, v104);
              if (!*(_QWORD *)(v107 + 16))
                goto LABEL_102;
            }
            break;
          }
          if ((*((_QWORD *)v104 + 3) >> 1) - *((_QWORD *)v104 + 2) < v108)
            goto LABEL_243;
          swift_arrayInitWithCopy();
          if (v108)
          {
            v113 = *((_QWORD *)v104 + 2);
            v114 = __OFADD__(v113, v108);
            v115 = v113 + v108;
            if (v114)
              goto LABEL_248;
            *((_QWORD *)v104 + 2) = v115;
          }
          goto LABEL_103;
        }
        v104 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_194:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v41 = v219;
        swift_retain();
        v24 = v212;
        v212 = sub_1A581216C((uint64_t)v104, (uint64_t)v41);
        goto LABEL_211;
      case 0xAuLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1A57E51D8((uint64_t)v227);
        sub_1A55032A0((uint64_t)v230, (uint64_t)v241, &qword_1EE7A0C70);
        if (v242 == 255)
          goto LABEL_9;
        sub_1A57E4178(v241, (uint64_t)v243);
        sub_1A57E4178(v243, (uint64_t)&v244);
        if (v246 != 10)
        {
          sub_1A5812354((uint64_t)v230);
          goto LABEL_9;
        }
        v79 = v204;
        v209 = v244;
        if ((v245 & 0x1000000000000000) != 0)
          goto LABEL_225;
        if ((v245 & 0x2000000000000000) != 0)
        {
          v223 = (char *)v244;
          v224 = v245 & 0xFFFFFFFFFFFFFFLL;
          v80 = (const char *)&v223;
          goto LABEL_201;
        }
        if ((v244 & 0x1000000000000000) != 0)
        {
          v80 = (const char *)((v245 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_201:
          sub_1A57EDACC(v80, v204);
          goto LABEL_202;
        }
LABEL_225:
        sub_1A594C6FC();
LABEL_202:
        v175 = v214;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v79, 1, v214) == 1)
        {
          v176 = v203;
          sub_1A57ECDB0(v209, v203);
          sub_1A5510284((uint64_t)v79, &qword_1EE796470);
        }
        else
        {
          v177 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
          v176 = v203;
          v177(v203, v79, v175);
          v202(v176, 0, 1, v175);
        }
        sub_1A5812354((uint64_t)v230);
        v178 = (uint64_t)v208;
        sub_1A5510284((uint64_t)v208, &qword_1EE796470);
        sub_1A55032A0((uint64_t)v176, v178, &qword_1EE796470);
        v40 = v218;
        goto LABEL_9;
      case 0xBuLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        v81 = v247;
        v82 = v248;
        swift_bridgeObjectRelease();
        if (v81)
          v83 = v82 - v81;
        else
          v83 = 0;
        if (v83 < 0)
          goto LABEL_254;
        v84 = sub_1A580AA68(0, v83, v81, v82);
        if (v86)
          v87 = v86 + v85;
        else
          v87 = 0;
        if (v86)
          v88 = v86 + v84;
        else
          v88 = 0;
        v221 = 0;
        v222 = 0xE000000000000000;
        v89 = v87 - v88;
        if (v88)
          v90 = v87 - v88;
        else
          v90 = 0;
        swift_retain();
        v91 = MEMORY[0x1A85AD968](v90);
        v220 = 0;
        if (v88)
        {
          if (v89 < 0)
            goto LABEL_263;
          if (v89 >= 1025)
          {
            v91 = swift_stdlib_isStackAllocationSafe();
            if ((v91 & 1) == 0)
            {
              v92 = swift_slowAlloc();
              v223 = (char *)v92;
              v224 = v87 - v88;
              v225 = 0;
              sub_1A57FD16C((int64_t)&v223, &v221, v88, v87, v41, &v220);
              MEMORY[0x1A85B1964](v92, -1, -1);
              goto LABEL_171;
            }
          }
        }
        else
        {
          v89 = 0;
        }
        MEMORY[0x1E0C80A78](v91);
        v223 = (char *)&v199 - v157;
        v224 = v89;
        v225 = 0;
        sub_1A57FD16C((int64_t)&v223, &v221, v88, v87, v41, &v220);
        if (v24)
        {
LABEL_264:
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1A5810D6CLL);
        }
LABEL_171:
        v158 = v222;
        v159 = (void *)sub_1A594B3F4();
        v160 = IMAP2EmailCore_ECEmailAddressesFromHeader(v159);

        sub_1A57DBFF8();
        v161 = sub_1A594B958();

        if (v161 >> 62)
        {
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v162 = sub_1A594CA38();
          v209 = v24;
          v210 = v158;
          if (v162)
          {
LABEL_173:
            if (v162 < 1)
              goto LABEL_259;
            v163 = 0;
            v164 = (char *)MEMORY[0x1E0DEE9D8];
            while (2)
            {
              if ((v161 & 0xC000000000000001) != 0)
                v165 = (id)MEMORY[0x1A85AEC04](v163, v161);
              else
                v165 = *(id *)(v161 + 8 * v163 + 32);
              v166 = v165;
              v167 = sub_1A57DB39C((uint64_t)v165, 0);

              v168 = *(_QWORD *)(v167 + 16);
              v169 = *((_QWORD *)v164 + 2);
              v170 = v169 + v168;
              if (__OFADD__(v169, v168))
              {
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
LABEL_247:
                __break(1u);
LABEL_248:
                __break(1u);
LABEL_249:
                __break(1u);
LABEL_250:
                __break(1u);
LABEL_251:
                __break(1u);
LABEL_252:
                __break(1u);
LABEL_253:
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                __break(1u);
LABEL_257:
                __break(1u);
LABEL_258:
                __break(1u);
LABEL_259:
                __break(1u);
LABEL_260:
                __break(1u);
LABEL_261:
                __break(1u);
LABEL_262:
                __break(1u);
LABEL_263:
                __break(1u);
              }
              v171 = (char *)swift_isUniquelyReferenced_nonNull_native();
              if ((_DWORD)v171 && v170 <= *((_QWORD *)v164 + 3) >> 1)
              {
                if (!*(_QWORD *)(v167 + 16))
                {
LABEL_175:
                  if (v168)
                    goto LABEL_242;
LABEL_176:
                  swift_bridgeObjectRelease();
                  if (v162 == ++v163)
                    goto LABEL_214;
                  continue;
                }
              }
              else
              {
                if (v169 <= v170)
                  v172 = v169 + v168;
                else
                  v172 = v169;
                v164 = sub_1A581141C(v171, v172, 1, v164);
                if (!*(_QWORD *)(v167 + 16))
                  goto LABEL_175;
              }
              break;
            }
            if ((*((_QWORD *)v164 + 3) >> 1) - *((_QWORD *)v164 + 2) < v168)
              goto LABEL_246;
            swift_arrayInitWithCopy();
            if (v168)
            {
              v173 = *((_QWORD *)v164 + 2);
              v114 = __OFADD__(v173, v168);
              v174 = v173 + v168;
              if (v114)
                goto LABEL_250;
              *((_QWORD *)v164 + 2) = v174;
            }
            goto LABEL_176;
          }
        }
        else
        {
          v162 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFF8) + 0x10);
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v209 = v24;
          v210 = v158;
          if (v162)
            goto LABEL_173;
        }
        v164 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_214:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (*((_QWORD *)v164 + 2))
        {
          v179 = *((_OWORD *)v164 + 5);
          v252 = *((_OWORD *)v164 + 4);
          v253 = v179;
          v180 = *((_OWORD *)v164 + 7);
          v254 = *((_OWORD *)v164 + 6);
          v255 = v180;
          v181 = *((_OWORD *)v164 + 3);
          v250 = *((_OWORD *)v164 + 2);
          v251 = v181;
          sub_1A55032A0((uint64_t)&v250, (uint64_t)v256, (uint64_t *)&unk_1EE7993C0);
          sub_1A57E5B74((uint64_t)&v250);
          swift_bridgeObjectRelease();
          v41 = v219;
          swift_release();
          sub_1A55032A0((uint64_t)v256, (uint64_t)&v257, (uint64_t *)&unk_1EE7993C0);
          if (!*((_QWORD *)&v257 + 1))
            goto LABEL_221;
          v182 = HIBYTE(*((_QWORD *)&v257 + 1)) & 0xFLL;
          if ((*((_QWORD *)&v257 + 1) & 0x2000000000000000) == 0)
            v182 = v257 & 0xFFFFFFFFFFFFLL;
          if (v182 && v251 != v257 && (sub_1A594CD38() & 1) == 0)
          {
            v223 = (char *)sub_1A57DB8FC();
            v224 = v184;
            sub_1A594B5F8();
            sub_1A57DADD8((uint64_t)v41);
            sub_1A594B5F8();
            swift_bridgeObjectRelease();
            sub_1A594B5F8();
            sub_1A57E5C0C((uint64_t)&v250);
            sub_1A57E5B1C((uint64_t)v227);
            v206 = (uint64_t)v223;
            v210 = v224;
          }
          else
          {
LABEL_221:
            v206 = sub_1A57DADD8((uint64_t)v41);
            v210 = v183;
            sub_1A57E5C0C((uint64_t)&v250);
            sub_1A57E5B1C((uint64_t)v227);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v41 = v219;
          swift_release();
          sub_1A57E5B1C((uint64_t)v227);
          v206 = 0;
          v210 = 0;
        }
        v39 = (uint64_t)v216;
        v38 = (uint64_t)v217;
        v40 = v218;
        v24 = v209;
        goto LABEL_9;
      case 0xDuLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1A57E51D8((uint64_t)v227);
        sub_1A55032A0((uint64_t)v229, (uint64_t)v236, &qword_1EE7A0C70);
        if (v237 != 255)
        {
          sub_1A57E4178(v236, (uint64_t)v238);
          sub_1A57E4178(v238, (uint64_t)v239);
          if (v240 == 13)
          {
            v200 = v239[0];
            v93 = v239[1];
            swift_bridgeObjectRelease();
            v205 = v93;
          }
          else
          {
            sub_1A5812354((uint64_t)v229);
          }
        }
        goto LABEL_9;
      case 0x12uLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1A57E51D8((uint64_t)v227);
        sub_1A55032A0((uint64_t)v228, (uint64_t)v231, &qword_1EE7A0C70);
        if (v232 != 255)
        {
          sub_1A57E4178(v231, (uint64_t)v233);
          sub_1A57E4178(v233, (uint64_t)v234);
          if (v235 == 18)
          {
            v199 = v234[0];
            v54 = v234[1];
            swift_bridgeObjectRelease();
            v207 = v54;
          }
          else
          {
            sub_1A5812354((uint64_t)v228);
          }
        }
        goto LABEL_9;
      case 0x13uLL:
        v249 &= 0x7FFFFFFFFFFFFFFuLL;
        v67 = v247;
        v68 = v248;
        swift_bridgeObjectRelease();
        if (v67)
          v69 = v68 - v67;
        else
          v69 = 0;
        if (v69 < 0)
          goto LABEL_253;
        v70 = sub_1A580AA68(0, v69, v67, v68);
        if (v72)
          v73 = v72 + v71;
        else
          v73 = 0;
        if (v72)
          v74 = v72 + v70;
        else
          v74 = 0;
        v221 = 0;
        v222 = 0xE000000000000000;
        v75 = v73 - v74;
        if (v74)
          v76 = v73 - v74;
        else
          v76 = 0;
        swift_retain();
        v77 = MEMORY[0x1A85AD968](v76);
        v220 = 0;
        if (v74)
        {
          if (v75 < 0)
            goto LABEL_262;
          if (v75 >= 1025)
          {
            v77 = swift_stdlib_isStackAllocationSafe();
            if ((v77 & 1) == 0)
            {
              v78 = swift_slowAlloc();
              v223 = (char *)v78;
              v224 = v73 - v74;
              v225 = 0;
              sub_1A57FD16C((int64_t)&v223, &v221, v74, v73, v41, &v220);
              MEMORY[0x1A85B1964](v78, -1, -1);
              goto LABEL_147;
            }
          }
        }
        else
        {
          v75 = 0;
        }
        MEMORY[0x1E0C80A78](v77);
        v223 = (char *)&v199 - v137;
        v224 = v75;
        v225 = 0;
        sub_1A57FD16C((int64_t)&v223, &v221, v74, v73, v41, &v220);
        if (v24)
          goto LABEL_264;
LABEL_147:
        swift_release();
        v211 = v222;
        v138 = (void *)sub_1A594B3F4();
        v139 = IMAP2EmailCore_ECEmailAddressesFromHeader(v138);

        sub_1A57DBFF8();
        v140 = sub_1A594B958();

        if (v140 >> 62)
        {
          v142 = v140;
          _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
          v141 = sub_1A594CA38();
          v209 = v24;
          if (!v141)
            goto LABEL_209;
LABEL_149:
          if (v141 < 1)
            goto LABEL_258;
          v143 = 0;
          v144 = v142;
          v145 = v142 & 0xC000000000000001;
          v146 = (char *)MEMORY[0x1E0DEE9D8];
          while (1)
          {
            if (v145)
              v147 = (id)MEMORY[0x1A85AEC04](v143, v144);
            else
              v147 = *(id *)(v144 + 8 * v143 + 32);
            v148 = v147;
            v149 = sub_1A57DB39C((uint64_t)v147, 0);

            v150 = *(_QWORD *)(v149 + 16);
            v151 = *((_QWORD *)v146 + 2);
            v152 = v151 + v150;
            if (__OFADD__(v151, v150))
              goto LABEL_238;
            v153 = (char *)swift_isUniquelyReferenced_nonNull_native();
            if ((_DWORD)v153 && v152 <= *((_QWORD *)v146 + 3) >> 1)
            {
              if (*(_QWORD *)(v149 + 16))
                goto LABEL_165;
            }
            else
            {
              if (v151 <= v152)
                v154 = v151 + v150;
              else
                v154 = v151;
              v146 = sub_1A581141C(v153, v154, 1, v146);
              if (*(_QWORD *)(v149 + 16))
              {
LABEL_165:
                if ((*((_QWORD *)v146 + 3) >> 1) - *((_QWORD *)v146 + 2) < v150)
                  goto LABEL_245;
                swift_arrayInitWithCopy();
                if (v150)
                {
                  v155 = *((_QWORD *)v146 + 2);
                  v114 = __OFADD__(v155, v150);
                  v156 = v155 + v150;
                  if (v114)
                    goto LABEL_249;
                  *((_QWORD *)v146 + 2) = v156;
                }
                goto LABEL_152;
              }
            }
            if (v150)
              goto LABEL_241;
LABEL_152:
            swift_bridgeObjectRelease();
            if (v141 == ++v143)
              goto LABEL_210;
          }
        }
        v141 = *(_QWORD *)((v140 & 0xFFFFFFFFFFFFF8) + 0x10);
        v142 = v140;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v209 = v24;
        if (v141)
          goto LABEL_149;
LABEL_209:
        v146 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_210:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v41 = v219;
        swift_retain();
        v24 = v209;
        v211 = sub_1A581216C((uint64_t)v146, (uint64_t)v41);
LABEL_211:
        swift_bridgeObjectRelease();
        swift_release();
        sub_1A57E5B1C((uint64_t)v227);
        v39 = (uint64_t)v216;
        v38 = (uint64_t)v217;
        v40 = v218;
LABEL_9:
        v33 = sub_1A580E7F0();
        if (v36 != 2)
          continue;
        swift_release();
        v185 = v214;
        if (!v207)
        {
          v37 = (uint64_t)v208;
          goto LABEL_231;
        }
        v37 = (uint64_t)v208;
        v186 = v205;
        v187 = v213;
        if (!v205)
        {
LABEL_231:
          sub_1A5510284(v37, &qword_1EE796470);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_232:
          v188 = type metadata accessor for WatchOSHeaderInfo();
          return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v188 - 8) + 56))(v215, 1, 1, v188);
        }
        sub_1A55032A0((uint64_t)v208, v39, &qword_1EE796470);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v39, 1, v185) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1A5510284(v39, &qword_1EE796470);
          goto LABEL_232;
        }
        v190 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
        v190(v38, v39, v185);
        v191 = type metadata accessor for WatchOSHeaderInfo();
        v192 = v185;
        v193 = v191;
        v194 = v215;
        v190((uint64_t)v215 + *(int *)(v191 + 40), v38, v192);
        v195 = v210;
        *v194 = v206;
        v194[1] = v195;
        v196 = v212;
        v194[2] = v211;
        v194[3] = v196;
        v197 = v199;
        v194[4] = v187;
        v194[5] = v197;
        v198 = v200;
        v194[6] = v207;
        v194[7] = v198;
        v194[8] = v186;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 56))(v194, 0, 1, v193);
      default:
        sub_1A57E5B1C((uint64_t)v227);
        goto LABEL_9;
    }
  }
}

char *sub_1A5810DB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B288);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5810EA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B290);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1A5810FAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA780);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796AE8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A58110E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796278);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A58111DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B280);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A58112D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A58112FC(a1, a2, a3, a4, &qword_1EE79B278);
}

char *sub_1A58112E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A58112FC(a1, a2, a3, a4, &qword_1EE79B260);
}

char *sub_1A58112FC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1A581141C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE7A12E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811534(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B270);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811650(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B268);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A581176C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA778);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811888(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA770);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811988(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B250);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811A88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B298);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1A5811B90(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B258);
  v10 = *(_QWORD *)(type metadata accessor for ReplacementNode() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_0(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for ReplacementNode() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1A5811D04(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B248);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5811E18(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5811E6C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5811E34(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5811F6C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5811E50(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A581206C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5811E6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA768);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A5811F6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B240);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A581206C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7962A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1A581216C(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v29 = MEMORY[0x1E0DEE9D8];
    sub_1A5811E50(0, v2, 0);
    v3 = v29;
    v5 = (__int128 *)(a1 + 32);
    do
    {
      v6 = v5[3];
      v23 = v5[2];
      v24 = v6;
      v7 = v5[5];
      v25 = v5[4];
      v26 = v7;
      v8 = v5[1];
      v21 = *v5;
      v22 = v8;
      sub_1A55032A0((uint64_t)&v21, (uint64_t)v27, (uint64_t *)&unk_1EE7993C0);
      sub_1A55032A0((uint64_t)v27, (uint64_t)&v28, (uint64_t *)&unk_1EE7993C0);
      if (!*((_QWORD *)&v28 + 1))
        goto LABEL_9;
      v9 = HIBYTE(*((_QWORD *)&v28 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v28 + 1) & 0x2000000000000000) == 0)
        v9 = v28 & 0xFFFFFFFFFFFFLL;
      if (v9 && v22 != v28 && (sub_1A594CD38() & 1) == 0)
      {
        sub_1A57E5B74((uint64_t)&v21);
        v19 = sub_1A57DB8FC();
        v20 = v16;
        sub_1A594B5F8();
        sub_1A57DADD8(a2);
        sub_1A594B5F8();
        swift_bridgeObjectRelease();
        sub_1A594B5F8();
        sub_1A57E5C0C((uint64_t)&v21);
        v10 = v19;
        v12 = v20;
      }
      else
      {
LABEL_9:
        sub_1A57E5B74((uint64_t)&v21);
        v10 = sub_1A57DADD8(a2);
        v12 = v11;
        sub_1A57E5C0C((uint64_t)&v21);
      }
      v29 = v3;
      v14 = *(_QWORD *)(v3 + 16);
      v13 = *(_QWORD *)(v3 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1A5811E50((char *)(v13 > 1), v14 + 1, 1);
        v3 = v29;
      }
      *(_QWORD *)(v3 + 16) = v14 + 1;
      v15 = v3 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v10;
      *(_QWORD *)(v15 + 40) = v12;
      v5 += 6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1A5812354(uint64_t a1)
{
  sub_1A57EB9E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  return a1;
}

uint64_t AccountLoggerID.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*AccountLoggerID.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t AccountLoggerID.init(accountIdentifier:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7964E0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A594A128();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v28) = 0;
  if (!a2)
    return 0;
  sub_1A594A0F8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1A5812690((uint64_t)v6);
    if ((a2 & 0x1000000000000000) != 0)
    {
      a1 = sub_1A5812CC4();
      v25 = v24;
      swift_bridgeObjectRelease();
      a2 = v25;
      if ((v25 & 0x2000000000000000) == 0)
        goto LABEL_5;
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
LABEL_5:
      if ((a1 & 0x1000000000000000) != 0)
      {
        v11 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v12 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v11 = (uint64_t *)sub_1A594C7D4();
      }
      v13 = 4;
      if (v12 < 4)
        v13 = v12;
      if (!v11)
        v13 = 0;
      if (v13 < 0)
        __break(1u);
      if (v11)
        v14 = (char *)v11 + v12;
      else
        v14 = 0;
      v15 = v13;
      goto LABEL_23;
    }
    v26 = a1;
    v27 = a2 & 0xFFFFFFFFFFFFFFLL;
    if ((a2 & 0xC00000000000000) != 0)
      v15 = 4;
    else
      v15 = HIBYTE(a2) & 0xF;
    v14 = (char *)&v26 + (HIBYTE(a2) & 0xF);
    v11 = &v26;
LABEL_23:
    sub_1A5812EE8(0, v15, (uint64_t)v11, (uint64_t)v14, (uint64_t)&v28 + 4);
    swift_bridgeObjectRelease();
    return bswap32(HIDWORD(v28));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v26 = sub_1A594A11C();
  LOWORD(v27) = v17;
  BYTE2(v27) = v18;
  BYTE3(v27) = v19;
  BYTE4(v27) = v20;
  BYTE5(v27) = v21;
  BYTE6(v27) = v22;
  HIBYTE(v27) = v23;
  sub_1A5812EE8(0, 4, (uint64_t)&v26, (uint64_t)&v28, (uint64_t)&v28 + 4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return bswap32(HIDWORD(v28));
}

uint64_t sub_1A5812690(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7964E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AccountLoggerID.debugDescription.getter()
{
  uint64_t result;
  uint64_t v1;

  sub_1A5812FA4();
  sub_1A594B6DC();
  result = sub_1A594B5A4();
  if (__OFSUB__(8, result))
  {
    __break(1u);
  }
  else
  {
    v1 = MEMORY[0x1A85ADB48](48, 0xE100000000000000, 8 - result);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t sub_1A5812778()
{
  uint64_t result;
  uint64_t v1;

  sub_1A5812FA4();
  sub_1A594B6DC();
  result = sub_1A594B5A4();
  if (__OFSUB__(8, result))
  {
    __break(1u);
  }
  else
  {
    v1 = MEMORY[0x1A85ADB48](48, 0xE100000000000000, 8 - result);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t EngineAndAccountLoggerID.engine.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*EngineAndAccountLoggerID.engine.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t EngineAndAccountLoggerID.account.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t EngineAndAccountLoggerID.account.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

double (*EngineAndAccountLoggerID.account.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t EngineAndAccountLoggerID.init(engine:account:)(unsigned __int8 a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t EngineAccountMailboxLoggerID.engine.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*EngineAccountMailboxLoggerID.engine.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t EngineAccountMailboxLoggerID.account.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t EngineAccountMailboxLoggerID.account.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

double (*EngineAccountMailboxLoggerID.account.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t EngineAccountMailboxLoggerID.mailbox.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t EngineAccountMailboxLoggerID.mailbox.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = a2;
  return result;
}

double (*EngineAccountMailboxLoggerID.mailbox.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t EngineAccountMailboxLoggerID.init(engine:account:mailbox:)(unsigned __int8 a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t variable initialization expression of MailboxMetadata.validity()
{
  return 0x100000000;
}

uint64_t variable initialization expression of MailboxMetadata.fetchedWindow()
{
  return 0;
}

uint64_t variable initialization expression of MailboxMetadata.highestModificationSequenceValue()
{
  return 0;
}

uint64_t variable initialization expression of MailboxSyncStatus.serverUnreadCount()
{
  return 0;
}

uint64_t variable initialization expression of MessageFlagUpdate.flags()
{
  return 2;
}

uint64_t variable initialization expression of MessageFlagUpdate.gmailLabels()
{
  return 0;
}

uint64_t variable initialization expression of Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount()
{
  return 0;
}

unint64_t variable initialization expression of Activity.statuses()
{
  return sub_1A5812994(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1A5812994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B570);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B8E8);
  v6 = sub_1A594CA5C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A5813140(v12, (uint64_t)v5);
    v14 = *v5;
    v15 = v5[1];
    result = sub_1A5816C08(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for Activity.MailboxStatus(0);
    result = sub_1A5813188(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Activity.mailboxesWithPendingWork()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t variable initialization expression of Activity.accountError@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5812C7C(type metadata accessor for ConnectionStatus.Error, a1);
}

uint64_t variable initialization expression of Activity.MailboxStatus.Info.fetch()
{
  return 0;
}

uint64_t variable initialization expression of ConnectionConfiguration.prohibitedInterfaceTypes()
{
  return 0;
}

{
  return 0;
}

uint64_t variable initialization expression of ConnectionConfiguration.sourceApplicationBundleIdentifier()
{
  return 0;
}

{
  return 0;
}

uint64_t variable initialization expression of ConnectionConfiguration.networkAccountIdentifier()
{
  return 0;
}

{
  return 0;
}

uint64_t variable initialization expression of FlagsWithModifications.originalFlags()
{
  return 2;
}

uint64_t variable initialization expression of FlagsUpdate.forwarded()
{
  return 2;
}

uint64_t variable initialization expression of FlagsUpdate.redirected()
{
  return 2;
}

uint64_t variable initialization expression of FlagsUpdate.junk()
{
  return 3;
}

uint64_t variable initialization expression of MessageMetadata.gmailLabels()
{
  return 0;
}

uint64_t variable initialization expression of MessageMetadata.messageHeader@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5812C7C(type metadata accessor for MessageMetadata.UnparsedHeader, a1);
}

uint64_t variable initialization expression of MessageSectionData.Segment.initial@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[184];

  sub_1A55D935C((uint64_t)v3);
  return sub_1A55032A0((uint64_t)v3, a1, &qword_1EE798598);
}

uint64_t variable initialization expression of MessageSectionData.Segment.Initial.bodyStructure@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[184];

  sub_1A55DECF8((uint64_t)v3);
  return sub_1A55032A0((uint64_t)v3, a1, &qword_1EE796958);
}

uint64_t variable initialization expression of RemoteMailbox.specialUse()
{
  return 7;
}

double variable initialization expression of RemoteMailbox.status@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 41) = 1;
  return result;
}

uint64_t variable initialization expression of RemoteMailbox.Status.unreadMessagesCount()
{
  return 0;
}

uint64_t variable initialization expression of RemoteMailbox.Status.highestModificationSequence()
{
  return 0;
}

uint64_t variable initialization expression of SearchRequest.RangesToExclude.skipForMessageCount()
{
  return 0;
}

uint64_t variable initialization expression of ConnectionStatus.Error.details@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5812C7C(type metadata accessor for ConnectionStatus.Error.Details, a1);
}

uint64_t variable initialization expression of ConnectionStatus.Error.backedOffUntil@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5812C7C((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t sub_1A5812C7C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of SyncRequest.mailboxes()
{
  return 0;
}

uint64_t sub_1A5812CC4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1A594B718();
  v4 = sub_1A5812D40(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A5812D40(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1A5540DC8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1A5812E84(v9, 0);
      v12 = sub_1A5540EB4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1A85AD9BC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1A85AD9BCLL);
LABEL_9:
      sub_1A594C7D4();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1A85AD9BC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

_QWORD *sub_1A5812E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B368);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A5812EE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[8];

  v12[4] = result;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  if (a5)
  {
    MEMORY[0x1E0C80A78](result);
    v12[0] = v7;
    v12[1] = v8;
    v12[2] = v9;
    v12[3] = v5;
    if (v9)
    {
      v10 = v5 - v6;
      v11 = v6;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    return sub_1A58131EC(v11, v10, v12, (uint64_t (*)(uint64_t, uint64_t))sub_1A58131CC);
  }
  return result;
}

unint64_t sub_1A5812FA4()
{
  unint64_t result;

  result = qword_1EE79B4C8;
  if (!qword_1EE79B4C8)
  {
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEE138], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&qword_1EE79B4C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountLoggerID()
{
  return &type metadata for AccountLoggerID;
}

_QWORD *__swift_memcpy8_4_3(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for EngineAndAccountLoggerID()
{
  return &type metadata for EngineAndAccountLoggerID;
}

uint64_t sub_1A581301C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for EngineAccountMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8_2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EngineAccountMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for EngineAccountMailboxLoggerID()
{
  return &type metadata for EngineAccountMailboxLoggerID;
}

void type metadata accessor for ThermalState(uint64_t a1)
{
  sub_1A5658218(a1, (unint64_t *)&unk_1EE7A1370);
}

uint64_t sub_1A5813140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A5813188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Activity.MailboxStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1A58131CC(void *__src, size_t __len)
{
  uint64_t v2;

  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
      __break(1u);
    else
      return memmove(*(void **)(v2 + 40), __src, __len);
  }
  return __src;
}

uint64_t sub_1A58131EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = sub_1A56F12C4(0, *a3, v9, v8);
  result = sub_1A56F12C4(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1)
    v13 = a1 + v10;
  else
    v13 = 0;
  return a4(v13, v12);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1A5658218(a1, &qword_1EE7AA788);
}

uint64_t static Action.FetchedWindowUpdate.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_1A5813D6C(a1, a2 & 1, a3, a4 & 1);
}

uint64_t static Action.UnreadCountOutsideWindowOfInterest.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  return sub_1A5813DA0(a1, a2, a3, a4 & 0x1FF, a5, a6, a7, a8 & 0x1FF);
}

uint64_t sub_1A58132E0(_QWORD *a1, _QWORD *a2)
{
  return static Action.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t Action.Kind.hash(into:)()
{
  return sub_1A594CE88();
}

BOOL static Action.Kind.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Action.Kind.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t Action.kind.getter(unint64_t a1)
{
  return asc_1A5A13658[(a1 >> 58) & 0x3C | (a1 >> 1) & 3];
}

uint64_t Action.Kind.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A58133C0 + 4 * byte_1A59D9590[a1]))(0x6944656E69676E65, 0xEE00747261745364);
}

unint64_t sub_1A58133C0()
{
  return 0xD000000000000017;
}

uint64_t sub_1A5813794()
{
  unsigned __int8 *v0;

  return Action.Kind.description.getter(*v0);
}

uint64_t ActionID.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*ActionID.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ActionID.init(rawValue:)(int a1)
{
  return a1 & 0xFFFFFF;
}

uint64_t ActionID.init()()
{
  return 0;
}

uint64_t ActionID.next.getter(int a1)
{
  return (a1 + 1) & 0xFFFFFF;
}

uint64_t ActionID.description.getter()
{
  sub_1A5812FA4();
  return sub_1A594B6DC();
}

uint64_t sub_1A5813810()
{
  sub_1A5812FA4();
  return sub_1A594B6DC();
}

unint64_t MailboxMetadata.validity.getter()
{
  unsigned int *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t MailboxMetadata.validity.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

double (*MailboxMetadata.validity.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxMetadata.fetchedWindow.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MailboxMetadata.fetchedWindow.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

double (*MailboxMetadata.fetchedWindow.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxMetadata.highestModificationSequenceValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MailboxMetadata.highestModificationSequenceValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

double (*MailboxMetadata.highestModificationSequenceValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxMetadata.init(validity:fetchedWindow:highestModificationSequenceValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_DWORD *)a6 = result;
  *(_BYTE *)(a6 + 4) = BYTE4(result) & 1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3 & 1;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

BOOL sub_1A5813910(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return _s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0((_BOOL8)v5, (uint64_t)v7);
}

uint64_t MailboxSyncStatus.latestSyncedChange.getter(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t MailboxSyncStatus.latestSyncedChange.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

double (*MailboxSyncStatus.latestSyncedChange.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxSyncStatus.serverUnreadCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MailboxSyncStatus.serverUnreadCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

double (*MailboxSyncStatus.serverUnreadCount.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxSyncStatus.init(latestSyncedChange:serverUnreadCount:)(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t static MailboxSyncStatus.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  int v6;
  uint64_t result;

  if ((a1 & 0x100000000) != 0)
  {
    if ((a4 & 0x100000000) == 0)
      return 0;
LABEL_6:
    if ((a3 & 1) != 0)
    {
      if ((a6 & 1) != 0)
        return 1;
    }
    else if ((a6 & 1) == 0 && a2 == a5)
    {
      return 1;
    }
    return 0;
  }
  v6 = a1;
  result = 0;
  if ((a4 & 0x100000000) == 0 && v6 == (_DWORD)a4)
    goto LABEL_6;
  return result;
}

uint64_t sub_1A5813A2C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  v2 = *(_BYTE *)(a2 + 4);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 16))
      return 1;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
      v4 = *(_BYTE *)(a2 + 16);
    else
      v4 = 1;
    if ((v4 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t MessageFlagUpdate.message.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*MessageFlagUpdate.message.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t MessageFlagUpdate.flags.getter(uint64_t a1, unsigned int a2)
{
  return __PAIR64__(a2, HIDWORD(a1));
}

uint64_t MessageFlagUpdate.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 4) = result;
  return result;
}

double (*MessageFlagUpdate.flags.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageFlagUpdate.gmailLabels.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MessageFlagUpdate.gmailLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

double (*MessageFlagUpdate.gmailLabels.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t MessageFlagUpdate.init(message:flags:gmailLabels:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2 && a3 == 0)
    return 0;
  else
    return a1 | (unint64_t)(a2 << 32);
}

BOOL static MessageFlagUpdate.__derived_struct_equals(_:_:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  return sub_1A5813E28(a1, a2, a3, a4, a5, a6);
}

BOOL sub_1A5813B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 4);
  v3 = *(_QWORD *)(a1 + 16);
  HIDWORD(v6) = v2;
  v4 = v6;
  LODWORD(v7) = *(_DWORD *)a2;
  *(_QWORD *)((char *)&v7 + 4) = *(_QWORD *)(a2 + 4);
  return sub_1A5813E28(v4, HIDWORD(v2), v3, v7, DWORD2(v7), *(_QWORD *)(a2 + 16));
}

uint64_t static Action.UnreadCountOutsideWindowOfInterest.Count.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_1A5813EFC(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1);
}

uint64_t sub_1A5813BDC(uint64_t a1, uint64_t a2)
{
  return sub_1A5813DA0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 25) << 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24) | (unsigned __int16)(*(unsigned __int8 *)(a2 + 25) << 8));
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

double (*Action.UnreadCountOutsideWindowOfInterest.Count.count.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.range.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.range.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

double (*Action.UnreadCountOutsideWindowOfInterest.Count.range.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

double (*Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1A5813C90(uint64_t a1, uint64_t a2)
{
  return sub_1A5813EFC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_1A5813CBC(uint64_t a1, uint64_t a2)
{
  return sub_1A5813D6C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

BOOL _s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0(_BOOL8 result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a2 + 4);
  if ((*(_BYTE *)(result + 4) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
      return 0;
  }
  else
  {
    if (*(_DWORD *)result != *(_DWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  v3 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(result + 8))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(result + 32) & 1) != 0)
    return (*(_BYTE *)(a2 + 32) & 1) != 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (((v5 | v4) & 0x8000000000000000) == 0)
    return v5 == v4;
  __break(1u);
  return result;
}

uint64_t sub_1A5813D6C(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  _BOOL4 v5;
  unsigned int v6;

  v5 = (a4 & 1) == 0 && a3 == a1;
  v6 = a4 & (a3 == 0);
  if (a1)
    v6 = a4 & (a3 != 0);
  if ((a2 & 1) != 0)
    return v6;
  else
    return v5;
}

uint64_t sub_1A5813DA0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  BOOL v9;
  unsigned int v10;
  BOOL v11;

  if ((a4 & 0x100) != 0)
  {
    if (a3 | a2 | a1 || (_BYTE)a4)
    {
      if ((_BYTE)a8)
        v11 = 0;
      else
        v11 = (a7 | a6 | a5) == 0;
      v10 = !v11;
    }
    else
    {
      if ((_BYTE)a8)
        v9 = 0;
      else
        v9 = (a7 | a6 | a5) == 0;
      v10 = v9;
    }
    if ((a8 & 0x100) != 0)
      return v10;
    else
      return 0;
  }
  else
  {
    if ((a8 & 0x100) == 0 && a1 == a5 && a6 == a2)
    {
      if ((a4 & 1) != 0)
      {
        if ((a8 & 1) != 0)
          return 1;
      }
      else if ((a8 & 1) == 0 && a3 == a7)
      {
        return 1;
      }
    }
    return 0;
  }
}

BOOL sub_1A5813E28(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  char v9;

  if ((_DWORD)a4 != (_DWORD)a1)
    return 0;
  if (BYTE4(a1) == 2)
  {
    if (BYTE4(a4) != 2)
      return 0;
  }
  else if (BYTE4(a4) == 2
         || (sub_1A5828E0C(__PAIR64__(a2, HIDWORD(a1)) & 0xFFFFFFFF01010101, __PAIR64__(a5, HIDWORD(a4)) & 0xFFFFFFFF01010101) & 1) == 0)
  {
    return 0;
  }
  if (a3)
  {
    if (!a6)
      return 0;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v8 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v9 = sub_1A54ED14C(v8, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v9 & 1) != 0;
  }
  return !a6;
}

uint64_t sub_1A5813EFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  result = 0;
  if (a1 == a5 && a6 == a2)
  {
    if ((a4 & 1) != 0)
    {
      if ((a8 & 1) != 0)
        return 1;
    }
    else if ((a8 & 1) == 0 && a3 == a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void _s16IMAP2Persistence6ActionO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for Activity(0);
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for MessageSectionData(0);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for MessageHeader();
  MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  __asm { BR              X10 }
}

uint64_t sub_1A5814084()
{
  unint64_t v0;
  uint64_t v1;

  if ((v0 >> 58) & 0x3C | (v0 >> 1) & 3)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD))sub_1A5858B20)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v0 + 16));
}

unint64_t sub_1A58152BC()
{
  unint64_t result;

  result = qword_1EE7AA790;
  if (!qword_1EE7AA790)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Action.Kind, &type metadata for Action.Kind);
    atomic_store(result, (unint64_t *)&qword_1EE7AA790);
  }
  return result;
}

unint64_t sub_1A5815304()
{
  unint64_t result;

  result = qword_1EE7AA798;
  if (!qword_1EE7AA798)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ActionID, &type metadata for ActionID);
    atomic_store(result, (unint64_t *)&qword_1EE7AA798);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Action(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for Action()
{
  return swift_release();
}

_QWORD *assignWithCopy for Action(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8_3(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for Action(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Action(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x57 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 87);
  v3 = ((((*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7) >> 1) & 0xFFFFFFBF | ((*(_QWORD *)a1 & 1) << 6)) ^ 0x7F;
  if (v3 >= 0x56)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x56)
  {
    *(_QWORD *)result = a2 - 87;
    if (a3 >= 0x57)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x57)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 6) & 1 | (2 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A58154C4(_QWORD *a1)
{
  unsigned int v1;

  v1 = (*a1 >> 58) & 0x3C | (*a1 >> 1) & 3;
  if (v1 <= 0x28)
    return v1;
  else
    return (*a1 >> 3) + 41;
}

_QWORD *sub_1A58154E8(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFF9uLL;
  return result;
}

unint64_t *sub_1A58154FC(unint64_t *result, uint64_t a2)
{
  if (a2 < 0x29)
    *result = (a2 << 58) & 0xF000000000000000 | (2 * (a2 & 3)) | *result & 0xFFFFFFFFFFFFFF8;
  else
    *result = (8 * (a2 - 41)) | 0xA000000000000002;
  return result;
}

ValueMetadata *type metadata accessor for Action()
{
  return &type metadata for Action;
}

_BYTE *__swift_memcpy1_1_6(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Action.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD7)
    goto LABEL_17;
  if (a2 + 41 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 41) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 41;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 41;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 41;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2A;
  v8 = v6 - 42;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Action.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 41 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 41) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD6)
    return ((uint64_t (*)(void))((char *)&loc_1A5815630 + 4 * byte_1A59D9613[v4]))();
  *a1 = a2 + 41;
  return ((uint64_t (*)(void))((char *)sub_1A5815664 + 4 * byte_1A59D960E[v4]))();
}

uint64_t sub_1A5815664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581566C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5815674);
  return result;
}

uint64_t sub_1A5815680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5815688);
  *(_BYTE *)result = a2 + 41;
  return result;
}

uint64_t sub_1A581568C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5815694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Action.Kind()
{
  return &type metadata for Action.Kind;
}

ValueMetadata *type metadata accessor for ActionID()
{
  return &type metadata for ActionID;
}

__n128 __swift_memcpy33_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MailboxMetadata()
{
  return &type metadata for MailboxMetadata;
}

__n128 __swift_memcpy17_8_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MailboxSyncStatus()
{
  return &type metadata for MailboxSyncStatus;
}

uint64_t sub_1A581570C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for MessageFlagUpdate(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8_5(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MessageFlagUpdate(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessageFlagUpdate()
{
  return &type metadata for MessageFlagUpdate;
}

__n128 __swift_memcpy26_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Action.UnreadCountOutsideWindowOfInterest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Action.UnreadCountOutsideWindowOfInterest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 26) = v3;
  return result;
}

uint64_t sub_1A581585C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5815878(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    *(_BYTE *)(result + 25) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Action.UnreadCountOutsideWindowOfInterest()
{
  return &type metadata for Action.UnreadCountOutsideWindowOfInterest;
}

__n128 __swift_memcpy25_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Action.UnreadCountOutsideWindowOfInterest.Count()
{
  return &type metadata for Action.UnreadCountOutsideWindowOfInterest.Count;
}

uint64_t __swift_memcpy9_4_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Action.FetchedWindowUpdate(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Action.FetchedWindowUpdate()
{
  return &type metadata for Action.FetchedWindowUpdate;
}

uint64_t sub_1A5815924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE7A03E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A581596C()
{
  unint64_t result;

  result = qword_1EE797038;
  if (!qword_1EE797038)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for UID, &type metadata for UID);
    atomic_store(result, (unint64_t *)&qword_1EE797038);
  }
  return result;
}

uint64_t Activity.init(mailboxesWithPendingWork:accountError:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a3 = sub_1A5812994(MEMORY[0x1E0DEE9D8]);
  v6 = (uint64_t)a3 + *(int *)(type metadata accessor for Activity(0) + 24);
  v7 = type metadata accessor for ConnectionStatus.Error(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  a3[1] = a1;
  return sub_1A5819AF8(a2, v6);
}

uint64_t Activity.MailboxStatus.Info.isCheckingForNewMessages.getter(char a1)
{
  return a1 & 1;
}

uint64_t Activity.MailboxStatus.Info.isCheckingForNewMessages.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*Activity.MailboxStatus.Info.isCheckingForNewMessages.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Activity.MailboxStatus.Info.fetch.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Activity.MailboxStatus.Info.fetch.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a3 & 1;
  return result;
}

double (*Activity.MailboxStatus.Info.fetch.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Activity.MailboxStatus.Info.isSyncing.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (a4 >> 8) & 1;
}

uint64_t Activity.MailboxStatus.Info.isSyncing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

double (*Activity.MailboxStatus.Info.isSyncing.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Activity.MailboxStatus.Info.FetchProgress.remaining.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

double (*Activity.MailboxStatus.Info.FetchProgress.remaining.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Activity.MailboxStatus.Info.FetchProgress.completed.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Activity.MailboxStatus.Info.FetchProgress.completed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

double (*Activity.MailboxStatus.Info.FetchProgress.completed.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Activity.MailboxStatus.Info.FetchProgress.total.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

BOOL static Activity.MailboxStatus.Info.FetchProgress.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

IMAP2Persistence::Activity::MailboxStatus::Info __swiftcall Activity.MailboxStatus.Info.init(isCheckingForNewMessages:fetch:isSyncing:)(Swift::Bool isCheckingForNewMessages, IMAP2Persistence::Activity::MailboxStatus::Info::FetchProgress_optional fetch, Swift::Bool isSyncing)
{
  __int16 v3;
  _BOOL8 v4;
  Swift::Bool v5;
  IMAP2Persistence::Activity::MailboxStatus::Info result;

  if (isSyncing)
    v3 = 256;
  else
    v3 = 0;
  v4 = isCheckingForNewMessages;
  *(_WORD *)&fetch.is_nil = v3 & 0xFFFE | fetch.is_nil;
  result.fetch = fetch;
  result.isCheckingForNewMessages = v4;
  *(_DWORD *)result.gap1 = *(_DWORD *)((char *)&v4 + 1);
  *(_WORD *)&result.gap1[4] = *(_WORD *)((char *)&v4 + 5);
  result.gap1[6] = HIBYTE(v4);
  result.isSyncing = v5;
  return result;
}

uint64_t static Activity.MailboxStatus.Info.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, __int16 a4, int a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  uint64_t result;

  if (((a1 ^ a5) & 1) != 0)
    return 0;
  if ((a4 & 1) != 0)
  {
    if ((a8 & 1) == 0)
      return 0;
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  }
  result = 0;
  if ((a8 & 1) == 0 && a2 == a6 && a3 == a7)
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  return result;
}

uint64_t sub_1A5815B78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2)
    return 0;
  if ((a1[24] & 1) != 0)
  {
    if ((a2[24] & 1) == 0)
      return 0;
  }
  else
  {
    if ((a2[24] & 1) != 0)
      return 0;
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1) || *((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2))
      return 0;
  }
  return a1[25] ^ a2[25] ^ 1u;
}

uint64_t Activity.MailboxStatus.isSelectedAndInSync.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char v5;
  uint64_t v7;

  v1 = type metadata accessor for Activity.MailboxStatus(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A55034B8(v0, (uint64_t)v3, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1A55034FC((uint64_t)v3, type metadata accessor for Activity.MailboxStatus);
  }
  else if ((*v3 & 1) == 0)
  {
    v5 = (v3[24] | (*((_QWORD *)v3 + 1) == 0)) & (v3[25] ^ 1);
    return v5 & 1;
  }
  v5 = 0;
  return v5 & 1;
}

uint64_t Activity.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ConnectionStatus.Error(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  MEMORY[0x1E0C80A78](v11);
  v39 = (uint64_t)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798638);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Activity.MailboxStatus(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v3;
  v22 = *(_QWORD *)(v21 + 16);
  v42 = a2;
  v43 = a3;
  if (v22)
  {
    v38 = v4;
    v23 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v24 = sub_1A5816C08(v23, a2);
    if ((v25 & 1) != 0)
    {
      sub_1A55034B8(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v17 + 72) * v24, (uint64_t)v15, type metadata accessor for Activity.MailboxStatus);
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v26(v15, 0, 1, v16);
    }
    else
    {
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v26(v15, 1, 1, v16);
    }
    v4 = v38;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      sub_1A54E3394((uint64_t)v15, (uint64_t)v20, type metadata accessor for Activity.MailboxStatus);
      v35 = (uint64_t)v20;
      v34 = v43;
      sub_1A54E3394(v35, v43, type metadata accessor for Activity.MailboxStatus);
      goto LABEL_12;
    }
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v26)(v15, 1, 1, v16, v18);
  }
  sub_1A5510284((uint64_t)v15, &qword_1EE798638);
  v27 = type metadata accessor for Activity(0);
  sub_1A54E330C((uint64_t)v4 + *(int *)(v27 + 24), (uint64_t)v10, &qword_1EE798560);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v41);
  v29 = v42;
  if (v28 != 1)
  {
    v32 = v39;
    sub_1A54E3394((uint64_t)v10, v39, type metadata accessor for ConnectionStatus.Error);
    v33 = v32;
    v34 = v43;
    sub_1A54E3394(v33, v43, type metadata accessor for ConnectionStatus.Error);
    swift_storeEnumTagMultiPayload();
LABEL_12:
    v31 = v34;
    goto LABEL_13;
  }
  sub_1A5510284((uint64_t)v10, &qword_1EE798560);
  if ((sub_1A5815FC4(a1, v29, v4[1]) & 1) == 0)
  {
    v31 = v43;
    v36 = 1;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v31, v36, 1, v16);
  }
  v30 = v43;
  swift_storeEnumTagMultiPayload();
  v31 = v30;
LABEL_13:
  v36 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v31, v36, 1, v16);
}

uint64_t sub_1A5815FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  sub_1A594CE64();
  sub_1A594CE88();
  v6 = sub_1A594CED0();
  v7 = -1 << *(_BYTE *)(a3 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v8);
    if (v10[1] == a2)
    {
      v11 = *v10;
      v12 = *(_QWORD *)(v11 + 16);
      if (v12 == *(_QWORD *)(a1 + 16))
      {
        if (!v12 || v11 == a1)
          return 1;
        if (*(unsigned __int8 *)(v11 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v12 == 1)
            return 1;
          if (*(unsigned __int8 *)(v11 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v12 == 2)
              return 1;
            if (*(unsigned __int8 *)(v11 + 34) == *(unsigned __int8 *)(a1 + 34))
              break;
          }
        }
      }
    }
LABEL_4:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  v13 = (unsigned __int8 *)(v11 + 35);
  v14 = v12 - 3;
  v15 = (unsigned __int8 *)(a1 + 35);
  while (v14)
  {
    v17 = *v13++;
    v16 = v17;
    v18 = *v15++;
    --v14;
    if (v16 != v18)
      goto LABEL_4;
  }
  return 1;
}

uint64_t sub_1A5816118(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  sub_1A594CE64();
  sub_1A594CE88();
  v6 = sub_1A594CED0();
  v7 = -1 << *(_BYTE *)(a3 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    v10 = *(_QWORD *)(a3 + 48) + 16 * v8;
    if ((*(unsigned int *)(v10 + 8) | ((unint64_t)*(unsigned int *)(v10 + 8) << 32)) == (a2 | ((unint64_t)a2 << 32)))
    {
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v11 + 16);
      if (v12 == *(_QWORD *)(a1 + 16))
      {
        if (!v12 || v11 == a1)
          return 1;
        if (*(unsigned __int8 *)(v11 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v12 == 1)
            return 1;
          if (*(unsigned __int8 *)(v11 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v12 == 2)
              return 1;
            if (*(unsigned __int8 *)(v11 + 34) == *(unsigned __int8 *)(a1 + 34))
              break;
          }
        }
      }
    }
LABEL_4:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  v13 = (unsigned __int8 *)(v11 + 35);
  v14 = v12 - 3;
  v15 = (unsigned __int8 *)(a1 + 35);
  while (v14)
  {
    v17 = *v13++;
    v16 = v17;
    v18 = *v15++;
    --v14;
    if (v16 != v18)
      goto LABEL_4;
  }
  return 1;
}

uint64_t Activity.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798638);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - v10;
  v12 = type metadata accessor for Activity.MailboxStatus(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A54E330C(a1, (uint64_t)v11, &qword_1EE798638);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1A5510284((uint64_t)v11, &qword_1EE798638);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A5816460((uint64_t)v8, a2, a3);
    sub_1A5818844(a2, a3);
    sub_1A5510284(a1, &qword_1EE798638);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1A54E3394((uint64_t)v11, (uint64_t)v15, type metadata accessor for Activity.MailboxStatus);
    sub_1A55034B8((uint64_t)v15, (uint64_t)v8, type metadata accessor for Activity.MailboxStatus);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    sub_1A5816460((uint64_t)v8, a2, a3);
    sub_1A5510284(a1, &qword_1EE798638);
    return sub_1A55034FC((uint64_t)v15, type metadata accessor for Activity.MailboxStatus);
  }
}

uint64_t sub_1A5816460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798638);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Activity.MailboxStatus(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v15 + 48))(a1, 1, v12) == 1)
  {
    sub_1A5510284(a1, &qword_1EE798638);
    sub_1A5818714(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1A5510284((uint64_t)v10, &qword_1EE798638);
  }
  else
  {
    sub_1A54E3394(a1, (uint64_t)v14, type metadata accessor for Activity.MailboxStatus);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v4;
    *v4 = 0x8000000000000000;
    sub_1A5819104((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void (*Activity.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  void *v9;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798638) - 8) + 64);
  v7[3] = malloc(v8);
  v9 = malloc(v8);
  v7[4] = v9;
  Activity.subscript.getter(a2, a3, (uint64_t)v9);
  return sub_1A5816660;
}

void sub_1A5816660(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  v5 = (*a1)[1];
  v6 = **a1;
  if ((a2 & 1) != 0)
  {
    sub_1A54E330C((*a1)[4], (uint64_t)v3, &qword_1EE798638);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    Activity.subscript.setter((uint64_t)v3, v6, v5);
    sub_1A5510284((uint64_t)v4, &qword_1EE798638);
  }
  else
  {
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    Activity.subscript.setter((uint64_t)v4, v6, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Activity.accountStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ConnectionStatus.Error(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
  {
    v10 = type metadata accessor for Activity.MailboxStatus(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    v12 = type metadata accessor for Activity(0);
    sub_1A54E330C(v1 + *(int *)(v12 + 24), (uint64_t)v5, &qword_1EE798560);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_1A5510284((uint64_t)v5, &qword_1EE798560);
    }
    else
    {
      sub_1A54E3394((uint64_t)v5, (uint64_t)v9, type metadata accessor for ConnectionStatus.Error);
      sub_1A54E3394((uint64_t)v9, a1, type metadata accessor for ConnectionStatus.Error);
    }
    v13 = type metadata accessor for Activity.MailboxStatus(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
}

uint64_t Activity.allMailboxIDs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

void Activity.MailboxStatus.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for ConnectionStatus.Error(0);
  MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for Activity.MailboxStatus(0);
  MEMORY[0x1E0C80A78](v3);
  sub_1A55034B8(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)&loc_1A58169B8 + dword_1A5816BF4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A58169C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    v4 = 0xD000000000000010;
    if ((*(_BYTE *)(v0 + 24) & 1) != 0)
      return v4;
    *(_QWORD *)(v1 - 80) = 0;
    *(_QWORD *)(v1 - 72) = 0xE000000000000000;
    sub_1A594C720();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 - 80) = 0xD000000000000012;
    *(_QWORD *)(v1 - 72) = 0x80000001A5A13670;
    *(_QWORD *)(v1 - 88) = v3;
    sub_1A594CC9C();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    v5 = v2 + v3;
    if (!__OFADD__(v2, v3))
      goto LABEL_12;
    __break(1u);
LABEL_11:
    *(_QWORD *)(v1 - 80) = 0;
    *(_QWORD *)(v1 - 72) = 0xE000000000000000;
    sub_1A594C720();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 - 80) = 0x676E696863746566;
    *(_QWORD *)(v1 - 72) = 0xE90000000000002DLL;
    *(_QWORD *)(v1 - 88) = v3;
    sub_1A594CC9C();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    sub_1A594B5F8();
    v5 = v2 + v3;
    if (__OFADD__(v2, v3))
    {
      __break(1u);
      JUMPOUT(0x1A5816BF4);
    }
LABEL_12:
    *(_QWORD *)(v1 - 88) = v5;
    sub_1A594CC9C();
    sub_1A594B5F8();
    swift_bridgeObjectRelease();
    return *(_QWORD *)(v1 - 80);
  }
  if (!*(_BYTE *)(v0 + 24))
    goto LABEL_11;
  if (*(_BYTE *)(v0 + 25))
    return 0x676E69636E7973;
  else
    return 0x636E79732D6E69;
}

unint64_t sub_1A5816C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A594CE64();
  sub_1A594CE88();
  v4 = sub_1A594CED0();
  return sub_1A5816E4C(a1, a2, v4);
}

uint64_t sub_1A5816C68(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_1A594CE64();
  sub_1A54E42B4(a1, a2);
  sub_1A5949F9C();
  sub_1A54E46E8(a1, a2);
  v4 = sub_1A594CED0();
  return sub_1A5816F4C(a1, a2, v4);
}

unint64_t sub_1A5816CE4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  sub_1A594CE64();
  sub_1A594CE88();
  v4 = sub_1A594CED0();
  return sub_1A581799C(a1, a2, v4);
}

unint64_t sub_1A5816D48(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  sub_1A594CE64();
  sub_1A594CE88();
  sub_1A594CEAC();
  sub_1A594CE88();
  v4 = *(_OWORD *)(a1 + 24);
  sub_1A54E9938((uint64_t)&v4);
  sub_1A5949F9C();
  sub_1A54E9964((uint64_t)&v4);
  v2 = sub_1A594CED0();
  return sub_1A5817AA8((unsigned __int8 *)a1, v2);
}

unint64_t sub_1A5816DF4(int a1)
{
  uint64_t v2;

  sub_1A594CE64();
  sub_1A594CEAC();
  v2 = sub_1A594CED0();
  return sub_1A54FE3E4(a1, v2);
}

unint64_t sub_1A5816E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while (1)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      if (v8[1] == a2)
      {
        v9 = *v8;
        v10 = *(_QWORD *)(v9 + 16);
        if (v10 == *(_QWORD *)(a1 + 16))
        {
          if (!v10 || v9 == a1)
            return result;
          if (*(unsigned __int8 *)(v9 + 32) == *(unsigned __int8 *)(a1 + 32))
          {
            if (v10 == 1)
              return result;
            if (*(unsigned __int8 *)(v9 + 33) == *(unsigned __int8 *)(a1 + 33))
            {
              if (v10 == 2)
                return result;
              if (*(unsigned __int8 *)(v9 + 34) == *(unsigned __int8 *)(a1 + 34))
                break;
            }
          }
        }
      }
LABEL_3:
      result = (result + 1) & v7;
      if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        return result;
    }
    v11 = (unsigned __int8 *)(v9 + 35);
    v12 = v10 - 3;
    v13 = (unsigned __int8 *)(a1 + 35);
    while (v12)
    {
      v15 = *v11++;
      v14 = v15;
      v16 = *v13++;
      --v12;
      if (v14 != v16)
        goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1A5816F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_1A581799C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while (1)
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      if ((*(unsigned int *)(v8 + 8) | ((unint64_t)*(unsigned int *)(v8 + 8) << 32)) == (a2 | ((unint64_t)a2 << 32)))
      {
        v9 = *(_QWORD *)v8;
        v10 = *(_QWORD *)(v9 + 16);
        if (v10 == *(_QWORD *)(a1 + 16))
        {
          if (!v10 || v9 == a1)
            return result;
          if (*(unsigned __int8 *)(v9 + 32) == *(unsigned __int8 *)(a1 + 32))
          {
            if (v10 == 1)
              return result;
            if (*(unsigned __int8 *)(v9 + 33) == *(unsigned __int8 *)(a1 + 33))
            {
              if (v10 == 2)
                return result;
              if (*(unsigned __int8 *)(v9 + 34) == *(unsigned __int8 *)(a1 + 34))
                break;
            }
          }
        }
      }
LABEL_3:
      result = (result + 1) & v7;
      if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        return result;
    }
    v11 = (unsigned __int8 *)(v9 + 35);
    v12 = v10 - 3;
    v13 = (unsigned __int8 *)(a1 + 35);
    while (v12)
    {
      v15 = *v11++;
      v14 = v15;
      v16 = *v13++;
      --v12;
      if (v14 != v16)
        goto LABEL_3;
    }
  }
  return result;
}

unint64_t sub_1A5817AA8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    v7 = *a1;
    while (1)
    {
      v8 = *(_QWORD *)(v2 + 48);
      v9 = (unsigned __int8 *)(v8 + 40 * v4);
      if (v7 == *v9
        && *((_DWORD *)a1 + 1) == *(_DWORD *)(v8 + 40 * v4 + 4)
        && (*((unsigned int *)v9 + 4) | ((unint64_t)*((unsigned int *)v9 + 4) << 32)) == (*((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned int *)a1 + 4) << 32)))
      {
        v10 = *((_QWORD *)v9 + 1);
        v11 = *((_QWORD *)a1 + 1);
        v12 = *(_QWORD *)(v10 + 16);
        if (v12 == *(_QWORD *)(v11 + 16))
        {
          v13 = *((_QWORD *)v9 + 4);
          if (v12)
            v14 = v10 == v11;
          else
            v14 = 1;
          if (v14)
            goto LABEL_13;
          if (*(unsigned __int8 *)(v10 + 32) == *(unsigned __int8 *)(v11 + 32))
          {
            if (v12 == 1)
              goto LABEL_13;
            if (*(unsigned __int8 *)(v10 + 33) == *(unsigned __int8 *)(v11 + 33))
            {
              if (v12 == 2)
                goto LABEL_13;
              if (*(unsigned __int8 *)(v10 + 34) == *(unsigned __int8 *)(v11 + 34))
                break;
            }
          }
        }
      }
LABEL_3:
      v4 = (v4 + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        return v4;
    }
    v15 = (unsigned __int8 *)(v10 + 35);
    v16 = (unsigned __int8 *)(v11 + 35);
    v17 = v12 - 3;
    while (v17)
    {
      v19 = *v15++;
      v18 = v19;
      v20 = *v16++;
      --v17;
      if (v18 != v20)
        goto LABEL_3;
    }
LABEL_13:
    __asm { BR              X8 }
  }
  return v4;
}

uint64_t sub_1A5818714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v8 = sub_1A5816C08(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1A58192C8();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for Activity.MailboxStatus(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1A54E3394(v12 + *(_QWORD *)(v14 + 72) * v8, a3, type metadata accessor for Activity.MailboxStatus);
    sub_1A5818F20(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Activity.MailboxStatus(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t sub_1A5818844(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v24;

  v5 = *v2;
  sub_1A594CE64();
  sub_1A594CE88();
  v6 = sub_1A594CED0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v8);
    if (v10[1] == a2)
    {
      v11 = *v10;
      v12 = *(_QWORD *)(v11 + 16);
      if (v12 == *(_QWORD *)(a1 + 16))
      {
        if (v12)
          v13 = v11 == a1;
        else
          v13 = 1;
        if (v13)
          goto LABEL_20;
        if (*(unsigned __int8 *)(v11 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v12 == 1)
            goto LABEL_20;
          if (*(unsigned __int8 *)(v11 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v12 == 2)
              goto LABEL_20;
            if (*(unsigned __int8 *)(v11 + 34) == *(unsigned __int8 *)(a1 + 34))
              break;
          }
        }
      }
    }
LABEL_3:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  v14 = (unsigned __int8 *)(v11 + 35);
  v15 = v12 - 3;
  v16 = (unsigned __int8 *)(a1 + 35);
  while (v15)
  {
    v18 = *v14++;
    v17 = v18;
    v19 = *v16++;
    --v15;
    if (v17 != v19)
      goto LABEL_3;
  }
LABEL_20:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *v2;
  v24 = *v2;
  *v2 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1A58254BC();
    v22 = v24;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 16 * v8);
  sub_1A554D0DC(v8);
  *v2 = v24;
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1A58189F8(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;

  v3 = v2;
  v6 = *v3;
  sub_1A594CE64();
  sub_1A594CE88();
  v7 = sub_1A594CED0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v10 = ~v8;
  while (1)
  {
    v11 = *(_QWORD *)(v6 + 48) + 16 * v9;
    if ((*(unsigned int *)(v11 + 8) | ((unint64_t)*(unsigned int *)(v11 + 8) << 32)) == (a2 | ((unint64_t)a2 << 32)))
    {
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 == *(_QWORD *)(a1 + 16))
      {
        if (v13)
          v14 = v12 == a1;
        else
          v14 = 1;
        if (v14)
          goto LABEL_20;
        if (*(unsigned __int8 *)(v12 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v13 == 1)
            goto LABEL_20;
          if (*(unsigned __int8 *)(v12 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v13 == 2)
              goto LABEL_20;
            if (*(unsigned __int8 *)(v12 + 34) == *(unsigned __int8 *)(a1 + 34))
              break;
          }
        }
      }
    }
LABEL_3:
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      return 0;
  }
  v15 = (unsigned __int8 *)(v12 + 35);
  v16 = v13 - 3;
  v17 = (unsigned __int8 *)(a1 + 35);
  while (v16)
  {
    v19 = *v15++;
    v18 = v19;
    v20 = *v17++;
    --v16;
    if (v18 != v20)
      goto LABEL_3;
  }
LABEL_20:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = *v3;
  v25 = *v3;
  *v3 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1A58259A4();
    v23 = v25;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 16 * v9);
  sub_1A554D288(v9);
  *v3 = v25;
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1A5818BC0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for Activity.MailboxStatus(0);
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B8E8);
  v41 = a2;
  result = sub_1A594CA50();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v39 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v37 = v2;
    v38 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v20 = v19 | (v11 << 6);
      }
      else
      {
        v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v21 >= v38)
          goto LABEL_34;
        v22 = v39[v21];
        ++v11;
        if (!v22)
        {
          v11 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_34;
          v22 = v39[v11];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_34:
              if ((v41 & 1) == 0)
              {
                result = swift_release();
                v3 = v37;
                goto LABEL_41;
              }
              v36 = 1 << *(_BYTE *)(v8 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v37;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v11 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v11 >= v38)
                  goto LABEL_34;
                v22 = v39[v11];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v11 = v23;
          }
        }
LABEL_21:
        v15 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_QWORD *)(v40 + 72);
      v28 = *(_QWORD *)(v8 + 56) + v27 * v20;
      if ((v41 & 1) != 0)
      {
        sub_1A54E3394(v28, (uint64_t)v7, type metadata accessor for Activity.MailboxStatus);
      }
      else
      {
        sub_1A55034B8(v28, (uint64_t)v7, type metadata accessor for Activity.MailboxStatus);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      }
      sub_1A594CE64();
      sub_1A594CE88();
      result = sub_1A594CED0();
      v29 = -1 << *(_BYTE *)(v10 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        v17 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
      *v18 = v26;
      v18[1] = v25;
      result = sub_1A54E3394((uint64_t)v7, *(_QWORD *)(v10 + 56) + v27 * v17, type metadata accessor for Activity.MailboxStatus);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

unint64_t sub_1A5818F20(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1A594C5D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1A594CE64();
        sub_1A594CE88();
        result = sub_1A594CED0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v9 < v8)
          goto LABEL_11;
LABEL_12:
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_OWORD *)(v10 + 16 * v3);
        v12 = (_OWORD *)(v10 + 16 * v6);
        if (v3 != v6 || v11 >= v12 + 1)
          *v11 = *v12;
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Activity.MailboxStatus(0) - 8) + 72);
        v15 = v14 * v3;
        result = v13 + v14 * v3;
        v16 = v14 * v6;
        v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v15 == v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v9 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v9)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1A5819104(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1A5816C08(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for Activity.MailboxStatus(0) - 8) + 72) * v12;
        return sub_1A581BCAC(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1A58192C8();
      goto LABEL_7;
    }
    sub_1A5818BC0(v15, a4 & 1);
    v22 = sub_1A5816C08(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1A5819238(v12, a2, a3, a1, v18);
      return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    }
  }
  result = sub_1A594CDF8();
  __break(1u);
  return result;
}

uint64_t sub_1A5819238(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Activity.MailboxStatus(0);
  result = sub_1A54E3394(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, type metadata accessor for Activity.MailboxStatus);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void *sub_1A58192C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for Activity.MailboxStatus(0);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B8E8);
  v5 = *v0;
  v6 = sub_1A594CA44();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_1A55034B8(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for Activity.MailboxStatus);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    sub_1A54E3394((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for Activity.MailboxStatus);
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void _s16IMAP2Persistence8ActivityV13MailboxStatusO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = type metadata accessor for ConnectionStatus.Error(0);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Activity.MailboxStatus(0);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798640);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 + *(int *)(v9 + 48) - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A55034B8(a1, (uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Activity.MailboxStatus);
  sub_1A55034B8(a2, (uint64_t)v10, type metadata accessor for Activity.MailboxStatus);
  v11 = (char *)sub_1A5819648 + 4 * byte_1A59D9950[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A5819648()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  char v7;

  sub_1A55034B8(v0, (uint64_t)v2, type metadata accessor for Activity.MailboxStatus);
  v3 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  v5 = v2[24];
  v6 = v2[25];
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1A5510284(v0, &qword_1EE798640);
    goto LABEL_6;
  }
  if (*v2 != *v1)
  {
LABEL_3:
    sub_1A55034FC(v0, type metadata accessor for Activity.MailboxStatus);
LABEL_6:
    v7 = 0;
    return v7 & 1;
  }
  if ((v5 & 1) != 0)
  {
    if (!v1[24])
      goto LABEL_3;
  }
  else
  {
    if ((v1[24] & 1) != 0)
      goto LABEL_3;
    if (v3 != *((_QWORD *)v1 + 1) || v4 != *((_QWORD *)v1 + 2))
      goto LABEL_3;
  }
  if (((v6 ^ v1[25]) & 1) != 0)
    goto LABEL_3;
  sub_1A55034FC(v0, type metadata accessor for Activity.MailboxStatus);
  v7 = 1;
  return v7 & 1;
}

BOOL _s16IMAP2Persistence8ActivityV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v26;
  unsigned __int8 *v27;

  v4 = type metadata accessor for ConnectionStatus.Error(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (unsigned __int8 *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
  MEMORY[0x1E0C80A78](v11);
  v13 = (unsigned __int8 *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v26 - v18;
  if ((sub_1A584F53C(*a1, *a2) & 1) == 0 || (sub_1A585863C(a1[1], a2[1]) & 1) == 0)
    return 0;
  v27 = v7;
  v20 = type metadata accessor for Activity(0);
  sub_1A54E330C((uint64_t)a1 + *(int *)(v20 + 24), (uint64_t)v19, &qword_1EE798560);
  sub_1A54E330C((uint64_t)a2 + *(int *)(v20 + 24), (uint64_t)v16, &qword_1EE798560);
  v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1A54E330C((uint64_t)v19, (uint64_t)v10, &qword_1EE798560);
  sub_1A54E330C((uint64_t)v16, v21, &qword_1EE798560);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_1A5510284((uint64_t)v16, &qword_1EE798560);
    sub_1A5510284((uint64_t)v19, &qword_1EE798560);
    if (v22(v21, 1, v4) == 1)
    {
      sub_1A5510284((uint64_t)v10, &qword_1EE798560);
      return 1;
    }
    goto LABEL_8;
  }
  sub_1A54E330C((uint64_t)v10, (uint64_t)v13, &qword_1EE798560);
  if (v22(v21, 1, v4) == 1)
  {
    sub_1A5510284((uint64_t)v16, &qword_1EE798560);
    sub_1A5510284((uint64_t)v19, &qword_1EE798560);
    sub_1A55034FC((uint64_t)v13, type metadata accessor for ConnectionStatus.Error);
LABEL_8:
    sub_1A5510284((uint64_t)v10, &qword_1EE795DA8);
    return 0;
  }
  v23 = v27;
  sub_1A54E3394(v21, (uint64_t)v27, type metadata accessor for ConnectionStatus.Error);
  v24 = _s16IMAP2Persistence16ConnectionStatusO5ErrorV23__derived_struct_equalsySbAE_AEtFZ_0(v13, v23);
  sub_1A55034FC((uint64_t)v23, type metadata accessor for ConnectionStatus.Error);
  sub_1A5510284((uint64_t)v16, &qword_1EE798560);
  sub_1A5510284((uint64_t)v19, &qword_1EE798560);
  sub_1A55034FC((uint64_t)v13, type metadata accessor for ConnectionStatus.Error);
  sub_1A5510284((uint64_t)v10, &qword_1EE798560);
  return v24;
}

uint64_t type metadata accessor for Activity(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE798648);
}

uint64_t sub_1A5819AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Activity.MailboxStatus(uint64_t a1)
{
  return sub_1A55A1A0C(a1, qword_1EE798608);
}

uint64_t *initializeBufferWithCopyOfBuffer for Activity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ConnectionStatus.Error(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      v13 = *(int *)(v9 + 20);
      v14 = &v7[v13];
      v15 = &v8[v13];
      v16 = type metadata accessor for ConnectionStatus.Error.Details(0);
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        v18 = (char *)&loc_1A5819CA0 + 4 * byte_1A59D9954[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v17 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v19 = *(int *)(v9 + 24);
      v20 = &v7[v19];
      v21 = &v8[v19];
      v22 = sub_1A594A0EC();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for Activity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ConnectionStatus.Error(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = v4 + *(int *)(v5 + 20);
    v8 = type metadata accessor for ConnectionStatus.Error.Details(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v9 = sub_1A594ACEC();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
          break;
        case 1u:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 2u:
        case 3u:
LABEL_6:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
    }
    v10 = v4 + *(int *)(v5 + 24);
    v11 = sub_1A594A0EC();
    v12 = *(_QWORD *)(v11 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  return result;
}

_QWORD *initializeWithCopy for Activity(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(_BYTE *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ConnectionStatus.Error(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v10(v7, 1, v8))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    v12 = *(int *)(v8 + 20);
    v13 = &v6[v12];
    v14 = &v7[v12];
    v15 = type metadata accessor for ConnectionStatus.Error.Details(0);
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v17 = (char *)&loc_1A581A038 + 4 * byte_1A59D995C[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v16 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    v18 = *(int *)(v8 + 24);
    v19 = &v6[v18];
    v20 = &v7[v18];
    v21 = sub_1A594A0EC();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for Activity(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, uint64_t, uint64_t);
  void *v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, uint64_t);
  int v46;
  int v47;

  *a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ConnectionStatus.Error(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1A55034FC((uint64_t)v7, type metadata accessor for ConnectionStatus.Error);
      goto LABEL_7;
    }
    *v7 = *v8;
    v22 = *(int *)(v9 + 20);
    v23 = &v7[v22];
    v24 = &v8[v22];
    v25 = type metadata accessor for ConnectionStatus.Error.Details(0);
    v26 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
    v27 = v23;
    LODWORD(v23) = v26(v23, 1, v25);
    v28 = v26(v24, 1, v25);
    if ((_DWORD)v23)
    {
      if (!v28)
      {
        v29 = (char *)&loc_1A581A330 + 4 * byte_1A59D9964[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
    }
    else
    {
      if (!v28)
      {
        if (a1 != a2)
        {
          sub_1A55034FC((uint64_t)v27, type metadata accessor for ConnectionStatus.Error.Details);
          v39 = (char *)&loc_1A581A534 + 4 * byte_1A59D9968[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        goto LABEL_23;
      }
      sub_1A55034FC((uint64_t)v27, type metadata accessor for ConnectionStatus.Error.Details);
    }
    v31 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
    memcpy(v27, v24, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
LABEL_23:
    v40 = *(int *)(v9 + 24);
    v41 = &v7[v40];
    v42 = &v8[v40];
    v43 = sub_1A594A0EC();
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48);
    v46 = v45(v41, 1, v43);
    v47 = v45(v42, 1, v43);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        return a1;
      }
    }
    else
    {
      if (!v47)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 24))(v41, v42, v43);
        return a1;
      }
      (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v41, v43);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478) - 8) + 64);
    v20 = v41;
    v21 = v42;
    goto LABEL_8;
  }
  if (v13)
  {
LABEL_7:
    v19 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560) - 8) + 64);
    v20 = v7;
    v21 = v8;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  *v7 = *v8;
  v14 = *(int *)(v9 + 20);
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = type metadata accessor for ConnectionStatus.Error.Details(0);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v30 = (char *)&loc_1A581A370 + 4 * byte_1A59D9960[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  v32 = *(int *)(v9 + 24);
  v33 = &v7[v32];
  v34 = &v8[v32];
  v35 = sub_1A594A0EC();
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

void sub_1A581A6A8()
{
  _QWORD *v0;
  _QWORD *v1;

  *v1 = *v0;
  v1[1] = v0[1];
  v1[2] = v0[2];
  v1[3] = v0[3];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A581A5E4);
}

void sub_1A581A6E8()
{
  _QWORD *v0;
  _QWORD *v1;

  *v1 = *v0;
  v1[1] = v0[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A581A5E4);
}

void sub_1A581A710()
{
  _QWORD *v0;
  _QWORD *v1;

  *v1 = *v0;
  v1[1] = v0[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A581A5E4);
}

_OWORD *initializeWithTake for Activity(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ConnectionStatus.Error(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v10 = *(int *)(v7 + 20);
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = type metadata accessor for ConnectionStatus.Error.Details(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v11, v12, *(_QWORD *)(v14 + 64));
      }
      else
      {
        v16 = sub_1A594ACEC();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v17 = *(int *)(v7 + 24);
    v18 = &v5[v17];
    v19 = &v6[v17];
    v20 = sub_1A594A0EC();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for Activity(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, uint64_t);
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_BYTE *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ConnectionStatus.Error(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_1A55034FC((uint64_t)v7, type metadata accessor for ConnectionStatus.Error);
      goto LABEL_7;
    }
    *v7 = *v8;
    v23 = *(int *)(v9 + 20);
    v24 = &v7[v23];
    v25 = &v8[v23];
    v26 = type metadata accessor for ConnectionStatus.Error.Details(0);
    v50 = *(_QWORD *)(v26 - 8);
    v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
    v28 = v24;
    LODWORD(v24) = v27(v24, 1, v26);
    v29 = v27(v25, 1, v26);
    if ((_DWORD)v24)
    {
      if (!v29)
      {
        if (swift_getEnumCaseMultiPayload())
        {
          v30 = v50;
          memcpy(v28, v25, *(_QWORD *)(v50 + 64));
        }
        else
        {
          v40 = sub_1A594ACEC();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v28, v25, v40);
          swift_storeEnumTagMultiPayload();
          v30 = v50;
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v28, 0, 1, v26);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v29)
      {
        if (a1 == a2)
          goto LABEL_31;
        sub_1A55034FC((uint64_t)v28, type metadata accessor for ConnectionStatus.Error.Details);
        if (!swift_getEnumCaseMultiPayload())
        {
          v49 = sub_1A594ACEC();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v28, v25, v49);
          swift_storeEnumTagMultiPayload();
          goto LABEL_31;
        }
        v31 = v50;
LABEL_18:
        memcpy(v28, v25, *(_QWORD *)(v31 + 64));
LABEL_31:
        v41 = *(int *)(v9 + 24);
        v42 = &v7[v41];
        v43 = &v8[v41];
        v44 = sub_1A594A0EC();
        v45 = *(_QWORD *)(v44 - 8);
        v46 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48);
        v47 = v46(v42, 1, v44);
        v48 = v46(v43, 1, v44);
        if (v47)
        {
          if (!v48)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 32))(v42, v43, v44);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
            return a1;
          }
        }
        else
        {
          if (!v48)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 40))(v42, v43, v44);
            return a1;
          }
          (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v42, v44);
        }
        v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478) - 8)
                        + 64);
        v21 = v42;
        v22 = v43;
        goto LABEL_8;
      }
      sub_1A55034FC((uint64_t)v28, type metadata accessor for ConnectionStatus.Error.Details);
    }
    v31 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518) - 8);
    goto LABEL_18;
  }
  if (v13)
  {
LABEL_7:
    v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560) - 8) + 64);
    v21 = v7;
    v22 = v8;
LABEL_8:
    memcpy(v21, v22, v20);
    return a1;
  }
  *v7 = *v8;
  v14 = *(int *)(v9 + 20);
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = type metadata accessor for ConnectionStatus.Error.Details(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v15, v16, *(_QWORD *)(v18 + 64));
    }
    else
    {
      v32 = sub_1A594ACEC();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v15, v16, v32);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v33 = *(int *)(v9 + 24);
  v34 = &v7[v33];
  v35 = &v8[v33];
  v36 = sub_1A594A0EC();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32))(v34, v35, v36);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Activity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A581ADD8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Activity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A581AE64(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798560);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1A581AEDC()
{
  unint64_t v0;

  sub_1A581AF54();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A581AF54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE798570)
  {
    type metadata accessor for ConnectionStatus.Error(255);
    v0 = sub_1A594C354();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE798570);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Activity.MailboxStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = type metadata accessor for ConnectionStatus.Error(0);
    v8 = *(int *)(v7 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ConnectionStatus.Error.Details(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v14 = (char *)&loc_1A581B0BC + 4 * byte_1A59D996C[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v15 = *(int *)(v7 + 24);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_1A594A0EC();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for Activity.MailboxStatus(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for ConnectionStatus.Error(0);
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for ConnectionStatus.Error.Details(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v6 = sub_1A594ACEC();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
          break;
        case 1u:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 2u:
        case 3u:
LABEL_6:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
    }
    v7 = a1 + *(int *)(v3 + 24);
    v8 = sub_1A594A0EC();
    v9 = *(_QWORD *)(v8 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  return result;
}

_BYTE *initializeWithCopy for Activity.MailboxStatus(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = type metadata accessor for ConnectionStatus.Error(0);
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for ConnectionStatus.Error.Details(0);
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      v12 = (char *)&loc_1A581B3F0 + 4 * byte_1A59D9974[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    v13 = *(int *)(v6 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = sub_1A594A0EC();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithCopy for Activity.MailboxStatus(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_1A55034FC((uint64_t)a1, type metadata accessor for Activity.MailboxStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = type metadata accessor for ConnectionStatus.Error(0);
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for ConnectionStatus.Error.Details(0);
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v12 = (char *)&loc_1A581B61C + 4 * byte_1A59D9978[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      v13 = *(int *)(v6 + 24);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_1A594A0EC();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for Activity.MailboxStatus(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = type metadata accessor for ConnectionStatus.Error(0);
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for ConnectionStatus.Error.Details(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(_QWORD *)(v11 + 64));
      }
      else
      {
        v13 = sub_1A594ACEC();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(v6 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_1A594A0EC();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for Activity.MailboxStatus(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_1A55034FC((uint64_t)a1, type metadata accessor for Activity.MailboxStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = type metadata accessor for ConnectionStatus.Error(0);
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for ConnectionStatus.Error.Details(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE798518);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v8, v9, *(_QWORD *)(v11 + 64));
        }
        else
        {
          v13 = sub_1A594ACEC();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
          swift_storeEnumTagMultiPayload();
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v14 = *(int *)(v6 + 24);
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = sub_1A594A0EC();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A581BB24()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ConnectionStatus.Error(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Activity.MailboxStatus.Info(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[26])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Activity.MailboxStatus.Info(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Activity.MailboxStatus.Info()
{
  return &type metadata for Activity.MailboxStatus.Info;
}

__n128 __swift_memcpy16_8_5(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Activity.MailboxStatus.Info.FetchProgress()
{
  return &type metadata for Activity.MailboxStatus.Info.FetchProgress;
}

unint64_t sub_1A581BC60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE79B718;
  if (!qword_1EE79B718)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0(&qword_1EE796078);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEB3D0], v1);
    atomic_store(result, (unint64_t *)&qword_1EE79B718);
  }
  return result;
}

uint64_t sub_1A581BCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Activity.MailboxStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ChangeID.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*ChangeID.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

BOOL static ChangeID.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

unint64_t sub_1A581BD24()
{
  unint64_t result;

  result = qword_1EE7A0608;
  if (!qword_1EE7A0608)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for ChangeID, &type metadata for ChangeID);
    atomic_store(result, (unint64_t *)&qword_1EE7A0608);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChangeID()
{
  return &type metadata for ChangeID;
}

uint64_t Configuration.logName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t Configuration.logName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

double (*Configuration.logName.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Configuration.connection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Configuration() + 20);
  return sub_1A581BE54(v3, a1);
}

uint64_t type metadata accessor for Configuration()
{
  uint64_t result;

  result = qword_1EE795D70;
  if (!qword_1EE795D70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A581BE54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Configuration.connection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Configuration() + 20);
  return sub_1A581BEC8(a1, v3);
}

uint64_t sub_1A581BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double (*Configuration.connection.modify())(_QWORD)
{
  type metadata accessor for Configuration();
  return nullsub_1;
}

uint64_t Configuration.mailboxFilter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Configuration() + 24));
}

uint64_t Configuration.mailboxFilter.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for Configuration();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

double (*Configuration.mailboxFilter.modify())(_QWORD)
{
  type metadata accessor for Configuration();
  return nullsub_1;
}

uint64_t Configuration.fetchedMessageMetadata.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Configuration() + 28));
}

uint64_t Configuration.fetchedMessageMetadata.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for Configuration();
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

double (*Configuration.fetchedMessageMetadata.modify())(_QWORD)
{
  type metadata accessor for Configuration();
  return nullsub_1;
}

uint64_t Configuration.init(logName:connection:mailboxFilter:fetchedMessageMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  char v8;
  char v9;
  int *v10;
  uint64_t result;

  v8 = a4 & 1;
  v9 = a5 & 1;
  *a6 = a1;
  a6[1] = a2;
  v10 = (int *)type metadata accessor for Configuration();
  result = sub_1A581C084(a3, (uint64_t)a6 + v10[5]);
  *((_BYTE *)a6 + v10[6]) = v8;
  *((_BYTE *)a6 + v10[7]) = v9;
  return result;
}

uint64_t sub_1A581C084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Configuration.MailboxFilter.hash(into:)()
{
  return sub_1A594CE88();
}

BOOL static Configuration.MailboxFilter.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

unint64_t sub_1A581C108()
{
  unint64_t result;

  result = qword_1EE7AA7A8;
  if (!qword_1EE7AA7A8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Configuration.MailboxFilter, &type metadata for Configuration.MailboxFilter);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7A8);
  }
  return result;
}

unint64_t sub_1A581C150()
{
  unint64_t result;

  result = qword_1EE7AA7B0;
  if (!qword_1EE7AA7B0)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Configuration.FetchedMessageMetadata, &type metadata for Configuration.FetchedMessageMetadata);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7B0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Configuration(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A594A8D8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v12(v9, v10, v11);
    v13 = (int *)type metadata accessor for ConnectionConfiguration();
    v9[v13[5]] = v10[v13[5]];
    *(_QWORD *)&v9[v13[6]] = *(_QWORD *)&v10[v13[6]];
    v9[v13[7]] = v10[v13[7]];
    v14 = v13[8];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v13[9];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = v13[10];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v26 = v13[11];
    v27 = &v9[v26];
    v28 = &v10[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v13[12];
    v31 = &v9[v30];
    v32 = &v10[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)v4 + v34) = *((_BYTE *)a2 + v34);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for ConnectionConfiguration();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for Configuration(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A8D8();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for ConnectionConfiguration();
  v8[v12[5]] = v9[v12[5]];
  *(_QWORD *)&v8[v12[6]] = *(_QWORD *)&v9[v12[6]];
  v8[v12[7]] = v9[v12[7]];
  v13 = v12[8];
  v14 = &v8[v13];
  v15 = &v9[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = v12[9];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v12[10];
  v22 = &v8[v21];
  v23 = &v9[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = v12[11];
  v26 = &v8[v25];
  v27 = &v9[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = v12[12];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Configuration(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  *a1 = *a2;
  a1[1] = a2[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A8D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for ConnectionConfiguration();
  v7[v10[5]] = v8[v10[5]];
  *(_QWORD *)&v7[v10[6]] = *(_QWORD *)&v8[v10[6]];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v7[v10[7]] = v8[v10[7]];
  v11 = v10[8];
  v12 = &v7[v11];
  v13 = &v8[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v14 = v10[9];
  v15 = &v7[v14];
  v16 = &v8[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v17 = v10[10];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  swift_retain();
  swift_release();
  v21 = v10[11];
  v22 = &v7[v21];
  v23 = &v8[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  swift_retain();
  swift_release();
  v25 = v10[12];
  v26 = &v7[v25];
  v27 = &v8[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_OWORD *initializeWithTake for Configuration(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A594A8D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = (int *)type metadata accessor for ConnectionConfiguration();
  v7[v10[5]] = v8[v10[5]];
  *(_QWORD *)&v7[v10[6]] = *(_QWORD *)&v8[v10[6]];
  v7[v10[7]] = v8[v10[7]];
  *(_OWORD *)&v7[v10[8]] = *(_OWORD *)&v8[v10[8]];
  *(_OWORD *)&v7[v10[9]] = *(_OWORD *)&v8[v10[9]];
  *(_OWORD *)&v7[v10[10]] = *(_OWORD *)&v8[v10[10]];
  *(_OWORD *)&v7[v10[11]] = *(_OWORD *)&v8[v10[11]];
  *(_OWORD *)&v7[v10[12]] = *(_OWORD *)&v8[v10[12]];
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

_QWORD *assignWithTake for Configuration(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A594A8D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = (int *)type metadata accessor for ConnectionConfiguration();
  v8[v11[5]] = v9[v11[5]];
  *(_QWORD *)&v8[v11[6]] = *(_QWORD *)&v9[v11[6]];
  swift_bridgeObjectRelease();
  v8[v11[7]] = v9[v11[7]];
  v12 = v11[8];
  v13 = &v8[v12];
  v14 = &v9[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = v11[9];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  *(_OWORD *)&v8[v11[10]] = *(_OWORD *)&v9[v11[10]];
  swift_release();
  *(_OWORD *)&v8[v11[11]] = *(_OWORD *)&v9[v11[11]];
  swift_release();
  *(_OWORD *)&v8[v11[12]] = *(_OWORD *)&v9[v11[12]];
  swift_release();
  v22 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A581C900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ConnectionConfiguration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A581C988(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ConnectionConfiguration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A581C9FC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ConnectionConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.MailboxFilter()
{
  return &type metadata for Configuration.MailboxFilter;
}

uint64_t _s16IMAP2Persistence13ConfigurationV22FetchedMessageMetadataOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A581CADC + 4 * byte_1A59D9BE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A581CB10 + 4 * asc_1A59D9BE0[v4]))();
}

uint64_t sub_1A581CB10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581CB18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A581CB20);
  return result;
}

uint64_t sub_1A581CB2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A581CB34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A581CB38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581CB40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Configuration.FetchedMessageMetadata()
{
  return &type metadata for Configuration.FetchedMessageMetadata;
}

uint64_t ConnectionConfiguration.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594A8D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594A8D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ConnectionConfiguration.endpoint.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594A8D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594A8D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

double (*ConnectionConfiguration.endpoint.modify())(_QWORD)
{
  return nullsub_1;
}

{
  return nullsub_1;
}

uint64_t ConnectionConfiguration.prohibitConstrainedPaths.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 20));
}

{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 20));
}

uint64_t type metadata accessor for ConnectionConfiguration()
{
  uint64_t result;

  result = qword_1EE7985C8;
  if (!qword_1EE7985C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ConnectionConfiguration.prohibitConstrainedPaths.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ConnectionConfiguration();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ConnectionConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

double (*ConnectionConfiguration.prohibitConstrainedPaths.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return nullsub_1;
}

uint64_t ConnectionConfiguration.prohibitedInterfaceTypes.getter()
{
  type metadata accessor for ConnectionConfiguration();
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t ConnectionConfiguration.prohibitedInterfaceTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ConnectionConfiguration() + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ConnectionConfiguration(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*ConnectionConfiguration.prohibitedInterfaceTypes.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return nullsub_1;
}

uint64_t ConnectionConfiguration.transportLayerSecurity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 28));
}

{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 28));
}

uint64_t ConnectionConfiguration.transportLayerSecurity.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ConnectionConfiguration();
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ConnectionConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

double (*ConnectionConfiguration.transportLayerSecurity.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return nullsub_1;
}

uint64_t static ConnectionConfiguration.TransportLayerSecurity.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >> 6)
  {
    if (a1 >> 6 == 1)
    {
      if ((a2 & 0xC0) == 0x40)
        return ((a2 ^ a1) & 0x3F) == 0;
    }
    else if (a2 == 128)
    {
      return 1;
    }
  }
  else if (a2 <= 0x3Fu)
  {
    return a1 == a2;
  }
  return 0;
}

{
  if (a1 >> 6)
  {
    if (a1 >> 6 == 1)
    {
      if ((a2 & 0xC0) == 0x40)
        return ((a2 ^ a1) & 0x3F) == 0;
    }
    else if (a2 == 128)
    {
      return 1;
    }
  }
  else if (a2 <= 0x3Fu)
  {
    return a1 == a2;
  }
  return 0;
}

BOOL static CertificateTrust.Policy.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1A581CDFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 >> 6)
  {
    if (v2 >> 6 == 1)
    {
      if ((v3 & 0xC0) == 0x40)
        return ((v3 ^ v2) & 0x3F) == 0;
    }
    else if (v3 == 128)
    {
      return 1;
    }
  }
  else if (v3 < 0x40)
  {
    return v2 == v3;
  }
  return 0;
}

uint64_t ConnectionConfiguration.sourceApplicationBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 32));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 32));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t ConnectionConfiguration.sourceApplicationBundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*ConnectionConfiguration.sourceApplicationBundleIdentifier.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return nullsub_1;
}

uint64_t ConnectionConfiguration.networkAccountIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 36));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 36));
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return v1;
}

uint64_t ConnectionConfiguration.networkAccountIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*ConnectionConfiguration.networkAccountIdentifier.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

{
  type metadata accessor for ConnectionConfiguration(0);
  return nullsub_1;
}

uint64_t ConnectionConfiguration.makeCredentials.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 40));
  swift_retain();
  return v1;
}

uint64_t ConnectionConfiguration.makeCredentials.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration() + 40));
  result = swift_release();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*ConnectionConfiguration.makeCredentials.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

uint64_t ConnectionConfiguration.getPushInformation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 44));
  swift_retain();
  return v1;
}

uint64_t ConnectionConfiguration.getPushInformation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration() + 44));
  result = swift_release();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*ConnectionConfiguration.getPushInformation.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

uint64_t ConnectionConfiguration.finishPushRegistration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionConfiguration() + 48));
  swift_retain();
  return v1;
}

uint64_t ConnectionConfiguration.finishPushRegistration.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ConnectionConfiguration() + 48));
  result = swift_release();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

double (*ConnectionConfiguration.finishPushRegistration.modify())(_QWORD)
{
  type metadata accessor for ConnectionConfiguration();
  return nullsub_1;
}

uint64_t ConnectionConfiguration.init(transportLayerSecurity:transportLayerSecurityOptions:endpoint:prohibitConstrainedPaths:prohibitedInterfaceTypes:sourceApplicationBundleIdentifier:networkAccountIdentifier:makeCredentials:getPushInformation:finishPushRegistration:)@<X0>(char a1@<W0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  swift_release();
  v19 = (int *)type metadata accessor for ConnectionConfiguration();
  v20 = (_QWORD *)(a8 + v19[8]);
  v21 = (_QWORD *)(a8 + v19[9]);
  v22 = v19[6];
  *(_BYTE *)(a8 + v19[7]) = a1;
  v23 = sub_1A594A8D8();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a8, a2, v23);
  *(_BYTE *)(a8 + v19[5]) = a3;
  *(_QWORD *)(a8 + v22) = a4;
  *v20 = a5;
  v20[1] = a6;
  *v21 = a7;
  v21[1] = a9;
  v25 = (_QWORD *)(a8 + v19[10]);
  *v25 = a10;
  v25[1] = a11;
  v26 = (_QWORD *)(a8 + v19[11]);
  *v26 = a12;
  v26[1] = a13;
  v27 = (_QWORD *)(a8 + v19[12]);
  *v27 = a14;
  v27[1] = a15;
  return result;
}

uint64_t CertificateTrust.Policy.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t CertificateTrust.Policy.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

unint64_t CertificateTrust.Policy.description.getter(unsigned __int8 a1)
{
  unint64_t result;

  result = 0xD000000000000013;
  if (a1 >= 2u)
    return 0xD000000000000011;
  return result;
}

unint64_t sub_1A581D394()
{
  unint64_t result;

  result = qword_1EE7AA7B8;
  if (!qword_1EE7AA7B8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for CertificateTrust.Policy, &type metadata for CertificateTrust.Policy);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7B8);
  }
  return result;
}

unint64_t sub_1A581D3D8()
{
  unsigned __int8 *v0;

  return CertificateTrust.Policy.description.getter(*v0);
}

_QWORD *initializeBufferWithCopyOfBuffer for ConnectionConfiguration(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1A594A8D8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[6];
    *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)v4 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (_QWORD *)((char *)v4 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[9];
    v14 = a3[10];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)((char *)v4 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[11];
    v22 = a3[12];
    v23 = (_QWORD *)((char *)v4 + v21);
    v24 = (_QWORD *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (_QWORD *)((char *)v4 + v22);
    v27 = (_QWORD *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A594A8D8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[9];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return a1;
}

uint64_t destroy for ConnectionConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v2;

  v2 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(a1 + v13);
  v18 = (_QWORD *)(a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[11];
  v21 = a3[12];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for ConnectionConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v10 = a3[9];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  v17 = a3[11];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  v21 = a3[12];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v10 = a3[9];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ConnectionConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for ConnectionConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease();
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[9];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  swift_release();
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  swift_release();
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  swift_release();
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1A594A8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease();
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[9];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A581D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A594A8D8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A581DA04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A594A8D8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t sub_1A581DA7C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A594A8D8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionConfiguration.TransportLayerSecurity(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x3E)
    goto LABEL_17;
  if (a2 + 194 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 194) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 194;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 194;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 194;
  }
LABEL_17:
  v6 = (*a1 & 0x3C | (*a1 >> 6)) ^ 0x3F;
  if (v6 >= 0x3D)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for ConnectionConfiguration.TransportLayerSecurity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 194 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 194) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3D)
    return ((uint64_t (*)(void))((char *)&loc_1A581DC08 + 4 * byte_1A59D9D35[v4]))();
  *a1 = a2 - 62;
  return ((uint64_t (*)(void))((char *)sub_1A581DC3C + 4 * byte_1A59D9D30[v4]))();
}

{
  int v3;
  uint64_t v4;

  if (a3 + 194 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 194) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3D)
    return ((uint64_t (*)(void))((char *)&loc_1A589C274 + 4 * byte_1A59DE745[v4]))();
  *a1 = a2 - 62;
  return ((uint64_t (*)(void))((char *)sub_1A589C2A8 + 4 * byte_1A59DE740[v4]))();
}

uint64_t sub_1A581DC3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581DC44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A581DC4CLL);
  return result;
}

uint64_t sub_1A581DC64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A581DC6CLL);
  *(_BYTE *)result = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_1A581DC70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581DC78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581DC84(_BYTE *a1)
{
  int v1;

  v1 = (char)*a1;
  if (v1 >= 0)
    return *a1 >> 6;
  else
    return (v1 & 3u) + 2;
}

_BYTE *sub_1A581DCA0(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 3 | ((_BYTE)a2 << 6);
  else
    *result = (a2 + 2) & 3 | 0x80;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionConfiguration.TransportLayerSecurity()
{
  return &type metadata for ConnectionConfiguration.TransportLayerSecurity;
}

{
  return &type metadata for ConnectionConfiguration.TransportLayerSecurity;
}

ValueMetadata *type metadata accessor for CertificateTrust()
{
  return &type metadata for CertificateTrust;
}

uint64_t storeEnumTagSinglePayload for CertificateTrust.Policy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A581DD3C + 4 * byte_1A59D9D3F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A581DD70 + 4 * byte_1A59D9D3A[v4]))();
}

uint64_t sub_1A581DD70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581DD78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A581DD80);
  return result;
}

uint64_t sub_1A581DD8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A581DD94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A581DD98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581DDA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CertificateTrust.Policy()
{
  return &type metadata for CertificateTrust.Policy;
}

uint64_t sub_1A581DDC0(_OWORD *a1, _OWORD *a2)
{
  char v3;
  _OWORD v5[5];
  _OWORD v6[5];

  sub_1A581ED2C(a1, v5);
  sub_1A581ED2C(a2, v6);
  _s16IMAP2Persistence11CredentialsO21__derived_enum_equalsySbAC_ACtFZ_0(v5);
  return v3 & 1;
}

void _s16IMAP2Persistence11CredentialsO21__derived_enum_equalsySbAC_ACtFZ_0(_OWORD *a1)
{
  __int128 v2;
  _OWORD v3[3];

  sub_1A581ED2C(a1, &v2);
  sub_1A581ED2C(a1, v3);
  __asm { BR              X12 }
}

uint64_t sub_1A581DE78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v3 - 112) = v1 & 0xDFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v3 - 96) = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(v3 - 160);
  sub_1A581ED2C(v2, &v6);
  if (!((v8 >> 59) & 6 | ((v7 & 0x2000000000000000) != 0)))
  {
    v7 &= ~0x2000000000000000uLL;
    v8 &= 0xCFFFFFFFFFFFFFFFLL;
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1A581E76C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v15;

  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
      sub_1A54E42B4(result, a2);
      result = a3;
      a2 = a4;
      goto LABEL_4;
    case 1uLL:
      v15 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1A54E42B4(result, a2);
      sub_1A54E42B4(a3, a4);
      sub_1A54E42B4(a5, a6);
      sub_1A54E42B4(a7, v15);
      result = a9;
      a2 = a10 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_4;
    case 2uLL:
LABEL_4:
      result = sub_1A54E42B4(result, a2);
      break;
    case 3uLL:
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for Credentials(uint64_t a1)
{
  return sub_1A581E8A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

{
  return sub_1A59305A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1A581E8A4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v15;

  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
      sub_1A54E46E8(result, a2);
      result = a3;
      a2 = a4;
      goto LABEL_4;
    case 1uLL:
      v15 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1A54E46E8(result, a2);
      sub_1A54E46E8(a3, a4);
      sub_1A54E46E8(a5, a6);
      sub_1A54E46E8(a7, v15);
      result = a9;
      a2 = a10 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_4;
    case 2uLL:
LABEL_4:
      result = sub_1A54E46E8(result, a2);
      break;
    case 3uLL:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for Credentials(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  sub_1A581E76C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  sub_1A59306A4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for Credentials(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  sub_1A581E76C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  sub_1A581E8A4(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  sub_1A59306A4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  sub_1A59305A4(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

__n128 __swift_memcpy80_8_2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for Credentials(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  sub_1A581E8A4(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  sub_1A59305A4(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Credentials(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x3C && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 60);
  v3 = (*(_QWORD *)(a1 + 56) >> 58) & 0xC;
  v4 = (((*(_BYTE *)(a1 + 79) & 0x30 | v3) >> 3) & 0xFFFFFFC7 | (8 * (v3 & 7 | (*(_QWORD *)(a1 + 40) >> 60) & 3))) ^ 0x3F;
  if (v4 >= 0x3B)
    v4 = -1;
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for Credentials(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3B)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 60;
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      v3 = (-a2 >> 3) & 7 | (8 * (-a2 & 0x3F));
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (v3 << 58) & 0x3000000000000000;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = (v3 << 56) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_1A581EC74(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 72) >> 59) & 6 | ((*(_QWORD *)(a1 + 56) & 0x2000000000000000) != 0);
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1A581ECA0(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 56) &= ~0x2000000000000000uLL;
  *(_QWORD *)(result + 72) = v1;
  return result;
}

uint64_t sub_1A581ECBC(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;

  if (a2 < 4)
  {
    v2 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    v3 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    *(_QWORD *)(result + 40) &= 0xCFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(result + 56) = v2;
    *(_QWORD *)(result + 72) = v3;
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for Credentials()
{
  return &type metadata for Credentials;
}

{
  return &type metadata for Credentials;
}

_OWORD *sub_1A581ED2C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *a2 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  return a2;
}

uint64_t sub_1A581ED4C(uint64_t a1)
{
  sub_1A581E8A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  return a1;
}

BOOL static DataTransferReport.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t DataTransferReport.receivedTransportByteCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

double (*DataTransferReport.receivedTransportByteCount.modify())(_QWORD)
{
  return nullsub_1;
}

{
  return nullsub_1;
}

uint64_t DataTransferReport.sentTransportByteCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t DataTransferReport.sentTransportByteCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

double (*DataTransferReport.sentTransportByteCount.modify())(_QWORD)
{
  return nullsub_1;
}

{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for DataTransferReport()
{
  return &type metadata for DataTransferReport;
}

{
  return &type metadata for DataTransferReport;
}

IMAP2Persistence::DownloadPass_optional __swiftcall DownloadPass.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  IMAP2Persistence::DownloadPass_optional v2;

  v1 = sub_1A594CB28();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = IMAP2Persistence_DownloadPass_second;
  else
    v2.value = IMAP2Persistence_DownloadPass_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

void *static DownloadPass.allCases.getter()
{
  return &unk_1E4E76FA8;
}

uint64_t DownloadPass.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 6581810;
  else
    return 7631665;
}

uint64_t sub_1A581EE70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A58533A0(*a1, *a2);
}

unint64_t sub_1A581EE80()
{
  unint64_t result;

  result = qword_1EE7AA7C0;
  if (!qword_1EE7AA7C0)
  {
    result = MEMORY[0x1A85B1874]("ŲS?ؤ\n", &type metadata for DownloadPass);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7C0);
  }
  return result;
}

uint64_t sub_1A581EEC4()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A581EF28()
{
  sub_1A594B1D8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A581EF60()
{
  sub_1A594CE64();
  sub_1A594B1D8();
  swift_bridgeObjectRelease();
  return sub_1A594CED0();
}

uint64_t sub_1A581EFC0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A594CB28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1A581F01C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 7631665;
  if (*v1)
    v2 = 6581810;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

unint64_t sub_1A581F048()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE7AA7C8;
  if (!qword_1EE7AA7C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0(&qword_1EE7AA7D0);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7C8);
  }
  return result;
}

void sub_1A581F094(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4E770B0;
}

uint64_t storeEnumTagSinglePayload for DownloadPass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A581F0F0 + 4 * byte_1A59D9F55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A581F124 + 4 * asc_1A59D9F50[v4]))();
}

uint64_t sub_1A581F124(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581F12C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A581F134);
  return result;
}

uint64_t sub_1A581F140(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A581F148);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A581F14C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A581F154(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadPass()
{
  return &type metadata for DownloadPass;
}

uint64_t DownloadRequest.id.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t DownloadRequest.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*DownloadRequest.id.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DownloadRequest.mailbox.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t DownloadRequest.mailbox.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = a2;
  return result;
}

double (*DownloadRequest.mailbox.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DownloadRequest.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1A54E42B4(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t DownloadRequest.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A54E46E8(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

double (*DownloadRequest.message.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DownloadRequest.kind.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t DownloadRequest.kind.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

double (*DownloadRequest.kind.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DownloadRequest.init(id:mailbox:message:kind:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_DWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

BOOL static DownloadRequest.ID.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t static DownloadRequest.Kind.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(a1, a2);
  else
    return (a1 | a2) == 0;
}

uint64_t sub_1A581F2FC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s16IMAP2Persistence15DownloadRequestV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t sub_1A581F340(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v2, v3);
}

uint64_t DownloadRequest.ID.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*DownloadRequest.ID.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t DownloadRequest.ID.hash(into:)()
{
  return sub_1A594CEAC();
}

{
  return sub_1A594CE88();
}

uint64_t DownloadRequest.ID.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CEAC();
  return sub_1A594CED0();
}

{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t DownloadRequest.ID.description.getter()
{
  return sub_1A594CC9C();
}

uint64_t sub_1A581F42C()
{
  return sub_1A594CC9C();
}

uint64_t DownloadRequest.ID.init()()
{
  return 1;
}

uint64_t DownloadRequest.ID.next.getter(int a1)
{
  return (a1 + 1);
}

uint64_t _s16IMAP2Persistence15DownloadRequestV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (*(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32)) == (*(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 16) << 32))
    && sub_1A578ECF4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    sub_1A54E42B4(v4, v5);
    sub_1A54E42B4(v6, v7);
    v8 = sub_1A58533A4(v4, v5, v6, v7);
    sub_1A54E46E8(v6, v7);
    sub_1A54E46E8(v4, v5);
    if ((v8 & 1) != 0)
    {
      sub_1A581F948((_QWORD *)(a1 + 40), &v12);
      sub_1A581F948((_QWORD *)(a2 + 40), &v11);
      sub_1A581F948(&v12, &v13);
      v9 = v13;
      if (v13)
      {
        sub_1A581F948(&v11, &v14);
        if (v14 && (static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v9) & 1) != 0)
          return 1;
      }
      else
      {
        sub_1A581F948(&v11, &v14);
        if (!v14)
          return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_1A581F5BC()
{
  unint64_t result;

  result = qword_1EE7983F8;
  if (!qword_1EE7983F8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for DownloadRequest.ID, &type metadata for DownloadRequest.ID);
    atomic_store(result, (unint64_t *)&qword_1EE7983F8);
  }
  return result;
}

unint64_t sub_1A581F604()
{
  unint64_t result;

  result = qword_1EE798400;
  if (!qword_1EE798400)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for DownloadRequest.ID, &type metadata for DownloadRequest.ID);
    atomic_store(result, (unint64_t *)&qword_1EE798400);
  }
  return result;
}

uint64_t destroy for DownloadRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A54E46E8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

{
  return sub_1A5934E60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for DownloadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A54E42B4(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for DownloadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  sub_1A54E42B4(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  sub_1A54E46E8(v6, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A5938E54(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A5934E60(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy48_8_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1A54E46E8(v4, v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A5934E60(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DownloadRequest()
{
  return &type metadata for DownloadRequest;
}

{
  return &type metadata for DownloadRequest;
}

_QWORD *initializeBufferWithCopyOfBuffer for DownloadRequest.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

_QWORD *assignWithCopy for DownloadRequest.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DownloadRequest.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadRequest.Kind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DownloadRequest.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequest.Kind()
{
  return &type metadata for DownloadRequest.Kind;
}

ValueMetadata *type metadata accessor for DownloadRequest.ID()
{
  return &type metadata for DownloadRequest.ID;
}

{
  return &type metadata for DownloadRequest.ID;
}

_QWORD *sub_1A581F948(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t Environment.power.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*Environment.power.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.appState.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t Environment.appState.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result & 1;
  return result;
}

double (*Environment.appState.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.isLocked.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t Environment.isLocked.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

double (*Environment.isLocked.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.thermalState.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Environment.thermalState.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

double (*Environment.thermalState.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.availableFileSystemSpace.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Environment.availableFileSystemSpace.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

double (*Environment.availableFileSystemSpace.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.unreconciledMessageCount.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t Environment.unreconciledMessageCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

double (*Environment.unreconciledMessageCount.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Environment.init(power:appState:isLocked:thermalState:availableFileSystemSpace:unreconciledMessageCount:)(unsigned __int8 a1, char a2, char a3)
{
  int v3;

  if ((a3 & 1) != 0)
    v3 = 0x10000;
  else
    v3 = 0;
  return a1 | ((a2 & 1) << 8) | v3;
}

BOOL static Environment.__derived_struct_equals(_:_:)(int a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  return sub_1A58204DC(a1 & 0x101FF, a2, a3, a4, a5 & 0x101FF, a6, a7, a8);
}

BOOL static Environment.AppState.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

BOOL static Environment.AvailableFileSystemSpace.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

BOOL sub_1A581FA78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  if (a1[1])
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *a1;
  if (a1[2])
    v4 = 0x10000;
  else
    v4 = 0;
  v5 = v3 | v4;
  if (a2[1])
    v6 = 256;
  else
    v6 = 0;
  v7 = v6 | *a2;
  if (a2[2])
    v8 = 0x10000;
  else
    v8 = 0;
  return sub_1A58204DC(v5, *((_QWORD *)a1 + 1), a1[16], *((_QWORD *)a1 + 3), v7 | v8, *((_QWORD *)a2 + 1), a2[16], *((_QWORD *)a2 + 3));
}

uint64_t Environment.AppState.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t Environment.AppState.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t Environment.AppState.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x756F72676B636162;
  else
    return 0x656C6269736976;
}

uint64_t sub_1A581FB94()
{
  _BYTE *v0;

  if (*v0)
    return 0x756F72676B636162;
  else
    return 0x656C6269736976;
}

IMAP2Persistence::Environment::Power __swiftcall Environment.Power.init(inLowPowerMode:isPluggedIn:batteryPercentage:)(Swift::Bool inLowPowerMode, Swift::Bool isPluggedIn, Swift::Float_optional *batteryPercentage)
{
  unint64_t v4;
  IMAP2Persistence::Environment::Power v5;

  if (inLowPowerMode)
    return 0;
  v4 = ((unint64_t)batteryPercentage >> 32) & 1;
  if (*(float *)&batteryPercentage >= 0.2)
    LODWORD(v4) = 1;
  if (isPluggedIn)
    v5 = IMAP2Persistence_Environment_Power_pluggedIn;
  else
    v5 = IMAP2Persistence_Environment_Power_onBattery;
  if ((_DWORD)v4)
    return v5;
  else
    return 0;
}

uint64_t Environment.Power.description.getter(char a1)
{
  if (!a1)
    return 0x7265776F50776F6CLL;
  if (a1 == 1)
    return 0x7265747461426E6FLL;
  return 0x4964656767756C70;
}

uint64_t sub_1A581FC80()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7265747461426E6FLL;
  if (*v0 != 1)
    v1 = 0x4964656767756C70;
  if (*v0)
    return v1;
  else
    return 0x7265776F50776F6CLL;
}

uint64_t Environment.AvailableFileSystemSpace.hash(into:)()
{
  return sub_1A594CE88();
}

IMAP2Persistence::Environment::AvailableFileSystemSpace __swiftcall Environment.AvailableFileSystemSpace.init(availableByteCount:bytesForOpportunisticUsage:)(Swift::Int availableByteCount, Swift::Int bytesForOpportunisticUsage)
{
  char v3;
  char v4;
  IMAP2Persistence::Environment::AvailableFileSystemSpace v5;

  if (bytesForOpportunisticUsage <= 0x4650FFFFFLL && availableByteCount <= 1888485375)
    v3 = 1;
  else
    v3 = 2;
  if (bytesForOpportunisticUsage <= 0x9C3FFFFFFLL)
    v4 = v3;
  else
    v4 = 3;
  if (availableByteCount <= 0x270FFFFFFLL)
    v5 = v4;
  else
    v5 = IMAP2Persistence_Environment_AvailableFileSystemSpace_abundant;
  if (availableByteCount <= 105906175 && bytesForOpportunisticUsage < 1049624576)
    return 0;
  else
    return v5;
}

uint64_t Environment.AvailableFileSystemSpace.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A581FDA0 + 4 * byte_1A59DA190[a1]))(7827308, 0xE300000000000000);
}

unint64_t sub_1A581FDA0()
{
  return 0xD000000000000022;
}

unint64_t sub_1A581FDC0()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1A581FDDC()
{
  return 0x746E61646E756261;
}

uint64_t sub_1A581FDF4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A581FE1C + 4 * byte_1A59DA194[*v0]))(7827308, 0xE300000000000000);
}

unint64_t sub_1A581FE1C()
{
  return 0xD000000000000022;
}

unint64_t sub_1A581FE3C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1A581FE58()
{
  return 0x746E61646E756261;
}

void Environment.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      break;
    default:
      sub_1A594CC9C();
      break;
  }
  sub_1A594C720();
  sub_1A594B5F8();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  __asm { BR              X10 }
}

uint64_t sub_1A582011C()
{
  uint64_t v1;

  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1A5820190()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;

  if (v0[1])
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *v0;
  if (v0[2])
    v3 = 0x10000;
  else
    v3 = 0;
  Environment.description.getter(v2 | v3, *((_QWORD *)v0 + 1), v0[16]);
}

__n128 Environment.capturedValue.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v6;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  sub_1A5820524(a1, (a1 >> 8) & 1, WORD1(a1) & 1, a2, a3);
  *(_OWORD *)(a4 + 32) = v8;
  *(_OWORD *)(a4 + 48) = v9;
  *(_QWORD *)(a4 + 64) = v10;
  result = v7;
  *(_OWORD *)a4 = v6;
  *(__n128 *)(a4 + 16) = v7;
  return result;
}

uint64_t sub_1A5820224()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A5820250 + 4 * byte_1A59DA1A0[*v0]))(0x7265776F70, 0xE500000000000000);
}

uint64_t sub_1A5820250()
{
  return 0x6574617453707061;
}

uint64_t sub_1A5820268()
{
  return 0x64656B636F4C7369;
}

uint64_t sub_1A5820280()
{
  return 0x536C616D72656874;
}

unint64_t sub_1A58202A0()
{
  return 0xD000000000000018;
}

uint64_t sub_1A58202BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A5820FC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A58202E0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1A58202EC()
{
  sub_1A582076C();
  return sub_1A594CFB4();
}

uint64_t sub_1A5820314()
{
  sub_1A582076C();
  return sub_1A594CFC0();
}

uint64_t Environment.CapturedValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79AD20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1_0(a1, a1[3]);
  sub_1A582076C();
  sub_1A594CF3C();
  v8[15] = 0;
  sub_1A594CC18();
  if (!v1)
  {
    v8[14] = 1;
    sub_1A594CC18();
    v8[13] = 2;
    sub_1A594CC24();
    v8[12] = 3;
    sub_1A594CC18();
    v8[11] = 4;
    sub_1A594CC18();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1A58204C8(_QWORD *a1)
{
  return Environment.CapturedValue.encode(to:)(a1);
}

BOOL sub_1A58204DC(int a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v10;
  _BOOL4 v13;
  _BOOL4 v14;

  v8 = a5 ^ a1;
  if (a5 != a1)
    return 0;
  v9 = (v8 >> 8) & 1;
  v10 = HIWORD(v8) & 1;
  v13 = a2 == a6 && a3 == a7 && a4 == a8;
  v14 = (v10 & 1) == 0 && v13;
  return (v9 & 1) == 0 && v14;
}

void sub_1A5820524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      break;
    default:
      sub_1A594CC9C();
      break;
  }
  __asm { BR              X12 }
}

uint64_t sub_1A58206E4(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 32) = v2 & 1;
  *(_QWORD *)(v1 + 40) = result;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = 0xD000000000000022;
  *(_QWORD *)(v1 + 64) = 0x80000001A5A13750;
  return result;
}

unint64_t sub_1A582076C()
{
  unint64_t result;

  result = qword_1EE798338;
  if (!qword_1EE798338)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59DA51C, &type metadata for Environment.CapturedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE798338);
  }
  return result;
}

unint64_t sub_1A58207B4()
{
  unint64_t result;

  result = qword_1EE7AA7D8;
  if (!qword_1EE7AA7D8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Environment.AppState, &type metadata for Environment.AppState);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7D8);
  }
  return result;
}

unint64_t sub_1A58207FC()
{
  unint64_t result;

  result = qword_1EE7AA7E0;
  if (!qword_1EE7AA7E0)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Environment.Power, &type metadata for Environment.Power);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7E0);
  }
  return result;
}

unint64_t sub_1A5820844()
{
  unint64_t result;

  result = qword_1EE7AA7E8;
  if (!qword_1EE7AA7E8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Environment.AvailableFileSystemSpace, &type metadata for Environment.AvailableFileSystemSpace);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7E8);
  }
  return result;
}

__n128 __swift_memcpy32_8_5(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

uint64_t storeEnumTagSinglePayload for Environment.AppState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5820978 + 4 * byte_1A59DA1B2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A58209AC + 4 * byte_1A59DA1AD[v4]))();
}

uint64_t sub_1A58209AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58209B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A58209BCLL);
  return result;
}

uint64_t sub_1A58209C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A58209D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A58209D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58209DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment.AppState()
{
  return &type metadata for Environment.AppState;
}

uint64_t storeEnumTagSinglePayload for Environment.Power(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A5820A44 + 4 * byte_1A59DA1BC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A5820A78 + 4 * byte_1A59DA1B7[v4]))();
}

uint64_t sub_1A5820A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5820A88);
  return result;
}

uint64_t sub_1A5820A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5820A9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A5820AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment.Power()
{
  return &type metadata for Environment.Power;
}

uint64_t storeEnumTagSinglePayload for Environment.AvailableFileSystemSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A5820B10 + 4 * byte_1A59DA1C6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A5820B44 + 4 * byte_1A59DA1C1[v4]))();
}

uint64_t sub_1A5820B44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5820B54);
  return result;
}

uint64_t sub_1A5820B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5820B68);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A5820B6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820B74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment.AvailableFileSystemSpace()
{
  return &type metadata for Environment.AvailableFileSystemSpace;
}

uint64_t destroy for Environment.CapturedValue()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Environment.CapturedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for Environment.CapturedValue(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8_3(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Environment.CapturedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment.CapturedValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment.CapturedValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment.CapturedValue()
{
  return &type metadata for Environment.CapturedValue;
}

uint64_t storeEnumTagSinglePayload for Environment.CapturedValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A5820E6C + 4 * byte_1A59DA1D0[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A5820EA0 + 4 * byte_1A59DA1CB[v4]))();
}

uint64_t sub_1A5820EA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5820EB0);
  return result;
}

uint64_t sub_1A5820EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5820EC4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A5820EC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5820ED0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment.CapturedValue.CodingKeys()
{
  return &type metadata for Environment.CapturedValue.CodingKeys;
}

unint64_t sub_1A5820EF0()
{
  unint64_t result;

  result = qword_1EE7AA7F0;
  if (!qword_1EE7AA7F0)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59DA4F4, &type metadata for Environment.CapturedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7F0);
  }
  return result;
}

unint64_t sub_1A5820F38()
{
  unint64_t result;

  result = qword_1EE798348;
  if (!qword_1EE798348)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59DA464, &type metadata for Environment.CapturedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE798348);
  }
  return result;
}

unint64_t sub_1A5820F80()
{
  unint64_t result;

  result = qword_1EE798340;
  if (!qword_1EE798340)
  {
    result = MEMORY[0x1A85B1874](&unk_1A59DA48C, &type metadata for Environment.CapturedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE798340);
  }
  return result;
}

uint64_t sub_1A5820FC4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265776F70 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A594CD38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617453707061 && a2 == 0xE800000000000000 || (sub_1A594CD38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656B636F4C7369 && a2 == 0xE800000000000000 || (sub_1A594CD38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x536C616D72656874 && a2 == 0xEC00000065746174 || (sub_1A594CD38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A5A137A0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1A594CD38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_1A58211F8(uint64_t *a1)
{
  _s16IMAP2Persistence5EventO6UpdateO21__derived_enum_equalsySbAE_AEtFZ_0(*a1);
}

uint64_t FlagsChange.message.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*FlagsChange.message.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FlagsChange.flags.getter(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)&v2 + 1) = a2;
  *(_QWORD *)&v2 = a1;
  v3 = (v2 >> 32) & 0x101010101;
  v4 = 0x10000000000;
  if (!BYTE1(a2))
    v4 = 0;
  return (v3 | v4) & 0xFFFFFFFFFFFFLL | ((unint64_t)WORD1(a2) << 48);
}

int8x8_t FlagsChange.flags.setter(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64x2_t v3;
  int16x8_t v4;
  int8x8_t result;

  *(_BYTE *)(v2 + 4) = a1 & 1;
  v3 = (uint64x2_t)vdupq_n_s64(a1);
  v4 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1A59ABFB0), (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1A59ABFA0));
  *(int8x8_t *)v4.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v4), (int8x8_t)0x1000100010001);
  result = vmovn_s16(v4);
  *(_DWORD *)(v2 + 5) = result.i32[0];
  *(_BYTE *)(v2 + 9) = BYTE5(a1) & 1;
  *(_BYTE *)(v2 + 10) = BYTE6(a1);
  *(_BYTE *)(v2 + 11) = HIBYTE(a1);
  *(_QWORD *)(v2 + 12) = a2;
  return result;
}

double (*FlagsChange.flags.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsChange.changeIDs.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t FlagsChange.changeIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

double (*FlagsChange.changeIDs.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsChange.init(message:flags:changeIDs:)(unsigned int a1, uint64_t a2)
{
  return (a2 << 32) & 0x101010101010101 | a1;
}

uint64_t static FlagsChange.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  LOWORD(v10) = a2 & 0xFF01;
  BYTE2(v10) = BYTE2(a2);
  BYTE3(v10) = BYTE3(a2);
  HIDWORD(v10) = HIDWORD(a2);
  v8 = v10;
  LOWORD(v10) = a6 & 0xFF01;
  BYTE2(v10) = BYTE2(a6);
  BYTE3(v10) = BYTE3(a6);
  HIDWORD(v10) = HIDWORD(a6);
  return sub_1A58218C8(a1 & 0x1010101FFFFFFFFLL, v8, a3, a4, a5 & 0x1010101FFFFFFFFLL, v10, a7, a8);
}

uint64_t sub_1A58213D4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 5);
  v4 = *((unsigned __int8 *)a1 + 6);
  v5 = *((unsigned __int8 *)a1 + 7);
  v6 = *((_BYTE *)a1 + 8);
  v7 = *((_BYTE *)a1 + 9);
  v8 = *((_WORD *)a1 + 5);
  v9 = *(_QWORD *)(a1 + 3);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *a2;
  v12 = *((unsigned __int8 *)a2 + 4);
  v13 = *((unsigned __int8 *)a2 + 5);
  v14 = *((unsigned __int8 *)a2 + 6);
  v15 = *((unsigned __int8 *)a2 + 7);
  v16 = *((_BYTE *)a2 + 8);
  v17 = *((_BYTE *)a2 + 9);
  v18 = *((_WORD *)a2 + 5);
  v19 = *(_QWORD *)(a2 + 3);
  v20 = *((_QWORD *)a2 + 3);
  if (*((_BYTE *)a1 + 4))
    v21 = 0x100000000;
  else
    v21 = 0;
  v22 = v21 | v2;
  if (v3)
    v23 = 0x10000000000;
  else
    v23 = 0;
  if (v4)
    v24 = 0x1000000000000;
  else
    v24 = 0;
  v25 = v22 | v23 | v24;
  if (v5)
    v26 = 0x100000000000000;
  else
    v26 = 0;
  v27 = v25 | v26;
  LOBYTE(v36) = v6;
  BYTE1(v36) = v7;
  WORD1(v36) = v8;
  HIDWORD(v36) = v9;
  v28 = v36;
  if (v12)
    v29 = 0x100000000;
  else
    v29 = 0;
  v30 = v29 | v11;
  if (v13)
    v31 = 0x10000000000;
  else
    v31 = 0;
  if (v14)
    v32 = 0x1000000000000;
  else
    v32 = 0;
  v33 = v30 | v31 | v32;
  if (v15)
    v34 = 0x100000000000000;
  else
    v34 = 0;
  LOBYTE(v37) = v16;
  BYTE1(v37) = v17;
  WORD1(v37) = v18;
  HIDWORD(v37) = v19;
  return sub_1A58218C8(v27, v28, HIDWORD(v9), v10, v33 | v34, v37, HIDWORD(v19), v20);
}

uint64_t MailboxToRename.mailbox.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MailboxToRename.mailbox.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)v2 = a1;
  *(_DWORD *)(v2 + 8) = a2;
  return result;
}

double (*MailboxToRename.mailbox.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxToRename.newName.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MailboxToRename.newName.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_DWORD *)(v2 + 24) = a2;
  return result;
}

double (*MailboxToRename.newName.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxToRename.hash(into:)()
{
  sub_1A594CE88();
  return sub_1A594CE88();
}

uint64_t MailboxToRename.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A5821660()
{
  sub_1A594CE64();
  sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A58216BC()
{
  sub_1A594CE88();
  return sub_1A594CE88();
}

uint64_t sub_1A58216FC()
{
  sub_1A594CE64();
  sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

BOOL sub_1A5821754(uint64_t a1, uint64_t a2)
{
  return _s16IMAP2Persistence15MailboxToRenameV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 24));
}

void sub_1A5821780(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1A58217C4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1A58217F8 + *((int *)qword_1A58218B8 + (v0 >> 62))))();
}

uint64_t sub_1A5821808@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_1A54E42B4(v2, v1);
      sub_1A5853FAC(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1A58218C8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (a5 != a1
    || ((a1 & 0x100000000) == 0) == (BYTE4(a5) & 1)
    || ((a1 & 0x10000000000) == 0) == ((a5 >> 40) & 1)
    || ((a1 & 0x1000000000000) == 0) == (HIWORD(a5) & 1)
    || ((a1 & 0x100000000000000) == 0) == (HIBYTE(a5) & 1)
    || ((((a2 & 1) == 0) ^ a6) & 1) == 0
    || ((BYTE1(a2) ^ BYTE1(a6)) & 1) != 0
    || BYTE2(a2) != BYTE2(a6)
    || BYTE3(a2) != BYTE3(a6))
  {
    return 0;
  }
  if (BYTE4(a2) != 2)
  {
    if (BYTE4(a6) == 2
      || (sub_1A5828F3C(__PAIR64__(a3, HIDWORD(a2)) & 0xFFFF010101010101, __PAIR64__(a7, HIDWORD(a6)) & 0xFFFF010101010101) & 1) == 0)
    {
      return 0;
    }
    return sub_1A54ECF6C(a4, a8);
  }
  if (BYTE4(a6) == 2)
    return sub_1A54ECF6C(a4, a8);
  return 0;
}

BOOL _s16IMAP2Persistence15MailboxToRenameV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  if (a2 != a6)
    return 0;
  return sub_1A578ECF4(a1, a5) && a4 == a8 && sub_1A578ECF4(a3, a7);
}

void _s16IMAP2Persistence5EventO6UpdateO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_1A594A0EC();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7964D8);
  MEMORY[0x1E0C80A78](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  __asm { BR              X10 }
}

BOOL sub_1A5821BA0()
{
  unint64_t v0;
  uint64_t v1;

  return !((v0 >> 59) & 0x1E | (v0 >> 2) & 1)
      && *(unsigned __int8 *)(v1 + 16) == *(unsigned __int8 *)(v0 + 16)
      && ((*(unsigned __int8 *)(v1 + 17) ^ *(unsigned __int8 *)(v0 + 17)) & 1) == 0
      && ((*(unsigned __int8 *)(v1 + 18) ^ *(unsigned __int8 *)(v0 + 18)) & 1) == 0
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(v0 + 24)
      && *(unsigned __int8 *)(v1 + 32) == *(unsigned __int8 *)(v0 + 32)
      && *(_QWORD *)(v1 + 40) == *(_QWORD *)(v0 + 40);
}

unint64_t sub_1A5822978()
{
  unint64_t result;

  result = qword_1EE7AA7F8;
  if (!qword_1EE7AA7F8)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for MailboxToRename, &type metadata for MailboxToRename);
    atomic_store(result, (unint64_t *)&qword_1EE7AA7F8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1A5524688(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Event(uint64_t a1)
{
  return sub_1A552469C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

{
  sub_1A5893E90(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1A5524688(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1A552469C(v5, v6);
  return a1;
}

{
  unint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_1A5893E60(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  sub_1A5893E90(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_memcpy9_8_5(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1A552469C(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Event()
{
  return &type metadata for Event;
}

{
  return &type metadata for Event;
}

_QWORD *initializeBufferWithCopyOfBuffer for Event.Update(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for Event.Update()
{
  return swift_release();
}

_QWORD *assignWithCopy for Event.Update(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for Event.Update(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Event.Update(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x6D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 109);
  v3 = ((((*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(_QWORD *)a1 & 3))) ^ 0x7F;
  if (v3 >= 0x6C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Event.Update(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x6C)
  {
    *(_QWORD *)result = a2 - 109;
    if (a3 >= 0x6D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x6D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A5822C30(_QWORD *a1)
{
  return (*a1 >> 59) & 0x1E | (*a1 >> 2) & 1;
}

unint64_t *sub_1A5822C44(unint64_t *result, uint64_t a2)
{
  *result = (a2 << 59) & 0xF000000000000000 | (4 * (a2 & 1)) | *result & 0xFFFFFFFFFFFFFF8;
  return result;
}

ValueMetadata *type metadata accessor for Event.Update()
{
  return &type metadata for Event.Update;
}

uint64_t initializeWithCopy for FlagsChange(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for FlagsChange(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FlagsChange(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FlagsChange()
{
  return &type metadata for FlagsChange;
}

uint64_t initializeWithCopy for MailboxToRename(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return a1;
}

uint64_t assignWithCopy for MailboxToRename(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MailboxToRename(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxToRename(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MailboxToRename(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxToRename()
{
  return &type metadata for MailboxToRename;
}

uint64_t sub_1A5822F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A5822FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE796438;
  if (!qword_1EE796438)
  {
    v1 = sub_1A594A0EC();
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0CB08B8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE796438);
  }
  return result;
}

BOOL sub_1A5823014(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

BOOL static FetchedWindow.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t FetchedWindow.range.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

double (*FetchedWindow.range.modify())(_QWORD)
{
  return nullsub_1;
}

BOOL sub_1A582304C(_DWORD *a1, _DWORD *a2)
{
  return *a2 == *a1 && a2[1] == a1[1];
}

unint64_t FetchedWindow.upperBound.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

ValueMetadata *type metadata accessor for FetchedWindow()
{
  return &type metadata for FetchedWindow;
}

unint64_t static Flags.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5828F3C(a1 & 0xFFFF010101010101, a2 & 0xFFFF010101010101);
}

uint64_t static FlagsWithModifications.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5828FB0(a1 & 0xFFFF010101010101, a2, a3 & 0xFFFF010101010101, a4);
}

double (*Flags.unread.modify())(_QWORD)
{
  return nullsub_1;
}

double (*Flags.deleted.modify())(_QWORD)
{
  return nullsub_1;
}

double (*Flags.answered.modify())(_QWORD)
{
  return nullsub_1;
}

double (*Flags.draft.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Flags.forwarded.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

uint64_t Flags.forwarded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

double (*Flags.forwarded.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Flags.redirected.getter(unint64_t a1)
{
  return (a1 >> 40) & 1;
}

uint64_t Flags.redirected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

double (*Flags.redirected.modify())(_QWORD)
{
  return nullsub_1;
}

double (*Flags.junk.modify())(_QWORD)
{
  return nullsub_1;
}

double (*Flags.label.modify())(_QWORD)
{
  return nullsub_1;
}

BOOL static Flags.JunkStatus.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Flags.JunkStatus.hash(into:)()
{
  return sub_1A594CE88();
}

IMAP2Persistence::Flags __swiftcall Flags.init(unread:deleted:answered:draft:forwarded:redirected:junk:label:)(Swift::Bool unread, Swift::Bool deleted, Swift::Bool answered, Swift::Bool draft, Swift::Bool forwarded, Swift::Bool redirected, IMAP2Persistence::Flags::JunkStatus junk, IMAP2Persistence::Flags::Label label)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = 0x10000000000;
  if (!redirected)
    v8 = 0;
  v9 = 0x100000000;
  if (!forwarded)
    v9 = 0;
  v10 = v8 | v9;
  v11 = 0x1000000;
  if (!draft)
    v11 = 0;
  v12 = ((unint64_t)junk << 48) | ((_QWORD)label << 56) | v10 | v11;
  v13 = 0x10000;
  if (!answered)
    v13 = 0;
  v14 = 256;
  if (!deleted)
    v14 = 0;
  return (IMAP2Persistence::Flags)(v12 | v13 | v14 | unread);
}

uint64_t Flags.hash(into:)()
{
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE88();
  return sub_1A594CE88();
}

uint64_t Flags.hashValue.getter()
{
  sub_1A594CE64();
  Flags.hash(into:)();
  return sub_1A594CED0();
}

uint64_t sub_1A58232A4()
{
  sub_1A594CE64();
  Flags.hash(into:)();
  return sub_1A594CED0();
}

uint64_t sub_1A5823370()
{
  return Flags.hash(into:)();
}

uint64_t sub_1A58233EC()
{
  sub_1A594CE64();
  Flags.hash(into:)();
  return sub_1A594CED0();
}

unint64_t sub_1A58234B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = v7 == 0;
  v11 = 0x10000000000;
  if (v10)
    v12 = 0;
  else
    v12 = 0x10000000000;
  v10 = v6 == 0;
  v13 = 0x100000000;
  if (v10)
    v14 = 0;
  else
    v14 = 0x100000000;
  v10 = v5 == 0;
  v15 = 0x1000000;
  if (v10)
    v16 = 0;
  else
    v16 = 0x1000000;
  v10 = v4 == 0;
  v17 = 0x10000;
  if (v10)
    v18 = 0;
  else
    v18 = 0x10000;
  v10 = v3 == 0;
  v19 = 256;
  if (v10)
    v20 = 0;
  else
    v20 = 256;
  v21 = v20 | v2 | v18 | v16 | v14 | v12 | (v8 << 48) | (v9 << 56);
  if (!a2[5])
    v11 = 0;
  if (!a2[4])
    v13 = 0;
  if (!a2[3])
    v15 = 0;
  if (!a2[2])
    v17 = 0;
  if (!a2[1])
    v19 = 0;
  return sub_1A5828F3C(v21, v19 | *a2 | v17 | v15 | v13 | v11 | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56));
}

void Flags.description.getter(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t inited;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  char v19;

  v1 = HIWORD(a1);
  v2 = HIBYTE(a1);
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA800);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A59ABDD0;
  *(_QWORD *)(inited + 32) = swift_getKeyPath();
  *(_QWORD *)(inited + 40) = 0x646165726E75;
  *(_QWORD *)(inited + 48) = 0xE600000000000000;
  *(_QWORD *)(inited + 56) = swift_getKeyPath();
  *(_QWORD *)(inited + 64) = 0x646574656C6564;
  *(_QWORD *)(inited + 72) = 0xE700000000000000;
  *(_QWORD *)(inited + 80) = swift_getKeyPath();
  *(_QWORD *)(inited + 88) = 0x6465726577736E61;
  *(_QWORD *)(inited + 96) = 0xE800000000000000;
  *(_QWORD *)(inited + 104) = swift_getKeyPath();
  *(_QWORD *)(inited + 112) = 0x7466617264;
  *(_QWORD *)(inited + 120) = 0xE500000000000000;
  *(_QWORD *)(inited + 128) = swift_getKeyPath();
  *(_QWORD *)(inited + 136) = 0x6564726177726F66;
  *(_QWORD *)(inited + 144) = 0xE900000000000064;
  v4 = 0;
  *(_QWORD *)(inited + 152) = swift_getKeyPath();
  *(_QWORD *)(inited + 160) = 0x7463657269646572;
  *(_QWORD *)(inited + 168) = 0xEA00000000006465;
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  v18 = v2;
  while (1)
  {
    v6 = *(_QWORD *)(inited + v4 + 40);
    v7 = *(_QWORD *)(inited + v4 + 48);
    swift_retain();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    swift_getAtKeyPath();
    swift_release();
    if ((v19 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1A5826B40(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v2 = *((_QWORD *)v5 + 2);
      v8 = *((_QWORD *)v5 + 3);
      if (v2 >= v8 >> 1)
        v5 = sub_1A5826B40((char *)(v8 > 1), v2 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v2 + 1;
      v9 = &v5[16 * v2];
      *((_QWORD *)v9 + 4) = v6;
      *((_QWORD *)v9 + 5) = v7;
      LODWORD(v2) = v18;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v4 += 24;
    if (v4 == 144)
    {
      swift_bridgeObjectRelease();
      if ((_BYTE)v1)
      {
        if (v1 == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_1A5826B40(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
          v11 = *((_QWORD *)v5 + 2);
          v10 = *((_QWORD *)v5 + 3);
          if (v11 >= v10 >> 1)
            v5 = sub_1A5826B40((char *)(v10 > 1), v11 + 1, 1, v5);
          *((_QWORD *)v5 + 2) = v11 + 1;
          v12 = &v5[16 * v11];
          *((_QWORD *)v12 + 4) = 1802401130;
          v13 = v12 + 32;
          v14 = 0xE400000000000000;
        }
        else
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_1A5826B40(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
          v16 = *((_QWORD *)v5 + 2);
          v15 = *((_QWORD *)v5 + 3);
          if (v16 >= v15 >> 1)
            v5 = sub_1A5826B40((char *)(v15 > 1), v16 + 1, 1, v5);
          *((_QWORD *)v5 + 2) = v16 + 1;
          v17 = &v5[16 * v16];
          *((_QWORD *)v17 + 4) = 0x6B6E754A746F6ELL;
          v13 = v17 + 32;
          v14 = 0xE700000000000000;
        }
        *((_QWORD *)v13 + 1) = v14;
      }
      __asm { BR              X10 }
    }
  }
}

void sub_1A5823D44()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 0x10000000000;
  if (!v0[5])
    v1 = 0;
  v2 = 0x100000000;
  if (!v0[4])
    v2 = 0;
  v3 = 0x1000000;
  if (!v0[3])
    v3 = 0;
  v4 = 0x10000;
  if (!v0[2])
    v4 = 0;
  v5 = 256;
  if (!v0[1])
    v5 = 0;
  Flags.description.getter(v5 | *v0 | v4 | v3 | v2 | v1 | ((unint64_t)v0[6] << 48) | ((unint64_t)v0[7] << 56));
}

unint64_t FlagsWithModifications.flags.getter(uint64_t a1)
{
  return a1 & 0xFFFF010101010101;
}

int8x8_t FlagsWithModifications.flags.setter(unint64_t a1)
{
  uint64_t v1;
  uint64x2_t v2;
  int16x8_t v3;
  int8x8_t result;

  v2 = (uint64x2_t)vdupq_n_s64(a1);
  *(_BYTE *)v1 = a1 & 1;
  v3 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v2, (uint64x2_t)xmmword_1A59ABFB0), (int32x4_t)vshlq_u64(v2, (uint64x2_t)xmmword_1A59ABFA0));
  *(int8x8_t *)v3.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x1000100010001);
  result = vmovn_s16(v3);
  *(_DWORD *)(v1 + 1) = result.i32[0];
  *(_BYTE *)(v1 + 5) = BYTE5(a1) & 1;
  *(_BYTE *)(v1 + 6) = BYTE6(a1);
  *(_BYTE *)(v1 + 7) = HIBYTE(a1);
  return result;
}

double (*FlagsWithModifications.flags.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsWithModifications.originalFlags.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t FlagsWithModifications.hasLocalChanges.getter(unint64_t a1, uint64_t a2)
{
  BOOL v3;

  if (a2 == 2)
    return 1;
  v3 = !((((a2 & 1) == 0) ^ a1) & (((a2 & 0x100) == 0) ^ BYTE1(a1)) & (((a2 & 0x10000) == 0) ^ ((a1 & 0x10000) >> 16)) & (((a2 & 0x1000000) == 0) ^ BYTE3(a1)) & (((a2 & 0x100000000) == 0) ^ BYTE4(a1)) & (((a2 & 0x10000000000) == 0) ^ BYTE5(a1) & 1u));
  if (((a2 ^ a1) & 0xFF000000000000) != 0)
    v3 = 1;
  return v3 | ((a2 ^ a1) >> 56 != 0);
}

uint64_t FlagsWithModifications.locallyModified.getter(unint64_t a1, uint64_t a2)
{
  unint64_t v5;
  char v6;
  uint64_t v7;

  v7 = MEMORY[0x1E0DEE9E8];
  if (a2 == 2)
    return sub_1A5829088((uint64_t)&unk_1E4E79218);
  if (((((a2 & 1) == 0) ^ a1) & 1) == 0)
    sub_1A582705C(&v6, 0);
  if (((a2 & 0x100) == 0) == ((a1 >> 8) & 1))
    sub_1A582705C(&v6, 1);
  if (((a2 & 0x10000) == 0) == ((a1 >> 16) & 1))
    sub_1A582705C(&v6, 2);
  if (((a2 & 0x1000000) == 0) == ((a1 >> 24) & 1))
    sub_1A582705C(&v6, 3);
  if (((a2 & 0x100000000) == 0) == (BYTE4(a1) & 1))
    sub_1A582705C(&v6, 4);
  if (((a2 & 0x10000000000) == 0) == ((a1 >> 40) & 1))
    sub_1A582705C(&v6, 5);
  v5 = a2 ^ a1;
  if ((v5 & 0xFF000000000000) != 0)
    sub_1A582705C(&v6, 6);
  if (HIBYTE(v5))
    sub_1A582705C(&v6, 7);
  return v7;
}

void *static FlagKind.allCases.getter()
{
  return &unk_1E4E79218;
}

uint64_t FlagsWithModifications.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Flags.hash(into:)();
  if (a3 == 2)
    return sub_1A594CE94();
  sub_1A594CE94();
  return Flags.hash(into:)();
}

uint64_t FlagsWithModifications.hashValue.getter(uint64_t a1, char a2)
{
  sub_1A594CE64();
  Flags.hash(into:)();
  sub_1A594CE94();
  if (a2 != 2)
    Flags.hash(into:)();
  return sub_1A594CED0();
}

uint64_t sub_1A5824158()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A594CE64();
  Flags.hash(into:)();
  sub_1A594CE94();
  if (v1 != 2)
    Flags.hash(into:)();
  return sub_1A594CED0();
}

uint64_t sub_1A5824268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Flags.hash(into:)();
  if (v1 == 2)
    return sub_1A594CE94();
  sub_1A594CE94();
  return Flags.hash(into:)();
}

uint64_t sub_1A5824350()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A594CE64();
  Flags.hash(into:)();
  sub_1A594CE94();
  if (v1 != 2)
    Flags.hash(into:)();
  return sub_1A594CED0();
}

uint64_t sub_1A582445C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)a1 + 1);
  if (a1[1])
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *a1;
  if (a1[2])
    v5 = 0x10000;
  else
    v5 = 0;
  if (a1[3])
    v6 = 0x1000000;
  else
    v6 = 0;
  v7 = v4 | v5 | v6;
  if (a1[4])
    v8 = 0x100000000;
  else
    v8 = 0;
  if (a1[5])
    v9 = 0x10000000000;
  else
    v9 = 0;
  v10 = v7 | v8 | v9 | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[7] << 56);
  if (a2[1])
    v11 = 256;
  else
    v11 = 0;
  v12 = v11 | *a2;
  if (a2[2])
    v13 = 0x10000;
  else
    v13 = 0;
  if (a2[3])
    v14 = 0x1000000;
  else
    v14 = 0;
  v15 = v12 | v13 | v14;
  if (a2[4])
    v16 = 0x100000000;
  else
    v16 = 0;
  if (a2[5])
    v17 = 0x10000000000;
  else
    v17 = 0;
  return sub_1A5828FB0(v10, v2, v15 | v16 | v17 | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56), *((_QWORD *)a2 + 1));
}

char *FlagsWithModifications.description.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unint64_t v9;

  v2 = a1 & 0xFFFF010101010101;
  v3 = FlagsWithModifications.locallyModified.getter(a1 & 0xFFFF010101010101, a2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    sub_1A582828C(0, v4, 0);
    v5 = sub_1A558A0BC(v3);
    if (v5 < 0 || v5 >= 1 << *(_BYTE *)(v3 + 32))
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(v3 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 36) == v6)
        __asm { BR              X9 }
LABEL_12:
      __break(1u);
      swift_release();
      __break(1u);
      JUMPOUT(0x1A58248F4);
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5825454(&v8);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v8 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE799A50);
    sub_1A54E2E30((unint64_t *)&qword_1EE795F98, (uint64_t *)&unk_1EE799A50, MEMORY[0x1E0DEAF20]);
    sub_1A594B268();
  }
  swift_release();
  v8 = 0;
  v9 = 0xE000000000000000;
  sub_1A594C720();
  swift_bridgeObjectRelease();
  v8 = (char *)0xD000000000000013;
  v9 = 0x80000001A5A137C0;
  Flags.description.getter(v2);
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  sub_1A594B5F8();
  swift_bridgeObjectRelease();
  sub_1A594B5F8();
  return v8;
}

char *sub_1A5824914()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = 256;
  if (!v0[1])
    v1 = 0;
  v2 = v1 | *v0;
  v3 = 0x10000;
  if (!v0[2])
    v3 = 0;
  v4 = 0x1000000;
  if (!v0[3])
    v4 = 0;
  v5 = v2 | v3 | v4;
  v6 = 0x100000000;
  if (!v0[4])
    v6 = 0;
  v7 = 0x10000000000;
  if (!v0[5])
    v7 = 0;
  return FlagsWithModifications.description.getter(v5 | v6 | v7 | ((unint64_t)v0[6] << 48) | ((unint64_t)v0[7] << 56), *((_QWORD *)v0 + 1));
}

uint64_t FlagsUpdate.unread.getter(char a1)
{
  return a1 & 1;
}

uint64_t FlagsUpdate.unread.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

double (*FlagsUpdate.unread.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsUpdate.deleted.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t FlagsUpdate.deleted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

double (*FlagsUpdate.deleted.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsUpdate.answered.getter(unint64_t a1)
{
  return (a1 >> 16) & 1;
}

uint64_t FlagsUpdate.answered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

double (*FlagsUpdate.answered.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FlagsUpdate.draft.getter(unint64_t a1)
{
  return (a1 >> 24) & 1;
}

uint64_t FlagsUpdate.draft.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

double (*FlagsUpdate.draft.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FlagsUpdate.forwarded.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t FlagsUpdate.forwarded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

double (*FlagsUpdate.forwarded.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FlagsUpdate.redirected.getter(unint64_t a1)
{
  return a1 >> 40;
}

uint64_t FlagsUpdate.redirected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

double (*FlagsUpdate.redirected.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FlagsUpdate.junk.getter(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t FlagsUpdate.junk.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 6) = result;
  return result;
}

double (*FlagsUpdate.junk.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t FlagsUpdate.label.getter(unint64_t a1)
{
  return HIBYTE(a1);
}

uint64_t FlagsUpdate.label.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 7) = result;
  return result;
}

double (*FlagsUpdate.label.modify())(_QWORD)
{
  return nullsub_1;
}

void *FlagsUpdate.Label.clear.unsafeMutableAddressor()
{
  return &static FlagsUpdate.Label.clear;
}

uint64_t static FlagsUpdate.Label.clear.getter()
{
  return 0;
}

uint64_t FlagsUpdate.Label.hash(into:)(uint64_t a1, char a2)
{
  if (a2 != 8)
    sub_1A594CE88();
  return sub_1A594CE88();
}

BOOL static FlagsUpdate.Label.__derived_enum_equals(_:_:)(char a1, char a2)
{
  if (a1 == 8)
    return a2 == 8;
  if (a2 == 8)
    return 0;
  return a1 == a2;
}

uint64_t FlagsUpdate.Label.hashValue.getter(unsigned __int8 a1)
{
  int v1;

  v1 = a1;
  sub_1A594CE64();
  if (v1 != 8)
    sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A5824B90()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A594CE64();
  if (v1 != 8)
    sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A5824BEC()
{
  _BYTE *v0;

  if (*v0 != 8)
    sub_1A594CE88();
  return sub_1A594CE88();
}

uint64_t sub_1A5824C30()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A594CE64();
  if (v1 != 8)
    sub_1A594CE88();
  sub_1A594CE88();
  return sub_1A594CED0();
}

BOOL sub_1A5824C8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 8)
    return v3 == 8;
  if (v3 == 8)
    return 0;
  return v2 == v3;
}

unint64_t FlagsUpdate.init(unread:deleted:answered:draft:forwarded:redirected:junk:label:)(char a1, char a2, char a3, char a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0x1000000;
  if ((a4 & 1) == 0)
    v8 = 0;
  v9 = 0x10000;
  if ((a3 & 1) == 0)
    v9 = 0;
  v10 = 256;
  if ((a2 & 1) == 0)
    v10 = 0;
  return ((unint64_t)a7 << 48) | (a8 << 56) | ((unint64_t)a6 << 40) | ((unint64_t)a5 << 32) | v8 | v9 | v10 | a1 & 1;
}

uint64_t FlagsUpdate.hash(into:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  sub_1A594CE94();
  if ((a2 & 0xFF00000000) != 0x200000000)
    sub_1A594CE94();
  sub_1A594CE94();
  if ((a2 & 0xFF0000000000) != 0x20000000000)
    sub_1A594CE94();
  v3 = HIBYTE(a2);
  sub_1A594CE94();
  if ((a2 & 0xFF000000000000) != 0x3000000000000)
  {
    sub_1A594CE94();
    sub_1A594CE88();
    if (v3 == 8)
      return sub_1A594CE88();
    goto LABEL_7;
  }
  sub_1A594CE94();
  if (v3 != 8)
LABEL_7:
    sub_1A594CE88();
  return sub_1A594CE88();
}

uint64_t static FlagsUpdate.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5828E0C(a1 & 0xFFFFFFFF01010101, a2 & 0xFFFFFFFF01010101);
}

uint64_t FlagsUpdate.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_1A594CE64();
  FlagsUpdate.hash(into:)((uint64_t)v3, a1 & 0xFFFFFFFF01010101);
  return sub_1A594CED0();
}

uint64_t sub_1A5824E6C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned int *)v0 + 1);
  sub_1A594CE64();
  v6 = 0x1000000;
  if (!v4)
    v6 = 0;
  v7 = v6 | (v5 << 32);
  v8 = 0x10000;
  if (!v3)
    v8 = 0;
  v9 = 256;
  if (!v2)
    v9 = 0;
  FlagsUpdate.hash(into:)((uint64_t)v11, v7 | v8 | v9 | v1);
  return sub_1A594CED0();
}

uint64_t sub_1A5824F00(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0x1000000;
  if (!v1[3])
    v2 = 0;
  v3 = v2 | ((unint64_t)*((unsigned int *)v1 + 1) << 32);
  v4 = 0x10000;
  if (!v1[2])
    v4 = 0;
  v5 = 256;
  if (!v1[1])
    v5 = 0;
  return FlagsUpdate.hash(into:)(a1, v3 | v4 | v5 | *v1);
}

uint64_t sub_1A5824F4C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned int *)v0 + 1);
  sub_1A594CE64();
  v6 = 0x1000000;
  if (!v4)
    v6 = 0;
  v7 = v6 | (v5 << 32);
  v8 = 0x10000;
  if (!v3)
    v8 = 0;
  v9 = 256;
  if (!v2)
    v9 = 0;
  FlagsUpdate.hash(into:)((uint64_t)v11, v7 | v8 | v9 | v1);
  return sub_1A594CED0();
}

uint64_t sub_1A5824FDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((unsigned int *)a1 + 1);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *((unsigned int *)a2 + 1);
  if (a1[3])
    v11 = 0x1000000;
  else
    v11 = 0;
  v12 = v11 | (v5 << 32);
  v13 = v4 == 0;
  v14 = 0x10000;
  if (v13)
    v15 = 0;
  else
    v15 = 0x10000;
  v13 = v3 == 0;
  v16 = 256;
  if (v13)
    v17 = 0;
  else
    v17 = 256;
  v18 = v12 | v15 | v17 | v2;
  if (v9)
    v19 = 0x1000000;
  else
    v19 = 0;
  v20 = v19 | (v10 << 32);
  if (!v8)
    v14 = 0;
  if (!v7)
    v16 = 0;
  return sub_1A5828E0C(v18, v20 | v14 | v16 | v6);
}

uint64_t Flags.init(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = a1 & 0xFF00000000000000;
  if ((a1 & 0xFF00000000000000) == 0x800000000000000)
    v1 = 0x100000000000000;
  v2 = a1 & 0xFF000000000000;
  if ((a1 & 0xFF000000000000) == 0x3000000000000)
    v2 = 0;
  return v2 | a1 & 0x10100000000 | v1 | a1 & 0x1010101;
}

IMAP2Persistence::FlagsWithModifications __swiftcall FlagsWithModifications.init(flags:)(IMAP2Persistence::Flags flags)
{
  unint64_t v1;
  IMAP2Persistence::Flags_optional v2;
  IMAP2Persistence::FlagsWithModifications result;

  v1 = *(_QWORD *)&flags & 0xFFFF010101010101;
  v2 = (IMAP2Persistence::Flags_optional)v1;
  result.originalFlags = v2;
  result.flags = (IMAP2Persistence::Flags)v1;
  return result;
}

uint64_t FlagsWithModifications.init(_:)(uint64_t a1)
{
  FlagsWithModifications.update(with:)(a1 & 0xFFFFFFFF01010101);
  return 0;
}

unint64_t FlagsWithModifications.update(with:)(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2 != 2)
  {
    v3 = *(_BYTE *)v1 ^ v2;
    v4 = result & 1;
    if ((v3 & 1) == 0)
      *(_BYTE *)v1 = v4;
    *(_BYTE *)(v1 + 8) = v4;
    v2 = *(_QWORD *)(v1 + 8);
    if (v2 != 2)
    {
      v5 = *(unsigned __int8 *)(v1 + 1) ^ (v2 >> 8) & 1;
      v6 = (result >> 8) & 1;
      if ((v5 & 1) == 0)
        *(_BYTE *)(v1 + 1) = v6;
      *(_BYTE *)(v1 + 9) = v6;
      v2 = *(_QWORD *)(v1 + 8);
      if (v2 != 2)
      {
        if (((*(unsigned __int8 *)(v1 + 2) ^ (v2 >> 16) & 1) & 1) == 0)
          *(_BYTE *)(v1 + 2) = BYTE2(result) & 1;
        *(_BYTE *)(v1 + 10) = BYTE2(result) & 1;
        v2 = *(_QWORD *)(v1 + 8);
        if (v2 != 2)
        {
          v7 = *(unsigned __int8 *)(v1 + 3) ^ (v2 >> 24) & 1;
          v8 = BYTE3(result) & 1;
          if ((v7 & 1) == 0)
            *(_BYTE *)(v1 + 3) = v8;
          *(_BYTE *)(v1 + 11) = v8;
          v2 = *(_QWORD *)(v1 + 8);
        }
      }
    }
  }
  if ((result & 0xFF00000000) != 0x200000000 && v2 != 2)
  {
    if (((*(_BYTE *)(v1 + 4) ^ BYTE4(v2) & 1) & 1) == 0)
      *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
    *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
    v2 = *(_QWORD *)(v1 + 8);
  }
  if ((result & 0xFF0000000000) != 0x20000000000 && v2 != 2)
  {
    v9 = *(unsigned __int8 *)(v1 + 5) ^ (v2 >> 40) & 1;
    v10 = (result >> 40) & 1;
    if ((v9 & 1) == 0)
      *(_BYTE *)(v1 + 5) = v10;
    *(_BYTE *)(v1 + 13) = v10;
    v2 = *(_QWORD *)(v1 + 8);
  }
  v11 = HIBYTE(result);
  if (BYTE6(result) != 3 && v2 != 2)
  {
    if (*(unsigned __int8 *)(v1 + 6) == BYTE6(v2))
      *(_BYTE *)(v1 + 6) = BYTE6(result);
    *(_BYTE *)(v1 + 14) = BYTE6(result);
    v2 = *(_QWORD *)(v1 + 8);
  }
  v12 = HIBYTE(v2);
  if ((_DWORD)v11 != 8)
  {
    if (v2 == 2)
      return result;
    if (*(unsigned __int8 *)(v1 + 7) != (_DWORD)v12)
      goto LABEL_40;
LABEL_39:
    *(_BYTE *)(v1 + 7) = v11;
LABEL_40:
    *(_BYTE *)(v1 + 15) = v11;
    return result;
  }
  if (v2 != 2 && !(_DWORD)v12)
  {
    if (*(unsigned __int8 *)(v1 + 7) <= 1u)
      LOBYTE(v11) = 1;
    else
      LOBYTE(v11) = *(_BYTE *)(v1 + 7);
    if (*(_BYTE *)(v1 + 7))
      goto LABEL_40;
    goto LABEL_39;
  }
  return result;
}

unint64_t static FlagsWithModifications.makeForLocallyCreatedMessage(with:)(uint64_t a1)
{
  return a1 & 0xFFFF010101010101;
}

unint64_t FlagsWithModifications.updated(with:)(uint64_t a1, unint64_t a2)
{
  uint64x2_t v2;
  int16x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  unsigned __int32 v13;
  char v14;
  unsigned __int8 v15;
  unsigned __int8 v16;

  v12 = a2 & 1;
  v2 = (uint64x2_t)vdupq_n_s64(a2);
  v3 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v2, (uint64x2_t)xmmword_1A59ABFB0), (int32x4_t)vshlq_u64(v2, (uint64x2_t)xmmword_1A59ABFA0));
  *(int8x8_t *)v3.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x1000100010001);
  v13 = vmovn_s16(v3).u32[0];
  v14 = BYTE5(a2) & 1;
  v15 = BYTE6(a2);
  v16 = HIBYTE(a2);
  FlagsWithModifications.update(with:)(a1 & 0xFFFFFFFF01010101);
  v4 = 256;
  if (!(_BYTE)v13)
    v4 = 0;
  v5 = v4 | v12;
  v6 = 0x10000;
  if (!BYTE1(v13))
    v6 = 0;
  v7 = 0x1000000;
  if (!BYTE2(v13))
    v7 = 0;
  v8 = v5 | v6 | v7;
  v9 = 0x100000000;
  if (!HIBYTE(v13))
    v9 = 0;
  v10 = 0x10000000000;
  if (!v14)
    v10 = 0;
  return v8 | v9 | v10 | ((unint64_t)v15 << 48) | ((unint64_t)v16 << 56);
}

void sub_1A5825444(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4E79218;
}

uint64_t sub_1A5825454(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A584D3D8((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1A58279BC(v5);
  *a1 = v2;
  return result;
}

void *sub_1A58254BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796188);
  v2 = *v0;
  v3 = sub_1A594C6C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v18;
    v20[1] = v19;
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A582566C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79A728);
  v2 = *v0;
  v3 = sub_1A594C6C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A58257FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79A688);
  v2 = *v0;
  v3 = sub_1A594C6C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A58259A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796168);
  v2 = *v0;
  v3 = sub_1A594C6C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    LODWORD(v17) = *(_DWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v19 = v18;
    *(_DWORD *)(v19 + 8) = v17;
    result = (void *)_s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A5825B5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79A728);
  result = sub_1A594C6CC();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    sub_1A594CE64();
    sub_1A594CE88();
    result = sub_1A594CED0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A5825DD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79A688);
  v3 = sub_1A594C6CC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    sub_1A594CE64();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    SectionSpecifier.Part.hash(into:)((uint64_t)v27, v19);
    result = sub_1A594CED0();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A5826060()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796168);
  result = sub_1A594C6CC();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_DWORD *)(v18 + 8);
    sub_1A594CE64();
    sub_1A594CE88();
    result = sub_1A594CED0();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
    *(_QWORD *)v12 = v19;
    *(_DWORD *)(v12 + 8) = v20;
    ++*(_QWORD *)(v4 + 16);
    result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A5826308()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79A728);
  result = sub_1A594C6CC();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      sub_1A594CE64();
      sub_1A594CE88();
      result = sub_1A594CED0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A58265B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79A688);
  v3 = sub_1A594C6CC();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      sub_1A594CE64();
      SectionSpecifier.Part.hash(into:)((uint64_t)v28, v19);
      result = sub_1A594CED0();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A5826868()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796168);
  result = sub_1A594C6CC();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_33;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_33;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_33;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v9)
                    goto LABEL_33;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_DWORD *)(v18 + 8);
      sub_1A594CE64();
      sub_1A594CE88();
      result = sub_1A594CED0();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
      *(_QWORD *)v12 = v19;
      *(_DWORD *)(v12 + 8) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

char *sub_1A5826B40(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7962A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5826C40(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AED8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1A5826D40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA858);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA860);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5826E60(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AE20);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5826F74(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B368);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A582705C(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_1A594CE64();
  sub_1A594CE88();
  v6 = sub_1A594CED0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_1A58274F4(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1A5827178(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[9];

  v5 = *v2;
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  SectionSpecifier.Part.hash(into:)((uint64_t)v17, a2);
  v6 = sub_1A594CED0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v10 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v9, a2);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v12 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      v13 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v12, a2);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17[0] = *v2;
  *v2 = 0x8000000000000000;
  v16 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5827640(v16, v8, isUniquelyReferenced_nonNull_native);
  *v2 = v17[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1A5827308(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *v3;
  sub_1A594CE64();
  sub_1A594CE88();
  v8 = sub_1A594CED0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v12 = *(_QWORD *)(v7 + 48) + 16 * v10;
      if ((*(unsigned int *)(v12 + 8) | ((unint64_t)*(unsigned int *)(v12 + 8) << 32)) == (a3 | ((unint64_t)a3 << 32)))
      {
        v13 = *(_QWORD *)v12;
        v14 = *(_QWORD *)(v13 + 16);
        if (v14 == *(_QWORD *)(a2 + 16))
        {
          if (v14)
            v15 = v13 == a2;
          else
            v15 = 1;
          if (v15)
            goto LABEL_20;
          if (*(unsigned __int8 *)(v13 + 32) == *(unsigned __int8 *)(a2 + 32))
          {
            if (v14 == 1)
              goto LABEL_20;
            if (*(unsigned __int8 *)(v13 + 33) == *(unsigned __int8 *)(a2 + 33))
            {
              if (v14 == 2)
                goto LABEL_20;
              if (*(unsigned __int8 *)(v13 + 34) == *(unsigned __int8 *)(a2 + 34))
                break;
            }
          }
        }
      }
LABEL_3:
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_19;
    }
    v16 = (unsigned __int8 *)(v13 + 35);
    v17 = v14 - 3;
    v18 = (unsigned __int8 *)(a2 + 35);
    while (v17)
    {
      v20 = *v16++;
      v19 = v20;
      v21 = *v18++;
      --v17;
      if (v19 != v21)
        goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(*v3 + 48) + 16 * v10;
    v26 = *(_QWORD *)v25;
    LODWORD(v25) = *(_DWORD *)(v25 + 8);
    *(_QWORD *)a1 = v26;
    *(_DWORD *)(a1 + 8) = v25;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    return 0;
  }
  else
  {
LABEL_19:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *v3;
    *v3 = 0x8000000000000000;
    v23 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    sub_1A58277C8(v23, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v27;
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a2;
    *(_DWORD *)(a1 + 8) = a3;
    return 1;
  }
}

uint64_t sub_1A58274F4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1A5826308();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1A582566C();
      goto LABEL_14;
    }
    sub_1A5825B5C();
  }
  v8 = *v3;
  sub_1A594CE64();
  sub_1A594CE88();
  result = sub_1A594CED0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      result = sub_1A594CDEC();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1A5827640(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1A58265B0();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1A58257FC();
      goto LABEL_14;
    }
    sub_1A5825DD4();
  }
  v8 = *v3;
  sub_1A594CE64();
  SectionSpecifier.Part.hash(into:)((uint64_t)v19, v5);
  result = sub_1A594CED0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v11 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v10, v5);
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      result = sub_1A594CDEC();
      __break(1u);
    }
    else
    {
      v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v13 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v14 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v13, v5);
        result = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_1A58277C8(uint64_t result, unsigned int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_26;
  if ((a4 & 1) != 0)
  {
    sub_1A5826868();
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_1A58259A4();
      goto LABEL_26;
    }
    sub_1A5826060();
  }
  v10 = *v4;
  sub_1A594CE64();
  sub_1A594CE88();
  result = sub_1A594CED0();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v12 = ~v11;
    while (1)
    {
      v13 = *(_QWORD *)(v10 + 48) + 16 * a3;
      if ((*(unsigned int *)(v13 + 8) | ((unint64_t)*(unsigned int *)(v13 + 8) << 32)) == (a2 | ((unint64_t)a2 << 32)))
      {
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD *)(v14 + 16);
        if (v15 == *(_QWORD *)(v7 + 16))
        {
          if (v15)
            v16 = v14 == v7;
          else
            v16 = 1;
          if (v16)
            goto LABEL_29;
          if (*(unsigned __int8 *)(v14 + 32) == *(unsigned __int8 *)(v7 + 32))
          {
            if (v15 == 1)
              goto LABEL_29;
            if (*(unsigned __int8 *)(v14 + 33) == *(unsigned __int8 *)(v7 + 33))
            {
              if (v15 == 2)
                goto LABEL_29;
              if (*(unsigned __int8 *)(v14 + 34) == *(unsigned __int8 *)(v7 + 34))
                break;
            }
          }
        }
      }
LABEL_10:
      a3 = (a3 + 1) & v12;
      if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
        goto LABEL_26;
    }
    v17 = (unsigned __int8 *)(v14 + 35);
    v18 = v15 - 3;
    v19 = (unsigned __int8 *)(v7 + 35);
    while (v18)
    {
      v21 = *v17++;
      v20 = v21;
      v22 = *v19++;
      --v18;
      if (v20 != v22)
        goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_26:
  v23 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = *(_QWORD *)(v23 + 48) + 16 * a3;
  *(_QWORD *)v24 = v7;
  *(_DWORD *)(v24 + 8) = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_29:
  result = sub_1A594CDEC();
  __break(1u);
  return result;
}

uint64_t sub_1A58279BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v3 = a1[1];
  result = sub_1A594CC78();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1A57A7230(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_151;
  v101 = result;
  v98 = a1;
  if (v3 <= 1)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v104 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v10 = MEMORY[0x1E0DEE9D8];
LABEL_117:
      result = v10;
      v100 = v7;
      if (v11 >= 2)
      {
        v91 = *v98;
        do
        {
          v92 = v11 - 2;
          if (v11 < 2)
            goto LABEL_146;
          if (!v91)
            goto LABEL_159;
          v93 = result;
          v94 = *(_QWORD *)(result + 32 + 16 * v92);
          v95 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
          result = sub_1A5828060((char *)(v91 + 16 * v94), (char *)(v91 + 16 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v91 + 16 * v95, v104);
          if (v1)
            break;
          if (v95 < v94)
            goto LABEL_147;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1A584D3C4(v93);
            v93 = result;
          }
          if (v92 >= *(_QWORD *)(v93 + 16))
            goto LABEL_148;
          v96 = (_QWORD *)(v93 + 32 + 16 * v92);
          *v96 = v94;
          v96[1] = v95;
          v97 = *(_QWORD *)(v93 + 16);
          if (v11 > v97)
            goto LABEL_149;
          memmove((void *)(v93 + 32 + 16 * (v11 - 1)), (const void *)(v93 + 32 + 16 * v11), 16 * (v97 - v11));
          result = v93;
          *(_QWORD *)(v93 + 16) = v97 - 1;
          v11 = v97 - 1;
        }
        while (v97 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v100 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v100 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    result = sub_1A594BA18();
    *(_QWORD *)(result + 16) = v6;
    v100 = result;
    v104 = (char *)(result + 32);
  }
  v8 = 0;
  v9 = *a1;
  v99 = v9 + 8;
  v10 = MEMORY[0x1E0DEE9D8];
  v102 = v3;
  while (1)
  {
    v12 = v8++;
    if (v8 >= v3)
      goto LABEL_45;
    v13 = (uint64_t *)(v9 + 16 * v8);
    result = *v13;
    v14 = v13[1];
    v15 = (_QWORD *)(v9 + 16 * v12);
    if (result == *v15 && v14 == v15[1])
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
        goto LABEL_44;
      v17 = 0;
    }
    else
    {
      result = sub_1A594CD38();
      v17 = result;
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
        goto LABEL_36;
    }
    v19 = (_QWORD *)(v99 + 16 * v18);
    do
    {
      result = *(v19 - 1);
      v21 = (_QWORD *)(v9 + 16 * v8);
      if (result == *v21 && *v19 == v21[1])
      {
        if ((v17 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        result = sub_1A594CD38();
        if (((v17 ^ result) & 1) != 0)
          goto LABEL_36;
      }
      v19 += 2;
      v20 = v18 + 1;
      v8 = v18;
      v18 = v20;
    }
    while (v20 < v3);
    v18 = v20;
LABEL_36:
    v8 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_37:
      if (v18 < v12)
        goto LABEL_155;
      if (v12 < v18)
      {
        v23 = 16 * v18;
        v24 = 16 * v12;
        v25 = v18;
        v26 = v12;
        do
        {
          if (v26 != --v25)
          {
            if (!v9)
              goto LABEL_158;
            v27 = v9 + v23;
            v28 = *(_QWORD *)(v9 + v24);
            v29 = *(_QWORD *)(v9 + v24 + 8);
            *(_OWORD *)(v9 + v24) = *(_OWORD *)(v9 + v23 - 16);
            *(_QWORD *)(v27 - 16) = v28;
            *(_QWORD *)(v27 - 8) = v29;
          }
          ++v26;
          v23 -= 16;
          v24 += 16;
        }
        while (v26 < v25);
      }
LABEL_44:
      v8 = v18;
    }
LABEL_45:
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_150;
      if (v8 - v12 < v101)
        break;
    }
LABEL_66:
    if (v8 < v12)
      goto LABEL_145;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A584D2CC(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = result;
    }
    v38 = *(_QWORD *)(v10 + 16);
    v37 = *(_QWORD *)(v10 + 24);
    v11 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      result = (uint64_t)sub_1A584D2CC((char *)(v37 > 1), v38 + 1, 1, (char *)v10);
      v10 = result;
    }
    *(_QWORD *)(v10 + 16) = v11;
    v39 = v10 + 32;
    v40 = (uint64_t *)(v10 + 32 + 16 * v38);
    *v40 = v12;
    v40[1] = v8;
    if (v38)
    {
      v103 = v8;
      while (1)
      {
        v41 = v11 - 1;
        if (v11 >= 4)
        {
          v46 = v39 + 16 * v11;
          v47 = *(_QWORD *)(v46 - 64);
          v48 = *(_QWORD *)(v46 - 56);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_134;
          v51 = *(_QWORD *)(v46 - 48);
          v50 = *(_QWORD *)(v46 - 40);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_135;
          v53 = v11 - 2;
          v54 = (uint64_t *)(v39 + 16 * (v11 - 2));
          v56 = *v54;
          v55 = v54[1];
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_136;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_138;
          if (v58 >= v49)
          {
            v76 = (uint64_t *)(v39 + 16 * v41);
            v78 = *v76;
            v77 = v76[1];
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_144;
            v69 = v44 < v79;
            goto LABEL_104;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v70 = *(_QWORD *)(v10 + 32);
            v71 = *(_QWORD *)(v10 + 40);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_98;
          }
          v43 = *(_QWORD *)(v10 + 32);
          v42 = *(_QWORD *)(v10 + 40);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_137;
        v53 = v11 - 2;
        v59 = (uint64_t *)(v39 + 16 * (v11 - 2));
        v61 = *v59;
        v60 = v59[1];
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_139;
        v65 = (uint64_t *)(v39 + 16 * v41);
        v67 = *v65;
        v66 = v65[1];
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_141;
        if (__OFADD__(v63, v68))
          goto LABEL_143;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_104:
          if (v69)
            v41 = v53;
          goto LABEL_106;
        }
LABEL_98:
        if ((v64 & 1) != 0)
          goto LABEL_140;
        v72 = (uint64_t *)(v39 + 16 * v41);
        v74 = *v72;
        v73 = v72[1];
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_142;
        if (v75 < v63)
          goto LABEL_15;
LABEL_106:
        v80 = v41 - 1;
        if (v41 - 1 >= v11)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v81 = v9;
        if (!v9)
          goto LABEL_157;
        v82 = v10;
        v83 = (uint64_t *)(v39 + 16 * v80);
        v84 = *v83;
        v85 = v39;
        v86 = v41;
        v87 = (_QWORD *)(v39 + 16 * v41);
        v88 = v87[1];
        v89 = v81;
        result = sub_1A5828060((char *)(v81 + 16 * *v83), (char *)(v81 + 16 * *v87), v81 + 16 * v88, v104);
        if (v1)
          goto LABEL_114;
        if (v88 < v84)
          goto LABEL_131;
        if (v86 > *(_QWORD *)(v82 + 16))
          goto LABEL_132;
        *v83 = v84;
        *(_QWORD *)(v85 + 16 * v80 + 8) = v88;
        v90 = *(_QWORD *)(v82 + 16);
        if (v86 >= v90)
          goto LABEL_133;
        v10 = v82;
        v11 = v90 - 1;
        result = (uint64_t)memmove(v87, v87 + 2, 16 * (v90 - 1 - v86));
        v39 = v85;
        *(_QWORD *)(v82 + 16) = v90 - 1;
        v9 = v89;
        v8 = v103;
        if (v90 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v102;
    if (v8 >= v102)
    {
      v7 = v100;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v12, v101))
    goto LABEL_153;
  if (v12 + v101 >= v3)
    v30 = v3;
  else
    v30 = v12 + v101;
  if (v30 >= v12)
  {
    if (v8 != v30)
    {
      v31 = (uint64_t *)(v9 + 16 * v8);
      do
      {
        v32 = (uint64_t *)(v9 + 16 * v8);
        result = *v32;
        v33 = v32[1];
        v34 = v12;
        v35 = v31;
        do
        {
          if (result == *(v35 - 2) && v33 == *(v35 - 1))
            break;
          result = sub_1A594CD38();
          if ((result & 1) == 0)
            break;
          if (!v9)
            goto LABEL_156;
          result = *v35;
          v33 = v35[1];
          *(_OWORD *)v35 = *((_OWORD *)v35 - 1);
          *(v35 - 1) = v33;
          *(v35 - 2) = result;
          v35 -= 2;
          ++v34;
        }
        while (v8 != v34);
        ++v8;
        v31 += 2;
      }
      while (v8 != v30);
      v8 = v30;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_1A5828060(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  BOOL v21;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 15;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4)
      memmove(a4, __src, 16 * v13);
    v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16)
      goto LABEL_48;
    v17 = (char *)(a3 - 16);
    while (1)
    {
      v18 = v17 + 16;
      v19 = v6 - 16;
      v20 = *((_QWORD *)v14 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v14 - 1) == *((_QWORD *)v6 - 1);
      if (v20 || (sub_1A594CD38() & 1) == 0)
      {
        v19 = v14 - 16;
        if (v18 != v14)
        {
          v14 -= 16;
LABEL_45:
          *(_OWORD *)v17 = *(_OWORD *)v19;
          goto LABEL_46;
        }
        v21 = v17 >= v14;
        v14 -= 16;
        if (v21)
          goto LABEL_45;
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 16;
          goto LABEL_45;
        }
        v21 = v17 >= v6;
        v6 -= 16;
        if (v21)
          goto LABEL_45;
      }
LABEL_46:
      if (v6 > v7)
      {
        v17 -= 16;
        if (v14 > v4)
          continue;
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4)
    memmove(a4, __dst, 16 * v10);
  v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (v15 || (sub_1A594CD38() & 1) == 0)
        break;
      v16 = v6;
      v15 = v7 == v6;
      v6 += 16;
      if (!v15)
        goto LABEL_20;
LABEL_21:
      v7 += 16;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_23;
    }
    v16 = v4;
    v15 = v7 == v4;
    v4 += 16;
    if (v15)
      goto LABEL_21;
LABEL_20:
    *(_OWORD *)v7 = *(_OWORD *)v16;
    goto LABEL_21;
  }
LABEL_23:
  v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0])
    memmove(v6, v4, 16 * ((v14 - v4) / 16));
  return 1;
}

char *sub_1A582828C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5828398(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A58282A8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5828590(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A58282C4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A58286A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1A58282E0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1A58287A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A58282FC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A58288E4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5828318(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A58289FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5828334(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5828AFC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5828350(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5828D08(a1, a2, a3, *v3, &qword_1EE7AA848);
  *v3 = result;
  return result;
}

char *sub_1A582837C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5828BF4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A5828398(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7962A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A5828498(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B1F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1A5828590(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AE30);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A58286A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AED8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1A58287A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AEE0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE796AD8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A58288E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AE38);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A58289FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79AE28);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A5828AFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE79B2D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1A5828BF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE79ADD8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A5828CF4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A5828D08(a1, a2, a3, a4, &qword_1EE7AA850);
}

char *sub_1A5828D08(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName_0(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

uint64_t sub_1A5828E0C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0;
  if (((a1 ^ a2) & 1) != 0
    || ((a1 >> 8) & 1) != ((a2 >> 8) & 1)
    || ((a1 >> 16) & 1) != ((a2 >> 16) & 1)
    || ((a1 >> 24) & 1) != ((a2 >> 24) & 1))
  {
    return v2;
  }
  if ((a1 & 0xFF00000000) != 0x200000000)
  {
    v2 = 0;
    if (BYTE4(a2) == 2 || ((a1 & 0x100000000) == 0) == (BYTE4(a2) & 1))
      return v2;
LABEL_10:
    if ((a1 & 0xFF0000000000) == 0x20000000000)
    {
      if (BYTE5(a2) != 2)
        return 0;
    }
    else
    {
      v2 = 0;
      if (BYTE5(a2) == 2 || ((a1 & 0x10000000000) == 0) == ((a2 >> 40) & 1))
        return v2;
    }
    v3 = a2 & 0xFF000000000000;
    if ((a1 & 0xFF000000000000) == 0x3000000000000)
    {
      if (v3 != 0x3000000000000)
        return 0;
    }
    else if (v3 == 0x3000000000000 || ((a2 ^ a1) & 0xFF000000000000) != 0)
    {
      return 0;
    }
    v4 = HIBYTE(a2);
    if (HIBYTE(a1) == 8)
    {
      if ((_DWORD)v4 != 8)
        return 0;
    }
    else if ((_DWORD)v4 == 8 || HIBYTE(a1) != v4)
    {
      return 0;
    }
    return 1;
  }
  if (BYTE4(a2) == 2)
    goto LABEL_10;
  return 0;
}

unint64_t sub_1A5828F3C(unint64_t a1, unint64_t a2)
{
  if ((a2 ^ a1) >> 56)
    return 0;
  else
    return (((a2 ^ a1) & 0xFF000000000000) == 0) & ~(a1 ^ a2 | (a1 >> 8) & 1 ^ (a2 >> 8) & 1 | (a1 >> 16) & 1 ^ (a2 >> 16) & 1 | (a1 >> 24) & 1 ^ (a2 >> 24) & 1 | BYTE4(a1) & 1 ^ BYTE4(a2) & 1 | (a1 >> 40) & 1 ^ (a2 >> 40) & 1);
}

uint64_t sub_1A5828FB0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;

  result = 0;
  if ((a1 & 1) == (a3 & 1)
    && ((a1 >> 8) & 1) == ((a3 >> 8) & 1)
    && ((a1 >> 16) & 1) == ((a3 >> 16) & 1)
    && ((a1 >> 24) & 1) == ((a3 >> 24) & 1)
    && (BYTE4(a1) & 1) == (BYTE4(a3) & 1)
    && ((a1 >> 40) & 1) == ((a3 >> 40) & 1))
  {
    v6 = a3 ^ a1;
    if ((v6 & 0xFF000000000000) == 0 && !HIBYTE(v6))
    {
      if (a2 == 2)
      {
        if (a4 == 2)
          return 1;
      }
      else if (a4 != 2
             && (sub_1A5828F3C(a2 & 0xFFFF010101010101, a4 & 0xFFFF010101010101) & 1) != 0)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1A5829088(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1A58297E0();
  result = sub_1A594BBD4();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1A582705C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_1A58290FC()
{
  unint64_t result;

  result = qword_1EE7AA808;
  if (!qword_1EE7AA808)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Flags.JunkStatus, &type metadata for Flags.JunkStatus);
    atomic_store(result, (unint64_t *)&qword_1EE7AA808);
  }
  return result;
}

unint64_t sub_1A5829144()
{
  unint64_t result;

  result = qword_1EE7AA810;
  if (!qword_1EE7AA810)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Flags.Label, &type metadata for Flags.Label);
    atomic_store(result, (unint64_t *)&qword_1EE7AA810);
  }
  return result;
}

unint64_t sub_1A582918C()
{
  unint64_t result;

  result = qword_1EE7AA818;
  if (!qword_1EE7AA818)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for Flags, &type metadata for Flags);
    atomic_store(result, (unint64_t *)&qword_1EE7AA818);
  }
  return result;
}

unint64_t sub_1A58291D4()
{
  unint64_t result;

  result = qword_1EE7AA820;
  if (!qword_1EE7AA820)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for FlagsWithModifications, &type metadata for FlagsWithModifications);
    atomic_store(result, (unint64_t *)&qword_1EE7AA820);
  }
  return result;
}

unint64_t sub_1A582921C()
{
  unint64_t result;

  result = qword_1EE7AA828;
  if (!qword_1EE7AA828)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for FlagsUpdate.Label, &type metadata for FlagsUpdate.Label);
    atomic_store(result, (unint64_t *)&qword_1EE7AA828);
  }
  return result;
}

unint64_t sub_1A5829264()
{
  unint64_t result;

  result = qword_1EE7AA830;
  if (!qword_1EE7AA830)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for FlagsUpdate, &type metadata for FlagsUpdate);
    atomic_store(result, (unint64_t *)&qword_1EE7AA830);
  }
  return result;
}

unint64_t sub_1A58292AC()
{
  unint64_t result;

  result = qword_1EE798678;
  if (!qword_1EE798678)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for FlagKind, &type metadata for FlagKind);
    atomic_store(result, (unint64_t *)&qword_1EE798678);
  }
  return result;
}

uint64_t sub_1A58292F0()
{
  return sub_1A54E2E30(&qword_1EE7AA838, &qword_1EE7AA840, MEMORY[0x1E0DEAF50]);
}

_QWORD *__swift_memcpy8_1(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Flags()
{
  return &type metadata for Flags;
}

uint64_t storeEnumTagSinglePayload for Flags.JunkStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A582938C + 4 * byte_1A59DA6ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A58293C0 + 4 * byte_1A59DA6E8[v4]))();
}

uint64_t sub_1A58293C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58293C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A58293D0);
  return result;
}

uint64_t sub_1A58293DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A58293E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A58293E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58293F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Flags.JunkStatus()
{
  return &type metadata for Flags.JunkStatus;
}

ValueMetadata *type metadata accessor for Flags.Label()
{
  return &type metadata for Flags.Label;
}

__n128 __swift_memcpy16_1_0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FlagsWithModifications(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FlagsWithModifications(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlagsWithModifications()
{
  return &type metadata for FlagsWithModifications;
}

uint64_t _s16IMAP2Persistence5FlagsVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s16IMAP2Persistence5FlagsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlagsUpdate()
{
  return &type metadata for FlagsUpdate;
}

uint64_t getEnumTagSinglePayload for FlagsUpdate.Label(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
  {
    v6 = *a1;
    v7 = v6 >= 8;
    v8 = v6 - 8;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 8;
    if (a2 + 8 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A58295C8 + 4 * byte_1A59DA6F2[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for FlagsUpdate.Label(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 8;
  if (a3 + 8 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF8)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1A5829670 + 4 * byte_1A59DA6FC[v5]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1A58296A4 + 4 * byte_1A59DA6F7[v5]))();
}

uint64_t sub_1A58296A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58296AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A58296B4);
  return result;
}

uint64_t sub_1A58296C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A58296C8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1A58296CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58296D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58296E0(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 8)
    return v1 - 7;
  else
    return 0;
}

_BYTE *sub_1A58296F4(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 7;
  return result;
}

ValueMetadata *type metadata accessor for FlagsUpdate.Label()
{
  return &type metadata for FlagsUpdate.Label;
}

uint64_t _s16IMAP2Persistence5FlagsV5LabelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A5829760 + 4 * byte_1A59DA706[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A5829794 + 4 * byte_1A59DA701[v4]))();
}

uint64_t sub_1A5829794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A582979C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A58297A4);
  return result;
}

uint64_t sub_1A58297B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A58297B8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A58297BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A58297C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlagKind()
{
  return &type metadata for FlagKind;
}

unint64_t sub_1A58297E0()
{
  unint64_t result;

  result = qword_1EE798670;
  if (!qword_1EE798670)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for FlagKind, &type metadata for FlagKind);
    atomic_store(result, (unint64_t *)&qword_1EE798670);
  }
  return result;
}

uint64_t static MessageHeader.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v0 = sub_1A594ADAC();
  v1 = sub_1A594ADAC();
  if (*(_QWORD *)(v0 + 16) == *(_QWORD *)(v1 + 16))
    v2 = sub_1A5829A38(v0, v1);
  else
    v2 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t MessageHeader.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t MessageHeader.data.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

double (*MessageHeader.data.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageHeader.init(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_1A58299AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v0 = sub_1A594ADAC();
  v1 = sub_1A594ADAC();
  if (*(_QWORD *)(v0 + 16) == *(_QWORD *)(v1 + 16))
    v2 = sub_1A5829A38(v0, v1);
  else
    v2 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1A5829A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  char v61;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA868);
  v53 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA870);
  MEMORY[0x1E0C80A78](v9);
  v50 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - v12;
  v14 = sub_1A594ADA0();
  v55 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v49 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v59 = (char *)&v47 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA878);
  MEMORY[0x1E0C80A78](v18);
  v52 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(a1 + 16);
  v56 = a1;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v60 = a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v20 = 0;
  v47 = v13;
  v48 = v8;
  v51 = v6;
  while (1)
  {
    if (v54 == v20)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v13, 1, 1, v14);
      v46 = v52;
LABEL_17:
      sub_1A5510284((uint64_t)v13, &qword_1EE7AA870);
      v38 = 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v46, 1, 1, v6);
      goto LABEL_18;
    }
    v21 = v3;
    v22 = v55;
    v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v24 = *(_QWORD *)(v55 + 72) * v20;
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
    v26 = v20;
    v25(v13, v56 + v23 + v24, v14);
    v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v58(v13, 0, 1, v14);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    if (v27(v13, 1, v14) == 1)
    {
      v6 = v51;
      v46 = v52;
      goto LABEL_17;
    }
    v57 = v21;
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v22 + 32);
    result = v28(v59, v13, v14);
    v30 = *(_QWORD *)(v60 + 16);
    if (v26 == v30)
    {
      v13 = v50;
      v58(v50, 1, 1, v14);
LABEL_16:
      (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v14);
      v6 = v51;
      v46 = v52;
      goto LABEL_17;
    }
    v31 = v26 + 1;
    if (v31 - 1 >= v30)
      break;
    v32 = v31;
    v13 = v50;
    v25(v50, v60 + v23 + v24, v14);
    v58(v13, 0, 1, v14);
    if (v27(v13, 1, v14) == 1)
      goto LABEL_16;
    v33 = v49;
    v28(v49, v13, v14);
    v6 = v51;
    v34 = (uint64_t)v52;
    v35 = &v52[*(int *)(v51 + 48)];
    v28(v52, v59, v14);
    v28(v35, v33, v14);
    v36 = v53;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v34, 0, 1, v6);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v6);
    v38 = v37 == 1;
    if (v37 == 1)
      goto LABEL_18;
    v39 = (uint64_t)v48;
    sub_1A5829FD0(v34, (uint64_t)v48);
    v40 = v39 + *(int *)(v6 + 48);
    v41 = sub_1A594AD7C();
    if (v41 != sub_1A594AD7C() || (v42 = sub_1A594AD94(), v43 = sub_1A594AD94(), v42 != v43))
    {
      sub_1A5510284(v39, &qword_1EE7AA868);
      v38 = 0;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v38;
    }
    MEMORY[0x1E0C80A78](v43);
    *(&v47 - 2) = (char *)v40;
    v44 = v57;
    sub_1A594AD88();
    v3 = v44;
    v45 = v61;
    sub_1A5510284(v39, &qword_1EE7AA868);
    v13 = v47;
    v20 = v32;
    if ((v45 & 1) == 0)
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for MessageHeader()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5829F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MessageHeader()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5829F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MessageHeader()
{
  uint64_t result;

  result = qword_1EE7983A0;
  if (!qword_1EE7983A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A5829FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A582A018()
{
  return sub_1A58349E8();
}

uint64_t sub_1A582A030(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v12;
  v36 = a4;
  MEMORY[0x1E0C80A78](v13);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_1A594BD78();
  if (!v18)
    return sub_1A594B9F4();
  v19 = v18;
  v25 = v15;
  v39 = sub_1A594C8B8();
  v32 = sub_1A594C8C4();
  sub_1A594C840();
  v36 = v17;
  result = sub_1A594BD60();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_1A594BED4();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_1A594C894();
      sub_1A594BDC0();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t sub_1A582ADB8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582ADC8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582ADD8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1A582ADE0()
{
  return swift_deallocObject();
}

uint64_t sub_1A582ADF0()
{
  return swift_deallocObject();
}

uint64_t sub_1A582AE00()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t sub_1A582AE08()
{
  return swift_deallocObject();
}

int8x16_t sub_1A582AE18@<Q0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  int v2;
  int32x2_t v3;
  int64x2_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v2 = *(unsigned __int8 *)(v1 + 20);
  v3 = vdup_n_s32((v2 & 1) == 0);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5 = (int8x16_t)vdupq_n_s64(3uLL);
  v6.i64[1] = v5.i64[1];
  v6.i64[0] = (uint64_t)"YES";
  v7 = (int8x16_t)vdupq_n_s64(2uLL);
  v7.i64[0] = (uint64_t)"NO";
  v8 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v4, 0x3FuLL)), v7, v6);
  *(int32x2_t *)v6.i8 = vdup_n_s32(v2 == 2);
  v4.i64[0] = v6.u32[0];
  v4.i64[1] = v6.u32[1];
  v5.i64[0] = (uint64_t)"nil";
  result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v4, 0x3FuLL)), v5, v8);
  *a1 = result;
  a1[1].i8[0] = 2;
  return result;
}

uint64_t sub_1A582AEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8 = sub_1A594A6EC();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A594A614();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  sub_1A594A5F0();
  sub_1A594A6E0();
  swift_retain();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = v14;
  sub_1A594A680();
  swift_release();
  sub_1A55034FC((uint64_t)v10, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF21E8]);
  sub_1A55034FC((uint64_t)v13, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF20F0]);
  return swift_release();
}

void sub_1A582BB1C(unsigned __int8 (*a1)(void))
{
  char *v1;

  v1 = (char *)sub_1A582BB64 + 4 * byte_1A59DABC0[a1()];
  __asm { BR              X10 }
}

double sub_1A582BB64()
{
  int64x2_t *v0;
  int64x2_t v1;

  v1 = vdupq_n_s64(5uLL);
  v1.i64[0] = (uint64_t)"clear";
  *v0 = v1;
  v0[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_1A582BF68(uint64_t (*a1)(void))
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v11 = a1();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A582D7C0((char **)&v11);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v11 + 16);
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1A582828C(0, v1, 0);
    v2 = 0;
    v3 = v13;
    do
    {
      v11 = 35;
      v12 = 0xE100000000000000;
      sub_1A594CC9C();
      sub_1A594B5F8();
      swift_bridgeObjectRelease();
      v4 = v11;
      v5 = v12;
      v13 = v3;
      v7 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v3 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_1A582828C((char *)(v6 > 1), v7 + 1, 1);
        v3 = v13;
      }
      ++v2;
      *(_QWORD *)(v3 + 16) = v7 + 1;
      v8 = v3 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v4;
      *(_QWORD *)(v8 + 40) = v5;
    }
    while (v1 != v2);
    swift_release();
  }
  else
  {
    swift_release();
    v3 = MEMORY[0x1E0DEE9D8];
  }
  v11 = v3;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE799A50);
  sub_1A582DF58();
  v9 = sub_1A594B268();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1A582C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v23[1] = a4;
  v6 = sub_1A594A614();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A594A6EC();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A594B568();
  sub_1A594A6C8();
  swift_bridgeObjectRelease();
  swift_retain();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v29 = sub_1A5712860();
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v16 = v29;
  v17 = v13 & 1;
  v18 = BYTE1(v13) & 1;
  v19 = BYTE2(v13) & 1;
  v20 = v14;
  v21 = v15;
  sub_1A548779C();
  sub_1A57135FC();
  v23[2] = v16;
  v24 = v17;
  v25 = v18;
  v26 = v19;
  v27 = v20;
  v28 = v21;
  sub_1A594A6A4();
  sub_1A55034FC((uint64_t)v8, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF20F0]);
  sub_1A55034FC((uint64_t)v11, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF21E8]);
  sub_1A55113D8(v20);
  return swift_release();
}

uint64_t OSLogInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v8 = sub_1A594A6EC();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A594A614();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a1;
  v14[5] = a2;
  sub_1A594A5F0();
  sub_1A548779C();
  sub_1A594A680();
  sub_1A55034FC((uint64_t)v10, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF21E8]);
  sub_1A55034FC((uint64_t)v13, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF20F0]);
  return swift_release();
}

uint64_t sub_1A582C420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v29 - v13;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v29 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a3, v16);
  sub_1A594BE50();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if (sub_1A594BD78() < 6)
  {
    v23 = sub_1A582A030((void (*)(char *, char *))sub_1A582C718, 0, AssociatedTypeWitness, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], AssociatedConformanceWitness, MEMORY[0x1E0DEDD18], v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v18, AssociatedTypeWitness);
    sub_1A594BE50();
    v22 = sub_1A582A030((void (*)(char *, char *))sub_1A582C718, 0, AssociatedTypeWitness, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], AssociatedConformanceWitness, MEMORY[0x1E0DEDD18], v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v23 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = sub_1A5826B3C(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
      v23 = sub_1A5826B3C(v24 > 1, v25 + 1, 1, v23);
    *(_QWORD *)(v23 + 16) = v25 + 1;
    v26 = v23 + 16 * v25;
    *(_QWORD *)(v26 + 32) = 10911970;
    *(_QWORD *)(v26 + 40) = 0xA300000000000000;
    swift_bridgeObjectRelease();
  }
  v29[0] = v23;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE799A50);
  sub_1A582DF58();
  v27 = sub_1A594B268();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, AssociatedTypeWitness);
  return v27;
}

uint64_t sub_1A582C718@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A582C72C(a1);
}

uint64_t sub_1A582C72C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_1A594CC9C();
  sub_1A594B5F8();
  result = swift_bridgeObjectRelease();
  *a1 = 35;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_1A582C7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  void (*v8)(double);
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(v5);
  v9 = sub_1A582C420((uint64_t)v7, a3, a3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a3);
  return v9;
}

uint64_t sub_1A582C884(void (*a1)(double))
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for Activity.MailboxStatus(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v3);
  Activity.MailboxStatus.debugDescription.getter();
  v7 = v6;
  sub_1A55034FC((uint64_t)v5, type metadata accessor for Activity.MailboxStatus);
  return v7;
}

uint64_t sub_1A582CAE0()
{
  return 8;
}

uint64_t sub_1A582D5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_1A594A614();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A594A6EC();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  sub_1A548779C();
  sub_1A57135FC();
  sub_1A594A680();
  sub_1A55034FC((uint64_t)v6, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF20F0]);
  sub_1A55034FC((uint64_t)v9, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF21E8]);
  return swift_release();
}

uint64_t sub_1A582D710(void (*a1)(void))
{
  char v1;

  a1();
  if ((v1 & 1) != 0)
    return 45;
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796E68);
  sub_1A594C924();
  return 0;
}

uint64_t sub_1A582D7C0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A584D3EC((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1A582DFA4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1A582D828()
{
  uint64_t v0;

  return sub_1A579F980(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), MEMORY[0x1E0DEC348]);
}

uint64_t sub_1A582D840()
{
  return swift_deallocObject();
}

int8x16_t sub_1A582D850@<Q0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  int v2;
  int32x2_t v3;
  int64x2_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v2 = *(unsigned __int8 *)(v1 + 21);
  v3 = vdup_n_s32((v2 & 1) == 0);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5 = (int8x16_t)vdupq_n_s64(3uLL);
  v6.i64[1] = v5.i64[1];
  v6.i64[0] = (uint64_t)"YES";
  v7 = (int8x16_t)vdupq_n_s64(2uLL);
  v7.i64[0] = (uint64_t)"NO";
  v8 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v4, 0x3FuLL)), v7, v6);
  *(int32x2_t *)v6.i8 = vdup_n_s32(v2 == 2);
  v4.i64[0] = v6.u32[0];
  v4.i64[1] = v6.u32[1];
  v5.i64[0] = (uint64_t)"nil";
  result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v4, 0x3FuLL)), v5, v8);
  *a1 = result;
  a1[1].i8[0] = 2;
  return result;
}

uint64_t sub_1A582D8D0()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D8E0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 22);
}

uint64_t sub_1A582D8EC()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D8FC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 23);
}

void sub_1A582D904()
{
  uint64_t v0;

  sub_1A582BB1C(*(unsigned __int8 (**)(void))(v0 + 16));
}

void sub_1A582D90C()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)sub_1A582D954 + 4 * byte_1A59DABC9[(*(unsigned __int8 (**)(void))(v0 + 16))()];
  __asm { BR              X10 }
}

double sub_1A582D954()
{
  int64x2_t *v0;
  int64x2_t v1;

  v1 = vdupq_n_s64(7uLL);
  v1.i64[0] = (uint64_t)"unknown";
  *v0 = v1;
  v0[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_1A582D9A8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D9B8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D9C8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D9D8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D9E8()
{
  return swift_deallocObject();
}

uint64_t sub_1A582D9F8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t sub_1A582DA00()
{
  return swift_deallocObject();
}

uint64_t sub_1A582DA10()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t sub_1A582DA18()
{
  return swift_deallocObject();
}

uint64_t sub_1A582DA2C()
{
  return swift_deallocObject();
}

double sub_1A582DA40@<D0>(int64x2_t *a1@<X8>)
{
  uint64_t v1;
  int v3;
  int64x2_t v4;
  const char *v5;

  v3 = (*(unsigned __int8 (**)(void))(v1 + 16))();
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = vdupq_n_s64(4uLL);
      v5 = "junk";
    }
    else
    {
      v4 = vdupq_n_s64(7uLL);
      v5 = "notJunk";
    }
  }
  else
  {
    v4 = vdupq_n_s64(7uLL);
    v5 = "unknown";
  }
  v4.i64[0] = (uint64_t)v5;
  *a1 = v4;
  a1[1].i8[0] = 2;
  return *(double *)v4.i64;
}

uint64_t sub_1A582DABC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A582DAE0()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)sub_1A582DB28 + 4 * byte_1A59DABCD[(*(unsigned __int8 (**)(void))(v0 + 16))()];
  __asm { BR              X10 }
}

double sub_1A582DB28()
{
  int64x2_t *v0;
  int64x2_t v1;

  v1 = vdupq_n_s64(3uLL);
  v1.i64[0] = (uint64_t)"red";
  *v0 = v1;
  v0[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_1A582DBCC()
{
  uint64_t v0;
  unsigned __int8 v1;

  v1 = (*(uint64_t (**)(void))(v0 + 16))();
  return Action.Kind.description.getter(v1);
}

uint64_t sub_1A582DBEC()
{
  uint64_t v0;

  if (((*(uint64_t (**)(void))(v0 + 16))() & 1) != 0)
    return 6581810;
  else
    return 7631665;
}

uint64_t sub_1A582DC28()
{
  uint64_t v0;

  return sub_1A582BF68(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1A582DC30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A582DC54()
{
  uint64_t *v0;

  return sub_1A582C7A8(v0[4], v0[5], v0[2]);
}

void sub_1A582DC60()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)sub_1A582DCA8 + 4 * byte_1A59DABD5[(*(unsigned __int8 (**)(void))(v0 + 16))()];
  __asm { BR              X10 }
}

double sub_1A582DCA8()
{
  int64x2_t *v0;
  int64x2_t v1;

  v1 = vdupq_n_s64(4uLL);
  v1.i64[0] = (uint64_t)"push";
  *v0 = v1;
  v0[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_1A582DCFC()
{
  uint64_t v0;

  return sub_1A582C884(*(void (**)(double))(v0 + 16));
}

uint64_t sub_1A582DD04()
{
  return swift_deallocObject();
}

uint64_t sub_1A582DD14()
{
  return swift_deallocObject();
}

uint64_t sub_1A582DD24()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t sub_1A582DD2C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A582DD50()
{
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  return sub_1A594B4A8();
}

uint64_t sub_1A582DD8C()
{
  uint64_t v0;

  if (((*(uint64_t (**)(void))(v0 + 16))() & 0x100000000) != 0)
    return 45;
  else
    return sub_1A594B490();
}

void sub_1A582DDD8()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  __swift_instantiateConcreteTypeFromMangledName_0((uint64_t *)&unk_1EE796E68);
  MessageIdentifierRange.debugDescription.getter();
}

uint64_t sub_1A582DE18()
{
  uint64_t v0;

  return sub_1A582D710(*(void (**)(void))(v0 + 16));
}

void sub_1A582DE20()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)sub_1A582DE60 + 4 * byte_1A59DABD9[(*(unsigned __int8 (**)(void))(v0 + 16))()];
  __asm { BR              X10 }
}

uint64_t sub_1A582DE60()
{
  return 0x65766968637261;
}

uint64_t sub_1A582DEE0()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return sub_1A594B4A8();
}

uint64_t sub_1A582DF1C()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return sub_1A594B4A8();
}

unint64_t sub_1A582DF58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE795F98;
  if (!qword_1EE795F98)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract_0((uint64_t *)&unk_1EE799A50);
    result = MEMORY[0x1A85B1874](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EE795F98);
  }
  return result;
}

uint64_t sub_1A582DFA4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v2 = a1;
  v3 = a1[1];
  result = sub_1A594CC78();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(_DWORD *)(v77 + 4 * i);
        v80 = v76;
        do
        {
          v81 = *(_DWORD *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_DWORD *)(v77 + v80 + 4) = v81;
          *(_DWORD *)(v77 + v80) = v79;
          v80 -= 4;
        }
        while (v80 != -4);
        v76 += 4;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v93 = result;
    v94 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_1A594BA18();
      *(_QWORD *)(result + 16) = v6;
      v3 = v94;
      v92 = result;
      v96 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v90 = v2;
      v91 = *v2 - 4;
      v10 = MEMORY[0x1E0DEE9D8];
      v95 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_DWORD *)(v9 + 4 * v8);
          v14 = *(_DWORD *)(v9 + 4 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(_DWORD *)(v9 + 4 * v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_DWORD *)(v9 + 4 * v18);
                  *(_DWORD *)(v9 + 4 * v18) = *(_DWORD *)(v9 + 4 * v17);
                  *(_DWORD *)(v9 + 4 * v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v93)
          {
            v20 = v12 + v93;
            if (__OFADD__(v12, v93))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (unsigned int *)(v91 + 4 * v8);
              do
              {
                v22 = *(_DWORD *)(v9 + 4 * v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *v24;
                  if (v22 >= *v24)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v22;
                  v24[1] = v25;
                  --v24;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1A584D2CC(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v95;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_1A584D2CC((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v95;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_1A582E5E8((char *)(v9 + 4 * *v70), (char *)(v9 + 4 * *v73), v9 + 4 * v74, v96);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v95;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v94;
        if (v8 >= v94)
        {
          v7 = v92;
          v2 = v90;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x1E0DEE9D8];
    v96 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v92 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    v92 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_1A582E5E8((char *)(v82 + 4 * v86), (char *)(v82 + 4 * *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + 4 * v87, v96);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1A584D3C4(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v92 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A582E5E8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 3;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 3;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 2;
  if (v10 >= v12 >> 2)
  {
    if (a4 != __src || &__src[4 * v13] <= a4)
      memmove(a4, __src, 4 * v13);
    v14 = &v4[4 * v13];
    if (v7 >= v6 || v11 < 4)
      goto LABEL_39;
    v17 = (char *)(a3 - 4);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 4;
      v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      v20 = v21;
      if (*((_DWORD *)v14 - 1) < v21)
        break;
      v20 = *((_DWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 4;
LABEL_35:
        *(_DWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 4;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 4;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[4 * v10] <= a4)
    memmove(a4, __dst, 4 * v10);
  v14 = &v4[4 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 4)
  {
    while (1)
    {
      v15 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        break;
      v16 = v7 == v6;
      v6 += 4;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 4;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *(_DWORD *)v4;
    v16 = v7 == v4;
    v4 += 4;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_DWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 3uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFFCLL])
    memmove(v6, v4, 4 * (v23 >> 2));
  return 1;
}

uint64_t MailboxOfInterest.id.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MailboxOfInterest.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

double (*MailboxOfInterest.id.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxOfInterest.name.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MailboxOfInterest.name.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_DWORD *)(v2 + 24) = a2;
  return result;
}

double (*MailboxOfInterest.name.modify())(_QWORD)
{
  return nullsub_1;
}

void MailboxOfInterest.metadata.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 36);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_BYTE *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_BYTE *)(v1 + 64);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 4) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
}

__n128 MailboxOfInterest.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 64) = *(_BYTE *)(a1 + 32);
  return result;
}

double (*MailboxOfInterest.metadata.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1A582E9D4(uint64_t a1, uint64_t a2)
{
  return _s16IMAP2Persistence17MailboxOfInterestV17LocalModificationO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
}

unint64_t MailboxOfInterest.localModification.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  sub_1A54E31DC(v1);
  return v1;
}

unint64_t MailboxOfInterest.localModification.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1A54E3278(*(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = a1;
  *(_DWORD *)(v2 + 80) = a2;
  return result;
}

double (*MailboxOfInterest.localModification.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t MailboxOfInterest.latestLocalChange.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 84) | ((unint64_t)*(unsigned __int8 *)(v0 + 88) << 32);
}

uint64_t MailboxOfInterest.latestLocalChange.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 84) = result;
  *(_BYTE *)(v1 + 88) = BYTE4(result) & 1;
  return result;
}

double (*MailboxOfInterest.latestLocalChange.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxOfInterest.init(id:name:uidValidity:fetchedWindow:highestModificationSequenceValue:localModification:latestLocalChange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_DWORD *)(a9 + 24) = a4;
  *(_DWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 36) = BYTE4(a5) & 1;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10 & 1;
  *(_QWORD *)(a9 + 72) = a11;
  *(_DWORD *)(a9 + 80) = a12;
  *(_DWORD *)(a9 + 84) = a14;
  *(_BYTE *)(a9 + 88) = a15 & 1;
  return result;
}

uint64_t sub_1A582EB08(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[2];
  _OWORD v9[4];
  _OWORD v10[2];

  v2 = a1[3];
  v7[2] = a1[2];
  v7[3] = v2;
  v8[0] = a1[4];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 73);
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = a2[3];
  v9[2] = a2[2];
  v9[3] = v4;
  v10[0] = a2[4];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 73);
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return _s16IMAP2Persistence17MailboxOfInterestV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v9) & 1;
}

unint64_t MailboxOfInterest.uidValidity.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)(*(_BYTE *)(v0 + 36) & 1) << 32);
}

uint64_t MailboxOfInterest.uidValidity.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 36) = BYTE4(result) & 1;
  return result;
}

uint64_t *(*MailboxOfInterest.uidValidity.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + 36);
  *(_DWORD *)(a1 + 8) = v2;
  return sub_1A582EBC8;
}

uint64_t *sub_1A582EBC8(uint64_t *result)
{
  uint64_t v1;
  char v2;

  v1 = *result;
  v2 = *((_BYTE *)result + 12);
  *(_DWORD *)(v1 + 32) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 36) = v2;
  return result;
}

uint64_t MailboxOfInterest.highestModificationSequenceValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t MailboxOfInterest.highestModificationSequenceValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*MailboxOfInterest.highestModificationSequenceValue.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_BYTE *)(a1 + 8) = v2;
  return sub_1A582EC24;
}

uint64_t sub_1A582EC24(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 64) = v2;
  return result;
}

uint64_t MailboxOfInterest.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t MailboxOfInterest.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A582ECAC()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A582ECF0()
{
  return sub_1A594CE88();
}

uint64_t sub_1A582ED1C()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t sub_1A582ED5C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t _s16IMAP2Persistence17MailboxOfInterestV17LocalModificationO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, int a2, unint64_t a3, int a4)
{
  if (a1)
  {
    if (a1 == 1)
    {
      if (a3 == 1)
        return 1;
    }
    else if (a1 == 2)
    {
      if (a3 == 2)
        return 1;
    }
    else if (a3 >= 3 && a2 == a4 && sub_1A578ECF4(a1, a3))
    {
      return 1;
    }
  }
  else if (!a3)
  {
    return 1;
  }
  return 0;
}

uint64_t _s16IMAP2Persistence17MailboxOfInterestV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v8[2];
  char v9;
  _OWORD v10[2];
  char v11;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (!_s13IMAP2Protocol13EncodedStringV2eeoiySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)a2))
    return 0;
  if ((*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32)) != (*(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a2 + 24) << 32)))
    return 0;
  if (!sub_1A578ECF4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)))
    return 0;
  v4 = *(_OWORD *)(a1 + 48);
  v10[0] = *(_OWORD *)(a1 + 32);
  v10[1] = v4;
  v11 = *(_BYTE *)(a1 + 64);
  v5 = *(_OWORD *)(a2 + 48);
  v8[0] = *(_OWORD *)(a2 + 32);
  v8[1] = v5;
  v9 = *(_BYTE *)(a2 + 64);
  if (!_s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0((_BOOL8)v10, (uint64_t)v8)
    || (_s16IMAP2Persistence17MailboxOfInterestV17LocalModificationO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 80), *(_QWORD *)(a2 + 72), *(_DWORD *)(a2 + 80)) & 1) == 0)
  {
    return 0;
  }
  v6 = *(_BYTE *)(a2 + 88);
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 88) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  return 1;
}

unint64_t sub_1A582EECC()
{
  unint64_t result;

  result = qword_1EE7AA880;
  if (!qword_1EE7AA880)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for MailboxOfInterest, &type metadata for MailboxOfInterest);
    atomic_store(result, (unint64_t *)&qword_1EE7AA880);
  }
  return result;
}

unint64_t sub_1A582EF14()
{
  unint64_t result;

  result = qword_1EE798450;
  if (!qword_1EE798450)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for OpaqueMailboxID, &type metadata for OpaqueMailboxID);
    atomic_store(result, (unint64_t *)&qword_1EE798450);
  }
  return result;
}

unint64_t destroy for MailboxOfInterest(uint64_t a1)
{
  unint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 72);
  if (result >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for MailboxOfInterest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 72);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v6 >= 3)
  {
    *(_QWORD *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v7;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for MailboxOfInterest(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = (_QWORD *)(a1 + 72);
  v9 = (_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) >= 3uLL)
  {
    if (v8 >= 3)
    {
      *(_QWORD *)(a1 + 72) = v8;
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    }
    else
    {
      sub_1A582F188(a1 + 72);
      v11 = *(_DWORD *)(a2 + 80);
      *v7 = *v9;
      *(_DWORD *)(a1 + 80) = v11;
    }
  }
  else if (v8 >= 3)
  {
    *(_QWORD *)(a1 + 72) = v8;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  else
  {
    v10 = *v9;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *v7 = v10;
  }
  v12 = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v12;
  return a1;
}

uint64_t sub_1A582F188(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA888);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy89_8_0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MailboxOfInterest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  if (v6 >= 3)
  {
    if (v5 >= 3)
    {
      *(_QWORD *)(a1 + 72) = v5;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      goto LABEL_6;
    }
    sub_1A582F188(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
LABEL_6:
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxOfInterest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MailboxOfInterest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxOfInterest()
{
  return &type metadata for MailboxOfInterest;
}

uint64_t sub_1A582F380(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  }
  return a1;
}

uint64_t assignWithCopy for MailboxOfInterest.LocalModification(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
      return a1;
    }
LABEL_7:
    v6 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8_2(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MailboxOfInterest.LocalModification(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxOfInterest.LocalModification(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 12))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MailboxOfInterest.LocalModification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_1A582F59C(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MailboxOfInterest.LocalModification()
{
  return &type metadata for MailboxOfInterest.LocalModification;
}

uint64_t sub_1A582F5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t i;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t j;
  int v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t k;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v56 = a2 + 32;
    v57 = a1 + 32;
    while (1)
    {
      v4 = v57 + 96 * v3;
      v5 = v56 + 96 * v3;
      if (*(_QWORD *)(v4 + 8) != *(_QWORD *)(v5 + 8))
        break;
      v6 = *(unsigned __int8 **)v4;
      v7 = *(unsigned __int8 **)v5;
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v8 != *(_QWORD *)(*(_QWORD *)v5 + 16))
        break;
      result = *(_QWORD *)(v4 + 16);
      v10 = *(unsigned int *)(v4 + 24);
      v11 = *(_DWORD *)(v4 + 32);
      v12 = *(_BYTE *)(v4 + 36);
      v13 = *(_QWORD *)(v4 + 40);
      v14 = *(_BYTE *)(v4 + 48);
      v15 = *(_QWORD *)(v4 + 56);
      v16 = *(_BYTE *)(v4 + 64);
      v17 = *(_QWORD *)(v4 + 72);
      v18 = *(unsigned int *)(v4 + 80);
      v19 = *(_DWORD *)(v4 + 84);
      v20 = *(_BYTE *)(v4 + 88);
      v21 = *(_QWORD *)(v5 + 16);
      v22 = *(unsigned int *)(v5 + 24);
      v23 = *(_DWORD *)(v5 + 32);
      v24 = *(unsigned __int8 *)(v5 + 36);
      v25 = *(_QWORD *)(v5 + 40);
      v26 = *(unsigned __int8 *)(v5 + 48);
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(_BYTE *)(v5 + 64);
      v29 = *(_QWORD *)(v5 + 72);
      v30 = *(unsigned int *)(v5 + 80);
      v55 = *(_DWORD *)(v5 + 84);
      v31 = *(unsigned __int8 *)(v5 + 88);
      if (v8 && v6 != v7)
      {
        if (v6[32] != v7[32])
          return 0;
        if (v8 != 1)
        {
          if (v6[33] != v7[33])
            return 0;
          v35 = v6 + 34;
          v36 = v7 + 34;
          for (i = v8 - 2; i; --i)
          {
            v39 = *v35++;
            v38 = v39;
            v40 = *v36++;
            if (v38 != v40)
              return 0;
          }
        }
      }
      if ((v10 | (v10 << 32)) != (v22 | (v22 << 32)))
        break;
      v32 = *(_QWORD *)(result + 16);
      if (v32 != *(_QWORD *)(v21 + 16))
        break;
      if (v32 && result != v21)
      {
        if (*(unsigned __int8 *)(result + 32) != *(unsigned __int8 *)(v21 + 32))
          return 0;
        if (v32 != 1)
        {
          if (*(unsigned __int8 *)(result + 33) != *(unsigned __int8 *)(v21 + 33))
            return 0;
          if (v32 != 2)
          {
            if (*(unsigned __int8 *)(result + 34) != *(unsigned __int8 *)(v21 + 34))
              return 0;
            v43 = (unsigned __int8 *)(result + 35);
            v44 = (unsigned __int8 *)(v21 + 35);
            for (j = v32 - 3; j; --j)
            {
              result = 0;
              v47 = *v43++;
              v46 = v47;
              v48 = *v44++;
              if (v46 != v48)
                return result;
            }
          }
        }
      }
      if ((v12 & 1) != 0)
      {
        if (!v24)
          return 0;
      }
      else
      {
        if (v11 == v23)
          v33 = v24;
        else
          v33 = 1;
        if ((v33 & 1) != 0)
          return 0;
      }
      if ((v14 & 1) != 0)
      {
        if (!v26)
          return 0;
      }
      else
      {
        if (v25 == v13)
          v34 = v26;
        else
          v34 = 1;
        if ((v34 & 1) != 0)
          return 0;
      }
      if ((v16 & 1) != 0)
      {
        if ((v28 & 1) == 0)
          return 0;
      }
      else
      {
        if ((v28 & 1) != 0)
          return 0;
        if ((v27 | v15) < 0)
        {
          __break(1u);
          return result;
        }
        if (v27 != v15)
          return 0;
      }
      if (v17)
      {
        if (v17 == 1)
        {
          if (v29 != 1)
            return 0;
        }
        else if (v17 == 2)
        {
          if (v29 != 2)
            return 0;
        }
        else
        {
          if (v29 < 3)
            return 0;
          if ((v18 | (v18 << 32)) != (v30 | (v30 << 32)))
            return 0;
          v41 = *(_QWORD *)(v17 + 16);
          if (v41 != *(_QWORD *)(v29 + 16))
            return 0;
          if (v41 && v17 != v29)
          {
            if (*(unsigned __int8 *)(v17 + 32) != *(unsigned __int8 *)(v29 + 32))
              return 0;
            if (v41 != 1)
            {
              if (*(unsigned __int8 *)(v17 + 33) != *(unsigned __int8 *)(v29 + 33))
                return 0;
              if (v41 != 2)
              {
                if (*(unsigned __int8 *)(v17 + 34) != *(unsigned __int8 *)(v29 + 34))
                  return 0;
                v49 = (unsigned __int8 *)(v17 + 35);
                v50 = (unsigned __int8 *)(v29 + 35);
                for (k = v41 - 3; k; --k)
                {
                  result = 0;
                  v53 = *v49++;
                  v52 = v53;
                  v54 = *v50++;
                  if (v52 != v54)
                    return result;
                }
              }
            }
          }
        }
      }
      else if (v29)
      {
        return 0;
      }
      if ((v20 & 1) != 0)
      {
        if (!v31)
          return 0;
      }
      else
      {
        if (v19 == v55)
          v42 = v31;
        else
          v42 = 1;
        if ((v42 & 1) != 0)
          return 0;
      }
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A582F924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a2 + 32) != *(_DWORD *)(a1 + 32))
    return 0;
  v3 = 0;
  do
  {
    if (*(_BYTE *)(a2 + v3 + 48) == 1)
    {
      if (!*(_BYTE *)(a1 + v3 + 48))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + v3 + 48) & 1) != 0 || *(_QWORD *)(a1 + v3 + 40) != *(_QWORD *)(a2 + v3 + 40))
    {
      return 0;
    }
    if (((*(unsigned __int8 *)(a1 + v3 + 49) ^ *(unsigned __int8 *)(a2 + v3 + 49)) & 1) != 0)
      break;
    if (!--v2)
      return 1;
    v4 = a1 + v3;
    v5 = a2 + v3;
    v3 += 24;
  }
  while (*(_DWORD *)(v5 + 56) == *(_DWORD *)(v4 + 56));
  return 0;
}

uint64_t sub_1A582F9E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  char v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  v6 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    return 0;
  v7 = a1 + 5;
  v8 = a2 + 5;
  v9 = v2 - 1;
  do
  {
    v10 = v9 == 0;
    if (!v9)
      break;
    v11 = *v7++;
    ++v8;
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v12 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v9;
  }
  while ((v12 & 1) != 0);
  return v10;
}

uint64_t sub_1A582FAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_1A58304AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 32)
  {
    result = 0;
    v7 = a1 + i;
    v8 = a2 + i;
    if (*(_DWORD *)(a2 + i + 32) != *(_DWORD *)(a1 + i + 32)
      || ((*(unsigned __int8 *)(v7 + 36) ^ *(unsigned __int8 *)(v8 + 36)) & 1) != 0
      || ((*(unsigned __int8 *)(v7 + 37) ^ *(unsigned __int8 *)(v8 + 37)) & 1) != 0
      || ((*(unsigned __int8 *)(v7 + 38) ^ *(unsigned __int8 *)(v8 + 38)) & 1) != 0
      || ((*(unsigned __int8 *)(v7 + 39) ^ *(unsigned __int8 *)(v8 + 39)) & 1) != 0
      || ((*(unsigned __int8 *)(v7 + 40) ^ *(unsigned __int8 *)(v8 + 40)) & 1) != 0
      || ((*(unsigned __int8 *)(v7 + 41) ^ *(unsigned __int8 *)(v8 + 41)) & 1) != 0
      || *(unsigned __int8 *)(v7 + 42) != *(unsigned __int8 *)(v8 + 42)
      || *(unsigned __int8 *)(v7 + 43) != *(unsigned __int8 *)(v8 + 43))
    {
      break;
    }
    v9 = *(_QWORD *)(v7 + 44);
    v10 = *(_QWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v8 + 44);
    if (v9 == 2)
    {
      if (v11 != 2)
        return 0;
    }
    else
    {
      if (v11 == 2)
        return 0;
      result = 0;
      if (((v9 & 1) == 0) == (v11 & 1))
        return result;
      if (((v9 & 0x100) == 0) == ((v11 >> 8) & 1))
        return result;
      if (((v9 & 0x10000) == 0) == ((v11 >> 16) & 1))
        return result;
      if (((v9 & 0x1000000) == 0) == ((v11 >> 24) & 1))
        return result;
      if (((v9 & 0x100000000) == 0) == (BYTE4(v11) & 1))
        return result;
      if (((v9 & 0x10000000000) == 0) == ((v11 >> 40) & 1))
        return result;
      v12 = v11 ^ v9;
      if ((v12 & 0xFF000000000000) != 0 || HIBYTE(v12))
        return result;
    }
    if ((sub_1A54ECF6C(v10, *(_QWORD *)(v8 + 56)) & 1) == 0)
      return 0;
    if (!--v2)
      return 1;
  }
  return result;
}

uint64_t sub_1A5830678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t i;
  int v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(_DWORD *)(a2 + 36) == *(_DWORD *)(a1 + 36)
      && (*(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned int *)(a1 + 48) << 32)) == (*(unsigned int *)(a2 + 48) | ((unint64_t)*(unsigned int *)(a2 + 48) << 32)))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(_QWORD *)(v4 + 16);
      if (v6 == *(_QWORD *)(v5 + 16))
      {
        if (v6)
          v7 = v4 == v5;
        else
          v7 = 1;
        if (v7)
          goto LABEL_17;
        if (*(unsigned __int8 *)(v4 + 32) == *(unsigned __int8 *)(v5 + 32))
        {
          if (v6 == 1)
            goto LABEL_17;
          if (*(unsigned __int8 *)(v4 + 33) == *(unsigned __int8 *)(v5 + 33))
          {
            if (v6 == 2)
              goto LABEL_17;
            if (*(unsigned __int8 *)(v4 + 34) == *(unsigned __int8 *)(v5 + 34))
            {
              v8 = (unsigned __int8 *)(v4 + 35);
              v9 = (unsigned __int8 *)(v5 + 35);
              for (i = v6 - 3; i; --i)
              {
                v12 = *v8++;
                v11 = v12;
                v13 = *v9++;
                if (v11 != v13)
                  return 0;
              }
LABEL_17:
              __asm { BR              X8 }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1A58311EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
    v3 = (_DWORD *)(a2 + 56);
    for (i = (_DWORD *)(a1 + 56); ; i += 6)
    {
      v6 = *((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v8 = *((_QWORD *)v3 - 2);
      v7 = *((_QWORD *)v3 - 1);
      if ((v5 & 4) != 0)
      {
        if ((v7 & 4) == 0)
          return 0;
        sub_1A58329C8(*((_QWORD *)v3 - 2), *((_QWORD *)v3 - 1));
        sub_1A58329C8(v6, v5);
        v10 = sub_1A584FDC4(v6, v8);
      }
      else
      {
        if ((v7 & 4) != 0)
          return 0;
        sub_1A58329C8(*((_QWORD *)v3 - 2), *((_QWORD *)v3 - 1));
        sub_1A58329C8(v6, v5);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A58329FC(v5);
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        sub_1A58329FC(v7);
        if ((sub_1A5850050(v6, v8) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          sub_1A5832A60(v7);
          swift_bridgeObjectRelease();
          sub_1A5832A60(v5);
          sub_1A5832A2C(v8, v7);
          sub_1A5832A2C(v6, v5);
          return 0;
        }
        static SearchRequest.Predicate.__derived_enum_equals(_:_:)(v5);
        v10 = v9;
        swift_bridgeObjectRelease();
        sub_1A5832A60(v7);
        swift_bridgeObjectRelease();
        sub_1A5832A60(v5);
      }
      sub_1A5832A2C(v8, v7);
      sub_1A5832A2C(v6, v5);
      if ((v10 & 1) == 0)
        return 0;
      if (!--v2)
        return 1;
      result = 0;
      v13 = *v3;
      v3 += 6;
      v12 = v13;
      v14 = *i;
      if (v14 != v12)
        return result;
    }
  }
  return 1;
}

uint64_t sub_1A5831388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t i;
  int v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && (*(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned int *)(a1 + 48) << 32)) == (*(unsigned int *)(a2 + 48) | ((unint64_t)*(unsigned int *)(a2 + 48) << 32)))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a2 + 40);
      v5 = *(_QWORD *)(v3 + 16);
      if (v5 == *(_QWORD *)(v4 + 16))
      {
        if (v5)
          v6 = v3 == v4;
        else
          v6 = 1;
        if (v6)
          goto LABEL_15;
        if (*(unsigned __int8 *)(v3 + 32) == *(unsigned __int8 *)(v4 + 32))
        {
          if (v5 == 1)
            goto LABEL_15;
          if (*(unsigned __int8 *)(v3 + 33) == *(unsigned __int8 *)(v4 + 33))
          {
            if (v5 == 2)
              goto LABEL_15;
            if (*(unsigned __int8 *)(v3 + 34) == *(unsigned __int8 *)(v4 + 34))
            {
              v7 = (unsigned __int8 *)(v3 + 35);
              v8 = (unsigned __int8 *)(v4 + 35);
              for (i = v5 - 3; i; --i)
              {
                v11 = *v7++;
                v10 = v11;
                v12 = *v8++;
                if (v10 != v12)
                  return 0;
              }
LABEL_15:
              __asm { BR              X8 }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1A58320E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t i;
  int v14;
  int v15;
  int v16;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (v2 && a1 != a2)
  {
    if (a1[5] == a2[5])
    {
      v3 = a1 + 4;
      v4 = a2 + 4;
      v5 = a1[4];
      v6 = a2[4];
      v7 = *(_QWORD *)(v5 + 16);
      if (v7 == *(_QWORD *)(v6 + 16))
      {
        v8 = 1;
        while (1)
        {
          if (v7 && v5 != v6)
          {
            if (*(unsigned __int8 *)(v5 + 32) != *(unsigned __int8 *)(v6 + 32))
              return 0;
            if (v7 != 1)
            {
              if (*(unsigned __int8 *)(v5 + 33) != *(unsigned __int8 *)(v6 + 33))
                return 0;
              if (v7 != 2)
              {
                if (*(unsigned __int8 *)(v5 + 34) != *(unsigned __int8 *)(v6 + 34))
                  return 0;
                v11 = (unsigned __int8 *)(v5 + 35);
                v12 = (unsigned __int8 *)(v6 + 35);
                for (i = v7 - 3; i; --i)
                {
                  result = 0;
                  v15 = *v11++;
                  v14 = v15;
                  v16 = *v12++;
                  if (v14 != v16)
                    return result;
                }
              }
            }
          }
          if (v8 == v2)
            return 1;
          v9 = 2 * v8;
          if (v3[2 * v8 + 1] != v4[2 * v8 + 1])
            break;
          result = 0;
          v5 = v3[2 * v8++];
          v6 = v4[v9];
          v7 = *(_QWORD *)(v5 + 16);
          if (v7 != *(_QWORD *)(v6 + 16))
            return result;
        }
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A5832200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for MessageMetadata(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1A5832A90(a1 + v12, (uint64_t)v10);
        sub_1A5832A90(a2 + v12, (uint64_t)v6);
        v15 = _s16IMAP2Persistence15MessageMetadataV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v10, (uint64_t)v6);
        sub_1A5832AD4((uint64_t)v6);
        sub_1A5832AD4((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1A583231C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 48);
    for (i = (uint64_t *)(a1 + 48); *((_DWORD *)v3 - 4) == *((_DWORD *)i - 4); i += 3)
    {
      v6 = *(uint64_t *)((char *)i - 12);
      v7 = *i;
      v8 = *(uint64_t *)((char *)v3 - 12);
      v9 = *v3;
      if (v6 == 2)
      {
        if (v8 != 2)
          return 0;
      }
      else
      {
        if (v8 == 2)
          return 0;
        result = 0;
        if (((v6 & 1) == 0) == (v8 & 1)
          || ((v6 & 0x100) == 0) == ((v8 >> 8) & 1)
          || ((v6 & 0x10000) == 0) == ((v8 >> 16) & 1)
          || ((v6 & 0x1000000) == 0) == ((v8 >> 24) & 1))
        {
          return result;
        }
        if ((v6 & 0xFF00000000) == 0x200000000)
        {
          if (BYTE4(v8) != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (BYTE4(v8) == 2 || ((v6 & 0x100000000) == 0) == (BYTE4(v8) & 1))
            return result;
        }
        if ((v6 & 0xFF0000000000) == 0x20000000000)
        {
          if (BYTE5(v8) != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (BYTE5(v8) == 2 || ((v6 & 0x10000000000) == 0) == ((v8 >> 40) & 1))
            return result;
        }
        v10 = v8 & 0xFF000000000000;
        if ((v6 & 0xFF000000000000) == 0x3000000000000)
        {
          if (v10 != 0x3000000000000)
            return 0;
        }
        else if (v10 == 0x3000000000000 || ((v8 ^ v6) & 0xFF000000000000) != 0)
        {
          return 0;
        }
        v11 = HIBYTE(v6);
        v12 = HIBYTE(v8);
        if (v11 == 8)
        {
          if ((_DWORD)v12 != 8)
            return 0;
        }
        else
        {
          result = 0;
          if ((_DWORD)v12 == 8 || v11 != v12)
            return result;
        }
      }
      if (v7)
      {
        if (!v9)
          return 0;
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
        v13 = sub_1A54ED14C(v7, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
          return 0;
      }
      else if (v9)
      {
        return 0;
      }
      v3 += 3;
      result = 1;
      if (!--v2)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t static MailboxPriorityInfo.__derived_struct_equals(_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  if ((sub_1A585863C(a1, a3) & 1) != 0)
    return sub_1A58320E0(a2, a4);
  else
    return 0;
}

uint64_t MailboxPriorityInfo.userVisibleMailboxes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

double (*MailboxPriorityInfo.userVisibleMailboxes.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxPriorityInfo.mailboxPriorityOrder.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MailboxPriorityInfo.mailboxPriorityOrder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

double (*MailboxPriorityInfo.mailboxPriorityOrder.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MailboxPriorityInfo.init()()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t MailboxPriorityInfo.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5832804(a1, a2);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  result = sub_1A594CE88();
  if (v6)
  {
    v8 = a3 + 40;
    do
    {
      v8 += 16;
      result = sub_1A594CE88();
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t MailboxPriorityInfo.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5832804((uint64_t)v7, a1);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  sub_1A594CE88();
  if (v4)
  {
    v5 = a2 + 40;
    do
    {
      v5 += 16;
      sub_1A594CE88();
      --v4;
    }
    while (v4);
  }
  return sub_1A594CED0();
}

uint64_t sub_1A5832728()
{
  uint64_t *v0;

  return MailboxPriorityInfo.hashValue.getter(*v0, v0[1]);
}

uint64_t sub_1A5832730(uint64_t a1)
{
  uint64_t *v1;

  return MailboxPriorityInfo.hash(into:)(a1, *v1, v1[1]);
}

uint64_t sub_1A5832738()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1A594CE64();
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  sub_1A5832804((uint64_t)v6, v1);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 16);
  sub_1A594CE88();
  if (v3)
  {
    v4 = v2 + 40;
    do
    {
      v4 += 16;
      sub_1A594CE88();
      --v3;
    }
    while (v3);
  }
  return sub_1A594CED0();
}

uint64_t sub_1A58327BC(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a2[1];
  if ((sub_1A585863C(*a1, *a2) & 1) != 0)
    return sub_1A58320E0(v2, v3);
  else
    return 0;
}

uint64_t sub_1A5832804(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;

  result = sub_1A594CED0();
  v4 = 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_19;
    if (v5 >= v10)
      return sub_1A594CE88();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    if (!v12)
      break;
LABEL_16:
    v9 = (v12 - 1) & v12;
LABEL_5:
    sub_1A594CE64();
    sub_1A594CE88();
    result = sub_1A594CED0();
    v4 ^= result;
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v10)
    return sub_1A594CE88();
  v12 = *(_QWORD *)(v6 + 8 * v13);
  if (v12)
  {
    ++v5;
    goto LABEL_16;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v10)
      return sub_1A594CE88();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

unint64_t sub_1A5832974()
{
  unint64_t result;

  result = qword_1EE7AA890;
  if (!qword_1EE7AA890)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for MailboxPriorityInfo, &type metadata for MailboxPriorityInfo);
    atomic_store(result, (unint64_t *)&qword_1EE7AA890);
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxPriorityInfo()
{
  return &type metadata for MailboxPriorityInfo;
}

unint64_t sub_1A58329C8(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if ((a2 & 4) == 0)
    return sub_1A58329FC(a2);
  return result;
}

unint64_t sub_1A58329FC(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1A5832A2C(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a2 & 4) == 0)
    return sub_1A5832A60(a2);
  return result;
}

unint64_t sub_1A5832A60(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1A5832A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A5832AD4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessageMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MessageMetadata.uid.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t MessageMetadata.uid.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

double (*MessageMetadata.uid.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageMetadata.internalDate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MessageMetadata.internalDate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

double (*MessageMetadata.internalDate.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t MessageMetadata.flags.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0x1000000;
  if (!*(_BYTE *)(v0 + 19))
    v1 = 0;
  v2 = v1 | ((unint64_t)*(unsigned int *)(v0 + 20) << 32);
  v3 = 0x10000;
  if (!*(_BYTE *)(v0 + 18))
    v3 = 0;
  v4 = 256;
  if (!*(_BYTE *)(v0 + 17))
    v4 = 0;
  return v2 | v3 | v4 | *(unsigned __int8 *)(v0 + 16);
}

uint64_t MessageMetadata.flags.setter(uint64_t result)
{
  _BYTE *v1;

  v1[16] = result & 1;
  v1[17] = BYTE1(result) & 1;
  v1[18] = BYTE2(result) & 1;
  v1[19] = BYTE3(result) & 1;
  v1[20] = BYTE4(result);
  v1[21] = BYTE5(result);
  v1[22] = BYTE6(result);
  v1[23] = HIBYTE(result);
  return result;
}

double (*MessageMetadata.flags.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageMetadata.gmailLabels.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MessageMetadata.gmailLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

double (*MessageMetadata.gmailLabels.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageMetadata.messageHeader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MessageMetadata(0) + 32);
  return sub_1A5832C74(v3, a1);
}

uint64_t type metadata accessor for MessageMetadata(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE798420);
}

uint64_t sub_1A5832C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MessageMetadata.messageHeader.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MessageMetadata(0) + 32);
  return sub_1A5832CEC(a1, v3);
}

uint64_t sub_1A5832CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double (*MessageMetadata.messageHeader.modify())(_QWORD)
{
  type metadata accessor for MessageMetadata(0);
  return nullsub_1;
}

uint64_t MessageMetadata.messageSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MessageMetadata(0) + 36));
}

uint64_t MessageMetadata.messageSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MessageMetadata(0);
  *(_QWORD *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

double (*MessageMetadata.messageSize.modify())(_QWORD)
{
  type metadata accessor for MessageMetadata(0);
  return nullsub_1;
}

uint64_t MessageMetadata.indexingHint.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessageMetadata(0) + 40));
}

uint64_t MessageMetadata.indexingHint.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for MessageMetadata(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

double (*MessageMetadata.indexingHint.modify())(_QWORD)
{
  type metadata accessor for MessageMetadata(0);
  return nullsub_1;
}

uint64_t MessageMetadata.init(uid:internalDate:flags:gmailLabels:messageHeader:messageSize:indexingHint:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int v9;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v9 = a3;
  v13 = HIDWORD(a3);
  v14 = a3 >> 40;
  v15 = HIWORD(a3);
  v20 = HIBYTE(a3);
  *(_QWORD *)(a8 + 24) = 0;
  v21 = a7 & 1;
  v16 = (int *)type metadata accessor for MessageMetadata(0);
  v17 = a8 + v16[8];
  v18 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_DWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  sub_1A5832CEC(a5, v17);
  *(_BYTE *)(a8 + 16) = v9 & 1;
  *(_BYTE *)(a8 + 17) = BYTE1(v9) & 1;
  *(_BYTE *)(a8 + 18) = BYTE2(v9) & 1;
  *(_BYTE *)(a8 + 19) = HIBYTE(v9) & 1;
  *(_BYTE *)(a8 + 20) = v13;
  *(_BYTE *)(a8 + 21) = v14;
  *(_BYTE *)(a8 + 22) = v15;
  *(_BYTE *)(a8 + 23) = v20;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + v16[9]) = a6;
  *(_BYTE *)(a8 + v16[10]) = v21;
  return result;
}

uint64_t type metadata accessor for MessageMetadata.UnparsedHeader(uint64_t a1)
{
  return sub_1A55A1A0C(a1, (uint64_t *)&unk_1EE798408);
}

BOOL static MessageMetadata.IndexingHint.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t MessageMetadata.UnparsedHeader.underlying.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = type metadata accessor for MessageData.BodyData();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A583354C(v1, (uint64_t)v5);
  v6 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, v5, v6);
}

uint64_t MessageMetadata.IndexingHint.hash(into:)()
{
  return sub_1A594CE88();
}

uint64_t MessageMetadata.IndexingHint.hashValue.getter()
{
  sub_1A594CE64();
  sub_1A594CE88();
  return sub_1A594CED0();
}

uint64_t MessageMetadata.UnparsedHeader.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for MessageData.BodyData();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A594AE60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A583354C(v0, (uint64_t)v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v8 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t _s16IMAP2Persistence15MessageMetadataV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  _BYTE v38[12];
  int v39;
  uint64_t v40;
  _BYTE *v41;

  v4 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE7AA8A0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v16 = &v38[-v15];
  MEMORY[0x1E0C80A78](v17);
  v19 = &v38[-v18];
  if (*(_DWORD *)a2 != *(_DWORD *)a1 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    goto LABEL_34;
  if (*(_BYTE *)(a1 + 19))
    v20 = 0x1000000;
  else
    v20 = 0;
  v21 = v20 | ((unint64_t)*(unsigned int *)(a1 + 20) << 32);
  v22 = 0x10000;
  if (*(_BYTE *)(a1 + 18))
    v23 = 0x10000;
  else
    v23 = 0;
  v24 = 256;
  if (*(_BYTE *)(a1 + 17))
    v25 = 256;
  else
    v25 = 0;
  v26 = v21 | v23 | v25 | *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a2 + 19))
    v27 = 0x1000000;
  else
    v27 = 0;
  v28 = v27 | ((unint64_t)*(unsigned int *)(a2 + 20) << 32);
  if (!*(_BYTE *)(a2 + 18))
    v22 = 0;
  if (!*(_BYTE *)(a2 + 17))
    v24 = 0;
  if ((sub_1A5828E0C(v26, v28 | v22 | v24 | *(unsigned __int8 *)(a2 + 16)) & 1) == 0)
    goto LABEL_34;
  v41 = v10;
  v29 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v29)
      goto LABEL_34;
LABEL_25:
    v31 = type metadata accessor for MessageMetadata(0);
    sub_1A5832C74(a1 + *(int *)(v31 + 32), (uint64_t)v19);
    v40 = v31;
    sub_1A5832C74(a2 + *(int *)(v31 + 32), (uint64_t)v16);
    v32 = (uint64_t)v41;
    v33 = (uint64_t)&v41[*(int *)(v8 + 48)];
    sub_1A5832C74((uint64_t)v19, (uint64_t)v41);
    sub_1A5832C74((uint64_t)v16, v33);
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v34(v32, 1, v4) == 1)
    {
      sub_1A5510284((uint64_t)v16, &qword_1EE795DA0);
      v32 = (uint64_t)v41;
      sub_1A5510284((uint64_t)v19, &qword_1EE795DA0);
      if (v34(v33, 1, v4) == 1)
      {
        sub_1A5510284(v32, &qword_1EE795DA0);
LABEL_32:
        if (*(_QWORD *)(a1 + *(int *)(v40 + 36)) == *(_QWORD *)(a2 + *(int *)(v40 + 36)))
        {
          LOBYTE(v29) = *(_BYTE *)(a1 + *(int *)(v40 + 40)) ^ *(_BYTE *)(a2 + *(int *)(v40 + 40)) ^ 1;
          return v29 & 1;
        }
LABEL_34:
        LOBYTE(v29) = 0;
        return v29 & 1;
      }
    }
    else
    {
      sub_1A5832C74(v32, (uint64_t)v13);
      if (v34(v33, 1, v4) != 1)
      {
        sub_1A583405C(v33, (uint64_t)v7);
        v35 = v32;
        v36 = static MessageData.BodyData.== infix(_:_:)(v13, v7);
        sub_1A5833A34((uint64_t)v7);
        sub_1A5510284((uint64_t)v16, &qword_1EE795DA0);
        sub_1A5510284((uint64_t)v19, &qword_1EE795DA0);
        sub_1A5833A34((uint64_t)v13);
        sub_1A5510284(v35, &qword_1EE795DA0);
        if ((v36 & 1) == 0)
          goto LABEL_34;
        goto LABEL_32;
      }
      sub_1A5510284((uint64_t)v16, &qword_1EE795DA0);
      sub_1A5510284((uint64_t)v19, &qword_1EE795DA0);
      sub_1A5833A34((uint64_t)v13);
    }
    sub_1A5510284(v32, &qword_1EE7AA8A0);
    goto LABEL_34;
  }
  if (v29)
  {
    v40 = *(_QWORD *)(a2 + 24);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v30 = _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    v39 = sub_1A54ED14C(v30, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
      goto LABEL_34;
    goto LABEL_25;
  }
  return v29 & 1;
}

uint64_t sub_1A583354C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageData.BodyData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A5833594()
{
  unint64_t result;

  result = qword_1EE7AA898;
  if (!qword_1EE7AA898)
  {
    result = MEMORY[0x1A85B1874](&protocol conformance descriptor for MessageMetadata.IndexingHint, &type metadata for MessageMetadata.IndexingHint);
    atomic_store(result, (unint64_t *)&qword_1EE7AA898);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MessageMetadata(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    v7 = a3[8];
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = sub_1A594AE60();
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v16 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
  }
  return v4;
}

uint64_t destroy for MessageMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = sub_1A594AE60();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  return result;
}

uint64_t initializeWithCopy for MessageMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_1A594AE60();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v14 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t assignWithCopy for MessageMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v17 = sub_1A594AE60();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v7, v8, v17);
      goto LABEL_7;
    }
    sub_1A5833A34((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v14 = sub_1A594AE60();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1A5833A34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for MessageMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_1A594AE60();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for MessageMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v18 = sub_1A594AE60();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v7, v8, v18);
      goto LABEL_7;
    }
    sub_1A5833A34((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v14 = sub_1A594AE60();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v16 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5833CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MessageMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5833D8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName_0(&qword_1EE795DA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_1A5833E04()
{
  unint64_t v0;

  sub_1A5833EA8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A5833EA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE798418)
  {
    type metadata accessor for MessageMetadata.UnparsedHeader(255);
    v0 = sub_1A594C354();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE798418);
  }
}

uint64_t getEnumTagSinglePayload for MessageMetadata.UnparsedHeader()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5833F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageData.BodyData();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MessageMetadata.UnparsedHeader()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A5833F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageData.BodyData();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MessageMetadata.IndexingHint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5833FDC + 4 * byte_1A59DADA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A5834010 + 4 * asc_1A59DADA0[v4]))();
}

uint64_t sub_1A5834010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5834018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5834020);
  return result;
}

uint64_t sub_1A583402C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5834034);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A5834038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5834040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageMetadata.IndexingHint()
{
  return &type metadata for MessageMetadata.IndexingHint;
}

uint64_t sub_1A583405C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageMetadata.UnparsedHeader(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MessageSectionData.mailbox.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MessageSectionData.mailbox.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)v2 = a1;
  *(_DWORD *)(v2 + 8) = a2;
  return result;
}

double (*MessageSectionData.mailbox.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageSectionData.message.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t MessageSectionData.message.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

double (*MessageSectionData.message.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageSectionData.section.getter()
{
  return _s13IMAP2Behavior27ConnectionIDsGroupedByStateV11connectionsSayAC0C0VGvg_0();
}

uint64_t MessageSectionData.section.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

double (*MessageSectionData.section.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageSectionData.segment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MessageSectionData(0) + 28);
  return sub_1A5834B1C(v3, a1);
}

uint64_t MessageSectionData.segment.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MessageSectionData(0) + 28);
  return sub_1A5834B74(a1, v3);
}

double (*MessageSectionData.segment.modify())(_QWORD)
{
  type metadata accessor for MessageSectionData(0);
  return nullsub_1;
}

uint64_t MessageSectionData.init(mailbox:message:section:segment:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;

  *(_QWORD *)a6 = a1;
  *(_DWORD *)(a6 + 8) = a2;
  *(_DWORD *)(a6 + 12) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  v7 = a6 + *(int *)(type metadata accessor for MessageSectionData(0) + 28);
  return sub_1A5834BB8(a5, v7);
}

uint64_t MessageSectionData.Segment.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t MessageSectionData.Segment.data.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A594AE60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

double (*MessageSectionData.Segment.data.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageSectionData.Segment.isFinal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessageSectionData.Segment(0) + 20));
}

uint64_t MessageSectionData.Segment.isFinal.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MessageSectionData.Segment(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

double (*MessageSectionData.Segment.isFinal.modify())(_QWORD)
{
  type metadata accessor for MessageSectionData.Segment(0);
  return nullsub_1;
}

uint64_t MessageSectionData.Segment.initial.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MessageSectionData.Segment(0);
  return sub_1A54E330C(v1 + *(int *)(v3 + 24), a1, &qword_1EE798598);
}

uint64_t MessageSectionData.Segment.initial.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MessageSectionData.Segment(0) + 24);
  return sub_1A5834BFC(a1, v3);
}

double (*MessageSectionData.Segment.initial.modify())(_QWORD)
{
  type metadata accessor for MessageSectionData.Segment(0);
  return nullsub_1;
}

uint64_t MessageSectionData.Segment.Initial.bodyStructure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A54E330C(v1, a1, &qword_1EE796958);
}

double MessageSectionData.Segment.Initial.bodyStructure.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _BYTE v13[113];
  _BYTE v14[9];
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  _OWORD v26[11];
  char v27;

  sub_1A55032A0(a1, (uint64_t)v13, &qword_1EE796958);
  sub_1A55032A0((uint64_t)v13, (uint64_t)v14, &qword_1EE796958);
  sub_1A55032A0((uint64_t)v14, (uint64_t)v15, &qword_1EE796958);
  v2 = *(_OWORD *)(v1 + 144);
  v26[8] = *(_OWORD *)(v1 + 128);
  v26[9] = v2;
  v26[10] = *(_OWORD *)(v1 + 160);
  v27 = *(_BYTE *)(v1 + 176);
  v3 = *(_OWORD *)(v1 + 80);
  v26[4] = *(_OWORD *)(v1 + 64);
  v26[5] = v3;
  v4 = *(_OWORD *)(v1 + 112);
  v26[6] = *(_OWORD *)(v1 + 96);
  v26[7] = v4;
  v5 = *(_OWORD *)(v1 + 16);
  v26[0] = *(_OWORD *)v1;
  v26[1] = v5;
  v6 = *(_OWORD *)(v1 + 48);
  v26[2] = *(_OWORD *)(v1 + 32);
  v26[3] = v6;
  sub_1A55DC438((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1A5524178);
  v7 = v23;
  *(_OWORD *)(v1 + 128) = v22;
  *(_OWORD *)(v1 + 144) = v7;
  *(_OWORD *)(v1 + 160) = v24;
  *(_BYTE *)(v1 + 176) = v25;
  v8 = v19;
  *(_OWORD *)(v1 + 64) = v18;
  *(_OWORD *)(v1 + 80) = v8;
  v9 = v21;
  *(_OWORD *)(v1 + 96) = v20;
  *(_OWORD *)(v1 + 112) = v9;
  v10 = v15[1];
  *(_OWORD *)v1 = v15[0];
  *(_OWORD *)(v1 + 16) = v10;
  result = *(double *)&v16;
  v12 = v17;
  *(_OWORD *)(v1 + 32) = v16;
  *(_OWORD *)(v1 + 48) = v12;
  return result;
}

double (*MessageSectionData.Segment.Initial.bodyStructure.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t MessageSectionData.Segment.Initial.init(bodyStructure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[184];
  _BYTE v5[184];

  sub_1A55032A0(a1, (uint64_t)v4, &qword_1EE796958);
  sub_1A55032A0((uint64_t)v4, (uint64_t)v5, &qword_1EE796958);
  return sub_1A55032A0((uint64_t)v5, a2, &qword_1EE796958);
}

uint64_t sub_1A583457C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[11];
  char v14;
  _OWORD v15[11];
  char v16;

  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v13[10] = *(_OWORD *)(a1 + 160);
  v14 = *(_BYTE *)(a1 + 176);
  v3 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v15[8] = *(_OWORD *)(a2 + 128);
  v15[9] = v7;
  v15[10] = *(_OWORD *)(a2 + 160);
  v16 = *(_BYTE *)(a2 + 176);
  v8 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  return _s16IMAP2Persistence18MessageSectionDataV7SegmentV7InitialV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v13, (uint64_t)v15) & 1;
}

