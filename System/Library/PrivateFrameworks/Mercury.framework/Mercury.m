uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CF779A04(a1, a2, a3, a4, a5, (uint64_t)sub_1CF7786B0, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

{
  return sub_1CF779A04(a1, a2, a3, a4, a5, (uint64_t)sub_1CF7A1768, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

{
  return sub_1CF779A04(a1, a2, a3, a4, a5, (uint64_t)sub_1CF7A174C, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF798C18);
}

ValueMetadata *type metadata accessor for XPCDictionary()
{
  return &type metadata for XPCDictionary;
}

uint64_t XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(uint64_t (*a1)(_QWORD))
{
  _QWORD *v1;

  return a1(*v1);
}

uint64_t sub_1CF77834C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CF778360(a1, a2);
  return a1;
}

uint64_t sub_1CF778360(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t Error<>.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[64];

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A80](a1);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DED8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(inited + 32) = sub_1CF7C8850();
    *(_QWORD *)(inited + 40) = v15;
    *(_QWORD *)(inited + 48) = a2;
    *(_QWORD *)(inited + 56) = a3;
    v16 = inited;
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  v17 = sub_1CF77852C(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  v18 = sub_1CF77907C(v17);
  swift_bridgeObjectRelease();
  v19 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
  Error<>.init(_:userInfo:defaultUserInfo:)((uint64_t)v12, v18, v19, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
}

xpc_object_t XPCDictionary.init()@<X0>(_QWORD *a1@<X8>)
{
  xpc_object_t result;

  result = xpc_dictionary_create(0, 0, 0);
  *a1 = result;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001CF7CD790;
  return result;
}

unint64_t sub_1CF77852C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEA8);
  v2 = (_QWORD *)sub_1CF7C8CDC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1CF779644(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t destroy for XPCDictionary()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s7Mercury13XPCDictionaryVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

xpc_object_t sub_1CF7786B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CF779BF8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, unint64_t a2)
{
  sub_1CF778700(a1, a2);
  return sub_1CF77834C(a1, a2);
}

{
  sub_1CF778700(a1, a2);
  return sub_1CF77834C(a1, a2);
}

uint64_t sub_1CF778700(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X10 }
  return XPCDictionary.subscript.setter(0);
}

BOOL static _Error.~= infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;
  uint64_t v7;

  swift_getErrorValue();
  v0 = sub_1CF7C8E14();
  v2 = v1;
  if (v0 == sub_1CF7C8430() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v5 = sub_1CF7C8FC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v5 & 1) != 0)
  {
LABEL_8:
    v7 = sub_1CF7C8448();
    swift_getErrorValue();
    return v7 == sub_1CF7C91E0();
  }
  return result;
}

{
  return static _Error.~= infix(_:_:)();
}

uint64_t Error<>.init(_:userInfo:defaultUserInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = a2;
  sub_1CF778B5C(a3, (uint64_t)sub_1CF77A45C, 0, isUniquelyReferenced_nonNull_native, &v18);
  v11 = v18;
  swift_bridgeObjectRelease();
  v12 = sub_1CF7C843C();
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v18 = v11;
  sub_1CF778B5C(v12, (uint64_t)sub_1CF77A45C, 0, v13, &v18);
  v14 = v18;
  swift_bridgeObjectRelease();
  v15 = sub_1CF7C8448();
  v16 = sub_1CF779788(v15, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v16, v14, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_1CF778B5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  _BYTE v31[32];
  _OWORD v32[2];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v36 = a1;
  v37 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v38 = v8;
  v39 = 0;
  v40 = v11 & v9;
  v41 = a2;
  v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CF778E18(&v34);
  v12 = *((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CF78D23C();
    return swift_release();
  }
  while (1)
  {
    v15 = v34;
    sub_1CF779634(&v35, v33);
    v16 = *a5;
    v18 = sub_1CF779644(v15, v12);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (*(_QWORD *)(v16 + 24) >= v21)
    {
      if ((a4 & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_1CF7C6A58();
        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_1CF7C59D0(v21, a4 & 1);
      v23 = sub_1CF779644(v15, v12);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_6:
        v13 = 32 * v18;
        sub_1CF778DDC(*(_QWORD *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_1CF778DDC((uint64_t)v31, (uint64_t)v32);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
        swift_bridgeObjectRelease();
        v14 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + v13);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
        sub_1CF779634(v32, v14);
        goto LABEL_7;
      }
    }
    v25 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    *v26 = v15;
    v26[1] = v12;
    sub_1CF779634(v33, (_OWORD *)(v25[7] + 32 * v18));
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_21;
    v25[2] = v29;
LABEL_7:
    sub_1CF778E18(&v34);
    v12 = *((_QWORD *)&v34 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1CF7C91BC();
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1CF778DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CF778E18@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_1CF778DDC(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_1CF78D244((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&unk_1ED56DE40);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1CF778FFC((uint64_t)v21, &qword_1ED56DE38);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1CF778FFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CF779038(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1CF77907C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEB8);
    v2 = (_QWORD *)sub_1CF7C8CDC();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  v11 = MEMORY[0x1E0DEA968];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1CF78D23C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1CF779634(v6, v7);
    sub_1CF779634(v7, v40);
    sub_1CF779634(v40, &v38);
    result = sub_1CF779644(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      result = (unint64_t)sub_1CF779634(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_1CF779634(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t static Error<>.networkingError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(4, 0xD00000000000001CLL, 0x80000001CF7CF170, a1, a2);
}

uint64_t Error<>.init(_:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v9 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = a2;
  *(_QWORD *)(inited + 56) = a3;
  v12 = sub_1CF779500(inited);
  v13 = sub_1CF779788(v9, a4, a5);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a5 + 24))(v13, v12, a4, a5);
}

unint64_t sub_1CF779500(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEB8);
  v2 = sub_1CF7C8CDC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF779038(v6, (uint64_t)&v15, &qword_1ED56DE50);
    v7 = v15;
    v8 = v16;
    result = sub_1CF779644(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1CF779634(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_1CF779634(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1CF779644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1CF7C9234();
  sub_1CF7C88C8();
  v4 = sub_1CF7C9258();
  return sub_1CF7796A8(a1, a2, v4);
}

unint64_t sub_1CF7796A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1CF7C8FC4() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1CF7C8FC4() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1CF779788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A80](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    if (v5 == (int)v5)
      return v5;
    sub_1CF7C8A6C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1CF7CB5D0;
    v23 = a2;
    swift_getMetatypeMetadata();
    v11 = sub_1CF7C888C();
    v13 = v12;
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v14 = sub_1CF791E0C();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    v15 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v10 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v10 + 104) = v15;
    *(_QWORD *)(v10 + 64) = v14;
    *(_QWORD *)(v10 + 72) = v5;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v16 = (void *)sub_1CF7C8B08();
  }
  else
  {
    sub_1CF7C8A6C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1CF7CA390;
    v23 = a2;
    swift_getMetatypeMetadata();
    v18 = sub_1CF7C888C();
    v20 = v19;
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 64) = sub_1CF791E0C();
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v20;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v16 = (void *)sub_1CF7C8B08();
  }
  sub_1CF7C867C();
  swift_bridgeObjectRelease();

  Error<>.init(_:_:)(0xFFFFFFFFLL, 0xD00000000000001ALL, 0x80000001CF7CE910, a2, a3);
  v5 = sub_1CF7C8448();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v5 <= 0x7FFFFFFF)
  {
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF779A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v8;

  sub_1CF779A4C(a1, a2, a3, a4, a5, a6, a7);
  v8 = sub_1CF7C8B14();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

uint64_t sub_1CF779A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  uint64_t v13;

  v12[2] = a4;
  v12[3] = a5;
  v9 = sub_1CF7C8B14();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56D470);
  a7(&v13, a6, v12, v9, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18]);
  return XPCDictionary.subscript.setter(v13);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17D55A4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v2;
  if (a2)
  {
    v4 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    v5 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v3, (const char *)(v4 + 32), (const char *)(v5 + 32));
    swift_release();
  }
  else
  {
    v6 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v3, (const char *)(v6 + 32), 0);
  }
  return swift_release();
}

xpc_object_t sub_1CF779BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _BOOL4 v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  char *v54;
  char *v55;
  int64_t v56;
  xpc_object_t result;
  char *v58;
  char *v59;
  char *v60;
  char v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[2];
  char *v66;
  char *v67;
  int64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int64_t v75;

  v73 = a4;
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A80](AssociatedTypeWitness);
  v65[1] = (char *)v65 - v8;
  v9 = MEMORY[0x1E0C80A80](v7);
  v66 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A80](v9);
  v13 = (char *)v65 - v12;
  v14 = MEMORY[0x1E0C80A80](v11);
  v70 = (char *)v65 - v15;
  v16 = MEMORY[0x1E0C80A80](v14);
  v71 = (char *)v65 - v17;
  v18 = MEMORY[0x1E0C80A80](v16);
  v69 = (char *)v65 - v19;
  v20 = MEMORY[0x1E0C80A80](v18);
  v22 = (char *)v65 - v21;
  v23 = MEMORY[0x1E0C80A80](v20);
  v25 = (char *)v65 - v24;
  MEMORY[0x1E0C80A80](v23);
  v27 = (char *)v65 - v26;
  v72 = v28;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29((char *)v65 - v26, a1, a2);
  LOBYTE(a1) = sub_1CF7C8B74();
  v29(v25, (uint64_t)v27, a2);
  v67 = v13;
  v30 = (a1 & 1) != 0 && sub_1CF7C8B68() > 64;
  v31 = *(void (**)(char *, uint64_t))(v72 + 8);
  v31(v25, a2);
  v29(v22, (uint64_t)v27, a2);
  if (!v30)
    goto LABEL_18;
  v75 = 0x8000000000000000;
  if ((sub_1CF7C8B74() & 1) != 0)
  {
    v32 = sub_1CF7C8B68();
    v33 = v73;
    if (v32 >= 64)
    {
      sub_1CF7893E0();
      v39 = v69;
      sub_1CF7C8B44();
      v40 = sub_1CF7C87FC();
      v31(v39, a2);
      v31(v22, a2);
      if ((v40 & 1) != 0)
        goto LABEL_37;
    }
    else
    {
      v34 = sub_1CF7C8B5C();
      v31(v22, a2);
      if (v34 < v75)
        goto LABEL_37;
    }
    goto LABEL_19;
  }
  v35 = sub_1CF7C8B74();
  v36 = sub_1CF7C8B68();
  if ((v35 & 1) == 0)
  {
    if (v36 < 64)
    {
      v41 = sub_1CF7C8B5C();
      v31(v22, a2);
      v33 = v73;
      if (v41 < v75)
        goto LABEL_37;
      goto LABEL_19;
    }
LABEL_18:
    v31(v22, a2);
    v33 = v73;
    goto LABEL_19;
  }
  if (v36 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    sub_1CF7C91A4();
    v60 = v69;
    sub_1CF7C8FAC();
    v61 = sub_1CF7C87FC();
    v31(v60, a2);
    v62 = v66;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v66, v22, a2);
    v33 = v73;
    if ((v61 & 1) != 0)
    {
      v31(v62, a2);
    }
    else
    {
      v63 = v62;
      v68 = v75;
      v64 = sub_1CF7C8B5C();
      v31(v63, a2);
      if (v64 >= v68)
        goto LABEL_19;
    }
LABEL_37:
    v31(v27, a2);
    result = 0;
    goto LABEL_38;
  }
  sub_1CF7893E0();
  v37 = v69;
  sub_1CF7C8B44();
  v38 = sub_1CF7C87FC();
  v31(v37, a2);
  v31(v22, a2);
  v33 = v73;
  if ((v38 & 1) != 0)
    goto LABEL_37;
LABEL_19:
  v42 = sub_1CF7C8B68();
  v43 = v71;
  v29(v71, (uint64_t)v27, a2);
  if (v42 < 65)
  {
    v46 = sub_1CF7C8B68();
    v31(v43, a2);
    if (v46 != 64)
    {
      v55 = v70;
      v29(v70, (uint64_t)v27, a2);
      v45 = v55;
      goto LABEL_29;
    }
    v47 = sub_1CF7C8B74();
    v48 = v70;
    v29(v70, (uint64_t)v27, a2);
    v45 = v48;
    if ((v47 & 1) != 0)
    {
LABEL_29:
      v31(v45, a2);
      goto LABEL_30;
    }
  }
  else
  {
    v31(v43, a2);
    v44 = v70;
    v29(v70, (uint64_t)v27, a2);
    v45 = v44;
  }
  v75 = 0x7FFFFFFFFFFFFFFFLL;
  v49 = sub_1CF7C8B74();
  v50 = sub_1CF7C8B68();
  if ((v49 & 1) != 0)
  {
    if (v50 > 64)
    {
      sub_1CF7893E0();
      v51 = v69;
      sub_1CF7C8B44();
      v52 = sub_1CF7C87FC();
      v53 = v51;
      v33 = v73;
      v31(v53, a2);
      v54 = v45;
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  if (v50 <= 63)
  {
LABEL_27:
    sub_1CF7C8B5C();
    goto LABEL_29;
  }
  v74 = 0x7FFFFFFFFFFFFFFFLL;
  v58 = v69;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v45, a2);
  sub_1CF7893E0();
  v59 = v67;
  sub_1CF7C8B44();
  v52 = sub_1CF7C87FC();
  v31(v59, a2);
  v54 = v58;
  v33 = v73;
LABEL_32:
  v31(v54, a2);
  if ((v52 & 1) != 0)
    goto LABEL_37;
LABEL_30:
  v56 = sub_1CF7C8B5C();
  v31(v27, a2);
  result = xpc_int64_create(v56);
LABEL_38:
  *v33 = result;
  return result;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1)
{
  void **v1;
  void *v2;
  uint64_t v3;

  if (a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_xpc_object.type.getter();
  }
  v2 = *v1;
  v3 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v2, (const char *)(v3 + 32), 0);
  swift_release();
  return swift_unknownObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = sub_1CF7C85C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300);
  MEMORY[0x1E0C80A80](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF779038(a1, (uint64_t)v8, (uint64_t *)&unk_1ED56E300);
  v9 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    goto LABEL_4;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_1CF7C85A4();
  result = xpc_date_create_absolute();
  if (result)
  {
    v9 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_4:
    XPCDictionary.subscript.setter(v9);
    return sub_1CF778FFC(a1, (uint64_t *)&unk_1ED56E300);
  }
  __break(1u);
  return result;
}

void OS_xpc_object.type.getter()
{
  JUMPOUT(0x1D17D5ACCLL);
}

uint64_t sub_1CF77A45C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_1CF778DDC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t static Error<>.dataCorrupted.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x80000001CF7CEFA0, a1, a2);
}

unint64_t sub_1CF77A4E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEB8);
  v2 = sub_1CF7C8CDC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF779038(v6, (uint64_t)&v15, &qword_1ED56DE50);
    v7 = v15;
    v8 = v16;
    result = sub_1CF78B668(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1CF779634(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void connect_loopback_sync()
{
  uint64_t v0;
  void *v1;
  dispatch_semaphore_t v2;
  dispatch_queue_t v3;
  NSObject *v4;
  dispatch_semaphore_t v5;

  remote_control_detach_loopback();
  remote_control_attach_loopback();
  remote_control_connect_loopback();
  v0 = remote_device_copy_unique_of_type();
  if (!v0)
    connect_loopback_sync_cold_1();
  v1 = (void *)v0;
  v2 = dispatch_semaphore_create(0);
  v3 = dispatch_queue_create("loopback connect", 0);
  v5 = v2;
  v4 = v2;
  remote_device_set_connected_callback();
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);

}

void __connect_loopback_sync_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (remote_device_get_state() != 2)
    __connect_loopback_sync_block_invoke_cold_1();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t XPCFileTransfer_open(const char *a1, int a2, void *a3, int a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a3;
  v10 = a5;
  v11 = v10;
  if (v9)
  {
    if (XPCFileTransfer_open_once[0] != -1)
      dispatch_once(XPCFileTransfer_open_once, &__block_literal_global);
    objc_msgSend((id)XPCFileTransfer_open_protectionTypes, "objectForKeyedSubscript:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
      v14 = objc_msgSend(v12, "intValue");
    else
      v14 = -1;

    if (v11)
      goto LABEL_10;
  }
  else
  {
    v14 = -1;
    if (v10)
    {
LABEL_10:
      v15 = objc_msgSend(v11, "intValue");
      goto LABEL_11;
    }
  }
  v15 = 438;
LABEL_11:
  v16 = open_dprotected_np(a1, a2, v14, a4, v15);

  return v16;
}

uint64_t XPCTypeGetMachSendOnce()
{
  return MEMORY[0x1E0C81340];
}

uint64_t XPCErrorGetPeerCodeSigningRequirement()
{
  uint64_t v0;
  id v1;

  v0 = MEMORY[0x1E0C81280];
  v1 = MEMORY[0x1E0C81280];
  return v0;
}

void initializeXPCShim()
{
  XPCErrorKeyDescription = *MEMORY[0x1E0C81268];
  XPCEventKeyName = *MEMORY[0x1E0C81290];
}

uint64_t XPCaudit_token_to_auid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_auid(&v3);
}

uint64_t XPCaudit_token_to_euid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_euid(&v3);
}

uint64_t XPCaudit_token_to_egid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_egid(&v3);
}

uint64_t XPCaudit_token_to_ruid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_ruid(&v3);
}

uint64_t XPCaudit_token_to_rgid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_rgid(&v3);
}

uint64_t XPCaudit_token_to_pid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pid(&v3);
}

uint64_t XPCaudit_token_to_asid(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_asid(&v3);
}

uint64_t XPCaudit_token_to_pidversion(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pidversion(&v3);
}

uint64_t sub_1CF77AC20(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16));
}

uint64_t XPCEndpoint.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t XPCEndpoint.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t XPCPeerEndpoint.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t _s7Mercury15XPCPeerEndpointCfD_0()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SystemXPCListenerConnection.createEndpoint()()
{
  uint64_t v0;
  xpc_endpoint_t v1;
  uint64_t result;

  v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t type metadata accessor for XPCPeerEndpoint()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for XPCEndpoint()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCEndpoint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t type metadata accessor for XPCListenerEndpoint()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for XPCReplyProviding(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy8192_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_1CF77ADCC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 0x2000))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CF77ADF0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2568);
}

void type metadata accessor for URLFileProtection(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2570);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1CF77B70C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CF77B72C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for pollfd(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2578);
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2580);
}

void type metadata accessor for remote_device_state_t(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2588);
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1CF77B7B4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CF77B7D4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for termios(uint64_t a1)
{
  sub_1CF77BDB0(a1, &qword_1EFBB2590);
}

uint64_t sub_1CF77B824()
{
  uint64_t v0;
  xpc_endpoint_t v1;
  uint64_t result;

  v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

_DWORD *sub_1CF77B85C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1CF77B86C(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1CF77B878(uint64_t a1, uint64_t a2)
{
  return sub_1CF77BB40(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1CF77B884(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1CF7C8838();
  *a2 = 0;
  return result;
}

uint64_t sub_1CF77B8F8(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1CF7C8844();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1CF77B974@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1CF7C8850();
  v2 = sub_1CF7C882C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1CF77B9B4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_1CF77B9C0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CF77B9D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CF7C882C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CF77BA18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1CF7C8850();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CF77BA40()
{
  sub_1CF77BAF4(&qword_1EFBB25B0, (uint64_t)&unk_1CF7CA2D0);
  sub_1CF77BAF4(&qword_1EFBB25B8, (uint64_t)&unk_1CF7CA270);
  return sub_1CF7C8CF4();
}

uint64_t sub_1CF77BAAC()
{
  return sub_1CF77BAF4(&qword_1EFBB2598, (uint64_t)&unk_1CF7CA234);
}

uint64_t sub_1CF77BAD0()
{
  return sub_1CF77BAF4(&qword_1EFBB25A0, (uint64_t)&unk_1CF7CA208);
}

uint64_t sub_1CF77BAF4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for URLFileProtection(255);
    result = MEMORY[0x1D17D55BC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF77BB34(uint64_t a1, uint64_t a2)
{
  return sub_1CF77BB40(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1CF77BB40(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1CF7C8850();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1CF77BB7C()
{
  sub_1CF7C8850();
  sub_1CF7C88C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF77BBBC()
{
  uint64_t v0;

  sub_1CF7C8850();
  sub_1CF7C9234();
  sub_1CF7C88C8();
  v0 = sub_1CF7C9258();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CF77BC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1CF7C8850();
  v2 = v1;
  if (v0 == sub_1CF7C8850() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1CF7C8FC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1CF77BCB4()
{
  return sub_1CF77BAF4(&qword_1EFBB25A8, (uint64_t)&unk_1CF7CA2A4);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1CF77BCEC(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1CF77BD48(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
  sub_1CF77BDB0(a1, (unint64_t *)&unk_1EFBB25C0);
}

void sub_1CF77BDB0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t XPCObjectEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *boxed_opaque_existential_0Tm;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(v3 + 16);
  swift_retain();
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v11 = type metadata accessor for _XPCObjectEncoder();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  v19 = v11;
  v20 = sub_1CF78805C(&qword_1ED56E720, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
  v17 = (unint64_t)v12;
  swift_retain();
  sub_1CF7C87C0();
  if (v4)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v17);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v17);
    a3 = v12[2];
    if (a3)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      a3 = sub_1CF7C8C34();
      swift_allocError();
      v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
      v15[3] = a2;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v15);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a2);
      v17 = 0;
      v18 = 0xE000000000000000;
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      v17 = 0xD000000000000029;
      v18 = 0x80000001CF7CCFC0;
      sub_1CF7C92D0();
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 104))(v15, *MEMORY[0x1E0DEC4B0], a3);
      swift_willThrow();
    }
    swift_release();
  }
  return a3;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isEscapingClosureAtFileLocation;
  _QWORD v21[6];

  if (MEMORY[0x1D17D5ACC](a2) == XPCTypeDictionary)
  {
    result = XPCObjectEncoder.encode<A>(_:)(a1, a3, a4);
    if (!v4)
    {
      v13 = (void *)result;
      if (MEMORY[0x1D17D5ACC]() == XPCTypeDictionary)
      {
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = a2;
        v18 = swift_allocObject();
        *(_QWORD *)(v18 + 16) = sub_1CF787FCC;
        *(_QWORD *)(v18 + 24) = v17;
        v21[4] = sub_1CF788000;
        v21[5] = v18;
        v21[0] = MEMORY[0x1E0C809A8];
        v21[1] = 1107296256;
        v21[2] = sub_1CF77C368;
        v21[3] = &block_descriptor;
        v19 = _Block_copy(v21);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v13, v19);
        swift_unknownObjectRelease();
        _Block_release(v19);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        result = swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          __break(1u);
      }
      else
      {
        v14 = sub_1CF7C8C34();
        swift_allocError();
        v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
        v16[3] = swift_getObjectType();
        *v16 = a2;
        swift_unknownObjectRetain();
        sub_1CF7C8C04();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC4B0], v14);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v9 = sub_1CF7C8C34();
    swift_allocError();
    v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
    v11[3] = swift_getObjectType();
    *v11 = a2;
    swift_unknownObjectRetain();
    sub_1CF7C8C04();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *MEMORY[0x1E0DEC4B0], v9);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF77C31C(char *key, xpc_object_t value, xpc_object_t xdict)
{
  xpc_dictionary_set_value(xdict, key, value);
  return 1;
}

uint64_t sub_1CF77C344(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t sub_1CF77C368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v7, a3, a4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77C434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = XPCObjectEncoder.encode<A>(_:)(a1, a2, a3);
  if (!v4)
    *a4 = result;
  return result;
}

unint64_t sub_1CF77C460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EBF8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB26B0);
  v6 = sub_1CF7C8CDC();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CF779038(v12, (uint64_t)v5, &qword_1ED56EBF8);
    result = sub_1CF7B4958((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1CF7C8C88();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)sub_1CF779634(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF77C5FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2698);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB26A0);
  v6 = sub_1CF7C8CDC();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CF779038(v12, (uint64_t)v5, &qword_1EFBB2698);
    result = sub_1CF7B4A0C((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for RemoteDevice.Identity();
    result = sub_1CF788D08((uint64_t)v5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF77C788(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2690);
  v2 = (_QWORD *)sub_1CF7C8CDC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_1CF779644(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1CF77C8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 16) = xpc_dictionary_create(0, 0, 0);
  result = swift_unknownObjectRelease();
  if (*(_QWORD *)(v3 + 16))
  {
    v8 = type metadata accessor for XPCObjectKeyedEncodingContainer(0, a2, a3, v7);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x1D17D55BC](&unk_1CF7CA698, v8);
    return sub_1CF7C8E08();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF77C970@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = xpc_array_create(0, 0);
  result = swift_unknownObjectRelease();
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
    a1[4] = sub_1CF7885C8();
    *a1 = v1;
    a1[1] = v4;
    a1[2] = v5;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF77C9F0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF77CA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77C8A8(a1, a2, a3);
}

uint64_t sub_1CF77CA4C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF77C970(a1);
}

uint64_t sub_1CF77CA6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  a1[4] = sub_1CF788584();
  *a1 = v3;
  a1[1] = v4;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF77CABC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 8);
  sub_1CF7C92A0();
  v2 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v1, (const char *)(v2 + 32), 0);
  return swift_release();
}

uint64_t sub_1CF77CB24(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_BOOL(v3, (const char *)(v4 + 32), a1 & 1);
  return swift_release();
}

uint64_t sub_1CF77CB98()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 8);
  sub_1CF7C92A0();
  v2 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  v3 = sub_1CF7C8898();
  xpc_dictionary_set_string(v1, (const char *)(v2 + 32), (const char *)(v3 + 32));
  swift_release();
  return swift_release();
}

uint64_t sub_1CF77CC28(double a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CC9C(float a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CD14(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CD8C(__int16 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CE04(int a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CE7C(unsigned __int8 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CEF4(unsigned __int16 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CF6C(unsigned int a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 8);
  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1CF77CFE4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v4 + 8);
  sub_1CF7C92A0();
  v8 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  a4(v7, v8 + 32, a1);
  return swift_release();
}

uint64_t sub_1CF77D05C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, char *);
  char *v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  void *v33;
  int64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, char *);
  uint64_t v37;
  int v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t inited;
  uint64_t v60;
  uint64_t v61;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, char *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[14];

  v84 = a5;
  v89 = a3;
  v92 = a2;
  v88 = a1;
  v95[12] = *MEMORY[0x1E0C80C08];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1CF7C861C();
  *(_QWORD *)&v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A80](v86);
  v81 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300);
  v11 = MEMORY[0x1E0C80A80](v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *((_QWORD *)a4 - 1);
  v15 = MEMORY[0x1E0C80A80](v11);
  v82 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A80](v15);
  v83 = (char *)&v81 - v18;
  v19 = MEMORY[0x1E0C80A80](v17);
  v21 = (char *)&v81 - v20;
  MEMORY[0x1E0C80A80](v19);
  v23 = (char *)&v81 - v22;
  v24 = sub_1CF7C85C8();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A80](v24);
  v27 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(void (**)(char *, uint64_t, char *))(v14 + 16);
  v29 = a4;
  v30 = v88;
  v87 = v28;
  v28(v23, v88, v29);
  v31 = swift_dynamicCast();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  if (v31)
  {
    v32(v13, 0, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v24) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v13, v24);
      v33 = (void *)v91[1];
      swift_unknownObjectRetain();
      sub_1CF7C92A0();
      v34 = sub_1CF79635C();
      v35 = sub_1CF7C8898();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_date(v33, (const char *)(v35 + 32), v34);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      return swift_release();
    }
  }
  else
  {
    v32(v13, 1, 1, v24);
  }
  sub_1CF778FFC((uint64_t)v13, (uint64_t *)&unk_1ED56E300);
  v36 = v87;
  v87(v21, v30, v29);
  v37 = v86;
  v38 = swift_dynamicCast();
  v39 = v85;
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
  if (v38)
  {
    v40(v8, 0, 1, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v8, 1, v37) != 1)
    {
      v41 = v81;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v81, v8, v37);
      v93 = sub_1CF7C8604();
      LOWORD(v94) = v42;
      BYTE2(v94) = v43;
      BYTE3(v94) = v44;
      BYTE4(v94) = v45;
      BYTE5(v94) = v46;
      BYTE6(v94) = v47;
      HIBYTE(v94) = v48;
      sub_1CF77DBC4((const unsigned __int8 *)&v93, (uint64_t)v95, (uint64_t)v91);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v37);
    }
  }
  else
  {
    v40(v8, 1, 1, v37);
  }
  sub_1CF778FFC((uint64_t)v8, &qword_1ED56E310);
  v36(v83, v30, v29);
  v50 = swift_dynamicCast();
  if ((_DWORD)v50)
  {
    v51 = v94;
    MEMORY[0x1E0C80A80](v50);
    v52 = *(char **)(v89 + 24);
    *(&v81 - 6) = *(char **)(v89 + 16);
    *(&v81 - 5) = v29;
    v53 = v84;
    *(&v81 - 4) = v52;
    *(&v81 - 3) = v53;
    v79 = v91;
    v80 = v92;
    __asm { BR              X10 }
  }
  v36(v82, v30, v29);
  if (swift_dynamicCast())
  {
    v54 = (void *)v93;
    v55 = (void *)v91[1];
    swift_unknownObjectRetain();
    sub_1CF7C92A0();
    v56 = sub_1CF7C8898();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v55, (const char *)(v56 + 32), v54);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  else
  {
    v57 = *(_QWORD *)(*v91 + 24);
    v58 = v91[2];
    v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    v85 = xmmword_1CF7CA390;
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    v60 = v89;
    v61 = *(_QWORD *)(v89 + 16);
    *(_QWORD *)(inited + 56) = v61;
    v89 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(inited + 64) = v89;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    v83 = *(char **)(*(_QWORD *)(v61 - 8) + 16);
    ((void (*)(uint64_t *, uint64_t, uint64_t))v83)(boxed_opaque_existential_0Tm, v92, v61);
    v93 = v58;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1CF7C80A4(inited);
    v63 = v93;
    v64 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
    v65 = type metadata accessor for _XPCObjectEncoder();
    v66 = (_QWORD *)swift_allocObject();
    v66[2] = 0;
    v66[3] = v57;
    v66[4] = v63;
    v66[5] = v64;
    v95[1] = v65;
    v95[2] = sub_1CF78805C(&qword_1ED56E720, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
    v93 = (uint64_t)v66;
    swift_retain();
    v67 = v90;
    sub_1CF7C87C0();
    if (v67)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
    }
    v68 = v89;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
    v69 = (void *)v66[2];
    if (v69)
    {
      v70 = (void *)v91[1];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1CF7C92A0();
      v71 = sub_1CF7C8898();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_value(v70, (const char *)(v71 + 32), v69);
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
    }
    else
    {
      v72 = sub_1CF7C8C34();
      v90 = swift_allocError();
      v74 = v73;
      v84 = (char *)v73 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80) + 48);
      v74[3] = (uint64_t)v29;
      v75 = __swift_allocate_boxed_opaque_existential_0Tm(v74);
      v87((char *)v75, v30, v29);
      v76 = v91[2];
      v77 = swift_initStackObject();
      *(_OWORD *)(v77 + 16) = v85;
      *(_QWORD *)(v77 + 56) = v61;
      *(_QWORD *)(v77 + 64) = v68;
      v78 = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v77 + 32));
      ((void (*)(uint64_t *, uint64_t, uint64_t))v83)(v78, v92, v61);
      v93 = v76;
      swift_bridgeObjectRetain();
      sub_1CF7C80A4(v77);
      v93 = 0;
      v94 = 0xE000000000000000;
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      v93 = 0xD00000000000001FLL;
      v94 = 0x80000001CF7CD240;
      sub_1CF7C92D0();
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v74, *MEMORY[0x1E0DEC4B0], v72);
      swift_willThrow();
    }
  }
  return swift_release();
}

uint64_t sub_1CF77DBC4(const unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t result;
  uint64_t v6;

  v4 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  result = sub_1CF7C92A0();
  if (a1)
  {
    v6 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_uuid(v4, (const char *)(v6 + 32), a1);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF77DC58(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  result = sub_1CF7C92A0();
  if (a1)
  {
    v7 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_data(v5, (const char *)(v7 + 32), a1, a2 - (_QWORD)a1);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF77DCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v18;
  uint64_t v19;

  v6 = v5;
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = *(void **)(v6 + 8);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  sub_1CF7C92A0();
  v15 = sub_1CF7C8898();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v12, (const char *)(v15 + 32), v11);
  swift_unknownObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 56) = v13;
  *(_QWORD *)(inited + 64) = v14;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_0Tm, a2, v13);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  v19 = type metadata accessor for XPCObjectKeyedEncodingContainer(0, a4, a5, v18);
  MEMORY[0x1D17D55BC](&unk_1CF7CA698, v19);
  sub_1CF7C8E08();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77DEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  xpc_object_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t result;

  v4 = v3;
  v8 = xpc_array_create(0, 0);
  v9 = (void *)v4[1];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_1CF7C92A0();
  v12 = sub_1CF7C8898();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v9, (const char *)(v12 + 32), v8);
  swift_release();
  v13 = *v4;
  v14 = v4[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 56) = v10;
  *(_QWORD *)(inited + 64) = v11;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_0Tm, a1, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  a3[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a3[4] = sub_1CF7885C8();
  result = swift_unknownObjectRelease();
  *a3 = v13;
  a3[1] = v8;
  a3[2] = v14;
  return result;
}

void sub_1CF77E00C()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF77E064()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t sub_1CF77E0BC()
{
  return sub_1CF77CABC();
}

uint64_t sub_1CF77E0D0(char a1)
{
  return sub_1CF77CB24(a1);
}

uint64_t sub_1CF77E0E4()
{
  return sub_1CF77CB98();
}

uint64_t sub_1CF77E0F8(double a1)
{
  return sub_1CF77CC28(a1);
}

uint64_t sub_1CF77E10C(float a1)
{
  return sub_1CF77CC9C(a1);
}

uint64_t sub_1CF77E120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77CFE4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C86368]);
}

uint64_t sub_1CF77E13C(char a1)
{
  return sub_1CF77CD14(a1);
}

uint64_t sub_1CF77E150(__int16 a1)
{
  return sub_1CF77CD8C(a1);
}

uint64_t sub_1CF77E164(int a1)
{
  return sub_1CF77CE04(a1);
}

uint64_t sub_1CF77E178()
{
  return sub_1CF7C918C();
}

uint64_t sub_1CF77E18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77CFE4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C863A0]);
}

uint64_t sub_1CF77E1A8(unsigned __int8 a1)
{
  return sub_1CF77CE7C(a1);
}

uint64_t sub_1CF77E1BC(unsigned __int16 a1)
{
  return sub_1CF77CEF4(a1);
}

uint64_t sub_1CF77E1D0(unsigned int a1)
{
  return sub_1CF77CF6C(a1);
}

uint64_t sub_1CF77E1E4()
{
  return sub_1CF7C9198();
}

uint64_t sub_1CF77E1F8(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  return sub_1CF77D05C(a1, a2, a5, a3, a4);
}

uint64_t sub_1CF77E21C()
{
  return sub_1CF7C9180();
}

uint64_t sub_1CF77E244()
{
  return sub_1CF7C9114();
}

uint64_t sub_1CF77E258()
{
  return sub_1CF7C9108();
}

uint64_t sub_1CF77E26C()
{
  return sub_1CF7C9120();
}

uint64_t sub_1CF77E284(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E3E8(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

uint64_t sub_1CF77E2A0()
{
  return sub_1CF7C912C();
}

uint64_t sub_1CF77E2B8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E370(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

uint64_t sub_1CF77E2D4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E3AC(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

uint64_t sub_1CF77E2F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E3E8(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

uint64_t sub_1CF77E30C()
{
  return sub_1CF7C9150();
}

uint64_t sub_1CF77E324()
{
  return sub_1CF7C915C();
}

uint64_t sub_1CF77E33C()
{
  return sub_1CF7C9138();
}

uint64_t sub_1CF77E354(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E370(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t sub_1CF77E370(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1CF77E390(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E3AC(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t sub_1CF77E3AC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1CF77E3CC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF77E3E8(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t sub_1CF77E3E8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1CF77E410()
{
  return sub_1CF7C9168();
}

uint64_t sub_1CF77E428()
{
  return sub_1CF7C9174();
}

uint64_t sub_1CF77E440()
{
  return sub_1CF7C9144();
}

uint64_t sub_1CF77E468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CF77DCF8(a1, a2, a5, a3, a4);
}

uint64_t sub_1CF77E488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  size_t count;

  v1 = sub_1CF7C8C34();
  swift_allocError();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
  *(_QWORD *)(v3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB26B8);
  *(_BYTE *)v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  count = xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v5 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(v5 + 16) = 0x207865646E49;
  *(_QWORD *)(v5 + 24) = 0xE600000000000000;
  *(_QWORD *)(v5 + 32) = count;
  *(_BYTE *)(v5 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  sub_1CF7C8C04();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0DEC4B0], v1);
  return swift_willThrow();
}

uint64_t sub_1CF77E664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  void *v31;
  int64_t v32;
  xpc_object_t v33;
  void (*v35)(uint64_t *, uint64_t, uint64_t);
  uint64_t v36;
  int v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  char *v40;
  __int16 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  void *v48;
  xpc_object_t v49;
  uint64_t v50;
  uint64_t inited;
  void *v52;
  size_t count;
  uint64_t v54;
  xpc_object_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  xpc_object_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  size_t v77;
  xpc_object_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  char *v82;
  uint64_t *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  size_t v91;
  unsigned __int8 uuid[8];
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v81[1] = a3;
  v90 = a1;
  v96 = *MEMORY[0x1E0C80C08];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v4);
  v6 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1CF7C861C();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A80](v86);
  v82 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300);
  v9 = MEMORY[0x1E0C80A80](v8);
  v11 = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A80](v9);
  v83 = (_QWORD *)((char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A80](v13);
  *(_QWORD *)&v84 = (char *)v81 - v16;
  v17 = MEMORY[0x1E0C80A80](v15);
  v19 = (char *)v81 - v18;
  MEMORY[0x1E0C80A80](v17);
  v21 = (char *)v81 - v20;
  v22 = sub_1CF7C85C8();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A80](v22);
  v25 = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 16);
  v27 = a2;
  v28 = v90;
  v87 = v26;
  v26(v21, v90, v27);
  v29 = swift_dynamicCast();
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
  if (v29)
  {
    v30(v11, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v11, v22);
      v31 = (void *)v89[1];
      swift_unknownObjectRetain();
      v32 = sub_1CF79635C();
      v33 = xpc_date_create(v32);
      xpc_array_append_value(v31, v33);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    }
  }
  else
  {
    v30(v11, 1, 1, v22);
  }
  sub_1CF778FFC((uint64_t)v11, (uint64_t *)&unk_1ED56E300);
  v35 = v87;
  v87(v19, v28, v27);
  v36 = v86;
  v37 = swift_dynamicCast();
  v38 = v85;
  v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56);
  if (v37)
  {
    v39(v6, 0, 1, v36);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v6, 1, v36) != 1)
    {
      v40 = v82;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v82, v6, v36);
      *(_QWORD *)uuid = sub_1CF7C8604();
      LOWORD(v93) = v41;
      BYTE2(v93) = v42;
      BYTE3(v93) = v43;
      BYTE4(v93) = v44;
      BYTE5(v93) = v45;
      BYTE6(v93) = v46;
      HIBYTE(v93) = v47;
      v48 = (void *)v89[1];
      swift_unknownObjectRetain();
      v49 = xpc_uuid_create(uuid);
      xpc_array_append_value(v48, v49);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v36);
    }
  }
  else
  {
    v39(v6, 1, 1, v36);
  }
  sub_1CF778FFC((uint64_t)v6, &qword_1ED56E310);
  v35(v84, v28, v27);
  if (swift_dynamicCast())
    __asm { BR              X10 }
  v35(v83, v28, v27);
  if (swift_dynamicCast())
  {
    xpc_array_append_value((xpc_object_t)v89[1], *(xpc_object_t *)uuid);
    return swift_unknownObjectRelease();
  }
  else
  {
    v86 = *(_QWORD *)(*v89 + 24);
    v50 = v89[2];
    v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    v84 = xmmword_1CF7CA390;
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v52 = (void *)swift_unknownObjectRetain();
    count = xpc_array_get_count(v52);
    *(_QWORD *)uuid = 0x207865646E49;
    v93 = 0xE600000000000000;
    v91 = count;
    sub_1CF7C8E14();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    v54 = v27;
    v55 = *(xpc_object_t *)uuid;
    v56 = v93;
    *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
    v57 = sub_1CF788CC4();
    *(_QWORD *)(inited + 64) = v57;
    v58 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v58;
    *(_QWORD *)(v58 + 16) = v55;
    *(_QWORD *)(v58 + 24) = v56;
    *(_QWORD *)(v58 + 32) = count;
    *(_BYTE *)(v58 + 40) = 0;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    *(_QWORD *)uuid = v50;
    sub_1CF7C80A4(inited);
    v59 = *(xpc_object_t *)uuid;
    v60 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
    v61 = type metadata accessor for _XPCObjectEncoder();
    v62 = (_QWORD *)swift_allocObject();
    v63 = v86;
    v62[2] = 0;
    v62[3] = v63;
    v64 = v90;
    v62[4] = v59;
    v62[5] = v60;
    v65 = v54;
    v94 = v61;
    v95 = sub_1CF78805C(&qword_1ED56E720, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
    *(_QWORD *)uuid = v62;
    swift_retain();
    v66 = v88;
    sub_1CF7C87C0();
    if (v66)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    }
    else
    {
      v67 = v57;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
      v68 = (void *)v62[2];
      if (v68)
      {
        xpc_array_append_value((xpc_object_t)v89[1], v68);
      }
      else
      {
        v86 = sub_1CF7C8C34();
        v88 = swift_allocError();
        v70 = v69;
        v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80) + 48);
        v83 = v70;
        v82 = (char *)v70 + v71;
        v70[3] = v65;
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v70);
        v87(boxed_opaque_existential_0Tm, v64, v65);
        v73 = v89;
        v74 = v89[2];
        v75 = swift_initStackObject();
        *(_OWORD *)(v75 + 16) = v84;
        v90 = *v73;
        swift_bridgeObjectRetain_n();
        swift_retain();
        v76 = (void *)swift_unknownObjectRetain();
        v77 = xpc_array_get_count(v76);
        *(_QWORD *)uuid = 0x207865646E49;
        v93 = 0xE600000000000000;
        v91 = v77;
        sub_1CF7C8E14();
        sub_1CF7C88D4();
        swift_bridgeObjectRelease();
        v89 = (uint64_t *)v65;
        v78 = *(xpc_object_t *)uuid;
        v79 = v93;
        *(_QWORD *)(v75 + 56) = &type metadata for CodableIndexKey;
        *(_QWORD *)(v75 + 64) = v67;
        v80 = swift_allocObject();
        *(_QWORD *)(v75 + 32) = v80;
        *(_QWORD *)(v80 + 16) = v78;
        *(_QWORD *)(v80 + 24) = v79;
        *(_QWORD *)(v80 + 32) = v77;
        *(_BYTE *)(v80 + 40) = 0;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        *(_QWORD *)uuid = v74;
        sub_1CF7C80A4(v75);
        *(_QWORD *)uuid = 0;
        v93 = 0xE000000000000000;
        sub_1CF7C8BA4();
        swift_bridgeObjectRelease();
        *(_QWORD *)uuid = 0xD00000000000001FLL;
        v93 = 0x80000001CF7CD240;
        sub_1CF7C92D0();
        sub_1CF7C88D4();
        swift_bridgeObjectRelease();
        sub_1CF7C8C04();
        (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v86 - 8) + 104))(v83, *MEMORY[0x1E0DEC4B0]);
        swift_willThrow();
      }
      return swift_release();
    }
  }
}

uint64_t sub_1CF77F1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t count;

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = *(void **)(v3 + 8);
  xpc_array_append_value(v7, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  swift_unknownObjectRetain();
  swift_retain();
  count = xpc_array_get_count(v7);
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v9 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(v9 + 16) = 0x207865646E49;
  *(_QWORD *)(v9 + 24) = 0xE600000000000000;
  *(_QWORD *)(v9 + 32) = count;
  *(_BYTE *)(v9 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  v11 = type metadata accessor for XPCObjectKeyedEncodingContainer(0, a2, a3, v10);
  MEMORY[0x1D17D55BC](&unk_1CF7CA698, v11);
  sub_1CF7C8E08();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F374@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  xpc_object_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t result;
  size_t count;

  v3 = xpc_array_create(0, 0);
  v4 = (void *)v1[1];
  xpc_array_append_value(v4, v3);
  v5 = *v1;
  v6 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  swift_unknownObjectRetain();
  swift_retain();
  count = xpc_array_get_count(v4);
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v8 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(v8 + 16) = 0x207865646E49;
  *(_QWORD *)(v8 + 24) = 0xE600000000000000;
  *(_QWORD *)(v8 + 32) = count;
  *(_BYTE *)(v8 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a1[4] = sub_1CF7885C8();
  result = swift_unknownObjectRelease();
  *a1 = v5;
  a1[1] = v3;
  a1[2] = v6;
  return result;
}

size_t sub_1CF77F504()
{
  uint64_t v0;

  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_1CF77F50C()
{
  return sub_1CF77E488();
}

uint64_t sub_1CF77F520(char a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_BOOL_create(a1 & 1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F56C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  xpc_object_t v3;

  v1 = *(void **)(v0 + 8);
  v2 = sub_1CF7C8898();
  v3 = xpc_string_create((const char *)(v2 + 32));
  swift_release();
  xpc_array_append_value(v1, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F5C8(double a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F610(float a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77F870(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1E0C86560]);
}

uint64_t sub_1CF77F678(char a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F6C4(__int16 a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F710(int a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F75C()
{
  return sub_1CF7C8F88();
}

uint64_t sub_1CF77F770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77F870(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1E0C867A8]);
}

uint64_t sub_1CF77F78C(unsigned __int8 a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F7D8(unsigned __int16 a1)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F824(uint64_t value)
{
  uint64_t v1;
  void *v2;
  xpc_object_t v3;

  v2 = *(void **)(v1 + 8);
  v3 = xpc_uint64_create(value);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  void *v5;
  void *v6;

  v5 = *(void **)(v4 + 8);
  v6 = (void *)a4();
  xpc_array_append_value(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF77F8B8()
{
  return sub_1CF7C8F94();
}

uint64_t sub_1CF77F8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77E664(a1, a2, a3);
}

uint64_t sub_1CF77F8E0()
{
  return sub_1CF7C8EB0();
}

uint64_t sub_1CF77F908()
{
  return sub_1CF7C8ED4();
}

uint64_t sub_1CF77F930()
{
  return sub_1CF7C8EC8();
}

uint64_t sub_1CF77F958()
{
  return sub_1CF7C8EE0();
}

uint64_t sub_1CF77F980()
{
  return sub_1CF7C8EEC();
}

uint64_t sub_1CF77F9A8()
{
  return sub_1CF7C8EF8();
}

uint64_t sub_1CF77F9D0()
{
  return sub_1CF7C8F10();
}

uint64_t sub_1CF77F9F8()
{
  return sub_1CF7C8F1C();
}

uint64_t sub_1CF77FA20()
{
  return sub_1CF7C8F28();
}

uint64_t sub_1CF77FA48()
{
  return sub_1CF7C8F34();
}

uint64_t sub_1CF77FA70()
{
  return sub_1CF7C8F4C();
}

uint64_t sub_1CF77FA98()
{
  return sub_1CF7C8F04();
}

uint64_t sub_1CF77FAC0()
{
  return sub_1CF7C8F40();
}

uint64_t sub_1CF77FAE8()
{
  return sub_1CF7C8F58();
}

uint64_t sub_1CF77FB10()
{
  return sub_1CF7C8F64();
}

uint64_t sub_1CF77FB38()
{
  return sub_1CF7C8F70();
}

uint64_t sub_1CF77FB60()
{
  return sub_1CF7C8F7C();
}

uint64_t sub_1CF77FB88()
{
  return sub_1CF7C8EBC();
}

void sub_1CF77FBC0()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t sub_1CF77FC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  xpc_object_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *boxed_opaque_existential_0Tm;
  _QWORD v65[2];
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 uuid[8];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v75 = a1;
  v65[1] = a3;
  v80 = *MEMORY[0x1E0C80C08];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v5);
  v69 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CF7C861C();
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  MEMORY[0x1E0C80A80](v7);
  v66 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300);
  v10 = MEMORY[0x1E0C80A80](v9);
  v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x1E0C80A80](v10);
  v67 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A80](v14);
  v68 = (char *)v65 - v17;
  v18 = MEMORY[0x1E0C80A80](v16);
  v20 = (char *)v65 - v19;
  MEMORY[0x1E0C80A80](v18);
  v22 = (char *)v65 - v21;
  v23 = sub_1CF7C85C8();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A80](v23);
  v26 = (char *)v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    __break(1u);
    JUMPOUT(0x1CF780448);
  }
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v72(v22, v75, a2);
  v27 = swift_dynamicCast();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v29 = a2;
  if (v27)
  {
    v28(v12, 0, 1, v23);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v23);
    v31 = v73;
    if (v30 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v12, v23);
      v32 = *v31;
      v33 = sub_1CF79635C();
      v34 = xpc_date_create(v33);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
LABEL_9:
      *(_QWORD *)(v32 + 16) = v34;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v28(v12, 1, 1, v23);
    v31 = v73;
  }
  sub_1CF778FFC((uint64_t)v12, (uint64_t *)&unk_1ED56E300);
  v35 = v75;
  v36 = v72;
  v72(v20, v75, a2);
  v37 = (uint64_t)v69;
  v38 = v71;
  v39 = swift_dynamicCast();
  v40 = v70;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
  if (v39)
  {
    v41(v37, 0, 1, v38);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1, v38) != 1)
    {
      v42 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v66, v37, v38);
      v32 = *v31;
      *(_QWORD *)uuid = sub_1CF7C8604();
      LOWORD(v77) = v43;
      BYTE2(v77) = v44;
      BYTE3(v77) = v45;
      BYTE4(v77) = v46;
      BYTE5(v77) = v47;
      BYTE6(v77) = v48;
      HIBYTE(v77) = v49;
      v34 = xpc_uuid_create(uuid);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
      goto LABEL_9;
    }
  }
  else
  {
    v41(v37, 1, 1, v38);
  }
  sub_1CF778FFC(v37, &qword_1ED56E310);
  v36(v68, v35, a2);
  if (swift_dynamicCast())
    __asm { BR              X10 }
  v36(v67, v35, a2);
  v50 = swift_dynamicCast();
  v51 = v74;
  if (v50)
  {
    *(_QWORD *)(*v31 + 16) = *(_QWORD *)uuid;
  }
  else
  {
    v52 = v31[1];
    v53 = *(_QWORD *)(*v31 + 24);
    v54 = *(_QWORD *)(*v31 + 40);
    v55 = type metadata accessor for _XPCObjectEncoder();
    v56 = v29;
    v57 = (_QWORD *)swift_allocObject();
    v57[2] = 0;
    v57[3] = v53;
    v57[4] = v52;
    v57[5] = v54;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78 = v55;
    v58 = v75;
    v79 = sub_1CF78805C(&qword_1ED56E720, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
    *(_QWORD *)uuid = v57;
    swift_retain();
    sub_1CF7C87C0();
    if (v51)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    v60 = v57[2];
    if (!v60)
    {
      v61 = sub_1CF7C8C34();
      swift_allocError();
      v63 = v62;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
      v63[3] = v56;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v63);
      v72((char *)boxed_opaque_existential_0Tm, v58, v56);
      *(_QWORD *)uuid = 0;
      v77 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      *(_QWORD *)uuid = 0xD00000000000001FLL;
      v77 = 0x80000001CF7CD240;
      sub_1CF7C92D0();
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v63, *MEMORY[0x1E0DEC4B0], v61);
      swift_willThrow();
      return swift_release();
    }
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(*v31 + 16) = v60;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF78046C()
{
  return swift_bridgeObjectRetain();
}

void sub_1CF780474()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = xpc_null_create();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1CF7804B8(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_BOOL_create(result & 1);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1CF780500()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  xpc_object_t v3;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 16))
  {
    __break(1u);
  }
  else
  {
    v2 = sub_1CF7C8898();
    v3 = xpc_string_create((const char *)(v2 + 32));
    swift_release();
    *(_QWORD *)(v1 + 16) = v3;
    swift_unknownObjectRelease();
  }
}

void sub_1CF780560(double a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }
}

void sub_1CF7805A4(float a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }
}

void sub_1CF7805EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF7807E8(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1E0C86560]);
}

uint64_t sub_1CF780608(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_int64_create((char)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF780650(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_int64_create((__int16)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF780698(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_int64_create((int)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF7806E0()
{
  return sub_1CF7C9000();
}

void sub_1CF7806F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF7807E8(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1E0C867A8]);
}

uint64_t sub_1CF780710(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_uint64_create(result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF780758(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_uint64_create((unsigned __int16)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF7807A0(uint64_t value)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = xpc_uint64_create(value);
    return swift_unknownObjectRelease();
  }
  return value;
}

void sub_1CF7807E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  if (*(_QWORD *)(v5 + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = a4();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1CF78082C()
{
  return sub_1CF7C900C();
}

uint64_t sub_1CF780840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF77FC18(a1, a2, a3);
}

uint64_t XPCObjectDecoder.underlyingConnection.getter()
{
  return swift_retain();
}

uint64_t XPCObjectDecoder.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t XPCObjectDecoder.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t XPCObjectDecoder.__allocating_init(underlyingConnection:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t XPCObjectDecoder.init(underlyingConnection:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = swift_allocObject();
  objc_opt_self();
  v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_BYTE *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 24) = v4;
  }
  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 24) = a1;
  }
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = v5;
  return v2;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfc_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  objc_opt_self();
  v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_BYTE *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 24) = v4;
  }
  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 24) = a1;
  }
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = v5;
  return v1;
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for _XPCObjectDecoder();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a2;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  sub_1CF78805C((unint64_t *)&unk_1ED56E650, type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
  return sub_1CF7C8A18();
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_1CF788098);
}

uint64_t XPCObjectDecoder.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t _s7Mercury16XPCObjectEncoderCfD_0()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF780B8C(uint64_t a1, uint64_t *a2)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, *a2);
}

uint64_t sub_1CF780BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;

  if (MEMORY[0x1D17D5ACC](*(_QWORD *)(v3 + 16)) == XPCTypeDictionary)
  {
    v11 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a2, a3, v6);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v11);
    return sub_1CF7C8D90();
  }
  else
  {
    v7 = sub_1CF7C8C1C();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
    *v9 = a2;
    swift_bridgeObjectRetain();
    sub_1CF7C8C04();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC450], v7);
    return swift_willThrow();
  }
}

uint64_t sub_1CF780D0C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(v1 + 16);
  if (MEMORY[0x1D17D5ACC](v3) == XPCTypeArray)
  {
    v8 = *(_QWORD *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1CF788650();
    v9 = (_QWORD *)swift_allocObject();
    *a1 = v9;
    v9[2] = v1;
    v9[3] = v3;
    v9[4] = v8;
    v9[5] = 0;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    v4 = sub_1CF7C8C1C();
    swift_allocError();
    v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
    *v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2668);
    swift_bridgeObjectRetain();
    sub_1CF7C8C04();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC450], v4);
    return swift_willThrow();
  }
}

uint64_t sub_1CF780E50()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF780E5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF780E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF780BB0(a1, a2, a3);
}

uint64_t sub_1CF780E88@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF780D0C(a1);
}

uint64_t sub_1CF780EA8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  a1[4] = sub_1CF78860C();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF780F1C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CF780F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1CF780F78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1CF780F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_1CF7C8E14();
  sub_1CF7C88D4();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = 0x207865646E49;
  *(_QWORD *)(a2 + 8) = 0xE600000000000000;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1CF781008()
{
  sub_1CF788CC4();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF781030()
{
  sub_1CF788CC4();
  return sub_1CF7C92C4();
}

uint64_t sub_1CF781058(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD aBlock[6];
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = &v9;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = sub_1CF789544;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_1CF789688;
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x1E0C809A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF77C368;
  aBlock[3] = &block_descriptor_79;
  v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a2, v5);
  _Block_release(v5);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    aBlock[0] = v9;
    MEMORY[0x1E0C80A80](v9);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DE70);
    sub_1CF7895BC();
    v7 = sub_1CF7C894C();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t sub_1CF78121C(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  result = sub_1CF7C8814();
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = sub_1CF7B42EC(0, v8[2] + 1, 1, v8);
      *a3 = v8;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      v8 = sub_1CF7B42EC((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      *a3 = v8;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = v6;
    v12[5] = v7;
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

xpc_object_t sub_1CF7812D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  xpc_object_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[4];

  sub_1CF7C92A0();
  v15 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  v16 = xpc_dictionary_get_value(a5, (const char *)(v15 + 32));
  swift_release();
  if (v16)
  {
    if (MEMORY[0x1D17D5ACC](v16) != a2)
    {
      v27[3] = swift_getObjectType();
      v27[0] = v16;
      sub_1CF7C8C1C();
      swift_allocError();
      v18 = v17;
      v20 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a7, a9, v19);
      swift_unknownObjectRetain();
      MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v20);
      static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)(a1, (uint64_t)v27, a3, 0, v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v27[0] = a4;
    v27[1] = a5;
    v27[2] = a6;
    sub_1CF7C8C1C();
    swift_allocError();
    v22 = v21;
    v24 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a7, a9, v23);
    MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v24);
    static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a3, 0, 0, v22);
    swift_willThrow();
  }
  return v16;
}

xpc_object_t sub_1CF7814BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11, uint64_t (*a12)(void), void (*a13)(uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  xpc_object_t result;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a4;
  v52 = a5;
  v41 = a9;
  v19 = sub_1CF7C8B14();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A80](v19);
  v43 = (char *)&v36 - v21;
  v22 = *a11;
  v44 = a1;
  v23 = a3;
  v24 = a2;
  v25 = a2;
  v26 = v23;
  v27 = v45;
  v42 = a7;
  result = sub_1CF7812D8(a1, v22, v25, v23, v46, v52, a6, a7, a8);
  if (!v27)
  {
    v37 = v20;
    v38 = v19;
    v39 = a6;
    v40 = a8;
    v45 = v24;
    v29 = a12();
    v30 = swift_unknownObjectRelease();
    v49 = v29;
    a13(v30);
    v31 = v43;
    v32 = v42;
    sub_1CF7C8A24();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v38);
      v49 = v26;
      v50 = v46;
      v51 = v52;
      v47 = 0;
      v48 = 0xE000000000000000;
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      v47 = 0xD000000000000015;
      v48 = 0x80000001CF7CD490;
      sub_1CF7C92D0();
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      v35 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, v39, v40, v34);
      MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v35);
      sub_1CF7C8BF8();
      swift_bridgeObjectRelease();
      return (xpc_object_t)swift_willThrow();
    }
    else
    {
      return (xpc_object_t)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v41, v31, v32);
    }
  }
  return result;
}

BOOL sub_1CF781738(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  xpc_object_t v5;

  sub_1CF7C92A0();
  v4 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  v5 = xpc_dictionary_get_value(a3, (const char *)(v4 + 32));
  swift_release();
  if (v5)
    swift_unknownObjectRelease();
  return v5 != 0;
}

BOOL sub_1CF7817B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v13 = sub_1CF7C8C1C();
  v23 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A80](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB26B8);
  sub_1CF7812D8(v16, XPCTypeNull, a1, a2, a3, a4, a5, v16, a6);
  if (!v6)
  {
    swift_unknownObjectRelease();
    return v6 == 0;
  }
  v24 = v6;
  v17 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v6 == 0;
  }
  v18 = v23;
  if ((*(unsigned int (**)(char *, uint64_t))(v23 + 88))(v15, v13) != *MEMORY[0x1E0DEC450])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v13);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v18 + 96))(v15, v13);
  v19 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660) + 48)];
  v20 = sub_1CF7C8C10();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  return v6 == 0;
}

BOOL sub_1CF781974(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  BOOL value;
  xpc_object_t v8;

  v8 = sub_1CF7812D8(MEMORY[0x1E0DEAFA0], XPCTypeBool, a1, a2, a3, a4, a5, MEMORY[0x1E0DEAFA0], a6);
  if (!v6)
  {
    value = xpc_BOOL_get_value(v8);
    swift_unknownObjectRelease();
  }
  return value;
}

uint64_t sub_1CF7819F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  void *v9;

  v8 = sub_1CF7812D8(MEMORY[0x1E0DEA968], XPCTypeString, a1, a2, a3, a4, a5, MEMORY[0x1E0DEA968], a6);
  if (!v6)
  {
    v9 = v8;
    xpc_string_get_string_ptr(v8);
    xpc_string_get_length(v9);
    v7 = sub_1CF7C88B0();
    swift_unknownObjectRelease();
  }
  return v7;
}

xpc_object_t sub_1CF781AB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  xpc_object_t result;

  result = sub_1CF7812D8(MEMORY[0x1E0DEB070], XPCTypeDouble, a1, a2, a3, a4, a5, MEMORY[0x1E0DEB070], a6);
  if (!v6)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

void *sub_1CF781B34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *result;
  double value;
  float v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_1CF7812D8(MEMORY[0x1E0DEB070], XPCTypeDouble, a1, a2, a3, a4, a5, MEMORY[0x1E0DEB070], a6);
  if (!v6)
  {
    value = xpc_double_get_value(result);
    result = (void *)swift_unknownObjectRelease();
    v11 = value;
    if (value != v11)
    {
      sub_1CF7C8C1C();
      swift_allocError();
      v13 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a5, a6, v12);
      MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v13);
      sub_1CF7C8BF8();
      return (void *)swift_willThrow();
    }
  }
  return result;
}

xpc_object_t sub_1CF781C80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned __int8 v15;

  v13 = sub_1CF7894AC();
  result = sub_1CF7814BC(MEMORY[0x1E0DEDA70], a1, a2, a3, a4, a5, MEMORY[0x1E0DEDA70], a6, (uint64_t)&v15, v13, &XPCTypeInt64, (uint64_t (*)(void))MEMORY[0x1E0C86578], (void (*)(uint64_t))sub_1CF7893E0);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF781D40(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned __int16 v15;

  v13 = sub_1CF789468();
  result = sub_1CF7814BC(MEMORY[0x1E0DEDB58], a1, a2, a3, a4, a5, MEMORY[0x1E0DEDB58], a6, (uint64_t)&v15, v13, &XPCTypeInt64, (uint64_t (*)(void))MEMORY[0x1E0C86578], (void (*)(uint64_t))sub_1CF7893E0);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF781E00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned int v15;

  v13 = sub_1CF789424();
  result = sub_1CF7814BC(MEMORY[0x1E0DEDBC8], a1, a2, a3, a4, a5, MEMORY[0x1E0DEDBC8], a6, (uint64_t)&v15, v13, &XPCTypeInt64, (uint64_t (*)(void))MEMORY[0x1E0C86578], (void (*)(uint64_t))sub_1CF7893E0);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF781EC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  xpc_object_t result;
  uint64_t v18;

  v16 = a7();
  result = sub_1CF7814BC(a8, a1, a2, a3, a4, a5, a8, a6, (uint64_t)&v18, v16, &XPCTypeInt64, (uint64_t (*)(void))MEMORY[0x1E0C86578], (void (*)(uint64_t))sub_1CF7893E0);
  if (!v8)
    return (xpc_object_t)v18;
  return result;
}

xpc_object_t sub_1CF781F80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned __int8 v15;

  v13 = sub_1CF789314();
  result = sub_1CF7814BC(MEMORY[0x1E0DEDE70], a1, a2, a3, a4, a5, MEMORY[0x1E0DEDE70], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, (uint64_t (*)(void))MEMORY[0x1E0C867C0], (void (*)(uint64_t))sub_1CF789248);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF782040(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned __int16 v15;

  v13 = sub_1CF7892D0();
  result = sub_1CF7814BC(MEMORY[0x1E0DEE068], a1, a2, a3, a4, a5, MEMORY[0x1E0DEE068], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, (uint64_t (*)(void))MEMORY[0x1E0C867C0], (void (*)(uint64_t))sub_1CF789248);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF782100(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  xpc_object_t result;
  unsigned int v15;

  v13 = sub_1CF78928C();
  result = sub_1CF7814BC(MEMORY[0x1E0DEE0F8], a1, a2, a3, a4, a5, MEMORY[0x1E0DEE0F8], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, (uint64_t (*)(void))MEMORY[0x1E0C867C0], (void (*)(uint64_t))sub_1CF789248);
  if (!v6)
    return (xpc_object_t)v15;
  return result;
}

xpc_object_t sub_1CF7821C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  xpc_object_t result;
  uint64_t v18;

  v16 = a7();
  result = sub_1CF7814BC(a8, a1, a2, a3, a4, a5, a8, a6, (uint64_t)&v18, v16, &XPCTypeUInt64, (uint64_t (*)(void))MEMORY[0x1E0C867C0], (void (*)(uint64_t))sub_1CF789248);
  if (!v8)
    return (xpc_object_t)v18;
  return result;
}

void *sub_1CF782280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const uint8_t *bytes;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  size_t length;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  uint64_t v38;
  xpc_object_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0Tm;
  xpc_object_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v54 = a5;
  v55 = a6;
  v52[1] = a1;
  v52[2] = a9;
  v60 = *MEMORY[0x1E0C80C08];
  v14 = sub_1CF7C861C();
  MEMORY[0x1E0C80A80](v14);
  v16 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CF7C85C8();
  MEMORY[0x1E0C80A80](v17);
  if (swift_dynamicCastMetatype())
  {
    v18 = v53;
    result = sub_1CF7812D8(v17, XPCTypeDate, a2, a3, a4, v54, v55, v17, a8);
    if (v18)
      return result;
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1CF7C85B0();
    return (void *)swift_dynamicCast();
  }
  v52[0] = v16;
  v20 = a4;
  v22 = v54;
  v21 = v55;
  if (swift_dynamicCastMetatype())
  {
    v23 = v53;
    result = sub_1CF7812D8(v14, XPCTypeUUID, a2, a3, v20, v22, v21, v14, a8);
    if (v23)
      return result;
    bytes = xpc_uuid_get_bytes(result);
    result = (void *)swift_unknownObjectRelease();
    if (bytes)
    {
      sub_1CF7C85F8();
      return (void *)swift_dynamicCast();
    }
    __break(1u);
    goto LABEL_25;
  }
  if (swift_dynamicCastMetatype())
  {
    v25 = v53;
    result = sub_1CF7812D8(MEMORY[0x1E0CB0338], XPCTypeData, a2, a3, v20, v22, v21, MEMORY[0x1E0CB0338], a8);
    if (v25)
      return result;
    v26 = result;
    if ((uint64_t)xpc_data_get_length(result) < 1)
    {
      swift_unknownObjectRelease();
      v56 = xmmword_1CF7CA3A0;
      return (void *)swift_dynamicCast();
    }
    result = (void *)xpc_data_get_bytes_ptr(v26);
    if (result)
    {
      v27 = result;
      length = xpc_data_get_length(v26);
      v29 = sub_1CF7A0F90(v27, length);
      v31 = v30;
      swift_unknownObjectRelease();
      *(_QWORD *)&v56 = v29;
      *((_QWORD *)&v56 + 1) = v31;
      return (void *)swift_dynamicCast();
    }
LABEL_25:
    __break(1u);
    return result;
  }
  v52[0] = a7;
  v32 = swift_dynamicCastMetatype();
  v33 = a2;
  v34 = v21;
  sub_1CF7C92A0();
  v35 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  v36 = xpc_dictionary_get_value(v20, (const char *)(v35 + 32));
  swift_release();
  if (v32)
  {
    if (v36)
    {
      *(_QWORD *)&v56 = v36;
      return (void *)swift_dynamicCast();
    }
    *(_QWORD *)&v56 = a3;
    *((_QWORD *)&v56 + 1) = v20;
    v57 = v22;
  }
  else
  {
    v37 = v36;
    v38 = a3;
    if (v37)
    {
      v39 = v37;
      v40 = *(_QWORD *)(v38 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
      *(_QWORD *)(inited + 56) = v34;
      *(_QWORD *)(inited + 64) = a8;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(boxed_opaque_existential_0Tm, v33, v34);
      *(_QWORD *)&v56 = v22;
      swift_retain();
      v43 = v39;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C80A4(inited);
      v44 = v56;
      v45 = *(_QWORD *)(v38 + 40);
      v46 = type metadata accessor for _XPCObjectDecoder();
      v47 = (_QWORD *)swift_allocObject();
      v47[2] = v43;
      v47[3] = v40;
      v47[4] = v44;
      v47[5] = v45;
      v58 = v46;
      v59 = sub_1CF78805C((unint64_t *)&unk_1ED56E650, type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
      *(_QWORD *)&v56 = v47;
      swift_bridgeObjectRetain();
      sub_1CF7C8A18();
      return (void *)swift_unknownObjectRelease();
    }
    *(_QWORD *)&v56 = a3;
    *((_QWORD *)&v56 + 1) = v20;
    v57 = v22;
  }
  sub_1CF7C8C1C();
  swift_allocError();
  v49 = v48;
  v51 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, v34, a8, v50);
  MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v51);
  static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(v33, 0, 0, v49);
  return (void *)swift_willThrow();
}

xpc_object_t sub_1CF7827CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  xpc_object_t result;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v17;
  uint64_t v18;

  result = sub_1CF7812D8(a7, XPCTypeDictionary, a2, a3, a4, a5, a6, a7, a8);
  if (!v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(inited + 56) = a6;
    *(_QWORD *)(inited + 64) = a8;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(boxed_opaque_existential_0Tm, a2, a6);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1CF7C80A4(inited);
    v18 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a7, a9, v17);
    MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v18);
    sub_1CF7C8D90();
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CF782958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v20;
  _QWORD *v21;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2668);
  result = (uint64_t)sub_1CF7812D8(v15, XPCTypeArray, a1, a2, a3, a4, a5, v15, a6);
  if (!v7)
  {
    v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(inited + 56) = a5;
    *(_QWORD *)(inited + 64) = a6;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a5);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1CF7C80A4(inited);
    v20 = a4;
    a7[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a7[4] = sub_1CF788650();
    v21 = (_QWORD *)swift_allocObject();
    *a7 = v21;
    result = swift_unknownObjectRelease();
    v21[2] = a2;
    v21[3] = v17;
    v21[4] = v20;
    v21[5] = 0;
  }
  return result;
}

uint64_t sub_1CF782AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v0 = type metadata accessor for _XPCObjectDecoder();
  v1 = sub_1CF7C8C1C();
  swift_allocError();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
  *v3 = v0;
  swift_bridgeObjectRetain();
  sub_1CF7C8C04();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0DEC460], v1);
  return swift_willThrow();
}

uint64_t sub_1CF782BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  sub_1CF7C8C1C();
  swift_allocError();
  v10 = v9;
  v12 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a5, a6, v11);
  MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v12);
  static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a1, 0xD000000000000016, 0x80000001CF7CD450, v10);
  return swift_willThrow();
}

uint64_t sub_1CF782C70()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF782C78()
{
  uint64_t v0;

  return sub_1CF781058(*(_QWORD *)v0, *(void **)(v0 + 8));
}

BOOL sub_1CF782C8C(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF781738(a1, *(_QWORD *)v1, *(void **)(v1 + 8));
}

uint64_t sub_1CF782CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782CE0(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF7817B4) & 1;
}

uint64_t sub_1CF782CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782CE0(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF781974) & 1;
}

uint64_t sub_1CF782CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t sub_1CF782D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF7819F8(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

xpc_object_t sub_1CF782D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF781AB0(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void *sub_1CF782D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF781B34(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1CF782D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782F0C(a1, a2, a3, (uint64_t)sub_1CF7894F0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_1CF781EC0);
}

uint64_t sub_1CF782DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF781C80);
}

uint64_t sub_1CF782DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF781D40);
}

uint64_t sub_1CF782DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF781E00);
}

uint64_t sub_1CF782DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782F0C(a1, a2, a3, (uint64_t)sub_1CF78939C, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_1CF781EC0);
}

uint64_t sub_1CF782E24()
{
  return sub_1CF7C90CC();
}

uint64_t sub_1CF782E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782F0C(a1, a2, a3, (uint64_t)sub_1CF789358, MEMORY[0x1E0DEBB98], (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_1CF7821C0);
}

uint64_t sub_1CF782E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF781F80);
}

uint64_t sub_1CF782E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1CF782EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF782040);
}

uint64_t sub_1CF782EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782E80(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF782100);
}

uint64_t sub_1CF782EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF782F0C(a1, a2, a3, (uint64_t)sub_1CF789204, MEMORY[0x1E0DEE190], (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_1CF7821C0);
}

uint64_t sub_1CF782F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  _QWORD *v6;

  return a6(a1, *v6, v6[1], v6[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5);
}

uint64_t sub_1CF782F3C()
{
  return sub_1CF7C90D8();
}

uint64_t sub_1CF782F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CF783218(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_1CF782280);
}

uint64_t sub_1CF782F6C()
{
  return sub_1CF7C9078();
}

uint64_t sub_1CF782F80()
{
  return sub_1CF7C906C();
}

uint64_t sub_1CF782F94()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C9084();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF782FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF783144(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

uint64_t sub_1CF782FD0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C9090();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF782FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7830BC(a1, a2, a3, MEMORY[0x1E0DED808]);
}

uint64_t sub_1CF78300C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF783100(a1, a2, a3, MEMORY[0x1E0DED810]);
}

uint64_t sub_1CF783028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF783144(a1, a2, a3, MEMORY[0x1E0DED818]);
}

uint64_t sub_1CF783044()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C90B4();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF783064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7831B0(a1, a2, a3, MEMORY[0x1E0DED830]);
}

uint64_t sub_1CF783080()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C909C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF7830A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7830BC(a1, a2, a3, MEMORY[0x1E0DED828]);
}

uint64_t sub_1CF7830BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1CF7830E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF783100(a1, a2, a3, MEMORY[0x1E0DED838]);
}

uint64_t sub_1CF783100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1CF783128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF783144(a1, a2, a3, MEMORY[0x1E0DED840]);
}

uint64_t sub_1CF783144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1CF783174()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C90C0();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF783194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7831B0(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t sub_1CF7831B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1CF7831D4()
{
  return sub_1CF7C90A8();
}

uint64_t sub_1CF7831FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1CF783218(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_1CF7827CC);
}

uint64_t sub_1CF783218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))
{
  _QWORD *v7;

  return a7(a1, a2, *v7, v7[1], v7[2], *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1CF783254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7832B0(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF782958);
}

uint64_t sub_1CF783270()
{
  return sub_1CF782AE0();
}

uint64_t sub_1CF783294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7832B0(a1, a2, a3, sub_1CF782BAC);
}

uint64_t sub_1CF7832B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

xpc_object_t sub_1CF7832D8(uint64_t a1, uint64_t a2)
{
  void *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    v6 = *(xpc_object_t *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEAFA0], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      v7 = *(xpc_object_t *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v9 = (_QWORD *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1CF7C8C1C();
      swift_allocError();
      v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEAFA0], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1CF7834EC(uint64_t a1, uint64_t a2)
{
  void *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    v6 = *(xpc_object_t *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEA968], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      v7 = *(xpc_object_t *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v9 = (_QWORD *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1CF7C8C1C();
      swift_allocError();
      v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEA968], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1CF783700(uint64_t a1, uint64_t a2)
{
  void *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    v6 = *(xpc_object_t *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEB070], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      v7 = *(xpc_object_t *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v9 = (_QWORD *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1CF7C8C1C();
      swift_allocError();
      v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEB070], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1CF783914(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  void *v6;
  int64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[4];
  _QWORD v20[3];
  ValueMetadata *v21;
  unint64_t v22;

  v5 = a3(0);
  v6 = *(void **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    v8 = *(xpc_object_t *)a2;
    v14 = *(_QWORD *)(a2 + 16);
    v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v22 = sub_1CF788650();
    v15 = (_QWORD *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_1CF7C8C1C();
    swift_allocError();
    v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v5, v20, 0x80000001CF7CD470, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }
  else
  {
    v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v7 + 1;
    }
    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      v9 = *(xpc_object_t *)a2;
      v10 = *(_QWORD *)(a2 + 16);
      v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v22 = sub_1CF788650();
      v11 = (_QWORD *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_1CF7C8C1C();
      swift_allocError();
      v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v8;
}

xpc_object_t sub_1CF783B34(uint64_t a1, uint64_t a2)
{
  void *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    v6 = *(xpc_object_t *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0CB0338], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      v7 = *(xpc_object_t *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v9 = (_QWORD *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1CF7C8C1C();
      swift_allocError();
      v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0CB0338], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1CF783D48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  int64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[4];
  _QWORD v20[3];
  ValueMetadata *v21;
  unint64_t v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v6 = *(void **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    v8 = *(xpc_object_t *)a2;
    v14 = *(_QWORD *)(a2 + 16);
    v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v22 = sub_1CF788650();
    v15 = (_QWORD *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_1CF7C8C1C();
    swift_allocError();
    v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v5, v20, 0x80000001CF7CD470, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }
  else
  {
    v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1D17D5ACC]() == a1)
    {
      *(_QWORD *)(a2 + 24) = v7 + 1;
    }
    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      v9 = *(xpc_object_t *)a2;
      v10 = *(_QWORD *)(a2 + 16);
      v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v22 = sub_1CF788650();
      v11 = (_QWORD *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_1CF7C8C1C();
      swift_allocError();
      v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v8;
}

uint64_t sub_1CF783F68(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, void *, _QWORD, int64_t, xpc_object_t))
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v9;
  int64_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[4];
  _QWORD v25[3];
  ValueMetadata *v26;
  unint64_t v27;
  uint64_t v28;

  v5 = v3;
  v9 = (void *)v3[1];
  v10 = v5[3];
  if (v10 >= (uint64_t)xpc_array_get_count(v9))
  {
    v18 = *v5;
    v19 = a1;
    v20 = v5[2];
    v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v27 = sub_1CF788650();
    v21 = (_QWORD *)swift_allocObject();
    v25[0] = v21;
    v21[2] = v18;
    v21[3] = v9;
    v21[4] = v20;
    v21[5] = v10;
    sub_1CF7C8C1C();
    swift_allocError();
    v23 = v22;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v19, v25, 0x80000001CF7CD470, v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    return swift_willThrow();
  }
  else
  {
    v28 = a1;
    v11 = xpc_array_get_value(v9, v10);
    if (MEMORY[0x1D17D5ACC]() == a2)
    {
      a3(*v5, v9, v5[2], v10, v11);
      result = swift_unknownObjectRelease();
      if (!v4)
        v5[3] = v10 + 1;
    }
    else
    {
      v24[3] = swift_getObjectType();
      v24[0] = v11;
      v12 = *v5;
      v13 = v5[2];
      v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v27 = sub_1CF788650();
      v14 = (_QWORD *)swift_allocObject();
      v25[0] = v14;
      v14[2] = v12;
      v14[3] = v9;
      v14[4] = v13;
      v14[5] = v10;
      sub_1CF7C8C1C();
      swift_allocError();
      v16 = v15;
      swift_unknownObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v28, (uint64_t)v24, v25, 0, v16);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1CF7841CC()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  int64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int64_t value;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v1 = XPCTypeInt64;
  v2 = (void *)v0[1];
  v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEB418], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D17D5ACC]() == v1)
    {
      value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      v5 = *v0;
      v6 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v7 = (_QWORD *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1CF7C8C1C();
      swift_allocError();
      v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEB418], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

void *sub_1CF7843FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEDA70], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF784D04(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEDA70], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1CF784644()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEDB58], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF784E18(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEDB58], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1CF78488C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEDBC8], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF784F2C(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEDBC8], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1CF784AD4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  int64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int64_t value;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v1 = XPCTypeInt64;
  v2 = (void *)v0[1];
  v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEDC60], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D17D5ACC]() == v1)
    {
      value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      v5 = *v0;
      v6 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v7 = (_QWORD *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1CF7C8C1C();
      swift_allocError();
      v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEDC60], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

int64_t sub_1CF784D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_int64_get_value(xint);
  if (result != (char)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

int64_t sub_1CF784E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_int64_get_value(xint);
  if (result != (__int16)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

int64_t sub_1CF784F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_int64_get_value(xint);
  if (result != (int)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF785040()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  int64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t value;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v1 = XPCTypeUInt64;
  v2 = (void *)v0[1];
  v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEBB98], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D17D5ACC]() == v1)
    {
      value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      v5 = *v0;
      v6 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v7 = (_QWORD *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1CF7C8C1C();
      swift_allocError();
      v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEBB98], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

void *sub_1CF785270()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeUInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEDE70], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF785B78(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEDE70], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1CF7854B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeUInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEE068], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF785C8C(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEE068], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1CF785700()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = XPCTypeUInt64;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEE0F8], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v3 = (void *)sub_1CF785DA0(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1)
        v0[3] = v4 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEE0F8], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1CF785948()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  int64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t value;
  _QWORD v17[4];
  _QWORD v18[3];
  ValueMetadata *v19;
  unint64_t v20;

  v1 = XPCTypeUInt64;
  v2 = (void *)v0[1];
  v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    v11 = *v0;
    v12 = v0[2];
    v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v20 = sub_1CF788650();
    v13 = (_QWORD *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1CF7C8C1C();
    swift_allocError();
    v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEE190], v18, 0x80000001CF7CD470, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D17D5ACC]() == v1)
    {
      value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      v5 = *v0;
      v6 = v0[2];
      v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v20 = sub_1CF788650();
      v7 = (_QWORD *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1CF7C8C1C();
      swift_allocError();
      v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEE190], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1CF785B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_uint64_get_value(xuint);
  if (result > 0xFF)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF785C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_uint64_get_value(xuint);
  if (result >> 16)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF785DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  result = xpc_uint64_get_value(xuint);
  if (HIDWORD(result))
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1CF788650();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C8C1C();
    swift_allocError();
    sub_1CF7C8BEC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF785EB4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v2 = sub_1CF7C8C1C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF783D48(XPCTypeNull, v0, &qword_1EFBB26B8);
  if (!v1)
  {
    swift_unknownObjectRelease();
    return v1 == 0;
  }
  v13 = v1;
  v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  if (!swift_dynamicCast())
  {
LABEL_8:

    return v1 == 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) != *MEMORY[0x1E0DEC450])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_8;
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 96))(v5, v2);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v10 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660) + 48)];
    *(_QWORD *)(v0 + 24) = v9;
    v11 = sub_1CF7C8C10();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);

    return v1 == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF786030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  xpc_object_t v3;
  void *v4;

  v3 = sub_1CF7834EC(XPCTypeString, v0);
  if (!v1)
  {
    v4 = v3;
    xpc_string_get_string_ptr(v3);
    xpc_string_get_length(v4);
    v2 = sub_1CF7C88B0();
    swift_unknownObjectRelease();
  }
  return v2;
}

void *sub_1CF7860BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  uint64_t v14;
  const uint8_t *bytes;
  void *v16;
  _BYTE *v17;
  size_t length;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  id v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int64_t v42;
  xpc_object_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  ValueMetadata *v55;
  unint64_t v56;
  uint64_t v57;

  v49 = a3;
  v50 = a1;
  v51 = a4;
  v57 = *MEMORY[0x1E0C80C08];
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CF7C861C();
  MEMORY[0x1E0C80A80](v10);
  v11 = sub_1CF7C85C8();
  MEMORY[0x1E0C80A80](v11);
  if (swift_dynamicCastMetatype())
  {
    result = sub_1CF783914(XPCTypeDate, v4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870]);
    if (v5)
      return result;
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1CF7C85B0();
    return (void *)swift_dynamicCast();
  }
  v47 = v7;
  v48 = v9;
  v13 = v4;
  v14 = v50;
  if (swift_dynamicCastMetatype())
  {
    result = sub_1CF783914(XPCTypeUUID, v4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
    if (v5)
      return result;
    bytes = xpc_uuid_get_bytes(result);
    result = (void *)swift_unknownObjectRelease();
    if (bytes)
    {
      sub_1CF7C85F8();
      return (void *)swift_dynamicCast();
    }
    __break(1u);
    goto LABEL_23;
  }
  if (swift_dynamicCastMetatype())
  {
    result = sub_1CF783B34(XPCTypeData, v4);
    if (v5)
      return result;
    v16 = result;
    result = (void *)xpc_data_get_bytes_ptr(result);
    if (result)
    {
      v17 = result;
      length = xpc_data_get_length(v16);
      v19 = sub_1CF7A0F90(v17, length);
      v21 = v20;
      swift_unknownObjectRelease();
      v53 = v19;
      v54 = v21;
      return (void *)swift_dynamicCast();
    }
LABEL_23:
    __break(1u);
    return result;
  }
  v22 = swift_dynamicCastMetatype();
  v23 = *(void **)(v4 + 8);
  v24 = *(_QWORD *)(v13 + 24);
  if (v22)
  {
    if (v24 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v13 + 8)))
    {
      v36 = *(_QWORD *)v13;
      v37 = *(_QWORD *)(v13 + 16);
      v55 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v56 = sub_1CF788650();
      v38 = (_QWORD *)swift_allocObject();
      v53 = (uint64_t)v38;
      v38[2] = v36;
      v38[3] = v23;
      v38[4] = v37;
      v38[5] = v24;
      sub_1CF7C8C1C();
      swift_allocError();
      v40 = v39;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v14, &v53, 0x80000001CF7CD470, v40);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
      return (void *)swift_willThrow();
    }
    v25 = xpc_array_get_value(v23, v24);
    *(_QWORD *)(v13 + 24) = v24 + 1;
    v53 = (uint64_t)v25;
    return (void *)swift_dynamicCast();
  }
  v43 = xpc_array_get_value(*(xpc_object_t *)(v13 + 8), *(_QWORD *)(v13 + 24));
  v46 = *(_QWORD *)v13;
  v45 = *(_QWORD *)(v46 + 24);
  v44 = *(_QWORD *)(v13 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  v53 = 0x207865646E49;
  v54 = 0xE600000000000000;
  v52 = v24;
  swift_retain();
  swift_unknownObjectRetain();
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  v27 = v53;
  v28 = v54;
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v29 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v29;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 24) = v28;
  v42 = v24;
  *(_QWORD *)(v29 + 32) = v24;
  *(_BYTE *)(v29 + 40) = 0;
  v53 = v44;
  swift_bridgeObjectRetain();
  sub_1CF7C80A4(inited);
  v30 = v53;
  v31 = *(_QWORD *)(v46 + 40);
  v32 = type metadata accessor for _XPCObjectDecoder();
  v33 = (_QWORD *)swift_allocObject();
  v34 = v45;
  v33[2] = v43;
  v33[3] = v34;
  v33[4] = v30;
  v33[5] = v31;
  v55 = (ValueMetadata *)v32;
  v56 = sub_1CF78805C((unint64_t *)&unk_1ED56E650, type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
  v53 = (uint64_t)v33;
  swift_bridgeObjectRetain();
  swift_retain();
  v35 = v48;
  sub_1CF7C8A18();
  swift_release();
  result = (void *)swift_unknownObjectRelease();
  if (!v5)
  {
    if (__OFADD__(v42, 1))
      __break(1u);
    *(_QWORD *)(v13 + 24) = v42 + 1;
    return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v51, v35, a2);
  }
  return result;
}

uint64_t sub_1CF786694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = XPCTypeDictionary;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56D470);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = v8;
  sub_1CF783F68(a2, v7, (void (*)(_QWORD, void *, _QWORD, int64_t, xpc_object_t))sub_1CF789168);
  result = swift_release();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    v12 = *(_QWORD *)(v3 + 24);
    swift_retain();
    sub_1CF7C8E14();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
    *(_QWORD *)(inited + 64) = sub_1CF788CC4();
    v13 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v13;
    *(_QWORD *)(v13 + 16) = 0x207865646E49;
    *(_QWORD *)(v13 + 24) = 0xE600000000000000;
    *(_QWORD *)(v13 + 32) = v12;
    *(_BYTE *)(v13 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1CF7C80A4(inited);
    v15 = type metadata accessor for XPCObjectKeyedDecodingContainer(0, a2, a3, v14);
    MEMORY[0x1D17D55BC](&unk_1CF7CAB04, v15);
    return sub_1CF7C8D90();
  }
  return result;
}

_QWORD *sub_1CF7868C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;

  result = sub_1CF783D48(XPCTypeArray, (uint64_t)v1, &qword_1EFBB2668);
  if (!v2)
  {
    v5 = result;
    v6 = *v1;
    v7 = v1[2];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    v9 = v1[3];
    swift_retain();
    sub_1CF7C8E14();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
    *(_QWORD *)(inited + 64) = sub_1CF788CC4();
    v10 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v10;
    *(_QWORD *)(v10 + 16) = 0x207865646E49;
    *(_QWORD *)(v10 + 24) = 0xE600000000000000;
    *(_QWORD *)(v10 + 32) = v9;
    *(_BYTE *)(v10 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1CF7C80A4(inited);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1CF788650();
    result = (_QWORD *)swift_allocObject();
    *a1 = result;
    result[2] = v6;
    result[3] = v5;
    result[4] = v7;
    result[5] = 0;
  }
  return result;
}

size_t sub_1CF786A6C()
{
  uint64_t v0;

  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

BOOL sub_1CF786A88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  return v1 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_1CF786AB4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1CF786ABC()
{
  return sub_1CF785EB4() & 1;
}

BOOL sub_1CF786AD4()
{
  uint64_t v0;
  uint64_t v1;
  BOOL value;
  xpc_object_t v3;

  v3 = sub_1CF7832D8(XPCTypeBool, v0);
  if (!v1)
  {
    value = xpc_BOOL_get_value(v3);
    swift_unknownObjectRelease();
  }
  return value;
}

uint64_t sub_1CF786B2C()
{
  return sub_1CF786030();
}

xpc_object_t sub_1CF786B40()
{
  uint64_t v0;
  uint64_t v1;
  xpc_object_t result;

  result = sub_1CF783700(XPCTypeDouble, v0);
  if (!v1)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

float sub_1CF786B98()
{
  return sub_1CF788870();
}

uint64_t sub_1CF786BAC()
{
  return sub_1CF7841CC();
}

void *sub_1CF786BC0()
{
  return sub_1CF7843FC();
}

void *sub_1CF786BD4()
{
  return sub_1CF784644();
}

void *sub_1CF786BE8()
{
  return sub_1CF78488C();
}

uint64_t sub_1CF786BFC()
{
  return sub_1CF784AD4();
}

uint64_t sub_1CF786C10()
{
  return sub_1CF7C8E98();
}

uint64_t sub_1CF786C24()
{
  return sub_1CF785040();
}

void *sub_1CF786C38()
{
  return sub_1CF785270();
}

void *sub_1CF786C4C()
{
  return sub_1CF7854B8();
}

void *sub_1CF786C60()
{
  return sub_1CF785700();
}

uint64_t sub_1CF786C74()
{
  return sub_1CF785948();
}

uint64_t sub_1CF786C88()
{
  return sub_1CF7C8EA4();
}

void *sub_1CF786C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1CF7860BC(a1, a2, a3, a4);
}

uint64_t sub_1CF786CB0()
{
  return sub_1CF7C8E44();
}

uint64_t sub_1CF786CC4()
{
  return sub_1CF7C8E38();
}

uint64_t sub_1CF786CD8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C8E50();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF786CF8(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E88(a1, a2, MEMORY[0x1E0DED2E0]);
}

uint64_t sub_1CF786D14()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C8E5C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF786D34(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E00(a1, a2, MEMORY[0x1E0DED300]);
}

uint64_t sub_1CF786D50(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E44(a1, a2, MEMORY[0x1E0DED308]);
}

uint64_t sub_1CF786D6C(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E88(a1, a2, MEMORY[0x1E0DED310]);
}

uint64_t sub_1CF786D88()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C8E80();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF786DA8(uint64_t a1, uint64_t a2)
{
  return sub_1CF786EF4(a1, a2, MEMORY[0x1E0DED328]);
}

uint64_t sub_1CF786DC4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C8E68();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF786DE4(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E00(a1, a2, MEMORY[0x1E0DED320]);
}

uint64_t sub_1CF786E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1CF786E28(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E44(a1, a2, MEMORY[0x1E0DED330]);
}

uint64_t sub_1CF786E44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1CF786E6C(uint64_t a1, uint64_t a2)
{
  return sub_1CF786E88(a1, a2, MEMORY[0x1E0DED338]);
}

uint64_t sub_1CF786E88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1CF786EB8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1CF7C8E8C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1CF786ED8(uint64_t a1, uint64_t a2)
{
  return sub_1CF786EF4(a1, a2, MEMORY[0x1E0DED348]);
}

uint64_t sub_1CF786EF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t sub_1CF786F18()
{
  return sub_1CF7C8E74();
}

uint64_t sub_1CF786F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF786694(a1, a2, a3);
}

_QWORD *sub_1CF786F54@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF7868C8(a1);
}

uint64_t sub_1CF786F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v0 = type metadata accessor for _XPCObjectDecoder();
  v1 = sub_1CF7C8C1C();
  swift_allocError();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
  *v3 = v0;
  swift_bridgeObjectRetain();
  sub_1CF7C8C04();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0DEC460], v1);
  return swift_willThrow();
}

void *sub_1CF787034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *result;
  _QWORD v8[5];

  result = (void *)sub_1CF78C5C4(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(char)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1CF787140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *result;
  _QWORD v8[5];

  result = (void *)sub_1CF78C6B8(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(__int16)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1CF78724C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *result;
  _QWORD v8[5];

  result = (void *)sub_1CF78C7AC(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(int)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1CF787358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *result;
  _QWORD v8[5];

  result = (void *)sub_1CF78CA88(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    result = (void *)xpc_uint64_get_value(result);
    if ((unint64_t)result > 0xFF)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_1CF787464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t result;
  _QWORD v8[5];

  result = sub_1CF78CB7C(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    result = xpc_uint64_get_value((xpc_object_t)result);
    if (result >> 16)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_1CF787570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t result;
  _QWORD v8[5];

  result = sub_1CF78CC70(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    result = xpc_uint64_get_value((xpc_object_t)result);
    if (HIDWORD(result))
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1CF78860C();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1CF78767C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = sub_1CF78C1F4(XPCTypeString, a1, a2);
  if (!v2)
  {
    v5 = (void *)v4;
    v6 = (void *)swift_unknownObjectRetain();
    xpc_string_get_string_ptr(v6);
    xpc_string_get_length(v5);
    v3 = sub_1CF7C88B0();
    swift_unknownObjectRelease();
  }
  return v3;
}

void *sub_1CF787714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *result;
  void *v11;
  void *v12;
  _BYTE *v13;
  size_t length;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = sub_1CF7C861C();
  MEMORY[0x1E0C80A80](v8);
  v9 = sub_1CF7C85C8();
  MEMORY[0x1E0C80A80](v9);
  if (swift_dynamicCastMetatype())
  {
    result = (void *)sub_1CF78BEF4(XPCTypeDate, a2, a3, a4);
    if (v4)
      return result;
    xpc_date_get_value(result);
    sub_1CF7C85B0();
    return (void *)swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    result = (void *)sub_1CF78BED8(XPCTypeUUID, a2, a3, a4);
    if (v4)
      return result;
    result = (void *)xpc_uuid_get_bytes(result);
    if (result)
    {
      sub_1CF7C85F8();
      return (void *)swift_dynamicCast();
    }
    __break(1u);
    goto LABEL_18;
  }
  if (swift_dynamicCastMetatype())
  {
    result = (void *)sub_1CF78C00C(XPCTypeData, a2, a3);
    if (v4)
      return result;
    v11 = result;
    v12 = (void *)swift_unknownObjectRetain();
    result = (void *)xpc_data_get_bytes_ptr(v12);
    if (result)
    {
      v13 = result;
      length = xpc_data_get_length(v11);
      sub_1CF7A0F90(v13, length);
      swift_unknownObjectRelease();
      return (void *)swift_dynamicCast();
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    swift_unknownObjectRetain();
    return (void *)swift_dynamicCast();
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 24);
    v16 = *(_QWORD *)(a2 + 40);
    type metadata accessor for _XPCObjectDecoder();
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = a3;
    v17[3] = v15;
    v17[4] = a4;
    v17[5] = v16;
    sub_1CF78805C((unint64_t *)&unk_1ED56E650, type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)sub_1CF7C8A18();
  }
}

BOOL sub_1CF787A4C()
{
  uint64_t v0;

  return MEMORY[0x1D17D5ACC](*(_QWORD *)(v0 + 8)) == XPCTypeNull;
}

uint64_t sub_1CF787A78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1CF78C100(XPCTypeBool, *v0, v0[1]);
  if (!v1)
    LOBYTE(v2) = xpc_BOOL_get_value((xpc_object_t)v2);
  return v2 & 1;
}

uint64_t sub_1CF787AC4()
{
  uint64_t *v0;

  return sub_1CF78767C(*v0, v0[1]);
}

double sub_1CF787AE0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  double result;

  v2 = (void *)sub_1CF78C2E8(XPCTypeDouble, *v0, v0[1]);
  if (!v1)
    return xpc_double_get_value(v2);
  return result;
}

void sub_1CF787B20()
{
  uint64_t *v0;

  sub_1CF788B60(*v0, v0[1], v0[2]);
}

uint64_t sub_1CF787B3C(uint64_t a1, uint64_t a2)
{
  return sub_1CF787CC8(a1, a2, &XPCTypeInt64, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF78C4D0, MEMORY[0x1E0C86578]);
}

uint64_t sub_1CF787B68(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF787034);
}

uint64_t sub_1CF787B84(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF787140);
}

uint64_t sub_1CF787BA0(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF78724C);
}

uint64_t sub_1CF787BBC(uint64_t a1, uint64_t a2)
{
  return sub_1CF787CC8(a1, a2, &XPCTypeInt64, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF78C8A0, MEMORY[0x1E0C86578]);
}

uint64_t sub_1CF787BE8()
{
  return sub_1CF7C8FE8();
}

uint64_t sub_1CF787BFC(uint64_t a1, uint64_t a2)
{
  return sub_1CF787CC8(a1, a2, &XPCTypeUInt64, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF78C994, MEMORY[0x1E0C867C0]);
}

uint64_t sub_1CF787C28(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF787358);
}

uint64_t sub_1CF787C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2]);
}

uint64_t sub_1CF787C64(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF787464);
}

uint64_t sub_1CF787C80(uint64_t a1, uint64_t a2)
{
  return sub_1CF787C44(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CF787570);
}

uint64_t sub_1CF787C9C(uint64_t a1, uint64_t a2)
{
  return sub_1CF787CC8(a1, a2, &XPCTypeUInt64, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF78CD64, MEMORY[0x1E0C867C0]);
}

uint64_t sub_1CF787CC8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  result = a4(*a3, *v5, v5[1], v5[2]);
  if (!v6)
    return a5(result);
  return result;
}

uint64_t sub_1CF787D0C()
{
  return sub_1CF7C8FF4();
}

void *sub_1CF787D20(uint64_t a1)
{
  uint64_t *v1;

  return sub_1CF787714(a1, *v1, v1[1], v1[2]);
}

uint64_t (*XPCObjectContainer.object.modify())()
{
  return nullsub_1;
}

uint64_t XPCObjectContainer.init(wrappedValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void XPCObjectContainer.init(from:)()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void XPCObjectContainer.encode(to:)()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t XPCObjectContainer.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t XPCObjectContainer.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*XPCObjectContainer.wrappedValue.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_unknownObjectRetain();
  return sub_1CF787E78;
}

uint64_t sub_1CF787E78(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v3 = v2;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    *v3 = v2;
  }
  return result;
}

void sub_1CF787ED8()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF787F30()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t type metadata accessor for _XPCObjectEncoder()
{
  return objc_opt_self();
}

uint64_t sub_1CF787FA8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF787FCC(char *key, xpc_object_t value)
{
  uint64_t v2;

  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), key, value);
  return 1;
}

uint64_t sub_1CF787FF0()
{
  return swift_deallocObject();
}

uint64_t sub_1CF788000()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for _XPCObjectDecoder()
{
  return objc_opt_self();
}

uint64_t sub_1CF78805C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x1D17D55BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF788098(uint64_t a1)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, a1);
}

uint64_t sub_1CF7880C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_1CF7880CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for XPCObjectEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCObjectEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for XPCObjectDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCObjectDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init(underlyingConnection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for XPCObjectContainer()
{
  return &type metadata for XPCObjectContainer;
}

uint64_t sub_1CF78818C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for XPCObjectKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCObjectKeyedEncodingContainer);
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueDecodingContainer()
{
  return &type metadata for XPCObjectSingleValueDecodingContainer;
}

uint64_t destroy for XPCObjectSingleValueEncodingContainer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s7Mercury37XPCObjectSingleValueEncodingContainerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for XPCObjectSingleValueEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for XPCObjectSingleValueEncodingContainer(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueEncodingContainer()
{
  return &type metadata for XPCObjectSingleValueEncodingContainer;
}

uint64_t destroy for CodableIndexKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableIndexKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableIndexKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableIndexKey()
{
  return &type metadata for CodableIndexKey;
}

unint64_t sub_1CF7884F8()
{
  unint64_t result;

  result = qword_1EFBB2638;
  if (!qword_1EFBB2638)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA648, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB2638);
  }
  return result;
}

unint64_t sub_1CF788540()
{
  unint64_t result;

  result = qword_1EFBB2640;
  if (!qword_1EFBB2640)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA670, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB2640);
  }
  return result;
}

unint64_t sub_1CF788584()
{
  unint64_t result;

  result = qword_1ED56DDE8;
  if (!qword_1ED56DDE8)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA8C8, &type metadata for XPCObjectSingleValueEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_1ED56DDE8);
  }
  return result;
}

unint64_t sub_1CF7885C8()
{
  unint64_t result;

  result = qword_1EFBB2650;
  if (!qword_1EFBB2650)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CADF4, &type metadata for XPCObjectUnkeyedEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB2650);
  }
  return result;
}

unint64_t sub_1CF78860C()
{
  unint64_t result;

  result = qword_1ED56EBE8;
  if (!qword_1ED56EBE8)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA810, &type metadata for XPCObjectSingleValueDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_1ED56EBE8);
  }
  return result;
}

unint64_t sub_1CF788650()
{
  unint64_t result;

  result = qword_1EFBB2670;
  if (!qword_1EFBB2670)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CAC84, &type metadata for XPCObjectUnkeyedDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB2670);
  }
  return result;
}

uint64_t sub_1CF788694()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for XPCObjectKeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCObjectKeyedDecodingContainer);
}

uint64_t sub_1CF7886D4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1CF788718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;
  void *v12;
  xpc_object_t v13;

  result = sub_1CF7C846C();
  v8 = (char *)result;
  if (result)
  {
    result = sub_1CF7C8484();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1CF7C8478();
  if (!v8)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  v12 = *(void **)(a4 + 8);
  swift_unknownObjectRetain();
  v13 = xpc_data_create(v8, v11);
  xpc_array_append_value(v12, v13);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF7887D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_1CF7C846C();
  v7 = result;
  if (result)
  {
    result = sub_1CF7C8484();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  v8 = __OFSUB__(a2, a1);
  v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = sub_1CF7C8478();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7 + v11;
  if (v7)
    v13 = v12;
  else
    v13 = 0;
  return a3(v7, v13);
}

float sub_1CF788870()
{
  uint64_t *v0;
  float v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  double value;
  _QWORD *v21;
  _QWORD v22[4];
  _QWORD v23[3];
  ValueMetadata *v24;
  unint64_t v25;

  v2 = XPCTypeDouble;
  v3 = (void *)v0[1];
  v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    v12 = *v0;
    v13 = v0[2];
    v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v25 = sub_1CF788650();
    v14 = (_QWORD *)swift_allocObject();
    v23[0] = v14;
    v14[2] = v12;
    v14[3] = v3;
    v14[4] = v13;
    v14[5] = v4;
    sub_1CF7C8C1C();
    swift_allocError();
    v16 = v15;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E0DEB188], v23, 0x80000001CF7CD470, v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_willThrow();
  }
  else
  {
    v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D17D5ACC]() == v2)
    {
      v18 = *v0;
      v19 = v0[2];
      value = xpc_double_get_value(v5);
      v1 = value;
      if (value == v1)
      {
        swift_unknownObjectRelease();
        v0[3] = v4 + 1;
        return v1;
      }
      v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v25 = sub_1CF788650();
      v21 = (_QWORD *)swift_allocObject();
      v23[0] = v21;
      v21[2] = v18;
      v21[3] = v3;
      v21[4] = v19;
      v21[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BEC();
      v11 = v23;
    }
    else
    {
      v22[3] = swift_getObjectType();
      v22[0] = v5;
      v6 = *v0;
      v7 = v0[2];
      v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      v25 = sub_1CF788650();
      v8 = (_QWORD *)swift_allocObject();
      v23[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1CF7C8C1C();
      swift_allocError();
      v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E0DEB188], (uint64_t)v22, v23, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      v11 = v22;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  return v1;
}

void sub_1CF788B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  double value;
  float v9;
  _QWORD v10[5];

  v7 = (void *)sub_1CF78C3DC(XPCTypeDouble, a1, a2);
  if (!v3)
  {
    value = xpc_double_get_value(v7);
    v9 = value;
    if (value != v9)
    {
      v10[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v10[0] = a1;
      v10[1] = a2;
      v10[4] = sub_1CF78860C();
      v10[2] = a3;
      sub_1CF7C8C1C();
      swift_allocError();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF7C8BE0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      swift_willThrow();
    }
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1CF788CA4(const void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF77DC58(a1, a2, *(_QWORD *)(v2 + 48));
}

unint64_t sub_1CF788CC4()
{
  unint64_t result;

  result = qword_1EFBB2680;
  if (!qword_1EFBB2680)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA980, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB2680);
  }
  return result;
}

uint64_t sub_1CF788D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D17D5550](a1, v6, a5);
}

_QWORD *initializeWithCopy for XPCObjectUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for XPCObjectUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for XPCObjectUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCReplyProviding(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCReplyProviding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedDecodingContainer()
{
  return &type metadata for XPCObjectUnkeyedDecodingContainer;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwxx_0()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s7Mercury37XPCObjectSingleValueDecodingContainerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s7Mercury37XPCObjectSingleValueDecodingContainerVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwta_0(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCDictionary(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedEncodingContainer()
{
  return &type metadata for XPCObjectUnkeyedEncodingContainer;
}

uint64_t sub_1CF78910C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_1CF789114()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *sub_1CF789138()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1)
    return (_QWORD *)v3;
  return result;
}

uint64_t sub_1CF789168@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_1CF789194()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7891A4()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56D470);
  return swift_dynamicCast();
}

unint64_t sub_1CF789204()
{
  unint64_t result;

  result = qword_1ED56DF20;
  if (!qword_1ED56DF20)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE1B8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&qword_1ED56DF20);
  }
  return result;
}

unint64_t sub_1CF789248()
{
  unint64_t result;

  result = qword_1ED56DF30;
  if (!qword_1ED56DF30)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE1C8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&qword_1ED56DF30);
  }
  return result;
}

unint64_t sub_1CF78928C()
{
  unint64_t result;

  result = qword_1EFBB26C0;
  if (!qword_1EFBB26C0)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE120], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26C0);
  }
  return result;
}

unint64_t sub_1CF7892D0()
{
  unint64_t result;

  result = qword_1EFBB26C8;
  if (!qword_1EFBB26C8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE090], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26C8);
  }
  return result;
}

unint64_t sub_1CF789314()
{
  unint64_t result;

  result = qword_1EFBB26D0;
  if (!qword_1EFBB26D0)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDE90], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26D0);
  }
  return result;
}

unint64_t sub_1CF789358()
{
  unint64_t result;

  result = qword_1EFBB26D8;
  if (!qword_1EFBB26D8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEBBC0], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26D8);
  }
  return result;
}

unint64_t sub_1CF78939C()
{
  unint64_t result;

  result = qword_1EFBB26E0;
  if (!qword_1EFBB26E0)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDC88], MEMORY[0x1E0DEDC60]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26E0);
  }
  return result;
}

unint64_t sub_1CF7893E0()
{
  unint64_t result;

  result = qword_1EFBB26E8;
  if (!qword_1EFBB26E8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDCA0], MEMORY[0x1E0DEDC60]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26E8);
  }
  return result;
}

unint64_t sub_1CF789424()
{
  unint64_t result;

  result = qword_1EFBB26F0;
  if (!qword_1EFBB26F0)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDBF0], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26F0);
  }
  return result;
}

unint64_t sub_1CF789468()
{
  unint64_t result;

  result = qword_1EFBB26F8;
  if (!qword_1EFBB26F8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDB70], MEMORY[0x1E0DEDB58]);
    atomic_store(result, (unint64_t *)&qword_1EFBB26F8);
  }
  return result;
}

unint64_t sub_1CF7894AC()
{
  unint64_t result;

  result = qword_1EFBB2700;
  if (!qword_1EFBB2700)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEDA88], MEMORY[0x1E0DEDA70]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2700);
  }
  return result;
}

unint64_t sub_1CF7894F0()
{
  unint64_t result;

  result = qword_1EFBB2708;
  if (!qword_1EFBB2708)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2708);
  }
  return result;
}

uint64_t sub_1CF789534()
{
  return swift_deallocObject();
}

uint64_t sub_1CF789544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF78121C(a1, a2, *(_QWORD ***)(v2 + 16));
}

uint64_t sub_1CF78954C()
{
  return swift_deallocObject();
}

uint64_t sub_1CF78955C()
{
  swift_bridgeObjectRetain();
  return sub_1CF7C92AC();
}

unint64_t sub_1CF7895BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED56DE78;
  if (!qword_1ED56DE78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DE70);
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED56DE78);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17D55B0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1CF789698(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  xpc_object_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v33;
  void (*v34)(uint64_t *, uint64_t, uint64_t);
  unsigned __int8 uuid[8];
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v1;
  v39 = *MEMORY[0x1E0C80C08];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CF7C861C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A80](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (*(_QWORD *)(*v3 + 16))
    __break(1u);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13(v7, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    *(_QWORD *)uuid = sub_1CF7C8604();
    LOWORD(v36) = v20;
    BYTE2(v36) = v21;
    BYTE3(v36) = v22;
    BYTE4(v36) = v23;
    BYTE5(v36) = v24;
    BYTE6(v36) = v25;
    HIBYTE(v36) = v26;
    v27 = xpc_uuid_create(uuid);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_QWORD *)(v12 + 16) = v27;
    return swift_unknownObjectRelease();
  }
  v34 = (void (*)(uint64_t *, uint64_t, uint64_t))v13;
  sub_1CF778FFC((uint64_t)v7, &qword_1ED56E310);
  v14 = v3[1];
  v15 = *(_QWORD *)(*v3 + 24);
  v16 = *(_QWORD *)(*v3 + 40);
  v17 = type metadata accessor for _XPCObjectEncoder();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = v15;
  v18[4] = v14;
  v18[5] = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = v17;
  v38 = sub_1CF78D2BC(&qword_1ED56E720, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
  *(_QWORD *)uuid = v18;
  sub_1CF78D2BC(&qword_1EFBB2728, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  swift_retain();
  sub_1CF7C87C0();
  if (v2)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  v28 = v18[2];
  if (v28)
  {
    swift_unknownObjectRetain();
    swift_release();
    *(_QWORD *)(*v3 + 16) = v28;
    return swift_unknownObjectRelease();
  }
  v29 = sub_1CF7C8C34();
  swift_allocError();
  v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
  v31[3] = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v31);
  v34(boxed_opaque_existential_0Tm, a1, v8);
  *(_QWORD *)uuid = 0;
  v36 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1CF7C8BA4();
  swift_bridgeObjectRelease();
  sub_1CF7C8C04();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC4B0], v29);
  swift_willThrow();
  return swift_release();
}

id sub_1CF789A84()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  qword_1ED56DDF0 = (uint64_t)result;
  return result;
}

uint64_t sub_1CF789AB4(uint64_t a1)
{
  void **v1;
  void **v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  _BYTE v18[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1CF7C861C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A80](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CF779038(a1, (uint64_t)v6, &qword_1ED56E310);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v11 = sub_1CF778FFC((uint64_t)v6, &qword_1ED56E310);
    v12 = *v2;
    v13 = v2[2];
    MEMORY[0x1E0C80A80](v11);
    *(_QWORD *)&v18[-32] = v12;
    *(_QWORD *)&v18[-24] = v14;
    *(_QWORD *)&v18[-16] = v13;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF79DF94((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_1CF78D2A0, (uint64_t)&v18[-48], 0xD00000000000001FLL, 0x80000001CF7CD6E0);
    swift_unknownObjectRelease();
    sub_1CF778FFC(a1, &qword_1ED56E310);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_1CF7C85E0();
    v16 = *v2;
    v17 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v16, "XPCSideChannel.uniqueIdentifier", (const char *)(v17 + 32));
    swift_release();
    sub_1CF778FFC(a1, &qword_1ED56E310);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1CF789CA8()
{
  swift_unknownObjectWeakInit();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF789CD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = sub_1CF789CA8();
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1CF789D00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = MEMORY[0x1D17D5748](v1);
  *a1 = result;
  return result;
}

void sub_1CF789D28()
{
  off_1ED56D4A0 = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

_QWORD *static XPCSideChannel.makeActiveSideChannelIterator()()
{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (qword_1ED56DE00 != -1)
    swift_once();
  v0 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  if (qword_1ED56D4A8 != -1)
    swift_once();
  swift_beginAccess();
  v1 = (char *)off_1ED56D4A0;
  v2 = -1;
  v3 = -1 << *((_BYTE *)off_1ED56D4A0 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *((_QWORD *)off_1ED56D4A0 + 8);
  v5 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2710);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v1 + 64;
  v6[4] = v5;
  v6[5] = 0;
  v6[6] = v4;
  v6[7] = sub_1CF789E88;
  v6[8] = 0;
  v6[9] = sub_1CF78BEB4;
  v6[10] = 0;
  v6[11] = sub_1CF78BEC4;
  v6[12] = 0;
  swift_bridgeObjectRetain();
  objc_msgSend(v0, sel_unlock);
  return v6;
}

uint64_t sub_1CF789E8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_1CF778FFC(a1, &qword_1ED56D530);
    sub_1CF78B900(a2, (uint64_t)v9);
    v4 = sub_1CF7C861C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
    return sub_1CF778FFC((uint64_t)v9, &qword_1ED56D530);
  }
  else
  {
    sub_1CF78D244(a1, (uint64_t)v9, &qword_1EFBB2720);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1CF7C0810((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v7 = sub_1CF7C861C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  }
}

uint64_t XPCSideChannel.__allocating_init(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = sub_1CF78CE58(a1, a2);
  swift_release();
  return v4;
}

uint64_t static XPCSideChannel.anonymousListener()()
{
  swift_allocObject();
  return sub_1CF78CE58(0, 0);
}

uint64_t XPCSideChannel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BYTE v6[16];

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  if (qword_1ED56DE00 != -1)
    swift_once();
  v3 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  if (qword_1ED56D4A8 != -1)
    swift_once();
  swift_beginAccess();
  sub_1CF78B900(v1 + v2, (uint64_t)v6);
  swift_endAccess();
  sub_1CF778FFC((uint64_t)v6, &qword_1ED56D530);
  objc_msgSend(v3, sel_unlock);
  v4 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + v2, v4);
  swift_release();
  swift_release();
  return v1;
}

uint64_t XPCSideChannel.__deallocating_deinit()
{
  XPCSideChannel.deinit();
  return swift_deallocClassInstance();
}

id XPCSideChannel.setEventHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;

  if (qword_1ED56DE00 != -1)
    swift_once();
  v5 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *v6 = a1;
  v6[1] = a2;
  swift_retain();
  swift_release();
  return objc_msgSend(v5, sel_unlock);
}

BOOL XPCSideChannel.isAnonymousListener.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection) == 0;
}

uint64_t XPCSideChannel.send(message:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  result = MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    v8 = *a1;
    v9 = a1[1];
    v10 = a1[2];
    v16 = v8;
    v17 = v9;
    v18 = v10;
    v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    v12 = sub_1CF7C861C();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF789AB4((uint64_t)v6);
    v16 = v8;
    v17 = v9;
    v18 = v10;
    v14 = *(void (**)(uint64_t *))(*(_QWORD *)v7 + 168);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCSideChannel.sendSync(message:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  result = MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    v8 = *a1;
    v9 = a1[1];
    v10 = a1[2];
    v16 = v8;
    v17 = v9;
    v18 = v10;
    v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    v12 = sub_1CF7C861C();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF789AB4((uint64_t)v6);
    v16 = v8;
    v17 = v9;
    v18 = v10;
    v14 = *(void (**)(uint64_t *))(*(_QWORD *)v7 + 176);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCSideChannel.send(message:replyQueue:replyHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  result = MEMORY[0x1E0C80A80](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v12)
  {
    v13 = *a1;
    v14 = a1[1];
    v15 = a1[2];
    v21 = v13;
    v22 = v14;
    v23 = v15;
    v16 = v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    v17 = sub_1CF7C861C();
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF789AB4((uint64_t)v11);
    v21 = v13;
    v22 = v14;
    v23 = v15;
    v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 160);
    swift_retain();
    v19(&v21, a2, a3, v20);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF78A61C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t Strong;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD *);
  uint64_t v13;
  char v14;

  if (qword_1ED56D4A8 != -1)
    swift_once();
  swift_beginAccess();
  v4 = off_1ED56D4A0;
  if (!*((_QWORD *)off_1ED56D4A0 + 2) || (v5 = sub_1CF7B49A8(a1), (v6 & 1) == 0))
  {
    v13 = 0;
    v14 = 1;
    sub_1CF778FFC((uint64_t)&v13, &qword_1ED56D530);
    result = swift_endAccess();
    Strong = 0;
    goto LABEL_8;
  }
  sub_1CF779038(v4[7] + 8 * v5, (uint64_t)&v13, &qword_1EFBB2720);
  v14 = 0;
  Strong = swift_weakLoadStrong();
  sub_1CF778FFC((uint64_t)&v13, &qword_1ED56D530);
  result = swift_endAccess();
  if (!Strong)
  {
LABEL_8:
    v12 = 0;
    v11 = 0;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  result = swift_retain();
  v12 = sub_1CF78D214;
LABEL_9:
  *a2 = Strong;
  a2[1] = (uint64_t)v12;
  a2[2] = v11;
  return result;
}

uint64_t sub_1CF78A774(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD);
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v30;
  uint64_t v32;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  char v37;
  char v38[8];

  if (qword_1ED56D4A8 != -1)
LABEL_45:
    swift_once();
  swift_beginAccess();
  v30 = (char *)off_1ED56D4A0 + 64;
  v3 = -1 << *((_BYTE *)off_1ED56D4A0 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *((_QWORD *)off_1ED56D4A0 + 8);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = 0;
  v8 = &qword_1ED56D530;
  v32 = swift_bridgeObjectRetain();
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v7 << 6);
LABEL_10:
      sub_1CF779038(*(_QWORD *)(v32 + 56) + 8 * v11, (uint64_t)&v36, &qword_1EFBB2720);
      v12 = 0;
      goto LABEL_20;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 < v6)
    {
      v14 = *(_QWORD *)&v30[8 * v13];
      if (v14)
        goto LABEL_14;
      v15 = v7 + 2;
      if (v7 + 2 >= v6)
      {
        ++v7;
      }
      else
      {
        v14 = *(_QWORD *)&v30[8 * v15];
        if (v14)
          goto LABEL_17;
        v28 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_40;
        v14 = *(_QWORD *)&v30[8 * v28];
        if (v14)
          goto LABEL_30;
        v15 = v7 + 4;
        if (v7 + 4 >= v6)
        {
LABEL_41:
          v7 = v28;
          goto LABEL_19;
        }
        v14 = *(_QWORD *)&v30[8 * v15];
        if (v14)
        {
LABEL_17:
          v13 = v15;
LABEL_14:
          v5 = (v14 - 1) & v14;
          v11 = __clz(__rbit64(v14)) + (v13 << 6);
          v7 = v13;
          goto LABEL_10;
        }
        v28 = v7 + 5;
        if (v7 + 5 >= v6)
        {
LABEL_40:
          v7 = v15;
        }
        else
        {
          v14 = *(_QWORD *)&v30[8 * v28];
          if (v14)
          {
LABEL_30:
            v13 = v28;
            goto LABEL_14;
          }
          v13 = v7 + 6;
          if (v7 + 6 >= v6)
            goto LABEL_41;
          v14 = *(_QWORD *)&v30[8 * v13];
          if (v14)
            goto LABEL_14;
          while (v6 - 7 != v7)
          {
            v14 = *(_QWORD *)(v32 + 120 + 8 * v7++);
            if (v14)
            {
              v13 = v7 + 6;
              goto LABEL_14;
            }
          }
          v7 = v6 - 1;
        }
      }
    }
LABEL_19:
    v5 = 0;
    v36 = 0;
    v12 = 1;
LABEL_20:
    v37 = v12;
    sub_1CF78D244((uint64_t)&v36, (uint64_t)v35, v8);
    if ((v35[8] & 1) != 0)
      return sub_1CF78D23C();
    sub_1CF78D244((uint64_t)v35, (uint64_t)v38, &qword_1EFBB2720);
    sub_1CF78AB80((uint64_t)v38, &v34);
    v16 = v34;
    sub_1CF778FFC((uint64_t)v38, &qword_1EFBB2720);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      if (!v17
        || (v18 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD))(*(_QWORD *)a1 + 208),
            swift_retain(),
            v18(&v36, sub_1CF78D288, v17, MEMORY[0x1E0DEAFA0]),
            swift_release(),
            (v36 & 1) != 0))
      {
        v19 = v7;
        v20 = v8;
        v21 = *(_QWORD *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
        v22 = *(_QWORD *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = v21;
        *(_QWORD *)(v23 + 24) = v22;
        v24 = *a3;
        swift_retain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = sub_1CF7B43F8(0, v24[2] + 1, 1, v24);
          *a3 = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
          v24 = sub_1CF7B43F8((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
        v24[2] = v27 + 1;
        v9 = &v24[3 * v27];
        v9[4] = v16;
        v9[5] = sub_1CF78D300;
        v9[6] = v23;
        *a3 = v24;
        v8 = v20;
        v7 = v19;
      }
      swift_release();
    }
  }
}

uint64_t sub_1CF78AB80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Strong;
  uint64_t result;
  _BYTE v5[8];

  sub_1CF779038(a1, (uint64_t)v5, &qword_1EFBB2720);
  Strong = swift_weakLoadStrong();
  result = sub_1CF778FFC((uint64_t)v5, &qword_1EFBB2720);
  *a2 = Strong;
  return result;
}

uint64_t XPCSideChannel.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[5];
  uint64_t v15;

  sub_1CF78D06C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB32F0);
  type metadata accessor for _XPCObjectEncoder();
  if (swift_dynamicCast())
  {
    v2 = v15;
    v3 = *(_QWORD *)(v15 + 24);
    if (v3 && (swift_conformsToProtocol2() ? (v4 = v3) : (v4 = 0), v4))
    {
      v5 = *(_QWORD *)(v2 + 32);
      v14[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
      v14[4] = sub_1CF788584();
      v14[0] = v2;
      v14[1] = v5;
      v6 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1CF789698(v6);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    }
    else
    {
      v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      swift_retain();
      v12 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF78D000();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064, 0x80000001CF7CD4F0, v11, v12, v13);
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_release();
    }
  }
  else
  {
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    swift_retain();
    v9 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x80000001CF7CD4B0, v8, v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

uint64_t XPCSideChannel.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  XPCSideChannel.init(from:)(a1);
  return v2;
}

const uint8_t *XPCSideChannel.init(from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  const uint8_t *result;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];

  v3 = v2;
  v5 = *v1;
  v6 = sub_1CF7C861C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A80](v6);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v8);
  v12 = (char *)&v35 - v11;
  v13 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *v13 = nullsub_1;
  v13[1] = 0;
  sub_1CF78D06C(a1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3340);
  type metadata accessor for _XPCObjectDecoder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v24 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x80000001CF7CD560, 0, v24, v25);
    swift_bridgeObjectRelease();
    swift_willThrow();
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_15;
  }
  v40 = v7;
  v14 = v41;
  v15 = *(_QWORD *)(v41 + 24);
  if (!v15
    || ((v16 = swift_conformsToProtocol2()) != 0 ? (v17 = v16) : (v17 = 0), v16 ? (v18 = v15) : (v18 = 0), !v18))
  {
    v26 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064, 0x80000001CF7CD5A0, 0, v26, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    goto LABEL_14;
  }
  v36 = v18;
  v37 = v17;
  v38 = v6;
  v39 = v5;
  v19 = *(_QWORD *)(v14 + 16);
  v20 = *(_QWORD *)(v14 + 32);
  v42[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  v21 = sub_1CF78860C();
  v42[0] = v14;
  v42[1] = v19;
  v42[4] = v21;
  v42[2] = v20;
  v22 = XPCTypeUUID;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = (void *)sub_1CF78BF10(v22, v14, v19, v20, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
LABEL_15:
    swift_release();
    swift_deallocPartialClassInstance();
    return (const uint8_t *)v1;
  }
  result = xpc_uuid_get_bytes(v23);
  if (result)
  {
    sub_1CF7C85F8();
    v29 = v40;
    v30 = v38;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v12, v10, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))((uint64_t)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v12, v30);
    v31 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    v32 = v37;
    *v31 = v36;
    v31[1] = v32;
    v33 = qword_1ED56DE00;
    swift_retain();
    if (v33 != -1)
      swift_once();
    v34 = (void *)qword_1ED56DDF0;
    objc_msgSend((id)qword_1ED56DDF0, sel_lock);
    sub_1CF78B2C0((uint64_t)v1);
    objc_msgSend(v34, sel_unlock);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v30);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return (const uint8_t *)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF78B2C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = sub_1CF7C861C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED56D4A8 != -1)
    swift_once();
  v6 = a1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  swift_beginAccess();
  v7 = off_1ED56D4A0;
  if (*((_QWORD *)off_1ED56D4A0 + 2) && (v8 = sub_1CF7B49A8(v6), (v9 & 1) != 0))
  {
    sub_1CF779038(v7[7] + 8 * v8, (uint64_t)&v13, &qword_1EFBB2720);
    v14 = 0;
    Strong = swift_weakLoadStrong();
    sub_1CF778FFC((uint64_t)&v13, &qword_1ED56D530);
    swift_endAccess();
    swift_release();
    if (Strong)
    {
      sub_1CF7C8C1C();
      swift_allocError();
      sub_1CF7C8BE0();
      return swift_willThrow();
    }
  }
  else
  {
    v13 = 0;
    v14 = 1;
    sub_1CF778FFC((uint64_t)&v13, &qword_1ED56D530);
    swift_endAccess();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_weakInit();
  v14 = 0;
  swift_beginAccess();
  sub_1CF789E8C((uint64_t)&v13, (uint64_t)v5);
  return swift_endAccess();
}

BOOL static XPCSideChannel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t XPCSideChannel.hash(into:)()
{
  return sub_1CF7C9240();
}

uint64_t XPCSideChannel.hashValue.getter()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

const uint8_t *sub_1CF78B534@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  const uint8_t *result;

  v5 = swift_allocObject();
  result = XPCSideChannel.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1CF78B588(uint64_t a1)
{
  return XPCSideChannel.encode(to:)(a1);
}

uint64_t sub_1CF78B5A8()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF78B5EC()
{
  return sub_1CF7C9240();
}

uint64_t sub_1CF78B614()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

BOOL sub_1CF78B654(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1CF78B668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1CF7C9234();
  sub_1CF7C88C8();
  v4 = sub_1CF7C9258();
  return sub_1CF78B6CC(a1, a2, v4);
}

unint64_t sub_1CF78B6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1CF7C8FC4() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1CF7C8FC4() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1CF7C8FC4() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

double sub_1CF78B810@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CF779644(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CF7C6A58();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1CF779634((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1CF78B9FC(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1CF78B900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1CF7B49A8(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CF7C6C3C();
      v11 = v14;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = sub_1CF7C861C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    sub_1CF78D244(*(_QWORD *)(v11 + 56) + 8 * v6, a2, &qword_1EFBB2720);
    sub_1CF78BBD0(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

unint64_t sub_1CF78B9FC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CF7C8B8C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CF7C9234();
        swift_bridgeObjectRetain();
        sub_1CF7C88C8();
        v10 = sub_1CF7C9258();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF78BBD0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = sub_1CF7C861C();
  v33 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A80](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1CF7C8B8C();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (result + 1) & v11;
      v12 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v31(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1CF7C87D8();
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            if (v15 * a1 < v16 || result >= v22 + v16 + v15)
            {
              result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
            }
            if (a1 < (uint64_t)v10 || *(_QWORD *)(a2 + 56) + 8 * a1 >= *(_QWORD *)(a2 + 56) + 8 * v10 + 8)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2720);
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v17;
            }
            else
            {
              v23 = a1 == v10;
              a1 = v10;
              v13 = v17;
              if (!v23)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2720);
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v10 = (v10 + 1) & v13;
        v8 = v14;
        v12 = v15;
      }
      while (((*(_QWORD *)(v14 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

BOOL sub_1CF78BEB4(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t sub_1CF78BEC4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF78BED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF78BF10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1CF78BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF78BF10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870]);
}

uint64_t sub_1CF78BF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v11[4];

  v7 = a5(0);
  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v11[3] = swift_getObjectType();
    v11[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v9 = v8;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(v7, (uint64_t)v11, 0, v9);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0CB0338], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEAFA0], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEA968], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEB070], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEB188], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEB418], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEDA70], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEDB58], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEDBC8], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEDC60], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78C994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEBB98], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78CA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEDE70], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEE068], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78CC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEE0F8], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78CD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[4];

  if (MEMORY[0x1D17D5ACC](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1CF7C8C1C();
    swift_allocError();
    v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E0DEE190], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1CF78CE58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _BYTE v16[16];

  v3 = v2;
  v6 = sub_1CF7C861C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v10 = (_QWORD *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *v10 = nullsub_1;
  v10[1] = 0;
  sub_1CF7C8610();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v9, v6);
  v11 = (_QWORD *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  *v11 = a1;
  v11[1] = a2;
  v12 = qword_1ED56DE00;
  swift_retain();
  if (v12 != -1)
    swift_once();
  v13 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  if (qword_1ED56D4A8 != -1)
    swift_once();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v6);
  swift_weakInit();
  v16[8] = 0;
  swift_beginAccess();
  sub_1CF789E8C((uint64_t)v16, (uint64_t)v9);
  swift_endAccess();
  objc_msgSend(v13, sel_unlock);
  return v3;
}

unint64_t sub_1CF78D000()
{
  unint64_t result;

  result = qword_1ED56E1E0;
  if (!qword_1ED56E1E0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_1ED56E1E0);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1CF78D06C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CF78D0B0()
{
  return sub_1CF78D2BC(&qword_1EFBB2718, (uint64_t (*)(uint64_t))type metadata accessor for XPCSideChannel, (uint64_t)&protocol conformance descriptor for XPCSideChannel);
}

uint64_t type metadata accessor for XPCSideChannel()
{
  uint64_t result;

  result = qword_1ED56D538;
  if (!qword_1ED56D538)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CF78D118()
{
  return type metadata accessor for XPCSideChannel();
}

uint64_t sub_1CF78D120()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CF7C861C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for XPCSideChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCSideChannel.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1CF78D1C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for XPCSideChannel.Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCSideChannel.Weak);
}

uint64_t sub_1CF78D1F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF78D214(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(a1, *a2, a2[1]);
}

uint64_t sub_1CF78D23C()
{
  return swift_release();
}

uint64_t sub_1CF78D244(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CF78D288(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF7A49DC(a1, v1);
}

void sub_1CF78D2A0(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1CF79DEC4(a1, *(xpc_object_t *)(v2 + 16), a2);
}

uint64_t sub_1CF78D2BC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D17D55BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RemoteDeviceBrowser.serviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t RemoteDeviceBrowser.deviceType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

id RemoteDeviceBrowser.targetQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t sub_1CF78D358()
{
  return sub_1CF78D3F4();
}

uint64_t sub_1CF78D364@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1CF7A52CC(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1CF78D3D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF78D364(a1);
}

uint64_t sub_1CF78D3E8()
{
  return sub_1CF78D3F4();
}

uint64_t sub_1CF78D3F4()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2738);
  sub_1CF7C8ACC();
  return v1;
}

uint64_t sub_1CF78D450@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = (unint64_t)sub_1CF7A52CC(v2);
  result = swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
      goto LABEL_4;
LABEL_15:
    result = swift_release();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    *a1 = v7;
    return result;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1CF7C8CAC();
  result = swift_release();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  if (v5 >= 1)
  {
    swift_beginAccess();
    for (i = 0; i != v5; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        MEMORY[0x1D17D480C](i, v3);
      else
        swift_retain();
      if (remote_device_get_state() == dword_1EFBB2F04)
      {
        sub_1CF7C8C4C();
        sub_1CF7C8C64();
        sub_1CF7C8C70();
        sub_1CF7C8C58();
      }
      else
      {
        swift_release();
      }
    }
    result = swift_release();
    v7 = v8;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF78D5F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF78D450(a1);
}

uint64_t RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
  return v12;
}

uint64_t RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = v6;
  v32 = a5;
  v33 = a6;
  v28 = a4;
  v29 = a1;
  v30 = a2;
  v31 = a3;
  v8 = sub_1CF7C8AB4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A80](v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CF7C8AA8();
  MEMORY[0x1E0C80A80](v12);
  v13 = sub_1CF7C873C();
  MEMORY[0x1E0C80A80](v13);
  sub_1CF78D90C();
  sub_1CF7C8730();
  v34 = MEMORY[0x1E0DEE9D8];
  v14 = sub_1CF78D948();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2748);
  v26[1] = sub_1CF78D990();
  v26[2] = v15;
  v26[3] = v14;
  sub_1CF7C8B80();
  v16 = *MEMORY[0x1E0DEF8D0];
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v27 = v8;
  v17(v11, v16, v8);
  v18 = sub_1CF7C8AE4();
  v19 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v7 + 48) = v18;
  *(_QWORD *)(v7 + 72) = 0;
  v20 = sub_1CF77C5FC(v19);
  v21 = v28;
  v22 = v29;
  *(_QWORD *)(v7 + 80) = v20;
  *(_BYTE *)(v7 + 88) = 0;
  v23 = v30;
  *(_QWORD *)(v7 + 16) = v22;
  *(_QWORD *)(v7 + 24) = v23;
  BYTE4(v23) = BYTE4(v31);
  *(_DWORD *)(v7 + 32) = v31;
  *(_BYTE *)(v7 + 36) = BYTE4(v23) & 1;
  if (!v21)
  {
    sub_1CF7C8730();
    v34 = v19;
    sub_1CF7C8B80();
    v17(v11, v16, v27);
    v21 = sub_1CF7C8AE4();
  }
  *(_QWORD *)(v7 + 40) = v21;
  v24 = v33;
  *(_QWORD *)(v7 + 56) = v32;
  *(_QWORD *)(v7 + 64) = v24;
  return v7;
}

unint64_t sub_1CF78D90C()
{
  unint64_t result;

  result = qword_1ED56E1F0[0];
  if (!qword_1ED56E1F0[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1ED56E1F0);
  }
  return result;
}

unint64_t sub_1CF78D948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB2740;
  if (!qword_1EFBB2740)
  {
    v1 = sub_1CF7C8AA8();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB2740);
  }
  return result;
}

unint64_t sub_1CF78D990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB2750;
  if (!qword_1EFBB2750)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBB2748);
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB2750);
  }
  return result;
}

void sub_1CF78D9DC()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t started;
  uint64_t aBlock;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v1 = *(NSObject **)(v0 + 48);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_1CF78E218;
  *(_QWORD *)(v2 + 24) = v0;
  v18 = sub_1CF78E230;
  v19 = v2;
  v3 = MEMORY[0x1E0C809A8];
  aBlock = MEMORY[0x1E0C809A8];
  v15 = 1107296256;
  v16 = sub_1CF78DDC0;
  v17 = &block_descriptor_0;
  v4 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v1 & 1) == 0)
  {
    v5 = swift_allocObject();
    swift_weakInit();
    if (*(_QWORD *)(v0 + 24))
    {
      v6 = xpc_dictionary_create(0, 0, 0);
      v7 = sub_1CF7C8898();
      xpc_dictionary_set_string(v6, "AvailableService", (const char *)(v7 + 32));
      swift_release();
      if ((*(_BYTE *)(v0 + 36) & 1) != 0)
      {
LABEL_4:
        xpc_dictionary_set_value(v6, "DeviceType", 0);
LABEL_9:
        v18 = sub_1CF78E28C;
        v19 = v5;
        aBlock = v3;
        v15 = 1107296256;
        v16 = sub_1CF78E294;
        v17 = &block_descriptor_9;
        v12 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        started = remote_device_start_browsing_matching();
        _Block_release(v12);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v10 = *(void **)(v0 + 72);
        *(_QWORD *)(v0 + 72) = started;
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_10;
      }
    }
    else
    {
      if ((*(_BYTE *)(v0 + 36) & 1) != 0)
      {
        swift_beginAccess();
        v18 = sub_1CF78E28C;
        v19 = v5;
        aBlock = v3;
        v15 = 1107296256;
        v16 = sub_1CF78E294;
        v17 = &block_descriptor_6;
        v8 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v9 = remote_device_start_browsing();
        _Block_release(v8);
        v10 = *(void **)(v0 + 72);
        *(_QWORD *)(v0 + 72) = v9;
        swift_release();
LABEL_10:
        swift_release();

        return;
      }
      v6 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_value(v6, "AvailableService", 0);
      if ((*(_BYTE *)(v0 + 36) & 1) != 0)
        goto LABEL_4;
    }
    remote_device_type_get_description();
    sub_1CF7C88E0();
    v11 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v6, "DeviceType", (const char *)(v11 + 32));
    swift_release();
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_1CF78DD4C(uint64_t result)
{
  if ((*(_BYTE *)(result + 88) & 1) != 0)
  {
    result = sub_1CF7C8CA0();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result + 88) = 1;
  }
  return result;
}

uint64_t sub_1CF78DDC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1CF78DDE0(void *a1, char a2)
{
  uint64_t Strong;
  uint64_t v5;
  void (*v6)(_QWORD *);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD aBlock[6];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    if ((a2 & 1) != 0)
    {
      v6 = *(void (**)(_QWORD *))(Strong + 56);
      aBlock[0] = 0;
      v6(aBlock);
    }
    if (a1)
    {
      v7 = *(void **)(v5 + 40);
      v8 = swift_allocObject();
      swift_weakInit();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = a1;
      aBlock[4] = sub_1CF78E5EC;
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x1E0C809A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CF797240;
      aBlock[3] = &block_descriptor_16;
      v10 = _Block_copy(aBlock);
      v11 = a1;
      v12 = v7;
      swift_release();
      remote_device_set_connected_callback();
      _Block_release(v10);
      swift_release();

    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_1CF78DF30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v5;
  int state;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  void (*v14)(_QWORD *);
  _QWORD v15[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    state = remote_device_get_state();
    swift_beginAccess();
    if (state == dword_1EFBB2F04)
    {
      type metadata accessor for RemoteDevice();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = a3;
      v8 = *(NSObject **)(v5 + 48);
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v5;
      *(_QWORD *)(v9 + 24) = v7;
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = sub_1CF78E620;
      *(_QWORD *)(v10 + 24) = v9;
      v15[4] = sub_1CF78E674;
      v15[5] = v10;
      v15[0] = MEMORY[0x1E0C809A8];
      v15[1] = 1107296256;
      v15[2] = sub_1CF78DDC0;
      v15[3] = &block_descriptor_26;
      v11 = _Block_copy(v15);
      v12 = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v8, v11);
      _Block_release(v11);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v14 = *(void (**)(_QWORD *))(v5 + 56);
        v15[0] = v7;
        swift_retain();
        v14(v15);
        swift_release();
        swift_release();
        return swift_release_n();
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1CF78E11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v4 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1E0C80A80](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF797864((uint64_t)v6);
  remote_device_get_name();
  v7 = sub_1CF7C88E0();
  v8 = (uint64_t *)&v6[*(int *)(v4 + 20)];
  *v8 = v7;
  v8[1] = v9;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0x8000000000000000;
  sub_1CF7C0980(a2, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease();
  sub_1CF78E638((uint64_t)v6);
  return swift_endAccess();
}

uint64_t sub_1CF78E218()
{
  uint64_t v0;

  return sub_1CF78DD4C(v0);
}

uint64_t sub_1CF78E220()
{
  return swift_deallocObject();
}

uint64_t sub_1CF78E230()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1CF78E268()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1CF78E28C(void *a1, char a2)
{
  sub_1CF78DDE0(a1, a2);
}

void sub_1CF78E294(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(void *, uint64_t);
  id v6;

  v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  v5(a2, a3);
  swift_release();

}

void sub_1CF78E2F4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    *(_QWORD *)(v0 + 72) = 0;
    v2 = v1;
    remote_device_browser_cancel();

  }
}

id *RemoteDeviceBrowser.deinit()
{
  id *v0;
  id v1;

  v1 = v0[9];
  if (v1)
  {
    v0[9] = 0;
    remote_device_browser_cancel();

  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteDeviceBrowser.__deallocating_deinit()
{
  RemoteDeviceBrowser.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RemoteDeviceBrowser()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteDeviceBrowser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.discoveredDevices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.connectedDevices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v3 + 232))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of RemoteDeviceBrowser.startBrowsing()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

_QWORD *initializeBufferWithCopyOfBuffer for RemoteDeviceBrowser.Event(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RemoteDeviceBrowser.Event()
{
  return swift_release();
}

_QWORD *assignWithCopy for RemoteDeviceBrowser.Event(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for RemoteDeviceBrowser.Event(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDeviceBrowser.Event(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RemoteDeviceBrowser.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1CF78E578(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1CF78E590(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteDeviceBrowser.Event()
{
  return &type metadata for RemoteDeviceBrowser.Event;
}

uint64_t sub_1CF78E5C0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF78E5EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF78DF30(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1CF78E5F4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF78E620()
{
  uint64_t v0;

  return sub_1CF78E11C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CF78E628()
{
  return swift_deallocObject();
}

uint64_t sub_1CF78E638(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t XPCFileDescriptor.__allocating_init(forReadingFileAt:)(char *a1)
{
  return sub_1CF791918(a1);
}

uint64_t sub_1CF78E6B0(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD *v5;

  if (a1)
  {
    result = sub_1CF7C86C4();
    *a2 = result;
  }
  else
  {
    v4 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001CF7CDAA0, 0, v4, v5);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

id XPCFileDescriptor.WriteOptions.fileProtection.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileProtection.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileProtection.modify())()
{
  return nullsub_1;
}

void *XPCFileDescriptor.WriteOptions.fileSecurity.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileSecurity.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileSecurity.modify())()
{
  return nullsub_1;
}

void XPCFileDescriptor.WriteOptions.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void XPCFileDescriptor.__allocating_init(forWritingFileAt:options:)(char *a1, uint64_t a2)
{
  sub_1CF791B7C(a1, a2);
}

void sub_1CF78E828(const char *a1@<X0>, void *a2@<X1>, __CFFileSecurity *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  _BYTE v19[6];
  mode_t mode;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C08];
  v8 = sub_1CF7C8424();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A80](v8);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A80](v10);
  v14 = &v19[-v13];
  if (a1)
  {
    if (a3)
    {
      mode = 0;
      if (CFFileSecurityGetMode(a3, &mode))
        a3 = (__CFFileSecurity *)sub_1CF7C9270();
      else
        a3 = 0;
    }
    v17 = XPCFileTransfer_open(a1, 1537, a2, 0, a3);

    if ((v17 & 0x80000000) == 0)
    {
      *a4 = v17;
      return;
    }
    v18 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v18)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v12);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v14, v12, v8);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v14);
    }
    sub_1CF7C840C();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    v15 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001CF7CDAA0, 0, v15, v16);
    swift_bridgeObjectRelease();
  }
  swift_willThrow();
}

uint64_t XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)(int a1, char a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = j__read;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = j__write;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = j__poll;
  *(_QWORD *)(result + 56) = 0;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result + 64) = a1;
    *(_BYTE *)(result + 68) = a2 & 1;
  }
  return result;
}

uint64_t XPCFileDescriptor.init(fileDescriptor:closeWhenDone:)(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = j__read;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = j__write;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = j__poll;
  *(_QWORD *)(v2 + 56) = 0;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v2 + 64) = result;
    *(_BYTE *)(v2 + 68) = a2 & 1;
    return v2;
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicatingFileDescriptor:)(int a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  result = sub_1CF78EB50(a1);
  v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = j__read;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = j__write;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = j__poll;
    *(_QWORD *)(result + 56) = 0;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(_BYTE *)(result + 68) = 1;
    }
  }
  return result;
}

uint64_t sub_1CF78EB50(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;

  v2 = sub_1CF7C8424();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A80](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v4);
  v8 = (char *)&v12 - v7;
  v9 = dup(a1);
  if ((v9 & 0x80000000) != 0)
  {
    v10 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v6);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v6, v2);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_willThrow();
  }
  return v9;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;

  v3 = sub_1CF78EB50(*(_DWORD *)(a1 + 64));
  if (v1)
  {
    swift_release();
    return v2;
  }
  v4 = v3;
  type metadata accessor for XPCFileDescriptor();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = j__read;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = j__write;
  *(_QWORD *)(v2 + 40) = 0;
  result = swift_release();
  *(_QWORD *)(v2 + 48) = j__poll;
  *(_QWORD *)(v2 + 56) = 0;
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(v2 + 64) = v4;
    *(_BYTE *)(v2 + 68) = 1;
    return v2;
  }
  __break(1u);
  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;

  v3 = sub_1CF78EB50((int)objc_msgSend(a1, sel_fileDescriptor));
  if (v1)
  {

  }
  else
  {
    v4 = v3;
    type metadata accessor for XPCFileDescriptor();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = j__read;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = j__write;
    *(_QWORD *)(v5 + 40) = 0;

    *(_QWORD *)(v5 + 48) = j__poll;
    *(_QWORD *)(v5 + 56) = 0;
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v5 + 64) = v4;
      *(_BYTE *)(v5 + 68) = 1;
    }
  }
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  uint64_t result;
  int v3;
  int v4;
  unint64_t v5;
  _QWORD *v6;

  result = MEMORY[0x1D17D5ACC]();
  if (result == XPCTypeFD)
  {
    v3 = xpc_fd_dup(a1);
    if (v3 < 0)
    {
      v5 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF78D000();
      swift_allocError();
      static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x80000001CF7CD900, 0, v5, v6);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
    else
    {
      v4 = v3;
      swift_unknownObjectRelease();
      type metadata accessor for XPCFileDescriptor();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = j__read;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = j__write;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = j__poll;
      *(_QWORD *)(result + 56) = 0;
      *(_DWORD *)(result + 64) = v4;
      *(_BYTE *)(result + 68) = 1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(int a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  result = sub_1CF78EB50(a1);
  v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = j__read;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = j__write;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = j__poll;
    *(_QWORD *)(result + 56) = 0;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(_BYTE *)(result + 68) = 1;
    }
  }
  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(__CFFileDescriptor *a1)
{
  uint64_t v1;
  CFFileDescriptorNativeDescriptor NativeDescriptor;
  int v4;
  int v5;
  uint64_t v6;

  NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  v4 = sub_1CF78EB50(NativeDescriptor);
  if (v1)
  {

  }
  else
  {
    v5 = v4;
    type metadata accessor for XPCFileDescriptor();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = j__read;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = j__write;
    *(_QWORD *)(v6 + 40) = 0;

    *(_QWORD *)(v6 + 48) = j__poll;
    *(_QWORD *)(v6 + 56) = 0;
    if (v5 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v6 + 64) = v5;
      *(_BYTE *)(v6 + 68) = 1;
    }
  }
}

uint64_t static XPCFileDescriptor.createPipe()()
{
  return sub_1CF791720();
}

char *static XPCFileDescriptor.createPseudoterminal(terminalParameters:windowSize:)(uint64_t a1, tcflag_t a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int c_iflag;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void (*v50)(char *, char *);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  tcflag_t v56;
  tcflag_t v57;
  tcflag_t v58;
  tcflag_t v59;
  speed_t v60;
  speed_t v61;
  tcflag_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  tcflag_t v67;
  int v68;
  termios v69;
  _QWORD v70[6];
  uint64_t v71;
  speed_t v72;
  speed_t v73;
  _BYTE v74[80];
  uint64_t v75;

  v64 = a3;
  v62 = a2;
  v75 = *MEMORY[0x1E0C80C08];
  sub_1CF791D1C(a1, (uint64_t)v70);
  v58 = v70[1];
  v59 = v70[0];
  v4 = v70[4];
  v56 = v70[3];
  v57 = v70[2];
  v6 = v70[5];
  v5 = v71;
  v60 = v73;
  v61 = v72;
  v63 = sub_1CF7C8424();
  v65 = *(_QWORD *)(v63 - 8);
  v7 = MEMORY[0x1E0C80A80](v63);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A80](v7);
  v12 = (char *)&v52 - v11;
  v13 = MEMORY[0x1E0C80A80](v10);
  v15 = (char *)&v52 - v14;
  v16 = MEMORY[0x1E0C80A80](v13);
  v18 = (char *)&v52 - v17;
  v19 = MEMORY[0x1E0C80A80](v16);
  v53 = (uint64_t)&v52 - v20;
  v21 = MEMORY[0x1E0C80A80](v19);
  v55 = (char *)&v52 - v22;
  v23 = MEMORY[0x1E0C80A80](v21);
  v52 = (uint64_t)&v52 - v24;
  MEMORY[0x1E0C80A80](v23);
  v54 = (char *)&v52 - v25;
  sub_1CF791D1C(a1, (uint64_t)v74);
  if ((v74[72] & 1) == 0)
  {
    v69.c_iflag = v59;
    v69.c_oflag = v58;
    v69.c_cflag = v57;
    v69.c_lflag = v56;
    *(_QWORD *)v69.c_cc = v4;
    *(_QWORD *)&v69.c_cc[8] = v6;
    *(_DWORD *)&v69.c_cc[16] = v5;
    v69.c_ispeed = v61;
    v69.c_ospeed = v60;
    if ((v64 & 1) != 0)
    {
      LODWORD(v67) = -1;
      v68 = -1;
      v37 = openpty((int *)&v67, &v68, 0, &v69, 0);
      v12 = (char *)v63;
      v30 = v65;
      if (!v37)
        goto LABEL_26;
      v38 = MEMORY[0x1D17D4314]();
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      if (v38)
      {
        v39 = v53;
        POSIXError.init(uncheckedCode:userInfo:)(v38, v53);
        v18 = v55;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v55, v39, v12);
        goto LABEL_36;
      }
      v18 = v55;
    }
    else
    {
      v67 = v62;
      v68 = -1;
      v66 = -1;
      v29 = openpty(&v68, &v66, 0, &v69, (winsize *)&v67);
      v12 = (char *)v63;
      v30 = v65;
      if (!v29)
        goto LABEL_20;
      v31 = MEMORY[0x1D17D4314]();
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      if (v31)
      {
        v32 = v52;
        POSIXError.init(uncheckedCode:userInfo:)(v31, v52);
        v18 = v54;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v54, v32, v12);
LABEL_36:
        sub_1CF7C840C();
        v50 = *(void (**)(char *, char *))(v30 + 8);
LABEL_37:
        v50(v18, v12);
LABEL_38:
        swift_willThrow();
        return v12;
      }
      v18 = v54;
    }
    POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v18);
    goto LABEL_36;
  }
  if ((v64 & 1) != 0)
  {
    LODWORD(v69.c_iflag) = -1;
    LODWORD(v67) = -1;
    v33 = openpty((int *)&v69, (int *)&v67, 0, 0, 0);
    v34 = v65;
    if (v33)
    {
      v35 = MEMORY[0x1D17D4314]();
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      if (v35)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v35, (uint64_t)v9);
        v36 = v63;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v9, v63);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v12);
        v36 = v63;
      }
      sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v36);
      goto LABEL_38;
    }
    goto LABEL_23;
  }
  v69.c_iflag = v62;
  LODWORD(v67) = -1;
  v68 = -1;
  v26 = openpty((int *)&v67, &v68, 0, 0, (winsize *)&v69);
  v27 = v65;
  if (v26)
  {
    v28 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v28)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v28, (uint64_t)v15);
      v12 = (char *)v63;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v18, v15, v63);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v18);
      v12 = (char *)v63;
    }
    sub_1CF7C840C();
    v50 = *(void (**)(char *, char *))(v27 + 8);
    goto LABEL_37;
  }
  v40 = v67;
  type metadata accessor for XPCFileDescriptor();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = j__read;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 32) = j__write;
  *(_QWORD *)(v41 + 40) = 0;
  *(_QWORD *)(v41 + 48) = j__poll;
  *(_QWORD *)(v41 + 56) = 0;
  if (v40 < 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  v12 = (char *)v41;
  *(_DWORD *)(v41 + 64) = v40;
  *(_BYTE *)(v41 + 68) = 1;
  v42 = v68;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = j__read;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)(v43 + 32) = j__write;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)(v43 + 48) = j__poll;
  *(_QWORD *)(v43 + 56) = 0;
  if ((v42 & 0x80000000) == 0)
    goto LABEL_28;
  __break(1u);
LABEL_20:
  v44 = v68;
  type metadata accessor for XPCFileDescriptor();
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = j__read;
  *(_QWORD *)(v45 + 24) = 0;
  *(_QWORD *)(v45 + 32) = j__write;
  *(_QWORD *)(v45 + 40) = 0;
  *(_QWORD *)(v45 + 48) = j__poll;
  *(_QWORD *)(v45 + 56) = 0;
  if (v44 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v12 = (char *)v45;
  *(_DWORD *)(v45 + 64) = v44;
  *(_BYTE *)(v45 + 68) = 1;
  v42 = v66;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = j__read;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)(v43 + 32) = j__write;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)(v43 + 48) = j__poll;
  *(_QWORD *)(v43 + 56) = 0;
  if ((v42 & 0x80000000) == 0)
    goto LABEL_28;
  __break(1u);
LABEL_23:
  c_iflag = v69.c_iflag;
  type metadata accessor for XPCFileDescriptor();
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = j__read;
  *(_QWORD *)(v47 + 24) = 0;
  *(_QWORD *)(v47 + 32) = j__write;
  *(_QWORD *)(v47 + 40) = 0;
  *(_QWORD *)(v47 + 48) = j__poll;
  *(_QWORD *)(v47 + 56) = 0;
  if (c_iflag < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v12 = (char *)v47;
  *(_DWORD *)(v47 + 64) = c_iflag;
  *(_BYTE *)(v47 + 68) = 1;
  v42 = v67;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = j__read;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)(v43 + 32) = j__write;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)(v43 + 48) = j__poll;
  *(_QWORD *)(v43 + 56) = 0;
  if (v42 < 0)
  {
    __break(1u);
LABEL_26:
    v48 = v67;
    type metadata accessor for XPCFileDescriptor();
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = j__read;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 32) = j__write;
    *(_QWORD *)(v49 + 40) = 0;
    *(_QWORD *)(v49 + 48) = j__poll;
    *(_QWORD *)(v49 + 56) = 0;
    if ((v48 & 0x80000000) == 0)
    {
      v12 = (char *)v49;
      *(_DWORD *)(v49 + 64) = v48;
      *(_BYTE *)(v49 + 68) = 1;
      v42 = v68;
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = j__read;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = j__write;
      *(_QWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = j__poll;
      *(_QWORD *)(v43 + 56) = 0;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_28;
LABEL_44:
      __break(1u);
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_28:
  *(_DWORD *)(v43 + 64) = v42;
  *(_BYTE *)(v43 + 68) = 1;
  return v12;
}

uint64_t XPCFileDescriptor.deinit()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 68) == 1)
    close(*(_DWORD *)(v0 + 64));
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t XPCFileDescriptor.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 68) == 1)
    close(*(_DWORD *)(v0 + 64));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF78F770@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = sub_1CF7922E0;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1CF78F7E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v6 + 16) = sub_1CF7922DC;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CF78F868()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t sub_1CF78F8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*sub_1CF78F900())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF78F940@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 32);
  v4 = *(_QWORD *)(v3 + 40);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = sub_1CF7922E0;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1CF78F9B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v6 + 32) = sub_1CF7922DC;
  *(_QWORD *)(v6 + 40) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CF78FA38()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t sub_1CF78FA80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_release();
}

uint64_t (*sub_1CF78FAD0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF78FB10@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 48);
  v4 = *(_QWORD *)(v3 + 56);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = sub_1CF7922A8;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1CF78FB84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v6 + 48) = sub_1CF792264;
  *(_QWORD *)(v6 + 56) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1CF78FC08()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t sub_1CF78FC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_release();
}

uint64_t (*sub_1CF78FCA0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CF78FCE0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return a1(*(unsigned int *)(v1 + 64));
}

uint64_t sub_1CF78FD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];

  v1 = sub_1CF7C8424();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A80](v1);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v3);
  v7 = (char *)v11 - v6;
  v8 = dup(*(_DWORD *)(v0 + 64));
  if ((v8 & 0x80000000) != 0)
  {
    v9 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v1);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v7);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    swift_willThrow();
  }
  return v8;
}

uint64_t sub_1CF78FE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;

  v1 = sub_1CF7C8424();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A80](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A80](v3);
  v8 = (char *)&v10 - v7;
  if ((*(_BYTE *)(v0 + 68) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    result = close(*(_DWORD *)(v0 + 64));
    if ((_DWORD)result)
    {
      v9 = MEMORY[0x1D17D4314]();
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      if (v9)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v5, v1);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
      }
      sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1CF78FF2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  int v11;
  _QWORD v12[2];

  v3 = sub_1CF7C8424();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A80](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v9 = (char *)v12 - v8;
  result = MEMORY[0x1D17D4320](*(unsigned int *)(v1 + 64), 4, a1);
  if ((_DWORD)result)
  {
    v11 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF790044(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_1CF7C86F4();
  if (v1 == 1)
    v3 = v2 & 0xFFFFFFFB;
  else
    v3 = v2 | 4u;
  return sub_1CF78FF2C(v3);
}

uint64_t sub_1CF7900B8()
{
  return (sub_1CF7C86F4() >> 2) & 1;
}

uint64_t sub_1CF7900D8(char a1)
{
  int v2;
  uint64_t v3;

  v2 = sub_1CF7C86F4();
  if ((a1 & 1) != 0)
    v3 = v2 & 0xFFFFFFFB;
  else
    v3 = v2 | 4u;
  return sub_1CF78FF2C(v3);
}

uint64_t (*sub_1CF790144(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 64);
  *(_BYTE *)(a1 + 12) = (sub_1CF7C86F4() & 4) != 0;
  return sub_1CF790188;
}

uint64_t sub_1CF790188(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(a1 + 12);
  v2 = sub_1CF7C86F4();
  if (v1)
    v3 = v2 & 0xFFFFFFFB;
  else
    v3 = v2 | 4u;
  return sub_1CF78FF2C(v3);
}

uint64_t sub_1CF790200(char a1)
{
  int v2;
  uint64_t v3;

  v2 = sub_1CF7C86F4();
  if ((a1 & 1) != 0)
    v3 = v2 & 0xFFFFFFFB;
  else
    v3 = v2 | 4u;
  return sub_1CF78FF2C(v3);
}

BOOL sub_1CF790244()
{
  return sub_1CF7C86F4() == 0;
}

void sub_1CF790268(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  void *v11;
  _BYTE v12[16];

  v3 = sub_1CF7C8424();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A80](v3);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A80](v5);
  v9 = &v12[-v8];
  if (MEMORY[0x1D17D4320](*(unsigned int *)(v1 + 64), 73, (a1 & 1) == 0))
  {
    v10 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v7);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    v11 = (void *)sub_1CF7C840C();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
    swift_willThrow();

  }
}

void (*sub_1CF79037C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_1CF7C86F4() == 0;
  return sub_1CF7903C0;
}

void sub_1CF7903C0(uint64_t a1)
{
  sub_1CF790268(*(_BYTE *)(a1 + 8));
}

uint64_t sub_1CF7903E4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  int v11;
  _QWORD v12[2];

  v3 = sub_1CF7C8424();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A80](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v9 = (char *)v12 - v8;
  result = MEMORY[0x1D17D4320](*(unsigned int *)(v1 + 64), 73, (a1 & 1) == 0);
  if ((_DWORD)result)
  {
    v11 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF790500@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB28A0);
  MEMORY[0x1E0C80A80](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned int *)(v1 + 64);
  v7 = swift_slowAlloc();
  v8 = MEMORY[0x1D17D432C](v6, 50, v7);
  v9 = sub_1CF7C855C();
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  if (v8 == -1)
  {
    v10(a1, 1, 1, v9);
    JUMPOUT(0x1D17D5694);
  }
  v10(v5, 1, 1, v9);
  sub_1CF7C8544();
  sub_1CF791D64((uint64_t)v5);
  v10(a1, 0, 1, v9);
  return MEMORY[0x1D17D5694](v7, -1, -1);
}

uint64_t sub_1CF790638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;
  int v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];

  sub_1CF78D06C(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB32F0);
  type metadata accessor for _XPCObjectEncoder();
  if (!swift_dynamicCast())
  {
    v5 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003DLL, 0x80000001CF7CD930, 0, v5, v6);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v2 = *(_QWORD *)(v14 + 24);
  if (v2)
  {
    type metadata accessor for RemoteXPCConnection();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      v3 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF78D000();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000006FLL, 0x80000001CF7CD9B0, v2, v3, v4);
LABEL_10:
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
  }
  v8 = *(_DWORD *)(v1 + 64);
  swift_retain();
  v9 = xpc_fd_create(v8);
  if (!v9)
  {
    v12 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000003DLL, 0x80000001CF7CD970, v2, v12, v13);
    goto LABEL_10;
  }
  v10 = v9;
  v11 = *(_QWORD *)(v14 + 32);
  v15[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  v15[4] = sub_1CF788584();
  v15[0] = v14;
  v15[1] = v11;
  result = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 16) = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  XPCFileDescriptor.init(from:)(a1);
  return v2;
}

uint64_t XPCFileDescriptor.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  const _xpc_type_s *v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v12;
  _QWORD *v13;
  xpc_object_t v14[5];
  _QWORD v15[7];

  *(_QWORD *)(v1 + 16) = j__read;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = j__write;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = j__poll;
  *(_QWORD *)(v1 + 56) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7C927C();
  if (v2)
    goto LABEL_11;
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  sub_1CF791DC8();
  sub_1CF7C8FDC();
  v4 = MEMORY[0x1D17D5ACC](v14[0]);
  if (v4 != XPCTypeFD)
  {
    v5 = (const _xpc_type_s *)v4;
    sub_1CF78D06C((uint64_t)a1, (uint64_t)v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3340);
    type metadata accessor for _XPCObjectDecoder();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)(v15[6] + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      v6 = 0;
    }
    v9 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.invalidType(_:expecting:from:userInfo:)(v5, 0, v6, v9, v10);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
    goto LABEL_10;
  }
  v7 = xpc_fd_dup(v14[0]);
  if (v7 < 0)
  {
    v12 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x80000001CF7CD900, 0, v12, v13);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_11:
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for XPCFileDescriptor();
    swift_deallocPartialClassInstance();
    goto LABEL_12;
  }
  v8 = v7;
  swift_unknownObjectRelease();
  *(_DWORD *)(v1 + 64) = v8;
  *(_BYTE *)(v1 + 68) = 1;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_12:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

uint64_t sub_1CF790BAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v31[2];

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB28A0);
  v3 = MEMORY[0x1E0C80A80](v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v3);
  v7 = (char *)v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1CF7CB160;
  v31[1] = v1;
  swift_getMetatypeMetadata();
  v9 = sub_1CF7C888C();
  v11 = v10;
  v12 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
  v13 = sub_1CF791E0C();
  v14 = v13;
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  v15 = MEMORY[0x1E0DEC558];
  *(_QWORD *)(v8 + 96) = MEMORY[0x1E0DEC548];
  *(_QWORD *)(v8 + 104) = v15;
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = v0;
  v16 = *((unsigned int *)v0 + 16);
  v17 = MEMORY[0x1E0DEDC38];
  *(_QWORD *)(v8 + 136) = MEMORY[0x1E0DEDBC8];
  *(_QWORD *)(v8 + 144) = v17;
  *(_DWORD *)(v8 + 112) = v16;
  v18 = 1702195828;
  if (!*((_BYTE *)v0 + 68))
    v18 = 0x65736C6166;
  v19 = 0xE500000000000000;
  if (*((_BYTE *)v0 + 68))
    v19 = 0xE400000000000000;
  *(_QWORD *)(v8 + 176) = v12;
  *(_QWORD *)(v8 + 184) = v13;
  *(_QWORD *)(v8 + 152) = v18;
  *(_QWORD *)(v8 + 160) = v19;
  v20 = swift_slowAlloc();
  v21 = MEMORY[0x1D17D432C](v16, 50, v20);
  v22 = sub_1CF7C855C();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v21 == -1)
  {
    v25 = 1;
  }
  else
  {
    v24(v5, 1, 1, v22);
    sub_1CF7C8544();
    sub_1CF791D64((uint64_t)v5);
    v25 = 0;
  }
  v24(v7, v25, 1, v22);
  MEMORY[0x1D17D5694](v20, -1, -1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v22) == 1)
  {
    sub_1CF791D64((uint64_t)v7);
    v26 = (uint64_t *)(v8 + 192);
    *(_QWORD *)(v8 + 216) = v12;
    *(_QWORD *)(v8 + 224) = v14;
LABEL_12:
    *v26 = 0x29656E6F6E28;
    v29 = 0xE600000000000000;
    goto LABEL_13;
  }
  v27 = sub_1CF7C8550();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
  v26 = (uint64_t *)(v8 + 192);
  *(_QWORD *)(v8 + 216) = v12;
  *(_QWORD *)(v8 + 224) = v14;
  if (!v29)
    goto LABEL_12;
  *v26 = v27;
LABEL_13:
  *(_QWORD *)(v8 + 200) = v29;
  return sub_1CF7C885C();
}

uint64_t sub_1CF790E44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for XPCFileDescriptor();
  v5 = swift_allocObject();
  result = XPCFileDescriptor.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1CF790E98(uint64_t a1)
{
  return sub_1CF790638(a1);
}

uint64_t sub_1CF790EB8()
{
  return sub_1CF790BAC();
}

uint64_t sub_1CF790ED8(uint64_t a1, char a2, char a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int v17;
  int64_t v18;
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, unint64_t, uint64_t);
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;

  v45 = a5;
  v10 = sub_1CF7C8424();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A80](v10);
  v37 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A80](v12);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
    v17 = 251;
  else
    v17 = 56;
  if ((a3 & 1) != 0)
    v17 |= 0x104u;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v18)
  {
    v38 = a4;
    v39 = v5;
    v40 = (char *)&v37 - v15;
    v41 = v11;
    v42 = v10;
    v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v44 = v17;
    result = sub_1CF7B522C(0, v18, 0);
    v20 = v44;
    v21 = 0;
    v19 = v43;
    v22 = a1 + 32;
    v23 = v43[2];
    v24 = v23;
    do
    {
      v25 = *(_DWORD *)(v22 + 4 * v21);
      v43 = v19;
      v26 = v19[3];
      v27 = v23 + v21 + 1;
      if (v23 + v21 >= v26 >> 1)
      {
        result = sub_1CF7B522C(v26 > 1, v23 + v21 + 1, 1);
        v20 = v44;
        v19 = v43;
      }
      ++v21;
      v19[2] = v27;
      v28 = &v19[v24];
      *((_DWORD *)v28 + 8) = v25;
      *((_WORD *)v28 + 18) = v20;
      *((_WORD *)v28 + 19) = 0;
      ++v24;
    }
    while (v18 != v21);
    v11 = v41;
    v10 = v42;
    v5 = v39;
    v16 = v40;
    a4 = v38;
  }
  if ((v45 & 1) == 0)
  {
    v29 = *(double *)&a4 * 1000.0;
    if ((~COERCE__INT64(*(double *)&a4 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v29 > -2147483650.0)
      {
        if (v29 < 2147483650.0)
        {
          v30 = (int)v29;
          goto LABEL_18;
        }
LABEL_31:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v30 = 100;
LABEL_18:
  swift_beginAccess();
  v31 = *(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(v5 + 48);
  v32 = v19[2];
  if (HIDWORD(v32))
  {
    swift_retain();
    v32 = 0xFFFFFFFFLL;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_20:
    v19 = sub_1CF7B451C(0, v19[2], 0, v19);
LABEL_21:
  swift_bridgeObjectRetain();
  v33 = v31(v19 + 4, v32, v30);
  swift_bridgeObjectRelease();
  swift_release();
  if (v33 < 0)
  {
    v34 = swift_bridgeObjectRelease();
    v35 = MEMORY[0x1D17D4314](v34);
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v35)
    {
      v36 = v37;
      POSIXError.init(uncheckedCode:userInfo:)(v35, v37);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v16, v36, v10);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v16);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    swift_willThrow();
  }
  return (uint64_t)v19;
}

_QWORD *XPCFileDescriptor.read(into:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF791460(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1CF791218);
}

uint64_t sub_1CF791218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t inited;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;

  v27 = a5;
  v28 = a6;
  v26 = sub_1CF7C8424();
  v10 = *(_QWORD *)(v26 - 8);
  v11 = MEMORY[0x1E0C80A80](v26);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v11);
  v15 = (char *)&v25 - v14;
  result = swift_beginAccess();
  if (a3)
  {
    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16);
    swift_retain();
    v18 = v17(a1, a3, a4 - a3);
    result = swift_release();
    if (!v18)
    {
      v19 = 0;
      goto LABEL_6;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = v18;
LABEL_6:
      v20 = v28;
      *v28 = v19;
      *((_BYTE *)v20 + 8) = v18 == 0;
      return result;
    }
    if ((v27 & 1) != 0 && ((result = MEMORY[0x1D17D4314](result), (_DWORD)result == 35) || (_DWORD)result == 4))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3240);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
      *(_DWORD *)(inited + 32) = a1;
      v22 = v29;
      sub_1CF790ED8(inited, 1, 0, 0, 1);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        result = swift_setDeallocating();
        v19 = 0;
        goto LABEL_6;
      }
      return swift_setDeallocating();
    }
    else
    {
      v23 = MEMORY[0x1D17D4314](result);
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      if (v23)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v23, (uint64_t)v13);
        v24 = v26;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v26);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v15);
        v24 = v26;
      }
      sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v24);
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *XPCFileDescriptor.write(from:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF791460(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1CF7914AC);
}

_QWORD *sub_1CF791460(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  result = a4(&v7, *(unsigned int *)(v4 + 64), v4, a1, a2, a3, *(_QWORD *)v4);
  if (!v5)
    return (_QWORD *)v7;
  return result;
}

uint64_t sub_1CF7914AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;

  v33 = a5;
  v34 = a6;
  v32 = sub_1CF7C8424();
  v10 = *(_QWORD *)(v32 - 8);
  v11 = MEMORY[0x1E0C80A80](v32);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v11);
  v15 = (char *)&v31 - v14;
  result = swift_beginAccess();
  if (!a3)
    goto LABEL_28;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  swift_retain();
  v18 = v17(a1, a3, a4 - a3);
  result = swift_release();
  if (!v18)
  {
    LOBYTE(v19) = 1;
    goto LABEL_6;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    LOBYTE(v19) = 0;
LABEL_6:
    v20 = v34;
    *v34 = v18;
    *((_BYTE *)v20 + 8) = v19;
    return result;
  }
  if ((v33 & 1) != 0 && ((result = MEMORY[0x1D17D4314](result), (_DWORD)result == 35) || (_DWORD)result == 4))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3240);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_DWORD *)(inited + 32) = a1;
    v22 = v35;
    v23 = sub_1CF790ED8(inited, 0, 1, 0, 1);
    result = swift_setDeallocating();
    if (!v22)
    {
      v24 = *(_QWORD *)(v23 + 16);
      if (!v24)
        goto LABEL_15;
      if ((*(_WORD *)(v23 + 38) & 0x10) != 0)
      {
        LOBYTE(v19) = 1;
        goto LABEL_21;
      }
      if (v24 == 1)
      {
LABEL_15:
        LOBYTE(v19) = 0;
LABEL_21:
        result = swift_bridgeObjectRelease();
        v18 = 0;
        goto LABEL_6;
      }
      v27 = (unsigned __int16 *)(v23 + 46);
      v28 = 1;
      while (1)
      {
        v29 = v28 + 1;
        if (__OFADD__(v28, 1))
          break;
        v30 = *v27;
        v27 += 4;
        v19 = (v30 >> 4) & 1;
        if ((v30 & 0x10) == 0)
        {
          ++v28;
          if (v29 != v24)
            continue;
        }
        goto LABEL_21;
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
  }
  else
  {
    v25 = MEMORY[0x1D17D4314](result);
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v25)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v25, (uint64_t)v13);
      v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v32);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v15);
      v26 = v32;
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v26);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF791720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[2];

  v0 = sub_1CF7C8424();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A80](v0);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v2);
  v6 = (char *)v14 - v5;
  v7 = sub_1CF7C89E8();
  *(_QWORD *)(v7 + 16) = 2;
  *(_QWORD *)(v7 + 32) = -1;
  result = pipe((int *)(v7 + 32));
  if ((_DWORD)result)
  {
    v9 = MEMORY[0x1D17D4314]();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v4);
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v4, v0);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v6);
    }
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  v10 = *(_QWORD *)(v7 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = *(_DWORD *)(v7 + 32);
  type metadata accessor for XPCFileDescriptor();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = j__read;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = j__write;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = j__poll;
  *(_QWORD *)(result + 56) = 0;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = (char *)result;
  *(_DWORD *)(result + 64) = v11;
  *(_BYTE *)(result + 68) = 1;
  if (v10 < 2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = *(_DWORD *)(v7 + 36);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = j__read;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = j__write;
  *(_QWORD *)(v13 + 40) = 0;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 48) = j__poll;
  *(_QWORD *)(v13 + 56) = 0;
  if ((v12 & 0x80000000) == 0)
  {
    *(_DWORD *)(v13 + 64) = v12;
    *(_BYTE *)(v13 + 68) = 1;
    return (uint64_t)v6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1CF791918(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v22 = sub_1CF7C8424();
  v3 = *(_QWORD *)(v22 - 8);
  v4 = MEMORY[0x1E0C80A80](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v4);
  v8 = (char *)&v21 - v7;
  v9 = sub_1CF7C855C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A80](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  v13 = sub_1CF7C852C();
  v14 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v14(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v23 = -1;
  MEMORY[0x1E0C80A80](result);
  *(&v21 - 2) = (uint64_t)&v23;
  v16 = sub_1CF7C8538();
  if (v1)
    return v14(a1, v9);
  if ((v23 & 0x80000000) == 0)
  {
    v14(a1, v9);
    v17 = v23;
    type metadata accessor for XPCFileDescriptor();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = j__read;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = j__write;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = j__poll;
    *(_QWORD *)(result + 56) = 0;
    if ((v17 & 0x80000000) == 0)
    {
      *(_DWORD *)(result + 64) = v17;
      *(_BYTE *)(result + 68) = 1;
      return result;
    }
    goto LABEL_12;
  }
  v18 = MEMORY[0x1D17D4314](v16);
  sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
  if (v18)
  {
    POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v6);
    v19 = v6;
    v20 = v22;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v19, v22);
  }
  else
  {
    POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    v20 = v22;
  }
  sub_1CF7C840C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v20);
  swift_willThrow();
  return v14(a1, v9);
}

void sub_1CF791B7C(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD v15[4];

  v5 = sub_1CF7C855C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)a2;
  v9 = *(void **)(a2 + 8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, v5);
  LOBYTE(a2) = sub_1CF7C852C();
  v11 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v12 = v11(v8, v5);
  if ((a2 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  MEMORY[0x1E0C80A80](v12);
  *(_QWORD *)&v15[-4] = v10;
  *(_QWORD *)&v15[-2] = v9;
  sub_1CF7C8538();
  if (v2)
  {
    v11(a1, v5);

    return;
  }
  v11(a1, v5);

  v13 = v15[3];
  type metadata accessor for XPCFileDescriptor();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = j__read;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = j__write;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = j__poll;
  *(_QWORD *)(v14 + 56) = 0;
  if (v13 < 0)
    goto LABEL_8;
  *(_DWORD *)(v14 + 64) = v13;
  *(_BYTE *)(v14 + 68) = 1;
}

uint64_t type metadata accessor for XPCFileDescriptor()
{
  return objc_opt_self();
}

uint64_t sub_1CF791D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF791D64(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB28A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1CF791DC8()
{
  unint64_t result;

  result = qword_1EFBB3330;
  if (!qword_1EFBB3330)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCObjectContainer, &type metadata for XPCObjectContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB3330);
  }
  return result;
}

unint64_t sub_1CF791E0C()
{
  unint64_t result;

  result = qword_1ED56DE30;
  if (!qword_1ED56DE30)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED56DE30);
  }
  return result;
}

uint64_t sub_1CF791E68@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF7C86F4();
  *a1 = (result & 4) != 0;
  return result;
}

uint64_t sub_1CF791EA0@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF7C86F4();
  *a1 = (_DWORD)result == 0;
  return result;
}

void sub_1CF791ED8(char *a1)
{
  sub_1CF790268(*a1);
}

uint64_t method lookup function for XPCFileDescriptor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of XPCFileDescriptor.withUnsafeUnderlyingFileDescriptor<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of XPCFileDescriptor.duplicate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of XPCFileDescriptor.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setBlocking(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setSignalling(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of XPCFileDescriptor.url.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of XPCFileDescriptor.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of XPCFileDescriptor.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

_QWORD *initializeBufferWithCopyOfBuffer for XPCFileDescriptor.WriteOptions(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for XPCFileDescriptor.WriteOptions(id *a1)
{

}

uint64_t assignWithCopy for XPCFileDescriptor.WriteOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for XPCFileDescriptor.WriteOptions(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileDescriptor.WriteOptions(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileDescriptor.WriteOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCFileDescriptor.WriteOptions()
{
  return &type metadata for XPCFileDescriptor.WriteOptions;
}

uint64_t sub_1CF792240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF792264(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t *, int *, char *);
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *, int *, char *))(v3 + 16);
  v8 = a1;
  HIDWORD(v6) = a3;
  v7 = a2;
  v4(&v6, &v8, &v7, (char *)&v6 + 4);
  return v6;
}

uint64_t sub_1CF7922A8@<X0>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1CF7922E4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *))(v3 + 16);
  v9 = a1;
  v7 = a3;
  v8 = a2;
  v4(&v6, &v9, &v8, &v7);
  return v6;
}

uint64_t sub_1CF792328@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

void sub_1CF79235C(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1CF78E828(a1, *(void **)(v2 + 16), *(__CFFileSecurity **)(v2 + 24), a2);
}

uint64_t sub_1CF792374(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF78E6B0(a1, *(_DWORD **)(v1 + 16));
}

uint64_t static TypeUtils.typeName(_:)()
{
  return sub_1CF7C92D0();
}

BOOL static TypeUtils.NominalTypeKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TypeUtils.NominalTypeKind.hash(into:)()
{
  return sub_1CF7C9240();
}

uint64_t TypeUtils.NominalTypeKind.hashValue.getter()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

BOOL sub_1CF792430(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CF792444()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF792488()
{
  return sub_1CF7C9240();
}

uint64_t sub_1CF7924B0()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

unint64_t sub_1CF7924F4()
{
  unint64_t result;

  result = qword_1EFBB2A38;
  if (!qword_1EFBB2A38)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for TypeUtils.NominalTypeKind, &type metadata for TypeUtils.NominalTypeKind);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A38);
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeUtils()
{
  return &type metadata for TypeUtils;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TypeUtils.NominalTypeKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeUtils.NominalTypeKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF792630 + 4 * byte_1CF7CB26D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF792664 + 4 * asc_1CF7CB268[v4]))();
}

uint64_t sub_1CF792664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF79266C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF792674);
  return result;
}

uint64_t sub_1CF792680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF792688);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF79268C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF792694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7926A0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1CF7926A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TypeUtils.NominalTypeKind()
{
  return &type metadata for TypeUtils.NominalTypeKind;
}

uint64_t NSFileHandle.url.getter@<X0>(char *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB28A0);
  MEMORY[0x1E0C80A80](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, sel_fileDescriptor);
  v7 = swift_slowAlloc();
  v8 = MEMORY[0x1D17D432C](v6, 50, v7);
  v9 = sub_1CF7C855C();
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  if (v8 == -1)
  {
    v10(a1, 1, 1, v9);
    JUMPOUT(0x1D17D5694);
  }
  v10(v5, 1, 1, v9);
  sub_1CF7C8544();
  sub_1CF791D64((uint64_t)v5);
  v10(a1, 0, 1, v9);
  return MEMORY[0x1D17D5694](v7, -1, -1);
}

uint64_t sub_1CF792808()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF792834 + 4 * byte_1CF7CB320[*v0]))(0x6E69616D6F64, 0xE600000000000000);
}

uint64_t sub_1CF792834()
{
  return 1701080931;
}

uint64_t sub_1CF792844()
{
  return 0x6F666E4972657375;
}

unint64_t sub_1CF79285C()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1CF792878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF795E58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF79289C()
{
  return 0;
}

void sub_1CF7928A8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1CF7928B4()
{
  sub_1CF79490C();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF7928DC()
{
  sub_1CF79490C();
  return sub_1CF7C92C4();
}

uint64_t sub_1CF792904@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_1CF79290C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1CF792914()
{
  sub_1CF796038();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF79293C()
{
  sub_1CF796038();
  return sub_1CF7C92C4();
}

uint64_t sub_1CF792964(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  void *v98;
  id v99;
  void *v100;
  uint64_t v101;
  void *v102;
  id v103;
  int64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t (*v122)(uint64_t);
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  id v136;
  void *v137;
  void *v138;
  unint64_t v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  void *v152;
  id v153;
  id v154;
  void *v155;
  unint64_t v156;
  unint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  _BYTE v167[16];
  int64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int64_t v187;
  unint64_t v188;
  __int128 v189;
  uint64_t v190;
  int64_t v191;
  __int128 *v192;
  uint64_t v193;
  _OWORD *v194;
  uint64_t v195;
  _BYTE *v196;
  unint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  id v223;
  unint64_t v224;
  _QWORD v225[7];

  v225[4] = *MEMORY[0x1E0C80C08];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v3);
  v181 = &v167[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1CF7C861C();
  v178 = *(_QWORD *)(v5 - 8);
  v179 = v5;
  MEMORY[0x1E0C80A80](v5);
  v173 = &v167[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB28A0);
  MEMORY[0x1E0C80A80](v7);
  v180 = &v167[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1CF7C855C();
  v183 = *(_QWORD *)(v9 - 8);
  v184 = v9;
  MEMORY[0x1E0C80A80](v9);
  v174 = &v167[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v195 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2AF8);
  v11 = *(_QWORD *)(v195 - 8);
  MEMORY[0x1E0C80A80](v195);
  v196 = &v167[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = objc_msgSend(v1, sel_userInfo);
  v14 = sub_1CF7C8778();

  v197 = v14;
  *(_QWORD *)&v210 = v1;
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  swift_bridgeObjectRetain();
  v15 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B00);
  v16 = swift_dynamicCast();
  v175 = v11;
  if (v16)
  {
    sub_1CF796180(&v220, (uint64_t)&v223);
    v17 = sub_1CF7C8850();
    v19 = v18;
    v20 = sub_1CF7C8850();
    if (*(_QWORD *)(v14 + 16) && (v22 = sub_1CF779644(v20, v21), (v23 & 1) != 0))
    {
      sub_1CF778DDC(*(_QWORD *)(v14 + 56) + 32 * v22, (uint64_t)&v216);
    }
    else
    {
      v216 = 0u;
      v217 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CF78D06C((uint64_t)&v223, (uint64_t)&v220);
    if (*((_QWORD *)&v217 + 1))
    {
      sub_1CF779634(&v216, &v218);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v220, *((uint64_t *)&v221 + 1));
      v24 = sub_1CF7C84B4();
      if (v25)
      {
        *((_QWORD *)&v219 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v218 = v24;
        *((_QWORD *)&v218 + 1) = v25;
      }
      else
      {
        v218 = 0u;
        v219 = 0u;
      }
      sub_1CF778FFC((uint64_t)&v216, &qword_1ED56DF38);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
    if (*((_QWORD *)&v219 + 1))
    {
      sub_1CF779634(&v218, &v210);
      v26 = v197;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v204 = v26;
      v197 = 0x8000000000000000;
      sub_1CF7C0590(&v210, v17, v19, isUniquelyReferenced_nonNull_native);
      v197 = v204;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CF778FFC((uint64_t)&v218, &qword_1ED56DF38);
      sub_1CF78B810(v17, v19, &v210);
      swift_bridgeObjectRelease();
      sub_1CF778FFC((uint64_t)&v210, &qword_1ED56DF38);
    }
    v28 = sub_1CF7C8850();
    v30 = v29;
    v31 = sub_1CF7C8850();
    v33 = v197;
    if (*(_QWORD *)(v197 + 16) && (v34 = sub_1CF779644(v31, v32), (v35 & 1) != 0))
    {
      sub_1CF778DDC(*(_QWORD *)(v33 + 56) + 32 * v34, (uint64_t)&v212);
    }
    else
    {
      v212 = 0u;
      v213 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1CF78D06C((uint64_t)&v223, (uint64_t)&v210);
    if (*((_QWORD *)&v213 + 1))
    {
      sub_1CF779634(&v212, &v214);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v210, *((uint64_t *)&v211 + 1));
      v36 = sub_1CF7C84A8();
      if (v37)
      {
        *((_QWORD *)&v215 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v214 = v36;
        *((_QWORD *)&v214 + 1) = v37;
      }
      else
      {
        v214 = 0u;
        v215 = 0u;
      }
      sub_1CF778FFC((uint64_t)&v212, &qword_1ED56DF38);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v210);
    if (*((_QWORD *)&v215 + 1))
    {
      sub_1CF779634(&v214, &v204);
      v38 = v197;
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v197 = 0x8000000000000000;
      *(_QWORD *)&v198 = v38;
      sub_1CF7C0590(&v204, v28, v30, v39);
      v197 = v198;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CF778FFC((uint64_t)&v214, &qword_1ED56DF38);
      sub_1CF78B810(v28, v30, &v204);
      swift_bridgeObjectRelease();
      sub_1CF778FFC((uint64_t)&v204, &qword_1ED56DF38);
    }
    v40 = sub_1CF7C8850();
    v42 = v41;
    v43 = sub_1CF7C8850();
    v45 = v197;
    if (*(_QWORD *)(v197 + 16) && (v46 = sub_1CF779644(v43, v44), (v47 & 1) != 0))
    {
      sub_1CF778DDC(*(_QWORD *)(v45 + 56) + 32 * v46, (uint64_t)&v206);
    }
    else
    {
      v206 = 0u;
      v207 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1CF78D06C((uint64_t)&v223, (uint64_t)&v204);
    if (*((_QWORD *)&v207 + 1))
    {
      sub_1CF779634(&v206, &v208);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v204, v205);
      v48 = sub_1CF7C84C0();
      if (v49)
      {
        *((_QWORD *)&v209 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v208 = v48;
        *((_QWORD *)&v208 + 1) = v49;
      }
      else
      {
        v208 = 0u;
        v209 = 0u;
      }
      sub_1CF778FFC((uint64_t)&v206, &qword_1ED56DF38);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v204);
    if (*((_QWORD *)&v209 + 1))
    {
      sub_1CF779634(&v208, &v198);
      v50 = v197;
      v51 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v202 = v50;
      v197 = 0x8000000000000000;
      sub_1CF7C0590(&v198, v40, v42, v51);
      v197 = v202;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CF778FFC((uint64_t)&v208, &qword_1ED56DF38);
      sub_1CF78B810(v40, v42, &v198);
      swift_bridgeObjectRelease();
      sub_1CF778FFC((uint64_t)&v198, &qword_1ED56DF38);
    }
    v52 = sub_1CF7C8850();
    v54 = v53;
    v55 = sub_1CF7C8850();
    v57 = v197;
    if (*(_QWORD *)(v197 + 16) && (v58 = sub_1CF779644(v55, v56), (v59 & 1) != 0))
    {
      sub_1CF778DDC(*(_QWORD *)(v57 + 56) + 32 * v58, (uint64_t)&v200);
    }
    else
    {
      v200 = 0u;
      v201 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1CF78D06C((uint64_t)&v223, (uint64_t)&v198);
    if (*((_QWORD *)&v201 + 1))
    {
      sub_1CF779634(&v200, &v202);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v198, v199);
      v60 = sub_1CF7C849C();
      if (v61)
      {
        *((_QWORD *)&v203 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v202 = v60;
        *((_QWORD *)&v202 + 1) = v61;
      }
      else
      {
        v202 = 0u;
        v203 = 0u;
      }
      sub_1CF778FFC((uint64_t)&v200, &qword_1ED56DF38);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v198);
    if (*((_QWORD *)&v203 + 1))
    {
      sub_1CF779634(&v202, &v198);
      v62 = v197;
      v63 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v200 = v62;
      v197 = 0x8000000000000000;
      sub_1CF7C0590(&v198, v52, v54, v63);
      v197 = v200;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CF778FFC((uint64_t)&v202, &qword_1ED56DF38);
      sub_1CF78B810(v52, v54, &v198);
      swift_bridgeObjectRelease();
      sub_1CF778FFC((uint64_t)&v198, &qword_1ED56DF38);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v223);
  }
  else
  {
    *(_QWORD *)&v222 = 0;
    v220 = 0u;
    v221 = 0u;
    swift_bridgeObjectRelease();
    sub_1CF778FFC((uint64_t)&v220, &qword_1EFBB2B08);
  }
  v64 = v197;
  if (*(_QWORD *)(v197 + 16))
  {
    LOBYTE(v223) = 2;
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2A48);
    v66 = sub_1CF796140(&qword_1EFBB2B10, &qword_1EFBB2A48, MEMORY[0x1E0DED188]);
    sub_1CF796038();
    v170 = v65;
    v171 = a1;
    v169 = v66;
    sub_1CF7C90E4();
    v67 = *(_QWORD *)(v64 + 64);
    v185 = v64 + 64;
    v68 = 1 << *(_BYTE *)(v64 + 32);
    v69 = -1;
    if (v68 < 64)
      v69 = ~(-1 << v68);
    v70 = v69 & v67;
    v192 = &v221;
    v194 = v225;
    v190 = *MEMORY[0x1E0CB3388];
    v187 = (unint64_t)(v68 + 63) >> 6;
    v168 = v187 - 1;
    swift_bridgeObjectRetain();
    v71 = 0;
    v193 = MEMORY[0x1E0DEE9B8] + 8;
    v186 = (unint64_t)"Unsupported type";
    v188 = 0x80000001CF7CDC70;
    v189 = xmmword_1CF7CA390;
    v176 = xmmword_1CF7CB5D0;
    v177 = xmmword_1CF7CB5C0;
    v172 = 0x80000001CF7CDC50;
    v182 = v64;
    while (v70)
    {
      v79 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      v80 = v79 | (v71 << 6);
LABEL_63:
      v81 = *(_QWORD *)(v64 + 56);
      v82 = (_QWORD *)(*(_QWORD *)(v64 + 48) + 16 * v80);
      v83 = v82[1];
      *(_QWORD *)&v220 = *v82;
      *((_QWORD *)&v220 + 1) = v83;
      sub_1CF778DDC(v81 + 32 * v80, (uint64_t)v192);
      swift_bridgeObjectRetain();
LABEL_73:
      sub_1CF7960B4((uint64_t)&v220, (uint64_t)&v223);
      v86 = v224;
      if (!v224)
      {
        swift_release();
        (*(void (**)(_BYTE *, uint64_t))(v175 + 8))(v196, v195);
        v150 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v151 = MEMORY[0x1E0DEA968];
        v152 = (void *)sub_1CF7C876C();
        swift_bridgeObjectRelease();
        v223 = 0;
        v153 = objc_msgSend(v150, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v152, 1, &v223);

        v154 = v223;
        if (v153)
        {
          v155 = (void *)sub_1CF7C858C();
          v157 = v156;

          v223 = v155;
          v224 = v157;
          LOBYTE(v220) = 3;
          sub_1CF7960FC();
          sub_1CF7C90FC();
          sub_1CF778360((uint64_t)v155, v157);
        }
        else
        {
          v158 = v154;
          v159 = (void *)sub_1CF7C8508();

          swift_willThrow();
          sub_1CF7C8A60();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
          v160 = swift_allocObject();
          *(_OWORD *)(v160 + 16) = v189;
          v223 = v159;
          v161 = v159;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
          v162 = sub_1CF7C888C();
          v164 = v163;
          *(_QWORD *)(v160 + 56) = v151;
          *(_QWORD *)(v160 + 64) = sub_1CF791E0C();
          *(_QWORD *)(v160 + 32) = v162;
          *(_QWORD *)(v160 + 40) = v164;
          sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
          v165 = (void *)sub_1CF7C8B08();
          sub_1CF7C867C();
          swift_bridgeObjectRelease();

        }
        return swift_bridgeObjectRelease();
      }
      v87 = v223;
      sub_1CF779634(v194, &v220);
      sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(_QWORD *)&v210 = v87;
        *((_QWORD *)&v210 + 1) = v86;
        sub_1CF7C8DA8();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
        swift_bridgeObjectRelease();
        goto LABEL_100;
      }
      sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(_QWORD *)&v210 = v87;
        *((_QWORD *)&v210 + 1) = v86;
        sub_1CF7C8DB4();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
LABEL_100:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
        sub_1CF79607C(0, &qword_1EFBB2AD0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v102 = (void *)v204;
          if (CFNumberIsFloatType((CFNumberRef)v204))
          {
            objc_msgSend(v102, sel_doubleValue);
            *(_QWORD *)&v210 = v87;
            *((_QWORD *)&v210 + 1) = v86;
            sub_1CF7C8DC0();
          }
          else
          {
            v135 = (void *)sub_1CF7C8AFC();
            v136 = objc_msgSend(v102, sel_compare_, v135);

            if (v136 == (id)-1)
            {
              objc_msgSend(v102, sel_longLongValue);
              *(_QWORD *)&v210 = v87;
              *((_QWORD *)&v210 + 1) = v86;
              sub_1CF7C8DE4();
            }
            else
            {
              objc_msgSend(v102, sel_unsignedLongLongValue);
              *(_QWORD *)&v210 = v87;
              *((_QWORD *)&v210 + 1) = v86;
              sub_1CF7C8DF0();
            }
          }
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
          swift_bridgeObjectRelease_n();

        }
        else
        {
          v191 = v71;
          sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
          v111 = (uint64_t)v180;
          v112 = v184;
          v113 = swift_dynamicCast();
          v114 = v183;
          v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v183 + 56);
          v116 = (uint64_t)v181;
          if ((v113 & 1) != 0)
          {
            v115(v111, 0, 1, v112);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v111, 1, v112) != 1)
            {
              v117 = v183;
              v118 = v174;
              v119 = v111;
              v120 = v184;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v183 + 32))(v174, v119, v184);
              *(_QWORD *)&v210 = v87;
              *((_QWORD *)&v210 + 1) = v86;
              v121 = (unint64_t *)&unk_1EFBB2B30;
              v122 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
              v123 = MEMORY[0x1E0CB0010];
LABEL_105:
              sub_1CF78D2BC(v121, v122, v123);
              sub_1CF7C8DD8();
              swift_bridgeObjectRelease();
              (*(void (**)(_BYTE *, uint64_t))(v117 + 8))(v118, v120);
              goto LABEL_117;
            }
          }
          else
          {
            v115(v111, 1, 1, v112);
          }
          sub_1CF778FFC(v111, &qword_1EFBB28A0);
          sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
          v124 = v179;
          v125 = swift_dynamicCast();
          v126 = v178;
          v127 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
          if (v125)
          {
            v127(v116, 0, 1, v124);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v116, 1, v124) != 1)
            {
              v117 = v178;
              v120 = v179;
              v118 = v173;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v178 + 32))(v173, v116, v179);
              *(_QWORD *)&v210 = v87;
              *((_QWORD *)&v210 + 1) = v86;
              v121 = &qword_1EFBB2728;
              v122 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
              v123 = MEMORY[0x1E0CB09B8];
              goto LABEL_105;
            }
          }
          else
          {
            v127(v116, 1, 1, v124);
          }
          sub_1CF778FFC(v116, &qword_1ED56E310);
          sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
          if (swift_dynamicCast())
          {
            v137 = (void *)v204;
            v138 = (void *)sub_1CF7C84FC();
            *(_QWORD *)&v210 = v87;
            *((_QWORD *)&v210 + 1) = v86;
            *(_QWORD *)&v204 = v138;
            sub_1CF796140(&qword_1EFBB2B28, &qword_1EFBB2AF8, MEMORY[0x1E0DED188]);
            sub_1CF7948C8();
            sub_1CF7C90FC();
            swift_bridgeObjectRelease();

LABEL_117:
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
            swift_bridgeObjectRelease();
            v71 = v191;
          }
          else
          {
            swift_bridgeObjectRelease();
            v139 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
            sub_1CF78D000();
            v140 = (void *)swift_allocError();
            static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, v172, 0, v139, v141);
            swift_bridgeObjectRelease();
            swift_willThrow();
            v142 = v191;
            if (v87 == (id)0xD00000000000001DLL && v86 == v188 || (sub_1CF7C8FC4() & 1) != 0)
            {
              v88 = v140;
              swift_bridgeObjectRelease();
              v89 = sub_1CF7C8850();
              v91 = v197;
              if (*(_QWORD *)(v197 + 16) && (v92 = sub_1CF779644(v89, v90), (v93 & 1) != 0))
              {
                sub_1CF778DDC(*(_QWORD *)(v91 + 56) + 32 * v92, (uint64_t)&v210);
              }
              else
              {
                v210 = 0u;
                v211 = 0u;
              }
              swift_bridgeObjectRelease();
              v94 = *((_QWORD *)&v211 + 1);
              sub_1CF778FFC((uint64_t)&v210, &qword_1ED56DF38);
              if (v94)
              {
                sub_1CF7C8A78();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
                v72 = swift_allocObject();
                *(_OWORD *)(v72 + 16) = v189;
                *(_QWORD *)&v210 = v140;
                v73 = v140;
                __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
                v74 = sub_1CF7C888C();
                v75 = v142;
                v77 = v76;
                *(_QWORD *)(v72 + 56) = MEMORY[0x1E0DEA968];
                *(_QWORD *)(v72 + 64) = sub_1CF791E0C();
                *(_QWORD *)(v72 + 32) = v74;
                *(_QWORD *)(v72 + 40) = v77;
                v71 = v75;
                sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
                v78 = (void *)sub_1CF7C8B08();
                sub_1CF7C867C();
                swift_bridgeObjectRelease();

                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
              }
              else
              {
                v95 = v197;
                if (!*(_QWORD *)(v197 + 16)
                  || (v96 = sub_1CF779644(0xD00000000000001DLL, v186 | 0x8000000000000000), (v97 & 1) == 0)
                  || (sub_1CF778DDC(*(_QWORD *)(v95 + 56) + 32 * v96, (uint64_t)&v210),
                      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B20),
                      (swift_dynamicCast() & 1) == 0))
                {
                  v104 = v142;
                  goto LABEL_96;
                }
                if (*(_QWORD *)(v204 + 16))
                {
                  v191 = v142;
                  v98 = *(void **)(v204 + 32);
                  v99 = v98;
                  swift_bridgeObjectRelease();
                  v100 = (void *)sub_1CF7C84FC();
                  *(_QWORD *)&v210 = sub_1CF7C8850();
                  *((_QWORD *)&v210 + 1) = v101;
                  *(_QWORD *)&v204 = v100;
                  sub_1CF796140(&qword_1EFBB2B28, &qword_1EFBB2AF8, MEMORY[0x1E0DED188]);
                  sub_1CF7948C8();
                  sub_1CF7C90FC();
                  swift_bridgeObjectRelease();

                  sub_1CF7C8A78();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
                  v144 = swift_allocObject();
                  *(_OWORD *)(v144 + 16) = v189;
                  *(_QWORD *)&v210 = v140;
                  v145 = v140;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
                  v146 = sub_1CF7C888C();
                  v148 = v147;
                  *(_QWORD *)(v144 + 56) = MEMORY[0x1E0DEA968];
                  *(_QWORD *)(v144 + 64) = sub_1CF791E0C();
                  *(_QWORD *)(v144 + 32) = v146;
                  *(_QWORD *)(v144 + 40) = v148;
                  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
                  v149 = (void *)sub_1CF7C8B08();
                  sub_1CF7C867C();

                  swift_bridgeObjectRelease();
                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
                  v71 = v191;
                }
                else
                {
                  v104 = v142;
                  swift_bridgeObjectRelease();
LABEL_96:
                  sub_1CF7C8A60();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
                  v105 = swift_allocObject();
                  *(_OWORD *)(v105 + 16) = v189;
                  *(_QWORD *)&v210 = v140;
                  v106 = v140;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
                  v107 = sub_1CF7C888C();
                  v109 = v108;
                  *(_QWORD *)(v105 + 56) = MEMORY[0x1E0DEA968];
                  *(_QWORD *)(v105 + 64) = sub_1CF791E0C();
                  *(_QWORD *)(v105 + 32) = v107;
                  *(_QWORD *)(v105 + 40) = v109;
                  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
                  v110 = (void *)sub_1CF7C8B08();
                  sub_1CF7C867C();
                  swift_bridgeObjectRelease();

                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
                  v71 = v104;
                }
              }
            }
            else
            {
              v191 = v142;
              sub_1CF778DDC((uint64_t)&v220, (uint64_t)&v210);
              v103 = v140;
              sub_1CF7C888C();
              *(_QWORD *)&v210 = v87;
              *((_QWORD *)&v210 + 1) = v86;
              swift_bridgeObjectRetain();
              sub_1CF7C8DA8();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1CF7C8A78();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
              v128 = swift_allocObject();
              *(_OWORD *)(v128 + 16) = v176;
              v129 = MEMORY[0x1E0DEA968];
              *(_QWORD *)(v128 + 56) = MEMORY[0x1E0DEA968];
              v130 = sub_1CF791E0C();
              *(_QWORD *)(v128 + 64) = v130;
              *(_QWORD *)(v128 + 32) = v87;
              *(_QWORD *)(v128 + 40) = v86;
              *(_QWORD *)&v210 = v140;
              v131 = v140;
              __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
              v132 = sub_1CF7C888C();
              *(_QWORD *)(v128 + 96) = v129;
              *(_QWORD *)(v128 + 104) = v130;
              *(_QWORD *)(v128 + 72) = v132;
              *(_QWORD *)(v128 + 80) = v133;
              sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
              v134 = (void *)sub_1CF7C8B08();
              sub_1CF7C867C();
              swift_bridgeObjectRelease();

              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
              v64 = v182;
              v71 = v191;
            }
          }
        }
      }
    }
    v84 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
LABEL_134:
      __break(1u);
    }
    if (v84 >= v187)
      goto LABEL_72;
    v85 = *(_QWORD *)(v185 + 8 * v84);
    if (v85)
    {
LABEL_67:
      v70 = (v85 - 1) & v85;
      v80 = __clz(__rbit64(v85)) + (v84 << 6);
      v71 = v84;
      goto LABEL_63;
    }
    v71 += 2;
    if (v84 + 1 >= v187)
    {
      v71 = v84;
LABEL_72:
      v70 = 0;
      v221 = 0u;
      v222 = 0u;
      v220 = 0u;
      goto LABEL_73;
    }
    v85 = *(_QWORD *)(v185 + 8 * v71);
    if (v85)
    {
LABEL_70:
      v84 = v71;
      goto LABEL_67;
    }
    v143 = v84 + 2;
    if (v84 + 2 >= v187)
      goto LABEL_72;
    v85 = *(_QWORD *)(v185 + 8 * v143);
    if (!v85)
    {
      v71 = v84 + 3;
      if (v84 + 3 >= v187)
      {
        v71 = v84 + 2;
        goto LABEL_72;
      }
      v85 = *(_QWORD *)(v185 + 8 * v71);
      if (v85)
        goto LABEL_70;
      v143 = v84 + 4;
      if (v84 + 4 >= v187)
        goto LABEL_72;
      v85 = *(_QWORD *)(v185 + 8 * v143);
      if (!v85)
      {
        while (1)
        {
          v84 = v143 + 1;
          if (__OFADD__(v143, 1))
            goto LABEL_134;
          if (v84 >= v187)
            break;
          v85 = *(_QWORD *)(v185 + 8 * v84);
          ++v143;
          if (v85)
            goto LABEL_67;
        }
        v71 = v168;
        goto LABEL_72;
      }
    }
    v84 = v143;
    goto LABEL_67;
  }
  return swift_bridgeObjectRelease();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  sub_1CF7948C8();
  return sub_1CF7C90FC();
}

uint64_t NSError.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2A48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF79490C();
  sub_1CF7C9294();
  v9 = objc_msgSend(v3, sel_domain);
  sub_1CF7C8850();

  v11[15] = 0;
  sub_1CF7C8DA8();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_code);
    v11[14] = 1;
    sub_1CF7C8DCC();
    sub_1CF792964((uint64_t)v8);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

_QWORD *KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF794C48(a1, a2, a3, a4, (_QWORD *(*)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED7C0]);
}

_QWORD *NSError.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2A60);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF79490C();
  sub_1CF7C9288();
  if (!v1)
  {
    v15 = 0;
    sub_1CF7C8D24();
    v14 = 1;
    v13 = sub_1CF7C8D48();
    sub_1CF794DFC();
    v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v10 = (void *)sub_1CF7C882C();
    swift_bridgeObjectRelease();
    v11 = (void *)sub_1CF7C876C();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, v13, v11);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

id NSErrorContainer.rawValue.getter()
{
  id *v0;

  return *v0;
}

void NSErrorContainer.rawValue.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*NSErrorContainer.rawValue.modify())()
{
  return nullsub_1;
}

void __swiftcall NSErrorContainer.init(rawValue:)(Mercury::NSErrorContainer *__return_ptr retstr, NSError *rawValue)
{
  retstr->rawValue.super.isa = (Class)rawValue;
}

unint64_t sub_1CF7948C8()
{
  unint64_t result;

  result = qword_1EFBB2A40;
  if (!qword_1EFBB2A40)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for NSErrorContainer, &type metadata for NSErrorContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A40);
  }
  return result;
}

unint64_t sub_1CF79490C()
{
  unint64_t result;

  result = qword_1EFBB2A50;
  if (!qword_1EFBB2A50)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB4A4, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A50);
  }
  return result;
}

unint64_t sub_1CF794950()
{
  unint64_t result;

  result = qword_1EFBB2A58;
  if (!qword_1EFBB2A58)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for NSErrorContainer, &type metadata for NSErrorContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A58);
  }
  return result;
}

uint64_t NSErrorContainer.encode(to:)(_QWORD *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t NSErrorContainer.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  _QWORD v7[5];

  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  sub_1CF78D06C(a1, (uint64_t)v7);
  v5 = NSError.init(from:)(v7);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

_QWORD *sub_1CF794A38@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_1CF794A44@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_1CF794A50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  _QWORD v7[5];

  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  sub_1CF78D06C(a1, (uint64_t)v7);
  v5 = NSError.init(from:)(v7);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1CF794AD4(_QWORD *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  sub_1CF7948C8();
  return sub_1CF7C90F0();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  sub_1CF794950();
  result = sub_1CF7C9048();
  if (!v0)
    return v2;
  return result;
}

uint64_t TopLevelEncoder.encode(_:)()
{
  sub_1CF7948C8();
  return sub_1CF7C8718();
}

_QWORD *TopLevelDecoder.decode(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF794C48(a1, a2, a3, a4, MEMORY[0x1E0C95EA0]);
}

_QWORD *sub_1CF794C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;

  v10 = sub_1CF794950();
  result = a5(&v12, &type metadata for NSErrorContainer, a2, &type metadata for NSErrorContainer, v10, a3, a4);
  if (!v5)
    return (_QWORD *)v12;
  return result;
}

uint64_t sub_1CF794CBC()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2AB8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CF7CB5E0;
  *(_QWORD *)(v0 + 32) = sub_1CF79607C(0, &qword_1EFBB2AC0);
  *(_QWORD *)(v0 + 40) = sub_1CF79607C(0, &qword_1EFBB2AC8);
  *(_QWORD *)(v0 + 48) = sub_1CF79607C(0, &qword_1EFBB2EC0);
  *(_QWORD *)(v0 + 56) = sub_1CF79607C(0, &qword_1EFBB2AD0);
  *(_QWORD *)(v0 + 64) = sub_1CF79607C(0, &qword_1EFBB2AD8);
  *(_QWORD *)(v0 + 72) = sub_1CF79607C(0, &qword_1EFBB2AE0);
  *(_QWORD *)(v0 + 80) = sub_1CF79607C(0, &qword_1EFBB2AE8);
  *(_QWORD *)(v0 + 88) = sub_1CF79607C(0, &qword_1EFBB2AF0);
  *(_QWORD *)(v0 + 96) = sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  return v0;
}

unint64_t sub_1CF794DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  char *v10;
  _QWORD *v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t DynamicType;
  _QWORD *v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t MetatypeMetadata;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C08];
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2A88);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A80](v0);
  v46 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v48) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2A60);
  sub_1CF796140(&qword_1EFBB2A90, &qword_1EFBB2A60, MEMORY[0x1E0DED060]);
  sub_1CF795FF4();
  sub_1CF7C9048();
  v45 = v0;
  v13 = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1) >> 60 != 15)
  {
    v14 = v50;
    sub_1CF79607C(0, (unint64_t *)&unk_1EFBB2E60);
    sub_1CF794CBC();
    sub_1CF7C8A90();
    swift_bridgeObjectRelease();
    if (MetatypeMetadata)
    {
      sub_1CF779634(&v48, &v50);
      sub_1CF778DDC((uint64_t)&v50, (uint64_t)&v48);
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2AB0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1CF77834C(v14, v13);
        v11 = v47;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
        return (unint64_t)v11;
      }
      __swift_project_boxed_opaque_existential_1(&v50, v51);
      DynamicType = swift_getDynamicType();
      MetatypeMetadata = swift_getMetatypeMetadata();
      *(_QWORD *)&v48 = DynamicType;
      sub_1CF7C8C1C();
      v37 = (void *)swift_allocError();
      v43 = v39;
      v44 = v14;
      v40 = sub_1CF7C903C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
      *(_QWORD *)(inited + 56) = &_s10_CodingKeyON;
      *(_QWORD *)(inited + 64) = sub_1CF79490C();
      *(_BYTE *)(inited + 32) = 3;
      v47 = (_QWORD *)v40;
      sub_1CF7C80A4(inited);
      static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(v36, (uint64_t)&v48, 0, v43);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v48);
      swift_willThrow();
      sub_1CF77834C(v44, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
    }
    else
    {
      sub_1CF778FFC((uint64_t)&v48, &qword_1ED56DF38);
      LOBYTE(v50) = 3;
      sub_1CF7C8C1C();
      v37 = (void *)swift_allocError();
      sub_1CF7C8BF8();
      swift_willThrow();
      sub_1CF77834C(v14, v13);
    }
    sub_1CF7C8A60();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1CF7CA390;
    *(_QWORD *)&v50 = v37;
    v4 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    v5 = sub_1CF7C888C();
    v7 = v6;
    *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v3 + 64) = sub_1CF791E0C();
    *(_QWORD *)(v3 + 32) = v5;
    *(_QWORD *)(v3 + 40) = v7;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v8 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();
    swift_bridgeObjectRelease();

    v0 = v45;
  }
  LOBYTE(v50) = 2;
  v9 = sub_1CF7C9060();
  v10 = v46;
  if ((v9 & 1) == 0)
    return sub_1CF779500(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v50) = 2;
  sub_1CF796038();
  sub_1CF7C9030();
  v44 = v1;
  v15 = (_QWORD *)sub_1CF7C8D78();
  v16 = v15[2];
  v43 = v15;
  if (!v16)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_27:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v0);
    return (unint64_t)v11;
  }
  v17 = v15 + 5;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v20 = *v17;
    *(_QWORD *)&v50 = *(v17 - 1);
    v19 = v50;
    *((_QWORD *)&v50 + 1) = v20;
    swift_bridgeObjectRetain();
    v21 = sub_1CF7C8D24();
    v51 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v50 = v21;
    *((_QWORD *)&v50 + 1) = v22;
    sub_1CF779634(&v50, &v48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = v11;
    v25 = sub_1CF779644(v19, v20);
    v26 = v11[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
      __break(1u);
LABEL_31:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
    }
    v29 = v24;
    if (v11[3] < v28)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1CF7C6A58();
LABEL_19:
    v0 = v45;
    v11 = v47;
    if ((v29 & 1) != 0)
    {
      v18 = (_OWORD *)(v47[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      sub_1CF779634(&v48, v18);
    }
    else
    {
      v47[(v25 >> 6) + 8] |= 1 << v25;
      v32 = (uint64_t *)(v11[6] + 16 * v25);
      *v32 = v19;
      v32[1] = v20;
      sub_1CF779634(&v48, (_OWORD *)(v11[7] + 32 * v25));
      v33 = v11[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_31;
      v11[2] = v35;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v46;
    v17 += 2;
    if (!--v16)
      goto LABEL_27;
  }
  sub_1CF7C59D0(v28, isUniquelyReferenced_nonNull_native);
  v30 = sub_1CF779644(v19, v20);
  if ((v29 & 1) == (v31 & 1))
  {
    v25 = v30;
    goto LABEL_19;
  }
  result = sub_1CF7C91BC();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for NSErrorContainer()
{
  return &type metadata for NSErrorContainer;
}

uint64_t _s10_CodingKeyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF795D00 + 4 * byte_1CF7CB329[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF795D34 + 4 * byte_1CF7CB324[v4]))();
}

uint64_t sub_1CF795D34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF795D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF795D44);
  return result;
}

uint64_t sub_1CF795D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF795D58);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF795D5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF795D64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10_CodingKeyOMa()
{
  return &_s10_CodingKeyON;
}

unint64_t sub_1CF795D84()
{
  unint64_t result;

  result = qword_1EFBB2A70;
  if (!qword_1EFBB2A70)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB47C, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A70);
  }
  return result;
}

unint64_t sub_1CF795DCC()
{
  unint64_t result;

  result = qword_1EFBB2A78;
  if (!qword_1EFBB2A78)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB3EC, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A78);
  }
  return result;
}

unint64_t sub_1CF795E14()
{
  unint64_t result;

  result = qword_1EFBB2A80;
  if (!qword_1EFBB2A80)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB414, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A80);
  }
  return result;
}

uint64_t sub_1CF795E58(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_1CF7C8FC4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_1CF7C8FC4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000 || (sub_1CF7C8FC4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001CF7CDAC0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1CF7C8FC4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1CF795FF4()
{
  unint64_t result;

  result = qword_1EFBB2A98;
  if (!qword_1EFBB2A98)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2A98);
  }
  return result;
}

unint64_t sub_1CF796038()
{
  unint64_t result;

  result = qword_1EFBB2AA0;
  if (!qword_1EFBB2AA0)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB564, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_1EFBB2AA0);
  }
  return result;
}

uint64_t sub_1CF79607C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1CF7960B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CF7960FC()
{
  unint64_t result;

  result = qword_1EFBB2B18;
  if (!qword_1EFBB2B18)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2B18);
  }
  return result;
}

uint64_t sub_1CF796140(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D17D55BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF796180(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *_s18_UserInfoCodingKeyVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s18_UserInfoCodingKeyVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s18_UserInfoCodingKeyVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18_UserInfoCodingKeyVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s18_UserInfoCodingKeyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s18_UserInfoCodingKeyVMa()
{
  return &_s18_UserInfoCodingKeyVN;
}

unint64_t sub_1CF7962CC()
{
  unint64_t result;

  result = qword_1EFBB2B38;
  if (!qword_1EFBB2B38)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB514, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_1EFBB2B38);
  }
  return result;
}

unint64_t sub_1CF796314()
{
  unint64_t result;

  result = qword_1EFBB2B40;
  if (!qword_1EFBB2B40)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CB53C, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_1EFBB2B40);
  }
  return result;
}

uint64_t sub_1CF79635C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  double v26;
  double v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v1 = sub_1CF7C85C8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A80](v1);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v3);
  v7 = (char *)v28 - v6;
  sub_1CF7C85BC();
  if (v8 < -9223372040.0)
  {
    if (qword_1EFBB22D0 != -1)
      swift_once();
    v9 = sub_1CF7C86A0();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EFBB2B48);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0, v1);
    v10 = sub_1CF7C8688();
    v11 = sub_1CF7C8A60();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v30 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_1CF796F2C();
      v14 = sub_1CF7C8E14();
      v29 = sub_1CF796864(v14, v15, &v30);
      sub_1CF7C8B20();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      _os_log_impl(&dword_1CF76E000, v10, v11, "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '1677-09-21 00:12:44'.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17D5694](v13, -1, -1);
      MEMORY[0x1D17D5694](v12, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    }

    return 0x8000000000000000;
  }
  sub_1CF7C85BC();
  if (v16 > 9223372040.0)
  {
    if (qword_1EFBB22D0 != -1)
      swift_once();
    v17 = 0x7FFFFFFFC4653800;
    v18 = sub_1CF7C86A0();
    __swift_project_value_buffer(v18, (uint64_t)qword_1EFBB2B48);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0, v1);
    v19 = sub_1CF7C8688();
    v20 = sub_1CF7C8A60();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v30 = v22;
      *(_DWORD *)v21 = 136315138;
      v28[1] = v21 + 4;
      sub_1CF796F2C();
      v23 = sub_1CF7C8E14();
      v29 = sub_1CF796864(v23, v24, &v30);
      sub_1CF7C8B20();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      _os_log_impl(&dword_1CF76E000, v19, v20, "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '2262-04-11 23:47:15'.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17D5694](v22, -1, -1);
      MEMORY[0x1D17D5694](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }

    return v17;
  }
  result = sub_1CF7C85BC();
  v27 = v26 * 1000000000.0;
  if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v27 < 9.22337204e18)
    return (uint64_t)v27;
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1CF796788()
{
  uint64_t v0;

  v0 = sub_1CF7C86A0();
  __swift_allocate_value_buffer(v0, qword_1EFBB2B48);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFBB2B48);
  return sub_1CF7C8694();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1CF796820(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1CF796830(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1CF796864(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1CF796934(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1CF778DDC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1CF778DDC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1CF796934(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1CF7C8B2C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1CF796AEC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1CF7C8C40();
  if (!v8)
  {
    sub_1CF7C8C94();
    __break(1u);
LABEL_17:
    result = sub_1CF7C8CE8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1CF796AEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1CF796B80(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CF796DD0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CF796DD0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1CF796B80(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1CF796CF4(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1CF7C8BB0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1CF7C8C94();
      __break(1u);
LABEL_10:
      v2 = sub_1CF7C88EC();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1CF7C8CE8();
    __break(1u);
LABEL_14:
    result = sub_1CF7C8C94();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1CF796CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B68);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1CF796D58(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1CF7C8928();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1D17D4548](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1CF796DD0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B68);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

_BYTE **sub_1CF796F1C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_1CF796F2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB2B60;
  if (!qword_1EFBB2B60)
  {
    v1 = sub_1CF7C85C8();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB08F0], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB2B60);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1CF796FB8()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF796FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t result;
  int v12;
  pthread_t v13;
  pthread_t v14[2];

  v3 = v2;
  v14[1] = *(pthread_t *)MEMORY[0x1E0C80C08];
  v6 = sub_1CF7C8424();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 16) = 0;
  type metadata accessor for POSIXThread.Context();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  v14[0] = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  result = pthread_create(v14, 0, (void *(__cdecl *)(void *))sub_1CF797178, v10);
  if ((_DWORD)result)
  {
    v12 = result;
    swift_release();
    swift_release();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    POSIXError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v9);
    sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_willThrow();
    swift_release();
    swift_release();
    return v3;
  }
  v13 = v14[0];
  if (v14[0])
  {
    swift_release();
    swift_release();
    *(_QWORD *)(v3 + 16) = v13;
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF797178(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 24);
  v2 = swift_retain();
  v1(v2);
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_1CF7971C0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for POSIXThread()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for POSIXThread.Context()
{
  return objc_opt_self();
}

uint64_t RemoteDevice.__allocating_init(underlyingDevice:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void sub_1CF797240(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t RemoteDevice.Identity.hash(into:)()
{
  sub_1CF7C861C();
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  type metadata accessor for RemoteDevice.Identity();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  return swift_bridgeObjectRelease();
}

uint64_t static RemoteDevice.Identity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if ((sub_1CF7C85EC() & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for RemoteDevice.Identity() + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1])
    return 1;
  else
    return sub_1CF7C8FC4();
}

uint64_t RemoteDevice.Identity.hashValue.getter()
{
  sub_1CF7C9234();
  sub_1CF7C861C();
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  type metadata accessor for RemoteDevice.Identity();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF797428()
{
  sub_1CF7C9234();
  sub_1CF7C861C();
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7974CC()
{
  sub_1CF7C861C();
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF797554()
{
  sub_1CF7C9234();
  sub_1CF7C861C();
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7975F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if ((sub_1CF7C85EC() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return sub_1CF7C8FC4();
}

uint64_t static RemoteDevice.loopbackDevice()()
{
  uint64_t result;
  uint64_t v1;

  swift_beginAccess();
  result = remote_device_copy_unique_of_type();
  if (result)
  {
    v1 = result;
    type metadata accessor for RemoteDevice();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
  }
  return result;
}

uint64_t RemoteDevice.init(underlyingDevice:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t type metadata accessor for RemoteDevice.Identity()
{
  uint64_t result;

  result = qword_1EFBB2E18;
  if (!qword_1EFBB2E18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for RemoteDevice()
{
  return objc_opt_self();
}

BOOL sub_1CF797730()
{
  int state;

  state = remote_device_get_state();
  swift_beginAccess();
  return state == dword_1EFBB2F04;
}

uint64_t sub_1CF797784()
{
  return remote_device_get_state();
}

uint64_t sub_1CF79778C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;

  sub_1CF797864(a1);
  remote_device_get_name();
  v2 = sub_1CF7C88E0();
  v4 = v3;
  result = type metadata accessor for RemoteDevice.Identity();
  v6 = (uint64_t *)(a1 + *(int *)(result + 20));
  *v6 = v2;
  v6[1] = v4;
  return result;
}

uint64_t sub_1CF7977DC()
{
  remote_device_get_name();
  return sub_1CF7C88E0();
}

uint64_t sub_1CF7977F4()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)remote_device_copy_property();
  if (!v0)
    return 0;
  if (!xpc_string_get_string_ptr(v0))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v1 = sub_1CF7C88E0();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1CF797864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;

  v26 = a1;
  v43 = *MEMORY[0x1E0C80C08];
  v1 = sub_1CF7C861C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A80](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF7C8610();
  v5 = sub_1CF7C8604();
  v6 = v5;
  v8 = v7;
  v9 = v5 >> 8;
  v10 = v5 >> 16;
  v11 = v5 >> 24;
  v12 = HIDWORD(v5);
  v13 = v5 >> 40;
  v18 = HIWORD(v5);
  v19 = HIBYTE(v5);
  v20 = v7 >> 8;
  v21 = v7 >> 16;
  v22 = v7 >> 24;
  v23 = HIDWORD(v7);
  v24 = v7 >> 40;
  v25 = HIWORD(v7);
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15 = HIBYTE(v7);
  v14(v4, v1);
  v27 = v6;
  v28 = v9;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v33 = v18;
  v34 = v19;
  v35 = v8;
  v36 = v20;
  v37 = v21;
  v38 = v22;
  v39 = v23;
  v40 = v24;
  v41 = v25;
  v42 = v15;
  remote_device_copy_uuid();
  return sub_1CF7C85F8();
}

void sub_1CF797A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  void *v14;
  uint64_t v15;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v14 = sub_1CF797CA0;
  v15 = v5;
  v6 = MEMORY[0x1E0C809A8];
  v10 = MEMORY[0x1E0C809A8];
  v11 = 1107296256;
  v12 = sub_1CF797240;
  v13 = &block_descriptor_1;
  v7 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  remote_device_set_connected_callback();
  _Block_release(v7);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v14 = sub_1CF797CC0;
  v15 = v8;
  v10 = v6;
  v11 = 1107296256;
  v12 = sub_1CF797240;
  v13 = &block_descriptor_6_0;
  v9 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  remote_device_set_disconnected_callback();
  _Block_release(v9);
}

uint64_t sub_1CF797B64(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t state;
  uint64_t result;

  state = remote_device_get_state();
  result = swift_beginAccess();
  if ((_DWORD)state == dword_1EFBB2F04)
    return a2(state);
  return result;
}

uint64_t sub_1CF797BCC()
{
  void *v0;
  uint64_t v1;

  sub_1CF7C8898();
  v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0)
    return 0;
  v1 = xpc_remote_connection_create_with_remote_service();

  return v1;
}

uint64_t RemoteDevice.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RemoteDevice.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1CF797C7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF797CA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF797B64(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1CF797CC0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  swift_beginAccess();
  return v1(dword_1EFBB2F08);
}

uint64_t sub_1CF797D10()
{
  return sub_1CF78D2BC(&qword_1EFBB2CD0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteDevice.Identity, (uint64_t)&protocol conformance descriptor for RemoteDevice.Identity);
}

uint64_t method lookup function for RemoteDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteDevice.__allocating_init(underlyingDevice:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RemoteDevice.connected.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of RemoteDevice.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of RemoteDevice.identity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of RemoteDevice.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RemoteDevice.model.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RemoteDevice.uuid.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RemoteDevice.setDeviceStateHandler(queue:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RemoteDevice.remoteConnection(forService:handlerQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of RemoteDevice.withUnsafeUnderlyingRemoteDevice<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteDevice.Identity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CF7C861C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for RemoteDevice.Identity(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1CF7C861C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDevice.Identity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF798060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1CF7C861C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteDevice.Identity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF7980EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CF7C861C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1CF798168()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CF7C861C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CF7981E4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  _QWORD v13[5];

  v4 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v7 = type metadata accessor for _XPCObjectEncoder();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  v13[3] = v7;
  v13[4] = sub_1CF78D2BC(&qword_1ED56E720, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
  v13[0] = v8;
  swift_retain();
  NSError.encode(to:)(v13);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
    v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      v5 = sub_1CF7C8C34();
      swift_allocError();
      v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
      v11[3] = &type metadata for NSErrorContainer;
      *v11 = a1;
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      v12 = a1;
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v11, *MEMORY[0x1E0DEC4B0], v5);
      swift_willThrow();
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1CF7983BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[5];

  v4 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v7 = type metadata accessor for _XPCObjectEncoder();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  v12[3] = v7;
  v12[4] = sub_1CF78D2BC(&qword_1ED56E720, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
  v12[0] = v8;
  swift_retain();
  XPCSideChannel.encode(to:)((uint64_t)v12);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      v5 = sub_1CF7C8C34();
      swift_allocError();
      v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
      v11[3] = type metadata accessor for XPCSideChannel();
      *v11 = a1;
      v12[0] = 0;
      v12[1] = 0xE000000000000000;
      swift_retain();
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v11, *MEMORY[0x1E0DEC4B0], v5);
      swift_willThrow();
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1CF798598(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v5 = a2 & 1;
  v6 = *(_QWORD *)(v2 + 16);
  swift_retain();
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v9 = type metadata accessor for _XPCObjectEncoder();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v8;
  v14[3] = v9;
  v14[4] = sub_1CF78D2BC(&qword_1ED56E720, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_1CF7CAA18);
  v14[0] = v10;
  swift_retain();
  sub_1CF7A04A0(v14, (uint64_t)a1, v5);
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    v7 = v10[2];
    if (v7)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      v7 = sub_1CF7C8C34();
      swift_allocError();
      v13 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
      *(_QWORD *)(v13 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E88);
      *(_QWORD *)v13 = a1;
      *(_BYTE *)(v13 + 8) = v5 != 0;
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      sub_1CF7A1590(a1, v5);
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      sub_1CF7C8C04();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v13, *MEMORY[0x1E0DEC4B0], v7);
      swift_willThrow();
    }
    swift_release();
  }
  return v7;
}

const uint8_t *sub_1CF798798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[5];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v6 = type metadata accessor for _XPCObjectDecoder();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v5;
  v9[3] = v6;
  v9[4] = sub_1CF78D2BC((unint64_t *)&unk_1ED56E650, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
  v9[0] = v7;
  type metadata accessor for XPCSideChannel();
  swift_allocObject();
  return XPCSideChannel.init(from:)((uint64_t)v9);
}

uint64_t sub_1CF798874@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  char v20;

  v19 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for _XPCObjectDecoder();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v9;
  v12[4] = v10;
  v12[5] = v11;
  sub_1CF7989C4();
  if (v3)
    return swift_release();
  v13 = v19;
  v20 = 0;
  v14 = sub_1CF7C8D24();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = swift_release();
  *v13 = v14;
  v13[1] = v16;
  return result;
}

uint64_t sub_1CF7989C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  if (MEMORY[0x1D17D5ACC](*(_QWORD *)(v0 + 16)) == XPCTypeDictionary)
  {
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED56DD58);
    sub_1CF796140(&qword_1ED56DD50, qword_1ED56DD58, (uint64_t)&unk_1CF7CAB04);
    return sub_1CF7C8D90();
  }
  else
  {
    v1 = sub_1CF7C8C1C();
    swift_allocError();
    v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
    *v3 = &type metadata for DynamicCodableContainerCodingKeys;
    swift_bridgeObjectRetain();
    sub_1CF7C8C04();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0DEC450], v1);
    return swift_willThrow();
  }
}

uint64_t XPCDictionary.subscript.getter()
{
  void **v0;
  void *v1;
  const char *v2;
  uint64_t string;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  string = (uint64_t)xpc_dictionary_get_string(v1, v2);
  swift_release();
  if (string)
    string = sub_1CF7C88E0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return string;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return 2;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  return 0;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  return 2;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    XPCDictionary.underlyingConnection.getter();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    swift_unknownObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }
  return 0;
}

_QWORD *XPCDictionary.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 16);
  v5[1] = *(_OWORD *)v2;
  v6 = v3;
  return sub_1CF79DFCC((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_1CF79DF2C, (uint64_t)v5, a1, a2, (uint64_t *)&unk_1EFBB2EF0);
}

uint64_t sub_1CF798C18@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A80])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A80](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t XPCDictionary.createReply()@<X0>(uint64_t *a1@<X8>)
{
  xpc_object_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  xpc_object_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  v4 = MEMORY[0x1E0C80A80](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v4);
  v8 = (char *)v15 - v7;
  v9 = *v1;
  result = (uint64_t)xpc_dictionary_create_reply(*v1);
  if (!result)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return result;
  }
  v11 = result;
  v15[1] = result;
  v15[2] = 0xD000000000000019;
  v15[3] = 0x80000001CF7CD790;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v9, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1CF7C88E0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1CF7C85D4();
    swift_bridgeObjectRelease();
    v12 = sub_1CF7C861C();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v8, v6, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
      goto LABEL_9;
    }
    sub_1CF778FFC((uint64_t)v6, &qword_1ED56E310);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  v14 = sub_1CF7C861C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
LABEL_9:
  sub_1CF789AB4((uint64_t)v8);
  result = swift_unknownObjectRelease();
  *a1 = v11;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001CF7CD790;
  return result;
}

Swift::Bool __swiftcall XPCDictionary.sendReply()()
{
  void **v0;
  void *v1;
  _xpc_connection_s *v2;

  v1 = *v0;
  v2 = xpc_dictionary_get_remote_connection(v1);
  if (v2)
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      xpc_remote_connection_send_message();
    else
      xpc_connection_send_message(v2, v1);
    swift_unknownObjectRelease();
  }
  return v2 != 0;
}

_QWORD *sub_1CF799018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v10[5];
  _QWORD v11[5];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1CF77C460(MEMORY[0x1E0DEE9D8]);
  v6 = type metadata accessor for _XPCObjectDecoder();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v5;
  v11[3] = v6;
  v11[4] = sub_1CF78D2BC((unint64_t *)&unk_1ED56E650, (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectDecoder, (uint64_t)&unk_1CF7CA9D0);
  v11[0] = v7;
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  sub_1CF78D06C((uint64_t)v11, (uint64_t)v10);
  v8 = NSError.init(from:)(v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v8;
}

uint64_t XPCDictionary.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001CF7CD790;
  return result;
}

xpc_connection_t XPCDictionary.underlyingConnection.getter()
{
  xpc_object_t *v0;
  xpc_connection_t result;
  xpc_connection_t v2;
  uint64_t v3;
  uint64_t v4;

  result = xpc_dictionary_get_remote_connection(*v0);
  if (result)
  {
    v2 = result;
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for RemoteXPCPeerConnection();
      result = (xpc_connection_t)swift_allocObject();
      *((_QWORD *)result + 9) = 0;
      *((_QWORD *)result + 6) = 0;
      *((_QWORD *)result + 7) = 0;
      *((_BYTE *)result + 64) = 0;
      *((_QWORD *)result + 4) = 0;
      *((_QWORD *)result + 5) = 0;
      *((_QWORD *)result + 3) = v4;
    }
    else
    {
      type metadata accessor for SystemXPCPeerConnection();
      result = (xpc_connection_t)swift_allocObject();
      *((_QWORD *)result + 4) = 0;
      *((_QWORD *)result + 5) = 0;
      *((_QWORD *)result + 3) = v2;
    }
    *((_QWORD *)result + 2) = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t XPCDictionary.withUnsafeUnderlyingConnection<A>(_:)(void (*a1)(void))
{
  xpc_object_t *v1;
  _xpc_connection_s *v3;

  v3 = xpc_dictionary_get_remote_connection(*v1);
  a1();
  return swift_unknownObjectRelease();
}

uint64_t XPCDictionary.auditToken.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _OWORD v3[4];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C08];
  xpc_dictionary_get_audit_token();
  memset(v3, 0, sizeof(v3));
  result = XPCaudit_token_to_pid(v3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = (_DWORD)result == 0;
  return result;
}

xpc_object_t XPCDictionary.entitlements.getter@<X0>(_QWORD *a1@<X8>)
{
  int v1;
  xpc_object_t result;
  _OWORD v4[4];
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C08];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_dictionary_get_audit_token();
  memset(v4, 0, sizeof(v4));
  v1 = XPCaudit_token_to_pid(v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (xpc_copy_entitlements_data_for_token())
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }
  }
  result = xpc_dictionary_create(0, 0, 0);
  *a1 = result;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001CF7CD790;
  return result;
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  void **v2;
  void *v5;
  const char *v6;
  xpc_object_t v7;

  v5 = *v2;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

{
  void **v2;
  void *v5;
  const char *v6;
  xpc_object_t v7;

  v5 = *v2;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

xpc_object_t XPCDictionary.subscript.getter()
{
  void **v0;
  void *v1;
  uint64_t v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = sub_1CF7C8898();
  v3 = xpc_dictionary_get_value(v1, (const char *)(v2 + 32));
  swift_release();
  return v3;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_1CF799778@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A80](v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  v12 = sub_1CF7C8B14();
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_1CF7999E8;
}

{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  v12 = sub_1CF7C8B14();
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_1CF79A100;
}

{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  v12 = sub_1CF7C8B14();
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v15 = malloc(v14);
  v11[8] = v15;
  XPCDictionary.subscript.getter(a4, (uint64_t)v15);
  return sub_1CF79A610;
}

void sub_1CF7999E8(uint64_t **a1, char a2)
{
  sub_1CF79A114(a1, a2, (uint64_t)sub_1CF7786B0, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

uint64_t _s7Mercury13XPCDictionaryVyxSgSScSZRzluig_0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(a1, a2);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF799A98(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  v7 = *a2;
  v8 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v7, v8, v5, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

xpc_object_t sub_1CF799B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  xpc_object_t result;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  BOOL v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  unint64_t v58;

  v55 = a4;
  v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A80](AssociatedTypeWitness);
  v52 = (char *)&v49 - v8;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A80](v7);
  v50 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A80](v10);
  v56 = (char *)&v49 - v13;
  v14 = MEMORY[0x1E0C80A80](v12);
  v54 = (char *)&v49 - v15;
  v16 = MEMORY[0x1E0C80A80](v14);
  v18 = (char *)&v49 - v17;
  MEMORY[0x1E0C80A80](v16);
  v20 = (char *)&v49 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21((char *)&v49 - v19, a1, a2);
  LOBYTE(a1) = sub_1CF7C8B74();
  v57 = v20;
  v21(v18, (uint64_t)v20, a2);
  if ((a1 & 1) == 0)
  {
    v51 = *(void (**)(char *, uint64_t))(v9 + 8);
    v51(v18, a2);
    goto LABEL_6;
  }
  swift_getAssociatedConformanceWitness();
  v49 = AssociatedTypeWitness;
  sub_1CF7C91A4();
  v22 = v54;
  sub_1CF7C8FAC();
  v23 = sub_1CF7C87FC();
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v22, a2);
  v24(v18, a2);
  if ((v23 & 1) == 0)
  {
    v51 = v24;
LABEL_6:
    v27 = v57;
    v28 = sub_1CF7C8B68();
    v29 = v56;
    v21(v56, (uint64_t)v27, a2);
    if (v28 <= 63)
    {
      v30 = v29;
      v31 = a2;
      v32 = v51;
LABEL_8:
      v32(v30, v31);
      v26 = v55;
LABEL_9:
      v33 = v57;
      v34 = sub_1CF7C8B5C();
      v32(v33, a2);
      result = xpc_uint64_create(v34);
      goto LABEL_20;
    }
    v58 = -1;
    v35 = sub_1CF7C8B74();
    v36 = sub_1CF7C8B68();
    if ((v35 & 1) != 0)
    {
      if (v36 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_1CF7C91A4();
        v37 = v54;
        sub_1CF7C8FAC();
        v38 = v56;
        v39 = sub_1CF7C87F0();
        v32 = v51;
        v51(v37, a2);
        v40 = v58;
        v41 = v50;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v38, a2);
        if ((v39 & 1) == 0)
        {
          v30 = v41;
          v31 = a2;
          goto LABEL_8;
        }
        v42 = sub_1CF7C8B5C();
        v32(v41, a2);
        v43 = v40 >= v42;
        goto LABEL_18;
      }
    }
    else if (v36 < 65)
    {
      v47 = v56;
      v48 = sub_1CF7C8B5C();
      v32 = v51;
      v51(v47, a2);
      v43 = v58 >= v48;
LABEL_18:
      v26 = v55;
      if (v43)
        goto LABEL_9;
      goto LABEL_19;
    }
    sub_1CF789248();
    v44 = v54;
    sub_1CF7C8B44();
    v45 = v56;
    v46 = sub_1CF7C87FC();
    v32 = v51;
    v51(v44, a2);
    v32(v45, a2);
    v26 = v55;
    if ((v46 & 1) == 0)
      goto LABEL_9;
LABEL_19:
    v32(v57, a2);
    result = 0;
    goto LABEL_20;
  }
  v24(v57, a2);
  result = 0;
  v26 = v55;
LABEL_20:
  *v26 = result;
  return result;
}

void sub_1CF79A100(uint64_t **a1, char a2)
{
  sub_1CF79A114(a1, a2, (uint64_t)sub_1CF7A1768, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

void sub_1CF79A114(uint64_t **a1, char a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, uint64_t);

  v4 = *a1;
  v5 = (void *)(*a1)[7];
  v6 = (void *)(*a1)[8];
  v7 = (*a1)[5];
  v8 = (*a1)[6];
  v9 = (*a1)[3];
  v11 = (*a1)[1];
  v10 = (*a1)[2];
  v12 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[7], v6, v7);
    swift_bridgeObjectRetain();
    sub_1CF779A4C((uint64_t)v5, v12, v11, v10, v9, a3, a4);
    v13 = *(void (**)(void *, uint64_t))(v8 + 8);
    v13(v5, v7);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1CF779A4C((uint64_t)v6, v12, v11, v10, v9, a3, a4);
    v13 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v13(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return sub_1CF79A630(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter, a8);
}

{
  return sub_1CF79A630(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter, a8);
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(a1, a2);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

xpc_object_t sub_1CF79A484@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  xpc_object_t result;
  _QWORD v6[2];

  MEMORY[0x1E0C80A80](a1);
  (*(void (**)(char *))(v4 + 16))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1CF7A045C();
  sub_1CF7C8760();
  result = xpc_double_create(*(double *)&v6[1]);
  *a2 = result;
  return result;
}

void sub_1CF79A610(uint64_t **a1, char a2)
{
  sub_1CF79A114(a1, a2, (uint64_t)sub_1CF7A174C, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF798C18);
}

uint64_t sub_1CF79A630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a7;
  v27 = a8;
  v24 = a5;
  v25 = a4;
  v28 = a9;
  v14 = sub_1CF7C8B14();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A80](v14);
  v17 = (char *)&v24 - v16;
  v18 = v9[1];
  v19 = v9[2];
  v29 = *v9;
  v30 = v18;
  v31 = v19;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v27(a1, a2, a3, a6, v26);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v20 = *(_QWORD *)(a6 - 8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, a6);
  if ((_DWORD)v21 != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v28, v17, a6);
  v25(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_1CF79AA24@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CF79AAA4(unsigned __int8 *a1)
{
  int v1;
  xpc_object_t v2;
  BOOL v3;

  v1 = *a1;
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  else
  {
    v3 = v1 & 1;
    swift_bridgeObjectRetain();
    v2 = xpc_BOOL_create(v3);
  }
  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.setter(char a1)
{
  xpc_object_t v1;

  if (a1 == 2)
    v1 = 0;
  else
    v1 = xpc_BOOL_create(a1 & 1);
  return XPCDictionary.subscript.setter((uint64_t)v1);
}

uint64_t (*XPCDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 24) = XPCDictionary.subscript.getter();
  return sub_1CF79ABB0;
}

uint64_t sub_1CF79ABB0(uint64_t a1)
{
  int v1;
  xpc_object_t v2;
  BOOL v3;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  else
  {
    v3 = v1 & 1;
    swift_bridgeObjectRetain();
    v2 = xpc_BOOL_create(v3);
  }
  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;

  v5 = *v3;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease_n();
  v8 = swift_unknownObjectRelease_n();
  return a3(v8) & 1;
}

uint64_t XPCDictionary.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = *v1;
  v4 = sub_1CF7C8898();
  v5 = xpc_dictionary_get_dictionary(v3, (const char *)(v4 + 32));
  result = swift_release();
  v7 = 0xD000000000000019;
  if (!v5)
    v7 = 0;
  v8 = 0x80000001CF7CD790;
  if (!v5)
    v8 = 0;
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = *v1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v5 = xpc_dictionary_get_dictionary(v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  v7 = 0xD000000000000019;
  if (!v5)
    v7 = 0;
  v8 = 0x80000001CF7CD790;
  if (!v5)
    v8 = 0;
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

double sub_1CF79AE80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  uint64_t v5;

  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(&v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_1CF79AF0C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  if (*a1)
    swift_unknownObjectRetain();
  v4 = sub_1CF7C8898();
  xpc_dictionary_set_value(v3, (const char *)(v4 + 32), v2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t XPCDictionary.subscript.setter(void **a1)
{
  void **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *v1;
  if (*a1)
  {
    v4 = swift_unknownObjectRetain();
    sub_1CF7A103C(v4);
  }
  v5 = sub_1CF7C8898();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v3, (const char *)(v5 + 32), v2);
  swift_unknownObjectRelease();
  return swift_release();
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  void **v3;
  _QWORD *v7;
  void *v8;
  const char *v9;
  xpc_object_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v8 = *v3;
  v9 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v10 = xpc_dictionary_get_dictionary(v8, v9);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v11 = 0xD000000000000019;
  if (!v10)
    v11 = 0;
  v12 = 0x80000001CF7CD790;
  if (!v10)
    v12 = 0;
  *v7 = v10;
  v7[1] = v11;
  v7[2] = v12;
  return sub_1CF79B0D8;
}

void sub_1CF79B0D8(void ***a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    if (v3)
      swift_unknownObjectRetain();
    v5 = sub_1CF7C8898();
    xpc_dictionary_set_value(v4, (const char *)(v5 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
    sub_1CF7A103C((uint64_t)*v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v3)
    {
      v6 = swift_unknownObjectRetain();
      sub_1CF7A103C(v6);
    }
    v7 = sub_1CF7C8898();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v4, (const char *)(v7 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
  }
  free(v2);
}

uint64_t sub_1CF79B248@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_1CF79B2E0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1);
}

uint64_t (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  v5 = *v3;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v7;
  return sub_1CF79B3CC;
}

uint64_t sub_1CF79B3CC(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return XPCDictionary.subscript.setter(v2);
  }
}

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, char a3)
{
  void **v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *string;

  v5 = sub_1CF7C8880();
  MEMORY[0x1E0C80A80](v5);
  v6 = *v3;
  v7 = sub_1CF7C8898();
  string = xpc_dictionary_get_string(v6, (const char *)(v7 + 32));
  swift_release();
  if (!string)
    return 0;
  if ((a3 & 1) == 0)
    return sub_1CF7C88E0();
  strlen(string);
  sub_1CF7C8868();
  return sub_1CF7C8820();
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;

  v5 = *v3;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v7)
    return 0;
  v8 = sub_1CF79B8F4(v7, a3 & 1);
  swift_unknownObjectRelease();
  return v8;
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;

  v5 = *v3;
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    v8 = sub_1CF79B8F4(v7, a3 & 1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t sub_1CF79B524@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  const char *v4;
  uint64_t string;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  string = (uint64_t)xpc_dictionary_get_string(v3, v4);
  swift_release();
  if (string)
  {
    string = sub_1CF7C88E0();
    v7 = v6;
    swift_bridgeObjectRelease_n();
    result = swift_unknownObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    result = swift_unknownObjectRelease_n();
    v7 = 0;
  }
  *a2 = string;
  a2[1] = v7;
  return result;
}

uint64_t sub_1CF79B5E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1, v2);
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  void **v3;
  _QWORD *v7;
  void *v8;
  const char *v9;
  uint64_t string;
  uint64_t v11;
  uint64_t v12;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = *v3;
  v9 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  string = (uint64_t)xpc_dictionary_get_string(v8, v9);
  swift_release();
  if (string)
  {
    string = sub_1CF7C88E0();
    v12 = v11;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v12 = 0;
  }
  *v7 = string;
  v7[1] = v12;
  return sub_1CF79B71C;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  void *v12;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = sub_1CF7C85C8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300) - 8) + 64);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  v7[9] = malloc(v11);
  v12 = malloc(v11);
  v7[10] = v12;
  XPCDictionary.subscript.getter((uint64_t)v12);
  return sub_1CF79DB6C;
}

void sub_1CF79B71C(uint64_t a1, char a2)
{
  void *v2;
  void **v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = *(void **)a1;
  v3 = *(void ***)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      v5 = *v3;
      v6 = (const char *)(sub_1CF7C8898() + 32);
      v7 = sub_1CF7C8898();
      xpc_dictionary_set_string(v5, v6, (const char *)(v7 + 32));
      swift_release();
    }
    else
    {
      v11 = *v3;
      v12 = sub_1CF7C8898();
      xpc_dictionary_set_value(v11, (const char *)(v12 + 32), 0);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4)
    {
      v8 = *v3;
      v9 = (const char *)(sub_1CF7C8898() + 32);
      v10 = sub_1CF7C8898();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_string(v8, v9, (const char *)(v10 + 32));
      swift_release();
    }
    else
    {
      v13 = *v3;
      v14 = sub_1CF7C8898();
      xpc_dictionary_set_value(v13, (const char *)(v14 + 32), 0);
    }
    swift_release();
  }
  free(v2);
}

uint64_t sub_1CF79B8F4(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *bytes_ptr;
  _BYTE *v12;
  size_t length;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;

  v4 = sub_1CF7C8574();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A80](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = XPCTypeData;
  if (v8 != MEMORY[0x1D17D5ACC](a1))
    return 0;
  bytes_ptr = xpc_data_get_bytes_ptr(a1);
  if (!bytes_ptr)
    return 0;
  v12 = bytes_ptr;
  length = xpc_data_get_length(a1);
  if ((a2 & 1) == 0)
    return sub_1CF7A0F90(v12, length);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0CB00C8], v4);
  sub_1CF7C8568();
  if (length)
  {
    sub_1CF7C8490();
    swift_allocObject();
    swift_retain();
    v14 = sub_1CF7C8454();
    v9 = sub_1CF7A1068(v14, length);
    swift_release();
  }
  else
  {
    v15 = (void (*)(_BYTE *, _QWORD))sub_1CF7C8568();
    v15(v12, 0);
    swift_release();
    swift_release();
    v9 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

_BYTE *XPCDictionary.subscript.getter()
{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  uint64_t v4;
  _BYTE *bytes_ptr;
  size_t length;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v4 = XPCTypeData;
  if (v4 != MEMORY[0x1D17D5ACC](v3))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_5:
    swift_unknownObjectRelease();
    return 0;
  }
  bytes_ptr = xpc_data_get_bytes_ptr(v3);
  if (bytes_ptr)
  {
    length = xpc_data_get_length(v3);
    bytes_ptr = (_BYTE *)sub_1CF7A0F90(bytes_ptr, length);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return bytes_ptr;
}

uint64_t sub_1CF79BBE0@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v2 = XPCDictionary.subscript.getter();
  v4 = v3;
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CF79BC64(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  sub_1CF7A115C(v1, v2);
  sub_1CF778700(v1, v2);
  return sub_1CF77834C(v1, v2);
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = XPCDictionary.subscript.getter();
  v7[1] = v8;
  return sub_1CF79BD4C;
}

void sub_1CF79BD4C(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *a1;
  v4 = **a1;
  v5 = (*a1)[1];
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    sub_1CF7A115C(v4, v5);
    sub_1CF778700(v4, v5);
    sub_1CF77834C(v4, v5);
    v6 = *v3;
    v7 = v3[1];
  }
  else
  {
    sub_1CF778700(v4, v5);
    v6 = v4;
    v7 = v5;
  }
  sub_1CF77834C(v6, v7);
  free(v3);
}

uint64_t sub_1CF79BECC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v4;
  char v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *a1;
  v5 = *(_BYTE *)(a2 + 16);
  v6 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v7 = xpc_dictionary_get_value(v4, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    v8 = sub_1CF79B8F4(v7, v5);
    v10 = v9;
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    result = swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    result = swift_unknownObjectRelease_n();
    v8 = 0;
    v10 = 0xF000000000000000;
  }
  *a3 = v8;
  a3[1] = v10;
  return result;
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, char a2)
{
  void **v4;
  _QWORD *v9;
  void *v10;
  const char *v11;
  xpc_object_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a3;
  v9[4] = v4;
  v9[2] = a2;
  v10 = *v4;
  v11 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v12 = xpc_dictionary_get_value(v10, v11);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    v13 = sub_1CF79B8F4(v12, a4 & 1);
    v15 = v14;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
    v15 = 0xF000000000000000;
  }
  *v9 = v13;
  v9[1] = v15;
  return sub_1CF79BD4C;
}

uint64_t sub_1CF79C444@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CF79C4C4(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_bridgeObjectRetain();
  v2 = v1;
  return XPCDictionary.subscript.setter(v1);
}

uint64_t XPCDictionary.subscript.setter(void *a1)
{
  void **v1;
  void *v3;
  void *v4;
  _xpc_connection_s *v5;
  void *v7;
  uint64_t v8;

  if (a1)
  {
    v3 = (void *)sub_1CF7C84FC();
    v4 = *v1;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v5 = xpc_dictionary_get_remote_connection(v4);
    sub_1CF79C628((uint64_t)v5, v3, v1);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    v7 = *v1;
    v8 = sub_1CF7C8898();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v7, (const char *)(v8 + 32), 0);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1CF79C628(uint64_t a1, void *a2, void **a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  const char *v17;

  if (a1)
  {
    type metadata accessor for XPCObjectEncoder();
    swift_allocObject();
    XPCObjectEncoder.init(underlyingConnection:)(a1);
  }
  else
  {
    type metadata accessor for XPCObjectEncoder();
    *(_QWORD *)(swift_allocObject() + 16) = 0;
  }
  swift_unknownObjectRetain();
  swift_retain();
  v7 = sub_1CF7981E4(a2);
  if (v3)
  {

    swift_release();
    sub_1CF7C8A60();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1CF7CA390;
    v9 = a2;
    v10 = objc_msgSend(v9, sel_description);
    v11 = sub_1CF7C8850();
    v13 = v12;

    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 64) = sub_1CF791E0C();
    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v13;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v14 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();
    swift_bridgeObjectRelease();

  }
  else
  {
    v15 = (void *)v7;
    swift_release();
    v16 = *a3;
    v17 = (const char *)(sub_1CF7C8898() + 32);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    xpc_dictionary_set_value(v16, v17, v15);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  return swift_release();
}

void (*XPCDictionary.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = XPCDictionary.subscript.getter();
  return sub_1CF79C890;
}

void sub_1CF79C890(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    XPCDictionary.subscript.setter(v2);

  }
  else
  {
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
  }
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if ((v6 & 1) != 0)
    {
      v10 = sub_1CF7C861C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
    }
    else
    {
      sub_1CF7C85F8();
      v7 = sub_1CF7C861C();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    v8 = sub_1CF7C861C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if ((v6 & 1) != 0)
    {
      v9 = sub_1CF7C861C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
    }
    else
    {
      sub_1CF7C85F8();
      v7 = sub_1CF7C861C();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = sub_1CF7C861C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectRelease();
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v6 = sub_1CF7C85C8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v6 = sub_1CF7C85C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF79CC10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a3;
  v8 = a3[1];
  sub_1CF779038(a1, (uint64_t)v7, &qword_1ED56E310);
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter((uint64_t)v7, v9, v8);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  xpc_object_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 uuid[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C08];
  v6 = sub_1CF7C861C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  MEMORY[0x1E0C80A80](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF779038(a1, (uint64_t)v12, &qword_1ED56E310);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v14 = 0;
  if (v13 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    v15 = sub_1CF7C8604();
    v16 = v15;
    v18 = v17;
    v19 = v15 >> 8;
    v36 = a2;
    v37 = a3;
    v20 = v15 >> 16;
    v21 = v15 >> 24;
    v38 = a1;
    v22 = v15 >> 40;
    v27 = HIDWORD(v15);
    v28 = HIWORD(v15);
    v29 = HIBYTE(v15);
    v30 = v17 >> 8;
    v31 = v17 >> 16;
    v32 = v17 >> 24;
    v33 = HIDWORD(v17);
    v34 = v17 >> 40;
    v35 = HIWORD(v17);
    v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24 = HIBYTE(v17);
    v23(v9, v6);
    uuid[0] = v16;
    uuid[1] = v19;
    uuid[2] = v20;
    uuid[3] = v21;
    uuid[4] = v27;
    uuid[5] = v22;
    a1 = v38;
    uuid[6] = v28;
    uuid[7] = v29;
    uuid[8] = v18;
    uuid[9] = v30;
    uuid[10] = v31;
    uuid[11] = v32;
    uuid[12] = v33;
    uuid[13] = v34;
    uuid[14] = v35;
    uuid[15] = v24;
    v14 = xpc_uuid_create(uuid);
  }
  XPCDictionary.subscript.setter((uint64_t)v14);
  return sub_1CF778FFC(a1, &qword_1ED56E310);
}

void (*XPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  void **v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  const char *v13;
  xpc_object_t v14;
  char v15;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = sub_1CF7C861C();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v7[5] = malloc(*(_QWORD *)(v9 + 64));
  v10 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310) - 8) + 64);
  v7[6] = malloc(v10);
  v7[7] = malloc(v10);
  v7[8] = malloc(v10);
  v11 = malloc(v10);
  v7[9] = v11;
  v12 = *v3;
  v13 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v14 = xpc_dictionary_get_value(v12, v13);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    xpc_uuid_get_uuid(_:)(v14);
    if ((v15 & 1) != 0)
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, 1, 1, v8);
    }
    else
    {
      sub_1CF7C85F8();
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, 1, 1, v8);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1CF79D128;
}

void sub_1CF79D128(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 48);
    v4 = *(_QWORD *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v2 + 32);
    sub_1CF779038(v3, v4, &qword_1ED56E310);
    sub_1CF779038(v4, v5, &qword_1ED56E310);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      swift_bridgeObjectRetain();
      v8 = 0;
    }
    else
    {
      v13 = *(_QWORD *)(v2 + 40);
      v14 = *(_QWORD *)(v2 + 24);
      v15 = *(_QWORD *)(v2 + 32);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 32))(v13, *(_QWORD *)(v2 + 48), v14);
      swift_bridgeObjectRetain();
      v16 = sub_1CF7C8604();
      v17 = v16;
      v19 = v18;
      v20 = v16 >> 8;
      v21 = v16 >> 16;
      v22 = v16 >> 24;
      v23 = HIDWORD(v16);
      v44 = v16 >> 40;
      v46 = HIWORD(v16);
      v48 = HIBYTE(v16);
      v50 = v18 >> 8;
      v52 = v18 >> 16;
      v54 = v18 >> 24;
      v56 = HIDWORD(v18);
      v58 = v18 >> 40;
      v60 = HIWORD(v18);
      v24 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v25 = HIBYTE(v18);
      v24(v13, v14);
      *(_BYTE *)(v2 + 80) = v17;
      *(_BYTE *)(v2 + 81) = v20;
      *(_BYTE *)(v2 + 82) = v21;
      *(_BYTE *)(v2 + 83) = v22;
      *(_BYTE *)(v2 + 84) = v23;
      *(_BYTE *)(v2 + 85) = v44;
      *(_BYTE *)(v2 + 86) = v46;
      *(_BYTE *)(v2 + 87) = v48;
      *(_BYTE *)(v2 + 88) = v19;
      *(_BYTE *)(v2 + 89) = v50;
      *(_BYTE *)(v2 + 90) = v52;
      *(_BYTE *)(v2 + 91) = v54;
      *(_BYTE *)(v2 + 92) = v56;
      *(_BYTE *)(v2 + 93) = v58;
      *(_BYTE *)(v2 + 94) = v60;
      *(_BYTE *)(v2 + 95) = v25;
      v8 = xpc_uuid_create((const unsigned __int8 *)(v2 + 80));
    }
    v27 = *(void **)(v2 + 64);
    v26 = *(void **)(v2 + 72);
    v29 = *(void **)(v2 + 48);
    v28 = *(void **)(v2 + 56);
    v30 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v8);
    sub_1CF778FFC((uint64_t)v28, &qword_1ED56E310);
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v2 + 32);
    sub_1CF779038(v3, v9, &qword_1ED56E310);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRetain();
      v12 = 0;
    }
    else
    {
      v32 = *(_QWORD *)(v2 + 32);
      v31 = *(_QWORD *)(v2 + 40);
      v33 = *(_QWORD *)(v2 + 24);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 32))(v31, *(_QWORD *)(v2 + 64), v33);
      swift_bridgeObjectRetain();
      v34 = sub_1CF7C8604();
      v35 = v34;
      v37 = v36;
      v38 = v34 >> 8;
      v39 = v34 >> 16;
      v40 = v34 >> 24;
      v41 = HIDWORD(v34);
      v45 = v34 >> 40;
      v47 = HIWORD(v34);
      v49 = HIBYTE(v34);
      v51 = v36 >> 8;
      v53 = v36 >> 16;
      v55 = v36 >> 24;
      v57 = HIDWORD(v36);
      v59 = v36 >> 40;
      v61 = HIWORD(v36);
      v42 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v43 = HIBYTE(v36);
      v42(v31, v33);
      *(_BYTE *)(v2 + 96) = v35;
      *(_BYTE *)(v2 + 97) = v38;
      *(_BYTE *)(v2 + 98) = v39;
      *(_BYTE *)(v2 + 99) = v40;
      *(_BYTE *)(v2 + 100) = v41;
      *(_BYTE *)(v2 + 101) = v45;
      *(_BYTE *)(v2 + 102) = v47;
      *(_BYTE *)(v2 + 103) = v49;
      *(_BYTE *)(v2 + 104) = v37;
      *(_BYTE *)(v2 + 105) = v51;
      *(_BYTE *)(v2 + 106) = v53;
      *(_BYTE *)(v2 + 107) = v55;
      *(_BYTE *)(v2 + 108) = v57;
      *(_BYTE *)(v2 + 109) = v59;
      *(_BYTE *)(v2 + 110) = v61;
      *(_BYTE *)(v2 + 111) = v43;
      v12 = xpc_uuid_create((const unsigned __int8 *)(v2 + 96));
    }
    v27 = *(void **)(v2 + 64);
    v26 = *(void **)(v2 + 72);
    v29 = *(void **)(v2 + 48);
    v28 = *(void **)(v2 + 56);
    v30 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v12);
  }
  sub_1CF778FFC((uint64_t)v26, &qword_1ED56E310);
  free(v26);
  free(v27);
  free(v28);
  free(v29);
  free(v30);
  free((void *)v2);
}

uint64_t sub_1CF79D714(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  v6 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v5, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF79D798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = sub_1CF7C85C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E300);
  v7 = MEMORY[0x1E0C80A80](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v7);
  v11 = (char *)&v14 - v10;
  sub_1CF779038(a1, (uint64_t)&v14 - v10, (uint64_t *)&unk_1ED56E300);
  sub_1CF779038((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_1ED56E300);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
LABEL_5:
    XPCDictionary.subscript.setter(v12);
    return sub_1CF778FFC((uint64_t)v11, (uint64_t *)&unk_1ED56E300);
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  swift_bridgeObjectRetain();
  sub_1CF7C85A4();
  result = xpc_date_create_absolute();
  if (result)
  {
    v12 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1CF79DB6C(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t absolute;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) == 0)
  {
    v9 = v2[9];
    v10 = v2[3];
    v11 = v2[4];
    sub_1CF779038(v3, v9, (uint64_t *)&unk_1ED56E300);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRetain();
      v12 = 0;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[6], v2[9], v2[3]);
      swift_bridgeObjectRetain();
      sub_1CF7C85A4();
      absolute = xpc_date_create_absolute();
      if (!absolute)
        goto LABEL_14;
      v12 = absolute;
      (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[6], v2[3]);
    }
    v15 = (void *)v2[9];
    v14 = (void *)v2[10];
    v17 = (void *)v2[7];
    v16 = (void *)v2[8];
    v19 = (void *)v2[5];
    v18 = (void *)v2[6];
    XPCDictionary.subscript.setter(v12);
    goto LABEL_12;
  }
  v5 = v2[7];
  v4 = v2[8];
  v6 = v2[3];
  v7 = v2[4];
  sub_1CF779038(v3, v4, (uint64_t *)&unk_1ED56E300);
  sub_1CF779038(v4, v5, (uint64_t *)&unk_1ED56E300);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
LABEL_8:
    v15 = (void *)v2[9];
    v14 = (void *)v2[10];
    v17 = (void *)v2[7];
    v16 = (void *)v2[8];
    v19 = (void *)v2[5];
    v18 = (void *)v2[6];
    XPCDictionary.subscript.setter(v8);
    sub_1CF778FFC((uint64_t)v16, (uint64_t *)&unk_1ED56E300);
LABEL_12:
    sub_1CF778FFC((uint64_t)v14, (uint64_t *)&unk_1ED56E300);
    free(v14);
    free(v15);
    free(v16);
    free(v17);
    free(v18);
    free(v19);
    free(v2);
    return;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[5], v2[7], v2[3]);
  swift_bridgeObjectRetain();
  sub_1CF7C85A4();
  v13 = xpc_date_create_absolute();
  if (v13)
  {
    v8 = v13;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
    goto LABEL_8;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t XPCDictionary.copy(into:)(uint64_t *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  _QWORD v10[6];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *v1;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1CF787FCC;
  *(_QWORD *)(v7 + 24) = v6;
  v10[4] = sub_1CF7A11AC;
  v10[5] = v7;
  v10[0] = MEMORY[0x1E0C809A8];
  v10[1] = 1107296256;
  v10[2] = sub_1CF77C368;
  v10[3] = &block_descriptor_2;
  v8 = _Block_copy(v10);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v5 & 1) != 0)
    __break(1u);
  return result;
}

void sub_1CF79DEC4(char *key@<X0>, xpc_object_t xdict@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t v6;

  v6 = xpc_dictionary_get_value(xdict, key);
  xpc_dictionary_set_value(xdict, key, 0);
  *a3 = v6;
}

void sub_1CF79DF2C(char *key@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  xpc_object_t v6;

  v5 = *(void **)(v2 + 16);
  v6 = xpc_dictionary_get_value(v5, key);
  xpc_dictionary_set_value(v5, key, 0);
  *a2 = v6;
}

_QWORD *sub_1CF79DF94(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF79DFCC(a1, a2, a3, a4, (uint64_t *)&unk_1EFBB2EF0);
}

_QWORD *sub_1CF79DFB0(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF79DFCC(a1, a2, a3, a4, &qword_1EFBB2EB8);
}

_QWORD *sub_1CF79DFCC(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    result = (_QWORD *)sub_1CF7C8B98();
    if (!v5)
      return (_QWORD *)v10[2];
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v9, v10);
    if (!v5)
      return (_QWORD *)v9;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v7 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v7 = sub_1CF7C8C40();
    result = a1(v10, (_QWORD *)v7);
    if (!v5)
      return (_QWORD *)v10[0];
  }
  return result;
}

BOOL XPCDictionary.isEmpty.getter()
{
  xpc_object_t *v0;

  return xpc_dictionary_get_count(*v0) == 0;
}

size_t XPCDictionary.count.getter()
{
  xpc_object_t *v0;

  return xpc_dictionary_get_count(*v0);
}

uint64_t XPCDictionary.forEach(_:)(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t result;
  char isEscapingClosureAtFileLocation;

  v6 = *v2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  sub_1CF79E1B4((uint64_t)sub_1CF7A11DC, v7, v6);
  if (v3)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[4];

  v8[3] = a2;
  v4 = *v2;
  v8[2] = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_1CF7A11FC;
  *(_QWORD *)(v5 + 24) = v8;
  sub_1CF79E1B4((uint64_t)sub_1CF7A11FC, v5, v4);
  if (v3)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1CF79E1B4(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  id v10;
  _QWORD aBlock[6];
  id v12;

  v12 = 0;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v12;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1CF7A1730;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1CF7A17A0;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E0C809A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF77C368;
  aBlock[3] = &block_descriptor_98;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a3, v8);
  _Block_release(v8);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v12)
    {
      v10 = v12;
      swift_willThrow();

    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF79E324(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1CF7C88E0();
  a3(v4);
  swift_bridgeObjectRelease();
  return 1;
}

_QWORD *sub_1CF79E46C(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v3;
  int64_t count;
  _QWORD *v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  char isEscapingClosureAtFileLocation;
  _QWORD v16[11];
  _QWORD *v17;

  count = xpc_dictionary_get_count(xdict);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || count > v8[3] >> 1)
  {
    if (v8[2] <= count)
      v10 = count;
    else
      v10 = v8[2];
    isUniquelyReferenced_nonNull_native = sub_1CF7B42EC(isUniquelyReferenced_nonNull_native, v10, 0, v8);
    v8 = isUniquelyReferenced_nonNull_native;
  }
  v17 = v8;
  v11 = MEMORY[0x1E0C80A80](isUniquelyReferenced_nonNull_native);
  v16[6] = &v17;
  v16[7] = a1;
  v16[8] = a2;
  MEMORY[0x1E0C80A80](v11);
  v16[2] = sub_1CF7A16E0;
  v16[3] = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_1CF7A11FC;
  *(_QWORD *)(v13 + 24) = v16;
  sub_1CF79E1B4((uint64_t)sub_1CF7A11FC, v13, xdict);
  if (v3)
  {
    swift_release();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = (_QWORD *)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    else
      return v17;
  }
  return result;
}

uint64_t sub_1CF79E600(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v3;
  size_t count;
  uint64_t v8;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  _QWORD v11[4];
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  count = xpc_dictionary_get_count(xdict);
  sub_1CF7A05F8(count, 0);
  sub_1CF7C89B8();
  v13 = &v16;
  v14 = a1;
  v15 = a2;
  v11[2] = sub_1CF7A16B4;
  v11[3] = &v12;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1CF7A11FC;
  *(_QWORD *)(v8 + 24) = v11;
  sub_1CF79E1B4((uint64_t)sub_1CF7A11FC, v8, xdict);
  if (v3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    else
      return v16;
  }
  return result;
}

uint64_t XPCDictionary.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v7;
  uint64_t v8;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(uint64_t);
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *v3;
  v20 = sub_1CF7C8748();
  xpc_dictionary_get_count(v7);
  sub_1CF7C8A0C();
  sub_1CF7C89C4();
  v16 = a3;
  v17 = &v20;
  v18 = a1;
  v19 = a2;
  v13 = sub_1CF7A1220;
  v14 = &v15;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1CF7A11FC;
  *(_QWORD *)(v8 + 24) = &v12;
  sub_1CF79E1B4((uint64_t)sub_1CF7A11FC, v8, v7);
  if (v11)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    else
      return v20;
  }
  return result;
}

uint64_t sub_1CF79E87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *(*a5)(_QWORD *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  result = (uint64_t)a5(v14);
  if (!v5)
  {
    v8 = v14[0];
    v9 = v14[1];
    v10 = (_QWORD *)*a4;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a4 = (uint64_t)v10;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CF7B42EC(0, v10[2] + 1, 1, v10);
      v10 = (_QWORD *)result;
      *a4 = result;
    }
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      result = (uint64_t)sub_1CF7B42EC((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
      v10 = (_QWORD *)result;
      *a4 = result;
    }
    v10[2] = v12 + 1;
    v13 = &v10[2 * v12];
    v13[4] = v8;
    v13[5] = v9;
  }
  return result;
}

_QWORD *sub_1CF79E94C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *(*a5)(uint64_t *__return_ptr))
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  result = a5(&v8);
  if (!v5)
  {
    MEMORY[0x1D17D45E4](result);
    if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CF7C89D0();
    sub_1CF7C89F4();
    return (_QWORD *)sub_1CF7C89B8();
  }
  return result;
}

uint64_t sub_1CF79E9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v2 = MEMORY[0x1E0C80A80](a1);
  result = v3(v2);
  if (!v1)
  {
    sub_1CF7C8A0C();
    return sub_1CF7C8A00();
  }
  return result;
}

uint64_t XPCDictionary.keys.getter()
{
  return sub_1CF79EAB8((uint64_t)sub_1CF79EA88, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF79E46C);
}

uint64_t sub_1CF79EA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t XPCDictionary.values.getter()
{
  return sub_1CF79EAB8((uint64_t)sub_1CF79EAF0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF79E600);
}

uint64_t sub_1CF79EAB8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, 0, *v2, v2[1], v2[2]);
}

uint64_t sub_1CF79EAF0@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_unknownObjectRetain();
}

const uint8_t *XPCDictionary.sideChannel.getter()
{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  xpc_connection_t v4;
  xpc_connection_t v5;
  const uint8_t *v6;
  const uint8_t *v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  Swift::Int32 v11;

  v1 = *v0;
  v2 = (const char *)(sub_1CF7C8898() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_release();
  if (!v3)
    return 0;
  v4 = XPCDictionary.underlyingConnection.getter();
  if (v4)
  {
    v5 = v4;
    type metadata accessor for XPCObjectDecoder();
    *(_QWORD *)(swift_initStackObject() + 16) = v5;
    v6 = sub_1CF798798((uint64_t)v3);
    swift_release();
  }
  else
  {
    sub_1CF78D000();
    swift_allocError();
    v6 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(inited + 32) = sub_1CF7C8850();
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(inited + 56) = 0x80000001CF7CE2C0;
    v10 = sub_1CF779500(inited);
    v11 = sub_1CF7C0320((ValueMetadata *)0x3E9);
    XPCError.init(code:userInfo:)(v11, (Swift::OpaquePointer)v10);
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v6;
}

uint64_t XPCDictionary.setSideChannel(_:withUnderlyingConnection:)(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v6 = *v2;
  type metadata accessor for XPCObjectEncoder();
  *(_QWORD *)(swift_initStackObject() + 16) = a2;
  swift_retain();
  v7 = sub_1CF7983BC(a1);
  if (!v3)
  {
    v8 = (void *)v7;
    v9 = sub_1CF7C8898();
    xpc_dictionary_set_value(v6, (const char *)(v9 + 32), v8);
    swift_release();
    swift_unknownObjectRelease();
  }
  return swift_release();
}

BOOL static XPCDictionary.== infix(_:_:)(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

BOOL sub_1CF79EDB0(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

uint64_t XPCDictionary.hash(into:)()
{
  xpc_object_t *v0;

  xpc_hash(*v0);
  return sub_1CF7C9240();
}

uint64_t XPCDictionary.hashValue.getter()
{
  void **v0;
  void *v1;

  v1 = *v0;
  sub_1CF7C9234();
  xpc_hash(v1);
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF79EE40()
{
  void **v0;
  void *v1;

  v1 = *v0;
  sub_1CF7C9234();
  xpc_hash(v1);
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF79EE88()
{
  xpc_object_t *v0;

  xpc_hash(*v0);
  return sub_1CF7C9240();
}

uint64_t sub_1CF79EEB4()
{
  void **v0;
  void *v1;

  v1 = *v0;
  sub_1CF7C9234();
  xpc_hash(v1);
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t XPCDictionary.debugDescription.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)MEMORY[0x1D17D58B0](*v0);
  v2 = sub_1CF7C88E0();
  free(v1);
  return v2;
}

uint64_t sub_1CF79EF40()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)MEMORY[0x1D17D58B0](*v0);
  v2 = sub_1CF7C88E0();
  free(v1);
  return v2;
}

uint64_t XPCDictionary.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  xpc_connection_t v5;

  v4 = *v2;
  v5 = XPCDictionary.underlyingConnection.getter();
  type metadata accessor for XPCObjectDecoder();
  *(_QWORD *)(swift_allocObject() + 16) = v5;
  XPCObjectDecoder.decode<A>(_:from:)(a2, v4);
  return swift_release();
}

void XPCDictionary.init(nsDictionary:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;

  v4 = sub_1CF79F088(a1);

  *a2 = v4;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001CF7CD790;
}

xpc_object_t sub_1CF79F088(id a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  xpc_object_t v14;
  xpc_object_t v15;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  const unsigned __int8 *v31;
  void *v32;
  unsigned int v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  const char *v53;
  id v54;
  xpc_object_t v55;
  id v56;
  void *v57;
  void *v58;
  uint64_t v59;
  const __CFNumber *v60;
  CFNumberType Type;
  double v62;
  char v63;
  void *v64;
  void *v65;
  id v66;
  const char *v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  _QWORD v73[4];
  _BYTE v74[32];
  _OWORD v75[2];
  _OWORD v76[2];
  __int128 v77;
  uint64_t v78;
  __int128 v79;

  v2 = sub_1CF7C8520();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (unint64_t *)sub_1CF7C8880();
  v7 = *(v6 - 1);
  MEMORY[0x1E0C80A80](v6);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    v11 = (void *)v10;
    a1 = a1;
    objc_msgSend(v11, sel_timeIntervalSince1970);
    v13 = v12 * 1000000000.0;
    if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          v14 = xpc_date_create((uint64_t)v13);
LABEL_6:
          v15 = v14;
LABEL_7:

          return v15;
        }
        goto LABEL_58;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  objc_opt_self();
  v17 = swift_dynamicCastObjCClass();
  if (!v17)
  {
    objc_opt_self();
    v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      v29 = (void *)v28;
      a1 = a1;
      v30 = (_QWORD *)sub_1CF7C89E8();
      v30[2] = 16;
      v30[5] = 0;
      v30[4] = 0;
      v31 = (const unsigned __int8 *)(v30 + 4);
      objc_msgSend(v29, sel_getUUIDBytes_, v30 + 4);
      v15 = xpc_uuid_create(v31);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      return xpc_null_create();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v56 = a1;
      v55 = xpc_array_create(0, 0);
      sub_1CF7C8AF0();
      sub_1CF7C8514();
      if (v78)
      {
        v6 = &qword_1EFBB2EC8;
        while (1)
        {
          sub_1CF779634(&v77, v75);
          sub_1CF79607C(0, &qword_1EFBB2EC8);
          if (!swift_dynamicCast())
            break;
          v57 = (void *)v73[0];
          v58 = (void *)sub_1CF79F088(v73[0]);
          xpc_array_append_value(v55, v58);

          swift_unknownObjectRelease();
          sub_1CF7C8514();
          if (!v78)
            goto LABEL_33;
        }
        while (1)
        {
LABEL_63:
          sub_1CF7C8CA0();
          __break(1u);
LABEL_64:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
        }
      }
LABEL_33:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      return v55;
    }
    objc_opt_self();
    v59 = swift_dynamicCastObjCClass();
    if (v59)
    {
      v60 = (const __CFNumber *)v59;
      a1 = a1;
      Type = CFNumberGetType(v60);
      if ((unint64_t)Type <= kCFNumberCGFloatType && ((1 << Type) & 0xCF80) == 0)
      {
        if (((1 << Type) & 0x13060) != 0)
        {
          -[__CFNumber doubleValue](v60, sel_doubleValue);
          v14 = xpc_double_create(v62);
          goto LABEL_6;
        }
        if (((1 << Type) & 0x1E) != 0)
        {
          v14 = xpc_int64_create((int64_t)-[__CFNumber longLongValue](v60, sel_longLongValue));
          goto LABEL_6;
        }
      }
      v14 = xpc_uint64_create((uint64_t)-[__CFNumber unsignedLongLongValue](v60, sel_unsignedLongLongValue));
      goto LABEL_6;
    }
LABEL_45:
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v71 = a1;
      v55 = xpc_dictionary_create(0, 0, 0);
      sub_1CF7C8A30();
      swift_retain();
      sub_1CF7C8A3C();
      if (v78)
      {
        v6 = (unint64_t *)v74;
        while (1)
        {
          sub_1CF779634(&v77, v75);
          sub_1CF779634(&v79, v76);
          sub_1CF778DDC((uint64_t)v75, (uint64_t)v73);
          sub_1CF778DDC((uint64_t)v76, (uint64_t)v74);
          sub_1CF79607C(0, &qword_1EFBB2EC0);
          if (!swift_dynamicCast())
            goto LABEL_64;
          v64 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
          sub_1CF778DDC((uint64_t)v75, (uint64_t)v73);
          sub_1CF778DDC((uint64_t)v76, (uint64_t)v74);
          sub_1CF79607C(0, &qword_1EFBB2EC8);
          if (!swift_dynamicCast())
            break;
          v65 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
          v66 = objc_retainAutorelease(v64);
          v67 = (const char *)objc_msgSend(v66, sel_UTF8String);
          if (!v67)
            goto LABEL_60;
          v68 = v67;
          v69 = (void *)sub_1CF79F088(v65);
          xpc_dictionary_set_value(v55, v68, v69);

          swift_unknownObjectRelease();
          sub_1CF778FFC((uint64_t)v75, (uint64_t *)&unk_1EFBB2ED0);
          sub_1CF7C8A3C();
          if (!v78)
            goto LABEL_52;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        goto LABEL_63;
      }
LABEL_52:

      swift_release_n();
      return v55;
    }
    return xpc_null_create();
  }
  v18 = (void *)v17;
  a1 = a1;
  v19 = (void *)sub_1CF7C882C();
  v20 = objc_msgSend(v18, sel_hasPrefix_, v19);

  if (!v20)
  {
    v32 = (void *)sub_1CF7C882C();
    v33 = objc_msgSend(v18, sel_hasPrefix_, v32);

    if (!v33)
    {
      v40 = (void *)sub_1CF7C882C();
      v41 = objc_msgSend(v18, sel_hasPrefix_, v40);

      if (v41)
      {
        v42 = (void *)sub_1CF7C882C();
        v43 = (void *)sub_1CF7C882C();
        v44 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v42, v43);

        v45 = sub_1CF7C8850();
        v47 = v46;

        v48 = sub_1CF7A0168(v45, v47);
        if ((v49 & 1) == 0)
        {
          v14 = xpc_uint64_create(v48);
          goto LABEL_6;
        }
        goto LABEL_61;
      }
      sub_1CF7C8868();
      v51 = sub_1CF7C8874();
      (*(void (**)(char *, unint64_t *))(v7 + 8))(v9, v6);
      v52 = a1;
      v53 = (const char *)objc_msgSend(v18, sel_cStringUsingEncoding_, v51);
      v54 = v18;
      if (!v53)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v55 = xpc_string_create(v53);

      return v55;
    }
    v34 = (void *)sub_1CF7C882C();
    v35 = (void *)sub_1CF7C882C();
    v36 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v34, v35);

    v37 = sub_1CF7C8850();
    v39 = v38;

    if (v37 == 1702195828 && v39 == 0xE400000000000000 || (sub_1CF7C8FC4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v50 = 1;
LABEL_25:
      v14 = xpc_BOOL_create(v50);
      goto LABEL_6;
    }
    if (v37 == 0x65736C6166 && v39 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      v50 = 0;
      goto LABEL_25;
    }
    v63 = sub_1CF7C8FC4();
    swift_bridgeObjectRelease();
    v50 = 0;
    if ((v63 & 1) != 0)
      goto LABEL_25;
    __break(1u);
    goto LABEL_45;
  }
  v21 = (void *)sub_1CF7C882C();
  v22 = (void *)sub_1CF7C882C();
  v23 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v21, v22);

  sub_1CF7C8850();
  v24 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v25 = (void *)sub_1CF7C882C();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithUUIDString_, v25);

  if (!v26)
    goto LABEL_59;
  v27 = sub_1CF79F088(v26);

  return (xpc_object_t)v27;
}

NSDictionary_optional __swiftcall XPCDictionary.toNSDictionary()()
{
  uint64_t *v0;
  id v1;
  objc_class *v2;
  Swift::Bool v3;
  NSDictionary_optional result;

  v1 = sub_1CF79FAE8(*v0);
  objc_opt_self();
  v2 = (objc_class *)swift_dynamicCastObjCClass();
  if (!v2)
  {

    v2 = 0;
  }
  result.value.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id sub_1CF79FAE8(uint64_t isEscapingClosureAtFileLocation)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  id result;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  _QWORD v24[2];
  uint64_t aBlock;
  unint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  void *v28;
  void *v29;
  uint64_t v30;

  v2 = sub_1CF7C8880();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1D17D5ACC](isEscapingClosureAtFileLocation);
  if (XPCTypeDate == v6)
  {
    xpc_date_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
    v7 = objc_allocWithZone(MEMORY[0x1E0C99D68]);
    v8 = sel_initWithTimeIntervalSince1970_;
    return objc_msgSend(v7, v8);
  }
  if (XPCTypeString != v6)
  {
    if (XPCTypeUUID != v6)
    {
      if (XPCTypeBool == v6)
      {
        aBlock = 0;
        v26 = 0xE000000000000000;
        sub_1CF7C8BA4();
        swift_bridgeObjectRelease();
        aBlock = 0x72756372654D5F5FLL;
        v26 = 0xEF5F4C4F4F425F79;
        xpc_BOOL_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
      }
      else
      {
        if (XPCTypeNull == v6)
        {
LABEL_11:
          v7 = objc_allocWithZone(MEMORY[0x1E0C99E38]);
          v8 = sel_init;
          return objc_msgSend(v7, v8);
        }
        if (XPCTypeInt64 == v6)
        {
          xpc_int64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
          return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_);
        }
        if (XPCTypeUInt64 != v6)
        {
          if (XPCTypeDouble == v6)
          {
            xpc_double_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
            v7 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
            v8 = sel_initWithDouble_;
            return objc_msgSend(v7, v8);
          }
          if (XPCTypeArray == v6)
          {
            v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
            v16 = swift_allocObject();
            *(_QWORD *)(v16 + 16) = v15;
            v17 = swift_allocObject();
            *(_QWORD *)(v17 + 16) = sub_1CF7A1660;
            *(_QWORD *)(v17 + 24) = v16;
            v29 = sub_1CF788000;
            v30 = v17;
            aBlock = MEMORY[0x1E0C809A8];
            v26 = 1107296256;
            v27 = sub_1CF77C368;
            v28 = &block_descriptor_78;
            v18 = _Block_copy(&aBlock);
            v11 = v15;
            swift_retain();
            swift_release();
            xpc_array_apply((xpc_object_t)isEscapingClosureAtFileLocation, v18);
            _Block_release(v18);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
              return v11;
            __break(1u);
          }
          else if (XPCTypeDictionary != v6)
          {
            goto LABEL_11;
          }
          v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
          v20 = swift_allocObject();
          *(_QWORD *)(v20 + 16) = v19;
          v21 = swift_allocObject();
          *(_QWORD *)(v21 + 16) = sub_1CF7A1648;
          *(_QWORD *)(v21 + 24) = v20;
          v29 = sub_1CF7A17A0;
          v30 = v21;
          aBlock = MEMORY[0x1E0C809A8];
          v26 = 1107296256;
          v27 = sub_1CF77C368;
          v28 = &block_descriptor_69;
          v22 = _Block_copy(&aBlock);
          v11 = v19;
          swift_retain();
          swift_release();
          xpc_dictionary_apply((xpc_object_t)isEscapingClosureAtFileLocation, v22);
          _Block_release(v22);
          v23 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          result = (id)swift_release();
          if ((v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_28;
          }
          return v11;
        }
        aBlock = 0;
        v26 = 0xE000000000000000;
        sub_1CF7C8BA4();
        swift_bridgeObjectRelease();
        aBlock = 0x72756372654D5F5FLL;
        v26 = 0xEF5F746E49555F79;
        v24[1] = xpc_uint64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
        sub_1CF7C8E14();
      }
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      v11 = (id)sub_1CF7C882C();
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_17:
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_initWithUUIDBytes_, xpc_uuid_get_bytes((xpc_object_t)isEscapingClosureAtFileLocation));
    aBlock = 0;
    v26 = 0xE000000000000000;
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    aBlock = 0x72756372654D5F5FLL;
    v26 = 0xEF5F444955555F79;
    v13 = objc_msgSend(v12, sel_UUIDString);
    sub_1CF7C8850();

    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    v14 = sub_1CF7C882C();

    swift_bridgeObjectRelease();
    return (id)v14;
  }
  result = (id)xpc_string_get_string_ptr((xpc_object_t)isEscapingClosureAtFileLocation);
  if (result)
  {
    isEscapingClosureAtFileLocation = (uint64_t)result;
    sub_1CF7C8868();
    v10 = sub_1CF7C8874();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3940]), sel_initWithCString_encoding_, isEscapingClosureAtFileLocation, v10);
    if (v11)
      return v11;
    __break(1u);
    goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1CF7A0168(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[3];

  v4 = HIBYTE(a2) & 0xF;
  v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = (unint64_t)sub_1CF7A06B4(a1, a2, 10);
    v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)sub_1CF7C8C40();
    v8 = (unint64_t)sub_1CF7A0798(v7, v5, 10);
    v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4)
      goto LABEL_52;
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u)
      goto LABEL_36;
    v8 = (BYTE1(a1) - 48);
    v15 = v4 - 2;
    if (v15)
    {
      v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        v17 = *v16 - 48;
        if (v17 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v17);
        v8 = 10 * v8 + v17;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v16;
        if (!--v15)
          goto LABEL_39;
      }
    }
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u)
      goto LABEL_36;
    v8 = (a1 - 48);
    v18 = v4 - 1;
    if (v18)
    {
      v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        v21 = *v20 - 48;
        if (v21 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v21);
        v8 = 10 * v8 + v21;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v20;
        if (!--v18)
          goto LABEL_39;
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      v2 = 0;
      v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        v11 = v4 - 2;
        if (v11)
        {
          v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v8, 0xAuLL))
              goto LABEL_36;
            v14 = 10 * v8 >= v13;
            v8 = 10 * v8 - v13;
            if (!v14)
              goto LABEL_36;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    v8 = 0;
    v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  v10 = 1;
  v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

uint64_t sub_1CF7A03C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v5 = sub_1CF7C88E0();
  v7 = v6;
  v8 = (void *)sub_1CF79FAE8(a2);
  swift_bridgeObjectRetain();
  objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v8, sub_1CF7C91B0(), v5, v7);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return 1;
}

unint64_t sub_1CF7A045C()
{
  unint64_t result;

  result = qword_1EFBB2E58;
  if (!qword_1EFBB2E58)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2E58);
  }
  return result;
}

uint64_t sub_1CF7A04A0(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v11 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E98);
  sub_1CF796140(&qword_1EFBB2EA0, &qword_1EFBB2E98, (uint64_t)&unk_1CF7CC318);
  sub_1CF7C9294();
  if ((a3 & 1) != 0)
  {
    v14 = 0;
    sub_1CF7A159C();
  }
  else
  {
    v12 = v11;
    v13 = 1;
    sub_1CF7A15E0();
  }
  sub_1CF7C8DD8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1CF7A05F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CF7C8CAC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x1D17D4818](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

unsigned __int8 *sub_1CF7A06B4(uint64_t a1, uint64_t a2, int64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1CF7C8934();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1CF7A0A14();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1CF7C8C40();
  }
LABEL_7:
  v11 = sub_1CF7A0798(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1CF7A0798(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1CF7A0A14()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1CF7C8940();
  v4 = sub_1CF7A0A90(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1CF7A0A90(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1CF7A0BD4(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1CF796CF4(v9, 0);
      v12 = sub_1CF7A0CC0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1D17D4500](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1D17D4500);
LABEL_9:
      sub_1CF7C8C40();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1D17D4500]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1CF7A0BD4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1CF796D58(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1CF796D58(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1CF7C8910();
  }
  __break(1u);
  return result;
}

unint64_t sub_1CF7A0CC0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1CF796D58(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1CF7C891C();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1CF7C8C40();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1CF796D58(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1CF7C88F8();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1CF7A0ED0(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C08];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1CF7A0F90(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_1CF7A0ED0(__src, &__src[a2]);
  sub_1CF7C8490();
  swift_allocObject();
  sub_1CF7C8460();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_1CF7C8580();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1CF7A103C(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CF7A1068(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_1CF7C8580();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = (_BYTE *)sub_1CF7C846C();
  if (v4)
  {
    v5 = sub_1CF7C8484();
    if (!__OFSUB__(0, v5))
    {
      v4 -= v5;
      goto LABEL_10;
    }
LABEL_20:
    __break(1u);
    JUMPOUT(0x1CF7A114CLL);
  }
LABEL_10:
  v6 = sub_1CF7C8478();
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = &v4[v7];
  if (v4)
    v9 = v8;
  else
    v9 = 0;
  v3 = sub_1CF7A0ED0(v4, v9);
  swift_release();
  return v3;
}

uint64_t sub_1CF7A115C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CF7886D4(a1, a2);
  return a1;
}

uint64_t sub_1CF7A1170()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7A119C()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A11AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF77C344(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1CF7A11CC()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A11DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1CF7A11FC()
{
  return sub_1CF7A11DC();
}

uint64_t sub_1CF7A1210()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A1220(uint64_t a1)
{
  return sub_1CF79E9E0(a1);
}

uint64_t sub_1CF7A123C()
{
  return swift_deallocObject();
}

unint64_t sub_1CF7A1250()
{
  unint64_t result;

  result = qword_1EFBB2E70;
  if (!qword_1EFBB2E70)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCDictionary, &type metadata for XPCDictionary);
    atomic_store(result, (unint64_t *)&qword_1EFBB2E70);
  }
  return result;
}

uint64_t sub_1CF7A1294(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1CF799A98(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1CF7A12B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1CF7786B0, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

uint64_t sub_1CF7A12C4()
{
  return 16;
}

__n128 sub_1CF7A12D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1CF7A12DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1CF799A98(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1CF7A12F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1CF7A1768, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF799778);
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(uint64_t *)((char *)a3 + a4 - 16);
  v10 = *(uint64_t *)((char *)a3 + a4 - 8);
  v11 = *a3;
  v12 = a3[1];
  swift_bridgeObjectRetain();
  return sub_1CF779A4C(a1, v11, v12, v9, v10, a5, a6);
}

uint64_t sub_1CF7A1380()
{
  return 16;
}

__n128 sub_1CF7A138C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1CF7A1398(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1CF799A98(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1CF7A13B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1CF7A174C, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))sub_1CF798C18);
}

uint64_t sub_1CF7A13C8()
{
  return 16;
}

__n128 sub_1CF7A13D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1CF7A13E8()
{
  return 0;
}

uint64_t sub_1CF7A1400()
{
  return 0;
}

uint64_t sub_1CF7A1418()
{
  return 0;
}

uint64_t sub_1CF7A1430()
{
  return 0;
}

uint64_t sub_1CF7A1448()
{
  return 0;
}

uint64_t sub_1CF7A1460()
{
  return 0;
}

uint64_t sub_1CF7A1478()
{
  return 0;
}

uint64_t sub_1CF7A1488(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1CF79D714(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1CF7A14A8()
{
  return 0;
}

uint64_t sub_1CF7A14B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1CF79D714(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1CF7A14D8()
{
  return 0;
}

_QWORD *assignWithCopy for XPCDictionary(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for XPCDictionary(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_unknownObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

id sub_1CF7A1590(id result, char a2)
{
  if ((a2 & 1) == 0)
    return result;
  return result;
}

unint64_t sub_1CF7A159C()
{
  unint64_t result;

  result = qword_1EFBB2EA8;
  if (!qword_1EFBB2EA8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for UnknownResultType, &type metadata for UnknownResultType);
    atomic_store(result, (unint64_t *)&qword_1EFBB2EA8);
  }
  return result;
}

unint64_t sub_1CF7A15E0()
{
  unint64_t result;

  result = qword_1ED56D8F0;
  if (!qword_1ED56D8F0)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC188, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED56D8F0);
  }
  return result;
}

uint64_t sub_1CF7A1624()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1CF7A1648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF7A03C4(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1CF7A1650()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A1660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v3 = *(void **)(v2 + 16);
  v4 = (void *)sub_1CF79FAE8(a2);
  objc_msgSend(v3, sel_addObject_, v4);

  return 1;
}

uint64_t sub_1CF7A16A4()
{
  return swift_deallocObject();
}

_QWORD *sub_1CF7A16B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CF79E94C(a1, a2, a3, *(_QWORD **)(v3 + 16), *(_QWORD *(**)(uint64_t *__return_ptr))(v3 + 24));
}

uint64_t sub_1CF7A16D0()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A16E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CF79E87C(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_QWORD *(**)(_QWORD *__return_ptr))(v3 + 24));
}

uint64_t sub_1CF7A16FC()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A170C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7A1730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF79E324(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_1CF7A173C()
{
  return swift_deallocObject();
}

xpc_object_t sub_1CF7A174C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CF79A484(a1, a2);
}

xpc_object_t sub_1CF7A1768@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1CF799B48(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t static remote_device_state_t.attached.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F00;
}

uint64_t static remote_device_state_t.attached.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F00 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.attached.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.connected.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F04;
}

uint64_t static remote_device_state_t.connected.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F04 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.connected.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.disconnected.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F08;
}

uint64_t static remote_device_state_t.disconnected.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F08 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.disconnected.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.invalidOrUnknown.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F0C;
}

uint64_t static remote_device_type_t.invalidOrUnknown.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F0C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.invalidOrUnknown.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.loopback.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F10;
}

uint64_t static remote_device_type_t.loopback.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F10 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.loopback.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.eos.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F14;
}

uint64_t static remote_device_type_t.eos.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F14 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.eos.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoproc.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F18;
}

uint64_t static remote_device_type_t.bridgeCoproc.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F18 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoproc.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHost.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F1C;
}

uint64_t static remote_device_type_t.bridgeHost.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F1C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHost.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F20;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F20 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoprocExternal.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHostExternal.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F24;
}

uint64_t static remote_device_type_t.bridgeHostExternal.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F24 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHostExternal.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bonjourPeer.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F28;
}

uint64_t static remote_device_type_t.bonjourPeer.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F28 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bonjourPeer.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmDevice.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F2C;
}

uint64_t static remote_device_type_t.ncmDevice.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F2C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmDevice.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmHost.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F30;
}

uint64_t static remote_device_type_t.ncmHost.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F30 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmHost.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDevice.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F34;
}

uint64_t static remote_device_type_t.coreDevice.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F34 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDevice.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceDevice.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F38;
}

uint64_t static remote_device_type_t.coreDeviceDevice.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F38 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceDevice.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceHost.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F3C;
}

uint64_t static remote_device_type_t.coreDeviceHost.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F3C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceHost.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.max.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F40;
}

uint64_t static remote_device_type_t.max.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F40 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.max.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.any.getter()
{
  swift_beginAccess();
  return dword_1EFBB2F44;
}

uint64_t static remote_device_type_t.any.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  dword_1EFBB2F44 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.any.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static XPCConnection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(&v3, sub_1CF7A4A24, a2, MEMORY[0x1E0DEAFA0]);
  return v3;
}

uint64_t XPCConnection.send<A>(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];

  v23 = a1;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MessageWrapper(0, v11, v12, v13);
  v24 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A80](v14);
  v16 = (uint64_t *)((char *)&v23 - v15);
  type metadata accessor for XPCObjectEncoder();
  *(_QWORD *)(swift_initStackObject() + 16) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23, a2);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v10, a2, a3, a4, v16);
  v17 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v14);
  v18 = v25[7];
  v19 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v16, v14, v17);
  if (v18)
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v16, v14);
    swift_setDeallocating();
    return swift_release();
  }
  else
  {
    v21 = v19;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v16, v14);
    swift_setDeallocating();
    swift_release();
    v25[0] = v21;
    v25[1] = 0xD000000000000019;
    v25[2] = 0x80000001CF7CD790;
    v22 = *(void (**)(_QWORD *))(*(_QWORD *)v4 + 168);
    swift_unknownObjectRetain();
    v22(v25);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease_n();
  }
}

uint64_t XPCConnection.send<A, B>(value:replyQueue:replyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v17;

  v17 = sub_1CF7A4A38();
  return XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)(a1, a2, (uint64_t)&type metadata for DispatcherErrorWrapper, a3, a4, a5, a6, (uint64_t)&type metadata for DispatcherErrorWrapper, a7, a8, a9, a10, v17);
}

uint64_t XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, uint64_t, uint64_t (*)(uint64_t), _QWORD *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;

  v36 = a7;
  v37 = a8;
  v39 = a4;
  v40 = a5;
  v38 = a3;
  v41 = a2;
  v42 = a1;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A80](a1);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MessageWrapper(0, v18, a9, a10);
  v43 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A80](v19);
  v21 = (uint64_t *)((char *)&v34 - v20);
  type metadata accessor for XPCObjectEncoder();
  *(_QWORD *)(swift_initStackObject() + 16) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v42, a6);
  v42 = v13;
  swift_retain();
  v35 = a9;
  MessageWrapper.init(value:)((uint64_t)v17, a6, a9, a10, v21);
  v22 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v19);
  v23 = v45;
  v24 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v21, v19, v22);
  if (v23)
  {
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v21, v19);
    swift_setDeallocating();
    return swift_release();
  }
  else
  {
    v26 = v24;
    v45 = a12;
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v21, v19);
    swift_setDeallocating();
    swift_release();
    v44[0] = v26;
    v44[1] = 0xD000000000000019;
    v44[2] = 0x80000001CF7CD790;
    v27 = (_QWORD *)swift_allocObject();
    v28 = v36;
    v27[2] = a6;
    v27[3] = v28;
    v29 = v35;
    v27[4] = v37;
    v27[5] = v29;
    v27[6] = a10;
    v27[7] = a11;
    v27[8] = v45;
    v27[9] = a13;
    v30 = v42;
    v31 = v38;
    v27[10] = v42;
    v27[11] = v31;
    v32 = v40;
    v27[12] = v39;
    v27[13] = v32;
    v33 = *(void (**)(_QWORD *, uint64_t, uint64_t (*)(uint64_t), _QWORD *))(*(_QWORD *)v30 + 160);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    v33(v44, v41, sub_1CF7A4AA8, v27);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1CF7A2ABC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a8;
  v30 = a2;
  v31 = a3;
  v32 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
  v12 = sub_1CF7C9264();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A80](v12);
  v16 = (_QWORD *)((char *)v28 - v15);
  v18 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    sub_1CF78D000();
    v19 = swift_allocError();
    *v20 = v18;
    v20[1] = v17;
    *v16 = v19;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    a4(v16);
  }
  else
  {
    v28[1] = v28;
    v21 = *(_QWORD *)(a1 + 16);
    MEMORY[0x1E0C80A80](v14);
    v28[0] = a4;
    v28[-14] = a6;
    v28[-13] = a7;
    v28[-12] = v29;
    v28[-11] = v22;
    v28[-10] = v24;
    v28[-9] = v23;
    v28[-8] = v26;
    v28[-7] = v25;
    v28[-6] = v30;
    v28[-5] = v18;
    v28[-4] = v17;
    v28[-3] = v21;
    v28[-2] = v31;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7A2F90((void (*)(_BYTE *))sub_1CF7A55F8, (uint64_t)v16);
    ((void (*)(uint64_t *))v28[0])(v16);
    sub_1CF7A5650(v18, v17, v21, 0);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v16, v12);
}

void sub_1CF7A2C90(uint64_t a1)
{
  MEMORY[0x1E0C80A80](a1);
  type metadata accessor for DispatcherResponse();
}

void sub_1CF7A2D14(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[96];

  *(_QWORD *)(v6 - 136) = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A80](a1);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A80](v8);
  v13 = &v23[-v12];
  MEMORY[0x1E0C80A80](v11);
  v15 = &v23[-v14];
  v16 = *(_QWORD *)(v2 + 16);
  *(_OWORD *)(v6 - 128) = *(_OWORD *)v2;
  *(_QWORD *)(v6 - 112) = v16;
  MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatcherResponse<A, B>, a1);
  XPCDictionary.decode<A>(_:)(a1, a1);
  if (v1)
  {
    *(_QWORD *)(v6 - 128) = 0;
    *(_QWORD *)(v6 - 120) = 0xE000000000000000;
    sub_1CF7C8BA4();
    v17 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 128);
    *(_QWORD *)(v6 - 120) = v17;
    sub_1CF7C88D4();
    *(_QWORD *)(v6 - 72) = v1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    sub_1CF7C8C7C();
    v18 = *(_QWORD *)(v6 - 128);
    v19 = *(_QWORD *)(v6 - 120);
    v20 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(v18, v19, *(_QWORD *)(v6 - 144), v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

  }
  else
  {
    v22 = *(_QWORD *)(v6 - 136);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v15, v13, a1);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v10, v15, a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 136) + 8))(v15, a1);
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)(*(_QWORD *)(v6 - 168) - 8) + 32))(*(_QWORD *)(v6 - 160), v10);
    }
    else
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(v3, v10, v5);
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 152) + 64))(v5);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 136) + 8))(v15, a1);
    }
  }
}

uint64_t sub_1CF7A2F90@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x1E0C80A80](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1CF7C9264();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t XPCConnection.sendSync<A, B>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_1CF7A4A38();
  return XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)(a1, (uint64_t)&type metadata for DispatcherErrorWrapper, a2, a3, (uint64_t)&type metadata for DispatcherErrorWrapper, a4, a5, a6, a7);
}

uint64_t XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(_QWORD *__return_ptr, _QWORD *);
  _QWORD v28[5];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[8];

  v28[2] = a5;
  v28[3] = a8;
  v28[0] = a2;
  v28[1] = a4;
  v28[4] = a9;
  v29 = a1;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A80](a1);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MessageWrapper(0, v16, v17, v18);
  v30 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A80](v19);
  v21 = (_QWORD *)((char *)v28 - v20);
  type metadata accessor for XPCObjectEncoder();
  *(_QWORD *)(swift_initStackObject() + 16) = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, a3);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v15, a3, a6, a7, v21);
  v22 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v19);
  v23 = v32[7];
  v24 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v21, v19, v22);
  if (!v23)
  {
    v26 = v24;
    (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v21, v19);
    swift_setDeallocating();
    swift_release();
    v31[0] = v26;
    v31[1] = 0xD000000000000019;
    v31[2] = 0x80000001CF7CD790;
    v27 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(*(_QWORD *)v9 + 176);
    swift_unknownObjectRetain();
    v27(v32, v31);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1CF7A2C90((uint64_t)v32);
  }
  (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v21, v19);
  swift_setDeallocating();
  return swift_release();
}

uint64_t XPCPeerConnection.setEventHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);

  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = a7;
  v15[7] = v14;
  v15[8] = a1;
  v15[9] = a2;
  v16 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  v16(sub_1CF7A4B38, v15, a3, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_1CF7A3464(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v31 = a7;
  v32 = a8;
  v29 = a5;
  v30 = a2;
  v33 = a4;
  v34 = a3;
  v28 = a9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
  v11 = sub_1CF7C9264();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A80](v11);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(unsigned __int8 *)(a1 + 24);
  v19 = (void *)v15;
  v20 = v16;
  v21 = v17;
  if (v18 == 1)
  {
    sub_1CF78D000();
    v19 = (void *)swift_allocError();
    v20 = 0;
    v21 = 0;
    *v22 = v15;
    v22[1] = v16;
  }
  v35 = v19;
  v36 = v20;
  v37 = v21;
  v38 = v18;
  MEMORY[0x1E0C80A80](v19);
  *(&v27 - 6) = v29;
  *(&v27 - 5) = a6;
  v23 = v32;
  *(&v27 - 4) = v31;
  *(&v27 - 3) = v23;
  v24 = v30;
  *(&v27 - 2) = v28;
  *(&v27 - 1) = v24;
  sub_1CF7A55A0(v15, v16, v17, v18);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF08);
  sub_1CF7A3870((void (*)(char *))sub_1CF7A5590, v25, (uint64_t)v14);
  sub_1CF7A55CC(v35, v36, v37, v38);
  v34(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1CF7A3614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[40];
  uint64_t v15;

  v8 = type metadata accessor for MessageWrapper(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A80](v8);
  v11 = &v14[-v10];
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&v14[24] = *(_OWORD *)a1;
  v15 = v12;
  MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v8);
  XPCDictionary.decode<A>(_:)(v8, v8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a5, &v11[*(int *)(v8 + 44)], a2);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
  sub_1CF7C9264();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1CF7A3870@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A80](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v12, *(_QWORD *)(a2 + 24));
    sub_1CF7C9264();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1CF7A39BC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a1 + 2);
  v6 = *a1;
  v7 = v4;
  return (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 160))(&v6, 0, a2, a3);
}

uint64_t XPCConnection.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t XPCConnection.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1CF7A3A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = swift_allocObject();
  swift_weakInit();
  v3 = swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F48);
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = sub_1CF77C788(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for XPCObjectEncoder();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  type metadata accessor for XPCObjectDecoder();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_BYTE *)(v4 + 80) = 1;
  *(_QWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = v6;
  swift_beginAccess();
  v7 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = sub_1CF7A4B68;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = sub_1CF7A4B70;
  *(_QWORD *)(v4 + 40) = v3;
  swift_retain();
  sub_1CF7A4B78(v7);
  v8 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  sub_1CF7A4BA8(v8);
  v9 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  sub_1CF7A4BA8(v9);
  swift_release();
  *(_BYTE *)(v4 + 80) = 0;
  swift_beginAccess();
  v10 = swift_retain();
  MEMORY[0x1D17D45E4](v10);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1CF7C89D0();
  sub_1CF7C89F4();
  sub_1CF7C89B8();
  swift_endAccess();
  return v4;
}

uint64_t sub_1CF7A3C38@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD v11[3];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10[0] = v3;
    v10[1] = v4;
    v10[2] = v5;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*(_QWORD *)result + 152))(v11, v10);
    result = swift_release();
    v7 = v11[0];
    v8 = v11[1];
    v9 = v11[2];
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  return result;
}

uint64_t sub_1CF7A3CE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5[0] = v1;
    v5[1] = v2;
    v5[2] = v3;
    (*(void (**)(_QWORD *))(*(_QWORD *)result + 168))(v5);
    return swift_release();
  }
  return result;
}

void sub_1CF7A3D60()
{
  swift_getObjectType();
  OS_xpc_object.type.getter();
}

uint64_t sub_1CF7A3D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(char *);
  uint64_t v4;
  unint64_t v6;
  uint64_t v7[13];

  if (a1 == XPCTypeDictionary)
  {
    v7[0] = v1;
    v7[1] = 0xD000000000000019;
    v7[2] = 0x80000001CF7CD790;
    swift_beginAccess();
    v6 = *(_QWORD *)(v4 + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7A3E54(v7, v6, v3, v2);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v7[0]) = 0;
    return v3((char *)v7);
  }
}

uint64_t *sub_1CF7A3E54(uint64_t *result, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;

  v7 = *result;
  v8 = result[1];
  v9 = result[2];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1CF7C8CAC();
    result = (uint64_t *)swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_3;
LABEL_8:
    v13 = 0;
    return (uint64_t *)a3(&v13);
  }
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_8;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x1D17D480C](0, a2);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    v10 = swift_allocObject();
    swift_weakInit();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v10;
    v11[3] = a3;
    v11[4] = a4;
    v11[5] = v7;
    v11[6] = v8;
    v11[7] = v9;
    v11[8] = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF7B7064(v7, v8, v9, (uint64_t)sub_1CF7A557C, (uint64_t)v11);
    swift_release();
    swift_release();
    return (uint64_t *)swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF7A4008(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v14 = *a1;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    LOBYTE(v25[0]) = 0;
    return a3(v25);
  }
  if ((v14 & 1) == 0)
  {
    v25[0] = a5;
    v25[1] = a6;
    v25[2] = a7;
    if ((unint64_t)a8 >> 62)
    {
      if (a8 < 0)
        a6 = a8;
      else
        a6 = a8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      result = sub_1CF7C8CAC();
      if (result < 0)
      {
        __break(1u);
        return result;
      }
      v16 = result;
      if (result >= 1)
        v17 = 1;
      else
        v17 = result;
      swift_bridgeObjectRetain();
      v14 = sub_1CF7C8CAC();
      swift_bridgeObjectRelease();
      if (v14 >= v17)
      {
        swift_bridgeObjectRetain();
        a6 = sub_1CF7C8CAC();
        swift_bridgeObjectRelease();
        if (a6 >= (uint64_t)v16)
          goto LABEL_10;
        __break(1u);
      }
    }
    else
    {
      v16 = *(_QWORD *)((a8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v16 >= 1)
        v17 = 1;
      else
        v17 = *(_QWORD *)((a8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v16 >= v17)
      {
LABEL_10:
        if ((a8 & 0xC000000000000001) != 0 && v16 >= 2)
        {
          v18 = v17;
          do
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F48);
            sub_1CF7C8BBC();
            ++v18;
          }
          while (v16 != v18);
        }
        if ((unint64_t)a8 >> 62)
        {
          swift_bridgeObjectRetain();
          a6 = sub_1CF7C8CB8();
          v14 = v19;
          v17 = v20;
          v16 = v21;
          swift_bridgeObjectRelease_n();
          if ((v16 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          a6 = a8 & 0xFFFFFFFFFFFFFF8;
          v14 = (a8 & 0xFFFFFFFFFFFFFF8) + 32;
          v16 = (2 * v16) | 1;
          if ((v16 & 1) != 0)
          {
LABEL_19:
            sub_1CF7C9018();
            swift_unknownObjectRetain_n();
            v23 = swift_dynamicCastClass();
            if (!v23)
            {
              swift_unknownObjectRelease();
              v23 = MEMORY[0x1E0DEE9D8];
            }
            v24 = *(_QWORD *)(v23 + 16);
            swift_release();
            if (!__OFSUB__(v16 >> 1, v17))
            {
              if (v24 == (v16 >> 1) - v17)
              {
                v22 = swift_dynamicCastClass();
                if (!v22)
                {
                  swift_unknownObjectRelease();
                  v22 = MEMORY[0x1E0DEE9D8];
                }
                goto LABEL_25;
              }
              goto LABEL_40;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            swift_unknownObjectRelease();
          }
        }
        v22 = sub_1CF7A53B4(a6, v14, v17, v16);
LABEL_25:
        swift_unknownObjectRelease();
        sub_1CF7A3E54(v25, v22, a3, a4);
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  LOBYTE(v25[0]) = 1;
  a3(v25);
  return swift_release();
}

uint64_t sub_1CF7A42D4@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  xpc_object_t v10;
  xpc_object_t reply;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  v5 = MEMORY[0x1E0C80A80](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v9 = (char *)v17 - v8;
  v10 = *a1;
  reply = xpc_dictionary_create_reply(*a1);
  if (reply)
  {
    v12 = (uint64_t)reply;
    v17[1] = reply;
    v17[2] = 0xD000000000000019;
    v17[3] = 0x80000001CF7CD790;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1CF7C88E0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1CF7C85D4();
      swift_bridgeObjectRelease();
      v13 = sub_1CF7C861C();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
        goto LABEL_9;
      }
      sub_1CF7A4BB8((uint64_t)v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v16 = sub_1CF7C861C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
LABEL_9:
    sub_1CF789AB4((uint64_t)v9);
    result = swift_unknownObjectRelease();
    goto LABEL_10;
  }
  result = (uint64_t)xpc_dictionary_create(0, 0, 0);
  v12 = result;
LABEL_10:
  *a2 = v12;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001CF7CD790;
  return result;
}

void sub_1CF7A44D4()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7A452C()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7A4584()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t sub_1CF7A45DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v2;
  *(_OWORD *)(v3 + 120) = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_1CF7A4604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v6 = *(_OWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 56) = v0 + 80;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1CF7A46C4;
  v3 = swift_continuation_init();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  v7 = v6;
  v8 = v1;
  (*(void (**)(__int128 *, _QWORD, uint64_t (*)(uint64_t *), uint64_t))(*(_QWORD *)v2 + 160))(&v7, 0, sub_1CF7A4C08, v4);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_1CF7A46C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 96);
    v3 = *(_QWORD *)(v1 + 104);
    *(_OWORD *)v3 = *(_OWORD *)(v1 + 80);
    *(_QWORD *)(v3 + 16) = v2;
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1CF7A472C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v2 = a1[1];
  if ((a1[3] & 1) != 0)
  {
    sub_1CF78D000();
    v4 = swift_allocError();
    *v5 = v3;
    v5[1] = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    swift_allocError();
    *v6 = v4;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = a1[2];
    v9 = *(_QWORD **)(*(_QWORD *)(a2 + 64) + 40);
    *v9 = v3;
    v9[1] = v2;
    v9[2] = v8;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
}

void sub_1CF7A47F0()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7A4848()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7A48A0()
{
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7A48F8()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t sub_1CF7A4950()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), _QWORD, _QWORD))(*(_QWORD *)v0 + 208))(&v2, sub_1CF7A49B0, 0, MEMORY[0x1E0DEB418]);
  return sub_1CF7C9240();
}

size_t sub_1CF7A49B0@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  size_t result;

  result = xpc_hash(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1CF7A49DC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, _BYTE *@<X8>), _QWORD *, _QWORD))(*(_QWORD *)a2 + 208))(sub_1CF7A5874, v3, MEMORY[0x1E0DEAFA0]);
}

uint64_t sub_1CF7A4A24(uint64_t a1)
{
  return sub_1CF7A5290(a1);
}

unint64_t sub_1CF7A4A38()
{
  unint64_t result;

  result = qword_1ED56D900;
  if (!qword_1ED56D900)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC3B8, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED56D900);
  }
  return result;
}

uint64_t sub_1CF7A4A7C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7A4AA8(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF7A2ABC(a1, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(void (**)(uint64_t *))(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CF7A4AE8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF7A4B0C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7A4B38(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF7A3464(a1, *(_QWORD *)(v1 + 56), *(void (**)(char *))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1CF7A4B68@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CF7A3C38(a1, a2);
}

uint64_t sub_1CF7A4B70(uint64_t *a1)
{
  return sub_1CF7A3CE0(a1);
}

uint64_t sub_1CF7A4B78(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF7A4BA8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1CF7A4BB8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CF7A4BF8()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7A4C08(uint64_t *a1)
{
  uint64_t v1;

  return sub_1CF7A472C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1CF7A4C10()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), _QWORD, _QWORD))(*(_QWORD *)v0 + 208))(&v2, sub_1CF7A4C5C, 0, MEMORY[0x1E0DEA520]);
  return v2;
}

uint64_t sub_1CF7A4C5C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1CF7A4C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = MEMORY[0x1E0DEA968];
  (*(void (**)(_QWORD *__return_ptr, void (*)(uint64_t *@<X8>), _QWORD, _QWORD))(*(_QWORD *)v0 + 208))(v11, sub_1CF7A4D70, 0, MEMORY[0x1E0DEA968]);
  v2 = v11[0];
  v3 = v11[1];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CF7CB5C0;
  v11[0] = *(_QWORD *)v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56D480);
  v5 = sub_1CF7C888C();
  v7 = v6;
  *(_QWORD *)(v4 + 56) = v1;
  v8 = sub_1CF791E0C();
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  v9 = MEMORY[0x1E0DEC558];
  *(_QWORD *)(v4 + 96) = MEMORY[0x1E0DEC548];
  *(_QWORD *)(v4 + 104) = v9;
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = v0;
  *(_QWORD *)(v4 + 136) = v1;
  *(_QWORD *)(v4 + 144) = v8;
  *(_QWORD *)(v4 + 112) = v2;
  *(_QWORD *)(v4 + 120) = v3;
  return sub_1CF7C885C();
}

void sub_1CF7A4D70(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1D17D58B0]();
  *a1 = sub_1CF7C88E0();
  a1[1] = v3;
  free(v2);
}

uint64_t XPCConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF7A4DF4()
{
  uint64_t v0;
  uint64_t v2;

  sub_1CF7C9234();
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), _QWORD, _QWORD))(*(_QWORD *)v0 + 208))(&v2, sub_1CF7A49B0, 0, MEMORY[0x1E0DEB418]);
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7A4E64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t sub_1CF7A4E8C()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), _QWORD, _QWORD))(**(_QWORD **)v0 + 208))(&v2, sub_1CF7A49B0, 0, MEMORY[0x1E0DEB418]);
  return sub_1CF7C9240();
}

unint64_t sub_1CF7A4EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED56D478;
  if (!qword_1ED56D478)
  {
    v1 = type metadata accessor for XPCConnection();
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCConnection, v1);
    atomic_store(result, (unint64_t *)&qword_1ED56D478);
  }
  return result;
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self();
}

uint64_t sub_1CF7A4F58()
{
  uint64_t v0;
  uint64_t v2;

  sub_1CF7C9234();
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), _QWORD, _QWORD))(**(_QWORD **)v0 + 208))(&v2, sub_1CF7A49B0, 0, MEMORY[0x1E0DEB418]);
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7A4FC8()
{
  return MEMORY[0x1E0DEA528];
}

_QWORD *sub_1CF7A4FD4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), _QWORD, _QWORD))(**(_QWORD **)v1 + 208))(&v4, sub_1CF7A4C5C, 0, MEMORY[0x1E0DEA520]);
  *a1 = v4;
  return result;
}

uint64_t sub_1CF7A5034()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t sub_1CF7A505C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), _QWORD, _QWORD))(**(_QWORD **)a1
                                                                                                 + 208))(&v3, sub_1CF7A4A24, *a2, MEMORY[0x1E0DEAFA0]);
  return v3;
}

uint64_t dispatch thunk of XPCListenerConnection.createEndpoint()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XPCPeerConnection.setEventHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of XPCConnectionChainedDispatching.createDispatcher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for XPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of XPCConnection.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCConnection.createDispatcher()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XPCConnection.offerEventToDispatchers(event:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of XPCConnection.createReply(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of XPCConnection.send(message:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of XPCConnection.sendSync(message:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of XPCConnection.sendMessage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 184) + *(_QWORD *)(*(_QWORD *)v2 + 184));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1CF7A51B8;
  return v8(a1, a2);
}

uint64_t sub_1CF7A51B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of XPCConnection.activate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of XPCConnection.setTargetQueue(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of XPCConnection.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of XPCConnection.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of XPCConnection.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of XPCConnection.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of XPCConnection.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_1CF7A5270()
{
  return sub_1CF7A3A40();
}

uint64_t sub_1CF7A5290(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[4];

  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, _BYTE *@<X8>), _QWORD *, _QWORD))(*(_QWORD *)v1 + 208))(sub_1CF7A5874, v3, MEMORY[0x1E0DEAFA0]);
}

_QWORD *sub_1CF7A52CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F60);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_1CF7A567C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1CF78D23C();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1CF7A53B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F48);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F60);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7A5538()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7A557C(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_1CF7A4008(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1CF7A5590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1CF7A3614(a1, v2[3], v2[5], v2[6], a2);
}

uint64_t sub_1CF7A55A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1CF7A55CC(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {

  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1CF7A55F8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_OWORD *)(v0 + 88);
  v3 = v1;
  sub_1CF7A2C90((uint64_t)&v2);
}

void sub_1CF7A5634()
{
  _QWORD *v0;
  uint64_t v1;

  if (v1)
    *v0 = v1;
}

uint64_t sub_1CF7A5650(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7A567C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_1CF7A5874@<W0>(xpc_object_t object2@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _BOOL8 result;

  result = xpc_equal(*(xpc_object_t *)(v2 + 16), object2);
  *a2 = result;
  return result;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:)(void *a1)
{
  uint64_t v2;
  id v3;

  type metadata accessor for RemoteXPCPeerConnection();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 24) = a1;
  v3 = a1;
  return v2;
}

uint64_t type metadata accessor for RemoteXPCPeerConnection()
{
  return objc_opt_self();
}

uint64_t sub_1CF7A593C()
{
  return xpc_remote_connection_activate();
}

void sub_1CF7A5944()
{
  xpc_remote_connection_send_message_with_reply_sync();
  swift_unknownObjectRetain();
  swift_retain();
  sub_1CF7BF104();
}

uint64_t sub_1CF7A5994()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if ((v6 & 1) != 0)
  {
    sub_1CF78D000();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1CF7A5650(v3, v4, v5, 1);
  }
  else
  {
    result = swift_unknownObjectRelease();
    *v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }
  return result;
}

uint64_t sub_1CF7A5A38()
{
  return xpc_remote_connection_send_message();
}

uint64_t sub_1CF7A5A44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _BYTE v10[8];

  v8 = *a1;
  swift_weakInit();
  sub_1CF7A5AB8(v8, v4, a2, (uint64_t)v10, a3, a4);
  return swift_weakDestroy();
}

uint64_t sub_1CF7A5AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F88);
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 0;
  v9 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = a5;
  v10[5] = a6;
  aBlock[4] = sub_1CF7A78E8;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF7A5E10;
  aBlock[3] = &block_descriptor_48;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_send_message_with_reply();
  _Block_release(v11);
  return swift_release();
}

void sub_1CF7A5C2C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  signed __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = (unsigned __int8 *)(a2 + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 | 0x80, v2));
  if ((v3 & 0x80000000) == 0)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_unknownObjectRetain();
    sub_1CF7BF104();
  }
  sub_1CF7C8A60();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CF7CB5D0;
  swift_beginAccess();
  swift_weakLoadStrong();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2F98);
  v5 = sub_1CF7C888C();
  v7 = v6;
  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
  v9 = sub_1CF791E0C();
  *(_QWORD *)(v4 + 64) = v9;
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56D470);
  v10 = sub_1CF7C888C();
  *(_QWORD *)(v4 + 96) = v8;
  *(_QWORD *)(v4 + 104) = v9;
  *(_QWORD *)(v4 + 72) = v10;
  *(_QWORD *)(v4 + 80) = v11;
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
  v12 = (void *)sub_1CF7C8B08();
  sub_1CF7C867C();
  swift_bridgeObjectRelease();

}

uint64_t sub_1CF7A5E10(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF7A5E58()
{
  return xpc_remote_connection_set_target_queue();
}

uint64_t sub_1CF7A5E64(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 24));
}

uint64_t sub_1CF7A5E8C()
{
  return xpc_remote_connection_cancel();
}

uint64_t sub_1CF7A5E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD v10[2];
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E018);
  MEMORY[0x1E0C80A80](v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CF7A4C64();
  v13 = v4;
  v14 = v5;
  if (*(_QWORD *)(v0 + 40))
  {
    v11 = v4;
    v12 = v5;
    v10[0] = 0xD00000000000001CLL;
    v10[1] = 0x80000001CF7CE500;
    v6 = sub_1CF7C8628();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    sub_1CF7A6044();
    swift_bridgeObjectRetain();
    sub_1CF7C8B38();
    v8 = v7;
    sub_1CF7A6088((uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v11 = 0;
      v12 = 0xE000000000000000;
      sub_1CF7C8BA4();
      swift_bridgeObjectRelease();
      v11 = 0xD000000000000016;
      v12 = 0x80000001CF7CE520;
      sub_1CF7C88D4();
      sub_1CF7A60C8();
      sub_1CF7C88A4();
      swift_bridgeObjectRelease();
    }
  }
  return v13;
}

unint64_t sub_1CF7A6044()
{
  unint64_t result;

  result = qword_1EFBB2F70;
  if (!qword_1EFBB2F70)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2F70);
  }
  return result;
}

uint64_t sub_1CF7A6088(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56E018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CF7A60C8()
{
  unint64_t result;

  result = qword_1EFBB2F78;
  if (!qword_1EFBB2F78)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2F78);
  }
  return result;
}

void RemoteXPCConnection.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void RemoteXPCConnection.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CF7A6164()
{
  uint64_t v0;

  return swift_bridgeObjectRelease();
}

uint64_t RemoteXPCConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteXPCConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF7A61E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD v12[6];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = a2;
  swift_retain();
  sub_1CF7A4BA8(v6);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v7;
  v9[3] = v8;
  v9[4] = a1;
  v9[5] = a2;
  v12[4] = sub_1CF7A67CC;
  v12[5] = v9;
  v12[0] = MEMORY[0x1E0C809A8];
  v12[1] = 1107296256;
  v12[2] = sub_1CF7A5E10;
  v12[3] = &block_descriptor_3;
  v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_set_event_handler();
  _Block_release(v10);
  return swift_release();
}

uint64_t sub_1CF7A6318()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7A633C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF7A6360(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void (*v16)(_QWORD *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[9];
  void (*v21)(_QWORD *);
  _QWORD v22[2];
  char v23;

  v20[8] = a5;
  v21 = a4;
  v7 = sub_1CF7C8724();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A80](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CF7C873C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A80](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(a2 + 16))
  {
    swift_retain();
    sub_1CF7A6FB8(a1);
    return swift_release();
  }
  v20[7] = a2 + 16;
  v20[1] = a2;
  v20[2] = v14;
  v16 = v21;
  v20[3] = v10;
  v20[4] = v12;
  v20[5] = v11;
  v20[6] = v8;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    objc_opt_self();
    v17 = swift_dynamicCastObjCClass();
    if (!v17)
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }
    v18 = v17;
    type metadata accessor for RemoteXPCPeerConnection();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
    *(_BYTE *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v19 + 24) = v18;
    v22[0] = v19;
    v22[1] = &protocol witness table for RemoteXPCPeerConnection;
    v23 = 0;
    swift_unknownObjectRetain();
    v16(v22);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1CF7A6554(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v6 = v1;
  if (XPCTypeError != a1)
  {
    v7 = *(void **)(v3 + 24);
    type metadata accessor for RemoteXPCPeerConnection();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    v9 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v8 + 24) = v7;
    *(_BYTE *)(v8 + 64) = 1;
    v10 = *(uint64_t **)(v5 - 264);
    swift_beginAccess();
    *v10 = v8;
    v11 = v7;
    swift_release();
    swift_beginAccess();
    v12 = *v10;
    if (v12)
    {
      *(_QWORD *)(v5 - 232) = v12;
      *(_QWORD *)(v5 - 224) = &protocol witness table for RemoteXPCPeerConnection;
      *(_BYTE *)(v5 - 216) = 0;
      swift_retain();
      v6(v5 - 232);
      swift_release();
      v13 = *(void **)(v3 + 64);
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v5 - 312);
      *(_QWORD *)(v14 + 24) = v4;
      *(_QWORD *)(v5 - 200) = sub_1CF7A78A8;
      *(_QWORD *)(v5 - 192) = v14;
      *(_QWORD *)(v5 - 232) = MEMORY[0x1E0C809A8];
      *(_QWORD *)(v5 - 224) = 1107296256;
      *(_QWORD *)(v5 - 216) = sub_1CF7A684C;
      *(_QWORD *)(v5 - 208) = &block_descriptor_39;
      v15 = _Block_copy((const void *)(v5 - 232));
      swift_unknownObjectRetain();
      v16 = v13;
      swift_retain();
      v17 = *(_QWORD *)(v5 - 304);
      sub_1CF7C8730();
      *(_QWORD *)(v5 - 240) = v9;
      sub_1CF7A7770();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DE58);
      sub_1CF7A77B8();
      v18 = *(_QWORD *)(v5 - 296);
      sub_1CF7C8B80();
      MEMORY[0x1D17D471C](0, v17, v18, v15);
      _Block_release(v15);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 272) + 8))(v18, v2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 288) + 8))(v17, *(_QWORD *)(v5 - 280));
      JUMPOUT(0x1CF7A6438);
    }
    __break(1u);
    JUMPOUT(0x1CF7A67C4);
  }
  swift_unknownObjectRetain();
  swift_retain();
  sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
  XPCError.init(_:from:userInfo:)();
}

uint64_t sub_1CF7A67CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF7A6360(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1CF7A67F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_retain();
    sub_1CF7A6FB8(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF7A684C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1CF7A6878()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t sub_1CF7A68D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)a1;
  if (!a1)
  {
    sub_1CF79607C(0, qword_1ED56E1F0);
    a1 = sub_1CF7C8AC0();
  }
  v3 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  v4 = v2;

  return xpc_remote_connection_set_target_queue();
}

void sub_1CF7A6944()
{
  uint64_t v0;

  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

}

uint64_t RemoteXPCListenerConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCListenerConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

  return swift_deallocClassInstance();
}

void sub_1CF7A69E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  swift_retain();
  sub_1CF7A4BA8(v3);
  if ((*(_BYTE *)(v2 + 64) & 1) == 0)
  {
    v4 = swift_allocObject();
    swift_weakInit();
    v6[4] = sub_1CF7A6E7C;
    v6[5] = v4;
    v6[0] = MEMORY[0x1E0C809A8];
    v6[1] = 1107296256;
    v6[2] = sub_1CF7A5E10;
    v6[3] = &block_descriptor_12;
    v5 = _Block_copy(v6);
    swift_release();
    xpc_remote_connection_set_event_handler();
    _Block_release(v5);
  }
}

uint64_t sub_1CF7A6AB8(void *a1)
{
  uint64_t result;
  const char *v3;
  uint64_t v4;
  char v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = (const char *)result;
    v4 = XPCTypeDictionary;
    if (v4 != MEMORY[0x1D17D5ACC](a1)
      || (type metadata accessor for XPCSideChannel(),
          swift_unknownObjectRetain(),
          swift_retain(),
          v5 = sub_1CF7B89D8(a1, 0xD000000000000019, 0x80000001CF7CD790, v3),
          swift_bridgeObjectRelease(),
          swift_unknownObjectRelease(),
          swift_release(),
          (v5 & 1) == 0))
    {
      swift_unknownObjectRetain();
      swift_retain();
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      XPCError.init(_:from:userInfo:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF7A6E7C(void *a1)
{
  return sub_1CF7A6AB8(a1);
}

void sub_1CF7A6E84(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  v3 = a1;

  if ((*(_BYTE *)(v1 + 64) & 1) == 0)
    xpc_remote_connection_set_target_queue();
}

uint64_t sub_1CF7A6ED8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD v4[6];

  if (!*(_QWORD *)(v0 + 48))
  {
    *(_QWORD *)(v0 + 48) = nullsub_1;
    *(_QWORD *)(v0 + 56) = 0;
    sub_1CF7A4BA8(0);
    if ((*(_BYTE *)(v0 + 64) & 1) == 0)
    {
      v1 = swift_allocObject();
      swift_weakInit();
      v4[4] = sub_1CF7A6E7C;
      v4[5] = v1;
      v4[0] = MEMORY[0x1E0C809A8];
      v4[1] = 1107296256;
      v4[2] = sub_1CF7A5E10;
      v4[3] = &block_descriptor_17;
      v2 = _Block_copy(v4);
      swift_release();
      xpc_remote_connection_set_event_handler();
      _Block_release(v2);
    }
  }
  return xpc_remote_connection_activate();
}

uint64_t sub_1CF7A6FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[7];

  v3 = sub_1CF7C8724();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CF7C873C();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x1E0C80A80](v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v1 + 72);
  if (v12)
  {
    v13 = swift_allocObject();
    v20 = v4;
    v14 = v13;
    swift_weakInit();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = a1;
    aBlock[4] = sub_1CF7A7768;
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E0C809A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CF7A684C;
    aBlock[3] = &block_descriptor_24;
    v16 = _Block_copy(aBlock);
    v17 = v12;
    swift_retain();
    swift_unknownObjectRetain();
    sub_1CF7C8730();
    aBlock[6] = MEMORY[0x1E0DEE9D8];
    sub_1CF7A7770();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DE58);
    sub_1CF7A77B8();
    sub_1CF7C8B80();
    MEMORY[0x1D17D471C](0, v11, v6, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    swift_release();
    return swift_release();
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 48);
    if (v18)
    {
      swift_unknownObjectRetain();
      sub_1CF7A7754(v18);
      swift_retain();
      sub_1CF7BF104();
    }
  }
  return result;
}

uint64_t sub_1CF7A723C()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + 48))
    {
      sub_1CF7A7754(*(_QWORD *)(result + 48));
      swift_unknownObjectRetain();
      swift_retain();
      sub_1CF7BF104();
    }
    return swift_release();
  }
  return result;
}

void sub_1CF7A7324()
{
  uint64_t v0;

  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

}

uint64_t RemoteXPCPeerConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCPeerConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CF7A4BA8(*(_QWORD *)(v0 + 48));

  return swift_deallocClassInstance();
}

_QWORD *static RemoteXPCConnection.remoteServiceListenerConnection(serviceName:targetQueue:)()
{
  uint64_t remote_service_listener;
  _QWORD *v1;

  sub_1CF7C8898();
  remote_service_listener = xpc_remote_connection_create_remote_service_listener();
  swift_release();
  type metadata accessor for RemoteXPCListenerConnection();
  v1 = (_QWORD *)swift_allocObject();
  sub_1CF79607C(0, qword_1ED56E1F0);
  v1[6] = 0;
  v1[7] = 0;
  v1[8] = sub_1CF7C8AC0();
  v1[4] = 0;
  v1[5] = 0;
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = remote_service_listener;
  return v1;
}

uint64_t type metadata accessor for RemoteXPCListenerConnection()
{
  return objc_opt_self();
}

uint64_t static RemoteXPCConnection.connectionToRemoteService(device:serviceName:targetQueue:)()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  sub_1CF7C8898();
  v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0)
    return 0;
  v1 = xpc_remote_connection_create_with_remote_service();

  if (!v1)
    return 0;
  type metadata accessor for RemoteXPCPeerConnection();
  result = swift_allocObject();
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(result + 24) = v1;
  return result;
}

_QWORD *static RemoteXPCConnection.unsafeListener(from:)(void *a1)
{
  _QWORD *v2;
  id v3;

  type metadata accessor for RemoteXPCListenerConnection();
  v2 = (_QWORD *)swift_allocObject();
  sub_1CF79607C(0, qword_1ED56E1F0);
  v2[6] = 0;
  v2[7] = 0;
  v3 = a1;
  v2[8] = sub_1CF7C8AC0();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = v3;
  return v2;
}

_QWORD *static RemoteXPCConnection.unsafeListener(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  id v7;

  type metadata accessor for RemoteXPCListenerConnection();
  v6 = (_QWORD *)swift_allocObject();
  sub_1CF79607C(0, qword_1ED56E1F0);
  v6[6] = 0;
  v6[7] = 0;
  v7 = a1;
  swift_bridgeObjectRetain();
  v6[8] = sub_1CF7C8AC0();
  v6[4] = a2;
  v6[5] = a3;
  v6[2] = MEMORY[0x1E0DEE9D8];
  v6[3] = v7;
  return v6;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;

  type metadata accessor for RemoteXPCPeerConnection();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 24) = a1;
  v7 = a1;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t type metadata accessor for RemoteXPCConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteXPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t method lookup function for RemoteXPCListenerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.setPeerConnectionHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.createEndpoint()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t method lookup function for RemoteXPCPeerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCPeerConnection.setEventHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t sub_1CF7A7754(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1CF7A7768()
{
  return sub_1CF7A723C();
}

unint64_t sub_1CF7A7770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED56DE20;
  if (!qword_1ED56DE20)
  {
    v1 = sub_1CF7C8724();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED56DE20);
  }
  return result;
}

unint64_t sub_1CF7A77B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED56DE60;
  if (!qword_1ED56DE60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DE58);
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED56DE60);
  }
  return result;
}

_BYTE *sub_1CF7A7808(_BYTE *result)
{
  uint64_t v1;

  if ((*result & 1) == 0)
    return (_BYTE *)sub_1CF7A6FB8(*(_QWORD *)(v1 + 24));
  return result;
}

uint64_t sub_1CF7A7834()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7A78A8()
{
  uint64_t v0;

  return sub_1CF7A67F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t objectdestroy_5Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CF7A78E8(uint64_t a1)
{
  uint64_t v1;

  sub_1CF7A5C2C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t audit_token_t.processIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_pid);
}

uint64_t audit_token_t.auditUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_auid);
}

uint64_t audit_token_t.effectiveUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_euid);
}

uint64_t audit_token_t.effectiveGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_egid);
}

uint64_t audit_token_t.realUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_ruid);
}

uint64_t audit_token_t.realGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_rgid);
}

uint64_t audit_token_t.auditSessionIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_asid);
}

uint64_t audit_token_t.processIdentifierVersion.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF7A7988(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))XPCaudit_token_to_pidversion);
}

uint64_t sub_1CF7A7988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *))
{
  _QWORD v6[4];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = a4;
  return a5(v6);
}

uint64_t static audit_token_t.current()()
{
  uint64_t v0;
  task_name_t v1;
  uint64_t result;
  uint64_t v3;
  _OWORD v4[2];
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C08];
  v1 = *MEMORY[0x1E0C83DA8];
  memset(v4, 0, sizeof(v4));
  result = sub_1CF7A7D64((integer_t *)v4, (uint64_t)v5, v1, &v3);
  if (!v0)
    return *(_QWORD *)&v4[0];
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(taskName:)(audit_token_t *__return_ptr retstr, Swift::UInt32 taskName)
{
  uint64_t v2;
  _OWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C08];
  memset(v3, 0, sizeof(v3));
  sub_1CF7A7D64((integer_t *)v3, (uint64_t)v4, taskName, &v2);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(processIdentifier:expectedProcessIdentifierVersion:)(audit_token_t *__return_ptr retstr, Swift::Int32 processIdentifier, Swift::Int32_optional expectedProcessIdentifierVersion)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  kern_return_t v14;
  int v15;
  mach_port_name_t v16;
  ipc_space_t v17;
  mach_port_name_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)&expectedProcessIdentifierVersion.value;
  v28 = *MEMORY[0x1E0C80C08];
  v6 = sub_1CF7C8424();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CF7C8670();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A80](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v27) = 0;
  v14 = task_name_for_pid(*MEMORY[0x1E0C83DA8], processIdentifier, (mach_port_name_t *)&v27 + 1);
  if (v14)
  {
    v15 = v14;
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    MachError.init(uncheckedCode:userInfo:)(v15, (uint64_t)v13);
    sub_1CF7C8664();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_willThrow();
    return;
  }
  v16 = HIDWORD(v27);
  v25 = 0u;
  v26 = 0u;
  sub_1CF7A7D64((integer_t *)&v25, (uint64_t)&v27, HIDWORD(v27), &v24);
  if (v3)
  {
    v17 = *MEMORY[0x1E0C83DA8];
    v18 = v16;
LABEL_5:
    mach_port_deallocate(v17, v18);
    return;
  }
  v23 = v25;
  v22 = DWORD1(v25);
  v21 = DWORD2(v25);
  v20 = HIDWORD(v25);
  v19 = v26;
  if ((v4 & 0x100000000) == 0)
  {
    *(_QWORD *)&v25 = __PAIR64__(v22, v23);
    *((_QWORD *)&v25 + 1) = __PAIR64__(v20, v21);
    LODWORD(v26) = v19;
    if (XPCaudit_token_to_pidversion(&v25) != (_DWORD)v4)
    {
      LODWORD(v25) = 3;
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF7A7E88();
      sub_1CF7C84F0();
      sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_willThrow();
      v17 = *MEMORY[0x1E0C83DA8];
      v18 = HIDWORD(v27);
      goto LABEL_5;
    }
  }
  mach_port_deallocate(*MEMORY[0x1E0C83DA8], v16);
}

uint64_t sub_1CF7A7D64(integer_t *a1, uint64_t a2, task_name_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C08];
  v7 = sub_1CF7C8670();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A80](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v14) = 8;
  if (!a1)
    __break(1u);
  result = task_info(a3, 0xFu, a1, (mach_msg_type_number_t *)&v14 + 1);
  if ((_DWORD)result)
  {
    v12 = result;
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    MachError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v10);
    v13 = sub_1CF7C8664();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    result = swift_willThrow();
    *a4 = v13;
  }
  return result;
}

unint64_t sub_1CF7A7E88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB32E0;
  if (!qword_1EFBB32E0)
  {
    v1 = sub_1CF7C8424();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CADE88], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB32E0);
  }
  return result;
}

uint64_t XPCReplyProviding.init(createReply:sendReply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  return XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(a1, a2, a3, a4, a5);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 80) = a1;
  return result;
}

_xpc_connection_s *sub_1CF7A7F84(xpc_object_t *a1)
{
  xpc_object_t v1;
  _xpc_connection_s *result;
  _xpc_connection_s *v3;

  v1 = *a1;
  result = xpc_dictionary_get_remote_connection(*a1);
  if (result)
  {
    v3 = result;
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      xpc_remote_connection_send_message();
    else
      xpc_connection_send_message(v3, v1);
    return (_xpc_connection_s *)swift_unknownObjectRelease();
  }
  return result;
}

void static XPCReplyProviding.passthrough.getter(_QWORD *a1@<X8>)
{
  *a1 = sub_1CF7A7F80;
  a1[1] = 0;
  a1[2] = sub_1CF7A7F84;
  a1[3] = 0;
}

uint64_t XPCReplyProviding.init(sendReply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = sub_1CF7A7F80;
  a3[1] = 0;
  a3[2] = result;
  a3[3] = a2;
  return result;
}

uint64_t sub_1CF7A802C@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  xpc_object_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  v5 = MEMORY[0x1E0C80A80](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v9 = (char *)v16 - v8;
  v10 = *a1;
  result = (uint64_t)xpc_dictionary_create_reply(*a1);
  if (!result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  v12 = result;
  v16[1] = result;
  v16[2] = 0xD000000000000019;
  v16[3] = 0x80000001CF7CD790;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1CF7C88E0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1CF7C85D4();
    swift_bridgeObjectRelease();
    v13 = sub_1CF7C861C();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
      goto LABEL_9;
    }
    sub_1CF7A4BB8((uint64_t)v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  v15 = sub_1CF7C861C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
LABEL_9:
  sub_1CF789AB4((uint64_t)v9);
  result = swift_unknownObjectRelease();
  *a2 = v12;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001CF7CD790;
  return result;
}

uint64_t XPCReplyProviding.createReply(_:)(__int128 *a1)
{
  uint64_t (**v1)(__int128 *);
  uint64_t v2;
  uint64_t (*v3)(__int128 *);
  __int128 v5;
  uint64_t v6;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *v1;
  v5 = *a1;
  v6 = v2;
  return v3(&v5);
}

uint64_t XPCReplyProviding.sendReply(_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(__int128 *);
  __int128 v5;
  uint64_t v6;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *(uint64_t (**)(__int128 *))(v1 + 16);
  v5 = *a1;
  v6 = v2;
  return v3(&v5);
}

uint64_t XPCMessageDispatchTraits.replyProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_1CF7A8D64(v2);
}

__n128 XPCMessageDispatchTraits.replyProvider.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  sub_1CF7A4B78(*v1);
  result = v5;
  *(__n128 *)v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.replyProvider.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CF7A8308@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CF78E230;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1CF7A7754(v3);
}

uint64_t sub_1CF7A836C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CF78E230;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  sub_1CF7A7754(v3);
  result = sub_1CF7A4BA8(v7);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CF7A7754(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CF7A4BA8(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.inboundObserver.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CF7A846C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CF78E230;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1CF7A7754(v3);
}

uint64_t sub_1CF7A84D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CF78E230;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 48);
  sub_1CF7A7754(v3);
  result = sub_1CF7A4BA8(v7);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1CF7A7754(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CF7A4BA8(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.outboundObserver.modify())()
{
  return nullsub_1;
}

double XPCMessageDispatchTraits.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  type metadata accessor for XPCObjectEncoder();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  type metadata accessor for XPCObjectDecoder();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 80) = v3;
  return result;
}

uint64_t XPCMessageDispatchTraits.isDispatchable(encodedData:)(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = *a1;
  v3 = v1[3];
  v9 = v1[2];
  v10 = v3;
  v11 = v1[4];
  v12 = *((_QWORD *)v1 + 10);
  v4 = v1[1];
  v7 = *v1;
  v8 = v4;
  sub_1CF7A8694(v2, (char *)&v6);
  return v6;
}

void sub_1CF7A8694(uint64_t a1@<X0>, char *a2@<X8>)
{
  void *v2;
  char v4;
  uint64_t v5;

  sub_1CF798874(a1, &v5);
  if (v2)
  {

    v4 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = 1;
  }
  *a2 = v4;
}

uint64_t *XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  void (**v2)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v3;
  uint64_t v5;
  void (*v6)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD v12[3];
  _QWORD v13[5];

  v5 = *result;
  if (*result)
  {
    v13[4] = v3;
    v6 = *v2;
    if (*v2)
    {
      v8 = result[1];
      v7 = result[2];
      v12[0] = v5;
      v12[1] = v8;
      v12[2] = v7;
      sub_1CF7A8D94(v5);
      sub_1CF7A8D64((uint64_t)v6);
      v6(v13, v12);
      sub_1CF7A4B78((uint64_t)v6);
      v9 = (uint64_t *)v13[0];
      if (v13[0])
      {
        v11 = (uint64_t *)v13[1];
        v10 = (uint64_t *)v13[2];
        result = (uint64_t *)sub_1CF7A103C(v5);
        *a2 = v9;
        a2[1] = v11;
        a2[2] = v10;
      }
      else
      {
        sub_1CF7A8DC0();
        swift_allocError();
        swift_willThrow();
        return (uint64_t *)sub_1CF7A103C(v5);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    result = (uint64_t *)xpc_dictionary_create(0, 0, 0);
    *a2 = result;
    a2[1] = (uint64_t *)0xD000000000000019;
    a2[2] = (uint64_t *)0x80000001CF7CD790;
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.encode<A>(value:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  v8 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v8, a4, a5);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t XPCMessageDispatchTraits.decode<A>(encodedData:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_1CF7A8E04);
}

uint64_t XPCMessageDispatchTraits.readEncodedRequestType(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1CF798874(*a1, &v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t XPCMessageDispatchTraits.sink(handlerValue:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(__int128 *);
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *v1;
  if (*v1)
  {
    v3 = (void (*)(__int128 *))v1[2];
    v4 = *(_QWORD *)(result + 16);
    v5 = *(_OWORD *)result;
    v6 = v4;
    swift_retain();
    swift_retain();
    v3(&v5);
    return sub_1CF7A4B78(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.willDispatch(value:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 32);
  if (v1)
    return v1();
  return result;
}

uint64_t XPCMessageDispatchTraits.shouldPass(error:)(void *a1)
{
  uint64_t v1;
  id v2;
  char v3;
  char v5;

  if ((*(_BYTE *)(v1 + 64) & 1) != 0
    || (v2 = a1,
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00),
        !swift_dynamicCast()))
  {
    v3 = 0;
  }
  else
  {
    v3 = v5 ^ 1;
  }
  return v3 & 1;
}

uint64_t XPCMessageDispatchTraits.didDispatch(value:result:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1)
    return v1();
  return result;
}

uint64_t *sub_1CF7A8AC4@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)(a1, a2);
}

uint64_t sub_1CF7A8AD8(uint64_t *a1)
{
  return XPCMessageDispatchTraits.readEncodedRequestType(from:)(a1);
}

uint64_t sub_1CF7A8AEC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return XPCMessageDispatchTraits.encode<A>(value:into:)(a1, a2, a3, a3, a5);
}

uint64_t sub_1CF7A8B04()
{
  return XPCMessageDispatchTraits.decode<A>(encodedData:)();
}

uint64_t sub_1CF7A8B34(uint64_t a1)
{
  return XPCMessageDispatchTraits.sink(handlerValue:)(a1);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[7];
  unsigned __int8 v5;

  sub_1CF7AA1B0((uint64_t)v4);
  v0 = v4[4];
  v1 = v4[6];
  v2 = v5;
  sub_1CF7A4B78(v4[0]);
  sub_1CF7A4BA8(v0);
  sub_1CF7A4BA8(v1);
  swift_release();
  swift_release();
  return v2;
}

void (*XPCMessageDispatcher.errorOnUnregisteredTypes.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  *((_BYTE *)v3 + 56) = XPCMessageDispatcher.errorOnUnregisteredTypes.getter() & 1;
  return sub_1CF7A8C20;
}

void sub_1CF7A8C20(uint64_t a1)
{
  _QWORD *v1;
  char v2;

  v1 = *(_QWORD **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 56);
  swift_beginAccess();
  *(_BYTE *)(v1[6] + 80) = v2;
  free(v1);
}

uint64_t XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;

  v8 = *(_QWORD *)a1;
  v15 = *(_OWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = CodableDispatcher.init()(a1);
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v8;
  *(_OWORD *)(v10 + 24) = v15;
  *(_QWORD *)(v10 + 40) = v9;
  swift_retain();
  sub_1CF7A4B78(v11);
  v12 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 56) = a3;
  sub_1CF7A7754(a2);
  sub_1CF7A4BA8(v12);
  v13 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 64) = a4;
  *(_QWORD *)(v10 + 72) = a5;
  sub_1CF7A4BA8(v13);
  sub_1CF7A4BA8(a2);
  swift_release();
  return v10;
}

uint64_t sub_1CF7A8D64(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1CF7A8D94(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1CF7A8DC0()
{
  unint64_t result;

  result = qword_1EFBB2FA0;
  if (!qword_1EFBB2FA0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCDispatchError, &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FA0);
  }
  return result;
}

uint64_t sub_1CF7A8E04(uint64_t a1)
{
  uint64_t v1;

  return XPCObjectDecoder.decode<A>(_:from:)(*(_QWORD *)(v1 + 24), a1);
}

void XPCMessageDispatcher.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void XPCMessageDispatcher.init()()
{
  sub_1CF7A9060();
}

uint64_t XPCMessageDispatcher.__deallocating_deinit()
{
  CodableDispatcher.deinit();
  return swift_deallocClassInstance();
}

uint64_t XPCDispatchError.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t XPCDispatchError.rawValue.getter()
{
  return 0;
}

uint64_t sub_1CF7A8EA4()
{
  return 1;
}

uint64_t sub_1CF7A8EAC()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7A8EEC()
{
  return sub_1CF7C9240();
}

uint64_t sub_1CF7A8F10()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

_QWORD *sub_1CF7A8F4C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1CF7A8F60(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CF7A8F68()
{
  sub_1CF7A98EC();
  return sub_1CF7C8994();
}

uint64_t sub_1CF7A8FC4()
{
  sub_1CF7A98EC();
  return sub_1CF7C8964();
}

uint64_t sub_1CF7A9014()
{
  sub_1CF7A98EC();
  sub_1CF7A9930();
  return sub_1CF7C9228();
}

void sub_1CF7A9060()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1CF7A9090()
{
  unint64_t result;

  result = qword_1EFBB2FA8;
  if (!qword_1EFBB2FA8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCDispatchError, &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FA8);
  }
  return result;
}

uint64_t sub_1CF7A90DC()
{
  return 8;
}

_QWORD *sub_1CF7A90E8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1CF7A90FC()
{
  return 8;
}

uint64_t sub_1CF7A9108@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = XPCMessageDispatcher.errorOnUnregisteredTypes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1CF7A9134(char *a1)
{
  return XPCMessageDispatcher.errorOnUnregisteredTypes.setter(*a1);
}

uint64_t sub_1CF7A9158()
{
  return 8;
}

uint64_t destroy for XPCReplyProviding()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for XPCReplyProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for XPCReplyProviding(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCReplyProviding(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for XPCReplyProviding()
{
  return &type metadata for XPCReplyProviding;
}

uint64_t sub_1CF7A9284(_QWORD *a1)
{
  if (*a1)
  {
    swift_release();
    swift_release();
  }
  if (a1[4])
    swift_release();
  if (a1[6])
    swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1CF7A92E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v4;
    swift_retain();
    swift_retain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v8 = *(_QWORD *)(a2 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1CF7A93B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      v6 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1CF7A954C(a1);
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
  }
  else if (v4)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  v11 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v11)
    {
      v12 = a2[5];
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v11)
  {
    v13 = a2[5];
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v13;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_15:
  v14 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v14)
    {
      v16 = a2[7];
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v16;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_22;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }
  v15 = a2[7];
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  swift_retain();
  swift_release();
LABEL_22:
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1CF7A954C(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1CF7A95A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_release();
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      swift_release();
      goto LABEL_6;
    }
    sub_1CF7A954C(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_6:
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v7;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_13:
  v9 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v11;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_20;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_19;
  }
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_release();
LABEL_20:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t sub_1CF7A96D0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CF7A9718(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for XPCMessageDispatchTraits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCMessageDispatchTraits);
}

uint64_t sub_1CF7A977C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for XPCMessageDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCMessageDispatcher);
}

uint64_t method lookup function for XPCMessageDispatcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t getEnumTagSinglePayload for XPCDispatchError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for XPCDispatchError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF7A9864 + 4 * byte_1CF7CBA50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF7A9884 + 4 * byte_1CF7CBA55[v4]))();
}

_BYTE *sub_1CF7A9864(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF7A9884(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF7A988C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF7A9894(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF7A989C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF7A98A4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1CF7A98B0()
{
  return 0;
}

ValueMetadata *type metadata accessor for XPCDispatchError()
{
  return &type metadata for XPCDispatchError;
}

uint64_t sub_1CF7A98C8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1CF7A98EC()
{
  unint64_t result;

  result = qword_1EFBB2FB0;
  if (!qword_1EFBB2FB0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCDispatchError, &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FB0);
  }
  return result;
}

unint64_t sub_1CF7A9930()
{
  unint64_t result;

  result = qword_1EFBB2FB8;
  if (!qword_1EFBB2FB8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FB8);
  }
  return result;
}

uint64_t Optional.withUnsafeMutablePointer<A>(_:)@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v39 = a2;
  v41[1] = *MEMORY[0x1E0C80C08];
  v36 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x1E0C80A80](a1);
  v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A80](v9);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A80](v13);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void (**)(char *, uint64_t))(v12 + 16);
  v37 = v22;
  v21(v15, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a3);
    return a1(0);
  }
  else
  {
    v34 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 32);
    v35 = a5;
    v24 = v34(v20, v15, v17);
    v25 = MEMORY[0x1E0C80A80](v24);
    *(&v33 - 4) = v17;
    *(&v33 - 3) = a4;
    v26 = v39;
    *(&v33 - 2) = (uint64_t)a1;
    *(&v33 - 1) = v26;
    MEMORY[0x1E0C80A80](v25);
    *(&v33 - 4) = v17;
    *(&v33 - 3) = a4;
    *(&v33 - 2) = (uint64_t)sub_1CF7A9F14;
    *(&v33 - 1) = v27;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    v29 = v38;
    v30 = v40;
    sub_1CF7A9E38((uint64_t)v20, (uint64_t)sub_1CF7A9E24, (uint64_t)(&v33 - 6), v17, v28, a4, MEMORY[0x1E0DEDB38], (uint64_t)v41);
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
    else
    {
      v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v32 = v37;
      v31((uint64_t)v37, a3);
      v34(v32, v20, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v32, 0, 1, v17);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v35, v29, a4);
    }
  }
}

uint64_t Optional.withUnsafePointer<A>(_:)@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v24 = a5;
  v25[1] = *MEMORY[0x1E0C80C08];
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A80](a1);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A80](v10);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v12, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
    return a1(0);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v12, v14);
    v21 = MEMORY[0x1E0C80A80](v20);
    *(&v24 - 4) = v14;
    *(&v24 - 3) = a4;
    *(&v24 - 2) = (uint64_t)a1;
    *(&v24 - 1) = a2;
    MEMORY[0x1E0C80A80](v21);
    *(&v24 - 4) = v14;
    *(&v24 - 3) = a4;
    *(&v24 - 2) = (uint64_t)sub_1CF7A9EC4;
    *(&v24 - 1) = v22;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    sub_1CF7A9E38((uint64_t)v17, (uint64_t)sub_1CF7A9E24, (uint64_t)(&v24 - 6), v14, v23, a4, MEMORY[0x1E0DEDB38], (uint64_t)v25);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1CF7A9E24(uint64_t a1, _QWORD *a2)
{
  return sub_1CF7A9EE4(a1, a2);
}

uint64_t sub_1CF7A9E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A80](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1CF7A9EC4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1CF7A9EE4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_1CF7A9F14()
{
  return sub_1CF7A9EC4();
}

uint64_t MessageWrapper.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for MessageWrapper(0, a2, a3, a4);
  v9 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)a5 + *(int *)(v8 + 44), a1, a2);
  v10 = sub_1CF7C92D0();
  v12 = v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a5 = v10;
  a5[1] = v12;
  return result;
}

uint64_t type metadata accessor for MessageWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageWrapper);
}

uint64_t sub_1CF7A9FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

BOOL static DispatchOutcome.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CodableDispatcher.init()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + v7[14]) = 0;
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v9 = v7[12];
  type metadata accessor for CodableDispatcher.OperationInfo(255, v3, v7[11], v9);
  swift_getTupleTypeMetadata2();
  sub_1CF7C89DC();
  *(_QWORD *)(v2 + v8) = sub_1CF7C8784();
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v3, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104), v6, v3);
  return v2;
}

uint64_t CodableDispatcher.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CF7AA1B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1CF7AA214(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_1CF7AA280())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CF7AA2C4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t sub_1CF7AA2D4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112)) = result;
  return result;
}

uint64_t sub_1CF7AA2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CF7AA4CC(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1CF7AA30C);
}

void sub_1CF7AA30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = *(_QWORD **)v11;
  if ((*(_BYTE *)(v11 + *(_QWORD *)(*(_QWORD *)v11 + 112)) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1CF7C92D0();
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = (_QWORD *)swift_allocObject();
    v20 = v12[10];
    v19[2] = v20;
    v21 = v12[11];
    v19[3] = v21;
    v19[4] = a4;
    v19[5] = a5;
    v19[6] = a6;
    v22 = v12[12];
    v19[7] = v22;
    v19[8] = a7;
    v19[9] = a8;
    v19[10] = a9;
    v19[11] = a10;
    v19[12] = a11;
    v19[13] = v18;
    v19[14] = a2;
    v19[15] = a3;
    swift_beginAccess();
    type metadata accessor for CodableDispatcher.OperationInfo(255, v20, v21, v22);
    sub_1CF7C879C();
    swift_retain();
    sub_1CF7C87B4();
    swift_endAccess();
  }
}

uint64_t sub_1CF7AA4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CF7AA4CC(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1CF7AA560);
}

uint64_t sub_1CF7AA4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  unint64_t v17;

  v17 = sub_1CF7A4A38();
  return a9(v17, a1, a2, a3, a4, &type metadata for DispatcherErrorWrapper, a5, a6, a7, a8, v17);
}

void sub_1CF7AA560()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
    sub_1CF7A4A38();
    type metadata accessor for CompositeDynamicCodableContainer();
  }
  __break(1u);
}

uint64_t sub_1CF7AA71C()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for CodableDispatcher.OperationInfo(0, v1[10], v1[11], v1[12]);
  swift_bridgeObjectRetain();
  sub_1CF7C92D0();
  v2 = sub_1CF7C8790();
  MEMORY[0x1D17D55BC](MEMORY[0x1E0DE9ED0], v2);
  v3 = sub_1CF7C8958();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1CF7AA804()
{
  sub_1CF7B1394();
  sub_1CF7A159C();
  type metadata accessor for DispatcherResponse();
}

uint64_t sub_1CF7AA8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  void (*v35)(_BYTE *, uint64_t);
  _BYTE *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  id v47;
  void (*v48)(uint64_t, _QWORD, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v94;
  _BYTE v95[80];

  *(_QWORD *)(v6 - 464) = a1;
  *(_QWORD *)(v6 - 472) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A80](a1);
  *(_QWORD *)(v6 - 480) = &v95[-v7];
  v8 = v4[12];
  v9 = v4[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_1CF7C8B14();
  *(_QWORD *)(v6 - 432) = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A80](v11);
  *(_QWORD *)(v6 - 424) = &v95[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x1E0C80A80](v12);
  *(_QWORD *)(v6 - 416) = &v95[-v15];
  v16 = MEMORY[0x1E0C80A80](v14);
  *(_QWORD *)(v6 - 408) = &v95[-v17];
  *(_QWORD *)(v6 - 376) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 384) = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A80](v16);
  *(_QWORD *)(v6 - 456) = &v95[-v19];
  *(_QWORD *)(v6 - 328) = v2;
  *(_QWORD *)(v6 - 400) = *(_QWORD *)(v2 - 8);
  v20 = MEMORY[0x1E0C80A80](v18);
  *(_QWORD *)(v6 - 336) = &v95[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *(_QWORD *)(v9 - 8);
  v23 = MEMORY[0x1E0C80A80](v20);
  *(_QWORD *)(v6 - 488) = &v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = MEMORY[0x1E0C80A80](v23);
  *(_QWORD *)(v6 - 496) = &v95[-v26];
  v27 = MEMORY[0x1E0C80A80](v25);
  v29 = &v95[-v28];
  MEMORY[0x1E0C80A80](v27);
  v31 = &v95[-v30];
  v32 = v4[13];
  *(_QWORD *)(v6 - 360) = v5;
  v33 = v5 + v32;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v22 + 16))(v31, v33, v9);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 80);
  *(_QWORD *)(v6 - 392) = v8;
  LOBYTE(v33) = v34(v3, v9, v8);
  v35 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  v36 = v31;
  *(_QWORD *)(v6 - 368) = v35;
  v35(v31, v9);
  if ((v33 & 1) == 0)
  {
    *(_QWORD *)(v6 - 320) = v3;
    v41 = v3;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v43 = *(_QWORD *)(v6 - 384);
      v44 = v6 - 176;
      v45 = *(_QWORD *)(v6 - 432);
      if (*(_BYTE *)(v6 - 264) == 1)
        goto LABEL_2;
    }
    else
    {
      v43 = *(_QWORD *)(v6 - 384);
      v44 = v6 - 176;
      v45 = *(_QWORD *)(v6 - 432);
    }
    *(_QWORD *)(v44 - 256) = v31;
    *(_QWORD *)(v6 - 320) = v3;
    v46 = *(void (**)(uint64_t))(v1 + 56);
    v47 = v3;
    v46(v6 - 320);
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 16);
    v49 = *(_QWORD *)(v6 - 416);
    v48(v49, *(_QWORD *)(v6 - 448), v11);
    v50 = *(_QWORD *)(v6 - 424);
    v48(v50, *(_QWORD *)(v6 - 440), v11);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    v52 = *(_QWORD *)(v6 - 376);
    *(_QWORD *)(v6 - 440) = v51;
    if (v51(v49, 1, v52) == 1)
    {
      v53 = *(uint64_t **)(v6 - 360);
      v54 = *v53;
      v55 = (uint64_t)v53 + *(_QWORD *)(*v53 + 104);
      swift_beginAccess();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v54 + 80) - 8) + 16))(v29, v55);
      v56 = v50;
      v57 = *(_QWORD *)(v6 - 392);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v9, v57);
      (*(void (**)(_BYTE *, uint64_t))(v6 - 368))(v29, v9);
      v61 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v61(*(_QWORD *)(v6 - 424), v11);
      v62 = *(_QWORD *)(v6 - 408);
      v52 = *(_QWORD *)(v6 - 376);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v62, 0, 1, v52);
      v61(*(_QWORD *)(v6 - 416), v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 440))(v62, 1, v52) == 1)
      {
        v61(v62, v11);
        sub_1CF7C8A60();
        sub_1CF7B13D8();
        v63 = (void *)sub_1CF7C8B08();
        sub_1CF7C867C();

        sub_1CF7B1414(*(_QWORD *)(v6 - 352), v6 - 320);
        v64 = *(uint64_t **)(v6 - 360);
        if (*(_QWORD *)(v6 - 296))
        {
          sub_1CF7B145C((__int128 *)(v6 - 320), (_OWORD *)(v6 - 264));
          v65 = *v64;
          v66 = (uint64_t)v64 + *(_QWORD *)(*v64 + 104);
          swift_beginAccess();
          v67 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 80) - 8) + 16);
          v68 = *(_QWORD *)(v6 - 432);
          v67(v68, v66);
          *(_QWORD *)(v6 - 320) = v3;
          *(_BYTE *)(v6 - 272) = 1;
          v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 72);
          v70 = v3;
          v69(v6 - 264, v6 - 320, v9, v57);
          sub_1CF778FFC(v6 - 320, (uint64_t *)&unk_1ED56DF10);
          (*(void (**)(uint64_t, uint64_t))(v6 - 368))(v68, v9);
LABEL_19:
          __swift_destroy_boxed_opaque_existential_1Tm(v6 - 264);
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 400) + 8))(*(_QWORD *)(v6 - 336), *(_QWORD *)(v6 - 328));
LABEL_21:
          v58 = *(char **)(v6 - 344);
          v59 = 1;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      *(_QWORD *)(v6 - 448) = v42;
      *(_QWORD *)(v6 - 440) = v3;
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
    }
    else
    {
      *(_QWORD *)(v6 - 448) = v42;
      *(_QWORD *)(v6 - 440) = v3;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v50, v11);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
      v62 = *(_QWORD *)(v6 - 408);
      v60(v62, v49, v52);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v62, 0, 1, v52);
      v57 = *(_QWORD *)(v6 - 392);
    }
    v71 = *(uint64_t **)(v6 - 360);
    v72 = *(_QWORD *)(v6 - 456);
    v60(v72, v62, v52);
    v73 = *v71;
    v74 = (uint64_t)v71 + *(_QWORD *)(*v71 + 104);
    swift_beginAccess();
    v75 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v73 + 80) - 8) + 16);
    v76 = *(_QWORD *)(v6 - 496);
    v75(v76, v74);
    v77 = *(_QWORD *)(v6 - 480);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 - 400) + 16))(v77, *(_QWORD *)(v6 - 336), *(_QWORD *)(v6 - 328));
    v78 = *(_QWORD *)(v6 - 464);
    swift_storeEnumTagMultiPayload();
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 48);
    v80 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatcherResponse<A, B>, v78);
    v81 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatcherResponse<A, B>, v78);
    v79(v77, v72, v78, v80, v81, v9, v57);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 472) + 8))(v77, v78);
    v82 = *(void (**)(uint64_t, uint64_t))(v6 - 368);
    v82(v76, v9);
    v83 = *v71;
    v84 = (uint64_t)v71 + *(_QWORD *)(*v71 + 104);
    swift_beginAccess();
    v85 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v83 + 80) - 8) + 16);
    v86 = *(_QWORD *)(v6 - 488);
    v85(v86, v84);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 96))(v72, v9, v57);
    v87 = *(_QWORD *)(v6 - 352);
    v82(v86, v9);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 384) + 8))(v72, *(_QWORD *)(v6 - 376));
    sub_1CF7B1414(v87, v6 - 320);
    if (*(_QWORD *)(v6 - 296))
    {
      sub_1CF7B145C((__int128 *)(v6 - 320), (_OWORD *)(v6 - 264));
      v88 = *v71;
      v89 = (uint64_t)v71 + *(_QWORD *)(*v71 + 104);
      swift_beginAccess();
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v88 + 80) - 8) + 16);
      v91 = *(_QWORD *)(v6 - 432);
      v90(v91, v89);
      v92 = *(void **)(v6 - 440);
      *(_QWORD *)(v6 - 320) = v92;
      *(_BYTE *)(v6 - 272) = 1;
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 72);
      v94 = v92;
      v93(v6 - 264, v6 - 320, v9, v57);
      sub_1CF778FFC(v6 - 320, (uint64_t *)&unk_1ED56DF10);
      v82(v91, v9);
      goto LABEL_19;
    }
LABEL_20:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 400) + 8))(*(_QWORD *)(v6 - 336), *(_QWORD *)(v6 - 328));
    result = sub_1CF778FFC(v6 - 320, &qword_1EFBB3280);
    goto LABEL_21;
  }
LABEL_2:
  sub_1CF7B1414(*(_QWORD *)(v6 - 352), v6 - 264);
  if (*(_QWORD *)(v6 - 240))
  {
    sub_1CF7B145C((__int128 *)(v6 - 264), (_OWORD *)(v6 - 320));
    v37 = *(uint64_t **)(v6 - 360);
    v38 = *v37;
    v39 = (uint64_t)v37 + *(_QWORD *)(*v37 + 104);
    swift_beginAccess();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 80) - 8) + 16))(v36, v39);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 392) + 88))(v6 - 320, v9);
    (*(void (**)(_BYTE *, uint64_t))(v6 - 368))(v36, v9);
    result = __swift_destroy_boxed_opaque_existential_1Tm(v6 - 320);
  }
  else
  {
    result = sub_1CF778FFC(v6 - 264, &qword_1EFBB3280);
  }
  v58 = *(char **)(v6 - 344);
  v59 = 0;
LABEL_22:
  *v58 = v59;
  return result;
}

uint64_t sub_1CF7AB3BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, char *(*)(char *), uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_OWORD *);
  uint64_t v53;
  _QWORD v54[2];
  _OWORD v55[4];

  v5 = v4;
  v50 = a4;
  v52 = a3;
  v45 = a2;
  v53 = a1;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 96);
  v8 = *(_QWORD *)(*v4 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = sub_1CF7C8B14();
  v46 = *(_QWORD *)(v47 - 8);
  v9 = MEMORY[0x1E0C80A80](v47);
  v49 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A80](v9);
  v13 = (char *)&v44 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x1E0C80A80](v11);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v15);
  v19 = (char *)&v44 - v18;
  *((_BYTE *)v5 + *(_QWORD *)(v6 + 112)) = 1;
  v20 = *v5;
  v21 = (uint64_t)v5 + *(_QWORD *)(*v5 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 80) - 8) + 16))(v19, v21);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v51 = v7;
  LOBYTE(v21) = v22(v53, v8, v7);
  v23 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  result = v23(v19, v8);
  if ((v21 & 1) != 0)
  {
    v44 = v13;
    v25 = *v5;
    v26 = (uint64_t)v5 + *(_QWORD *)(*v5 + 104);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 80) - 8) + 16))(v17, v26);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 40))(v53, v8);
    v30 = v17;
    v32 = v31;
    v23(v30, v8);
    v33 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 120));
    swift_beginAccess();
    v34 = *v33;
    v54[0] = v29;
    v54[1] = v32;
    v35 = type metadata accessor for CodableDispatcher.OperationInfo(0, v8, *(_QWORD *)(v6 + 88), v51);
    swift_bridgeObjectRetain();
    MEMORY[0x1D17D43EC](v55, v54, v34, MEMORY[0x1E0DEA968], v35, MEMORY[0x1E0DEA978]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = *(void (**)(uint64_t, uint64_t, char *(*)(char *), uint64_t))&v55[0];
    v37 = v49;
    v38 = v44;
    v39 = AssociatedTypeWitness;
    if (!*(_QWORD *)&v55[0])
    {
      sub_1CF7AF5E0();
      swift_allocError();
      *v43 = 0;
      swift_willThrow();
      memset(v55, 0, 48);
      v27 = *(_QWORD *)(v39 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v38, v53, v39);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v28(v38, 0, 1, v39);
      v28(v37, 1, 1, v39);
      sub_1CF7A4A38();
      sub_1CF7AA804();
    }
    v40 = swift_allocObject();
    v41 = (uint64_t)v52;
    v42 = v50;
    *(_QWORD *)(v40 + 16) = v52;
    *(_QWORD *)(v40 + 24) = v42;
    sub_1CF7A7754((uint64_t)v36);
    sub_1CF7A7754(v41);
    v36(v53, v45, sub_1CF7AF650, v40);
    swift_release();
    sub_1CF7A4BA8((uint64_t)v36);
    return sub_1CF7A4BA8((uint64_t)v36);
  }
  else if (v52)
  {
    LOBYTE(v55[0]) = 0;
    return v52(v55);
  }
  return result;
}

uint64_t sub_1CF7AB874(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, void (*)(uint64_t a1), char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t *boxed_opaque_existential_0Tm;
  void (*v83)(uint64_t *, uint64_t, uint64_t);
  char *v84;
  uint64_t result;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, void (*)(uint64_t), char *);
  void (*v108)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;

  v129 = a7;
  v128 = a6;
  v106 = a5;
  v107 = a4;
  v104 = a3;
  v105 = a2;
  v140 = a1;
  v127 = a15;
  v126 = a10;
  v17 = *v15;
  v138 = *(_QWORD *)(*v15 + 96);
  v103 = v17;
  v141 = *(_QWORD *)(v17 + 80);
  v18 = v141;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v101 = *(_QWORD *)(v20 + 64);
  MEMORY[0x1E0C80A80](AssociatedTypeWitness);
  v102 = (char *)&v100 - v21;
  v22 = sub_1CF7C8B14();
  v133 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A80](v22);
  v122 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A80](v23);
  v112 = (char *)&v100 - v26;
  MEMORY[0x1E0C80A80](v25);
  v110 = (char *)&v100 - v27;
  v136 = a11;
  v116 = a12;
  v115 = type metadata accessor for MessageWrapper(0, a8, a11, a12);
  v109 = *(_QWORD *)(v115 - 8);
  v28 = MEMORY[0x1E0C80A80](v115);
  v114 = (char *)&v100 - v29;
  v130 = *(_QWORD *)(v18 - 8);
  v30 = MEMORY[0x1E0C80A80](v28);
  v111 = (char *)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A80](v30);
  v113 = (char *)&v100 - v33;
  MEMORY[0x1E0C80A80](v32);
  v35 = (char *)&v100 - v34;
  v36 = sub_1CF7C8B14();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = MEMORY[0x1E0C80A80](v36);
  v121 = (char *)&v100 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A80](v38);
  v120 = (char *)&v100 - v41;
  v42 = MEMORY[0x1E0C80A80](v40);
  v44 = (char *)&v100 - v43;
  MEMORY[0x1E0C80A80](v42);
  v46 = (char *)&v100 - v45;
  v134 = v22;
  v125 = swift_allocBox();
  v135 = *(_QWORD *)(a8 - 8);
  v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56);
  v132 = v48;
  v137 = a8;
  v108 = v47;
  v47(v48, 1, 1, a8);
  v131 = v36;
  v124 = swift_allocBox();
  v50 = v49;
  v51 = v20;
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v52(v49, 1, 1, AssociatedTypeWitness);
  v53 = *v139;
  v54 = (uint64_t)v139 + *(_QWORD *)(*v139 + 104);
  swift_beginAccess();
  v55 = *(_QWORD *)(v53 + 80);
  v56 = v140;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v35, v54);
  v123 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  v123(v44, v56, AssociatedTypeWitness);
  v52((uint64_t)v44, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v138 + 32))(v44, v141);
  v119 = v37;
  v118 = v50;
  v117 = v52;
  v100 = v51;
  v57 = v44;
  v58 = v131;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v57, v131);
  v130 = *(_QWORD *)(v130 + 8);
  ((void (*)(char *, uint64_t))v130)(v35, v141);
  v52((uint64_t)v46, 0, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v50, v46, v58);
  v59 = v139;
  v60 = *v139;
  v61 = (uint64_t)v139 + *(_QWORD *)(*v139 + 104);
  swift_beginAccess();
  v62 = v113;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v60 + 80) - 8) + 16))(v113, v61);
  v63 = v138;
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
  v65 = v115;
  v66 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v115);
  v64(v140, v65, v66, v141, v63);
  v67 = v59;
  v131 = AssociatedTypeWitness;
  v68 = v141;
  v69 = (void (*)(char *, uint64_t))v130;
  ((void (*)(char *, uint64_t))v130)(v62, v141);
  v70 = v115;
  v71 = v114;
  v72 = v135;
  v73 = v110;
  v74 = v137;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v110, &v114[*(int *)(v115 + 44)], v137);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v71, v70);
  v108(v73, 0, 1, v74);
  v75 = v133;
  v76 = v132;
  v77 = v134;
  (*(void (**)(char *, char *, uint64_t))(v133 + 40))(v132, v73, v134);
  v78 = *v67;
  v79 = (uint64_t)v67 + *(_QWORD *)(*v67 + 104);
  swift_beginAccess();
  v80 = *(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v78 + 80) - 8) + 16);
  v81 = v111;
  v80(v111, v79);
  *((_QWORD *)&v145 + 1) = v77;
  v143 = v136;
  v146 = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE9A0], v77, &v143);
  v142 = v116;
  v147 = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE988], v77, &v142);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v144);
  v83 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v75 + 16);
  v83(boxed_opaque_existential_0Tm, (uint64_t)v76, v77);
  (*(void (**)(__int128 *, uint64_t))(v138 + 64))(&v144, v68);
  v69(v81, v68);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v144);
  v84 = v112;
  v83((uint64_t *)v112, (uint64_t)v76, v77);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48))(v84, 1, v74);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v86 = swift_allocObject();
    swift_weakInit();
    v87 = v102;
    v88 = v131;
    v123(v102, v140, v131);
    v89 = v100;
    v90 = (*(unsigned __int8 *)(v100 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    v91 = (v101 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
    v92 = (char *)swift_allocObject();
    *((_QWORD *)v92 + 2) = v141;
    v93 = v137;
    *((_QWORD *)v92 + 3) = *(_QWORD *)(v103 + 88);
    *((_QWORD *)v92 + 4) = v93;
    v94 = v126;
    *((_QWORD *)v92 + 5) = a9;
    *((_QWORD *)v92 + 6) = v94;
    v95 = v136;
    *((_QWORD *)v92 + 7) = v138;
    *((_QWORD *)v92 + 8) = v95;
    *((_QWORD *)v92 + 9) = v116;
    *((_QWORD *)v92 + 10) = a13;
    v96 = v127;
    *((_QWORD *)v92 + 11) = a14;
    *((_QWORD *)v92 + 12) = v96;
    v97 = v124;
    *((_QWORD *)v92 + 13) = v86;
    *((_QWORD *)v92 + 14) = v97;
    v98 = v128;
    *((_QWORD *)v92 + 15) = v125;
    *((_QWORD *)v92 + 16) = v98;
    *((_QWORD *)v92 + 17) = v129;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v92[v90], v87, v88);
    *(_QWORD *)&v92[v91] = v104;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v99 = v112;
    v107(v112, v105, sub_1CF7B126C, v92);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v99, v137);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF7AC38C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v41)(_QWORD, _QWORD, _QWORD);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void (*v48)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  char *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t (*v71)(_OWORD *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v77;
  char *v78;
  uint64_t v79;

  v6 = v5;
  v61 = a4;
  v71 = a3;
  v57 = a2;
  v75 = a1;
  v7 = (_QWORD *)*v5;
  v72 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A80](a1);
  v64 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v9;
  v73 = v10;
  v74 = v11;
  v60 = type metadata accessor for MessageWrapper(0, v9, v10, v11);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A80](v60);
  v58 = (uint64_t *)((char *)&v54 - v12);
  v13 = v7[12];
  v14 = v7[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = sub_1CF7C8B14();
  v68 = *(_QWORD **)(v16 - 8);
  v17 = MEMORY[0x1E0C80A80](v16);
  v66 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A80](v17);
  v78 = (char *)&v54 - v20;
  v21 = MEMORY[0x1E0C80A80](v19);
  v67 = (char *)&v54 - v22;
  v23 = MEMORY[0x1E0C80A80](v21);
  v25 = (char *)&v54 - v24;
  v26 = *(_QWORD *)(v14 - 8);
  v27 = MEMORY[0x1E0C80A80](v23);
  v77 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A80](v27);
  v62 = (char *)&v54 - v30;
  v31 = MEMORY[0x1E0C80A80](v29);
  v33 = (char *)&v54 - v32;
  MEMORY[0x1E0C80A80](v31);
  v35 = (char *)&v54 - v34;
  v36 = v7[13];
  v70 = v6;
  v37 = (char *)v6 + v36;
  v39 = v38;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v33, v37, v14);
  v40 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v39 + 56);
  v79 = AssociatedTypeWitness;
  v76 = v40;
  v40(v25, 1, 1, AssociatedTypeWitness);
  v41 = *(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 32);
  v63 = v35;
  v65 = v41;
  v41(v25, v14, v13);
  v56 = v39;
  v42 = (_QWORD *)v68[1];
  v54 = v16;
  v68 = v42;
  ((void (*)(char *, uint64_t))v42)(v25, v16);
  v55 = *(void (**)(char *, uint64_t))(v26 + 8);
  v55(v33, v14);
  v43 = *v70;
  v44 = (uint64_t)v70 + *(_QWORD *)(*v70 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 80) - 8) + 16))(v62, v44);
  v45 = (uint64_t)v64;
  v46 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v64, v75, v69);
  v47 = v58;
  MessageWrapper.init(value:)(v45, v46, v73, v74, v58);
  v48 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
  v49 = v60;
  v50 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v60);
  v51 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v49);
  v48(v47, v63, v49, v50, v51, v14, v13);
  v64 = 0;
  (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v47, v49);
  v55(v62, v14);
  v52 = (uint64_t)v63;
  sub_1CF7AB3BC((uint64_t)v63, v57, v71, v61);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v52, v79);
}

uint64_t sub_1CF7ACAD8()
{
  return 0;
}

uint64_t sub_1CF7ACAE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_1CF7ACB10(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1CF7ACB1C()
{
  sub_1CF7AF68C();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF7ACB44()
{
  sub_1CF7AF68C();
  return sub_1CF7C92C4();
}

uint64_t UnknownResultType.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2FC8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7AF68C();
  sub_1CF7C9294();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t UnknownResultType.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_1CF7ACC54(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_1CF7ACC78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2FC8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7AF68C();
  sub_1CF7C9294();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t MessageHeader.mangledTypeName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageHeader.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7AF6D0();
  sub_1CF7C9288();
  if (!v2)
  {
    v14 = 0;
    v9 = sub_1CF7C8D24();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_1CF7ACE8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MessageHeader.init(from:)(a1, a2);
}

uint64_t MessageWrapper.mangledTypeName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t MessageWrapper.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC00);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7AF6D0();
  sub_1CF7C9294();
  v10 = 0;
  sub_1CF7C8DA8();
  if (!v1)
  {
    v9 = 1;
    sub_1CF7C8DD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MessageWrapper.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  char v33;

  v25 = a5;
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v27 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC8);
  v26 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A80](v30);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a3;
  v12 = type metadata accessor for MessageWrapper(0, a2, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A80](v12);
  v15 = (uint64_t *)((char *)&v22 - v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7AF6D0();
  v29 = v11;
  v16 = (uint64_t)v31;
  sub_1CF7C9288();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v17 = v26;
  v18 = v27;
  v31 = a1;
  v23 = v13;
  v33 = 0;
  *v15 = sub_1CF7C8D24();
  v15[1] = v19;
  v32 = 1;
  sub_1CF7C8D54();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v30);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v15 + *(int *)(v12 + 44), v18, a2);
  v20 = v23;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v23 + 16))(v25, v15, v12);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 8))(v15, v12);
}

uint64_t sub_1CF7AD26C()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_1CF7C8D00();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_1CF7AD2BC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F727265;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_1CF7AD2F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MessageWrapper.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1CF7AD310(_QWORD *a1)
{
  return MessageWrapper.encode(to:)(a1);
}

uint64_t sub_1CF7AD324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC278, a3);
  return sub_1CF7C9024();
}

uint64_t sub_1CF7AD378(uint64_t a1)
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC278, a1);
  return sub_1CF7C8970();
}

uint64_t sub_1CF7AD3C4()
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC278);
  return sub_1CF7C8988();
}

uint64_t sub_1CF7AD414()
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC278);
  return sub_1CF7C897C();
}

uint64_t sub_1CF7AD464@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF7AD26C();
  *a1 = result;
  return result;
}

uint64_t sub_1CF7AD490@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CF7AD2BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CF7AD4B8()
{
  char *v0;

  return sub_1CF7AD2BC(*v0);
}

uint64_t sub_1CF7AD4C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF7AD26C();
  *a1 = result;
  return result;
}

uint64_t sub_1CF7AD4E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF7B10F8();
  *a1 = result;
  return result;
}

uint64_t sub_1CF7AD518(uint64_t a1)
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC318, a1);
  return sub_1CF7C92B8();
}

uint64_t sub_1CF7AD54C(uint64_t a1)
{
  MEMORY[0x1D17D55BC](&unk_1CF7CC318, a1);
  return sub_1CF7C92C4();
}

void DispatcherResponse.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v19 = a7;
  v17 = sub_1CF7C8B14();
  v21 = *(_QWORD *)(v17 - 8);
  v13 = MEMORY[0x1E0C80A80](v17);
  v22 = &v16[-v14];
  v20 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](v13);
  v18 = &v16[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  type metadata accessor for DispatcherResponse.CodingKeys();
}

void sub_1CF7AD650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 - 144) = MEMORY[0x1D17D55BC](&unk_1CF7CC318, a1);
  v8 = sub_1CF7C8D84();
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 - 216) = v8;
  MEMORY[0x1E0C80A80](v8);
  *(_QWORD *)(v7 - 192) = v6;
  *(_QWORD *)(v7 - 184) = v5;
  *(_QWORD *)(v7 - 136) = v6;
  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 176) = v4;
  *(_QWORD *)(v7 - 168) = v1;
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v3;
  *(_QWORD *)(v7 - 104) = v4;
  *(_QWORD *)(v7 - 96) = v2;
  type metadata accessor for DispatcherResponse();
}

uint64_t sub_1CF7AD6C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[96];

  *(_QWORD *)(v3 - 240) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A80](a1);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A80](v5);
  v9 = &v26[-v8];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v3 - 152) = v2;
  v10 = *(_QWORD *)(v3 - 72);
  sub_1CF7C9288();
  if (v10)
  {
    v16 = (uint64_t)v1;
  }
  else
  {
    *(_QWORD *)(v3 - 272) = v7;
    v11 = *(_QWORD *)(v3 - 224);
    *(_QWORD *)(v3 - 264) = v4;
    v12 = *(_QWORD *)(v3 - 208);
    v13 = *(_QWORD *)(v3 - 200);
    *(_QWORD *)(v3 - 144) = v9;
    *(_QWORD *)(v3 - 72) = v1;
    *(_BYTE *)(v3 - 136) = 1;
    v14 = *(_QWORD *)(v3 - 168);
    v15 = *(_QWORD *)(v3 - 216);
    sub_1CF7C8D0C();
    v18 = *(_QWORD *)(v3 - 152);
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v12 + 48))(*(_QWORD *)(v3 - 160), 1, v14) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 256));
      *(_BYTE *)(v3 - 136) = 0;
      v19 = *(_QWORD *)(v3 - 272);
      sub_1CF7C8D54();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v18, v15);
      v22 = *(_QWORD *)(v3 - 240);
      swift_storeEnumTagMultiPayload();
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 32);
      v24 = *(_QWORD *)(v3 - 144);
      v23(v24, v19, v22);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v18, v15);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
      v21 = *(_QWORD *)(v3 - 248);
      v20(v21, *(_QWORD *)(v3 - 160), v14);
      v24 = *(_QWORD *)(v3 - 144);
      v20(v24, v21, v14);
      v22 = *(_QWORD *)(v3 - 240);
      swift_storeEnumTagMultiPayload();
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 32);
    }
    v25 = *(_QWORD *)(v3 - 72);
    v23(*(_QWORD *)(v3 - 232), v24, v22);
    v16 = v25;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v16);
}

void DispatcherResponse.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v2 = MEMORY[0x1E0C80A80](a1);
  v17 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) - 8);
  v5 = MEMORY[0x1E0C80A80](v2);
  v14 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 56);
  v19 = v10;
  v20 = v10;
  v21 = v11;
  v16 = v11;
  v22 = v8;
  v12 = *(_OWORD *)(v7 + 40);
  v23 = v12;
  v13 = v9;
  v24 = v9;
  type metadata accessor for DispatcherResponse.CodingKeys();
}

uint64_t sub_1CF7ADA1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1D17D55BC](&unk_1CF7CC318, a1);
  v6 = sub_1CF7C8DFC();
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 136) = v6;
  MEMORY[0x1E0C80A80](v6);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1CF7C9294();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *(_QWORD *)(v5 - 152), v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(_QWORD *)(v5 - 176);
    v9 = *(_QWORD *)(v5 - 168);
    v11 = *(_QWORD *)(v5 - 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v1, v11);
    *(_BYTE *)(v5 - 128) = 0;
    v12 = *(_QWORD *)(v5 - 136);
    sub_1CF7C8DD8();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v8, v12);
  }
  else
  {
    v15 = *(_QWORD *)(v5 - 200);
    v14 = *(_QWORD *)(v5 - 192);
    v16 = *(_QWORD *)(v5 - 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v1, v16);
    *(_BYTE *)(v5 - 128) = 1;
    v17 = *(_QWORD *)(v5 - 136);
    sub_1CF7C8DD8();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v8, v17);
  }
}

void sub_1CF7ADBCC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  DispatcherResponse.init(from:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

void sub_1CF7ADBF0(uint64_t a1, uint64_t a2)
{
  DispatcherResponse.encode(to:)(a1, a2);
}

uint64_t CodableDispatchTraits.shouldPass(error:)()
{
  return 0;
}

uint64_t DispatchOutcome.hash(into:)()
{
  return sub_1CF7C9240();
}

uint64_t DispatchOutcome.hashValue.getter()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

BOOL sub_1CF7ADC80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Mercury::CodableDispatcherError_optional __swiftcall CodableDispatcherError.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (Mercury::CodableDispatcherError_optional)rawValue;
}

uint64_t CodableDispatcherError.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *sub_1CF7ADCBC@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1CF7ADCDC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1CF7ADCE8()
{
  sub_1CF7B1350();
  sub_1CF7A9930();
  return sub_1CF7C9228();
}

uint64_t sub_1CF7ADD2C()
{
  sub_1CF7B1350();
  return sub_1CF7C8994();
}

uint64_t sub_1CF7ADD88()
{
  sub_1CF7B1350();
  return sub_1CF7C8964();
}

unint64_t sub_1CF7ADDD4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3090);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CF7CA390;
  v1 = sub_1CF7B1070();
  result = sub_1CF7B10B4();
  *(_QWORD *)(v0 + 32) = &type metadata for CodableDispatcherError;
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = result;
  qword_1EFBB6150 = v0;
  return result;
}

uint64_t sub_1CF7ADE38()
{
  uint64_t result;
  _BYTE *v1;

  sub_1CF7AF5E0();
  result = swift_allocError();
  *v1 = 0;
  qword_1EFBB6158 = result;
  return result;
}

uint64_t sub_1CF7ADE70()
{
  if (qword_1EFBB22D8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

id sub_1CF7ADEB0@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_1EFBB22E0 != -1)
    swift_once();
  v2 = (void *)qword_1EFBB6158;
  *a1 = qword_1EFBB6158;
  return v2;
}

id sub_1CF7ADF00@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_1CF7ADF0C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CF7AF244(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1CF7ADF34(_QWORD *a1)
{
  void **v1;

  return sub_1CF7ADF4C(a1, *v1);
}

uint64_t sub_1CF7ADF4C(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34[2];
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  void *v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC00);
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A80](v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = sub_1CF7AF6D0();
  v32 = v6;
  v29[1] = v7;
  sub_1CF7C9294();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  v37 = v8;
  v36[0] = a2;
  __swift_project_boxed_opaque_existential_1(v36, v8);
  swift_getDynamicType();
  v9 = a2;
  v10 = a2;
  v11 = sub_1CF7C92D0();
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
  if (qword_1EFBB22D8 != -1)
    swift_once();
  v14 = *(_QWORD *)(qword_1EFBB6150 + 16);
  if (v14)
  {
    v30 = v4;
    swift_bridgeObjectRetain();
    v15 = 32;
    while (sub_1CF7C92D0() != v11 || v16 != v13)
    {
      v18 = sub_1CF7C8FC4();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_18;
      v15 += 24;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v4 = v30;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    v4 = v30;
    v20 = v32;
  }
  else
  {
LABEL_12:
    if (qword_1EFBB22E0 != -1)
      swift_once();
    v19 = (void *)qword_1EFBB6158;
    v20 = v32;
    if (!qword_1EFBB6158)
    {
      sub_1CF7B1100();
      swift_allocError();
      *(_QWORD *)v23 = v11;
      *(_QWORD *)(v23 + 8) = v13;
      *(_BYTE *)(v23 + 40) = 0;
      swift_willThrow();

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
    }
    v21 = (id)qword_1EFBB6158;
    swift_bridgeObjectRelease();
    v37 = v8;
    v36[0] = v19;
    __swift_project_boxed_opaque_existential_1(v36, v8);
    swift_getDynamicType();
    v22 = v19;
    sub_1CF7C92D0();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
    a2 = v19;
  }
  v38 = a2;
  v24 = a2;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30B8);
  if (!swift_dynamicCast())
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    swift_bridgeObjectRelease();
    sub_1CF778FFC((uint64_t)v34, &qword_1EFBB30C0);
    sub_1CF7B1100();
    swift_allocError();
    *(_QWORD *)v27 = a2;
    *(_QWORD *)(v27 + 24) = v8;
    *(_QWORD *)(v27 + 32) = v25;
    *(_BYTE *)(v27 + 40) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  }
  sub_1CF796180(v34, (uint64_t)v36);
  LOBYTE(v34[0]) = 0;
  v26 = v31;
  sub_1CF7C8DA8();
  swift_bridgeObjectRelease();
  if (!v26)
  {
    __swift_project_boxed_opaque_existential_1(v36, v37);
    LOBYTE(v34[0]) = 1;
    sub_1CF7C2994();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
}

uint64_t sub_1CF7AE370(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1E0C80A80](a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return sub_1CF7AA214((uint64_t)v2);
}

uint64_t CodableDispatcher.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  CodableDispatcher.init()(v0);
  return v0;
}

uint64_t sub_1CF7AE418()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
    sub_1CF7A4A38();
    type metadata accessor for CompositeDynamicCodableContainer();
  }
  return result;
}

uint64_t sub_1CF7AE548(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[2];
  void (*v23)(char *);

  v22[1] = a4;
  v23 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
  v13 = sub_1CF7C9264();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A80](v13);
  v17 = (char *)v22 - v16;
  v18 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A80](v15);
  v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v20, a10);
  swift_storeEnumTagMultiPayload();
  v23(v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a10);
}

char *sub_1CF7AE6C4(char *result, uint64_t (*a2)(char *))
{
  char v2;

  if (a2)
  {
    v2 = *result;
    return (char *)a2(&v2);
  }
  return result;
}

void sub_1CF7AE6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[40];
  __int128 v33;

  v32[22] = a7;
  v32[28] = a6;
  v32[29] = a5;
  v32[35] = a4;
  v32[31] = a1;
  v32[25] = a11;
  v19 = sub_1CF7C8B14();
  v32[26] = *(_QWORD *)(v19 - 8);
  v32[27] = v19;
  MEMORY[0x1E0C80A80](v19);
  v32[19] = (char *)v32 - v20;
  v32[15] = a14;
  v32[30] = swift_getAssociatedTypeWitness();
  v21 = sub_1CF7C8B14();
  v32[33] = *(_QWORD *)(v21 - 8);
  v32[34] = v21;
  v22 = MEMORY[0x1E0C80A80](v21);
  v32[21] = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A80](v22);
  v32[20] = (char *)v32 - v25;
  v26 = MEMORY[0x1E0C80A80](v24);
  v32[11] = (char *)v32 - v27;
  v32[32] = a9;
  v32[14] = *(_QWORD *)(a9 - 8);
  v28 = MEMORY[0x1E0C80A80](v26);
  v32[7] = (char *)v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A80](v28);
  v32[10] = (char *)v32 - v31;
  MEMORY[0x1E0C80A80](v30);
  v32[36] = a12;
  v32[37] = a13;
  v32[23] = a13;
  v32[24] = a19;
  v32[8] = a17;
  v32[9] = a18;
  v32[38] = a17;
  v32[39] = a18;
  v33 = *(_OWORD *)(a19 + 8);
  type metadata accessor for DispatcherResponse();
}

uint64_t sub_1CF7AE8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, _BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[96];

  *(_QWORD *)(v1 + 104) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A80](a1);
  *(_QWORD *)(v1 + 128) = &v51[-v6];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED56DF00);
  v7 = sub_1CF7C9264();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A80](v7);
  v11 = &v51[-v10];
  *(_QWORD *)(v1 + 136) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 144) = v3;
  MEMORY[0x1E0C80A80](v9);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = swift_projectBox();
  *(_QWORD *)(v1 + 280) = swift_projectBox();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v16 = result;
    *(_QWORD *)(v1 + 32) = a1;
    *(_QWORD *)(v1 + 48) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v1 + 40) = *(_QWORD *)(v4 + 64);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 16))(v11, *(_QWORD *)(v1 + 248), v7);
    sub_1CF7A9FB4(v7, v1 + 288, (uint64_t)v13);
    *(_QWORD *)(v1 + 96) = v16;
    v17 = *(_QWORD *)(v1 + 144);
    v18 = *(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v1 + 136) + 16);
    v19 = v14;
    v20 = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 24) = v13;
    *(_QWORD *)v1 = v18;
    v18(v20, v13, v17);
    v21 = *(_QWORD *)(v1 + 32);
    swift_storeEnumTagMultiPayload();
    v22 = *(_QWORD *)v16;
    v23 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 104);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 80) - 8) + 16))(v2, v23);
    swift_beginAccess();
    v24 = *(_QWORD *)(v1 + 240);
    v25 = *(_QWORD *)(v24 - 8);
    *(_QWORD *)(v1 + 8) = v25;
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    *(_QWORD *)(v1 + 248) = v19;
    *(_QWORD *)(v1 + 16) = v26;
    result = v26(v19, 1, v24);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v27 = *(_QWORD *)(v1 + 120);
      v28 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v27 + 48);
      v29 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatcherResponse<A, B>, v21);
      v30 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatcherResponse<A, B>, v21);
      v28(v20, *(_QWORD *)(v1 + 248), v21, v29, v30, *(_QWORD *)(v1 + 256), v27);
      swift_endAccess();
      v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 112) + 8);
      v32 = *(_QWORD *)(v1 + 256);
      *(_QWORD *)(v1 + 112) = v31;
      v31(v2, v32);
      v33 = *(_QWORD *)v16;
      v34 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 104);
      swift_beginAccess();
      v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 80) - 8) + 16);
      v36 = *(_QWORD *)(v1 + 80);
      v35(v36, v34);
      v37 = *(_QWORD *)(v1 + 248);
      swift_beginAccess();
      v38 = *(_QWORD *)(v1 + 88);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 264) + 16))(v38, v37, *(_QWORD *)(v1 + 272));
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v38, 1, v24);
      if ((_DWORD)result != 1)
      {
        v39 = *(_QWORD *)(v1 + 120);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 96))(v38, *(_QWORD *)(v1 + 256), v39);
        (*(void (**)(uint64_t, _QWORD))(v1 + 112))(v36, *(_QWORD *)(v1 + 256));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v38, v24);
        v40 = *(_QWORD *)v16;
        v41 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 104);
        swift_beginAccess();
        v42 = *(_QWORD *)(v1 + 56);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 80) - 8) + 16))(v42, v41);
        v43 = *(_QWORD *)(v1 + 280);
        swift_beginAccess();
        v44 = *(_QWORD *)(v1 + 216);
        *(_QWORD *)(v1 + 416) = v44;
        *(_QWORD *)(v1 + 360) = *(_QWORD *)(v1 + 40);
        *(_QWORD *)(v1 + 424) = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE9A0], v44, v1 + 360);
        *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 432) = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEE988], v44, v1 + 352);
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v1 + 392));
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 + 208) + 16))(boxed_opaque_existential_0Tm, v43, v44);
        v46 = *(_QWORD *)(v1 + 144);
        v47 = *(_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 312) = v46;
        *(_QWORD *)(v1 + 320) = v47;
        *(_QWORD *)(v1 + 328) = *(_QWORD *)(v1 + 72);
        v48 = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v1 + 288));
        v49 = *(_QWORD *)(v1 + 24);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))v1)(v48, v49, v46);
        *(_BYTE *)(v1 + 336) = 0;
        v50 = *(_QWORD *)(v1 + 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 72))(v1 + 392, v1 + 288, v50, v39);
        (*(void (**)(uint64_t, uint64_t))(v1 + 112))(v42, v50);
        sub_1CF778FFC(v1 + 288, (uint64_t *)&unk_1ED56DF10);
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 392);
        *(_BYTE *)(v1 + 288) = 1;
        (*(void (**)(uint64_t))(v1 + 232))(v1 + 288);
        swift_release();
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 104) + 8))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 32));
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 136) + 8))(v49, v46);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t CodableDispatcher.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF7AF008@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF7AA1B0(a1);
}

uint64_t sub_1CF7AF028(uint64_t a1)
{
  return sub_1CF7AA214(a1);
}

void (*sub_1CF7AF048(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1CF7AA280();
  return sub_1CF7AF090;
}

void sub_1CF7AF090(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1CF7AF0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CF7AA4A4(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1CF7AF0DC()
{
  return sub_1CF7AA71C() & 1;
}

uint64_t sub_1CF7AF100(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4)
{
  return sub_1CF7AB3BC(a1, a2, a3, a4);
}

uint64_t type metadata accessor for CodableDispatcher.OperationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableDispatcher.OperationInfo);
}

uint64_t sub_1CF7AF12C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF7AF150()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7AF17C()
{
  return sub_1CF7AE418();
}

uint64_t sub_1CF7AF1C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7AF1E8(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v4;

  return sub_1CF7AE548(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t))(v4 + 104), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1CF7AF224()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1CF7AF244(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  char v33[48];
  uint64_t v34[3];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v8 = sub_1CF7AF6D0();
  sub_1CF7C9288();
  if (!v1)
  {
    LOBYTE(v34[0]) = 0;
    v9 = sub_1CF7C8D24();
    v7 = v10;
    v31 = v8;
    if (qword_1EFBB22D8 != -1)
      swift_once();
    v11 = *(_QWORD *)(qword_1EFBB6150 + 16);
    if (v11)
    {
      v28 = v4;
      v29 = v6;
      v30 = v3;
      v27 = swift_bridgeObjectRetain();
      v12 = (_OWORD *)(v27 + 40);
      while (1)
      {
        v13 = *((_QWORD *)v12 - 1);
        v32 = *v12;
        if (sub_1CF7C92D0() == v9 && v14 == v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_18;
        }
        v16 = sub_1CF7C8FC4();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          break;
        v12 = (_OWORD *)((char *)v12 + 24);
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          v6 = v29;
          v3 = v30;
          v4 = v28;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_18:
      v33[0] = 1;
      v35 = v13;
      v36 = v32;
      __swift_allocate_boxed_opaque_existential_0Tm(v34);
      v19 = v29;
      sub_1CF7C2A00();
      v20 = v30;
      sub_1CF7B1178((uint64_t)v34, (uint64_t)v33);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30B0);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v7 = v37;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v20);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        return v7;
      }
      sub_1CF7B1100();
      swift_allocError();
      v22 = v21;
      v23 = v35;
      v24 = __swift_project_boxed_opaque_existential_1(v34, v35);
      *(_QWORD *)(v22 + 24) = v23;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v22);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(boxed_opaque_existential_0Tm, v24, v23);
      *(_QWORD *)(v22 + 32) = v7;
      *(_BYTE *)(v22 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    }
    else
    {
LABEL_13:
      sub_1CF7B1100();
      swift_allocError();
      *(_QWORD *)v17 = v9;
      *(_QWORD *)(v17 + 8) = v7;
      *(_BYTE *)(v17 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

unint64_t sub_1CF7AF5E0()
{
  unint64_t result;

  result = qword_1EFBB2FC0;
  if (!qword_1EFBB2FC0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CodableDispatcherError, &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FC0);
  }
  return result;
}

uint64_t sub_1CF7AF624()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

char *sub_1CF7AF650(char *result)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v3;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  if (v2)
  {
    v3 = *result;
    return (char *)v2(&v3);
  }
  return result;
}

unint64_t sub_1CF7AF68C()
{
  unint64_t result;

  result = qword_1EFBB2FD0;
  if (!qword_1EFBB2FD0)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC368, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FD0);
  }
  return result;
}

unint64_t sub_1CF7AF6D0()
{
  unint64_t result;

  result = qword_1ED56EBC8;
  if (!qword_1ED56EBC8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DynamicCodableContainerCodingKeys, &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED56EBC8);
  }
  return result;
}

void type metadata accessor for DispatcherResponse.CodingKeys()
{
  JUMPOUT(0x1D17D5550);
}

void type metadata accessor for DispatcherResponse()
{
  JUMPOUT(0x1D17D5550);
}

unint64_t sub_1CF7AF730()
{
  unint64_t result;

  result = qword_1EFBB2FD8;
  if (!qword_1EFBB2FD8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DispatchOutcome, &type metadata for DispatchOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FD8);
  }
  return result;
}

unint64_t sub_1CF7AF778()
{
  unint64_t result;

  result = qword_1EFBB2FE0;
  if (!qword_1EFBB2FE0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CodableDispatcherError, &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_1EFBB2FE0);
  }
  return result;
}

uint64_t sub_1CF7AF7BC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_1CF7AF7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF7AA1B0(a1);
}

uint64_t sub_1CF7AF7E8()
{
  return 24;
}

__n128 sub_1CF7AF7F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType()
{
  return &type metadata for UnknownResultType;
}

ValueMetadata *type metadata accessor for MessageHeader()
{
  return &type metadata for MessageHeader;
}

uint64_t sub_1CF7AF828()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1CF7AF8A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_1CF7AF960(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1CF7AF9A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *sub_1CF7AFA14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_1CF7AFA8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1CF7AFADC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1CF7AFB44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CF7AFC18 + 4 * byte_1CF7CBC70[(v9 - 1)]))();
}

void sub_1CF7AFC88(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1CF7AFE80()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CF7AFE88()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1CF7AFF10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1CF7B003C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1CF7B0088 + 4 * byte_1CF7CBC83[v7]))();
  }
}

uint64_t sub_1CF7B00DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1CF7B01B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 16);
    else
      v13 = *(_QWORD *)(a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1CF7B032C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1CF7B0400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 16);
    else
      v13 = *(_QWORD *)(a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1CF7B057C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CF7B0644 + 4 * byte_1CF7CBCA6[(v4 - 1)]))();
}

void sub_1CF7B0690(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1CF7B083C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CF7B0888 + 4 * byte_1CF7CBCB4[v3]))();
}

void sub_1CF7B08D0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t dispatch thunk of CodableDispatchTraits.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CodableDispatchTraits.isDispatchable(encodedData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CodableDispatchTraits.prepareForEncodingHandlerValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CodableDispatchTraits.readEncodedRequestType(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatchTraits.encode<A>(value:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of CodableDispatchTraits.decode<A>(encodedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of CodableDispatchTraits.willDispatch(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didDispatch(value:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of CodableDispatchTraits.shouldPass(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didPass(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CodableDispatchTraits.sink(handlerValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

_BYTE *sub_1CF7B0A68(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DispatchOutcome()
{
  return &type metadata for DispatchOutcome;
}

uint64_t dispatch thunk of CodableDispatching.traits.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CodableDispatching.traits.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatching.traits.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CodableDispatching.register<A, B>(handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 56))();
}

uint64_t dispatch thunk of CodableDispatching.hasRegistration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatching.dispatch(encodedData:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

ValueMetadata *type metadata accessor for CodableDispatcherError()
{
  return &type metadata for CodableDispatcherError;
}

uint64_t sub_1CF7B0ACC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CodableDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableDispatcher);
}

uint64_t method lookup function for CodableDispatcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CodableDispatcher.traits.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of CodableDispatcher.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B>(handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CodableDispatcher.hasRegistration(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch<A>(value:context:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t sub_1CF7B0C0C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for DynamicCodableContainerCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7Mercury15DispatchOutcomeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF7B0CF0 + 4 * byte_1CF7CBCBE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF7B0D24 + 4 * byte_1CF7CBCB9[v4]))();
}

uint64_t sub_1CF7B0D24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7B0D2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF7B0D34);
  return result;
}

uint64_t sub_1CF7B0D40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF7B0D48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF7B0D4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7B0D54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType.CodingKeys()
{
  return &type metadata for UnknownResultType.CodingKeys;
}

_QWORD *sub_1CF7B0D70(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1CF7B0D9C()
{
  return swift_release();
}

_QWORD *sub_1CF7B0DA4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1CF7B0DDC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for DispatcherErrorWrapper(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for DispatcherErrorWrapper(id *a1)
{

}

void **assignWithCopy for DispatcherErrorWrapper(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for DispatcherErrorWrapper(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DispatcherErrorWrapper()
{
  return &type metadata for DispatcherErrorWrapper;
}

void sub_1CF7B0F40()
{
  JUMPOUT(0x1D17D55BCLL);
}

void sub_1CF7B0F50()
{
  JUMPOUT(0x1D17D55BCLL);
}

void sub_1CF7B0F60()
{
  JUMPOUT(0x1D17D55BCLL);
}

unint64_t sub_1CF7B0F74()
{
  unint64_t result;

  result = qword_1EFBB3038;
  if (!qword_1EFBB3038)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC1D8, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBB3038);
  }
  return result;
}

unint64_t sub_1CF7B0FBC()
{
  unint64_t result;

  result = qword_1EFBB3040;
  if (!qword_1EFBB3040)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC200, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBB3040);
  }
  return result;
}

unint64_t sub_1CF7B1000(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1CF7B102C();
  result = sub_1CF7A15E0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1CF7B102C()
{
  unint64_t result;

  result = qword_1ED56D8F8;
  if (!qword_1ED56D8F8)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC1B0, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED56D8F8);
  }
  return result;
}

unint64_t sub_1CF7B1070()
{
  unint64_t result;

  result = qword_1EFBB3098;
  if (!qword_1EFBB3098)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CodableDispatcherError, &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_1EFBB3098);
  }
  return result;
}

unint64_t sub_1CF7B10B4()
{
  unint64_t result;

  result = qword_1EFBB30A0;
  if (!qword_1EFBB30A0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CodableDispatcherError, &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_1EFBB30A0);
  }
  return result;
}

uint64_t sub_1CF7B10F8()
{
  return 2;
}

unint64_t sub_1CF7B1100()
{
  unint64_t result;

  result = qword_1EFBB30A8;
  if (!qword_1EFBB30A8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DynamicCodableError, &type metadata for DynamicCodableError);
    atomic_store(result, (unint64_t *)&qword_1EFBB30A8);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_2(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1D17D5694);
  return result;
}

uint64_t sub_1CF7B1178(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CF7B11BC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

void sub_1CF7B126C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v11 = *(_OWORD *)(v1 + 64);
  v12 = *(_OWORD *)(v1 + 24);
  v10 = *(_OWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 96);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_1CF7AE6FC(a1, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), v1 + v9, *(_QWORD *)(v1 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v3, v12, *((uint64_t *)&v12 + 1), v4, v5, v6, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v7);
}

unint64_t sub_1CF7B1350()
{
  unint64_t result;

  result = qword_1EFBB30C8;
  if (!qword_1EFBB30C8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CodableDispatcherError, &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_1EFBB30C8);
  }
  return result;
}

unint64_t sub_1CF7B1394()
{
  unint64_t result;

  result = qword_1EFBB30D0;
  if (!qword_1EFBB30D0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for UnknownResultType, &type metadata for UnknownResultType);
    atomic_store(result, (unint64_t *)&qword_1EFBB30D0);
  }
  return result;
}

unint64_t sub_1CF7B13D8()
{
  unint64_t result;

  result = qword_1EFBB2EE0;
  if (!qword_1EFBB2EE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFBB2EE0);
  }
  return result;
}

uint64_t sub_1CF7B1414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1CF7B145C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

id sub_1CF7B1488()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  qword_1EFBB30E0 = (uint64_t)result;
  return result;
}

uint64_t sub_1CF7B14B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v0 = sub_1CF7C873C();
  MEMORY[0x1E0C80A80](v0);
  v1 = sub_1CF7C8AB4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A80](v1);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CF7C8AA8();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A80](v5);
  sub_1CF79607C(0, qword_1ED56E1F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30E8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1CF7CA390;
  sub_1CF7C8A9C();
  v9[1] = v7;
  sub_1CF78D2BC((unint64_t *)&qword_1EFBB2740, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2748);
  sub_1CF7B2528((unint64_t *)&qword_1EFBB2750, &qword_1EFBB2748);
  sub_1CF7C8B80();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF8D8], v1);
  sub_1CF7C8730();
  result = sub_1CF7C8AE4();
  qword_1EFBB6160 = result;
  return result;
}

uint64_t static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  id v19;

  if (a3)
  {
    v15 = a3;
  }
  else
  {
    if (qword_1EFBB22F0 != -1)
      swift_once();
    v15 = (id)qword_1EFBB6160;
  }
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a6;
  v16[4] = a7;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a4;
  v17[5] = a5;
  v17[6] = sub_1CF7B1AB0;
  v17[7] = v16;
  v17[8] = v7;
  type metadata accessor for POSIXThread();
  swift_allocObject();
  v18 = a3;
  swift_retain();
  v19 = v15;
  swift_retain();
  swift_retain();
  sub_1CF7A7754(a4);
  swift_retain();
  sub_1CF796FE4((uint64_t)sub_1CF7B1FFC, (uint64_t)v17);
  swift_release();

  return swift_release();
}

uint64_t sub_1CF7B1884(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v23 = a3;
  v9 = sub_1CF7C8724();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A80](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CF7C873C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A80](v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a1;
  v17[5] = a2;
  aBlock[4] = sub_1CF7B24E8;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF7A684C;
  aBlock[3] = &block_descriptor_4;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = a2;
  sub_1CF7C8730();
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1CF78D2BC((unint64_t *)&qword_1ED56DE20, v10, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DE58);
  sub_1CF7B2528((unint64_t *)&qword_1ED56DE60, &qword_1ED56DE58);
  sub_1CF7C8B80();
  MEMORY[0x1D17D471C](0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_1CF7B1A84()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7B1AB0(uint64_t a1, void *a2)
{
  uint64_t *v2;

  return sub_1CF7B1884(a1, a2, v2[2], v2[3], v2[4]);
}

_QWORD *sub_1CF7B1ABC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(uint64_t, _QWORD), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t inited;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD);
  uint64_t (*v23)(uint64_t, char *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  void (*v35)(uint64_t, void *);
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, char *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD);
  uint64_t v53;
  char v54[9];
  unint64_t v55;

  v51 = a6;
  v52 = a5;
  v49 = sub_1CF7C8424();
  v10 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A80](v49);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF7B2358();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB2F60);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CC3E0;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v55 = inited;
  sub_1CF7C89B8();
  v14 = v55;
  swift_retain();
  swift_retain();
  v15 = sub_1CF7B2010(v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  sub_1CF7B2244(a3, a4, 0);
  v47 = a3;
  v50 = a4;
  v53 = v10;
  result = XPCFileDescriptor.read(into:polling:)(v15, v17, 1);
  v20 = (uint64_t)result;
  v45 = v17;
  v46 = a1;
  v21 = 0;
  v22 = v52;
  v48 = v15;
  v23 = v47;
  while ((v19 & 1) == 0)
  {
    if (!v15)
      goto LABEL_28;
    if (!v20)
      sub_1CF7B2244(v23, v50, v21);
    v24 = v15 + v20;
    v25 = v20;
    if (v20 >= 1)
    {
      v26 = v15;
      do
      {
        v27 = (unint64_t)XPCFileDescriptor.write(from:polling:)(v26, v24, 1);
        if ((v28 & 1) != 0)
          break;
        v29 = v27;
        v30 = v53;
        if ((v27 & 0x8000000000000000) == 0)
        {
          v31 = __CFADD__(v21, v27);
          v21 += v27;
          if (v31)
            v21 = -1;
        }
        v54[0] = 0;
        if (v23)
        {
          v23(v21, v54);
          if (v54[0] == 1)
          {
            LODWORD(v55) = 89;
            sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
            sub_1CF78D2BC((unint64_t *)&qword_1EFBB32E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE90], MEMORY[0x1E0CADE88]);
            v33 = v49;
            sub_1CF7C84F0();
            v34 = (void *)sub_1CF7C840C();
            (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v33);
            swift_willThrow();
            v35 = (void (*)(uint64_t, void *))v52;
            MEMORY[0x1D17D5694](v48, -1, -1);
            sub_1CF7C8A60();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
            v36 = swift_allocObject();
            *(_OWORD *)(v36 + 16) = xmmword_1CF7CA390;
            v55 = (unint64_t)v34;
            v37 = v34;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
            v38 = sub_1CF7C888C();
            v40 = v39;
            *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v36 + 64) = sub_1CF791E0C();
            *(_QWORD *)(v36 + 32) = v38;
            *(_QWORD *)(v36 + 40) = v40;
            sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
            v41 = (void *)sub_1CF7C8B08();
            sub_1CF7C867C();
            swift_bridgeObjectRelease();

            v42 = v34;
            v35(v21, v34);

            goto LABEL_20;
          }
        }
        v32 = __OFSUB__(v25, v29);
        v25 -= v29;
        if (v32)
        {
          __break(1u);
          goto LABEL_26;
        }
        v26 += v29;
        v24 = v26 + v25;
      }
      while (v25 > 0);
    }
    v15 = v48;
    result = XPCFileDescriptor.read(into:polling:)(v48, v45, 1);
    v20 = (uint64_t)result;
    v22 = v52;
  }
  sub_1CF7B2244(v23, v50, v21);
  sub_1CF7C8A48();
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
  v44 = (void *)sub_1CF7C8B08();
  sub_1CF7C867C();

  v22(v21, 0);
  if (v15)
    MEMORY[0x1D17D5694](v15, -1, -1);
LABEL_20:
  if (qword_1EFBB22E8 != -1)
LABEL_26:
    swift_once();
  v43 = (void *)qword_1EFBB30E0;
  result = objc_msgSend((id)qword_1EFBB30E0, sel_lock, v45, v46);
  if (!__OFSUB__(qword_1EFBB30D8, 1))
  {
    --qword_1EFBB30D8;
    return objc_msgSend(v43, sel_unlock);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1CF7B1FB8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_1CF7B1FFC()
{
  uint64_t v0;

  return sub_1CF7B1ABC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t, char *))(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(uint64_t, _QWORD))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1CF7B2010(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t st_blksize;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  stat v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C08];
  v3 = *MEMORY[0x1E0C85AD0];
  if ((*MEMORY[0x1E0C85AD0] & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v2 = a1;
  v1 = 4 * v3;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_18;
    goto LABEL_5;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  v4 = sub_1CF7C8CAC();
  if (!v4)
    goto LABEL_18;
LABEL_5:
  if (v4 < 1)
    __break(1u);
  for (i = 0; i != v4; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x1D17D480C](i, v2);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8 * i + 32);
      swift_retain();
    }
    v7 = *(_DWORD *)(v6 + 64);
    memset(&v14, 0, 28);
    memset(&v14.st_atimespec, 0, 112);
    v8 = fstat(v7, &v14);
    swift_release();
    st_blksize = v14.st_blksize;
    if (v1 > v14.st_blksize)
      st_blksize = v1;
    if (!v8)
      v1 = st_blksize;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  sub_1CF7C8A54();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1CF7CA390;
  v11 = MEMORY[0x1E0DEBBF8];
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEBB98];
  *(_QWORD *)(v10 + 64) = v11;
  *(_QWORD *)(v10 + 32) = v1 & ~(v1 >> 63);
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
  v12 = (void *)sub_1CF7C8B08();
  sub_1CF7C867C();
  swift_bridgeObjectRelease();

  return swift_slowAlloc();
}

uint64_t sub_1CF7B2244(uint64_t (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  char v12;

  v5 = sub_1CF7C8424();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A80](v5);
  v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  if (a1)
  {
    result = a1(a3, &v12);
    if ((v12 & 1) != 0)
    {
      v11 = 89;
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF78D2BC((unint64_t *)&qword_1EFBB32E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE90], MEMORY[0x1E0CADE88]);
      sub_1CF7C84F0();
      sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_willThrow();
    }
  }
  return result;
}

void sub_1CF7B2358()
{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *log;

  if (qword_1EFBB22E8 != -1)
    swift_once();
  v0 = (void *)qword_1EFBB30E0;
  objc_msgSend((id)qword_1EFBB30E0, sel_lock);
  v1 = qword_1EFBB30D8 + 1;
  if (__OFADD__(qword_1EFBB30D8, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_1EFBB30D8;
    objc_msgSend(v0, sel_unlock);
    if (v1 >= 17)
    {
      v2 = sub_1CF7C8A6C();
      sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
      log = sub_1CF7C8B08();
      if (os_log_type_enabled(log, v2))
      {
        v3 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v3 = 134217984;
        sub_1CF7C8B20();
        _os_log_impl(&dword_1CF76E000, log, v2, "Unexpectedly high number of concurrent XPCFileDescriptor.splice operations: %ld", v3, 0xCu);
        MEMORY[0x1D17D5694](v3, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t sub_1CF7B24BC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF7B24E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1CF7B2528(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static xpc_event_publisher_action_t.add.getter()
{
  return 0;
}

uint64_t static xpc_event_publisher_action_t.remove.getter()
{
  return 1;
}

uint64_t static xpc_event_publisher_action_t.initialBarrier.getter()
{
  return 2;
}

uint64_t XPCEventPublisher.Token.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCEventPublisher.Token.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*XPCEventPublisher.Token.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t XPCEventPublisher.Token.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *sub_1CF7B25A8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1CF7B25B8()
{
  sub_1CF7C9234();
  sub_1CF7C924C();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7B25FC()
{
  return sub_1CF7C924C();
}

uint64_t sub_1CF7B2624()
{
  sub_1CF7C9234();
  sub_1CF7C924C();
  return sub_1CF7C9258();
}

uint64_t XPCEventPublisher.__allocating_init(publisher:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t XPCEventPublisher.init(publisher:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t XPCEventPublisher.__allocating_init(streamName:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];

  v6[2] = a3;
  v4 = sub_1CF79DFB0((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_1CF7B2720, (uint64_t)v6, a1, a2);

  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
  type metadata accessor for XPCEventPublisher();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  return result;
}

id sub_1CF7B2720@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = (id)xpc_event_publisher_create();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for XPCEventPublisher()
{
  return objc_opt_self();
}

uint64_t sub_1CF7B2778()
{
  return xpc_event_publisher_activate();
}

void sub_1CF7B2780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v6[4] = sub_1CF7B29B0;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E0C809A8];
  v6[1] = 1107296256;
  v6[2] = sub_1CF7B29B8;
  v6[3] = &block_descriptor_5;
  v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_handler();
  _Block_release(v5);
}

uint64_t sub_1CF7B2838(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[4];
  char v11;

  if ((_DWORD)result == 2)
  {
    a2 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 2;
  }
  else if ((_DWORD)result == 1)
  {
    v6 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 1;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v6 = a3;
    v7 = 0xD000000000000019;
    if (!a3)
    {
      result = sub_1CF7C8CA0();
      __break(1u);
      return result;
    }
    swift_unknownObjectRetain();
    v8 = 0;
    v9 = 0x80000001CF7CD790;
  }
  v10[0] = a2;
  v10[1] = v6;
  v10[2] = v7;
  v10[3] = v9;
  v11 = v8;
  sub_1CF7B2F80(a2, v6, v7, v9, v8);
  a4(v10);
  sub_1CF7B2FC8(a2, v6, v7, v9, v8);
  return sub_1CF7B2FC8(a2, v6, v7, v9, v8);
}

uint64_t sub_1CF7B298C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7B29B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CF7B2838(a1, a2, a3, *(void (**)(_QWORD *))(v3 + 16));
}

uint64_t sub_1CF7B29B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void sub_1CF7B2A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v6[4] = sub_1CF7B2C9C;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E0C809A8];
  v6[1] = 1107296256;
  v6[2] = sub_1CF7B2CA4;
  v6[3] = &block_descriptor_6_1;
  v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_error_handler();
  _Block_release(v5);
}

void sub_1CF7B2AF0(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD v18[2];

  v3 = sub_1CF7C8424();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A80](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CF7C86B8();
  if ((v7 & 0x100000000) != 0)
  {
    v9 = xpc_strerror();
    if (v9)
      v9 = sub_1CF7C88E0();
    else
      v10 = 0;
    if (v10)
      v11 = v9;
    else
      v11 = 0xD00000000000001ALL;
    if (v10)
      v12 = v10;
    else
      v12 = 0x80000001CF7CE910;
    v13 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    static XPCError.unknown(_:from:userInfo:)(v11, v12, 0, v13, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v18[0];
    v15 = v18[1];
    sub_1CF78D000();
    v16 = (void *)swift_allocError();
    *v17 = v14;
    v17[1] = v15;
    a2();

  }
  else
  {
    LODWORD(v18[0]) = v7;
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF7A7E88();
    sub_1CF7C84F0();
    v8 = (void *)sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ((void (*)(void *))a2)(v8);

  }
}

void sub_1CF7B2C9C(uint64_t a1)
{
  uint64_t v1;

  sub_1CF7B2AF0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1CF7B2CA4(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1CF7B2CE0(_QWORD *a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v4 = &j__xpc_event_publisher_fire_noboost;
  v5 = *a2;
  if ((a3 & 1) != 0)
    v4 = &j__xpc_event_publisher_fire;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v4)(*(_QWORD *)(v3 + 16), v5, *a1);
}

void sub_1CF7B2D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a5;
  v9[4] = sub_1CF7B2E88;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809A8];
  v9[1] = 1107296256;
  v9[2] = sub_1CF7A5E10;
  v9[3] = &block_descriptor_12_0;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  xpc_event_publisher_fire_with_reply();
  _Block_release(v8);
}

void sub_1CF7B2E10()
{
  swift_unknownObjectRetain();
  sub_1CF7BF104();
}

uint64_t sub_1CF7B2E40()
{
  void (*v0)(_QWORD *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = v8;
  v2 = v9;
  v3 = v10;
  v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  v6[2] = v10;
  v7 = v11;
  v0(v6);
  return sub_1CF7A5650(v1, v2, v3, v4);
}

void sub_1CF7B2E88()
{
  sub_1CF7B2E10();
}

uint64_t XPCEventPublisher.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t XPCEventPublisher.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t sub_1CF7B2ED4()
{
  unint64_t result;

  result = qword_1ED56E010;
  if (!qword_1ED56E010)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCEventPublisher.Token, &type metadata for XPCEventPublisher.Token);
    atomic_store(result, (unint64_t *)&qword_1ED56E010);
  }
  return result;
}

uint64_t method lookup function for XPCEventPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(publisher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(streamName:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCEventPublisher.activate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of XPCEventPublisher.setHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of XPCEventPublisher.setErrorHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:boost:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

ValueMetadata *type metadata accessor for XPCEventPublisher.Token()
{
  return &type metadata for XPCEventPublisher.Token;
}

uint64_t sub_1CF7B2F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for XPCEventPublisher.SubscriptionAction(uint64_t a1)
{
  return sub_1CF7B2FC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_1CF7B2FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1CF7B2F80(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1CF7B2F80(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1CF7B2FC8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1CF7B2FC8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CF7B31B8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1CF7B31D0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCEventPublisher.SubscriptionAction()
{
  return &type metadata for XPCEventPublisher.SubscriptionAction;
}

uint64_t XPCTypeDescriptor.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCTypeDescriptor.name.getter()
{
  xpc_type_t *v0;

  xpc_type_get_name(*v0);
  return sub_1CF7C88E0();
}

uint64_t sub_1CF7B323C()
{
  uint64_t result;

  result = XPCTypeGetMachSendOnce();
  qword_1EFBB30F0 = result;
  return result;
}

uint64_t XPCTypeMachSendOnce.getter()
{
  if (qword_1EFBB22F8 != -1)
    swift_once();
  return qword_1EFBB30F0;
}

void static XPCTypeDescriptor.error.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeError;
}

void static XPCTypeDescriptor.bundle.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeBundle;
}

void static XPCTypeDescriptor.connection.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeConnection;
}

void static XPCTypeDescriptor.endpoint.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeEndpoint;
}

void static XPCTypeDescriptor.dictionary.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeDictionary;
}

void static XPCTypeDescriptor.array.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeArray;
}

void static XPCTypeDescriptor.BOOL.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeBool;
}

void static XPCTypeDescriptor.data.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeData;
}

void static XPCTypeDescriptor.date.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeDate;
}

void static XPCTypeDescriptor.double.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeDouble;
}

void static XPCTypeDescriptor.fd.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeFD;
}

void static XPCTypeDescriptor.fileTransfer.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeFileTransfer;
}

void static XPCTypeDescriptor.machSend.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeMachSend;
}

uint64_t static XPCTypeDescriptor.machSendOnce.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1EFBB22F8 != -1)
    result = swift_once();
  *a1 = qword_1EFBB30F0;
  return result;
}

void static XPCTypeDescriptor.machRecv.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeMachRecv;
}

void static XPCTypeDescriptor.pipe.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypePipe;
}

void static XPCTypeDescriptor.pointer.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypePointer;
}

void static XPCTypeDescriptor.remoteConnection.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeRemoteConnection;
}

void static XPCTypeDescriptor.serializer.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeSerializer;
}

void static XPCTypeDescriptor.service.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeService;
}

void static XPCTypeDescriptor.serviceInstance.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeServiceInstance;
}

void static XPCTypeDescriptor.int64.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeInt64;
}

void static XPCTypeDescriptor.uint64.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeUInt64;
}

void static XPCTypeDescriptor.string.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeString;
}

void static XPCTypeDescriptor.uuid.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeUUID;
}

void static XPCTypeDescriptor.shmem.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeShmem;
}

void static XPCTypeDescriptor.null.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeNull;
}

void static XPCTypeDescriptor.activity.getter(_QWORD *a1@<X8>)
{
  *a1 = XPCTypeActivity;
}

uint64_t static XPCTypeDescriptor.registry.getter()
{
  if (qword_1EFBB2300 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF7B3544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  _UNKNOWN **v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3100);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CF7CC520;
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3108);
  *(_QWORD *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 32) = XPCTypeError;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3110);
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 72) = XPCTypeBundle;
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 112) = XPCTypeConnection;
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 152) = XPCTypeEndpoint;
  *(_QWORD *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3118);
  *(_QWORD *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 192) = XPCTypeDictionary;
  *(_QWORD *)(v0 + 256) = v1;
  *(_QWORD *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 232) = XPCTypeActivity;
  *(_QWORD *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3120);
  *(_QWORD *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 272) = XPCTypeArray;
  *(_QWORD *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3128);
  *(_QWORD *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 312) = XPCTypeBool;
  *(_QWORD *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3130);
  *(_QWORD *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 352) = XPCTypeData;
  *(_QWORD *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3138);
  *(_QWORD *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 392) = XPCTypeDate;
  *(_QWORD *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3140);
  *(_QWORD *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 432) = XPCTypeDouble;
  *(_QWORD *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3148);
  *(_QWORD *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 472) = XPCTypeFD;
  *(_QWORD *)(v0 + 536) = v1;
  *(_QWORD *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 512) = XPCTypeFileTransfer;
  *(_QWORD *)(v0 + 576) = v1;
  *(_QWORD *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 552) = XPCTypeMachSend;
  *(_QWORD *)(v0 + 616) = v1;
  *(_QWORD *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 592) = XPCTypeMachRecv;
  *(_QWORD *)(v0 + 656) = v1;
  *(_QWORD *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 632) = XPCTypePipe;
  *(_QWORD *)(v0 + 696) = v1;
  *(_QWORD *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 672) = XPCTypePointer;
  *(_QWORD *)(v0 + 736) = v1;
  *(_QWORD *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 712) = XPCTypeSerializer;
  *(_QWORD *)(v0 + 776) = v1;
  *(_QWORD *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 752) = XPCTypeService;
  *(_QWORD *)(v0 + 816) = v1;
  *(_QWORD *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 792) = XPCTypeServiceInstance;
  *(_QWORD *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3150);
  *(_QWORD *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 832) = XPCTypeInt64;
  *(_QWORD *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3158);
  *(_QWORD *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 872) = XPCTypeUInt64;
  *(_QWORD *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3160);
  *(_QWORD *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 912) = XPCTypeString;
  *(_QWORD *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3168);
  *(_QWORD *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 952) = XPCTypeUUID;
  *(_QWORD *)(v0 + 1016) = v1;
  *(_QWORD *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 992) = XPCTypeShmem;
  *(_QWORD *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_1EFBB3170);
  *(_QWORD *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 1032) = XPCTypeNull;
  if (qword_1EFBB22F8 != -1)
    swift_once();
  v2 = qword_1EFBB30F0;
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  if (v4 >= v3 >> 1)
    v0 = (uint64_t)sub_1CF7B4720((_QWORD *)(v3 > 1), v4 + 1, 1, (_QWORD *)v0, &qword_1EFBB3100, &qword_1EFBB3218);
  v7 = v1;
  v8 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)&v6 = v2;
  *(_QWORD *)(v0 + 16) = v4 + 1;
  sub_1CF796180(&v6, v0 + 40 * v4 + 32);
  return v0;
}

_QWORD *static XPCTypeDescriptor.allCases.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C08];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3100);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CF7CC520;
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3108);
  *(_QWORD *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 32) = XPCTypeError;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3110);
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 72) = XPCTypeBundle;
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 112) = XPCTypeConnection;
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 152) = XPCTypeEndpoint;
  *(_QWORD *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3118);
  *(_QWORD *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 192) = XPCTypeDictionary;
  *(_QWORD *)(v0 + 256) = v1;
  *(_QWORD *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 232) = XPCTypeActivity;
  *(_QWORD *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3120);
  *(_QWORD *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 272) = XPCTypeArray;
  *(_QWORD *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3128);
  *(_QWORD *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 312) = XPCTypeBool;
  *(_QWORD *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3130);
  *(_QWORD *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 352) = XPCTypeData;
  *(_QWORD *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3138);
  *(_QWORD *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 392) = XPCTypeDate;
  *(_QWORD *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3140);
  *(_QWORD *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 432) = XPCTypeDouble;
  *(_QWORD *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3148);
  *(_QWORD *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 472) = XPCTypeFD;
  *(_QWORD *)(v0 + 536) = v1;
  *(_QWORD *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 512) = XPCTypeFileTransfer;
  *(_QWORD *)(v0 + 576) = v1;
  *(_QWORD *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 552) = XPCTypeMachSend;
  *(_QWORD *)(v0 + 616) = v1;
  *(_QWORD *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 592) = XPCTypeMachRecv;
  *(_QWORD *)(v0 + 656) = v1;
  *(_QWORD *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 632) = XPCTypePipe;
  *(_QWORD *)(v0 + 696) = v1;
  *(_QWORD *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 672) = XPCTypePointer;
  *(_QWORD *)(v0 + 736) = v1;
  *(_QWORD *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 712) = XPCTypeSerializer;
  *(_QWORD *)(v0 + 776) = v1;
  *(_QWORD *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 752) = XPCTypeService;
  *(_QWORD *)(v0 + 816) = v1;
  *(_QWORD *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 792) = XPCTypeServiceInstance;
  *(_QWORD *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3150);
  *(_QWORD *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 832) = XPCTypeInt64;
  *(_QWORD *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3158);
  *(_QWORD *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 872) = XPCTypeUInt64;
  *(_QWORD *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3160);
  *(_QWORD *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 912) = XPCTypeString;
  *(_QWORD *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3168);
  *(_QWORD *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 952) = XPCTypeUUID;
  *(_QWORD *)(v0 + 1016) = v1;
  *(_QWORD *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 992) = XPCTypeShmem;
  *(_QWORD *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_1EFBB3170);
  *(_QWORD *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)(v0 + 1032) = XPCTypeNull;
  if (qword_1EFBB22F8 != -1)
    swift_once();
  v2 = qword_1EFBB30F0;
  v3 = sub_1CF7B4720((_QWORD *)1, 27, 1, (_QWORD *)v0, &qword_1EFBB3100, &qword_1EFBB3218);
  v6 = v1;
  v7 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(_QWORD *)&v5 = v2;
  v3[2] = 27;
  sub_1CF796180(&v5, (uint64_t)(v3 + 134));
  return v3;
}

void *sub_1CF7B3D14()
{
  void *result;

  result = (void *)sub_1CF7B3D30();
  off_1EFBB30F8 = result;
  return result;
}

uint64_t sub_1CF7B3D30()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;

  v0 = sub_1CF7B3544();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1CF7B5248(0, v1, 0);
    v2 = v19;
    v3 = v0 + 32;
    do
    {
      sub_1CF78D06C(v3, (uint64_t)&v15);
      v4 = v16;
      v5 = v17;
      __swift_project_boxed_opaque_existential_1(&v15, v16);
      *(_QWORD *)&v18[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_1CF796180(&v15, (uint64_t)v18 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1CF7B5248(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v19;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1CF7B5248(v7 > 1, v8 + 1, 1);
        v2 = v19;
      }
      *(_QWORD *)(v2 + 16) = v8 + 1;
      v9 = (_OWORD *)(v2 + 48 * v8);
      v10 = v18[0];
      v11 = v18[2];
      v9[3] = v18[1];
      v9[4] = v11;
      v9[2] = v10;
      v3 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v2 + 16))
      goto LABEL_9;
LABEL_11:
    v12 = MEMORY[0x1E0DEE9E0];
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_11;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3220);
  v12 = sub_1CF7C8CDC();
LABEL_12:
  *(_QWORD *)&v18[0] = v12;
  v13 = swift_bridgeObjectRetain();
  sub_1CF7B5564(v13, 1, v18);
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v18[0];
}

uint64_t static XPCTypeDescriptor<>.descriptor(for:)@<X0>(xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t result;

  if (qword_1EFBB2300 != -1)
    swift_once();
  v4 = off_1EFBB30F8;
  if (*((_QWORD *)off_1EFBB30F8 + 2))
  {
    v5 = sub_1CF7B4AC0((uint64_t)type);
    if ((v6 & 1) != 0)
      return sub_1CF78D06C(v4[7] + 40 * v5, a2);
  }
  xpc_type_get_name(type);
  sub_1CF7C88E0();
  sub_1CF7C8BA4();
  sub_1CF7C88D4();
  sub_1CF7C8C7C();
  sub_1CF7C88D4();
  sub_1CF7C88D4();
  sub_1CF7C88D4();
  result = sub_1CF7C8CA0();
  __break(1u);
  return result;
}

xpc_object_t XPCTypeDescriptor<>.create()()
{
  return xpc_dictionary_create(0, 0, 0);
}

char *sub_1CF7B40A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3240);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1CF7B5900(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B41B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CF7B4720(a1, a2, a3, a4, &qword_1ED56EC08, (uint64_t *)&unk_1ED56EC10);
}

_QWORD *sub_1CF7B41C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3090);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF7B59E8(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B42EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DED0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CF7B5AD4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B43F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3208);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF7B5BC4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B451C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3238);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CF7B5CD0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1CF7B4628(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B68);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF7B5DB8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B4720(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF7B5E9C(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF7B484C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB31F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CF7B5FA4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1CF7B4958(uint64_t a1)
{
  uint64_t v2;

  sub_1CF7C8C88();
  v2 = sub_1CF7C87D8();
  return sub_1CF7B4D30(a1, v2);
}

unint64_t sub_1CF7B49A8(uint64_t a1)
{
  uint64_t v2;

  sub_1CF7C861C();
  sub_1CF7B60AC((unint64_t *)&qword_1EFBB2730, MEMORY[0x1E0CB09C8]);
  v2 = sub_1CF7C87D8();
  return sub_1CF7B4E58(a1, v2);
}

unint64_t sub_1CF7B4A0C(uint64_t a1)
{
  uint64_t v2;

  sub_1CF7C9234();
  sub_1CF7C861C();
  sub_1CF7B60AC((unint64_t *)&qword_1EFBB2730, MEMORY[0x1E0CB09C8]);
  sub_1CF7C87E4();
  type metadata accessor for RemoteDevice.Identity();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  v2 = sub_1CF7C9258();
  return sub_1CF7B4F90(a1, v2);
}

unint64_t sub_1CF7B4AC0(uint64_t a1)
{
  uint64_t v2;

  sub_1CF7C9234();
  sub_1CF7C9240();
  v2 = sub_1CF7C9258();
  return sub_1CF7B50C0(a1, v2);
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for XPCTypeRole()
{
  return &type metadata for XPCTypeRole;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Scalar()
{
  return &type metadata for XPCTypeRole.Scalar;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Date()
{
  return &type metadata for XPCTypeRole.Date;
}

ValueMetadata *type metadata accessor for XPCTypeRole.String()
{
  return &type metadata for XPCTypeRole.String;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Reference()
{
  return &type metadata for XPCTypeRole.Reference;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Array()
{
  return &type metadata for XPCTypeRole.Array;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Dictionary()
{
  return &type metadata for XPCTypeRole.Dictionary;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Error()
{
  return &type metadata for XPCTypeRole.Error;
}

ValueMetadata *type metadata accessor for XPCTypeRole.UUID()
{
  return &type metadata for XPCTypeRole.UUID;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Null()
{
  return &type metadata for XPCTypeRole.Null;
}

uint64_t sub_1CF7B4BC8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CF7B4BD0(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1CF7B4C14(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t type metadata accessor for XPCTypeDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCTypeDescriptor);
}

unint64_t sub_1CF7B4C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_1CF7C9234();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE10);
  sub_1CF7C888C();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  v8 = sub_1CF7C9258();
  return sub_1CF7B515C(a1, a2, a3, a4, v8);
}

unint64_t sub_1CF7B4D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1CF7C8C88();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1CF7C8808();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1CF7B4E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1CF7C861C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1CF7B60AC(&qword_1EFBB3200, MEMORY[0x1E0CB09D0]);
      v14 = sub_1CF7C8808();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1CF7B4F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1CF7B6134(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if ((sub_1CF7C85EC() & 1) != 0)
      {
        v13 = *(int *)(v5 + 20);
        v14 = *(_QWORD *)&v8[v13];
        v15 = *(_QWORD *)&v8[v13 + 8];
        v16 = (_QWORD *)(a1 + v13);
        v17 = v14 == *v16 && v15 == v16[1];
        if (v17 || (sub_1CF7C8FC4() & 1) != 0)
          break;
      }
      sub_1CF78E638((uint64_t)v8);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_1CF78E638((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_1CF7B50C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1CF7B515C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v12 = ~v7;
    v13 = *(_QWORD *)(v5 + 48);
    do
    {
      v14 = (_QWORD *)(v13 + 32 * v8);
      if (*v14 == a1)
      {
        v15 = v14[2] == a3 && v14[3] == a4;
        if (v15 || (sub_1CF7C8FC4() & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v12;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_1CF7B522C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF7B5264(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF7B5248(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CF7B53C0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CF7B5264(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3238);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B53C0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3230);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3228);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

void sub_1CF7B5564(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37[2];
  uint64_t v38;
  __int128 v39[2];
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  sub_1CF7B60EC(a1 + 32, (uint64_t)&v38);
  v7 = v38;
  v40 = v38;
  sub_1CF796180(v39, (uint64_t)v37);
  v8 = (_QWORD *)*a3;
  v10 = sub_1CF7B4AC0(v7);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_23;
  v14 = v9;
  if (v8[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1CF7C70B0();
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(_QWORD *)(v19[6] + 8 * v10) = v7;
    sub_1CF796180(v37, v19[7] + 40 * v10);
    v20 = v19[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v22;
    v23 = v4 - 1;
    if (!v23)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v24 = a1 + 80;
    while (1)
    {
      sub_1CF7B60EC(v24, (uint64_t)&v38);
      v25 = v38;
      v40 = v38;
      sub_1CF796180(v39, (uint64_t)v37);
      v26 = (_QWORD *)*a3;
      v27 = sub_1CF7B4AC0(v25);
      v29 = v26[2];
      v30 = (v28 & 1) == 0;
      v21 = __OFADD__(v29, v30);
      v31 = v29 + v30;
      if (v21)
        break;
      v32 = v28;
      if (v26[3] < v31)
      {
        sub_1CF7C6408(v31, 1);
        v27 = sub_1CF7B4AC0(v25);
        if ((v32 & 1) != (v33 & 1))
          goto LABEL_25;
      }
      if ((v32 & 1) != 0)
        goto LABEL_10;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      *(_QWORD *)(v34[6] + 8 * v27) = v25;
      sub_1CF796180(v37, v34[7] + 40 * v27);
      v35 = v34[2];
      v21 = __OFADD__(v35, 1);
      v36 = v35 + 1;
      if (v21)
        goto LABEL_24;
      v34[2] = v36;
      v24 += 48;
      if (!--v23)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1CF7C6408(v13, a2 & 1);
  v15 = sub_1CF7B4AC0(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    if ((v14 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v17 = (void *)swift_allocError();
    swift_willThrow();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1CF7C91BC();
  __break(1u);
LABEL_26:
  sub_1CF7C8BA4();
  sub_1CF7C88D4();
  sub_1CF7C8C7C();
  sub_1CF7C88D4();
  sub_1CF7C8CA0();
  __break(1u);
}

char *sub_1CF7B5900(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CF7C8CE8();
  __break(1u);
  return result;
}

char *sub_1CF7B59E8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B5AD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B5BC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3210);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

char *sub_1CF7B5CD0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CF7C8CE8();
  __break(1u);
  return result;
}

char *sub_1CF7B5DB8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B5E9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B5FA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7B60AC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CF7C861C();
    result = MEMORY[0x1D17D55BC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF7B60EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF7B6134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MachError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _DWORD v14[2];
  id v15;

  v4 = sub_1CF7C8670();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A80](v4);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = sub_1CF7C86AC();
    if ((v9 & 0x100000000) != 0)
    {
      sub_1CF7C8850();
      v10 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v11 = (void *)sub_1CF7C882C();
      swift_bridgeObjectRelease();
      v12 = (void *)sub_1CF7C876C();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      v15 = v13;
      sub_1CF7B6308();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }
    else
    {
      v14[1] = v9;
      sub_1CF7B6344();
      return sub_1CF7C84F0();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1CF7B6308()
{
  unint64_t result;

  result = qword_1EFBB2A68;
  if (!qword_1EFBB2A68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFBB2A68);
  }
  return result;
}

unint64_t sub_1CF7B6344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB3248;
  if (!qword_1EFBB3248)
  {
    v1 = sub_1CF7C8670();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB16B8], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB3248);
  }
  return result;
}

uint64_t MachError.errorCodeComponents.getter()
{
  uint64_t v0;

  sub_1CF7C8670();
  sub_1CF7B6344();
  v0 = sub_1CF7C84E4();
  if (v0 == (int)v0)
    return v0 >> 26;
  else
    return 0;
}

_QWORD *static SystemXPCConnection.unsafePeer(from:)(uint64_t a1)
{
  _QWORD *v2;

  type metadata accessor for SystemXPCPeerConnection();
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SystemXPCPeerConnection()
{
  return objc_opt_self();
}

uint64_t sub_1CF7B6470(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[6];

  if (MEMORY[0x1D17D5ACC](a3) == XPCTypeDictionary)
  {
    result = sub_1CF798598(a1, a2 & 1);
    if (!v3)
    {
      v11 = (void *)result;
      if (MEMORY[0x1D17D5ACC]() == XPCTypeDictionary)
      {
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = a3;
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = sub_1CF7B9D7C;
        *(_QWORD *)(v16 + 24) = v15;
        v19[4] = sub_1CF7A11AC;
        v19[5] = v16;
        v19[0] = MEMORY[0x1E0C809A8];
        v19[1] = 1107296256;
        v19[2] = sub_1CF77C368;
        v19[3] = &block_descriptor_50;
        v17 = _Block_copy(v19);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v11, v17);
        swift_unknownObjectRelease();
        _Block_release(v17);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        result = swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          __break(1u);
      }
      else
      {
        v12 = sub_1CF7C8C34();
        swift_allocError();
        v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
        v14[3] = swift_getObjectType();
        *v14 = a3;
        swift_unknownObjectRetain();
        sub_1CF7C8C04();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC4B0], v12);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v7 = sub_1CF7C8C34();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2E80);
    v9[3] = swift_getObjectType();
    *v9 = a3;
    swift_unknownObjectRetain();
    sub_1CF7C8C04();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC4B0], v7);
    return swift_willThrow();
  }
  return result;
}

void sub_1CF7B6758(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(__int128 *);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(__int128 *, __int128 *);
  void *v36;
  id v37;
  void (*v38)(__int128 *__return_ptr, __int128 *);
  id v39;
  void *v40;
  id v41;
  xpc_object_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;

  v10 = v9;
  v49 = (uint64_t *)(v10 + 16);
  swift_beginAccess();
  v56 = a1;
  v52 = a8;
  if ((*(_BYTE *)(v10 + 80) & 1) == 0)
  {
    v47 = a3;
    v48 = a5;
    v18 = *(_QWORD *)(v10 + 16);
    v19 = *(_QWORD *)(v10 + 48);
    v20 = *(_QWORD *)(v10 + 64);
    v21 = *(_QWORD *)(v10 + 88);
    *(_QWORD *)&v57 = a1;
    v45 = v18;
    sub_1CF7A8D64(v18);
    sub_1CF7A7754(v19);
    sub_1CF7A7754(v20);
    v55 = v21;
    swift_retain();
    swift_retain();
    v22 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    if (swift_dynamicCast())
    {
      sub_1CF7A4B78(v45);
      sub_1CF7A4BA8(v19);
      sub_1CF7A4BA8(v20);
      swift_release();
      swift_release();
      a8 = v52;
      a5 = v48;
      a3 = v47;
      if ((v61 & 1) == 0)
      {
LABEL_8:
        v24 = 0;
LABEL_25:
        *a9 = v24;
        return;
      }
    }
    else
    {
      sub_1CF7A4B78(v45);
      sub_1CF7A4BA8(v19);
      sub_1CF7A4BA8(v20);
      swift_release();
      swift_release();
      a8 = v52;
      a5 = v48;
      a3 = v47;
    }
  }
  *(_QWORD *)&v57 = a1;
  v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  if ((swift_dynamicCast() & 1) != 0 && (v61 & 1) != 0)
    goto LABEL_8;
  if (!a6)
  {
    if (a3)
    {
      v38 = *(void (**)(__int128 *__return_ptr, __int128 *))(v10 + 16);
      if (!v38)
        goto LABEL_33;
      v44 = *(_QWORD *)(v10 + 48);
      v46 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)&v61 = a3;
      *((_QWORD *)&v61 + 1) = a4;
      v62 = a5;
      v39 = a1;
      sub_1CF7A8D94(a3);
      sub_1CF7A8D64((uint64_t)v38);
      sub_1CF7A7754(v44);
      sub_1CF7A7754(v46);
      swift_retain();
      swift_retain();
      sub_1CF7A8D64((uint64_t)v38);
      v38(&v57, &v61);
      sub_1CF7A4B78((uint64_t)v38);
      v55 = v57;
      if ((_QWORD)v57)
      {
        v53 = v58;
        v54 = *((_QWORD *)&v57 + 1);
        sub_1CF7A4B78((uint64_t)v38);
        sub_1CF7A4BA8(v44);
        sub_1CF7A4BA8(v46);
        swift_release();
        swift_release();
        sub_1CF7B9D1C(a3, a4, a5, (void (*)(void))MEMORY[0x1E0DEEEC0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
        goto LABEL_11;
      }
      sub_1CF7A4B78((uint64_t)v38);
      sub_1CF7A4BA8(v44);
      sub_1CF7A4BA8(v46);
      swift_release();
      swift_release();
      sub_1CF7B9D1C(a3, a4, a5, (void (*)(void))MEMORY[0x1E0DEEEC0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
    }
    else
    {
      v41 = a1;
      v42 = xpc_dictionary_create(0, 0, 0);
      if (v42)
      {
        v54 = 0xD000000000000019;
        v55 = (uint64_t)v42;
        v53 = 0x80000001CF7CD790;
        goto LABEL_11;
      }
    }
    sub_1CF7C8A60();
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v43 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();

    sub_1CF7B1414(a2, (uint64_t)&v57);
    if (v59)
    {
      sub_1CF7B145C(&v57, &v61);
      v33 = *(_QWORD *)(v10 + 16);
      v34 = *(_QWORD *)(v10 + 48);
      v36 = a1;
      v35 = *(void (**)(__int128 *, __int128 *))(v10 + 64);
      goto LABEL_14;
    }
    v40 = a1;
LABEL_21:

    sub_1CF778FFC((uint64_t)&v57, &qword_1EFBB3280);
LABEL_24:
    v24 = 1;
    goto LABEL_25;
  }
  v25 = a1;
  v54 = a7;
  v55 = a6;
  v53 = a8;
LABEL_11:
  v26 = *(_QWORD *)(v10 + 16);
  v27 = *(_QWORD *)(v10 + 48);
  v28 = *(_QWORD *)(v10 + 64);
  v29 = a1;
  sub_1CF7A8D94(a6);
  sub_1CF7A8D64(v26);
  sub_1CF7A7754(v27);
  sub_1CF7A7754(v28);
  swift_retain();
  swift_retain();
  a6 = v53;
  sub_1CF7A8D94(v55);
  a8 = 0;
  sub_1CF7B6470(a1, 0, v55);
  sub_1CF7B9D1C(v55, v54, v53, (void (*)(void))MEMORY[0x1E0DEEEC0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);

  sub_1CF7A4B78(v26);
  sub_1CF7A4BA8(v27);
  sub_1CF7A4BA8(v28);
  swift_release();
  swift_release();
  a7 = *v49;
  if (*v49)
  {
    v30 = *(_QWORD *)(v10 + 64);
    v31 = *(_QWORD *)(v10 + 48);
    v32 = *(void (**)(__int128 *))(v10 + 32);
    *(_QWORD *)&v57 = v55;
    *((_QWORD *)&v57 + 1) = v54;
    v58 = v53;
    sub_1CF7A8D64(a7);
    sub_1CF7A7754(v31);
    sub_1CF7A7754(v30);
    swift_retain();
    swift_retain();
    sub_1CF7A8D64(a7);
    v32(&v57);
    sub_1CF7A4B78(a7);
    sub_1CF7A4B78(a7);
    sub_1CF7A4BA8(v31);
    sub_1CF7A4BA8(v30);
    swift_release();
    swift_release();
    sub_1CF7B9D1C(v55, v54, v53, (void (*)(void))MEMORY[0x1E0DEEEC0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
    sub_1CF7B1414(a2, (uint64_t)&v57);
    if (v59)
    {
      sub_1CF7B145C(&v57, &v61);
      v33 = *(_QWORD *)(v10 + 16);
      v34 = *(_QWORD *)(v10 + 48);
      v35 = *(void (**)(__int128 *, __int128 *))(v10 + 64);
      v36 = v56;
LABEL_14:
      *(_QWORD *)&v57 = v36;
      v60 = 1;
      v37 = v36;
      sub_1CF7A8D64(v33);
      sub_1CF7A7754(v34);
      if (v35)
      {
        sub_1CF7A7754((uint64_t)v35);
        swift_retain();
        swift_retain();
        v35(&v61, &v57);
      }
      else
      {
        sub_1CF7A7754(0);
        swift_retain();
        swift_retain();
      }
      sub_1CF778FFC((uint64_t)&v57, (uint64_t *)&unk_1ED56DF10);
      sub_1CF7A4B78(v33);
      sub_1CF7A4BA8(v34);
      sub_1CF7A4BA8((uint64_t)v35);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v61);

      goto LABEL_24;
    }
    v40 = a1;
    goto LABEL_21;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  sub_1CF7B9D1C(v55, a7, a6, (void (*)(void))MEMORY[0x1E0DEEEC0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = 0xE000000000000000;
  sub_1CF7C8BA4();
  sub_1CF7C88D4();
  *(_QWORD *)&v61 = a8;
  sub_1CF7C8C7C();
  sub_1CF7C8CA0();
  __break(1u);
}

void sub_1CF7B7064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(_OWORD *);
  char v17;
  void (*v18)(uint64_t *);
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v27[3];
  char v28[9];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v30 = a2;
  v31 = a3;
  *(_BYTE *)(v5 + 104) = 1;
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 48);
  v9 = *(_QWORD *)(v5 + 64);
  sub_1CF7A8D64(v7);
  sub_1CF7A7754(v8);
  sub_1CF7A7754(v9);
  swift_retain();
  swift_retain();
  sub_1CF798874(a1, (uint64_t *)v27);
  swift_bridgeObjectRelease();
  sub_1CF7A4B78(v7);
  sub_1CF7A4BA8(v8);
  sub_1CF7A4BA8(v9);
  swift_release();
  swift_release();
  v10 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 64);
  sub_1CF7A8D64(v10);
  sub_1CF7A7754(v11);
  sub_1CF7A7754(v12);
  swift_retain();
  swift_retain();
  sub_1CF798874(a1, (uint64_t *)v27);
  sub_1CF7A4B78(v10);
  sub_1CF7A4BA8(v11);
  sub_1CF7A4BA8(v12);
  swift_release();
  swift_release();
  v13 = v27[0];
  swift_beginAccess();
  v14 = *(_QWORD *)(v5 + 112);
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    v15 = sub_1CF779644(v13, *((uint64_t *)&v13 + 1));
    v16 = (void (*)(_OWORD *))a4;
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(uint64_t *))(*(_QWORD *)(v14 + 56) + 16 * v15);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = a4;
      *(_QWORD *)(v19 + 24) = a5;
      swift_retain();
      sub_1CF7A7754(a4);
      v18(&v29);
      swift_release_n();
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = (void (*)(_OWORD *))a4;
  }
  sub_1CF7AF5E0();
  v20 = (void *)swift_allocError();
  *v21 = 0;
  swift_willThrow();
  v22 = v29;
  v23 = v30;
  v24 = v31;
  memset(v27, 0, sizeof(v27));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CF7B6758(v20, (uint64_t)v27, v22, v23, v24, 0, 0, 0, v28);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1CF778FFC((uint64_t)v27, &qword_1EFBB3280);
  if (v16)
  {
    LOBYTE(v27[0]) = v28[0];
    v16(v27);
  }

}

void sub_1CF7B7474()
{
  uint64_t v0;

  xpc_connection_activate(*(xpc_connection_t *)(v0 + 24));
}

void sub_1CF7B747C(xpc_object_t *a1)
{
  uint64_t v1;

  xpc_connection_send_message(*(xpc_connection_t *)(v1 + 24), *a1);
}

void sub_1CF7B7488(xpc_object_t *a1)
{
  uint64_t v1;

  xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(v1 + 24), *a1);
  swift_unknownObjectRetain();
  swift_retain();
  sub_1CF7BF104();
}

uint64_t sub_1CF7B74D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if ((v6 & 1) != 0)
  {
    sub_1CF78D000();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1CF7A5650(v3, v4, v5, 1);
  }
  else
  {
    result = swift_unknownObjectRelease();
    *v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }
  return result;
}

uint64_t sub_1CF7B757C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  void *v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  xpc_object_t v26[8];

  v23[1] = a5;
  v24 = a1;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MessageWrapper(0, v12, v13, v14);
  v25 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A80](v15);
  v17 = (_QWORD *)((char *)v23 - v16);
  type metadata accessor for XPCObjectEncoder();
  *(_QWORD *)(swift_initStackObject() + 16) = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v24, a2);
  v24 = v5;
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v11, a2, a3, a4, v17);
  v18 = MEMORY[0x1D17D55BC](&protocol conformance descriptor for MessageWrapper<A>, v15);
  v19 = v26[7];
  v20 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v17, v15, v18);
  if (!v19)
  {
    v22 = (void *)v20;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 8))(v17, v15);
    swift_setDeallocating();
    swift_release();
    v26[0] = v22;
    v26[1] = (xpc_object_t)0xD000000000000019;
    v26[2] = (xpc_object_t)0x80000001CF7CD790;
    swift_unknownObjectRetain();
    sub_1CF7B7488(v26);
  }
  (*(void (**)(uint64_t *, uint64_t))(v25 + 8))(v17, v15);
  swift_setDeallocating();
  return swift_release();
}

uint64_t sub_1CF7B7758(void **a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  _xpc_connection_s *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v15[6];

  v5 = v4;
  v9 = *a1;
  swift_weakInit();
  v10 = *(_xpc_connection_s **)(v5 + 24);
  v11 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = v11;
  v15[4] = sub_1CF7B7994;
  v15[5] = v12;
  v15[0] = MEMORY[0x1E0C809A8];
  v15[1] = 1107296256;
  v15[2] = sub_1CF7A5E10;
  v15[3] = &block_descriptor_6;
  v13 = _Block_copy(v15);
  swift_retain();
  swift_release();
  xpc_connection_send_message_with_reply(v10, v9, a2, v13);
  _Block_release(v13);
  return swift_weakDestroy();
}

uint64_t sub_1CF7B789C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1CF7B78C0()
{
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_unknownObjectRetain();
  sub_1CF7BF104();
}

uint64_t sub_1CF7B791C()
{
  void (*v0)(_QWORD *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = v8;
  v2 = v9;
  v3 = v10;
  v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  v6[2] = v10;
  v7 = v11;
  v0(v6);
  return sub_1CF7A5650(v1, v2, v3, v4);
}

uint64_t sub_1CF7B7968()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CF7B7994()
{
  sub_1CF7B78C0();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

void sub_1CF7B79B8(dispatch_queue_t targetq)
{
  uint64_t v1;

  xpc_connection_set_target_queue(*(xpc_connection_t *)(v1 + 24), targetq);
}

void sub_1CF7B79C4()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 24));
}

void SystemXPCConnection.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SystemXPCConnection.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CF7B7A24()
{
  return swift_unknownObjectRelease();
}

uint64_t SystemXPCConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t SystemXPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1CF7B7A7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _xpc_connection_s *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v3 = v2[4];
  v2[4] = a1;
  v2[5] = a2;
  swift_retain();
  sub_1CF7A4BA8(v3);
  v4 = (_xpc_connection_s *)v2[3];
  v5 = swift_allocObject();
  swift_weakInit();
  v7[4] = sub_1CF7B7D30;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809A8];
  v7[1] = 1107296256;
  v7[2] = sub_1CF7A5E10;
  v7[3] = &block_descriptor_9_0;
  v6 = _Block_copy(v7);
  swift_release();
  xpc_connection_set_event_handler(v4, v6);
  _Block_release(v6);
}

uint64_t sub_1CF7B7B48()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + 32))
    {
      swift_getObjectType();
      swift_retain();
      OS_xpc_object.type.getter();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF7B7D30()
{
  return sub_1CF7B7B48();
}

uint64_t SystemXPCListenerConnection.deinit()
{
  return sub_1CF7B8594((void (*)(_QWORD, _QWORD))sub_1CF7B9DCC);
}

uint64_t SystemXPCListenerConnection.__deallocating_deinit()
{
  return sub_1CF7B85D8((void (*)(_QWORD, _QWORD))sub_1CF7B9DCC);
}

void sub_1CF7B7D54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  _xpc_connection_s *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD v11[6];

  v3 = v2;
  v6 = v2[4];
  v3[4] = a1;
  v3[5] = a2;
  swift_retain();
  sub_1CF7A4BA8(v6);
  v7 = (_xpc_connection_s *)v3[3];
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a1;
  v9[4] = a2;
  v11[4] = sub_1CF7B8388;
  v11[5] = v9;
  v11[0] = MEMORY[0x1E0C809A8];
  v11[1] = 1107296256;
  v11[2] = sub_1CF7A5E10;
  v11[3] = &block_descriptor_18;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v7, v10);
  _Block_release(v10);
}

uint64_t sub_1CF7B7E60(void *a1)
{
  uint64_t Strong;
  const char *v3;
  uint64_t v4;
  char v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_unknownObjectRetain();
    sub_1CF7BF104();
  }
  v3 = (const char *)Strong;
  v4 = XPCTypeDictionary;
  if (v4 != MEMORY[0x1D17D5ACC](a1)
    || (type metadata accessor for XPCSideChannel(),
        swift_unknownObjectRetain(),
        swift_retain(),
        v5 = sub_1CF7B9178(a1, 0xD000000000000019, 0x80000001CF7CD790, v3),
        swift_bridgeObjectRelease(),
        swift_unknownObjectRelease(),
        swift_release(),
        (v5 & 1) == 0))
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    XPCError.init(_:from:userInfo:)();
  }
  return swift_release();
}

uint64_t sub_1CF7B8388(void *a1)
{
  return sub_1CF7B7E60(a1);
}

_BYTE *sub_1CF7B8394(_BYTE *result)
{
  if ((*result & 1) == 0)
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_1CF7BF104();
  }
  return result;
}

void sub_1CF7B8430()
{
  uint64_t v0;
  _xpc_connection_s *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD v5[6];

  if (!*(_QWORD *)(v0 + 32))
  {
    *(_QWORD *)(v0 + 32) = nullsub_1;
    *(_QWORD *)(v0 + 40) = 0;
    sub_1CF7A4BA8(0);
    v1 = *(_xpc_connection_s **)(v0 + 24);
    v2 = swift_allocObject();
    swift_weakInit();
    v3 = (_QWORD *)swift_allocObject();
    v3[2] = v2;
    v3[3] = nullsub_1;
    v3[4] = 0;
    v5[4] = sub_1CF7B9DC8;
    v5[5] = v3;
    v5[0] = MEMORY[0x1E0C809A8];
    v5[1] = 1107296256;
    v5[2] = sub_1CF7A5E10;
    v5[3] = &block_descriptor_26_0;
    v4 = _Block_copy(v5);
    swift_release();
    xpc_connection_set_event_handler(v1, v4);
    _Block_release(v4);
  }
  xpc_connection_activate(*(xpc_connection_t *)(v0 + 24));
}

uint64_t objectdestroy_14Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

const char *sub_1CF7B8554()
{
  uint64_t v0;
  const char *result;

  result = xpc_connection_get_name(*(xpc_connection_t *)(v0 + 24));
  if (result)
    return (const char *)sub_1CF7C88E0();
  return result;
}

uint64_t sub_1CF7B8580()
{
  uint64_t v0;

  return sub_1CF7A4BA8(*(_QWORD *)(v0 + 32));
}

uint64_t SystemXPCPeerConnection.deinit()
{
  return sub_1CF7B8594((void (*)(_QWORD, _QWORD))sub_1CF7A4BA8);
}

uint64_t sub_1CF7B8594(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  return v1;
}

uint64_t SystemXPCPeerConnection.__deallocating_deinit()
{
  return sub_1CF7B85D8((void (*)(_QWORD, _QWORD))sub_1CF7A4BA8);
}

uint64_t sub_1CF7B85D8(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  return swift_deallocClassInstance();
}

_QWORD *static SystemXPCConnection.anonymousListenerConnection(targetQueue:)(dispatch_queue_t targetq)
{
  xpc_connection_t v1;
  _QWORD *result;

  v1 = xpc_connection_create(0, targetq);
  type metadata accessor for SystemXPCListenerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = v1;
  return result;
}

uint64_t type metadata accessor for SystemXPCListenerConnection()
{
  return objc_opt_self();
}

_QWORD *static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  xpc_connection_t mach_service;
  _QWORD *result;

  v4 = sub_1CF7C8898();
  mach_service = xpc_connection_create_mach_service((const char *)(v4 + 32), a3, 1uLL);
  swift_release();
  type metadata accessor for SystemXPCListenerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = mach_service;
  return result;
}

_QWORD *static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)(uint64_t a1, uint64_t a2, char a3, NSObject *a4)
{
  uint64_t v5;
  uint64_t v6;
  xpc_connection_t mach_service;
  _QWORD *result;

  if ((a3 & 1) != 0)
    v5 = 2;
  else
    v5 = 0;
  v6 = sub_1CF7C8898();
  mach_service = xpc_connection_create_mach_service((const char *)(v6 + 32), a4, v5);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = mach_service;
  return result;
}

_QWORD *static SystemXPCConnection.xpcServiceConnection(name:targetQueue:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  xpc_connection_t v5;
  _QWORD *result;

  v4 = sub_1CF7C8898();
  v5 = xpc_connection_create((const char *)(v4 + 32), a3);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = v5;
  return result;
}

_QWORD *static SystemXPCConnection.unsafeListener(from:)(uint64_t a1)
{
  _QWORD *v2;

  type metadata accessor for SystemXPCListenerConnection();
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

_QWORD *XPCPeerEndpoint.createConnection()()
{
  xpc_connection_t v0;
  _QWORD *result;

  swift_getObjectType();
  v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCPeerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = v0;
  return result;
}

_QWORD *XPCListenerEndpoint.createConnection()()
{
  xpc_connection_t v0;
  _QWORD *result;

  swift_getObjectType();
  v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCListenerConnection();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = v0;
  return result;
}

uint64_t type metadata accessor for SystemXPCConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for SystemXPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemXPCConnection.sendSync<A>(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t method lookup function for SystemXPCListenerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SystemXPCPeerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t sub_1CF7B8954()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

_BYTE *sub_1CF7B8988(_BYTE *result)
{
  return sub_1CF7B8394(result);
}

uint64_t sub_1CF7B8994()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7B89D8(void *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(__int128 *, _QWORD *);
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _UNKNOWN **v36;
  const char *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  xpc_object_t reply;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _xpc_connection_s *v51;
  _xpc_connection_s *v52;
  _QWORD v53[2];
  void (*v54)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD);
  void (*v55)(__int128 *, _QWORD *);
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  _QWORD v64[2];
  __int128 v65;
  unint64_t v66;
  char v67;

  v62 = a2;
  v63 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  v7 = MEMORY[0x1E0C80A80](v6);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A80](v7);
  v12 = (char *)v53 - v11;
  v13 = MEMORY[0x1E0C80A80](v10);
  v15 = (char *)v53 - v14;
  MEMORY[0x1E0C80A80](v13);
  v17 = (char *)v53 - v16;
  v18 = sub_1CF7C861C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A80](v18);
  v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  v60 = v12;
  v61 = v21;
  sub_1CF7C88E0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1CF7C85D4();
  swift_bridgeObjectRelease();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v15, 1, v18) == 1)
  {
    sub_1CF778FFC((uint64_t)v15, &qword_1ED56E310);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_6:
    sub_1CF778FFC((uint64_t)v17, &qword_1ED56E310);
    return 0;
  }
  v24 = v15;
  v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v25(v17, v24, v18);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26((uint64_t)v17, 0, 1, v18);
  if (v22(v17, 1, v18) == 1)
    goto LABEL_6;
  v27 = v25;
  v28 = (uint64_t)v61;
  v56 = v27;
  v57 = v26;
  v27(v61, v17, v18);
  if (qword_1ED56DE00 != -1)
    swift_once();
  v29 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  sub_1CF78A61C(v28, (uint64_t *)&v65);
  objc_msgSend(v29, sel_unlock);
  v30 = v65;
  if (!(_QWORD)v65)
  {
    v38 = 0;
    v59 = 0;
    goto LABEL_20;
  }
  v32 = (void (*)(__int128 *, _QWORD *))*((_QWORD *)&v65 + 1);
  v31 = v66;
  v33 = swift_allocObject();
  v55 = v32;
  *(_QWORD *)(v33 + 16) = v32;
  *(_QWORD *)(v33 + 24) = v31;
  v59 = v33;
  v34 = *(_QWORD *)(v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v34)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)&v65 = a1;
    *((_QWORD *)&v65 + 1) = v62;
    v66 = a3;
    v67 = 0;
    goto LABEL_17;
  }
  v53[0] = v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  v53[1] = v31;
  v54 = *(void (**)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD))(*(_QWORD *)v63 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v58 = v30;
  v54(&v65, sub_1CF78D288, v34, MEMORY[0x1E0DEAFA0]);
  swift_release();
  if ((v65 & 1) == 0)
  {
    LODWORD(v62) = sub_1CF7C8A60();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1CF7CB5D0;
    v65 = *(_OWORD *)v53[0];
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB3258);
    sub_1CF7C888C();
    v41 = sub_1CF7C882C();
    swift_bridgeObjectRelease();
    v55 = (void (*)(__int128 *, _QWORD *))sub_1CF79607C(0, &qword_1EFBB2EC0);
    *(_QWORD *)(v40 + 56) = v55;
    v42 = sub_1CF7B9C90();
    *(_QWORD *)(v40 + 64) = v42;
    *(_QWORD *)(v40 + 32) = v41;
    *(_QWORD *)&v65 = v63;
    *((_QWORD *)&v65 + 1) = &protocol witness table for RemoteXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB3270);
    sub_1CF7C888C();
    v43 = sub_1CF7C882C();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v40 + 96) = v55;
    *(_QWORD *)(v40 + 104) = v42;
    *(_QWORD *)(v40 + 72) = v43;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v44 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();
    v45 = v58;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    v38 = sub_1CF7B9C8C;
    v30 = v45;
LABEL_20:
    reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_1CF7B9D1C(v30, (uint64_t)v38, v59, (void (*)(void))MEMORY[0x1E0DEEE30], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
      v48 = v61;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v48, v18);
      return 1;
    }
    v47 = reply;
    v58 = v30;
    *(_QWORD *)&v65 = reply;
    *((_QWORD *)&v65 + 1) = 0xD000000000000019;
    v63 = "v20@?0@\"OS_remote_device\"8B16";
    v66 = 0x80000001CF7CD790;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1CF7C88E0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1CF7C85D4();
      swift_bridgeObjectRelease();
      if (v22(v9, 1, v18) != 1)
      {
        v50 = (uint64_t)v60;
        v56(v60, v9, v18);
        v49 = 0;
        v48 = v61;
        goto LABEL_28;
      }
      sub_1CF778FFC((uint64_t)v9, &qword_1ED56E310);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v49 = 1;
    v50 = (uint64_t)v60;
    v48 = v61;
LABEL_28:
    v57(v50, v49, 1, v18);
    sub_1CF789AB4(v50);
    swift_unknownObjectRelease();
    v51 = xpc_dictionary_get_remote_connection(v47);
    if (v51)
    {
      v52 = v51;
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
        xpc_remote_connection_send_message();
      else
        xpc_connection_send_message(v52, v47);
      swift_unknownObjectRelease();
    }
    sub_1CF7B9D1C(v58, (uint64_t)v38, v59, (void (*)(void))MEMORY[0x1E0DEEE30], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  v35 = *(const char **)v53[0];
  *(_QWORD *)&v65 = a1;
  *((_QWORD *)&v65 + 1) = v62;
  v66 = a3;
  v67 = 0;
  if (!v35)
  {
LABEL_17:
    v37 = v63;
    swift_retain();
    v36 = &protocol witness table for RemoteXPCPeerConnection;
    goto LABEL_18;
  }
  v36 = *(_UNKNOWN ***)(v53[0] + 8);
  v37 = v35;
LABEL_18:
  v39 = v61;
  v64[0] = v37;
  v64[1] = v36;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v55(&v65, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
  return 1;
}

uint64_t sub_1CF7B9178(void *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(__int128 *, _QWORD *);
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _UNKNOWN **v36;
  const char *v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  xpc_object_t reply;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _xpc_connection_s *v51;
  _xpc_connection_s *v52;
  _QWORD v53[2];
  void (*v54)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD);
  void (*v55)(__int128 *, _QWORD *);
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  _QWORD v64[2];
  __int128 v65;
  unint64_t v66;
  char v67;

  v62 = a2;
  v63 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56E310);
  v7 = MEMORY[0x1E0C80A80](v6);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A80](v7);
  v12 = (char *)v53 - v11;
  v13 = MEMORY[0x1E0C80A80](v10);
  v15 = (char *)v53 - v14;
  MEMORY[0x1E0C80A80](v13);
  v17 = (char *)v53 - v16;
  v18 = sub_1CF7C861C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A80](v18);
  v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  v60 = v12;
  v61 = v21;
  sub_1CF7C88E0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1CF7C85D4();
  swift_bridgeObjectRelease();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v15, 1, v18) == 1)
  {
    sub_1CF778FFC((uint64_t)v15, &qword_1ED56E310);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_6:
    sub_1CF778FFC((uint64_t)v17, &qword_1ED56E310);
    return 0;
  }
  v24 = v15;
  v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v25(v17, v24, v18);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26((uint64_t)v17, 0, 1, v18);
  if (v22(v17, 1, v18) == 1)
    goto LABEL_6;
  v27 = v25;
  v28 = (uint64_t)v61;
  v56 = v27;
  v57 = v26;
  v27(v61, v17, v18);
  if (qword_1ED56DE00 != -1)
    swift_once();
  v29 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  sub_1CF78A61C(v28, (uint64_t *)&v65);
  objc_msgSend(v29, sel_unlock);
  v30 = v65;
  if (!(_QWORD)v65)
  {
    v38 = 0;
    v59 = 0;
    goto LABEL_20;
  }
  v32 = (void (*)(__int128 *, _QWORD *))*((_QWORD *)&v65 + 1);
  v31 = v66;
  v33 = swift_allocObject();
  v55 = v32;
  *(_QWORD *)(v33 + 16) = v32;
  *(_QWORD *)(v33 + 24) = v31;
  v59 = v33;
  v34 = *(_QWORD *)(v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v34)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)&v65 = a1;
    *((_QWORD *)&v65 + 1) = v62;
    v66 = a3;
    v67 = 0;
    goto LABEL_17;
  }
  v53[0] = v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  v53[1] = v31;
  v54 = *(void (**)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, _QWORD))(*(_QWORD *)v63 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v58 = v30;
  v54(&v65, sub_1CF78D288, v34, MEMORY[0x1E0DEAFA0]);
  swift_release();
  if ((v65 & 1) == 0)
  {
    LODWORD(v62) = sub_1CF7C8A60();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1CF7CB5D0;
    v65 = *(_OWORD *)v53[0];
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB3258);
    sub_1CF7C888C();
    v41 = sub_1CF7C882C();
    swift_bridgeObjectRelease();
    v55 = (void (*)(__int128 *, _QWORD *))sub_1CF79607C(0, &qword_1EFBB2EC0);
    *(_QWORD *)(v40 + 56) = v55;
    v42 = sub_1CF7B9C90();
    *(_QWORD *)(v40 + 64) = v42;
    *(_QWORD *)(v40 + 32) = v41;
    *(_QWORD *)&v65 = v63;
    *((_QWORD *)&v65 + 1) = &protocol witness table for SystemXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB3270);
    sub_1CF7C888C();
    v43 = sub_1CF7C882C();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v40 + 96) = v55;
    *(_QWORD *)(v40 + 104) = v42;
    *(_QWORD *)(v40 + 72) = v43;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v44 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();
    v45 = v58;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    v38 = sub_1CF7B9C8C;
    v30 = v45;
LABEL_20:
    reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_1CF7B9D1C(v30, (uint64_t)v38, v59, (void (*)(void))MEMORY[0x1E0DEEE30], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
      v48 = v61;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v48, v18);
      return 1;
    }
    v47 = reply;
    v58 = v30;
    *(_QWORD *)&v65 = reply;
    *((_QWORD *)&v65 + 1) = 0xD000000000000019;
    v63 = "v20@?0@\"OS_remote_device\"8B16";
    v66 = 0x80000001CF7CD790;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1CF7C88E0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1CF7C85D4();
      swift_bridgeObjectRelease();
      if (v22(v9, 1, v18) != 1)
      {
        v50 = (uint64_t)v60;
        v56(v60, v9, v18);
        v49 = 0;
        v48 = v61;
        goto LABEL_28;
      }
      sub_1CF778FFC((uint64_t)v9, &qword_1ED56E310);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v49 = 1;
    v50 = (uint64_t)v60;
    v48 = v61;
LABEL_28:
    v57(v50, v49, 1, v18);
    sub_1CF789AB4(v50);
    swift_unknownObjectRelease();
    v51 = xpc_dictionary_get_remote_connection(v47);
    if (v51)
    {
      v52 = v51;
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
        xpc_remote_connection_send_message();
      else
        xpc_connection_send_message(v52, v47);
      swift_unknownObjectRelease();
    }
    sub_1CF7B9D1C(v58, (uint64_t)v38, v59, (void (*)(void))MEMORY[0x1E0DEEE30], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  v35 = *(const char **)v53[0];
  *(_QWORD *)&v65 = a1;
  *((_QWORD *)&v65 + 1) = v62;
  v66 = a3;
  v67 = 0;
  if (!v35)
  {
LABEL_17:
    v37 = v63;
    swift_retain();
    v36 = &protocol witness table for SystemXPCPeerConnection;
    goto LABEL_18;
  }
  v36 = *(_UNKNOWN ***)(v53[0] + 8);
  v37 = v35;
LABEL_18:
  v39 = v61;
  v64[0] = v37;
  v64[1] = v36;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v55(&v65, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
  return 1;
}

uint64_t sub_1CF7B9918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _UNKNOWN **v11;
  void (*v12)(_QWORD *, _QWORD *);
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];
  char v17;
  _QWORD *v18;

  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (qword_1ED56DE00 != -1)
    swift_once();
  v6 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  sub_1CF78A774(a3, (uint64_t)&protocol witness table for RemoteXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  v7 = v18;
  v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v7 + 6;
    do
    {
      v13 = *(v9 - 2);
      v12 = (void (*)(_QWORD *, _QWORD *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = 0;
      v17 = 1;
      if (*(_QWORD *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        v10 = *(_QWORD *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }
      else
      {
        swift_retain();
        v10 = a3;
        v11 = &protocol witness table for RemoteXPCPeerConnection;
      }
      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7B9AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _UNKNOWN **v11;
  void (*v12)(_QWORD *, _QWORD *);
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];
  char v17;
  _QWORD *v18;

  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (qword_1ED56DE00 != -1)
    swift_once();
  v6 = (void *)qword_1ED56DDF0;
  objc_msgSend((id)qword_1ED56DDF0, sel_lock);
  sub_1CF78A774(a3, (uint64_t)&protocol witness table for SystemXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  v7 = v18;
  v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v7 + 6;
    do
    {
      v13 = *(v9 - 2);
      v12 = (void (*)(_QWORD *, _QWORD *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = 0;
      v17 = 1;
      if (*(_QWORD *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        v10 = *(_QWORD *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }
      else
      {
        swift_retain();
        v10 = a3;
        v11 = &protocol witness table for SystemXPCPeerConnection;
      }
      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7B9C68()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1CF7B9C90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB3268;
  if (!qword_1EFBB3268)
  {
    v1 = sub_1CF79607C(255, &qword_1EFBB2EC0);
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0DEFD08], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB3268);
  }
  return result;
}

uint64_t sub_1CF7B9CE8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

char *sub_1CF7B9D14(char *a1)
{
  uint64_t v1;

  return sub_1CF7AE6C4(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_1CF7B9D1C(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t))
{
  if (result)
  {
    a4();
    return a5(a3);
  }
  return result;
}

uint64_t sub_1CF7B9D58()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7B9D7C(char *a1, void *a2)
{
  uint64_t v2;

  return sub_1CF77C31C(a1, a2, *(xpc_object_t *)(v2 + 16));
}

uint64_t sub_1CF7B9D84()
{
  return swift_deallocObject();
}

uint64_t sub_1CF7B9D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD *);
  _QWORD v6[2];

  v4 = *(uint64_t (**)(uint64_t, _QWORD *))(v3 + 16);
  v6[0] = a2;
  v6[1] = a3;
  return v4(a1, v6);
}

uint64_t sub_1CF7B9E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char v44;
  char *v46;
  void (*v47)(void);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  int v63;

  v4 = sub_1CF7C8640();
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  v5 = MEMORY[0x1E0C80A80](v4);
  v56 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v5);
  v60 = (char *)&v54 - v7;
  v8 = sub_1CF7C8400();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A80](v8);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x1E0C80A80](v10);
  v55 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A80](v14);
  v57 = (char *)&v54 - v17;
  v18 = MEMORY[0x1E0C80A80](v16);
  v20 = (char *)&v54 - v19;
  v21 = MEMORY[0x1E0C80A80](v18);
  v23 = (char *)&v54 - v22;
  MEMORY[0x1E0C80A80](v21);
  v25 = (char *)&v54 - v24;
  v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v26((char *)&v54 - v24, (char *)v62, a1);
  sub_1CF7C83DC();
  v62 = v26;
  v26(v23, v25, a1);
  v27 = sub_1CF7C8FA0();
  v61 = a2;
  if (v27)
  {
    v28 = (void *)v27;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, a1);
  }
  else
  {
    v28 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29, v23, a1);
  }
  sub_1CF78D2BC(&qword_1EFBB32D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE20], MEMORY[0x1E0CADE18]);
  v30 = sub_1CF7C84D8();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((v30 & 1) != 0)
    goto LABEL_13;
  v63 = sub_1CF7C8418();
  v31 = v62;
  v62(v20, v25, a1);
  v32 = sub_1CF7C8FA0();
  if (v32)
  {
    v33 = (void *)v32;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a1);
  }
  else
  {
    v33 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v34, v20, a1);
  }
  sub_1CF7BC0F0();
  v35 = sub_1CF7C84D8();

  if ((v35 & 1) != 0)
    goto LABEL_13;
  sub_1CF7C8658();
  v36 = v57;
  v31(v57, v25, a1);
  v37 = sub_1CF7C8FA0();
  if (v37)
  {
    v38 = (void *)v37;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v36, a1);
  }
  else
  {
    v38 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v39, v36, a1);
  }
  sub_1CF78D2BC(&qword_1EFBB32D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1578], MEMORY[0x1E0CB1570]);
  v40 = v59;
  v41 = v60;
  v42 = sub_1CF7C84D8();

  v43 = *(void (**)(char *, uint64_t))(v58 + 8);
  v43(v41, v40);
  if ((v42 & 1) != 0)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v25, a1);
    v44 = 1;
  }
  else
  {
    v46 = v56;
    sub_1CF7C8634();
    v47 = *(void (**)(void))(v13 + 32);
    v48 = v13;
    v49 = v55;
    v47();
    v50 = sub_1CF7C8FA0();
    if (v50)
    {
      v51 = (void *)v50;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, a1);
    }
    else
    {
      v51 = (void *)swift_allocError();
      ((void (*)(uint64_t, char *, uint64_t))v47)(v52, v49, a1);
    }
    v53 = v59;
    v44 = sub_1CF7C84D8();

    v43(v46, v53);
  }
  return v44 & 1;
}

uint64_t sub_1CF7BA2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t DynamicType;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  v5 = sub_1CF7C8640();
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x1E0C80A80](v5);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CF7C8400();
  v58 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A80](v7);
  v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A80](v8);
  v12 = (char *)&v51 - v11;
  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x1E0C80A80](v10);
  v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A80](v14);
  v56 = (char *)&v51 - v17;
  v18 = MEMORY[0x1E0C80A80](v16);
  v20 = (char *)&v51 - v19;
  v21 = MEMORY[0x1E0C80A80](v18);
  v23 = (char *)&v51 - v22;
  MEMORY[0x1E0C80A80](v21);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24((char *)&v51 - v25, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB32C0);
  if (swift_dynamicCast())
  {
    sub_1CF796180(&v59, (uint64_t)v62);
    __swift_project_boxed_opaque_existential_1(v62, v63);
    v26 = sub_1CF7C8448();
    __swift_project_boxed_opaque_existential_1(v62, v63);
    DynamicType = swift_getDynamicType();
    v28 = v64;
    *((_QWORD *)&v60 + 1) = DynamicType;
    v61 = v64;
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v59);
    static Error<>.unknown.getter(DynamicType, v28);
    v29 = v26 == sub_1CF7C8448();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v59);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    sub_1CF778FFC((uint64_t)&v59, &qword_1EFBB32C8);
    v24(v23, v2, a1);
    sub_1CF7C83E8();
    v24(v20, (uint64_t)v23, a1);
    v30 = sub_1CF7C8FA0();
    v51 = a2;
    if (v30)
    {
      v31 = (void *)v30;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a1);
    }
    else
    {
      v31 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v32, v20, a1);
    }
    v33 = v58;
    sub_1CF78D2BC(&qword_1EFBB32D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE20], MEMORY[0x1E0CADE18]);
    v34 = sub_1CF7C84D8();

    v35 = *(void (**)(char *, uint64_t))(v33 + 8);
    v35(v12, v7);
    if ((v34 & 1) != 0)
      goto LABEL_11;
    v36 = v57;
    sub_1CF7C83F4();
    v37 = v56;
    v24(v56, (uint64_t)v23, a1);
    v38 = sub_1CF7C8FA0();
    if (v38)
    {
      v39 = (void *)v38;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, a1);
    }
    else
    {
      v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v40, v37, a1);
    }
    v41 = sub_1CF7C84D8();

    v35(v36, v7);
    if ((v41 & 1) != 0)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v23, a1);
      v29 = 1;
    }
    else
    {
      v42 = v55;
      sub_1CF7C864C();
      v43 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v44 = v54;
      v43(v54, v23, a1);
      v45 = sub_1CF7C8FA0();
      if (v45)
      {
        v46 = (void *)v45;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v44, a1);
      }
      else
      {
        v46 = (void *)swift_allocError();
        v43(v47, v44, a1);
      }
      v49 = v52;
      v48 = v53;
      sub_1CF78D2BC(&qword_1EFBB32D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1578], MEMORY[0x1E0CB1570]);
      v29 = sub_1CF7C84D8();

      (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v48);
    }
  }
  return v29 & 1;
}

uint64_t Error.normalized<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A80](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A80](v5);
  v10 = (char *)&v21 - v9;
  v15 = sub_1CF7BA8DC(v8, v11, v12, v13, v14);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v10, v2, a2);
  if (v15)
    goto LABEL_5;
  v16(v7, (uint64_t)v10, a2);
  v17 = sub_1CF7C8FA0();
  if (!v17)
  {
    v15 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19, v7, a2);
LABEL_5:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a2);
    return v15;
  }
  v15 = v17;
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v7, a2);
  v18(v10, a2);
  return v15;
}

uint64_t sub_1CF7BA8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  char *v53;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  char *v65;
  uint64_t v66;
  void *v67;
  uint64_t inited;
  uint64_t v69;
  uint64_t *boxed_opaque_existential_0Tm;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99[2];
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;

  v6 = v5;
  v97 = a5;
  v95 = a1;
  v90 = sub_1CF7C8424();
  v89 = *(_QWORD *)(v90 - 8);
  v10 = MEMORY[0x1E0C80A80](v90);
  v88 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A80](v10);
  v94 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A80](v13);
  v92 = (char *)&v85 - v16;
  v17 = MEMORY[0x1E0C80A80](v15);
  v19 = (char *)&v85 - v18;
  v20 = MEMORY[0x1E0C80A80](v17);
  v86 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A80](v20);
  v87 = (char *)&v85 - v23;
  v24 = MEMORY[0x1E0C80A80](v22);
  v91 = (char *)&v85 - v25;
  v26 = MEMORY[0x1E0C80A80](v24);
  v93 = (char *)&v85 - v27;
  v28 = MEMORY[0x1E0C80A80](v26);
  v96 = (char *)&v85 - v29;
  v30 = MEMORY[0x1E0C80A80](v28);
  v32 = (char *)&v85 - v31;
  v33 = MEMORY[0x1E0C80A80](v30);
  v35 = (char *)&v85 - v34;
  MEMORY[0x1E0C80A80](v33);
  v98 = v36;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v37((char *)&v85 - v38, v6, a2);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, a3);
    v37(v35, v6, a2);
    v39 = sub_1CF7C8FA0();
    if (v39)
    {
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v98 + 8))(v35, a2);
      return v40;
    }
    v40 = swift_allocError();
    v51 = v50;
    v52 = *(void (**)(uint64_t, char *, uint64_t))(v98 + 32);
    v53 = v35;
LABEL_11:
    v52(v51, v53, a2);
    return v40;
  }
  v85 = v12;
  v41 = a3;
  v37(v32, v6, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB32A8);
  if (swift_dynamicCast())
  {
    sub_1CF796180(v99, (uint64_t)v101);
    v42 = v102;
    v43 = v103;
    __swift_project_boxed_opaque_existential_1(v101, v102);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 16))(v95, a3, v97, v42, v43);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
  }
  else
  {
    v100 = 0;
    memset(v99, 0, sizeof(v99));
    sub_1CF778FFC((uint64_t)v99, &qword_1EFBB32B0);
    v44 = sub_1CF7B9E04(a2, a4);
    v45 = v96;
    v37(v96, v6, a2);
    if ((v44 & 1) != 0)
    {
      LODWORD(v101[0]) = sub_1CF7C8418();
      v46 = v93;
      v37(v93, (uint64_t)v45, a2);
      v47 = sub_1CF7C8FA0();
      if (v47)
      {
        v48 = (void *)v47;
        v49 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v46, a2);
      }
      else
      {
        v48 = (void *)swift_allocError();
        v49 = v98;
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v56, v46, a2);
      }
      sub_1CF7BC0F0();
      v57 = sub_1CF7C84D8();

      v55 = *(void (**)(char *, uint64_t))(v49 + 8);
      v55(v96, a2);
      if ((v57 & 1) == 0)
      {
        LODWORD(v101[0]) = 89;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
        *(_QWORD *)(inited + 32) = sub_1CF7C8850();
        *(_QWORD *)(inited + 40) = v69;
        *(_QWORD *)(inited + 72) = a2;
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 48));
        v37((char *)boxed_opaque_existential_0Tm, v6, a2);
        sub_1CF779500(inited);
        sub_1CF78D2BC((unint64_t *)&qword_1EFBB32E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE90], MEMORY[0x1E0CADE88]);
        v71 = v88;
        v72 = v90;
        sub_1CF7C84F0();
        v40 = sub_1CF7C840C();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v72);
        return v40;
      }
    }
    else
    {
      v49 = v98;
      v55 = *(void (**)(char *, uint64_t))(v98 + 8);
      v55(v45, a2);
    }
    if ((sub_1CF7BA2AC(a2, a4) & 1) != 0)
    {
      v58 = v97;
      static Error<>.unknown.getter(v41, v97);
      v59 = v91;
      v37(v91, v6, a2);
      v60 = sub_1CF7C8FA0();
      if (v60)
      {
        v61 = (void *)v60;
        v55(v59, a2);
      }
      else
      {
        v61 = (void *)swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v73, v59, a2);
      }
      v74 = v92;
      v75 = v94;
      _Error.wrapping(_:)((uint64_t)v61, v41, v58);

      v76 = v85;
      v77 = *(void (**)(char *, uint64_t))(v85 + 8);
      v77(v75, v41);
      v78 = sub_1CF7C8FA0();
      if (v78)
      {
        v40 = v78;
        v77(v74, v41);
      }
      else
      {
        v40 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v81, v74, v41);
      }
    }
    else
    {
      sub_1CF7B6308();
      v62 = sub_1CF7C8E14();
      v64 = static NSError.normalizationProvider<A>(forDomain:normalizingAs:)(v62, v63, v95, v41, v97);
      swift_bridgeObjectRelease();
      if (!v64)
      {
        v79 = v86;
        v37(v86, v6, a2);
        v80 = sub_1CF7C8FA0();
        if (v80)
        {
          v40 = v80;
          v55(v79, a2);
          return v40;
        }
        v40 = swift_allocError();
        v51 = v84;
        v52 = *(void (**)(uint64_t, char *, uint64_t))(v98 + 32);
        v53 = v79;
        goto LABEL_11;
      }
      v65 = v87;
      v37(v87, v6, a2);
      v66 = sub_1CF7C8FA0();
      if (v66)
      {
        v67 = (void *)v66;
        v55(v65, a2);
      }
      else
      {
        v67 = (void *)swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v82, v65, a2);
      }
      v83 = (void *)sub_1CF7C84FC();

      v40 = v64((uint64_t)v83);
      sub_1CF7A4BA8((uint64_t)v64);

    }
  }
  return v40;
}

void *Error.normalized<A>(as:fallingBackTo:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v7 = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A80](a1);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CF7BA8DC(v8, v11, v12, v13, v14);
  if (v15)
    return (void *)v15;
  v16 = (void *)a2();
  v36 = v16;
  v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3288);
  if (swift_dynamicCast())
  {
    sub_1CF796180(&v33, (uint64_t)v37);
    v18 = v38;
    v19 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a4);
    v20 = sub_1CF7C8FA0();
    if (v20)
    {
      v21 = (void *)v20;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a4);
    }
    else
    {
      v21 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22, v10, a4);
    }
    *((_QWORD *)&v34 + 1) = v18;
    v35 = v19;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v33);
    CustomNSError.wrapping(_:)(v21, v18, (uint64_t)boxed_opaque_existential_0Tm);

    v24 = *((_QWORD *)&v34 + 1);
    v25 = __swift_project_boxed_opaque_existential_1(&v33, *((uint64_t *)&v34 + 1));
    v26 = *(_QWORD *)(v24 - 8);
    MEMORY[0x1E0C80A80](v25);
    v28 = (char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v26 + 16))(v28);
    v29 = sub_1CF7C8FA0();
    if (v29)
    {
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v24);
    }
    else
    {
      v30 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v31, v28, v24);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v33);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    return (void *)v30;
  }
  else
  {
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    sub_1CF778FFC((uint64_t)&v33, &qword_1EFBB3290);
  }
  return v16;
}

uint64_t (*static NSError.normalizationProvider<A>(forDomain:normalizingAs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  void *v9;
  __int128 v11;
  __int128 v12;

  if (qword_1ED56DEA0 != -1)
    swift_once();
  v9 = (void *)qword_1ED56DE98;
  objc_msgSend((id)qword_1ED56DE98, sel_lock);
  sub_1CF7BBF28(a3, a1, a2, a5, &v12);
  objc_msgSend(v9, sel_unlock);
  if (!(_QWORD)v12)
    return 0;
  v11 = v12;
  *(_OWORD *)(swift_allocObject() + 16) = v11;
  return sub_1CF7BC060;
}

void withErrorsNormalized<A, B>(as:_:)(uint64_t a1, void (*a2)(void))
{
  void *v2;
  uint64_t v4;

  a2();
  if (v2)
  {
    swift_getErrorValue();
    Error.normalized<A>(as:)(a1, v4);
    swift_willThrow();

  }
}

void withErrorsNormalized<A, B>(as:fallingBackTo:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  void *v4;
  uint64_t ErrorValue;
  uint64_t v9;
  _QWORD v10[4];

  a4();
  if (v4)
  {
    ErrorValue = swift_getErrorValue();
    MEMORY[0x1E0C80A80](ErrorValue);
    v10[2] = a2;
    v10[3] = a3;
    Error.normalized<A>(as:fallingBackTo:)(a1, sub_1CF78E230, (uint64_t)v10, v9);
    swift_willThrow();

  }
}

uint64_t withErrorsNormalized<A, B>(as:_:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[7] = a5;
  v7[8] = a7;
  v7[6] = a2;
  v11 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc();
  v7[9] = v9;
  *v9 = v7;
  v9[1] = sub_1CF7BB698;
  return v11(a1);
}

uint64_t sub_1CF7BB698()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CF7BB704()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48);
  swift_getErrorValue();
  Error.normalized<A>(as:)(v2, *(_QWORD *)(v0 + 24));
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withErrorsNormalized<A, B>(as:fallingBackTo:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[9] = a7;
  v7[10] = v12;
  v7[7] = a3;
  v7[8] = a4;
  v7[6] = a2;
  v11 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  v9 = (_QWORD *)swift_task_alloc();
  v7[11] = v9;
  *v9 = v7;
  v9[1] = sub_1CF7BB7F8;
  return v11(a1);
}

uint64_t sub_1CF7BB7F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CF7BB864()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = *(void **)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 56);
  swift_getErrorValue();
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = v6;
  Error.normalized<A>(as:fallingBackTo:)(v2, sub_1CF78E674, v4, v3);
  swift_task_dealloc();
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCError.normalized<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A80](a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (ValueMetadata *)MEMORY[0x1E0C80A80](v7);
  v12 = (char *)&v23 - v11;
  v14 = *v3;
  v13 = v3[1];
  if (v10 == &type metadata for XPCError)
  {
    sub_1CF78D000();
    v19 = swift_allocError();
    *v20 = v14;
    v20[1] = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    static Error<>.xpcError.getter(a2, a3);
    sub_1CF78D000();
    v15 = (void *)swift_allocError();
    *v16 = v14;
    v16[1] = v13;
    swift_bridgeObjectRetain();
    _Error.wrapping(_:)((uint64_t)v15, a2, a3);

    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v9, a2);
    v18 = sub_1CF7C8FA0();
    if (v18)
    {
      v19 = v18;
      v17(v12, a2);
    }
    else
    {
      v19 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21, v12, a2);
    }
  }
  return v19;
}

uint64_t sub_1CF7BBAD0()
{
  sub_1CF7C9234();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE10);
  sub_1CF7C888C();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7BBB70()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE10);
  sub_1CF7C888C();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7BBC00()
{
  sub_1CF7C9234();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE10);
  sub_1CF7C888C();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7BBC9C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[2] == a2[2] && a1[3] == a2[3])
    return 1;
  else
    return sub_1CF7C8FC4();
}

void sub_1CF7BBCE4()
{
  off_1ED56DE80 = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

id sub_1CF7BBCF8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  qword_1ED56DE98 = (uint64_t)result;
  return result;
}

id static NSError.setNormalizationProvider<A>(forDomain:normalizingAs:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v16;

  v8 = v7;
  if (qword_1ED56DEA0 != -1)
    swift_once();
  v16 = (void *)qword_1ED56DE98;
  objc_msgSend((id)qword_1ED56DE98, sel_lock);
  sub_1CF7BBDFC(a3, a1, a2, v8, a4, a5, a6, a7);
  return objc_msgSend(v16, sel_unlock);
}

uint64_t sub_1CF7BBDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  void *v18;

  v14 = qword_1ED56DE88;
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a6;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = off_1ED56DE80;
  off_1ED56DE80 = (_UNKNOWN *)0x8000000000000000;
  sub_1CF7C0AD4((uint64_t)sub_1CF7BC0C4, v15, a1, a8, a2, a3, isUniquelyReferenced_nonNull_native);
  off_1ED56DE80 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1CF7BBF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = qword_1ED56DE88;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  swift_beginAccess();
  v11 = off_1ED56DE80;
  if (*((_QWORD *)off_1ED56DE80 + 2))
  {
    swift_bridgeObjectRetain();
    v12 = sub_1CF7B4C5C(a1, a4, a2, a3);
    if ((v13 & 1) != 0)
    {
      v14 = (uint64_t *)(v11[7] + 16 * v12);
      v16 = *v14;
      v15 = v14[1];
      swift_retain();
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  *a5 = v16;
  a5[1] = v15;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7BC03C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7BC060(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

unint64_t sub_1CF7BC098(uint64_t a1)
{
  unint64_t result;

  result = sub_1CF78D000();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _NormalizableError.normalized<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_1CF7BC0C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1CF7BC0F0()
{
  unint64_t result;

  result = qword_1EFBB32B8;
  if (!qword_1EFBB32B8)
  {
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB1758], MEMORY[0x1E0DF2028]);
    atomic_store(result, (unint64_t *)&qword_1EFBB32B8);
  }
  return result;
}

uint64_t _s25_NormalizationProviderKeyVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s25_NormalizationProviderKeyVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwca(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s25_NormalizationProviderKeyVMa()
{
  return &_s25_NormalizationProviderKeyVN;
}

unint64_t sub_1CF7BC204()
{
  unint64_t result;

  result = qword_1ED56DE90;
  if (!qword_1ED56DE90)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC77C, &_s25_NormalizationProviderKeyVN);
    atomic_store(result, (unint64_t *)&qword_1ED56DE90);
  }
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(forFileAt:)(char *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  XPCFileTransfer.init(forFileAt:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(forFileAt:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v20[2];

  v3 = v1;
  v5 = sub_1CF7C855C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A80](v5);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v7);
  v11 = (char *)v20 - v10;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = -1;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  v12 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v13 = sub_1CF7C852C();
  v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  result = v14(v11, v5);
  if ((v13 & 1) != 0)
  {
    v12(v9, a1, v5);
    v16 = sub_1CF791918(v9);
    if (v2)
    {
      swift_release();
      v14(a1, v5);
    }
    else
    {
      v17 = v16;
      v14(a1, v5);
      v18 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v17;
      v19 = *(_BYTE *)(v3 + 24);
      *(_BYTE *)(v3 + 24) = 0;
      sub_1CF7BDDD0(v18, v19);
    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(fileDescriptor:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = 0;
  sub_1CF7BDDD0(0, 0xFFu);
  return v2;
}

uint64_t XPCFileTransfer.init(fileDescriptor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 v4;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = -1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  v4 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 0;
  sub_1CF7BDDD0(v3, v4);
  return v1;
}

uint64_t sub_1CF7BC4DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, sel_lock);
  sub_1CF7BC540(v0, (uint64_t)&v3);
  objc_msgSend(v1, sel_unlock);
  return v3;
}

uint64_t sub_1CF7BC540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int st_mode;
  int v9;
  char v10;
  stat v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C08];
  if (*(_BYTE *)(a1 + 40) != 1)
  {
    result = *(_QWORD *)(a1 + 32);
    goto LABEL_13;
  }
  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
    goto LABEL_10;
  v5 = *(_QWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    result = xpc_file_transfer_get_size();
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(v5 + 64);
  memset(&v11, 0, 28);
  memset(&v11.st_atimespec, 0, 112);
  sub_1CF7BDDF4(v5, 0);
  if (fstat(v6, &v11))
  {
    sub_1CF7BDDD0(v5, v4);
    result = -1;
    goto LABEL_11;
  }
  st_mode = v11.st_mode;
  v9 = sub_1CF7C8700() & st_mode;
  LOWORD(st_mode) = sub_1CF7C870C();
  sub_1CF7BDDD0(v5, v4);
  if (v9 != (unsigned __int16)st_mode)
LABEL_10:
    result = -1;
  else
    result = v11.st_size & ~(v11.st_size >> 63);
LABEL_11:
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    *(_QWORD *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 40) = 0;
  }
LABEL_13:
  if (result == -1)
  {
    result = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_1CF7BC6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];
  int v12;
  uint64_t v13;

  v3 = v0;
  v13 = *MEMORY[0x1E0C80C08];
  v4 = *(void **)(v0 + 48);
  objc_msgSend(v4, sel_lock);
  v5 = *(unsigned __int8 *)(v3 + 24);
  if (v5 == 255)
  {
    result = sub_1CF7C8CA0();
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 24) = -1;
    sub_1CF7BDDF4(v6, v5 & 1);
    sub_1CF7BDDD0(v6, v5);
    objc_msgSend(v4, sel_unlock);
    if ((v5 & 1) == 0)
      return v6;
    v7 = sub_1CF791720();
    if (v1)
    {
      sub_1CF7BDDD0(v6, v5);
    }
    else
    {
      v2 = v7;
      v9 = sub_1CF78FD08();
      v12 = 1;
      MEMORY[0x1D17D432C](*(unsigned int *)(v2 + 64), 73, &v12);
      MEMORY[0x1D17D432C](v9, 73, &v12);
      aBlock[4] = sub_1CF7BE45C;
      aBlock[5] = v3;
      aBlock[0] = MEMORY[0x1E0C809A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CF7B2CA4;
      aBlock[3] = &block_descriptor_13;
      v10 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_1CF7BDDD0(v6, v5);
      swift_release();
      _Block_release(v10);
    }
    return v2;
  }
  return result;
}

void sub_1CF7BC8D0(int a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v2 = sub_1CF7C8424();
  MEMORY[0x1E0C80A80](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1CF7C8A60();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v5 = swift_allocObject();
    v6 = MEMORY[0x1E0DEDBC8];
    *(_OWORD *)(v5 + 16) = xmmword_1CF7CB5D0;
    v7 = MEMORY[0x1E0DEDC38];
    *(_QWORD *)(v5 + 56) = v6;
    *(_QWORD *)(v5 + 64) = v7;
    *(_DWORD *)(v5 + 32) = a1;
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v4);
    v8 = sub_1CF7C888C();
    v10 = v9;
    *(_QWORD *)(v5 + 96) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v5 + 104) = sub_1CF791E0C();
    *(_QWORD *)(v5 + 72) = v8;
    *(_QWORD *)(v5 + 80) = v10;
    sub_1CF7B13D8();
    v11 = (void *)sub_1CF7C8B08();
    sub_1CF7C867C();
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1CF7BCA14()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  _QWORD aBlock[6];

  v2 = *(void **)(v0 + 48);
  objc_msgSend(v2, sel_lock);
  v3 = *(unsigned __int8 *)(v0 + 24);
  if (v3 != 255)
  {
    v4 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = 0;
    *(_BYTE *)(v0 + 24) = -1;
    sub_1CF7BDDF4(v4, v3 & 1);
    sub_1CF7BDDD0(v4, v3);
    objc_msgSend(v2, sel_unlock);
    if ((v3 & 1) == 0)
    {
      sub_1CF78FD08();
      if (!v1)
      {
        aBlock[4] = nullsub_1;
        aBlock[5] = 0;
        aBlock[0] = MEMORY[0x1E0C809A8];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1CF7B2CA4;
        aBlock[3] = &block_descriptor_10;
        v5 = _Block_copy(aBlock);
        v6 = xpc_file_transfer_create_with_fd();
        _Block_release(v5);
        if (v6)
        {
          sub_1CF7BDDD0(v4, v3);
          return v6;
        }
        v8 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
        sub_1CF78D000();
        swift_allocError();
        static XPCError.unknown(_:from:userInfo:)(0xD000000000000023, 0x80000001CF7CECE0, 0, v8, v9);
        swift_bridgeObjectRelease();
        swift_willThrow();
      }
      sub_1CF7BDDD0(v4, v3);
    }
    return v4;
  }
  result = sub_1CF7C8CA0();
  __break(1u);
  return result;
}

uint64_t sub_1CF7BCC04(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, double), uint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD v23[2];

  v12 = sub_1CF7C855C();
  MEMORY[0x1E0C80A80](v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)a2;
  v15 = *(void **)(a2 + 8);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v14, a1);
  v23[0] = v16;
  v23[1] = v15;
  v18 = v15;
  v19 = v16;
  sub_1CF791B7C(v14, (uint64_t)v23);
  sub_1CF7BCD10(v20, a3, a4, a5, a6);
  return swift_release();
}

void sub_1CF7BCD10(uint64_t a1, uint64_t (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, BOOL *, __n128);
  void *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void *);
  _QWORD aBlock[7];

  v6 = v5;
  v12 = sub_1CF7C8424();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A80](v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v16 = swift_retain();
    if ((a2(v16, 0.0) & 1) == 0)
    {
      LODWORD(aBlock[0]) = 89;
      sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
      sub_1CF78D2BC((unint64_t *)&qword_1EFBB32E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE90], MEMORY[0x1E0CADE88]);
      sub_1CF7C84F0();
      v23 = (void *)sub_1CF7C840C();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      a4(v23);
      sub_1CF7A4BA8((uint64_t)a2);

      return;
    }
    sub_1CF7A4BA8((uint64_t)a2);
  }
  v29 = a4;
  v17 = *(void **)(v5 + 48);
  objc_msgSend(*(id *)(v6 + 48), sel_lock);
  v18 = *(unsigned __int8 *)(v6 + 24);
  if (v18 == 255)
  {
    sub_1CF7C8CA0();
    __break(1u);
  }
  else
  {
    v19 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 24) = -1;
    sub_1CF7BDDF4(v19, v18 & 1);
    sub_1CF7BDDD0(v19, v18);
    objc_msgSend(v17, sel_unlock);
    if ((v18 & 1) != 0)
    {
      sub_1CF78FD08();
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = a2;
      v24[3] = a3;
      v24[4] = v29;
      v24[5] = a5;
      v24[6] = v6;
      aBlock[4] = sub_1CF7BDE04;
      aBlock[5] = v24;
      aBlock[0] = MEMORY[0x1E0C809A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CF7B2CA4;
      aBlock[3] = &block_descriptor_7;
      v25 = _Block_copy(aBlock);
      sub_1CF7A7754((uint64_t)a2);
      swift_retain();
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_1CF7BDDD0(v19, v18);
      _Block_release(v25);
    }
    else
    {
      v28 = a1;
      v20 = a5;
      if (a2)
      {
        v21 = (_QWORD *)swift_allocObject();
        v21[2] = a2;
        v21[3] = a3;
        v21[4] = v6;
        swift_retain();
        v22 = sub_1CF7BDEE4;
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      type metadata accessor for XPCFileDescriptor();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = a2;
      v26[3] = a3;
      v26[4] = v29;
      v26[5] = v20;
      v26[6] = v6;
      sub_1CF7A7754((uint64_t)a2);
      sub_1CF7A7754((uint64_t)a2);
      swift_retain();
      swift_retain();
      static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)(v19, v28, 0, (uint64_t)v22, (uint64_t)v21, (uint64_t)sub_1CF7BDE6C, (uint64_t)v26);
      swift_release();
      sub_1CF7A4BA8((uint64_t)v22);
      sub_1CF7BDDD0(v19, v18);
    }
  }
}

uint64_t sub_1CF7BD124(uint64_t result, BOOL *a2, uint64_t (*a3)(uint64_t, __n128), __n128 a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  void *v10;
  unint64_t v11;
  char v12;

  if (!result)
  {
    a4.n128_u64[0] = 0;
    goto LABEL_6;
  }
  v9 = result;
  v10 = *(void **)(a6 + 48);
  objc_msgSend(v10, sel_lock);
  sub_1CF7BC540(a6, (uint64_t)&v11);
  result = (uint64_t)objc_msgSend(v10, sel_unlock);
  if ((v12 & 1) == 0 && v11 > v9)
  {
    a4.n128_f64[0] = (double)v9 / (double)v11;
LABEL_6:
    result = a3(result, a4);
    *a2 = (result & 1) == 0;
  }
  return result;
}

void sub_1CF7BD1D8(int a1, void (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = sub_1CF7C8424();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A80](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v10);
    v11 = (void *)sub_1CF7C840C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a4(v11);

  }
  else
  {
    if (a2)
    {
      v12 = swift_retain();
      a2(v12, 1.0);
      sub_1CF7A4BA8((uint64_t)a2);
    }
    a4(0);
  }
}

unint64_t sub_1CF7BD2D4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x54656C6946637078;
  if (*v0 != 1)
    v1 = 0x6465746365707865;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1CF7BD34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF7BDC38(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF7BD370(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1CF7BD37C()
{
  sub_1CF7BDF80();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF7BD3A4()
{
  sub_1CF7BDF80();
  return sub_1CF7C92C4();
}

id sub_1CF7BD3CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[5];

  v3 = v2;
  v4 = (uint64_t)v1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB32E8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A80](v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF78D06C(a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB32F0);
  type metadata accessor for _XPCObjectEncoder();
  if (!swift_dynamicCast())
  {
    v13 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003BLL, 0x80000001CF7CEBD0, 0, v13, v14);
    swift_bridgeObjectRelease();
    return (id)swift_willThrow();
  }
  v10 = v18;
  if (!*(_QWORD *)(v18 + 24))
  {
    v16 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    sub_1CF78D000();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000060, 0x80000001CF7CEC10, 0, v16, v17);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return (id)swift_release();
  }
  swift_retain();
  *(_QWORD *)(v10 + 16) = xpc_dictionary_create(0, 0, 0);
  swift_unknownObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 32);
    v19[0] = v10;
    v19[1] = v11;
    v19[2] = v12;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3300);
    sub_1CF7BDEF0();
    sub_1CF7C8E08();
    v1 = (_QWORD *)v1[6];
    objc_msgSend(*(id *)(v4 + 48), sel_lock);
    sub_1CF7BC540(v4, (uint64_t)v19);
    if (!v3)
    {
      objc_msgSend(v1, sel_unlock);
      LOBYTE(v19[0]) = 2;
      sub_1CF7C8D9C();
      type metadata accessor for RemoteXPCConnection();
      if (swift_dynamicCastClass())
      {
        v19[0] = sub_1CF7BCA14();
        LOBYTE(v18) = 1;
        sub_1CF7BDF3C();
        swift_unknownObjectRetain();
        sub_1CF7C8DD8();
        swift_release();
        swift_unknownObjectRelease_n();
        swift_release();
        return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      v19[0] = sub_1CF7BC6B4();
      LOBYTE(v18) = 0;
      type metadata accessor for XPCFileDescriptor();
      sub_1CF78D2BC(&qword_1EFBB3310, (uint64_t (*)(uint64_t))type metadata accessor for XPCFileDescriptor, (uint64_t)&protocol conformance descriptor for XPCFileDescriptor);
      sub_1CF7C8DD8();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      swift_release();
      return (id)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  result = objc_msgSend(v1, sel_unlock);
  __break(1u);
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  XPCFileTransfer.init(from:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v10;
  uint64_t v11;
  const _xpc_type_s *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  _QWORD *v17;
  const _xpc_type_s *v18;
  _QWORD v19[5];
  uint64_t v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3320);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = -1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF7BDF80();
  sub_1CF7C9288();
  if (v2)
  {
    swift_release();
    goto LABEL_4;
  }
  LOBYTE(v19[0]) = 2;
  *(_QWORD *)(v1 + 32) = sub_1CF7C8D18();
  *(_BYTE *)(v1 + 40) = v10 & 1;
  LOBYTE(v20) = 1;
  sub_1CF791DC8();
  sub_1CF7C8D0C();
  v11 = v19[0];
  if (!v19[0])
  {
    type metadata accessor for XPCFileDescriptor();
    LOBYTE(v20) = 0;
    sub_1CF78D2BC(&qword_1EFBB3338, (uint64_t (*)(uint64_t))type metadata accessor for XPCFileDescriptor, (uint64_t)&protocol conformance descriptor for XPCFileDescriptor);
    sub_1CF7C8D54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v19[0];
    v15 = *(_BYTE *)(v3 + 24);
    *(_BYTE *)(v3 + 24) = 0;
LABEL_11:
    sub_1CF7BDDD0(v14, v15);
    goto LABEL_4;
  }
  v12 = (const _xpc_type_s *)MEMORY[0x1D17D5ACC](v19[0]);
  if (v12 == (const _xpc_type_s *)XPCTypeFileTransfer)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v11;
    v15 = *(_BYTE *)(v3 + 24);
    *(_BYTE *)(v3 + 24) = 1;
    goto LABEL_11;
  }
  v18 = v12;
  swift_release();
  sub_1CF78D06C((uint64_t)a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3340);
  type metadata accessor for _XPCObjectDecoder();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = *(_QWORD *)(v20 + 24);
    swift_retain();
    swift_release();
  }
  else
  {
    v13 = 0;
  }
  v16 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
  sub_1CF78D000();
  swift_allocError();
  static XPCError.invalidType(_:expecting:from:userInfo:)(v18, 0, v13, v16, v17);
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v3;
}

uint64_t XPCFileTransfer.deinit()
{
  uint64_t v0;

  sub_1CF7BDDD0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  return v0;
}

uint64_t XPCFileTransfer.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CF7BDDD0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t sub_1CF7BDBC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for XPCFileTransfer();
  v5 = swift_allocObject();
  result = XPCFileTransfer.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

id sub_1CF7BDC18(uint64_t a1)
{
  return sub_1CF7BD3CC(a1);
}

uint64_t sub_1CF7BDC38(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001CF7CECC0 || (sub_1CF7C8FC4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54656C6946637078 && a2 == 0xEF726566736E6172 || (sub_1CF7C8FC4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465746365707865 && a2 == 0xEE006874676E654CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1CF7C8FC4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CF7BDDD0(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1CF7BDDE8(result, a2 & 1);
  return result;
}

uint64_t sub_1CF7BDDE8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRelease();
  else
    return swift_release();
}

uint64_t sub_1CF7BDDF4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRetain();
  else
    return swift_retain();
}

void sub_1CF7BDE04(int a1)
{
  uint64_t v1;

  sub_1CF7BD1D8(a1, *(void (**)(uint64_t, double))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7BDE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  void (*v5)(double);

  v4 = *(uint64_t (**)(uint64_t))(v2 + 32);
  if (!a2)
  {
    v5 = *(void (**)(double))(v2 + 16);
    if (v5)
      v5(1.0);
  }
  return v4(a2);
}

uint64_t sub_1CF7BDEB8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF7BDEE4(uint64_t a1, BOOL *a2, __n128 a3)
{
  uint64_t v3;

  return sub_1CF7BD124(a1, a2, *(uint64_t (**)(uint64_t, __n128))(v3 + 16), a3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

unint64_t sub_1CF7BDEF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB3308;
  if (!qword_1EFBB3308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBB3300);
    result = MEMORY[0x1D17D55BC](&unk_1CF7CA698, v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB3308);
  }
  return result;
}

unint64_t sub_1CF7BDF3C()
{
  unint64_t result;

  result = qword_1EFBB3318;
  if (!qword_1EFBB3318)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCObjectContainer, &type metadata for XPCObjectContainer);
    atomic_store(result, (unint64_t *)&qword_1EFBB3318);
  }
  return result;
}

unint64_t sub_1CF7BDF80()
{
  unint64_t result;

  result = qword_1EFBB3328;
  if (!qword_1EFBB3328)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC958, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB3328);
  }
  return result;
}

uint64_t type metadata accessor for XPCFileTransfer()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCFileTransfer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(forFileAt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(fileDescriptor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of XPCFileTransfer.expectedLength.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:options:reportingProgressUsing:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:reportingProgressUsing:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of XPCFileTransfer.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t initializeBufferWithCopyOfBuffer for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1CF7BDDF4(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for XPCFileTransfer.Value(uint64_t a1)
{
  return sub_1CF7BDDE8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1CF7BDDF4(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1CF7BDDE8(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for XPCFileTransfer.Value(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1CF7BDDE8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileTransfer.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CF7BE204(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1CF7BE20C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer.Value()
{
  return &type metadata for XPCFileTransfer.Value;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer._CodingKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileTransfer._CodingKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF7BE304 + 4 * byte_1CF7CC7ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF7BE338 + 4 * byte_1CF7CC7E8[v4]))();
}

uint64_t sub_1CF7BE338(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7BE340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF7BE348);
  return result;
}

uint64_t sub_1CF7BE354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF7BE35CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF7BE360(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7BE368(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer._CodingKey()
{
  return &type metadata for XPCFileTransfer._CodingKey;
}

unint64_t sub_1CF7BE388()
{
  unint64_t result;

  result = qword_1EFBB3470;
  if (!qword_1EFBB3470)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC930, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB3470);
  }
  return result;
}

unint64_t sub_1CF7BE3D0()
{
  unint64_t result;

  result = qword_1EFBB3478;
  if (!qword_1EFBB3478)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC8A0, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB3478);
  }
  return result;
}

unint64_t sub_1CF7BE418()
{
  unint64_t result;

  result = qword_1EFBB3480;
  if (!qword_1EFBB3480)
  {
    result = MEMORY[0x1D17D55BC](&unk_1CF7CC8C8, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_1EFBB3480);
  }
  return result;
}

void sub_1CF7BE45C(int a1)
{
  sub_1CF7BC8D0(a1);
}

uint64_t static XPCError.xpcCoderRequired(_:from:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t inited;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;

  v10 = sub_1CF7C8850();
  v12 = v11;
  v13 = MEMORY[0x1E0DEA968];
  v22 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  sub_1CF779634(&v21, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF7C0590(v20, v10, v12, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 48) = 0xD00000000000005FLL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CED50;
  v17 = sub_1CF779500(inited);
  XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v17);
  v20[0] = v21;
  swift_retain();
  v18 = sub_1CF779500(MEMORY[0x1E0DEE9D8]);
  return sub_1CF7BFEC8((uint64_t)v20, a4, a3, v18, a5);
}

uint64_t static XPCError.unknown(_:from:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  unint64_t v25;

  v10 = sub_1CF7C8850();
  v12 = v11;
  v13 = MEMORY[0x1E0DEA968];
  v24 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = a2;
  sub_1CF779634(&v23, v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = 0x8000000000000000;
  sub_1CF7C0590(v22, v10, v12, isUniquelyReferenced_nonNull_native);
  v25 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v24 = type metadata accessor for XPCConnection();
    *(_QWORD *)&v23 = a3;
    sub_1CF779634(&v23, v22);
    swift_retain();
    v15 = v25;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF7C0590(v22, 0x656E6E6F43435058, 0xED00006E6F697463, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CF78B810(0x656E6E6F43435058, 0xED00006E6F697463, &v23);
    sub_1CF7C06C0((uint64_t)&v23);
    v15 = v25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 48) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CE910;
  v19 = sub_1CF779500(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v19);
  v22[0] = v23;
  swift_retain();
  v20 = sub_1CF779500(MEMORY[0x1E0DEE9D8]);
  return sub_1CF7BFEC8((uint64_t)v22, v15, a3, v20, a5);
}

uint64_t static XPCError.invalidType(_:expecting:from:userInfo:)@<X0>(const _xpc_type_s *a1@<X0>, const _xpc_type_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  _OWORD v32[2];
  __int128 v33;
  uint64_t v34;
  unint64_t v35;

  xpc_type_get_name(a1);
  v7 = sub_1CF7C88E0();
  v8 = MEMORY[0x1E0DEA968];
  v34 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v33 = v7;
  *((_QWORD *)&v33 + 1) = v9;
  sub_1CF779634(&v33, v32);
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF7C0590(v32, 0x79546C6175746341, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v35 = v10;
  swift_bridgeObjectRelease();
  if (a2)
  {
    xpc_type_get_name(a2);
    v12 = sub_1CF7C88E0();
    v34 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v33 = v12;
    *((_QWORD *)&v33 + 1) = v13;
    sub_1CF779634(&v33, v32);
    swift_bridgeObjectRetain();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF7C0590(v32, 0x6465746365707845, 0xEC00000065707954, v14);
    v35 = v10;
    swift_bridgeObjectRelease();
    v15 = sub_1CF7C8850();
    v17 = v16;
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    sub_1CF7C8BA4();
    sub_1CF7C88D4();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
    v8 = MEMORY[0x1E0DEA968];
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
    v34 = v8;
    sub_1CF779634(&v33, v32);
    v18 = v35;
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v35 = 0x8000000000000000;
    sub_1CF7C0590(v32, v15, v17, v19);
  }
  else
  {
    v20 = sub_1CF7C8850();
    v22 = v21;
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v33 = 0xD000000000000010;
    *((_QWORD *)&v33 + 1) = 0x80000001CF7CEDB0;
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
    v34 = v8;
    sub_1CF779634(&v33, v32);
    v18 = v35;
    v23 = swift_isUniquelyReferenced_nonNull_native();
    v35 = 0x8000000000000000;
    sub_1CF7C0590(v32, v20, v22, v23);
  }
  v35 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v34 = type metadata accessor for XPCConnection();
    *(_QWORD *)&v33 = a3;
    sub_1CF779634(&v33, v32);
    swift_retain();
    v24 = v35;
    v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF7C0590(v32, 0x656E6E6F43435058, 0xED00006E6F697463, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CF78B810(0x656E6E6F43435058, 0xED00006E6F697463, &v33);
    sub_1CF7C06C0((uint64_t)&v33);
    v24 = v35;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v27;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 48) = 0xD000000000000022;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEDF0;
  v28 = sub_1CF779500(inited);
  XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v28);
  v32[0] = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_1CF7BFEC8((uint64_t)v32, a4, a3, v24, a5);
}

void XPCError.init(_:from:userInfo:)()
{
  swift_getObjectType();
  OS_xpc_object.type.getter();
}

uint64_t sub_1CF7BECF0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t inited;
  uint64_t v69;
  unint64_t v70;
  Swift::Int32 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if (a1 != XPCTypeError)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    result = swift_release();
    *v62 = 0;
    v62[1] = 0;
    return result;
  }
  if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInterrupted))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(inited + 32) = sub_1CF7C8850();
    *(_QWORD *)(inited + 40) = v69;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(inited + 56) = 0x80000001CF7CEF00;
    v70 = sub_1CF779500(inited);
    v71 = 1000;
  }
  else if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInvalid))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
    v72 = swift_initStackObject();
    *(_OWORD *)(v72 + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(v72 + 32) = sub_1CF7C8850();
    *(_QWORD *)(v72 + 40) = v73;
    *(_QWORD *)(v72 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v72 + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(v72 + 56) = 0x80000001CF7CE2C0;
    v70 = sub_1CF779500(v72);
    v71 = 1001;
  }
  else if (xpc_equal(v63, (xpc_object_t)XPCErrorTerminationImminent))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
    v74 = swift_initStackObject();
    *(_OWORD *)(v74 + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(v74 + 32) = sub_1CF7C8850();
    *(_QWORD *)(v74 + 40) = v75;
    *(_QWORD *)(v74 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v74 + 48) = 0xD000000000000015;
    *(_QWORD *)(v74 + 56) = 0x80000001CF7CEEE0;
    v70 = sub_1CF779500(v74);
    v71 = 1002;
  }
  else
  {
    if (qword_1EFBB2308 != -1)
      swift_once();
    if (!xpc_equal(v63, (xpc_object_t)qword_1EFBB3488))
    {
      if (xpc_dictionary_get_string(v63, (const char *)XPCErrorKeyDescription))
      {
        v81 = sub_1CF7C88E0();
        static XPCError.unknown(_:from:userInfo:)(v81, v82, v64, v65, (_QWORD *)(v66 - 64));
        swift_bridgeObjectRelease();
      }
      else
      {
        static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001CF7CEE50, v64, v65, (_QWORD *)(v66 - 64));
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      result = swift_release();
      goto LABEL_14;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
    v76 = swift_initStackObject();
    *(_OWORD *)(v76 + 16) = xmmword_1CF7CA390;
    *(_QWORD *)(v76 + 32) = sub_1CF7C8850();
    *(_QWORD *)(v76 + 40) = v77;
    *(_QWORD *)(v76 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v76 + 48) = 0xD000000000000060;
    *(_QWORD *)(v76 + 56) = 0x80000001CF7CEE70;
    v70 = sub_1CF779500(v76);
    v71 = 1006;
  }
  XPCError.init(code:userInfo:)(v71, (Swift::OpaquePointer)v70);
  v78 = *(_QWORD *)(v66 - 72);
  *(_QWORD *)(v66 - 176) = *(_QWORD *)(v66 - 80);
  *(_QWORD *)(v66 - 168) = v78;
  v79 = sub_1CF779500(MEMORY[0x1E0DEE9D8]);
  sub_1CF7BFEC8(v66 - 176, v65, v64, v79, (_QWORD *)(v66 - 64));
  result = swift_unknownObjectRelease();
LABEL_14:
  v80 = *(_QWORD *)(v66 - 56);
  *v62 = *(_QWORD *)(v66 - 64);
  v62[1] = v80;
  return result;
}

Swift::Int static XPCError.connectionInvalid.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CE2C0;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1001, (Swift::OpaquePointer)v2).errorCode;
}

void sub_1CF7BF104()
{
  swift_getObjectType();
  OS_xpc_object.type.getter();
}

uint64_t sub_1CF7BF138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = XPCTypeDictionary;
  if (XPCTypeDictionary != a1)
  {
    sub_1CF779500(MEMORY[0x1E0DEE9D8]);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }
  result = swift_release();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = 0xD000000000000019;
  *(_QWORD *)(v1 + 16) = 0x80000001CF7CD790;
  *(_BYTE *)(v1 + 24) = v4 != a1;
  return result;
}

id sub_1CF7BF254()
{
  id result;

  result = (id)XPCErrorGetPeerCodeSigningRequirement();
  qword_1EFBB3488 = (uint64_t)result;
  return result;
}

uint64_t XPCErrorPeerCodeSigningRequirement.getter()
{
  if (qword_1EFBB2308 != -1)
    swift_once();
  return swift_unknownObjectRetain();
}

unint64_t static XPCError.errorDomain.getter()
{
  return 0xD000000000000017;
}

uint64_t XPCError.errorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCError.errorUserInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF7BF2E4()
{
  sub_1CF7C072C();
  return sub_1CF7C91D4();
}

uint64_t sub_1CF7BF30C()
{
  sub_1CF7C072C();
  return sub_1CF7C91C8();
}

Mercury::XPCError __swiftcall XPCError.init(code:userInfo:)(Swift::Int32 code, Swift::OpaquePointer userInfo)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v12;
  void *v13;
  void *v14;
  Mercury::XPCError result;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  void *rawValue;

  v4 = v2;
  rawValue = userInfo._rawValue;
  if (!*((_QWORD *)userInfo._rawValue + 2))
  {
    v17 = 0u;
    v18 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1CF779644(0x656E6E6F43435058, 0xED00006E6F697463);
  if ((v7 & 1) == 0)
  {
    v17 = 0u;
    v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1CF778DDC(*((_QWORD *)userInfo._rawValue + 7) + 32 * v6, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_8:
    sub_1CF7C06C0((uint64_t)&v17);
    goto LABEL_9;
  }
  type metadata accessor for XPCConnection();
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_QWORD *)&v17 = *(_QWORD *)&v16[0];
    swift_retain();
    v8 = sub_1CF7C888C();
    *((_QWORD *)&v18 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v17 = v8;
    *((_QWORD *)&v17 + 1) = v9;
    sub_1CF779634(&v17, v16);
    v10 = rawValue;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF7C0590(v16, 0xD000000000000018, 0x80000001CF7CEF40, isUniquelyReferenced_nonNull_native);
    rawValue = v10;
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  sub_1CF78B810(0x656E6E6F43435058, 0xED00006E6F697463, &v17);
  v12 = sub_1CF7C06C0((uint64_t)&v17);
  v14 = rawValue;
  *v4 = code;
  v4[1] = v14;
  result.errorUserInfo._rawValue = v13;
  result.errorCode = v12;
  return result;
}

Swift::Int sub_1CF7BF4EC@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  Swift::Int result;
  ValueMetadata *v10;
  id v11;
  uint64_t v12;
  Swift::Int32 v13;

  v4 = objc_msgSend(a1, sel_domain);
  v5 = sub_1CF7C8850();
  v7 = v6;

  if (v5 == 0xD000000000000017 && v7 == 0x80000001CF7CEF20)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v10 = (ValueMetadata *)objc_msgSend(a1, sel_code);
    v11 = objc_msgSend(a1, sel_userInfo);
    v12 = sub_1CF7C8778();

    v13 = sub_1CF7C0320(v10);
    return XPCError.init(code:userInfo:)(v13, (Swift::OpaquePointer)v12).errorCode;
  }
  v8 = sub_1CF7C8FC4();
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    goto LABEL_5;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

unint64_t sub_1CF7BF624()
{
  return 0xD000000000000017;
}

uint64_t sub_1CF7BF640()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCError.hashValue.getter()
{
  sub_1CF7C9234();
  sub_1CF7C9240();
  return sub_1CF7C9258();
}

id sub_1CF7BF68C(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  id v4;

  if (*a1 != *a2)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = (void *)sub_1CF7C876C();
  swift_bridgeObjectRetain();
  v3 = (void *)sub_1CF7C876C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_isEqual_, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_1CF7BF770(uint64_t a1)
{
  return sub_1CF7BF784(a1);
}

uint64_t sub_1CF7BF784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  ValueMetadata *v12;
  id v13;
  uint64_t v14;
  Swift::Int32 v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v3 = v1;
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  sub_1CF78D06C(a1, (uint64_t)&v31);
  v5 = NSError.init(from:)(&v31);
  if (!v2)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_domain);
    v8 = sub_1CF7C8850();
    v10 = v9;

    if (v8 == 0xD000000000000017 && v10 == 0x80000001CF7CEF20)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = sub_1CF7C8FC4();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
        *(_QWORD *)(inited + 32) = sub_1CF7C8850();
        *(_QWORD *)(inited + 40) = v17;
        *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(inited + 48) = 0xD00000000000002FLL;
        *(_QWORD *)(inited + 56) = 0x80000001CF7CEFA0;
        v18 = sub_1CF779500(inited);
        XPCError.init(code:userInfo:)(5, (Swift::OpaquePointer)v18);
        v31 = 0;
        v32 = 0xE000000000000000;
        sub_1CF7C8BA4();
        sub_1CF7C88D4();
        v33 = v3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB34A8);
        sub_1CF7C888C();
        sub_1CF7C88D4();
        swift_bridgeObjectRelease();
        sub_1CF7C88D4();
        v19 = v31;
        v20 = v32;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DED8);
        v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_1CF7CA390;
        *(_QWORD *)(v21 + 32) = sub_1CF7C8850();
        *(_QWORD *)(v21 + 40) = v22;
        *(_QWORD *)(v21 + 48) = v19;
        *(_QWORD *)(v21 + 56) = v20;
        v23 = sub_1CF77852C(v21);
        swift_bridgeObjectRetain();
        v24 = sub_1CF77907C(v23);
        swift_bridgeObjectRelease();
        v25 = sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
        sub_1CF7BFDE4(v29, v30, v24, v25);
        swift_bridgeObjectRelease();
        sub_1CF78D000();
        if (sub_1CF7C8FA0())
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_allocError();
          v26 = v32;
          *v27 = v31;
          v27[1] = v26;
        }
        swift_willThrow();
        goto LABEL_11;
      }
    }
    v12 = (ValueMetadata *)objc_msgSend(v6, sel_code);
    v13 = objc_msgSend(v6, sel_userInfo);
    v14 = sub_1CF7C8778();

    v15 = sub_1CF7C0320(v12);
    XPCError.init(code:userInfo:)(v15, (Swift::OpaquePointer)v14);
LABEL_11:

  }
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

void sub_1CF7BFAF0(_QWORD *a1)
{
  uint64_t *v1;

  sub_1CF7BFB08(a1, *v1, v1[1]);
}

void sub_1CF7BFB08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;

  sub_1CF78D000();
  swift_bridgeObjectRetain();
  v4 = sub_1CF7C8FA0();
  if (v4)
  {
    v5 = (void *)v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (void *)swift_allocError();
    *v6 = a2;
    v6[1] = a3;
  }
  v7 = (void *)sub_1CF7C84FC();

  NSError.encode(to:)(a1);
}

uint64_t sub_1CF7BFBD4()
{
  uint64_t *v0;

  return sub_1CF7BFC54(*v0, v0[1]);
}

uint64_t sub_1CF7BFBF4()
{
  uint64_t *v0;

  return sub_1CF7BFC54(*v0, v0[1]);
}

uint64_t sub_1CF7BFC14()
{
  uint64_t *v0;

  return sub_1CF7BFC54(*v0, v0[1]);
}

uint64_t sub_1CF7BFC34()
{
  uint64_t *v0;

  return sub_1CF7BFC54(*v0, v0[1]);
}

uint64_t sub_1CF7BFC54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = sub_1CF7C8850();
  v5 = v4;
  if (!*(_QWORD *)(a2 + 16))
  {
    v11 = 0u;
    v12 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = sub_1CF779644(v6, v5);
  if ((v8 & 1) == 0)
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1CF778DDC(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_11:
    sub_1CF7C06C0((uint64_t)&v11);
    return 0;
  }
  if (swift_dynamicCast())
    return v10;
  else
    return 0;
}

Swift::Int static XPCError.xpcError.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD00000000000003CLL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEF60;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(3, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_1CF7BFDE4(ValueMetadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  Swift::OpaquePointer v11;
  Swift::Int32 v12;
  void *v14;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = (void *)a3;
  sub_1CF7C7440(a4, (uint64_t)sub_1CF77A45C, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v14);
  v9 = (uint64_t)v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v14 = (void *)v9;
  sub_1CF7C7440(a2, (uint64_t)sub_1CF77A45C, 0, v10, (uint64_t *)&v14);
  v11._rawValue = v14;
  swift_bridgeObjectRelease();
  v12 = sub_1CF7C0320(a1);
  XPCError.init(code:userInfo:)(v12, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7BFEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v13;
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(ValueMetadata **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v17 = a2;
  if (a3)
  {
    v10 = a2;
    v16 = type metadata accessor for XPCConnection();
    *(_QWORD *)&v15 = a3;
    sub_1CF779634(&v15, v14);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF7C0590(v14, 0x656E6E6F43435058, 0xED00006E6F697463, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CF78B810(0x656E6E6F43435058, 0xED00006E6F697463, &v15);
    sub_1CF7C06C0((uint64_t)&v15);
    v10 = v17;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CF7BFDE4(v9, v8, v10, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  v13 = *((_QWORD *)&v15 + 1);
  *a5 = v15;
  a5[1] = v13;
  return result;
}

Swift::Int static XPCError.connectionInterrupted.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEF00;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1000, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.terminationImminent.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD000000000000015;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEEE0;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1002, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.invalidType.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD000000000000022;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEDF0;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.xpcCoderRequired.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD00000000000005FLL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CED50;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.peerCodeSigningRequirement.getter()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = 0xD000000000000060;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CEE70;
  v2 = sub_1CF779500(inited);
  return XPCError.init(code:userInfo:)(1006, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_1CF7C0320(ValueMetadata *a1)
{
  uint64_t v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;

  v1 = MEMORY[0x1E0DEA968];
  if (a1)
  {
    v2 = a1;
    if (a1 == (ValueMetadata *)(int)a1)
      return (uint64_t)v2;
    sub_1CF7C8A6C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1CF7CB5D0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB34A8);
    v4 = sub_1CF7C888C();
    v6 = v5;
    *(_QWORD *)(v3 + 56) = v1;
    v7 = sub_1CF791E0C();
    *(_QWORD *)(v3 + 32) = v4;
    *(_QWORD *)(v3 + 40) = v6;
    v8 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v3 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v3 + 104) = v8;
    *(_QWORD *)(v3 + 64) = v7;
    *(_QWORD *)(v3 + 72) = v2;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v9 = (void *)sub_1CF7C8B08();
  }
  else
  {
    sub_1CF7C8A6C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DEF0);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1CF7CA390;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB34A8);
    v11 = sub_1CF7C888C();
    v13 = v12;
    *(_QWORD *)(v10 + 56) = v1;
    *(_QWORD *)(v10 + 64) = sub_1CF791E0C();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2EE0);
    v9 = (void *)sub_1CF7C8B08();
  }
  sub_1CF7C867C();
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEE8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  *(_QWORD *)(inited + 32) = sub_1CF7C8850();
  *(_QWORD *)(inited + 40) = v15;
  *(_QWORD *)(inited + 72) = v1;
  *(_QWORD *)(inited + 48) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 56) = 0x80000001CF7CE910;
  v16 = sub_1CF779500(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v16);
  v2 = &type metadata for XPCError;
  result = swift_bridgeObjectRelease();
  if ((uint64_t)&type metadata for XPCError < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if ((uint64_t)&type metadata for XPCError <= 0x7FFFFFFF)
  {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

_OWORD *sub_1CF7C0590(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CF779644(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
        return sub_1CF779634(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CF7C6A58();
      goto LABEL_7;
    }
    sub_1CF7C59D0(v15, a4 & 1);
    v21 = sub_1CF779644(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CF7C0C44(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1CF7C91BC();
  __break(1u);
  return result;
}

uint64_t sub_1CF7C06C0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CF7C0700(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1CF7C072C();
  result = sub_1CF7C0770();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1CF7C072C()
{
  unint64_t result;

  result = qword_1EFBB3490;
  if (!qword_1EFBB3490)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_1EFBB3490);
  }
  return result;
}

unint64_t sub_1CF7C0770()
{
  unint64_t result;

  result = qword_1EFBB3498;
  if (!qword_1EFBB3498)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_1EFBB3498);
  }
  return result;
}

unint64_t sub_1CF7C07BC()
{
  unint64_t result;

  result = qword_1EFBB34A0;
  if (!qword_1EFBB34A0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_1EFBB34A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t sub_1CF7C0810(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_1CF7C861C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A80](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1CF7B49A8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_1CF7C0E2C(a1, v20[7] + 8 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1CF7C6C3C();
      goto LABEL_7;
    }
    sub_1CF7C5CCC(v17, a3 & 1);
    v22 = sub_1CF7B49A8(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_1CF7C0E2C(a1, v20[7] + 8 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1CF7C0CAC(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = sub_1CF7C91BC();
  __break(1u);
  return result;
}

uint64_t sub_1CF7C0980(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1E0C80A80](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1CF7B4A0C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_release();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1CF7C6E90();
    goto LABEL_7;
  }
  sub_1CF7C6058(v16, a3 & 1);
  v22 = sub_1CF7B4A0C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_1CF7C91BC();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1CF7B6134(a2, (uint64_t)v10);
  return sub_1CF7C0D4C(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1CF7C0AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = sub_1CF7B4C5C(a3, a4, a5, a6);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a7 & 1) != 0)
    {
LABEL_7:
      v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(v23[7] + 16 * v17);
        result = swift_release();
        *v24 = a1;
        v24[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a7 & 1) == 0)
    {
      sub_1CF7C7274();
      goto LABEL_7;
    }
    sub_1CF7C66E4(v20, a7 & 1);
    v26 = sub_1CF7B4C5C(a3, a4, a5, a6);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CF7C0DDC(v17, a3, a4, a5, a6, a1, a2, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CF7C91BC();
  __break(1u);
  return result;
}

_OWORD *sub_1CF7C0C44(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1CF779634(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1CF7C0CAC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1CF7C861C();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1CF7C0E74(a3, a4[7] + 8 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1CF7C0D4C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for RemoteDevice.Identity();
  result = sub_1CF788D08(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_1CF7C0DDC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 32 * result);
  *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  v9 = (_QWORD *)(a8[7] + 16 * result);
  *v9 = a6;
  v9[1] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

uint64_t sub_1CF7C0E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF7C0E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CustomNSError.wrapping(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *boxed_opaque_existential_0Tm;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  int v63;
  char *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;

  v71 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CF7C8B14();
  v10 = MEMORY[0x1E0C80A80](v9);
  v13 = (char *)&v65 - v12;
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v71, v3, a2);
  v67 = v11;
  v68 = v10;
  v70 = v8;
  v14 = a1;
  v69 = v3;
  v15 = sub_1CF7C843C();
  v78 = v15;
  v16 = sub_1CF7C8850();
  v18 = v17;
  if (!*(_QWORD *)(v15 + 16))
  {
    v76 = 0u;
    v77 = 0u;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v19 = v16;
  swift_bridgeObjectRetain();
  v20 = sub_1CF779644(v19, v18);
  if ((v21 & 1) == 0)
  {
    v76 = 0u;
    v77 = 0u;
    goto LABEL_14;
  }
  sub_1CF778DDC(*(_QWORD *)(v15 + 56) + 32 * v20, (uint64_t)&v76);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v77 + 1))
  {
LABEL_15:
    sub_1CF7C06C0((uint64_t)&v76);
    goto LABEL_16;
  }
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B20);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = *(_QWORD **)&v73[0];
    v24 = a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = sub_1CF7B484C(0, v23[2] + 1, 1, v23);
    v26 = v23[2];
    v25 = v23[3];
    if (v26 >= v25 >> 1)
      v23 = sub_1CF7B484C((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    v23[2] = v26 + 1;
    v23[v26 + 4] = a1;
    v27 = sub_1CF7C8850();
    v29 = v28;
    *((_QWORD *)&v77 + 1) = v22;
    *(_QWORD *)&v76 = v23;
    sub_1CF779634(&v76, v73);
    v30 = v78;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v72 = v30;
    v78 = 0x8000000000000000;
    sub_1CF7C0590(v73, v27, v29, isUniquelyReferenced_nonNull_native);
    v78 = v72;
    goto LABEL_25;
  }
LABEL_16:
  v33 = sub_1CF7C8850();
  if (*(_QWORD *)(v15 + 16) && (v35 = sub_1CF779644(v33, v34), (v36 & 1) != 0))
  {
    sub_1CF778DDC(*(_QWORD *)(v15 + 56) + 32 * v35, (uint64_t)&v76);
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v77 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v37 = *(void **)&v73[0];
      v66 = *(id *)&v73[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB31F8);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1CF7CB5D0;
      *(_QWORD *)(v38 + 32) = v37;
      *(_QWORD *)(v38 + 40) = a1;
      v39 = sub_1CF7C8850();
      v41 = v40;
      v42 = a1;
      v43 = v37;
      sub_1CF78B810(v39, v41, &v76);
      swift_bridgeObjectRelease();
      sub_1CF7C06C0((uint64_t)&v76);
      v44 = sub_1CF7C8850();
      v46 = v45;
      *((_QWORD *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2B20);
      *(_QWORD *)&v76 = v38;
      sub_1CF779634(&v76, v73);
      v47 = v78;
      v48 = swift_isUniquelyReferenced_nonNull_native();
      v72 = v47;
      v78 = 0x8000000000000000;
      sub_1CF7C0590(v73, v44, v46, v48);
      v78 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_26;
    }
  }
  else
  {
    sub_1CF7C06C0((uint64_t)&v76);
  }
  v49 = sub_1CF7C8850();
  v51 = v50;
  swift_getErrorValue();
  v52 = v74;
  v53 = v75;
  *((_QWORD *)&v77 + 1) = v75;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v76);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(boxed_opaque_existential_0Tm, v52, v53);
  sub_1CF779634(&v76, v73);
  v55 = v78;
  v56 = swift_isUniquelyReferenced_nonNull_native();
  v72 = v55;
  v78 = 0x8000000000000000;
  sub_1CF7C0590(v73, v49, v51, v56);
  v78 = v72;
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  sub_1CF7C8430();
  v57 = v69;
  v58 = sub_1CF7C8448();
  v59 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v60 = (void *)sub_1CF7C882C();
  swift_bridgeObjectRelease();
  v61 = (void *)sub_1CF7C876C();
  swift_bridgeObjectRelease();
  v62 = objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, v58, v61);

  *(_QWORD *)&v76 = v62;
  sub_1CF7B6308();
  v63 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, v63 ^ 1u, 1, a2);
  v64 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v70, v57, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, a2) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v71, v64, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v13, v68);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v64, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v71, v13, a2);
  }
}

uint64_t _Error.wrapping(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF7C17E0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

{
  return sub_1CF7C17E0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

uint64_t CustomNSError.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, v9, a2);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
    do
    {
      v13 = *(void **)(a1 + 8 * v12++ + 32);
      v14 = v13;
      CustomNSError.wrapping(_:)(v13, a2, (uint64_t)v8);

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a3, a2);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
    }
    while (v11 != v12);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CustomNSError.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = (void *)MEMORY[0x1E0C80A80](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CustomNSError.wrapping(_:)(v5, v8, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t CustomNSError.underlyingErrors.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A80](a1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_1CF7C8FA0();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  v9 = (void *)sub_1CF7C84FC();

  v10 = objc_msgSend(v9, sel_underlyingErrors);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  v11 = sub_1CF7C89AC();

  return v11;
}

uint64_t sub_1CF7C17E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];

  v8 = *(_QWORD *)(a3 + 8);
  v14 = a2;
  v15 = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_0Tm, v4, a2);
  v10 = v14;
  v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v16[3] = v10;
  v16[4] = v11;
  __swift_allocate_boxed_opaque_existential_0Tm(v16);
  a4(a1, v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3288);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

uint64_t _Error.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A80](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Error.wrapping(_:)(v5, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t _Error.underlyingErrors.getter(uint64_t a1)
{
  return CustomNSError.underlyingErrors.getter(a1);
}

uint64_t static POSIXError.current(or:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;

  v4 = sub_1CF7C8424();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A80](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1D17D4314](v6);
  sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
  if (!v9)
    return POSIXError.init(uncheckedCode:userInfo:)(a1, a2);
  POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

uint64_t POSIXError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _DWORD v14[2];
  id v15;

  v4 = sub_1CF7C8424();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A80](v4);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = sub_1CF7C86B8();
    if ((v9 & 0x100000000) != 0)
    {
      sub_1CF7C8850();
      v10 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v11 = (void *)sub_1CF7C882C();
      swift_bridgeObjectRelease();
      v12 = (void *)sub_1CF7C876C();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      v15 = v13;
      sub_1CF7B6308();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }
    else
    {
      v14[1] = v9;
      sub_1CF7A7E88();
      return sub_1CF7C84F0();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static POSIXError.current.getter@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = MEMORY[0x1D17D4314]();
  if (v2)
  {
    v3 = v2;
    sub_1CF77A4E0(MEMORY[0x1E0DEE9D8]);
    POSIXError.init(uncheckedCode:userInfo:)(v3, a1);
    v4 = sub_1CF7C8424();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  else
  {
    v4 = sub_1CF7C8424();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t xpc_uuid_get_uuid(_:)(void *a1)
{
  const uint8_t *bytes;

  bytes = xpc_uuid_get_bytes(a1);
  if (bytes)
    return *(_QWORD *)bytes;
  else
    return 0;
}

xpc_object_t xpc_uuid_create_with_uuid(_:)(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, int a9, int a10)
{
  unsigned __int8 uuid[8];
  int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C08];
  uuid[0] = a1;
  uuid[1] = a2;
  uuid[2] = a3;
  uuid[3] = a4;
  uuid[4] = a5;
  uuid[5] = a6;
  uuid[6] = a7;
  uuid[7] = a8;
  v12 = a9;
  v13 = a10;
  return xpc_uuid_create(uuid);
}

uint64_t _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0@<X0>(xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t result;

  if (qword_1EFBB2300 != -1)
    swift_once();
  v4 = off_1EFBB30F8;
  if (*((_QWORD *)off_1EFBB30F8 + 2))
  {
    v5 = sub_1CF7B4AC0((uint64_t)type);
    if ((v6 & 1) != 0)
      return sub_1CF78D06C(v4[7] + 40 * v5, a2);
  }
  xpc_type_get_name(type);
  sub_1CF7C88E0();
  sub_1CF7C8BA4();
  sub_1CF7C88D4();
  sub_1CF7C8C7C();
  sub_1CF7C88D4();
  sub_1CF7C88D4();
  sub_1CF7C88D4();
  result = sub_1CF7C8CA0();
  __break(1u);
  return result;
}

xpc_connection_t OS_xpc_object.createConnection()()
{
  _xpc_endpoint_s *v0;

  return xpc_connection_create_from_endpoint(v0);
}

uint64_t static OpaquePointer.error.getter()
{
  return XPCTypeError;
}

uint64_t static OpaquePointer.connection.getter()
{
  return XPCTypeConnection;
}

uint64_t static OpaquePointer.endpoint.getter()
{
  return XPCTypeEndpoint;
}

uint64_t static OpaquePointer.dictionary.getter()
{
  return XPCTypeDictionary;
}

uint64_t static OpaquePointer.array.getter()
{
  return XPCTypeArray;
}

uint64_t static OpaquePointer.data.getter()
{
  return XPCTypeData;
}

uint64_t static OpaquePointer.date.getter()
{
  return XPCTypeDate;
}

uint64_t static OpaquePointer.double.getter()
{
  return XPCTypeDouble;
}

uint64_t static OpaquePointer.fd.getter()
{
  return XPCTypeFD;
}

uint64_t static OpaquePointer.int64.getter()
{
  return XPCTypeInt64;
}

uint64_t static OpaquePointer.fileTransfer.getter()
{
  return XPCTypeFileTransfer;
}

uint64_t OS_xpc_object.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  const _xpc_type_s *v3;

  v3 = (const _xpc_type_s *)MEMORY[0x1D17D5ACC](v1);
  return _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0(v3, a1);
}

id NSLocking.withLock<A>(perform:)(void (*a1)(id))
{
  void *v1;

  a1(objc_msgSend(v1, sel_lock));
  return objc_msgSend(v1, sel_unlock);
}

uint64_t sub_1CF7C1F90(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65756C6176;
  else
    v3 = 0x5464656C676E616DLL;
  if (v2)
    v4 = 0xEF656D614E657079;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65756C6176;
  else
    v5 = 0x5464656C676E616DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xEF656D614E657079;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CF7C8FC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static DynamicCodable.defaultEncodingValue(forUnencodableValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t DynamicCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *boxed_opaque_existential_0Tm;
  _QWORD v47[2];
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[48];
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v52 = a4;
  v57 = a3;
  v55 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1CF7C8B14();
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  v7 = MEMORY[0x1E0C80A80](v6);
  v53 = (char *)v47 - v8;
  v56 = AssociatedTypeWitness;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A80](v7);
  v49 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v9);
  v12 = (char *)v47 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC8);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A80](v13);
  v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17 = sub_1CF7AF6D0();
  v18 = v63;
  sub_1CF7C9288();
  if (!v18)
  {
    v47[1] = v17;
    v47[0] = v12;
    v19 = v57;
    v48 = a1;
    v20 = v56;
    v63 = v14;
    LOBYTE(v59[0]) = 0;
    v21 = sub_1CF7C8D24();
    v22 = v13;
    v26 = v25;
    v27 = v21;
    v28 = static DynamicCodable.supportedType(named:)(v21, v25, v55, v19);
    if (v28)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      swift_bridgeObjectRelease();
      v58[0] = 1;
      v60 = v31;
      v61 = v32;
      v62 = v33;
      __swift_allocate_boxed_opaque_existential_0Tm(v59);
      sub_1CF7C8D84();
      sub_1CF7C8D54();
      sub_1CF7B1178((uint64_t)v59, (uint64_t)v58);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30B0);
      v35 = v53;
      v36 = v20;
      v37 = swift_dynamicCast();
      v38 = v54;
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
      if ((v37 & 1) != 0)
      {
        v39(v35, 0, 1, v36);
        v40 = v47[0];
        (*(void (**)(_QWORD, char *, uint64_t))(v38 + 32))(v47[0], v35, v36);
        v41 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v49, v40, v36);
        (*(void (**)(char *, uint64_t, uint64_t))(v19 + 56))(v41, v55, v19);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v36);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
        v23 = (uint64_t)v48;
        return __swift_destroy_boxed_opaque_existential_1Tm(v23);
      }
      v39(v35, 1, 1, v36);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v51);
      sub_1CF7B1100();
      swift_allocError();
      v43 = v42;
      v44 = v60;
      v45 = __swift_project_boxed_opaque_existential_1(v59, v60);
      *(_QWORD *)(v43 + 24) = v44;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v43);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(boxed_opaque_existential_0Tm, v45, v44);
      *(_QWORD *)(v43 + 32) = v36;
      *(_BYTE *)(v43 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
    }
    else
    {
      sub_1CF7B1100();
      swift_allocError();
      *(_QWORD *)v34 = v27;
      *(_QWORD *)(v34 + 8) = v26;
      *(_BYTE *)(v34 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
    }
    a1 = v48;
  }
  v23 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1Tm(v23);
}

uint64_t DynamicCodable.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t *boxed_opaque_existential_0Tm;
  void (*v21)(uint64_t *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47[2];
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  void (*v51)(uint64_t *, char *, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1CF7C8B14();
  v38 = *(_QWORD *)(v7 - 8);
  v39 = (void (*)(char *, char *, uint64_t))v7;
  v8 = MEMORY[0x1E0C80A80](v7);
  v42 = (char *)&v37 - v9;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A80](v8);
  v43 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A80](v11);
  v40 = (char *)&v37 - v14;
  MEMORY[0x1E0C80A80](v13);
  v16 = (char *)&v37 - v15;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC00);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A80](v46);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = sub_1CF7AF6D0();
  v45 = v18;
  v37 = v19;
  sub_1CF7C9294();
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v50 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v49);
  v21 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
  v21(boxed_opaque_existential_0Tm, v16, AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v49, v50);
  swift_getDynamicType();
  v22 = sub_1CF7C92D0();
  v24 = v23;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  if (!static DynamicCodable.supportedType(named:)(v22, v24, a2, a3))
  {
    v51 = v21;
    v25 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v16, a2, a3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v38 + 8))(v42, v39);
      sub_1CF7B1100();
      swift_allocError();
      *(_QWORD *)v26 = v22;
      *(_QWORD *)(v26 + 8) = v24;
      *(_BYTE *)(v26 + 40) = 0;
LABEL_9:
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    }
    swift_bridgeObjectRelease();
    v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v27 = v40;
    v39(v40, v42, AssociatedTypeWitness);
    v50 = AssociatedTypeWitness;
    v28 = __swift_allocate_boxed_opaque_existential_0Tm(v49);
    v21 = v51;
    v51(v28, v27, AssociatedTypeWitness);
    __swift_project_boxed_opaque_existential_1(v49, v50);
    swift_getDynamicType();
    sub_1CF7C92D0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    v39(v16, v27, AssociatedTypeWitness);
  }
  v21((uint64_t *)v43, v16, AssociatedTypeWitness);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30B8);
  if (!swift_dynamicCast())
  {
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    swift_bridgeObjectRelease();
    sub_1CF7C2FCC((uint64_t)v47);
    sub_1CF7B1100();
    swift_allocError();
    v34 = v33;
    v33[3] = AssociatedTypeWitness;
    v35 = __swift_allocate_boxed_opaque_existential_0Tm(v33);
    v21(v35, v16, AssociatedTypeWitness);
    v34[4] = v29;
    *((_BYTE *)v34 + 40) = 1;
    goto LABEL_9;
  }
  sub_1CF796180(v47, (uint64_t)v49);
  LOBYTE(v47[0]) = 0;
  v30 = v45;
  v31 = v46;
  v32 = v41;
  sub_1CF7C8DA8();
  swift_bridgeObjectRelease();
  if (!v32)
  {
    __swift_project_boxed_opaque_existential_1(v49, v50);
    LOBYTE(v47[0]) = 1;
    sub_1CF7C8DFC();
    sub_1CF7C8DD8();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
}

uint64_t sub_1CF7C2994()
{
  sub_1CF7C8DFC();
  return sub_1CF7C8DD8();
}

uint64_t sub_1CF7C2A00()
{
  sub_1CF7C8D84();
  return sub_1CF7C8D54();
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Mercury::DynamicCodableContainerCodingKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CF7C8D00();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  Mercury::DynamicCodableContainerCodingKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CF7C8D00();
  result.value = swift_bridgeObjectRelease();
  if (v3)
  {
    if (v3 == 1)
      v5 = 1;
    else
      v5 = 2;
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 2;
  return (Mercury::DynamicCodableContainerCodingKeys_optional)intValue;
}

uint64_t DynamicCodableContainerCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t DynamicCodableContainerCodingKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x5464656C676E616DLL;
}

uint64_t DynamicCodableContainerCodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x5464656C676E616DLL;
}

uint64_t sub_1CF7C2BE4(char *a1, char *a2)
{
  return sub_1CF7C1F90(*a1, *a2);
}

uint64_t sub_1CF7C2BF0()
{
  sub_1CF7C9234();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

uint64_t sub_1CF7C2C78()
{
  sub_1CF7C88C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7C2CDC()
{
  sub_1CF7C9234();
  sub_1CF7C88C8();
  swift_bridgeObjectRelease();
  return sub_1CF7C9258();
}

Mercury::DynamicCodableContainerCodingKeys_optional sub_1CF7C2D60(Swift::String *a1)
{
  return DynamicCodableContainerCodingKeys.init(rawValue:)(*a1);
}

void sub_1CF7C2D6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x5464656C676E616DLL;
  if (*v1)
    v2 = 0x65756C6176;
  v3 = 0xEF656D614E657079;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF7C2DB4()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x5464656C676E616DLL;
}

void sub_1CF7C2DFC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1CF7C2E08()
{
  sub_1CF7AF6D0();
  return sub_1CF7C92B8();
}

uint64_t sub_1CF7C2E30()
{
  sub_1CF7AF6D0();
  return sub_1CF7C92C4();
}

uint64_t sub_1CF7C2E58@<X0>(uint64_t a1@<X8>)
{
  return static DynamicCodable.defaultEncodingValue.getter(a1);
}

uint64_t static DynamicCodable.defaultEncodingValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t static DynamicCodable.supportedType(named:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (i = v6 + 48; ; i += 24)
    {
      v9 = *(_QWORD *)(i - 16);
      if (sub_1CF7C92D0() == a1 && v10 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }
      v12 = sub_1CF7C8FC4();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
        break;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t sub_1CF7C2FCC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB30C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL static DynamicCodable.canEncode(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v13, v14);
  swift_getDynamicType();
  v8 = sub_1CF7C92D0();
  v10 = v9;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  v11 = static DynamicCodable.supportedType(named:)(v8, v10, a2, a3);
  swift_bridgeObjectRelease();
  return v11 != 0;
}

uint64_t KeyedEncodingContainerProtocol.encode<A, B>(_:using:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v10 = MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A80](v10);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(a8 + 56))(v12, a5, a8);
  sub_1CF7C90FC();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a5);
}

uint64_t KeyedDecodingContainerProtocol.decode<A, B>(using:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1CF7C9054();
  if (!v7)
  {
    (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a4, a7);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
  return result;
}

uint64_t static CompositeDynamicCodableContainer.supportedTypes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  sub_1CF7C823C(v8);
  return v7;
}

uint64_t static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a4;
  v21 = a6;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CF7C8B14();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A80](v15);
  v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, a2) == 1)
  {
    (*(void (**)(char *))(v21 + 48))(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a7, v18, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a7, 0, 1, a2);
  }
}

uint64_t CompositeDynamicCodableContainer.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CompositeDynamicCodableContainer.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CompositeDynamicCodableContainer.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75;
  uint64_t v76;

  v72 = a1;
  v4 = a2[2];
  v5 = sub_1CF7C8B14();
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  v6 = MEMORY[0x1E0C80A80](v5);
  v66 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A80](v6);
  v69 = (char *)&v58 - v9;
  v70 = a2[4];
  v68 = *(_QWORD *)(v70 - 8);
  v10 = MEMORY[0x1E0C80A80](v8);
  v63 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A80](v10);
  v67 = (char *)&v58 - v13;
  v73 = v4;
  v76 = *(_QWORD *)(v4 - 8);
  v14 = MEMORY[0x1E0C80A80](v12);
  v62 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A80](v14);
  v18 = (char *)&v58 - v17;
  v19 = MEMORY[0x1E0C80A80](v16);
  v21 = (char *)&v58 - v20;
  v22 = a2[3];
  v71 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A80](v19);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v23);
  v27 = (char *)&v58 - v26;
  v28 = a2[5];
  v29 = v2;
  if (static DynamicCodable.canEncode(value:)(v2, v22, v28))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v21, v2, v73);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v21, v22, v28);
    sub_1CF7C87C0();
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v22);
  }
  v59 = v25;
  v60 = v18;
  v32 = v69;
  v31 = v70;
  v61 = v21;
  v33 = v73;
  v34 = a2[6];
  if (static DynamicCodable.canEncode(value:)(v2, v70, v34))
  {
    v35 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v61, v2, v33);
    v36 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 56))(v35, v31, v34);
    sub_1CF7C87C0();
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v36, v31);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v2, v22, v28);
  v37 = v76;
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  if (v38(v32, 1, v33) == 1)
  {
    v39 = v65;
    v40 = *(void (**)(char *, uint64_t))(v64 + 8);
    v40(v32, v65);
    v41 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v29, v31, v34);
    if (v38(v41, 1, v33) == 1)
    {
      v40(v41, v39);
      sub_1CF7B1100();
      swift_allocError();
      v43 = v42;
      v75 = v33;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v74);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v76 + 16))(boxed_opaque_existential_0Tm, v29, v33);
      __swift_project_boxed_opaque_existential_1(v74, v75);
      swift_getDynamicType();
      v45 = sub_1CF7C92D0();
      v47 = v46;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
      *(_QWORD *)v43 = v45;
      *(_QWORD *)(v43 + 8) = v47;
      *(_BYTE *)(v43 + 40) = 0;
      return swift_willThrow();
    }
    v53 = v41;
    v54 = v76;
    v55 = v62;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v62, v53, v33);
    v56 = v61;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v61, v55, v33);
    v57 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 56))(v56, v31, v34);
    sub_1CF7C87C0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v31);
    v51 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    v52 = v55;
  }
  else
  {
    v48 = v60;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v60, v32, v33);
    v49 = v61;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v61, v48, v33);
    v50 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v49, v22, v28);
    sub_1CF7C87C0();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v22);
    v51 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
    v52 = v48;
  }
  return v51(v52, v33);
}

void CompositeDynamicCodableContainer.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  _BYTE v33[48];
  id v34;

  v27 = a5;
  v28 = a3;
  v30 = a6;
  v26 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A80](v10);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v18;
  v29 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A80](v15);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF78D06C(v19, (uint64_t)v33);
  sub_1CF7C8A18();
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a2);
LABEL_6:
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30, v21, v31);
    return;
  }
  v34 = v6;
  v22 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DF00);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_9;
  }
  if ((v33[40] & 1) == 0)
  {

    sub_1CF7C3C94((uint64_t)v33);
    sub_1CF78D06C(a1, (uint64_t)v32);
    v24 = v27;
    v23 = v28;
    sub_1CF7C8A18();
    (*(void (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v23);

    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  sub_1CF7C3C94((uint64_t)v33);
LABEL_9:

}

uint64_t sub_1CF7C3C30(uint64_t *a1)
{
  return static CompositeDynamicCodableContainer.supportedTypes.getter((uint64_t)a1, a1[3], a1[4], a1[5], a1[6]);
}

uint64_t sub_1CF7C3C3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_1CF7C3C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CompositeDynamicCodableContainer.init(wrappedValue:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_1CF7C3C5C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  CompositeDynamicCodableContainer.init(from:)(a1, a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_1CF7C3C80(uint64_t a1, _QWORD *a2)
{
  return CompositeDynamicCodableContainer.encode(to:)(a1, a2);
}

uint64_t sub_1CF7C3C94(uint64_t a1)
{
  destroy for DynamicCodableError(a1);
  return a1;
}

unint64_t sub_1CF7C3CC4()
{
  unint64_t result;

  result = qword_1EFBB34B0;
  if (!qword_1EFBB34B0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DynamicCodableContainerCodingKeys, &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBB34B0);
  }
  return result;
}

unint64_t sub_1CF7C3D0C()
{
  unint64_t result;

  result = qword_1ED56EBD8;
  if (!qword_1ED56EBD8)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DynamicCodableContainerCodingKeys, &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED56EBD8);
  }
  return result;
}

unint64_t sub_1CF7C3D54()
{
  unint64_t result;

  result = qword_1ED56EBD0;
  if (!qword_1ED56EBD0)
  {
    result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for DynamicCodableContainerCodingKeys, &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED56EBD0);
  }
  return result;
}

uint64_t sub_1CF7C3D98(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CompositeDynamicCodableContainer<A, B, C>);
  result = MEMORY[0x1D17D55BC](&protocol conformance descriptor for CompositeDynamicCodableContainer<A, B, C>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for DynamicCodableError(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  else
    return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    swift_bridgeObjectRetain();
    v6 = 0;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 40) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicCodableError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DynamicCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CF7C4094(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CF7C40B0(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableError()
{
  return &type metadata for DynamicCodableError;
}

uint64_t storeEnumTagSinglePayload for DynamicCodableContainerCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF7C4134 + 4 * byte_1CF7CCBA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF7C4168 + 4 * asc_1CF7CCBA0[v4]))();
}

uint64_t sub_1CF7C4168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7C4170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF7C4178);
  return result;
}

uint64_t sub_1CF7C4184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF7C418CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF7C4190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF7C4198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableContainerCodingKeys()
{
  return &type metadata for DynamicCodableContainerCodingKeys;
}

uint64_t dispatch thunk of static DynamicCodable.supportedTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue(forUnencodableValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DynamicCodable.init(wrappedValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DynamicCodable.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_1CF7C41DC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1CF7C4248(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1CF7C42B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1CF7C42C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1CF7C42F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1CF7C4328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1CF7C4358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1CF7C4388(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CF7C4438 + 4 * byte_1CF7CCBAA[(v7 - 1)]))();
}

void sub_1CF7C4488(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for CompositeDynamicCodableContainer()
{
  JUMPOUT(0x1D17D5550);
}

uint64_t static Error<>.unknown.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(-1, 0xD00000000000001ALL, 0x80000001CF7CE910, a1, a2);
}

uint64_t static Error<>.xpcError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(3, 0xD00000000000003CLL, 0x80000001CF7CEF60, a1, a2);
}

uint64_t _Error.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v8 = objc_msgSend(a1, sel_domain);
  v9 = sub_1CF7C8850();
  v11 = v10;

  if (v9 == sub_1CF7C8430() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v14 = sub_1CF7C8FC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_8:
    v16 = objc_msgSend(a1, sel_code);
    v17 = objc_msgSend(a1, sel_userInfo);
    v18 = sub_1CF7C8778();

    v19 = sub_1CF779788((uint64_t)v16, a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v19, v18, a2, a3);
    v15 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v15, 1, a2);
  }
  v15 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v15, 1, a2);
}

id static _Error<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void *v15;
  void *v16;
  id v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A80](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v7);
  v11 = (char *)&v20 - v10;
  v12 = sub_1CF7C8448();
  v13 = sub_1CF7C8448();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v11, a1, a3);
  v14(v9, a2, a3);
  if (v12 == v13)
  {
    sub_1CF7C843C();
    v15 = (void *)sub_1CF7C876C();
    swift_bridgeObjectRelease();
    sub_1CF7C843C();
    v16 = (void *)sub_1CF7C876C();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v15, sel_isEqual_, v16);

  }
  else
  {
    v17 = 0;
  }
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, a3);
  v18(v11, a3);
  return v17;
}

uint64_t _Error<>.hash(into:)()
{
  sub_1CF7C8448();
  return sub_1CF7C9240();
}

uint64_t _Error<>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a3;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A80](v10);
  v14 = (char *)&v37 - v13;
  sub_1CF79607C(0, (unint64_t *)&qword_1EFBB2A68);
  sub_1CF78D06C(a1, (uint64_t)&v46);
  v15 = NSError.init(from:)(&v46);
  if (v5)
  {
    v16 = a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v16);
  }
  v40 = a4;
  v41 = 0;
  v37 = v12;
  v38 = v14;
  v42 = v4;
  v43 = a1;
  v39 = v9;
  v44 = v15;
  v18 = objc_msgSend(v15, sel_domain);
  v19 = sub_1CF7C8850();
  v21 = v20;

  v22 = v45;
  if (v19 == sub_1CF7C8430() && v21 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v25 = sub_1CF7C8FC4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      v26 = (uint64_t)v37;
      Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x80000001CF7CEFA0, a2, v22);
      v46 = 0;
      v47 = 0xE000000000000000;
      sub_1CF7C8BA4();
      sub_1CF7C88D4();
      v48 = a2;
      swift_getMetatypeMetadata();
      sub_1CF7C888C();
      sub_1CF7C88D4();
      swift_bridgeObjectRelease();
      sub_1CF7C88D4();
      v27 = v38;
      Error<>.init(_:_:)(v26, v46, v47, a2, v22);
      v28 = sub_1CF7C8FA0();
      v29 = v43;
      v30 = v44;
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v27, a2);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v36, v27, a2);
      }
      swift_willThrow();

      v16 = v29;
      return __swift_destroy_boxed_opaque_existential_1Tm(v16);
    }
  }
  v31 = v44;
  v32 = objc_msgSend(v44, sel_code);
  v33 = objc_msgSend(v31, sel_userInfo);
  v34 = sub_1CF7C8778();

  v35 = sub_1CF779788((uint64_t)v32, a2, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24))(v35, v34, a2, v22);

  return __swift_destroy_boxed_opaque_existential_1Tm(v43);
}

void _Error<>.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a2);
  v8 = sub_1CF7C8FA0();
  if (v8)
  {
    v9 = (void *)v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a2);
  }
  else
  {
    v9 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a2);
  }
  v11 = (void *)sub_1CF7C84FC();

  NSError.encode(to:)(a1);
}

uint64_t _Error<>.errorDescription.getter()
{
  return sub_1CF7C4EB8();
}

uint64_t _Error<>.failureReason.getter()
{
  return sub_1CF7C4EB8();
}

uint64_t sub_1CF7C4EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = sub_1CF7C843C();
  v1 = sub_1CF7C8850();
  if (!*(_QWORD *)(v0 + 16) || (v3 = sub_1CF779644(v1, v2), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1CF778DDC(*(_QWORD *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_9:
    sub_1CF778FFC((uint64_t)&v7, &qword_1ED56DF38);
    return 0;
  }
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

uint64_t _Error<>.recoverySuggestion.getter()
{
  return sub_1CF7C4EB8();
}

uint64_t _Error<>.helpAnchor.getter()
{
  return sub_1CF7C4EB8();
}

void sub_1CF7C4FB0()
{
  _Error.init(code:userInfo:)();
}

void _Error.init(code:userInfo:)()
{
  sub_1CF7C8CA0();
  __break(1u);
}

uint64_t _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_1CF779788(a1, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v7, a2, a3, a4);
}

BOOL static _Error.~= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A80](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = sub_1CF7C8FA0();
  if (v7)
  {
    v8 = (void *)v7;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  }
  else
  {
    v8 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9, v6, a3);
  }
  v10 = static _Error.~= infix(_:_:)();

  return v10;
}

id sub_1CF7C521C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _HandlerBox();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _Error<>.recoveryOptions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = sub_1CF7C843C();
  v1 = sub_1CF7C8850();
  if (!*(_QWORD *)(v0 + 16) || (v3 = sub_1CF779644(v1, v2), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1CF778DDC(*(_QWORD *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_7:
    sub_1CF778FFC((uint64_t)&v7, &qword_1ED56DF38);
    return MEMORY[0x1E0DEE9D8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DE70);
  if (swift_dynamicCast())
    return v6;
  return MEMORY[0x1E0DEE9D8];
}

uint64_t _Error<>.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  objc_class *v26;
  char *v27;
  char *v28;
  id v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  objc_super v49;
  _QWORD v50[3];
  objc_class *v51;

  v5 = v4;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A80](a1);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CF7C843C();
  v14 = sub_1CF7C8850();
  if (!*(_QWORD *)(v13 + 16) || (v16 = sub_1CF779644(v14, v15), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1CF778DDC(*(_QWORD *)(v13 + 56) + 32 * v16, (uint64_t)v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (uint64_t)v51;
  if (!v51)
  {
LABEL_8:
    v32 = sub_1CF7C84CC();
    return a2(v32 & 1);
  }
  v46 = a1;
  v19 = __swift_project_boxed_opaque_existential_1(v50, (uint64_t)v51);
  v45 = (uint64_t)&v45;
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A80](v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v22);
  v23 = sub_1CF7C8FB8();
  v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  v25 = (void *)v23;
  v24(v22, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  if ((objc_msgSend(v25, sel_respondsToSelector_, sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  v26 = (objc_class *)type metadata accessor for _HandlerBox();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = &v27[OBJC_IVAR____TtC7MercuryP33_2B1830E49151A2D290BADAC81D16B73411_HandlerBox_handler];
  *(_QWORD *)v28 = a2;
  *((_QWORD *)v28 + 1) = a3;
  v49.receiver = v27;
  v49.super_class = v26;
  swift_unknownObjectRetain();
  swift_retain();
  v29 = objc_msgSendSuper2(&v49, sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a4);
  v30 = sub_1CF7C8FA0();
  if (v30)
  {
    v31 = (void *)v30;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
  else
  {
    v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v34, v12, a4);
  }
  v51 = v26;
  v50[0] = v29;
  v35 = v29;
  v36 = (void *)sub_1CF7C84FC();
  sub_1CF779038((uint64_t)v50, (uint64_t)v47, &qword_1ED56DF38);
  v37 = v48;
  if (v48)
  {
    v38 = __swift_project_boxed_opaque_existential_1(v47, v48);
    v39 = v25;
    v40 = *(_QWORD *)(v37 - 8);
    MEMORY[0x1E0C80A80](v38);
    v42 = (char *)&v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v40 + 16))(v42);
    v43 = sub_1CF7C8FB8();
    v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v25 = v39;
    v44(v42, v37);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }
  else
  {
    v43 = 0;
  }
  objc_msgSend(v25, sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_, v36, v46, v43, sel_invoke::, 0);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return sub_1CF778FFC((uint64_t)v50, &qword_1ED56DF38);
}

id _Error<>.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A80](a1);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CF7C843C();
  v10 = sub_1CF7C8850();
  if (!*(_QWORD *)(v9 + 16) || (v12 = sub_1CF779644(v10, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1CF778DDC(*(_QWORD *)(v9 + 56) + 32 * v12, (uint64_t)v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v30;
  if (!v30)
    return 0;
  v28 = a1;
  v15 = __swift_project_boxed_opaque_existential_1(v29, v30);
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A80](v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  v19 = (void *)sub_1CF7C8FB8();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  if ((objc_msgSend(v19, sel_respondsToSelector_, sel_attemptRecoveryFromError_optionIndex_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  swift_unknownObjectRetain();
  v20 = sub_1CF7C8FA0();
  v21 = v28;
  if (v20)
  {
    v22 = (void *)v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }
  else
  {
    v22 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v25, v8, a2);
  }
  v26 = (void *)sub_1CF7C84FC();
  v23 = objc_msgSend(v19, sel_attemptRecoveryFromError_optionIndex_, v26, v21);
  swift_unknownObjectRelease_n();

  return v23;
}

uint64_t static Error<>.unimplemented.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(1, 0xD00000000000003ALL, 0x80000001CF7CF0E0, a1, a2);
}

uint64_t static Error<>.permissionDenied.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(2, 0xD000000000000047, 0x80000001CF7CF120, a1, a2);
}

uint64_t sub_1CF7C59D0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEB8);
  v6 = sub_1CF7C8CD0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1CF779634(v24, v35);
      }
      else
      {
        sub_1CF778DDC((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1CF7C9234();
      sub_1CF7C88C8();
      result = sub_1CF7C9258();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1CF779634(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CF7C5CCC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  char v40[8];

  v3 = v2;
  v5 = sub_1CF7C861C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A80](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3530);
  v39 = a2;
  v10 = sub_1CF7C8CD0();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v38 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v37 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    while (1)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_34;
        v23 = v38[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_34;
          v23 = v38[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_34:
              swift_release();
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v9 + 32);
                if (v34 >= 64)
                  bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v34;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v18 >= v37)
                  goto LABEL_34;
                v23 = v38[v18];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v18 = v24;
          }
        }
LABEL_21:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v6 + 72);
      v26 = *(_QWORD *)(v9 + 48) + v25 * v21;
      if ((v39 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v26, v5);
        sub_1CF78D244(*(_QWORD *)(v9 + 56) + 8 * v21, (uint64_t)v40, &qword_1EFBB2720);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
        sub_1CF779038(*(_QWORD *)(v9 + 56) + 8 * v21, (uint64_t)v40, &qword_1EFBB2720);
      }
      sub_1CF7C747C();
      result = sub_1CF7C87D8();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v16 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v25 * v19, v8, v5);
      result = sub_1CF78D244((uint64_t)v40, *(_QWORD *)(v11 + 56) + 8 * v19, &qword_1EFBB2720);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1CF7C6058(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for RemoteDevice.Identity();
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  MEMORY[0x1E0C80A80](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB26A0);
  v42 = a2;
  v9 = sub_1CF7C8CD0();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v39 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = v2;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38)
      break;
    v22 = v39;
    v23 = v39[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_34;
      v23 = v39[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v39[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v38)
              goto LABEL_34;
            v23 = v39[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v42 & 1) != 0)
    {
      sub_1CF788D08(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_1CF7B6134(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    sub_1CF7C9234();
    sub_1CF7C861C();
    sub_1CF7C747C();
    sub_1CF7C87E4();
    swift_bridgeObjectRetain();
    sub_1CF7C88C8();
    swift_bridgeObjectRelease();
    result = sub_1CF7C9258();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_1CF788D08((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v37;
  v22 = v39;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1CF7C6408(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3220);
  result = sub_1CF7C8CD0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_34;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_34;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_43;
                if (v8 >= v29)
                  goto LABEL_34;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
      v20 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v15);
      if ((a2 & 1) != 0)
        sub_1CF796180(v20, (uint64_t)v31);
      else
        sub_1CF78D06C((uint64_t)v20, (uint64_t)v31);
      sub_1CF7C9234();
      sub_1CF7C9240();
      result = sub_1CF7C9258();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v19;
      result = sub_1CF796180(v31, *(_QWORD *)(v7 + 56) + 40 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_1CF7C66E4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC0);
  v38 = a2;
  v6 = sub_1CF7C8CD0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v20);
    v30 = *v29;
    v31 = v29[1];
    v33 = v29[2];
    v32 = v29[3];
    v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1CF7C9234();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56DE10);
    sub_1CF7C888C();
    sub_1CF7C88C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1CF7C88C8();
    swift_bridgeObjectRelease();
    result = sub_1CF7C9258();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * v17);
    *v18 = v30;
    v18[1] = v31;
    v18[2] = v33;
    v18[3] = v32;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v39;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1CF7C6A58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEB8);
  v2 = *v0;
  v3 = sub_1CF7C8CC4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1CF778DDC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1CF779634(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CF7C6C3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  char v26[8];

  v1 = v0;
  v2 = sub_1CF7C861C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3530);
  v6 = *v0;
  v7 = sub_1CF7C8CC4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v23 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v24 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v25)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v25)
        goto LABEL_26;
      v21 = *(_QWORD *)(v24 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v2);
    v19 = 8 * v17;
    sub_1CF779038(*(_QWORD *)(v6 + 56) + v19, (uint64_t)v26, &qword_1EFBB2720);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v2);
    result = (void *)sub_1CF78D244((uint64_t)v26, *(_QWORD *)(v8 + 56) + v19, &qword_1EFBB2720);
  }
  v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v23;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v25)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CF7C6E90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for RemoteDevice.Identity();
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A80](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBB26A0);
  v5 = *v0;
  v6 = sub_1CF7C8CC4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v26 + 72) * v18;
    sub_1CF7B6134(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    sub_1CF788D08((uint64_t)v4, *(_QWORD *)(v7 + 48) + v19);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CF7C70B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3220);
  v2 = *v0;
  v3 = sub_1CF7C8CC4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_1CF78D06C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1CF796180(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CF7C7274()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56DEC0);
  v2 = *v0;
  v3 = sub_1CF7C8CC4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    v20 = 16 * v15;
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v20);
    *(_OWORD *)v21 = *(_OWORD *)v17;
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v20) = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1CF7C7440(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  return sub_1CF778B5C(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for _HandlerBox()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t sub_1CF7C747C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBB2730;
  if (!qword_1EFBB2730)
  {
    v1 = sub_1CF7C861C();
    result = MEMORY[0x1D17D55BC](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBB2730);
  }
  return result;
}

uint64_t static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *boxed_opaque_existential_0Tm;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v18 = a2;
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A80](AssociatedTypeWitness);
  v10 = (char *)&v18 - v9;
  a4[3] = v8;
  a4[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a4);
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  v12(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  v13 = v19;
  sub_1CF7C903C();
  v12((uint64_t *)v10, a1, AssociatedTypeWitness);
  if (!v13)
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000015;
    v21 = 0x80000001CF7CF210;
    sub_1CF7C92A0();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB3538);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  v14(v10, AssociatedTypeWitness);
  sub_1CF7C8C04();
  v15 = *MEMORY[0x1E0DEC448];
  v16 = sub_1CF7C8C1C();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a4, v15, v16);
}

uint64_t static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t inited;
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_0Tm;

  sub_1CF7C903C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(inited + 56) = AssociatedTypeWitness;
  *(_QWORD *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  sub_1CF7C80A4(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a3 = a1;
  if (!a2)
  {
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C92D0();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CF7C8C04();
  v4 = *MEMORY[0x1E0DEC460];
  v5 = sub_1CF7C8C1C();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a3, v4, v5);
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v11;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1CF7C8E20();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v11 = sub_1CF7C8E2C();
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v9 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(v9 + 16) = 0x207865646E49;
  *(_QWORD *)(v9 + 24) = 0xE600000000000000;
  *(_QWORD *)(v9 + 32) = v11;
  *(_BYTE *)(v9 + 40) = 0;
  sub_1CF7C80A4(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1CF7C8E20();
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t inited;
  uint64_t v10;
  uint64_t v13;

  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_1CF7C8E20();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  v13 = sub_1CF7C8E2C();
  sub_1CF7C8E14();
  sub_1CF7C88D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = &type metadata for CodableIndexKey;
  *(_QWORD *)(inited + 64) = sub_1CF788CC4();
  v10 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(v10 + 16) = 0x207865646E49;
  *(_QWORD *)(v10 + 24) = 0xE600000000000000;
  *(_QWORD *)(v10 + 32) = v13;
  *(_BYTE *)(v10 + 40) = 0;
  sub_1CF7C80A4(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_1CF7C8E20();
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  *a4 = a1;
  sub_1CF778DDC(a2, (uint64_t)v9);
  if (!a3)
  {
    sub_1CF7C8BA4();
    swift_bridgeObjectRelease();
    sub_1CF7C92D0();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    swift_getDynamicType();
    sub_1CF7C92D0();
    sub_1CF7C88D4();
    swift_bridgeObjectRelease();
    sub_1CF7C88D4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBB2660);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  swift_bridgeObjectRetain();
  sub_1CF7C8C04();
  v6 = *MEMORY[0x1E0DEC450];
  v7 = sub_1CF7C8C1C();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(a4, v6, v7);
}

uint64_t static DecodingError.valueNotFoundError<A>(expectingValueOfType:forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t inited;
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_0Tm;

  sub_1CF7C903C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED56EC08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CF7CA390;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(inited + 56) = AssociatedTypeWitness;
  *(_QWORD *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a2, AssociatedTypeWitness);
  sub_1CF7C80A4(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF7C80A4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1CF7B41B4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED56EC10);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

uint64_t sub_1CF7C8218()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF7C823C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1CF7B41C8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[3 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[3 * v8] && (unint64_t)v10 < a1 + 32 + 24 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CF7C8CE8();
  __break(1u);
  return result;
}

void connect_loopback_sync_cold_1()
{
  __assert_rtn("connect_loopback_sync", "loopback.m", 53, "device");
}

void __connect_loopback_sync_block_invoke_cold_1()
{
  __assert_rtn("connect_loopback_sync_block_invoke", "loopback.m", 59, "remote_device_get_state(dev) == REMOTE_DEVICE_STATE_CONNECTED");
}

uint64_t sub_1CF7C83DC()
{
  return MEMORY[0x1E0CADD50]();
}

uint64_t sub_1CF7C83E8()
{
  return MEMORY[0x1E0CADD68]();
}

uint64_t sub_1CF7C83F4()
{
  return MEMORY[0x1E0CADD70]();
}

uint64_t sub_1CF7C8400()
{
  return MEMORY[0x1E0CADE20]();
}

uint64_t sub_1CF7C840C()
{
  return MEMORY[0x1E0CADE70]();
}

uint64_t sub_1CF7C8418()
{
  return MEMORY[0x1E0CADE80]();
}

uint64_t sub_1CF7C8424()
{
  return MEMORY[0x1E0CADE90]();
}

uint64_t sub_1CF7C8430()
{
  return MEMORY[0x1E0CAE6B8]();
}

uint64_t sub_1CF7C843C()
{
  return MEMORY[0x1E0CAE6C0]();
}

uint64_t sub_1CF7C8448()
{
  return MEMORY[0x1E0CAE6C8]();
}

uint64_t sub_1CF7C8454()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1CF7C8460()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1CF7C846C()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1CF7C8478()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1CF7C8484()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1CF7C8490()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1CF7C849C()
{
  return MEMORY[0x1E0CAEB00]();
}

uint64_t sub_1CF7C84A8()
{
  return MEMORY[0x1E0CAEB08]();
}

uint64_t sub_1CF7C84B4()
{
  return MEMORY[0x1E0CAEB10]();
}

uint64_t sub_1CF7C84C0()
{
  return MEMORY[0x1E0CAEB18]();
}

uint64_t sub_1CF7C84CC()
{
  return MEMORY[0x1E0CAF2E0]();
}

uint64_t sub_1CF7C84D8()
{
  return MEMORY[0x1E0CAF548]();
}

uint64_t sub_1CF7C84E4()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1CF7C84F0()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t sub_1CF7C84FC()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1CF7C8508()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1CF7C8514()
{
  return MEMORY[0x1E0CAFB50]();
}

uint64_t sub_1CF7C8520()
{
  return MEMORY[0x1E0CAFB58]();
}

uint64_t sub_1CF7C852C()
{
  return MEMORY[0x1E0CAFD30]();
}

uint64_t sub_1CF7C8538()
{
  return MEMORY[0x1E0CAFEE0]();
}

uint64_t sub_1CF7C8544()
{
  return MEMORY[0x1E0CAFEE8]();
}

uint64_t sub_1CF7C8550()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_1CF7C855C()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1CF7C8568()
{
  return MEMORY[0x1E0CB00B0]();
}

uint64_t sub_1CF7C8574()
{
  return MEMORY[0x1E0CB00E8]();
}

uint64_t sub_1CF7C8580()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1CF7C858C()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1CF7C8598()
{
  return MEMORY[0x1E0CB03B8]();
}

uint64_t sub_1CF7C85A4()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t sub_1CF7C85B0()
{
  return MEMORY[0x1E0CB07B0]();
}

uint64_t sub_1CF7C85BC()
{
  return MEMORY[0x1E0CB07C0]();
}

uint64_t sub_1CF7C85C8()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1CF7C85D4()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t sub_1CF7C85E0()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1CF7C85EC()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1CF7C85F8()
{
  return MEMORY[0x1E0CB0970]();
}

uint64_t sub_1CF7C8604()
{
  return MEMORY[0x1E0CB0978]();
}

uint64_t sub_1CF7C8610()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1CF7C861C()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1CF7C8628()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1CF7C8634()
{
  return MEMORY[0x1E0CB14D8]();
}

uint64_t sub_1CF7C8640()
{
  return MEMORY[0x1E0CB1578]();
}

uint64_t sub_1CF7C864C()
{
  return MEMORY[0x1E0CB1598]();
}

uint64_t sub_1CF7C8658()
{
  return MEMORY[0x1E0CB15A8]();
}

uint64_t sub_1CF7C8664()
{
  return MEMORY[0x1E0CB16B0]();
}

uint64_t sub_1CF7C8670()
{
  return MEMORY[0x1E0CB16C0]();
}

uint64_t sub_1CF7C867C()
{
  return MEMORY[0x1E0DF2080]();
}

uint64_t sub_1CF7C8688()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1CF7C8694()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1CF7C86A0()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1CF7C86AC()
{
  return MEMORY[0x1E0DEF368]();
}

uint64_t sub_1CF7C86B8()
{
  return MEMORY[0x1E0DF2010]();
}

uint64_t sub_1CF7C86C4()
{
  return MEMORY[0x1E0DEF398]();
}

uint64_t sub_1CF7C86D0()
{
  return MEMORY[0x1E0DF2040]();
}

uint64_t sub_1CF7C86DC()
{
  return MEMORY[0x1E0DEF3A0]();
}

uint64_t sub_1CF7C86E8()
{
  return MEMORY[0x1E0DEF3A8]();
}

uint64_t sub_1CF7C86F4()
{
  return MEMORY[0x1E0DEF3B0]();
}

uint64_t sub_1CF7C8700()
{
  return MEMORY[0x1E0DEF3C0]();
}

uint64_t sub_1CF7C870C()
{
  return MEMORY[0x1E0DEF3E8]();
}

uint64_t sub_1CF7C8718()
{
  return MEMORY[0x1E0C95EA8]();
}

uint64_t sub_1CF7C8724()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1CF7C8730()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1CF7C873C()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1CF7C8748()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1CF7C8754()
{
  return MEMORY[0x1E0DE9DD0]();
}

uint64_t sub_1CF7C8760()
{
  return MEMORY[0x1E0DE9DF0]();
}

uint64_t sub_1CF7C876C()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1CF7C8778()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1CF7C8784()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1CF7C8790()
{
  return MEMORY[0x1E0DE9EC0]();
}

uint64_t sub_1CF7C879C()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1CF7C87A8()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1CF7C87B4()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1CF7C87C0()
{
  return MEMORY[0x1E0DEA0F0]();
}

uint64_t sub_1CF7C87CC()
{
  return MEMORY[0x1E0DEA150]();
}

uint64_t sub_1CF7C87D8()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1CF7C87E4()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1CF7C87F0()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t sub_1CF7C87FC()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1CF7C8808()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1CF7C8814()
{
  return MEMORY[0x1E0CB1850]();
}

uint64_t sub_1CF7C8820()
{
  return MEMORY[0x1E0CB1858]();
}

uint64_t sub_1CF7C882C()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1CF7C8838()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1CF7C8844()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1CF7C8850()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1CF7C885C()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1CF7C8868()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1CF7C8874()
{
  return MEMORY[0x1E0CB1A08]();
}

uint64_t sub_1CF7C8880()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1CF7C888C()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1CF7C8898()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1CF7C88A4()
{
  return MEMORY[0x1E0DEA680]();
}

uint64_t sub_1CF7C88B0()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t sub_1CF7C88BC()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1CF7C88C8()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1CF7C88D4()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1CF7C88E0()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1CF7C88EC()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1CF7C88F8()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1CF7C8904()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1CF7C8910()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1CF7C891C()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1CF7C8928()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1CF7C8934()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1CF7C8940()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1CF7C894C()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t sub_1CF7C8958()
{
  return MEMORY[0x1E0DEABA0]();
}

uint64_t sub_1CF7C8964()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_1CF7C8970()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t sub_1CF7C897C()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t sub_1CF7C8988()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t sub_1CF7C8994()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_1CF7C89A0()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1CF7C89AC()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1CF7C89B8()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1CF7C89C4()
{
  return MEMORY[0x1E0DEADD8]();
}

uint64_t sub_1CF7C89D0()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1CF7C89DC()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1CF7C89E8()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1CF7C89F4()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1CF7C8A00()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1CF7C8A0C()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1CF7C8A18()
{
  return MEMORY[0x1E0DEB120]();
}

uint64_t sub_1CF7C8A24()
{
  return MEMORY[0x1E0DEB4A0]();
}

uint64_t sub_1CF7C8A30()
{
  return MEMORY[0x1E0CB1CA8]();
}

uint64_t sub_1CF7C8A3C()
{
  return MEMORY[0x1E0CB1CB8]();
}

uint64_t sub_1CF7C8A48()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1CF7C8A54()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1CF7C8A60()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1CF7C8A6C()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1CF7C8A78()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1CF7C8A84()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t sub_1CF7C8A90()
{
  return MEMORY[0x1E0CB1E70]();
}

uint64_t sub_1CF7C8A9C()
{
  return MEMORY[0x1E0DEF800]();
}

uint64_t sub_1CF7C8AA8()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1CF7C8AB4()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1CF7C8AC0()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1CF7C8ACC()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t sub_1CF7C8AD8()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1CF7C8AE4()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1CF7C8AF0()
{
  return MEMORY[0x1E0CB1FF0]();
}

uint64_t sub_1CF7C8AFC()
{
  return MEMORY[0x1E0CB20E0]();
}

uint64_t sub_1CF7C8B08()
{
  return MEMORY[0x1E0DF22B8]();
}

uint64_t sub_1CF7C8B14()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1CF7C8B20()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1CF7C8B2C()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1CF7C8B38()
{
  return MEMORY[0x1E0CB2540]();
}

uint64_t sub_1CF7C8B44()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t sub_1CF7C8B50()
{
  return MEMORY[0x1E0DEBDF0]();
}

uint64_t sub_1CF7C8B5C()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t sub_1CF7C8B68()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t sub_1CF7C8B74()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t sub_1CF7C8B80()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1CF7C8B8C()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1CF7C8B98()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1CF7C8BA4()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1CF7C8BB0()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1CF7C8BBC()
{
  return MEMORY[0x1E0DEC3D0]();
}

uint64_t sub_1CF7C8BC8()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1CF7C8BD4()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1CF7C8BE0()
{
  return MEMORY[0x1E0DEC430]();
}

uint64_t sub_1CF7C8BEC()
{
  return MEMORY[0x1E0DEC438]();
}

uint64_t sub_1CF7C8BF8()
{
  return MEMORY[0x1E0DEC440]();
}

uint64_t sub_1CF7C8C04()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1CF7C8C10()
{
  return MEMORY[0x1E0DEC488]();
}

uint64_t sub_1CF7C8C1C()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1CF7C8C28()
{
  return MEMORY[0x1E0DEC4B8]();
}

uint64_t sub_1CF7C8C34()
{
  return MEMORY[0x1E0DEC4E0]();
}

uint64_t sub_1CF7C8C40()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1CF7C8C4C()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1CF7C8C58()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1CF7C8C64()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1CF7C8C70()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1CF7C8C7C()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1CF7C8C88()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t sub_1CF7C8C94()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1CF7C8CA0()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1CF7C8CAC()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1CF7C8CB8()
{
  return MEMORY[0x1E0DECD20]();
}

uint64_t sub_1CF7C8CC4()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1CF7C8CD0()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1CF7C8CDC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1CF7C8CE8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1CF7C8CF4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1CF7C8D00()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1CF7C8D0C()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1CF7C8D18()
{
  return MEMORY[0x1E0DECFB8]();
}

uint64_t sub_1CF7C8D24()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1CF7C8D30()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1CF7C8D3C()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t sub_1CF7C8D48()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1CF7C8D54()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1CF7C8D60()
{
  return MEMORY[0x1E0DED010]();
}

uint64_t sub_1CF7C8D6C()
{
  return MEMORY[0x1E0DED030]();
}

uint64_t sub_1CF7C8D78()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1CF7C8D84()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1CF7C8D90()
{
  return MEMORY[0x1E0DED058]();
}

uint64_t sub_1CF7C8D9C()
{
  return MEMORY[0x1E0DED0E8]();
}

uint64_t sub_1CF7C8DA8()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1CF7C8DB4()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1CF7C8DC0()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t sub_1CF7C8DCC()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1CF7C8DD8()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1CF7C8DE4()
{
  return MEMORY[0x1E0DED140]();
}

uint64_t sub_1CF7C8DF0()
{
  return MEMORY[0x1E0DED160]();
}

uint64_t sub_1CF7C8DFC()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1CF7C8E08()
{
  return MEMORY[0x1E0DED180]();
}

uint64_t sub_1CF7C8E14()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1CF7C8E20()
{
  return MEMORY[0x1E0DED230]();
}

uint64_t sub_1CF7C8E2C()
{
  return MEMORY[0x1E0DED238]();
}

uint64_t sub_1CF7C8E38()
{
  return MEMORY[0x1E0DED2C8]();
}

uint64_t sub_1CF7C8E44()
{
  return MEMORY[0x1E0DED2D0]();
}

uint64_t sub_1CF7C8E50()
{
  return MEMORY[0x1E0DED2D8]();
}

uint64_t sub_1CF7C8E5C()
{
  return MEMORY[0x1E0DED2E8]();
}

uint64_t sub_1CF7C8E68()
{
  return MEMORY[0x1E0DED2F0]();
}

uint64_t sub_1CF7C8E74()
{
  return MEMORY[0x1E0DED2F8]();
}

uint64_t sub_1CF7C8E80()
{
  return MEMORY[0x1E0DED318]();
}

uint64_t sub_1CF7C8E8C()
{
  return MEMORY[0x1E0DED340]();
}

uint64_t sub_1CF7C8E98()
{
  return MEMORY[0x1E0DED350]();
}

uint64_t sub_1CF7C8EA4()
{
  return MEMORY[0x1E0DED358]();
}

uint64_t sub_1CF7C8EB0()
{
  return MEMORY[0x1E0DED400]();
}

uint64_t sub_1CF7C8EBC()
{
  return MEMORY[0x1E0DED408]();
}

uint64_t sub_1CF7C8EC8()
{
  return MEMORY[0x1E0DED410]();
}

uint64_t sub_1CF7C8ED4()
{
  return MEMORY[0x1E0DED418]();
}

uint64_t sub_1CF7C8EE0()
{
  return MEMORY[0x1E0DED420]();
}

uint64_t sub_1CF7C8EEC()
{
  return MEMORY[0x1E0DED428]();
}

uint64_t sub_1CF7C8EF8()
{
  return MEMORY[0x1E0DED430]();
}

uint64_t sub_1CF7C8F04()
{
  return MEMORY[0x1E0DED438]();
}

uint64_t sub_1CF7C8F10()
{
  return MEMORY[0x1E0DED440]();
}

uint64_t sub_1CF7C8F1C()
{
  return MEMORY[0x1E0DED448]();
}

uint64_t sub_1CF7C8F28()
{
  return MEMORY[0x1E0DED450]();
}

uint64_t sub_1CF7C8F34()
{
  return MEMORY[0x1E0DED458]();
}

uint64_t sub_1CF7C8F40()
{
  return MEMORY[0x1E0DED460]();
}

uint64_t sub_1CF7C8F4C()
{
  return MEMORY[0x1E0DED468]();
}

uint64_t sub_1CF7C8F58()
{
  return MEMORY[0x1E0DED470]();
}

uint64_t sub_1CF7C8F64()
{
  return MEMORY[0x1E0DED478]();
}

uint64_t sub_1CF7C8F70()
{
  return MEMORY[0x1E0DED480]();
}

uint64_t sub_1CF7C8F7C()
{
  return MEMORY[0x1E0DED488]();
}

uint64_t sub_1CF7C8F88()
{
  return MEMORY[0x1E0DED490]();
}

uint64_t sub_1CF7C8F94()
{
  return MEMORY[0x1E0DED498]();
}

uint64_t sub_1CF7C8FA0()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t sub_1CF7C8FAC()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t sub_1CF7C8FB8()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1CF7C8FC4()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1CF7C8FD0()
{
  return MEMORY[0x1E0DED620]();
}

uint64_t sub_1CF7C8FDC()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t sub_1CF7C8FE8()
{
  return MEMORY[0x1E0DED698]();
}

uint64_t sub_1CF7C8FF4()
{
  return MEMORY[0x1E0DED6A0]();
}

uint64_t sub_1CF7C9000()
{
  return MEMORY[0x1E0DED748]();
}

uint64_t sub_1CF7C900C()
{
  return MEMORY[0x1E0DED750]();
}

uint64_t sub_1CF7C9018()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1CF7C9024()
{
  return MEMORY[0x1E0DED788]();
}

uint64_t sub_1CF7C9030()
{
  return MEMORY[0x1E0DED7A0]();
}

uint64_t sub_1CF7C903C()
{
  return MEMORY[0x1E0DED7A8]();
}

uint64_t sub_1CF7C9048()
{
  return MEMORY[0x1E0DED7B0]();
}

uint64_t sub_1CF7C9054()
{
  return MEMORY[0x1E0DED7C0]();
}

uint64_t sub_1CF7C9060()
{
  return MEMORY[0x1E0DED7C8]();
}

uint64_t sub_1CF7C906C()
{
  return MEMORY[0x1E0DED7D0]();
}

uint64_t sub_1CF7C9078()
{
  return MEMORY[0x1E0DED7D8]();
}

uint64_t sub_1CF7C9084()
{
  return MEMORY[0x1E0DED7E0]();
}

uint64_t sub_1CF7C9090()
{
  return MEMORY[0x1E0DED7F0]();
}

uint64_t sub_1CF7C909C()
{
  return MEMORY[0x1E0DED7F8]();
}

uint64_t sub_1CF7C90A8()
{
  return MEMORY[0x1E0DED800]();
}

uint64_t sub_1CF7C90B4()
{
  return MEMORY[0x1E0DED820]();
}

uint64_t sub_1CF7C90C0()
{
  return MEMORY[0x1E0DED848]();
}

uint64_t sub_1CF7C90CC()
{
  return MEMORY[0x1E0DED858]();
}

uint64_t sub_1CF7C90D8()
{
  return MEMORY[0x1E0DED860]();
}

uint64_t sub_1CF7C90E4()
{
  return MEMORY[0x1E0DED880]();
}

uint64_t sub_1CF7C90F0()
{
  return MEMORY[0x1E0DED890]();
}

uint64_t sub_1CF7C90FC()
{
  return MEMORY[0x1E0DED8C0]();
}

uint64_t sub_1CF7C9108()
{
  return MEMORY[0x1E0DED8D0]();
}

uint64_t sub_1CF7C9114()
{
  return MEMORY[0x1E0DED8D8]();
}

uint64_t sub_1CF7C9120()
{
  return MEMORY[0x1E0DED8E0]();
}

uint64_t sub_1CF7C912C()
{
  return MEMORY[0x1E0DED8F0]();
}

uint64_t sub_1CF7C9138()
{
  return MEMORY[0x1E0DED8F8]();
}

uint64_t sub_1CF7C9144()
{
  return MEMORY[0x1E0DED900]();
}

uint64_t sub_1CF7C9150()
{
  return MEMORY[0x1E0DED920]();
}

uint64_t sub_1CF7C915C()
{
  return MEMORY[0x1E0DED930]();
}

uint64_t sub_1CF7C9168()
{
  return MEMORY[0x1E0DED948]();
}

uint64_t sub_1CF7C9174()
{
  return MEMORY[0x1E0DED950]();
}

uint64_t sub_1CF7C9180()
{
  return MEMORY[0x1E0DED958]();
}

uint64_t sub_1CF7C918C()
{
  return MEMORY[0x1E0DED960]();
}

uint64_t sub_1CF7C9198()
{
  return MEMORY[0x1E0DED968]();
}

uint64_t sub_1CF7C91A4()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t sub_1CF7C91B0()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1CF7C91BC()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1CF7C91C8()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1CF7C91D4()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1CF7C91E0()
{
  return MEMORY[0x1E0DEDAF8]();
}

uint64_t sub_1CF7C91EC()
{
  return MEMORY[0x1E0DEDB00]();
}

uint64_t sub_1CF7C91F8()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1CF7C9204()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1CF7C9210()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1CF7C921C()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1CF7C9228()
{
  return MEMORY[0x1E0DEDB30]();
}

uint64_t sub_1CF7C9234()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1CF7C9240()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1CF7C924C()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1CF7C9258()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1CF7C9264()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1CF7C9270()
{
  return MEMORY[0x1E0CB26D8]();
}

uint64_t sub_1CF7C927C()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_1CF7C9288()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1CF7C9294()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1CF7C92A0()
{
  return MEMORY[0x1E0DEE8B8]();
}

uint64_t sub_1CF7C92AC()
{
  return MEMORY[0x1E0DEE8C8]();
}

uint64_t sub_1CF7C92B8()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1CF7C92C4()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1CF7C92D0()
{
  return MEMORY[0x1E0DEE978]();
}

CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f)
{
  return MEMORY[0x1E0C986A8](f);
}

Boolean CFFileSecurityGetMode(CFFileSecurityRef fileSec, mode_t *mode)
{
  return MEMORY[0x1E0C986E8](fileSec, mode);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80920](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80950](aBlock);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A50](a1, a2, *(_QWORD *)&a3, a4);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81050](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

au_asid_t audit_token_to_asid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40C0](atoken);
}

uid_t audit_token_to_auid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40D0](atoken);
}

gid_t audit_token_to_egid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40D8](atoken);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40E0](atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F0](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F8](atoken);
}

gid_t audit_token_to_rgid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE4100](atoken);
}

uid_t audit_token_to_ruid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE4108](atoken);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81760](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82690](*(_QWORD *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E00](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E40](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB0](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC0](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F98](queue, block);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83080](*(_QWORD *)&a1);
}

void free(void *a1)
{
  MEMORY[0x1E0C834B0](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83558](*(_QWORD *)&a1, a2);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF0](*(_QWORD *)&task, *(_QWORD *)&name);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E70](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE8](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84080](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C840A0](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84490](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  return MEMORY[0x1E0C844C8](a1, a2, a3, a4, a5);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84778](oslog, type);
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B08](a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x1E0C84B18](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D58](a1, a2, a3, a4);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C84FF8](*(_QWORD *)&a1, a2, a3);
}

uint64_t remote_control_attach_loopback()
{
  return MEMORY[0x1E0D86FC8]();
}

uint64_t remote_control_connect_loopback()
{
  return MEMORY[0x1E0D86FD0]();
}

uint64_t remote_control_detach_loopback()
{
  return MEMORY[0x1E0D86FD8]();
}

uint64_t remote_device_browser_cancel()
{
  return MEMORY[0x1E0D86FE8]();
}

uint64_t remote_device_copy_property()
{
  return MEMORY[0x1E0D87028]();
}

uint64_t remote_device_copy_service()
{
  return MEMORY[0x1E0D87038]();
}

uint64_t remote_device_copy_unique_of_type()
{
  return MEMORY[0x1E0D87040]();
}

uint64_t remote_device_copy_uuid()
{
  return MEMORY[0x1E0D87058]();
}

uint64_t remote_device_get_name()
{
  return MEMORY[0x1E0D87078]();
}

uint64_t remote_device_get_state()
{
  return MEMORY[0x1E0D87088]();
}

uint64_t remote_device_set_connected_callback()
{
  return MEMORY[0x1E0D870B8]();
}

uint64_t remote_device_set_disconnected_callback()
{
  return MEMORY[0x1E0D870C8]();
}

uint64_t remote_device_start_browsing()
{
  return MEMORY[0x1E0D870D0]();
}

uint64_t remote_device_start_browsing_matching()
{
  return MEMORY[0x1E0D870E0]();
}

uint64_t remote_device_type_get_description()
{
  return MEMORY[0x1E0D870F8]();
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85580](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85830](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1E0C85850](*(_QWORD *)&target_tport, *(_QWORD *)&pid, tn);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D38](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE8](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF0](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E08](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E38](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E88](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF8](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F08](xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F58](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F60](connection);
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F88](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA8](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB8](name, targetq, flags);
}

const char *__cdecl xpc_connection_get_name(xpc_connection_t connection)
{
  return (const char *)MEMORY[0x1E0C85FF8](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86028](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86040](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86050](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86078](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C0](connection, targetq);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86110](object);
}

uint64_t xpc_copy_entitlements_data_for_token()
{
  return MEMORY[0x1E0C86130]();
}

uint64_t xpc_create_from_plist()
{
  return MEMORY[0x1E0C86158]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86180](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C861A0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861B0](xdata);
}

xpc_object_t xpc_date_create(int64_t interval)
{
  return (xpc_object_t)MEMORY[0x1E0C861C0](interval);
}

uint64_t xpc_date_create_absolute()
{
  return MEMORY[0x1E0C861C8]();
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return MEMORY[0x1E0C861D8](xdate);
}

uint64_t xpc_date_get_value_absolute()
{
  return MEMORY[0x1E0C861E0]();
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861E8](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86210](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86220](original);
}

uint64_t xpc_dictionary_get_audit_token()
{
  return MEMORY[0x1E0C86250]();
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1E0C86268](xdict);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86290](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B8](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E8](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86308](xdict, key, value);
}

void xpc_dictionary_set_connection(xpc_object_t xdict, const char *key, xpc_connection_t connection)
{
  MEMORY[0x1E0C86318](xdict, key, connection);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86328](xdict, key, bytes, length);
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86338](xdict, key, value);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86350](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86368](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86388](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C863A0](xdict, key, value);
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
  MEMORY[0x1E0C863A8](xdict, key, uuid);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863C0](xdict, key, value);
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1E0C863C8](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  double result;

  MEMORY[0x1E0C863D8](xdouble);
  return result;
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F8](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86418](object1, object2);
}

uint64_t xpc_event_publisher_activate()
{
  return MEMORY[0x1E0C86430]();
}

uint64_t xpc_event_publisher_create()
{
  return MEMORY[0x1E0C86440]();
}

uint64_t xpc_event_publisher_fire()
{
  return MEMORY[0x1E0C86450]();
}

uint64_t xpc_event_publisher_fire_noboost()
{
  return MEMORY[0x1E0C86458]();
}

uint64_t xpc_event_publisher_fire_with_reply()
{
  return MEMORY[0x1E0C86468]();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return MEMORY[0x1E0C86478]();
}

uint64_t xpc_event_publisher_set_handler()
{
  return MEMORY[0x1E0C86480]();
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1E0C86498](*(_QWORD *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1E0C864A8](xfd);
}

uint64_t xpc_file_transfer_create_with_fd()
{
  return MEMORY[0x1E0C864C0]();
}

uint64_t xpc_file_transfer_get_size()
{
  return MEMORY[0x1E0C864D0]();
}

uint64_t xpc_file_transfer_write_to_fd()
{
  return MEMORY[0x1E0C864F8]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86528](object);
}

size_t xpc_hash(xpc_object_t object)
{
  return MEMORY[0x1E0C86540](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86560](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1E0C86578](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86620]();
}

uint64_t xpc_remote_connection_activate()
{
  return MEMORY[0x1E0D87360]();
}

uint64_t xpc_remote_connection_cancel()
{
  return MEMORY[0x1E0D87370]();
}

uint64_t xpc_remote_connection_create_connected_pair()
{
  return MEMORY[0x1E0D87378]();
}

uint64_t xpc_remote_connection_create_remote_service_listener()
{
  return MEMORY[0x1E0D87388]();
}

uint64_t xpc_remote_connection_create_with_remote_service()
{
  return MEMORY[0x1E0D873A0]();
}

uint64_t xpc_remote_connection_get_version_flags()
{
  return MEMORY[0x1E0D873B0]();
}

uint64_t xpc_remote_connection_send_message()
{
  return MEMORY[0x1E0D873C8]();
}

uint64_t xpc_remote_connection_send_message_with_reply()
{
  return MEMORY[0x1E0D873E0]();
}

uint64_t xpc_remote_connection_send_message_with_reply_sync()
{
  return MEMORY[0x1E0D873E8]();
}

uint64_t xpc_remote_connection_set_event_handler()
{
  return MEMORY[0x1E0D873F8]();
}

uint64_t xpc_remote_connection_set_target_queue()
{
  return MEMORY[0x1E0D87408]();
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1E0C86708]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86718](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1E0C86740](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1E0C86750](xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1E0C86798](type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867A8](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1E0C867C0](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1E0C867E8](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1E0C867F0](xuuid);
}

